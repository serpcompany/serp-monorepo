[
  {
    "owner": "flarum",
    "repo": "docs",
    "content": "TITLE: Adding Relationships to Flarum Models in PHP\nDESCRIPTION: Demonstrates how to add relationships (hasOne, belongsTo, hasMany, belongsToMany) to existing models using the Model extender. This example shows various relationship definitions for the User model.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->hasOne('phone', 'App\\Phone', 'foreign_key', 'local_key')\n        ->belongsTo('country', 'App\\Country', 'foreign_key', 'other_key')\n        ->hasMany('comment', 'App\\Comment', 'foreign_key', 'local_key')\n        ->belongsToMany('role', 'App\\Role', 'role_user', 'user_id', 'role_id')\n```\n\n----------------------------------------\n\nTITLE: Implementing Integration Tests for API Endpoints in PHP\nDESCRIPTION: This snippet demonstrates how to create integration tests for API endpoints in a Flarum extension. It includes examples of testing user search and user creation, showcasing the usage of TestCase methods for sending authenticated requests and asserting responses.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/testing.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    /**\n     * @test\n     */\n    public function can_search_users()\n    {\n        $response = $this->send(\n          $this->request('GET', '/api/users', ['authenticatedAs' => 1])\n               ->withQueryParams(['filter' => ['q' => 'john group:1'], 'sort' => 'username'])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    /**\n     * @test\n     */\n    public function can_create_user()\n    {\n        $response = $this->send(\n          $this->request(\n                'POST',\n                '/api/users',\n                [\n                    'authenticatedAs' => 1,\n                    'json' => [\n                        'data' => [\n                            'attributes' => [\n                                'username' => 'test',\n                                'password' => 'too-obscure',\n                                'email' => 'test@machine.local'\n                            ]\n                        ]\n                    ]\n                ]\n            )\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Frontend Extender in PHP\nDESCRIPTION: Example of using the Frontend extender to register JavaScript and CSS files with the forum frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/start.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Register a JavaScript and a CSS file to be delivered with the forum frontend\n(new Extend\\Frontend('forum'))\n    ->js(__DIR__.'/forum-scripts.js')\n    ->css(__DIR__.'/forum-styles.css')\n```\n\n----------------------------------------\n\nTITLE: Initializing Flarum Extension Frontend\nDESCRIPTION: Demonstrates how to set up the main entry point for a Flarum extension's frontend code, including importing core functions and adding an initializer.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extend, override } from 'flarum/common/extend';\n\napp.initializers.add('acme-flarum-hello-world', function(app) {\n  // Your Extension Code Here\n  console.log(\"EXTENSION NAME is working!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Visibility Checks with whereVisibleTo in PHP\nDESCRIPTION: Example from Flarum's PostPolicy showing how to implement visibility checks for private posts. The code allows for extensibility by using nested whereVisibleTo calls that other extensions can hook into.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Aquí queremos asegurarnos de que las publicaciones privadas no sean visibles para los usuarios por defecto.\n// La forma más simple de hacer esto sería:\n$query->where('posts.is_private', false);\n\n// Sin embargo, reconocemos que algunas extensiones podrían tener casos de uso válidos para mostrar publicaciones privadas.\n// Así que en su lugar, incluimos todos los mensajes que no son privados, Y todos los mensajes privados deseados por las extensiones. $query->where(function ($query) use ($actor) {\n    $query->where('posts.is_private', false)\n        ->orWhere(function ($query) use ($actor) {\n            $query->whereVisibleTo($actor, 'viewPrivate');\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Endpoints in Flarum\nDESCRIPTION: Examples of testing HTTP endpoints in Flarum, including GET and POST requests with authentication and data parameters.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    /**\n     * @test\n     */\n    public function can_search_users()\n    {\n        $response = $this->send(\n          $this->request('GET', '/api/users', ['authenticatedAs' => 1])\n               ->withQueryParams(['filter' => ['q' => 'john group:1'], 'sort' => 'username'])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    /**\n     * @test\n     */\n    public function can_create_user()\n    {\n        $response = $this->send(\n          $this->request(\n                'POST',\n                '/api/users',\n                [\n                    'authenticatedAs' => 1,\n                    'json' => [\n                        'data' => [\n                            'attributes' => [\n                                'username' => 'test',\n                                'password' => 'too-obscure',\n                                'email' => 'test@machine.local'\n                            ]\n                        ]\n                    ]\n                ]\n            )\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Existing API Serializers in Flarum\nDESCRIPTION: Demonstrates how to add attributes and relationships to existing serializers using the ApiSerializer extender. This example extends the UserSerializer with custom attributes and relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nreturn [\n    (new Extend\\ApiSerializer(UserSerializer::class))\n        // Un atributo a la vez\n        ->attribute('firstName', function ($serializer, $user, $attributes) {\n                return $user->first_name\n        })\n        // Múltiples modificaciones a la vez, lógica más compleja\n        ->mutate(function($serializer, $user, $attributes) {\n            $attributes['someAttribute'] = $user->someAttribute;\n            if ($serializer->getActor()->can('administrate')) {\n                $attributes['someDate'] = $serializer->formatDate($user->some_date);\n            }\n\n            return $attributes;\n        })\n        // Relaciones de la API\n        ->hasOne('phone', PhoneSerializer::class)\n        ->hasMany('comments', CommentSerializer::class),\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Integration Test Cases in Flarum\nDESCRIPTION: Example showing how to set up a Flarum integration test case with database preparation, extension loading, and custom settings. The setup method demonstrates configuring test environment including enabling dependent extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    use RetrievesAuthorizedUsers;\n\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        $this->setting('my.custom.setting', true);\n\n        // Let's assume our extension depends on tags.\n        // Note that tags will need to be in your extension's composer.json's `require-dev`.\n        // Also, make sure you include the ID of the extension currently being tested, unless you're\n        // testing the baseline without your extension.\n        $this->extension('flarum-tags', 'my-cool-extension');\n\n        // Note that this input isn't validated: make sure you're populating with valid, representative data.\n        $this->prepareDatabase([\n            'users' => [\n                $this->normalUser() // Available for convenience.\n            ],\n            'discussions' => [\n                ['id' => 1, 'title' => 'some title', 'created_at' => Carbon::now(), 'last_posted_at' => Carbon::now(), 'user_id' => 1, 'first_post_id' => 1, 'comment_count' => 1]\n            ],\n            'posts' => [\n                ['id' => 1, 'number' => 1, 'discussion_id' => 1, 'created_at' => Carbon::now(), 'user_id' => 1, 'type' => 'comment', 'content' => '<t><p>something</p></t>']\n            ]\n        ]);\n\n        // Most test cases won't need to test extenders, but if you want to, you can.\n        $this->extend((new CoolExtensionExtender)->doSomething('hello world'));\n    }\n\n    /**\n     * @test\n     */\n    public function some_phpunit_test_case()\n    {\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Frontend Assets in Flarum (PHP)\nDESCRIPTION: This snippet demonstrates how to use the Frontend extender to register JavaScript and CSS files for the forum frontend in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/start.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Frontend('forum'))\n    ->js(__DIR__.'/forum-scripts.js')\n    ->css(__DIR__.'/forum-styles.css')\n```\n\n----------------------------------------\n\nTITLE: Extending API Serializers in PHP for Flarum\nDESCRIPTION: Demonstrates using the ApiSerializer extender to add attributes and relationships to existing serializers. Shows how to add single attributes, use complex logic, and define API relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nreturn [\n    (new Extend\\ApiSerializer(UserSerializer::class))\n        // One attribute at a time\n        ->attribute('firstName', function ($serializer, $user, $attributes) {\n            return $user->first_name\n        })\n        // Multiple modifications at once, more complex logic\n        ->mutate(function($serializer, $user, $attributes) {\n            $attributes['someAttribute'] = $user->someAttribute;\n            if ($serializer->getActor()->can('administrate')) {\n                $attributes['someDate'] = $serializer->formatDate($user->some_date);\n            }\n\n            return $attributes;\n        })\n        // API relationships\n        ->hasOne('phone', PhoneSerializer::class)\n        ->hasMany('comments', CommentSerializer::class),\n]\n```\n\n----------------------------------------\n\nTITLE: Extension Custom Visibility Scoper Implementation\nDESCRIPTION: Sample implementation of a custom visibility scoper in an extension. This example shows how to allow certain users to view private posts by implementing a scoper for the 'viewPrivate' ability.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/model-visibility.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopePostVisibility\n{\n    public function __invoke(User $actor, $query)\n    {\n      if ($actor->can('posts.viewPrivate')) {\n        $query->whereRaw(\"1=1\");\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Sender in PHP\nDESCRIPTION: PHP implementation of a notification sender class that handles sending and removing notifications when posts are liked or unliked using NotificationSyncer.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Listener;\n\nuse Flarum\\Event\\ConfigureNotificationTypes;\nuse Flarum\\Likes\\Event\\PostWasLiked;\nuse Flarum\\Likes\\Event\\PostWasUnliked;\nuse Flarum\\Likes\\Notification\\PostLikedBlueprint;\nuse Flarum\\Notification\\NotificationSyncer;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nclass SendNotificationWhenPostIsLiked\n{\n    protected $notifications;\n\n    public function __construct(NotificationSyncer $notifications)\n    {\n        $this->notifications = $notifications;\n    }\n\n    public function subscribe(Dispatcher $events)\n    {\n        $events->listen(PostWasLiked::class, [$this, 'whenPostWasLiked']);\n        $events->listen(PostWasUnliked::class, [$this, 'whenPostWasUnliked']);\n    }\n\n    public function whenPostWasLiked(PostWasLiked $event)\n    {\n        $this->syncNotification($event->post, $event->user, [$event->post->user]);\n    }\n\n    public function whenPostWasUnliked(PostWasUnliked $event)\n    {\n        $this->syncNotification($event->post, $event->user, []);\n    }\n\n    public function syncNotification(Post $post, User $user, array $recipients)\n    {\n        if ($post->user->id != $user->id) {\n            $this->notifications->sync(\n                new PostLikedBlueprint($post, $user),\n                $recipients\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatically Calling API Endpoints with Dependency Injection in PHP\nDESCRIPTION: Demonstrates how to programmatically call an API endpoint using dependency injection to access the JsonApi object when Context is not available.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\JsonApi;\n\npublic function __construct(\n    protected JsonApi $api \n) {\n}\n\npublic function handle(): void\n{\n    $group = $api->forResource(GroupResource::class)\n        ->forEndpoint('create')\n        ->process(\n            body: [\n                'data' => [\n                    'attributes' => [\n                        'nameSingular' => 'test group',\n                        'namePlural' => 'test groups',\n                        'color' => '#000000',\n                        'icon' => 'fas fa-crown',\n                    ]\n                ],\n            ],\n            options: ['actor' => User::find(1)]\n        )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom PHP Serializer for Flarum API\nDESCRIPTION: This snippet demonstrates how to create a custom serializer class for converting Eloquent models to JSON:API format in Flarum, including defining the resource type and default attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\AbstractSerializer;\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nclass DiscussionSerializer extends AbstractSerializer\n{\n    protected $type = 'discussions';\n\n    protected function getDefaultAttributes($discussion)\n    {\n        return [\n            'title' => $discussion->title,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Eloquent Relationship in PHP\nDESCRIPTION: This code snippet demonstrates how to define a custom Eloquent relationship (e.g., morphMany, morphToMany) on a Flarum model using the `relationship` method of the Model extender.  It showcases how to return any valid Eloquent relationship within a closure, allowing for finer-grained customization.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->relationship('mobile', 'App\\Phone', function ($user) {\n            // Return any Eloquent relationship here.\n            return $user->belongsToMany(Discussion::class, 'recipients')\n                ->withTimestamps()\n                ->wherePivot('removed_at', null);\n        })\n```\n\n----------------------------------------\n\nTITLE: Mutating Existing Sort Columns in PHP\nDESCRIPTION: Demonstrates how to modify an existing sort column in a Flarum API resource using the sort method.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Resource;\nuse Flarum\\Api\\Sort\\SortColumn;\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\ApiResource(Resource\\UserResource::class))\n        ->sort('createdAt', function (SortColumn $sort) {\n            return $sort->column('created_at');\n        }),\n];\n\n```\n\n----------------------------------------\n\nTITLE: Extending and Overriding Flarum Components\nDESCRIPTION: Demonstrates using 'extend' and 'override' utilities to modify the HeaderPrimary component, adding new items and conditionally modifying its output.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend.md#2025-04-16_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend, override } from 'flarum/common/extend';\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport CustomComponentClass from './components/CustomComponentClass';\n\n// Here, we add an item to the returned ItemList. We are using a custom component\n// as discussed above. We've also specified a priority as the third argument,\n// which will be used to order these items. Note that we don't need to return anything.\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add(\n    'google',\n    <CustomComponentClass>\n      <a href=\"https://google.com\">Google</a>\n    </CustomComponentClass>,\n    5\n  );\n});\n\n// Here, we conditionally use the original output of a method,\n// or create our own ItemList, and then add an item to it.\n// Note that we MUST return our custom output.\noverride(HeaderPrimary.prototype, 'items', function(original) {\n  let items;\n\n  if (someArbitraryCondition) {\n    items = original();\n  } else {\n    items = new ItemList();\n  }\n\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n\n  return items;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Tag Policy in PHP\nDESCRIPTION: Shows an example of a custom policy for Tags, demonstrating how to implement authorization logic for starting discussions and adding tags to discussions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/authorization.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\Access\\AbstractPolicy;\nuse Flarum\\User\\User;\n\nclass TagPolicy extends AbstractPolicy\n{\n    /**\n     * @param User $actor\n     * @param Tag $tag\n     * @return bool|null\n     */\n    public function startDiscussion(User $actor, Tag $tag)\n    {\n        if ($tag->is_restricted) {\n            return $actor->hasPermission('tag'.$tag->id.'.startDiscussion') ? $this->allow() : $this->deny();\n        }\n    }\n\n    /**\n     * @param User $actor\n     * @param Tag $tag\n     * @return bool|null\n     */\n    public function addToDiscussion(User $actor, Tag $tag)\n    {\n        return $this->startDiscussion($actor, $tag);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum Testing Package with CLI\nDESCRIPTION: Command to add backend testing infrastructure using Flarum CLI tool\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra backendTesting\n```\n\n----------------------------------------\n\nTITLE: Programmatically Calling API Endpoints with Context in PHP\nDESCRIPTION: Shows how to programmatically execute an API endpoint's logic internally using the Flarum\\Api\\JsonApi object with a Context object, as demonstrated with creating a first post in a discussion.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n/** @var JsonApi $api */\n$api = $context->api;\n\n/** @var Post $post */\n$post = $api->forResource(PostResource::class)\n    ->forEndpoint('create')\n    ->withRequest($context->request)\n    ->process([\n        'data' => [\n            'attributes' => [\n                'content' => Arr::get($context->body(), 'data.attributes.content'),\n            ],\n            'relationships' => [\n                'discussion' => [\n                    'data' => [\n                        'type' => 'discussions',\n                        'id' => (string) $model->id,\n                    ],\n                ],\n            ],\n        ],\n    ], ['isFirstPost' => true]);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Relationship Inclusion in PHP\nDESCRIPTION: Demonstrates how to include relationships by default in API responses using the 'defaultInclude' method.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Endpoint;\n\npublic function endpoints(): array\n{\n    return [\n        Endpoint\\Index::make()\n            ->defaultInclude(['parent']),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Frontend Components in Flarum Extensions (JavaScript)\nDESCRIPTION: This snippet demonstrates how to make classes or functions from your extension available to other extensions. It shows the proper pattern for exporting components from your extension's main JavaScript file while also initializing your extension.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/extensibility.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\napp.initializers.add('your-extension-id', () => {\n  // Your Extension Code Here\n})\n\nexport {\n  // Put all the stuff you want to export here.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Component in Flarum with JSX\nDESCRIPTION: Example implementation of a form component in Flarum using various form components like FieldSet, Button, and Switch. Demonstrates how to manage form state and handle submissions.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/forms.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/common/Component';\nimport Form from 'flarum/common/Form';\nimport FieldSet from 'flarum/common/components/FieldSet';\nimport Button from 'flarum/common/components/Button';\nimport Switch from 'flarum/common/components/Switch';\n\nclass FormComponent extends Component {\n  oninit(vnode) {\n    this.textInput = \"\";\n    this.booleanInput = false;\n  }\n\n  view() {\n    return (\n      <form onsubmit={this.onsubmit.bind(this)}>\n        <Form>\n          <FieldSet label={app.translator.trans('fake-extension.form.fieldset_label')}>\n            <input className=\"FormControl\" value={this.textInput} oninput={e => this.textInput = e.target.value}>\n            </input>\n            <Switch state={this.booleanInput} onchange={val => this.booleanInput = val}>\n            </Switch>\n          </FieldSet>\n          <Button type=\"submit\">{app.translator.trans('core.admin.basics.submit_button')}</Button>\n        </Form>\n      </form>\n    )\n  }\n\n  onsubmit() {\n    // Some form handling logic here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Extension in Flarum\nDESCRIPTION: This code snippet initializes a Flarum extension and sets up the necessary export structure. The initializer function is defined inside the app.initializers.add method, which registers the extension with the Flarum app upon boot. Additionally, it demonstrates how to export functions or classes from the extension for use by other extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/extensibility.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('your-extension-id', () => {\n  // Your Extension Code Here\n})\n\nexport {\n  // Put all the stuff you want to export here.\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend Integration Testing with Mithril in Flarum\nDESCRIPTION: Example of integration tests for the Alert component in Flarum. The tests verify that the component correctly renders various configurations including icons, titles, and dismissible functionality.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport Alert from '../../../../src/common/components/Alert';\nimport m from 'mithril';\nimport mq from 'mithril-query';\nimport { jest } from '@jest/globals';\n\ndescribe('Alert displays as expected', () => {\n  it('should display alert messages with an icon', () => {\n    const alert = mq(m(Alert, { type: 'error' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toHaveElement('i.icon');\n  });\n\n  it('should display alert messages with a custom icon when using a title', () => {\n    const alert = mq(Alert, { type: 'error', icon: 'fas fa-users', title: 'Woops..' });\n    expect(alert).toContainRaw('Woops..');\n    expect(alert).toHaveElement('i.fas.fa-users');\n  });\n\n  it('should display alert messages with a title', () => {\n    const alert = mq(m(Alert, { type: 'error', title: 'Error Title' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toContainRaw('Error Title');\n    expect(alert).toHaveElement('.Alert-title');\n  });\n\n  it('should display alert messages with custom controls', () => {\n    const alert = mq(Alert, { type: 'error', controls: [m('button', { className: 'Button--test' }, 'Click me!')] });\n    expect(alert).toHaveElement('button.Button--test');\n  });\n});\n\ndescribe('Alert is dismissible', () => {\n  it('should show dismiss button', function () {\n    const alert = mq(m(Alert, { dismissible: true }, 'Shoot!'));\n    expect(alert).toHaveElement('button.Alert-dismiss');\n  });\n\n  it('should call ondismiss when dismiss button is clicked', function () {\n    const ondismiss = jest.fn();\n    const alert = mq(Alert, { dismissible: true, ondismiss });\n    alert.click('.Alert-dismiss');\n    expect(ondismiss).toHaveBeenCalled();\n  });\n\n  it('should not be dismissible if not chosen', function () {\n    const alert = mq(Alert, { type: 'error', dismissible: false });\n    expect(alert).not.toHaveElement('button.Alert-dismiss');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Hello World Extension Implementation\nDESCRIPTION: Basic example showing how to modify the forum's frontend document using an extender to inject a JavaScript alert.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/start.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\nuse Flarum\\Frontend\\Document;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->content(function (Document $document) {\n            $document->head[] = '<script>alert(\"Hello, world!\")</script>';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Creating an Access Token with Flarum REST API\nDESCRIPTION: Example of how to create an access token using the /api/token endpoint with user credentials. The response includes the token and userId which can be used for subsequent API requests.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/rest-api.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"identification\": \"Toby\",\n    \"password\": \"pass7word\"\n}\n\nHTTP/1.1 200 OK\n\n{\n    \"token\": \"YACub2KLfe8mfmHPcUKtt6t2SMJOGPXnZbqhc3nX\",\n    \"userId\": \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Extend and Override Implementation\nDESCRIPTION: Comprehensive example showing how to use extend and override utilities to modify HeaderPrimary component with custom components and conditional logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend, override } from 'flarum/common/extend';\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport CustomComponentClass from './components/CustomComponentClass';\n\n// Here, we add an item to the returned ItemList. We are using a custom component\n// as discussed above. We've also specified a priority as the third argument,\n// which will be used to order these items. Note that we don't need to return anything.\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add(\n    'google',\n    <CustomComponentClass>\n      <a href=\"https://google.com\">Google</a>\n    </CustomComponentClass>,\n    5\n  );\n});\n\n// Here, we conditionally use the original output of a method,\n// or create our own ItemList, and then add an item to it.\n// Note that we MUST return our custom output.\noverride(HeaderPrimary.prototype, 'items', function(original) {\n  let items;\n\n  if (someArbitraryCondition) {\n    items = original();\n  } else {\n    items = new ItemList();\n  }\n\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n\n  return items;\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Group and User Permissions in PHP\nDESCRIPTION: Code examples showing common permission-related methods available on Flarum Group and User models. Demonstrates how to check permissions, access permission relations, and enumerate user permissions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// An Eloquent relation to the group's permissions\n$group->permissions();\n\n// Check if a group has a permission\n$group->hasPermission('viewForum');\n\n// Enumerate all the user's permissions\n$user->getPermissions();\n\n// Check if the user is in a group with the given permission\n$user->hasPermission('viewForum');\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Models with TypeScript\nDESCRIPTION: Demonstrates how to add attributes and relationships to existing models using the Model extender in TypeScript. Shows adding a string attribute, a hasOne, and a hasMany relationship with proper typing.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n  new Extend.Model(Discussion)\n    .attribute<string>('slug')\n    .hasOne<User>('user')\n    .hasMany<Post>('posts')\n```\n\n----------------------------------------\n\nTITLE: Rendering Blade Templates in Flarum using Laravel Blade in PHP\nDESCRIPTION: This PHP snippet shows how to render Blade templates to strings in a Flarum extension. It uses Laravel's view factory to generate HTML using `make` and `render` methods. The view factory can be accessed via dependency injection, and it takes the namespace and name of the view as parameters. Optionally, variables can be passed to the view as an associative array.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/views.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, $view is of type `Illuminate\\Contracts\\View\\Factory`\n$renderedString = $view->make('acme.hello-world::greeting')->render();\n\n// You can also pass variables to the view:\n$renderedString = $view->make('acme.hello-world::greeting', ['varName' => true])->render();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flarum Integration Test Case in PHP\nDESCRIPTION: Example of setting up a Flarum integration test case with database preparation, extension enabling, and custom settings. It demonstrates the use of various TestCase methods and the RetrievesAuthorizedUsers trait.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    use RetrievesAuthorizedUsers;\n\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        $this->setting('my.custom.setting', true);\n\n        $this->extension('flarum-tags', 'my-cool-extension');\n\n        $this->prepareDatabase([\n            'users' => [\n                $this->normalUser()\n            ],\n            'discussions' => [\n                ['id' => 1, 'title' => 'some title', 'created_at' => Carbon::now(), 'last_posted_at' => Carbon::now(), 'user_id' => 1, 'first_post_id' => 1, 'comment_count' => 1]\n            ],\n            'posts' => [\n                ['id' => 1, 'number' => 1, 'discussion_id' => 1, 'created_at' => Carbon::now(), 'user_id' => 1, 'type' => 'comment', 'content' => '<t><p>something</p></t>']\n            ]\n        ]);\n\n        $this->extend((new CoolExtensionExtender)->doSomething('hello world'));\n    }\n\n    /**\n     * @test\n     */\n    public function some_phpunit_test_case()\n    {\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Integration Test Example (TypeScript)\nDESCRIPTION: This snippet presents an integration test using Jest, TypeScript, and Mithril Query for the `Alert` component. It renders the component with different properties (type, icon, title, controls, dismissible) and uses Mithril Query's methods (`toContainRaw`, `toHaveElement`) to assert that the component renders correctly.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/testing.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport Alert from '../../../../src/common/components/Alert';\nimport m from 'mithril';\nimport mq from 'mithril-query';\nimport { jest } from '@jest/globals';\n\ndescribe('Alert displays as expected', () => {\n  it('should display alert messages with an icon', () => {\n    const alert = mq(m(Alert, { type: 'error' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toHaveElement('i.icon');\n  });\n\n  it('should display alert messages with a custom icon when using a title', () => {\n    const alert = mq(Alert, { type: 'error', icon: 'fas fa-users', title: 'Woops..' });\n    expect(alert).toContainRaw('Woops..');\n    expect(alert).toHaveElement('i.fas.fa-users');\n  });\n\n  it('should display alert messages with a title', () => {\n    const alert = mq(m(Alert, { type: 'error', title: 'Error Title' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toContainRaw('Error Title');\n    expect(alert).toHaveElement('.Alert-title');\n  });\n\n  it('should display alert messages with custom controls', () => {\n    const alert = mq(Alert, { type: 'error', controls: [m('button', { className: 'Button--test' }, 'Click me!')] });\n    expect(alert).toHaveElement('button.Button--test');\n  });\n});\n\ndescribe('Alert is dismissible', () => {\n  it('should show dismiss button', function () {\n    const alert = mq(m(Alert, { dismissible: true }, 'Shoot!'));\n    expect(alert).toHaveElement('button.Alert-dismiss');\n  });\n\n  it('should call ondismiss when dismiss button is clicked', function () {\n    const ondismiss = jest.fn();\n    const alert = mq(Alert, { dismissible: true, ondismiss });\n    alert.click('.Alert-dismiss');\n    expect(ondismiss).toHaveBeenCalled();\n  });\n\n  it('should not be dismissible if not chosen', function () {\n    const alert = mq(Alert, { type: 'error', dismissible: false });\n    expect(alert).not.toHaveElement('button.Alert-dismiss');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Visibility Scoping in Flarum (PHP)\nDESCRIPTION: This snippet demonstrates how to apply visibility scoping in Flarum using the `whereVisibleTo` method. It shows how to construct a query for visible groups, apply visibility scoping to an existing query, and apply visibility scoping with a specific ability.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\n// Construct and execute a query for all groups that a given user can see.\n$groups = Group::whereVisibleTo($actor)->get();\n\n// Apply visibility scoping to an existing query.\nMore eloquent filters can be added after this.\n$query\n  ->whereVisibleTo($actor)\n  ->whereRaw('1=1');\n\n// Apply visibility scoping with an ability\n$query\n  ->whereVisibleTo($actor, 'someAbility')\n```\n\n----------------------------------------\n\nTITLE: Adding Relationships to Existing Backend Models in PHP\nDESCRIPTION: This code shows how to add various types of relationships (hasOne, belongsTo, hasMany, belongsToMany) to an existing User model using the Model extender in Flarum's backend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnew Extend\\Model(User::class)\n    ->hasOne('phone', 'App\\Phone', 'foreign_key', 'local_key')\n    ->belongsTo('country', 'App\\Country', 'foreign_key', 'other_key')\n    ->hasMany('comment', 'App\\Comment', 'foreign_key', 'local_key')\n    ->belongsToMany('role', 'App\\Role', 'role_user', 'user_id', 'role_id')\n```\n\n----------------------------------------\n\nTITLE: Extending API Controllers in PHP for Flarum\nDESCRIPTION: Uses the ApiController extender to customize existing API controllers. Demonstrates setting serializers, includes, limits, sorting, and adding custom logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillGetData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->setSerializer(MyDiscussionSerializer::class)\n        ->addInclude('user')\n        ->addOptionalInclude('posts')\n        ->setLimit(20)\n        ->setMaxLimit(50)\n        ->setSort(['name' => 'asc'])\n        ->addSortField('firstName')\n        ->prepareDataQuery(function ($controller) {\n            // Add custom logic here to modify the controller\n            // before data queries are executed.\n        })\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Interfaces for AbstractResource in PHP\nDESCRIPTION: Shows how to implement necessary interfaces for CRUD operations when extending AbstractResource class.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Resource\\Contracts\\{\n    Countable,\n    Creatable,\n    Deletable,\n    Findable,\n    Listable,\n    Paginatable,\n    Updatable\n};\n\nclass CustomResource extends AbstractResource implements\n    Findable, // Show endpoint\n    Listable, // Index endpoint\n    Countable, // Optional for Index endpoints total result count\n    Paginatable, // Optional if paginating Index endpoint results\n    Creatable, // Create endpoint\n    Updatable, // Update endpoint\n    Deletable // Delete endpoint\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Relationships to Backend Models with PHP\nDESCRIPTION: Examples of adding various types of Eloquent relationships (hasOne, belongsTo, hasMany, belongsToMany) to existing models using the Model extender in Flarum. These methods allow extending existing models with standard Laravel relationship types.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->hasOne('phone', 'App\\Phone', 'foreign_key', 'local_key')\n        ->belongsTo('country', 'App\\Country', 'foreign_key', 'other_key')\n        ->hasMany('comment', 'App\\Comment', 'foreign_key', 'local_key')\n        ->belongsToMany('role', 'App\\Role', 'role_user', 'user_id', 'role_id')\n```\n\n----------------------------------------\n\nTITLE: Defining API Routes in Flarum\nDESCRIPTION: This code snippet demonstrates how to define API routes for common operations (listing, showing, creating, updating, and deleting) using the `Extend\\Routes` extender in Flarum.  It associates specific URIs with controller classes for each operation, enabling access to resources via the Flarum API. The route names must be unique.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n    (new Extend\\Routes('api'))\n        ->get('/tags', 'tags.index', ListTagsController::class)\n        ->get('/tags/{id}', 'tags.show', ShowTagController::class)\n        ->post('/tags', 'tags.create', CreateTagController::class)\n        ->patch('/tags/{id}', 'tags.update', UpdateTagController::class)\n        ->delete('/tags/{id}', 'tags.delete', DeleteTagController::class)\n?>\n```\n\n----------------------------------------\n\nTITLE: Extending Flarum API Controller Using PHP Extender\nDESCRIPTION: This snippet shows how to use the ApiController extender to customize various aspects of an existing API controller, including serializer, includes, limits, and sorting.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillGetData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->setSerializer(MyDiscussionSerializer::class)\n        ->addInclude('user')\n        ->addOptionalInclude('posts')\n        ->setLimit(20)\n        ->setMaxLimit(50)\n        ->setSort(['name' => 'asc'])\n        ->addSortField('firstName')\n        ->prepareDataQuery(function ($controller) {\n            // Add custom logic here to modify the controller\n            // before data queries are executed.\n        })\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Flarum Installation Settings in PHP\nDESCRIPTION: This PHP code snippet demonstrates the structure of the config.php file for Flarum. It includes settings for debug mode, database connection, URL, and path configurations. The file is crucial for Flarum's functionality and cannot be modified through the admin dashboard.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/config.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php return array (\n  'debug' => false, // enables or disables debug mode, used to troubleshoot issues\n  'offline' => false, // none, high, low or safe.\n  'database' =>\n  array (\n    'driver' => 'mysql', // the database driver, i.e. MySQL, MariaDB, PostgreSQL, SQLite\n    'host' => 'localhost', // the host of the connection, localhost in most cases unless using an external service\n    'database' => 'flarum', // the name of the database in the instance\n    'username' => 'root', // database username\n    'password' => '', // database password\n    'charset' => 'utf8mb4',\n    'collation' => 'utf8mb4_unicode_ci',\n    'prefix' => '', // the prefix for the tables, useful if you are sharing the same database with another service\n    'port' => '3306', // the port of the connection, defaults to 3306 with MySQL\n    'strict' => false,\n  ),\n  'url' => 'https://flarum.localhost', // the URL installation, you will want to change this if you change domains\n  'paths' =>\n  array (\n    'api' => 'api', // /api goes to the API\n    'admin' => 'admin', // /admin goes to the admin\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Discussion Page Route Resolver in Flarum\nDESCRIPTION: A custom route resolver that handles discussion page navigation and post scrolling. It maintains consistent route keys for the same discussion regardless of the current post position and implements automatic scrolling when navigating between posts in the same discussion.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend-pages.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport DefaultResolver from '../../common/resolvers/DefaultResolver';\n\n/**\n * This isn't exported as it is a temporary measure.\n * A more robust system will be implemented alongside UTF-8 support in beta 15.\n */\nfunction getDiscussionIdFromSlug(slug: string | undefined) {\n  if (!slug) return;\n  return slug.split('-')[0];\n}\n\n/**\n * A custom route resolver for DiscussionPage that generates the same key to all posts\n * on the same discussion. It triggers a scroll when going from one post to another\n * in the same discussion.\n */\nexport default class DiscussionPageResolver extends DefaultResolver {\n  static scrollToPostNumber: number | null = null;\n\n  makeKey() {\n    const params = { ...m.route.param() };\n    if ('near' in params) {\n      delete params.near;\n    }\n    params.id = getDiscussionIdFromSlug(params.id);\n    return this.routeName.replace('.near', '') + JSON.stringify(params);\n  }\n\n  onmatch(args, requestedPath, route) {\n    if (route.includes('/d/:id') && getDiscussionIdFromSlug(args.id) === getDiscussionIdFromSlug(m.route.param('id'))) {\n      DiscussionPageResolver.scrollToPostNumber = parseInt(args.near);\n    }\n\n    return super.onmatch(args, requestedPath, route);\n  }\n\n  render(vnode) {\n    if (DiscussionPageResolver.scrollToPostNumber !== null) {\n      const number = DiscussionPageResolver.scrollToPostNumber;\n      // Scroll after a timeout to avoid clashes with the render.\n      setTimeout(() => app.current.get('stream').goToNumber(number));\n      DiscussionPageResolver.scrollToPostNumber = null;\n    }\n\n    return super.render(vnode);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flarum config.php Structure and Configuration Options in PHP\nDESCRIPTION: This PHP configuration file defines essential settings for a Flarum installation including debug mode, maintenance mode, database connection details, site URL, and API/admin paths. This file must be present in the root directory and indicates Flarum has been installed.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/config.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php return array (\n  'debug' => false, // enables or disables debug mode, used to troubleshoot issues\n  'offline' => false, // enables or disables site maintenance mode. This makes your site inaccessible to all users (including admins).\n  'database' =>\n  array (\n    'driver' => 'mysql', // the database driver, i.e. MySQL, MariaDB...\n    'host' => 'localhost', // the host of the connection, localhost in most cases unless using an external service\n    'database' => 'flarum', // the name of the database in the instance\n    'username' => 'root', // database username\n    'password' => '', // database password\n    'charset' => 'utf8mb4',\n    'collation' => 'utf8mb4_unicode_ci',\n    'prefix' => '', // the prefix for the tables, useful if you are sharing the same database with another service\n    'port' => '3306', // the port of the connection, defaults to 3306 with MySQL\n    'strict' => false,\n  ),\n  'url' => 'https://flarum.localhost', // the URL installation, you will want to change this if you change domains\n  'paths' =>\n  array (\n    'api' => 'api', // /api goes to the API\n    'admin' => 'admin', // /admin goes to the admin\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Group and User Permissions in PHP\nDESCRIPTION: This snippet demonstrates common methods for checking permissions on group and user objects in Flarum. It includes retrieving a group's permissions, checking if a group has a specific permission, enumerating a user's permissions, and checking if a user has a specific permission.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// An Eloquent relation to the group's permissions\n$group->permissions();\n\n// Check if a group has a permission\n$group->hasPermission('viewForum');\n\n// Enumerate all the user's permissions\n$user->getPermissions();\n\n// Check if the user is in a group with the given permission\n$user->hasPermission('viewForum');\n```\n\n----------------------------------------\n\nTITLE: Setting up Entry Point Files for Flarum Extension\nDESCRIPTION: Example of admin.js and forum.js entry point files that export all content from their respective source directories. These files serve as the root of the frontend JavaScript for a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// admin.js\nexport * from './src/admin';\n\n// forum.js\nexport * from './src/forum';\n```\n\n----------------------------------------\n\nTITLE: Defining a New Flarum Frontend Model in Javascript\nDESCRIPTION: This code snippet demonstrates how to define a new Flarum frontend model by extending the `Model` class. It shows how to define resource attributes and relationships using the `Model.attribute`, `Model.hasOne`, and `Model.hasMany` methods.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport Model from 'flarum/common/Model';\n\nexport default class Tag extends Model {\n  title = Model.attribute('title');\n  createdAt = Model.attribute('createdAt', Model.transformDate);\n  parent = Model.hasOne('parent');\n  discussions = Model.hasMany('discussions');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up a test case\nDESCRIPTION: This code snippet demonstrates how to set up a test case in Flarum using PHPUnit. It shows how to override settings, enable extensions, prepare the database, and use extenders before running tests. It also includes an example of a simple PHPUnit test case.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    use RetrievesAuthorizedUsers;\n\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        $this->setting('my.custom.setting', true);\n\n        // Let's assume our extension depends on tags.\n        // Note that tags will need to be in your extension's composer.json's `require-dev`.\n        // Also, make sure you include the ID of the extension currently being tested, unless you're\n        // testing the baseline without your extension.\n        $this->extension('flarum-tags', 'my-cool-extension');\n\n        // Note that this input isn't validated: make sure you're populating with valid, representative data.\n        $this->prepareDatabase([\n            'users' => [\n                $this->normalUser() // Available for convenience.\n            ],\n            'discussions' => [\n                ['id' => 1, 'title' => 'some title', 'created_at' => Carbon::now(), 'last_posted_at' => Carbon::now(), 'user_id' => 1, 'first_post_id' => 1, 'comment_count' => 1]\n            ],\n            'posts' => [\n                ['id' => 1, 'number' => 1, 'discussion_id' => 1, 'created_at' => Carbon::now(), 'user_id' => 1, 'type' => 'comment', 'content' => '<t><p>something</p></t>']\n            ]\n        ]);\n\n        // Most test cases won't need to test extenders, but if you want to, you can.\n        $this->extend((new CoolExtensionExtender)->doSomething('hello world'));\n    }\n\n    /**\n     * @test\n     */\n    public function some_phpunit_test_case()\n    {\n        // ...\n    }\n\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Modal with Flarum in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to create a custom modal by extending the base Modal component of Flarum. It details how to use custom CSS, provide content for the modal's title and body, and add form processing logic if required. Ensure Flarum's core Modal component is installed as a dependency.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/interactive-components.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Modal from 'flarum/common/components/Modal';\n\nexport default class CustomModal extends Modal {\n  // True by default, dictates whether the modal can be dismissed by clicking on the background or in the top right corner.\n  static isDismissible = true;\n\n  className() {\n    // Custom CSS classes to apply to the modal\n    return 'custom-modal-class';\n  }\n\n  title() {\n    // Content to show in the modal's title bar\n    return <p>Custom Modal</p>;\n  }\n\n  content() {\n    // Content to show in the modal's body\n    return <p>Hello World!</p>;\n  }\n\n  onsubmit() {\n    // If your modal contains a form, you can add form processing logic here.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Model Using Flarum CLI\nDESCRIPTION: Commands for automatically creating frontend and backend models using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/models.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend model\n$ flarum-cli make frontend model\n```\n\n----------------------------------------\n\nTITLE: Complex Header Modification Example using extend and override\nDESCRIPTION: Comprehensive example showing how to modify Flarum's header using both extend and override utilities, including adding custom components and conditional logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend, override } from 'flarum/common/extend';\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport CustomComponentClass from './components/CustomComponentClass';\n\n// Here, we add an item to the returned ItemList. We are using a custom component\n// as discussed above. We've also specified a priority as the third argument,\n// which will be used to order these items. Note that we don't need to return anything.\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add(\n    'google',\n    <CustomComponentClass>\n      <a href=\"https://google.com\">Google</a>\n    </CustomComponentClass>,\n    5\n  );\n});\n\n// Here, we conditionally use the original output of a method,\n// or create our own ItemList, and then add an item to it.\n// Note that we MUST return our custom output.\noverride(HeaderPrimary.prototype, 'items', function(original) {\n  let items;\n\n  if (someArbitraryCondition) {\n    items = original();\n  } else {\n    items = new ItemList();\n  }\n\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n\n  return items;\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a New API Resource in PHP\nDESCRIPTION: Demonstrates how to register a new API resource in Flarum using the ApiResource extender.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Api\\LabelResource;\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\ApiResource(LabelResource::class)),\n]\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Mithril.js Component\nDESCRIPTION: Demonstrates how to create a custom Counter component using Flarum's Component class, including lifecycle methods and event handling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/Component';\n\nclass Counter extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.count = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        Count: {this.count}\n        <button onclick={e => this.count++}>\n          {this.attrs.buttonLabel}\n        </button>\n      </div>\n    );\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    // En realidad no estamos haciendo nada aquí, pero este sería\n    // un buen lugar para adjuntar manejadores de eventos, inicializar librerías\n    // como sortable, o hacer otras modificaciones en el DOM.\n    $element = this.$();\n    $button = this.$('button');\n  }\n}\n\nm.mount(document.body, <MyComponent buttonLabel=\"Increment\" />);\n```\n\n----------------------------------------\n\nTITLE: Checking Group and User Permissions in PHP\nDESCRIPTION: This snippet demonstrates various methods to check and retrieve permissions for groups and users in Flarum. It includes examples of querying group permissions, checking specific permissions for groups and users, and listing all permissions for a user.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Una relación elocuente con los permisos del grupo\n$group->permissions();\n\n// Comprobar si un grupo tiene un permiso\n$group->hasPermission('viewForum');\n\n// Enumerar todos los permisos del usuario\n$user->getPermissions();\n\n// Comprueba si el usuario está en un grupo con el permiso dado\n$user->hasPermission('viewForum');\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag Visibility Scoper - PHP\nDESCRIPTION: This snippet defines a scoper for the `Tag` model that restricts visibility based on the user's 'viewForum' permission. It utilizes Laravel's Eloquent Builder to modify the query accordingly.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeTagVisibility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     */\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->whereIn('id', function ($query) use ($actor) {\n            Tag::query()->setQuery($query->from('tags'))->whereHasPermission($actor, 'viewForum')->select('tags.id');\n        });\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Filter and Mutator in Flarum\nDESCRIPTION: This code snippet demonstrates how to register a custom filter and filter mutator using Flarum's Filter extender. It adds the CountryFilter and OnlySameCountryFilterMutator to the UserFilterer.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\Filter(UserFilterer::class))\n    ->addFilter(CountryFilter::class)\n    ->addFilterMutator(OnlySameCountryFilterMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listeners in PHP\nDESCRIPTION: Demonstrates how to use the Event extender to register event listeners in Flarum, including both callback functions and listener classes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->listen(Deleted::class, function($event) {\n            // do something here\n        })\n        ->listen(Deleted::class, PostDeletedListener::class)\n];\n```\n\nLANGUAGE: php\nCODE:\n```\nclass PostDeletedListener\n{\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    public function handle(Deleted $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Endpoints to API Resources in PHP\nDESCRIPTION: Demonstrates how to add custom endpoints to an existing Flarum API resource using the endpoints method, along with variations for adding endpoints at specific positions (before, after, beforeAll).\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Context;\nuse Flarum\\Api\\Resource;\nuse Flarum\\Api\\Endpoint;\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\ApiResource(Resource\\UserResource::class))\n        ->endpoints(fn () => [\n            Endpoint\\Endpoint::make('custom')\n                ->route('GET', '/{id}/custom')\n                ->action(function (Context $context) {\n                    $user = $context->model;\n                    \n                    // logic...\n                }),\n        ])\n        ->endpointsBefore('show', fn () => [\n            Endpoint\\Endpoint::make('customBeforeShow')\n                ->route('GET', '/customBeforeShow')\n                ->action(function (Context $context) {\n                    // logic ...\n                }),\n        ])\n        ->endpointsAfter('show', fn () => [\n            Endpoint\\Endpoint::make('customAfterShow')\n                ->route('GET', '/customAfterShow')\n                ->action(function (Context $context) {\n                    // logic ...\n                }),\n        ])\n        ->endpointsBeforeAll(fn () => [\n            Endpoint\\Endpoint::make('customBeforeAll')\n                ->route('GET', '/customBeforeAll')\n                ->action(function (Context $context) {\n                    // logic ...\n                }),\n        ])\n];\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Eager Loading for Endpoints in PHP\nDESCRIPTION: Demonstrates how to set up eager loading for relationships using 'eagerLoad', 'eagerLoadWhenIncluded', and 'eagerLoadWhere' methods.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Endpoint;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\npublic function endpoints(): array\n{\n    return [\n        Endpoint\\Index::make()\n            // will always eager load the parent relation.\n            ->eagerLoad(['parent']), \n            // will eager load the parent.user relation only when parent is included in the API response.\n            ->eagerLoadWhenIncluded(['parent' => ['parent.user']])\n            // will eager load the parent relation only when the parent is active.\n            ->eagerLoadWhere('parent', function (Builder $query) {\n                $query->where('is_active', true);\n            }),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Draft Resource Schema and Endpoints in PHP\nDESCRIPTION: Implements the DraftResource class with field definitions, endpoint configurations, and lifecycle hooks for creating and updating drafts.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass DraftResource extends Resource\\AbstractDatabaseResource\n{\n    public function type(): string\n    {\n        return 'drafts';\n    }\n\n    public function model(): string\n    {\n        return Draft::class;\n    }\n\n    public function endpoints(): array\n    {\n        return [\n            Endpoint\\Create::make()\n                ->authenticated()\n                ->can('user.saveDrafts')\n                ->defaultInclude(['user']),\n            Endpoint\\Update::make()\n                ->authenticated()\n                ->can('user.saveDrafts')\n                ->visible(fn (Draft $draft, Context $context) => $context->getActor()->id === $draft->user_id),\n            Endpoint\\Delete::make()\n                ->authenticated()\n                ->visible(fn (Draft $draft, Context $context) => $context->getActor()->id === $draft->user_id),\n        ];\n    }\n\n    public function fields(): array\n    {\n        return [\n            Schema\\Str::make('title')\n                ->nullable()\n                ->writable(),\n            Schema\\Str::make('content')\n                ->nullable()\n                ->writable(),\n            Schema\\Arr::make('extra')\n                ->nullable()\n                ->writable(),\n            Schema\\Str::make('scheduledValidationError'),\n            Schema\\DateTime::make('scheduledFor')\n                ->nullable()\n                ->writable(function (Draft $draft, Context $context) {\n                    return $context->getActor()->can('user.scheduleDrafts');\n                }),\n            Schema\\DateTime::make('updatedAt'),\n            Schema\\Boolean::make('clearValidationError')\n                ->writable(),\n                ->set(function (Draft $draft, bool $value) {\n                    if ($value) {\n                        $draft->scheduled_validation_error = '';\n                    }\n                }),\n            Schema\\Relationship\\ToOne::make('user')\n                ->includable()\n                ->inverse('drafts')\n                ->type('users'),\n        ];\n    }\n\n    public function creating(object $model, OriginalContext $context): ?object\n    {\n        $model->user_id = $context->getActor()->id;\n        $model->ip_address = $context->request->getAttribute('ipAddress');\n        $model->updated_at = Carbon::now();\n\n        return $model;\n    }\n\n    public function updating(object $model, OriginalContext $context): ?object\n    {\n        $model->ip_address = $context->request->getAttribute('ipAddress');\n        $model->updated_at = Carbon::now();\n\n        return $model;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Eloquent Relationships in PHP\nDESCRIPTION: Demonstrates how to add relationships to existing models using the Model extender. Shows examples of hasOne, belongsTo, hasMany, and belongsToMany relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->hasOne('phone', 'App\\Phone', 'foreign_key', 'local_key')\n        ->belongsTo('country', 'App\\Country', 'foreign_key', 'other_key')\n        ->hasMany('comment', 'App\\Comment', 'foreign_key', 'local_key')\n        ->belongsToMany('role', 'App\\Role', 'role_user', 'user_id', 'role_id')\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Frontend Models in Flarum\nDESCRIPTION: Demonstrates how to add attributes and relationships to existing frontend models using the Model extender in TypeScript.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n  new Extend.Model(Discussion)\n    .attribute<string>('slug')\n    .hasOne<User>('user')\n    .hasMany<Post>('posts')\n```\n\n----------------------------------------\n\nTITLE: Integration Testing Flarum Frontend Components\nDESCRIPTION: Shows how to perform integration testing on a Flarum frontend component (Alert) using Jest and mithril-query, covering various component behaviors and interactions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport Alert from '../../../../src/common/components/Alert';\nimport m from 'mithril';\nimport mq from 'mithril-query';\nimport { jest } from '@jest/globals';\n\ndescribe('Alert displays as expected', () => {\n  it('should display alert messages with an icon', () => {\n    const alert = mq(m(Alert, { type: 'error' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toHaveElement('i.icon');\n  });\n\n  it('should display alert messages with a custom icon when using a title', () => {\n    const alert = mq(Alert, { type: 'error', icon: 'fas fa-users', title: 'Woops..' });\n    expect(alert).toContainRaw('Woops..');\n    expect(alert).toHaveElement('i.fas.fa-users');\n  });\n\n  it('should display alert messages with a title', () => {\n    const alert = mq(m(Alert, { type: 'error', title: 'Error Title' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toContainRaw('Error Title');\n    expect(alert).toHaveElement('.Alert-title');\n  });\n\n  it('should display alert messages with custom controls', () => {\n    const alert = mq(Alert, { type: 'error', controls: [m('button', { className: 'Button--test' }, 'Click me!')] });\n    expect(alert).toHaveElement('button.Button--test');\n  });\n});\n\ndescribe('Alert is dismissible', () => {\n  it('should show dismiss button', function () {\n    const alert = mq(m(Alert, { dismissible: true }, 'Shoot!'));\n    expect(alert).toHaveElement('button.Alert-dismiss');\n  });\n\n  it('should call ondismiss when dismiss button is clicked', function () {\n    const ondismiss = jest.fn();\n    const alert = mq(Alert, { dismissible: true, ondismiss });\n    alert.click('.Alert-dismiss');\n    expect(ondismiss).toHaveBeenCalled();\n  });\n\n  it('should not be dismissible if not chosen', function () {\n    const alert = mq(Alert, { type: 'error', dismissible: false });\n    expect(alert).not.toHaveElement('button.Alert-dismiss');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listeners in Flarum Extensions\nDESCRIPTION: Example showing how to register event listeners using the Event extender in a Flarum extension's bootstrap file. Demonstrates both function and class-based listener registration.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/backend-events.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->listen(Deleted::class, function($event) {\n            // do something here\n        })\n        ->listen(Deleted::class, PostDeletedListener::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Route Resolvers in Flarum\nDESCRIPTION: Example of a custom route resolver implementation that extends DefaultResolver to handle discussion posts navigation and scrolling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport DefaultResolver from '../../common/resolvers/DefaultResolver';\n\n/**\n * This isn't exported as it is a temporary measure.\n * A more robust system will be implemented alongside UTF-8 support in beta 15.\n */\nfunction getDiscussionIdFromSlug(slug: string | undefined) {\n  if (!slug) return;\n  return slug.split('-')[0];\n}\n\n/**\n * A custom route resolver for DiscussionPage that generates the same key to all posts\n * on the same discussion. It triggers a scroll when going from one post to another\n * in the same discussion.\n */\nexport default class DiscussionPageResolver extends DefaultResolver {\n  static scrollToPostNumber: number | null = null;\n\n  makeKey() {\n    const params = { ...m.route.param() };\n    if ('near' in params) {\n      delete params.near;\n    }\n    params.id = getDiscussionIdFromSlug(params.id);\n    return this.routeName.replace('.near', '') + JSON.stringify(params);\n  }\n\n  onmatch(args, requestedPath, route) {\n    if (route.includes('/d/:id') && getDiscussionIdFromSlug(args.id) === getDiscussionIdFromSlug(m.route.param('id'))) {\n      DiscussionPageResolver.scrollToPostNumber = parseInt(args.near);\n    }\n\n    return super.onmatch(args, requestedPath, route);\n  }\n\n  render(vnode) {\n    if (DiscussionPageResolver.scrollToPostNumber !== null) {\n      const number = DiscussionPageResolver.scrollToPostNumber;\n      // Scroll after a timeout to avoid clashes with the render.\n      setTimeout(() => app.current.get('stream').goToNumber(number));\n      DiscussionPageResolver.scrollToPostNumber = null;\n    }\n\n    return super.render(vnode);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integration Test Example for Alert Component\nDESCRIPTION: Example of integration tests for the Alert component, testing rendering and interaction\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport Alert from '../../../../src/common/components/Alert';\nimport m from 'mithril';\nimport mq from 'mithril-query';\nimport { jest } from '@jest/globals';\n\ndescribe('Alert displays as expected', () => {\n  it('should display alert messages with an icon', () => {\n    const alert = mq(m(Alert, { type: 'error' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toHaveElement('i.icon');\n  });\n\n  it('should display alert messages with a custom icon when using a title', () => {\n    const alert = mq(Alert, { type: 'error', icon: 'fas fa-users', title: 'Woops..' });\n    expect(alert).toContainRaw('Woops..');\n    expect(alert).toHaveElement('i.fas.fa-users');\n  });\n\n  it('should display alert messages with a title', () => {\n    const alert = mq(m(Alert, { type: 'error', title: 'Error Title' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toContainRaw('Error Title');\n    expect(alert).toHaveElement('.Alert-title');\n  });\n\n  it('should display alert messages with custom controls', () => {\n    const alert = mq(Alert, { type: 'error', controls: [m('button', { className: 'Button--test' }, 'Click me!')] });\n    expect(alert).toHaveElement('button.Button--test');\n  });\n});\n\ndescribe('Alert is dismissible', () => {\n  it('should show dismiss button', function () {\n    const alert = mq(m(Alert, { dismissible: true }, 'Shoot!'));\n    expect(alert).toHaveElement('button.Alert-dismiss');\n  });\n\n  it('should call ondismiss when dismiss button is clicked', function () {\n    const ondismiss = jest.fn();\n    const alert = mq(Alert, { dismissible: true, ondismiss });\n    alert.click('.Alert-dismiss');\n    expect(ondismiss).toHaveBeenCalled();\n  });\n\n  it('should not be dismissible if not chosen', function () {\n    const alert = mq(Alert, { type: 'error', dismissible: false });\n    expect(alert).not.toHaveElement('button.Alert-dismiss');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining API Routes for JSON:API Resources in Flarum\nDESCRIPTION: Shows how to add five standard JSON:API routes (index, show, create, update, delete) for a resource type using the Routes extender. This example creates routes for a 'tags' resource.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Routes('api'))\n        ->get('/tags', 'tags.index', ListTagsController::class)\n        ->get('/tags/{id}', 'tags.show', ShowTagController::class)\n        ->post('/tags', 'tags.create', CreateTagController::class)\n        ->patch('/tags/{id}', 'tags.update', UpdateTagController::class)\n        ->delete('/tags/{id}', 'tags.delete', DeleteTagController::class)\n```\n\n----------------------------------------\n\nTITLE: Defining Migration Structure in PHP\nDESCRIPTION: Example of a basic migration file structure in Flarum, with up and down functions for modifying the database schema.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Schema\\Builder;\n\nreturn [\n    'up' => function (Builder $schema) {\n        // up migration\n    },\n    'down' => function (Builder $schema) {\n        // down migration\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from API using Flarum's Frontend Store\nDESCRIPTION: Demonstrates how to use Flarum's frontend store to retrieve resources from the API using the find method, which returns promises. The examples show fetching collections with parameters and specific resources by ID.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// GET /api/discussions?sort=createdAt\napp.store.find('discussions', {sort: 'createdAt'}).then(console.log);\n\n// GET /api/discussions/123\napp.store.find('discussions', 123).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Filters and Mutators with Flarum's Extender API\nDESCRIPTION: This code snippet shows how to register a custom filter and filter mutator using Flarum's Filter extender. This connects the custom filtering components to the UserFilterer class in the Flarum extension system.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\Filter(UserFilterer::class))\n    ->addFilter(CountryFilter::class)\n    ->addFilterMutator(OnlySameCountryFilterMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: Implementing a Form Modal in Flarum\nDESCRIPTION: Example of creating a modal with form submission capabilities by extending FormModal. This demonstrates how to handle form submissions in a modal dialog.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/interactive-components.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport FormModal from 'flarum/common/components/FormModal';\n\nexport default class CustomFormModal extends FormModal {\n  // True by default, dictates whether the modal can be dismissed by clicking on the background or in the top right corner.\n  static isDismissible = true;\n\n  className() {\n    // Custom CSS classes to apply to the modal\n    return 'custom-modal-class';\n  }\n\n  title() {\n    // Content to show in the modal's title bar\n    return <p>Custom Modal</p>;\n  }\n\n  content() {\n    // Content to show in the modal's body\n    return <p>Hello World!</p>;\n  }\n\n  onsubmit() {\n    // If your modal contains a form, you can add form processing logic here.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending API Serializers\nDESCRIPTION: Demonstrates how to extend existing serializers with additional attributes and relationships using the ApiSerializer extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nreturn [\n    (new Extend\\ApiSerializer(UserSerializer::class))\n        // One attribute at a time\n        ->attribute('firstName', function ($serializer, $user, $attributes) {\n            return $user->first_name\n        })\n        // Multiple modifications at once, more complex logic\n        ->mutate(function($serializer, $user, $attributes) {\n            $attributes['someAttribute'] = $user->someAttribute;\n            if ($serializer->getActor()->can('administrate')) {\n                $attributes['someDate'] = $serializer->formatDate($user->some_date);\n            }\n\n            return $attributes;\n        })\n        // API relationships\n        ->hasOne('phone', PhoneSerializer::class)\n        ->hasMany('comments', CommentSerializer::class),\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Relationship Types in Flarum Models\nDESCRIPTION: Shows how to define complex relationships using the relationship method of the Model extender. This example demonstrates creating a custom relationship with additional constraints for the User model.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->relationship('mobile', 'App\\Phone', function ($user) {\n            // Devuelve aquí cualquier relación Eloquent.\n            return $user->belongsToMany(Discussion::class, 'recipients')\n                ->withTimestamps()\n                ->wherePivot('removed_at', null);\n        })\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Search Gambit in Flarum\nDESCRIPTION: This snippet demonstrates how to create a custom search gambit for filtering users by country in Flarum. It extends the AbstractRegexGambit class and implements the required methods to match the 'country:' search pattern and apply the corresponding query conditions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Search\\AbstractRegexGambit;\nuse Flarum\\Search\\SearchState;\n\nclass CountryGambit extends AbstractRegexGambit\n{\n    public function getGambitPattern(): string\n    {\n        return 'country:(.+)';\n    }\n\n    public function conditions(SearchState $search, array $matches, bool $negate)\n    {\n        $country = trim($matches[1], '\"');\n\n        $search->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Policies in Flarum's extend.php\nDESCRIPTION: Shows how to register both model-based and global policies in Flarum's extend.php file using the Policy extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/authorization.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Tags\\Tag;\nuse YourNamespace\\Access;\n\nreturn [\n  // Other extenders\n  (new Extend\\Policy())\n    ->modelPolicy(Tag::class, Access\\TagPolicy::class)\n    ->globalPolicy(Access\\GlobalPolicy::class),\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Including Relationships in JSON:API Controllers\nDESCRIPTION: Shows how to include related resources when listing, showing, or creating a resource. This snippet demonstrates specifying default and optional includes and using them to eager-load relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n    // Las relaciones que se incluyen por defecto.\n    public $include = ['user'];\n    \n    // Otras relaciones que están disponibles para ser incluidas.\n    public $optionalInclude = ['discussions'];\n\n$relations = $this->extractInclude($request);\n\nreturn Tag::all()->load($relations);\n```\n\n----------------------------------------\n\nTITLE: Basic Authorization Checks in PHP\nDESCRIPTION: Examples of common authorization checks including can/cannot verifications, assertions, and permission checks using the User class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/authorization.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Check whether a user can perform an action.\n$canDoSomething = $actor->can('viewForum');\n\n// Check whether a user can perform an action on a subject.\n$canDoSomething = $actor->can('reply', $discussion);\n\n// Raise a PermissionDeniedException if a user cannot perform an action.\n$actor->assertCan('viewForum');\n$actor->assertCan('reply', $discussion);\n\n// Raise a NotAuthenticatedException if the user is not logged in.\n$actor->assertRegistered();\n\n// Raise a PermissionDeniedException if the user is not an admin.\n$actor->assertAdmin();\n\n// Check whether one of the user's groups have a permission.\n// WARNING: this should be used with caution, as it doesn't actually\n// run through the authorization process, so it doesn't account for policies.\n// It is, however, useful in implementing custom policies.\n$actorHasPermission = $actor->hasPermission(`viewForum`);\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Component in JSX\nDESCRIPTION: Example of creating a notification component for new posts in Flarum using JSX. Shows implementation of icon, href, and content methods for notification display.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/notifications.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Notification from 'flarum/forum/components/Notification';\nimport username from 'flarum/common/helpers/username';\n\nexport default class NewPostNotification extends Notification {\n  icon() {\n    return 'fas fa-star';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n    const discussion = notification.subject();\n    const content = notification.content() || {};\n\n    return app.route.discussion(discussion, content.postNumber);\n  }\n\n  content() {\n    return app.translator.trans('flarum-subscriptions.forum.notifications.new_post_text', {user: this.attrs.notification.fromUser()});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Frontend Extension Classes and Functions\nDESCRIPTION: Demonstrates how to export classes, functions, and other resources from a Flarum extension's frontend, allowing other extensions to reuse or modify them\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/extensibility.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('your-extension-id', () => {\n  // Your Extension Code Here\n})\n\nexport {\n  // Put all the stuff you want to export here.\n}\n```\n\n----------------------------------------\n\nTITLE: Using Authorization Methods with User Objects in PHP\nDESCRIPTION: This snippet demonstrates the core authorization methods available on the User class in Flarum, including permission checks, assertions, and validation of user privileges.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/authorization.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Check whether a user can perform an action.\n$canDoSomething = $actor->can('viewForum');\n\n// Check whether a user can perform an action on a subject.\n$canDoSomething = $actor->can('reply', $discussion);\n\n// Raise a PermissionDeniedException if a user cannot perform an action.\n$actor->assertCan('viewForum');\n$actor->assertCan('reply', $discussion);\n\n// Raise a NotAuthenticatedException if the user is not logged in.\n$actor->assertRegistered();\n\n// Raise a PermissionDeniedException if the user is not an admin.\n$actor->assertAdmin();\n\n// Check whether one of the user's groups have a permission.\n// WARNING: this should be used with caution, as it doesn't actually\n// run through the authorization process, so it doesn't account for policies.\n// It is, however, useful in implementing custom policies.\n$actorHasPermission = $actor->hasPermission(`viewForum`);\n```\n\n----------------------------------------\n\nTITLE: Registering API Routes in PHP\nDESCRIPTION: Demonstrates how to register standard CRUD API endpoints using the Routes extender in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Routes('api'))\n    ->get('/tags', 'tags.index', ListTagsController::class)\n    ->get('/tags/{id}', 'tags.show', ShowTagController::class)\n    ->post('/tags', 'tags.create', CreateTagController::class)\n    ->patch('/tags/{id}', 'tags.update', UpdateTagController::class)\n    ->delete('/tags/{id}', 'tags.delete', DeleteTagController::class)\n```\n\n----------------------------------------\n\nTITLE: Extending API Controllers in PHP for Flarum\nDESCRIPTION: Illustrates how to customize existing API controllers in Flarum using the ApiController extender, including setting serializers, includes, limits, and sorting options.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillGetData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->setSerializer(MyDiscussionSerializer::class)\n        ->addInclude('user')\n        ->addOptionalInclude('posts')\n        ->setLimit(20)\n        ->setMaxLimit(50)\n        ->setSort(['name' => 'asc'])\n        ->addSortField('firstName')\n        ->prepareDataQuery(function ($controller) {\n            // Add custom logic here to modify the controller\n            // before data queries are executed.\n        })\n]\n```\n\n----------------------------------------\n\nTITLE: Automatically Create Serializer with Flarum CLI\nDESCRIPTION: This command uses the Flarum CLI to automatically create a new API serializer. The CLI simplifies the process of generating necessary files and adhering to Flarum's conventions for API serialization.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/api.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend api-serializer\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Relationships to Flarum Models\nDESCRIPTION: Demonstrates how to add custom Eloquent relationships to Flarum models using the relationship method. This approach allows for more complex relationships like morphMany or relationships with additional query constraints.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->relationship('mobile', 'App\\\\Phone', function ($user) {\n            // Devuelve aquí cualquier relación Eloquent.\n            return $user->belongsToMany(Discussion::class, 'recipients')\n                ->withTimestamps()\n                ->wherePivot('removed_at', null);\n        })\n```\n\n----------------------------------------\n\nTITLE: Fetching Discussions with Flarum REST API\nDESCRIPTION: Example response from fetching discussions endpoint, showing the JSON:API structure including pagination links, discussion data with attributes and relationships, and included related resources.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"links\": {\n    \"first\": \"https://flarum.tld/api/discussions\",\n    \"next\": \"https://flarum.tld/api/discussions?page%5Boffset%5D=20\"\n  },\n  \"data\": [\n    {\n      \"type\": \"discussions\",\n      \"id\": \"234\",\n      \"attributes\": {\n        \"title\": \"Lorem Ipsum\",\n        \"slug\": \"234-lorem-ipsum\",\n        \"commentCount\": 10,\n        \"participantCount\": 3,\n        \"createdAt\": \"2022-01-01T10:20:30+00:00\",\n        \"lastPostedAt\": \"2022-01-05T10:20:30+00:00\",\n        \"lastPostNumber\": 10,\n        \"canReply\": true,\n        \"canRename\": true,\n        \"canDelete\": true,\n        \"canHide\": true,\n        \"isHidden\": true,\n        \"hiddenAt\": \"2022-01-06T10:20:30+00:00\",\n        \"lastReadAt\": \"2022-01-02T10:20:30+00:00\",\n        \"lastReadPostNumber\": 2,\n        \"isApproved\": true,\n        \"canTag\": true,\n        \"isLocked\": false,\n        \"canLock\": true,\n        \"isSticky\": false,\n        \"canSticky\": true,\n        \"canMerge\": true,\n        \"subscription\": null\n      },\n      \"relationships\": {\n        \"user\": {\n          \"data\": {\n            \"type\": \"users\",\n            \"id\": \"1\"\n          }\n        },\n        \"lastPostedUser\": {\n          \"data\": {\n            \"type\": \"users\",\n            \"id\": \"64\"\n          }\n        },\n        \"tags\": {\n          \"data\": [\n            {\n              \"type\": \"tags\",\n              \"id\": \"3\"\n            }\n          ]\n        },\n        \"firstPost\": {\n          \"data\": {\n            \"type\": \"posts\",\n            \"id\": \"668\"\n          }\n        }\n      }\n    },\n    {\n      \"type\": \"discussions\",\n      \"id\": \"234\",\n      \"attributes\": {\n        // [...]\n      },\n      \"relationships\": {\n        // [...]\n      }\n    },\n    // [...] more discussions\n  ],\n  \"included\": [\n    {\n      \"type\": \"users\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"username\": \"Admin\",\n        \"displayName\": \"Admin\",\n        \"avatarUrl\": null,\n        \"slug\": \"1\"\n      }\n    },\n    {\n      \"type\": \"users\",\n      \"id\": \"64\",\n      \"attributes\": {\n        \"username\": \"Flarum\",\n        \"displayName\": \"Flarum\",\n        \"avatarUrl\": \"https://flarum.tld/assets/avatars/Z4hEncw0ndVqZ8be.png\",\n        \"slug\": \"64\"\n      }\n    },\n    {\n      \"type\": \"tags\",\n      \"id\": \"3\",\n      \"attributes\": {\n        \"name\": \"Welcome\",\n        \"description\": \"Post interesting things here\",\n        \"slug\": \"welcome\",\n        \"color\": \"#888\",\n        \"backgroundUrl\": null,\n        \"backgroundMode\": null,\n        \"icon\": \"fas fa-bullhorn\",\n        \"discussionCount\": 30,\n        \"position\": 1,\n        \"defaultSort\": null,\n        \"isChild\": false,\n        \"isHidden\": false,\n        \"lastPostedAt\": \"2022-01-05T10:20:30+00:00\",\n        \"canStartDiscussion\": true,\n        \"canAddToDiscussion\": true,\n        \"isRestricted\": false\n      }\n    },\n    {\n      \"type\": \"posts\",\n      \"id\": \"668\",\n      \"attributes\": {\n        \"number\": 1,\n        \"createdAt\": \"2022-01-01T10:20:30+00:00\",\n        \"contentType\": \"comment\",\n        \"contentHtml\": \"<p>Hello World</p>\"\n      }\n    },\n    // [...] more includes for the other discussions\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Including Relations in Flarum API Responses\nDESCRIPTION: Shows how to include related resources in API responses by specifying default and optional includes in API controllers. This enables eager loading of relationships for better performance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n    // Las relaciones que se incluyen por defecto.\n    public $include = ['user'];\n    \n    // Otras relaciones que están disponibles para ser incluidas.\n    public $optionalInclude = ['discussions'];\n```\n\n----------------------------------------\n\nTITLE: Basic PHP Authorization Usage Examples\nDESCRIPTION: Shows common authorization checks in PHP including permission verification, assertions, and group membership checks. Demonstrates core User class authorization methods.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/authorization.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Check whether a user can perform an action.\n$canDoSomething = $actor->can('viewForum');\n\n// Check whether a user can perform an action on a subject.\n$canDoSomething = $actor->can('reply', $discussion);\n\n// Raise a PermissionDeniedException if a user cannot perform an action.\n$actor->assertCan('viewForum');\n$actor->assertCan('reply', $discussion);\n\n// Raise a NotAuthenticatedException if the user is not logged in.\n$actor->assertRegistered();\n\n// Raise a PermissionDeniedException if the user is not an admin.\n$actor->assertAdmin();\n\n// Check whether one of the user's groups have a permission.\n// WARNING: this should be used with caution, as it doesn't actually\n// run through the authorization process, so it doesn't account for policies.\n// It is, however, useful in implementing custom policies.\n$actorHasPermission = $actor->hasPermission(`viewForum`);\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Serializers in Flarum (PHP)\nDESCRIPTION: Demonstrates how to extend existing serializers in Flarum using the ApiSerializer extender. This includes adding attributes, relationships, and applying complex modifications to the serialized data.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nreturn [\n    (new Extend\\ApiSerializer(UserSerializer::class))\n        // One attribute at a time\n        ->attribute('firstName', function ($serializer, $user, $attributes) {\n            return $user->first_name\n        })\n        // Multiple modifications at once, more complex logic\n        ->mutate(function($serializer, $user, $attributes) {\n            $attributes['someAttribute'] = $user->someAttribute;\n            if ($serializer->getActor()->can('administrate')) {\n                $attributes['someDate'] = $serializer->formatDate($user->some_date);\n            }\n\n            return $attributes;\n        })\n        // API relationships\n        ->hasOne('phone', PhoneSerializer::class)\n        ->hasMany('comments', CommentSerializer::class),\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Page Component in JavaScript\nDESCRIPTION: A simple example showing how to extend the Page component to create a custom page in Flarum. This demonstrates the basic structure required to implement a custom frontend page.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/frontend-pages.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Page from 'flarum/common/components/Page';\n\n\nexport default class CustomPage extends Page {\n  view() {\n    return <p>Hello!</p>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Authorization Methods in PHP\nDESCRIPTION: Demonstrates how to use Flarum's User class methods to check permissions, assert capabilities, and verify user permissions in various contexts.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/authorization.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Check whether a user can perform an action.\n$canDoSomething = $actor->can('viewForum');\n\n// Check whether a user can perform an action on a subject.\n$canDoSomething = $actor->can('reply', $discussion);\n\n// Raise a PermissionDeniedException if a user cannot perform an action.\n$actor->assertCan('viewForum');\n$actor->assertCan('reply', $discussion);\n\n// Raise a NotAuthenticatedException if the user is not logged in.\n$actor->assertRegistered();\n\n// Raise a PermissionDeniedException if the user is not an admin.\n$actor->assertAdmin();\n\n// Check whether one of the user's groups have a permission.\n// WARNING: this should be used with caution, as it doesn't actually\n// run through the authorization process, so it doesn't account for policies.\n// It is, however, useful in implementing custom policies.\n$actorHasPermission = $actor->hasPermission(`viewForum`);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Service Provider in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to create a custom Service Provider in Flarum by extending AbstractServiceProvider. It includes both register and boot methods for container configuration and application logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/service-provider.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Foundation\\AbstractServiceProvider;\nuse Illuminate\\Contracts\\Container\\Container;\n\nclass CustomServiceProvider extends AbstractServiceProvider\n{\n    public function register()\n    {\n        // custom logic here, for example:\n        $this->container->resolving(SomeClass::class, function ($container) {\n            return new SomeClass($container->make('some.binding'));\n        });\n    }\n\n    public function boot(Container $container)\n    {\n        // custom logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from Flarum API in JavaScript\nDESCRIPTION: Demonstrates how to fetch resources from the Flarum API using the store's find method, which returns a promise. Shows examples for fetching multiple resources and a single resource by ID.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// GET /api/discussions?sort=createdAt\napp.store.find('discussions', {sort: 'createdAt'}).then(console.log);\n\n// GET /api/discussions/123\napp.store.find('discussions', 123).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Installing Jest and Configuring Frontend Testing in Flarum\nDESCRIPTION: Step-by-step instructions for setting up Jest configuration, adding testing scripts, and preparing the project for frontend testing\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra frontendTesting\n$ yarn add --dev @flarum/jest-config\n```\n\n----------------------------------------\n\nTITLE: Extending Serializers with Flarum\nDESCRIPTION: This snippet demonstrates how to extend existing API serializers in Flarum by adding attributes and defining relationships. It uses the `ApiSerializer` extender to modify or add attributes and set up relationships between different resources.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/api.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nreturn [\n    (new Extend\\ApiSerializer(UserSerializer::class))\n        // One attribute at a time\n        ->attribute('firstName', function ($serializer, $user, $attributes) {\n            return $user->first_name\n        })\n        // Multiple modifications at once, more complex logic\n        ->mutate(function($serializer, $user, $attributes) {\n            $attributes['someAttribute'] = $user->someAttribute;\n            if ($serializer->getActor()->can('administrate')) {\n                $attributes['someDate'] = $serializer->formatDate($user->some_date);\n            }\n\n            return $attributes;\n        })\n        // API relationships\n        ->hasOne('phone', PhoneSerializer::class)\n        ->hasMany('comments', CommentSerializer::class),\n]\n```\n\n----------------------------------------\n\nTITLE: Registering API Routes in PHP\nDESCRIPTION: Example showing how to register the five standard REST API endpoints (list, show, create, update, delete) for a tags resource using Flarum's Routes extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Routes('api'))\n        ->get('/tags', 'tags.index', ListTagsController::class)\n        ->get('/tags/{id}', 'tags.show', ShowTagController::class)\n        ->post('/tags', 'tags.create', CreateTagController::class)\n        ->patch('/tags/{id}', 'tags.update', UpdateTagController::class)\n        ->delete('/tags/{id}', 'tags.delete', DeleteTagController::class)\n```\n\n----------------------------------------\n\nTITLE: Serializing Settings to Forum Frontend in PHP for Flarum Extensions\nDESCRIPTION: This code snippet shows how to use the Settings extender to serialize specific settings for use in the forum frontend. It demonstrates both simple serialization and serialization with custom logic and default values.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n   (new Extend\\Settings)\n      ->serializeToForum('myCoolSetting', 'my.cool.setting.key')\n      ->serializeToForum('myCoolSettingModified', 'my.cool.setting.key', function ($retrievedValue) {\n        // This third argument is optional, and allows us to pass the retrieved setting through some custom logic.\n        // In this example, we'll append a string to it.\n\n        return \"My Cool Setting: $retrievedValue\";\n      }, \"default value!\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Testing with Jest in Flarum\nDESCRIPTION: Explains how to set up Jest for frontend testing in Flarum extensions. Includes package.json configuration, Jest config file setup, and TypeScript configuration if applicable.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"scripts\": {\n    ...,\n    \"test\": \"yarn node --experimental-vm-modules $(yarn bin jest)\"\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('@flarum/jest-config')();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"include\": [\"tests/**/*\"],\n  \"files\": [\"../../../node_modules/@flarum/jest-config/shims.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Endpoints in PHP\nDESCRIPTION: Shows how to define custom endpoints using the Endpoint\\Endpoint class, including specifying routes, actions, and custom responses.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Endpoint;\n\npublic function endpoints(): array\n{\n    return [\n        Endpoint\\Endpoint::make('activate')\n            ->route('POST', '/{id}/activate')\n            ->action(function (Context $context) {\n                $label = $context->model;\n                $label->isActive = true;\n                $label->save();\n                \n                return $label;\n            }),\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Endpoint;\n\npublic function endpoints(): array\n{\n    return [\n        Endpoint\\Endpoint::make('activate')\n            ->route('POST', '/{id}/activate')\n            ->action(function (Context $context) {\n                return ['information' => 'test'];\n            })\n            ->response(function (Context $context, array $results) {\n                // $results is the return value of the action method.\n            \n                return new Response(204);\n            })\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic API Resource Type in PHP\nDESCRIPTION: Example of defining the basic structure of an API resource in Flarum, including the type and model methods.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Resource\\AbstractDatabaseResource;\n\nclass LabelResource extends AbstractDatabaseResource\n{\n    public function type(): string\n    {\n        return 'labels';\n    }\n\n    public function model(): string\n    {\n        return Label::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Relationships to Existing Models in PHP\nDESCRIPTION: Demonstrates how to add various types of relationships (hasOne, belongsTo, hasMany, belongsToMany) to existing Flarum models using the Model extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnew Extend\\Model(User::class)\n    ->hasOne('phone', 'App\\Phone', 'foreign_key', 'local_key')\n    ->belongsTo('country', 'App\\Country', 'foreign_key', 'other_key')\n    ->hasMany('comment', 'App\\Comment', 'foreign_key', 'local_key')\n    ->belongsToMany('role', 'App\\Role', 'role_user', 'user_id', 'role_id')\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Serializers for JSON:API in Flarum\nDESCRIPTION: Shows how to create a custom serializer that extends AbstractSerializer to convert Eloquent models into JSON:API format, defining resource type and default attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\AbstractSerializer;\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nclass DiscussionSerializer extends AbstractSerializer\n{\n    protected $type = 'discussions';\n\n    protected function getDefaultAttributes($discussion)\n    {\n        return [\n            'title' => $discussion->title,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Flarum Component (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a custom Flarum component extending the base Component class, including lifecycle methods and event handling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/common/Component';\n\nclass Counter extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.count = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        Count: {this.count}\n        <button onclick={e => this.count++}>\n          {this.attrs.buttonLabel}\n        </button>\n      </div>\n    );\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    // We aren't actually doing anything here, but this would\n    // be a good place to attach event handlers, initialize libraries\n    // like sortable, or make other DOM modifications.\n    $element = this.$();\n    $button = this.$('button');\n  }\n}\n\nm.mount(document.body, <MyComponent buttonLabel=\"Increment\" />);\n```\n\n----------------------------------------\n\nTITLE: Registering Frontend Model\nDESCRIPTION: Demonstrates how to register a new model with the store using the Store extender.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/models.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Store()\n    .add('tags', Tag),\n];\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications in Flarum's Backend using PHP\nDESCRIPTION: This PHP code demonstrates how to send and remove notifications in Flarum's backend. It uses the NotificationSyncer to sync notifications for post likes and unlikes, and includes event listeners for PostWasLiked and PostWasUnliked events.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Listener;\n\nuse Flarum\\Event\\ConfigureNotificationTypes;\nuse Flarum\\Likes\\Event\\PostWasLiked;\nuse Flarum\\Likes\\Event\\PostWasUnliked;\nuse Flarum\\Likes\\Notification\\PostLikedBlueprint;\nuse Flarum\\Notification\\NotificationSyncer;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nclass SendNotificationWhenPostIsLiked\n{\n    protected $notifications;\n\n    public function __construct(NotificationSyncer $notifications)\n    {\n        $this->notifications = $notifications;\n    }\n\n    public function subscribe(Dispatcher $events)\n    {\n        $events->listen(PostWasLiked::class, [$this, 'whenPostWasLiked']);\n        $events->listen(PostWasUnliked::class, [$this, 'whenPostWasUnliked']);\n    }\n\n    public function whenPostWasLiked(PostWasLiked $event)\n    {\n        $this->syncNotification($event->post, $event->user, [$event->post->user]);\n    }\n\n    public function whenPostWasUnliked(PostWasUnliked $event)\n    {\n        $this->syncNotification($event->post, $event->user, []);\n    }\n\n    public function syncNotification(Post $post, User $user, array $recipients)\n    {\n        if ($post->user->id != $user->id) {\n            $this->notifications->sync(\n                new PostLikedBlueprint($post, $user),\n                $recipients\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ApiController Extender with Eager Loading in PHP\nDESCRIPTION: Example of using the ApiController extender to add includes and eager loading for discussion tags. This helps solve N+1 query performance issues by specifying relations that should be eager loaded.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    (new Extend\\ApiController(FlarumController\\ListDiscussionsController::class))\n        ->addInclude(['tags', 'tags.state', 'tags.parent'])\n        ->load('tags'),\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Flarum's Formatter with TextFormatter Extension Points\nDESCRIPTION: Example of using Flarum's Formatter extender to configure the TextFormatter library, modify text during parsing, and customize XML before rendering. This demonstrates the three main extension points of the formatting system.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/formatting.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse s9e\\TextFormatter\\Configurator;\nuse s9e\\TextFormatter\\Parser;\nuse s9e\\TextFormatter\\Renderer;\n\nreturn [\n    (new Extend\\Formatter)\n        // Add custom text formatter configuration\n        ->configure(function (Configurator $config) {\n            $config->BBCodes->addFromRepository('B');\n        })\n        // Modify raw text before it is parsed.\n        // This callback should return the modified text.\n        ->parse(function (Parser $parser, $context, $text) {\n            // custom logic here\n            return $newText;\n        })\n        // Modify the XML to be rendered before rendering.\n        // This callback should return the new XML.\n        // For example, in the mentions extension, this is used to\n        // provide the username and display name of the user being mentioned.\n        // Make sure that the last $request argument is nullable (or omitted entirely).\n        ->render(function (Renderer $renderer, $context, $xml, Request $request = null) {\n            // custom logic here\n            return $newXml;\n        })\n];\n\n```\n\n----------------------------------------\n\nTITLE: Defining Eloquent Relationships in PHP\nDESCRIPTION: This code snippet demonstrates how to define Eloquent relationships (hasOne, belongsTo, hasMany, belongsToMany) on a Flarum model using the Model extender. It shows how to specify the relationship name, related model, and optionally override table and key names.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->hasOne('phone', 'App\\Phone', 'foreign_key', 'local_key')\n        ->belongsTo('country', 'App\\Country', 'foreign_key', 'other_key')\n        ->hasMany('comment', 'App\\Comment', 'foreign_key', 'local_key')\n        ->belongsToMany('role', 'App\\Role', 'role_user', 'user_id', 'role_id')\n```\n\n----------------------------------------\n\nTITLE: Registering Frontend JavaScript in PHP Extension\nDESCRIPTION: Shows how to register a JavaScript file for the forum frontend using the Frontend extender in a Flarum extension's extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring API Throttling in Flarum's extend.php\nDESCRIPTION: This code snippet shows how to add or remove throttlers using the ThrottleApi extender in Flarum's extend.php file. It sets a new throttler that disables all throttling and removes an existing throttler.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/api-throttling.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    // Other extenders\n    (new Extend\\ThrottleApi())\n        ->set('throttleAll', function () {\n          return false;\n        })\n        ->remove('bypassThrottlingAttribute'),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Modal Component in Flarum (JSX)\nDESCRIPTION: Example of creating a custom modal component by extending Flarum's base Modal class. Shows implementation of key methods for title, content, and form submission handling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/interactive-components.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Modal from 'flarum/common/components/Modal';\n\nexport default class CustomModal extends Modal {\n  // True by default, dictates whether the modal can be dismissed by clicking on the background or in the top right corner.\n  static isDismissible = true;\n\n  className() {\n    // Custom CSS classes to apply to the modal\n    return 'custom-modal-class';\n  }\n\n  title() {\n    // Content to show in the modal's title bar\n    return <p>Custom Modal</p>;\n  }\n\n  content() {\n    // Content to show in the modal's body\n    return <p>Hello World!</p>;\n  }\n\n  onsubmit() {\n    // If your modal contains a form, you can add form processing logic here.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Serializer for JSON:API in Flarum\nDESCRIPTION: Shows how to create a custom serializer class that extends AbstractSerializer to define a new JSON:API resource type. This example creates a DiscussionSerializer with title attribute and a user relationship.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\AbstractSerializer;\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nclass DiscussionSerializer extends AbstractSerializer\n{\n    protected $type = 'discussions';\n\n    protected function getDefaultAttributes($discussion)\n    {\n        return [\n            'title' => $discussion->title,\n        ];\n    }\n\n    protected function user($discussion)\n    {\n        return $this->hasOne($discussion, UserSerializer::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Search Components in Flarum\nDESCRIPTION: This snippet demonstrates how to register custom gambits and search mutators using the SimpleFlarumSearch extender. It adds the CountryGambit and OnlySameCountrySearchMutator to the UserSearcher class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\SimpleFlarumSearch(UserSearcher::class))\n    ->addGambit(CountryGambit::class)\n    ->addSearchMutator(OnlySameCountrySearchMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Event Class in PHP\nDESCRIPTION: Demonstrates how to create a custom event class in Flarum, using the Deleted event as an example. It shows the structure of a simple event class with public properties.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Post\\Event;\n\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass Deleted\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var User\n     */\n    public $actor;\n\n    /**\n     * @param Post $post\n     * @param User $user\n     */\n    public function __construct(Post $post, User $actor = null)\n    {\n        $this->post = $post;\n        $this->actor = $actor;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications in Flarum using PHP\nDESCRIPTION: This snippet illustrates how to send notifications in Flarum using the PHP NotificationSyncer. It listens for specific events like PostWasLiked and PostWasUnliked, and synchronizes notifications using PostLikedBlueprint. Required dependencies include Flarum's events, notification classes, and models like Post and User. It displays notifications only if the post creator isn't the one liking the post. Dispatcher is needed to bind event listeners.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Listener;\n\nuse Flarum\\Event\\ConfigureNotificationTypes;\nuse Flarum\\Likes\\Event\\PostWasLiked;\nuse Flarum\\Likes\\Event\\PostWasUnliked;\nuse Flarum\\Likes\\Notification\\PostLikedBlueprint;\nuse Flarum\\Notification\\NotificationSyncer;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nclass SendNotificationWhenPostIsLiked\n{\n    protected $notifications;\n\n    public function __construct(NotificationSyncer $notifications)\n    {\n        $this->notifications = $notifications;\n    }\n\n    public function subscribe(Dispatcher $events)\n    {\n        $events->listen(PostWasLiked::class, [$this, 'whenPostWasLiked']);\n        $events->listen(PostWasUnliked::class, [$this, 'whenPostWasUnliked']);\n    }\n\n    public function whenPostWasLiked(PostWasLiked $event)\n    {\n        $this->syncNotification($event->post, $event->user, [$event->post->user]);\n    }\n\n    public function whenPostWasUnliked(PostWasUnliked $event)\n    {\n        $this->syncNotification($event->post, $event->user, []);\n    }\n\n    public function syncNotification(Post $post, User $user, array $recipients)\n    {\n        if ($post->user->id != $user->id) {\n            $this->notifications->sync(\n                new PostLikedBlueprint($post, $user),\n                $recipients\n            );\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Testing Console Commands in Flarum Extensions\nDESCRIPTION: This code snippet illustrates how to create tests for custom console commands in Flarum extensions. It extends ConsoleTestCase and demonstrates the usage of console() and runCommand() methods to simulate command execution and assert outputs.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/testing.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Tests\\integration\\ConsoleTestCase;\n\nclass ConsoleTest extends ConsoleTestCase\n{\n    /**\n     * @test\n     */\n    public function command_works()\n    {\n        $input = [\n            'command' => 'some:command',  // The command name, equivalent of `php flarum some:command`\n            'foo' => 'bar',  // arguments\n            '--lorem' => 'ipsum'  // options\n        ];\n\n        $this->assertEquals('Some Output.', $this->runCommand($input));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Component in Flarum (JSX)\nDESCRIPTION: This snippet demonstrates how to create a form component in Flarum using various form components like FieldSet, Button, and Switch. It shows how to handle input changes and form submission.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/forms.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/common/Component';\nimport FieldSet from 'flarum/common/components/FieldSet';\nimport Button from 'flarum/common/components/Button';\nimport Switch from 'flarum/common/components/Switch';\n\n\nclass FormComponent extends Component {\n  oninit(vnode) {\n    this.textInput = \"\";\n    this.booleanInput = false;\n  }\n\n  view() {\n    return (\n      <form onsubmit={this.onsubmit.bind(this)}>\n        <FieldSet label={app.translator.trans('fake-extension.form.fieldset_label')}>\n          <input className=\"FormControl\" value={this.textInput} oninput={e => this.textInput = e.target.value}>\n          </input>\n          <Switch state={this.booleanInput} onchange={val => this.booleanInput = val}>\n          </Switch>\n        </FieldSet>\n        <Button type=\"submit\">{app.translator.trans('core.admin.basics.submit_button')}</Button>\n      </form>\n    )\n  }\n\n  onsubmit() {\n    // Some form handling logic here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware Interface in PHP\nDESCRIPTION: This snippet illustrates how to implement a custom middleware class in Flarum by adhering to the MiddlewareInterface. The middleware processes HTTP requests and performs operations both before and after passing the request to the next middleware. Key dependencies are PSR HTTP message interfaces.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\\nuse Psr\\Http\\Message\\ServerRequestInterface;\\nuse Psr\\Http\\Server\\MiddlewareInterface;\\nuse Psr\\Http\\Server\\RequestHandlerInterface;\\n\\nclass YourMiddleware implements MiddlewareInterface {\\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\\n    {\\n        // Logic to run before the request is processed and later middleware is called.\\n        $response = $handler->handle($request);\\n        // Logic to run after the request is processed.\\n        return $response\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Extender in PHP\nDESCRIPTION: An example showing the structure of a custom extender class in PHP. It implements the ExtenderInterface and optionally the LifecycleInterface for cleanup on enable/disable.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/extensibility.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n0. Define a class that implements `Flarum\\Extend\\ExtenderInterface`.\n1. Accept arguments in the constructor, and various methods. Những phương pháp đó nên đại diện cho những \"modifications\" cụ thể.\n2. Implement an `extend` method that modifies your extension (or Flarum), typically via extending/modifying container bindings.\n3. Optionally, implement `Flarum\\Extend\\LifecycleInterface` if cleanup is needed on enable/disable.\n```\n\n----------------------------------------\n\nTITLE: Integration Testing Alert Component in TypeScript\nDESCRIPTION: This code snippet demonstrates how to write integration tests for Flarum's Alert component using Jest and Mithril. It covers various scenarios such as displaying alert messages with icons, titles, and custom controls, as well as testing dismissible functionality.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/testing.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport bootstrapForum from '@flarum/jest-config/src/boostrap/forum';\nimport Alert from '../../../../src/common/components/Alert';\nimport m from 'mithril';\nimport mq from 'mithril-query';\nimport { jest } from '@jest/globals';\n\nbeforeAll(() => bootstrapForum());\n\ndescribe('Alert displays as expected', () => {\n  it('should display alert messages with an icon', () => {\n    const alert = mq(m(Alert, { type: 'error' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toHaveElement('i.icon');\n  });\n\n  it('should display alert messages with a custom icon when using a title', () => {\n    const alert = mq(Alert, { type: 'error', icon: 'fas fa-users', title: 'Woops..' });\n    expect(alert).toContainRaw('Woops..');\n    expect(alert).toHaveElement('i.fas.fa-users');\n  });\n\n  it('should display alert messages with a title', () => {\n    const alert = mq(m(Alert, { type: 'error', title: 'Error Title' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toContainRaw('Error Title');\n    expect(alert).toHaveElement('.Alert-title');\n  });\n\n  it('should display alert messages with custom controls', () => {\n    const alert = mq(Alert, { type: 'error', controls: [m('button', { className: 'Button--test' }, 'Click me!')] });\n    expect(alert).toHaveElement('button.Button--test');\n  });\n});\n\ndescribe('Alert is dismissible', () => {\n  it('should show dismiss button', function () {\n    const alert = mq(m(Alert, { dismissible: true }, 'Shoot!'));\n    expect(alert).toHaveElement('button.Alert-dismiss');\n  });\n\n  it('should call ondismiss when dismiss button is clicked', function () {\n    const ondismiss = jest.fn();\n    const alert = mq(Alert, { dismissible: true, ondismiss });\n    alert.click('.Alert-dismiss');\n    expect(ondismiss).toHaveBeenCalled();\n  });\n\n  it('should not be dismissible if not chosen', function () {\n    const alert = mq(Alert, { type: 'error', dismissible: false });\n    expect(alert).not.toHaveElement('button.Alert-dismiss');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Flarum API Controllers\nDESCRIPTION: This code demonstrates how to extend existing Flarum API controllers using the `ApiController` extender. It shows how to set serializers, include optional fields, and set query limits, sorting, and custom data query logic.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/api.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillGetData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->setSerializer(MyDiscussionSerializer::class)\n        ->addInclude('user')\n        ->addOptionalInclude('posts')\n        ->setLimit(20)\n        ->setMaxLimit(50)\n        ->setSort(['name' => 'asc'])\n        ->addSortField('firstName')\n        ->prepareDataQuery(function ($controller) {\n            // Add custom logic here to modify the controller\n            // before data queries are executed.\n        })\n]\n```\n\n----------------------------------------\n\nTITLE: Tag Authorization Policy Implementation\nDESCRIPTION: Example of a model-specific policy class that handles tag-related permissions for starting discussions and adding tags to discussions.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/authorization.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\Access\\AbstractPolicy;\nuse Flarum\\User\\User;\n\nclass TagPolicy extends AbstractPolicy\n{\n    /**\n     * @param User $actor\n     * @param Tag $tag\n     * @return bool|null\n     */\n    public function startDiscussion(User $actor, Tag $tag)\n    {\n        if ($tag->is_restricted) {\n            return $actor->hasPermission('tag'.$tag->id.'.startDiscussion') ? $this->allow() : $this->deny();\n        }\n    }\n\n    /**\n     * @param User $actor\n     * @param Tag $tag\n     * @return bool|null\n     */\n    public function addToDiscussion(User $actor, Tag $tag)\n    {\n        return $this->startDiscussion($actor, $tag);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Redraw Prevention in JavaScript\nDESCRIPTION: This snippet demonstrates how to prevent redraws in event handlers when migrating from Mithril 0.2 to Mithril 2.0 in Flarum extensions. It shows the change in syntax for preventing automatic redraws after DOM events.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\n<button onclick={() => {\n  console.log(\"Hello world\");\n  m.redraw.strategy('none');\n}}>\n  Click Me!\n</button>\n\n// Mithril 2\n<button onclick={e => {\n  console.log(\"Hello world\");\n  e.redraw = false;\n}}>\n  Click Me!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from Flarum API in JavaScript\nDESCRIPTION: Demonstrates how to fetch data from Flarum's API using the store's find method in the frontend. It shows examples of retrieving multiple resources and a single resource by ID.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// GET /api/discussions?sort=createdAt\napp.store.find('discussions', {sort: 'createdAt'}).then(console.log);\n\n// GET /api/discussions/123\napp.store.find('discussions', 123).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating an Access Token in Flarum's REST API\nDESCRIPTION: Example of POST request to the /api/token endpoint to create an access token using user credentials. The response returns a token and userId that can be used for authentication.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"identification\": \"Toby\",\n    \"password\": \"pass7word\"\n}\n\nHTTP/1.1 200 OK\n\n{\n    \"token\": \"YACub2KLfe8mfmHPcUKtt6t2SMJOGPXnZbqhc3nX\",\n    \"userId\": \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Relationships to Models in PHP\nDESCRIPTION: Shows how to add custom relationships (like morphMany, morphToMany, morphedByMany) to existing models using the relationship method in PHP.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->relationship('mobile', 'App\\Phone', function ($user) {\n            // Return any Eloquent relationship here.\n            return $user->belongsToMany(Discussion::class, 'recipients')\n                ->withTimestamps()\n                ->wherePivot('removed_at', null);\n        })\n```\n\n----------------------------------------\n\nTITLE: Creating Flarum Models with CLI\nDESCRIPTION: Shows how to use the Flarum CLI to automatically generate backend and frontend model files.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend model\n$ flarum-cli make frontend model\n```\n\n----------------------------------------\n\nTITLE: Extending Existing PHP Serializer in Flarum API\nDESCRIPTION: This snippet demonstrates how to use the ApiSerializer extender to add attributes and relationships to an existing resource type in Flarum's API, including conditional attribute addition.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nreturn [\n    (new Extend\\ApiSerializer(UserSerializer::class))\n        // One attribute at a time\n        ->attribute('firstName', function ($serializer, $user, $attributes) {\n            return $user->first_name\n        })\n        // Multiple modifications at once, more complex logic\n        ->mutate(function($serializer, $user, $attributes) {\n            $attributes['someAttribute'] = $user->someAttribute;\n            if ($serializer->getActor()->can('administrate')) {\n                $attributes['someDate'] = $serializer->formatDate($user->some_date);\n            }\n\n            return $attributes;\n        })\n        // API relationships\n        ->hasOne('phone', PhoneSerializer::class)\n        ->hasMany('comments', CommentSerializer::class),\n]\n```\n\n----------------------------------------\n\nTITLE: Creating and Deleting Resources in Flarum Frontend\nDESCRIPTION: Shows how to create new resources and delete existing ones in Flarum's frontend. It uses the createRecord method to create a new model instance and the delete method to remove an existing one.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussion = app.store.createRecord('discussions');\n\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n\ndiscussion.delete().then(done);\n```\n\n----------------------------------------\n\nTITLE: Creating a Search Mutator for Filtering Users by Country in Flarum\nDESCRIPTION: This code snippet shows how to implement a search mutator in Flarum that filters users to only show those from the same country as the current user. It uses the SearchState and QueryCriteria classes to modify the search query.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Query\\QueryCriteria;\nuse Flarum\\Search\\SearchState;\n\nclass OnlySameCountrySearchMutator\n{\n    public function __invoke(SearchState $searchState, QueryCriteria $queryCriteria)\n    {\n        $searchState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from transChoice to ICU MessageFormat in PHP Backend\nDESCRIPTION: Example showing how to update backend PHP code from using the deprecated transChoice method to the new trans method with ICU MessageFormat for pluralization.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$translator->transChoice('some-translation', $guestCount, ['{host}' => $hostName]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$translator->trans('some-translation', ['host' => $hostName, 'guestCount' => $guestCount]);\n```\n\n----------------------------------------\n\nTITLE: Registering Middleware in a Flarum Extension\nDESCRIPTION: This snippet shows how to add, remove, insert, or replace middleware in different Flarum applications (forum, admin, API) using the middleware extender in an extension's extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/middleware.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n// use Flarum\\Http\\Middleware\\CheckCsrfToken;\n\nreturn [\n    // Add middleware to forum frontend\n    (new Extend\\Middleware('forum'))->add(YourMiddleware::class),\n    // Admin frontend\n    (new Extend\\Middleware('admin'))->add(YourMiddleware::class),\n    // API frontend\n    (new Extend\\Middleware('api'))->add(YourMiddleware::class),\n\n    (new Extend\\Middleware('frontend'))\n        // remove a middleware (e.g. remove CSRF token check 😱)\n        ->remove(CheckCsrfToken::class)\n        // insert before another middleware (e.g. before a CSRF token check)\n        ->insertBefore(CheckCsrfToken::class, YourMiddleware::class)\n        // insert after another middleware (e.g. after a CSRF token check)\n        ->insertAfter(CheckCsrfToken::class, YourMiddleware::class)\n        // replace a middleware (e.g. replace the CSRF check with your own implementation)\n        ->replace(CheckCsrfToken::class, YourMiddleware::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Relationships to Backend Models in PHP\nDESCRIPTION: This snippet illustrates how to add a custom relationship to an existing User model using the relationship method of the Model extender in Flarum's backend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnew Extend\\Model(User::class)\n    ->relationship('mobile', 'App\\Phone', function ($user) {\n        // Return any Eloquent relationship here.\n        return $user->belongsToMany(Discussion::class, 'recipients')\n            ->withTimestamps()\n            ->wherePivot('removed_at', null);\n    })\n```\n\n----------------------------------------\n\nTITLE: Including Relationships in PHP Controller\nDESCRIPTION: This snippet demonstrates how to include default and optional relationships within a Flarum API controller by specifying them in the `$include` and `$optionalInclude` properties. The included relationships can be eager-loaded to improve performance.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/api.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n    // The relationships that are included by default.\n    public $include = ['user'];\n    \n    // Other relationships that are available to be included.\n    public $optionalInclude = ['discussions'];\n```\n\n----------------------------------------\n\nTITLE: Creating Flarum Extension Initializer\nDESCRIPTION: Basic structure for a Flarum extension's index.js file that registers an initializer to run after Flarum core has booted. This is where the main extension code should be placed.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extend, override } from 'flarum/common/extend';\n\n// We provide our extension code in the form of an \"initializer\".\n// This is a callback that will run after the core has booted.\napp.initializers.add('acme-flarum-hello-world', function(app) {\n  // Your Extension Code Here\n  console.log(\"EXTENSION NAME is working!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Default and Optional Relationships in Flarum API Controllers (PHP)\nDESCRIPTION: Demonstrates how to define default and optional relationships to include when listing, showing, or creating resources in a Flarum API controller. This is done by setting the $include and $optionalInclude properties.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    // The relationships that are included by default.\n    public $include = ['user'];\n\n    // Other relationships that are available to be included.\n    public $optionalInclude = ['discussions'];\n```\n\n----------------------------------------\n\nTITLE: Extending IndexPage methods\nDESCRIPTION: This snippet demonstrates extending multiple methods (`oncreate`, `onupdate`) of the `IndexPage` prototype using the `extend` utility. The provided callback function will be executed after the original methods have completed.  The snippet highlights how to apply the same modification logic to multiple methods simultaneously.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/frontend.md#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nextend(IndexPage.prototype, ['oncreate', 'onupdate'], () => { /* your logic */ });\n```\n\n----------------------------------------\n\nTITLE: Checking User and Group Permissions in Flarum\nDESCRIPTION: These snippets demonstrate how to access and check permissions for groups and users in Flarum. Available methods include retrieving a group's permissions, verifying group permissions, enumerating user permissions, and checking user access to permissions. There are no specific external dependencies beyond the Flarum models in use.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// An Eloquent relation to the group's permissions\n$group->permissions();\n\n// Check if a group has a permission\n$group->hasPermission('viewForum');\n\n// Enumerate all the user's permissions\n$user->getPermissions();\n\n// Check if the user is in a group with the given permission\n$user->hasPermission('viewForum');\n```\n\n----------------------------------------\n\nTITLE: Registering a New Model with the Store in JavaScript\nDESCRIPTION: Demonstrates how to register a newly created model with the store using the Store extender. This makes the model available for use with the API and store methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Store()\n    .add('tags', Tag),\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Listener Class in Flarum\nDESCRIPTION: This code defines an event listener class (PostDeletedListener) that handles the 'Deleted' event.  It injects a TranslatorInterface dependency via constructor injection, allowing the listener to utilize translation services within its handle method. The handle method contains the logic to be executed when the event is triggered.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass PostDeletedListener\n{\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    public function handle(Deleted $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Frontend Testing with Flarum CLI\nDESCRIPTION: Command for setting up frontend testing infrastructure automatically using the Flarum CLI tool. This simplifies the process of adding testing capabilities to an extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra frontendTesting\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Tag Policy in PHP\nDESCRIPTION: Shows an example of a custom policy for tags in Flarum, demonstrating how to control access to starting discussions and adding tags to discussions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/authorization.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\Access\\AbstractPolicy;\nuse Flarum\\User\\User;\n\nclass TagPolicy extends AbstractPolicy\n{\n    /**\n     * @param User $actor\n     * @param Tag $tag\n     * @return bool|null\n     */\n    public function startDiscussion(User $actor, Tag $tag)\n    {\n        if ($tag->is_restricted) {\n            return $actor->hasPermission('tag'.$tag->id.'.startDiscussion') ? $this->allow() : $this->deny();\n        }\n    }\n\n    /**\n     * @param User $actor\n     * @param Tag $tag\n     * @return bool|null\n     */\n    public function addToDiscussion(User $actor, Tag $tag)\n    {\n        return $this->startDiscussion($actor, $tag);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Flarum Migration Structure - PHP\nDESCRIPTION: Basic structure for a Flarum database migration file showing up and down functions that handle schema modifications.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Schema\\Builder;\n\nreturn [\n    'up' => function (Builder $schema) {\n        // up migration\n    },\n    'down' => function (Builder $schema) {\n        // down migration\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Service Provider in PHP for Flarum\nDESCRIPTION: This code snippet demonstrates how to create a custom service provider by extending AbstractServiceProvider. It includes both register and boot methods for container modification and custom logic execution.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/service-provider.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Foundation\\AbstractServiceProvider;\nuse Illuminate\\Contracts\\Container\\Container;\n\nclass CustomServiceProvider extends AbstractServiceProvider\n{\n    public function register()\n    {\n        // custom logic here, for example:\n        $this->container->resolving(SomeClass::class, function ($container) {\n            return new SomeClass($container->make('some.binding'));\n        });\n    }\n\n    public function boot(Container $container)\n    {\n        // custom logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering API Routes in PHP\nDESCRIPTION: Example of registering standard CRUD API endpoints using Flarum's Routes extender\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Routes('api'))\n        ->get('/tags', 'tags.index', ListTagsController::class)\n        ->get('/tags/{id}', 'tags.show', ShowTagController::class)\n        ->post('/tags', 'tags.create', CreateTagController::class)\n        ->patch('/tags/{id}', 'tags.update', UpdateTagController::class)\n        ->delete('/tags/{id}', 'tags.delete', DeleteTagController::class)\n```\n\n----------------------------------------\n\nTITLE: Implementing DeleteTagController in PHP for Flarum API\nDESCRIPTION: Extends AbstractDeleteController to create a controller for deleting a tag resource. Implements the delete method to handle the deletion process based on the provided tag ID.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractDeleteController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nclass DeleteTagController extends AbstractDeleteController\n{    \n    protected function delete(Request $request)\n    {\n        $id = Arr::get($request->getQueryParams(), 'id');\n\n        Tag::findOrFail($id)->delete();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving URL Generator in PHP\nDESCRIPTION: Demonstrates how to resolve and use the URL generator in Flarum Beta 14. The 'app()->url()' method is no longer available, and developers should inject or resolve an instance of Flarum\\Foundation\\Config instead.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\napp()->url() // No longer works\n\n// Resolve or inject an instance of Flarum\\Foundation\\Config\n$config = resolve(Flarum\\Foundation\\Config::class);\n$url = $config->url();\n```\n\n----------------------------------------\n\nTITLE: Defining a Label API Resource in PHP\nDESCRIPTION: Example of creating an API resource for a Label model in Flarum. It demonstrates setting up endpoints, defining fields, and configuring sorting options.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Api;\n\nuse Acme\\Label;\nuse Flarum\\Api\\Context;\nuse Flarum\\Api\\Endpoint;\nuse Flarum\\Api\\Resource\\AbstractDatabaseResource;\nuse Flarum\\Api\\Schema;\n\n/** @extends AbstractDatabaseResource<Label> */\nclass LabelResource extends AbstractDatabaseResource\n{\n    public function type(): string\n    {\n        return 'labels';\n    }\n\n    public function model(): string\n    {\n        return Label::class;\n    }\n\n    public function scope(Builder $query, Context $context): void\n    {\n        $query->whereVisibleTo($context->getActor());\n    }\n\n    public function endpoints(): array\n    {\n        return [\n            Endpoint\\Show::make(),\n            Endpoint\\Create::make()\n                ->authenticated()\n                ->can('createLabel'),\n            Endpoint\\Update::make()\n                ->authenticated()\n                ->can('edit'),\n            Endpoint\\Delete::make()\n                ->authenticated()\n                ->can('delete'),\n            Endpoint\\Index::make()\n                ->defaultInclude(['parent']),\n        ];\n    }\n\n    /*\n     * This is only for endpoint processing and serialization.\n     * You still have to create a database migration to add the table/columns.\n     */\n    public function fields(): array\n    {\n        return [\n            Schema\\Str::make('name')\n                ->requiredOnCreate()\n                ->writable(),\n            Schema\\Str::make('description')\n                ->writable()\n                ->maxLength(700)\n                ->nullable(),\n            Schema\\Str::make('slug')\n                ->requiredOnCreate()\n                ->writable()\n                ->unique('labels', 'slug', true)\n                ->regex('/^[^\\/\\\\ ]*$/i'),\n            Schema\\Str::make('color')\n                ->writable()\n                ->nullable()\n                ->rule('hex_color'),\n            Schema\\Str::make('icon')\n                ->writable()\n                ->nullable(),\n            Schema\\Boolean::make('isActive')\n                ->writable(),\n            Schema\\DateTime::make('createdAt'),\n            Schema\\Boolean::make('canAddToDiscussion')\n                ->get(fn (Tag $tag, FlarumContext $context) => $context->getActor()->can('addToDiscussion', $tag)),\n\n            Schema\\Relationship\\ToOne::make('user')\n                ->type('users')\n                ->includable(),\n            Schema\\Relationship\\ToOne::make('parent')\n                ->type('labels')\n                ->includable(),\n            Schema\\Relationship\\ToMany::make('children')\n                ->type('labels')\n                ->includable(),\n        ];\n    }\n    \n    public function sorts(): array\n    {\n        return [\n            SortColumn::make('createdAt'),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Console Command in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to create a custom console command by extending Flarum's AbstractCommand class. The configure method sets up the command name and description, while the fire method contains the command's execution logic.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/console.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Console\\AbstractCommand;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass YourCommand extends AbstractCommand {\n  protected function configure()\n  {\n      $this\n          ->setName('YOUR COMMAND NAME')\n          ->setDescription('YOUR COMMAND DESCRIPTION');\n  }\n  protected function fire()\n  {\n    // Your logic here!\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Integration Tests for Frontend Components in TypeScript\nDESCRIPTION: Demonstrates how to write integration tests for frontend components using Jest and mithril-query in a Flarum extension, specifically testing the Alert component.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport Alert from '../../../../src/common/components/Alert';\nimport m from 'mithril';\nimport mq from 'mithril-query';\nimport { jest } from '@jest/globals';\n\ndescribe('Alert displays as expected', () => {\n  it('should display alert messages with an icon', () => {\n    const alert = mq(m(Alert, { type: 'error' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toHaveElement('i.icon');\n  });\n\n  it('should display alert messages with a custom icon when using a title', () => {\n    const alert = mq(Alert, { type: 'error', icon: 'fas fa-users', title: 'Woops..' });\n    expect(alert).toContainRaw('Woops..');\n    expect(alert).toHaveElement('i.fas.fa-users');\n  });\n\n  it('should display alert messages with a title', () => {\n    const alert = mq(m(Alert, { type: 'error', title: 'Error Title' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toContainRaw('Error Title');\n    expect(alert).toHaveElement('.Alert-title');\n  });\n\n  it('should display alert messages with custom controls', () => {\n    const alert = mq(Alert, { type: 'error', controls: [m('button', { className: 'Button--test' }, 'Click me!')] });\n    expect(alert).toHaveElement('button.Button--test');\n  });\n});\n\ndescribe('Alert is dismissible', () => {\n  it('should show dismiss button', function () {\n    const alert = mq(m(Alert, { dismissible: true }, 'Shoot!'));\n    expect(alert).toHaveElement('button.Alert-dismiss');\n  });\n\n  it('should call ondismiss when dismiss button is clicked', function () {\n    const ondismiss = jest.fn();\n    const alert = mq(Alert, { dismissible: true, ondismiss });\n    alert.click('.Alert-dismiss');\n    expect(ondismiss).toHaveBeenCalled();\n  });\n\n  it('should not be dismissible if not chosen', function () {\n    const alert = mq(Alert, { type: 'error', dismissible: false });\n    expect(alert).not.toHaveElement('button.Alert-dismiss');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Flarum Models with Accessors, Mutators, Dates and Casts\nDESCRIPTION: Example of using the Model extender to add accessors, mutators, dates, casts, and default values to existing Flarum models. This allows customization of how model attributes are retrieved, stored, and formatted.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\User\\User;\n\nreturn [\n    new Extend\\Model(User::class)\n        ->defaultValue('is_alive', true)\n        ->accessor('first_name', function ($value) {\n            return ucfirst($value)\n        })\n        ->mutator('first_name', function ($value) {\n            return strtolower($value);\n        })\n        ->date('suspended_until')\n        ->cast('is_admin', 'boolean')\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Model Properties\nDESCRIPTION: Demonstrates how to access model attributes and relationships using instance methods.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/models.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = discussion.id();\nconst title = discussion.title();\nconst posts = discussion.posts(); // array of Post models\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from the API in Frontend JavaScript\nDESCRIPTION: Examples of retrieving resources from Flarum's JSON:API using the store's find method. This demonstrates how to fetch discussions with sorting options and how to retrieve a specific discussion by ID.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// GET /api/discussions?sort=createdAt\napp.store.find('discussions', {sort: 'createdAt'}).then(console.log);\n\n// GET /api/discussions/123\napp.store.find('discussions', 123).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Filter and Mutator in Flarum Extend\nDESCRIPTION: This snippet shows how to register the custom CountryFilter and OnlySameCountryFilterMutator using Flarum's Filter extender. It demonstrates the process of adding new filtering capabilities to the UserFilterer.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\Filter(UserFilterer::class))\n    ->addFilter(CountryFilter::class)\n    ->addFilterMutator(OnlySameCountryFilterMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: Custom Event Class Definition in Flarum\nDESCRIPTION: Example of a custom event class implementation from Flarum core. Demonstrates the standard structure of an event class with data properties and a constructor.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/backend-events.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Post\\Event;\n\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass Deleted\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var User\n     */\n    public $actor;\n\n    /**\n     * @param Post $post\n     * @param User $user\n     */\n    public function __construct(Post $post, User $actor = null)\n    {\n        $this->post = $post;\n        $this->actor = $actor;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current User in Flarum Extension (PHP)\nDESCRIPTION: This snippet demonstrates how to retrieve the current user within a Flarum extension using the `$request->getAttribute('actor')` method. The method returns a `User` instance, which can be either a logged-in user or a `Guest` instance if no user is authenticated. This method is the recommended way to access the current user in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"$request->getAttribute('actor')\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Model Attributes and Relationships in Frontend\nDESCRIPTION: Demonstrates how to access attributes and relationships from model objects in Flarum's frontend, which provide convenience methods for working with API resource data.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = discussion.id();\nconst title = discussion.title();\nconst posts = discussion.posts(); // array of Post models\n```\n\n----------------------------------------\n\nTITLE: Defining API Routes for CRUD Operations in PHP\nDESCRIPTION: This snippet demonstrates how to use the Routes extender to define API endpoints for listing, showing, creating, updating, and deleting a resource (in this case, tags).\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Routes('api'))\n    ->get('/tags', 'tags.index', ListTagsController::class)\n    ->get('/tags/{id}', 'tags.show', ShowTagController::class)\n    ->post('/tags', 'tags.create', CreateTagController::class)\n    ->patch('/tags/{id}', 'tags.update', UpdateTagController::class)\n    ->delete('/tags/{id}', 'tags.delete', DeleteTagController::class)\n```\n\n----------------------------------------\n\nTITLE: Writing Frontend Unit Tests with Jest in Flarum\nDESCRIPTION: This example demonstrates how to write frontend unit tests using Jest in a Flarum extension. It shows a test suite for the 'abbreviateNumber' utility function, covering various scenarios and assertions.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/testing.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport abbreviateNumber from '../../../../src/common/utils/abbreviateNumber';\n\ntest('does not change small numbers', () => {\n  expect(abbreviateNumber(1)).toBe('1');\n});\n\ntest('abbreviates large numbers', () => {\n  expect(abbreviateNumber(1000000)).toBe('1M');\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n});\n\ntest('abbreviates large numbers with decimal places', () => {\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n  expect(abbreviateNumber(13234)).toBe('13.2K');\n});\n```\n\n----------------------------------------\n\nTITLE: Saving Model Changes in JavaScript\nDESCRIPTION: Shows how to update a resource by calling the save method on a model instance. This sends the changes back to the API and returns a promise that resolves with the updated model.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_12\n\nLANGUAGE: js\nCODE:\n```\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Loading API Relationships in PHP\nDESCRIPTION: Demonstrates how to extract and eager-load relationships on models before serialization using the extractInclude method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$relations = $this->extractInclude($request);\n\nreturn Tag::all()->load($relations);\n```\n\n----------------------------------------\n\nTITLE: Implementing List API Controller in PHP\nDESCRIPTION: Example of an API controller for listing resources by extending AbstractListController, showing minimal implementation with serializer specification and data method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractListController;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass ListTagsController extends AbstractListController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        return Tag::all();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Policies with Flarum's Extender in PHP\nDESCRIPTION: This snippet shows how to register both model-specific and global policies in a Flarum extension's extend.php file using the Policy extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/authorization.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Tags\\Tag;\nuse YourNamespace\\Access;\n\nreturn [\n  // Other extenders\n  (new Extend\\Policy())\n    ->modelPolicy(Tag::class, Access\\TagPolicy::class)\n    ->globalPolicy(Access\\GlobalPolicy::class),\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Gambit\nDESCRIPTION: Example of registering a custom gambit using the Search frontend extender.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/search.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\nimport CountryGambit from './query/users/CountryGambit';\n\n// prettier-ignore\nexport default [\n  new Extend.Search()\n    .gambit('users', CountryGambit),\n];\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications with NotificationSyncer in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to send and remove notifications in Flarum using the `NotificationSyncer` class. It listens for the `PostWasLiked` and `PostWasUnliked` events and calls the `syncNotification` method to either send or remove the notification based on the event. The `syncNotification` method uses the `NotificationSyncer::sync` method to handle the actual sending or removal of the notification.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Listener;\n\nuse Flarum\\Event\\ConfigureNotificationTypes;\nuse Flarum\\Likes\\Event\\PostWasLiked;\nuse Flarum\\Likes\\Event\\PostWasUnliked;\nuse Flarum\\Likes\\Notification\\PostLikedBlueprint;\nuse Flarum\\Notification\\NotificationSyncer;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nclass SendNotificationWhenPostIsLiked\n{\n    protected $notifications;\n\n    public function __construct(NotificationSyncer $notifications)\n    {\n        $this->notifications = $notifications;\n    }\n\n    public function subscribe(Dispatcher $events)\n    {\n        $events->listen(PostWasLiked::class, [$this, 'whenPostWasLiked']);\n        $events->listen(PostWasUnliked::class, [$this, 'whenPostWasUnliked']);\n    }\n\n    public function whenPostWasLiked(PostWasLiked $event)\n    {\n        $this->syncNotification($event->post, $event->user, [$event->post->user]);\n    }\n\n    public function whenPostWasUnliked(PostWasUnliked $event)\n    {\n        $this->syncNotification($event->post, $event->user, []);\n    }\n\n    public function syncNotification(Post $post, User $user, array $recipients)\n    {\n        if ($post->user->id != $user->id) {\n            $this->notifications->sync(\n                new PostLikedBlueprint($post, $user),\n                $recipients\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Relationships to Existing Models in PHP\nDESCRIPTION: Demonstrates how to add various types of relationships to existing models using the Model extender. Covers hasOne, belongsTo, hasMany, and belongsToMany relationship types with their respective parameters.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->hasOne('phone', 'App\\Phone', 'foreign_key', 'local_key')\n        ->belongsTo('country', 'App\\Country', 'foreign_key', 'other_key')\n        ->hasMany('comment', 'App\\Comment', 'foreign_key', 'local_key')\n        ->belongsToMany('role', 'App\\Role', 'role_user', 'user_id', 'role_id')\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Models in JavaScript\nDESCRIPTION: Demonstrates how to add new attributes and relationships to existing model classes. By modifying the model's prototype, you can extend its capabilities without changing the original class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nDiscussion.prototype.user = Model.hasOne('user');\nDiscussion.prototype.posts = Model.hasMany('posts');\nDiscussion.prototype.slug = Model.attribute('slug');\n```\n\n----------------------------------------\n\nTITLE: Global Authorization Policy Implementation\nDESCRIPTION: Example of a global policy class that implements forum-wide authorization rules for viewing and starting discussions based on tag permissions.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/authorization.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\Access\\AbstractPolicy;\nuse Flarum\\User\\User;\n\nclass GlobalPolicy extends AbstractPolicy\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n\n    /**\n     * @param Flarum\\User\\User $actor\n     * @param string $ability\n     * @return bool|void\n     */\n    public function can(User $actor, string $ability)\n    {\n        if (in_array($ability, ['viewForum', 'startDiscussion'])) {\n            $enoughPrimary = count(Tag::getIdsWhereCan($actor, $ability, true, false)) >= $this->settings->get('min_primary_tags');\n            $enoughSecondary = count(Tag::getIdsWhereCan($actor, $ability, false, true)) >= $this->settings->get('min_secondary_tags');\n\n            if ($enoughPrimary && $enoughSecondary) {\n                return $this->allow();\n            } else {\n                return $this->deny();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Resource in Flarum with AbstractDeleteController\nDESCRIPTION: This code snippet demonstrates how to delete a resource in Flarum by extending the `Flarum\\Api\\Controller\\AbstractDeleteController`. It implements the `delete` method to enact the deletion of the model. The ID of the resource to be deleted is retrieved from the request query parameters, and then the corresponding `Tag` model is found and deleted.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Flarum\\Api\\Controller\\AbstractDeleteController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nclass DeleteTagController extends AbstractDeleteController\n{\n    protected function delete(Request $request)\n    {\n        $id = Arr::get($request->getQueryParams(), 'id');\n\n        Tag::findOrFail($id)->delete();\n    }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Extracting and Loading Relationships in Flarum API Controllers (PHP)\nDESCRIPTION: Shows how to extract included relationships from a request and use them to eager-load related models before serialization in a Flarum API controller.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$relations = $this->extractInclude($request);\n\nreturn Tag::all()->load($relations);\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Flarum Extension\nDESCRIPTION: This snippet shows how to add, remove, or modify middleware in a Flarum extension's extend.php file. It demonstrates adding middleware to different frontends, removing existing middleware, and inserting middleware before or after specific middleware.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/middleware.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n// use Flarum\\Http\\Middleware\\CheckCsrfToken;\n\nreturn [\n    // Add middleware to forum frontend\n    (new Extend\\Middleware('forum'))->add(YourMiddleware::class),\n    // Admin frontend\n    (new Extend\\Middleware('admin'))->add(YourMiddleware::class),\n    // API frontend\n    (new Extend\\Middleware('api'))->add(YourMiddleware::class),\n\n    (new Extend\\Middleware('frontend'))\n        // remove a middleware (e.g. remove CSRF token check 😱)\n        ->remove(CheckCsrfToken::class)\n        // insert before another middleware (e.g. before a CSRF token check)\n        ->insertBefore(CheckCsrfToken::class, YourMiddleware::class)\n        // insert after another middleware (e.g. after a CSRF token check)\n        ->insertAfter(CheckCsrfToken::class, YourMiddleware::class)\n        // replace a middleware (e.g. replace the CSRF check with your own implementation)\n        ->replace(CheckCsrfToken::class, YourMiddleware::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing a List Controller for JSON:API in Flarum\nDESCRIPTION: Shows how to create a controller for listing resources that extends AbstractListController. The example implements a ListTagsController that returns all tags.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractListController;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass ListTagsController extends AbstractListController\n{\n    public $serializer = TagSerializer::class;\n    \n    protected function data(Request $request, Document $document)\n    {\n        return Tag::all();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining New Frontend Models in Flarum\nDESCRIPTION: Illustrates how to create a new frontend model in Flarum by extending the Model class and defining attributes and relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport Model from 'flarum/common/Model';\n\nexport default class Tag extends Model {\n  title = Model.attribute('title');\n  createdAt = Model.attribute('createdAt', Model.transformDate);\n  parent = Model.hasOne('parent');\n  discussions = Model.hasMany('discussions');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing whereVisibleTo Query Scoping in PHP\nDESCRIPTION: Examples of using the whereVisibleTo method from ScopeVisibilityTrait to filter Eloquent queries based on user permissions. Shows basic usage, applying to existing queries, and using with custom abilities.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\n// Construye y ejecuta una consulta para todos los grupos que un determinado usuario puede ver.\n$groups = Group::whereVisibleTo($actor)->get();\n\n// Aplicar el alcance de la visibilidad a una consulta existente.\nMore eloquent filters can be added after this.\n$query\n  ->whereVisibleTo($actor)\n  ->whereRaw('1=1');\n\n// Aplica el alcance de la visibilidad con una capacidad\n$query\n  ->whereVisibleTo($actor, 'someAbility')\n```\n\n----------------------------------------\n\nTITLE: Policy Registration in Flarum Extension\nDESCRIPTION: Shows how to register both model-specific and global policies in a Flarum extension's extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/authorization.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Tags\\Tag;\nuse YourNamespace\\Access;\n\nreturn [\n  // Other extenders\n  (new Extend\\Policy())\n    ->modelPolicy(Tag::class, Access\\TagPolicy::class)\n    ->globalPolicy(Access\\GlobalPolicy::class),\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Frontend Testing\nDESCRIPTION: Adds necessary configuration to package.json for running frontend tests using Jest in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"scripts\": {\n    ...,\n    \"test\": \"yarn node --experimental-vm-modules $(yarn bin jest)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Flarum API Controllers (PHP)\nDESCRIPTION: Illustrates how to customize existing API controllers using the ApiController extender. This includes setting serializers, adding includes, setting limits, and adding custom logic before data queries are executed.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillGetData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->setSerializer(MyDiscussionSerializer::class)\n        ->addInclude('user')\n        ->addOptionalInclude('posts')\n        ->setLimit(20)\n        ->setMaxLimit(50)\n        ->setSort(['name' => 'asc'])\n        ->addSortField('firstName')\n        ->prepareDataQuery(function ($controller) {\n            // Add custom logic here to modify the controller\n            // before data queries are executed.\n        })\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Relationships in Flarum Serializers\nDESCRIPTION: Shows how to define relationships for resources in a serializer by creating methods that return hasOne or hasMany relationships with the appropriate serializer.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n    protected function user($discussion)\n    {\n        return $this->hasOne($discussion, UserSerializer::class);\n    }\n```\n\n----------------------------------------\n\nTITLE: Test Case Initialization with Flarum Extension in PHP\nDESCRIPTION: This code snippet sets up a test environment for a Flarum extension using PHPUnit. It configures application settings, enables required extensions, initializes the test database with sample data, and optionally extends functionality using extenders. Key dependencies include PHPUnit and Flarum testing traits. The primary input is configuration settings, and the output is an initialized test scenario.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/testing.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    use RetrievesAuthorizedUsers;\n\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        $this->setting('my.custom.setting', true);\n\n        // Let's assume our extension depends on tags.\n        // Note that tags will need to be in your extension's composer.json's `require-dev`.\n        // Also, make sure you include the ID of the extension currently being tested, unless you're\n        // testing the baseline without your extension.\n        $this->extension('flarum-tags', 'my-cool-extension');\n\n        // Note that this input isn't validated: make sure you're populating with valid, representative data.\n        $this->prepareDatabase([\n            'users' => [\n                $this->normalUser() // Available for convenience.\n            ],\n            'discussions' => [\n                ['id' => 1, 'title' => 'some title', 'created_at' => Carbon::now(), 'last_posted_at' => Carbon::now(), 'user_id' => 1, 'first_post_id' => 1, 'comment_count' => 1]\n            ],\n            'posts' => [\n                ['id' => 1, 'number' => 1, 'discussion_id' => 1, 'created_at' => Carbon::now(), 'user_id' => 1, 'type' => 'comment', 'content' => '<t><p>something</p></t>']\n            ]\n        ]);\n\n        // Most test cases won't need to test extenders, but if you want to, you can.\n        $this->extend((new CoolExtensionExtender)->doSomething('hello world'));\n    }\n\n    /**\n     * @test\n     */\n    public function some_phpunit_test_case()\n    {\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Search Gambit in PHP for Flarum\nDESCRIPTION: A custom search gambit implementation that extends AbstractRegexGambit to handle country-based searching. It defines a pattern matching for 'country:' queries and applies the appropriate database conditions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Search\\AbstractRegexGambit;\nuse Flarum\\Search\\SearchState;\n\nclass CountryGambit extends AbstractRegexGambit\n{\n    public function getGambitPattern(): string\n    {\n        return 'country:(.+)';\n    }\n\n    public function conditions(SearchState $search, array $matches, bool $negate)\n    {\n        $country = trim($matches[1], '\"');\n\n        $search->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MailgunDriver Class for Custom Mail Driver in PHP\nDESCRIPTION: This code snippet demonstrates how to create a custom mail driver class implementing the DriverInterface in Flarum. It includes methods for available settings, validation, checking if sending is possible, and building the transport.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/mail.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Mail\\DriverInterface;\nuse Illuminate\\Contracts\\Validation\\Factory;\nuse Illuminate\\Mail\\Transport\\MailgunTransport;\nuse Illuminate\\Support\\MessageBag;\nuse Swift_Transport;\n\nclass MailgunDriver implements DriverInterface\n{\n    public function availableSettings(): array\n    {\n        return [\n            'setting_one' => '',\n            'setting_two' => 'defaultValue',\n            'dropdown_setting' => [\n                'option_one_val' => 'Option One Display',\n                'option_two_val' => 'Option Two Display',\n            ],\n        ];\n    }\n\n    public function validate(SettingsRepositoryInterface $settings, Factory $validator): MessageBag\n    {\n        $validator->make($settings->all(), [\n            'setting_one' => 'required',\n            'setting_two' => 'nullable|integer',\n        ])->errors();\n    }\n\n    public function canSend(): bool\n    {\n        return true;\n    }\n\n    public function buildTransport(SettingsRepositoryInterface $settings): Swift_Transport\n    {\n        // Return a mail transport that implements Swift Transport\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering API Routes in PHP\nDESCRIPTION: Example of registering standard CRUD API endpoints using Flarum's Routes extender. Shows how to set up GET, POST, PATCH and DELETE routes for a resource.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/api.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Routes('api'))\n        ->get('/tags', 'tags.index', ListTagsController::class)\n        ->get('/tags/{id}', 'tags.show', ShowTagController::class)\n        ->post('/tags', 'tags.create', CreateTagController::class)\n        ->patch('/tags/{id}', 'tags.update', UpdateTagController::class)\n        ->delete('/tags/{id}', 'tags.delete', DeleteTagController::class)\n```\n\n----------------------------------------\n\nTITLE: Custom Relationship Definition in PHP\nDESCRIPTION: Shows how to create custom relationships using the relationship method for more complex scenarios like morphMany, morphToMany, and morphedByMany.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/models.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->relationship('mobile', 'App\\Phone', function ($user) {\n            // Return any Eloquent relationship here.\n            return $user->belongsToMany(Discussion::class, 'recipients')\n                ->withTimestamps()\n                ->wherePivot('removed_at', null);\n        })\n```\n\n----------------------------------------\n\nTITLE: Defining Model Relationships in PHP for Flarum\nDESCRIPTION: Demonstrates how to add relationships to existing Flarum models using the Model extender. Covers hasOne, belongsTo, hasMany, and belongsToMany relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->hasOne('phone', 'App\\Phone', 'foreign_key', 'local_key')\n        ->belongsTo('country', 'App\\Country', 'foreign_key', 'other_key')\n        ->hasMany('comment', 'App\\Comment', 'foreign_key', 'local_key')\n        ->belongsToMany('role', 'App\\Role', 'role_user', 'user_id', 'role_id')\n```\n\n----------------------------------------\n\nTITLE: Discussion Model Global Scoper\nDESCRIPTION: This code defines a global scoper for the `Discussion` model, considering user abilities and tag permissions.  It prevents infinite recursion and scopes discussions where users have permissions in all tags, or have global permission.  It uses `whereNotIn` to ensure permissions are present in ALL tags and provides an extension override.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibilityForAbility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     * @param string $ability\n     */\n    public function __invoke(User $actor, Builder $query, $ability)\n    {\n        // Automatic scoping should be applied to the global `view` ability,\n        // and to arbitrary abilities that aren't subqueries of `view`.\n        // For example, if we want to scope discussions where the user can\n        // edit posts, this should apply.\n        // But if we are expanding a restriction of `view` (for example,\n        // `viewPrivate`), we shouldn't apply this query again.\n        if (substr($ability, 0, 4) === 'view' && $ability !== 'view') {\n            return;\n        }\n\n        // Avoid an infinite recursive loop.\n        if (Str::endsWith($ability, 'InRestrictedTags')) {\n            return;\n        }\n\n        // `view` is a special case where the permission string is represented by `viewForum`.\n        $permission = $ability === 'view' ? 'viewForum' : $ability;\n\n        // Restrict discussions where users don't have necessary permissions in all tags.\n        // We use a double notIn instead of a doubleIn because the permission must be present in ALL tags,\n        // not just one.\n        $query->where(function ($query) use ($actor, $permission) {\n            $query\n                ->whereNotIn('discussions.id', function ($query) use ($actor, $permission) {\n                    return $query->select('discussion_id')\n                        ->from('discussion_tag')\n                        ->whereNotIn('tag_id', function ($query) use ($actor, $permission) {\n                            Tag::query()->setQuery($query->from('tags'))->whereHasPermission($actor, $permission)->select('tags.id');\n                        });\n                })\n                ->orWhere(function ($query) use ($actor, $permission) {\n                    // Allow extensions a way to override scoping for any given permission.\n                    $query->whereVisibleTo($actor, \"${permission}InRestrictedTags\");\n                });\n        });\n\n        // Hide discussions with no tags if the user doesn't have that global\n        // permission.\n        if (! $actor->hasPermission($permission)) {\n            $query->has('tags');\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Working with Model Attributes and Relationships in JavaScript\nDESCRIPTION: Demonstrates how to access attributes and relationships from model instances in the frontend. The store wraps API resources in model objects with pre-defined accessor methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = discussion.id();\nconst title = discussion.title();\nconst posts = discussion.posts(); // array of Post models\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Service Provider in PHP for Flarum\nDESCRIPTION: This code snippet demonstrates how to create a custom service provider in Flarum by extending AbstractServiceProvider. It includes both register and boot methods for handling container bindings and custom logic during the application boot process.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/service-provider.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Foundation\\AbstractServiceProvider;\nuse Illuminate\\Contracts\\Container\\Container;\n\nclass CustomServiceProvider extends AbstractServiceProvider\n{\n    public function register()\n    {\n        // custom logic here, for example:\n        $this->container->resolving(SomeClass::class, function ($container) {\n            return new SomeClass($container->make('some.binding'));\n        });\n    }\n\n    public function boot(Container $container)\n    {\n        // custom logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Stream in Flarum for Reactive Data Binding\nDESCRIPTION: Example of using Flarum's Stream utility for reactive data binding. Stream is a wrapper around Mithril's Stream that provides a simple way to manage form state.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/forms.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\n\n\nconst value = Stream(\"hello!\");\nvalue() === \"hello!\"; // true\nvalue(\"world!\");\nvalue() === \"world!\"; // true\n```\n\n----------------------------------------\n\nTITLE: Configuring TextFormatter in Flarum using PHP\nDESCRIPTION: This snippet demonstrates how to use the Formatter extender in Flarum to configure the TextFormatter, modify raw text before parsing, and modify XML before rendering. It includes examples of adding custom BBCodes and implementing custom logic for parsing and rendering.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/formatting.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse s9e\\TextFormatter\\Configurator;\nuse s9e\\TextFormatter\\Parser;\nuse s9e\\TextFormatter\\Renderer;\n\nreturn [\n    (new Extend\\Formatter)\n        // Add custom text formatter configuration\n        ->configure(function (Configurator $config) {\n            $config->BBCodes->addFromRepository('B');\n        })\n        // Modify raw text before it is parsed.\n        // This callback should return the modified text.\n        ->parse(function (Parser $parser, $context, $text) {\n            // custom logic here\n            return $newText;\n        })\n        // Modify the XML to be rendered before rendering.\n        // This callback should return the new XML.\n        // For example, in the mentions extension, this is used to\n        // provide the username and display name of the user being mentioned.\n        // Make sure that the last $request argument is nullable (or omitted entirely).\n        ->render(function (Renderer $renderer, $context, $xml, Request $request = null) {\n            // custom logic here\n            return $newXml;\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Injecting SettingsRepositoryInterface in PHP Class\nDESCRIPTION: This snippet demonstrates how to use dependency injection to access the settings repository in a Flarum extension. It shows the proper class structure with constructor injection of the SettingsRepositoryInterface.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace acme\\HelloWorld\\ExampleDir;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\n\nclass ClassInterfacesWithSettings\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Notification Type in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to create a notification blueprint class for a post like notification in Flarum. It implements the BlueprintInterface and defines methods for subject, user, data, type, and subject model.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass PostLikedBlueprint implements BlueprintInterface\n{\n    public $post;\n\n    public $user;\n\n    public function __construct(Post $post, User $user)\n    {\n        $this->post = $post;\n        $this->user = $user;\n    }\n\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    public function getFromUser()\n    {\n        return $this->user;\n    }\n\n    public function getData()\n    {\n    }\n\n    public static function getType()\n    {\n        return 'postLiked';\n    }\n\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing console commands\nDESCRIPTION: This code demonstrates testing console commands in Flarum using `ConsoleTestCase`. It shows how to define input parameters for the command and how to run the command using `$this->runCommand()`. The expected output is then compared to the actual output.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Tests\\integration\\ConsoleTestCase;\n\nclass ConsoleTest extends ConsoleTestCase\n{\n    /**\n     * @test\n     */\n    public function command_works()\n    {\n        $input = [\n            'command' => 'some:command',  // The command name, equivalent of `php flarum some:command`\n            'foo' => 'bar',  // arguments\n            '--lorem' => 'ipsum'  // options\n        ];\n\n        $this->assertEquals('Some Output.', $this->runCommand($input));\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Relationships to Existing Models in PHP\nDESCRIPTION: Demonstrates how to add various types of relationships (hasOne, belongsTo, hasMany, belongsToMany) to existing models using the Model extender in PHP.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->hasOne('phone', 'App\\Phone', 'foreign_key', 'local_key')\n        ->belongsTo('country', 'App\\Country', 'foreign_key', 'other_key')\n        ->hasMany('comment', 'App\\Comment', 'foreign_key', 'local_key')\n        ->belongsToMany('role', 'App\\Role', 'role_user', 'user_id', 'role_id')\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Searcher Implementation\nDESCRIPTION: Demonstrates creation of an abstract searcher class for reusing search logic across multiple model searchers.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/search.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace YourPackage\\Search;\n\nuse Flarum\\Search\\SearcherInterface;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nabstract class AbstractAcmeSearcher implements SearcherInterface\n{\n    public function __construct(\n        protected FilterManager $filters,\n        /** @var array<callable> */\n        protected array $mutators\n    ) {\n    }\n\n    abstract public function getQuery(User $actor): Builder;\n    \n    public function search(SearchCriteria $criteria): SearchResults\n    {\n        // Your searching logic here.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Default Permissions in a Migration\nDESCRIPTION: Data migration that assigns default permissions to a specific user group in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/models.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\nreturn Migration::addPermissions([\n    'some.permission' => Group::MODERATOR_ID\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Notification Blueprint in PHP\nDESCRIPTION: Example of creating a PostLikedBlueprint class that implements BlueprintInterface to define a notification for when a post is liked. The class includes methods for retrieving the subject, sender, data, type, and subject model.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass PostLikedBlueprint implements BlueprintInterface\n{\n    public $post;\n\n    public $user;\n\n    public function __construct(Post $post, User $user)\n    {\n        $this->post = $post;\n        $this->user = $user;\n    }\n\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    public function getSender()\n    {\n        return $this->user;\n    }\n\n    public function getData()\n    {\n    }\n\n    public static function getType()\n    {\n        return 'postLiked';\n    }\n\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Query Methods for Database-Specific Operations\nDESCRIPTION: Demonstrates Flarum's conditional query methods that allow executing different SQL queries based on the database system in use. The example shows implementing a year filter across MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/database.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// this is just an example, otherwise you would just use eloquent's whereYear method.\n$query\n  ->whenMySql(function ($query) {\n      $query->whereRaw('YEAR(created_at) = 2022');\n  })\n  ->whenPgSql(function ($query) {\n      $query->whereRaw('strftime(\"%Y\", created_at) = 2022');\n  })\n  ->whenSqlite(function ($query) {\n      $query->whereRaw('EXTRACT(YEAR FROM created_at) = 2022');\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag Policy in Flarum\nDESCRIPTION: Example of a custom policy class for Tags in Flarum. This policy determines if users can start discussions or add tags to discussions based on tag restrictions and user permissions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/authorization.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\Access\\AbstractPolicy;\nuse Flarum\\User\\User;\n\nclass TagPolicy extends AbstractPolicy\n{\n    /**\n     * @param User $actor\n     * @param Tag $tag\n     * @return bool|null\n     */\n    public function startDiscussion(User $actor, Tag $tag)\n    {\n        if ($tag->is_restricted) {\n            return $actor->hasPermission('tag'.$tag->id.'.startDiscussion') ? $this->allow() : $this->deny();\n        }\n    }\n\n    /**\n     * @param User $actor\n     * @param Tag $tag\n     * @return bool|null\n     */\n    public function addToDiscussion(User $actor, Tag $tag)\n    {\n        return $this->startDiscussion($actor, $tag);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Notification Components in JavaScript\nDESCRIPTION: Example of registering notification components and extending the notification grid in Flarum's frontend. Shows how to add notification preferences to the settings panel.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport NotificationGrid from 'flarum/forum/components/NotificationGrid';\n\nimport PostLikedNotification from './components/PostLikedNotification';\n\napp.initializers.add('flarum-likes', () => {\n  app.notificationComponents.postLiked = PostLikedNotification;\n\n  extend(NotificationGrid.prototype, 'notificationTypes', function (items) {\n    items.add('postLiked', {\n      name: 'postLiked',\n      icon: 'far fa-thumbs-up',\n      label: app.translator.trans('flarum-likes.forum.settings.notify_post_liked_label')\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Eloquent Model Relationships in PHP\nDESCRIPTION: Shows how to add basic relationships (hasOne, belongsTo, hasMany, belongsToMany) to existing models using the Model extender in PHP.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->hasOne('phone', 'App\\Phone', 'foreign_key', 'local_key')\n        ->belongsTo('country', 'App\\Country', 'foreign_key', 'other_key')\n        ->hasMany('comment', 'App\\Comment', 'foreign_key', 'local_key')\n        ->belongsToMany('role', 'App\\Role', 'role_user', 'user_id', 'role_id')\n```\n\n----------------------------------------\n\nTITLE: Accessing Cached Data in Frontend JavaScript\nDESCRIPTION: Shows how to access previously loaded resources from the store cache using the all and getById methods. This avoids unnecessary API calls by using locally cached model data.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussions = app.store.all('discussions');\nconst discussion = app.store.getById('discussions', 123);\n```\n\n----------------------------------------\n\nTITLE: Creating Filter Mutator for Same Country Users in PHP\nDESCRIPTION: This snippet defines a filter mutator class that modifies any user filter to only include users from the same country as the current user. It demonstrates how to implement custom logic that applies to all filter requests.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterState;\nuse Flarum\\Query\\QueryCriteria;\n\nclass OnlySameCountryFilterMutator\n{\n    public function __invoke(FilterState $filterState, QueryCriteria $queryCriteria)\n    {\n        $filterState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Titles in Flarum Pages\nDESCRIPTION: Examples of how to set page titles in Flarum pages by using app.setTitle() and app.setTitleCount() in lifecycle hooks. Includes both static titles and titles based on loaded data.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Page from 'flarum/common/components/Page';\n\n\nexport default class CustomPage extends Page {\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    app.setTitle(\"Cool Page\");\n    app.setTitleCount(0);\n  }\n\n  view() {\n    // ...\n  }\n}\n\nexport default class CustomPageLoadsData extends Page {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    app.store.find(\"users\", 1).then(user => {\n      app.setTitle(user.displayName());\n      app.setTitleCount(0);\n    })\n  }\n\n  view() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Admin Search Index Items in JavaScript\nDESCRIPTION: Example of adding custom items to the admin search index using the Admin.generalIndexItems extender. Shows how to create searchable items with translated labels and help text.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/admin.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\nimport app from 'flarum/admin/app';\n\nreturn [\n  new Extend.Admin()\n    .generalIndexItems(() => [\n      {\n        id: 'acme-interstellar',\n        label: app.translator.trans('acme-interstellar.admin.acme_interstellar_label', {}, true),\n        help: app.translator.trans('acme-interstellar.admin.acme_interstellar_help', {}, true),\n      },\n    ])\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Draft Delete Controller and Handler in PHP\nDESCRIPTION: Contains the DeleteDraftController for handling draft deletion requests and DeleteDraftHandler for processing draft deletions with owner-only permission checks.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass DeleteDraftController extends AbstractDeleteController\n{\n    protected $bus;\n\n    public function __construct(Dispatcher $bus)\n    {\n        $this->bus = $bus;\n    }\n\n    protected function delete(ServerRequestInterface $request)\n    {\n        $actor = RequestUtil::getActor($request);\n\n        $this->bus->dispatch(\n            new DeleteDraft(Arr::get($request->getQueryParams(), 'id'), $actor)\n        );\n    }\n}\n\nclass DeleteDraftHandler\n{\n    public function handle(DeleteDraft $command)\n    {\n        $actor = $command->actor;\n\n        $draft = Draft::findOrFail($command->draftId);\n\n        if (strval($actor->id) !== strval($draft->user_id)) {\n            throw new PermissionDeniedException();\n        }\n        $draft->delete();\n\n        return $draft;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Serializer in PHP for Flarum API\nDESCRIPTION: Shows how to define a new resource type by creating a custom serializer class that extends AbstractSerializer in Flarum, including specifying the resource type and implementing the getDefaultAttributes method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\AbstractSerializer;\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nclass DiscussionSerializer extends AbstractSerializer\n{\n    protected $type = 'discussions';\n\n    protected function getDefaultAttributes($discussion)\n    {\n        return [\n            'title' => $discussion->title,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Frontend Models in TypeScript\nDESCRIPTION: Demonstrates how to add attributes and relationships to existing frontend models using the Model extender in TypeScript.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n  new Extend.Model(Discussion)\n    .attribute<string>('slug')\n    .hasOne<User>('user')\n    .hasMany<Post>('posts')\n```\n\n----------------------------------------\n\nTITLE: Mocking Flarum Services in PHP Backend Tests\nDESCRIPTION: Demonstrates how to mock Flarum services in PHP unit tests, including setting up mock objects for settings repositories and user authentication.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function setUp(): void\n{\n    parent::setUp();\n    // example - if our setting needs settings, we can mock the settings repository\n    $settingsRepo = m::mock(SettingsRepositoryInterface::class);\n    // and then control specific return values for each setting key\n    $settingsRepo->shouldReceive('get')->with('some-plugin-key')->andReturn('some-value-useful-for-testing');\n    // construct your class under test, passing mocked services as needed\n    $this->serializer = new YourClassUnderTest($settingsRepo);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->actor = m::mock(User::class);\n$request = m::mock(Request::class)->makePartial();\n$request->shouldReceive('getAttribute->getActor')->andReturn($this->actor);\n$this->actor->shouldReceive('SOME PERMISSION')->andReturn(true/false);\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Flarum Forum App for Testing in TypeScript\nDESCRIPTION: This code snippet shows how to bootstrap the Flarum forum app for testing purposes. It demonstrates the use of the bootstrapForum function from the Flarum jest-config package within a test suite.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/testing.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport bootstrapForum from '@flarum/jest-config/src/boostrap/forum';\n\ndescribe('Forum tests', () => {\n  beforeAll(() => bootstrapForum());\n\n  it('should do something', () => {\n    // your test code here\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Requests in Flarum Extensions\nDESCRIPTION: Shows how to test HTTP endpoints by sending requests and validating responses in a Flarum integration test, including GET requests with query parameters and POST requests with JSON payloads.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    /**\n     * @test\n     */\n    public function can_search_users()\n    {\n        $response = $this->send(\n          $this->request('GET', '/api/users', ['authenticatedAs' => 1])\n               ->withQueryParams(['filter' => ['q' => 'john group:1'], 'sort' => 'username'])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    /**\n     * @test\n     */\n    public function can_create_user()\n    {\n        $response = $this->send(\n          $this->request(\n                'POST',\n                '/api/users',\n                [\n                    'authenticatedAs' => 1,\n                    'json' => [\n                        'data' => [\n                            'attributes' => [\n                                'username' => 'test',\n                                'password' => 'too-obscure',\n                                'email' => 'test@machine.local'\n                            ]\n                        ]\n                    ]\n                ]\n            )\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Authorization Methods in PHP\nDESCRIPTION: Demonstrates various methods to check user permissions and assert authorizations in Flarum using the User class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/authorization.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Check whether a user can perform an action.\n$canDoSomething = $actor->can('viewForum');\n\n// Check whether a user can perform an action on a subject.\n$canDoSomething = $actor->can('reply', $discussion);\n\n// Raise a PermissionDeniedException if a user cannot perform an action.\n$actor->assertCan('viewForum');\n$actor->assertCan('reply', $discussion);\n\n// Raise a NotAuthenticatedException if the user is not logged in.\n$actor->assertRegistered();\n\n// Raise a PermissionDeniedException if the user is not an admin.\n$actor->assertAdmin();\n\n// Check whether one of the user's groups have a permission.\n// WARNING: this should be used with caution, as it doesn't actually\n// run through the authorization process, so it doesn't account for policies.\n// It is, however, useful in implementing custom policies.\n$actorHasPermission = $actor->hasPermission(`viewForum`);\n```\n\n----------------------------------------\n\nTITLE: Using Translator in JavaScript for Flarum Extensions\nDESCRIPTION: Shows how to use the app.translator.trans() method to reference a translation in a Flarum extension's JavaScript code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('acme-hello-world', function() {\n  alert(app.translator.trans('acme-hello-world.alert.hello_text'));\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Delete Resource Controller in Flarum\nDESCRIPTION: Shows how to create a controller that deletes a resource by extending AbstractDeleteController. The example finds a tag by ID from the query parameters and deletes it.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractDeleteController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nclass DeleteTagController extends AbstractDeleteController\n{    \n    protected function delete(Request $request)\n    {\n        $id = Arr::get($request->getQueryParams(), 'id');\n\n        Tag::findOrFail($id)->delete();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Route Resolver for Discussion Pages in Flarum\nDESCRIPTION: Shows an example of a custom route resolver for discussion pages in Flarum, extending the DefaultResolver with specific behavior for discussion routing and scrolling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport DefaultResolver from '../../common/resolvers/DefaultResolver';\n\n/**\n * This isn't exported as it is a temporary measure.\n * A more robust system will be implemented alongside UTF-8 support in beta 15.\n */\nfunction getDiscussionIdFromSlug(slug: string | undefined) {\n  if (!slug) return;\n  return slug.split('-')[0];\n}\n\n/**\n * A custom route resolver for DiscussionPage that generates the same key to all posts\n * on the same discussion. It triggers a scroll when going from one post to another\n * in the same discussion.\n */\nexport default class DiscussionPageResolver extends DefaultResolver {\n  static scrollToPostNumber: number | null = null;\n\n  makeKey() {\n    const params = { ...m.route.param() };\n    if ('near' in params) {\n      delete params.near;\n    }\n    params.id = getDiscussionIdFromSlug(params.id);\n    return this.routeName.replace('.near', '') + JSON.stringify(params);\n  }\n\n  onmatch(args, requestedPath, route) {\n    if (route.includes('/d/:id') && getDiscussionIdFromSlug(args.id) === getDiscussionIdFromSlug(m.route.param('id'))) {\n      DiscussionPageResolver.scrollToPostNumber = parseInt(args.near);\n    }\n\n    return super.onmatch(args, requestedPath, route);\n  }\n\n  render(vnode) {\n    if (DiscussionPageResolver.scrollToPostNumber !== null) {\n      const number = DiscussionPageResolver.scrollToPostNumber;\n      // Scroll after a timeout to avoid clashes with the render.\n      setTimeout(() => app.current.get('stream').goToNumber(number));\n      DiscussionPageResolver.scrollToPostNumber = null;\n    }\n\n    return super.render(vnode);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Flarum Configuration File in PHP\nDESCRIPTION: An example config.php file for Flarum with detailed comments explaining each configuration option. This file contains essential settings like database connection parameters, debugging options, maintenance mode controls, and URL paths.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/config.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php return array (\n  'debug' => false, // sorunları gidermek için kullanılan hata ayıklama modunu etkinleştirir veya devre dışı bırakır\n  'offline' => false, // site bakım modunu etkinleştirir veya devre dışı bırakır. Bu, sitenizi tüm kullanıcılar (yöneticiler dahil) için erişilemez hale getirir.\n  'database' =>\n  array (\n    'driver' => 'mysql', // veritabanı sürücüsü, yani MySQL, MariaDB...\n    'host' => 'localhost', // bağlantının ana bilgisayarı, harici bir hizmet kullanılmadığı sürece çoğu durumda localhost\n    'database' => 'flarum', // veritabanının adı\n    'username' => 'root', // veritabanı kullanıcı adı\n    'password' => '', // veritabanı şifresi\n    'charset' => 'utf8mb4',\n    'collation' => 'utf8mb4_unicode_ci',\n    'prefix' => '', / veritabanındaki tablolar için önek, aynı veritabanını başka bir hizmetle paylaşıyorsanız kullanışlıdır\n    'port' => '3306', // veritabanı bağlantısının portu, MySQL ile varsayılan olarak 3306'dır\n    'strict' => false,\n  ),\n  'url' => 'https://flarum.localhost', // URL kurulumu, etki alanlarını değiştirirseniz bunu değiştirmek isteyeceksiniz\n  'paths' =>\n  array (\n    'api' => 'api', // /api , API'ye gider.\n    'admin' => 'admin', // /admin , yönetici paneline gider.\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Using PageStructure for Forum Pages in TypeScript\nDESCRIPTION: Example showing how to implement a custom page using Flarum's PageStructure component. This demonstrates the recommended way to create consistent forum pages with standard layout elements.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend-pages.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport PageStructure from 'flarum/forum/components/PageStructure';\n\nexport default class AcmePage extends Page {\n  view() {\n    return (\n      <PageStructure\n        className=\"AcmePage\" // Optional but recommended.\n        hero={() => <CustomHero />} // Optional. Extends `flarum/forum/components/Hero`\n        sidebar={() => <div>Custom Sidebar</div>} // Optional.\n        loading={this.loading} // Optional.\n      >\n        <div>Custom Content</div>\n      </PageStructure>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Scheduled Commands in Flarum\nDESCRIPTION: This example demonstrates how to create a scheduled command in Flarum using the schedule method of the Console extender. It shows how to specify the command, define its schedule using a callback, and pass arguments and options to the command.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/console.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Console\\CustomCommand;\nuse Illuminate\\Console\\Scheduling\\Event;\n\nreturn [\n    // Other extenders\n    (new Extend\\Console())->schedule('cache:clear', function (Event $event) {\n        $event->everyMinute();\n    }, ['Arg1', '--option1', '--option2']),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Frontend Models\nDESCRIPTION: Shows how to add attributes and relationships to existing frontend models using the Model extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n  new Extend.Model(Discussion)\n    .attribute<string>('slug')\n    .hasOne<User>('user')\n    .hasMany<Post>('posts')\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Actions Workflows for Backend - YAML\nDESCRIPTION: This snippet demonstrates how to create a backend GitHub Actions workflow using a reusable configuration from the core Flarum development team. It specifies when to trigger the workflow and the jobs to run with parameters for testing and static code analysis.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/github-actions.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Backend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_backend.yml@main\n    with:\n      # Different types of jobs\n      enable_backend_testing: true\n      enable_phpstan: false\n\n      # Additional parameters\n      backend_directory: .\n```\n\n----------------------------------------\n\nTITLE: Adjusting API Data Before Serialization\nDESCRIPTION: Shows how to modify API data before serialization using the ApiController extender's prepareDataForSerialization method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillSerializeData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->prepareDataForSerialization(function ($controller, $data, $request, $document) {\n            $data->load('myCustomRelation');\n        }),\n]\n```\n\n----------------------------------------\n\nTITLE: Frontend CSS Asset Registration\nDESCRIPTION: This snippet demonstrates how to register a CSS or LESS asset for the frontend using the `Frontend` extender in the `extend.php` file.  It calls the `css` method on the `Frontend` instance to specify the path to the CSS/LESS file. The example registers `forum.less`.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less')\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Service Provider in PHP for Flarum\nDESCRIPTION: Example of a custom service provider class that extends AbstractServiceProvider with register and boot methods. Demonstrates container resolution and dependency injection patterns.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/service-provider.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Foundation\\AbstractServiceProvider;\nuse Illuminate\\Contracts\\Container\\Container;\n\nclass CustomServiceProvider extends AbstractServiceProvider\n{\n    public function register()\n    {\n        // custom logic here, for example:\n        $this->container->resolving(SomeClass::class, function ($container) {\n            return new SomeClass($container->make('some.binding'));\n        });\n    }\n\n    public function boot(Container $container)\n    {\n        // custom logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a List Resource Controller for Flarum API\nDESCRIPTION: Example of implementing a controller for listing resources in Flarum's JSON:API. This controller extends AbstractListController and returns a collection of models to be serialized.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractListController;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass ListTagsController extends AbstractListController\n{\n    public $serializer = TagSerializer::class;\n    \n    protected function data(Request $request, Document $document)\n    {\n        return Tag::all();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration in PHP\nDESCRIPTION: Example of creating a migration file in Flarum to modify the database schema. It shows the basic structure with 'up' and 'down' functions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Schema\\Builder;\n\nreturn [\n    'up' => function (Builder $schema) {\n        // up migration\n    },\n    'down' => function (Builder $schema) {\n        // down migration\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Frontend Testing\nDESCRIPTION: Adding test scripts and module configuration to package.json for Flarum extension frontend testing\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"scripts\": {\n    \"test\": \"yarn node --experimental-vm-modules $(yarn bin jest)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Service Provider in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to create a custom service provider in Flarum by extending AbstractServiceProvider. It includes both register and boot methods for container manipulation and custom logic execution.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/service-provider.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Foundation\\AbstractServiceProvider;\nuse Illuminate\\Contracts\\Container\\Container;\n\nclass CustomServiceProvider extends AbstractServiceProvider\n{\n    public function register()\n    {\n        // custom logic here, for example:\n        $this->container->resolving(SomeClass::class, function ($container) {\n            return new SomeClass($container->make('some.binding'));\n        });\n    }\n\n    public function boot(Container $container)\n    {\n        // custom logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Configuration for Unit Tests\nDESCRIPTION: Example PHPUnit configuration file for unit tests with appropriate settings for Flarum extension testing.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/testing.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n\n    <testsuites>\n        <testsuite name=\"Flarum Unit Tests\">\n            <directory suffix=\"Test.php\">./unit</directory>\n        </testsuite>\n    </testsuites>\n    <listeners>\n        <listener class=\"\\Mockery\\Adapter\\Phpunit\\TestListener\"></listener>\n    </listeners>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Post Type in PHP for Flarum\nDESCRIPTION: This code snippet demonstrates how to define a custom post type in Flarum by extending the AbstractPost class. It includes a method to save additional data and shows how to register the custom post type with Flarum's extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/post-types.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Post\\AbstractPost;\nuse Flarum\\Post\\Post;\n\nclass CustomPost extends AbstractPost\n{\n    public static $type = 'custom';\n\n    protected $casts = [\n        'extra_data' => 'array'\n    ];\n\n    public function saveExtra(array $extra)\n    {\n        $this->extra_data = $extra;\n        $this->save();\n    }\n}\n\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\PostTypes())->add(CustomPost::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Extending Flarum Models\nDESCRIPTION: Shows how to use the Model extender to add casts and default values to existing Flarum models.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\User\\User;\n\nreturn [\n    (new Extend\\Model(User::class))\n        ->default('is_alive', true)\n        ->cast('suspended_until', 'datetime')\n        ->cast('is_admin', 'boolean')\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listeners in Flarum\nDESCRIPTION: Demonstrates how to use the Event extender to register event listeners in Flarum, both as callbacks and listener classes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->listen(Deleted::class, function($event) {\n            // do something here\n        })\n        ->listen(Deleted::class, PostDeletedListener::class)\n];\n```\n\nLANGUAGE: php\nCODE:\n```\nclass PostDeletedListener\n{\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    public function handle(Deleted $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom User Country Filter in PHP\nDESCRIPTION: Creates a custom Filter class to filter users by country. The filter accepts a country value and can be negated to exclude matches. It implements FilterInterface and modifies the query builder to add WHERE clauses.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/search.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterInterface;\nuse Flarum\\Filter\\FilterState;\n\nclass CountryFilter implements FilterInterface\n{\n    public function getFilterKey(): string\n    {\n        return 'country';\n    }\n\n    public function filter(FilterState $filterState, string $filterValue, bool $negate)\n    {\n        $country = trim($filterValue, '\"');\n\n        $filterState->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a New Frontend Model with the Store\nDESCRIPTION: Shows how to register a new model with Flarum's store using the Store extender. This enables the store to instantiate the correct model class when working with this resource type.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Store()\n    .add('tags', Tag),\n];\n```\n\n----------------------------------------\n\nTITLE: Updating JavaScript Imports for Flarum Beta 16\nDESCRIPTION: Example of updating JavaScript imports to use the new namespace structure in Flarum Beta 16. This change affects how components and utilities are imported in frontend code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Old import style (deprecated)\nimport Component from 'flarum/Component'\n\n// New import style\nimport Component from 'flarum/common/Component'\n```\n\n----------------------------------------\n\nTITLE: Using Model Factories in Flarum Test Cases\nDESCRIPTION: Shows how to use model factories to generate test data in Flarum test cases. It demonstrates using model classes as table keys and manually using factories after the app has booted.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/testing.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;\nuse Flarum\\Testing\\integration\\TestCase;\nuse Flarum\\User\\User;\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\Post\\Post;\n\nclass SomeTest extends TestCase\n{\n    use RetrievesAuthorizedUsers;\n\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        $this->prepareDatabase([\n            User::class => [\n                $this->normalUser(),\n            ],\n            Discussion::class => [\n                ['id' => 1, 'title' => 'some title', 'last_posted_at' => Carbon::now(), 'user_id' => 1, 'first_post_id' => 1]\n            ],\n            Post::class => [\n                ['id' => 1, 'number' => 1, 'discussion_id' => 1, 'user_id' => 1, 'type' => 'comment']\n            ],\n        ]);\n    }\n}\n\nclass AnotherTest extends TestCase\n{\n    use RetrievesAuthorizedUsers;\n    /**\n     * @test\n     */\n    public function some_phpunit_test_case()\n    {\n        $this->app();\n        \n        $user = User::factory()->create();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Serializers in PHP for Flarum API\nDESCRIPTION: Demonstrates how to add attributes and relationships to existing resource types using the ApiSerializer extender in Flarum, including single attribute additions and more complex mutations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nreturn [\n    (new Extend\\ApiSerializer(UserSerializer::class))\n        // One attribute at a time\n        ->attribute('firstName', function ($serializer, $user, $attributes) {\n            return $user->first_name\n        })\n        // Multiple modifications at once, more complex logic\n        ->mutate(function($serializer, $user, $attributes) {\n            $attributes['someAttribute'] = $user->someAttribute;\n            if ($serializer->getActor()->can('administrate')) {\n                $attributes['someDate'] = $serializer->formatDate($user->some_date);\n            }\n\n            return $attributes;\n        })\n        // API relationships\n        ->hasOne('phone', PhoneSerializer::class)\n        ->hasMany('comments', CommentSerializer::class),\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Eloquent Relationships to Models in PHP\nDESCRIPTION: Demonstrates how to add common Eloquent relationships (hasOne, belongsTo, hasMany, belongsToMany) to existing models using the Model extender. The example shows adding relationships to the User class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->hasOne('phone', 'App\\Phone', 'foreign_key', 'local_key')\n        ->belongsTo('country', 'App\\Country', 'foreign_key', 'other_key')\n        ->hasMany('comment', 'App\\Comment', 'foreign_key', 'local_key')\n        ->belongsToMany('role', 'App\\Role', 'role_user', 'user_id', 'role_id')\n```\n\n----------------------------------------\n\nTITLE: Registering Event Subscriber in PHP\nDESCRIPTION: Example of registering an event subscriber to listen to multiple events using the Event extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Flarum\\Post\\Event\\Saving;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->subscribe(PostEventSubscriber::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Creating New Resources in Frontend JavaScript\nDESCRIPTION: This snippet illustrates how to create a new resource by creating a new model instance and saving it using Flarum's frontend store.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussion = app.store.createRecord('discussions');\n\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Test Case Setup Example\nDESCRIPTION: This code snippet demonstrates how to set up a test case for a Flarum extension. It shows how to override settings, enable extensions, populate the database, and use extenders before the Flarum application is booted. The `setUp` method is used for common setup tasks.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    use RetrievesAuthorizedUsers;\n\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        $this->setting('my.custom.setting', true);\n\n        // Let's assume our extension depends on tags.\n        // Note that tags will need to be in your extension's composer.json's `require-dev`.\n        // Also, make sure you include the ID of the extension currently being tested, unless you're\n        // testing the baseline without your extension.\n        $this->extension('flarum-tags', 'my-cool-extension');\n\n        // Note that this input isn't validated: make sure you're populating with valid, representative data.\n        $this->prepareDatabase([\n            'users' => [\n                $this->normalUser() // Available for convenience.\n            ],\n            'discussions' => [\n                ['id' => 1, 'title' => 'some title', 'created_at' => Carbon::now(), 'last_posted_at' => Carbon::now(), 'user_id' => 1, 'first_post_id' => 1, 'comment_count' => 1]\n            ],\n            'posts' => [\n                ['id' => 1, 'number' => 1, 'discussion_id' => 1, 'created_at' => Carbon::now(), 'user_id' => 1, 'type' => 'comment', 'content' => '<t><p>something</p></t>']\n            ]\n        ]);\n\n        // Most test cases won't need to test extenders, but if you want to, you can.\n        $this->extend((new CoolExtensionExtender)->doSomething('hello world'));\n    }\n\n    /**\n     * @test\n     */\n    public function some_phpunit_test_case()\n    {\n        // ...\n    }\n\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing DraftSerializer in Flarum 1.x\nDESCRIPTION: The original DraftSerializer class from Flarum 1.x, showing how attributes and relationships are defined. This class serializes Draft entities with properties like title, content, and relationships to users.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass DraftSerializer extends AbstractSerializer\n{\n    /**\n     * {@inheritdoc}\n     */\n    protected $type = 'drafts';\n\n    /**\n     * @param \\FoF\\Drafts\\Draft $draft\n     */\n    protected function getDefaultAttributes($draft)\n    {\n        return [\n            'title'                    => $draft->title,\n            'content'                  => $draft->content,\n            'extra'                    => $draft->extra ? json_decode($draft->extra) : null,\n            'scheduledValidationError' => $draft->scheduled_validation_error,\n            'scheduledFor'             => $this->formatDate($draft->scheduled_for),\n            'updatedAt'                => $this->formatDate($draft->updated_at),\n        ];\n    }\n\n    /**\n     * @return \\Tobscure\\JsonApi\\Relationship\n     */\n    protected function user($draft)\n    {\n        return $this->hasOne($draft, BasicUserSerializer::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Create Resource Controller in Flarum\nDESCRIPTION: Shows how to create a controller that creates a new resource by extending AbstractCreateController. The example extracts attributes from the request body to create a new Tag.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractCreateController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass CreateTagController extends AbstractCreateController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        $attributes = Arr::get($request->getParsedBody(), 'data.attributes');\n\n        return Tag::create([\n            'name' => Arr::get($attributes, 'name')\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a State Pattern in Flarum for Cross-Component Communication\nDESCRIPTION: This example demonstrates how to implement a state pattern for managing data that needs to be shared between unrelated components. A Counter class is created to maintain state, and components can access and modify this state through the global app object.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nclass Counter {\n  constructor() {\n    this._counter = 0;\n  }\n\n  increaseCounter() {\n    this._counter += 1;\n  }\n\n  getCount() {\n    return this._counter;\n  }\n}\n\napp.counter = new Counter();\n\nextend(HeaderSecondary.prototype, 'items', function(items) {\n  items.add('counterDisplay',\n    <div>\n      <p>Counter: {app.counter.getCount()}</p>\n    </div>\n  );\n})\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('counterButton',\n    <div>\n      <button onclick={() => app.counter.increaseCounter()}>Increase Counter</button>\n    </div>\n  );\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Page Component in JavaScript\nDESCRIPTION: Example of creating a simple custom page component that extends Flarum's base Page component. This demonstrates the minimal implementation required for a functional page.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend-pages.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport Page from 'flarum/common/components/Page';\n\n\nexport default class CustomPage extends Page {\n  view() {\n    return <p>Hello!</p>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Top-Level Translation Namespaces in YAML\nDESCRIPTION: Example of top-level namespaces for translation keys in Flarum, including core and validation components.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/i18n.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncore:        # Translations used by the Flarum core\nvalidation:  # Translations used by Laravel's validator\n```\n\n----------------------------------------\n\nTITLE: Implementing a Tag Policy in PHP\nDESCRIPTION: An example of a model-specific policy from Flarum Tags that determines whether users can start discussions or add tags to discussions based on tag restrictions.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/authorization.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\Access\\AbstractPolicy;\nuse Flarum\\User\\User;\n\nclass TagPolicy extends AbstractPolicy\n{\n    /**\n     * @param User $actor\n     * @param Tag $tag\n     * @return bool|null\n     */\n    public function startDiscussion(User $actor, Tag $tag)\n    {\n        if ($tag->is_restricted) {\n            return $actor->hasPermission('tag'.$tag->id.'.startDiscussion') ? $this->allow() : $this->deny();\n        }\n    }\n\n    /**\n     * @param User $actor\n     * @param Tag $tag\n     * @return bool|null\n     */\n    public function addToDiscussion(User $actor, Tag $tag)\n    {\n        return $this->startDiscussion($actor, $tag);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events in Flarum\nDESCRIPTION: Example showing how to inject the event dispatcher and use it to dispatch custom events from a class. Demonstrates proper dependency injection pattern.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/backend-events.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Post\\Event\\Deleted;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\n\nclass SomeClass\n{\n    /**\n      * @var Dispatcher\n      */\n    protected $events;\n\n    /**\n      * @param Dispatcher $events\n      */\n    public function __construct(Dispatcher $events)\n    {\n        $this->events = $events;\n    }\n\n    public function someMethod()\n    {\n        // Logic\n        $this->events->dispatch(\n            new Deleted($somePost, $someActor)\n        );\n        // More Logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Frontend Models\nDESCRIPTION: Demonstrates how to add attributes and relationships to existing frontend models using the Model extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n  new Extend.Model(Discussion)\n    .attribute<string>('slug')\n    .hasOne<User>('user')\n    .hasMany<Post>('posts')\n```\n\n----------------------------------------\n\nTITLE: Implementing Mailable Notifications in PHP for Flarum\nDESCRIPTION: This example demonstrates how to create a PostMentionedBlueprint class that implements both BlueprintInterface and MailableInterface to support email notifications for post mentions in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Mentions\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\MailableInterface;\nuse Flarum\\Post\\Post;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass PostMentionedBlueprint implements BlueprintInterface, MailableInterface\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var Post\n     */\n    public $reply;\n\n    /**\n     * @param Post $post\n     * @param Post $reply\n     */\n    public function __construct(Post $post, Post $reply)\n    {\n        $this->post = $post;\n        $this->reply = $reply;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getFromUser()\n    {\n        return $this->reply->user;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getData()\n    {\n        return ['replyNumber' => (int) $this->reply->number];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailView()\n    {\n        return ['text' => 'flarum-mentions::emails.postMentioned'];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailSubject(TranslatorInterface $translator)\n    {\n        return $translator->trans('flarum-mentions.email.post_mentioned.subject', [\n            '{replier_display_name}' => $this->post->user->display_name,\n            '{title}' => $this->post->discussion->title\n        ]);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getType()\n    {\n        return 'postMentioned';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Extension Dependencies in composer.json\nDESCRIPTION: Demonstrates how to declare dependencies for a Flarum extension in the composer.json file. This ensures the dependency is installed, enabled, and booted before your extension.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.15\",  // Since all extensions need to require core.\n    \"flarum/tags\": \"^0.1.0-beta.15\"  // This tells Flarum to treat tags as a dependency of your extension.\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table Using Migration Helper in PHP\nDESCRIPTION: Example of using Flarum's Migration helper to create a new table in the database. It shows how to define table columns using the Blueprint object.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Database\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\n\nreturn Migration::createTable('users', function (Blueprint $table) {\n    $table->increments('id');\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Models in Flarum\nDESCRIPTION: Demonstrates how to extend existing models in Flarum by adding casts and default values using the Model extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\User\\User;\n\nreturn [\n    (new Extend\\Model(User::class))\n        ->default('is_alive', true)\n        ->cast('suspended_until', 'datetime')\n        ->cast('is_admin', 'boolean')\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Flarum Extension Test Case in PHP\nDESCRIPTION: Demonstrates how to set up a test case for a Flarum extension, including configuring settings, enabling extensions, preparing the database, and using extenders.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    use RetrievesAuthorizedUsers;\n\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        $this->setting('my.custom.setting', true);\n\n        $this->extension('flarum-tags', 'my-cool-extension');\n\n        $this->prepareDatabase([\n            'users' => [\n                $this->normalUser()\n            ],\n            'discussions' => [\n                ['id' => 1, 'title' => 'some title', 'created_at' => Carbon::now(), 'last_posted_at' => Carbon::now(), 'user_id' => 1, 'first_post_id' => 1, 'comment_count' => 1]\n            ],\n            'posts' => [\n                ['id' => 1, 'number' => 1, 'discussion_id' => 1, 'created_at' => Carbon::now(), 'user_id' => 1, 'type' => 'comment', 'content' => '<t><p>something</p></t>']\n            ]\n        ]);\n\n        $this->extend((new CoolExtensionExtender)->doSomething('hello world'));\n    }\n\n    /**\n     * @test\n     */\n    public function some_phpunit_test_case()\n    {\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Test for Number Abbreviation Utility\nDESCRIPTION: Example unit test for testing a number abbreviation function using Jest with multiple test scenarios\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport abbreviateNumber from '../../../../src/common/utils/abbreviateNumber';\n\ntest('does not change small numbers', () => {\n  expect(abbreviateNumber(1)).toBe('1');\n});\n\ntest('abbreviates large numbers', () => {\n  expect(abbreviateNumber(1000000)).toBe('1M');\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n});\n```\n\n----------------------------------------\n\nTITLE: Extending HeaderPrimary items\nDESCRIPTION: This code shows how to extend the `items` method of the `HeaderPrimary` component in Flarum to add a custom link to the header. It imports necessary modules, including `extend`, `HeaderPrimary`, `ItemList`, and a custom component. The `extend` function is used to add a 'google' item with a custom component containing a link to Google, with a specified priority.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/frontend.md#2025-04-16_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend, override } from 'flarum/common/extend';\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport CustomComponentClass from './components/CustomComponentClass';\n\n// Here, we add an item to the returned ItemList. We are using a custom component\n// as discussed above. We've also specified a priority as the third argument,\n// which will be used to order these items. Note that we don't need to return anything.\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add(\n    'google',\n    <CustomComponentClass>\n      <a href=\"https://google.com\">Google</a>\n    </CustomComponentClass>,\n    5\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Class-based Event Listener with Dependency Injection\nDESCRIPTION: Example of a class-based event listener that uses dependency injection to resolve a translator instance. Shows the standard structure of a listener class with a handle method.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/backend-events.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass PostDeletedListener\n{\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    public function handle(Deleted $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag Visibility Scoper in PHP for Flarum Tags\nDESCRIPTION: This code snippet defines a custom scoper for the Tag model with the 'view' ability. It filters tags based on the actor's permission to view the forum.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/model-visibility.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeTagVisibility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     */\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->whereIn('id', function ($query) use ($actor) {\n            Tag::query()->setQuery($query->from('tags'))->whereHasPermission($actor, 'viewForum')->select('tags.id');\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using whereVisibleTo for Query Visibility in PHP\nDESCRIPTION: Demonstrates different ways to use the whereVisibleTo method for applying visibility scoping to Eloquent queries. Shows basic usage, applying to existing queries, and using with specific abilities.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\n// Construct and execute a query for all groups that a given user can see.\n$groups = Group::whereVisibleTo($actor)->get();\n\n// Apply visibility scoping to an existing query.\nMore eloquent filters can be added after this.\n$query\n  ->whereVisibleTo($actor)\n  ->whereRaw('1=1');\n\n// Apply visibility scoping with an ability\n$query\n  ->whereVisibleTo($actor, 'someAbility')\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Search Driver\nDESCRIPTION: Shows the implementation of a custom search driver class extending AbstractDriver.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/search.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace YourPackage\\Search;\n\nuse Flarum\\Search\\AbstractDriver;\n\nclass AcmeSearchDriver extends AbstractDriver\n{\n    public static function name(): string\n    {\n        return 'your-package-driver-name';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Resources in Javascript\nDESCRIPTION: This code snippet demonstrates how to create a new resource by creating a new model instance using the store's `createRecord` method and then saving it. It showcases the steps for creating and persisting new data through the API.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussion = app.store.createRecord('discussions');\n\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating Notification Component in JSX\nDESCRIPTION: Implementation of a frontend notification component for new posts in Flarum, extending the base Notification class with custom icon, href, and content rendering.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Notification from 'flarum/forum/components/Notification';\nimport username from 'flarum/common/helpers/username';\n\nexport default class NewPostNotification extends Notification {\n  icon() {\n    return 'fas fa-star';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n    const discussion = notification.subject();\n    const content = notification.content() || {};\n\n    return app.route.discussion(discussion, content.postNumber);\n  }\n\n  content() {\n    return app.translator.trans('flarum-subscriptions.forum.notifications.new_post_text', {user: this.attrs.notification.fromUser()});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TextFormatter in Flarum using PHP\nDESCRIPTION: This code snippet demonstrates how to use the Formatter extender in Flarum to configure the TextFormatter, modify raw text before parsing, and modify XML before rendering. It shows how to add custom BBCodes, parse text, and render XML with custom logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/formatting.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse s9e\\TextFormatter\\Configurator;\nuse s9e\\TextFormatter\\Parser;\nuse s9e\\TextFormatter\\Renderer;\n\nreturn [\n    (new Extend\\Formatter)\n        // Add custom text formatter configuration\n        ->configure(function (Configurator $config) {\n            $config->BBCodes->addFromRepository('B');\n        })\n        // Modify raw text before it is parsed.\n        // This callback should return the modified text.\n        ->parse(function (Parser $parser, $context, $text) {\n            // custom logic here\n            return $newText;\n        })\n        // Modify the XML to be rendered before rendering.\n        // This callback should return the new XML.\n        // For example, in the mentions extension, this is used to\n        // provide the username and display name of the user being mentioned.\n        // Make sure that the last $request argument is nullable (or omitted entirely).\n        ->render(function (Renderer $renderer, $context, $xml, Request $request = null) {\n            // custom logic here\n            return $newXml;\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Scopers in PHP for Flarum\nDESCRIPTION: This code snippet shows how to register custom scopers using Flarum's extender system. It demonstrates registering scopers for both Tag and Discussion models.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\Tags\\Tag;\nuse YourNamespace\\Access;\n\nreturn [\n  // Other extenders\n\n  // 'view' is optional here, since that's the default value for the ability argument.\n  // However, if we were applying this to a different ability, such as `viewPrivate`,\n  // would need to explicitly specify that.\n  (new Extend\\ModelVisibility(Tag::class))\n    ->scope(Access\\ScopeTagVisibility::class, 'view'),\n\n  (new Extend\\ModelVisibility(Discussion::class))\n    ->scopeAll(Access\\ScopeDiscussionVisibilityForAbility::class),\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Search Mutator for Country Filtering\nDESCRIPTION: Implements a search mutator that restricts search results to users from the same country as the current actor. Used with Flarum's search state and query criteria.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/search.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Query\\QueryCriteria;\nuse Flarum\\Search\\SearchState;\n\nclass OnlySameCountrySearchMutator\n{\n    public function __invoke(SearchState $searchState, QueryCriteria $queryCriteria)\n    {\n        $searchState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Flarum Frontend Testing\nDESCRIPTION: Demonstrates how to set up Jest configuration for frontend testing in a Flarum extension using the @flarum/jest-config package.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('@flarum/jest-config')();\n```\n\n----------------------------------------\n\nTITLE: Defining a New Frontend Model in JavaScript\nDESCRIPTION: Shows how to create a new model class for a resource type by extending the base Model class. Demonstrates defining attributes with optional transformers and relationships using hasOne and hasMany methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport Model from 'flarum/common/Model';\n\nexport default class Tag extends Model {\n  title = Model.attribute('title');\n  createdAt = Model.attribute('createdAt', Model.transformDate);\n  parent = Model.hasOne('parent');\n  discussions = Model.hasMany('discussions');\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Flarum Frontend Utility Function\nDESCRIPTION: Demonstrates unit testing of a Flarum frontend utility function (abbreviateNumber) using Jest.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport abbreviateNumber from '../../../../src/common/utils/abbreviateNumber';\n\ntest('does not change small numbers', () => {\n  expect(abbreviateNumber(1)).toBe('1');\n});\n\ntest('abbreviates large numbers', () => {\n  expect(abbreviateNumber(1000000)).toBe('1M');\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n});\n\ntest('abbreviates large numbers with decimal places', () => {\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n  expect(abbreviateNumber(13234)).toBe('13.2K');\n});\n```\n\n----------------------------------------\n\nTITLE: Global Policy Implementation Example\nDESCRIPTION: Example of a global policy class that implements forum-wide authorization rules for viewing forums and starting discussions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/authorization.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\Access\\AbstractPolicy;\nuse Flarum\\User\\User;\n\nclass GlobalPolicy extends AbstractPolicy\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n\n    /**\n     * @param Flarum\\User\\User $actor\n     * @param string $ability\n     * @return bool|void\n     */\n    public function can(User $actor, string $ability)\n    {\n        if (in_array($ability, ['viewForum', 'startDiscussion'])) {\n            $enoughPrimary = count(Tag::getIdsWhereCan($actor, $ability, true, false)) >= $this->settings->get('min_primary_tags');\n            $enoughSecondary = count(Tag::getIdsWhereCan($actor, $ability, false, true)) >= $this->settings->get('min_secondary_tags');\n\n            if ($enoughPrimary && $enoughSecondary) {\n                return $this->allow();\n            } else {\n                return $this->deny();\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Search Components in Flarum\nDESCRIPTION: This snippet demonstrates how to register custom search gambits and mutators in Flarum using the SimpleFlarumSearch extender. It shows the configuration for adding the CountryGambit and OnlySameCountrySearchMutator to the UserSearcher.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\SimpleFlarumSearch(UserSearcher::class))\n    ->addGambit(CountryGambit::class)\n    ->addSearchMutator(OnlySameCountrySearchMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: Using whereVisibleTo Method for Model Visibility in PHP\nDESCRIPTION: Examples of using the whereVisibleTo method to filter query results based on user permissions. The method can be used to construct a new query, apply visibility to an existing query, or apply visibility with a specific capability.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\n// Construye y ejecuta una consulta para todos los grupos que un determinado usuario puede ver.\n$groups = Group::whereVisibleTo($actor)->get();\n\n// Aplicar el alcance de la visibilidad a una consulta existente.\nMore eloquent filters can be added after this.\n$query\n  ->whereVisibleTo($actor)\n  ->whereRaw('1=1');\n\n// Aplica el alcance de la visibilidad con una capacidad\n$query\n  ->whereVisibleTo($actor, 'someAbility')\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Notification Driver in Flarum\nDESCRIPTION: Example of registering a custom notification driver (PusherNotificationDriver) using the Notification extender. This code specifies the driver name and driver class to register a new notification delivery method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend\nuse Flarum\\Pusher\\PusherNotificationDriver;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->driver('pusher', PusherNotificationDriver::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Mailable Notifications in PHP for Flarum\nDESCRIPTION: This example demonstrates how to create a mailable notification blueprint in Flarum. It implements both BlueprintInterface and MailableInterface, providing methods for email view and subject generation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Mentions\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\MailableInterface;\nuse Flarum\\Post\\Post;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass PostMentionedBlueprint implements BlueprintInterface, MailableInterface\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var Post\n     */\n    public $reply;\n\n    /**\n     * @param Post $post\n     * @param Post $reply\n     */\n    public function __construct(Post $post, Post $reply)\n    {\n        $this->post = $post;\n        $this->reply = $reply;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getFromUser()\n    {\n        return $this->reply->user;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getData()\n    {\n        return ['replyNumber' => (int) $this->reply->number];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailView()\n    {\n        return ['text' => 'flarum-mentions::emails.postMentioned'];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailSubject(TranslatorInterface $translator)\n    {\n        return $translator->trans('flarum-mentions.email.post_mentioned.subject', [\n            '{replier_display_name}' => $this->post->user->display_name,\n            '{title}' => $this->post->discussion->title\n        ]);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getType()\n    {\n        return 'postMentioned';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Controller in PHP\nDESCRIPTION: Example of a basic controller implementation that returns an HTML response. Shows proper handling of HTTP requests and responses.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/routes.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Acme\\HelloWorld;\n\nuse Laminas\\Diactoros\\Response\\HtmlResponse;\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass HelloWorldController implements RequestHandlerInterface\n{\n    public function handle(Request $request): Response\n    {\n        return new HtmlResponse('<h1>Hello, world!</h1>');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Flarum Extension Frontend\nDESCRIPTION: This snippet demonstrates the basic structure of a Flarum extension's frontend entry point. It shows how to add an initializer to extend Flarum's functionality.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/frontend.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extend, override } from 'flarum/common/extend';\n\napp.initializers.add('acme-flarum-hello-world', function(app) {\n  // Your Extension Code Here\n  console.log(\"EXTENSION NAME is working!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Routes in PHP\nDESCRIPTION: Example of defining a new forum route using the Routes extender in Flarum. Shows how to set up a GET route with a controller.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/routes.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\nuse Acme\\HelloWorld\\HelloWorldController;\n\nreturn [\n    (new Extend\\Routes('forum'))\n        ->get('/hello-world', 'acme.hello-world', HelloWorldController::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Defining API Resource Fields in PHP\nDESCRIPTION: Demonstrates how to define various field types (attributes and relationships) for an API resource using the Schema namespace.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Schema;\n\npublic function fields(): array\n{\n    return [\n        Schema\\Str::make('name')\n            ->requiredOnCreate()\n            ->writable(),\n        Schema\\Integer::make('discussionCount'),\n        Schema\\Arr::make('customData'),\n        Schema\\Boolean::make('isActive')\n            ->writable(),\n        Schema\\DateTime::make('createdAt'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Counter Component with Mithril.js in Flarum\nDESCRIPTION: Demonstrates how to create a custom component in Flarum extending the base Component class. This example shows a counter with increment button, demonstrating component lifecycle methods and DOM interaction.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/Component';\n\nclass Counter extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.count = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        Count: {this.count}\n        <button onclick={e => this.count++}>\n          {this.attrs.buttonLabel}\n        </button>\n      </div>\n    );\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    // En realidad no estamos haciendo nada aquí, pero este sería\n    // un buen lugar para adjuntar manejadores de eventos, inicializar librerías\n    // como sortable, o hacer otras modificaciones en el DOM.\n    $element = this.$();\n    $button = this.$('button');\n  }\n}\n\nm.mount(document.body, <MyComponent buttonLabel=\"Increment\" />);\n```\n\n----------------------------------------\n\nTITLE: Implementing Create Resource Controller in PHP\nDESCRIPTION: Example of a controller that creates a resource by extending AbstractCreateController\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractCreateController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass CreateTagController extends AbstractCreateController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        $attributes = Arr::get($request->getParsedBody(), 'data.attributes');\n\n        return Tag::create([\n            'name' => Arr::get($attributes, 'name')\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SlugDriver Interface in PHP for Flarum\nDESCRIPTION: This code snippet defines the SlugDriver interface, which outlines the contract for slug generation and handling in Flarum. It includes methods for generating slugs, validating them, and retrieving entities by their slugs.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/slugging.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninterface SlugDriver\n{\n    /**\n     * Generate a slug for the given instance.\n     */\n    public function toSlug(Sluggable $instance): string;\n\n    /**\n     * Revert a slug to an instance.\n     */\n    public function fromSlug(string $slug, Forum $forum): ?Sluggable;\n\n    /**\n     * Validate a slug for a given instance.\n     */\n    public function validate(string $slug, Sluggable $instance): bool;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Existing API Controllers in PHP\nDESCRIPTION: PHP code showing how to customize existing API controllers by setting serializers, includes, pagination settings, and sorting options using the ApiController extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillGetData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->setSerializer(MyDiscussionSerializer::class)\n        ->addInclude('user')\n        ->addOptionalInclude('posts')\n        ->setLimit(20)\n        ->setMaxLimit(50)\n        ->setSort(['name' => 'asc'])\n        ->addSortField('firstName')\n        ->prepareDataQuery(function ($controller) {\n            // Add custom logic here to modify the controller\n            // before data queries are executed.\n        })\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Slug Driver in Flarum\nDESCRIPTION: Illustrates how to implement a custom slug driver by creating a class that implements the Flarum\\Http\\SlugDriverInterface. The example shows implementing toSlug and fromSlug methods for converting between models and slugs.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/slugging.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Http\\SlugDriverInterface;\n\nclass CustomSlugDriver implements SlugDriverInterface\n{\n    public function toSlug($model)\n    {\n        // Transform the model into a slug string\n        return $model->slug;\n    }\n    \n    public function fromSlug($slug, $controller)\n    {\n        // Retrieve a model based on its slug\n        return Model::where('slug', $slug)->firstOrFail();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Visibility in Flarum API Schema\nDESCRIPTION: Shows how to conditionally include attributes in API responses using the visible method\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\npublic function fields(): array\n{\n    return [\n        Schema\\Str::make('name')\n            ->visible(fn (Label $label, Context $context) => $context->getActor()->can('edit', $label)),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Visibility Scoper Example in Flarum (PHP)\nDESCRIPTION: This snippet demonstrates a custom visibility scoper that allows users with the `posts.viewPrivate` permission to view private posts. It checks if the actor (user) has the specified permission and, if so, adds a `whereRaw` condition that effectively bypasses the privacy filter. The class implements the __invoke method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n```php\n<?php\n\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopePostVisibility\n{\n    public function __invoke(User $actor, $query)\n    {\n      if ($actor->can('posts.viewPrivate')) {\n        $query->whereRaw(\"1=1\");\n      }\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Notification Component in JSX\nDESCRIPTION: Implementation of a custom notification component for new posts in followed discussions. Defines icon, href, and content rendering methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Notification from 'flarum/forum/components/Notification';\nimport username from 'flarum/common/helpers/username';\n\nexport default class NewPostNotification extends Notification {\n  icon() {\n    return 'fas fa-star';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n    const discussion = notification.subject();\n    const content = notification.content() || {};\n\n    return app.route.discussion(discussion, content.postNumber);\n  }\n\n  content() {\n    return app.translator.trans('flarum-subscriptions.forum.notifications.new_post_text', {user: this.attrs.notification.fromUser()});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Filesystem Disk in PHP\nDESCRIPTION: Example of declaring a new filesystem disk for file uploads using the Filesystem extender. Demonstrates configuration of root path and URL.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/filesystem.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Filesystem)\n        ->disk('flarum-uploads', function (Paths $paths, UrlGenerator $url) {\n            return [\n                'root'   => \"$paths->public/assets/uploads\",\n                'url'    => $url->to('forum')->path('assets/uploads')\n            ];\n        });\n```\n\n----------------------------------------\n\nTITLE: Implementing a Show Resource Controller for Flarum API\nDESCRIPTION: Example of implementing a controller for showing a single resource in Flarum's JSON:API. This controller extends AbstractShowController and returns a single model to be serialized.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractShowController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass ShowTagController extends AbstractShowController\n{\n    public $serializer = TagSerializer::class;\n    \n    protected function data(Request $request, Document $document)\n    {\n        $id = Arr::get($request->getQueryParams(), 'id');\n        \n        return Tag::findOrFail($id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Notification Type in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to create a PostLikedBlueprint class that implements the BlueprintInterface to define a new notification type for post likes in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass PostLikedBlueprint implements BlueprintInterface\n{\n    public $post;\n\n    public $user;\n\n    public function __construct(Post $post, User $user)\n    {\n        $this->post = $post;\n        $this->user = $user;\n    }\n\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    public function getFromUser()\n    {\n        return $this->user;\n    }\n\n    public function getData()\n    {\n    }\n\n    public static function getType()\n    {\n        return 'postLiked';\n    }\n\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from the Frontend Store in JavaScript\nDESCRIPTION: Demonstrates how to retrieve resources from the API using Flarum's frontend store. Shows methods for fetching data with sorting parameters and by ID, and how to access cached data without making additional API requests.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// GET /api/discussions?sort=createdAt\napp.store.find('discussions', {sort: 'createdAt'}).then(console.log);\n\n// GET /api/discussions/123\napp.store.find('discussions', 123).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Implementing Discussion Visibility Scoper in PHP\nDESCRIPTION: A global scoper for Discussion models that handles complex visibility rules based on tag permissions and abilities. It includes special handling for view-related abilities and restricted tags.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibilityForAbility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     * @param string $ability\n     */\n    public function __invoke(User $actor, Builder $query, $ability)\n    {\n        // Automatic scoping should be applied to the global `view` ability,\n        // and to arbitrary abilities that aren't subqueries of `view`.\n        // For example, if we want to scope discussions where the user can\n        // edit posts, this should apply.\n        // But if we are expanding a restriction of `view` (for example,\n        // `viewPrivate`), we shouldn't apply this query again.\n        if (substr($ability, 0, 4) === 'view' && $ability !== 'view') {\n            return;\n        }\n\n        // Avoid an infinite recursive loop.\n        if (Str::endsWith($ability, 'InRestrictedTags')) {\n            return;\n        }\n\n        // `view` is a special case where the permission string is represented by `viewForum`.\n        $permission = $ability === 'view' ? 'viewForum' : $ability;\n\n        // Restrict discussions where users don't have necessary permissions in all tags.\n        // We use a double notIn instead of a doubleIn because the permission must be present in ALL tags,\n        // not just one.\n        $query->where(function ($query) use ($actor, $permission) {\n            $query\n                ->whereNotIn('discussions.id', function ($query) use ($actor, $permission) {\n                    return $query->select('discussion_id')\n                        ->from('discussion_tag')\n                        ->whereNotIn('tag_id', function ($query) use ($actor, $permission) {\n                            Tag::query()->setQuery($query->from('tags'))->whereHasPermission($actor, $permission)->select('tags.id');\n                        });\n                })\n                ->orWhere(function ($query) use ($actor, $permission) {\n                    // Allow extensions a way to override scoping for any given permission.\n                    $query->whereVisibleTo($actor, \"${permission}InRestrictedTags\");\n                });\n        });\n\n        // Hide discussions with no tags if the user doesn't have that global\n        // permission.\n        if (! $actor->hasPermission($permission)) {\n            $query->has('tags');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Post Liked Notification Blueprint in PHP\nDESCRIPTION: Example implementation of a notification blueprint for post likes. This class defines the structure and behavior of post like notifications, including subject, sender, and type information.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/notifications.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass PostLikedBlueprint implements BlueprintInterface\n{\n    public $post;\n\n    public $user;\n\n    public function __construct(Post $post, User $user)\n    {\n        $this->post = $post;\n        $this->user = $user;\n    }\n\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    public function getFromUser()\n    {\n        return $this->user;\n    }\n\n    public function getData()\n    {\n    }\n\n    public static function getType()\n    {\n        return 'postLiked';\n    }\n\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Page as Homepage Option in Flarum Admin\nDESCRIPTION: Code example showing how to extend the BasicsPage.homePageItems method to add a custom page as a homepage option in the Flarum admin panel.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport BasicsPage from 'flarum/common/components/BasicsPage';\n\nexport default function() {\n  extend(BasicsPage.prototype, 'homePageItems', items => {\n    items.add('tags', {\n      path: '/tags',\n      label: app.translator.trans('flarum-tags.admin.basics.tags_label')\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Relationships to Backend Models in PHP\nDESCRIPTION: Demonstrates how to add various relationships (hasOne, belongsTo, hasMany, belongsToMany) to existing models using the Model extender. These methods allow extending Flarum's models with Laravel Eloquent relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->hasOne('phone', 'App\\Phone', 'foreign_key', 'local_key')\n        ->belongsTo('country', 'App\\Country', 'foreign_key', 'other_key')\n        ->hasMany('comment', 'App\\Comment', 'foreign_key', 'local_key')\n        ->belongsToMany('role', 'App\\Role', 'role_user', 'user_id', 'role_id')\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Multiple Events with Flarum Event Subscriber\nDESCRIPTION: This code showcases how to subscribe to multiple events using an event subscriber class (PostEventSubscriber). It utilizes the 'subscribe' method to register event listeners for different events (Deleted and Saving) and maps them to corresponding handler methods within the class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Flarum\\Post\\Event\\Saving;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->subscribe(PostEventSubscriber::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Search Components with Flarum Extender\nDESCRIPTION: Example of registering custom search gambits and mutators using Flarum's SimpleFlarumSearch extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\SimpleFlarumSearch(UserSearcher::class))\n    ->addGambit(CountryGambit::class)\n    ->addSearchMutator(OnlySameCountrySearchMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: Configurando un caso de prueba de integración en PHP para Flarum\nDESCRIPTION: Ejemplo de cómo configurar un caso de prueba de integración para una extensión de Flarum, incluyendo configuración de ajustes, habilitación de extensiones, preparación de la base de datos y uso de extenders.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    use RetrievesAuthorizedUsers;\n\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        $this->setting('my.custom.setting', true);\n\n        $this->extension('flarum-tags', 'my-cool-extension');\n\n        $this->prepareDatabase([\n            'users' => [\n                $this->normalUser()\n            ],\n            'discussions' => [\n                ['id' => 1, 'title' => 'some title', 'created_at' => Carbon::now(), 'last_posted_at' => Carbon::now(), 'user_id' => 1, 'first_post_id' => 1, 'comment_count' => 1]\n            ],\n            'posts' => [\n                ['id' => 1, 'number' => 1, 'discussion_id' => 1, 'created_at' => Carbon::now(), 'user_id' => 1, 'type' => 'comment', 'content' => '<t><p>something</p></t>']\n            ]\n        ]);\n\n        $this->extend((new CoolExtensionExtender)->doSomething('hello world'));\n    }\n\n    /**\n     * @test\n     */\n    public function some_phpunit_test_case()\n    {\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Middleware in Flarum Extension\nDESCRIPTION: Demonstrates how to register middleware using Flarum's extend.php configuration. Shows various methods to add, remove, or modify middleware positioning.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n// use Flarum\\Http\\Middleware\\CheckCsrfToken;\n\nreturn [\n    // Add middleware to forum frontend\n    (new Extend\\Middleware('forum'))->add(YourMiddleware::class),\n    // Admin frontend\n    (new Extend\\Middleware('admin'))->add(YourMiddleware::class),\n    // API frontend\n    (new Extend\\Middleware('api'))->add(YourMiddleware::class),\n\n    (new Extend\\Middleware('frontend'))\n        // remove a middleware (e.g. remove CSRF token check 😱)\n        ->remove(CheckCsrfToken::class)\n        // insert before another middleware (e.g. before a CSRF token check)\n        ->insertBefore(CheckCsrfToken::class, YourMiddleware::class)\n        // insert after another middleware (e.g. after a CSRF token check)\n        ->insertAfter(CheckCsrfToken::class, YourMiddleware::class)\n        // replace a middleware (e.g. replace the CSRF check with your own implementation)\n        ->replace(CheckCsrfToken::class, YourMiddleware::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Executing Console Commands in Flarum Testing Using PHP\nDESCRIPTION: This example shows how to test the execution of console commands within the Flarum framework using PHPUnit. It involves running a command with specific input options and asserting the expected output. Dependencies include Symfony Console components. Inputs are an array representing command and arguments, and the output is the command execution result.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/testing.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Tests\\integration\\ConsoleTestCase;\n\nclass ConsoleTest extends ConsoleTestCase\n{\n    /**\n     * @test\n     */\n    public function command_works()\n    {\n        $input = [\n            'command' => 'some:command',  // The command name, equivalent of `php flarum some:command`\n            'foo' => 'bar',  // arguments\n            '--lorem' => 'ipsum'  // options\n        ];\n\n        $this->assertEquals('Some Output.', $this->runCommand($input));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Settings in Flarum\nDESCRIPTION: Demonstrates how to set default values for settings using the Settings extender's default method. This ensures settings have fallback values when they haven't been explicitly set.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/settings.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Settings)\n    ->serializeToForum('myCoolSetting', 'my.cool.setting.key')\n    ->default('my.cool.setting.key', 'default value!')\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Discussion Visibility Scoper in PHP for Custom Flarum Extension\nDESCRIPTION: This code snippet shows a custom scoper for the 'viewPrivate' ability in a hypothetical extension. It demonstrates the use of orWhere to expand visibility conditions.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/model-visibility.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace ACME\\YourExtension\\Access;\n\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     */\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->orWhere(function($query) use ($actor) {\n            $query->where('some_column', true);\n            $query->where('some_other_column', false);\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Hooks for Endpoints in PHP\nDESCRIPTION: Shows how to use 'before', 'after', and 'beforeSerialization' hooks to customize endpoint behavior.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Endpoint;\n\npublic function endpoints(): array\n{\n    return [\n        Endpoint\\Index::make()\n            ->before(function (Context $context) {\n                // Do something before the endpoint logic.\n            })\n            ->after(function (Context $context, mixed $data) {\n                // Do something after the endpoint logic.\n            })\n            ->beforeSerialization(function (Context $context, mixed $results) {\n                // Do something before the data is serialized.\n            }),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Relationships in Flarum API Controller\nDESCRIPTION: This code snippet shows how to eager-load relationships on models before serialization in a Flarum API controller. The `extractInclude` method retrieves a list of included relationships from the request.  These relationships are then passed to the `load` method of the Eloquent query builder to eager-load them, improving performance by reducing the number of database queries.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$relations = $this->extractInclude($request);\n\nreturn Tag::all()->load($relations);\n?>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Global Policy in PHP\nDESCRIPTION: Demonstrates how to create a global policy that applies to actions without a specific target model, using the example of forum viewing and discussion starting permissions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/authorization.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\Access\\AbstractPolicy;\nuse Flarum\\User\\User;\n\nclass GlobalPolicy extends AbstractPolicy\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n\n    /**\n     * @param Flarum\\User\\User $actor\n     * @param string $ability\n     * @return bool|void\n     */\n    public function can(User $actor, string $ability)\n    {\n        if (in_array($ability, ['viewForum', 'startDiscussion'])) {\n            $enoughPrimary = count(Tag::getIdsWhereCan($actor, $ability, true, false)) >= $this->settings->get('min_primary_tags');\n            $enoughSecondary = count(Tag::getIdsWhereCan($actor, $ability, false, true)) >= $this->settings->get('min_secondary_tags');\n\n            if ($enoughPrimary && $enoughSecondary) {\n                return $this->allow();\n            } else {\n                return $this->deny();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Views with View Extender in PHP\nDESCRIPTION: This snippet demonstrates how to override existing templates from core or extensions using the View extender's extendNamespace method in Flarum's extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/views.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->extendNamespace('acme.hello-world', __DIR__.'/override_views');\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination Properties in PHP API Controller\nDESCRIPTION: Sets the default and maximum pagination limits for API resources. These properties determine how many records are returned per page by default and the maximum number that can be requested.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    // Il numero di record inclusi per impostazione predefinita.\n    public $limit = 20;\n    \n    // Il numero massimo di record che possono essere richiesti.\n    public $maxLimit = 50;\n```\n\n----------------------------------------\n\nTITLE: Registering Frontend Route in PHP for Flarum Extension\nDESCRIPTION: Shows how to register a frontend route on the backend using the Frontend extender in a Flarum extension. This example adds a GET route for '/users'.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Frontend('forum'))\n        ->route('/users', 'acme.users')\n```\n\n----------------------------------------\n\nTITLE: Using whereVisibleTo Method for Model Visibility in PHP\nDESCRIPTION: Examples of using the whereVisibleTo method to filter database queries based on user permissions. This method is available to Eloquent models that use the ScopeVisibilityTrait.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/model-visibility.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\n// Construct and execute a query for all groups that a given user can see.\n$groups = Group::whereVisibleTo($actor)->get();\n\n// Apply visibility scoping to an existing query.\nMore eloquent filters can be added after this.\n$query\n  ->whereVisibleTo($actor)\n  ->whereRaw('1=1');\n\n// Apply visibility scoping with an ability\n$query\n  ->whereVisibleTo($actor, 'someAbility')\n```\n\n----------------------------------------\n\nTITLE: Defining Serializer Relationships in PHP\nDESCRIPTION: Shows how to define relationships in a serializer by creating methods that return hasOne or hasMany relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n    protected function user($discussion)\n    {\n        return $this->hasOne($discussion, UserSerializer::class);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Discussion Visibility Scoper for Different Abilities - PHP\nDESCRIPTION: This snippet creates a global scoper for the `Discussion` model that manages user permissions for various abilities, refining visibility for users based on their permissions in tags. It incorporates checks to prevent recursive loops and restrict queries accordingly.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibilityForAbility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     * @param string $ability\n     */\n    public function __invoke(User $actor, Builder $query, $ability)\n    {\n        // Automatic scoping should be applied to the global `view` ability,\n        // and to arbitrary abilities that aren't subqueries of `view`.\n        // For example, if we want to scope discussions where the user can\n        // edit posts, this should apply.\n        // But if we are expanding a restriction of `view` (for example,\n        // `viewPrivate`), we shouldn't apply this query again.\n        if (substr($ability, 0, 4) === 'view' && $ability !== 'view') {\n            return;\n        }\n\n        // Avoid an infinite recursive loop.\n        if (Str::endsWith($ability, 'InRestrictedTags')) {\n            return;\n        }\n\n        // `view` is a special case where the permission string is represented by `viewForum`.\n        $permission = $ability === 'view' ? 'viewForum' : $ability;\n\n        // Restrict discussions where users don't have necessary permissions in all tags.\n        // We use a double notIn instead of a doubleIn because the permission must be present in ALL tags,\n        // not just one.\n        $query->where(function ($query) use ($actor, $permission) {\n            $query\n                ->whereNotIn('discussions.id', function ($query) use ($actor, $permission) {\n                    return $query->select('discussion_id')\n                        ->from('discussion_tag')\n                        ->whereNotIn('tag_id', function ($query) use ($actor, $permission) {\n                            Tag::query()->setQuery($query->from('tags'))->whereHasPermission($actor, $permission)->select('tags.id');\n                        });\n                })\n                ->orWhere(function ($query) use ($actor, $permission) {\n                    // Allow extensions a way to override scoping for any given permission.\n                    $query->whereVisibleTo($actor, \"${permission}InRestrictedTags\");\n                });\n        });\n\n        // Hide discussions with no tags if the user doesn't have that global\n        // permission.\n        if (! $actor->hasPermission($permission)) {\n            $query->has('tags');\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Events in PHP\nDESCRIPTION: This snippet outlines how to create custom events in Flarum by defining simple classes that encapsulate event-related data. It demonstrates how to structure the event class and declare internal properties for easy access.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Post\\Event;\n\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass Deleted\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var User\n     */\n    public $actor;\n\n    /**\n     * @param Post $post\n     * @param User $user\n     */\n    public function __construct(Post $post, User $actor = null)\n    {\n        $this->post = $post;\n        $this->actor = $actor;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom API Throttler in PHP for Flarum\nDESCRIPTION: This code snippet demonstrates a custom API throttler for Flarum that limits post creation. It checks the route, user permissions, and recent post history to determine if throttling should be applied.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/api-throttling.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse DateTime;\nuse Flarum\\Post\\Post;\n\nfunction ($request) {\n    if (! in_array($request->getAttribute('routeName'), ['discussions.create', 'posts.create'])) {\n        return;\n    }\n\n    $actor = $request->getAttribute('actor');\n\n    if ($actor->can('postWithoutThrottle')) {\n        return false;\n    }\n\n    if (Post::where('user_id', $actor->id)->where('created_at', '>=', new DateTime('-10 seconds'))->exists()) {\n        return true;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining New Frontend Models in JavaScript\nDESCRIPTION: Example of creating a new model class for a resource type. Models must extend the Model class and define attributes and relationships using the provided helper methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport Model from 'flarum/common/Model';\n\nexport default class Tag extends Model {\n  title = Model.attribute('title');\n  createdAt = Model.attribute('createdAt', Model.transformDate);\n  parent = Model.hasOne('parent');\n  discussions = Model.hasMany('discussions');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Serializer Relationships\nDESCRIPTION: Shows how to define relationships in an API serializer using hasOne method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n    protected function user($discussion)\n    {\n        return $this->hasOne($discussion, UserSerializer::class);\n    }\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Relationships in Flarum API\nDESCRIPTION: Shows how to define polymorphic relationships with multiple possible resource types\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\npublic function fields(): array\n{\n    return [\n        Schema\\Relationship\\ToOne::make('subject')\n            ->collection(['users', 'discussions', 'posts']),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Sender in Flarum (PHP)\nDESCRIPTION: A PHP listener implementation from Flarum Likes that sends notifications when posts are liked or unliked. This class subscribes to events, creates notification blueprints, and uses NotificationSyncer to dispatch or remove notifications for the appropriate users.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Listener;\n\nuse Flarum\\Event\\ConfigureNotificationTypes;\nuse Flarum\\Likes\\Event\\PostWasLiked;\nuse Flarum\\Likes\\Event\\PostWasUnliked;\nuse Flarum\\Likes\\Notification\\PostLikedBlueprint;\nuse Flarum\\Notification\\NotificationSyncer;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nclass SendNotificationWhenPostIsLiked\n{\n    protected $notifications;\n\n    public function __construct(NotificationSyncer $notifications)\n    {\n        $this->notifications = $notifications;\n    }\n\n    public function subscribe(Dispatcher $events)\n    {\n        $events->listen(PostWasLiked::class, [$this, 'whenPostWasLiked']);\n        $events->listen(PostWasUnliked::class, [$this, 'whenPostWasUnliked']);\n    }\n\n    public function whenPostWasLiked(PostWasLiked $event)\n    {\n        $this->syncNotification($event->post, $event->user, [$event->post->user]);\n    }\n\n    public function whenPostWasUnliked(PostWasUnliked $event)\n    {\n        $this->syncNotification($event->post, $event->user, []);\n    }\n\n    public function syncNotification(Post $post, User $user, array $recipients)\n    {\n        if ($post->user->id != $user->id) {\n            $this->notifications->sync(\n                new PostLikedBlueprint($post, $user),\n                $recipients\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Search Components with SimpleFlarumSearch Extender\nDESCRIPTION: This snippet shows how to register custom search gambits and mutators using Flarum's SimpleFlarumSearch extender for the UserSearcher class. This connects the custom search components to the Flarum search system.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\SimpleFlarumSearch(UserSearcher::class))\n    ->addGambit(CountryGambit::class)\n    ->addSearchMutator(OnlySameCountrySearchMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Resource Controller in PHP\nDESCRIPTION: Example of a controller that deletes a resource by extending AbstractDeleteController\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractDeleteController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nclass DeleteTagController extends AbstractDeleteController\n{    \n    protected function delete(Request $request)\n    {\n        $id = Arr::get($request->getQueryParams(), 'id');\n\n        Tag::findOrFail($id)->delete();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementando un Modal Personalizado en JavaScript para Flarum\nDESCRIPTION: Este snippet muestra cómo crear un modal personalizado en Flarum extendiendo la clase Modal. Define métodos para personalizar la apariencia y el comportamiento del modal.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/interactive-components.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Modal from 'flarum/components/Modal';\n\nexport default class CustomModal extends Modal {\n  // Verdadero por defecto, dicta si el modal puede ser descartado haciendo clic en el fondo o en la esquina superior derecha.\n  static isDismissible = true;\n\n  className() {\n    // Clases CSS personalizadas para aplicar al modal\n    return 'custom-modal-class';\n  }\n\n  title() {\n    // Contenido a mostrar en la barra de título del modal\n    return <p>Custom Modal</p>;\n  }\n\n  content() {\n    // Contenido a mostrar en el cuerpo del modal\n    return <p>Hello World!</p>;\n  }\n\n  onsubmit() {\n    // Si tu modal contiene un formulario, puedes añadir aquí la lógica de procesamiento del mismo.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Visibility Scoper Example in Flarum (PHP)\nDESCRIPTION: This snippet shows an example of a custom visibility scoper in Flarum. It demonstrates how to filter posts based on privacy settings and how extensions can modify the query to allow some users to see private posts. It relies on the user's ability to view private posts.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, we want to ensure that private posts aren't visible to users by default.\n// The simplest way to do this would be:\n$query->where('posts.is_private', false);\n\n// However, we recognize that some extensions might have valid use cases for showing private posts.\n// So instead, we include all posts that aren't private, AND all private posts desired by extensions\n$query->where(function ($query) use ($actor) {\n    $query->where('posts.is_private', false)\n        ->orWhere(function ($query) use ($actor) {\n            $query->whereVisibleTo($actor, 'viewPrivate');\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Adjusting Data Before Serialization in Flarum API Controllers (PHP)\nDESCRIPTION: Demonstrates how to use the ApiController extender to modify data before it's serialized in a Flarum API controller, such as loading additional relations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillSerializeData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->prepareDataForSerialization(function ($controller, $data, $request, $document) {\n            $data->load('myCustomRelation');\n        }),\n]\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Frontend Routes with Content Customization in Flarum\nDESCRIPTION: Example of registering a new frontend route in Flarum while also customizing the document content for that specific route, such as setting the page title.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->route('/users', 'acme.users', function (Document $document, Request $request) {\n            $document->title = 'Users';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Relationship Aggregates in Flarum API\nDESCRIPTION: Demonstrates how to efficiently calculate relationship aggregates like counts, sums, averages, min, and max\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\npublic function fields(): array\n{\n    return [\n        Integer::make('commentCount')\n            ->countRelation('comments'),\n        \n        Number::make('avgRevenue')\n            ->avgReation('reports', 'revenue'),\n        \n        Number::make('revenueSum')\n            ->sumRelation('reports', 'revenue'),\n        \n        Number::make('minNumber')\n            ->minRelation('posts', 'number'),\n        \n        Number::make('maxNumber')\n            ->maxRelation('posts', 'number'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom User Filter by Country in PHP\nDESCRIPTION: This code snippet shows how to create a custom Filter class to filter users by country in Flarum. It implements the FilterInterface and defines the filter key and filtering logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterInterface;\nuse Flarum\\Filter\\FilterState;\n\nclass CountryFilter implements FilterInterface\n{\n    public function getFilterKey(): string\n    {\n        return 'country';\n    }\n\n    public function filter(FilterState $filterState, string $filterValue, bool $negate)\n    {\n        $country = trim($filterValue, '\"');\n\n        $filterState->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Mail Driver in PHP for Flarum\nDESCRIPTION: This code demonstrates how to create a custom mail driver by implementing the DriverInterface. It shows how to define available settings with defaults, implement validation rules, and create the necessary methods required by the interface.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/mail.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Mail\\DriverInterface;\nuse Illuminate\\Contracts\\Validation\\Factory;\nuse Illuminate\\Mail\\Transport\\MailgunTransport;\nuse Illuminate\\Support\\MessageBag;\nuse Swift_Transport;\n\nclass MailgunDriver implements DriverInterface\n{\n    public function availableSettings(): array\n    {\n        return [\n            'setting_one' => '',\n            'setting_two' => 'defaultValue',\n            'dropdown_setting' => [\n                'option_one_val' => 'Option One Display',\n                'option_two_val' => 'Option Two Display',\n            ],\n        ];\n    }\n\n    public function validate(SettingsRepositoryInterface $settings, Factory $validator): MessageBag\n    {\n        $validator->make($settings->all(), [\n            'setting_one' => 'required',\n            'setting_two' => 'nullable|integer',\n        ])->errors();\n    }\n\n    public function canSend(): bool\n    {\n        return true;\n    }\n\n    public function buildTransport(SettingsRepositoryInterface $settings): Swift_Transport\n    {\n        // Return a mail transport that implements Swift Transport\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Creation Throttling in PHP\nDESCRIPTION: Example of a custom throttler that limits post creation frequency. Checks if the request is for post creation, verifies user permissions, and ensures posts aren't created more frequently than every 10 seconds.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/api-throttling.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse DateTime;\nuse Flarum\\Post\\Post;\n\nfunction ($request) {\n    if (! in_array($request->getAttribute('routeName'), ['discussions.create', 'posts.create'])) {\n        return;\n    }\n\n    $actor = $request->getAttribute('actor');\n\n    if ($actor->can('postWithoutThrottle')) {\n        return false;\n    }\n\n    if (Post::where('user_id', $actor->id)->where('created_at', '>=', new DateTime('-10 seconds'))->exists()) {\n        return true;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Flarum Middleware Class (PSR-15)\nDESCRIPTION: This code snippet demonstrates how to implement a basic middleware class in Flarum, adhering to the PSR-15 standard. It defines a class `YourMiddleware` that implements the `MiddlewareInterface` and includes the `process` method. This method receives the request and handler, allowing you to execute logic before and after the request is processed. Dependencies: `Psr\\Http\\Message\\ResponseInterface`, `Psr\\Http\\Message\\ServerRequestInterface`, `Psr\\Http\\Server\\MiddlewareInterface`, `Psr\\Http\\Server\\RequestHandlerInterface`.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/middleware.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass YourMiddleware implements MiddlewareInterface {\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // Logic to run before the request is processed and later middleware is called.\n        $response = $handler->handle($request);\n        // Logic to run after the request is processed.\n        return $response\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Service Provider in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to create a custom Service Provider in Flarum by extending AbstractServiceProvider. It includes both register and boot methods, showing how to interact with the container and perform custom logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/service-provider.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Foundation\\AbstractServiceProvider;\nuse Illuminate\\Contracts\\Container\\Container;\n\nclass CustomServiceProvider extends AbstractServiceProvider\n{\n    public function register()\n    {\n        // custom logic here, for example:\n        $this->container->resolving(SomeClass::class, function ($container) {\n            return new SomeClass($container->make('some.binding'));\n        });\n    }\n\n    public function boot(Container $container)\n    {\n        // custom logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Events with Callback and Listener in PHP\nDESCRIPTION: This snippet demonstrates how to attach listeners to events in Flarum using a callback function as well as using a dedicated listener class. It shows how to utilize Flarum's event system to respond to post deletion events.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->listen(Deleted::class, function($event) {\n            // do something here\n        })\n        ->listen(Deleted::class, PostDeletedListener::class)\n];\n```\n\nLANGUAGE: php\nCODE:\n```\nclass PostDeletedListener\n{\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    public function handle(Deleted $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Relationships in Flarum API Controller\nDESCRIPTION: This code snippet demonstrates how to specify relationships to be included when listing, showing, or creating resources in a Flarum API controller. The `$include` property lists relationships that are included by default, while `$optionalInclude` lists relationships that can be optionally included via request parameters. This allows clients to control the amount of data returned in API responses.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n    // The relationships that are included by default.\n    public $include = ['user'];\n\n    // Other relationships that are available to be included.\n    public $optionalInclude = ['discussions'];\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Component in Flarum\nDESCRIPTION: This snippet showcases how to define a custom component in Flarum that utilizes Mithril's lifecycle methods and allows for interaction through a button click.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/common/Component';\n\nclass Counter extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.count = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        Count: {this.count}\n        <button onclick={e => this.count++}>\n          {this.attrs.buttonLabel}\n        </button>\n      </div>\n    );\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    // We aren't actually doing anything here, but this would\n    // be a good place to attach event handlers, initialize libraries\n    // like sortable, or make other DOM modifications.\n    $element = this.$();\n    $button = this.$('button');\n  }\n}\n\nm.mount(document.body, <MyComponent buttonLabel=\"Increment\" />);\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Like Notification Blueprint in PHP\nDESCRIPTION: Example of a notification blueprint class for post likes. Implements BlueprintInterface to define notification content and behavior including subject, sender, and notification type.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass PostLikedBlueprint implements BlueprintInterface\n{\n    public $post;\n\n    public $user;\n\n    public function __construct(Post $post, User $user)\n    {\n        $this->post = $post;\n        $this->user = $user;\n    }\n\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    public function getSender()\n    {\n        return $this->user;\n    }\n\n    public function getData()\n    {\n    }\n\n    public static function getType()\n    {\n        return 'postLiked';\n    }\n\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware Interface in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to create a basic middleware class in PHP for Flarum by implementing the MiddlewareInterface. It shows the structure of the process method where request handling logic is implemented.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass YourMiddleware implements MiddlewareInterface {\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // Logic to run before the request is processed and later middleware is called.\n        $response = $handler->handle($request);\n        // Logic to run after the request is processed.\n        return $response\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending API Resources in Flarum 2.x\nDESCRIPTION: This snippet demonstrates how to extend API resources in Flarum 2.x, including adding default includes, custom sorts, and relationship aggregates for user, discussion, and post resources.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// extend.php\nreturn [\n    ...\n    \n    (new Extend\\ApiResource(Resource\\UserResource::class))\n        ->endpoint(['show', 'update', 'create', 'index'], function (Endpoint\\Show|Endpoint\\Update|Endpoint\\Create|Endpoint\\Index $endpoint) {\n            return $endpoint->addDefaultInclude(['ranks']);\n        })\n        ->sorts(fn () => [\n            SortColumn::make('votes')\n                ->visible(function (Context $context) {\n                    return $context->getActor()->can('fof.gamification.viewRankingPage');\n                })\n        ]),\n\n    (new Extend\\ApiResource(Resource\\DiscussionResource::class))\n        ->sorts(fn () => [\n            SortColumn::make('hotness'),\n            SortColumn::make('votes'),\n        ])\n        ->endpoint('index', function (Endpoint\\Index $endpoint) {\n            return $endpoint->eagerLoadWhere('firstPost.actualvotes', function ($query, Context $context) {\n                $query->where('user_id', $context->getActor()->id);\n            });\n        }),\n\n    (new Extend\\ApiResource(Resource\\PostResource::class))\n        ->fields(fn () => [\n            Schema\\Number::make('votes')\n                ->sumRelation('actualvotes', 'value')\n        ])\n        ->endpoint(['index', 'show', 'create', 'update'], function (Endpoint\\Index|Endpoint\\Show|Endpoint\\Create|Endpoint\\Update $endpoint) {\n            return $endpoint->addDefaultInclude(['user.ranks']);\n        })\n        ->endpoint(['index', 'show', 'update'], function (Endpoint\\Index|Endpoint\\Show|Endpoint\\Update $endpoint) {\n            return $endpoint->eagerLoadWhere('actualvotes', function ($query, Context $context) {\n                $query->where('user_id', $context->getActor()->id);\n            });\n        }),\n\n    ...\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring TextFormatter in Flarum\nDESCRIPTION: This code snippet demonstrates how to configure the TextFormatter in a Flarum extension. It uses the `Formatter` extender to add a custom BBCode, modify the text before parsing, and modify the XML before rendering. It requires the `Flarum\\Extend`, `Psr\\Http\\Message\\ServerRequestInterface`, `s9e\\TextFormatter\\Configurator`, `s9e\\TextFormatter\\Parser`, and `s9e\\TextFormatter\\Renderer` classes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/formatting.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Flarum\\Extend;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse s9e\\TextFormatter\\Configurator;\nuse s9e\\TextFormatter\\Parser;\nuse s9e\\TextFormatter\\Renderer;\n\nreturn [\n    (new Extend\\Formatter)\n        // Add custom text formatter configuration\n        ->configure(function (Configurator $config) {\n            $config->BBCodes->addFromRepository('B');\n        })\n        // Modify raw text before it is parsed.\n        // This callback should return the modified text.\n        ->parse(function (Parser $parser, $context, $text) {\n            // custom logic here\n            return $newText;\n        })\n        // Modify the XML to be rendered before rendering.\n        // This callback should return the new XML.\n        // For example, in the mentions extension, this is used to\n        // provide the username and display name of the user being mentioned.\n        // Make sure that the last $request argument is nullable (or omitted entirely).\n        ->render(function (Renderer $renderer, $context, $xml, Request $request = null) {\n            // custom logic here\n            return $newXml;\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Custom API Serializer\nDESCRIPTION: Example of creating a new serializer class for converting Eloquent models to JSON:API format with attributes and relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\AbstractSerializer;\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nclass DiscussionSerializer extends AbstractSerializer\n{\n    protected $type = 'discussions';\n\n    protected function getDefaultAttributes($discussion)\n    {\n        return [\n            'title' => $discussion->title,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Modal in Flarum (JavaScript)\nDESCRIPTION: This code snippet defines a custom modal component that inherits from Flarum's base Modal class. It specifies properties such as whether the modal is dismissible and custom content for the title and body. Override methods can be implemented for additional functionality, such as form submission.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/interactive-components.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Modal from 'flarum/common/components/Modal';\n\nexport default class CustomModal extends Modal {\n  // True by default, dictates whether the modal can be dismissed by clicking on the background or in the top right corner.\n  static isDismissible = true;\n\n  className() {\n    // Custom CSS classes to apply to the modal\n    return 'custom-modal-class';\n  }\n\n  title() {\n    // Content to show in the modal's title bar\n    return <p>Custom Modal</p>;\n  }\n\n  content() {\n    // Content to show in the modal's body\n    return <p>Hello World!</p>;\n  }\n\n  onsubmit() {\n    // If your modal contains a form, you can add form processing logic here.\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Resources in JavaScript\nDESCRIPTION: Demonstrates how to delete a resource by calling the delete method on a model instance. This sends a delete request to the API and returns a Promise that resolves when the deletion is complete.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.delete().then(done);\n```\n\n----------------------------------------\n\nTITLE: Implementing Show Resource Controller in PHP\nDESCRIPTION: Example of a controller for showing a single resource, extending AbstractShowController with data retrieval implementation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractShowController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass ShowTagController extends AbstractShowController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        $id = Arr::get($request->getQueryParams(), 'id');\n\n        return Tag::findOrFail($id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Integration Test Case in PHP for Flarum Extension\nDESCRIPTION: Example of setting up a basic integration test case class that demonstrates usage of Flarum's testing utilities including settings override, database preparation, and extension enabling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    use RetrievesAuthorizedUsers;\n\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        $this->setting('my.custom.setting', true);\n\n        // Let's assume our extension depends on tags.\n        // Note that tags will need to be in your extension's composer.json's `require-dev`.\n        // Also, make sure you include the ID of the extension currently being tested, unless you're\n        // testing the baseline without your extension.\n        $this->extension('flarum-tags', 'my-cool-extension');\n\n        // Note that this input isn't validated: make sure you're populating with valid, representative data.\n        $this->prepareDatabase([\n            'users' => [\n                $this->normalUser() // Available for convenience.\n            ],\n            'discussions' => [\n                ['id' => 1, 'title' => 'some title', 'created_at' => Carbon::now(), 'last_posted_at' => Carbon::now(), 'user_id' => 1, 'first_post_id' => 1, 'comment_count' => 1]\n            ],\n            'posts' => [\n                ['id' => 1, 'number' => 1, 'discussion_id' => 1, 'created_at' => Carbon::now(), 'user_id' => 1, 'type' => 'comment', 'content' => '<t><p>something</p></t>']\n            ]\n        ]);\n\n        // Most test cases won't need to test extenders, but if you want to, you can.\n        $this->extend((new CoolExtensionExtender)->doSomething('hello world'));\n    }\n\n    /**\n     * @test\n     */\n    public function some_phpunit_test_case()\n    {\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Search Gambit in PHP for Flarum\nDESCRIPTION: Implementation of a custom CountryGambit class that extends AbstractRegexGambit to enable searching users by country. The gambit handles search patterns like 'country:value' and applies appropriate query conditions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Search\\AbstractRegexGambit;\nuse Flarum\\Search\\SearchState;\n\nclass CountryGambit extends AbstractRegexGambit\n{\n    public function getGambitPattern(): string\n    {\n        return 'country:(.+)';\n    }\n\n    public function conditions(SearchState $search, array $matches, bool $negate)\n    {\n        $country = trim($matches[1], '\"');\n\n        $search->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Middleware Class in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to create a middleware class that implements the PSR-15 MiddlewareInterface. It shows the structure of the process method where you can add logic before and after the request is handled.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/middleware.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass YourMiddleware implements MiddlewareInterface {\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // Logic to run before the request is processed and later middleware is called.\n        $response = $handler->handle($request);\n        // Logic to run after the request is processed.\n        return $response\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending API Controller Configuration in PHP\nDESCRIPTION: Example of using the ApiController extender to customize existing API controller behavior including serialization, includes, limits, and sorting options.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillGetData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->setSerializer(MyDiscussionSerializer::class)\n        ->addInclude('user')\n        ->addOptionalInclude('posts')\n        ->setLimit(20)\n        ->setMaxLimit(50)\n        ->setSort(['name' => 'asc'])\n        ->addSortField('firstName')\n        ->prepareDataQuery(function ($controller) {\n            // Add custom logic here to modify the controller\n            // before data queries are executed.\n        })\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Country Gambit for Flarum Search in PHP\nDESCRIPTION: This snippet demonstrates how to create a custom gambit for searching by country in Flarum. It extends the AbstractRegexGambit class and implements the necessary methods to define the gambit pattern and apply search conditions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Search\\AbstractRegexGambit;\nuse Flarum\\Search\\SearchState;\n\nclass CountryGambit extends AbstractRegexGambit\n{\n    public function getGambitPattern(): string\n    {\n        return 'country:(.+)';\n    }\n\n    public function conditions(SearchState $search, array $matches, bool $negate)\n    {\n        $country = trim($matches[1], '\"');\n\n        $search->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Throttling in Flarum's extend.php\nDESCRIPTION: Example of how to modify API throttling settings in Flarum's extend.php configuration file. Shows how to set new throttlers and remove existing ones using the ThrottleApi extender.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api-throttling.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    // Other extenders\n    (new Extend\\ThrottleApi())\n        ->set('throttleAll', function () {\n          return false;\n        })\n        ->remove('bypassThrottlingAttribute'),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Post Visibility Policy Example in PHP\nDESCRIPTION: Example from PostPolicy showing how to implement visibility rules for private posts while allowing extension flexibility. Demonstrates proper query construction with where clauses.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, we want to ensure that private posts aren't visible to users by default.\n// The simplest way to do this would be:\n$query->where('posts.is_private', false);\n\n// However, we recognize that some extensions might have valid use cases for showing private posts.\n// So instead, we include all posts that aren't private, AND all private posts desired by extensions\n$query->where(function ($query) use ($actor) {\n    $query->where('posts.is_private', false)\n        ->orWhere(function ($query) use ($actor) {\n            $query->whereVisibleTo($actor, 'viewPrivate');\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing API Throttling in Flarum's extend.php\nDESCRIPTION: Example of how to add or remove throttlers using the ThrottleApi extender in Flarum's extend.php file. This example adds a throttler that disables all throttling and removes an existing throttler.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/api-throttling.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    // Other extenders\n    (new Extend\\ThrottleApi())\n        ->set('throttleAll', function () {\n          return false;\n        })\n        ->remove('bypassThrottlingAttribute'),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Translations with Variables in YAML\nDESCRIPTION: Shows how to structure YAML translation files to include placeholders for variables that will be replaced at runtime.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nall_discussions_button: 'Search all discussions for \"{query}\"'\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Slug Driver in PHP for Flarum\nDESCRIPTION: This code snippet shows how to create a custom slug driver in PHP for Flarum. It implements the SlugDriver interface and provides custom logic for generating and validating slugs.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/slugging.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Database\\AbstractModel;\nuse Flarum\\Http\\SlugManager;\nuse Flarum\\User\\User;\n\nclass UserSlugDriver implements SlugDriver\n{\n    public function toSlug(AbstractModel $instance): string\n    {\n        return $instance->username;\n    }\n\n    public function fromSlug(string $slug, SlugManager $slugManager): AbstractModel\n    {\n        return User::where('username', $slug)->firstOrFail();\n    }\n\n    public function getSlugGenerator(): callable\n    {\n        return function (User $user) {\n            return $user->username;\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Flarum Models\nDESCRIPTION: This example shows how to extend an existing Flarum model using the `Model` extender.  Specifically, it demonstrates setting default values and defining attribute casts for a model. Default values define the initial state of model attributes, while casts transform attribute values to specific data types.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\User\\User;\n\nreturn [\n    (new Extend\\Model(User::class))\n        ->default('is_alive', true)\n        ->cast('suspended_until', 'datetime')\n        ->cast('is_admin', 'boolean')\n];\n```\n\n----------------------------------------\n\nTITLE: Eager Loading API Controller Extension in PHP\nDESCRIPTION: Shows how to implement eager loading for API controllers to prevent N+1 query issues by specifying relationships that should be preloaded\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    (new Extend\\ApiController(FlarumController\\ListDiscussionsController::class))\n        ->addInclude(['tags', 'tags.state', 'tags.parent'])\n        ->load('tags'),\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Country Search Gambit in PHP Flarum\nDESCRIPTION: Creates a custom search gambit for filtering users by country. Extends AbstractRegexGambit to implement pattern matching and query conditions for country-based search.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Search\\AbstractRegexGambit;\nuse Flarum\\Search\\SearchState;\n\nclass CountryGambit extends AbstractRegexGambit\n{\n    public function getGambitPattern(): string\n    {\n        return 'country:(.+)';\n    }\n\n    public function conditions(SearchState $search, array $matches, bool $negate)\n    {\n        $country = trim($matches[1], '\"');\n\n        $search->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Attributes and Relationships in Javascript\nDESCRIPTION: This code snippet demonstrates how to access attributes and relationships of a Flarum model instance. It shows how to use pre-defined instance methods to retrieve attribute values and related model instances.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = discussion.id();\nconst title = discussion.title();\nconst posts = discussion.posts(); // array of Post models\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Slug Drivers in Flarum\nDESCRIPTION: Shows how to register custom slug drivers for different model types using the SlugManager's setSlugger method in a service provider. The example connects model types to their respective slug driver implementations.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/slugging.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Foundation\\AbstractServiceProvider;\nuse Flarum\\Http\\SlugManager;\n\nclass ServiceProvider extends AbstractServiceProvider\n{\n    public function register()\n    {\n        $this->container->resolving(SlugManager::class, function (SlugManager $slugManager) {\n            $slugManager->setSlugger('users', new UserSlugDriver());\n            $slugManager->setSlugger('tags', new TagSlugDriver());\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Like Notification Blueprint in PHP\nDESCRIPTION: Example of creating a notification blueprint class for post likes. Implements BlueprintInterface and AlertableInterface to define notification content and behavior.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/notifications.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Notification;\n\nuse Flarum\\Notification\\AlertableInterface;\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass PostLikedBlueprint implements BlueprintInterface, AlertableInterface\n{\n    public $post;\n\n    public $user;\n\n    public function __construct(Post $post, User $user)\n    {\n        $this->post = $post;\n        $this->user = $user;\n    }\n\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    public function getFromUser()\n    {\n        return $this->user;\n    }\n\n    public function getData()\n    {\n    }\n\n    public static function getType()\n    {\n        return 'postLiked';\n    }\n\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in Flarum Migrations\nDESCRIPTION: This example demonstrates how to create a new table in a Flarum migration. The `Migration::createTable` helper is used to define the table name and a closure to define the table's columns, with column properties set using schema builder's column methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Database\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\n\nreturn Migration::createTable('users', function (Blueprint $table) {\n    $table->increments('id');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Mutator in PHP for Flarum\nDESCRIPTION: A search mutator class that modifies the search query to only show results from the same country as the current user.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Query\\QueryCriteria;\nuse Flarum\\Search\\SearchState;\n\nclass OnlySameCountrySearchMutator\n{\n    public function __invoke(SearchState $searchState, QueryCriteria $queryCriteria)\n    {\n        $searchState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Data with Flarum PageState\nDESCRIPTION: This snippet shows how to manipulate the `PageState` by setting and getting data associated with the current page, enabling persistent information management between page transitions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.current.set(KEY, DATA);\napp.current.get(KEY);\n```\n\n----------------------------------------\n\nTITLE: Defining Frontend Model in JavaScript\nDESCRIPTION: Example of creating a new frontend model with attributes and relationships\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport Model from 'flarum/Model';\n\nexport default class Tag extends Model {\n  title = Model.attribute('title');\n  createdAt = Model.attribute('createdAt', Model.transformDate);\n  parent = Model.hasOne('parent');\n  discussions = Model.hasMany('discussions');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Page Component in Flarum\nDESCRIPTION: Example of implementing a basic custom page component by extending Flarum's Page base class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Page from 'flarum/common/components/Page';\n\n\nexport default class CustomPage extends Page {\n  view() {\n    return <p>Hello!</p>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript to Flarum Frontend in PHP\nDESCRIPTION: This snippet shows how to use the Frontend extender to add a JavaScript file to Flarum's forum frontend. It demonstrates the basic setup in the extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n];\n```\n\n----------------------------------------\n\nTITLE: Post Creation Request Throttler in PHP\nDESCRIPTION: A custom throttler function that limits post creation requests to once every 10 seconds for users without special permissions. It checks the route name, user permissions, and recent post creation timestamps.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/api-throttling.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse DateTime;\nuse Flarum\\Post\\Post;\n\nfunction ($request) {\n    if (! in_array($request->getAttribute('routeName'), ['discussions.create', 'posts.create'])) {\n        return;\n    }\n\n    $actor = $request->getAttribute('actor');\n\n    if ($actor->can('postWithoutThrottle')) {\n        return false;\n    }\n\n    if (Post::where('user_id', $actor->id)->where('created_at', '>=', new DateTime('-10 seconds'))->exists()) {\n        return true;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Sorting for List API Controller in PHP\nDESCRIPTION: Shows how to set up sortable fields and extract sorting information from the request in a list controller.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// The default sort field and order to use.\npublic $sort = ['name' => 'asc'];\n\n// The fields that are available to be sorted by.\npublic $sortFields = ['firstName', 'lastName'];\n\nuse Illuminate\\Support\\Str;\n\n// ...\n\n$sort = $this->extractSort($request);\n$query = Tag::query();\n\nforeach ($sort as $field => $order) {\n    $query->orderBy(Str::snake($field), $order);\n}\n\nreturn $query->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing List Controller in PHP\nDESCRIPTION: Example of a controller for listing resources that extends AbstractListController. Shows basic implementation with serializer specification and data retrieval.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/api.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractListController;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass ListTagsController extends AbstractListController\n{\n    public $serializer = TagSerializer::class;\n    \n    protected function data(Request $request, Document $document)\n    {\n        return Tag::all();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Console Command in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to create a custom console command by extending the AbstractCommand class. It includes configuring the command name and description, as well as implementing the fire method where the command logic goes.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/console.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Console\\AbstractCommand;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass YourCommand extends AbstractCommand {\n  protected function configure()\n  {\n      $this\n          ->setName('YOUR COMMAND NAME')\n          ->setDescription('YOUR COMMAND DESCRIPTION');\n  }\n  protected function fire()\n  {\n    // Your logic here!\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag Visibility Scoper in PHP for Flarum\nDESCRIPTION: This snippet defines a scoper for the Tag model with the 'view' ability. It filters tags based on the actor's permissions to view forums.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeTagVisibility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     */\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->whereIn('id', function ($query) use ($actor) {\n            Tag::query()->setQuery($query->from('tags'))->whereHasPermission($actor, 'viewForum')->select('tags.id');\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Visibility Query Examples in PHP\nDESCRIPTION: Demonstrates different ways to use whereVisibleTo method for querying visible groups and applying visibility scoping to existing queries.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\n// Construct and execute a query for all groups that a given user can see.\n$groups = Group::whereVisibleTo($actor)->get();\n\n// Apply visibility scoping to an existing query.\nMore eloquent filters can be added after this.\n$query\n  ->whereVisibleTo($actor)\n  ->whereRaw('1=1');\n\n// Apply visibility scoping with an ability\n$query\n  ->whereVisibleTo($actor, 'someAbility')\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from Flarum's Frontend Store in JavaScript\nDESCRIPTION: Demonstrates how to fetch resources from Flarum's frontend store using the find method, which returns a promise.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// GET /api/discussions?sort=createdAt\napp.store.find('discussions', {sort: 'createdAt'}).then(console.log);\n\n// GET /api/discussions/123\napp.store.find('discussions', 123).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating New Resources in Flarum Frontend\nDESCRIPTION: Demonstrates how to create a new resource by creating a new model instance and saving it through the API.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussion = app.store.createRecord('discussions');\n\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Subscribers in Flarum\nDESCRIPTION: Shows how to create and register an event subscriber class to handle multiple events in Flarum extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Flarum\\Post\\Event\\Saving;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->subscribe(PostEventSubscriber::class),\n];\n```\n\nLANGUAGE: php\nCODE:\n```\nclass PostEventSubscriber\n{\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    public function subscribe($events)\n    {\n        $events->listen(Deleted::class, [$this, 'handleDeleted']);\n        $events->listen(Saving::class, [$this, 'handleSaving']);\n    }\n\n    public function handleDeleted(Deleted $event)\n    {\n        // Your logic here\n    }\n\n    public function handleSaving(Saving $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications in Flarum PHP Backend\nDESCRIPTION: This PHP code demonstrates how to send and remove notifications in Flarum's backend. It uses the NotificationSyncer to sync notifications for post likes and unlikes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Listener;\n\nuse Flarum\\Event\\ConfigureNotificationTypes;\nuse Flarum\\Likes\\Event\\PostWasLiked;\nuse Flarum\\Likes\\Event\\PostWasUnliked;\nuse Flarum\\Likes\\Notification\\PostLikedBlueprint;\nuse Flarum\\Notification\\NotificationSyncer;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nclass SendNotificationWhenPostIsLiked\n{\n    protected $notifications;\n\n    public function __construct(NotificationSyncer $notifications)\n    {\n        $this->notifications = $notifications;\n    }\n\n    public function subscribe(Dispatcher $events)\n    {\n        $events->listen(PostWasLiked::class, [$this, 'whenPostWasLiked']);\n        $events->listen(PostWasUnliked::class, [$this, 'whenPostWasUnliked']);\n    }\n\n    public function whenPostWasLiked(PostWasLiked $event)\n    {\n        $this->syncNotification($event->post, $event->user, [$event->post->user]);\n    }\n\n    public function whenPostWasUnliked(PostWasUnliked $event)\n    {\n        $this->syncNotification($event->post, $event->user, []);\n    }\n\n    public function syncNotification(Post $post, User $user, array $recipients)\n    {\n        if ($post->user->id != $user->id) {\n            $this->notifications->sync(\n                new PostLikedBlueprint($post, $user),\n                $recipients\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Relationships in Flarum API Controllers\nDESCRIPTION: Demonstrates how to extract requested includes from the request and use them to eager load relationships on models before serialization. This improves API performance by reducing the number of database queries.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$relations = $this->extractInclude($request);\n\nreturn Tag::all()->load($relations);\n```\n\n----------------------------------------\n\nTITLE: Extending Backend Models with Attribute Casting in PHP\nDESCRIPTION: Shows how to extend existing models with attribute casts and default values using the Model extender in PHP. This allows for defining how attributes should be cast when retrieved from the database and setting default values for attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\User\\User;\n\nreturn [\n    (new Extend\\Model(User::class))\n        ->default('is_alive', true)\n        ->cast('suspended_until', 'datetime')\n        ->cast('is_admin', 'boolean')\n];\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Requests for Testing in Flarum Using PHP\nDESCRIPTION: This code snippet demonstrates how to send HTTP requests to Flarum API endpoints as part of a test case using PHPUnit. It involves constructing a request with specific parameters and sending it to receive and validate a response. Dependencies include Flarum testing utilities and PHPUnit. Inputs are request method, path, and options, and the output is an HTTP response object.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/testing.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    /**\n     * @test\n     */\n    public function can_search_users()\n    {\n        $response = $this->send(\n          $this->request('GET', '/api/users', ['authenticatedAs' => 1])\n               ->withQueryParams(['filter' => ['q' => 'john group:1'], 'sort' => 'username'])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    /**\n     * @test\n     */\n    public function can_create_user()\n    {\n        $response = $this->send(\n          $this->request(\n                'POST',\n                '/api/users',\n                [\n                    'authenticatedAs' => 1,\n                    'json' => [\n                        'data' => [\n                            'attributes' => [\n                                'username' => 'test',\n                                'password' => 'too-obscure',\n                                'email' => 'test@machine.local'\n                            ]\n                        ]\n                    ]\n                ]\n            )\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Tag Policy Implementation Example\nDESCRIPTION: Example of a model-specific policy class for Tags that implements custom authorization logic for starting discussions and adding tags.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/authorization.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\Access\\AbstractPolicy;\nuse Flarum\\User\\User;\n\nclass TagPolicy extends AbstractPolicy\n{\n    /**\n     * @param User $actor\n     * @param Tag $tag\n     * @return bool|null\n     */\n    public function startDiscussion(User $actor, Tag $tag)\n    {\n        if ($tag->is_restricted) {\n            return $actor->hasPermission('tag'.$tag->id.'.startDiscussion') ? $this->allow() : $this->deny();\n        }\n    }\n\n    /**\n     * @param User $actor\n     * @param Tag $tag\n     * @return bool|null\n     */\n    public function addToDiscussion(User $actor, Tag $tag)\n    {\n        return $this->startDiscussion($actor, $tag);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Flarum Migration Structure\nDESCRIPTION: Structure of a Flarum migration file with up and down functions using Laravel's schema builder.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Schema\\Builder;\n\nreturn [\n    'up' => function (Builder $schema) {\n        // up migration\n    },\n    'down' => function (Builder $schema) {\n        // down migration\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Modifying Frontend Content with Frontend Extender in Flarum (Route Specific)\nDESCRIPTION: This snippet illustrates how to modify the frontend content for a specific route in a Flarum application using the `Frontend` extender's `route` method. It demonstrates setting the page title for the `/users` route.  It takes a closure that accepts a `Document` and a `Request` object.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/routes.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->route('/users', 'acme.users', function (Document $document, Request $request) {\n            $document->title = 'Users';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Scheduling Console Commands in PHP for Flarum\nDESCRIPTION: This example demonstrates how to create scheduled commands in a Flarum extension using the schedule method of the Flarum\\Extend\\Console extender. It includes setting up a command to run every minute and passing arguments.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/console.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Console\\CustomCommand;\nuse Illuminate\\Console\\Scheduling\\Event;\n\nreturn [\n    // Other extenders\n    (new Extend\\Console())->schedule('cache:clear', function (Event $event) {\n        $event->everyMinute();\n    }, ['Arg1', '--option1', '--option2']),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Console Command in PHP for Flarum\nDESCRIPTION: This code demonstrates how to create a custom console command class by extending Flarum's AbstractCommand class. The configure method sets the name and description of the command, while the fire method will contain the command's logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/console.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Console\\AbstractCommand;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass YourCommand implements AbstractCommand {\n  protected function configure()\n  {\n      $this\n          ->setName('YOUR COMMAND NAME')\n          ->setDescription('YOUR COMMAND DESCRIPTION');\n  }\n  protected function fire()\n  {\n    // Su lógica aquí\n  }\n}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Access Token Request/Response\nDESCRIPTION: Example of creating an access token using the /api/token endpoint with user credentials. Shows both the POST request format and successful response structure.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"identification\": \"Toby\",\n    \"password\": \"pass7word\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"token\": \"YACub2KLfe8mfmHPcUKtt6t2SMJOGPXnZbqhc3nX\",\n    \"userId\": \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Relations - Flarum API\nDESCRIPTION: Example of configuring default and optional relationship includes in API controllers, with methods for loading related data.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n    // The relationships that are included by default.\n    public $include = ['user'];\n\n    // Other relationships that are available to be included.\n    public $optionalInclude = ['discussions'];\n```\n\nLANGUAGE: php\nCODE:\n```\n$relations = $this->extractInclude($request);\n\nreturn Tag::all()->load($relations);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Gambit for Searching in PHP\nDESCRIPTION: This code shows how to create a custom search gambit for filtering users by country in Flarum. It extends AbstractRegexGambit to define a pattern matching 'country:value' and adds conditions to the search query based on the matched value.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Search\\AbstractRegexGambit;\nuse Flarum\\Search\\SearchState;\n\nclass CountryGambit extends AbstractRegexGambit\n{\n    public function getGambitPattern(): string\n    {\n        return 'country:(.+)';\n    }\n\n    public function conditions(SearchState $search, array $matches, bool $negate)\n    {\n        $country = trim($matches[1], '\"');\n\n        $search->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Post Class in Flarum\nDESCRIPTION: Example implementation of a custom post type class extending the abstract Post class. This example shows required properties and methods for a custom post type, including contentHtml and saveContent methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/post-types.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourNamespace\\PostType;\n\nuse Flarum\\Post\\AbstractEventPost;\nuse Flarum\\Post\\MergeableInterface;\nuse Flarum\\Post\\Post;\n\nclass SpecialPost extends Post implements MergeableInterface\n{\n    /**\n    * {@inheritdoc}\n    */\n    public static $type = 'specialPost';\n\n    /**\n    * {@inheritdoc}\n    */\n    public function saveContent()\n    {\n        // This method is executed when your post is saved to the database\n        // Do any formatting here\n    }\n\n    /**\n    * {@inheritdoc}\n    */\n    protected static function reply($discussion, $user, $content)\n    {\n        $post = new static;\n\n        $post->created_at = time();\n        $post->user_id = $user->id;\n        $post->discussion_id = $discussion->id;\n\n        // implement your custom logic here\n        // use $content for data if needed\n\n        return $post;\n    }\n\n    /**\n    * Create a new instance in reply to a discussion.\n    *\n    * @param int $discussionId\n    * @param int $userId\n    * @param string $content\n    * @return static\n    */\n    public static function reply($discussionId, $userId, $content)\n    {\n        $post = new static;\n\n        $post->created_at = time();\n        $post->user_id = $userId;\n        $post->discussion_id = $discussionId;\n\n        // implement your custom logic here\n        // use $content for data if needed\n\n        return $post;\n    }\n\n    /**\n    * {@inheritdoc}\n    */\n    public function getContentHtml()\n    {\n        // Return HTML to be rendered for this post\n        return '<div>My Custom Post</div>';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Commands in Flarum's extend.php\nDESCRIPTION: This PHP code demonstrates how to create scheduled commands that run on an interval using the Flarum\\Extend\\Console extender's schedule method. It includes an example of scheduling a command to run every minute with additional arguments and options.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/console.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Console\\CustomCommand;\nuse Illuminate\\Console\\Scheduling\\Event;\n\nreturn [\n    // Other extenders\n    (new Extend\\Console())->schedule('cache:clear', function (Event $event) {\n        $event->everyMinute();\n    }, ['Arg1', '--option1', '--option2']),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Dependencies in composer.json\nDESCRIPTION: Example of how to specify required dependencies for a Flarum extension in the composer.json file. This ensures the required extensions are installed and enabled before the current extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"require\": {\n    \"flarum/core\": \"^1.0.0\",  // Perchè tutte le estensioni necessitano del Core di Flarum.\n    \"flarum/tags\": \"^1.1.0\"  //  Questo dice a Flarum di trattare i tag come dipendenza della tua estensione.\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Service Provider in Flarum's extend.php\nDESCRIPTION: This code snippet shows how to register a custom service provider in Flarum's extend.php file using the ServiceProvider extender. This allows the custom service provider to be included in Flarum's boot process.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/service-provider.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    // Other extenders\n    (new Extend\\ServiceProvider())\n        ->register(CustomServiceProvider::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a DiscussionSerializer in PHP for Flarum API\nDESCRIPTION: Defines a serializer for the Discussion model, extending AbstractSerializer. Specifies the resource type and implements getDefaultAttributes method to convert model data to JSON:API format.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\AbstractSerializer;\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nclass DiscussionSerializer extends AbstractSerializer\n{\n    protected $type = 'discussions';\n\n    protected function getDefaultAttributes($discussion)\n    {\n        return [\n            'title' => $discussion->title,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Flarum Integration Test Case in PHP\nDESCRIPTION: This snippet demonstrates how to set up a Flarum integration test case, including configuring settings, enabling extensions, preparing the database, and using extenders.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    use RetrievesAuthorizedUsers;\n\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        $this->setting('my.custom.setting', true);\n\n        $this->extension('flarum-tags', 'my-cool-extension');\n\n        $this->prepareDatabase([\n            'users' => [\n                $this->normalUser()\n            ],\n            'discussions' => [\n                ['id' => 1, 'title' => 'some title', 'created_at' => Carbon::now(), 'last_posted_at' => Carbon::now(), 'user_id' => 1, 'first_post_id' => 1, 'comment_count' => 1]\n            ],\n            'posts' => [\n                ['id' => 1, 'number' => 1, 'discussion_id' => 1, 'created_at' => Carbon::now(), 'user_id' => 1, 'type' => 'comment', 'content' => '<t><p>something</p></t>']\n            ]\n        ]);\n\n        $this->extend((new CoolExtensionExtender)->doSomething('hello world'));\n    }\n\n    /**\n     * @test\n     */\n    public function some_phpunit_test_case()\n    {\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Discussion Visibility Scoper for Multiple Abilities in PHP for Flarum\nDESCRIPTION: This snippet defines a global scoper for the Discussion model. It handles various abilities and applies complex logic to restrict discussions based on tags and permissions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibilityForAbility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     * @param string $ability\n     */\n    public function __invoke(User $actor, Builder $query, $ability)\n    {\n        // Automatic scoping should be applied to the global `view` ability,\n        // and to arbitrary abilities that aren't subqueries of `view`.\n        // For example, if we want to scope discussions where the user can\n        // edit posts, this should apply.\n        // But if we are expanding a restriction of `view` (for example,\n        // `viewPrivate`), we shouldn't apply this query again.\n        if (substr($ability, 0, 4) === 'view' && $ability !== 'view') {\n            return;\n        }\n\n        // Avoid an infinite recursive loop.\n        if (Str::endsWith($ability, 'InRestrictedTags')) {\n            return;\n        }\n\n        // `view` is a special case where the permission string is represented by `viewForum`.\n        $permission = $ability === 'view' ? 'viewForum' : $ability;\n\n        // Restrict discussions where users don't have necessary permissions in all tags.\n        // We use a double notIn instead of a doubleIn because the permission must be present in ALL tags,\n        // not just one.\n        $query->where(function ($query) use ($actor, $permission) {\n            $query\n                ->whereNotIn('discussions.id', function ($query) use ($actor, $permission) {\n                    return $query->select('discussion_id')\n                        ->from('discussion_tag')\n                        ->whereNotIn('tag_id', function ($query) use ($actor, $permission) {\n                            Tag::query()->setQuery($query->from('tags'))->whereHasPermission($actor, $permission)->select('tags.id');\n                        });\n                })\n                ->orWhere(function ($query) use ($actor, $permission) {\n                    // Allow extensions a way to override scoping for any given permission.\n                    $query->whereVisibleTo($actor, \"${permission}InRestrictedTags\");\n                });\n        });\n\n        // Hide discussions with no tags if the user doesn't have that global\n        // permission.\n        if (! $actor->hasPermission($permission)) {\n            $query->has('tags');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Serializer in PHP for Flarum API\nDESCRIPTION: Demonstrates how to add attributes and relationships to an existing resource type using the ApiSerializer extender in Flarum, including adding single attributes, multiple modifications, and API relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nreturn [\n    (new Extend\\ApiSerializer(UserSerializer::class))\n        // One attribute at a time\n        ->attribute('firstName', function ($serializer, $user, $attributes) {\n            return $user->first_name\n        })\n        // Multiple modifications at once, more complex logic\n        ->mutate(function($serializer, $user, $attributes) {\n            $attributes['someAttribute'] = $user->someAttribute;\n            if ($serializer->getActor()->can('administrate')) {\n                $attributes['someDate'] = $serializer->formatDate($user->some_date);\n            }\n\n            return $attributes;\n        })\n        // API relationships\n        ->hasOne('phone', PhoneSerializer::class)\n        ->hasMany('comments', CommentSerializer::class),\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Post Visibility Logic in PostPolicy\nDESCRIPTION: Shows how to implement visibility rules for private posts while allowing extensibility. Uses nested where clauses to combine default visibility rules with extension-specific modifications.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, we want to ensure that private posts aren't visible to users by default.\n// The simplest way to do this would be:\n$query->where('posts.is_private', false);\n\n// However, we recognize that some extensions might have valid use cases for showing private posts.\n// So instead, we include all posts that aren't private, AND all private posts desired by extensions\n$query->where(function ($query) use ($actor) {\n    $query->where('posts.is_private', false)\n        ->orWhere(function ($query) use ($actor) {\n            $query->whereVisibleTo($actor, 'viewPrivate');\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Notification Component and Settings Grid in Flarum\nDESCRIPTION: Configure notification settings and register frontend notification components for extension\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/notifications.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport NotificationGrid from 'flarum/forum/components/NotificationGrid';\n\nimport PostLikedNotification from './components/PostLikedNotification';\n\napp.initializers.add('flarum-likes', () => {\n  app.notificationComponents.postLiked = PostLikedNotification;\n\n  extend(NotificationGrid.prototype, 'notificationTypes', function (items) {\n    items.add('postLiked', {\n      name: 'postLiked',\n      icon: 'far fa-thumbs-up',\n      label: app.translator.trans('flarum-likes.forum.settings.notify_post_liked_label')\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Service Provider in Flarum's extend.php\nDESCRIPTION: This code snippet shows how to register a custom Service Provider in Flarum's extend.php file using the ServiceProvider extender. This is necessary to integrate the custom Service Provider into Flarum's boot process.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/service-provider.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    // Other extenders\n    (new Extend\\ServiceProvider())\n        ->register(CustomServiceProvider::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Eloquent Relationships with the relationship Method\nDESCRIPTION: Shows how to use the more flexible relationship method to add any valid Eloquent relationship to existing models, allowing for finer-grained customization like morphMany, morphToMany, and morphedByMany.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->relationship('mobile', 'App\\Phone', function ($user) {\n            // Return any Eloquent relationship here.\n            return $user->belongsToMany(Discussion::class, 'recipients')\n                ->withTimestamps()\n                ->wherePivot('removed_at', null);\n        })\n```\n\n----------------------------------------\n\nTITLE: Implementing a Create Resource Controller for Flarum API\nDESCRIPTION: Example of implementing a controller for creating resources in Flarum's JSON:API. This controller extends AbstractCreateController, processes the request body, and returns the created model.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractCreateController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass CreateTagController extends AbstractCreateController\n{\n    public $serializer = TagSerializer::class;\n    \n    protected function data(Request $request, Document $document)\n    {\n        $attributes = Arr::get($request->getParsedBody(), 'data.attributes');\n        \n        return Tag::create([\n            'name' => Arr::get($attributes, 'name')\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Modal Component in Flarum\nDESCRIPTION: Example of creating a custom modal component by extending Flarum's Modal class. This shows how to customize the appearance and content of a modal dialog.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/interactive-components.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Modal from 'flarum/common/components/Modal';\n\nexport default class CustomModal extends Modal {\n  // True by default, dictates whether the modal can be dismissed by clicking on the background or in the top right corner.\n  static isDismissible = true;\n\n  className() {\n    // Custom CSS classes to apply to the modal\n    return 'custom-modal-class';\n  }\n\n  title() {\n    // Content to show in the modal's title bar\n    return <p>Custom Modal</p>;\n  }\n\n  content() {\n    // Content to show in the modal's body\n    return <p>Hello World!</p>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Existing API Controller in PHP\nDESCRIPTION: Illustrates how to customize options on existing API controllers using the ApiController extender in Flarum, including setting serializers, adding includes, and modifying query preparation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillGetData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->setSerializer(MyDiscussionSerializer::class)\n        ->addInclude('user')\n        ->addOptionalInclude('posts')\n        ->setLimit(20)\n        ->setMaxLimit(50)\n        ->setSort(['name' => 'asc'])\n        ->addSortField('firstName')\n        ->prepareDataQuery(function ($controller) {\n            // Add custom logic here to modify the controller\n            // before data queries are executed.\n        })\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag Visibility Scoper in PHP\nDESCRIPTION: A custom scoper for the Tag model that handles the 'view' ability. It filters tags based on user permissions using a subquery to check viewForum permission.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeTagVisibility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     */\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->whereIn('id', function ($query) use ($actor) {\n            Tag::query()->setQuery($query->from('tags'))->whereHasPermission($actor, 'viewForum')->select('tags.id');\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Like Notification Blueprint in PHP\nDESCRIPTION: Example of a notification blueprint class for post likes. Implements BlueprintInterface to define notification content and behavior including subject, sender, and notification type.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass PostLikedBlueprint implements BlueprintInterface\n{\n    public $post;\n\n    public $user;\n\n    public function __construct(Post $post, User $user)\n    {\n        $this->post = $post;\n        $this->user = $user;\n    }\n\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    public function getFromUser()\n    {\n        return $this->user;\n    }\n\n    public function getData()\n    {\n    }\n\n    public static function getType()\n    {\n        return 'postLiked';\n    }\n\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Pusher Notification Driver in PHP\nDESCRIPTION: Example of a custom notification driver for Pusher integration. Implements NotificationDriverInterface to handle notification sending and type registration.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Pusher;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\Driver\\NotificationDriverInterface;\nuse Illuminate\\Contracts\\Queue\\Queue;\n\nclass PusherNotificationDriver implements NotificationDriverInterface\n{\n    /**\n     * @var Queue\n     */\n    protected $queue;\n\n    public function __construct(Queue $queue)\n    {\n        $this->queue = $queue;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function send(BlueprintInterface $blueprint, array $users): void\n    {\n        if (count($users)) {\n            $this->queue->push(new SendPusherNotificationsJob($blueprint, $users));\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function registerType(string $blueprintClass, array $driversEnabledByDefault): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Search Mutator for Filtering by Same Country in PHP\nDESCRIPTION: This search mutator limits results to users from the same country as the actor making the request. It implements an invokable class that modifies the query by adding a WHERE condition comparing the country field.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Query\\QueryCriteria;\nuse Flarum\\Search\\SearchState;\n\nclass OnlySameCountrySearchMutator\n{\n    public function __invoke(SearchState $searchState, QueryCriteria $queryCriteria)\n    {\n        $searchState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Post Type in PHP for Flarum\nDESCRIPTION: This code snippet shows how to register a custom post type in Flarum. It demonstrates adding the post type to the Flarum application's extender, which makes it available for use within the forum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/post-types.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Post;\n\nreturn [\n    (new Extend\\Post())\n        ->type(CustomPost::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Adjusting Data Before Serialization in Flarum\nDESCRIPTION: This snippet demonstrates how to use the `ApiController` extender to adjust data before serialization within Flarum's API. It shows how to load custom relations before data is serialized, allowing for more flexible and tailored API responses.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/api.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillSerializeData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->prepareDataForSerialization(function ($controller, $data, $request, $document) {\n            $data->load('myCustomRelation');\n        }),\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables Migration\nDESCRIPTION: Example of creating a new database table using Flarum's Migration helper with a Blueprint definition.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Database\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\n\nreturn Migration::createTable('users', function (Blueprint $table) {\n    $table->increments('id');\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Post Type Data in PHP for Flarum\nDESCRIPTION: This code snippet shows how to retrieve and work with custom post type data in Flarum. It demonstrates accessing the extra data stored in a custom post type and provides an example of how to use it in a view.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/post-types.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::find($id);\n\nif ($post instanceof CustomPost) {\n    $extraData = $post->extra_data;\n    // Use $extraData in your view or logic\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Create Controller in PHP\nDESCRIPTION: Example of a controller for creating resources that extends AbstractCreateController. Shows how to handle POST requests and create new model instances.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/api.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractCreateController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass CreateTagController extends AbstractCreateController\n{\n    public $serializer = TagSerializer::class;\n    \n    protected function data(Request $request, Document $document)\n    {\n        $attributes = Arr::get($request->getParsedBody(), 'data.attributes');\n        \n        return Tag::create([\n            'name' => Arr::get($attributes, 'name')\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Notification Driver in PHP for Flarum\nDESCRIPTION: This snippet shows how to register a custom notification driver in Flarum using the Notification extender. It specifies the driver name and class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend\nuse Flarum\\Pusher\\PusherNotificationDriver;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->driver('pusher', PusherNotificationDriver::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Notification Component in JavaScript\nDESCRIPTION: Example showing how to register a notification component and extend the notification grid in Flarum's frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/notifications.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport NotificationGrid from 'flarum/forum/components/NotificationGrid';\n\nimport PostLikedNotification from './components/PostLikedNotification';\n\napp.initializers.add('flarum-likes', () => {\n  app.notificationComponents.postLiked = PostLikedNotification;\n\n  extend(NotificationGrid.prototype, 'notificationTypes', function (items) {\n    items.add('postLiked', {\n      name: 'postLiked',\n      icon: 'far fa-thumbs-up',\n      label: app.translator.trans('flarum-likes.forum.settings.notify_post_liked_label')\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Translation Keys in YAML\nDESCRIPTION: This YAML snippet shows how to define translation keys for use in the Flarum extension UI, allowing multiple references to the same translation for varying contexts.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/i18n.md#2025-04-16_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nedit_stuff_button: => edit_stuff    # Used in the code that creates the button.\nedit_stuff_title: => edit_stuff     # Used in the code that creates the dialog.\n\nedit_stuff: Edit Stuff              # Not used in the code.\n```\n\n----------------------------------------\n\nTITLE: Defining Model Relationships in PHP for Flarum Backend\nDESCRIPTION: Demonstrates how to add relationships to existing models using the Model extender in Flarum's backend. It covers hasOne, belongsTo, hasMany, and belongsToMany relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->hasOne('phone', 'App\\Phone', 'foreign_key', 'local_key')\n        ->belongsTo('country', 'App\\Country', 'foreign_key', 'other_key')\n        ->hasMany('comment', 'App\\Comment', 'foreign_key', 'local_key')\n        ->belongsToMany('role', 'App\\Role', 'role_user', 'user_id', 'role_id')\n```\n\n----------------------------------------\n\nTITLE: Checking Group and User Permissions in Flarum\nDESCRIPTION: Demonstrates common methods for interacting with permissions in Flarum. Shows how to access a group's permissions relation, check if a group has a specific permission, enumerate all permissions for a user, and check if a user has a specific permission.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// An Eloquent relation to the group's permissions\n$group->permissions();\n\n// Check if a group has a permission\n$group->hasPermission('viewForum');\n\n// Enumerate all the user's permissions\n$user->getPermissions();\n\n// Check if the user is in a group with the given permission\n$user->hasPermission('viewForum');\n```\n\n----------------------------------------\n\nTITLE: Saving Resources in JavaScript\nDESCRIPTION: Examples of saving model instances and their relationships\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n\nuser.save({\n  relationships: {\n    groups: [\n      store.getById('groups', 1),\n      store.getById('groups', 2)\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Native Promises Instead of m.deferred\nDESCRIPTION: Demonstrates how to replace Mithril 0.2's m.deferred with native JavaScript promises in Mithril 2.0.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\nconst deferred = m.deferred();\n\napp.store.find('posts').then(result => deferred.resolve(result));\n\nreturn deferred.promise;\n\n// Mithril 2\nreturn app.store.find('posts');\n```\n\n----------------------------------------\n\nTITLE: Defining New Frontend Models in JavaScript for Flarum\nDESCRIPTION: Illustrates how to define a new frontend model in Flarum by extending the Model class. It shows how to define attributes and relationships for the model.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport Model from 'flarum/common/Model';\n\nexport default class Tag extends Model {\n  title = Model.attribute('title');\n  createdAt = Model.attribute('createdAt', Model.transformDate);\n  parent = Model.hasOne('parent');\n  discussions = Model.hasMany('discussions');\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side Translation in Flarum (PHP)\nDESCRIPTION: Explains how to perform server-side translation in Flarum using PHP and the Flarum\\Locale\\Translator class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Locale\\Translator;\n\n// In your class constructor or method:\n$translator = resolve(Translator::class);\n$translatedText = $translator->trans('your.translation.key');\n```\n\n----------------------------------------\n\nTITLE: Extending Flarum Views with Laravel Blade in PHP\nDESCRIPTION: This PHP snippet demonstrates how to register an extension's view files with the Flarum framework using the View extender. The `namespace` method specifies the namespace and directory path of the Blade template files. It requires the `Flarum\\Extend` and `Illuminate\\Contracts\\View\\Factory` dependencies.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/views.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views'),\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing ExtensionData for Flarum Extension\nDESCRIPTION: Demonstrates how to initialize the ExtensionData API for a Flarum extension. This is the first step in adding settings or permissions to an extension.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/admin.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('interstellar', function(app) {\n\n  app.extensionData\n    .for('acme-interstellar')\n});\n```\n\n----------------------------------------\n\nTITLE: Serializing Settings to Frontend using Extend\nDESCRIPTION: Shows how to make backend settings available in the frontend forum interface using the Settings extender. It includes an example of both direct serialization and serialization with custom logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n   (new Extend\\Settings)\n      ->serializeToForum('myCoolSetting', 'my.cool.setting.key')\n      ->serializeToForum('myCoolSettingModified', 'my.cool.setting.key', function ($retrievedValue) {\n        // Este tercer argumento es opcional, y nos permite pasar la configuración recuperada a través de alguna lógica personalizada.\n        // En este ejemplo, le añadiremos una cadena.\n\n        return \"My Cool Setting: $retrievedValue\";\n      }),\n]\n```\n\n----------------------------------------\n\nTITLE: Testing Console Commands in Flarum Extensions\nDESCRIPTION: Demonstrates how to test custom console commands in Flarum extensions by extending the ConsoleTestCase class and using the runCommand method to execute commands with arguments and options.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Tests\\integration\\ConsoleTestCase;\n\nclass ConsoleTest extends ConsoleTestCase\n{\n    /**\n     * @test\n     */\n    public function command_works()\n    {\n        $input = [\n            'command' => 'some:command',  // The command name, equivalent of `php flarum some:command`\n            'foo' => 'bar',  // arguments\n            '--lorem' => 'ipsum'  // options\n        ];\n\n        $this->assertEquals('Some Output.', $this->runCommand($input));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended Component Communication in Mithril.js Using Attributes\nDESCRIPTION: This code shows the recommended approach for component communication in Mithril 2, where data is passed down to child components through attributes rather than storing component instances. The parent component manages the state and passes it to the child.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nclass ChildComponent extends Component {\n  view() {\n    return <p>{this.attrs.counter}</p>;\n  }\n}\n\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.counter += 1}></button>\n        <ChildComponent counter={this.counter}></ChildComponent>\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Global Policy in PHP\nDESCRIPTION: Demonstrates a global policy in Flarum that checks permissions for viewing the forum and starting discussions based on tag settings.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/authorization.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\Access\\AbstractPolicy;\nuse Flarum\\User\\User;\n\nclass GlobalPolicy extends AbstractPolicy\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n\n    /**\n     * @param Flarum\\User\\User $actor\n     * @param string $ability\n     * @return bool|void\n     */\n    public function can(User $actor, string $ability)\n    {\n        if (in_array($ability, ['viewForum', 'startDiscussion'])) {\n            $enoughPrimary = count(Tag::getIdsWhereCan($actor, $ability, true, false)) >= $this->settings->get('min_primary_tags');\n            $enoughSecondary = count(Tag::getIdsWhereCan($actor, $ability, false, true)) >= $this->settings->get('min_secondary_tags');\n\n            if ($enoughPrimary && $enoughSecondary) {\n                return $this->allow();\n            } else {\n                return $this->deny();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination for API Resources in PHP\nDESCRIPTION: Example of setting up pagination for the Index endpoint in a Flarum API resource.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Endpoint;\n\npublic function endpoints(): array\n{\n    return [\n        Endpoint\\Index::make()\n            ->paginate(20, 50), // these are the default values, so you may omit these arguments.\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Testing API Requests in Flarum\nDESCRIPTION: Examples of how to make and test API requests in Flarum integration tests. Shows how to search users and create a user with proper authentication and request formatting.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    /**\n     * @test\n     */\n    public function can_search_users()\n    {\n        $response = $this->send(\n          $this->request('GET', '/api/users', ['authenticatedAs' => 1])\n               ->withQueryParams(['filter' => ['q' => 'john group:1'], 'sort' => 'username'])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    /**\n     * @test\n     */\n    public function can_create_user()\n    {\n        $response = $this->send(\n          $this->request(\n                'POST',\n                '/api/users',\n                [\n                    'authenticatedAs' => 1,\n                    'json' => [\n                        'data' => [\n                            'attributes' => [\n                                'username' => 'test',\n                                'password' => 'too-obscure',\n                                'email' => 'test@machine.local'\n                            ]\n                        ]\n                    ]\n                ]\n            )\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Deletion Controller in PHP with Flarum\nDESCRIPTION: Example of a controller class that handles logo deletion by accessing the filesystem through Flarum's disk system. Shows dependency injection of filesystem factory and settings repository.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/filesystem.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Api\\Controller;\n\nuse Flarum\\Http\\RequestUtil;\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Illuminate\\Contracts\\Filesystem\\Factory;\nuse Illuminate\\Contracts\\Filesystem\\Filesystem;\nuse Laminas\\Diactoros\\Response\\EmptyResponse;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nclass DeleteLogoController extends AbstractDeleteController\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    /**\n     * @var Filesystem\n     */\n    protected $uploadDir;\n\n    /**\n     * @param SettingsRepositoryInterface $settings\n     * @param Factory $filesystemFactory\n     */\n    public function __construct(SettingsRepositoryInterface $settings, Factory $filesystemFactory)\n    {\n        $this->settings = $settings;\n        $this->uploadDir = $filesystemFactory->disk('flarum-assets');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function delete(ServerRequestInterface $request)\n    {\n        RequestUtil::getActor($request)->assertAdmin();\n\n        $path = $this->settings->get('logo_path');\n\n        $this->settings->set('logo_path', null);\n\n        if ($this->uploadDir->exists($path)) {\n            $this->uploadDir->delete($path);\n        }\n\n        return new EmptyResponse(204);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Gambit for Country Search in PHP\nDESCRIPTION: This snippet demonstrates how to create a custom gambit for searching users by country in Flarum. It extends the AbstractRegexGambit class and implements the necessary methods to handle the 'country:' search pattern.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Search\\AbstractRegexGambit;\nuse Flarum\\Search\\SearchState;\n\nclass CountryGambit extends AbstractRegexGambit\n{\n    public function getGambitPattern(): string\n    {\n        return 'country:(.+)';\n    }\n\n    public function conditions(SearchState $search, array $matches, bool $negate)\n    {\n        $country = trim($matches[1], '\"');\n\n        $search->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Component for Internal Navigation in JSX\nDESCRIPTION: Demonstrates various ways to use Flarum's Link component for internal and external navigation in a Single Page Application context. Shows how to create basic links, use generated routes, and handle external links.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'flarum/common/components/Link';\n\n// Link can be used just like any other component:\n<Link href=\"/route/known/to/mithril\">Hello World!</Link>\n\n// You'll frequently use Link with generated routes:\n<Link href={app.route('settings')}>Hello World!</Link>\n\n// Link can even generate external links with the external attr:\n<Link external={true} href=\"https://google.com\">Hello World!</Link>\n\n// The above example with external = true is equivalent to:\n<a href=\"https://google.com\">Hello World!</a>\n// but is provided for flexibility: sometimes you might have links\n// that are conditionally internal or external.\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Notification Driver in PHP\nDESCRIPTION: Implementation of a custom notification driver for Pusher integration. This class handles sending notifications through the Pusher service and registers notification types with the driver.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/notifications.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Pusher;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\Driver\\NotificationDriverInterface;\nuse Illuminate\\Contracts\\Queue\\Queue;\n\nclass PusherNotificationDriver implements NotificationDriverInterface\n{\n    /**\n     * @var Queue\n     */\n    protected $queue;\n\n    public function __construct(Queue $queue)\n    {\n        $this->queue = $queue;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function send(BlueprintInterface $blueprint, array $users): void\n    {\n        // The `send` method is responsible for determining any notifications need to be sent.\n        // If not (for example, if there are no users to send to), there's no point in scheduling a job.\n        // We HIGHLY recommend that notifications are sent via a queue job for performance reasons.\n        if (count($users)) {\n            $this->queue->push(new SendPusherNotificationsJob($blueprint, $users));\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function registerType(string $blueprintClass, array $driversEnabledByDefault): void\n    {\n        // This method is generally used to register a user preference for this notification.\n        // In the case of pusher, there's no need for this.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking User and Request Objects in Flarum Tests\nDESCRIPTION: Example showing how to mock User objects and Request methods for testing authorization interactions in Flarum extensions. This approach allows testing permission-based logic without a real user or request context.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n    $this->actor = m::mock(User::class);\n    $request = m::mock(Request::class)->makePartial();\n    $request->shouldReceive('getAttribute->getActor')->andReturn($this->actor);\n    $this->actor->shouldReceive('SOME PERMISSION')->andReturn(true/false);\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Models with Custom Attributes\nDESCRIPTION: Example of extending an existing Flarum model to add default values and attribute casting using the Model extender.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/models.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\User\\User;\n\nreturn [\n    (new Extend\\Model(User::class))\n        ->default('is_alive', true)\n        ->cast('suspended_until', 'datetime')\n        ->cast('is_admin', 'boolean')\n];\n```\n\n----------------------------------------\n\nTITLE: Advanced Component Extension with Override Utility\nDESCRIPTION: Shows how to use the override utility to conditionally modify component behavior and create custom item lists\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend, override } from 'flarum/common/extend';\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\nimport ItemList from 'flarum/common/utils/ItemList';\n\noverride(HeaderPrimary.prototype, 'items', function(original) {\n  let items;\n\n  if (someArbitraryCondition) {\n    items = original();\n  } else {\n    items = new ItemList();\n  }\n\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n\n  return items;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a List API Controller in PHP\nDESCRIPTION: This code shows how to create a controller for listing resources by extending AbstractListController. It includes the basic structure and the data method implementation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractListController;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass ListTagsController extends AbstractListController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        return Tag::all();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Filter for User Country in PHP\nDESCRIPTION: Creates a filter class for the User model that allows filtering users by country. The filter implements FilterInterface with methods to define the filter key and the actual filtering logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterInterface;\nuse Flarum\\Filter\\FilterState;\n\nclass CountryFilter implements FilterInterface\n{\n    public function getFilterKey(): string\n    {\n        return 'country';\n    }\n\n    public function filter(FilterState $filterState, string $filterValue, bool $negate)\n    {\n        $country = trim($filterValue, '\"');\n\n        $filterState->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from API in JavaScript\nDESCRIPTION: Demonstrates how to fetch resources from the API using the store's find method. This shows both retrieving collections with query parameters and individual resources by ID, returning promises with the results.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// GET /api/discussions?sort=createdAt\napp.store.find('discussions', {sort: 'createdAt'}).then(console.log);\n\n// GET /api/discussions/123\napp.store.find('discussions', 123).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Configuring API Throttling in Flarum's extend.php\nDESCRIPTION: Example of how to add or remove throttlers using Flarum's extension system. Shows setting a global throttle override and removing an existing throttler.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/api-throttling.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    // Other extenders\n    (new Extend\\ThrottleApi())\n        ->set('throttleAll', function () {\n          return false;\n        })\n        ->remove('bypassThrottlingAttribute'),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Scoper for viewPrivate Ability - PHP\nDESCRIPTION: This snippet illustrates a scoper that manages visibility based on a custom 'viewPrivate' ability. It allows discussions to be visible if certain conditions on columns are met, using 'orWhere' to encapsulate its logic.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace ACME\\YourExtension\\Access;\n\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     */\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->orWhere(function($query) use ($actor) {\n            $query->where('some_column', true);\n            $query->where('some_other_column', false);\n        })\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Subscriber Class in PHP\nDESCRIPTION: Example of an event subscriber class that listens to multiple events (Deleted and Saving) with dependency injection.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass PostEventSubscriber\n{\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    public function subscribe($events)\n    {\n        $events->listen(Deleted::class, [$this, 'handleDeleted']);\n        $events->listen(Saving::class, [$this, 'handleSaving']);\n    }\n\n    public function handleDeleted(Deleted $event)\n    {\n        // Your logic here\n    }\n\n    public function handleSaving(Saving $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Subscriber Class in Flarum\nDESCRIPTION: This code defines an event subscriber class (PostEventSubscriber) that handles multiple events. The `subscribe` method registers event listeners for `Deleted` and `Saving` events, mapping them to their respective handler methods (`handleDeleted` and `handleSaving`). Constructor injection is used to resolve the TranslatorInterface dependency.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass PostEventSubscriber\n{\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    public function subscribe($events)\n    {\n        $events->listen(Deleted::class, [$this, 'handleDeleted']);\n        $events->listen(Saving::class, [$this, 'handleSaving']);\n    }\n\n    public function handleDeleted(Deleted $event)\n    {\n        // Your logic here\n    }\n\n    public function handleSaving(Saving $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Class-based Event Listener in Flarum (PHP)\nDESCRIPTION: Demonstrates how to create a class-based event listener with dependency injection for the Deleted event in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass PostDeletedListener\n{\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    public function handle(Deleted $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Service Provider in Flarum's extend.php\nDESCRIPTION: This code snippet shows how to register a custom Service Provider in Flarum using the ServiceProvider extender in the extend.php file. This is necessary to integrate the custom Service Provider into Flarum's boot process.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/service-provider.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    // Other extenders\n    (new Extend\\ServiceProvider())\n        ->register(CustomServiceProvider::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Filesystem Disks in Flarum with DeleteLogoController Example\nDESCRIPTION: This snippet demonstrates how to access Flarum filesystem disks by injecting the Filesystem Factory and retrieving a specific disk. It shows the complete DeleteLogoController implementation that handles logo deletion from the assets disk.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/filesystem.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Api\\Controller;\n\nuse Flarum\\Http\\RequestUtil;\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Illuminate\\Contracts\\Filesystem\\Factory;\nuse Illuminate\\Contracts\\Filesystem\\Filesystem;\nuse Laminas\\Diactoros\\Response\\EmptyResponse;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nclass DeleteLogoController extends AbstractDeleteController\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    /**\n     * @var Filesystem\n     */\n    protected $uploadDir;\n\n    /**\n     * @param SettingsRepositoryInterface $settings\n     * @param Factory $filesystemFactory\n     */\n    public function __construct(SettingsRepositoryInterface $settings, Factory $filesystemFactory)\n    {\n        $this->settings = $settings;\n        $this->uploadDir = $filesystemFactory->disk('flarum-assets');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function delete(ServerRequestInterface $request)\n    {\n        RequestUtil::getActor($request)->assertAdmin();\n\n        $path = $this->settings->get('logo_path');\n\n        $this->settings->set('logo_path', null);\n\n        if ($this->uploadDir->exists($path)) {\n            $this->uploadDir->delete($path);\n        }\n\n        return new EmptyResponse(204);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Table in Flarum Migration\nDESCRIPTION: Example of using Flarum's Migration helper to create a new database table with an auto-incrementing ID column.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Flarum\\Database\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\n\nreturn Migration::createTable('users', function (Blueprint $table) {\n    $table->increments('id');\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Filters via Flarum Extender\nDESCRIPTION: Shows how to register custom filters and filter mutators using Flarum's Filter extender. This connects the custom filter implementations to the UserFilterer class.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/search.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\Filter(UserFilterer::class))\n    ->addFilter(CountryFilter::class)\n    ->addFilterMutator(OnlySameCountryFilterMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: Extending Backend Models with Casts and Default Values in PHP\nDESCRIPTION: This snippet demonstrates how to use the Model extender to add casts and default values to an existing User model in Flarum's backend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\User\\User;\n\nreturn [\n    (new Extend\\Model(User::class))\n        ->default('is_alive', true)\n        ->cast('suspended_until', 'datetime')\n        ->cast('is_admin', 'boolean')\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring TextFormatter in Flarum using PHP\nDESCRIPTION: This snippet demonstrates how to use the Formatter extender to configure the TextFormatter instance, modify raw text before parsing, and modify XML before rendering. It includes examples of adding BBCode, custom parsing logic, and custom rendering logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/formatting.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse s9e\\TextFormatter\\Configurator;\nuse s9e\\TextFormatter\\Parser;\nuse s9e\\TextFormatter\\Renderer;\n\nreturn [\n    (new Extend\\Formatter)\n        // Añadir la configuración del formateador de texto personalizado\n        ->configure(function (Configurator $config) {\n            $config->BBCodes->addFromRepository('B');\n        })\n        // Modificar el texto en bruto antes de analizarlo.\n        // Esta llamada de retorno debe devolver el texto modificado.\n        ->parse(function (Parser $parser, $context, $text) {\n            // lógica personalizada aquí\n            return $newText;\n        })\n        // Modificar el XML a renderizar antes de renderizar.\n        // Esta llamada de retorno debe devolver el nuevo XML.\n        // Por ejemplo, en la extensión de menciones, esto se utiliza para\n        // proporcionar el nombre de usuario y el nombre para mostrar del usuario que está siendo mencionado.\n        // Asegúrese de que el último argumento $request sea nulo (u omitido por completo).\n        ->render(function (Renderer $renderer, $context, $xml, Request $request = null) {\n            // lógica personalizada aquí\n            return $newXml;\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Mailable Post Mention Notification in PHP\nDESCRIPTION: Example of a notification blueprint that implements email functionality through MailableInterface.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/notifications.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Mentions\\Notification;\n\nuse Flarum\\Notification\\AlertableInterface;\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\MailableInterface;\nuse Flarum\\Post\\Post;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass PostMentionedBlueprint implements BlueprintInterface, AlertableInterface, MailableInterface\n{\n    public function __construct(\n      public Post $post, \n      public Post $reply\n    ) {\n    }\n\n    public function getSubject(): ?AbstractModel\n    {\n        return $this->post;\n    }\n\n    public function getFromUser(): ?User\n    {\n        return $this->reply->user;\n    }\n\n    public function getData(): mixed\n    {\n        return ['replyNumber' => (int) $this->reply->number];\n    }\n\n    public function getEmailViews(): array\n    {\n        return [\n          'text' => 'flarum-mentions::emails.plain.postMentioned',\n          'html' => 'flarum-mentions::emails.html.postMentioned',\n        ];\n    }\n\n    public function getEmailSubject(TranslatorInterface $translator): string\n    {\n        return $translator->trans('flarum-mentions.email.post_mentioned.subject', [\n            '{replier_display_name}' => $this->post->user->display_name,\n            '{title}' => $this->post->discussion->title\n        ]);\n    }\n\n    public static function getType(): string\n    {\n        return 'postMentioned';\n    }\n\n    public static function getSubjectModel(): string\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Throttling in PHP\nDESCRIPTION: An example of Flarum's post throttler that limits the rate of post creation. It checks the route name, user permissions, and whether the user has posted within the last 10 seconds.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/api-throttling.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse DateTime;\nuse Flarum\\Post\\Post;\n\nfunction ($request) {\n    if (! in_array($request->getAttribute('routeName'), ['discussions.create', 'posts.create'])) {\n        return;\n    }\n\n    $actor = $request->getAttribute('actor');\n\n    if ($actor->can('postWithoutThrottle')) {\n        return false;\n    }\n\n    if (Post::where('user_id', $actor->id)->where('created_at', '>=', new DateTime('-10 seconds'))->exists()) {\n        return true;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Post Visibility Scoper Implementation\nDESCRIPTION: Example of implementing a custom visibility scoper in an extension to handle private post visibility. Shows how to check user permissions and modify the query accordingly.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopePostVisibility\n{\n    public function __invoke(User $actor, $query)\n    {\n      if ($actor->can('posts.viewPrivate')) {\n        $query->whereRaw(\"1=1\");\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Serializer - Flarum API\nDESCRIPTION: Example of creating a serializer class for converting Eloquent models to JSON:API format, including basic attributes and relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\AbstractSerializer;\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nclass DiscussionSerializer extends AbstractSerializer\n{\n    protected $type = 'discussions';\n\n    protected function getDefaultAttributes($discussion)\n    {\n        return [\n            'title' => $discussion->title,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Mailgun Driver in PHP for Flarum\nDESCRIPTION: Example implementation of a Mailgun mail driver class that implements Flarum's DriverInterface. Includes methods for defining available settings, validation, sending capability check, and transport building.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/mail.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Mail\\DriverInterface;\nuse Illuminate\\Contracts\\Validation\\Factory;\nuse Illuminate\\Mail\\Transport\\MailgunTransport;\nuse Illuminate\\Support\\MessageBag;\nuse Swift_Transport;\n\nclass MailgunDriver implements DriverInterface\n{\n    public function availableSettings(): array\n    {\n        return [\n            'setting_one' => '',\n            'setting_two' => 'defaultValue',\n            'dropdown_setting' => [\n                'option_one_val' => 'Option One Display',\n                'option_two_val' => 'Option Two Display',\n            ],\n        ];\n    }\n\n    public function validate(SettingsRepositoryInterface $settings, Factory $validator): MessageBag\n    {\n        $validator->make($settings->all(), [\n            'setting_one' => 'required',\n            'setting_two' => 'nullable|integer',\n        ])->errors();\n    }\n\n    public function canSend(): bool\n    {\n        return true;\n    }\n\n    public function buildTransport(SettingsRepositoryInterface $settings): Swift_Transport\n    {\n        // Return a mail transport that implements Swift Transport\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Relationships in JavaScript\nDESCRIPTION: Demonstrates how to save relationship changes through the API by passing them in the relationships key. Shows examples for updating a has-many relationship with multiple related models.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nuser.save({\n  relationships: {\n    groups: [\n      store.getById('groups', 1),\n      store.getById('groups', 2)\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Post Type in PHP for Flarum\nDESCRIPTION: This code snippet demonstrates how to create a custom post type in Flarum by extending the AbstractPost class. It includes methods for saving and serializing the post data, as well as static methods for creating and rebuilding the post.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/post-types.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Post\\AbstractPost;\nuse Flarum\\Post\\MergeableInterface;\nuse Flarum\\Post\\Post;\n\nclass CustomPost extends AbstractPost implements MergeableInterface\n{\n    public static $type = 'custom';\n\n    protected $content;\n\n    public function saveContent($content)\n    {\n        $this->content = $content;\n    }\n\n    public static function reply($discussion, $content, $user)\n    {\n        $post = new static;\n        $post->saveContent($content);\n        $post->created_at = time();\n        $post->user_id = $user->id;\n\n        $discussion->mergePost($post);\n\n        return $post;\n    }\n\n    public static function buildReplies($discussion)\n    {\n        return static::reply($discussion, '', $discussion->user);\n    }\n\n    public function saveAfter(Post $previous = null)\n    {\n        // ...\n    }\n\n    public function mergeInto(Post $previous)\n    {\n        // ...\n    }\n\n    public static function getFormatter()\n    {\n        // ...\n    }\n\n    public function getFormattedContent()\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mailable Notifications in Flarum with PHP\nDESCRIPTION: This example shows how to create a notification that can be sent via email by implementing both BlueprintInterface and MailableInterface. The PostMentionedBlueprint from Flarum Mentions includes methods for email subject and view generation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Mentions\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\MailableInterface;\nuse Flarum\\Post\\Post;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass PostMentionedBlueprint implements BlueprintInterface, MailableInterface\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var Post\n     */\n    public $reply;\n\n    /**\n     * @param Post $post\n     * @param Post $reply\n     */\n    public function __construct(Post $post, Post $reply)\n    {\n        $this->post = $post;\n        $this->reply = $reply;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getFromUser()\n    {\n        return $this->reply->user;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getData()\n    {\n        return ['replyNumber' => (int) $this->reply->number];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailView()\n    {\n        return ['text' => 'flarum-mentions::emails.postMentioned'];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailSubject(TranslatorInterface $translator)\n    {\n        return $translator->trans('flarum-mentions.email.post_mentioned.subject', [\n            '{replier_display_name}' => $this->post->user->display_name,\n            '{title}' => $this->post->discussion->title\n        ]);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getType()\n    {\n        return 'postMentioned';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Getters and Setters in Flarum API\nDESCRIPTION: Demonstrates how to customize field value reading and writing using get and set methods\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\npublic function fields(): array\n{\n    return [\n        Schema\\Str::make('name')\n            ->get(fn (Label $label) => strtoupper($label->name))\n            ->set(function (Label $label, string $value, Context $context) {\n                $label->name = strtolower($value);\n            }),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UserSlugDriver in PHP for Flarum\nDESCRIPTION: This code snippet shows the UserSlugDriver class implementation, which handles slug generation and validation for user entities in Flarum. It includes methods for creating slugs from usernames and retrieving users by their slugs.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/slugging.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass UserSlugDriver implements SlugDriver\n{\n    public function toSlug(Sluggable $instance): string\n    {\n        if (! $instance instanceof User) {\n            throw new InvalidArgumentException(\n                get_class($this).' can only handle instances of '.User::class\n            );\n        }\n\n        return Str::slug($instance->username);\n    }\n\n    public function fromSlug(string $slug, Forum $forum): ?Sluggable\n    {\n        return User::where('username', $slug)->first();\n    }\n\n    public function validate(string $slug, Sluggable $instance): bool\n    {\n        return $instance instanceof User\n            && $slug === $this->toSlug($instance);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Console Command in PHP\nDESCRIPTION: Example of creating a custom console command class by extending AbstractCommand. The command requires configuration of name and description, with custom logic implemented in the fire() method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/console.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Console\\AbstractCommand;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass YourCommand extends AbstractCommand {\n  protected function configure()\n  {\n      $this\n          ->setName('YOUR COMMAND NAME')\n          ->setDescription('YOUR COMMAND DESCRIPTION');\n  }\n  protected function fire()\n  {\n    // Your logic here!\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Notification Type in PHP\nDESCRIPTION: Example of registering a notification type using Flarum's Notification extender. Configures the blueprint class, serializer, and default notification methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Api\\Serializer\\BasicDiscussionSerializer;\nuse Flarum\\Extend\nuse Flarum\\Subscriptions\\Notification\\NewPostBlueprint;\n\nreturn [\n    // Otros extensores\n    (new Extend\\Notification())\n        ->type(NewPostBlueprint::class, BasicDiscussionSerializer::class, ['alert', 'email']),\n    // Otros extensores\n];\n```\n\n----------------------------------------\n\nTITLE: Creating New Resources in JavaScript\nDESCRIPTION: JavaScript code showing how to create new resources by initializing a model instance with createRecord and then saving it to the API.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussion = app.store.createRecord('discussions');\n\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Registering a Notification Type in PHP for Flarum\nDESCRIPTION: This code snippet shows how to register a new notification type using the Notification extender in Flarum, specifying the blueprint class, serializer, and default notification methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Api\\Serializer\\BasicDiscussionSerializer;\nuse Flarum\\Extend\nuse Flarum\\Subscriptions\\Notification\\NewPostBlueprint;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->type(NewPostBlueprint::class, BasicDiscussionSerializer::class, ['alert', 'email']),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Post Component in Flarum\nDESCRIPTION: Example code for creating a custom frontend component to render a special post type. This snippet shows how to register a component for handling a specific post type using the extend method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/post-types.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\napp.initializers.add('your-extension', function() {\n  app.postComponents.specialPost = SpecialPostComponent;\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Discussion Page Resolver\nDESCRIPTION: An advanced example of a custom route resolver for the DiscussionPage that handles scrolling and key generation\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/frontend-pages.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport DefaultResolver from '../../common/resolvers/DefaultResolver';\n\nfunction getDiscussionIdFromSlug(slug: string | undefined) {\n  if (!slug) return;\n  return slug.split('-')[0];\n}\n\nexport default class DiscussionPageResolver extends DefaultResolver {\n  static scrollToPostNumber: number | null = null;\n\n  makeKey() {\n    const params = { ...m.route.param() };\n    if ('near' in params) {\n      delete params.near;\n    }\n    params.id = getDiscussionIdFromSlug(params.id);\n    return this.routeName.replace('.near', '') + JSON.stringify(params);\n  }\n\n  onmatch(args, requestedPath, route) {\n    if (route.includes('/d/:id') && getDiscussionIdFromSlug(args.id) === getDiscussionIdFromSlug(m.route.param('id'))) {\n      DiscussionPageResolver.scrollToPostNumber = parseInt(args.near);\n    }\n\n    return super.onmatch(args, requestedPath, route);\n  }\n\n  render(vnode) {\n    if (DiscussionPageResolver.scrollToPostNumber !== null) {\n      const number = DiscussionPageResolver.scrollToPostNumber;\n      setTimeout(() => app.current.get('stream').goToNumber(number));\n      DiscussionPageResolver.scrollToPostNumber = null;\n    }\n\n    return super.render(vnode);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Endpoints in Flarum Extensions\nDESCRIPTION: Examples of testing HTTP endpoints including user search and user creation, demonstrating request construction and response validation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    /**\n     * @test\n     */\n    public function can_search_users()\n    {\n        $response = $this->send(\n          $this->request('GET', '/api/users', ['authenticatedAs' => 1])\n               ->withQueryParams(['filter' => ['q' => 'john group:1'], 'sort' => 'username'])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    /**\n     * @test\n     */\n    public function can_create_user()\n    {\n        $response = $this->send(\n          $this->request(\n                'POST',\n                '/api/users',\n                [\n                    'authenticatedAs' => 1,\n                    'json' => [\n                        'data' => [\n                            'attributes' => [\n                                'username' => 'test',\n                                'password' => 'too-obscure',\n                                'email' => 'test@machine.local'\n                            ]\n                        ]\n                    ]\n                ]\n            )\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Data Preparation for Serialization in PHP\nDESCRIPTION: Uses the ApiController extender to add a prepareDataForSerialization callback. This allows modifying or loading additional related data before the API response is serialized.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillSerializeData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->prepareDataForSerialization(function ($controller, $data, $request, $document) {\n            $data->load('myCustomRelation');\n        }),\n]\n```\n\n----------------------------------------\n\nTITLE: Using View Extender for Laravel Blade Views\nDESCRIPTION: This PHP snippet shows the correct way to register Laravel Blade views in Flarum extensions using the `View` extender instead of the deprecated method. This avoids conflicts with other extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// extend.php\nuse Flarum\\Extend\\View;\n\nreturn [\n  (new View)->namespace(NAME, RELATIVE PATH);\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Included Relationships in PHP API Controller\nDESCRIPTION: Demonstrates how to specify default and optional relationships to include when listing, showing, or creating a resource in a Flarum API controller.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n    // The relationships that are included by default.\n    public $include = ['user'];\n\n    // Other relationships that are available to be included.\n    public $optionalInclude = ['discussions'];\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Cases for Flarum Extensions in PHP\nDESCRIPTION: Demonstrates how to set up a test case for a Flarum extension, including setting configurations, enabling extensions, preparing the database, and using extenders. It also shows how to use the RetrievesAuthorizedUsers trait for creating test users.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/testing.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    use RetrievesAuthorizedUsers;\n\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        $this->setting('my.custom.setting', true);\n\n        $this->extension('flarum-tags', 'my-cool-extension');\n\n        $this->prepareDatabase([\n            'users' => [\n                $this->normalUser()\n            ],\n            'discussions' => [\n                ['id' => 1, 'title' => 'some title', 'created_at' => Carbon::now(), 'last_posted_at' => Carbon::now(), 'user_id' => 1, 'first_post_id' => 1, 'comment_count' => 1]\n            ],\n            'posts' => [\n                ['id' => 1, 'number' => 1, 'discussion_id' => 1, 'created_at' => Carbon::now(), 'user_id' => 1, 'type' => 'comment', 'content' => '<t><p>something</p></t>']\n            ]\n        ]);\n\n        $this->extend((new CoolExtensionExtender)->doSomething('hello world'));\n    }\n\n    /**\n     * @test\n     */\n    public function some_phpunit_test_case()\n    {\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Flarum Extension\nDESCRIPTION: This code demonstrates how to add, remove, insert, or replace middleware in a Flarum extension's extend.php file. It shows examples for different frontend types (forum, admin, api) and various middleware operations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n// use Flarum\\Http\\Middleware\\CheckCsrfToken;\n\nreturn [\n    // Add middleware to forum frontend\n    (new Extend\\Middleware('forum'))->add(YourMiddleware::class),\n    // Admin frontend\n    (new Extend\\Middleware('admin'))->add(YourMiddleware::class),\n    // API frontend\n    (new Extend\\Middleware('api'))->add(YourMiddleware::class),\n\n    (new Extend\\Middleware('frontend'))\n        // remove a middleware (e.g. remove CSRF token check 😱)\n        ->remove(CheckCsrfToken::class)\n        // insert before another middleware (e.g. before a CSRF token check)\n        ->insertBefore(CheckCsrfToken::class, YourMiddleware::class)\n        // insert after another middleware (e.g. after a CSRF token check)\n        ->insertAfter(CheckCsrfToken::class, YourMiddleware::class)\n        // replace a middleware (e.g. replace the CSRF check with your own implementation)\n        ->replace(CheckCsrfToken::class, YourMiddleware::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Flarum CLI Policy Generation Command\nDESCRIPTION: Command line instruction to generate a new policy class using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/authorization.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend policy\n```\n\n----------------------------------------\n\nTITLE: Rendering Blade Templates in Flarum\nDESCRIPTION: Demonstrates how to render Blade templates to strings, including passing variables to the view. Shows both basic rendering and rendering with variables.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/views.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, $view is of type `Illuminate\\Contracts\\View\\Factory`\n$renderedString = $view->make('acme.hello-world::greeting')->render();\n\n// You can also pass variables to the view:\n$renderedString = $view->make('acme.hello-world::greeting', ['varName' => true])->render();\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Routes in PHP for Flarum Extension\nDESCRIPTION: This snippet demonstrates how to add a new route to the 'forum' collection in a Flarum extension using the Routes extender. It defines a GET route with a path, name, and controller.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\nuse Acme\\HelloWorld\\HelloWorldController;\n\nreturn [\n    (new Extend\\Routes('forum'))\n        ->get('/hello-world', 'acme.hello-world', HelloWorldController::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Rendering Blade Templates in Flarum\nDESCRIPTION: This snippet shows how to render Blade templates to strings using the view factory. It demonstrates rendering a simple view and passing variables to the view.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/views.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, $view is of type `Illuminate\\Contracts\\View\\Factory`\n$renderedString = $view->make('acme.hello-world::greeting')->render();\n\n// You can also pass variables to the view:\n$renderedString = $view->make('acme.hello-world::greeting', ['varName' => true])->render();\n```\n\n----------------------------------------\n\nTITLE: Implementing SubtreeRetainer in Mithril 2 Component (JavaScript)\nDESCRIPTION: Example of using SubtreeRetainer with onbeforeupdate in a Mithril 2 component to optimize redraws. The component only redraws when the showContent state changes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.showContent = false;\n\n    this.subtree = new SubtreeRetainer(\n      () => this.showContent,\n    )\n  }\n\n  onbeforeupdate() {\n    // If needsRebuild returns true, mithril will diff and redraw the vnode as usual. Otherwise, it will skip this redraw cycle.\n    // In this example, this means that this component and its children will only be redrawn when extra content is toggled.\n    return this.subtree.needsRebuild();\n  }\n\n  view(vnode) {\n    return <div>\n      <button onclick={() => this.showContent = !this.showContent}>Toggle Extra Content</button>\n      <p>Hello World!{this.showContent ? ' Extra Content!' : ''}</p>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sorting in PHP\nDESCRIPTION: Extracts and applies sorting criteria to database query\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$sort = $this->extractSort($request);\n$query = Tag::query();\n\nforeach ($sort as $field => $order) {\n    $query->orderBy(snake_case($field), $order);\n}\n\nreturn $query->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Fulltext Search Filter\nDESCRIPTION: Creates a fulltext filter for searching Acme models by name, demonstrating text-based search implementation.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/search.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace YourPackage\\Search;\n\nuse Flarum\\Search\\AbstractFulltextFilter;\nuse Flarum\\Search\\Database\\DatabaseSearchState;\nuse Flarum\\Search\\SearchState;\n\n/**\n * @extends AbstractFulltextFilter<DatabaseSearchState>\n */\nclass AcmeFulltextFilter extends AbstractFulltextFilter\n{\n    public function search(SearchState $state, string $value): void\n    {\n        $state->getQuery()\n            ->where('acmes.name', 'like', \"%$value%\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: API Serializer Extension Configuration in PHP\nDESCRIPTION: Demonstrates how to extend existing serializers with additional attributes and relationships using the ApiSerializer extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nreturn [\n    (new Extend\\ApiSerializer(UserSerializer::class))\n        // One attribute at a time\n        ->attribute('firstName', function ($serializer, $user, $attributes) {\n            return $user->first_name\n        })\n        // Multiple modifications at once, more complex logic\n        ->mutate(function($serializer, $user, $attributes) {\n            $attributes['someAttribute'] = $user->someAttribute;\n            if ($serializer->getActor()->can('administrate')) {\n                $attributes['someDate'] = $serializer->formatDate($user->some_date);\n            }\n\n            return $attributes;\n        })\n        // API relationships\n        ->hasOne('phone', PhoneSerializer::class)\n        ->hasMany('comments', CommentSerializer::class),\n]\n```\n\n----------------------------------------\n\nTITLE: Extending Custom Page Component in Flarum\nDESCRIPTION: This snippet provides an example of creating a custom page by extending the base `Page` component class from Flarum. It demonstrates how to define a view that returns HTML content. This structure enables consistent page management across Flarum interfaces.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Page from 'flarum/common/components/Page';\n\n\nexport default class CustomPage extends Page {\n  view() {\n    return <p>Hello!</p>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Relationships in Flarum\nDESCRIPTION: Shows how to define one-to-one and one-to-many relationships in API resources\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\npublic function fields(): array\n{\n    return [\n        Schema\\Relationship\\ToOne::make('user')\n            ->type('users'),\n        Schema\\Relationship\\ToMany::make('children')\n            ->type('labels'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining ExtensionData Methods for Flarum Extension\nDESCRIPTION: Demonstrates how to chain multiple ExtensionData methods to register settings and permissions for a Flarum extension in a concise manner.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/admin.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.extensionData\n    .for('acme-interstellar')\n    .registerSetting(...)\n    .registerSetting(...)\n    .registerPermission(...)\n    .registerPermission(...);\n```\n\n----------------------------------------\n\nTITLE: Creating a Search Mutator for Filtering Results\nDESCRIPTION: This code implements a search mutator that filters search results to only show users from the same country as the current user. It uses the SearchState to access and modify the underlying query builder.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Query\\QueryCriteria;\nuse Flarum\\Search\\SearchState;\n\nclass OnlySameCountrySearchMutator\n{\n    public function __invoke(SearchState $searchState, QueryCriteria $queryCriteria)\n    {\n        $searchState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Delete All Drafts Endpoint to DraftResource in PHP\nDESCRIPTION: This snippet demonstrates the addition of a custom endpoint for deleting all drafts of the current user to the DraftResource class. It includes the endpoint definition and action implementation.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/**  \n * @extends Resource\\AbstractDatabaseResource<Draft>  \n */  \nclass DraftResource extends Resource\\AbstractDatabaseResource  \n{  \n    // ... (previous code)\n  \n    public function endpoints(): array  \n    {  \n        return [  \n            // ... (previous endpoints)\n            Endpoint\\Endpoint::make('delete.all')\n                ->route('DELETE', '/all')\n                ->authenticated()\n                ->action(function (Context $context) {\n                    $context->getActor()->drafts()->delete();\n                })\n                ->response(fn () => new EmptyResponse(204)),\n            // ... (remaining endpoints)\n        ];  \n    }  \n  \n    // ... (remaining code)\n}\n```\n\n----------------------------------------\n\nTITLE: Pagination Configuration in Flarum API Controller\nDESCRIPTION: This snippet demonstrates how to configure pagination for listing resources in a Flarum API controller.  The `$limit` and `$maxLimit` properties are used to control the default and maximum number of records returned, respectively. The `extractLimit` and `extractOffset` methods can then be used to extract pagination parameters from the request.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n    // The number of records included by default.\n    public $limit = 20;\n\n    // The maximum number of records that can be requested.\n    public $maxLimit = 50;\n?>\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Models in JavaScript\nDESCRIPTION: JavaScript code demonstrating how to add attributes and relationships to existing model classes by modifying their prototype.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nDiscussion.prototype.user = Model.hasOne('user');\nDiscussion.prototype.posts = Model.hasMany('posts');\nDiscussion.prototype.slug = Model.attribute('slug');\n```\n\n----------------------------------------\n\nTITLE: Defining New Frontend Model in JavaScript\nDESCRIPTION: Illustrates how to define a new frontend model by extending the Model class and defining attributes and relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport Model from 'flarum/common/Model';\n\nexport default class Tag extends Model {\n  title = Model.attribute('title');\n  createdAt = Model.attribute('createdAt', Model.transformDate);\n  parent = Model.hasOne('parent');\n  discussions = Model.hasMany('discussions');\n}\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Requests in Flarum Integration Tests\nDESCRIPTION: This snippet shows how to send HTTP requests in Flarum integration tests, including GET and POST requests with authentication and JSON payloads.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    /**\n     * @test\n     */\n    public function can_search_users()\n    {\n        $response = $this->send(\n          $this->request('GET', '/api/users', ['authenticatedAs' => 1])\n               ->withQueryParams(['filter' => ['q' => 'john group:1'], 'sort' => 'username'])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    /**\n     * @test\n     */\n    public function can_create_user()\n    {\n        $response = $this->send(\n          $this->request(\n                'POST',\n                '/api/users',\n                [\n                    'authenticatedAs' => 1,\n                    'json' => [\n                        'data' => [\n                            'attributes' => [\n                                'username' => 'test',\n                                'password' => 'too-obscure',\n                                'email' => 'test@machine.local'\n                            ]\n                        ]\n                    ]\n                ]\n            )\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Visibility Scoping in PHP using Flarum's whereVisibleTo Method\nDESCRIPTION: Demonstrates how to use the whereVisibleTo method to filter database queries based on user permissions. This method can be applied to Eloquent models and queries, and supports custom ability checks.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\n// Construct and execute a query for all groups that a given user can see.\n$groups = Group::whereVisibleTo($actor)->get();\n\n// Apply visibility scoping to an existing query.\nMore eloquent filters can be added after this.\n$query\n  ->whereVisibleTo($actor)\n  ->whereRaw('1=1');\n\n// Apply visibility scoping with an ability\n$query\n  ->whereVisibleTo($actor, 'someAbility')\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listeners in PHP\nDESCRIPTION: Example of registering event listeners using the Event extender in Flarum. Shows both callback and class-based listeners.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->listen(Deleted::class, function($event) {\n            // do something here\n        })\n        ->listen(Deleted::class, PostDeletedListener::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Using whereVisibleTo Method for Model Visibility in PHP\nDESCRIPTION: Examples of how to use the whereVisibleTo method to apply visibility scoping to Eloquent models and queries. This method ensures users only see data they have permission to access.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\n// Construct and execute a query for all groups that a given user can see.\n$groups = Group::whereVisibleTo($actor)->get();\n\n// Apply visibility scoping to an existing query.\nMore eloquent filters can be added after this.\n$query\n  ->whereVisibleTo($actor)\n  ->whereRaw('1=1');\n\n// Apply visibility scoping with an ability\n$query\n  ->whereVisibleTo($actor, 'someAbility')\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Storage Drivers in PHP (Flarum)\nDESCRIPTION: Shows how to register a custom storage driver in Flarum using the Filesystem extender. This example registers an 'aws-with-cdn' driver with a custom driver class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/filesystem.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Filesystem)\n        ->driver('aws-with-cdn', AwsWithCdnDriver::class);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Show Resource Controller in Flarum\nDESCRIPTION: Shows how to create a controller that displays a single resource by extending AbstractShowController. The example gets a tag by ID from the query parameters.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractShowController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass ShowTagController extends AbstractShowController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        $id = Arr::get($request->getQueryParams(), 'id');\n\n        return Tag::findOrFail($id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Flarum Middleware Class\nDESCRIPTION: Shows how to create a basic middleware class implementing PSR-15 MiddlewareInterface. Demonstrates the process method structure for handling requests and responses.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass YourMiddleware implements MiddlewareInterface {\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // Logic to run before the request is processed and later middleware is called.\n        $response = $handler->handle($request);\n        // Logic to run after the request is processed.\n        return $response\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Flarum UI Components in JavaScript\nDESCRIPTION: This example shows how to extend a Flarum UI component (HeaderPrimary) to add a new item to the header. It uses the extend utility to modify the items method of the component.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom User Filter in PHP for Flarum\nDESCRIPTION: This code snippet demonstrates how to create a custom Filter class to filter users by country in Flarum. It implements the FilterInterface and defines the filter logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterInterface;\nuse Flarum\\Filter\\FilterState;\n\nclass CountryFilter implements FilterInterface\n{\n    public function getFilterKey(): string\n    {\n        return 'country';\n    }\n\n    public function filter(FilterState $filterState, string $filterValue, bool $negate)\n    {\n        $country = trim($filterValue, '\"');\n\n        $filterState->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Custom JSON API Response in Flarum Middleware\nDESCRIPTION: This code shows how to return a custom JSON API response from middleware in Flarum. It demonstrates creating an error response with a specific status code and error details.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\JsonApiResponse;\nuse Tobscure\\JsonApi\\Document;\nuse Tobscure\\JsonApi\\Exception\\Handler\\ResponseBag;\n\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    if ($userFoundInDatabase) {\n        $error = new ResponseBag('422', [\n            [\n                'status' => '422',\n                'code' => 'validation_error',\n                'source' => [\n                    'pointer' => '/data/attributes/email',\n                ],\n                'detail' => 'Yikes! Your email can\\'t be used.',\n            ],\n        ]);\n        $document = new Document();\n        $document->setErrors($error->getErrors());\n\n        return new JsonApiResponse($document, $error->getStatus());\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Integration Tests for Flarum Frontend Components\nDESCRIPTION: Shows how to write integration tests for a Flarum frontend component (Alert) using mithril-query. It covers testing component rendering, interaction, and custom assertions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport Alert from '../../../../src/common/components/Alert';\nimport m from 'mithril';\nimport mq from 'mithril-query';\nimport { jest } from '@jest/globals';\n\ndescribe('Alert displays as expected', () => {\n  it('should display alert messages with an icon', () => {\n    const alert = mq(m(Alert, { type: 'error' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toHaveElement('i.icon');\n  });\n\n  it('should display alert messages with a custom icon when using a title', () => {\n    const alert = mq(Alert, { type: 'error', icon: 'fas fa-users', title: 'Woops..' });\n    expect(alert).toContainRaw('Woops..');\n    expect(alert).toHaveElement('i.fas.fa-users');\n  });\n\n  it('should display alert messages with a title', () => {\n    const alert = mq(m(Alert, { type: 'error', title: 'Error Title' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toContainRaw('Error Title');\n    expect(alert).toHaveElement('.Alert-title');\n  });\n\n  it('should display alert messages with custom controls', () => {\n    const alert = mq(Alert, { type: 'error', controls: [m('button', { className: 'Button--test' }, 'Click me!')] });\n    expect(alert).toHaveElement('button.Button--test');\n  });\n});\n\ndescribe('Alert is dismissible', () => {\n  it('should show dismiss button', function () {\n    const alert = mq(m(Alert, { dismissible: true }, 'Shoot!'));\n    expect(alert).toHaveElement('button.Alert-dismiss');\n  });\n\n  it('should call ondismiss when dismiss button is clicked', function () {\n    const ondismiss = jest.fn();\n    const alert = mq(Alert, { dismissible: true, ondismiss });\n    alert.click('.Alert-dismiss');\n    expect(ondismiss).toHaveBeenCalled();\n  });\n\n  it('should not be dismissible if not chosen', function () {\n    const alert = mq(Alert, { type: 'error', dismissible: false });\n    expect(alert).not.toHaveElement('button.Alert-dismiss');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Sender in PHP\nDESCRIPTION: Backend implementation for sending notifications when posts are liked/unliked, including event listeners and notification syncing.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Listener;\n\nuse Flarum\\Event\\ConfigureNotificationTypes;\nuse Flarum\\Likes\\Event\\PostWasLiked;\nuse Flarum\\Likes\\Event\\PostWasUnliked;\nuse Flarum\\Likes\\Notification\\PostLikedBlueprint;\nuse Flarum\\Notification\\NotificationSyncer;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nclass SendNotificationWhenPostIsLiked\n{\n    protected $notifications;\n\n    public function __construct(NotificationSyncer $notifications)\n    {\n        $this->notifications = $notifications;\n    }\n\n    public function subscribe(Dispatcher $events)\n    {\n        $events->listen(PostWasLiked::class, [$this, 'whenPostWasLiked']);\n        $events->listen(PostWasUnliked::class, [$this, 'whenPostWasUnliked']);\n    }\n\n    public function whenPostWasLiked(PostWasLiked $event)\n    {\n        $this->syncNotification($event->post, $event->user, [$event->post->user]);\n    }\n\n    public function whenPostWasUnliked(PostWasUnliked $event)\n    {\n        $this->syncNotification($event->post, $event->user, []);\n    }\n\n    public function syncNotification(Post $post, User $user, array $recipients)\n    {\n        if ($post->user->id != $user->id) {\n            $this->notifications->sync(\n                new PostLikedBlueprint($post, $user),\n                $recipients\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Relationships in PHP with Callbacks\nDESCRIPTION: Shows how to add more complex relationships to models using the relationship method with a callback function. This allows for any valid Eloquent relationship including customizations like withTimestamps and where conditions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->relationship('mobile', 'App\\Phone', function ($user) {\n            // Return any Eloquent relationship here.\n            return $user->belongsToMany(Discussion::class, 'recipients')\n                ->withTimestamps()\n                ->wherePivot('removed_at', null);\n        })\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Filter and Mutator in Flarum\nDESCRIPTION: This code shows how to register a custom filter and filter mutator for the User model using Flarum's Filter extender. This allows the new filtering functionality to be used in API requests.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\Filter(UserFilterer::class))\n    ->addFilter(CountryFilter::class)\n    ->addFilterMutator(OnlySameCountryFilterMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: Implementing Discussion Visibility Scoper in PHP\nDESCRIPTION: A global scoper for the Discussion model that handles visibility based on tag permissions. It includes logic for handling various abilities and special cases for view permissions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibilityForAbility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     * @param string $ability\n     */\n    public function __invoke(User $actor, Builder $query, $ability)\n    {\n        // Automatic scoping should be applied to the global `view` ability,\n        // and to arbitrary abilities that aren't subqueries of `view`.\n        // For example, if we want to scope discussions where the user can\n        // edit posts, this should apply.\n        // But if we are expanding a restriction of `view` (for example,\n        // `viewPrivate`), we shouldn't apply this query again.\n        if (substr($ability, 0, 4) === 'view' && $ability !== 'view') {\n            return;\n        }\n\n        // Avoid an infinite recursive loop.\n        if (Str::endsWith($ability, 'InRestrictedTags')) {\n            return;\n        }\n\n        // `view` is a special case where the permission string is represented by `viewForum`.\n        $permission = $ability === 'view' ? 'viewForum' : $ability;\n\n        // Restrict discussions where users don't have necessary permissions in all tags.\n        // We use a double notIn instead of a doubleIn because the permission must be present in ALL tags,\n        // not just one.\n        $query->where(function ($query) use ($actor, $permission) {\n            $query\n                ->whereNotIn('discussions.id', function ($query) use ($actor, $permission) {\n                    return $query->select('discussion_id')\n                        ->from('discussion_tag')\n                        ->whereNotIn('tag_id', function ($query) use ($actor, $permission) {\n                            Tag::query()->setQuery($query->from('tags'))->whereHasPermission($actor, $permission)->select('tags.id');\n                        });\n                })\n                ->orWhere(function ($query) use ($actor, $permission) {\n                    // Allow extensions a way to override scoping for any given permission.\n                    $query->whereVisibleTo($actor, \"${permission}InRestrictedTags\");\n                });\n        });\n\n        // Hide discussions with no tags if the user doesn't have that global\n        // permission.\n        if (! $actor->hasPermission($permission)) {\n            $query->has('tags');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Mail Driver Using Flarum Extender in PHP\nDESCRIPTION: This code snippet shows how to register a custom mail driver in Flarum using the Mail extender in the extension's extend.php file. It demonstrates the use of the driver method to add the CustomDriver class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/mail.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Mail\\CustomDriver;\n\nreturn [\n  // Other extenders\n  (new Extend\\Mail())->driver(CustomDriver::class)\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Notification Driver in Flarum with PHP\nDESCRIPTION: This example demonstrates how to implement a custom notification driver by implementing NotificationDriverInterface. The PusherNotificationDriver from the Flarum Pusher extension shows how to use a queue for sending notifications.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Pusher;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\Driver\\NotificationDriverInterface;\nuse Illuminate\\Contracts\\Queue\\Queue;\n\nclass PusherNotificationDriver implements NotificationDriverInterface\n{\n    /**\n     * @var Queue\n     */\n    protected $queue;\n\n    public function __construct(Queue $queue)\n    {\n        $this->queue = $queue;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function send(BlueprintInterface $blueprint, array $users): void\n    {\n        // The `send` method is responsible for determining any notifications need to be sent.\n        // If not (for example, if there are no users to send to), there's no point in scheduling a job.\n        // Consigliamo ALTAMENTE che le notifiche vengano inviate tramite una coda per motivi di prestazioni.\n        if (count($users)) {\n            $this->queue->push(new SendPusherNotificationsJob($blueprint, $users));\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function registerType(string $blueprintClass, array $driversEnabledByDefault): void\n    {\n        // Questo metodo è generalmente utilizzato per registrare una preferenza utente per questa notifica.\n        // Nel caso di Pusher, non ce n'è bisogno.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MailgunDriver Class for Custom Mail Driver in PHP\nDESCRIPTION: This code snippet demonstrates the implementation of a MailgunDriver class that implements the DriverInterface. It includes methods for defining available settings, validating settings, checking if sending is possible, and building a transport.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/mail.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Mail\\DriverInterface;\nuse Illuminate\\Contracts\\Validation\\Factory;\nuse Illuminate\\Mail\\Transport\\MailgunTransport;\nuse Illuminate\\Support\\MessageBag;\nuse Swift_Transport;\n\nclass MailgunDriver implements DriverInterface\n{\n    public function availableSettings(): array\n    {\n        return [\n            'setting_one' => '',\n            'setting_two' => 'defaultValue',\n            'dropdown_setting' => [\n                'option_one_val' => 'Option One Display',\n                'option_two_val' => 'Option Two Display',\n            ],\n        ];\n    }\n\n    public function validate(SettingsRepositoryInterface $settings, Factory $validator): MessageBag\n    {\n        $validator->make($settings->all(), [\n            'setting_one' => 'required',\n            'setting_two' => 'nullable|integer',\n        ])->errors();\n    }\n\n    public function canSend(): bool\n    {\n        return true;\n    }\n\n    public function buildTransport(SettingsRepositoryInterface $settings): Swift_Transport\n    {\n        // Return a mail transport that implements Swift Transport\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mailable Notification Blueprint in Flarum\nDESCRIPTION: Example of a PostMentionedBlueprint class that implements both BlueprintInterface and MailableInterface. This enables email notifications with custom templates and subject lines for post mentions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Mentions\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\MailableInterface;\nuse Flarum\\Post\\Post;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass PostMentionedBlueprint implements BlueprintInterface, MailableInterface\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var Post\n     */\n    public $reply;\n\n    /**\n     * @param Post $post\n     * @param Post $reply\n     */\n    public function __construct(Post $post, Post $reply)\n    {\n        $this->post = $post;\n        $this->reply = $reply;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getFromUser()\n    {\n        return $this->reply->user;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getData()\n    {\n        return ['replyNumber' => (int) $this->reply->number];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailView()\n    {\n        return ['text' => 'flarum-mentions::emails.postMentioned'];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailSubject(TranslatorInterface $translator)\n    {\n        return $translator->trans('flarum-mentions.email.post_mentioned.subject', [\n            '{replier_display_name}' => $this->post->user->display_name,\n            '{title}' => $this->post->discussion->title\n        ]);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getType()\n    {\n        return 'postMentioned';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Model Attribute Types for PHPStan in Flarum\nDESCRIPTION: PHP code snippet demonstrating how to use attribute casting to explicitly define types for extended model attributes, improving PHPStan's type detection.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Model(User::class))\n    ->cast('is_cool', 'bool'),\n```\n\n----------------------------------------\n\nTITLE: Custom Post Visibility Scoper Class in PHP\nDESCRIPTION: Example implementation of a custom visibility scoper class that allows certain users to view private posts based on permissions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopePostVisibility\n{\n    public function __invoke(User $actor, $query)\n    {\n      if ($actor->can('posts.viewPrivate')) {\n        $query->whereRaw(\"1=1\");\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Event Listener with Flarum CLI\nDESCRIPTION: Example showing how to set up event listeners using Flarum's CLI to watch for post deletion events. Demonstrates both closure and class-based listener approaches with dependency injection.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->listen(Deleted::class, function($event) {\n          // haz algo aquí\n        })\n        ->listen(Deleted::class, PostDeletedListener::class)\n];\n\n\nclass PostDeletedListener\n{\n  protected $translator;\n\n  public function __construct(TranslatorInterface $translator)\n  {\n      $this->translator = $translator;\n  }\n\n  public function handle(Deleted $event)\n  {\n    // Su lógica aquí\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Flarum Services in PHP Unit Tests\nDESCRIPTION: Example of setting up PHP unit tests with mocked services such as SettingsRepositoryInterface. The code demonstrates how to create a test environment with controlled service responses without requiring a full application context.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n    public function setUp(): void\n    {\n        parent::setUp();\n        // example - if our setting needs settings, we can mock the settings repository\n        $settingsRepo = m::mock(SettingsRepositoryInterface::class);\n        // and then control specific return values for each setting key\n        $settingsRepo->shouldReceive('get')->with('some-plugin-key')->andReturn('some-value-useful-for-testing');\n        // construct your class under test, passing mocked services as needed\n        $this->serializer = new YourClassUnderTest($settingsRepo);\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Default Permissions in Flarum Migration\nDESCRIPTION: Using the Migration::addPermissions helper to specify default permissions in a Flarum migration.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\nreturn Migration::addPermissions([\n    'some.permission' => Group::MODERATOR_ID\n]);\n```\n\n----------------------------------------\n\nTITLE: Generating Event Listeners with Flarum CLI (PHP)\nDESCRIPTION: Demonstrates how to use the Flarum CLI to automatically generate event listeners, including a closure-based listener and a class-based listener.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->listen(Deleted::class, function($event) {\n          // haz algo aquí\n        })\n        ->listen(Deleted::class, PostDeletedListener::class)\n];\n\n\nclass PostDeletedListener\n{\n  protected $translator;\n\n  public function __construct(TranslatorInterface $translator)\n  {\n      $this->translator = $translator;\n  }\n\n  public function handle(Deleted $event)\n  {\n    // Su lógica aquí\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Discussions\nDESCRIPTION: Example of a GET request to retrieve a list of discussions from the `/api/discussions` endpoint. The JSON response includes discussion attributes, relationships, and related user/tag information.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"{\n  \\\"links\\\": {\n    \\\"first\\\": \\\"https://flarum.tld/api/discussions\\\",\n    \\\"next\\\": \\\"https://flarum.tld/api/discussions?page%5Boffset%5D=20\\\"\n  },\n  \\\"data\\\": [\n    {\n      \\\"type\\\": \\\"discussions\\\",\n      \\\"id\\\": \\\"234\\\",\n      \\\"attributes\\\": {\n        \\\"title\\\": \\\"Lorem Ipsum\\\",\n        \\\"slug\\\": \\\"234-lorem-ipsum\\\",\n        \\\"commentCount\\\": 10,\n        \\\"participantCount\\\": 3,\n        \\\"createdAt\\\": \\\"2022-01-01T10:20:30+00:00\\\",\n        \\\"lastPostedAt\\\": \\\"2022-01-05T10:20:30+00:00\\\",\n        \\\"lastPostNumber\\\": 10,\n        \\\"canReply\\\": true,\n        \\\"canRename\\\": true,\n        \\\"canDelete\\\": true,\n        \\\"canHide\\\": true,\n        \\\"isHidden\\\": true,\n        \\\"hiddenAt\\\": \\\"2022-01-06T10:20:30+00:00\\\",\n        \\\"lastReadAt\\\": \\\"2022-01-02T10:20:30+00:00\\\",\n        \\\"lastReadPostNumber\\\": 2,\n        \\\"isApproved\\\": true,\n        \\\"canTag\\\": true,\n        \\\"isLocked\\\": false,\n        \\\"canLock\\\": true,\n        \\\"isSticky\\\": false,\n        \\\"canSticky\\\": true,\n        \\\"canMerge\\\": true,\n        \\\"subscription\\\": null\n      },\n      \\\"relationships\\\": {\n        \\\"user\\\": {\n          \\\"data\\\": {\n            \\\"type\\\": \\\"users\\\",\n            \\\"id\\\": \\\"1\\\"\n          }\n        },\n        \\\"lastPostedUser\\\": {\n          \\\"data\\\": {\n            \\\"type\\\": \\\"users\\\",\n            \\\"id\\\": \\\"64\\\"\n          }\n        },\n        \\\"tags\\\": {\n          \\\"data\\\": [\n            {\n              \\\"type\\\": \\\"tags\\\",\n              \\\"id\\\": \\\"3\\\"\n            }\n          ]\n        },\n        \\\"firstPost\\\": {\n          \\\"data\\\": {\n            \\\"type\\\": \\\"posts\\\",\n            \\\"id\\\": \\\"668\\\"\n          }\n        }\n      }\n    },\n    {\n      \\\"type\\\": \\\"discussions\\\",\n      \\\"id\\\": \\\"234\\\",\n      \\\"attributes\\\": {\n        // [...]\n      },\n      \\\"relationships\\\": {\n        // [...]\n      }\n    }\n    // [...] còn nhiều\n  ],\n  \\\"included\\\": [\n    {\n      \\\"type\\\": \\\"users\\\",\n      \\\"id\\\": \\\"1\\\",\n      \\\"attributes\\\": {\n        \\\"username\\\": \\\"Admin\\\",\n        \\\"displayName\\\": \\\"Admin\\\",\n        \\\"avatarUrl\\\": null,\n        \\\"slug\\\": \\\"1\\\"\n      }\n    },\n    {\n      \\\"type\\\": \\\"users\\\",\n      \\\"id\\\": \\\"64\\\",\n      \\\"attributes\\\": {\n        \\\"username\\\": \\\"Flarum\\\",\n        \\\"displayName\\\": \\\"Flarum\\\",\n        \\\"avatarUrl\\\": \\\"https://flarum.tld/assets/avatars/Z4hEncw0ndVqZ8be.png\\\",\n        \\\"slug\\\": \\\"64\\\"\n      }\n    },\n    {\n      \\\"type\\\": \\\"tags\\\",\n      \\\"id\\\": \\\"3\\\",\n      \\\"attributes\\\": {\n        \\\"name\\\": \\\"Welcome\\\",\n        \\\"description\\\": \\\"Post interesting things here\\\",\n        \\\"slug\\\": \\\"welcome\\\",\n        \\\"color\\\": \\\"#888\\\",\n        \\\"backgroundUrl\\\": null,\n        \\\"backgroundMode\\\": null,\n        \\\"icon\\\": \\\"fas fa-bullhorn\\\",\n        \\\"discussionCount\\\": 30,\n        \\\"position\\\": 1,\n        \\\"defaultSort\\\": null,\n        \\\"isChild\\\": false,\n        \\\"isHidden\\\": false,\n        \\\"lastPostedAt\\\": \\\"2022-01-05T10:20:30+00:00\\\",\n        \\\"canStartDiscussion\\\": true,\n        \\\"canAddToDiscussion\\\": true,\n        \\\"isRestricted\\\": false\n      }\n    },\n    {\n      \\\"type\\\": \\\"posts\\\",\n      \\\"id\\\": \\\"668\\\",\n      \\\"attributes\\\": {\n        \\\"number\\\": 1,\n        \\\"createdAt\\\": \\\"2022-01-01T10:20:30+00:00\\\",\n        \\\"contentType\\\": \\\"comment\\\",\n        \\\"contentHtml\\\": \\\"<p>Hello World</p>\\\"\n      }\n    }\n    // [...] còn nhiều cuộc thảo luận khác\n  ]\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Frontend Routes in JavaScript\nDESCRIPTION: Example of registering frontend routes using Flarum's JavaScript extender system with a component for rendering.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Routes()\n    .add('acme.users', '/users', <UsersPage />),\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing DefaultSlugDriver in PHP for Flarum\nDESCRIPTION: This code snippet shows the implementation of the DefaultSlugDriver class, which provides a basic slug generation mechanism using the Str::slug() method. It also includes methods for validating slugs and retrieving instances by their slugs.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/slugging.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass DefaultSlugDriver implements SlugDriver\n{\n    public function toSlug(Sluggable $instance): string\n    {\n        return Str::slug($instance->getSlugger());\n    }\n\n    public function fromSlug(string $slug, Forum $forum): ?Sluggable\n    {\n        return null;\n    }\n\n    public function validate(string $slug, Sluggable $instance): bool\n    {\n        return $slug === $this->toSlug($instance);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using whereVisibleTo Method in PHP\nDESCRIPTION: Examples of how to use the whereVisibleTo method to filter database queries based on user permissions. Shows different ways to apply visibility scoping to Eloquent queries.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\n// Construct and execute a query for all groups that a given user can see.\n$groups = Group::whereVisibleTo($actor)->get();\n\n// Apply visibility scoping to an existing query.\nMore eloquent filters can be added after this.\n$query\n  ->whereVisibleTo($actor)\n  ->whereRaw('1=1');\n\n// Apply visibility scoping with an ability\n$query\n  ->whereVisibleTo($actor, 'someAbility')\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Translation Example\nDESCRIPTION: Shows the basic structure of a translation key-value pair in a YAML locale file\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/i18n.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsample_key: This is a sample translation.\n```\n\n----------------------------------------\n\nTITLE: Implementing Translation Key References in YAML\nDESCRIPTION: Demonstrates how to reuse translations across different contexts using Flarum's key reference system in the core namespace. Shows proper organization using the ref namespace for reusable translations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => core.ref.log_in\n\n    log_in:\n      submit_button: => core.ref.log_in\n      title: => core.ref.log_in\n\n  ref:\n    log_in: Log In\n```\n\n----------------------------------------\n\nTITLE: Registering a New Model with the Store in JavaScript\nDESCRIPTION: Shows how to register a custom model class with Flarum's store. This makes the store aware of the model so it can properly instantiate and manage resources of that type.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_10\n\nLANGUAGE: js\nCODE:\n```\napp.store.models.tags = Tag;\n```\n\n----------------------------------------\n\nTITLE: Custom Discussion Page Resolver Implementation\nDESCRIPTION: A complex example of a custom route resolver for discussion pages. This resolver maintains state between posts in the same discussion and handles automatic scrolling to specific posts when navigating within a discussion.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/frontend-pages.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport DefaultResolver from '../../common/resolvers/DefaultResolver';\n\n/**\n * This isn't exported as it is a temporary measure.\n * A more robust system will be implemented alongside UTF-8 support in beta 15.\n */\nfunction getDiscussionIdFromSlug(slug: string | undefined) {\n  if (!slug) return;\n  return slug.split('-')[0];\n}\n\n/**\n * A custom route resolver for DiscussionPage that generates the same key to all posts\n * on the same discussion. It triggers a scroll when going from one post to another\n * in the same discussion.\n */\nexport default class DiscussionPageResolver extends DefaultResolver {\n  static scrollToPostNumber: number | null = null;\n\n  makeKey() {\n    const params = { ...m.route.param() };\n    if ('near' in params) {\n      delete params.near;\n    }\n    params.id = getDiscussionIdFromSlug(params.id);\n    return this.routeName.replace('.near', '') + JSON.stringify(params);\n  }\n\n  onmatch(args, requestedPath, route) {\n    if (route.includes('/d/:id') && getDiscussionIdFromSlug(args.id) === getDiscussionIdFromSlug(m.route.param('id'))) {\n      DiscussionPageResolver.scrollToPostNumber = parseInt(args.near);\n    }\n\n    return super.onmatch(args, requestedPath, route);\n  }\n\n  render(vnode) {\n    if (DiscussionPageResolver.scrollToPostNumber !== null) {\n      const number = DiscussionPageResolver.scrollToPostNumber;\n      // Scroll after a timeout to avoid clashes with the render.\n      setTimeout(() => app.current.get('stream').goToNumber(number));\n      DiscussionPageResolver.scrollToPostNumber = null;\n    }\n\n    return super.render(vnode);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced DraftResource Class with Create Endpoint for Flarum 2.0\nDESCRIPTION: The enhanced DraftResource class that implements the Create endpoint with proper permissions and field definitions. This class handles all the logic previously distributed across multiple controllers and handlers in Flarum 1.x.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**  \n * @extends Resource\\AbstractDatabaseResource<Draft>  \n */  \nclass DraftResource extends Resource\\AbstractDatabaseResource  \n{  \n    public function type(): string  \n    {\n        return 'drafts';\n    }\n  \n    public function model(): string  \n    {\n        return Draft::class;  \n    }\n  \n    public function endpoints(): array  \n    {  \n        return [  \n            // insert-start\n            Endpoint\\Create::make()\n                ->authenticated()\n                ->can('user.saveDrafts')\n                ->defaultInclude(['user']),\n            // insert-end\n        ];  \n    }  \n  \n    public function fields(): array  \n    {  \n        return [\n            Schema\\Str::make('title')\n                // insert-start\n                ->nullable()\n                ->writableOnCreate(),\n                // insert-end  \n            Schema\\Str::make('content')\n                // insert-start\n                ->nullable()\n                ->writableOnCreate(),\n                // insert-end\n            Schema\\Arr::make('extra')\n                // insert-start\n                ->nullable()\n                ->writableOnCreate(),\n                // insert-end \n            Schema\\Str::make('scheduledValidationError'),\n            Schema\\DateTime::make('scheduledFor')\n                // insert-start\n                ->nullable()\n                ->writable(function (Draft $draft, Context $context) {\n                    return $context->creating(self::class) && $context->getActor()->can('user.scheduleDrafts');\n                }),\n                // insert-end  \n            Schema\\DateTime::make('updatedAt'),\n            // insert-start\n            Schema\\Boolean::make('clearValidationError')\n                ->writableOnCreate()\n                ->set(function (Draft $draft, bool $value) {\n                    if ($value) {\n                        $draft->scheduled_validation_error = '';\n                    }\n                }),\n            // insert-end\n  \n            Schema\\Relationship\\ToOne::make('user')  \n                ->includable()  \n                ->inverse('drafts')  \n                ->type('users'),\n        ];  \n    } \n\n    // insert-start\n    public function creating(object $model, OriginalContext $context): ?object\n    {\n        $model->user_id = $context->getActor()->id;\n        $model->ip_address = $context->request->getAttribute('ipAddress');\n        $model->updated_at = Carbon::now();\n\n        return $model;\n    }\n    // insert-end\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships in PHP Serializer for Flarum API\nDESCRIPTION: Illustrates how to specify relationships for a resource in a Flarum API serializer by creating a method that returns a call to hasOne or hasMany.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n    protected function user($discussion)\n    {\n        return $this->hasOne($discussion, UserSerializer::class);\n    }\n```\n\n----------------------------------------\n\nTITLE: Modifying Response After Handling in Flarum Middleware\nDESCRIPTION: This snippet demonstrates how to modify the response after the initial request has been handled in Flarum middleware. It shows adding a header to the response.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/middleware.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    $response = $handler->handle($request);\n\n    // Your logic...\n    $response = $response->withHeader('Content-Type', 'application/json');\n\n    return $response;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Response After Handling in Flarum Middleware\nDESCRIPTION: This snippet demonstrates how to modify the response after the initial request has been handled in Flarum middleware. It shows adding a header to the response.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    $response = $handler->handle($request);\n\n    // Your logic...\n    $response = $response->withHeader('Content-Type', 'application/json');\n\n    return $response;\n}\n```\n\n----------------------------------------\n\nTITLE: Eager Loading API Relations in PHP\nDESCRIPTION: Example of using the ApiController extender to eager load tag relations for discussions. This helps solve N+1 query issues in Flarum API endpoints.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    (new Extend\\ApiController(FlarumController\\ListDiscussionsController::class))\n        ->addInclude(['tags', 'tags.state', 'tags.parent'])\n        ->load('tags'),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Frontend Routes in JavaScript for Flarum\nDESCRIPTION: Demonstration of how to define a frontend route using the Routes extender in JavaScript for a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Routes()\n    .add('acme.users', '/users', <UsersPage />),\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Discussion Visibility Scoper in PHP\nDESCRIPTION: An example scoper for handling private discussion visibility using orWhere clauses to extend visibility conditions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace ACME\\YourExtension\\Access;\n\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     */\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->orWhere(function($query) use ($actor) {\n            $query->where('some_column', true);\n            $query->where('some_other_column', false);\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a List Resources Controller in Flarum\nDESCRIPTION: Shows how to create a controller that lists resources by extending AbstractListController. The example demonstrates the minimal implementation with a serializer specification and data method that returns all Tag models.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractListController;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass ListTagsController extends AbstractListController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        return Tag::all();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Discussions Response in Flarum API\nDESCRIPTION: Example response from a GET request to the /api/discussions endpoint. Shows the JSON structure containing discussion data, pagination links, and included relationships like users, tags, and posts.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/rest-api.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"links\": {\n    \"first\": \"https://flarum.tld/api/discussions\",\n    \"next\": \"https://flarum.tld/api/discussions?page%5Boffset%5D=20\"\n  },\n  \"data\": [\n    {\n      \"type\": \"discussions\",\n      \"id\": \"234\",\n      \"attributes\": {\n        \"title\": \"Lorem Ipsum\",\n        \"slug\": \"234-lorem-ipsum\",\n        \"commentCount\": 10,\n        \"participantCount\": 3,\n        \"createdAt\": \"2022-01-01T10:20:30+00:00\",\n        \"lastPostedAt\": \"2022-01-05T10:20:30+00:00\",\n        \"lastPostNumber\": 10,\n        \"canReply\": true,\n        \"canRename\": true,\n        \"canDelete\": true,\n        \"canHide\": true,\n        \"isHidden\": true,\n        \"hiddenAt\": \"2022-01-06T10:20:30+00:00\",\n        \"lastReadAt\": \"2022-01-02T10:20:30+00:00\",\n        \"lastReadPostNumber\": 2,\n        \"isApproved\": true,\n        \"canTag\": true,\n        \"isLocked\": false,\n        \"canLock\": true,\n        \"isSticky\": false,\n        \"canSticky\": true,\n        \"canMerge\": true,\n        \"subscription\": null\n      },\n      \"relationships\": {\n        \"user\": {\n          \"data\": {\n            \"type\": \"users\",\n            \"id\": \"1\"\n          }\n        },\n        \"lastPostedUser\": {\n          \"data\": {\n            \"type\": \"users\",\n            \"id\": \"64\"\n          }\n        },\n        \"tags\": {\n          \"data\": [\n            {\n              \"type\": \"tags\",\n              \"id\": \"3\"\n            }\n          ]\n        },\n        \"firstPost\": {\n          \"data\": {\n            \"type\": \"posts\",\n            \"id\": \"668\"\n          }\n        }\n      }\n    },\n    {\n      \"type\": \"discussions\",\n      \"id\": \"234\",\n      \"attributes\": {\n        // [...]\n      },\n      \"relationships\": {\n        // [...]\n      }\n    },\n    // [...] more discussions\n  ],\n  \"included\": [\n    {\n      \"type\": \"users\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"username\": \"Admin\",\n        \"displayName\": \"Admin\",\n        \"avatarUrl\": null,\n        \"slug\": \"1\"\n      }\n    },\n    {\n      \"type\": \"users\",\n      \"id\": \"64\",\n      \"attributes\": {\n        \"username\": \"Flarum\",\n        \"displayName\": \"Flarum\",\n        \"avatarUrl\": \"https://flarum.tld/assets/avatars/Z4hEncw0ndVqZ8be.png\",\n        \"slug\": \"64\"\n      }\n    },\n    {\n      \"type\": \"tags\",\n      \"id\": \"3\",\n      \"attributes\": {\n        \"name\": \"Welcome\",\n        \"description\": \"Post interesting things here\",\n        \"slug\": \"welcome\",\n        \"color\": \"#888\",\n        \"backgroundUrl\": null,\n        \"backgroundMode\": null,\n        \"icon\": \"fas fa-bullhorn\",\n        \"discussionCount\": 30,\n        \"position\": 1,\n        \"defaultSort\": null,\n        \"isChild\": false,\n        \"isHidden\": false,\n        \"lastPostedAt\": \"2022-01-05T10:20:30+00:00\",\n        \"canStartDiscussion\": true,\n        \"canAddToDiscussion\": true,\n        \"isRestricted\": false\n      }\n    },\n    {\n      \"type\": \"posts\",\n      \"id\": \"668\",\n      \"attributes\": {\n        \"number\": 1,\n        \"createdAt\": \"2022-01-01T10:20:30+00:00\",\n        \"contentType\": \"comment\",\n        \"contentHtml\": \"<p>Hello World</p>\"\n      }\n    },\n    // [...] more includes for the other discussions\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Console Commands in Flarum\nDESCRIPTION: This snippet shows how to register a custom console command in a Flarum extension's extend.php file using the Console extender. The command class is passed to the command method of the extender.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/console.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Console\\CustomCommand;\n\nreturn [\n  // Other extenders\n  (new Extend\\Console())->command(CustomCommand::class)\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Header Link with Mithril\nDESCRIPTION: Example of extending Flarum's UI by adding a Google link to the header using Mithril components and the extend utility.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/frontend.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n});\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events in Flarum with PHP\nDESCRIPTION: This snippet explains how to dispatch events in Flarum by injecting the Dispatcher interface into a class. It showcases how events can be easily dispatched to notify various components about state changes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Post\\Event\\Deleted;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\n\nclass SomeClass\n{\n    /**\n      * @var Dispatcher\n      */\n    protected $events;\n\n    /**\n      * @param Dispatcher $events\n      */\n    public function __construct(Dispatcher $events)\n    {\n        $this->events = $events;\n    }\n\n    public function someMethod()\n    {\n        // Logic\n        $this->events->dispatch(\n            new Deleted($somePost, $someActor)\n        );\n        // More Logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Relationships in PHP API Controller\nDESCRIPTION: Shows how to extract and eager-load included relationships on models before serialization in a Flarum API controller.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$relations = $this->extractInclude($request);\n\nreturn Tag::all()->load($relations);\n```\n\n----------------------------------------\n\nTITLE: Basic Monkey Patching Example in Flarum Frontend\nDESCRIPTION: Demonstrates basic monkey patching by adding a global attribute and replacing a component's view method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// This adds an attribute to the `app` global.\napp.googleUrl = \"https://google.com\";\n\n// This replaces the output of the discussion page with \"Hello World\"\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\n\nDiscussionPage.prototype.view = function() {\n  return <p>Hello World</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Mail Driver with Flarum Extender in PHP\nDESCRIPTION: This code snippet shows how to register a custom mail driver using the Flarum\\Extend\\Mail extender in the extension's extend.php file. It demonstrates the use of the driver method to add the custom driver class.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/mail.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Mail\\CustomDriver;\n\nreturn [\n  // Other extenders\n  (new Extend\\Mail())->driver(CustomDriver::class)\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Adjusting API Data Before Serialization in PHP\nDESCRIPTION: Demonstrates how to modify API data before serialization using the ApiController extender's prepareDataForSerialization method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillSerializeData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->prepareDataForSerialization(function ($controller, $data, $request, $document) {\n            $data->load('myCustomRelation');\n        }),\n]\n```\n\n----------------------------------------\n\nTITLE: Extracting Pagination Information from Request in Flarum\nDESCRIPTION: This code demonstrates how to extract pagination information (`limit` and `offset`) from the HTTP request in a Flarum API controller. These extracted values are then used to construct a paginated query to retrieve a subset of records.  The `skip` and `take` methods are used to implement the offset and limit, respectively.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$limit = $this->extractLimit($request);\n$offset = $this->extractOffset($request);\n\nreturn Tag::skip($offset)->take($limit);\n?>\n```\n\n----------------------------------------\n\nTITLE: Extracting and Loading API Relationships in PHP for Flarum\nDESCRIPTION: Shows how to extract included relationships from a request and eager-load them on models before serialization in Flarum API controllers.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$relations = $this->extractInclude($request);\n\nreturn Tag::all()->load($relations);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Create API Controller in PHP\nDESCRIPTION: This code shows how to create a controller for creating a new resource by extending AbstractCreateController. It includes the basic structure and the data method implementation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractCreateController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass CreateTagController extends AbstractCreateController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        $attributes = Arr::get($request->getParsedBody(), 'data.attributes');\n\n        return Tag::create([\n            'name' => Arr::get($attributes, 'name')\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Extender Implementation in PHP\nDESCRIPTION: Example of using the new eager loading extender to solve N+1 query issues in Flarum API endpoints. This code demonstrates how to eager load tag relationships for discussion listings to improve performance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    (new Extend\\ApiController(FlarumController\\ListDiscussionsController::class))\n        ->addInclude(['tags', 'tags.state', 'tags.parent'])\n        ->load('tags'),\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Migration Structure in Flarum\nDESCRIPTION: Template for creating a database migration in Flarum with up and down functions using Laravel's schema builder.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/models.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Schema\\Builder;\n\nreturn [\n    'up' => function (Builder $schema) {\n        // up migration\n    },\n    'down' => function (Builder $schema) {\n        // down migration\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Filter Mutator in PHP\nDESCRIPTION: Implementation of a filter mutator that modifies any user filter query to only show users from the same country as the current user. Shows how to create a mutator class that receives FilterState and QueryCriteria.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterState;\nuse Flarum\\Query\\QueryCriteria;\n\nclass OnlySameCountryFilterMutator\n{\n    public function __invoke(FilterState $filterState, QueryCriteria $queryCriteria)\n    {\n        $filterState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Filter for User Country in PHP\nDESCRIPTION: This code snippet demonstrates how to create a custom Filter class to filter users by country in Flarum. It implements the FilterInterface and defines the filter key and logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterInterface;\nuse Flarum\\Filter\\FilterState;\n\nclass CountryFilter implements FilterInterface\n{\n    public function getFilterKey(): string\n    {\n        return 'country';\n    }\n\n    public function filter(FilterState $filterState, string $filterValue, bool $negate)\n    {\n        $country = trim($filterValue, '\"');\n\n        $filterState->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constraining Visibility with Private Posts in Flarum (PHP)\nDESCRIPTION: This snippet demonstrates how to constrain visibility to ensure that private posts are not visible to users by default. It includes a mechanism for extensions to override this behavior and include private posts under certain conditions. This approach uses a nested query with `orWhere` to allow for exceptions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n```php\n// Here, we want to ensure that private posts aren't visible to users by default.\n// The simplest way to do this would be:\n$query->where('posts.is_private', false);\n\n// However, we recognize that some extensions might have valid use cases for showing private posts.\n// So instead, we include all posts that aren't private, AND all private posts desired by extensions\n$query->where(function ($query) use ($actor) {\n    $query->where('posts.is_private', false)\n        ->orWhere(function ($query) use ($actor) {\n            $query->whereVisibleTo($actor, 'viewPrivate');\n        });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Filesystem Disk in PHP\nDESCRIPTION: Example of declaring a new filesystem disk using Flarum's Filesystem extender. Shows how to configure root path and URL for local filesystem storage.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/filesystem.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Filesystem)\n        ->disk('flarum-uploads', function (Paths $paths, UrlGenerator $url) {\n            return [\n                'root'   => \"$paths->public/assets/uploads\",\n                'url'    => $url->to('forum')->path('assets/uploads')\n            ];\n        });\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Event Class in Flarum\nDESCRIPTION: This code defines a custom event class (Deleted) in Flarum. It's a simple class that wraps data related to the event, such as the deleted post and the user who performed the deletion. Public properties are used to expose the event data.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n * \n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Post\\Event;\n\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass Deleted\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var User\n     */\n    public $actor;\n\n    /**\n     * @param Post $post\n     * @param User $user\n     */\n    public function __construct(Post $post, User $actor = null)\n    {\n        $this->post = $post;\n        $this->actor = $actor;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Package for Flarum Extension in JSON\nDESCRIPTION: This JSON configuration for composer.json defines the package details, dependencies, autoloading, and Flarum-specific metadata for a 'Hello World' extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/start.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"acme/flarum-hello-world\",\n    \"description\": \"Say hello to the world!\",\n    \"type\": \"flarum-extension\",\n    \"require\": {\n        \"flarum/core\": \"^1.0.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\"Acme\\\\HelloWorld\\\\\": \"src/\"}\n    },\n    \"extra\": {\n        \"flarum-extension\": {\n            \"title\": \"Hello World\",\n            \"icon\": {\n                \"name\": \"fas fa-smile\",\n                \"backgroundColor\": \"#238c59\",\n                \"color\": \"#fff\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Flarum Component\nDESCRIPTION: JavaScript code showing how to create a custom component in Flarum. This example implements a simple counter with a button to increment it.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend.md#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/common/Component';\n\nclass Counter extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.count = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        Count: {this.count}\n        <button onclick={e => this.count++}>\n          {this.attrs.buttonLabel}\n        </button>\n      </div>\n    );\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    // We aren't actually doing anything here, but this would\n    // be a good place to attach event handlers, initialize libraries\n    // like sortable, or make other DOM modifications.\n    $element = this.$();\n    $button = this.$('button');\n  }\n}\n\nm.mount(document.body, <MyComponent buttonLabel=\"Increment\" />);\n```\n\n----------------------------------------\n\nTITLE: Adding and Customizing Middleware in Flarum's extend.php\nDESCRIPTION: This code snippet shows how to add, remove, insert, and replace middleware in Flarum's extend.php file. It demonstrates adding middleware to different frontends and manipulating the middleware stack.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n// use Flarum\\Http\\Middleware\\CheckCsrfToken;\n\nreturn [\n    // Add middleware to forum frontend\n    (new Extend\\Middleware('forum'))->add(YourMiddleware::class),\n    // Admin frontend\n    (new Extend\\Middleware('admin'))->add(YourMiddleware::class),\n    // API frontend\n    (new Extend\\Middleware('api'))->add(YourMiddleware::class),\n\n    (new Extend\\Middleware('frontend'))\n        // remove a middleware (e.g. remove CSRF token check 😱)\n        ->remove(CheckCsrfToken::class)\n        // insert before another middleware (e.g. before a CSRF token check)\n        ->insertBefore(CheckCsrfToken::class, YourMiddleware::class)\n        // insert after another middleware (e.g. after a CSRF token check)\n        ->insertAfter(CheckCsrfToken::class, YourMiddleware::class)\n        // replace a middleware (e.g. replace the CSRF check with your own implementation)\n        ->replace(CheckCsrfToken::class, YourMiddleware::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Listening to Events with Event Extender in PHP\nDESCRIPTION: Demonstrates how to use the Event extender to attach listeners to Flarum events. It shows both callback and class-based listener approaches.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->listen(Deleted::class, function($event) {\n            // do something here\n        })\n        ->listen(Deleted::class, PostDeletedListener::class)\n];\n```\n\nLANGUAGE: php\nCODE:\n```\nclass PostDeletedListener\n{\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    public function handle(Deleted $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mailable Notification Blueprint in PHP\nDESCRIPTION: Example of a notification blueprint that implements both BlueprintInterface and MailableInterface for email notifications, including email view and subject generation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Mentions\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\MailableInterface;\nuse Flarum\\Post\\Post;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass PostMentionedBlueprint implements BlueprintInterface, MailableInterface\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var Post\n     */\n    public $reply;\n\n    /**\n     * @param Post $post\n     * @param Post $reply\n     */\n    public function __construct(Post $post, Post $reply)\n    {\n        $this->post = $post;\n        $this->reply = $reply;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getFromUser()\n    {\n        return $this->reply->user;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getData()\n    {\n        return ['replyNumber' => (int) $this->reply->number];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailView()\n    {\n        return ['text' => 'flarum-mentions::emails.postMentioned'];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailSubject(TranslatorInterface $translator)\n    {\n        return $translator->trans('flarum-mentions.email.post_mentioned.subject', [\n            '{replier_display_name}' => $this->post->user->display_name,\n            '{title}' => $this->post->discussion->title\n        ]);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getType()\n    {\n        return 'postMentioned';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Subscribers in PHP\nDESCRIPTION: Shows how to create and register an event subscriber that listens to multiple events. This example subscribes to Post Deleted and Saving events.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Flarum\\Post\\Event\\Saving;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->subscribe(PostEventSubscriber::class),\n];\n```\n\nLANGUAGE: php\nCODE:\n```\nclass PostEventSubscriber\n{\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    public function subscribe($events)\n    {\n        $events->listen(Deleted::class, [$this, 'handleDeleted']);\n        $events->listen(Saving::class, [$this, 'handleSaving']);\n    }\n\n    public function handleDeleted(Deleted $event)\n    {\n        // Your logic here\n    }\n\n    public function handleSaving(Saving $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Filesystem Disks in PHP (Flarum)\nDESCRIPTION: Demonstrates how to declare a new filesystem disk in Flarum using the Filesystem extender. This example creates a 'flarum-uploads' disk with a specified root path and URL.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/filesystem.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Filesystem)\n        ->disk('flarum-uploads', function (Paths $paths, UrlGenerator $url) {\n            return [\n                'root'   => \"$paths->public/assets/uploads\",\n                'url'    => $url->to('forum')->path('assets/uploads')\n            ];\n        });\n```\n\n----------------------------------------\n\nTITLE: Creating a Notification Component in JSX\nDESCRIPTION: This JSX code snippet demonstrates how to create a custom notification component in Flarum. It extends the base `Notification` component and defines the `icon`, `href`, and `content` methods to customize the notification's appearance and behavior. The example is based on the new post notification from the Flarum Subscriptions extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Notification from 'flarum/forum/components/Notification';\nimport username from 'flarum/common/helpers/username';\n\nexport default class NewPostNotification extends Notification {\n  icon() {\n    return 'fas fa-star';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n    const discussion = notification.subject();\n    const content = notification.content() || {};\n\n    return app.route.discussion(discussion, content.postNumber);\n  }\n\n  content() {\n    return app.translator.trans('flarum-subscriptions.forum.notifications.new_post_text', {user: this.attrs.notification.fromUser()});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MergeableInterface for Custom Post Type in PHP\nDESCRIPTION: This code snippet shows how to implement the MergeableInterface for a custom post type in Flarum. It includes methods to check if posts can be merged and to perform the merge operation.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/post-types.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function canMerge(MergeableInterface $post): bool\n{\n    return $post instanceof static\n        && $this->created_at >= $post->created_at\n        && $this->created_at - $post->created_at <= 300;\n}\n\npublic function saveAfterMerge(MergeableInterface $post): static\n{\n    $this->created_at = $post->created_at;\n\n    $this->content .= '\\n\\n' . $post->content;\n\n    return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Scopers in PHP for Flarum Extensions\nDESCRIPTION: This code snippet demonstrates how to register custom scopers for Tag and Discussion models in a Flarum extension. It uses the Extend\\ModelVisibility class to apply scopers to specific models and abilities.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/model-visibility.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\Tags\\Tag;\nuse YourNamespace\\Access;\n\nreturn [\n  // Other extenders\n\n  // 'view' is optional here, since that's the default value for the ability argument.\n  // However, if we were applying this to a different ability, such as `viewPrivate`,\n  // would need to explicitly specify that.\n  (new Extend\\ModelVisibility(Tag::class))\n    ->scope(Access\\ScopeTagVisibility::class, 'view'),\n\n  (new Extend\\ModelVisibility(Discussion::class))\n    ->scopeAll(Access\\ScopeDiscussionVisibilityForAbility::class),\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Country Search Mutator in PHP\nDESCRIPTION: A search mutator that modifies the search query to only return users from the same country as the actor. Implements logic similar to the filter mutator for country-based filtering.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Query\\QueryCriteria;\nuse Flarum\\Search\\SearchState;\n\nclass OnlySameCountrySearchMutator\n{\n    public function __invoke(SearchState $searchState, QueryCriteria $queryCriteria)\n    {\n        $searchState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Component in Flarum with JavaScript\nDESCRIPTION: This snippet shows how to create a new notification component in the Flarum frontend by extending an existing Notification class. It defines key methods like icon, href, and content to customize the appearance and action of the notification. Dependencies include 'flarum/forum/components/Notification' and 'flarum/common/helpers/username'. The component shows a star icon and navigates to a new post when clicked.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Notification from 'flarum/forum/components/Notification';\nimport username from 'flarum/common/helpers/username';\n\nexport default class NewPostNotification extends Notification {\n  icon() {\n    return 'fas fa-star';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n    const discussion = notification.subject();\n    const content = notification.content() || {};\n\n    return app.route.discussion(discussion, content.postNumber);\n  }\n\n  content() {\n    return app.translator.trans('flarum-subscriptions.forum.notifications.new_post_text', {user: this.attrs.notification.fromUser()});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Models in Flarum\nDESCRIPTION: Using the Model extender to add default values and cast attributes for existing models. The example shows how to modify the User model with default values and attribute casting.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\User\\User;\n\nreturn [\n    (new Extend\\Model(User::class))\n        ->default('is_alive', true)\n        ->cast('suspended_until', 'datetime')\n        ->cast('is_admin', 'boolean')\n];\n```\n\n----------------------------------------\n\nTITLE: Handling Pluralization in Flarum with ICU MessageFormat\nDESCRIPTION: This snippet demonstrates how to implement pluralization in translations using ICU MessageFormat. The count variable determines which version of the translation is displayed based on its value.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst remaining = this.minPrimary - primaryCount;\nreturn app.translator.trans(\n  'choose_primary_placeholder',\n  { count: remaining }\n);\n```\n\n----------------------------------------\n\nTITLE: Mocking Flarum Services in PHP Tests\nDESCRIPTION: Example of mocking Flarum services in PHP unit tests using setUp method. Demonstrates mocking settings repository and controlling return values.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n    public function setUp(): void {\n        parent::setUp();\n        // example - if our setting needs settings, we can mock the settings repository\n        $settingsRepo = m::mock(SettingsRepositoryInterface::class);\n        // and then control specific return values for each setting key\n        $settingsRepo->shouldReceive('get')->with('some-plugin-key')->andReturn('some-value-useful-for-testing');\n        // construct your class under test, passing mocked services as needed\n        $this->serializer = new YourClassUnderTest($settingsRepo);\n    }\n```\n\n----------------------------------------\n\nTITLE: Querying Groups with Visibility in Flarum (PHP)\nDESCRIPTION: This snippet demonstrates how to retrieve groups that a given user can see using the `whereVisibleTo` method in Flarum. The `whereVisibleTo` method applies visibility scoping to an Eloquent query. It shows how to apply visibility scoping to an existing query and with an ability.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\nuse Flarum\\Group\\Group;\n\n// Construct and execute a query for all groups that a given user can see.\n$groups = Group::whereVisibleTo($actor)->get();\n\n// Apply visibility scoping to an existing query.\nMore eloquent filters can be added after this.\n$query\n  ->whereVisibleTo($actor)\n  ->whereRaw('1=1');\n\n// Apply visibility scoping with an ability\n$query\n  ->whereVisibleTo($actor, 'someAbility')\n```\n```\n\n----------------------------------------\n\nTITLE: Registering an Event Subscriber in Flarum\nDESCRIPTION: Example of registering an event subscriber class that can handle multiple event types. Uses the Event extender's subscribe method.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/backend-events.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Flarum\\Post\\Event\\Saving;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->subscribe(PostEventSubscriber::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Pluralizable Translations in YAML for Flarum\nDESCRIPTION: This YAML snippet demonstrates how to define translations that can be pluralized in Flarum. It includes two keys for mentioned_by_text, allowing for different translations based on the number of users.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nmentioned_by_text: \"{users} replied to this.\"       # Can be pluralized ...\nmentioned_by_self_text: \"{users} replied to this.\"  # Can be pluralized ...\n```\n\n----------------------------------------\n\nTITLE: Registering Middleware in Flarum Extensions\nDESCRIPTION: Demonstrates how to register middleware in a Flarum extension using the Middleware extender in the extend.php file, including adding, removing, and reordering middleware.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/middleware.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n// use Flarum\\Http\\Middleware\\CheckCsrfToken;\n\nreturn [\n    // Add middleware to forum frontend\n    (new Extend\\Middleware('forum'))->add(YourMiddleware::class),\n    // Admin frontend\n    (new Extend\\Middleware('admin'))->add(YourMiddleware::class),\n    // API frontend\n    (new Extend\\Middleware('api'))->add(YourMiddleware::class),\n\n    (new Extend\\Middleware('frontend'))\n        // remove a middleware (e.g. remove CSRF token check 😱)\n        ->remove(CheckCsrfToken::class)\n        // insert before another middleware (e.g. before a CSRF token check)\n        ->insertBefore(CheckCsrfToken::class, YourMiddleware::class)\n        // insert after another middleware (e.g. after a CSRF token check)\n        ->insertAfter(CheckCsrfToken::class, YourMiddleware::class)\n        // replace a middleware (e.g. replace the CSRF check with your own implementation)\n        ->replace(CheckCsrfToken::class, YourMiddleware::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Modifying Frontend Content in Flarum with PHP\nDESCRIPTION: Shows how to modify frontend content using the Frontend extender's content method. Demonstrates adding custom scripts to the document head.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Frontend\\Document;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->content(function (Document $document, Request $request) {\n            $document->head[] = '<script>alert(\"Hello, world!\")</script>';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing SettingsRepositoryInterface in a PHP Class for Flarum Extensions\nDESCRIPTION: This snippet demonstrates how to properly inject and use the SettingsRepositoryInterface in a Flarum extension class. It shows the constructor dependency injection pattern that leverages Laravel's service container.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace acme\\HelloWorld\\ExampleDir;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\n\nclass ClassInterfacesWithSettings\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Eloquent Relationship Definition\nDESCRIPTION: Shows how to create custom relationships using the relationship method for more complex scenarios like morphMany, morphToMany, and morphedByMany.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->relationship('mobile', 'App\\Phone', function ($user) {\n            // Return any Eloquent relationship here.\n            return $user->belongsToMany(Discussion::class, 'recipients')\n                ->withTimestamps()\n                ->wherePivot('removed_at', null);\n        })\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events in Flarum\nDESCRIPTION: Illustrates how to inject the event dispatcher and dispatch custom events in Flarum extension classes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Post\\Event\\Deleted;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\n\nclass SomeClass\n{\n    /**\n      * @var Dispatcher\n      */\n    protected $events;\n\n    /**\n      * @param Dispatcher $events\n      */\n    public function __construct(Dispatcher $events)\n    {\n        $this->events = $events;\n    }\n\n    public function someMethod()\n    {\n        // Logic\n        $this->events->dispatch(\n            new Deleted($somePost, $someActor)\n        );\n        // More Logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Blade Templates in Flarum (PHP)\nDESCRIPTION: This snippet shows how to render Blade templates to strings using the view factory. It demonstrates rendering a simple view and passing variables to the view.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/views.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, $view is of type `Illuminate\\Contracts\\View\\Factory`\n$renderedString = $view->make('acme.hello-world::greeting')->render();\n\n// You can also pass variables to the view:\n$renderedString = $view->make('acme.hello-world::greeting', ['varName' => true])->render();\n```\n\n----------------------------------------\n\nTITLE: Implementing Available Settings for Mail Driver Interface in PHP\nDESCRIPTION: Shows the new format for returning available settings in a mail driver, mapping field names to their types.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic function availableSettings()\n{\n    return [\n        'field_name' => 'string',\n        'another_field' => 'boolean'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan for Flarum Extensions using Composer\nDESCRIPTION: This command installs the flarum/phpstan package as a development dependency for static code analysis in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/phpstan:^1.0\n```\n\n----------------------------------------\n\nTITLE: Generating a Console Command using Flarum CLI\nDESCRIPTION: A bash command that uses the Flarum CLI tool to automatically generate and register a console command for a Flarum extension, simplifying the setup process.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/console.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend command\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan using Flarum CLI\nDESCRIPTION: Command to automatically add and update PHPStan infrastructure using Flarum CLI tool\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra phpstan\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension as Theme in composer.json\nDESCRIPTION: JSON configuration to properly mark a Flarum extension as a theme by setting the category to \"theme\" in the extra.flarum-extension section of composer.json. This categorization ensures the extension appears in the theme section of the admin dashboard.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/theme.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // other fields\n    \"extra\": {\n        \"flarum-extension\": {\n            \"category\": \"theme\"\n        }\n    }\n    // other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Registering View Namespace for Flarum Extension\nDESCRIPTION: This PHP code registers a new view namespace for a Flarum extension using the View extender. It specifies the namespace and the directory where view files are located.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views');\n];\n```\n\n----------------------------------------\n\nTITLE: Migrating API Serializers from 1.x to 2.x\nDESCRIPTION: Example of migrating from Flarum 1.x API serializers to 2.x API resources, showing both the old and new implementations.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\ApiResource(Resource\\UserResource::class))\n    ->fields(fn () => [\n        Schema\\Number::make('draftCount')\n            ->visible(fn (User $user, Context $context) => $context->getActor()->id === $user->id)\n            ->countRelation('drafts', function (Builder $query, Context $context) {\n                $query->whereVisibleTo($context->getActor());\n            }),\n    ]),\n\n(new Extend\\ApiResource(Resource\\ForumResource::class))\n    ->fields(fn () => [\n        Schema\\Boolean::make('canSaveDrafts')\n            ->get(function (object $forum, Context $context) {\n                return $context->getActor()->hasPermissionLike('user.saveDrafts');\n            }),\n        Schema\\Boolean::make('canScheduleDrafts')\n            ->get(function (object $forum, Context $context) {\n                return $context->getActor()->hasPermissionLike('user.scheduleDrafts');\n            }),\n    ]),\n```\n\n----------------------------------------\n\nTITLE: Rendering Blade Templates in PHP\nDESCRIPTION: Demonstrates how to render Blade templates to strings using the view factory, including passing variables to the template. Shows both basic rendering and rendering with variables.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/views.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, $view is of type `Illuminate\\Contracts\\View\\Factory`\n$renderedString = $view->make('acme.hello-world::greeting')->render();\n\n// You can also pass variables to the view:\n$renderedString = $view->make('acme.hello-world::greeting', ['varName' => true])->render();\n```\n\n----------------------------------------\n\nTITLE: Basic Migration Structure in PHP\nDESCRIPTION: Template for creating a Flarum database migration with up and down functions using the Laravel schema builder.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Schema\\Builder;\n\nreturn [\n    'up' => function (Builder $schema) {\n        // up migration\n    },\n    'down' => function (Builder $schema) {\n        // down migration\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Property Mapping in Flarum API\nDESCRIPTION: Shows how to map API attributes to specific model properties\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\npublic function fields(): array\n{\n    return [\n        Schema\\Str::make('name')\n            ->property('name_column'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Titles in Custom Pages\nDESCRIPTION: Examples showing how to set custom page titles for Flarum pages, both with static titles and dynamic titles loaded from API data.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend-pages.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport Page from 'flarum/common/components/Page';\n\n\nexport default class CustomPage extends Page {\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    app.setTitle(\"Cool Page\");\n    app.setTitleCount(0);\n  }\n\n  view() {\n    // ...\n  }\n}\n\nexport default class CustomPageLoadsData extends Page {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    app.store.find(\"users\", 1).then(user => {\n      app.setTitle(user.displayName());\n      app.setTitleCount(0);\n    })\n  }\n\n  view() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Frontend Routes with Document Modification in PHP\nDESCRIPTION: Demonstrates how to register custom frontend routes while also modifying the document content for specific routes. Shows setting custom page titles for different routes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->route('/users', 'acme.users', function (Document $document, Request $request) {\n            $document->title = 'Users';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Using Frontend Extender to Add JavaScript and CSS in Flarum\nDESCRIPTION: This code snippet demonstrates how to register JavaScript and CSS files to be delivered with the forum frontend using the Frontend extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/start.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Registrar un archivo JavaScript y un archivo CSS para ser entregado con el frontend del foro\n(new Extend\\Frontend('forum'))\n    ->js(__DIR__.'/forum-scripts.js')\n    ->css(__DIR__.'/forum-styles.css')\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Search Components with SimpleFlarumSearch\nDESCRIPTION: Demonstrates how to register custom gambits and search mutators using the SimpleFlarumSearch extender for the UserSearcher.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/search.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\SimpleFlarumSearch(UserSearcher::class))\n    ->addGambit(CountryGambit::class)\n    ->addSearchMutator(OnlySameCountrySearchMutator::class),\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Sender in PHP\nDESCRIPTION: PHP implementation of notification sending functionality in Flarum, showing how to sync notifications when posts are liked or unliked.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/notifications.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Listener;\n\nuse Flarum\\Event\\ConfigureNotificationTypes;\nuse Flarum\\Likes\\Event\\PostWasLiked;\nuse Flarum\\Likes\\Event\\PostWasUnliked;\nuse Flarum\\Likes\\Notification\\PostLikedBlueprint;\nuse Flarum\\Notification\\NotificationSyncer;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nclass SendNotificationWhenPostIsLiked\n{\n    protected $notifications;\n\n    public function __construct(NotificationSyncer $notifications)\n    {\n        $this->notifications = $notifications;\n    }\n\n    public function subscribe(Dispatcher $events)\n    {\n        $events->listen(PostWasLiked::class, [$this, 'whenPostWasLiked']);\n        $events->listen(PostWasUnliked::class, [$this, 'whenPostWasUnliked']);\n    }\n\n    public function whenPostWasLiked(PostWasLiked $event)\n    {\n        $this->syncNotification($event->post, $event->user, [$event->post->user]);\n    }\n\n    public function whenPostWasUnliked(PostWasUnliked $event)\n    {\n        $this->syncNotification($event->post, $event->user, []);\n    }\n\n    public function syncNotification(Post $post, User $user, array $recipients)\n    {\n        if ($post->user->id != $user->id) {\n            $this->notifications->sync(\n                new PostLikedBlueprint($post, $user),\n                $recipients\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Embedding in Translation Strings\nDESCRIPTION: Shows how to incorporate HTML tags within translation strings to provide localizers with flexibility for different language structures. This approach allows link positioning to be adapted for various languages.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsign_up_text: \"Non hai un account? <a>Registrati</a>\"\n```\n\n----------------------------------------\n\nTITLE: Using Link Component for Navigation in Flarum (JSX)\nDESCRIPTION: Demonstrates how to use Flarum's Link component for creating internal and external links in a Single Page Application. The examples show different ways to utilize the Link component, including with hardcoded routes, generated routes, and external links.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'flarum/common/components/Link';\n\n// Link can be used just like any other component:\n<Link href=\"/route/known/to/mithril\">Hello World!</Link>\n\n// You'll frequently use Link with generated routes:\n<Link href={app.route('settings')}>Hello World!</Link>\n\n// Link can even generate external links with the external attr:\n<Link external={true} href=\"https://google.com\">Hello World!</Link>\n\n// The above example with external = true is equivalent to:\n<a href=\"https://google.com\">Hello World!</a>\n// but is provided for flexibility: sometimes you might have links\n// that are conditionally internal or external.\n```\n\n----------------------------------------\n\nTITLE: Mocking Flarum Services for Unit Testing\nDESCRIPTION: This snippet demonstrates how to mock Flarum services for unit testing. It shows examples of mocking the SettingsRepository and User classes, which are commonly needed when testing extension functionality that depends on these services.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/testing.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function setUp(): void\n{\n    parent::setUp();\n    // example - if our setting needs settings, we can mock the settings repository\n    $settingsRepo = m::mock(SettingsRepositoryInterface::class);\n    // and then control specific return values for each setting key\n    $settingsRepo->shouldReceive('get')->with('some-plugin-key')->andReturn('some-value-useful-for-testing');\n    // construct your class under test, passing mocked services as needed\n    $this->serializer = new YourClassUnderTest($settingsRepo);\n}\n\n$this->actor = m::mock(User::class);\n$request = m::mock(Request::class)->makePartial();\n$request->shouldReceive('getAttribute->getActor')->andReturn($this->actor);\n$this->actor->shouldReceive('SOME PERMISSION')->andReturn(true/false);\n```\n\n----------------------------------------\n\nTITLE: Listening to Multiple Events with Subscriber in PHP\nDESCRIPTION: This snippet illustrates how to create an event subscriber in Flarum to listen to multiple events. The subscriber allows methods to handle various events together for optimized functionality.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Flarum\\Post\\Event\\Saving;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->subscribe(PostEventSubscriber::class),\n];\n```\n\nLANGUAGE: php\nCODE:\n```\nclass PostEventSubscriber\n{\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    public function subscribe($events)\n    {\n        $events->listen(Deleted::class, [$this, 'handleDeleted']);\n        $events->listen(Saving::class, [$this, 'handleSaving']);\n    }\n\n    public function handleDeleted(Deleted $event)\n    {\n        // Your logic here\n    }\n\n    public function handleSaving(Saving $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Blade Templates in Flarum using PHP\nDESCRIPTION: This snippet shows how to render Blade templates to strings in Flarum. It demonstrates rendering a view with and without passing variables to the view.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/views.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, $view is of type `Illuminate\\Contracts\\View\\Factory`\n$renderedString = $view->make('acme.hello-world::greeting')->render();\n\n// You can also pass variables to the view:\n$renderedString = $view->make('acme.hello-world::greeting', ['varName' => true])->render();\n```\n\n----------------------------------------\n\nTITLE: Creating Links with Mithril's Link Component in Flarum\nDESCRIPTION: This snippet demonstrates how to use Mithril's `Link` component in Flarum to create internal and external links. It includes examples of using the component with hardcoded routes, generated routes, and external URLs. The external attribute is used to signal that the link is to an external resource.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/routes.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'flarum/common/components/Link';\n\n// Link can be used just like any other component:\n<Link href=\"/route/known/to/mithril\">Hello World!</Link>\n\n// You'll frequently use Link with generated routes:\n<Link href={app.route('settings')}>Hello World!</Link>\n\n// Link can even generate external links with the external attr:\n<Link external={true} href=\"https://google.com\">Hello World!</Link>\n\n// The above example with external = true is equivalent to:\n<a href=\"https://google.com\">Hello World!</a>\n// but is provided for flexibility: sometimes you might have links\n// that are conditionally internal or external.\n```\n\n----------------------------------------\n\nTITLE: Rendering Notification Component in React JSX for Flarum\nDESCRIPTION: This code snippet demonstrates how to create a custom notification component in React JSX for Flarum. It extends the base Notification class and implements methods for icon, href, and content.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Notification from 'flarum/forum/components/Notification';\nimport username from 'flarum/common/helpers/username';\n\nexport default class NewPostNotification extends Notification {\n  icon() {\n    return 'fas fa-star';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n    const discussion = notification.subject();\n    const content = notification.content() || {};\n\n    return app.route.discussion(discussion, content.postNumber);\n  }\n\n  content() {\n    return app.translator.trans('flarum-subscriptions.forum.notifications.new_post_text', {user: this.attrs.notification.fromUser()});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Index Endpoint for API Resources in PHP\nDESCRIPTION: Example of setting up the Index endpoint for listing model instances in a Flarum API resource.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function endpoints(): array\n{\n    return [\n        Endpoint\\Index::make(),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Views Namespace in Flarum (PHP)\nDESCRIPTION: This snippet demonstrates how to add a view namespace to Flarum's view factory using the View extender in the extend.php file. It specifies the namespace and the directory where view files are located.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/views.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views'),\n];\n```\n\n----------------------------------------\n\nTITLE: Extending API Resources in Flarum\nDESCRIPTION: Demonstrates how to extend existing API resources with new fields and endpoints\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    (new Extend\\ApiResource(Resource\\UserResource::class))\n        ->fields(fn () => [\n            Schema\\Str::make('customField'),\n            Schema\\Relationship\\ToOne::make('customRelation')\n                ->type('customRelationType'),\n        ])\n        ->endpoints(fn () => [\n            Endpoint\\Endpoint::make('custom')\n                ->route('GET', '/custom')\n                ->action(fn (Context $context) => 'custom'),\n        ]),\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables in Flarum Migrations\nDESCRIPTION: Shows how to use the Migration::createTable helper to create a new database table in a Flarum migration.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Database\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\n\nreturn Migration::createTable('users', function (Blueprint $table) {\n    $table->increments('id');\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Select Setting for Flarum Extension\nDESCRIPTION: Demonstrates how to register a select (dropdown) setting for a Flarum extension using the ExtensionData API. It includes options and default value.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/admin.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  setting: 'acme-interstellar.fuel_type',\n  label: app.translator.trans('acme-interstellar.admin.fuel_type_label'),\n  type: 'select',\n  options: {\n    'LOH': 'Liquid Fuel', // The key in this object is what the setting will be stored as in the database, the value is the label the admin will see (remember to use translations if they make sense in your context).\n    'RDX': 'Solid Fuel',\n  },\n  default: 'LOH',\n}\n```\n\n----------------------------------------\n\nTITLE: Integration Testing Flarum Frontend Component\nDESCRIPTION: Shows how to perform integration testing on a Flarum frontend component (Alert) using Jest and mithril-query.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport Alert from '../../../../src/common/components/Alert';\nimport m from 'mithril';\nimport mq from 'mithril-query';\nimport { jest } from '@jest/globals';\n\ndescribe('Alert displays as expected', () => {\n  it('should display alert messages with an icon', () => {\n    const alert = mq(m(Alert, { type: 'error' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toHaveElement('i.icon');\n  });\n\n  it('should display alert messages with a custom icon when using a title', () => {\n    const alert = mq(Alert, { type: 'error', icon: 'fas fa-users', title: 'Woops..' });\n    expect(alert).toContainRaw('Woops..');\n    expect(alert).toHaveElement('i.fas.fa-users');\n  });\n\n  it('should display alert messages with a title', () => {\n    const alert = mq(m(Alert, { type: 'error', title: 'Error Title' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toContainRaw('Error Title');\n    expect(alert).toHaveElement('.Alert-title');\n  });\n\n  it('should display alert messages with custom controls', () => {\n    const alert = mq(Alert, { type: 'error', controls: [m('button', { className: 'Button--test' }, 'Click me!')] });\n    expect(alert).toHaveElement('button.Button--test');\n  });\n});\n\ndescribe('Alert is dismissible', () => {\n  it('should show dismiss button', function () {\n    const alert = mq(m(Alert, { dismissible: true }, 'Shoot!'));\n    expect(alert).toHaveElement('button.Alert-dismiss');\n  });\n\n  it('should call ondismiss when dismiss button is clicked', function () {\n    const ondismiss = jest.fn();\n    const alert = mq(Alert, { dismissible: true, ondismiss });\n    alert.click('.Alert-dismiss');\n    expect(ondismiss).toHaveBeenCalled();\n  });\n\n  it('should not be dismissible if not chosen', function () {\n    const alert = mq(Alert, { type: 'error', dismissible: false });\n    expect(alert).not.toHaveElement('button.Alert-dismiss');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag Visibility Scoper in PHP\nDESCRIPTION: A custom scoper for the Tag model that handles the 'view' ability. It filters tags based on the actor's forum viewing permissions using a subquery.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeTagVisibility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     */\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->whereIn('id', function ($query) use ($actor) {\n            Tag::query()->setQuery($query->from('tags'))->whereHasPermission($actor, 'viewForum')->select('tags.id');\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Private Posts Visibility Example\nDESCRIPTION: Example from PostPolicy showing how to implement visibility rules for private posts while allowing extensions to override the default behavior.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, we want to ensure that private posts aren't visible to users by default.\n// The simplest way to do this would be:\n$query->where('posts.is_private', false);\n\n// However, we recognize that some extensions might have valid use cases for showing private posts.\n// So instead, we include all posts that aren't private, AND all private posts desired by extensions\n$query->where(function ($query) use ($actor) {\n    $query->where('posts.is_private', false)\n        ->orWhere(function ($query) use ($actor) {\n            $query->whereVisibleTo($actor, 'viewPrivate');\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Search Components with SimpleFlarumSearch Extender\nDESCRIPTION: Configuration code showing how to register custom gambits and search mutators using the SimpleFlarumSearch extender in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\SimpleFlarumSearch(UserSearcher::class))\n    ->addGambit(CountryGambit::class)\n    ->addSearchMutator(OnlySameCountrySearchMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: Custom Discussion Serializer Implementation in PHP\nDESCRIPTION: Example of creating a custom serializer for discussion models, demonstrating type definition and attribute handling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\AbstractSerializer;\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nclass DiscussionSerializer extends AbstractSerializer\n{\n    protected $type = 'discussions';\n\n    protected function getDefaultAttributes($discussion)\n    {\n        return [\n            'title' => $discussion->title,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Frontend Assets in PHP\nDESCRIPTION: This snippet demonstrates how to use the Frontend extender to register JavaScript and CSS files for the forum frontend in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/start.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Frontend('forum'))\n    ->js(__DIR__.'/forum-scripts.js')\n    ->css(__DIR__.'/forum-styles.css')\n```\n\n----------------------------------------\n\nTITLE: Defining Admin Search Index Item Type in TypeScript\nDESCRIPTION: TypeScript interface definition for admin search index items, specifying the structure and properties required for creating searchable items in the admin dashboard.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/admin.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport type GeneralIndexItem = {\n  /**\n   * The unique identifier for this index item.\n   */\n  id: string;\n  /**\n   * Optional: The tree path to this item, used for grouping in the search results.\n   */\n  tree?: string[];\n  /**\n   * The label to display in the search results.\n   */\n  label: string;\n  /**\n   * Optional: The description to display in the search results.\n   */\n  help?: string;\n  /**\n   * Optional: The URL to navigate to when this item is selected.\n   * The default is to navigate to the extension page.\n   */\n  link?: string;\n  /**\n   * Optional: A callback that returns a boolean indicating whether this item should be visible in the search results.\n   */\n  visible?: () => boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware via Flarum Extender\nDESCRIPTION: This code snippet shows how to add your custom middleware to Flarum's middleware pipe using the `Extend\\Middleware` extender in your extension's `extend.php` file. It demonstrates adding middleware to the `forum`, `admin`, and `api` frontends. It also shows how to remove, insert before, insert after, and replace existing middleware.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/middleware.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n// use Flarum\\Http\\Middleware\\CheckCsrfToken;\n\nreturn [\n    // Add middleware to forum frontend\n    (new Extend\\Middleware('forum'))->add(YourMiddleware::class),\n    // Admin frontend\n    (new Extend\\Middleware('admin'))->add(YourMiddleware::class),\n    // API frontend\n    (new Extend\\Middleware('api'))->add(YourMiddleware::class),\n\n    (new Extend\\Middleware('frontend'))\n        // remove a middleware (e.g. remove CSRF token check 😱)\n        ->remove(CheckCsrfToken::class)\n        // insert before another middleware (e.g. before a CSRF token check)\n        ->insertBefore(CheckCsrfToken::class, YourMiddleware::class)\n        // insert after another middleware (e.g. after a CSRF token check)\n        ->insertAfter(CheckCsrfToken::class, YourMiddleware::class)\n        // replace a middleware (e.g. replace the CSRF check with your own implementation)\n        ->replace(CheckCsrfToken::class, YourMiddleware::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing ExtensionData API for Flarum Extension in JavaScript\nDESCRIPTION: Basic setup for the ExtensionData API which allows you to add settings to your extension. This code initializes the API for a specific extension ID.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/admin.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('interstellar', function(app) {\n\n  app.extensionData\n    .for('acme-interstellar')\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sorting in PHP Controller\nDESCRIPTION: PHP code demonstrating how to extract sorting parameters from a request and apply them to a database query in a Flarum API controller.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$sort = $this->extractSort($request);\n$query = Tag::query();\n\nforeach ($sort as $field => $order) {\n    $query->orderBy(snake_case($field), $order);\n}\n\nreturn $query->get();\n```\n\n----------------------------------------\n\nTITLE: Returning a Custom Response from Flarum Middleware\nDESCRIPTION: This code shows how to return a custom JSON API response from your middleware in Flarum. It creates a `JsonApiResponse` with error details, status code and assigns it to the response, effectively stopping the request from being processed further. Dependencies: `Flarum\\Api\\JsonApiResponse`, `Tobscure\\JsonApi\\Document`, `Tobscure\\JsonApi\\Exception\\Handler\\ResponseBag`.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/middleware.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\JsonApiResponse;\nuse Tobscure\\JsonApi\\Document;\nuse Tobscure\\JsonApi\\Exception\\Handler\\ResponseBag;\n\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    if ($userFoundInDatabase) {\n        $error = new ResponseBag('422', [\n            [\n                'status' => '422',\n                'code' => 'validation_error',\n                'source' => [\n                    'pointer' => '/data/attributes/email',\n                ],\n                'detail' => 'Yikes! Your email can\\'t be used.',\n            ],\n        ]);\n        $document = new Document();\n        $document->setErrors($error->getErrors());\n\n        return new JsonApiResponse($document, $error->getStatus());\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Integration Tests for Flarum Frontend Components\nDESCRIPTION: Demonstrates how to write integration tests for a frontend component in a Flarum extension using Jest and mithril-query.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport Alert from '../../../../src/common/components/Alert';\nimport m from 'mithril';\nimport mq from 'mithril-query';\nimport { jest } from '@jest/globals';\n\ndescribe('Alert displays as expected', () => {\n  it('should display alert messages with an icon', () => {\n    const alert = mq(m(Alert, { type: 'error' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toHaveElement('i.icon');\n  });\n\n  it('should display alert messages with a custom icon when using a title', () => {\n    const alert = mq(Alert, { type: 'error', icon: 'fas fa-users', title: 'Woops..' });\n    expect(alert).toContainRaw('Woops..');\n    expect(alert).toHaveElement('i.fas.fa-users');\n  });\n\n  it('should display alert messages with a title', () => {\n    const alert = mq(m(Alert, { type: 'error', title: 'Error Title' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toContainRaw('Error Title');\n    expect(alert).toHaveElement('.Alert-title');\n  });\n\n  it('should display alert messages with custom controls', () => {\n    const alert = mq(Alert, { type: 'error', controls: [m('button', { className: 'Button--test' }, 'Click me!')] });\n    expect(alert).toHaveElement('button.Button--test');\n  });\n});\n\ndescribe('Alert is dismissible', () => {\n  it('should show dismiss button', function () {\n    const alert = mq(m(Alert, { dismissible: true }, 'Shoot!'));\n    expect(alert).toHaveElement('button.Alert-dismiss');\n  });\n\n  it('should call ondismiss when dismiss button is clicked', function () {\n    const ondismiss = jest.fn();\n    const alert = mq(Alert, { dismissible: true, ondismiss });\n    alert.click('.Alert-dismiss');\n    expect(ondismiss).toHaveBeenCalled();\n  });\n\n  it('should not be dismissible if not chosen', function () {\n    const alert = mq(Alert, { type: 'error', dismissible: false });\n    expect(alert).not.toHaveElement('button.Alert-dismiss');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Discussion Visibility Scoper in PHP for Flarum\nDESCRIPTION: This snippet demonstrates a scoper for the 'viewPrivate' ability on the Discussion model. It uses 'orWhere' to add additional visibility conditions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace ACME\\YourExtension\\Access;\n\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     */\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->orWhere(function($query) use ($actor) {\n            $query->where('some_column', true);\n            $query->where('some_other_column', false);\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Deletion Controller in PHP\nDESCRIPTION: Example controller implementation for deleting a logo file from Flarum's assets disk. Shows dependency injection of filesystem factory and settings repository, with authorization checks.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/filesystem.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Api\\Controller;\n\nuse Flarum\\Http\\RequestUtil;\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Illuminate\\Contracts\\Filesystem\\Factory;\nuse Illuminate\\Contracts\\Filesystem\\Filesystem;\nuse Laminas\\Diactoros\\Response\\EmptyResponse;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nclass DeleteLogoController extends AbstractDeleteController\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    /**\n     * @var Filesystem\n     */\n    protected $uploadDir;\n\n    /**\n     * @param SettingsRepositoryInterface $settings\n     * @param Factory $filesystemFactory\n     */\n    public function __construct(SettingsRepositoryInterface $settings, Factory $filesystemFactory)\n    {\n        $this->settings = $settings;\n        $this->uploadDir = $filesystemFactory->disk('flarum-assets');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function delete(ServerRequestInterface $request)\n    {\n        RequestUtil::getActor($request)->assertAdmin();\n\n        $path = $this->settings->get('logo_path');\n\n        $this->settings->set('logo_path', null);\n\n        if ($this->uploadDir->exists($path)) {\n            $this->uploadDir->delete($path);\n        }\n\n        return new EmptyResponse(204);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Relationships with Closures in PHP\nDESCRIPTION: Shows how to add custom relationships to models using the relationship method with a closure. This approach allows for more complex relationship definitions including pivot tables, timestamps, and custom conditions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->relationship('mobile', 'App\\Phone', function ($user) {\n            // Return any Eloquent relationship here.\n            return $user->belongsToMany(Discussion::class, 'recipients')\n                ->withTimestamps()\n                ->wherePivot('removed_at', null);\n        })\n```\n\n----------------------------------------\n\nTITLE: Implementing Slugging Trait in Flarum Model (PHP)\nDESCRIPTION: This code snippet shows how to implement a slugging trait in a Flarum model class. It demonstrates the use of the Slugger trait, setting up the slug configuration, and overriding the save method to generate and update the slug.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/slugging.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Flarum\\Database\\AbstractModel;\nuse Flarum\\Database\\ScopeVisibilityTrait;\nuse Flarum\\Foundation\\EventGeneratorTrait;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass Example extends AbstractModel\n{\n    use EventGeneratorTrait;\n    use ScopeVisibilityTrait;\n    use Slugger;\n\n    protected $table = 'examples';\n\n    public static function boot()\n    {\n        parent::boot();\n        static::addGlobalScope('example', function (Builder $builder) {\n            $builder->orderBy('created_at', 'desc');\n        });\n    }\n\n    protected function setSlugConfig(): void\n    {\n        $this->slugger = [\n            'source' => 'name',\n            'maxLength' => 255,\n            'noUpdate' => false\n        ];\n    }\n\n    public function save(array $options = [])\n    {\n        $this->setSlugConfig();\n        $this->generateSlug();\n\n        return parent::save($options);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Forum Slugs in PHP with Flarum's SlugManager\nDESCRIPTION: Shows how to retrieve the SlugManager from the container and generate a slug for a specified model. The example demonstrates generating a 'forum' type slug for a model instance.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/slugging.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Http\\SlugManager;\n\n$slugManager = app(SlugManager::class);\n\n$slug = $slugManager->forResource($model::getType())->toSlug($model);\n```\n\n----------------------------------------\n\nTITLE: Event Subscriber Implementation\nDESCRIPTION: Example showing how to implement an event subscriber that can handle multiple event types using a single class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Flarum\\Post\\Event\\Saving;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->subscribe(PostEventSubscriber::class),\n];\n```\n\nLANGUAGE: php\nCODE:\n```\nclass PostEventSubscriber\n{\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    public function subscribe($events)\n    {\n        $events->listen(Deleted::class, [$this, 'handleDeleted']);\n        $events->listen(Saving::class, [$this, 'handleSaving']);\n    }\n\n    public function handleDeleted(Deleted $event)\n    {\n        // Your logic here\n    }\n\n    public function handleSaving(Saving $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Models in TypeScript\nDESCRIPTION: Demonstrates using the Model extender to add attributes and relationships to existing models. This example uses TypeScript generics to provide type safety for the added properties.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n  new Extend.Model(Discussion)\n    .attribute<string>('slug')\n    .hasOne<User>('user')\n    .hasMany<Post>('posts')\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Discussion Visibility Scoper in PHP for Flarum\nDESCRIPTION: This code snippet demonstrates a scoper for the 'viewPrivate' ability. It adds additional conditions to the query using orWhere to handle private discussion visibility.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace ACME\\YourExtension\\Access;\n\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     */\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->orWhere(function($query) use ($actor) {\n            $query->where('some_column', true);\n            $query->where('some_other_column', false);\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from Mithril 0.2 to Mithril 2.0 Component Lifecycle\nDESCRIPTION: This code demonstrates the migration from Mithril 0.2 component lifecycle methods to Mithril 2.0 lifecycle hooks. It shows how the old init() and config() methods map to the new oninit(), oncreate(), onbeforeupdate(), onupdate(), onbeforeremove(), and onremove() lifecycle hooks.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass OldMithrilComponent extends Component {\n  init() {\n    console.log('Code to run when component instance created, but before attached to the DOM.');\n  }\n\n  config(element, isInitialized) {\n    console.log('Code to run on every redraw AND when the element is first attached');\n\n    if (isInitialized) return;\n\n    console.log('Code to execute only once when components are first created and attached to the DOM');\n\n    context.onunload = () => {\n      console.log('Code to run when the component is removed from the DOM');\n    }\n  }\n\n  view() {\n    // In mithril 0, you could skip redrawing a component (or part of a component) by returning a subtree retain directive.\n    // See https://mithril.js.org/archive/v0.2.5/mithril.render.html#subtree-directives\n    // dontRedraw is a substitute for logic; usually, this is used together with SubtreeRetainer.\n    if (dontRedraw()) return { subtree: 'retain' };\n\n    return <p>Hello World!</p>;\n  }\n}\n\nclass NewMithrilComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    console.log('Code to run when component instance created, but before attached to the DOM.');\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    console.log('Code to run when components are first created and attached to the DOM');\n  }\n\n  onbeforeupdate(vnode, oldVnode) {\n    super.onbeforeupdate(vnode);\n\n    console.log('Code to run BEFORE diffing / redrawing components on every redraw');\n\n    // In mithril 2, if we want to skip diffing / redrawing a component, we return \"false\" in its onbeforeupdate lifecycle hook.\n    // See https://mithril.js.org/lifecycle-methods.html#onbeforeupdate\n    // This is also typically used with SubtreeRetainer.\n    if (dontRedraw()) return false;\n  }\n\n  onupdate(vnode) {\n    // Unlike config, this does NOT run when components are first attached.\n    // Some code might need to be replicated between oncreate and onupdate.\n    console.log('Code to run on every redraw AFTER the DOM is updated.');\n  }\n\n  onbeforeremove(vnode) {\n    // This is run before components are removed from the DOM.\n    // If a promise is returned, the DOM element will only be removed when the\n    // promise completes. It is only called on the top-level component that has\n    // been removed. It has no equivalent in Mithril 0.2.\n    // See https://mithril.js.org/lifecycle-methods.html#onbeforeremove\n    return Promise.resolve();\n  }\n\n  onremove(vnode) {\n      console.log('Code to run when the component is removed from the DOM');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Mithril 0.2 Component to Mithril 2.0 in JavaScript\nDESCRIPTION: This snippet demonstrates how to update a Mithril 0.2 component to use Mithril 2.0 lifecycle hooks and patterns. It shows the transition from init and config methods to the new lifecycle methods like oninit, oncreate, onbeforeupdate, onupdate, onbeforeremove, and onremove.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass OldMithrilComponent extends Component {\n  init() {\n    console.log('Code to run when component instance created, but before attached to the DOM.');\n  }\n\n  config(element, isInitialized) {\n    console.log('Code to run on every redraw AND when the element is first attached');\n\n    if (isInitialized) return;\n\n    console.log('Code to execute only once when components are first created and attached to the DOM');\n\n    context.onunload = () => {\n      console.log('Code to run when the component is removed from the DOM');\n    }\n  }\n\n  view() {\n    if (dontRedraw()) return { subtree: 'retain' };\n\n    return <p>Hello World!</p>;\n  }\n}\n\nclass NewMithrilComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    console.log('Code to run when component instance created, but before attached to the DOM.');\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    console.log('Code to run when components are first created and attached to the DOM');\n  }\n\n  onbeforeupdate(vnode, oldVnode) {\n    super.onbeforeupdate(vnode);\n\n    console.log('Code to run BEFORE diffing / redrawing components on every redraw');\n\n    if (dontRedraw()) return false;\n  }\n\n  onupdate(vnode) {\n    console.log('Code to run on every redraw AFTER the DOM is updated.');\n  }\n\n  onbeforeremove(vnode) {\n    return Promise.resolve();\n  }\n\n  onremove(vnode) {\n      console.log('Code to run when the component is removed from the DOM');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Gambit and Search Mutator in Flarum PHP\nDESCRIPTION: This snippet demonstrates how to register the custom CountryGambit and OnlySameCountrySearchMutator using the SimpleFlarumSearch extender in Flarum. It shows the proper syntax for adding these components to the UserSearcher.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\SimpleFlarumSearch(UserSearcher::class))\n    ->addGambit(CountryGambit::class)\n    ->addSearchMutator(OnlySameCountrySearchMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Writability in Flarum API\nDESCRIPTION: Demonstrates how to make fields writable and specify write permissions for create/update operations\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\npublic function fields(): array\n{\n    return [\n        Schema\\Str::make('name')\n            ->writable(),\n        Schema\\Boolean::make('isActive')\n            // If it's only writable on create.\n            ->writableOnCreate()\n            // If it's only writable on update.\n            ->writableOnUpdate(),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using whereVisibleTo Method in PHP\nDESCRIPTION: Examples of using the whereVisibleTo method to filter database queries based on user permissions in Flarum. Shows different ways to apply visibility scoping to Eloquent queries.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\n// Construct and execute a query for all groups that a given user can see.\n$groups = Group::whereVisibleTo($actor)->get();\n\n// Apply visibility scoping to an existing query.\nMore eloquent filters can be added after this.\n$query\n  ->whereVisibleTo($actor)\n  ->whereRaw('1=1');\n\n// Apply visibility scoping with an ability\n$query\n  ->whereVisibleTo($actor, 'someAbility')\n```\n\n----------------------------------------\n\nTITLE: Mocking User and Request (PHP)\nDESCRIPTION: This snippet demonstrates mocking the `User` class and the `Request` class to simulate authorization interactions.  It sets up expectations for methods like `getAttribute->getActor` and specific permissions on the user object, allowing you to test how your code behaves based on user roles and permissions.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/testing.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n    $this->actor = m::mock(User::class);\n    $request = m::mock(Request::class)->makePartial();\n    $request->shouldReceive('getAttribute->getActor')->andReturn($this->actor);\n    $this->actor->shouldReceive('SOME PERMISSION')->andReturn(true/false);\n```\n\n----------------------------------------\n\nTITLE: Adding Test Scripts to composer.json\nDESCRIPTION: JSON configuration to add test-related scripts to composer.json for running unit and integration tests.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"test\": [\n        \"@test:unit\",\n        \"@test:integration\"\n    ],\n    \"test:unit\": \"phpunit -c tests/phpunit.unit.xml\",\n    \"test:integration\": \"phpunit -c tests/phpunit.integration.xml\",\n    \"test:setup\": \"@php tests/integration/setup.php\"\n},\n\"scripts-descriptions\": {\n    \"test\": \"Runs all tests.\",\n    \"test:unit\": \"Runs all unit tests.\",\n    \"test:integration\": \"Runs all integration tests.\",\n    \"test:setup\": \"Sets up a database for use with integration tests. Execute this only once.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Resources in Flarum with AbstractListController\nDESCRIPTION: This code snippet shows how to list resources in Flarum by extending the `Flarum\\Api\\Controller\\AbstractListController`. It sets the `$serializer` property to the appropriate serializer class and implements the `data` method to return a collection of models, in this case, all `Tag` models. The `data` method takes a `Request` object and a `Document` object as parameters.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Flarum\\Api\\Controller\\AbstractListController;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass ListTagsController extends AbstractListController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        return Tag::all();\n    }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Deprecated Mail DriverInterface methods in PHP\nDESCRIPTION: The `Flarum\\Mail\\DriverInterface` methods `availableSettings()`, `validate()`, and `canSend()` are undergoing changes. `availableSettings()` must now return an array of field names mapping to their type. `validate()` and `canSend()` must be implemented and will be required in beta.13. See the linked documentation for implementation details.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\"https://github.com/flarum/core/blob/08e40bc693cce7be02d4fb24633553c7eaf2738d/src/Mail/DriverInterface.php#L25-L32\"\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\"https://github.com/flarum/core/blob/08e40bc693cce7be02d4fb24633553c7eaf2738d/src/Mail/DriverInterface.php#L34-L48\"\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\"https://github.com/flarum/core/blob/08e40bc693cce7be02d4fb24633553c7eaf2738d/src/Mail/DriverInterface.php#L50-L54\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Global Authorization Policy in PHP\nDESCRIPTION: An example of a global policy from Flarum Tags that enforces minimum tag requirements for viewing the forum and starting discussions, regardless of specific model instances.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/authorization.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\Access\\AbstractPolicy;\nuse Flarum\\User\\User;\n\nclass GlobalPolicy extends AbstractPolicy\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n\n    /**\n     * @param Flarum\\User\\User $actor\n     * @param string $ability\n     * @return bool|void\n     */\n    public function can(User $actor, string $ability)\n    {\n        if (in_array($ability, ['viewForum', 'startDiscussion'])) {\n            $enoughPrimary = count(Tag::getIdsWhereCan($actor, $ability, true, false)) >= $this->settings->get('min_primary_tags');\n            $enoughSecondary = count(Tag::getIdsWhereCan($actor, $ability, false, true)) >= $this->settings->get('min_secondary_tags');\n\n            if ($enoughPrimary && $enoughSecondary) {\n                return $this->allow();\n            } else {\n                return $this->deny();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Header with a Link using Mithril.js\nDESCRIPTION: This JS snippet illustrates how to append a link to the header component in Flarum using Mithril.js and the extend utility.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a YAML Literal Block for Multi-line Translations\nDESCRIPTION: Demonstrates how to use YAML literal blocks for translations that span multiple lines or contain special formatting.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nliteral_block_text: |\n  These lines will be displayed as shown here, line breaks and all.\n\n      Extra indentation is also preserved: this line will be indented 4 spaces!\n\n  Quote marks are unnecessary, even when the block contains special characters.\n```\n\n----------------------------------------\n\nTITLE: Adding Frontend CSS in PHP\nDESCRIPTION: Demonstrates registering both JavaScript and CSS/LESS files for the frontend using the Frontend extender.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/frontend.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less')\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Parameters in PHP for Flarum\nDESCRIPTION: Demonstration of how to define a route with parameters using the FastRoute syntax in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Routes('forum'))\n        ->get('/user/{id}', 'acme.user', UserController::class)\n```\n\n----------------------------------------\n\nTITLE: Implementing Discussion Visibility Scoper in PHP\nDESCRIPTION: Global scoper for the Discussion model that handles various visibility abilities. It includes complex logic for handling nested permissions and tag-based visibility restrictions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibilityForAbility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     * @param string $ability\n     */\n    public function __invoke(User $actor, Builder $query, $ability)\n    {\n        if (substr($ability, 0, 4) === 'view' && $ability !== 'view') {\n            return;\n        }\n\n        if (Str::endsWith($ability, 'InRestrictedTags')) {\n            return;\n        }\n\n        $permission = $ability === 'view' ? 'viewForum' : $ability;\n\n        $query->where(function ($query) use ($actor, $permission) {\n            $query\n                ->whereNotIn('discussions.id', function ($query) use ($actor, $permission) {\n                    return $query->select('discussion_id')\n                        ->from('discussion_tag')\n                        ->whereNotIn('tag_id', function ($query) use ($actor, $permission) {\n                            Tag::query()->setQuery($query->from('tags'))->whereHasPermission($actor, $permission)->select('tags.id');\n                        });\n                })\n                ->orWhere(function ($query) use ($actor, $permission) {\n                    $query->whereVisibleTo($actor, \"${permission}InRestrictedTags\");\n                });\n        });\n\n        if (! $actor->hasPermission($permission)) {\n            $query->has('tags');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Access Tokens in PHP\nDESCRIPTION: Demonstrates the new methods for generating different types of access tokens in Flarum. This change improves the management of user authentication and sessions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nFlarum\\Http\\RememberAccessToken::generate($userId)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nFlarum\\Http\\DeveloperAccessToken::generate($userId)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nFlarum\\Http\\SessionAccessToken::generate()\n```\n\n----------------------------------------\n\nTITLE: Creating Models with Flarum CLI\nDESCRIPTION: Shows how to use the Flarum CLI to automatically create backend and frontend models.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend model\n$ flarum-cli make frontend model\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Filesystem Disk in PHP\nDESCRIPTION: Example of using the Filesystem extender to declare a new disk for file uploads. Configures root path and URL for local filesystem storage.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/filesystem.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Filesystem)\n        ->disk('flarum-uploads', function (Paths $paths, UrlGenerator $url) {\n            return [\n                'root'   => \"$paths->public/assets/uploads\",\n                'url'    => $url->to('forum')->path('assets/uploads')\n            ];\n        });\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Controller in PHP\nDESCRIPTION: Example of a basic controller implementation that handles HTTP requests and returns an HTML response.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Acme\\HelloWorld;\n\nuse Laminas\\Diactoros\\Response\\HtmlResponse;\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass HelloWorldController implements RequestHandlerInterface\n{\n    public function handle(Request $request): Response\n    {\n        return new HtmlResponse('<h1>Hello, world!</h1>');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Extended Model Attribute Types for PHPStan in Flarum\nDESCRIPTION: PHP code snippet demonstrating how to use attribute casting to define types for extended model attributes, which helps PHPStan with type inference.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Model(User::class))\n    ->cast('is_cool', 'bool'),\n```\n\n----------------------------------------\n\nTITLE: Using withAttr Utility for Simplified Form Processing in JSX\nDESCRIPTION: This snippet shows how to use the withAttr utility in Flarum for simplified form processing. It demonstrates usage with both streams and custom callables.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/forms.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\nimport withAttr from 'flarum/common/utils/withAttr';\n\nconst value = Stream();\n\n// With a stream\n<input type=\"text\" value={value()} oninput={withAttr('value', value)}></input>\n\n// With any callable\n<input type=\"text\" value={value()} oninput={withAttr('value', (currValue) => {\n  // Some custom logic here\n})}></input>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Sort for Index Endpoint in PHP\nDESCRIPTION: Example of setting a default sort order for the Index endpoint in a Flarum API resource.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Endpoint;\n\npublic function endpoints(): array\n{\n    return [\n        Endpoint\\Index::make()\n            ->defaultSort('-createdAt'),\n            ->paginate(),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Sending requests in tests\nDESCRIPTION: This code snippet shows how to send HTTP requests in Flarum tests using the `request()` and `send()` methods. It demonstrates how to construct a request with authentication and query parameters, and how to send a POST request with a JSON body to create a user. The response status code is then checked for validation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    /**\n     * @test\n     */\n    public function can_search_users()\n    {\n        $response = $this->send(\n          $this->request('GET', '/api/users', ['authenticatedAs' => 1])\n               ->withQueryParams(['filter' => ['q' => 'john group:1'], 'sort' => 'username'])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    /**\n     * @test\n     */\n    public function can_create_user()\n    {\n        $response = $this->send(\n          $this->request(\n                'POST',\n                '/api/users',\n                [\n                    'authenticatedAs' => 1,\n                    'json' => [\n                        'data' => [\n                            'attributes' => [\n                                'username' => 'test',\n                                'password' => 'too-obscure',\n                                'email' => 'test@machine.local'\n                            ]\n                        ]\n                    ]\n                ]\n            )\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Cached Data in the Frontend Store in JavaScript\nDESCRIPTION: Shows how to access data from the store cache without making additional API requests, using the all and getById methods. Also demonstrates how to access attributes and relationships from model instances.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussions = app.store.all('discussions');\nconst discussion = app.store.getById('discussions', 123);\n```\n\n----------------------------------------\n\nTITLE: Extending Multiple Methods in Flarum\nDESCRIPTION: Shows how to extend multiple methods simultaneously by passing an array of method names to the extend utility.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nextend(IndexPage.prototype, ['oncreate', 'onupdate'], () => { /* your logic */ });\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Service Provider in Flarum's extend.php\nDESCRIPTION: This code snippet shows how to register a custom service provider in Flarum's extend.php file using the ServiceProvider extender. This allows the custom service provider to be integrated into Flarum's boot process.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/service-provider.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    // Other extenders\n    (new Extend\\ServiceProvider())\n        ->register(CustomServiceProvider::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Saving and Deleting Resources in Frontend JavaScript\nDESCRIPTION: This code demonstrates how to save changes to a model instance, including relationships, and how to delete a resource using the frontend store in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n\nuser.save({\n  relationships: {\n    groups: [\n      store.getById('groups', 1),\n      store.getById('groups', 2)\n    ]\n  }\n})\n\ndiscussion.delete().then(done);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pluralization in Flarum Translations with JavaScript\nDESCRIPTION: Demonstrates how to use ICU MessageFormat for pluralization in Flarum translations, specifically for the Choose Tags modal.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/i18n.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst remaining = this.minPrimary - primaryCount;\nreturn app.translator.trans(\n  'choose_primary_placeholder',\n  { count: remaining }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sorting in List Controllers\nDESCRIPTION: Demonstrates how to configure sorting options for a list controller by setting sort and sortFields properties, and how to extract and apply sorting parameters from the request.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    // The default sort field and order to use.\n    public $sort = ['name' => 'asc'];\n\n    // The fields that are available to be sorted by.\n    public $sortFields = ['firstName', 'lastName'];\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n// ...\n\n$sort = $this->extractSort($request);\n$query = Tag::query();\n\nforeach ($sort as $field => $order) {\n    $query->orderBy(Str::snake($field), $order);\n}\n\nreturn $query->get();\n```\n\n----------------------------------------\n\nTITLE: Restricting Middleware to Specific Routes by Name\nDESCRIPTION: Demonstrates how to execute middleware only for specific routes by checking the route name attribute that is set by Flarum's ResolveRoute middleware.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/middleware.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    if ($request->getAttribute('routeName') === 'register') {\n        // Your logic here!\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Permissions for Flarum Extension in JavaScript\nDESCRIPTION: Example of how to register permissions for a Flarum extension. This code shows how to define the permission icon, label, name, and scope.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/admin.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('interstellar', function(app) {\n\n  app.extensionData\n    .for('acme-interstellar')\n    .registerPermission(\n      {\n        icon: 'fas fa-rocket', // Icone Font-Awesome\n        label: app.translator.trans('acme-interstellar.admin.permissions.fly_rockets_label'), // Etichetta di autorizzazione\n        permission: 'discussion.rocket_fly', // Nome effettivo dell'autorizzazione memorizzato nel database (e utilizzato durante il controllo dell'autorizzazione).\n        tagScoped: true, // Se è possibile applicare questo permesso ai Tag, non solo in maniera globale. Spiegato nel paragrafo successivo.\n      }, \n      'start', // Il permesso di categoria verrà aggiunto alla griglia\n      95 // Opzional: Priorità\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Filter and Mutator in PHP for Flarum\nDESCRIPTION: This code demonstrates how to register a custom filter and filter mutator using Flarum's Filter extender. It adds the CountryFilter and OnlySameCountryFilterMutator to the UserFilterer.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\Filter(UserFilterer::class))\n    ->addFilter(CountryFilter::class)\n    ->addFilterMutator(OnlySameCountryFilterMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: Generating Developer Token (PHP)\nDESCRIPTION: This snippet shows how to generate a developer token using the `Flarum\\Http\\DeveloperAccessToken::generate($userId)` method. Developer tokens do not expire and can be created from an extension. The function requires a `$userId` parameter that specifies the user ID for whom the token is being generated.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"Flarum\\\\Http\\\\DeveloperAccessToken::generate($userId)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Database Columns Migration - PHP\nDESCRIPTION: Demonstrates how to add new columns to an existing table using Flarum's Migration helper.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addColumns('users', [\n    'email' => ['string', 'length' => 255, 'nullable' => true],\n    'discussion_count' => ['integer', 'unsigned' => true]\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Routes in PHP for Flarum Extensions\nDESCRIPTION: Example of how to define a new backend route for a Flarum extension using the Routes extender. This snippet shows how to add a GET route to the 'forum' collection.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\nuse Acme\\HelloWorld\\HelloWorldController;\n\nreturn [\n    (new Extend\\Routes('forum'))\n        ->get('/hello-world', 'acme.hello-world', HelloWorldController::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Relationships in PHP for Flarum\nDESCRIPTION: Shows how to define custom relationships using the relationship method of the Model extender, allowing for more complex relationship types like morphMany.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->relationship('mobile', 'App\\Phone', function ($user) {\n            // Return any Eloquent relationship here.\n            return $user->belongsToMany(Discussion::class, 'recipients')\n                ->withTimestamps()\n                ->wherePivot('removed_at', null);\n        })\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Binding in Flarum Forms\nDESCRIPTION: Demonstrates how to use the bidi attribute for bidirectional binding in Flarum forms. It compares traditional input processing with the simplified bidi approach.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/forms.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\n\nconst value = Stream();\n\n// Without bidi\n<input type=\"text\" value={value()} oninput={e => value(e.target.value)}></input>\n\n// With bidi\n<input type=\"text\" bidi={value}></input>\n```\n\n----------------------------------------\n\nTITLE: Flarum 1.x Draft Creation Implementation\nDESCRIPTION: The original implementation for draft creation in Flarum 1.x, showing the controller and handler classes. This code demonstrates how drafts are created, permissions are checked, and attributes are processed in the old architecture.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass CreateDraftController extends AbstractCreateController\n{\n    public $serializer = DraftSerializer::class;\n\n    public $include = [\n        'user',\n    ];\n\n    protected $bus;\n\n    public function __construct(Dispatcher $bus)\n    {\n        $this->bus = $bus;\n    }\n\n    protected function data(ServerRequestInterface $request, Document $document)\n    {\n        $actor = RequestUtil::getActor($request);\n        $ipAddress = $request->getAttribute('ipAddress');\n\n        return $this->bus->dispatch(\n            new CreateDraft($actor, Arr::get($request->getParsedBody(), 'data', []), $ipAddress)\n        );\n    }\n}\n\nclass CreateDraftHandler\n{\n    use Scheduled;\n\n    public function handle(CreateDraft $command)\n    {\n        $actor = $command->actor;\n        $data = $command->data;\n        $attributes = Arr::get($data, 'attributes', []);\n\n        $actor->assertCan('user.saveDrafts');\n\n        $draft = new Draft();\n\n        $draft->user_id = $actor->id;\n        $draft->title = Arr::pull($attributes, 'title');\n        $draft->content = Arr::pull($attributes, 'content');\n\n        $draft->extra = count($attributes) > 0 ? json_encode($attributes) : null;\n        $draft->scheduled_for = $this->getScheduledFor($attributes, $actor);\n        $draft->updated_at = Carbon::now();\n        $draft->ip_address = $command->ipAddress;\n\n        if (Arr::has($attributes, 'clearValidationError')) {\n            $draft->scheduled_validation_error = '';\n        }\n\n        $draft->save();\n\n        return $draft;\n    }\n}\n\ntrait Scheduled\n{\n    protected function getScheduledFor(array $attributes, User $actor): ?Carbon\n    {\n        $scheduled = Arr::get($attributes, 'scheduledFor');\n\n        if ($scheduled && $actor->can('user.scheduleDrafts')) {\n            return Carbon::parse($scheduled);\n        }\n\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mailable Notifications in PHP for Flarum\nDESCRIPTION: This code demonstrates how to create a mailable notification by implementing both BlueprintInterface and MailableInterface. It includes methods for email view and subject generation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Mentions\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\MailableInterface;\nuse Flarum\\Post\\Post;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass PostMentionedBlueprint implements BlueprintInterface, MailableInterface\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var Post\n     */\n    public $reply;\n\n    /**\n     * @param Post $post\n     * @param Post $reply\n     */\n    public function __construct(Post $post, Post $reply)\n    {\n        $this->post = $post;\n        $this->reply = $reply;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getFromUser()\n    {\n        return $this->reply->user;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getData()\n    {\n        return ['replyNumber' => (int) $this->reply->number];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailView()\n    {\n        return ['text' => 'flarum-mentions::emails.postMentioned'];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailSubject(TranslatorInterface $translator)\n    {\n        return $translator->trans('flarum-mentions.email.post_mentioned.subject', [\n            '{replier_display_name}' => $this->post->user->display_name,\n            '{title}' => $this->post->discussion->title\n        ]);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getType()\n    {\n        return 'postMentioned';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Console Command Testing\nDESCRIPTION: This code snippet illustrates how to test custom console commands in a Flarum extension. It extends `ConsoleTestCase` and utilizes the `$this->console()` and `$this->runCommand()` methods to execute commands and assert their outputs. The example showcases how to define input parameters and options for the command.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Tests\\integration\\ConsoleTestCase;\n\nclass ConsoleTest extends ConsoleTestCase\n{\n    /**\n     * @test\n     */\n    public function command_works()\n    {\n        $input = [\n            'command' => 'some:command',  // The command name, equivalent of `php flarum some:command`\n            'foo' => 'bar',  // arguments\n            '--lorem' => 'ipsum'  // options\n        ];\n\n        $this->assertEquals('Some Output.', $this->runCommand($input));\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Storage Drivers in PHP\nDESCRIPTION: Demonstrates how to register a custom storage driver using the Filesystem extender. This example registers an 'aws-with-cdn' driver with a custom implementation class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/filesystem.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Filesystem)\n        ->driver('aws-with-cdn', AwsWithCdnDriver::class);\n```\n\n----------------------------------------\n\nTITLE: Custom Counter Component Example\nDESCRIPTION: Implementation of a custom Counter component extending Flarum's base Component class, demonstrating lifecycle methods and state management.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/common/Component';\n\nclass Counter extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.count = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        Count: {this.count}\n        <button onclick={e => this.count++}>\n          {this.attrs.buttonLabel}\n        </button>\n      </div>\n    );\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    // We aren't actually doing anything here, but this would\n    // be a good place to attach event handlers, initialize libraries\n    // like sortable, or make other DOM modifications.\n    $element = this.$();\n    $button = this.$('button');\n  }\n}\n\nm.mount(document.body, <MyComponent buttonLabel=\"Increment\" />);\n```\n\n----------------------------------------\n\nTITLE: Declaring a Language Pack in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to declare a language pack using the Flarum LanguagePack extender. It shows the simple instantiation required to set up a language pack without additional logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/language-packs.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn new Flarum\\Extend\\LanguagePack();\n```\n\n----------------------------------------\n\nTITLE: Using Link Component for Internal and External Links in Flarum (JSX)\nDESCRIPTION: Demonstrates how to use Flarum's Link component to create internal and external links in JSX. It shows various use cases including basic usage, route generation, and external linking.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'flarum/common/components/Link';\n\n// Link can be used just like any other component:\n<Link href=\"/route/known/to/mithril\">Hello World!</Link>\n\n// You'll frequently use Link with generated routes:\n<Link href={app.route('settings')}>Hello World!</Link>\n\n// Link can even generate external links with the external attr:\n<Link external={true} href=\"https://google.com\">Hello World!</Link>\n\n// The above example with external = true is equivalent to:\n<a href=\"https://google.com\">Hello World!</a>\n// but is provided for flexibility: sometimes you might have links\n// that are conditionally internal or external.\n```\n\n----------------------------------------\n\nTITLE: Overriding Existing Views in Flarum\nDESCRIPTION: Shows how to override templates added by core or other extensions by setting up a matching folder structure and using the extendNamespace method of the View extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/views.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->extendNamespace('acme.hello-world', __DIR__.'/override_views')\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Filter Mutator for Same Country Users in PHP\nDESCRIPTION: This snippet shows how to create a filter mutator that restricts the query to only include users from the same country as the current user. It's applied to all filter requests.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterState;\nuse Flarum\\Query\\QueryCriteria;\n\nclass OnlySameCountryFilterMutator\n{\n    public function __invoke(FilterState $filterState, QueryCriteria $queryCriteria)\n    {\n        $filterState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Extension Page in Flarum Admin\nDESCRIPTION: Shows how to create a custom extension page that overrides the default page in the Flarum admin panel.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/admin.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport ExtensionPage from 'flarum/admin/components/ExtensionPage';\n\nexport default class StarPage extends ExtensionPage {\n  content() {\n    return (\n      <h1>Hello from the settings section!</h1>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Columns to an Existing Table\nDESCRIPTION: Migration example that adds multiple columns to an existing table with various column types and attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/models.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addColumns('users', [\n    'email' => ['string', 'length' => 255, 'nullable' => true],\n    'discussion_count' => ['integer', 'unsigned' => true]\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Flarum Extenders in PHP\nDESCRIPTION: Example showing how to implement the new extenders concept in extend.php file, which replaces common event listeners. Shows configuration of frontend assets, routes and event subscribers.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-b8.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less')\n        ->route('/t/{slug}', 'tag')\n        ->route('/tags', 'tags'),\n\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\AddForumTagsRelationship::class);\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Using withAttr Utility for Simplified Form Processing in Flarum\nDESCRIPTION: This snippet shows how to use the withAttr utility in Flarum for simplified form processing. It demonstrates its usage with both streams and custom callables for handling input changes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/forms.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\nimport withAttr from 'flarum/common/utils/withAttr';\n\nconst value = Stream();\n\n// With a stream\n<input type=\"text\" value={value()} oninput={withAttr('value', value)}></input>\n\n// With any callable\n<input type=\"text\" value={value()} oninput={withAttr('value', (currValue) => {\n  // Some custom logic here\n})}></input>\n```\n\n----------------------------------------\n\nTITLE: Updated Component Children Syntax in Flarum\nDESCRIPTION: Examples showing the correct way to pass children to components in Flarum with Mithril 2, either as the second argument of the component method or through JSX.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Old way (no longer works)\nButton.component({\n  className: 'Button Button--primary',\n  children: 'Button Text'\n});\n\n// New way - using second argument\nButton.component({\n  className: 'Button Button--primary'\n}, 'Button Text');\n\n// Alternative - using JSX\n<Button className='Button Button--primary'>Button Text</Button>\n```\n\n----------------------------------------\n\nTITLE: Creating Flarum Models using CLI\nDESCRIPTION: These commands use the Flarum CLI to generate model files for both the backend and frontend of a Flarum extension. The CLI tool automates the creation of basic model structures, reducing boilerplate code and ensuring consistency.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend model\n$ flarum-cli make frontend model\n```\n\n----------------------------------------\n\nTITLE: Defining User Interface Translation Suffixes in YAML\nDESCRIPTION: Suffixes used for translation keys related to user interface elements in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/i18n.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n_button:        # Used for buttons (including dropdown menu items).\n_link:          # Used for links that are not shown graphically as buttons.\n_heading:       # Used for headings in tables and lists.\n_label:         # Used for the names of data fields, checkbox settings, etc.\n_placeholder:   # Used for placeholder text displayed in fields.\n```\n\n----------------------------------------\n\nTITLE: Mocking Flarum Services in PHP Unit Tests\nDESCRIPTION: Demonstrates how to mock Flarum services in PHP unit tests using Mockery. It shows setting up mocks for settings repository and user authentication.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function setUp(): void\n{\n    parent::setUp();\n    // example - if our setting needs settings, we can mock the settings repository\n    $settingsRepo = m::mock(SettingsRepositoryInterface::class);\n    // and then control specific return values for each setting key\n    $settingsRepo->shouldReceive('get')->with('some-plugin-key')->andReturn('some-value-useful-for-testing');\n    // construct your class under test, passing mocked services as needed\n    $this->serializer = new YourClassUnderTest($settingsRepo);\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing the DefaultSlugDriver in Flarum\nDESCRIPTION: Shows how to leverage the DefaultSlugDriver in Flarum to generate slugs from model properties. This example extends DefaultSlugDriver to create slugs from the title attribute of a model.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/slugging.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Foundation\\GlobalLocator;\nuse Flarum\\Http\\SlugDriverWithRoutePrefix;\nuse Flarum\\Database\\AbstractModel as Model;\n\nclass CustomSlugDriver extends DefaultSlugDriver implements SlugDriverWithRoutePrefix\n{\n    // Assuming a model named `TitleTrait` with a property named `title`\n    // and a model named `Discussion` that uses that trait.\n    public function toSlug(Model $instance): string\n    {\n        return Str::slug($instance->title);\n    }\n\n    public function routePrefix(): string\n    {\n        return 'd';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Event Listeners with Flarum CLI\nDESCRIPTION: Example of using Flarum CLI to generate event listeners. It shows how to register listeners using the Event extender and create a listener class with dependency injection.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->listen(Deleted::class, function($event) {\n          // do something here\n        })\n        ->listen(Deleted::class, PostDeletedListener::class)\n];\n\n\nclass PostDeletedListener\n{\n  protected $translator;\n\n  public function __construct(TranslatorInterface $translator)\n  {\n      $this->translator = $translator;\n  }\n\n  public function handle(Deleted $event)\n  {\n    // Your logic here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Middleware to Specific Routes by Path\nDESCRIPTION: Shows how to make middleware execute only for specific routes by checking the requested URI path against a target path.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/middleware.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Laminas\\Diactoros\\Uri;\n\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n  {\n    $currentRoute = $request->getUri()->getPath();\n    $routeToRunUnder = new Uri(app()->url('/path/to/run/under'));\n\n    if ($currentRoute === $routeToRunUnder->getPath()) {\n        // Your logic here!\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Search Filters and Mutators\nDESCRIPTION: Shows how to register custom filters and mutators with Flarum's search driver extender system.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/search.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Search\\Database\\DatabaseSearchDriver;\nuse Flarum\\User\\Search\\UserSearcher;\n\nreturn [\n  // Other extenders..\n  \n    (new Extend\\SearchDriver(DatabaseSearchDriver::class))\n        ->addFilter(UserSearcher::class, CountryFilter::class)\n        ->addMutator(UserSearcher::class, OnlySameCountryFilterMutator::class),\n    \n  // Other extenders..\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Relationship Inclusion in Flarum API\nDESCRIPTION: Demonstrates how to configure relationship inclusion and linkage in API responses\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\npublic function fields(): array\n{\n    return [\n        Schema\\Relationship\\ToOne::make('user')\n            ->type('users')\n            ->includable()\n            ->withoutLinkage(),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Create API Controller in PHP\nDESCRIPTION: Shows how to create a controller for creating a new resource by extending AbstractCreateController and implementing the data method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractCreateController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass CreateTagController extends AbstractCreateController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        $attributes = Arr::get($request->getParsedBody(), 'data.attributes');\n\n        return Tag::create([\n            'name' => Arr::get($attributes, 'name')\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Response After Handling in Flarum Middleware\nDESCRIPTION: This code demonstrates how to modify the response after the initial request has been handled in Flarum middleware. It shows adding a custom header to the response.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    $response = $handler->handle($request);\n\n    // Your logic...\n    $response = $response->withHeader('Content-Type', 'application/json');\n\n    return $response;\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging a Version in Git for Flarum Extension Release\nDESCRIPTION: This snippet shows how to tag a version and push it to the remote Git repository. It's used to mark a specific point in the Git history for releasing a new version of a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/distribution.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v0.1.0\ngit push && git push --tags\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Scopers in Flarum - PHP\nDESCRIPTION: This snippet demonstrates how to register custom visibility scopers for the `Tag` and `Discussion` models within Flarum. It shows the process of applying the scopers to respective models to control visibility based on defined conditions.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\Tags\\Tag;\nuse YourNamespace\\Access;\n\nreturn [\n  // Other extenders\n\n  // 'view' is optional here, since that's the default value for the ability argument.\n  // However, if we were applying this to a different ability, such as `viewPrivate`,\n  // would need to explicitly specify that.\n  (new Extend\\ModelVisibility(Tag::class))\n    ->scope(Access\\ScopeTagVisibility::class, 'view'),\n\n  (new Extend\\ModelVisibility(Discussion::class))\n    ->scopeAll(Access\\ScopeDiscussionVisibilityForAbility::class),\n  // Other extenders\n];\n\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPStan for Flarum Extensions\nDESCRIPTION: PHPStan configuration file (phpstan.neon) for Flarum extensions, specifying analysis level, paths, and other parameters.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_1\n\nLANGUAGE: neon\nCODE:\n```\nincludes:\n  - vendor/flarum/phpstan/extension.neon\n\nparameters:\n  # The level will be increased in Flarum 2.0\n  level: 5\n  paths:\n    - src\n    - extend.php\n  excludePaths:\n    - *.blade.php\n  checkMissingIterableValueType: false\n  databaseMigrationsPath: ['migrations']\n```\n\n----------------------------------------\n\nTITLE: Configuring TextFormatter in Flarum\nDESCRIPTION: This code snippet demonstrates how to configure the TextFormatter Configurator instance, as well as run custom logic during parsing and rendering, using the `Formatter` extender in Flarum. It showcases adding custom BBCode, modifying raw text before parsing, and altering the XML before rendering. The extender is used to customize the text formatting process.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/formatting.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Flarum\\Extend;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse s9e\\TextFormatter\\Configurator;\nuse s9e\\TextFormatter\\Parser;\nuse s9e\\TextFormatter\\Renderer;\n\nreturn [\n    (new Extend\\Formatter)\n        // Add custom text formatter configuration\n        ->configure(function (Configurator $config) {\n            $config->BBCodes->addFromRepository('B');\n        })\n        // Modify raw text before it is parsed.\n        // This callback should return the modified text.\n        ->parse(function (Parser $parser, $context, $text) {\n            // custom logic here\n            return $newText;\n        })\n        // Modify the XML to be rendered before rendering.\n        // This callback should return the new XML.\n        // For example, in the mentions extension, this is used to\n        // provide the username and display name of the user being mentioned.\n        // Make sure that the last $request argument is nullable (or omitted entirely).\n        ->render(function (Renderer $renderer, $context, $xml, Request $request = null) {\n            // custom logic here\n            return $newXml;\n        })\n];\n?>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoping for Database Resources in PHP\nDESCRIPTION: Example of implementing the scope method to apply visibility restrictions on API resources in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Tobyz\\JsonApiServer\\Context;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\npublic function scope(Builder $query, Context $context): void\n{\n    $query->whereVisibleTo($context->getActor());\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Select Setting for Flarum Extension\nDESCRIPTION: Shows how to register a select setting for a Flarum extension. It includes options for the select field and a default value.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/admin.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  setting: 'acme-interstellar.fuel_type',\n  label: app.translator.trans('acme-interstellar.admin.fuel_type_label'),\n  type: 'select',\n  options: {\n    'LOH': 'Liquid Fuel',\n    'RDX': 'Solid Fuel',\n  },\n  default: 'LOH',\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Models in JavaScript Store\nDESCRIPTION: JavaScript code showing how to register a custom model with Flarum's store to enable API interaction with a new resource type.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\napp.store.models.tags = Tag;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cron Job for Scheduled Tasks\nDESCRIPTION: Example cron job configuration to automatically run scheduled tasks at regular intervals. This should be added to the server's crontab.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * cd /path-to-your-flarum-install && php flarum schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Registering Frontend JavaScript in PHP\nDESCRIPTION: Shows how to register JavaScript files for loading in the Flarum frontend using the Frontend extender.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/frontend.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n];\n```\n\n----------------------------------------\n\nTITLE: Scheduling Commands in Flarum Using Console Extender\nDESCRIPTION: This snippet demonstrates how to schedule a command to run at regular intervals using the FriendsOfFlarum console library. The schedule method takes the command name, a callback to configure the scheduling, and optional command arguments.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/console.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Console\\CustomCommand;\nuse Illuminate\\Console\\Scheduling\\Event;\n\nreturn [\n    // Other extenders\n    (new Extend\\Console())->schedule('cache:clear', function (Event $event) {\n        $event->everyMinute();\n    }, ['Arg1', '--option1', '--option2']),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Create Resource Controller in PHP\nDESCRIPTION: Example of a controller for creating resources, extending AbstractCreateController with create logic implementation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractCreateController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass CreateTagController extends AbstractCreateController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        $attributes = Arr::get($request->getParsedBody(), 'data.attributes');\n\n        return Tag::create([\n            'name' => Arr::get($attributes, 'name')\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modal Display with Stacks in Flarum\nDESCRIPTION: Demonstrates how to show a modal in a stack within the Flarum frontend, allowing multiple modals to be open at once. This is useful for scenarios where a modal needs to open another modal.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-1_x.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.modal.show(ModalComponent, { attrs }, true)\n```\n\n----------------------------------------\n\nTITLE: Converting Component Lifecycle Methods from Mithril 0.2 to Mithril 2.0\nDESCRIPTION: Demonstrates how to convert component lifecycle methods from Mithril 0.2 to Mithril 2.0, including init → oninit, config → oncreate/onupdate, and the handling of subtree directives vs. onbeforeupdate returns.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass OldMithrilComponent extends Component {\n  init() {\n    console.log('Code to run when component instance created, but before attached to the DOM.');\n  }\n\n  config(element, isInitialized) {\n    console.log('Code to run on every redraw AND when the element is first attached');\n\n    if (isInitialized) return;\n\n    console.log('Code to execute only once when components are first created and attached to the DOM');\n\n    context.onunload = () => {\n      console.log('Code to run when the component is removed from the DOM');\n    }\n  }\n\n  view() {\n    // In mithril 0, you could skip redrawing a component (or part of a component) by returning a subtree retain directive.\n    // See https://mithril.js.org/archive/v0.2.5/mithril.render.html#subtree-directives\n    // dontRedraw is a substitute for logic; usually, this is used together with SubtreeRetainer.\n    if (dontRedraw()) return { subtree: 'retain' };\n\n    return <p>Hello World!</p>;\n  }\n}\n\nclass NewMithrilComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    console.log('Code to run when component instance created, but before attached to the DOM.');\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    console.log('Code to run when components are first created and attached to the DOM');\n  }\n\n  onbeforeupdate(vnode, oldVnode) {\n    super.onbeforeupdate(vnode);\n\n    console.log('Code to run BEFORE diffing / redrawing components on every redraw');\n\n    // In mithril 2, if we want to skip diffing / redrawing a component, we return \"false\" in its onbeforeupdate lifecycle hook.\n    // See https://mithril.js.org/lifecycle-methods.html#onbeforeupdate\n    // This is also typically used with SubtreeRetainer.\n    if (dontRedraw()) return false;\n  }\n\n  onupdate(vnode) {\n    // Unlike config, this does NOT run when components are first attached.\n    // Some code might need to be replicated between oncreate and onupdate.\n    console.log('Code to run on every redraw AFTER the DOM is updated.');\n  }\n\n  onbeforeremove(vnode) {\n    // This is run before components are removed from the DOM.\n    // If a promise is returned, the DOM element will only be removed when the\n    // promise completes. It is only called on the top-level component that has\n    // been removed. It has no equivalent in Mithril 0.2.\n    // See https://mithril.js.org/lifecycle-methods.html#onbeforeremove\n    return Promise.resolve();\n  }\n\n  onremove(vnode) {\n      console.log('Code to run when the component is removed from the DOM');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Help with Custom Format\nDESCRIPTION: Shows how to output help information in XML format for the 'list' command using the --format option.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum help --format=xml list\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current User in Flarum Extension\nDESCRIPTION: Shows how to get the current user object from a request in a Flarum extension. Returns a User instance which might be a Guest user.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$request->getAttribute('actor')\n```\n\n----------------------------------------\n\nTITLE: Loading Composer Components with Attributes in Flarum JS\nDESCRIPTION: Demonstrates the transition from passing component instances to passing component classes and attributes when loading a composer in Flarum, aligning with updates in Mithril.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.composer.load(DiscussionComposer, {user: app.session.user})\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in PHP\nDESCRIPTION: Extracts pagination parameters from request and applies them to query\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$limit = $this->extractLimit($request);\n$offset = $this->extractOffset($request);\n\nreturn Tag::skip($offset)->take($limit);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom User Filter in Flarum\nDESCRIPTION: This code snippet shows how to create a CountryFilter class that implements FilterInterface to filter users by their country. It defines a filter key and implements the filter logic to query the database based on the country field.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterInterface;\nuse Flarum\\Filter\\FilterState;\n\nclass CountryFilter implements FilterInterface\n{\n    public function getFilterKey(): string\n    {\n        return 'country';\n    }\n\n    public function filter(FilterState $filterState, string $filterValue, bool $negate)\n    {\n        $country = trim($filterValue, '\"');\n\n        $filterState->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Counter Component in Mithril.js\nDESCRIPTION: Example of creating a custom counter component using Flarum's Component class with Mithril.js lifecycle methods\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/common/Component';\n\nclass Counter extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.count = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        Count: {this.count}\n        <button onclick={e => this.count++}>\n          {this.attrs.buttonLabel}\n        </button>\n      </div>\n    );\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    // We aren't actually doing anything here, but this would\n    // be a good place to attach event handlers, initialize libraries\n    // like sortable, or make other DOM modifications.\n    $element = this.$();\n    $button = this.$('button');\n  }\n}\n\nm.mount(document.body, <MyComponent buttonLabel=\"Increment\" />);\n```\n\n----------------------------------------\n\nTITLE: Using Route Helpers in JavaScript\nDESCRIPTION: Example of using a custom route helper method to generate URLs in the frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = app.route.acmeUser(user);\n// http://yourforum.com/users/123\n```\n\n----------------------------------------\n\nTITLE: Updating Preference Saving in Flarum JavaScript\nDESCRIPTION: This code shows how to update preference saving in Flarum. It demonstrates the removal of the preferenceSaver method and how to directly save preferences instead.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nSwitch.component({\n  children: app.translator.trans('core.forum.settings.privacy_disclose_online_label'),\n  state: this.user.preferences().discloseOnline,\n  onchange: (value) => {\n    this.discloseOnlineLoading = true;\n\n    this.user.savePreferences({ discloseOnline: value }).then(() => {\n      this.discloseOnlineLoading = false;\n      m.redraw();\n    });\n  },\n  loading: this.discloseOnlineLoading,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Search Mutator in PHP for Flarum\nDESCRIPTION: This code snippet shows how to implement a search mutator in Flarum. It filters users to only those from the same country as the actor performing the search, demonstrating how to modify the search query.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Query\\QueryCriteria;\nuse Flarum\\Search\\SearchState;\n\nclass OnlySameCountrySearchMutator\n{\n    public function __invoke(SearchState $searchState, QueryCriteria $queryCriteria)\n    {\n        $searchState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Open Modals Using Component Classes in Mithril\nDESCRIPTION: This code snippet illustrates the new method for opening modals in Mithril applications by passing the component class and its attributes instead of an instance of the component. This aligns with the requirement not to store component instances.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.modal.show(LoginModal, {identification: 'prefilledUsername'});\n```\n\n----------------------------------------\n\nTITLE: Adding Columns in Flarum Migrations\nDESCRIPTION: This example shows how to add columns to an existing table in a Flarum migration. The `Migration::addColumns` helper is used, which takes the table name and an array of column definitions. Each column definition includes column type and optional properties like length or nullable status.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addColumns('users', [\n    'email' => ['string', 'length' => 255, 'nullable' => true],\n    'discussion_count' => ['integer', 'unsigned' => true]\n]);\n```\n\n----------------------------------------\n\nTITLE: Rendering Blade Templates in Flarum\nDESCRIPTION: This snippet shows how to render Blade templates to strings in Flarum. It demonstrates rendering a view with and without passing variables.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/views.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, $view is of type `Illuminate\\Contracts\\View\\Factory`\n$renderedString = $view->make('acme.hello-world::greeting')->render();\n\n// You can also pass variables to the view:\n$renderedString = $view->make('acme.hello-world::greeting', ['varName' => true])->render();\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Component in Flarum\nDESCRIPTION: Demonstrates building a form using Flarum's form components with state management and input handling\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/forms.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/common/Component';\nimport FieldSet from 'flarum/common/components/FieldSet';\nimport Button from 'flarum/common/components/Button';\nimport Switch from 'flarum/common/components/Switch';\n\n\nclass FormComponent extends Component {\n  oninit(vnode) {\n    this.textInput = \"\";\n    this.booleanInput = false;\n  }\n\n  view() {\n    return (\n      <form onsubmit={this.onsubmit.bind(this)}>\n        <FieldSet label={app.translator.trans('fake-extension.form.fieldset_label')}>\n          <input className=\"FormControl\" value={this.textInput} oninput={e => this.textInput = e.target.value}>\n          </input>\n          <Switch state={this.booleanInput} onchange={val => this.booleanInput = val}>\n          </Switch>\n        </FieldSet>\n        <Button type=\"submit\">{app.translator.trans('core.admin.basics.submit_button')}</Button>\n      </form>\n    )\n  }\n\n  onsubmit() {\n    // Some form handling logic here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Country Gambit in Flarum PHP\nDESCRIPTION: Defines a custom search gambit for filtering users by country. The 'CountryGambit' class extends 'AbstractRegexGambit' and specifies a pattern to match against search queries. It utilizes the SearchState object to build the necessary query conditions based on the matched country.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Search\\AbstractRegexGambit;\nuse Flarum\\Search\\SearchState;\n\nclass CountryGambit extends AbstractRegexGambit\n{\n    public function getGambitPattern(): string\n    {\n        return 'country:(.+)';\n    }\n\n    public function conditions(SearchState $search, array $matches, bool $negate)\n    {\n        $country = trim($matches[1], '\"');\n\n        $search->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring New Filesystem Disks in PHP\nDESCRIPTION: Shows how to use the Filesystem extender to declare a new disk for an extension. This example creates a 'flarum-uploads' disk with a specified root directory and URL.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/filesystem.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Filesystem)\n        ->disk('flarum-uploads', function (Paths $paths, UrlGenerator $url) {\n            return [\n                'root'   => \"$paths->public/assets/uploads\",\n                'url'    => $url->to('forum')->path('assets/uploads')\n            ];\n        });\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Visibility Scoper for Private Posts in PHP\nDESCRIPTION: Demonstrates how to create a custom visibility scoper that allows certain users to view private posts. This example shows how extensions can modify visibility logic defined in core or other extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopePostVisibility\n{\n    public function __invoke(User $actor, $query)\n    {\n      if ($actor->can('posts.viewPrivate')) {\n        $query->whereRaw(\"1=1\");\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming a Table in Flarum Migration\nDESCRIPTION: Shows how to use the Migration::renameTable helper to rename an existing table in a Flarum database migration.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nreturn Migration::renameTable($from, $to);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Post Type in Flarum\nDESCRIPTION: Example code for registering a custom post type in Flarum using the extend() method. This snippet shows how to add a new post type by specifying the driver class and the type name.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/post-types.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\PostType\\SpecialPost;\n\nreturn [\n    // Other extenders\n    (new Extend\\Post)\n        ->type(SpecialPost::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Search Mutator for Same Country Users in PHP\nDESCRIPTION: This code snippet shows how to implement a search mutator that filters users to only those from the same country as the actor. It uses the SearchState and QueryCriteria to modify the search query.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Query\\QueryCriteria;\nuse Flarum\\Search\\SearchState;\n\nclass OnlySameCountrySearchMutator\n{\n    public function __invoke(SearchState $searchState, QueryCriteria $queryCriteria)\n    {\n        $searchState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TextFormatter in Flarum using PHP\nDESCRIPTION: This snippet demonstrates how to use the Formatter extender to configure the TextFormatter, modify raw text before parsing, and modify XML before rendering. It shows the setup for custom BBCode, parsing logic, and rendering modifications.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/formatting.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse s9e\\TextFormatter\\Configurator;\nuse s9e\\TextFormatter\\Parser;\nuse s9e\\TextFormatter\\Renderer;\n\nreturn [\n    (new Extend\\Formatter)\n        // Add custom text formatter configuration\n        ->configure(function (Configurator $config) {\n            $config->BBCodes->addFromRepository('B');\n        })\n        // Modify raw text before it is parsed.\n        // This callback should return the modified text.\n        ->parse(function (Parser $parser, $context, $text) {\n            // custom logic here\n            return $newText;\n        })\n        // Modify the XML to be rendered before rendering.\n        // This callback should return the new XML.\n        // For example, in the mentions extension, this is used to\n        // provide the username and display name of the user being mentioned.\n        // Make sure that the last $request argument is nullable (or omitted entirely).\n        ->render(function (Renderer $renderer, $context, $xml, Request $request = null) {\n            // custom logic here\n            return $newXml;\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring TextFormatter in Flarum\nDESCRIPTION: This code snippet demonstrates how to configure the TextFormatter in Flarum using the `Formatter` extender. It shows how to add custom BBCode, modify the raw text before parsing, and modify the XML before rendering. It includes dependency declarations for necessary classes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/formatting.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\nuse Flarum\\Extend;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse s9e\\TextFormatter\\Configurator;\nuse s9e\\TextFormatter\\Parser;\nuse s9e\\TextFormatter\\Renderer;\n\nreturn [\n    (new Extend\\Formatter)\n        // Add custom text formatter configuration\n        ->configure(function (Configurator $config) {\n            $config->BBCodes->addFromRepository('B');\n        })\n        // Modify raw text before it is parsed.\n        // This callback should return the modified text.\n        ->parse(function (Parser $parser, $context, $text) {\n            // custom logic here\n            return $newText;\n        })\n        // Modify the XML to be rendered before rendering.\n        // This callback should return the new XML.\n        // For example, in the mentions extension, this is used to\n        // provide the username and display name of the user being mentioned.\n        // Make sure that the last $request argument is nullable (or omitted entirely).\n        ->render(function (Renderer $renderer, $context, $xml, Request $request = null) {\n            // custom logic here\n            return $newXml;\n        })\n];\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Notification Driver in PHP for Flarum\nDESCRIPTION: This snippet shows how to create a PusherNotificationDriver class that implements NotificationDriverInterface to add a new notification driver for Pusher in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Pusher;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\Driver\\NotificationDriverInterface;\nuse Illuminate\\Contracts\\Queue\\Queue;\n\nclass PusherNotificationDriver implements NotificationDriverInterface\n{\n    /**\n     * @var Queue\n     */\n    protected $queue;\n\n    public function __construct(Queue $queue)\n    {\n        $this->queue = $queue;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function send(BlueprintInterface $blueprint, array $users): void\n    {\n        // The `send` method is responsible for determining any notifications need to be sent.\n        // If not (for example, if there are no users to send to), there's no point in scheduling a job.\n        // We HIGHLY recommend that notifications are sent via a queue job for performance reasons.\n        if (count($users)) {\n            $this->queue->push(new SendPusherNotificationsJob($blueprint, $users));\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function registerType(string $blueprintClass, array $driversEnabledByDefault): void\n    {\n        // This method is generally used to register a user preference for this notification.\n        // In the case of pusher, there's no need for this.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Permission in Flarum Admin\nDESCRIPTION: Demonstrates how to register a new permission in the Flarum admin panel using the Admin extender.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/admin.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\nimport app from 'flarum/admin/app';\n\nreturn [\n  new Extend.Admin()\n    .permission(\n      () => ({\n        icon: 'fas fa-rocket',\n        label: app.translator.trans('acme-interstellar.admin.permissions.fly_rockets_label', {}, true),\n        permission: 'discussion.rocket_fly',\n        tagScoped: true,\n      }),\n      'start',\n      95\n    )\n];\n```\n\n----------------------------------------\n\nTITLE: Backend Notification Synchronization in PHP\nDESCRIPTION: Implement notification sending and removal logic using NotificationSyncer for Flarum extensions\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/notifications.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Listener;\n\nuse Flarum\\Event\\ConfigureNotificationTypes;\nuse Flarum\\Likes\\Event\\PostWasLiked;\nuse Flarum\\Likes\\Event\\PostWasUnliked;\nuse Flarum\\Likes\\Notification\\PostLikedBlueprint;\nuse Flarum\\Notification\\NotificationSyncer;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nclass SendNotificationWhenPostIsLiked\n{\n    protected $notifications;\n\n    public function __construct(NotificationSyncer $notifications)\n    {\n        $this->notifications = $notifications;\n    }\n\n    public function subscribe(Dispatcher $events)\n    {\n        $events->listen(PostWasLiked::class, [$this, 'whenPostWasLiked']);\n        $events->listen(PostWasUnliked::class, [$this, 'whenPostWasUnliked']);\n    }\n\n    public function whenPostWasLiked(PostWasLiked $event)\n    {\n        $this->syncNotification($event->post, $event->user, [$event->post->user]);\n    }\n\n    public function whenPostWasUnliked(PostWasUnliked $event)\n    {\n        $this->syncNotification($event->post, $event->user, []);\n    }\n\n    public function syncNotification(Post $post, User $user, array $recipients)\n    {\n        if ($post->user->id != $user->id) {\n            $this->notifications->sync(\n                new PostLikedBlueprint($post, $user),\n                $recipients\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Blade Templates in PHP\nDESCRIPTION: This snippet shows how to render Blade templates to strings using the view factory. It demonstrates rendering a template with and without passing variables.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/views.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, $view is of type `Illuminate\\Contracts\\View\\Factory`\n$renderedString = $view->make('acme.hello-world::greeting')->render();\n\n// You can also pass variables to the view:\n$renderedString = $view->make('acme.hello-world::greeting', ['varName' => true])->render();\n```\n\n----------------------------------------\n\nTITLE: Mocking Flarum Services in PHP\nDESCRIPTION: Demonstrates how to mock Flarum services in PHP unit tests, including setting up mocks for settings repository and user authentication.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function setUp(): void\n{\n    parent::setUp();\n    // example - if our setting needs settings, we can mock the settings repository\n    $settingsRepo = m::mock(SettingsRepositoryInterface::class);\n    // and then control specific return values for each setting key\n    $settingsRepo->shouldReceive('get')->with('some-plugin-key')->andReturn('some-value-useful-for-testing');\n    // construct your class under test, passing mocked services as needed\n    $this->serializer = new YourClassUnderTest($settingsRepo);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->actor = m::mock(User::class);\n$request = m::mock(Request::class)->makePartial();\n$request->shouldReceive('getAttribute->getActor')->andReturn($this->actor);\n$this->actor->shouldReceive('SOME PERMISSION')->andReturn(true/false);\n```\n\n----------------------------------------\n\nTITLE: Registering a Notification Type in PHP\nDESCRIPTION: Example of registering a notification type using the Notification extender. This code specifies the blueprint class, serializer, and default notification methods for the NewPostBlueprint notification.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/notifications.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Api\\Serializer\\BasicDiscussionSerializer;\nuse Flarum\\Extend\nuse Flarum\\Subscriptions\\Notification\\NewPostBlueprint;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->type(NewPostBlueprint::class, BasicDiscussionSerializer::class, ['alert', 'email']),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Notification Driver in Flarum\nDESCRIPTION: Example of implementing a custom notification driver for Pusher integration. This driver implements NotificationDriverInterface and handles sending real-time notifications via a queue system.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Pusher;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\Driver\\NotificationDriverInterface;\nuse Illuminate\\Contracts\\Queue\\Queue;\n\nclass PusherNotificationDriver implements NotificationDriverInterface\n{\n    /**\n     * @var Queue\n     */\n    protected $queue;\n\n    public function __construct(Queue $queue)\n    {\n        $this->queue = $queue;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function send(BlueprintInterface $blueprint, array $users): void\n    {\n        // The `send` method is responsible for determining any notifications need to be sent.\n        // If not (for example, if there are no users to send to), there's no point in scheduling a job.\n        // We HIGHLY recommend that notifications are sent via a queue job for performance reasons.\n        if (count($users)) {\n            $this->queue->push(new SendPusherNotificationsJob($blueprint, $users));\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function registerType(string $blueprintClass, array $driversEnabledByDefault): void\n    {\n        // This method is generally used to register a user preference for this notification.\n        // In the case of pusher, there's no need for this.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Settings Extender for Frontend Access\nDESCRIPTION: This snippet shows how to use the Settings extender in extend.php to make specific settings available in the forum frontend. It demonstrates both direct serialization and value transformation with a default fallback.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n   (new Extend\\Settings)\n      ->serializeToForum('myCoolSetting', 'my.cool.setting.key')\n      ->serializeToForum('myCoolSettingModified', 'my.cool.setting.key', function ($retrievedValue) {\n        // This third argument is optional, and allows us to pass the retrieved setting through some custom logic.\n        // In this example, we'll append a string to it.\n\n        return \"My Cool Setting: $retrievedValue\";\n      }, \"default value!\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Tag Policy Implementation Example\nDESCRIPTION: Example of a model-specific policy implementation for Tags, showing how to control discussion creation and tag addition permissions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/authorization.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\Access\\AbstractPolicy;\nuse Flarum\\User\\User;\n\nclass TagPolicy extends AbstractPolicy\n{\n    /**\n     * @param User $actor\n     * @param Tag $tag\n     * @return bool|null\n     */\n    public function startDiscussion(User $actor, Tag $tag)\n    {\n        if ($tag->is_restricted) {\n            return $actor->hasPermission('tag'.$tag->id.'.startDiscussion') ? $this->allow() : $this->deny();\n        }\n    }\n\n    /**\n     * @param User $actor\n     * @param Tag $tag\n     * @return bool|null\n     */\n    public function addToDiscussion(User $actor, Tag $tag)\n    {\n        return $this->startDiscussion($actor, $tag);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Modal Component in Flarum\nDESCRIPTION: An example of how to create a custom modal component by extending Flarum's base Modal class. The snippet demonstrates how to customize the modal's appearance, title, content, and form submission behavior.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/interactive-components.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Modal from 'flarum/components/Modal';\n\nexport default class CustomModal extends Modal {\n  // Vero per impostazione predefinita, determina se il modale può essere ignorato facendo clic sullo sfondo o nell'angolo in alto a destra.\n  static isDismissible = true;\n\n  className() {\n    // Classi CSS personalizzate da applicare al modale\n    return 'custom-modal-class';\n  }\n\n  title() {\n    // Contenuto da mostrare nella barra del titolo del modale\n    return <p>Custom Modal</p>;\n  }\n\n  content() {\n    // Contenuto da mostrare nel corpo del modale\n    return <p>Hello World!</p>;\n  }\n\n  onsubmit() {\n    // Se il tuo modale contiene un modulo, puoi aggiungere qui la logica di elaborazione dello stesso.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Frontend Model Definition\nDESCRIPTION: Shows how to create a new frontend model class with attributes and relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport Model from 'flarum/common/Model';\n\nexport default class Tag extends Model {\n  title = Model.attribute('title');\n  createdAt = Model.attribute('createdAt', Model.transformDate);\n  parent = Model.hasOne('parent');\n  discussions = Model.hasMany('discussions');\n}\n```\n\n----------------------------------------\n\nTITLE: Loading JavaScript in Flarum Extension (PHP)\nDESCRIPTION: This snippet shows how to use the Frontend extender to load a custom JavaScript file into Flarum's frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n];\n```\n\n----------------------------------------\n\nTITLE: State Instance Pattern in Flarum JavaScript\nDESCRIPTION: This example showcases how to manage shared data across unrelated components by using a Plain Old JavaScript Object (POJO) to maintain application state, emulating service singletons in Angular or Ember.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Counter {\n  constructor() {\n    this._counter = 0;\n  }\n\n  increaseCounter() {\n    this._counter += 1;\n  }\n\n  getCount() {\n    return this._counter;\n  }\n}\n\napp.counter = new Counter();\n\nextend(HeaderSecondary.prototype, 'items', function(items) {\n  items.add('counterDisplay',\n    <div>\n      <p>Counter: {app.counter.getCount()}</p>\n    </div>\n  );\n})\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('counterButton',\n    <div>\n      <button onclick={() => app.counter.increaseCounter()}>Increase Counter</button>\n    </div>\n  );\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Multiple Methods in Flarum Components\nDESCRIPTION: Shows how to use the 'extend' utility to modify multiple methods of a component simultaneously.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend.md#2025-04-16_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nextend(IndexPage.prototype, ['oncreate', 'onupdate'], () => { /* your logic */ });\n```\n\n----------------------------------------\n\nTITLE: Writing Unit Tests for Frontend Utilities in TypeScript\nDESCRIPTION: Illustrates how to write unit tests for frontend utility functions using Jest in a Flarum extension, specifically testing the abbreviateNumber function.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport abbreviateNumber from '../../../../src/common/utils/abbreviateNumber';\n\ntest('does not change small numbers', () => {\n  expect(abbreviateNumber(1)).toBe('1');\n});\n\ntest('abbreviates large numbers', () => {\n  expect(abbreviateNumber(1000000)).toBe('1M');\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n});\n\ntest('abbreviates large numbers with decimal places', () => {\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n  expect(abbreviateNumber(13234)).toBe('13.2K');\n});\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing API Throttlers in Flarum\nDESCRIPTION: This code snippet shows how to customize API throttling by adding a new throttler and removing an existing one using the ThrottleApi extender in Flarum's extend.php configuration file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/api-throttling.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    // Other extenders\n    (new Extend\\ThrottleApi())\n        ->set('throttleAll', function () {\n          return false;\n        })\n        ->remove('bypassThrottlingAttribute'),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Eager Loading API Controller in PHP\nDESCRIPTION: An example of using the new ApiController extender to add includes and eager load relationships for the ListDiscussionsController.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    (new Extend\\ApiController(FlarumController\\ListDiscussionsController::class))\n        ->addInclude(['tags', 'tags.state', 'tags.parent'])\n        ->load('tags'),\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Notification Component in Flarum's Forum JavaScript\nDESCRIPTION: This snippet shows how to register a custom notification component in Flarum's forum JavaScript. It extends the NotificationGrid to include the new notification type in the user's notification settings.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport NotificationGrid from 'flarum/forum/components/NotificationGrid';\n\nimport PostLikedNotification from './components/PostLikedNotification';\n\napp.initializers.add('flarum-likes', () => {\n  app.notificationComponents.postLiked = PostLikedNotification;\n\n  extend(NotificationGrid.prototype, 'notificationTypes', function (items) {\n    items.add('postLiked', {\n      name: 'postLiked',\n      icon: 'far fa-thumbs-up',\n      label: app.translator.trans('flarum-likes.forum.settings.notify_post_liked_label')\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Importing from Extensions in Flarum\nDESCRIPTION: Example of how to import components or functionality from other Flarum extensions. This demonstrates the correct syntax for importing from the Tags extension.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport TagsPage from 'ext:flarum/tags/components/TagsPage';\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Name in Flarum Middleware\nDESCRIPTION: If your middleware runs after `Flarum\\Http\\Middleware\\ResolveRoute`, this code demonstrates how to access the route name using `$request->getAttribute('routeName')`. This allows you to conditionally execute your middleware logic based on the current route name.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/middleware.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    if ($request->getAttribute('routeName') === 'register') {\n        // Your logic here!\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Notification Driver in PHP\nDESCRIPTION: Example of registering a custom notification driver using Flarum's Notification extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend\nuse Flarum\\Pusher\\PusherNotificationDriver;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->driver('pusher', PusherNotificationDriver::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Notification Driver in PHP\nDESCRIPTION: Example of creating a custom notification driver for Pusher integration.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/notifications.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Pusher;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\Driver\\NotificationDriverInterface;\nuse Illuminate\\Contracts\\Queue\\Queue;\n\nclass PusherNotificationDriver implements NotificationDriverInterface\n{\n    /**\n     * @var Queue\n     */\n    protected $queue;\n\n    public function __construct(Queue $queue)\n    {\n        $this->queue = $queue;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function send(BlueprintInterface $blueprint, array $users): void\n    {\n        if (count($users)) {\n            $this->queue->push(new SendPusherNotificationsJob($blueprint, $users));\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function registerType(string $blueprintClass, array $driversEnabledByDefault): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Eloquent Relationship Definition\nDESCRIPTION: Demonstrates how to create custom model relationships using the relationship method for complex scenarios like morphMany or morphToMany.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->relationship('mobile', 'App\\Phone', function ($user) {\n            // Return any Eloquent relationship here.\n            return $user->belongsToMany(Discussion::class, 'recipients')\n                ->withTimestamps()\n                ->wherePivot('removed_at', null);\n        })\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Indexer in PHP\nDESCRIPTION: Example of implementing the IndexerInterface to create a custom search indexer for Flarum. Shows required methods for saving, deleting, building and flushing indexes.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/search.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace YourPackage\\Search;\n\nuse Flarum\\Search\\IndexerInterface;\n\nclass AcmeIndexer implements IndexerInterface\n{\n    public static function index(): string\n    {\n        return 'acmes';\n    }\n\n    public function save(array $models): void\n    {\n        // Save the models to the index.\n    }\n\n    public function delete(array $models): void\n    {\n        // Delete the models from the index.\n    }\n\n    public function build(): void\n    {\n        // Build the index.\n    }\n\n    public function flush(): void\n    {\n        // Flush the index.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Commands in Flarum\nDESCRIPTION: This PHP code demonstrates how to create scheduled commands that run on an interval using the Flarum\\Extend\\Console's schedule method. It includes setting up a schedule for the cache:clear command to run every minute.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/console.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Console\\CustomCommand;\nuse Illuminate\\Console\\Scheduling\\Event;\n\nreturn [\n    // Other extenders\n    (new Extend\\Console())->schedule('cache:clear', function (Event $event) {\n        $event->everyMinute();\n    }, ['Arg1', '--option1', '--option2']),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Filters and Mutators via Flarum Extender\nDESCRIPTION: Shows how to register a custom filter and filter mutator using Flarum's Filter extender. This connects the custom filter components to Flarum's filtering system for the User model.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\Filter(UserFilterer::class))\n    ->addFilter(CountryFilter::class)\n    ->addFilterMutator(OnlySameCountryFilterMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: PHP Global Function Callback\nDESCRIPTION: Example of using global functions as callbacks in extenders, which is now supported in Beta 16.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Using global function as callback\n'boolval'\n\n// Using static class method\n[ClassName::class, 'methodName']\n```\n\n----------------------------------------\n\nTITLE: Route-Specific Middleware Implementation\nDESCRIPTION: Shows how to restrict middleware execution to specific routes using URI path comparison.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Laminas\\Diactoros\\Uri;\n\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n  {\n    $currentRoute = $request->getUri()->getPath();\n    $routeToRunUnder = new Uri(app()->url('/path/to/run/under'));\n\n    if ($currentRoute === $routeToRunUnder->getPath()) {\n        // Your logic here!\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination Settings in PHP Controllers\nDESCRIPTION: PHP code showing how to set default and maximum limit parameters for paginated resource listings in a Flarum API controller.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n    // Il numero di record inclusi per impostazione predefinita.\n    public $limit = 20;\n    \n    // Il numero massimo di record che possono essere richiesti.\n    public $maxLimit = 50;\n```\n\n----------------------------------------\n\nTITLE: Using AffixedSidebar Component for Affixed Sidebars (JavaScript)\nDESCRIPTION: Example of replacing the deprecated affixSidebar util with the new AffixedSidebar component. This change affects how sidebars are implemented in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nclass NewWay extends Component {\n  view() {\n    return <div>\n      <div className=\"container\">\n        <div className=\"sideNavContainer\">\n          <AffixedSidebar>\n            <nav className=\"sideNav\">\n              <p>Affixed Sidebar</p>\n            </nav>\n          </AffixedSidebar>\n          <div className=\"sideNavOffset\">Actual Page Content</div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Delete Controller for JSON:API in Flarum\nDESCRIPTION: Shows how to create a controller for deleting resources that extends AbstractDeleteController. The example implements a DeleteTagController that deletes a tag by ID.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractDeleteController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nclass DeleteTagController extends AbstractDeleteController\n{    \n    protected function delete(Request $request)\n    {\n        $id = Arr::get($request->getQueryParams(), 'id');\n        \n        Tag::findOrFail($id)->delete();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Views Namespace in PHP\nDESCRIPTION: Extension configuration to set up a custom view namespace for Blade templates in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views');\n];\n```\n\n----------------------------------------\n\nTITLE: Customizing Frontend Document Content in Flarum with PHP\nDESCRIPTION: Using the Frontend extender to modify the HTML document served to users. Shows how to add custom scripts to the document head and how to customize specific routes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Frontend\\Document;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->content(function (Document $document, Request $request) {\n            $document->head[] = '<script>alert(\"Hello, world!\")</script>';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Default Settings in Flarum Migration\nDESCRIPTION: Demonstrates how to add default settings using a data migration in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addSettings([\n    'foo' => 'bar',\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Serializer Relationships in PHP for Flarum API\nDESCRIPTION: Shows how to define relationships in a serializer by creating methods that return hasOne or hasMany relationships, specifying the related model and its serializer.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n    protected function user($discussion)\n    {\n        return $this->hasOne($discussion, UserSerializer::class);\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPStan for Flarum Extensions\nDESCRIPTION: Sample configuration for PHPStan in a Flarum extension, including analysis level, paths, and specific parameters.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_1\n\nLANGUAGE: neon\nCODE:\n```\nincludes:\n  - vendor/flarum/phpstan/extension.neon\n\nparameters:\n  # The level will be increased in Flarum 2.0\n  level: 5\n  paths:\n    - src\n    - extend.php\n  excludePaths:\n    - *.blade.php\n  checkMissingIterableValueType: false\n  databaseMigrationsPath: ['migrations']\n```\n\n----------------------------------------\n\nTITLE: Implementing Gambit Autocomplete UI\nDESCRIPTION: Example of implementing a gambit autocomplete dropdown component in the UI.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/search.md#2025-04-16_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<GambitsAutocompleteDropdown resource=\"users\" query={this.query} onchange={onchange}>\n  <Input\n    type=\"search\"\n    placeholder={app.translator.trans('core.admin.users.search_placeholder')}\n    clearable={true}\n    loading={this.isLoadingPage}\n    value={this.query}\n    onchange={onchange}\n  />\n</GambitsAutocompleteDropdown>\n```\n\n----------------------------------------\n\nTITLE: Creating a Discussion API Request\nDESCRIPTION: Example JSON payload for creating a new discussion using the POST /api/discussions endpoint. Includes title, content, and tag relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\":{\n    \"type\": \"discussions\",\n    \"attributes\": {\n      \"title\": \"Lorem Ipsum\",\n      \"content\": \"Hello World\"\n    },\n    \"relationships\": {\n      \"tags\": {\n        \"data\": [\n          {\n            \"type\": \"tags\",\n            \"id\": \"1\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Frontend Models in TypeScript\nDESCRIPTION: Demonstrates how to add attributes and relationships to existing frontend models using the Model extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nnew Extend.Model(Discussion)\n  .attribute<string>('slug')\n  .hasOne<User>('user')\n  .hasMany<Post>('posts')\n```\n\n----------------------------------------\n\nTITLE: Creating a Notification Component in Flarum (JSX)\nDESCRIPTION: Example of a NewPostNotification component from Flarum Subscriptions that extends the base Notification component. This implementation defines the icon, href, and content methods to customize how the notification appears to users.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Notification from 'flarum/forum/components/Notification';\nimport username from 'flarum/common/helpers/username';\n\nexport default class NewPostNotification extends Notification {\n  icon() {\n    return 'fas fa-star';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n    const discussion = notification.subject();\n    const content = notification.content() || {};\n\n    return app.route.discussion(discussion, content.postNumber);\n  }\n\n  content() {\n    return app.translator.trans('flarum-subscriptions.forum.notifications.new_post_text', {user: this.attrs.notification.fromUser()});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Relationships in PHP for Flarum Controllers\nDESCRIPTION: Demonstrates how to specify default and optional relationships to include in API responses for listing, showing, or creating resources in Flarum controllers.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    // The relationships that are included by default.\n    public $include = ['user'];\n\n    // Other relationships that are available to be included.\n    public $optionalInclude = ['discussions'];\n```\n\n----------------------------------------\n\nTITLE: Checking Extension Availability in Backend\nDESCRIPTION: PHP class demonstrating how to check if an optional dependency extension is enabled using the ExtensionManager.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extension\\ExtensionManager;\n\nclass SomeClass {\n    public function __construct(ExtensionManager $extensions)\n    {\n        $this->extensions = $extensions;\n    }\n\n    public function someMethod()\n    {\n        if ($this->extensions->isEnabled('some-extension-id')) {\n            // do something.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Flarum Extension\nDESCRIPTION: Basic webpack configuration file that uses Flarum's official webpack config for extension development.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = require('flarum-webpack-config');\n\nmodule.exports = config();\n```\n\n----------------------------------------\n\nTITLE: Vote Field Schema Definition in PHP\nDESCRIPTION: Demonstrates how to implement a vote field schema with proper validation and permission checking in Flarum 2.x.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nSchema\\Str::make('vote')\n    ->hidden()\n    ->writable(function (Post $post, Context $context) {\n        return $context->updating()\n            && $context->getActor()->can('vote', $post);\n    })\n    ->in(['up', 'down'])\n    ->nullable()\n    ->set(function (Post $post, ?string $value, Context $context) {\n        if ($this->settings->get('fof-gamification.rateLimit')) {\n            $this->assertNotFlooding($context->getActor());\n        }\n\n        $this->vote($post, $value, $context->getActor());\n    }),\n```\n\n----------------------------------------\n\nTITLE: Defining New Flarum Storage Drivers\nDESCRIPTION: This code snippet demonstrates how to define a new storage driver in Flarum using the `Filesystem` extender.  It registers a driver named 'aws-with-cdn' and associates it with the `AwsWithCdnDriver` class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/filesystem.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Filesystem)\n        ->driver('aws-with-cdn', AwsWithCdnDriver::class);\n```\n\n----------------------------------------\n\nTITLE: Exporting Frontend Components in Flarum Extension\nDESCRIPTION: Example showing how to export classes and functions from a Flarum extension's frontend index.js file to make them available for other extensions to use or modify.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/extensibility.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('your-extension-id', () => {\n  // Your Extension Code Here\n})\n\nexport {\n  // Put all the stuff you want to export here.\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Cached Store Data in JavaScript\nDESCRIPTION: Shows how to access cached data from the store\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussions = app.store.all('discussions');\nconst discussion = app.store.getById('discussions', 123);\n```\n\n----------------------------------------\n\nTITLE: Updating Modal and Alert Usage in JavaScript\nDESCRIPTION: Demonstrates the changes in how modals and alerts are shown in Flarum. Instead of passing component instances, we now pass the component class and attributes separately.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Old way\napp.modal.show(new LoginModal(identification: 'prefilledUsername'));\n\n// New way\napp.modal.show(LoginModal, {identification: 'prefilledUsername'});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Old way\napp.alerts.show(new Alert(type: 'success', children: 'Hello, this is a success alert!'));\n\n// New way\napp.alerts.show('Hello, this is a success alert!');\napp.alerts.show({type: 'success'}, 'Hello, this is a success alert!');\napp.alerts.show(Alert, {type: 'success'}, 'Hello, this is a success alert!');\n```\n\n----------------------------------------\n\nTITLE: Implementing MailgunDriver Class for Custom Mail Driver in PHP\nDESCRIPTION: This code snippet demonstrates how to create a custom mail driver class for Flarum, implementing the DriverInterface. It includes methods for defining available settings, validation, checking if sending is possible, and building the transport.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/mail.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Mail\\DriverInterface;\nuse Illuminate\\Contracts\\Validation\\Factory;\nuse Illuminate\\Mail\\Transport\\MailgunTransport;\nuse Illuminate\\Support\\MessageBag;\nuse Swift_Transport;\n\nclass MailgunDriver implements DriverInterface\n{\n    public function availableSettings(): array\n    {\n        return [\n            'setting_one' => '',\n            'setting_two' => 'defaultValue',\n            'dropdown_setting' => [\n                'option_one_val' => 'Option One Display',\n                'option_two_val' => 'Option Two Display',\n            ],\n        ];\n    }\n\n    public function validate(SettingsRepositoryInterface $settings, Factory $validator): MessageBag\n    {\n        $validator->make($settings->all(), [\n            'setting_one' => 'required',\n            'setting_two' => 'nullable|integer',\n        ])->errors();\n    }\n\n    public function canSend(): bool\n    {\n        return true;\n    }\n\n    public function buildTransport(SettingsRepositoryInterface $settings): Swift_Transport\n    {\n        // Return a mail transport that implements Swift Transport\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Resources in JavaScript\nDESCRIPTION: Demonstrates how to delete model instances\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.delete().then(done);\n```\n\n----------------------------------------\n\nTITLE: Declaring Extension Dependencies in composer.json\nDESCRIPTION: Example of how to specify required extensions in the composer.json file of a Flarum extension. This ensures proper installation and loading order of dependencies.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.15\",\n    \"flarum/tags\": \"^0.1.0-beta.15\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Loose Data Grouping Across Database Systems\nDESCRIPTION: Shows how to handle differences in GROUP BY behavior between PostgreSQL and other database systems. PostgreSQL requires all columns in the SELECT clause to be in the GROUP BY clause, while MySQL and SQLite are more permissive.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/database.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$query\n  ->whenPgSql(function ($query) {\n      // PostgreSQL\n      $query->select('id', 'name', 'created_at')\n          ->distinct('name')\n          ->orderBy('name');\n  }, else: function ($query) {\n      // MySQL, SQLite\n      $query->select('id', 'name', 'created_at')\n          ->groupBy('name');\n  });\n```\n\n----------------------------------------\n\nTITLE: Modifying Flarum UI with JavaScript\nDESCRIPTION: JavaScript code demonstrating how to extend a Flarum component to add a new item to the header. This example adds a link to Google in the primary header.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend.md#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Binding with Streams in JSX\nDESCRIPTION: This snippet demonstrates how to use streams with bidirectional binding (bidi) in Flarum forms. It shows the difference between manual input processing and using the bidi attribute.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/forms.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\n\nconst value = Stream();\n\n// Without bidi\n<input type=\"text\" value={value()} oninput={e => value(e.target.value)}></input>\n\n// With bidi\n<input type=\"text\" bidi={value}></input>\n```\n\n----------------------------------------\n\nTITLE: Basic Authorization Examples in PHP\nDESCRIPTION: Core authorization methods available through the Flarum\\User\\User class for checking permissions and asserting user capabilities.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/authorization.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Check whether a user can perform an action.\n$canDoSomething = $actor->can('viewForum');\n\n// Check whether a user can perform an action on a subject.\n$canDoSomething = $actor->can('reply', $discussion);\n\n// Raise a PermissionDeniedException if a user cannot perform an action.\n$actor->assertCan('viewForum');\n$actor->assertCan('reply', $discussion);\n\n// Raise a NotAuthenticatedException if the user is not logged in.\n$actor->assertRegistered();\n\n// Raise a PermissionDeniedException if the user is not an admin.\n$actor->assertAdmin();\n\n// Check whether one of the user's groups have a permission.\n// WARNING: this should be used with caution, as it doesn't actually\n// run through the authorization process, so it doesn't account for policies.\n// It is, however, useful in implementing custom policies.\n$actorHasPermission = $actor->hasPermission(`viewForum`);\n```\n\n----------------------------------------\n\nTITLE: Importing Classes from Other Extensions in Flarum Backend\nDESCRIPTION: This PHP code shows how to import and use classes from other Flarum extensions in the backend using PHP use statements.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Tags\\Tag;\n\nclass SomeClass\n{\n    public function someMethod()\n    {\n        return new Tag();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Frontend Notification Component in React/Flarum\nDESCRIPTION: Create a custom notification component for displaying notification details, including icon, href, and content rendering\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/notifications.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Notification from 'flarum/forum/components/Notification';\nimport username from 'flarum/common/helpers/username';\n\nexport default class NewPostNotification extends Notification {\n  icon() {\n    return 'fas fa-star';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n    const discussion = notification.subject();\n    const content = notification.content() || {};\n\n    return app.route.discussion(discussion, content.postNumber);\n  }\n\n  content() {\n    return app.translator.trans('flarum-subscriptions.forum.notifications.new_post_text', {user: this.attrs.notification.fromUser()});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Event Subscriber Class\nDESCRIPTION: Example implementation of an event subscriber class that listens to multiple events. Shows how to define a subscribe method and separate handler methods for each event type.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/backend-events.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass PostEventSubscriber\n{\n    protected $translator;\n  \n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n  \n    public function subscribe($events)\n    {\n        $events->listen(Deleted::class, [$this, 'handleDeleted']);\n        $events->listen(Saving::class, [$this, 'handleSaving']);\n    }\n  \n    public function handleDeleted(Deleted $event)\n    {\n        // Your logic here\n    }\n  \n    public function handleSaving(Saving $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Notification Type in PHP for Flarum\nDESCRIPTION: This code snippet shows how to register a new notification type in Flarum using the Notification extender. It specifies the blueprint class, serializer, and default notification methods (alert and email).\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Api\\Serializer\\BasicDiscussionSerializer;\nuse Flarum\\Extend\nuse Flarum\\Subscriptions\\Notification\\NewPostBlueprint;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->type(NewPostBlueprint::class, BasicDiscussionSerializer::class, ['alert', 'email']),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Slug Driver in PHP for Flarum\nDESCRIPTION: This code snippet shows how to register a custom slug driver in Flarum. It demonstrates the process of extending the SlugManager and adding a new driver for a specific model.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/slugging.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Http\\SlugManager;\n\nreturn [\n    (new Extend\\SlugDriver(YourModel::class))\n        ->addDriver(YourSlugDriver::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Requests in Flarum Integration Tests\nDESCRIPTION: Examples of sending GET and POST requests in Flarum integration tests. It shows how to authenticate requests, set query parameters, and send JSON data in the request body.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    /**\n     * @test\n     */\n    public function can_search_users()\n    {\n        $response = $this->send(\n          $this->request('GET', '/api/users', ['authenticatedAs' => 1])\n               ->withQueryParams(['filter' => ['q' => 'john group:1'], 'sort' => 'username'])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    /**\n     * @test\n     */\n    public function can_create_user()\n    {\n        $response = $this->send(\n          $this->request(\n                'POST',\n                '/api/users',\n                [\n                    'authenticatedAs' => 1,\n                    'json' => [\n                        'data' => [\n                            'attributes' => [\n                                'username' => 'test',\n                                'password' => 'too-obscure',\n                                'email' => 'test@machine.local'\n                            ]\n                        ]\n                    ]\n                ]\n            )\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Notification Type in Flarum\nDESCRIPTION: Example of registering a notification type using the Notification extender. Configures the blueprint class, serializer, and default notification methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Api\\Serializer\\BasicDiscussionSerializer;\nuse Flarum\\Extend\nuse Flarum\\Subscriptions\\Notification\\NewPostBlueprint;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->type(NewPostBlueprint::class, BasicDiscussionSerializer::class, ['alert', 'email']),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Defining API Controller Relationships in PHP\nDESCRIPTION: Demonstrates how to specify default and optional relationships in an API controller using $include and $optionalInclude properties.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n    // The relationships that are included by default.\n    public $include = ['user'];\n\n    // Other relationships that are available to be included.\n    public $optionalInclude = ['discussions'];\n```\n\n----------------------------------------\n\nTITLE: Global Policy Implementation Example\nDESCRIPTION: Example of a global policy implementation that handles forum-wide permissions based on tag settings.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/authorization.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\Access\\AbstractPolicy;\nuse Flarum\\User\\User;\n\nclass GlobalPolicy extends AbstractPolicy\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n\n    /**\n     * @param Flarum\\User\\User $actor\n     * @param string $ability\n     * @return bool|void\n     */\n    public function can(User $actor, string $ability)\n    {\n        if (in_array($ability, ['viewForum', 'startDiscussion'])) {\n            $enoughPrimary = count(Tag::getIdsWhereCan($actor, $ability, true, false)) >= $this->settings->get('min_primary_tags');\n            $enoughSecondary = count(Tag::getIdsWhereCan($actor, $ability, false, true)) >= $this->settings->get('min_secondary_tags');\n\n            if ($enoughPrimary && $enoughSecondary) {\n                return $this->allow();\n            } else {\n                return $this->deny();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Notification Type in PHP for Flarum\nDESCRIPTION: This snippet shows how to register a new notification type in Flarum using the Notification extender. It specifies the blueprint class, serializer, and default notification methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Api\\Serializer\\BasicDiscussionSerializer;\nuse Flarum\\Extend\nuse Flarum\\Subscriptions\\Notification\\NewPostBlueprint;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->type(NewPostBlueprint::class, BasicDiscussionSerializer::class, ['alert', 'email']),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Pluralizable Translations in YAML for Flarum Extensions\nDESCRIPTION: This YAML snippet demonstrates how to define translations that can be pluralized in Flarum extensions. It includes placeholders for users and indicates that the translations can be pluralized, which is important for localization in languages other than English.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/i18n.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nmentioned_by_text: \"{users} replied to this.\"       # Can be pluralized ...\nmentioned_by_self_text: \"{users} replied to this.\"  # Can be pluralized ...\n```\n\n----------------------------------------\n\nTITLE: Adding Columns to Existing Tables in Flarum\nDESCRIPTION: Using Migration::addColumns helper to add new columns to an existing table. The example shows adding 'email' and 'discussion_count' columns to the 'users' table with various attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addColumns('users', [\n    'email' => ['string', 'length' => 255, 'nullable' => true],\n    'discussion_count' => ['integer', 'unsigned' => true]\n]);\n```\n\n----------------------------------------\n\nTITLE: Mocking User Authentication in Flarum\nDESCRIPTION: Example of mocking user authentication and permissions in Flarum tests\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n    $this->actor = m::mock(User::class);\n    $request = m::mock(Request::class)->makePartial();\n    $request->shouldReceive('getAttribute->getActor')->andReturn($this->actor);\n    $this->actor->shouldReceive('SOME PERMISSION')->andReturn(true/false);\n```\n\n----------------------------------------\n\nTITLE: Managing Translations with Pluralization in YAML\nDESCRIPTION: This YAML configuration manages translation strings that can be pluralized, specifically addressing how responses vary depending on the number of users involved in an action. It highlights the criticality of passing the appropriate variable to the translator for correct pluralization.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nmentioned_by_text: \"{users} replied to this.\"\nmentioned_by_self_text: \"{users} replied to this.\"\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Flarum Filesystem Disks\nDESCRIPTION: This code snippet demonstrates how to access an existing disk (flarum-assets) in Flarum using the Filesystem Factory. It injects the Factory contract, retrieves the desired disk, and uses it to delete a logo file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/filesystem.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Api\\Controller;\n\nuse Flarum\\Http\\RequestUtil;\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Illuminate\\Contracts\\Filesystem\\Factory;\nuse Illuminate\\Contracts\\Filesystem\\Filesystem;\nuse Laminas\\Diactoros\\Response\\EmptyResponse;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nclass DeleteLogoController extends AbstractDeleteController\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    /**\n     * @var Filesystem\n     */\n    protected $uploadDir;\n\n    /**\n     * @param SettingsRepositoryInterface $settings\n     * @param Factory $filesystemFactory\n     */\n    public function __construct(SettingsRepositoryInterface $settings, Factory $filesystemFactory)\n    {\n        $this->settings = $settings;\n        $this->uploadDir = $filesystemFactory->disk('flarum-assets');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function delete(ServerRequestInterface $request)\n    {\n        RequestUtil::getActor($request)->assertAdmin();\n\n        $path = $this->settings->get('logo_path');\n\n        $this->settings->set('logo_path', null);\n\n        if ($this->uploadDir->exists($path)) {\n            $this->uploadDir->delete($path);\n        }\n\n        return new EmptyResponse(204);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Mocking PHP Services in Flarum Tests\nDESCRIPTION: Demonstrates how to mock services and repositories for PHP testing using Mockery, focusing on setting up test scenarios with controlled service behaviors\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function setUp(): void\n{\n    parent::setUp();\n    $settingsRepo = m::mock(SettingsRepositoryInterface::class);\n    $settingsRepo->shouldReceive('get')->with('some-plugin-key')->andReturn('some-value-useful-for-testing');\n    $this->serializer = new YourClassUnderTest($settingsRepo);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Delete Resource Controller for Flarum API\nDESCRIPTION: Example of implementing a controller for deleting resources in Flarum's JSON:API. This controller extends AbstractDeleteController and implements the delete method to handle resource deletion.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractDeleteController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nclass DeleteTagController extends AbstractDeleteController\n{    \n    protected function delete(Request $request)\n    {\n        $id = Arr::get($request->getQueryParams(), 'id');\n        \n        Tag::findOrFail($id)->delete();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Test Example (TypeScript)\nDESCRIPTION: This code demonstrates a simple unit test using Jest and TypeScript for the `abbreviateNumber` function. It imports the function, defines test cases for small and large numbers, and uses `expect` and `toBe` to assert the expected output.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/testing.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport abbreviateNumber from '../../../../src/common/utils/abbreviateNumber';\n\ntest('does not change small numbers', () => {\n  expect(abbreviateNumber(1)).toBe('1');\n});\n\ntest('abbreviates large numbers', () => {\n  expect(abbreviateNumber(1000000)).toBe('1M');\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n});\n\ntest('abbreviates large numbers with decimal places', () => {\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n  expect(abbreviateNumber(13234)).toBe('13.2K');\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Serializers in PHP\nDESCRIPTION: Demonstrates how to extend existing serializers to add new attributes and relationships using the ApiSerializer extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nreturn [\n    (new Extend\\ApiSerializer(UserSerializer::class))\n        // One attribute at a time\n        ->attribute('firstName', function ($serializer, $user, $attributes) {\n            return $user->first_name\n        })\n        // Multiple modifications at once, more complex logic\n        ->mutate(function($serializer, $user, $attributes) {\n            $attributes['someAttribute'] = $user->someAttribute;\n            if ($serializer->getActor()->can('administrate')) {\n                $attributes['someDate'] = $serializer->formatDate($user->some_date);\n            }\n\n            return $attributes;\n        })\n        // API relationships\n        ->hasOne('phone', PhoneSerializer::class)\n        ->hasMany('comments', CommentSerializer::class),\n]\n```\n\n----------------------------------------\n\nTITLE: Chaining ExtensionData Methods for Flarum Extension\nDESCRIPTION: Shows how to chain multiple ExtensionData methods to register settings and permissions for a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/admin.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.extensionData\n    .for('acme-interstellar')\n    .registerSetting(...)\n    .registerSetting(...)\n    .registerPermission(...)\n    .registerPermission(...);\n```\n\n----------------------------------------\n\nTITLE: API Controller Eager Loading Example\nDESCRIPTION: Example of using the new ApiController extender to configure eager loading and includes for API endpoints to solve N+1 query issues.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    (new Extend\\ApiController(FlarumController\\ListDiscussionsController::class))\n        ->addInclude(['tags', 'tags.state', 'tags.parent'])\n        ->load('tags'),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Components in Mithril JavaScript\nDESCRIPTION: This snippet demonstrates the deprecated practice of storing component instances within parent components in Mithril. It shows how a parent component initializes a child component and incorrectly attempts to call a nonexistent render method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass ChildComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return <p>{this.counter}</p>;\n  }\n}\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.child = new ChildComponent();\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.child.counter += 1}></button>\n        {this.child.render()}\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering JavaScript Asset in Flarum Extension\nDESCRIPTION: PHP code to register a JavaScript file for a Flarum extension using the Frontend extender. This tells Flarum where to find the compiled JavaScript file for the extension.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Default Settings in a Migration\nDESCRIPTION: Data migration example for setting default application settings in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/models.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addSettings([\n    'foo' => 'bar',\n]);\n```\n\n----------------------------------------\n\nTITLE: Registering Search Components in PHP Flarum\nDESCRIPTION: Shows how to register custom search gambits and mutators using the SimpleFlarumSearch extender in Flarum's extension system.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\SimpleFlarumSearch(UserSearcher::class))\n    ->addGambit(CountryGambit::class)\n    ->addSearchMutator(OnlySameCountrySearchMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: Registering Permission for Flarum Extension\nDESCRIPTION: Demonstrates how to register a permission for a Flarum extension, including icon, label, permission name, and scope.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/admin.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('interstellar', function(app) {\n\n  app.extensionData\n    .for('acme-interstellar')\n    .registerPermission(\n      {\n        icon: 'fas fa-rocket',\n        label: app.translator.trans('acme-interstellar.admin.permissions.fly_rockets_label'),\n        permission: 'discussion.rocket_fly',\n        tagScoped: true,\n      }, \n      'start',\n      95\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying API Controller Relationships in PHP for Flarum\nDESCRIPTION: Demonstrates how to specify default and optional relationships for API controllers. These properties define which related resources can be included in the API response.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n    // The relationships that are included by default.\n    public $include = ['user'];\n\n    // Other relationships that are available to be included.\n    public $optionalInclude = ['discussions'];\n```\n\n----------------------------------------\n\nTITLE: Implementing Show API Controller in PHP\nDESCRIPTION: Demonstrates how to create a controller for showing a single resource by extending AbstractShowController and implementing the data method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractShowController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass ShowTagController extends AbstractShowController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        $id = Arr::get($request->getQueryParams(), 'id');\n\n        return Tag::findOrFail($id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Monkey Patching in Flarum (JavaScript)\nDESCRIPTION: Demonstrates simple monkey patching techniques in Flarum, including adding a global attribute and replacing a component's view method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// This adds an attribute to the `app` global.\napp.googleUrl = \"https://google.com\";\n\n// This replaces the output of the discussion page with \"Hello World\"\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\n\nDiscussionPage.prototype.view = function() {\n  return <p>Hello World</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Events with Event Extender\nDESCRIPTION: Demonstrates how to attach a listener to an event using the Event extender. It includes examples of using both a callback and a listener class with dependency injection.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Post\\Event\\Deleted;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\n\nclass SomeClass\n{\n    /**\n      * @var Dispatcher\n      */\n    protected $events;\n\n    /**\n      * @param Dispatcher $events\n      */\n    public function __construct(Dispatcher $events)\n    {\n        $this->events = $events;\n    }\n\n    public function someMethod()\n    {\n        // Logic\n        $this->events->dispatch(\n        new Deleted($somePost, $someActor)\n        );\n        // More Logic\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass PostDeletedListener\n{\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    public function handle(Deleted $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Authorization Methods in PHP\nDESCRIPTION: Examples of how to check and enforce permissions using Flarum's User class methods, including checking if a user can perform an action, asserting permissions, and checking if a user is an administrator or registered.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/authorization.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Verifica se un utente può eseguire un'azione.\n// ATTENZIONE: questo dovrebbe essere usato con cautela, poiché in realtà\n// non viene eseguito attraverso il processo di autorizzazione, quindi non tiene conto delle policy.\n$canDoSomething = $actor->can('viewForum');\n\n// Verifica se un utente può eseguire un'azione su un argomento.\n// Tuttavia, è utile nell'implementazione di criteri personalizzati.\n$canDoSomething = $actor->can('reply', $discussion);\n\n// Genera un'eccezione PermissionDeniedException se un utente non può eseguire un'azione.\n$actpr->assertAdmin();\n\n// Controlla se uno dei gruppi dell'utente dispone di un'autorizzazione.\n$actor->assertCan('viewForum');\n$actor->assertCan('reply', $discussion);\n\n// Genera un'eccezione NotAuthenticatedException se l'utente non ha efettuato il login.\n$actor->assertRegistered();\n\n// Genera un'eccezione PermissionDeniedException se l'utente non è un amministratore.\n$actorHasPermission = $actor->hasPermission(`viewForum`);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current User in Flarum Extension (PHP)\nDESCRIPTION: Demonstrates how to retrieve the current user from inside a Flarum extension using the request object. This method returns a User instance, which might be a Guest user.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$request->getAttribute('actor')\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Requests Test\nDESCRIPTION: This code snippet demonstrates how to send HTTP requests in a Flarum extension test. It shows how to use the `request()` and `send()` methods to simulate API calls, including setting query parameters and request bodies. The example includes tests for searching users and creating users via API.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    /**\n     * @test\n     */\n    public function can_search_users()\n    {\n        $response = $this->send(\n          $this->request('GET', '/api/users', ['authenticatedAs' => 1])\n               ->withQueryParams(['filter' => ['q' => 'john group:1'], 'sort' => 'username'])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    /**\n     * @test\n     */\n    public function can_create_user()\n    {\n        $response = $this->send(\n          $this->request(\n                'POST',\n                '/api/users',\n                [\n                    'authenticatedAs' => 1,\n                    'json' => [\n                        'data' => [\n                            'attributes' => [\n                                'username' => 'test',\n                                'password' => 'too-obscure',\n                                'email' => 'test@machine.local'\n                            ]\n                        ]\n                    ]\n                ]\n            )\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies in composer.json for Flarum Extension\nDESCRIPTION: Example of how to declare dependencies for a Flarum extension in the composer.json file. This snippet shows how to require both the Flarum core and another extension (tags) as dependencies.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.15\",\n    \"flarum/tags\": \"^0.1.0-beta.15\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Page to Flarum Homepage Options\nDESCRIPTION: This example shows how to add a custom page path to the Flarum admin homepage options using the `extend` functionality. It modifies the `homePageItems` of `BasicsPage` to include a new page path, allowing admins to set custom pages as community homepages easily.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport BasicsPage from 'flarum/common/components/BasicsPage';\n\nexport default function() {\n  extend(BasicsPage.prototype, 'homePageItems', items => {\n    items.add('tags', {\n      path: '/tags',\n      label: app.translator.trans('flarum-tags.admin.basics.tags_label')\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Service Provider in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to create a custom Service Provider in Flarum by extending AbstractServiceProvider. It includes both register and boot methods, showing how to interact with the container and perform custom logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/service-provider.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Foundation\\AbstractServiceProvider;\nuse Illuminate\\Contracts\\Container\\Container;\n\nclass CustomServiceProvider extends AbstractServiceProvider\n{\n    public function register()\n    {\n        // custom logic here, for example:\n        $this->container->resolving(SomeClass::class, function ($container) {\n            return new SomeClass($container->make('some.binding'));\n        });\n    }\n\n    public function boot(Container $container)\n    {\n        // custom logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Frontend Route in Flarum\nDESCRIPTION: This JavaScript code adds a frontend route with a parameter in a Flarum extension using the Routes extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n  new Extend.Routes()\n    .add('acme.user', '/user/:id', <UsersPage />)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in Flarum Migration\nDESCRIPTION: Demonstrates how to use the Migration::createTable helper to create a new table in a Flarum database migration.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Flarum\\Database\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\n\nreturn Migration::createTable('users', function (Blueprint $table) {\n    $table->increments('id');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Frontend Routes with Parameters in JavaScript\nDESCRIPTION: Shows how to define a frontend route with a parameter using the Routes extender in JavaScript.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/routes.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n  new Extend.Routes()\n    .add('acme.user', '/user/:id', <UsersPage />)\n```\n\n----------------------------------------\n\nTITLE: Deleting Resources in Flarum's Frontend\nDESCRIPTION: Shows how to delete a resource by calling the delete method on a model instance in JavaScript.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.delete().then(done);\n```\n\n----------------------------------------\n\nTITLE: Show API Controller Implementation in PHP\nDESCRIPTION: Example of an API controller for showing a single resource by extending AbstractShowController, demonstrating how to fetch and return a single model instance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractShowController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass ShowTagController extends AbstractShowController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        $id = Arr::get($request->getQueryParams(), 'id');\n\n        return Tag::findOrFail($id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Header Items with Mithril.js\nDESCRIPTION: Shows how to add a new link to the header using Mithril.js by extending the HeaderPrimary component's items method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend } from 'flarum/extend';\nimport HeaderPrimary from 'flarum/components/HeaderPrimary';\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Search Gambit for Country in PHP\nDESCRIPTION: This code snippet demonstrates how to create a custom search gambit for filtering users by country in Flarum. It extends the AbstractRegexGambit class and implements the necessary methods to handle the 'country:' search pattern.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Search\\AbstractRegexGambit;\nuse Flarum\\Search\\SearchState;\n\nclass CountryGambit extends AbstractRegexGambit\n{\n    public function getGambitPattern(): string\n    {\n        return 'country:(.+)';\n    }\n\n    public function conditions(SearchState $search, array $matches, bool $negate)\n    {\n        $country = trim($matches[1], '\"');\n\n        $search->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Locales in Flarum Extensions with PHP\nDESCRIPTION: Shows how to register translations for a Flarum extension using PHP. This code should be added to the extend.php file of the extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnew Extend\\Locales(__DIR__ . '/locale'),\n```\n\n----------------------------------------\n\nTITLE: Replacing Discussion Page output\nDESCRIPTION: This snippet demonstrates how to completely replace the view method of the `DiscussionPage` component in Flarum, effectively changing its output. It imports the `DiscussionPage` component and then overrides its `view` method with a new function that returns a simple \"Hello World\" paragraph.  It requires the `flarum/forum/components/DiscussionPage` dependency.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/frontend.md#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// This replaces the output of the discussion page with \"Hello World\"\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\n\nDiscussionPage.prototype.view = function() {\n  return <p>Hello World</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using extend and override Utils in Flarum (JSX)\nDESCRIPTION: Illustrates how to use Flarum's extend and override utils to modify component behavior without completely replacing methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend, override } from 'flarum/common/extend';\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport CustomComponentClass from './components/CustomComponentClass';\n\n// Here, we add an item to the returned ItemList. We are using a custom component\n// as discussed above. We've also specified a priority as the third argument,\n// which will be used to order these items. Note that we don't need to return anything.\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add(\n    'google',\n    <CustomComponentClass>\n      <a href=\"https://google.com\">Google</a>\n    </CustomComponentClass>,\n    5\n  );\n});\n\n// Here, we conditionally use the original output of a method,\n// or create our own ItemList, and then add an item to it.\n// Note that we MUST return our custom output.\noverride(HeaderPrimary.prototype, 'items', function(original) {\n  let items;\n\n  if (someArbitraryCondition) {\n    items = original();\n  } else {\n    items = new ItemList();\n  }\n\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n\n  return items;\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Routes with Custom Resolvers in Flarum\nDESCRIPTION: Illustrates different methods of registering routes in Flarum, including using custom resolver instances and classes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// See above for a custom page example\nimport CustomPage from './components/CustomPage';\n// See below for a custom resolver example\nimport CustomPageResolver from './resolvers/CustomPageResolver';\n\n// Use a route resolver instance\napp.routes['resolverInstance'] = {path: '/custom/path/1', resolver: {\n  onmatch: function(args) {\n    if (!app.session.user) return m.route.SKIP;\n\n    return CustomPage;\n  }\n}};\n\n// Use a custom route resolver class\napp.routes['resolverClass'] = {path: '/custom/path/2', resolverClass: CustomPageResolver, component: CustomPage};\n\n// Use the default resolver class (`flarum/common/resolvers/DefaultResolver`)\napp.routes['resolverClass'] = {path: '/custom/path/2', component: CustomPage};\n```\n\n----------------------------------------\n\nTITLE: Implementing DELETE Controller in PHP - Flarum API\nDESCRIPTION: Example of a DELETE controller implementation that extends AbstractDeleteController to handle resource deletion. The controller accepts a request with an ID parameter and deletes the corresponding Tag resource.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractDeleteController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nclass DeleteTagController extends AbstractDeleteController\n{    \n    protected function delete(Request $request)\n    {        \n        $id = Arr::get($request->getQueryParams(), 'id');\n\n        Tag::findOrFail($id)->delete();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SettingsRepository in PHP for Flarum Extension\nDESCRIPTION: Demonstrates how to inject and use the SettingsRepositoryInterface in a Flarum extension class. This allows reading and modifying settings within the extension.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace acme\\HelloWorld\\ExampleDir;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\n\nclass ClassInterfacesWithSettings\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables in Flarum\nDESCRIPTION: Example of creating a new database table using Flarum's Migration helper with Laravel's Blueprint\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Database\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\n\nreturn Migration::createTable('users', function (Blueprint $table) {\n    $table->increments('id');\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Translation Reference Example\nDESCRIPTION: Shows an anti-pattern of referencing translations outside the ref namespace, which can lead to maintenance issues and unintended changes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => Log In\n\n    log_in:\n      submit_button: => core.forum.header.log_in_link  # Never reference keys\n      title: => core.forum.header.log_in_link          # that aren't in \"ref\"!\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Visibility Scoping for Private Posts in PHP\nDESCRIPTION: Shows how to implement custom visibility scoping for private posts, allowing for extensibility. It demonstrates the use of nested where clauses to include both non-private posts and private posts that meet certain conditions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, we want to ensure that private posts aren't visible to users by default.\n// The simplest way to do this would be:\n$query->where('posts.is_private', false);\n\n// However, we recognize that some extensions might have valid use cases for showing private posts.\n// So instead, we include all posts that aren't private, AND all private posts desired by extensions\n$query->where(function ($query) use ($actor) {\n    $query->where('posts.is_private', false)\n        ->orWhere(function ($query) use ($actor) {\n            $query->whereVisibleTo($actor, 'viewPrivate');\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Filters via Extender in PHP\nDESCRIPTION: Example of registering custom filters and filter mutators using Flarum's Filter extender system. Shows how to add both a custom filter and filter mutator to the UserFilterer.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\Filter(UserFilterer::class))\n    ->addFilter(CountryFilter::class)\n    ->addFilterMutator(OnlySameCountryFilterMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: Extension Composer Configuration\nDESCRIPTION: Composer package configuration for a Flarum extension, defining package metadata, dependencies, and extension-specific settings.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/start.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"acme/flarum-hello-world\",\n    \"description\": \"Say hello to the world!\",\n    \"type\": \"flarum-extension\",\n    \"require\": {\n        \"flarum/core\": \"^2.0.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\"Acme\\\\HelloWorld\\\\\": \"src/\"}\n    },\n    \"extra\": {\n        \"flarum-extension\": {\n            \"title\": \"Hello World\",\n            \"icon\": {\n                \"name\": \"fas fa-smile\",\n                \"backgroundColor\": \"#238c59\",\n                \"color\": \"#fff\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DiscussionSlugDriver in PHP for Flarum\nDESCRIPTION: This code snippet demonstrates the DiscussionSlugDriver class, which handles slug generation and validation for discussion entities in Flarum. It includes methods for creating slugs from discussion titles and retrieving discussions by their slugs.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/slugging.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass DiscussionSlugDriver implements SlugDriver\n{\n    public function toSlug(Sluggable $instance): string\n    {\n        if (! $instance instanceof Discussion) {\n            throw new InvalidArgumentException(\n                get_class($this).' can only handle instances of '.Discussion::class\n            );\n        }\n\n        return Str::slug($instance->title);\n    }\n\n    public function fromSlug(string $slug, Forum $forum): ?Sluggable\n    {\n        return Discussion::where('slug', $slug)->first();\n    }\n\n    public function validate(string $slug, Sluggable $instance): bool\n    {\n        return $instance instanceof Discussion\n            && ($slug === $instance->slug || $slug === $this->toSlug($instance));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Flarum Component in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a custom component in Flarum by extending the Component class. It includes lifecycle methods and shows how to use attributes and the component's DOM element.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/common/Component';\n\nclass Counter extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.count = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        Count: {this.count}\n        <button onclick={e => this.count++}>\n          {this.attrs.buttonLabel}\n        </button>\n      </div>\n    );\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    // We aren't actually doing anything here, but this would\n    // be a good place to attach event handlers, initialize libraries\n    // like sortable, or make other DOM modifications.\n    $element = this.$();\n    $button = this.$('button');\n  }\n}\n\nm.mount(document.body, <MyComponent buttonLabel=\"Increment\" />);\n```\n\n----------------------------------------\n\nTITLE: Route-Based Middleware Filtering Using Route Name\nDESCRIPTION: Shows how to implement middleware logic based on the Flarum route name attribute.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/middleware.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    if ($request->getAttribute('routeName') === 'register') {\n        // Your logic here!\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Setting Component for Flarum Extension\nDESCRIPTION: Demonstrates how to register a custom setting component using a callback function that returns JSX. This allows for more complex settings UI.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/admin.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('interstellar', function(app) {\n\n  app.extensionData\n    .for('acme-interstellar')\n    .registerSetting(function () {\n      if (app.session.user.username() === 'RocketMan') {\n    \n        return (\n          <div className=\"Form-group\">\n            <h1> {app.translator.trans('acme-interstellar.admin.you_are_rocket_man_label')} </h1>\n            <label className=\"checkbox\">\n              <input type=\"checkbox\" bidi={this.setting('acme-interstellar.rocket_man_setting')}/>\n                {app.translator.trans('acme-interstellar.admin.rocket_man_setting_label')}\n            </label>\n          </div>\n        );\n      }\n    })\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Flarum Services in PHP Unit Tests\nDESCRIPTION: Demonstrates how to mock Flarum services in PHP unit tests using Mockery. It shows setting up mocks for settings repository and user authentication.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function setUp(): void\n{\n    parent::setUp();\n    // example - if our setting needs settings, we can mock the settings repository\n    $settingsRepo = m::mock(SettingsRepositoryInterface::class);\n    // and then control specific return values for each setting key\n    $settingsRepo->shouldReceive('get')->with('some-plugin-key')->andReturn('some-value-useful-for-testing');\n    // construct your class under test, passing mocked services as needed\n    $this->serializer = new YourClassUnderTest($settingsRepo);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->actor = m::mock(User::class);\n$request = m::mock(Request::class)->makePartial();\n$request->shouldReceive('getAttribute->getActor')->andReturn($this->actor);\n$this->actor->shouldReceive('SOME PERMISSION')->andReturn(true/false);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Service Provider in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to create a custom service provider in Flarum by extending AbstractServiceProvider. It includes register and boot methods for container configuration and application logic.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/service-provider.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Foundation\\AbstractServiceProvider;\nuse Illuminate\\Contracts\\Container\\Container;\n\nclass CustomServiceProvider extends AbstractServiceProvider\n{\n    public function register()\n    {\n        // custom logic here, for example:\n        $this->container->resolving(SomeClass::class, function ($container) {\n            return new SomeClass($container->make('some.binding'));\n        });\n    }\n\n    public function boot(Container $container)\n    {\n        // custom logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Required Fields in Flarum API Schema\nDESCRIPTION: Shows how to mark fields as required during resource creation\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\npublic function fields(): array\n{\n    return [\n        Schema\\Str::make('name')\n            ->requiredOnCreate(),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Slug Driver in PHP for Flarum\nDESCRIPTION: This code snippet demonstrates how to register a custom slug driver in PHP for Flarum. It uses the extend method to add the custom driver to the SlugManager.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/slugging.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Http\\SlugManager;\n\nreturn [\n    (new Extend\\Slugdriver())\n        ->add('users', UserSlugDriver::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Flarum Migration Structure\nDESCRIPTION: This is a basic migration structure in Flarum. The `up` function is called when the migration is applied (e.g. on extension enable, or via `php flarum migrate`), while the `down` function is called when the migration is rolled back (e.g. on extension purge, or via `php flarum migrate:reset`).\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Schema\\Builder;\n\nreturn [\n    'up' => function (Builder $schema) {\n        // up migration\n    },\n    'down' => function (Builder $schema) {\n        // down migration\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Scheduling Commands in Flarum's extend.php\nDESCRIPTION: This PHP code demonstrates how to schedule a command to run at regular intervals using the Flarum\\Extend\\Console extender's schedule method. It includes options for setting the frequency and passing arguments to the command.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/console.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Console\\CustomCommand;\nuse Illuminate\\Console\\Scheduling\\Event;\n\nreturn [\n    // Other extenders\n    (new Extend\\Console())->schedule('cache:clear', function (Event $event) {\n        $event->everyMinute();\n    }, ['Arg1', '--option1', '--option2']),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Notification Driver in PHP\nDESCRIPTION: Example of registering a custom notification driver using the Notification extender. This code registers the Pusher notification driver with the Flarum system.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/notifications.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend\nuse Flarum\\Pusher\\PusherNotificationDriver;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->driver('pusher', PusherNotificationDriver::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Flarum Frontend Utilities\nDESCRIPTION: Demonstrates unit testing for a Flarum frontend utility function (abbreviateNumber) using Jest, showing various test cases and assertions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport abbreviateNumber from '../../../../src/common/utils/abbreviateNumber';\n\ntest('does not change small numbers', () => {\n  expect(abbreviateNumber(1)).toBe('1');\n});\n\ntest('abbreviates large numbers', () => {\n  expect(abbreviateNumber(1000000)).toBe('1M');\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n});\n\ntest('abbreviates large numbers with decimal places', () => {\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n  expect(abbreviateNumber(13234)).toBe('13.2K');\n});\n```\n\n----------------------------------------\n\nTITLE: Reusing Translations with Key References in YAML\nDESCRIPTION: Example showing how to reuse translations using Flarum's key reference system. This demonstrates proper namespacing with a 'ref' section to maintain organized and reusable translations across multiple locations in the application.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => core.ref.log_in\n\n    log_in:\n      submit_button: => core.ref.log_in\n      title: => core.ref.log_in\n\n  ref:\n    log_in: Log In\n```\n\n----------------------------------------\n\nTITLE: Adding Translation Keys in YAML\nDESCRIPTION: This snippet shows how to add a translation key in a YAML locale file. The key is in `snake_case` and followed by a colon and a space. This key will be used as the identifier for the translation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n\"sample_key: This is a sample translation.\"\n```\n\n----------------------------------------\n\nTITLE: Testing Console Commands in Flarum Extensions\nDESCRIPTION: Demonstrates how to test custom console commands in Flarum extensions using the ConsoleTestCase class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Tests\\integration\\ConsoleTestCase;\n\nclass ConsoleTest extends ConsoleTestCase\n{\n    /**\n     * @test\n     */\n    public function command_works()\n    {\n        $input = [\n            'command' => 'some:command',  // The command name, equivalent of `php flarum some:command`\n            'foo' => 'bar',  // arguments\n            '--lorem' => 'ipsum'  // options\n        ];\n\n        $this->assertEquals('Some Output.', $this->runCommand($input));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Existing Filesystem Disks in Flarum (DeleteLogoController)\nDESCRIPTION: This code snippet demonstrates how to access an existing filesystem disk (`flarum-assets`) in a Flarum controller using the Filesystem Factory. The `DeleteLogoController` injects the `Factory` contract, retrieves the disk instance, and uses it to check for and delete the logo file. It depends on the `Flarum\\Settings\\SettingsRepositoryInterface` and `Illuminate\\Contracts\\Filesystem\\Factory` interfaces.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/filesystem.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Api\\Controller;\n\nuse Flarum\\Http\\RequestUtil;\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Illuminate\\Contracts\\Filesystem\\Factory;\nuse Illuminate\\Contracts\\Filesystem\\Filesystem;\nuse Laminas\\Diactoros\\Response\\EmptyResponse;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nclass DeleteLogoController extends AbstractDeleteController\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    /**\n     * @var Filesystem\n     */\n    protected $uploadDir;\n\n    /**\n     * @param SettingsRepositoryInterface $settings\n     * @param Factory $filesystemFactory\n     */\n    public function __construct(SettingsRepositoryInterface $settings, Factory $filesystemFactory)\n    {\n        $this->settings = $settings;\n        $this->uploadDir = $filesystemFactory->disk('flarum-assets');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function delete(ServerRequestInterface $request)\n    {\n        RequestUtil::getActor($request)->assertAdmin();\n\n        $path = $this->settings->get('logo_path');\n\n        $this->settings->set('logo_path', null);\n\n        if ($this->uploadDir->exists($path)) {\n            $this->uploadDir->delete($path);\n        }\n\n        return new EmptyResponse(204);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Relationships in Flarum's Frontend Models\nDESCRIPTION: Demonstrates how to save relationships along with model attributes by passing them in a relationships key, showing examples for both has-one and has-many relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nuser.save({\n  relationships: {\n    groups: [\n      store.getById('groups', 1),\n      store.getById('groups', 2)\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Pruebas de comandos de consola en Flarum\nDESCRIPTION: Ejemplo de cómo probar comandos de consola personalizados en Flarum utilizando la clase ConsoleTestCase.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Tests\\integration\\ConsoleTestCase;\n\nclass ConsoleTest extends ConsoleTestCase\n{\n    /**\n     * @test\n     */\n    public function command_works()\n    {\n        $input = [\n            'command' => 'some:command',  // The command name, equivalent of `php flarum some:command`\n            'foo' => 'bar',  // arguments\n            '--lorem' => 'ipsum'  // options\n        ];\n\n        $this->assertEquals('Some Output.', $this->runCommand($input));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frontend Routes in JavaScript\nDESCRIPTION: Example of registering a frontend route using the Routes extender in JavaScript, including component mapping.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/routes.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Routes()\n    .add('acme.users', '/users', <UsersPage />),\n];\n```\n\n----------------------------------------\n\nTITLE: Registering New Frontend Models in Flarum\nDESCRIPTION: Demonstrates how to register a new frontend model with Flarum's store using the Store extender. This is necessary for Flarum to recognize and use the new model.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Store()\n    .add('tags', Tag),\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Assets with PHP Extender\nDESCRIPTION: Example of using a PHP extender to register JavaScript and CSS files to be delivered with the forum frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/start.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Register a JavaScript and a CSS file to be delivered with the forum frontend\n(new Extend\\Frontend('forum'))\n    ->js(__DIR__.'/forum-scripts.js')\n    ->css(__DIR__.'/forum-styles.css')\n```\n\n----------------------------------------\n\nTITLE: Extending NotificationGrid in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to extend the `NotificationGrid` component in Flarum to add a custom notification type to the user's notification settings. It uses the `extend` function from `flarum/common/extend` to modify the `notificationTypes` function. This allows users to enable or disable the custom notification type in their settings.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport NotificationGrid from 'flarum/forum/components/NotificationGrid';\n\nimport PostLikedNotification from './components/PostLikedNotification';\n\napp.initializers.add('flarum-likes', () => {\n  app.notificationComponents.postLiked = PostLikedNotification;\n\n  extend(NotificationGrid.prototype, 'notificationTypes', function (items) {\n    items.add('postLiked', {\n      name: 'postLiked',\n      icon: 'far fa-thumbs-up',\n      label: app.translator.trans('flarum-likes.forum.settings.notify_post_liked_label')\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Notification Components in JavaScript\nDESCRIPTION: Example of registering notification components and extending the notification grid in Flarum's frontend, including notification type configuration.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport NotificationGrid from 'flarum/forum/components/NotificationGrid';\n\nimport PostLikedNotification from './components/PostLikedNotification';\n\napp.initializers.add('flarum-likes', () => {\n  app.notificationComponents.postLiked = PostLikedNotification;\n\n  extend(NotificationGrid.prototype, 'notificationTypes', function (items) {\n    items.add('postLiked', {\n      name: 'postLiked',\n      icon: 'far fa-thumbs-up',\n      label: app.translator.trans('flarum-likes.forum.settings.notify_post_liked_label')\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Pluralization in Flarum Translations (JavaScript)\nDESCRIPTION: Demonstrates how to handle pluralization in Flarum translations using the app.translator.transChoice() method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst remaining = this.minPrimary - primaryCount;\nreturn app.translator.transChoice(\n  'choose_primary_placeholder',\n  remaining,\n  { count: remaining }\n);\n```\n\n----------------------------------------\n\nTITLE: Returning Custom JSON API Error Responses from Middleware\nDESCRIPTION: Shows how to create and return a custom JSON API error response from middleware instead of passing the request to the next handler.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/middleware.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\JsonApiResponse;\nuse Tobscure\\JsonApi\\Document;\nuse Tobscure\\JsonApi\\Exception\\Handler\\ResponseBag;\n\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    if ($userFoundInDatabase) {\n        $error = new ResponseBag('422', [\n            [\n                'status' => '422',\n                'code' => 'validation_error',\n                'source' => [\n                    'pointer' => '/data/attributes/email',\n                ],\n                'detail' => 'Yikes! Your email can\\'t be used.',\n            ],\n        ]);\n        $document = new Document();\n        $document->setErrors($error->getErrors());\n      \n        return new JsonApiResponse($document, $error->getStatus());\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Cached Data in JavaScript\nDESCRIPTION: Shows how to access cached resources using the store's all and getById methods without hitting the API.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussions = app.store.all('discussions');\nconst discussion = app.store.getById('discussions', 123);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mailable Notification Blueprint in PHP\nDESCRIPTION: Example of a notification blueprint that supports email notifications by implementing the MailableInterface. This class from Flarum Mentions provides methods for email view selection and subject line generation.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/notifications.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Mentions\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\MailableInterface;\nuse Flarum\\Post\\Post;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass PostMentionedBlueprint implements BlueprintInterface, MailableInterface\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var Post\n     */\n    public $reply;\n\n    /**\n     * @param Post $post\n     * @param Post $reply\n     */\n    public function __construct(Post $post, Post $reply)\n    {\n        $this->post = $post;\n        $this->reply = $reply;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getFromUser()\n    {\n        return $this->reply->user;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getData()\n    {\n        return ['replyNumber' => (int) $this->reply->number];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailView()\n    {\n        return ['text' => 'flarum-mentions::emails.postMentioned'];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailSubject(TranslatorInterface $translator)\n    {\n        return $translator->trans('flarum-mentions.email.post_mentioned.subject', [\n            '{replier_display_name}' => $this->post->user->display_name,\n            '{title}' => $this->post->discussion->title\n        ]);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getType()\n    {\n        return 'postMentioned';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking User and Request in PHP Unit Tests\nDESCRIPTION: Shows how to mock User and Request classes for authorization testing in PHP unit tests using Mockery.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$this->actor = m::mock(User::class);\n$request = m::mock(Request::class)->makePartial();\n$request->shouldReceive('getAttribute->getActor')->andReturn($this->actor);\n$this->actor->shouldReceive('SOME PERMISSION')->andReturn(true/false);\n```\n\n----------------------------------------\n\nTITLE: Defining Pluralizable Translation Keys in YAML\nDESCRIPTION: Example of translation key definitions that support pluralization in the Mentions extension. These keys allow localizers to provide different translations based on singular/plural contexts.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nmentioned_by_text: \"{users} replied to this.\"       # Can be pluralized ...\nmentioned_by_self_text: \"{users} replied to this.\"  # Can be pluralized ...\n```\n\n----------------------------------------\n\nTITLE: Returning Custom JSON API Response in Flarum Middleware\nDESCRIPTION: This snippet shows how to return a custom JSON API response from middleware, specifically for handling a validation error during user registration. It demonstrates creating a ResponseBag, Document, and JsonApiResponse.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\JsonApiResponse;\nuse Tobscure\\JsonApi\\Document;\nuse Tobscure\\JsonApi\\Exception\\Handler\\ResponseBag;\n\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    if ($userFoundInDatabase) {\n        $error = new ResponseBag('422', [\n            [\n                'status' => '422',\n                'code' => 'validation_error',\n                'source' => [\n                    'pointer' => '/data/attributes/email',\n                ],\n                'detail' => 'Yikes! Your email can\\'t be used.',\n            ],\n        ]);\n        $document = new Document();\n        $document->setErrors($error->getErrors());\n\n        return new JsonApiResponse($document, $error->getStatus());\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Composer Loading in Mithril 2\nDESCRIPTION: Comparison showing how to load the composer in Mithril 0.2 versus Mithril 2, following the pattern of passing component classes with attrs instead of instances.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\napp.composer.load(new DiscussionComposer({user: app.session.user}));\n\n// Mithril 2\napp.composer.load(DiscussionComposer, {user: app.session.user})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Show Controller for JSON:API in Flarum\nDESCRIPTION: Shows how to create a controller for showing a single resource that extends AbstractShowController. The example implements a ShowTagController that finds a tag by ID.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractShowController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass ShowTagController extends AbstractShowController\n{\n    public $serializer = TagSerializer::class;\n    \n    protected function data(Request $request, Document $document)\n    {\n        $id = Arr::get($request->getQueryParams(), 'id');\n        \n        return Tag::findOrFail($id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Model Changes in JavaScript\nDESCRIPTION: JavaScript code showing how to save changes to a model instance back to the API using the save method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Serializing Settings to Forum Frontend in PHP\nDESCRIPTION: Shows how to use the Settings extender to serialize specific settings for use in the forum frontend. This includes an example of modifying the setting value before sending it to the frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n   (new Extend\\Settings)\n      ->serializeToForum('myCoolSetting', 'my.cool.setting.key')\n      ->serializeToForum('myCoolSettingModified', 'my.cool.setting.key', function ($retrievedValue) {\n        // This third argument is optional, and allows us to pass the retrieved setting through some custom logic.\n        // In this example, we'll append a string to it.\n\n        return \"My Cool Setting: $retrievedValue\";\n      }, \"default value!\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Columns to Existing Tables in Flarum\nDESCRIPTION: Demonstrates how to use the Migration::addColumns helper to add new columns to an existing table in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addColumns('users', [\n    'email' => ['string', 'length' => 255, 'nullable' => true],\n    'discussion_count' => ['integer', 'unsigned' => true]\n]);\n```\n\n----------------------------------------\n\nTITLE: Scheduling Console Commands in PHP\nDESCRIPTION: Example of creating scheduled commands that run on an interval using the Console extender's schedule method. Includes argument and option passing.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/console.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Console\\CustomCommand;\nuse Illuminate\\Console\\Scheduling\\Event;\n\nreturn [\n    // Other extenders\n    (new Extend\\Console())->schedule('cache:clear', function (Event $event) {\n        $event->everyMinute();\n    }, ['Arg1', '--option1', '--option2']),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Frontend Translations in JavaScript\nDESCRIPTION: Changes required for frontend translations in JavaScript to use the new ICU MessageFormat system instead of transChoice.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Old code\napp.translator.transChoice('some-translation', guestCount, {host: hostName});\n\n// New code\napp.translator.trans('some-translation', {host: hostName, guestCount });\n```\n\n----------------------------------------\n\nTITLE: Restricting Middleware to Specific Routes in Flarum\nDESCRIPTION: This snippet shows how to restrict middleware execution to specific routes in Flarum. It demonstrates checking the current route using the request URI and comparing it to a specific path.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Laminas\\Diactoros\\Uri;\n\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n  {\n    $currentRoute = $request->getUri()->getPath();\n    $routeToRunUnder = new Uri(app()->url('/path/to/run/under'));\n\n    if ($currentRoute === $routeToRunUnder->getPath()) {\n        // Your logic here!\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend Integration Test Example\nDESCRIPTION: Example of integration testing a React Alert component using mithril-query\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport Alert from '../../../../src/common/components/Alert';\nimport m from 'mithril';\nimport mq from 'mithril-query';\nimport { jest } from '@jest/globals';\n\ndescribe('Alert displays as expected', () => {\n  it('should display alert messages with an icon', () => {\n    const alert = mq(m(Alert, { type: 'error' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toHaveElement('i.icon');\n  });\n\n  it('should display alert messages with a custom icon when using a title', () => {\n    const alert = mq(Alert, { type: 'error', icon: 'fas fa-users', title: 'Woops..' });\n    expect(alert).toContainRaw('Woops..');\n    expect(alert).toHaveElement('i.fas.fa-users');\n  });\n\n  it('should display alert messages with a title', () => {\n    const alert = mq(m(Alert, { type: 'error', title: 'Error Title' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toContainRaw('Error Title');\n    expect(alert).toHaveElement('.Alert-title');\n  });\n\n  it('should display alert messages with custom controls', () => {\n    const alert = mq(Alert, { type: 'error', controls: [m('button', { className: 'Button--test' }, 'Click me!')] });\n    expect(alert).toHaveElement('button.Button--test');\n  });\n});\n\ndescribe('Alert is dismissible', () => {\n  it('should show dismiss button', function () {\n    const alert = mq(m(Alert, { dismissible: true }, 'Shoot!'));\n    expect(alert).toHaveElement('button.Alert-dismiss');\n  });\n\n  it('should call ondismiss when dismiss button is clicked', function () {\n    const ondismiss = jest.fn();\n    const alert = mq(Alert, { dismissible: true, ondismiss });\n    alert.click('.Alert-dismiss');\n    expect(ondismiss).toHaveBeenCalled();\n  });\n\n  it('should not be dismissible if not chosen', function () {\n    const alert = mq(Alert, { type: 'error', dismissible: false });\n    expect(alert).not.toHaveElement('button.Alert-dismiss');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Streams for Reactive Data in JavaScript\nDESCRIPTION: This snippet shows how to use Flarum's Stream utility for creating reactive data structures. It demonstrates basic usage of creating and updating a stream.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/forms.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\n\n\nconst value = Stream(\"hello!\");\nvalue() === \"hello!\"; // true\nvalue(\"world!\");\nvalue() === \"world!\"; // true\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Parameters in PHP\nDESCRIPTION: Shows how to define a route with a parameter using the FastRoute syntax in Flarum's Routes extender.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/routes.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Routes('forum'))\n        ->get('/user/{id}', 'acme.user', UserController::class)\n```\n\n----------------------------------------\n\nTITLE: Accessing Cached Resources in JavaScript Store\nDESCRIPTION: Shows how to access resources that have been previously loaded into the store. The store caches resources to minimize API requests, allowing them to be retrieved with all() and getById() methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst discussions = app.store.all('discussions');\nconst discussion = app.store.getById('discussions', 123);\n```\n\n----------------------------------------\n\nTITLE: Including Variables in JSX Translation\nDESCRIPTION: Demonstrates how to include variables in translations using JSX syntax in a Flarum component.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{LinkButton.component({\n  icon: 'search',\n  children: app.translator.trans('all_discussions_button', {query}),\n  href: app.route('index', {q: query})\n})}\n```\n\n----------------------------------------\n\nTITLE: Registering Policies in PHP\nDESCRIPTION: Shows how to register both model-specific and global policies using Flarum's Policy extender in the extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/authorization.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Tags\\Tag;\nuse YourNamespace\\Access;\n\nreturn [\n  // Other extenders\n  (new Extend\\Policy())\n    ->modelPolicy(Tag::class, Access\\TagPolicy::class)\n    ->globalPolicy(Access\\GlobalPolicy::class),\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Modal in Flarum\nDESCRIPTION: This JavaScript snippet demonstrates how to create a custom modal component in Flarum by extending the `flarum/common/components/Modal` class. It overrides methods like `className`, `title`, `content`, and `onsubmit` to customize the modal's appearance and behavior.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/interactive-components.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Modal from 'flarum/common/components/Modal';\n\nexport default class CustomModal extends Modal {\n  // True by default, dictates whether the modal can be dismissed by clicking on the background or in the top right corner.\n  static isDismissible = true;\n\n  className() {\n    // Custom CSS classes to apply to the modal\n    return 'custom-modal-class';\n  }\n\n  title() {\n    // Content to show in the modal's title bar\n    return <p>Custom Modal</p>;\n  }\n\n  content() {\n    // Content to show in the modal's body\n    return <p>Hello World!</p>;\n  }\n\n  onsubmit() {\n    // If your modal contains a form, you can add form processing logic here.\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Dependencies in composer.json\nDESCRIPTION: Shows how to specify optional dependencies in composer.json to ensure proper extension boot order.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extra\": {\n    \"flarum-extension\": {\n      \"optional-dependencies\": [\n        \"flarum/tags\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pluralization YAML Example\nDESCRIPTION: This YAML demonstrates how to define a translation using ICU MessageFormat for pluralization based on a count variable, useful for creating dynamic messages.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/i18n.md#2025-04-16_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\nchoose_primary_placeholder: \"{count, plural, one {Choose a primary tag} other {Choose {count} primary tags}}\"\n```\n\n----------------------------------------\n\nTITLE: Registering Translation Locales in Flarum's extend.php\nDESCRIPTION: This snippet shows how to register a locale directory in a Flarum extension's extend.php file. This allows Flarum to find and use the translations located in the specified directory.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnew Extend\\Locales(__DIR__ . '/locale'),\n```\n\n----------------------------------------\n\nTITLE: Renaming Columns in Flarum Migration\nDESCRIPTION: Demonstrates how to use the Migration::renameColumns helper to rename columns in an existing table in a Flarum database migration.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nreturn Migration::renameColumns('users', ['from' => 'to']);\n```\n\n----------------------------------------\n\nTITLE: Exploring Flarum's composer.json Structure\nDESCRIPTION: A detailed annotation of Flarum's composer.json file explaining the metadata, required packages, configuration settings, and version constraints used in Flarum installations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/composer.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // This following section is mostly just metadata about the package.\n    // For forum admins, this doesn't really matter.\n    \"name\": \"flarum/flarum\",\n    \"description\": \"Delightfully simple forum software.\",\n    \"type\": \"project\",\n    \"keywords\": [\n        \"forum\",\n        \"discussion\"\n    ],\n    \"homepage\": \"https://flarum.org/\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Flarum\",\n            \"email\": \"info@flarum.org\",\n            \"homepage\": \"https://flarum.org/team\"\n        }\n    ],\n    \"support\": {\n        \"issues\": \"https://github.com/flarum/core/issues\",\n        \"source\": \"https://github.com/flarum/flarum\",\n        \"docs\": \"https://flarum.org/docs/\"\n    },\n    // End of metadata\n\n    // This next section is the one we care about the most.\n    // It's a list of packages we want, and the versions for each.\n    // We'll discuss this shortly.\n    \"require\": {\n        \"flarum/core\": \"^1.0\",\n        \"flarum/approval\": \"*\",\n        \"flarum/bbcode\": \"*\",\n        \"flarum/emoji\": \"*\",\n        \"flarum/lang-english\": \"*\",\n        \"flarum/flags\": \"*\",\n        \"flarum/likes\": \"*\",\n        \"flarum/lock\": \"*\",\n        \"flarum/markdown\": \"*\",\n        \"flarum/mentions\": \"*\",\n        \"flarum/nicknames\": \"*\",\n        \"flarum/pusher\": \"*\",\n        \"flarum/statistics\": \"*\",\n        \"flarum/sticky\": \"*\",\n        \"flarum/subscriptions\": \"*\",\n        \"flarum/suspend\": \"*\",\n        \"flarum/tags\": \"*\"\n    },\n\n    // Various composer config. The ones here are sensible defaults.\n    // See https://getcomposer.org/doc/06-config.md for a list of options.\n    \"config\": {\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true\n    },\n\n    // If composer can find a stable (not dev, alpha, or beta) version\n    // of a package, it should use that. Generally speaking, production\n    // sites shouldn't run beta software unless you know what you're doing.\n    \"prefer-stable\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Sort Columns in PHP\nDESCRIPTION: Shows how to remove a sort column from a Flarum API resource using the removeSort method.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Resource;\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\ApiResource(Resource\\UserResource::class))\n        ->removeSort('createdAt'),\n];\n\n```\n\n----------------------------------------\n\nTITLE: Adding Relationships to Serializers in Flarum\nDESCRIPTION: Example of how to define relationships in a Flarum JSON:API serializer. This method connects resources to related resources, specifying the serializer to use for the related resources.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n    protected function user($discussion)\n    {\n        return $this->hasOne($discussion, UserSerializer::class);\n    }\n```\n\n----------------------------------------\n\nTITLE: View Extender Implementation Examples\nDESCRIPTION: Shows migration from old view factory injection to new View extender pattern in PHP.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n  function (Factory $view) {\n    $view->addNamespace(NAME, RELATIVE PATH);\n  }\n]\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend\\View;\n\nreturn [\n  (new View)->namespace(NAME, RELATIVE PATH);\n]\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Translations with JSX\nDESCRIPTION: Illustrates how to include variables in translations by passing them as parameters to the translator. This example from Flarum's search results shows passing a query variable to include in the translation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{LinkButton.component({\n  icon: 'search',\n  children: app.translator.trans('all_discussions_button', {query}),\n  href: app.route('index', {q: query})\n})}\n```\n\n----------------------------------------\n\nTITLE: Frontend Translation Update (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to update frontend translation calls to use the new ICU MessageFormat. It replaces `transChoice` with `trans` and includes the pluralization variable in the data object.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"app.translator.transChoice('some-translation', guestCount, {host: hostName});\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// This uses ES6 key-property shorthand notation. {guestCount: guestCount} is equivalent to {guestCount}\napp.translator.trans('some-translation', {host: hostName, guestCount });\n```\n\n----------------------------------------\n\nTITLE: Adding Header Link with Extend Utility\nDESCRIPTION: Demonstrates how to add a new link to the header using Flarum's extend utility and HeaderPrimary component\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n});\n```\n\n----------------------------------------\n\nTITLE: Saving Model Changes in JavaScript\nDESCRIPTION: Shows how to save changes to a model instance by calling the save method with updated attributes. This method returns a Promise that resolves with the updated model instance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Mail Driver in Flarum\nDESCRIPTION: Shows how to register a custom mail driver using Flarum's Mail extender in the extension's extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/mail.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Mail\\CustomDriver;\n\nreturn [\n  // Other extenders\n  (new Extend\\Mail())->driver(CustomDriver::class)\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Using Streams for Reactive Data in Flarum (JavaScript)\nDESCRIPTION: This snippet shows how to use Flarum's Stream utility for creating reactive data structures. It demonstrates basic usage of creating and updating a Stream.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/forms.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\n\n\nconst value = Stream(\"hello!\");\nvalue() === \"hello!\"; // true\nvalue(\"world!\");\nvalue() === \"world!\"; // true\n```\n\n----------------------------------------\n\nTITLE: Adding Content to Frontend Routes in Flarum (PHP)\nDESCRIPTION: Demonstrates how to add custom content to specific frontend routes in Flarum. This example shows setting the page title for a custom user listing route.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->route('/users', 'acme.users', function (Document $document, Request $request) {\n            $document->title = 'Users';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies in composer.json for Flarum Extensions\nDESCRIPTION: Demonstrates how to specify required dependencies for a Flarum extension in the composer.json file. This example shows a theme extension depending on the Flarum Tags extension.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/extending-extensions.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"require\": {\n    \"flarum/core\": \"^2.0\",\n    \"flarum/tags\": \"*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Resources in JavaScript\nDESCRIPTION: Demonstrates how to save model instances and relationships\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n\nuser.save({\n  relationships: {\n    groups: [\n      store.getById('groups', 1),\n      store.getById('groups', 2)\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Events in Flarum\nDESCRIPTION: Example of defining a custom event in Flarum. It shows the structure of an event class, including public properties and a constructor.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Post\\Event;\n\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass Deleted\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var User\n     */\n    public $actor;\n\n    /**\n     * @param Post $post\n     * @param User $user\n     */\n    public function __construct(Post $post, User $actor = null)\n    {\n        $this->post = $post;\n        $this->actor = $actor;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Scheduled Commands in Flarum\nDESCRIPTION: This snippet shows how to set up scheduled commands in Flarum that run on defined intervals using the Console extender's schedule method. The example schedules the cache:clear command to run every minute with specific arguments and options.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/console.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Console\\CustomCommand;\nuse Illuminate\\Console\\Scheduling\\Event;\n\nreturn [\n    // Other extenders\n    (new Extend\\Console())->schedule('cache:clear', function (Event $event) {\n        $event->everyMinute();\n    }, ['Arg1', '--option1', '--option2']),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Frontend Route with Mithril in JS/JSX\nDESCRIPTION: This JavaScript/JSX snippet defines a frontend route in Flarum using Mithril's routing system. The route is registered with a component to render, and a helper method is defined for generating URLs to the route.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Routes()\n    .add('acme.users', '/users', <UsersPage />),\n];\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport { default as extend } from './extend';\n```\n\n----------------------------------------\n\nTITLE: Comparing Named vs Anonymous Default Exports in TypeScript\nDESCRIPTION: Demonstrates the difference between anonymous and named default exports and their effect on registry inclusion. Anonymous exports will not be added to the registry, while named exports will.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/registry.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Will not be added to the registry\nexport default function () {\n    return 'anonymous';\n};\n\n// Will be added\nexport default function acme() {\n    return 'anonymous';\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Discussion Visibility Scoper in PHP for Flarum Tags\nDESCRIPTION: This code snippet defines a global scoper for the Discussion model. It handles visibility based on tags and user permissions, applying complex logic for different abilities.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/model-visibility.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibilityForAbility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     * @param string $ability\n     */\n    public function __invoke(User $actor, Builder $query, $ability)\n    {\n        // Automatic scoping should be applied to the global `view` ability,\n        // and to arbitrary abilities that aren't subqueries of `view`.\n        // For example, if we want to scope discussions where the user can\n        // edit posts, this should apply.\n        // But if we are expanding a restriction of `view` (for example,\n        // `viewPrivate`), we shouldn't apply this query again.\n        if (substr($ability, 0, 4) === 'view' && $ability !== 'view') {\n            return;\n        }\n\n        // Avoid an infinite recursive loop.\n        if (Str::endsWith($ability, 'InRestrictedTags')) {\n            return;\n        }\n\n        // `view` is a special case where the permission string is represented by `viewForum`.\n        $permission = $ability === 'view' ? 'viewForum' : $ability;\n\n        // Restrict discussions where users don't have necessary permissions in all tags.\n        // We use a double notIn instead of a doubleIn because the permission must be present in ALL tags,\n        // not just one.\n        $query->where(function ($query) use ($actor, $permission) {\n            $query\n                ->whereNotIn('discussions.id', function ($query) use ($actor, $permission) {\n                    return $query->select('discussion_id')\n                        ->from('discussion_tag')\n                        ->whereNotIn('tag_id', function ($query) use ($actor, $permission) {\n                            Tag::query()->setQuery($query->from('tags'))->whereHasPermission($actor, $permission)->select('tags.id');\n                        });\n                })\n                ->orWhere(function ($query) use ($actor, $permission) {\n                    // Allow extensions a way to override scoping for any given permission.\n                    $query->whereVisibleTo($actor, \"${permission}InRestrictedTags\");\n                });\n        });\n\n        // Hide discussions with no tags if the user doesn't have that global\n        // permission.\n        if (! $actor->hasPermission($permission)) {\n            $query->has('tags');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Endpoint Authorization in PHP\nDESCRIPTION: Shows how to set up authorization for API endpoints using various methods like 'visible', 'can', 'authenticated', and 'admin'.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Context;\nuse Flarum\\Api\\Endpoint;\n\npublic function endpoints(): array\n{\n    return [\n        Endpoint\\Show::make()\n            ->visible(fn (Label $label, Context $context) => $context->getActor()->can('view', $label)),\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Endpoint;\n\npublic function endpoints(): array\n{\n    return [\n        Endpoint\\Show::make()\n            ->authenticated()\n            ->can('view'), // equivalent to $actor->assertCan('view', $label)\n        Endpoint\\Create::make()\n            ->authenticated()\n            ->can('createLabel'), // equivalent to $actor->assertCan('createLabel'),\n        Endpoint\\Update::make()\n            ->admin(), // equivalent to $actor->assertAdmin()\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Boolean Setting for Flarum Extension in JavaScript\nDESCRIPTION: Example of how to register a boolean switch setting for a Flarum extension. This code shows how to define the setting key, label, help text, and type.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/admin.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('interstellar', function(app) {\n\n  app.extensionData\n    .for('acme-interstellar')\n    .registerSetting(\n      {\n        setting: 'acme-interstellar.coordinates', // Questa è la chiave con cui verranno salvate le impostazioni nella tabella delle impostazioni nel database.\n        label: app.translator.trans('acme-interstellar.admin.coordinates_label'), // L'etichetta da mostrare che consente all'amministratore di sapere cosa fa l'impostazione.\n        help: app.translator.trans('acme-interstellar.admin.coordinates_help'), // Testo di aiuto opzionale dove poter commentare l'impostazione.\n        type: 'boolean', // Di che tipo di impostazione si tratta, le opzioni valide sono: boolean, text (o qualsiasi altro tipo di tag <input>) e select. \n      },\n      30 // Opzionale: Priorità\n    )\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Frontend Models in TypeScript\nDESCRIPTION: This snippet shows how to add attributes and relationships to existing frontend models using the Model extender in TypeScript.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nnew Extend.Model(Discussion)\n  .attribute<string>('slug')\n  .hasOne<User>('user')\n  .hasMany<Post>('posts')\n```\n\n----------------------------------------\n\nTITLE: Saving Resources via API in Javascript\nDESCRIPTION: This code snippet demonstrates how to save data back to the Flarum API by calling the `save` method on a model instance. It showcases how to update attributes and relationships, and handles the promise returned by the method.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Storage Driver in Flarum\nDESCRIPTION: Example of registering a custom storage driver implementation using Flarum's extend system.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/filesystem.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Filesystem)\n        ->driver('aws-with-cdn', AwsWithCdnDriver::class);\n```\n\n----------------------------------------\n\nTITLE: Defining Key References in YAML for Flarum Translations\nDESCRIPTION: Demonstrates how to define multiple translation keys that reference a single shared translation in a YAML file. This approach provides flexibility for language-specific variations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nedit_stuff_button: => edit_stuff    # Used in the code that creates the button.\nedit_stuff_title: => edit_stuff     # Used in the code that creates the dialog.\n\nedit_stuff: Edit Stuff              # Not used in the code.\n```\n\n----------------------------------------\n\nTITLE: Extending API Controller Configuration - Flarum API\nDESCRIPTION: Example of using ApiController extender to customize existing API controllers with serializers, includes, limits, and sorting options.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillGetData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->setSerializer(MyDiscussionSerializer::class)\n        ->addInclude('user')\n        ->addOptionalInclude('posts')\n        ->setLimit(20)\n        ->setMaxLimit(50)\n        ->setSort(['name' => 'asc'])\n        ->addSortField('firstName')\n        ->prepareDataQuery(function ($controller) {\n            // Add custom logic here to modify the controller\n            // before data queries are executed.\n        })\n]\n```\n\n----------------------------------------\n\nTITLE: Adjusting API Data Before Serialization in PHP for Flarum\nDESCRIPTION: Demonstrates using the ApiController extender to modify data before it's serialized, allowing for custom data loading or manipulation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillSerializeData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->prepareDataForSerialization(function ($controller, $data, $request, $document) {\n            $data->load('myCustomRelation');\n        }),\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Pluralizable Translations in YAML for Flarum\nDESCRIPTION: This YAML snippet demonstrates how to define translations that can be pluralized. It includes keys for mentions by others and self-mentions, with a comment indicating that these can be pluralized in other languages even if English doesn't require it.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nmentioned_by_text: \"{users} replied to this.\"       # Can be pluralized ...\nmentioned_by_self_text: \"{users} replied to this.\"  # Can be pluralized ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Component with Lifecycle Methods\nDESCRIPTION: Illustrates creating a custom component with initialization, view rendering, and lifecycle method handling\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/common/Component';\n\nclass Counter extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.count = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        Count: {this.count}\n        <button onclick={e => this.count++}>\n          {this.attrs.buttonLabel}\n        </button>\n      </div>\n    );\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    $element = this.$();\n    $button = this.$('button');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Component in Flarum with JSX\nDESCRIPTION: Demonstrates how to create a form component in Flarum using JSX syntax. It includes examples of using FieldSet, Button, and Switch components, as well as handling input changes and form submission.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/forms.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/common/Component';\nimport FieldSet from 'flarum/common/components/FieldSet';\nimport Button from 'flarum/common/components/Button';\nimport Switch from 'flarum/common/components/Switch';\n\n\nclass FormComponent extends Component {\n  oninit(vnode) {\n    this.textInput = \"\";\n    this.booleanInput = false;\n  }\n\n  view() {\n    return (\n      <form onsubmit={this.onsubmit.bind(this)}>\n        <FieldSet label={app.translator.trans('fake-extension.form.fieldset_label')}>\n          <input className=\"FormControl\" value={this.textInput} oninput={e => this.textInput = e.target.value}>\n          </input>\n          <Switch state={this.booleanInput} onchange={val => this.booleanInput = val}>\n          </Switch>\n        </FieldSet>\n        <Button type=\"submit\">{app.translator.trans('core.admin.basics.submit_button')}</Button>\n      </form>\n    )\n  }\n\n  onsubmit() {\n    // Some form handling logic here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Unit Test Configuration\nDESCRIPTION: XML configuration file for PHPUnit unit tests including Mockery listener setup.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n\n    <testsuites>\n        <testsuite name=\"Flarum Unit Tests\">\n            <directory suffix=\"Test.php\">./unit</directory>\n        </testsuite>\n    </testsuites>\n    <listeners>\n        <listener class=\"\\Mockery\\Adapter\\Phpunit\\TestListener\"></listener>\n    </listeners>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in Flarum Migration\nDESCRIPTION: Demonstrates how to create a new table using Flarum's Migration helper. This example creates a 'users' table with an auto-incrementing 'id' column.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Database\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\n\nreturn Migration::createTable('users', function (Blueprint $table) {\n    $table->increments('id');\n});\n```\n\n----------------------------------------\n\nTITLE: Hello World Frontend Extension\nDESCRIPTION: Example showing how to inject content into the forum's frontend using the Frontend extender to add a JavaScript alert.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/start.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\nuse Flarum\\Frontend\\Document;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->content(function (Document $document) {\n            $document->head[] = '<script>alert(\"Hello, world!\")</script>';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Console Commands in Flarum\nDESCRIPTION: This snippet shows how to register custom console commands in a Flarum extension using the Console extender in the extend.php file. The command method is used to register the command class with Flarum's console system.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/console.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Console\\CustomCommand;\n\nreturn [\n  // Other extenders\n  (new Extend\\Console())->command(CustomCommand::class)\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Including Variables in Flarum Translations (JSX)\nDESCRIPTION: Shows how to include variables in Flarum translations using JSX syntax and the app.translator.trans() method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{LinkButton.component({\n  icon: 'search',\n  children: app.translator.trans('all_discussions_button', {query}),\n  href: app.route('index', {q: query})\n})}\n```\n\n----------------------------------------\n\nTITLE: Implementing Country Search Mutator in PHP Flarum\nDESCRIPTION: Creates a search mutator that filters users to only show those from the same country as the current user. Implements query modification logic for country-based filtering.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Query\\QueryCriteria;\nuse Flarum\\Search\\SearchState;\n\nclass OnlySameCountrySearchMutator\n{\n    public function __invoke(SearchState $searchState, QueryCriteria $queryCriteria)\n    {\n        $searchState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flarum Update Commands\nDESCRIPTION: Core commands needed to update Flarum using Composer. Updates dependencies, runs migrations, and clears cache.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/update.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update --prefer-dist --no-plugins --no-dev -a --with-all-dependencies\nphp flarum migrate\nphp flarum cache:clear\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination in List Controllers\nDESCRIPTION: Shows how to configure pagination settings by setting limit and maxLimit properties on a list controller, and how to extract pagination parameters from the request.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n    // The number of records included by default.\n    public $limit = 20;\n\n    // The maximum number of records that can be requested.\n    public $maxLimit = 50;\n```\n\nLANGUAGE: php\nCODE:\n```\n$limit = $this->extractLimit($request);\n$offset = $this->extractOffset($request);\n\nreturn Tag::skip($offset)->take($limit);\n```\n\n----------------------------------------\n\nTITLE: Including Variables in Flarum Translations with JSX\nDESCRIPTION: Demonstrates how to include variables in translations using JSX in Flarum, specifically for creating a search results dropdown item.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/i18n.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n{LinkButton.component({\n  icon: 'search',\n  children: app.translator.trans('all_discussions_button', {query}),\n  href: app.route('index', {q: query})\n})}\n```\n\n----------------------------------------\n\nTITLE: Extracting Included Relationships\nDESCRIPTION: This snippet shows how to extract included relationships from a request using the `extractInclude` method and utilize them to load relations on a model before serialization. This is useful for optimizing database queries and ensuring only necessary data is loaded.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/api.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$relations = $this->extractInclude($request);\n\nreturn Tag::all()->load($relations);\n```\n\n----------------------------------------\n\nTITLE: API Controller Extension with Eager Loading in PHP\nDESCRIPTION: Demonstrates how to use the ApiController extender to add includes and eager loading for relationships to prevent N+1 query issues. This example shows configuration for loading tags and related data for discussions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    (new Extend\\ApiController(FlarumController\\ListDiscussionsController::class))\n        ->addInclude(['tags', 'tags.state', 'tags.parent'])\n        ->load('tags'),\n];\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events in Flarum\nDESCRIPTION: This code demonstrates how to dispatch a custom event (Deleted) in Flarum. It injects the Illuminate Event Dispatcher into a class and uses its `dispatch` method to trigger the event, passing relevant data as parameters to the event constructor.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Post\\Event\\Deleted;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\n\nclass SomeClass\n{\n    /**\n      * @var Dispatcher\n      */\n    protected $events;\n\n    /**\n      * @param Dispatcher $events\n      */\n    public function __construct(Dispatcher $events)\n    {\n        $this->events = $events;\n    }\n\n    public function someMethod()\n    {\n        // Logic\n        $this->events->dispatch(\n            new Deleted($somePost, $someActor)\n        );\n        // More Logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Extension Imports\nDESCRIPTION: JavaScript configuration for webpack.config.js to allow importing from other Flarum extensions in the frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = require('flarum-webpack-config')({\n    useExtensions: ['flarum-tags']\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Models in Flarum 2.x\nDESCRIPTION: This example shows how to handle custom models in Flarum 2.x by overriding the newModel method in the ApiResource class, specifically for a Flag model.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @extends AbstractDatabaseResource<Flag>\n */\nclass FlagResource extends AbstractDatabaseResource\n{\n    public function newModel(Context $context): object\n    {\n        if ($context->creating(self::class)) {\n            Flag::unguard();\n  \n            return Flag::query()->firstOrNew([\n                'post_id' => (int) Arr::get($context->body(), 'data.relationships.post.data.id'),\n                'user_id' => $context->getActor()->id\n            ]);\n        }\n  \n        return parent::newModel($context);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Components from Frontend Extensions in JavaScript\nDESCRIPTION: This code demonstrates how to export classes or functions from your extension's JavaScript files to make them available to other extensions. Extension components are first initialized with an ID, then selectively exported for reuse.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/extensibility.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\napp.initializers.add('your-extension-id', () => {\n  // Your Extension Code Here\n})\n\nexport {\n  // Put all the stuff you want to export here.\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Frontend Translation Usage in JavaScript\nDESCRIPTION: Shows how to update frontend translation calls from using transChoice to the new trans method with pluralization support.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Old method\napp.translator.transChoice('some-translation', guestCount, {host: hostName});\n\n// New method\napp.translator.trans('some-translation', {host: hostName, guestCount });\n```\n\n----------------------------------------\n\nTITLE: Executing Flarum Update Commands\nDESCRIPTION: Core commands required to update Flarum using Composer, including dependency updates, migrations, and cache clearing.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/update.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update --prefer-dist --no-plugins --no-dev -a --with-all-dependencies\nphp flarum migrate\nphp flarum cache:clear\n```\n\n----------------------------------------\n\nTITLE: Casting Attribute in Flarum Model Using PHPStan\nDESCRIPTION: Demonstrates using the Extend\\Model to define attribute types explicitly in models for PHPStan detection. Enhances type safety and accurate static analysis. Requires Flarum extension and PHPStan setup.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Model(User::class))\n    ->cast('is_cool', 'bool'),\n```\n\n----------------------------------------\n\nTITLE: Validation Errors in Flarum's REST API\nDESCRIPTION: Example of validation error responses with HTTP status code 422. These errors show field-specific validation failures with detailed messages and source pointers to the invalid fields.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"422\",\n      \"code\": \"validation_error\",\n      \"detail\": \"The username has already been taken.\",\n      \"source\":{\n        \"pointer\":\"\\/data\\/attributes\\/username\"\n      }\n    },\n    {\n      \"status\": \"422\",\n      \"code\": \"validation_error\",\n      \"detail\": \"The email has already been taken.\",\n      \"source\": {\n        \"pointer\":\"\\/data\\/attributes\\/email\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Mail Driver in Flarum's extend.php\nDESCRIPTION: This code snippet shows how to register a custom mail driver in Flarum's extend.php file using the Mail extender. It demonstrates the proper syntax for adding the driver to the extension's configuration.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/mail.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Mail\\CustomDriver;\n\nreturn [\n  // Other extenders\n  (new Extend\\Mail())->driver(CustomDriver::class)\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Filter for User Country in PHP\nDESCRIPTION: This snippet demonstrates how to create a custom Filter class to filter users by country. It implements the FilterInterface and defines the filter key and filtering logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterInterface;\nuse Flarum\\Filter\\FilterState;\n\nclass CountryFilter implements FilterInterface\n{\n    public function getFilterKey(): string\n    {\n        return 'country';\n    }\n\n    public function filter(FilterState $filterState, string $filterValue, bool $negate)\n    {\n        $country = trim($filterValue, '\"');\n\n        $filterState->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Directory Paths in PHP\nDESCRIPTION: Configuration snippet for updating base, public, and storage directory paths in site.php when customizing Flarum's installation directory structure.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/install.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n'base' => __DIR__,\n'public' => __DIR__,\n'storage' => __DIR__.'/storage',\n```\n\n----------------------------------------\n\nTITLE: List Discussions Response\nDESCRIPTION: Example response from the GET /api/discussions endpoint showing the JSON:API compliant structure including pagination links, discussion data, and included relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"links\": {\n    \"first\": \"https://flarum.tld/api/discussions\",\n    \"next\": \"https://flarum.tld/api/discussions?page%5Boffset%5D=20\"\n  },\n  \"data\": [\n    {\n      \"type\": \"discussions\",\n      \"id\": \"234\",\n      \"attributes\": {\n        \"title\": \"Lorem Ipsum\",\n        \"slug\": \"234-lorem-ipsum\",\n        \"commentCount\": 10,\n        \"participantCount\": 3,\n        \"createdAt\": \"2022-01-01T10:20:30+00:00\",\n        \"lastPostedAt\": \"2022-01-05T10:20:30+00:00\",\n        \"lastPostNumber\": 10,\n        \"canReply\": true,\n        \"canRename\": true,\n        \"canDelete\": true,\n        \"canHide\": true,\n        \"isHidden\": true,\n        \"hiddenAt\": \"2022-01-06T10:20:30+00:00\",\n        \"lastReadAt\": \"2022-01-02T10:20:30+00:00\",\n        \"lastReadPostNumber\": 2,\n        \"isApproved\": true,\n        \"canTag\": true,\n        \"isLocked\": false,\n        \"canLock\": true,\n        \"isSticky\": false,\n        \"canSticky\": true,\n        \"canMerge\": true,\n        \"subscription\": null\n      },\n      \"relationships\": {\n        \"user\": {\n          \"data\": {\n            \"type\": \"users\",\n            \"id\": \"1\"\n          }\n        },\n        \"lastPostedUser\": {\n          \"data\": {\n            \"type\": \"users\",\n            \"id\": \"64\"\n          }\n        },\n        \"tags\": {\n          \"data\": [\n            {\n              \"type\": \"tags\",\n              \"id\": \"3\"\n            }\n          ]\n        },\n        \"firstPost\": {\n          \"data\": {\n            \"type\": \"posts\",\n            \"id\": \"668\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controller in PHP for Flarum Extension\nDESCRIPTION: Illustrates how to create a controller class that implements RequestHandlerInterface for handling requests in a Flarum extension. The example controller returns a simple HTML response.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Acme\\HelloWorld;\n\nuse Laminas\\Diactoros\\Response\\HtmlResponse;\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass HelloWorldController implements RequestHandlerInterface\n{\n    public function handle(Request $request): Response\n    {\n        return new HtmlResponse('<h1>Hello, world!</h1>');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Frontend Components in JavaScript\nDESCRIPTION: An example of how to export classes or functions from a Flarum extension's frontend JavaScript file, allowing other extensions to use or modify them.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/extensibility.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('your-extension-id', () => {\n  // Your Extension Code Here\n})\n\nexport {\n  // Put all the stuff you want to export here.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination in PHP\nDESCRIPTION: Shows how to set up pagination limits and extract pagination parameters from the request in a list controller.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/api.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n    // The number of records included by default.\n    public $limit = 20;\n    \n    // The maximum number of records that can be requested.\n    public $maxLimit = 50;\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal Page Links Using Flarum's Link Component in JSX\nDESCRIPTION: Examples of using Flarum's Link component to create internal navigation links, route-generated links, and external links in a Single Page Application context.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'flarum/common/components/Link';\n\n// Link can be used just like any other component:\n<Link href=\"/route/known/to/mithril\">Hello World!</Link>\n\n// You'll frequently use Link with generated routes:\n<Link href={app.route('settings')}>Hello World!</Link>\n\n// Link can even generate external links with the external attr:\n<Link external={true} href=\"https://google.com\">Hello World!</Link>\n\n// The above example with external = true is equivalent to:\n<a href=\"https://google.com\">Hello World!</a>\n// but is provided for flexibility: sometimes you might have links\n// that are conditionally internal or external.\n```\n\n----------------------------------------\n\nTITLE: Configuring DayJS for Date Localization in JavaScript\nDESCRIPTION: This JavaScript code configures DayJS to use a specific locale for date formatting. The locale code ('xx') should be replaced with the appropriate language code from the DayJS library.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/language-packs.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ndayjs.locale('xx');\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events in Flarum\nDESCRIPTION: Demonstrates how to dispatch events in Flarum. It shows injecting the Dispatcher and using it to dispatch a custom event.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Post\\Event\\Deleted;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\n\nclass SomeClass\n{\n    /**\n      * @var Dispatcher\n      */\n    protected $events;\n\n    /**\n      * @param Dispatcher $events\n      */\n    public function __construct(Dispatcher $events)\n    {\n        $this->events = $events;\n    }\n\n    public function someMethod()\n    {\n        // Logic\n        $this->events->dispatch(\n            new Deleted($somePost, $someActor)\n        );\n        // More Logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Mail Driver in Flarum's extend.php\nDESCRIPTION: Example of how to register a custom mail driver using the Flarum\\Extend\\Mail extender in the extension's extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/mail.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Mail\\CustomDriver;\n\nreturn [\n  // Other extenders\n  (new Extend\\Mail())->driver(CustomDriver::class)\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Post Creation Throttler in PHP\nDESCRIPTION: This snippet demonstrates how to create a custom throttler function that limits the rate of post creation. It checks if the request is for creating discussions or posts, and if the user has made a post in the last 10 seconds, it limits the request unless they have special permissions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/api-throttling.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse DateTime;\nuse Flarum\\Post\\Post;\n\nfunction ($request) {\n    if (! in_array($request->getAttribute('routeName'), ['discussions.create', 'posts.create'])) {\n        return;\n    }\n\n    $actor = $request->getAttribute('actor');\n\n    if ($actor->can('postWithoutThrottle')) {\n        return false;\n    }\n\n    if (Post::where('user_id', $actor->id)->where('created_at', '>=', new DateTime('-10 seconds'))->exists()) {\n        return true;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Search Mutator for Same Country Filtering in PHP\nDESCRIPTION: This snippet shows how to implement a search mutator that filters users to only those from the same country as the actor. It modifies the search query to add a where clause based on the actor's country.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Query\\QueryCriteria;\nuse Flarum\\Search\\SearchState;\n\nclass OnlySameCountrySearchMutator\n{\n    public function __invoke(SearchState $searchState, QueryCriteria $queryCriteria)\n    {\n        $searchState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Special Handling Translation Keys in YAML\nDESCRIPTION: This snippet shows special translation keys used for referenced translations and default group names in Flarum. These keys require special handling and don't correspond to specific interfaces.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nref:         # Translations referenced by more than one key.\ngroup:       # Translations used as default group names.\n```\n\n----------------------------------------\n\nTITLE: Updating JavaScript Imports in Flarum Extensions\nDESCRIPTION: Example of how to update JavaScript imports to use the new namespace format introduced in Beta 16. This change affects imports from 'flarum' and its submodules.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Component from 'flarum/common/Component'\n```\n\n----------------------------------------\n\nTITLE: Updating Backend Translation Usage in PHP\nDESCRIPTION: Shows how to update backend translation calls from using transChoice to the new trans method without curly braces for keys.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Old way\n$translator->transChoice('some-translation', $guestCount, ['{host}' => $hostName]);\n\n// New way\n$translator->trans('some-translation', ['host' => $hostName, 'guestCount' => $guestCount]);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Data Before Serialization in PHP API Controller\nDESCRIPTION: Demonstrates how to use the ApiController extender to modify data before serialization in a Flarum API controller.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillSerializeData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->prepareDataForSerialization(function ($controller, $data, $request, $document) {\n            $data->load('myCustomRelation');\n        }),\n]\n```\n\n----------------------------------------\n\nTITLE: Registering Service Provider in Flarum's extend.php\nDESCRIPTION: Example showing how to register a custom service provider using Flarum's ServiceProvider extender in the extend.php configuration file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/service-provider.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    // Other extenders\n    (new Extend\\ServiceProvider())\n        ->register(CustomServiceProvider::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Tagging a Release with Git\nDESCRIPTION: Commands for creating a version tag in Git and pushing it to the remote repository. This is an essential step before publishing a Flarum extension to Packagist.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/distribution.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v0.1.0\ngit push && git push --tags\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables in Flarum\nDESCRIPTION: Example of creating a new database table using Flarum's Migration helper\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Database\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\n\nreturn Migration::createTable('users', function (Blueprint $table) {\n    $table->increments('id');\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Select Setting in Flarum Admin\nDESCRIPTION: Shows how to add a select (dropdown) setting to the Flarum admin panel using the Admin extender.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/admin.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\nimport app from 'flarum/admin/app';\n\nreturn [\n  new Extend.Admin()\n    .setting(\n      () => ({\n        setting: 'acme-interstellar.fuel_type',\n        label: app.translator.trans('acme-interstellar.admin.fuel_type_label', {}, true),\n        type: 'select',\n        options: {\n          'LOH': 'Liquid Fuel',\n          'RDX': 'Solid Fuel',\n        },\n        default: 'LOH',\n      }),\n    )\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Pluralizable Translations in YAML for Flarum\nDESCRIPTION: This YAML snippet demonstrates how to define translations that can be pluralized in Flarum. It includes two keys for 'mentioned_by_text' and 'mentioned_by_self_text', both of which can be pluralized based on the {users} variable.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nmentioned_by_text: \"{users} replied to this.\"       # Can be pluralized ...\nmentioned_by_self_text: \"{users} replied to this.\"  # Can be pluralized ...\n```\n\n----------------------------------------\n\nTITLE: Declaring New Filesystem Disks in Flarum\nDESCRIPTION: This code snippet demonstrates how to declare a new filesystem disk in Flarum using the `Filesystem` extender. It defines a disk named `flarum-uploads` and configures its root path and URL based on the `Paths` and `UrlGenerator` services.  It requires the `Flarum\\Extend` namespace.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/filesystem.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Filesystem)\n        ->disk('flarum-uploads', function (Paths $paths, UrlGenerator $url) {\n            return [\n                'root'   => \"$paths->public/assets/uploads\",\n                'url'    => $url->to('forum')->path('assets/uploads')\n            ];\n        });\n```\n\n----------------------------------------\n\nTITLE: Using Route Resolvers in Flarum\nDESCRIPTION: Advanced example demonstrating three different ways to register routes using Mithril's route resolver system in Flarum extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend-pages.md#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// See above for a custom page example\nimport CustomPage from './components/CustomPage';\n// See below for a custom resolver example\nimport CustomPageResolver from './resolvers/CustomPageResolver';\n\n// Use a route resolver instance\napp.routes['resolverInstance'] = {path: '/custom/path/1', resolver: {\n  onmatch: function(args) {\n    if (!app.session.user) return m.route.SKIP;\n\n    return CustomPage;\n  }\n}};\n\n// Use a custom route resolver class\napp.routes['resolverClass'] = {path: '/custom/path/2', resolverClass: CustomPageResolver, component: CustomPage};\n\n// Use the default resolver class (`flarum/common/resolvers/DefaultResolver`)\napp.routes['resolverClass'] = {path: '/custom/path/2', component: CustomPage};\n```\n\n----------------------------------------\n\nTITLE: Adding Route Helper in JavaScript for Flarum Extension\nDESCRIPTION: Demonstrates how to add a route helper method using the Routes extender in JavaScript for a Flarum extension. This creates a helper function for generating URLs to a specific route.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n  new Extend.Routes()\n   .add('acme.user', '/user/:id', <UsersPage />)\n   .helper('acmeUser', (user) => app.route('acme.user', { id: user.id() }))\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Notification Driver in PHP for Flarum\nDESCRIPTION: This code demonstrates how to register a custom notification driver (PusherNotificationDriver) using the Notification extender in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend\nuse Flarum\\Pusher\\PusherNotificationDriver;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->driver('pusher', PusherNotificationDriver::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events in PHP\nDESCRIPTION: Example of how to inject the event dispatcher and dispatch an event in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Post\\Event\\Deleted;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\n\nclass SomeClass\n{\n    /**\n      * @var Dispatcher\n      */\n    protected $events;\n\n    /**\n      * @param Dispatcher $events\n      */\n    public function __construct(Dispatcher $events)\n    {\n        $this->events = $events;\n    }\n\n    public function someMethod()\n    {\n        // Logic\n        $this->events->dispatch(\n            new Deleted($somePost, $someActor)\n        );\n        // More Logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Console Commands in Flarum\nDESCRIPTION: Example of scheduling console commands to run at specified intervals using the Console extender's schedule method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/console.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Console\\CustomCommand;\nuse Illuminate\\Console\\Scheduling\\Event;\n\nreturn [\n    // Other extenders\n    (new Extend\\Console())->schedule('cache:clear', function (Event $event) {\n        $event->everyMinute();\n    }, ['Arg1', '--option1', '--option2']),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing Settings Repository Interface in Flarum\nDESCRIPTION: This snippet demonstrates how to inject the SettingsRepositoryInterface into a class using constructor dependency injection with Flarum's service container.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace acme\\HelloWorld\\ExampleDir;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\n\nclass ClassInterfacesWithSettings\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Blade Templates in PHP\nDESCRIPTION: Examples demonstrating how to render Blade templates with and without variables using the view factory\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/views.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, $view is of type `Illuminate\\Contracts\\View\\Factory`\n$renderedString = $view->make('acme.hello-world::greeting')->render();\n\n// You can also pass variables to the view:\n$renderedString = $view->make('acme.hello-world::greeting', ['varName' => true])->render();\n```\n\n----------------------------------------\n\nTITLE: Adjusting Data Before Serialization in Flarum API\nDESCRIPTION: Demonstrates how to modify data before serialization in API controllers using the prepareDataForSerialization method of the ApiController extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillSerializeData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->prepareDataForSerialization(function ($controller, $data, $request, $document) {\n            $data->load('myCustomRelation');\n        }),\n]\n```\n\n----------------------------------------\n\nTITLE: Flarum CLI Serializer Generation Command\nDESCRIPTION: Command line instruction for automatically generating a new API serializer using Flarum CLI.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend api-serializer\n```\n\n----------------------------------------\n\nTITLE: Adding Views Directory Configuration in PHP\nDESCRIPTION: Shows how to configure a new view namespace for an extension using the View extender in extend.php. This tells the view factory where to find template files for the extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/views.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views'),\n];\n```\n\n----------------------------------------\n\nTITLE: Mocking Flarum Services in PHP Tests\nDESCRIPTION: Example of setting up test mocks for Flarum services in PHP unit tests, including settings repository and user authentication mocks.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n    public function setUp(): void\n    {\n        parent::setUp();\n        // example - if our setting needs settings, we can mock the settings repository\n        $settingsRepo = m::mock(SettingsRepositoryInterface::class);\n        // and then control specific return values for each setting key\n        $settingsRepo->shouldReceive('get')->with('some-plugin-key')->andReturn('some-value-useful-for-testing');\n        // construct your class under test, passing mocked services as needed\n        $this->serializer = new YourClassUnderTest($settingsRepo);\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating New Resources in JavaScript\nDESCRIPTION: Shows how to create a new resource by instantiating a model through the store's createRecord method and then saving it with initial attributes. This sends a POST request to the corresponding API endpoint.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussion = app.store.createRecord('discussions');\n\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller for Flarum Route Handling\nDESCRIPTION: This code defines a HelloWorldController class that implements RequestHandlerInterface. It handles incoming requests and returns an HTML response.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Acme\\HelloWorld;\n\nuse Laminas\\Diactoros\\Response\\HtmlResponse;\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass HelloWorldController implements RequestHandlerInterface\n{\n    public function handle(Request $request): Response\n    {\n        return new HtmlResponse('<h1>Hello, world!</h1>');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Special Handling Translation Keys in YAML\nDESCRIPTION: This snippet introduces two special second-level keys for translations requiring unique handling, such as reusable translations and default groups. The 'ref' key is for translations used in multiple places, while 'group' is for default group names translated server-side.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nref:         # Translations referenced by more than one key.\ngroup:       # Translations used as default group names.\n```\n\n----------------------------------------\n\nTITLE: Configuring View Namespace in PHP\nDESCRIPTION: Example of setting up a view namespace for an extension using the View extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views')\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Jest Configuration for Flarum Extensions\nDESCRIPTION: Generating a Jest configuration file for handling Flarum extension frontend tests\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('@flarum/jest-config')();\n```\n\n----------------------------------------\n\nTITLE: Adding Columns to Existing Table in Flarum\nDESCRIPTION: Shows how to add new columns to an existing table using Flarum's Migration helper. This example adds 'email' and 'discussion_count' columns to the 'users' table.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addColumns('users', [\n    'email' => ['string', 'length' => 255, 'nullable' => true],\n    'discussion_count' => ['integer', 'unsigned' => true]\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Console Command in PHP for Flarum\nDESCRIPTION: Example of creating a custom console command class by extending AbstractCommand. Demonstrates basic structure with configure() and fire() methods for command implementation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/console.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Console\\AbstractCommand;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass YourCommand extends AbstractCommand {\n  protected function configure()\n  {\n      $this\n          ->setName('YOUR COMMAND NAME')\n          ->setDescription('YOUR COMMAND DESCRIPTION');\n  }\n  protected function fire()\n  {\n    // Your logic here!\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Frontend Document - Flarum - PHP\nDESCRIPTION: This PHP snippet shows how to modify the HTML document in Flarum when booting up the frontend JavaScript application. It illustrates adding custom JavaScript to the document using the Frontend extender's content method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Frontend\\Document;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->content(function (Document $document, Request $request) {\n            $document->head[] = '<script>alert(\\\"Hello, world!\\\")</script>';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Modifying Frontend Document Content in PHP\nDESCRIPTION: Shows how to modify the frontend HTML document using the Frontend extender's content method. Demonstrates adding custom scripts to the document head.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Frontend\\Document;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->content(function (Document $document, Request $request) {\n            $document->head[] = '<script>alert(\"Hello, world!\")</script>';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Extending API Controllers using ApiController Extender\nDESCRIPTION: Example of customizing existing API controllers using the ApiController extender, including setting serializers, includes, limits, and sort options.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillGetData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->setSerializer(MyDiscussionSerializer::class)\n        ->addInclude('user')\n        ->addOptionalInclude('posts')\n        ->setLimit(20)\n        ->setMaxLimit(50)\n        ->setSort(['name' => 'asc'])\n        ->addSortField('firstName')\n        ->prepareDataQuery(function ($controller) {\n            // Add custom logic here to modify the controller\n            // before data queries are executed.\n        })\n]\n```\n\n----------------------------------------\n\nTITLE: Writing Unit Tests for Flarum Frontend Functions\nDESCRIPTION: Provides an example of writing unit tests for a Flarum frontend utility function (abbreviateNumber). It demonstrates various test cases using Jest's expect assertions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport abbreviateNumber from '../../../../src/common/utils/abbreviateNumber';\n\ntest('does not change small numbers', () => {\n  expect(abbreviateNumber(1)).toBe('1');\n});\n\ntest('abbreviates large numbers', () => {\n  expect(abbreviateNumber(1000000)).toBe('1M');\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n});\n\ntest('abbreviates large numbers with decimal places', () => {\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n  expect(abbreviateNumber(13234)).toBe('13.2K');\n});\n```\n\n----------------------------------------\n\nTITLE: Serializing Settings to Frontend in Flarum Extend.php\nDESCRIPTION: Example showing how to make settings available in the forum frontend using the Settings extender. This demonstrates both direct serialization and modified serialization with a callback function.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n   (new Extend\\Settings)\n      ->serializeToForum('myCoolSetting', 'my.cool.setting.key')\n      ->serializeToForum('myCoolSettingModified', 'my.cool.setting.key', function ($retrievedValue) {\n        // This third argument is optional, and allows us to pass the retrieved setting through some custom logic.\n        // In this example, we'll append a string to it.\n\n        return \"My Cool Setting: $retrievedValue\";\n      }, \"default value!\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Migration Structure in Flarum\nDESCRIPTION: Template for creating database migrations with up and down functions using Laravel's schema builder\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Schema\\Builder;\n\nreturn [\n    'up' => function (Builder $schema) {\n        // up migration\n    },\n    'down' => function (Builder $schema) {\n        // down migration\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring DayJS Localization\nDESCRIPTION: JavaScript configuration for date/time localization using DayJS library. This code should be placed in the config.js file within the locale directory.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/language-packs.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndayjs.locale('xx');\n```\n\n----------------------------------------\n\nTITLE: Defining a Middleware Class in PHP for Flarum\nDESCRIPTION: This snippet shows how to create a basic middleware class implementing the MiddlewareInterface. It includes the process method where request handling logic can be implemented before and after the request is processed.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass YourMiddleware implements MiddlewareInterface {\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // Logic to run before the request is processed and later middleware is called.\n        $response = $handler->handle($request);\n        // Logic to run after the request is processed.\n        return $response\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Routes in PHP\nDESCRIPTION: Example of how to define a new route in Flarum's backend using the Routes extender. This code adds a GET route to the forum collection with a specific path, name, and controller.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\nuse Acme\\HelloWorld\\HelloWorldController;\n\nreturn [\n    (new Extend\\Routes('forum'))\n        ->get('/hello-world', 'acme.hello-world', HelloWorldController::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Tags to Translations in JSX\nDESCRIPTION: Demonstrates how to include HTML elements in translations by passing them as parameters. This example from the Edit Group modal shows how to include a link element that will be inserted into the translation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"helpText\">\n  {app.translator.trans('icon_text', {\n    a: <a href=\"https://fortawesome.github.io/Font-Awesome/icons/\" tabindex=\"-1\"/>\n  })}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Extending Existing API Controllers in PHP\nDESCRIPTION: Uses the ApiController extender to customize an existing API controller. Demonstrates how to change the serializer, add includes, set pagination and sorting options, and add a data preparation callback.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillGetData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->setSerializer(MyDiscussionSerializer::class)\n        ->addInclude('user')\n        ->addOptionalInclude('posts')\n        ->setLimit(20)\n        ->setMaxLimit(50)\n        ->setSort(['name' => 'asc'])\n        ->addSortField('firstName')\n        ->prepareDataQuery(function ($controller) {\n            // Add custom logic here to modify the controller\n            // before data queries are executed.\n        })\n]\n```\n\n----------------------------------------\n\nTITLE: Executing Flarum CLI Cache Clear Command\nDESCRIPTION: Command to clear Flarum's backend cache to resolve issues related to stale cached data.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/troubleshoot.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum cache:clear\n```\n\n----------------------------------------\n\nTITLE: Adjusting Data Before Serialization in PHP for Flarum API\nDESCRIPTION: Demonstrates how to use the ApiController extender to modify data before it is serialized in Flarum API responses.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillSerializeData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->prepareDataForSerialization(function ($controller, $data, $request, $document) {\n            $data->load('myCustomRelation');\n        }),\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from API in JavaScript\nDESCRIPTION: Demonstrates how to fetch resources from the API using the store's find method, which returns a promise.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// GET /api/discussions?sort=createdAt\napp.store.find('discussions', {sort: 'createdAt'}).then(console.log);\n\n// GET /api/discussions/123\napp.store.find('discussions', 123).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Importing from Other Extensions in Frontend JavaScript\nDESCRIPTION: Example of how to import exported items from other Flarum extensions in frontend JavaScript code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst allThingsExportedBySomeExtension = require('@flarum-tags');\n```\n\n----------------------------------------\n\nTITLE: Showing a Resource in Flarum with AbstractShowController\nDESCRIPTION: This code snippet demonstrates how to show a single resource in Flarum by extending the `Flarum\\Api\\Controller\\AbstractShowController`. It specifies the `$serializer` property and implements the `data` method to retrieve a single model instance based on the ID passed in the query parameters. The `findOrFail` method throws an exception if the model is not found.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Flarum\\Api\\Controller\\AbstractShowController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass ShowTagController extends AbstractShowController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        $id = Arr::get($request->getQueryParams(), 'id');\n\n        return Tag::findOrFail($id);\n    }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Saving Model Relationships in JavaScript\nDESCRIPTION: Demonstrates how to update model relationships when saving a resource. The relationships property can be used to set both hasOne and hasMany relationships with model instances.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nuser.save({\n  relationships: {\n    groups: [\n      store.getById('groups', 1),\n      store.getById('groups', 2)\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Filter Mutator in Flarum\nDESCRIPTION: This code snippet demonstrates how to create a filter mutator that modifies all user filter queries to only show users from the same country as the current user. Filter mutators apply to all filter requests regardless of the specific filter being used.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterState;\nuse Flarum\\Query\\QueryCriteria;\n\nclass OnlySameCountryFilterMutator\n{\n    public function __invoke(FilterState $filterState, QueryCriteria $queryCriteria)\n    {\n        $filterState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flarum Extension Package (JSON)\nDESCRIPTION: This composer.json file configures a Flarum extension package, specifying dependencies, autoloading, and Flarum-specific metadata like the extension's title and icon.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/start.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"acme/flarum-hello-world\",\n    \"description\": \"Say hello to the world!\",\n    \"type\": \"flarum-extension\",\n    \"require\": {\n        \"flarum/core\": \"^1.0.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\"Acme\\\\HelloWorld\\\\\": \"src/\"}\n    },\n    \"extra\": {\n        \"flarum-extension\": {\n            \"title\": \"Hello World\",\n            \"icon\": {\n                \"name\": \"fas fa-smile\",\n                \"backgroundColor\": \"#238c59\",\n                \"color\": \"#fff\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Language Pack in PHP\nDESCRIPTION: Example of how to declare a Flarum language pack using the LanguagePack extender in the extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/language-packs.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn new Flarum\\Extend\\LanguagePack();\n```\n\n----------------------------------------\n\nTITLE: Rendering Blade Templates with Variables\nDESCRIPTION: This PHP code shows how to render Blade templates to strings in Flarum, allowing variables to be passed in for dynamic content generation. '$view' represents an instance of 'Illuminate\\Contracts\\View\\Factory'.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/views.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Here, $view is of type `Illuminate\\Contracts\\View\\Factory`\n$renderedString = $view->make('acme.hello-world::greeting')->render();\n\n// You can also pass variables to the view:\n$renderedString = $view->make('acme.hello-world::greeting', ['varName' => true])->render();\n```\n\n----------------------------------------\n\nTITLE: Defining a Notification Blueprint in PHP for Flarum\nDESCRIPTION: This code snippet demonstrates how to create a notification blueprint class for a post like event in Flarum. It implements the BlueprintInterface and defines methods for subject, user, data, type, and subject model.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass PostLikedBlueprint implements BlueprintInterface\n{\n    public $post;\n\n    public $user;\n\n    public function __construct(Post $post, User $user)\n    {\n        $this->post = $post;\n        $this->user = $user;\n    }\n\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    public function getFromUser()\n    {\n        return $this->user;\n    }\n\n    public function getData()\n    {\n    }\n\n    public static function getType()\n    {\n        return 'postLiked';\n    }\n\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Frontend Testing\nDESCRIPTION: Sets up a TypeScript configuration file specifically for frontend testing in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"include\": [\"tests/**/*\"],\n  \"files\": [\"../../../node_modules/@flarum/jest-config/shims.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Event Listener with Flarum CLI\nDESCRIPTION: This command uses the Flarum CLI tool to automatically generate the basic structure for an event listener, simplifying the process of setting up event handling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend event-listener\n```\n\n----------------------------------------\n\nTITLE: Frontend Route Definition in JavaScript\nDESCRIPTION: Example of registering a frontend route using the Routes extender in JavaScript.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Routes()\n    .add('acme.users', '/users', <UsersPage />),\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flarum Local Development Environment with Git and Composer\nDESCRIPTION: Commands for cloning the Flarum repository, setting up a Composer path repository, and installing dependencies for local development.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/contributing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/flarum/flarum.git\ncd flarum\n\n# Or, when you want to clone directly into the current directory\ngit clone https://github.com/flarum/flarum.git .\n# Note, the directory must be empty\n\n# Set up a Composer path repository for Flarum monorepo packages\ncomposer config repositories.0 path \"PATH_TO_MONOREPO/*/*\"\ngit clone https://github.com/<username>/framework.git PATH_TO_MONOREPO\n```\n\n----------------------------------------\n\nTITLE: Custom JSON API Response Implementation\nDESCRIPTION: Example of returning a custom JSON API error response from middleware.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/middleware.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\JsonApiResponse;\nuse Tobscure\\JsonApi\\Document;\nuse Tobscure\\JsonApi\\Exception\\Handler\\ResponseBag;\n\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    if ($userFoundInDatabase) {\n        $error = new ResponseBag('422', [\n            [\n                'status' => '422',\n                'code' => 'validation_error',\n                'source' => [\n                    'pointer' => '/data/attributes/email',\n                ],\n                'detail' => 'Yikes! Your email can\\'t be used.',\n            ],\n        ]);\n        $document = new Document();\n        $document->setErrors($error->getErrors());\n\n        return new JsonApiResponse($document, $error->getStatus());\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend GitHub Actions Workflow\nDESCRIPTION: YAML configuration for setting up frontend testing workflows including Bundlewatch, Prettier, and TypeScript checks using a reusable workflow from the Flarum framework\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Frontend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_frontend.yml@main\n    with:\n      enable_bundlewatch: false\n      enable_prettier: true\n      enable_typescript: false\n\n      frontend_directory: ./js\n      backend_directory: .\n      js_package_manager: yarn\n      main_git_branch: main\n\n    secrets:\n      bundlewatch_github_token: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Dependencies in composer.json\nDESCRIPTION: Example of how to declare required dependencies for a Flarum extension in composer.json file. Shows how to require both core and other extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.15\",\n    \"flarum/tags\": \"^0.1.0-beta.15\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Extension Page Component in JSX\nDESCRIPTION: Example of how to create a custom extension page component by extending the ExtensionPage base class. This allows for completely custom UI in the admin panel.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/admin.md#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport ExtensionPage from 'flarum/components/ExtensionPage';\n\nexport default class StarPage extends ExtensionPage {\n  content() {\n    return (\n      <h1>Ciao dalla sezione impostazioni!</h1>\n    )\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Refactoring Draft Resource with Updated Endpoints in PHP\nDESCRIPTION: This snippet demonstrates the refactored DraftResource class, including updated endpoints for creating, updating, deleting, and listing drafts. It also includes field definitions and model creation/updating logic.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n/**  \n * @extends Resource\\AbstractDatabaseResource<Draft>  \n */  \nclass DraftResource extends Resource\\AbstractDatabaseResource  \n{  \n    public function type(): string  \n    {\n        return 'drafts';\n    }\n  \n    public function model(): string  \n    {\n        return Draft::class;  \n    }\n\n    public function scope(Builder $query, OriginalContext $context): void\n    {\n        $query->where('user_id', $context->getActor()->id);\n    }\n  \n    public function endpoints(): array  \n    {  \n        return [  \n            Endpoint\\Create::make()\n                ->authenticated()\n                ->can('user.saveDrafts')\n                ->defaultInclude(['user']),\n            Endpoint\\Update::make()\n                ->authenticated()\n                ->can('user.saveDrafts')\n                ->visible(fn (Draft $draft, Context $context) => $context->getActor()->id === $draft->user_id),\n            Endpoint\\Delete::make()\n                ->authenticated()\n                ->visible(fn (Draft $draft, Context $context) => $context->getActor()->id === $draft->user_id),\n            Endpoint\\Index::make()\n                ->authenticated()\n                ->can('user.saveDrafts')\n                ->defaultInclude(['user']),\n        ];  \n    }  \n  \n    public function fields(): array  \n    {  \n        return [\n            Schema\\Str::make('title')\n                ->nullable()\n                ->writable(),\n            Schema\\Str::make('content')\n                ->nullable()\n                ->writable(),\n            Schema\\Arr::make('extra')\n                ->nullable()\n                ->writable(),\n            Schema\\Str::make('scheduledValidationError'),\n            Schema\\DateTime::make('scheduledFor')\n                ->nullable()\n                ->writable(function (Draft $draft, Context $context) {\n                    return $context->getActor()->can('user.scheduleDrafts');\n                }),\n            Schema\\DateTime::make('updatedAt'),\n            Schema\\Boolean::make('clearValidationError')\n                ->writable(),\n                ->set(function (Draft $draft, bool $value) {\n                    if ($value) {\n                        $draft->scheduled_validation_error = '';\n                    }\n                }),\n  \n            Schema\\Relationship\\ToOne::make('user')  \n                ->includable()  \n                ->inverse('drafts')  \n                ->type('users'),\n        ];  \n    } \n\n    public function creating(object $model, OriginalContext $context): ?object\n    {\n        $model->user_id = $context->getActor()->id;\n        $model->ip_address = $context->request->getAttribute('ipAddress');\n        $model->updated_at = Carbon::now();\n\n        return $model;\n    }\n\n    public function updating(object $model, OriginalContext $context): ?object\n    {\n        $model->ip_address = $context->request->getAttribute('ipAddress');\n        $model->updated_at = Carbon::now();\n\n        return $model;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Notification Driver in PHP for Flarum\nDESCRIPTION: This code snippet illustrates how to implement a custom notification driver in Flarum. It shows the PusherNotificationDriver class which implements the NotificationDriverInterface and handles sending notifications via Pusher.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Pusher;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\Driver\\NotificationDriverInterface;\nuse Illuminate\\Contracts\\Queue\\Queue;\n\nclass PusherNotificationDriver implements NotificationDriverInterface\n{\n    /**\n     * @var Queue\n     */\n    protected $queue;\n\n    public function __construct(Queue $queue)\n    {\n        $this->queue = $queue;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function send(BlueprintInterface $blueprint, array $users): void\n    {\n        // The `send` method is responsible for determining any notifications need to be sent.\n        // If not (for example, if there are no users to send to), there's no point in scheduling a job.\n        // We HIGHLY recommend that notifications are sent via a queue job for performance reasons.\n        if (count($users)) {\n            $this->queue->push(new SendPusherNotificationsJob($blueprint, $users));\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function registerType(string $blueprintClass, array $driversEnabledByDefault): void\n    {\n        // This method is generally used to register a user preference for this notification.\n        // In the case of pusher, there's no need for this.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Document Title for Route - Flarum - PHP\nDESCRIPTION: This code snippet illustrates how to set the document title for a specific route in the Flarum application using the Frontend extender. It modifies the title of the document when the '/users' route is accessed.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->route('/users', 'acme.users', function (Document $document, Request $request) {\n            $document->title = 'Users';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Pusher Notification Driver in PHP\nDESCRIPTION: Example of registering a custom Pusher notification driver using Flarum's Notification extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend\nuse Flarum\\Pusher\\PusherNotificationDriver;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->driver('pusher', PusherNotificationDriver::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Tooltip Component Example - TSX\nDESCRIPTION: Example of using the new Tooltip component for adding tooltips to elements in a more framework-independent way.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Tooltip text=\"You wish!\">\n  <button>\n    Click for free money!\n  </button>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Declaring New Filesystem Disks in PHP\nDESCRIPTION: Shows how to use the Filesystem extender to declare a new disk for Flarum. This example creates a 'flarum-uploads' disk with a specified root path and URL.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/filesystem.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Filesystem)\n        ->disk('flarum-uploads', function (Paths $paths, UrlGenerator $url) {\n            return [\n                'root'   => \"$paths->public/assets/uploads\",\n                'url'    => $url->to('forum')->path('assets/uploads')\n            ];\n        });\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Notification Driver in Flarum\nDESCRIPTION: Example of using the Notification extender to register a custom PusherNotificationDriver with the Flarum notification system.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend\nuse Flarum\\Pusher\\PusherNotificationDriver;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->driver('pusher', PusherNotificationDriver::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Updating JavaScript Imports for Namespace Pattern\nDESCRIPTION: Shows the change from old import style to new namespace-based imports in Flarum Beta 16. The example demonstrates importing a Component from the common namespace instead of directly from flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Old style (deprecated)\nimport Component from 'flarum/Component'\n\n// New style (preferred)\nimport Component from 'flarum/common/Component'\n```\n\n----------------------------------------\n\nTITLE: Saving Resources in Flarum Frontend\nDESCRIPTION: Demonstrates how to save changes to a model instance in Flarum's frontend, including updating attributes and relationships. It uses the save method which returns a Promise.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n\nuser.save({\n  relationships: {\n    groups: [\n      store.getById('groups', 1),\n      store.getById('groups', 2)\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Button with Variable Translation in JSX\nDESCRIPTION: This JSX snippet demonstrates how to create a link button in Flarum that uses a translation key with a variable placeholder, allowing dynamic content to be included in the translation.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/i18n.md#2025-04-16_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n{LinkButton.component({\n  icon: 'search',\n  children: app.translator.trans('all_discussions_button', {query}),\n  href: app.route('index', {q: query})\n})}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Old Mithril Component to New Mithril Lifecycle Methods - JavaScript\nDESCRIPTION: This snippet shows the transition from using older Mithril lifecycle methods to the newer versions introduced in Mithril 2.0. The old `init` and `config` methods are replaced by more specific lifecycle hooks like `oninit`, `oncreate`, `onbeforeupdate`, and `onremove` for better component management and efficiency.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass OldMithrilComponent extends Component {\n  init() {\n    console.log('Code to run when component instance created, but before attached to the DOM.');\n  }\n\n  config(element, isInitialized) {\n    console.log('Code to run on every redraw AND when the element is first attached');\n\n    if (isInitialized) return;\n\n    console.log('Code to execute only once when components are first created and attached to the DOM');\n\n    context.onunload = () => {\n      console.log('Code to run when the component is removed from the DOM');\n    }\n  }\n\n  view() {\n    if (dontRedraw()) return { subtree: 'retain' };\n\n    return <p>Hello World!</p>;\n  }\n}\n\nclass NewMithrilComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    console.log('Code to run when component instance created, but before attached to the DOM.');\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n    console.log('Code to run when components are first created and attached to the DOM');\n  }\n\n  onbeforeupdate(vnode, oldVnode) {\n    super.onbeforeupdate(vnode);\n    console.log('Code to run BEFORE diffing / redrawing components on every redraw');\n    if (dontRedraw()) return false;\n  }\n\n  onupdate(vnode) {\n    console.log('Code to run on every redraw AFTER the DOM is updated.');\n  }\n\n  onbeforeremove(vnode) {\n    return Promise.resolve();\n  }\n\n  onremove(vnode) {\n      console.log('Code to run when the component is removed from the DOM');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Filter Mutator for Country-Based User Filtering in PHP\nDESCRIPTION: Implements a filter mutator that restricts all user queries to only return users with the same country as the current user. This demonstrates how to modify every filter request with custom logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterState;\nuse Flarum\\Query\\QueryCriteria;\n\nclass OnlySameCountryFilterMutator\n{\n    public function __invoke(FilterState $filterState, QueryCriteria $queryCriteria)\n    {\n        $filterState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Flarum Services (PHP)\nDESCRIPTION: This code snippet demonstrates how to mock Flarum services, specifically the `SettingsRepositoryInterface`, for testing purposes. It creates a mock object, sets up expectations for method calls (like `get`), and then passes the mock to the class under test. This allows isolating the class and controlling the behavior of its dependencies.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/testing.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n    public function setUp(): void\n    {\n        parent::setUp();\n        // example - if our setting needs settings, we can mock the settings repository\n        $settingsRepo = m::mock(SettingsRepositoryInterface::class);\n        // and then control specific return values for each setting key\n        $settingsRepo->shouldReceive('get')->with('some-plugin-key')->andReturn('some-value-useful-for-testing');\n        // construct your class under test, passing mocked services as needed\n        $this->serializer = new YourClassUnderTest($settingsRepo);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag Visibility Scoper in PHP\nDESCRIPTION: A scoper class that handles visibility permissions for Tag models. It filters tags based on whether the actor has viewForum permission for each tag.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeTagVisibility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     */\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->whereIn('id', function ($query) use ($actor) {\n            Tag::query()->setQuery($query->from('tags'))->whereHasPermission($actor, 'viewForum')->select('tags.id');\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Global App and Discussion Page in Flarum (JSX)\nDESCRIPTION: Demonstrates monkey patching techniques to add a global attribute and replace the DiscussionPage view in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// Esto añade un atributo al global `app`.\napp.googleUrl = \"https://google.com\";\n\n// Esto reemplaza la salida de la página de discusión con \"Hello World\"\nimport DiscussionPage from 'flarum/components/DiscussionPage';\n\nDiscussionPage.prototype.view = function() {\n  return <p>Hello World</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Flarum Models with Attributes\nDESCRIPTION: Using the Model extender to add default values and cast attributes for existing Flarum models.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\User\\User;\n\nreturn [\n    (new Extend\\Model(User::class))\n        ->default('is_alive', true)\n        ->cast('suspended_until', 'datetime')\n        ->cast('is_admin', 'boolean')\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Sorting Options in PHP Controllers\nDESCRIPTION: PHP code showing how to define default sorting behavior and available sort fields in a Flarum API controller.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n    // Il campo di ordinamento predefinito e l'ordine da utilizzare.\n    public $sort = ['name' => 'asc'];\n    \n    // I campi disponibili per essere ordinati.\n    public $sortFields = ['firstName', 'lastName'];\n```\n\n----------------------------------------\n\nTITLE: Modifying Frontend Content with PHP in Flarum\nDESCRIPTION: Shows how to use the Frontend extender in PHP to modify the HTML document served by Flarum. This allows for adding scripts, changing page titles, and other document-level customizations that affect the frontend application.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Frontend\\Document;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->content(function (Document $document, Request $request) {\n            $document->head[] = '<script>alert(\"Hello, world!\")</script>';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Access Token Usage\nDESCRIPTION: Demonstrates how to use an access token for authentication by including the token in the Authorization header.  This allows the API request to be authenticated as the user associated with the token.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"Authorization: Token YACub2KLfe8mfmHPcUKtt6t2SMJOGPXnZbqhc3nX\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Extenders in extend.php for Beta 8\nDESCRIPTION: Example of the new extenders system in Beta 8, showing how to register JavaScript and CSS assets as well as custom routes in the extend.php file. This replaces the previous bootstrap.php approach and certain event listeners.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b8.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less')\n        ->route('/t/{slug}', 'tag')\n        ->route('/tags', 'tags'),\n\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\AddForumTagsRelationship::class);\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Using HTML Tags in JSX Translations\nDESCRIPTION: This code snippet allows for the embedding of HTML elements in translated strings by defining parameters in the translation function call, which correspond to tags within the locale files. Translations require namespaced keys and are subject to localization constraints requiring correct tag placement.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx harmony\nCODE:\n```\n<div className=\"helpText\">\n  {app.translator.trans('icon_text', {\n    a: <a href=\"https://fortawesome.github.io/Font-Awesome/icons/\" tabindex=\"-1\"/>\n  })}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Extension Page in JavaScript\nDESCRIPTION: Example of how to register a custom extension page component for your extension's admin panel interface.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/admin.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport StarPage from './components/StarPage';\n\napp.initializers.add('interstellar', function(app) {\n\n  app.extensionData\n    .for('acme-interstellar')\n    .registerPage(StarPage);\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Flarum Extension\nDESCRIPTION: Configures tsconfig.json to enable TypeScript support with Flarum-specific settings and typings.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"flarum-tsconfig\",\n  \"include\": [\"src/**/*\", \"../vendor/flarum/core/js/dist-typings/@types/**/*\"],\n  \"compilerOptions\": {\n    \"declarationDir\": \"./dist-typings\",\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"flarum/*\": [\"../vendor/flarum/core/js/dist-typings/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Relationships to Flarum Models\nDESCRIPTION: Shows how to add standard Eloquent relationships (hasOne, belongsTo, hasMany, belongsToMany) to existing Flarum models using the Model extender. This connects models to related data in other tables.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->hasOne('phone', 'App\\\\Phone', 'foreign_key', 'local_key')\n        ->belongsTo('country', 'App\\\\Country', 'foreign_key', 'other_key')\n        ->hasMany('comment', 'App\\\\Comment', 'foreign_key', 'local_key')\n        ->belongsToMany('role', 'App\\\\Role', 'role_user', 'user_id', 'role_id')\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Relationships to Backend Models with PHP\nDESCRIPTION: Demonstrates using the relationship method to add more complex Eloquent relationships to models. This allows for custom relationship definitions where simple methods aren't sufficient, supporting any valid Eloquent relationship type.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->relationship('mobile', 'App\\Phone', function ($user) {\n            // Return any Eloquent relationship here.\n            return $user->belongsToMany(Discussion::class, 'recipients')\n                ->withTimestamps()\n                ->wherePivot('removed_at', null);\n        })\n```\n\n----------------------------------------\n\nTITLE: Registering a Notification Type in PHP for Flarum\nDESCRIPTION: This code snippet shows how to register a custom notification type in Flarum using the Notification extender. It specifies the blueprint class, serializer, and default notification methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Api\\Serializer\\BasicDiscussionSerializer;\nuse Flarum\\Extend\nuse Flarum\\Subscriptions\\Notification\\NewPostBlueprint;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->type(NewPostBlueprint::class, BasicDiscussionSerializer::class, ['alert', 'email']),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Composer Scripts Configuration for Testing\nDESCRIPTION: Additions to composer.json that define scripts for running unit and integration tests with appropriate configuration.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/testing.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"test\": [\n        \"@test:unit\",\n        \"@test:integration\"\n    ],\n    \"test:unit\": \"phpunit -c tests/phpunit.unit.xml\",\n    \"test:integration\": \"phpunit -c tests/phpunit.integration.xml\",\n    \"test:setup\": \"@php tests/integration/setup.php\"\n},\n\"scripts-descriptions\": {\n    \"test\": \"Runs all tests.\",\n    \"test:unit\": \"Runs all unit tests.\",\n    \"test:integration\": \"Runs all integration tests.\",\n    \"test:setup\": \"Sets up a database for use with integration tests. Execute this only once.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Route-Based Middleware Filtering Using URI Path\nDESCRIPTION: Example of implementing route-specific middleware logic by checking the request URI path.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/middleware.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Laminas\\Diactoros\\Uri;\n\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n  {\n    $currentRoute = $request->getUri()->getPath();\n    $routeToRunUnder = new Uri(app()->url('/path/to/run/under'));\n\n    if ($currentRoute === $routeToRunUnder->getPath()) {\n        // Your logic here!\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Setup Script for Integration Tests\nDESCRIPTION: PHP script to initialize the testing environment for Flarum integration tests, setting up the database and file structure.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Testing\\integration\\Setup\\SetupScript;\n\nrequire __DIR__.'/../../vendor/autoload.php';\n\n$setup = new SetupScript();\n\n$setup->run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Resolvers in Flarum\nDESCRIPTION: Demonstrates different ways of registering routes with resolvers, including using resolver instances, resolver classes, and default resolvers\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/frontend-pages.md#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// See above for a custom page example\nimport CustomPage from './components/CustomPage';\n// See below for a custom resolver example\nimport CustomPageResolver from './resolvers/CustomPageResolver';\n\n// Use a route resolver instance\napp.routes['resolverInstance'] = {path: '/custom/path/1', resolver: {\n  onmatch: function(args) {\n    if (!app.session.user) return m.route.SKIP;\n\n    return CustomPage;\n  }\n}};\n\n// Use a custom route resolver class\napp.routes['resolverClass'] = {path: '/custom/path/2', resolverClass: CustomPageResolver, component: CustomPage};\n\n// Use the default resolver class (`flarum/common/resolvers/DefaultResolver`)\napp.routes['resolverClass'] = {path: '/custom/path/2', component: CustomPage};\n```\n\n----------------------------------------\n\nTITLE: Special Translation Namespaces in YAML\nDESCRIPTION: Special second-level namespaces that don't correspond to interfaces but require special handling: 'ref' for translations referenced by multiple keys and 'group' for default group names translated by the server.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nref:         # Translations referenced by more than one key.\ngroup:       # Translations used as default group names.\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Settings Access in Flarum\nDESCRIPTION: Example configuration showing how to serialize settings for frontend access using the Settings extender\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n   (new Extend\\Settings)\n      ->serializeToForum('myCoolSetting', 'my.cool.setting.key')\n      ->serializeToForum('myCoolSettingModified', 'my.cool.setting.key', function ($retrievedValue) {\n        // This third argument is optional, and allows us to pass the retrieved setting through some custom logic.\n        // In this example, we'll append a string to it.\n\n        return \"My Cool Setting: $retrievedValue\";\n      }, \"default value!\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Flarum Commands in XML Format\nDESCRIPTION: Example of using the help command with a specific output format. This command displays help information for the 'list' command in XML format.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/console.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum help --format=xml list\n```\n\n----------------------------------------\n\nTITLE: Implementing SlugDriverInterface in PHP for Flarum Model Slugging\nDESCRIPTION: This code snippet demonstrates how to implement the SlugDriverInterface for custom model slugging in Flarum. It includes methods for generating and validating slugs.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/slugging.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Database\\AbstractModel;\nuse Flarum\\Http\\SlugDriverInterface;\n\nclass CustomSlugger implements SlugDriverInterface\n{\n    public function toSlug(AbstractModel $instance): string\n    {\n        return Str::slug($instance->name);\n    }\n\n    public function fromSlug(string $slug, AbstractModel $instance): AbstractModel\n    {\n        return $instance->where('slug', $slug)->firstOrFail();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Flarum Translator in JavaScript\nDESCRIPTION: This snippet shows how to use the translator in a Flarum extension's JavaScript code. It accesses a translation by its key using the app.translator.trans() method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('acme-hello-world', function() {\n  alert(app.translator.trans('acme-hello-world.alert.hello_text'));\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Special Translation Namespaces in YAML\nDESCRIPTION: Shows special namespaces for translations that require special handling, including referenced translations and default group names.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nref:         # Translations referenced by more than one key.\ngroup:       # Translations used as default group names.\n```\n\n----------------------------------------\n\nTITLE: Adding Content to Frontend Route Registrations in PHP\nDESCRIPTION: Demonstrates how to add content to frontend route registrations using the Frontend extender. This example sets the document title for a specific route.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->route('/users', 'acme.users', function (Document $document, Request $request) {\n            $document->title = 'Users';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies in composer.json for Flarum Extension\nDESCRIPTION: This JSON snippet shows how to declare dependencies for a Flarum extension in the composer.json file. It includes both the core Flarum dependency and an additional extension dependency.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.15\",\n    \"flarum/tags\": \"^0.1.0-beta.15\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships in PHP for Flarum Serializers\nDESCRIPTION: Illustrates how to specify relationships for a resource in a Flarum serializer by creating methods that return hasOne or hasMany calls.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n    protected function user($discussion)\n    {\n        return $this->hasOne($discussion, UserSerializer::class);\n    }\n```\n\n----------------------------------------\n\nTITLE: Extending Existing API Serializers in Flarum\nDESCRIPTION: Shows how to extend existing JSON:API serializers to add new attributes and relationships. This approach allows adding custom data to standard Flarum resources without modifying core code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nreturn [\n    (new Extend\\ApiSerializer(UserSerializer::class))\n        // Un atributo a la vez\n        ->attribute('firstName', function ($serializer, $user, $attributes) {\n                return $user->first_name\n        })\n        // Múltiples modificaciones a la vez, lógica más compleja\n        ->mutate(function($serializer, $user, $attributes) {\n            $attributes['someAttribute'] = $user->someAttribute;\n            if ($serializer->getActor()->can('administrate')) {\n                $attributes['someDate'] = $serializer->formatDate($user->some_date);\n            }\n\n            return $attributes;\n        })\n        // Relaciones de la API\n        ->hasOne('phone', PhoneSerializer::class)\n        ->hasMany('comments', CommentSerializer::class),\n]\n```\n\n----------------------------------------\n\nTITLE: Replacing Zend Namespace with Laminas in PHP\nDESCRIPTION: Update code to use the Laminas namespace instead of the deprecated Zend namespace for better compatibility with Flarum Beta 13.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b13.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Old code\nuse Zend\\SomeClass;\n\n// New code\nuse Laminas\\SomeClass;\n```\n\n----------------------------------------\n\nTITLE: Registering Locales in Flarum Extensions with PHP\nDESCRIPTION: Shows how to register translations for a Flarum extension using PHP in the extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/i18n.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnew Extend\\Locales(__DIR__ . '/locale'),\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Testing in package.json\nDESCRIPTION: Shows how to set up the package.json file for frontend testing in a Flarum extension, including adding the test script and specifying the module type.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"scripts\": {\n    ...,\n    \"test\": \"yarn node --experimental-vm-modules $(yarn bin jest)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Templates in Flarum\nDESCRIPTION: This snippet showcases how to override existing Blade templates within Flarum using the 'Extend\\View' extender. The 'extendNamespace' method is used to specify a new directory that overrides the default view templates.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/views.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->extendNamespace('acme.hello-world', __DIR__.'/override_views');\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Parent-Child Component Communication in JavaScript\nDESCRIPTION: Demonstrates the old pattern of storing child component instances and the new pattern of passing data as attributes. This change is due to optimizations in Mithril's redrawing algorithms.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass ChildComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return <p>{this.counter}</p>;\n  }\n}\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.child = new ChildComponent();\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.child.counter += 1}></button>\n        {this.child.render()}\n      </div>\n    )\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass ChildComponent extends Component {\n  view() {\n    return <p>{this.attrs.counter}</p>;\n  }\n}\n\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.counter += 1}></button>\n        <ChildComponent counter={this.counter}></ChildComponent>\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Routes with Flarum CLI\nDESCRIPTION: Command to automatically generate backend routes using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend route\n```\n\n----------------------------------------\n\nTITLE: Authenticating with API Key in HTTP Request\nDESCRIPTION: Shows how to use an API key for authentication in the Authorization header of an HTTP request. The key value and user ID are included in the header.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nAuthorization: Token YOUR_API_KEY_VALUE; userId=1\n```\n\n----------------------------------------\n\nTITLE: JavaScript String Slug Function Usage\nDESCRIPTION: References the JavaScript slug() helper for suggesting slugs to users.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b12.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nflarum/utils/string\n```\n\n----------------------------------------\n\nTITLE: Configuring webpack for Importing from Other Extensions\nDESCRIPTION: JavaScript configuration for webpack to allow importing from other Flarum extensions in the frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = require('flarum-webpack-config')({\n    useExtensions: ['flarum-tags']\n});\n```\n\n----------------------------------------\n\nTITLE: Using Flarum CLI to Generate Command\nDESCRIPTION: Command line instruction for automatically generating and registering a console command using Flarum CLI.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/console.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend command\n```\n\n----------------------------------------\n\nTITLE: Basic Migration Structure in PHP\nDESCRIPTION: Template for creating database migrations in Flarum with up and down functions using Laravel's schema builder\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Schema\\Builder;\n\nreturn [\n    'up' => function (Builder $schema) {\n        // up migration\n    },\n    'down' => function (Builder $schema) {\n        // down migration\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Filter Mutator in PHP for Flarum\nDESCRIPTION: This snippet shows how to implement a filter mutator in Flarum. The mutator ensures that only users from the same country as the current user are included in any filter results.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterState;\nuse Flarum\\Query\\QueryCriteria;\n\nclass OnlySameCountryFilterMutator\n{\n    public function __invoke(FilterState $filterState, QueryCriteria $queryCriteria)\n    {\n        $filterState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Post Throttling Function in PHP\nDESCRIPTION: This example demonstrates Flarum's post throttler that limits posting frequency. It checks if the route is for creating discussions or posts, verifies if the user has permission to bypass throttling, and determines if the user has posted within the last 10 seconds.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/api-throttling.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse DateTime;\nuse Flarum\\Post\\Post;\n\nfunction ($request) {\n    if (! in_array($request->getAttribute('routeName'), ['discussions.create', 'posts.create'])) {\n        return;\n    }\n\n    $actor = $request->getAttribute('actor');\n\n    if ($actor->can('postWithoutThrottle')) {\n        return false;\n    }\n\n    if (Post::where('user_id', $actor->id)->where('created_at', '>=', new DateTime('-10 seconds'))->exists()) {\n        return true;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Flarum Extension\nDESCRIPTION: TSConfig file for enabling TypeScript support in a Flarum extension, including settings for type definitions and paths.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"flarum-tsconfig\",\n  \"include\": [\"src/**/*\", \"../vendor/flarum/core/js/dist-typings/@types/**/*\"],\n  \"compilerOptions\": {\n    \"declarationDir\": \"./dist-typings\",\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"flarum/*\": [\"../vendor/flarum/core/js/dist-typings/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Requests in Flarum Integration Tests\nDESCRIPTION: This snippet shows how to send HTTP requests in Flarum integration tests. It demonstrates creating and sending GET and POST requests with authentication and JSON payloads using the request() and send() methods provided by TestCase.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    /**\n     * @test\n     */\n    public function can_search_users()\n    {\n        $response = $this->send(\n          $this->request('GET', '/api/users', ['authenticatedAs' => 1])\n               ->withQueryParams(['filter' => ['q' => 'john group:1'], 'sort' => 'username'])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    /**\n     * @test\n     */\n    public function can_create_user()\n    {\n        $response = $this->send(\n          $this->request(\n                'POST',\n                '/api/users',\n                [\n                    'authenticatedAs' => 1,\n                    'json' => [\n                        'data' => [\n                            'attributes' => [\n                                'username' => 'test',\n                                'password' => 'too-obscure',\n                                'email' => 'test@machine.local'\n                            ]\n                        ]\n                    ]\n                ]\n            )\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Import Paths for Export Registry\nDESCRIPTION: Example showing how to update import syntax to use the new Export Registry format with the 'ext:' prefix for importing from extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport Tag from 'flarum/tags/common/models/Tag';\n\n// After\nimport Tag from 'ext:flarum/tags/common/models/Tag';\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Event in Flarum (PHP)\nDESCRIPTION: Illustrates how to define a custom event class in a Flarum extension, using the Deleted event as an example.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Post\\Event;\n\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass Deleted\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var User\n     */\n    public $actor;\n\n    /**\n     * @param Post $post\n     * @param User $user\n     */\n    public function __construct(Post $post, User $actor = null)\n    {\n        $this->post = $post;\n        $this->actor = $actor;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Alert Creation in Flarum JavaScript\nDESCRIPTION: This code demonstrates the new way of creating alerts in Flarum. It shows three different overloads of the show method, allowing for flexible alert creation without storing component instances.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napp.alerts.show('Hello, this is a success alert!');\napp.alerts.show({type: 'success'}, 'Hello, this is a success alert!');\napp.alerts.show(Alert, {type: 'success'}, 'Hello, this is a success alert!');\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Flarum Extension\nDESCRIPTION: TSConfig setup for enabling TypeScript support in Flarum extensions with proper path mappings and compiler options.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"flarum-tsconfig\",\n  \"include\": [\"src/**/*\", \"../vendor/flarum/core/js/dist-typings/@types/**/*\"],\n  \"compilerOptions\": {\n    \"declarationDir\": \"./dist-typings\",\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"flarum/*\": [\"../vendor/flarum/core/js/dist-typings/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Nested YAML Translations for Flarum Extensions\nDESCRIPTION: Shows how to organize translations in a YAML file using namespacing and proper indentation for Flarum extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nacme-hello-world:\n  alert:\n    hello_text: \"Hello, world!\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Console Command in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to create a custom console command class in PHP for a Flarum extension. It extends the AbstractCommand class and implements the required configure and fire methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/console.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Console\\AbstractCommand;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass YourCommand extends AbstractCommand {\n  protected function configure()\n  {\n      $this\n          ->setName('YOUR COMMAND NAME')\n          ->setDescription('YOUR COMMAND DESCRIPTION');\n  }\n  protected function fire()\n  {\n    // Your logic here!\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Discussion Visibility Scoper in PHP\nDESCRIPTION: An example scoper for handling private discussion visibility using orWhere clauses to extend existing visibility rules.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace ACME\\YourExtension\\Access;\n\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     */\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->orWhere(function($query) use ($actor) {\n            $query->where('some_column', true);\n            $query->where('some_other_column', false);\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Component for Internal and External Navigation in JSX\nDESCRIPTION: Demonstrates how to use Flarum's Link component to create internal and external links in JSX. It shows various use cases including basic usage, route generation, and external link creation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'flarum/common/components/Link';\n\n// Link can be used just like any other component:\n<Link href=\"/route/known/to/mithril\">Hello World!</Link>\n\n// You'll frequently use Link with generated routes:\n<Link href={app.route('settings')}>Hello World!</Link>\n\n// Link can even generate external links with the external attr:\n<Link external={true} href=\"https://google.com\">Hello World!</Link>\n\n// The above example with external = true is equivalent to:\n<a href=\"https://google.com\">Hello World!</a>\n// but is provided for flexibility: sometimes you might have links\n// that are conditionally internal or external.\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom User Filter in PHP\nDESCRIPTION: This snippet demonstrates how to create a custom Filter class for filtering users by country in Flarum. It includes the implementation of the FilterInterface with methods for getting the filter key and applying the filter.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterInterface;\nuse Flarum\\Filter\\FilterState;\n\nclass CountryFilter implements FilterInterface\n{\n    public function getFilterKey(): string\n    {\n        return 'country';\n    }\n\n    public function filter(FilterState $filterState, string $filterValue, bool $negate)\n    {\n        $country = trim($filterValue, '\"');\n\n        $filterState->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Middleware Class in PHP\nDESCRIPTION: Shows how to create a basic middleware class implementing the PSR-15 MiddlewareInterface with process method for handling requests.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/middleware.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass YourMiddleware implements MiddlewareInterface {\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // Logic to run before the request is processed and later middleware is called.\n        $response = $handler->handle($request);\n        // Logic to run after the request is processed.\n        return $response\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementando un Componente de Formulario en Flarum (JSX)\nDESCRIPTION: Ejemplo de cómo crear un componente de formulario en Flarum utilizando los componentes FieldSet, Button y Switch. Demuestra el manejo de entradas y la estructura básica del formulario.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/forms.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/Component';\nimport FieldSet from 'flarum/components/FieldSet';\nimport Button from 'flarum/components/Button';\nimport Switch from 'flarum/components/Switch';\n\n\nclass FormComponent extends Component {\n  oninit(vnode) {\n    this.textInput = \"\";\n    this.booleanInput = false;\n  }\n\n  view() {\n    return (\n      <form onsubmit={this.onsubmit.bind(this)}>\n        <FieldSet label={app.translator.trans('fake-extension.form.fieldset_label')}>\n          <input className=\"FormControl\" value={this.textInput} oninput={e => this.textInput = e.target.value}>\n          </input>\n          <Switch state={this.booleanInput} onchange={val => this.booleanInput = val}>\n          </Switch>\n        </FieldSet>\n        <Button type=\"submit\">{app.translator.trans('core.admin.basics.submit_button')}</Button>\n      </form>\n    )\n  }\n\n  onsubmit() {\n    // Lógica de manejo de formularios aquí\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending and Overriding Methods in Flarum (JSX)\nDESCRIPTION: Shows how to use extend and override utilities to modify Flarum's HeaderPrimary component, adding new items and conditionally altering the output.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend, override } from 'flarum/extend';\nimport HeaderPrimary from 'flarum/components/HeaderPrimary';\nimport ItemList from 'flarum/utils/ItemList';\nimport CustomComponentClass from './components/CustomComponentClass';\n\n// Aquí, añadimos un elemento a la lista de elementos devuelta. Estamos utilizando un componente personalizado\n// como se ha comentado anteriormente. También hemos especificado una prioridad como tercer argumento,\n// que se utilizará para ordenar estos elementos. Ten en cuenta que no necesitamos devolver nada.\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add(\n    'google',\n    <CustomComponentClass>\n      <a href=\"https://google.com\">Google</a>\n    </CustomComponentClass>,\n    5\n  );\n});\n\n// Aquí, utilizamos condicionalmente la salida original de un método,\n// o creamos nuestro propio ItemList, y luego añadimos un elemento a él.\n// Ten en cuenta que DEBEMOS devolver nuestra salida personalizada.\noverride(HeaderPrimary.prototype, 'items', function(original) {\n  let items;\n\n  if (someArbitraryCondition) {\n    items = original();\n  } else {\n    items = new ItemList();\n  }\n\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n\n  return items;\n});\n```\n\n----------------------------------------\n\nTITLE: Saving Resources in Flarum Frontend\nDESCRIPTION: Shows how to save changes to a model instance through the API, including updating attributes and relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n\nuser.save({\n  relationships: {\n    groups: [\n      store.getById('groups', 1),\n      store.getById('groups', 2)\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Access Token in Flarum REST API\nDESCRIPTION: This snippet demonstrates how to create an access token using the /api/token endpoint with user credentials. It shows the request format and the expected response containing the token and user ID.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nPOST /api/token HTTP/1.1\n\n{\n    \"identification\": \"Toby\",\n    \"password\": \"pass7word\"\n}\n\nHTTP/1.1 200 OK\n\n{\n    \"token\": \"YACub2KLfe8mfmHPcUKtt6t2SMJOGPXnZbqhc3nX\",\n    \"userId\": \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Group and User Permissions in PHP\nDESCRIPTION: Demonstrates common methods for checking group and user permissions in Flarum. This includes retrieving a group's permissions, checking if a group or user has a specific permission, and enumerating all of a user's permissions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// An Eloquent relation to the group's permissions\n$group->permissions();\n\n// Check if a group has a permission\n$group->hasPermission('viewForum');\n\n// Enumerate all the user's permissions\n$user->getPermissions();\n\n// Check if the user is in a group with the given permission\n$user->hasPermission('viewForum');\n```\n\n----------------------------------------\n\nTITLE: Defining Frontend Routes in PHP for Flarum\nDESCRIPTION: Example of how to define a frontend route on the backend using the Frontend extender in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Frontend('forum'))\n        ->route('/users', 'acme.users')\n```\n\n----------------------------------------\n\nTITLE: Defining Pluralizable Translations in YAML for Flarum\nDESCRIPTION: This YAML snippet demonstrates how to define translations that can be pluralized in Flarum. It includes two keys for mentioned_by_text, allowing for different translations based on the number of users. A comment is suggested to alert localizers about the pluralization support.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nmentioned_by_text: \"{users} replied to this.\"       # Can be pluralized ...\nmentioned_by_self_text: \"{users} replied to this.\"  # Can be pluralized ...\n```\n\n----------------------------------------\n\nTITLE: Registering a New Frontend Model with the Store\nDESCRIPTION: Shows how to register a new frontend model with the store using the Store extender in JavaScript.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Store()\n    .add('tags', Tag),\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Throttlers in Flarum's extend.php\nDESCRIPTION: This example shows how to add or remove throttlers using the ThrottleApi extender in Flarum's extend.php configuration file. It demonstrates setting a new throttler named 'throttleAll' that disables throttling for all requests, and removing an existing throttler named 'bypassThrottlingAttribute'.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/api-throttling.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    // Other extenders\n    (new Extend\\ThrottleApi())\n        ->set('throttleAll', function () {\n          return false;\n        })\n        ->remove('bypassThrottlingAttribute'),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Tags to Flarum Translations in JSX\nDESCRIPTION: Shows how to add HTML tags to translations in Flarum using JSX, specifically for the Edit Group modal in the admin interface.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/i18n.md#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"helpText\">\n  {app.translator.trans('icon_text', {\n    a: <a href=\"https://fortawesome.github.io/Font-Awesome/icons/\" tabindex=\"-1\"/>\n  })}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Comparación de Uso de Bidi en Formularios Flarum (JSX)\nDESCRIPTION: Ejemplo que compara el manejo de entradas de formulario con y sin el atributo bidi en Flarum. Demuestra cómo bidi simplifica la unión bidireccional de datos.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/forms.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/utils/Stream';\n\nconst value = Stream();\n\n// Sin bidi\n<input type=\"text\" value={value()} oninput={e => value(e.target.value)}></input>\n\n// Con bidi\n<input type=\"text\" bidi={value}></input>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in PHP\nDESCRIPTION: Demonstrates how to add pagination to draft listing endpoints with configurable page size limits.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nclass DraftResource extends Resource\\AbstractDatabaseResource\n{\n    ...\n\n    public function endpoints(): array\n    {\n        return [\n            ...\n            Endpoint\\Index::make()\n                ->authenticated()\n                ->can('user.saveDrafts')\n                ->defaultInclude(['user'])\n                ->paginate(20, 50),\n        ];\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Settings Serialization for Flarum Frontend\nDESCRIPTION: Shows how to use the Settings extender to serialize specific settings for use in the Flarum forum frontend. This includes options for custom processing of setting values.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n   (new Extend\\Settings)\n      ->serializeToForum('myCoolSetting', 'my.cool.setting.key')\n      ->serializeToForum('myCoolSettingModified', 'my.cool.setting.key', function ($retrievedValue) {\n        // This third argument is optional, and allows us to pass the retrieved setting through some custom logic.\n        // In this example, we'll append a string to it.\n\n        return \"My Cool Setting: $retrievedValue\";\n      }, \"default value!\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Routes with Flarum Extender in PHP\nDESCRIPTION: This PHP snippet demonstrates how to define a route in Flarum using the `Routes` extender. It specifies a `GET` route that maps a URL path to a controller class that handles the HTTP request. The route is registered under the `forum` route collection and utilizes the FastRoute syntax for path definition.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\nuse Acme\\HelloWorld\\HelloWorldController;\n\nreturn [\n    (new Extend\\Routes('forum'))\n        ->get('/hello-world', 'acme.hello-world', HelloWorldController::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Default Permissions in Flarum Migrations\nDESCRIPTION: Data migration example showing how to specify default permissions for a Flarum extension, assigning a custom permission to the moderator group.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\nreturn Migration::addPermissions([\n    'some.permission' => Group::MODERATOR_ID\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Global Functions in PHP Extenders for Flarum Beta 16\nDESCRIPTION: Shows how to use global functions and array-type functions in Flarum extenders that support callbacks or closures.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n'boolval'\n```\n\nLANGUAGE: PHP\nCODE:\n```\n[ClassName::class, 'methodName']\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Example for abbreviateNumber Function\nDESCRIPTION: Example of unit tests for a utility function that abbreviates large numbers. Demonstrates testing different scenarios and edge cases with Jest.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport abbreviateNumber from '../../../../src/common/utils/abbreviateNumber';\n\ntest('does not change small numbers', () => {\n  expect(abbreviateNumber(1)).toBe('1');\n});\n\ntest('abbreviates large numbers', () => {\n  expect(abbreviateNumber(1000000)).toBe('1M');\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n});\n\ntest('abbreviates large numbers with decimal places', () => {\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n  expect(abbreviateNumber(13234)).toBe('13.2K');\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking User and Request in PHP Unit Tests\nDESCRIPTION: Shows how to mock User and Request classes for validating authorization interactions in PHP unit tests.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$this->actor = m::mock(User::class);\n$request = m::mock(Request::class)->makePartial();\n$request->shouldReceive('getAttribute->getActor')->andReturn($this->actor);\n$this->actor->shouldReceive('SOME PERMISSION')->andReturn(true/false);\n```\n\n----------------------------------------\n\nTITLE: Updating Mithril Routing in Flarum Extensions\nDESCRIPTION: Shows how to update route definitions and link creation from Mithril 0.2 to Mithril 2.0. Examples include defining routes with components and using the new Link component instead of config={m.route}.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\napp.routes.new_page = { path: '/new', component: NewPage.component() }\n\n// Mithril 2.0\napp.routes.new_page = { path: '/new', component: NewPage }\n```\n\n----------------------------------------\n\nTITLE: Saving Model Relationships in JavaScript\nDESCRIPTION: Demonstrates saving relationships along with model attributes. For has-one relationships, pass a single model instance; for has-many relationships, pass an array of instances.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nuser.save({\n  relationships: {\n    groups: [\n      store.getById('groups', 1),\n      store.getById('groups', 2)\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Resources in JavaScript\nDESCRIPTION: Demonstrates how to delete resources using the model instance\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.delete().then(done);\n```\n\n----------------------------------------\n\nTITLE: Updating Route Registration from Mithril 0.2 to Mithril 2.0\nDESCRIPTION: Shows how to update route registration syntax from Mithril 0.2 to Mithril 2.0, changing from passing component instances to passing component classes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\napp.routes.new_page = { path: '/new', component: NewPage.component() }\n\n// Mithril 2.0\napp.routes.new_page = { path: '/new', component: NewPage }\n```\n\n----------------------------------------\n\nTITLE: Implementing a SlugDriver Interface in PHP for Flarum Models\nDESCRIPTION: Shows the required methods for implementing a SlugDriver interface for Flarum models. The interface requires defining toSlug for converting a model to a slug and fromSlug for retrieving a model from a slug.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/slugging.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function toSlug(Model $instance): string;\n\npublic function fromSlug(string $slug, User $actor): Model;\n```\n\n----------------------------------------\n\nTITLE: Accessing Cached Resources in JavaScript Store\nDESCRIPTION: JavaScript code showing how to access cached resources from Flarum's store using the all and getById methods without making additional API requests.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussions = app.store.all('discussions');\nconst discussion = app.store.getById('discussions', 123);\n```\n\n----------------------------------------\n\nTITLE: Referencing Translation Keys in YAML\nDESCRIPTION: Demonstrates how to reuse translation keys across different contexts using the ref namespace, showing how to create reusable translations in Flarum's localization system\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\\n\\n  forum:\\n    header:\\n      log_in_link: => core.ref.log_in\\n\\n    log_in:\\n      submit_button: => core.ref.log_in\\n      title: => core.ref.log_in\\n\\n  ref:\\n    log_in: Log In\n```\n\n----------------------------------------\n\nTITLE: Checking Optional Dependencies in Flarum Backend\nDESCRIPTION: Demonstrates how to inject and use the ExtensionManager in PHP to check if an optional extension is enabled in the backend.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/extending-extensions.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extension\\ExtensionManager;\n\nclass SomeClass {\n    public function __construct(ExtensionManager $extensions)\n    {\n        $this->extensions = $extensions;\n    }\n\n    public function someMethod()\n    {\n        if ($this->extensions->isEnabled('some-extension-id')) {\n            // do something.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Search Mutator for User Filtering\nDESCRIPTION: Implements a search mutator to filter users based on matching country with the current user. Demonstrates how to modify search behavior globally.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/search.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Search\\Database\\DatabaseSearchState;\nuse Flarum\\Seach\\SeachCriteria;\n\nclass OnlySameCountrySearchMutator\n{\n    public function __invoke(DatabaseSearchState $state, SearchCriteria $criteria)\n    {\n        $state->getQuery()->where('users.country', $state->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Models in JavaScript\nDESCRIPTION: JavaScript code showing how to create a new model class for a custom resource type in Flarum, defining attributes and relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport Model from 'flarum/Model';\n\nexport default class Tag extends Model {\n  title = Model.attribute('title');\n  createdAt = Model.attribute('createdAt', Model.transformDate);\n  parent = Model.hasOne('parent');\n  discussions = Model.hasMany('discussions');\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Extension Page in Flarum Admin\nDESCRIPTION: Demonstrates how to register a custom extension page in the Flarum admin panel using the Admin extender.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/admin.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\nimport app from 'flarum/admin/app';\n\nimport StarPage from './components/StarPage';\n\nreturn [\n  new Extend.Admin()\n    .page(StarPage)\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Listing Query Implementation - PHP 1.x\nDESCRIPTION: Demonstrates how to implement custom listing queries for flags in Flarum 1.x, including group by functionality and actor flag reading timestamp updates.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nclass ListFlagsController extends AbstractListController\n{\n    public $serializer = FlagSerializer::class;\n\n    public $include = [\n        'user',\n        'post',\n        'post.user',\n        'post.discussion'\n    ];\n\n    protected function data(ServerRequestInterface $request, Document $document)\n    {\n        $actor = RequestUtil::getActor($request);\n        $include = $this->extractInclude($request);\n\n        $actor->assertRegistered();\n\n        $actor->read_flags_at = Carbon::now();\n        $actor->save();\n\n        $flags = Flag::whereVisibleTo($actor)\n            ->latest('flags.created_at')\n            ->groupBy('post_id')\n            ->get();\n\n        if (in_array('post.user', $include)) {\n            $include[] = 'post.user.groups';\n        }\n\n        $this->loadRelations($flags, $include);\n\n        return $flags;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Closure Extender Example in PHP\nDESCRIPTION: Example of deprecated closure-based extension approach that was used in early Flarum versions to subscribe event listeners.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\FilterDiscussionListByTags::class);\n        $events->subscribe(Listener\\FilterPostsQueryByTag::class);\n        $events->subscribe(Listener\\UpdateTagMetadata::class);\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Locales in PHP\nDESCRIPTION: Shows how to register translation files in a Flarum extension\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnew Extend\\Locales(__DIR__ . '/locale'),\n```\n\n----------------------------------------\n\nTITLE: Tagging First Release\nDESCRIPTION: Git commands to tag a new version of the extension and push tags to the remote repository. This marks a specific point in the project's development for release.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/distribution.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v0.1.0\ngit push && git push --tags\n```\n\n----------------------------------------\n\nTITLE: Adding Views Configuration in PHP\nDESCRIPTION: Example showing how to configure view namespace and directory using Flarum's View extender in extend.php\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/views.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views'),\n];\n```\n\n----------------------------------------\n\nTITLE: Generating Developer Access Token\nDESCRIPTION: Shows how to create a non-expiring developer access token for a specific user ID from within an extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nFlarum\\Http\\DeveloperAccessToken::generate($userId)\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum Testing Package with CLI\nDESCRIPTION: Command to add backend testing infrastructure to a Flarum extension using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra backendTesting\n```\n\n----------------------------------------\n\nTITLE: WithAttr Usage in Flarum with JSX\nDESCRIPTION: This JSX code demonstrates how to use the `withAttr` utility in Flarum for simplified form processing. It shows how to bind an input's value to a Stream or any callable function, abstracting away the DOM event details.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/forms.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\nimport withAttr from 'flarum/common/utils/withAttr';\n\nconst value = Stream();\n\n// With a stream\n<input type=\"text\" value={value()} oninput={withAttr('value', value)}></input>\n\n// With any callable\n<input type=\"text\" value={value()} oninput={withAttr('value', (currValue) => {\n  // Some custom logic here\n})}></input>\n```\n\n----------------------------------------\n\nTITLE: Importing Core Split Module in JavaScript\nDESCRIPTION: Demonstrates how to import a split module from Flarum core, such as the LogInModal component.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/code-splitting.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport('flarum/forum/components/LogInModal').then(({ default: LogInModal }) => {\n  // do something with LogInModal\n});\n```\n\n----------------------------------------\n\nTITLE: Explaining CSS Naming Conventions in Flarum\nDESCRIPTION: This snippet describes the CSS class naming conventions used in Flarum, which are based on SUIT CSS naming conventions.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/contributing.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### CSS\n\nFlarum's CSS classes roughly follow the [SUIT CSS naming conventions](https://github.com/suitcss/suit/blob/master/doc/naming-conventions.md) using the format `.ComponentName-descendentName--modifierName`.\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Throttling Logic in PHP\nDESCRIPTION: Example of a custom throttler that limits post creation frequency. It checks if the request is for post creation, verifies user permissions, and ensures users can't post more frequently than every 10 seconds.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api-throttling.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse DateTime;\nuse Flarum\\Post\\Post;\n\nfunction ($request) {\n    if (! in_array($request->getAttribute('routeName'), ['discussions.create', 'posts.create'])) {\n        return;\n    }\n\n    $actor = $request->getAttribute('actor');\n\n    if ($actor->can('postWithoutThrottle')) {\n        return false;\n    }\n\n    if (Post::where('user_id', $actor->id)->where('created_at', '>=', new DateTime('-10 seconds'))->exists()) {\n        return true;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Extracting Pagination Information from Request\nDESCRIPTION: PHP code demonstrating how to extract limit and offset values from a request and apply them to a query to implement pagination in a Flarum API.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$limit = $this->extractLimit($request);\n$offset = $this->extractOffset($request);\n\nreturn Tag::skip($offset)->take($limit);\n```\n\n----------------------------------------\n\nTITLE: Checking for Optional Extension Dependency in Flarum Frontend\nDESCRIPTION: This JavaScript code demonstrates how to check if an optional extension dependency is enabled in the Flarum frontend by checking the global flarum.extensions object.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif ('some-extension-id' in flarum.extensions) {\n    // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Environment Setup Script\nDESCRIPTION: PHP script to initialize the testing environment and database setup for Flarum integration tests.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Testing\\integration\\Setup\\SetupScript;\n\nrequire __DIR__.'/../../vendor/autoload.php';\n\n$setup = new SetupScript();\n\n$setup->run();\n```\n\n----------------------------------------\n\nTITLE: Including Variables in Flarum Translations (JSX)\nDESCRIPTION: Demonstrates how to include variables in Flarum translations using JSX. This example shows a search results dropdown item that includes the user's search query.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{LinkButton.component({\n  icon: 'search',\n  children: app.translator.trans('all_discussions_button', {query}),\n  href: app.route('index', {q: query})\n})}\n```\n\n----------------------------------------\n\nTITLE: Implementing State Pattern for Shared Data in JavaScript\nDESCRIPTION: This code snippet illustrates the 'state pattern' used in Flarum for managing shared data across components. It shows how to create a POJO 'state instance' and use it in different parts of the application.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Counter {\n  constructor() {\n    this._counter = 0;\n  }\n\n  increaseCounter() {\n    this._counter += 1;\n  }\n\n  getCount() {\n    return this._counter;\n  }\n}\n\napp.counter = new Counter();\n\nextend(HeaderSecondary.prototype, 'items', function(items) {\n  items.add('counterDisplay',\n    <div>\n      <p>Counter: {app.counter.getCount()}</p>\n    </div>\n  );\n})\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('counterButton',\n    <div>\n      <button onclick={() => app.counter.increaseCounter()}>Increase Counter</button>\n    </div>\n  );\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Pack in composer.json\nDESCRIPTION: JSON configuration required in composer.json to specify the language code and title for the Flarum language pack.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/language-packs.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"flarum-locale\": {\n  \"code\": \"en\",\n  \"title\": \"English\"\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Alerts with Component Classes in Mithril\nDESCRIPTION: This code snippet demonstrates how to show alerts using the new method of passing component classes, attributes, and children as separate arguments. This approach replaces the older way of passing an Alert instance.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\napp.alerts.show('Hello, this is a success alert!');\napp.alerts.show({type: 'success'}, 'Hello, this is a success alert!');\napp.alerts.show(Alert, {type: 'success'}, 'Hello, this is a success alert!');\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Gambit\nDESCRIPTION: Example of implementing a boolean type gambit for unread status filtering.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/search.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from 'flarum/common/app';\nimport { BooleanGambit } from 'flarum/common/query/IGambit';\n\nexport default class UnreadGambit extends BooleanGambit {\n  key(): string {\n    return app.translator.trans('core.lib.gambits.discussions.unread.key', {}, true);\n  }\n\n  filterKey(): string {\n    return 'unread';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Search Gambit in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to create a custom search gambit for filtering users by country in Flarum. It extends AbstractRegexGambit and implements the necessary methods to parse and apply the search condition.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Search\\AbstractRegexGambit;\nuse Flarum\\Search\\SearchState;\n\nclass CountryGambit extends AbstractRegexGambit\n{\n    public function getGambitPattern(): string\n    {\n        return 'country:(.+)';\n    }\n\n    public function conditions(SearchState $search, array $matches, bool $negate)\n    {\n        $country = trim($matches[1], '\"');\n\n        $search->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested YAML Translation Structure\nDESCRIPTION: Demonstrates how to structure nested translation keys in YAML format for a Flarum extension\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/i18n.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nacme-hello-world:                # Namespacing for the extension; unindented.\n  alert:                         # Namespacing for alerts; indented 2 spaces.\n    hello_text: \"Hello, world!\"  # Identifier/translation; indented 4 spaces.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Instance from Flarum (PHP)\nDESCRIPTION: This snippet illustrates how to retrieve a token instance from Flarum using the `Flarum\\Http\\AccessToken::findValid($tokenString)` method. This method searches for a valid access token based on the provided token string. It requires the `Flarum\\Http\\AccessToken` class to be available in the current scope.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"Flarum\\\\Http\\\\AccessToken::findValid($tokenString)\"\n```\n\n----------------------------------------\n\nTITLE: Generating URLs for Frontend Routes in Flarum Using JS\nDESCRIPTION: This JavaScript snippet demonstrates generating URLs for frontend routes in Flarum using the `app.route` method. Parameters can fill URI segments or be appended as query parameters.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst url = app.route('acme.user', { id: 123, foo: 'bar' });\n// http://yourforum.com/users/123?foo=bar\n```\n\nLANGUAGE: js\nCODE:\n```\nnew Extend.Routes()\n  .add('acme.user', '/user/:id', <UsersPage />)\n  .helper('acmeUser', (user) => app.route('acme.user', { id: user.id() }))\n```\n\nLANGUAGE: js\nCODE:\n```\nconst url = app.route.acmeUser(user);\n// http://yourforum.com/users/123\n```\n\n----------------------------------------\n\nTITLE: Restricting Middleware to Specific Routes in Flarum\nDESCRIPTION: This snippet demonstrates how to restrict middleware execution to specific routes in Flarum. It shows two methods: one using the request URI and another using the route name attribute.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/middleware.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Laminas\\Diactoros\\Uri;\n\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n  {\n    $currentRoute = $request->getUri()->getPath();\n    $routeToRunUnder = new Uri(app()->url('/path/to/run/under'));\n\n    if ($currentRoute === $routeToRunUnder->getPath()) {\n        // Your logic here!\n    }\n\n    return $handler->handle($request);\n}\n\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    if ($request->getAttribute('routeName') === 'register') {\n        // Your logic here!\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Third-Level Translation Keys in YAML\nDESCRIPTION: This snippet defines the third-level keys for translations related to specific UI elements in Flarum. These keys help localizers identify where translations are used within the application's interface. Input and output are managed through YAML format.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nref:         # Translations referenced by more than one key.\ngroup:       # Translations used as default group names.\n```\n\n----------------------------------------\n\nTITLE: Uso de withAttr para Manejo de Formularios en Flarum (JSX)\nDESCRIPTION: Demostración del uso de la utilidad withAttr para simplificar el manejo de entradas de formulario en Flarum. Muestra ejemplos con Streams y funciones personalizadas.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/forms.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/utils/Stream';\nimport withAttr from 'flarum/utils/withAttr';\n\nconst value = Stream();\n\n// With a stream\n<input type=\"text\" value={value()} oninput={withAttr('value', value)}></input>\n\n// With any callable\n<input type=\"text\" value={value()} oninput={withAttr('value', (currValue) => {\n  // Some custom logic here\n})}></input>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Frontend Routes with Content in PHP\nDESCRIPTION: Shows how to register a custom frontend route with specific document modifications. This example creates a /users route and sets its page title.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/routes.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->route('/users', 'acme.users', function (Document $document, Request $request) {\n            $document->title = 'Users';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Sorting in List API Controller\nDESCRIPTION: This code demonstrates how to set up sorting options and extract sorting information from the request in a list API controller.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// The default sort field and order to use.\npublic $sort = ['name' => 'asc'];\n\n// The fields that are available to be sorted by.\npublic $sortFields = ['firstName', 'lastName'];\n\nuse Illuminate\\Support\\Str;\n\n// ...\n\n$sort = $this->extractSort($request);\n$query = Tag::query();\n\nforeach ($sort as $field => $order) {\n    $query->orderBy(Str::snake($field), $order);\n}\n\nreturn $query->get();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Page Component in JavaScript\nDESCRIPTION: Demonstrates how to create a simple custom page component by extending Flarum's Page class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/frontend-pages.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Page from 'flarum/common/components/Page';\n\n\nexport default class CustomPage extends Page {\n  view() {\n    return <p>Hello!</p>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Scoper for Private Post Visibility in PHP\nDESCRIPTION: Demonstrates how to create a custom scoper that allows users with specific permissions to view private posts. This scoper would be invoked by the whereVisibleTo method with the 'viewPrivate' ability.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopePostVisibility\n{\n    public function __invoke(User $actor, $query)\n    {\n      if ($actor->can('posts.viewPrivate')) {\n        $query->whereRaw(\"1=1\");\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Frontend Content with the Frontend Extender in Flarum (PHP)\nDESCRIPTION: Shows how to modify the HTML document that will be displayed to users by using the Frontend extender's content method. This allows adding scripts, changing page titles, and other document-level modifications.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Frontend\\Document;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->content(function (Document $document, Request $request) {\n            $document->head[] = '<script>alert(\"Hello, world!\")</script>';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Declaring New Flarum Filesystem Disks\nDESCRIPTION: This code snippet demonstrates how to declare a new filesystem disk in Flarum using the `Filesystem` extender. It defines a disk named 'flarum-uploads', specifying its root path and URL. Dependencies include `Flarum\\Extend`, `Paths` and `UrlGenerator`\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/filesystem.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Filesystem)\n        ->disk('flarum-uploads', function (Paths $paths, UrlGenerator $url) {\n            return [\n                'root'   => \"$paths->public/assets/uploads\",\n                'url'    => $url->to('forum')->path('assets/uploads')\n            ];\n        });\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Flarum Extension\nDESCRIPTION: Defines the TypeScript configuration for a Flarum extension, extending the base Flarum tsconfig and setting up paths and output options.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"flarum-tsconfig\",\n  \"include\": [\"src/**/*\", \"../vendor/flarum/core/js/dist-typings/@types/**/*\"],\n  \"compilerOptions\": {\n    \"declarationDir\": \"./dist-typings\",\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"flarum/*\": [\"../vendor/flarum/core/js/dist-typings/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Frontend Models in JavaScript\nDESCRIPTION: Demonstrates how to add attributes and relationships to existing models\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nDiscussion.prototype.user = Model.hasOne('user');\nDiscussion.prototype.posts = Model.hasMany('posts');\nDiscussion.prototype.slug = Model.attribute('slug');\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Direct Key References in YAML\nDESCRIPTION: Example showing problematic direct key references that should be avoided. Demonstrates why translations should reference the ref namespace instead of specific implementation keys.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => Log In\n\n    log_in:\n      submit_button: => core.forum.header.log_in_link  # Never reference keys\n      title: => core.forum.header.log_in_link          # that aren't in \"ref\"!\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Page as Homepage Option\nDESCRIPTION: Example showing how to register a custom page as a homepage option in the admin dashboard.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport BasicsPage from 'flarum/common/components/BasicsPage';\n\nexport default function() {\n  extend(BasicsPage.prototype, 'homePageItems', items => {\n    items.add('tags', {\n      path: '/tags',\n      label: app.translator.trans('flarum-tags.admin.basics.tags_label')\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Required Dependencies in composer.json\nDESCRIPTION: This JSON snippet shows how to specify required dependencies for a Flarum extension in the composer.json file. It includes Flarum core and the Flarum tags extension as dependencies necessary for the proper functioning of the new theme extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.15\",  // Since all extensions need to require core.\n    \"flarum/tags\": \"^0.1.0-beta.15\"  // This tells Flarum to treat tags as a dependency of your extension.\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CSS/LESS to Flarum Frontend\nDESCRIPTION: Demonstrates how to add both JavaScript and CSS/LESS assets to the forum frontend using the Frontend extender\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less')\n```\n\n----------------------------------------\n\nTITLE: Saving Relationships in Javascript\nDESCRIPTION: This code snippet shows how to save relationships by passing them in a `relationships` key to the `save` method. It demonstrates how to handle has-one and has-many relationships by passing single model instances or arrays of model instances, respectively.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nuser.save({\n  relationships: {\n    groups: [\n      store.getById('groups', 1),\n      store.getById('groups', 2)\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications in PHP Backend for Flarum\nDESCRIPTION: This PHP class demonstrates how to handle notification sending in Flarum's backend. It subscribes to post liked and unliked events, then uses NotificationSyncer to send or remove notifications accordingly.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Listener;\n\nuse Flarum\\Event\\ConfigureNotificationTypes;\nuse Flarum\\Likes\\Event\\PostWasLiked;\nuse Flarum\\Likes\\Event\\PostWasUnliked;\nuse Flarum\\Likes\\Notification\\PostLikedBlueprint;\nuse Flarum\\Notification\\NotificationSyncer;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nclass SendNotificationWhenPostIsLiked\n{\n    protected $notifications;\n\n    public function __construct(NotificationSyncer $notifications)\n    {\n        $this->notifications = $notifications;\n    }\n\n    public function subscribe(Dispatcher $events)\n    {\n        $events->listen(PostWasLiked::class, [$this, 'whenPostWasLiked']);\n        $events->listen(PostWasUnliked::class, [$this, 'whenPostWasUnliked']);\n    }\n\n    public function whenPostWasLiked(PostWasLiked $event)\n    {\n        $this->syncNotification($event->post, $event->user, [$event->post->user]);\n    }\n\n    public function whenPostWasUnliked(PostWasUnliked $event)\n    {\n        $this->syncNotification($event->post, $event->user, []);\n    }\n\n    public function syncNotification(Post $post, User $user, array $recipients)\n    {\n        if ($post->user->id != $user->id) {\n            $this->notifications->sync(\n                new PostLikedBlueprint($post, $user),\n                $recipients\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Columns to Existing Table in PHP\nDESCRIPTION: Example of using Flarum's Migration helper to add new columns to an existing table in the database. It demonstrates how to specify column definitions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addColumns('users', [\n    'email' => ['string', 'nullable' => true],\n    'discussion_count' => ['integer', 'unsigned' => true]\n]);\n```\n\n----------------------------------------\n\nTITLE: Uso Básico de Streams en Flarum (JavaScript)\nDESCRIPTION: Demostración del uso básico de Streams en Flarum para manejar datos reactivos. Muestra cómo crear, leer y actualizar un Stream.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/forms.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport Stream from 'flarum/utils/Stream';\n\n\nconst value = Stream(\"hello!\");\nvalue() === \"hello!\"; // verdadero\nvalue(\"world!\");\nvalue() === \"world!\"; // verdadero\n```\n\n----------------------------------------\n\nTITLE: Setting Relationships in Flarum Flag Extension - PHP 2.x Implementation\nDESCRIPTION: Shows the updated way to set flag-post relationships in Flarum 2.x using the FlagResource class with Schema definitions and relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nclass FlagResource extends AbstractDatabaseResource\n{\n    public function fields(): array\n    {\n        return [\n            Schema\\Relationship\\ToOne::make('post')\n                ->includable()\n                ->writable(fn (Flag $flag, FlarumContext $context) => $context->creating())\n                ->set(function (Flag $flag, Post $post, FlarumContext $context) {\n                    if (! ($post instanceof CommentPost)) {\n                        throw new InvalidParameterException;\n                    }\n\n                    $actor = $context->getActor();\n\n                    $actor->assertCan('flag', $post);\n\n                    if ($actor->id === $post->user_id && ! $this->settings->get('flarum-flags.can_flag_own')) {\n                        throw new PermissionDeniedException;\n                    }\n\n                    $flag->post_id = $post->id;\n                })\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Flarum Frontend Testing\nDESCRIPTION: Shows how to create a Jest configuration file for Flarum frontend testing. It uses the @flarum/jest-config package to set up the configuration.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('@flarum/jest-config')();\n```\n\n----------------------------------------\n\nTITLE: Registering a Notification Driver in Flarum with PHP\nDESCRIPTION: This snippet shows how to register a custom notification driver using the Notification extender. The example from Flarum Pusher demonstrates registering the PusherNotificationDriver with a 'pusher' identifier.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend\nuse Flarum\\Pusher\\PusherNotificationDriver;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->driver('pusher', PusherNotificationDriver::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Creating New Resources in JavaScript\nDESCRIPTION: Shows how to create and save new resources\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussion = app.store.createRecord('discussions');\n\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Extending Models with Default Values and Accessors in PHP\nDESCRIPTION: Shows how to use the Model extender to add accessors, mutators, dates, casts, and default values to existing Flarum models. This example demonstrates extending the User model with various attribute modifiers.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\User\\User;\n\nreturn [\n    new Extend\\Model(User::class)\n        ->defaultValue('is_alive', true)\n        ->accessor('first_name', function ($value) {\n            return ucfirst($value)\n        })\n        ->mutator('first_name', function ($value) {\n            return strtolower($value);\n        })\n        ->date('suspended_until')\n        ->cast('is_admin', 'boolean')\n];\n```\n\n----------------------------------------\n\nTITLE: Adding attribute to app global\nDESCRIPTION: This code snippet demonstrates adding an attribute to the `app` global object in Flarum.  It directly assigns a string value to a new property on the `app` object. This can be used to store global configuration or data that extensions can access.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/frontend.md#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// This adds an attribute to the `app` global.\napp.googleUrl = \"https://google.com\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Reset Logic for Flarum Settings\nDESCRIPTION: Shows how to use the resetWhen method to conditionally reset a setting to its default value. The example demonstrates checking if the current value is empty to trigger the reset.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/settings.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Settings)\n    ->serializeToForum('myCoolSetting', 'my.cool.setting.key')\n    ->default('my.cool.setting.key', 'default value!')\n    ->resetWhen('my.cool.setting.key', function ($value) {\n        return $value === '';\n    })\n```\n\n----------------------------------------\n\nTITLE: Extending Multiple Methods Example\nDESCRIPTION: Shows how to extend multiple methods simultaneously using an array of method names.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nextend(IndexPage.prototype, ['oncreate', 'onupdate'], () => { /* your logic */ });\n```\n\n----------------------------------------\n\nTITLE: State Pattern for Complex Data Sharing in Mithril 2\nDESCRIPTION: Example of using a POJO (Plain Old JavaScript Object) state instance to manage data shared between unrelated components. This pattern is used throughout Flarum core for complex state management.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nclass Counter {\n  constructor() {\n    this._counter = 0;\n  }\n\n  increaseCounter() {\n    this._counter += 1;\n  }\n\n  getCount() {\n    return this._counter;\n  }\n}\n\napp.counter = new Counter();\n\nextend(HeaderSecondary.prototype, 'items', function(items) {\n  items.add('counterDisplay',\n    <div>\n      <p>Counter: {app.counter.getCount()}</p>\n    </div>\n  );\n})\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('counterButton',\n    <div>\n      <button onclick={() => app.counter.increaseCounter()}>Increase Counter</button>\n    </div>\n  );\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Frontend Routes in JavaScript\nDESCRIPTION: Example of how to add frontend routes in Flarum using the Routes extender in JavaScript.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/routes.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Routes()\n    .add('acme.users', '/users', <UsersPage />),\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Discussion Visibility Scoper in PHP for Flarum Tags\nDESCRIPTION: This code defines a global scoper for the Discussion model. It handles visibility based on the actor's permissions and the tags associated with discussions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibilityForAbility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     * @param string $ability\n     */\n    public function __invoke(User $actor, Builder $query, $ability)\n    {\n        // Automatic scoping should be applied to the global `view` ability,\n        // and to arbitrary abilities that aren't subqueries of `view`.\n        // For example, if we want to scope discussions where the user can\n        // edit posts, this should apply.\n        // But if we are expanding a restriction of `view` (for example,\n        // `viewPrivate`), we shouldn't apply this query again.\n        if (substr($ability, 0, 4) === 'view' && $ability !== 'view') {\n            return;\n        }\n\n        // Avoid an infinite recursive loop.\n        if (Str::endsWith($ability, 'InRestrictedTags')) {\n            return;\n        }\n\n        // `view` is a special case where the permission string is represented by `viewForum`.\n        $permission = $ability === 'view' ? 'viewForum' : $ability;\n\n        // Restrict discussions where users don't have necessary permissions in all tags.\n        // We use a double notIn instead of a doubleIn because the permission must be present in ALL tags,\n        // not just one.\n        $query->where(function ($query) use ($actor, $permission) {\n            $query\n                ->whereNotIn('discussions.id', function ($query) use ($actor, $permission) {\n                    return $query->select('discussion_id')\n                        ->from('discussion_tag')\n                        ->whereNotIn('tag_id', function ($query) use ($actor, $permission) {\n                            Tag::query()->setQuery($query->from('tags'))->whereHasPermission($actor, $permission)->select('tags.id');\n                        });\n                })\n                ->orWhere(function ($query) use ($actor, $permission) {\n                    // Allow extensions a way to override scoping for any given permission.\n                    $query->whereVisibleTo($actor, \"${permission}InRestrictedTags\");\n                });\n        });\n\n        // Hide discussions with no tags if the user doesn't have that global\n        // permission.\n        if (! $actor->hasPermission($permission)) {\n            $query->has('tags');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Resources in JavaScript\nDESCRIPTION: Shows how to create and save new resources using the frontend store\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussion = app.store.createRecord('discussions');\n\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Routes with Content in Flarum\nDESCRIPTION: Demonstrates how to register custom frontend routes with specific content modifications like setting the page title.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->route('/users', 'acme.users', function (Document $document, Request $request) {\n            $document->title = 'Users';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Sorting Properties in PHP API Controller\nDESCRIPTION: Defines default sorting field, order, and available sort fields for API resources. These properties control how resources are ordered when listing them through the API.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n    // Il campo di ordinamento predefinito e l'ordine da utilizzare.\n    public $sort = ['name' => 'asc'];\n    \n    // I campi disponibili per essere ordinati.\n    public $sortFields = ['firstName', 'lastName'];\n```\n\n----------------------------------------\n\nTITLE: Using Disabled Prop with Select Component in JavaScript\nDESCRIPTION: Demonstrates how to use the new 'disabled' prop with the Select component in Flarum's JavaScript.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Select from 'flarum/components/Select';\n\n<Select\n  options={options}\n  value={value}\n  disabled={isDisabled}\n  onchange={onChange}\n/>\n```\n\n----------------------------------------\n\nTITLE: Including Variables in JSX\nDESCRIPTION: This JSX code demonstrates how to include variables within translation string placeholders. It uses Flarum's translation subsystem to incorporate user input into UI components, passing the variables as additional parameters.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx harmony\nCODE:\n```\n{LinkButton.component({\n  icon: 'search',\n  children: app.translator.trans('all_discussions_button', {query}),\n  href: app.route('index', {q: query})\n})}\n```\n\n----------------------------------------\n\nTITLE: Flarum JavaScript Directory Structure Example\nDESCRIPTION: Directory structure example showing the old JavaScript file organization before Beta 8 changes, including admin and forum directories with their respective source and distribution files.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b8.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\njs\n├── admin\n│   ├── src\n│   │   └── main.js\n│   ├── dist\n│   │   └── extension.js\n│   ├── Gulpfile.js\n│   └── package.json\n└── forum\n    ├── src\n    │   └── main.js\n    ├── dist\n    │   └── extension.js\n    ├── Gulpfile.js\n    └── package.json\n```\n\n----------------------------------------\n\nTITLE: Checking Extension Status in PHP Backend\nDESCRIPTION: Demonstrates how to check if an optional dependency is enabled in the backend using ExtensionManager.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extension\\ExtensionManager;\n\nclass SomeClass {\n    public function __construct(ExtensionManager $extensions)\n    {\n        $this->extensions = $extensions;\n    }\n\n    public function someMethod()\n    {\n        if ($this->extensions->isEnabled('some-extension-id')) {\n            // do something.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Optional Extension in Flarum Backend\nDESCRIPTION: PHP code demonstrating how to check if an optional extension is enabled in the Flarum backend using the ExtensionManager class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extension\\ExtensionManager;\n\nclass SomeClass {\n    public function __construct(ExtensionManager $extensions)\n    {\n        $this->extensions = $extensions;\n    }\n\n    public function someMethod()\n    {\n        if ($this->extensions->isEnabled('some-extension-id')) {\n            // do something.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Optional Dependencies in Flarum Frontend\nDESCRIPTION: Shows how to check if an optional extension is enabled in the Flarum frontend using the global flarum.extensions object.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/extending-extensions.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nif ('some-extension-id' in flarum.extensions) {\n    // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Discussion Visibility Scoper in PHP\nDESCRIPTION: A global scoper for the Discussion model that handles various visibility abilities. It includes complex logic for handling nested permissions and tag-based visibility restrictions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibilityForAbility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     * @param string $ability\n     */\n    public function __invoke(User $actor, Builder $query, $ability)\n    {\n        if (substr($ability, 0, 4) === 'view' && $ability !== 'view') {\n            return;\n        }\n\n        if (Str::endsWith($ability, 'InRestrictedTags')) {\n            return;\n        }\n\n        $permission = $ability === 'view' ? 'viewForum' : $ability;\n\n        $query->where(function ($query) use ($actor, $permission) {\n            $query\n                ->whereNotIn('discussions.id', function ($query) use ($actor, $permission) {\n                    return $query->select('discussion_id')\n                        ->from('discussion_tag')\n                        ->whereNotIn('tag_id', function ($query) use ($actor, $permission) {\n                            Tag::query()->setQuery($query->from('tags'))->whereHasPermission($actor, $permission)->select('tags.id');\n                        });\n                })\n                ->orWhere(function ($query) use ($actor, $permission) {\n                    $query->whereVisibleTo($actor, \"${permission}InRestrictedTags\");\n                });\n        });\n\n        if (! $actor->hasPermission($permission)) {\n            $query->has('tags');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening the Crontab Editor\nDESCRIPTION: Command to open the crontab editor where scheduled tasks are configured for the current user.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/scheduler.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncrontab -e\n```\n\n----------------------------------------\n\nTITLE: Displaying System Information\nDESCRIPTION: Retrieves information about Flarum core and installed extensions for debugging purposes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum info\n```\n\n----------------------------------------\n\nTITLE: Implementing Listing Endpoint for Drafts in PHP\nDESCRIPTION: This snippet shows the implementation of the ListDraftsController, which handles listing drafts for the current user. It includes permission checks and relationship inclusions.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass ListDraftsController extends AbstractListController\n{\n    public $serializer = DraftSerializer::class;\n\n    public $include = [\n        'user',\n    ];\n\n    protected function data(ServerRequestInterface $request, Document $document)\n    {\n        /**\n         * @var User\n         */\n        $actor = RequestUtil::getActor($request);\n\n        $actor->assertCan('user.saveDrafts');\n\n        return Draft::where('user_id', $actor->id)->get();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Frontend Code in Flarum Extension\nDESCRIPTION: Example of admin.js and forum.js files used to export the main frontend code for a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// admin.js\nexport * from './src/admin';\n\n// forum.js\nexport * from './src/forum';\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Page as Homepage Option in Flarum Admin\nDESCRIPTION: Code that extends the BasicsPage component to add a custom page to the homepage options in the Flarum admin panel. This example is from the Tags extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/frontend-pages.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport BasicsPage from 'flarum/common/components/BasicsPage';\n\nexport default function() {\n  extend(BasicsPage.prototype, 'homePageItems', items => {\n    items.add('tags', {\n      path: '/tags',\n      label: app.translator.trans('flarum-tags.admin.basics.tags_label')\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Extender in Flarum Backend\nDESCRIPTION: A new Theme extender has been introduced in Flarum, allowing developers to override Less files and internal imports. This feature enhances the ability to create custom themes by completely replacing Less modules.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-1_x.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- A new [Theme](https://github.com/flarum/core/pull/3008) extender now allows overriding Less files and internal imports. This allows themes to more easily completely replace Less modules.\n```\n\n----------------------------------------\n\nTITLE: Core Component Translation Namespaces in YAML\nDESCRIPTION: Defines the main top-level namespaces used for Flarum core translations and Laravel validation messages.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncore:        # Traduzioni usate dal core di Flarum\nvalidation:  # Traduzioni usate dal validatore di Laravel\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag Visibility Scoper in PHP\nDESCRIPTION: Custom scoper for the Tag model that implements view ability restrictions. It filters tags based on user permissions using a subquery approach.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeTagVisibility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     */\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->whereIn('id', function ($query) use ($actor) {\n            Tag::query()->setQuery($query->from('tags'))->whereHasPermission($actor, 'viewForum')->select('tags.id');\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Notification Component in Flarum's Frontend\nDESCRIPTION: This JavaScript code shows how to register a notification component in Flarum's frontend. It extends the NotificationGrid to add a new notification type that users can configure in their settings.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { extend } from 'flarum/extend';\nimport app from 'flarum/app';\nimport NotificationGrid from 'flarum/components/NotificationGrid';\n\nimport PostLikedNotification from './components/PostLikedNotification';\n\napp.initializers.add('flarum-likes', () => {\n  app.notificationComponents.postLiked = PostLikedNotification;\n\n  extend(NotificationGrid.prototype, 'notificationTypes', function (items) {\n    items.add('postLiked', {\n      name: 'postLiked',\n      icon: 'far fa-thumbs-up',\n      label: app.translator.trans('flarum-likes.forum.settings.notify_post_liked_label')\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Frontend Components in Flarum Extension\nDESCRIPTION: Demonstrates how to export classes or functions from a Flarum extension's frontend, allowing other extensions to use or modify them. The code shows the structure of the extension's index.js file, including the initializer and export statement.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/extensibility.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('your-extension-id', () => {\n  // Your Extension Code Here\n})\n\nexport {\n  // Put all the stuff you want to export here.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Included Relationships in PHP API Controller\nDESCRIPTION: This snippet shows how to specify default and optional relationships to include when listing, showing, or creating a resource in a Flarum API controller.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n    // The relationships that are included by default.\n    public $include = ['user'];\n\n    // Other relationships that are available to be included.\n    public $optionalInclude = ['discussions'];\n```\n\n----------------------------------------\n\nTITLE: Configuring DayJS Localization\nDESCRIPTION: JavaScript configuration for date internationalization using DayJS library. This code sets the locale for date formatting.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/language-packs.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndayjs.locale('xx');\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Console Command in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to create a custom console command by extending the AbstractCommand class. It includes the basic structure with configure and fire methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/console.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Console\\AbstractCommand;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass YourCommand extends AbstractCommand {\n  protected function configure()\n  {\n      $this\n          ->setName('YOUR COMMAND NAME')\n          ->setDescription('YOUR COMMAND DESCRIPTION');\n  }\n  protected function fire()\n  {\n    // Your logic here!\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from Store in JavaScript\nDESCRIPTION: Demonstrates how to retrieve data from Flarum's frontend store\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// GET /api/discussions?sort=createdAt\napp.store.find('discussions', {sort: 'createdAt'}).then(console.log);\n\n// GET /api/discussions/123\napp.store.find('discussions', 123).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Complex Extension Example with Extend and Override\nDESCRIPTION: Comprehensive example showing both extend and override utilities to modify a header component with custom items and conditional logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend, override } from 'flarum/common/extend';\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport CustomComponentClass from './components/CustomComponentClass';\n\n// Here, we add an item to the returned ItemList. We are using a custom component\n// as discussed above. We've also specified a priority as the third argument,\n// which will be used to order these items. Note that we don't need to return anything.\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add(\n    'google',\n    <CustomComponentClass>\n      <a href=\"https://google.com\">Google</a>\n    </CustomComponentClass>,\n    5\n  );\n});\n\n// Here, we conditionally use the original output of a method,\n// or create our own ItemList, and then add an item to it.\n// Note that we MUST return our custom output.\noverride(HeaderPrimary.prototype, 'items', function(original) {\n  let items;\n\n  if (someArbitraryCondition) {\n    items = original();\n  } else {\n    items = new ItemList();\n  }\n\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n\n  return items;\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying HTTP Response After Request Handling\nDESCRIPTION: Demonstrates how to modify the response after the initial request has been handled by adding or changing headers, with a note about response immutability.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/middleware.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    $response = $handler->handle($request);\n\n    // Your logic...\n    $response = $response->withHeader('Content-Type', 'application/json');\n\n    return $response;\n}\n```\n\n----------------------------------------\n\nTITLE: Configurando Ajustes para el Frontend en PHP con Extend\nDESCRIPTION: Demuestra cómo hacer que ciertas configuraciones estén disponibles en el frontend del foro mediante el extensor Settings. Incluye ejemplos de serialización directa y con modificación de valores a través de funciones de callback.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n   (new Extend\\Settings)\n      ->serializeToForum('myCoolSetting', 'my.cool.setting.key')\n      ->serializeToForum('myCoolSettingModified', 'my.cool.setting.key', function ($retrievedValue) {\n        // Este tercer argumento es opcional, y nos permite pasar la configuración recuperada a través de alguna lógica personalizada.\n        // En este ejemplo, le añadiremos una cadena.\n\n        return \"My Cool Setting: $retrievedValue\";\n      }),\n]\n```\n\n----------------------------------------\n\nTITLE: Chaining ExtensionData Methods in JavaScript\nDESCRIPTION: Example of how to chain multiple registerSetting and registerPermission calls together on the ExtensionData object.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/admin.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.extensionData\n    .for('acme-interstellar')\n    .registerSetting(...)\n    .registerSetting(...)\n    .registerPermission(...)\n    .registerPermission(...);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Delete API Controller in PHP\nDESCRIPTION: This snippet demonstrates how to create a controller for deleting a resource by extending AbstractDeleteController. It includes the basic structure and the delete method implementation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractDeleteController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nclass DeleteTagController extends AbstractDeleteController\n{    \n    protected function delete(Request $request)\n    {\n        $id = Arr::get($request->getQueryParams(), 'id');\n\n        Tag::findOrFail($id)->delete();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Parameters in PHP for Flarum Extension\nDESCRIPTION: Shows how to define a route with a parameter using the Routes extender in a Flarum extension. The example adds a GET route for '/user/{id}' that uses a UserController.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Routes('forum'))\n        ->get('/user/{id}', 'acme.user', UserController::class)\n```\n\n----------------------------------------\n\nTITLE: Creating Stateless Child and Parent Components in Mithril\nDESCRIPTION: This code snippet demonstrates the proper way to manage state between a parent and child component without storing instances. The parent passes necessary data to the child through attributes instead of direct instance manipulation.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass ChildComponent extends Component {\n  view() {\n    return <p>{this.attrs.counter}</p>;\n  }\n}\n\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.counter += 1}></button>\n        <ChildComponent counter={this.counter}></ChildComponent>\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configurazione del Formatter in Flarum (PHP)\nDESCRIPTION: Questo snippet mostra come configurare l'istanza di TextFormatter, modificare il testo prima dell'analisi e l'XML prima del rendering in Flarum. Utilizza l'estensione Formatter per aggiungere configurazioni personalizzate e implementare logica di parsing e rendering personalizzata.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/formatting.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse s9e\\TextFormatter\\Configurator;\nuse s9e\\TextFormatter\\Parser;\nuse s9e\\TextFormatter\\Renderer;\n\nreturn [\n    (new Extend\\Formatter)\n        // Aggiungi la configurazione del formattatore di testo personalizzato\n        ->configure(function (Configurator $config) {\n            $config->BBCodes->addFromRepository('B');\n        })\n        // Modifica il testo grezzo prima che venga analizzato.\n        // Questa callback dovrebbe restituire il testo modificato.\n        ->parse(function (Parser $parser, $context, $text) {\n            // logica personalizzata qui\n            return $newText;\n        })\n        //Modificare l'XML di cui eseguire il rendering.\n        // il suo callback dovrebbe restituire il nuovo XML.\n        // Ad esempio, nell'estensione menzioni, viene utilizzato per\n        // fornire il nome utente e il nome visualizzato dell'utente menzionato.\n        // Assicurati che l'ultimo argomento $request sia annullabile (o omesso completamente).\n        ->render(function (Renderer $renderer, $context, $xml, Request $request = null) {\n            // logica personalizzata qui\n            return $newXml;\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Using Flarum CLI to Generate API Serializer\nDESCRIPTION: Command for using the Flarum CLI to automatically create a new API serializer, simplifying the boilerplate code generation process.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend api-serializer\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Scopers in PHP for Flarum\nDESCRIPTION: This code snippet shows how to register custom scopers using Flarum's extender system. It demonstrates registering scopers for both Tag and Discussion models.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\Tags\\Tag;\nuse YourNamespace\\Access;\n\nreturn [\n  // Other extenders\n\n  // 'view' is optional here, since that's the default value for the ability argument.\n  // However, if we were applying this to a different ability, such as `viewPrivate`,\n  // would need to explicitly specify that.\n  (new Extend\\ModelVisibility(Tag::class))\n    ->scope(Access\\ScopeTagVisibility::class, 'view'),\n\n  (new Extend\\ModelVisibility(Discussion::class))\n    ->scopeAll(Access\\ScopeDiscussionVisibilityForAbility::class),\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Specifying Optional Dependencies in composer.json\nDESCRIPTION: JSON configuration in composer.json to specify optional dependencies for a Flarum extension, ensuring proper boot order.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extra\": {\n    \"flarum-extension\": {\n      \"optional-dependencies\": [\n        \"flarum/tags\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating URLs in PHP Controllers\nDESCRIPTION: Example of generating URLs to named routes using Flarum's UrlGenerator class in a PHP controller.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$url = $this->url->to('forum')->route('acme.user', ['id' => 123, 'foo' => 'bar']);\n// http://yourforum.com/user/123?foo=bar\n```\n\n----------------------------------------\n\nTITLE: Implementing YAML Literal Blocks for Multiline Translations\nDESCRIPTION: Demonstrates how to use YAML literal blocks (denoted with '|') for multiline translations, which preserve line breaks and indentation. Commonly used in Flarum for email body content.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nliteral_block_text: |\n  Estas líneas se mostrarán como se muestra aquí, con saltos de línea y todo.\n\n      También se conserva la sangría adicional: ¡esta línea tendrá una sangría de 4 espacios!\n\n  Las comillas son innecesarias, incluso cuando el bloque contiene caracteres especiales.\n```\n\n----------------------------------------\n\nTITLE: Registering Routes with Custom Resolvers in Flarum\nDESCRIPTION: Illustrates different methods of registering routes in Flarum, including using custom resolver instances and classes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/frontend-pages.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// See above for a custom page example\nimport CustomPage from './components/CustomPage';\n// See below for a custom resolver example\nimport CustomPageResolver from './resolvers/CustomPageResolver';\n\n// Use a route resolver instance\napp.routes['resolverInstance'] = {path: '/custom/path/1', resolver: {\n  onmatch: function(args) {\n    if (!app.session.user) return m.route.SKIP;\n\n    return CustomPage;\n  }\n}};\n\n// Use a custom route resolver class\napp.routes['resolverClass'] = {path: '/custom/path/2', resolverClass: CustomPageResolver, component: CustomPage};\n\n// Use the default resolver class (`flarum/common/resolvers/DefaultResolver`)\napp.routes['resolverClass'] = {path: '/custom/path/2', component: CustomPage};\n```\n\n----------------------------------------\n\nTITLE: Defining Top-Level Component Namespaces in YAML for Flarum Translations\nDESCRIPTION: This snippet demonstrates the top-level namespacing for translation keys used in official Flarum components. It shows the fixed namespaces for Flarum's core and validation components.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncore:        # Translations used by the Flarum core\nvalidation:  # Translations used by Laravel's validator\n```\n\n----------------------------------------\n\nTITLE: Implementing File Deletion Controller in PHP\nDESCRIPTION: Example controller for deleting logo files from Flarum's filesystem. Shows dependency injection of the filesystem factory and settings repository, and implements file deletion logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/filesystem.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Api\\Controller;\n\nuse Flarum\\Http\\RequestUtil;\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Illuminate\\Contracts\\Filesystem\\Factory;\nuse Illuminate\\Contracts\\Filesystem\\Filesystem;\nuse Laminas\\Diactoros\\Response\\EmptyResponse;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nclass DeleteLogoController extends AbstractDeleteController\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    /**\n     * @var Filesystem\n     */\n    protected $uploadDir;\n\n    /**\n     * @param SettingsRepositoryInterface $settings\n     * @param Factory $filesystemFactory\n     */\n    public function __construct(SettingsRepositoryInterface $settings, Factory $filesystemFactory)\n    {\n        $this->settings = $settings;\n        $this->uploadDir = $filesystemFactory->disk('flarum-assets');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function delete(ServerRequestInterface $request)\n    {\n        RequestUtil::getActor($request)->assertAdmin();\n\n        $path = $this->settings->get('logo_path');\n\n        $this->settings->set('logo_path', null);\n\n        if ($this->uploadDir->exists($path)) {\n            $this->uploadDir->delete($path);\n        }\n\n        return new EmptyResponse(204);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Policies in Flarum's extend.php\nDESCRIPTION: Shows how to register both model-specific and global policies using Flarum's Policy extender in the extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/authorization.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Tags\\Tag;\nuse YourNamespace\\Access;\n\nreturn [\n  // Other extenders\n  (new Extend\\Policy())\n    ->modelPolicy(Tag::class, Access\\TagPolicy::class)\n    ->globalPolicy(Access\\GlobalPolicy::class),\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a Translation with HTML Tags in JSX\nDESCRIPTION: This JSX snippet illustrates how to define a translation key that includes HTML tags, providing a way to render formatted text within the translated output.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/i18n.md#2025-04-16_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"helpText\">\n  {app.translator.trans('icon_text', {\n    a: <a href=\"https://fortawesome.github.io/Font-Awesome/icons/\" tabindex=\"-1\"/>\n  })}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Namespacing Translations in YAML\nDESCRIPTION: This snippet demonstrates how to namespace translations within a YAML file for a Flarum extension. The top-level key should match the extension's ID in kebab-case, and subsequent keys are used to organize translations into groups, with indentation indicating the hierarchy. The example shows namespacing for alerts with a `hello_text` identifier.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n \"acme-hello-world:                # Namespacing for the extension; unindented.\\n  alert:                         # Namespacing for alerts; indented 2 spaces.\\n    hello_text: \\\"Hello, world!\\\"  # Identifier/translation; indented 4 spaces.\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Test Configuration\nDESCRIPTION: TypeScript configuration for test files in Flarum extensions\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"include\": [\"tests/**/*\"],\n  \"files\": [\"../../../node_modules/@flarum/jest-config/shims.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Setting Component for Flarum Extension\nDESCRIPTION: Shows how to register a custom setting component using a callback function that returns JSX. This allows for more complex settings UI.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/admin.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('interstellar', function(app) {\n\n  app.extensionData\n    .for('acme-interstellar')\n    .registerSetting(function () {\n      if (app.session.user.username() === 'RocketMan') {\n\n        return (\n          <div className=\"Form-group\">\n            <h1> {app.translator.trans('acme-interstellar.admin.you_are_rocket_man_label')} </h1>\n            <label className=\"checkbox\">\n              <input type=\"checkbox\" bidi={this.setting('acme-interstellar.rocket_man_setting')}/>\n                {app.translator.trans('acme-interstellar.admin.rocket_man_setting_label')}\n            </label>\n          </div>\n        );\n      }\n    })\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying HTTP Response Headers\nDESCRIPTION: This piece of code showcases modifying HTTP response headers in a middleware after the request is handled. It demonstrates how to add headers like 'Content-Type' while working with immutable PSR-7 response objects.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\\n{\\n    $response = $handler->handle($request);\\n\\n    // Your logic...\\n    $response = $response->withHeader('Content-Type', 'application/json');\\n\\n    return $response;\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Slugging Interface in PHP for Flarum Models\nDESCRIPTION: This code snippet demonstrates how to implement the Sluggable interface in a Flarum model. It shows the required methods for generating and validating slugs, as well as handling slug conflicts.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/slugging.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Database\\AbstractModel;\nuse Flarum\\Http\\SlugManager;\n\nclass YourModel extends AbstractModel implements SlugManager\\Sluggable\n{\n    public function getSluggerConfig(): array\n    {\n        return [\n            'source' => 'name',\n            'maxLength' => 80,\n        ];\n    }\n\n    public function generateSlug(string $slug): string\n    {\n        // Custom slug generation logic here\n        return $slug;\n    }\n\n    public function validateSlug(string $slug, $id = null): bool\n    {\n        // Slug validation logic here\n        return true;\n    }\n\n    public function getSlugGenerator(): SlugManager\\SlugGenerator\n    {\n        return resolve(SlugManager\\DefaultSlugGenerator::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Cached Resources in Flarum's Frontend Store\nDESCRIPTION: Shows how to access cached resources from Flarum's frontend store using the all and getById methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussions = app.store.all('discussions');\nconst discussion = app.store.getById('discussions', 123);\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Frontend Models with TypeScript\nDESCRIPTION: Demonstrates how to add attributes and relationships to existing models using the Model extender in TypeScript. Shows how to add a string attribute, a hasOne relationship, and a hasMany relationship with type safety.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n  new Extend.Model(Discussion)\n    .attribute<string>('slug')\n    .hasOne<User>('user')\n    .hasMany<Post>('posts')\n```\n\n----------------------------------------\n\nTITLE: Extending API Controllers in Flarum with ApiController Extender\nDESCRIPTION: Shows how to customize existing API controllers by modifying serializers, includes, limits, sorting, and data query preparation using the ApiController extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillGetData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->setSerializer(MyDiscussionSerializer::class)\n        ->addInclude('user')\n        ->addOptionalInclude('posts')\n        ->setLimit(20)\n        ->setMaxLimit(50)\n        ->setSort(['name' => 'asc'])\n        ->addSortField('firstName')\n        ->prepareDataQuery(function ($controller) {\n            // Add custom logic here to modify the controller\n            // before data queries are executed.\n        })\n]\n```\n\n----------------------------------------\n\nTITLE: Extending Models in Flarum\nDESCRIPTION: Example of extending existing models with casts and default values\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\User\\User;\n\nreturn [\n    (new Extend\\Model(User::class))\n        ->default('is_alive', true)\n        ->cast('suspended_until', 'datetime')\n        ->cast('is_admin', 'boolean')\n];\n```\n\n----------------------------------------\n\nTITLE: Checking for Optional Dependencies in JavaScript\nDESCRIPTION: Shows how to detect whether an optional dependency extension is enabled in the frontend using the global flarum.extensions object.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nif ('some-extension-id' in flarum.extensions) {\n    // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in Flarum Migration\nDESCRIPTION: Example of creating a new table using the Migration::createTable helper in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Database\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\n\nreturn Migration::createTable('users', function (Blueprint $table) {\n    $table->increments('id');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Component with FieldSet, Button, and Switch in JSX\nDESCRIPTION: This snippet demonstrates how to create a form component using Flarum's form components such as FieldSet, Button, and Switch. It shows how to handle input changes and form submission.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/forms.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/common/Component';\nimport FieldSet from 'flarum/common/components/FieldSet';\nimport Button from 'flarum/common/components/Button';\nimport Switch from 'flarum/common/components/Switch';\n\n\nclass FormComponent extends Component {\n  oninit(vnode) {\n    this.textInput = \"\";\n    this.booleanInput = false;\n  }\n\n  view() {\n    return (\n      <form onsubmit={this.onsubmit.bind(this)}>\n        <FieldSet label={app.translator.trans('fake-extension.form.fieldset_label')}>\n          <input className=\"FormControl\" value={this.textInput} oninput={e => this.textInput = e.target.value}>\n          </input>\n          <Switch state={this.booleanInput} onchange={val => this.booleanInput = val}>\n          </Switch>\n        </FieldSet>\n        <Button type=\"submit\">{app.translator.trans('core.admin.basics.submit_button')}</Button>\n      </form>\n    )\n  }\n\n  onsubmit() {\n    // Some form handling logic here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend GitHub Actions Workflow\nDESCRIPTION: YAML configuration for backend workflow including testing and static analysis options\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/github-actions.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Backend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_backend.yml@main\n    with:\n      # Different types of jobs\n      enable_backend_testing: true\n      enable_phpstan: false\n\n      # Additional parameters\n      backend_directory: .\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Flarum Frontend Testing\nDESCRIPTION: Shows the TypeScript configuration needed for frontend testing in a Flarum extension, including test file includes and type definitions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"include\": [\"tests/**/*\"],\n  \"files\": [\"../../../node_modules/@flarum/jest-config/shims.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sorting Options for API Resources in PHP\nDESCRIPTION: Example of specifying sorting options for API resources in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Sort\\SortColumn;\n\npublic function sorts(): array\n{\n    return [\n        SortColumn::make('createdAt'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Building Forms with Flarum Components in JSX\nDESCRIPTION: Example of creating a form component in Flarum using built-in components like FieldSet, Button, and Switch. Shows proper event handling and state management.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/forms.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/common/Component';\nimport FieldSet from 'flarum/common/components/FieldSet';\nimport Button from 'flarum/common/components/Button';\nimport Switch from 'flarum/common/components/Switch';\n\n\nclass FormComponent extends Component {\n  oninit(vnode) {\n    this.textInput = \"\";\n    this.booleanInput = false;\n  }\n\n  view() {\n    return (\n      <form onsubmit={this.onsubmit.bind(this)}>\n        <FieldSet label={app.translator.trans('fake-extension.form.fieldset_label')}>\n          <input className=\"FormControl\" value={this.textInput} oninput={e => this.textInput = e.target.value}>\n          </input>\n          <Switch state={this.booleanInput} onchange={val => this.booleanInput = val}>\n          </Switch>\n        </FieldSet>\n        <Button type=\"submit\">{app.translator.trans('core.admin.basics.submit_button')}</Button>\n      </form>\n    )\n  }\n\n  onsubmit() {\n    // Some form handling logic here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending API Controller Configuration in PHP\nDESCRIPTION: Shows how to customize existing API controllers using the ApiController extender\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillGetData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->setSerializer(MyDiscussionSerializer::class)\n        ->addInclude('user')\n        ->addOptionalInclude('posts')\n        ->setLimit(20)\n        ->setMaxLimit(50)\n        ->setSort(['name' => 'asc'])\n        ->addSortField('firstName')\n        ->prepareDataQuery(function ($controller) {\n            // Añade aquí la lógica personalizada para modificar el controlador\n            // antes de que se ejecuten las consultas de datos.\n        })\n]\n```\n\n----------------------------------------\n\nTITLE: Extending Flarum Model with Typed Attribute\nDESCRIPTION: PHP code example demonstrating how to extend a Flarum model with a typed attribute for improved PHPStan analysis.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/static-code-analysis.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Model(User::class))\n    ->cast('is_cool', 'bool'),\n```\n\n----------------------------------------\n\nTITLE: Using slug() Helper for Slug Suggestions in JavaScript\nDESCRIPTION: Use the slug() helper from flarum/utils/string module to suggest slugs to users, not for enforcing them.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { slug } from 'flarum/utils/string';\n\nconst suggestedSlug = slug(userInput);\n```\n\n----------------------------------------\n\nTITLE: Pluralization in Flarum Translations (JavaScript)\nDESCRIPTION: Shows how to implement pluralization in Flarum translations using ICU MessageFormat syntax. This example is from the Choose Tags modal of the Tags extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst remaining = this.minPrimary - primaryCount;\nreturn app.translator.trans(\n  'choose_primary_placeholder',\n  { count: remaining }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Extension Manager via Composer in Flarum\nDESCRIPTION: Command to install the Extension Manager extension using Composer in a Flarum installation directory. This allows admins to manage extensions through a graphical interface.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extensions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require flarum/extension-manager:\"*\"\n```\n\n----------------------------------------\n\nTITLE: Loading JavaScript Files in Flarum\nDESCRIPTION: This snippet demonstrates how to load a JavaScript file into the Flarum frontend by utilizing the Frontend extender's js method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n];\n```\n\n----------------------------------------\n\nTITLE: Flarum CLI Model Generation - Bash\nDESCRIPTION: Commands for automatically generating backend and frontend models using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend model\n$ flarum-cli make frontend model\n```\n\n----------------------------------------\n\nTITLE: PHP Model Attribute Casting\nDESCRIPTION: Updated method for casting model date attributes in Flarum 1.7+, replacing the deprecated dateAttribute method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-1_x.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nModel::cast($attribute, 'datetime')\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controller in PHP\nDESCRIPTION: Example of a basic PHP controller class that implements RequestHandlerInterface. The controller returns an HTML response with a simple greeting.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Acme\\HelloWorld;\n\nuse Laminas\\Diactoros\\Response\\HtmlResponse;\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass HelloWorldController implements RequestHandlerInterface\n{\n    public function handle(Request $request): Response\n    {\n        return new HtmlResponse('<h1>Hello, world!</h1>');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Flarum Middleware to Specific Routes\nDESCRIPTION: This code demonstrates how to restrict a middleware to specific routes in Flarum.  It retrieves the current route path from the request's URI and compares it to a desired route. If the routes match, the middleware logic is executed, allowing you to selectively apply your middleware's functionality.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/middleware.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Laminas\\Diactoros\\Uri;\n\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n  {\n    $currentRoute = $request->getUri()->getPath();\n    $routeToRunUnder = new Uri(app()->url('/path/to/run/under'));\n\n    if ($currentRoute === $routeToRunUnder->getPath()) {\n        // Your logic here!\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Views in Flarum using Extend\\View\nDESCRIPTION: This snippet demonstrates how to override existing templates from core or other extensions in Flarum. It uses the extendNamespace method of the Extend\\View extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/views.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->extendNamespace('acme.hello-world', __DIR__.'/override_views'),\n];\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan Package via Composer\nDESCRIPTION: Command to install the Flarum PHPStan package as a development dependency\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/phpstan:^1.0\n```\n\n----------------------------------------\n\nTITLE: Using Illuminate Support String Slug in PHP\nDESCRIPTION: Replace the deprecated Flarum\\Util\\Str::slug() method with Illuminate\\Support\\Str::slug() for generating slugs in PHP.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$slug = Str::slug($string);\n```\n\n----------------------------------------\n\nTITLE: CSS Class Naming Convention\nDESCRIPTION: CSS class naming pattern following SUIT CSS naming conventions for components, descendents, and modifiers.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/contributing.md#2025-04-16_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.ComponentName-descendentName--modifierName\n```\n\n----------------------------------------\n\nTITLE: Registering JavaScript Assets in PHP\nDESCRIPTION: Shows how to register a JavaScript file for the forum frontend using the Frontend extender in the extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Filter Mutator for User Filtering in PHP\nDESCRIPTION: This code snippet shows how to implement a filter mutator in Flarum. The mutator is used to modify any user filter query to only include users from the same country as the current user.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterState;\nuse Flarum\\Query\\QueryCriteria;\n\nclass OnlySameCountryFilterMutator\n{\n    public function __invoke(FilterState $filterState, QueryCriteria $queryCriteria)\n    {\n        $filterState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Column Naming Conventions\nDESCRIPTION: Standardized naming patterns for database columns including datetime fields, counters, foreign keys, and boolean fields.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/contributing.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n{verbed}_at          // For datetime/timestamp fields (e.g. created_at)\n{verbed}_until      // For datetime/timestamp fields (e.g. suspended_until)\n{noun}_count        // For integer count fields (e.g. comment_count)\n{verbed}_{entity}_id // For foreign keys (e.g. hidden_user_id)\nis_{adjective}      // For boolean fields (e.g. is_locked)\n```\n\n----------------------------------------\n\nTITLE: Defining Suffixes for GUI Object Translations in YAML\nDESCRIPTION: List of suffixes used for translations related to GUI objects and user operations, such as buttons, links, headings, labels, and placeholders.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n_button:        # Utilizzato per i pulsanti (comprese le voci del menu a discesa).\n_link:          # Utilizzato per i collegamenti che non vengono visualizzati graficamente come pulsanti.\n_heading:       # Utilizzato per le intestazioni in tabelle ed elenchi.\n_label:         # Utilizzato per i nomi dei campi dati, le impostazioni delle caselle di controllo, ecc.\n_placeholder:   # Utilizzato per il testo predefinito visualizzato nei campi.\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Notification Driver in PHP for Flarum\nDESCRIPTION: This snippet illustrates how to implement a custom notification driver for Flarum, specifically for Pusher integration. It includes methods for sending notifications and registering notification types.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Pusher;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\Driver\\NotificationDriverInterface;\nuse Illuminate\\Contracts\\Queue\\Queue;\n\nclass PusherNotificationDriver implements NotificationDriverInterface\n{\n    /**\n     * @var Queue\n     */\n    protected $queue;\n\n    public function __construct(Queue $queue)\n    {\n        $this->queue = $queue;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function send(BlueprintInterface $blueprint, array $users): void\n    {\n        // The `send` method is responsible for determining any notifications need to be sent.\n        // If not (for example, if there are no users to send to), there's no point in scheduling a job.\n        // We HIGHLY recommend that notifications are sent via a queue job for performance reasons.\n        if (count($users)) {\n            $this->queue->push(new SendPusherNotificationsJob($blueprint, $users));\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function registerType(string $blueprintClass, array $driversEnabledByDefault): void\n    {\n        // This method is generally used to register a user preference for this notification.\n        // In the case of pusher, there's no need for this.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: API Key Usage\nDESCRIPTION: Demonstrates how to use an API key for authentication with the Flarum REST API by including the key in the Authorization header, along with an optional user ID. The userId parameter is ignored if user_id is set for the key in the database.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"Authorization: Token YOUR_API_KEY_VALUE; userId=1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring webpack.config.js for Extension Imports\nDESCRIPTION: Shows how to configure webpack to allow importing from other extensions in the frontend JavaScript code.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = require('flarum-webpack-config')({\n    // Provide the extension IDs of all extensions from which your extension will be importing.\n    // Do this for both full and optional dependencies.\n    useExtensions: ['flarum-tags']\n});\n```\n\n----------------------------------------\n\nTITLE: Pluralization in JavaScript Translation\nDESCRIPTION: Demonstrates how to implement pluralization in translations using ICU MessageFormat syntax in JavaScript.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst remaining = this.minPrimary - primaryCount;\nreturn app.translator.trans(\n  'choose_primary_placeholder',\n  { count: remaining }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Key-Value Gambit\nDESCRIPTION: Example of implementing a key-value type gambit for country filtering.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/search.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from 'flarum/common/app';\nimport { KeyValueGambit } from 'flarum/common/query/IGambit';\n\nexport default class CountryGambit extends KeyValueGambit {\n  key(): string {\n    return app.translator.trans('acme.lib.gambits.users.country.key', {}, true);\n  }\n\n  hint(): string {\n    return app.translator.trans('acme.lib.gambits.users.country.hint', {}, true);\n  }\n\n  filterKey(): string {\n    return 'country';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending API Controller in PHP\nDESCRIPTION: Customizes existing API controller with additional configuration options\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillGetData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->setSerializer(MyDiscussionSerializer::class)\n        ->addInclude('user')\n        ->addOptionalInclude('posts')\n        ->setLimit(20)\n        ->setMaxLimit(50)\n        ->setSort(['name' => 'asc'])\n        ->addSortField('firstName')\n        ->prepareDataQuery(function ($controller) {\n            // Añade aquí la lógica personalizada para modificar el controlador\n            // antes de que se ejecuten las consultas de datos.\n        })\n]\n```\n\n----------------------------------------\n\nTITLE: Registering Locales in PHP\nDESCRIPTION: Shows how to register translation files in a Flarum extension's extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnew Extend\\Locales(__DIR__ . '/locale'),\n```\n\n----------------------------------------\n\nTITLE: Checking for Optional Extension in Backend PHP\nDESCRIPTION: Shows how to check if an optional extension is enabled in the backend using the ExtensionManager class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extension\\ExtensionManager;\n\nclass SomeClass {\n    public function __construct(ExtensionManager $extensions)\n    {\n        $this->extensions = $extensions;\n    }\n\n    public function someMethod()\n    {\n        if ($this->extensions->isEnabled('some-extension-id')) {\n            // do something.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Settings to the Forum Frontend in Flarum\nDESCRIPTION: Shows how to use the Settings extender to safely expose specific settings to the forum frontend. The example demonstrates both direct serialization and serialization with custom transformation logic and default values.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n   (new Extend\\Settings)\n      ->serializeToForum('myCoolSetting', 'my.cool.setting.key')\n      ->serializeToForum('myCoolSettingModified', 'my.cool.setting.key', function ($retrievedValue) {\n        // This third argument is optional, and allows us to pass the retrieved setting through some custom logic.\n        // In this example, we'll append a string to it.\n\n        return \"My Cool Setting: $retrievedValue\";\n      }, \"default value!\"),\n]\n```\n\n----------------------------------------\n\nTITLE: State Pattern Implementation for Shared Data in Mithril 2\nDESCRIPTION: Example of implementing the state pattern using a POJO (Plain Old JavaScript Object) for data that needs to be accessed and modified by multiple unrelated components.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nclass Counter {\n  constructor() {\n    this._counter = 0;\n  }\n\n  increaseCounter() {\n    this._counter += 1;\n  }\n\n  getCount() {\n    return this._counter;\n  }\n}\n\napp.counter = new Counter();\n\nextend(HeaderSecondary.prototype, 'items', function(items) {\n  items.add('counterDisplay',\n    <div>\n      <p>Counter: {app.counter.getCount()}</p>\n    </div>\n  );\n})\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('counterButton',\n    <div>\n      <button onclick={() => app.counter.increaseCounter()}>Increase Counter</button>\n    </div>\n  );\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Columns to Existing Table in Flarum\nDESCRIPTION: Demonstrates how to use the Migration::addColumns helper to add new columns to an existing table in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addColumns('users', [\n    'email' => ['string', 'length' => 255, 'nullable' => true],\n    'discussion_count' => ['integer', 'unsigned' => true]\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring View Namespace in PHP\nDESCRIPTION: Demonstrates how to set up a custom view namespace for an extension using the View extender.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/routes.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views')\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Visibility Scope (PHP)\nDESCRIPTION: This snippet demonstrates how to implement a custom visibility scope in Flarum.  It checks if the actor has the 'posts.viewPrivate' ability and, if so, adds a `whereRaw` condition to the query to include all posts (effectively bypassing the privacy filter). It depends on the `Flarum\\User\\User` class and the `Illuminate\\Database\\Eloquent\\Builder` class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopePostVisibility\n{\n    public function __invoke(User $actor, $query)\n    {\n      if ($actor->can('posts.viewPrivate')) {\n        $query->whereRaw(\"1=1\");\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Views with View Extender in PHP\nDESCRIPTION: This snippet demonstrates how to add a new view namespace using the View extender in Flarum's extend.php file. It sets up a directory for view files and assigns it a namespace.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/views.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views'),\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Database Columns in Flarum\nDESCRIPTION: Implementation of adding new columns to an existing table using Flarum's Migration helper\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addColumns('users', [\n    'email' => ['string', 'length' => 255, 'nullable' => true],\n    'discussion_count' => ['integer', 'unsigned' => true]\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit for Integration Tests\nDESCRIPTION: XML configuration for PHPUnit to run integration tests. Specifies test suite directory and important settings like process isolation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"true\"\n         stopOnFailure=\"false\">\n\n    <testsuites>\n        <testsuite name=\"Flarum Integration Tests\">\n            <directory suffix=\"Test.php\">./integration</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Autoload for Local Extenders in Flarum\nDESCRIPTION: This JSON snippet shows how to adjust the composer.json file to enable autoloading of custom classes for local extenders in Flarum. It sets up PSR-4 autoloading for the 'App' namespace in the 'app/' directory.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extenders.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"autoload\": {\n    \"psr-4\": {\n        \"App\\\\\": \"app/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Scripts for Flarum Testing\nDESCRIPTION: This JSON snippet adds scripts to the composer.json file for running unit and integration tests, as well as setting up the testing environment. It also includes descriptions for each script.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/testing.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"test\": [\n        \"@test:unit\",\n        \"@test:integration\"\n    ],\n    \"test:unit\": \"phpunit -c tests/phpunit.unit.xml\",\n    \"test:integration\": \"phpunit -c tests/phpunit.integration.xml\",\n    \"test:setup\": \"@php tests/integration/setup.php\"\n},\n\"scripts-descriptions\": {\n    \"test\": \"Runs all tests.\",\n    \"test:unit\": \"Runs all unit tests.\",\n    \"test:integration\": \"Runs all integration tests.\",\n    \"test:setup\": \"Sets up a database for use with integration tests. Execute this only once.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer JSON for Language Packs\nDESCRIPTION: This JSON snippet outlines the necessary configuration to include locale information in the `composer.json` file for a Flarum language pack. It specifies that the locale code and title need to be added under the 'extra' section.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/language-packs.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flarum-locale\": {\n    \"code\": \"en\",\n    \"title\": \"English\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Mail Driver in Flarum's extend.php\nDESCRIPTION: This snippet shows how to register a custom mail driver in Flarum using the Mail extender in the extension's extend.php file. It demonstrates the proper format for adding the driver to the Flarum framework.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/mail.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Mail\\CustomDriver;\n\nreturn [\n  // Other extenders\n  (new Extend\\Mail())->driver(CustomDriver::class)\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Using Flarum CLI to add GitHub Actions Workflows\nDESCRIPTION: Command to automatically add and update GitHub Actions workflows to your extension using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/github-actions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra githubActions\n```\n\n----------------------------------------\n\nTITLE: Overriding Views in PHP\nDESCRIPTION: Shows how to override existing views from core or extensions using the View extender's extendNamespace method\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/views.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->extendNamespace('acme.hello-world', __DIR__.'/override_views');\n];\n```\n\n----------------------------------------\n\nTITLE: Registering New Frontend Models in Flarum\nDESCRIPTION: Shows how to register a new frontend model with the Flarum store using the Store extender in an extend.js module.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Store()\n    .add('tags', Tag),\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Policies in PHP\nDESCRIPTION: Demonstrates how to create authorization policies for handling draft permissions using GlobalPolicy and DraftPolicy classes, along with resource endpoint configuration.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nclass GlobalPolicy\n{\n    public function createDrafts(User $actor)\n    {\n        return $actor->hasPermission('user.saveDrafts');\n    }\n}\n\nclass DraftPolicy\n{\n    public function update(User $actor, Draft $draft)\n    {\n        return $actor->id === $draft->user_id && $actor->hasPermission('user.saveDrafts');\n    }\n}\n\nclass DraftResource extends Resource\\AbstractDatabaseResource\n{\n    ...\n\n    public function endpoints(): array\n    {\n        return [\n            Endpoint\\Create::make()\n                ->authenticated()\n                ->can('createDrafts')\n                ->defaultInclude(['user']),\n            Endpoint\\Update::make()\n                ->authenticated()\n                ->can('update')\n                ->visible(fn (Draft $draft, Context $context) => $context->getActor()->id === $draft->user_id),\n            ...\n        ];\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Flarum Frontend Utilities in TypeScript\nDESCRIPTION: Demonstrates unit testing of the abbreviateNumber utility function from Flarum's frontend codebase using Jest in TypeScript.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport abbreviateNumber from '../../../../src/common/utils/abbreviateNumber';\n\ntest('does not change small numbers', () => {\n  expect(abbreviateNumber(1)).toBe('1');\n});\n\ntest('abbreviates large numbers', () => {\n  expect(abbreviateNumber(1000000)).toBe('1M');\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n});\n\ntest('abbreviates large numbers with decimal places', () => {\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n  expect(abbreviateNumber(13234)).toBe('13.2K');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Extension Page for Flarum Extension\nDESCRIPTION: Demonstrates how to create a custom extension page by extending the ExtensionPage component.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/admin.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport ExtensionPage from 'flarum/components/ExtensionPage';\n\nexport default class StarPage extends ExtensionPage {\n  content() {\n    return (\n      <h1>Ciao dalla sezione impostazioni!</h1>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Configuration in Flarum API Controller\nDESCRIPTION: This snippet configures sorting options for listing resources in a Flarum API controller.  The `$sort` property defines the default sort order, while `$sortFields` lists the allowed fields for sorting. This restricts user input and prevents unexpected sorting behavior.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n    // The default sort field and order to use.\n    public $sort = ['name' => 'asc'];\n\n    // The fields that are available to be sorted by.\n    public $sortFields = ['firstName', 'lastName'];\n?>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Show API Controller in PHP\nDESCRIPTION: This snippet illustrates how to create a controller for showing a single resource by extending AbstractShowController. It includes the basic structure and the data method implementation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractShowController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass ShowTagController extends AbstractShowController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        $id = Arr::get($request->getQueryParams(), 'id');\n\n        return Tag::findOrFail($id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CSS/LESS Assets in PHP Extension\nDESCRIPTION: Demonstrates how to register both JavaScript and CSS/LESS assets for the forum frontend using the Frontend extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less')\n```\n\n----------------------------------------\n\nTITLE: Default Settings Migration\nDESCRIPTION: Adding default settings using a data migration in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addSettings([\n    'foo' => 'bar',\n]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Admin Extender in JavaScript\nDESCRIPTION: Sets up the basic structure for extending the Flarum admin panel using the Admin extender.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/admin.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\nimport app from 'flarum/admin/app';\n\nexport default [\n  //\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Frontend Routes in JavaScript\nDESCRIPTION: Example of registering a frontend route using Flarum's Routes extender in JavaScript.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Routes()\n    .add('acme.users', '/users', <UsersPage />),\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Find Query for Discussions - PHP 2.x\nDESCRIPTION: Shows how to implement custom find queries in Flarum 2.x to support discussion lookups by slug.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nclass DiscussionResource extends AbstractDatabaseResource\n{\n    public function find(string $id, \\Tobyz\\JsonApiServer\\Context $context): ?object\n    {\n        $actor = $context->getActor();\n\n        if (Arr::get($context->request->getQueryParams(), 'bySlug', false)) {\n            $discussion = $this->slugManager->forResource(Discussion::class)->fromSlug($id, $actor);\n        } else {\n            $discussion = $this->query($context)->findOrFail($id);\n        }\n\n        return $discussion;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending View Namespace for Template Override\nDESCRIPTION: Shows how to override existing templates from core or extensions by extending a view namespace with a custom directory containing override files.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/views.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->extendNamespace('acme.hello-world', __DIR__.'/override_views')\n];\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Integration Test Configuration\nDESCRIPTION: XML configuration file for PHPUnit integration tests with specific settings for Flarum testing environment.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"true\"\n         stopOnFailure=\"false\">\n\n    <testsuites>\n        <testsuite name=\"Flarum Integration Tests\">\n            <directory suffix=\"Test.php\">./integration</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Renaming Columns in Flarum Migration\nDESCRIPTION: Example of renaming columns in an existing table using the Migration::renameColumns helper.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::renameColumns('users', ['from' => 'to']);\n```\n\n----------------------------------------\n\nTITLE: Creating a User with Flarum API\nDESCRIPTION: Example of how to create a new user using a POST request to /api/users. The request includes the username, email, and password attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/rest-api.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"attributes\": {\n      \"username\": \"Flarum\",\n      \"email\": \"flarum@example.com\",\n      \"password\": \"correcthorsebatterystaple\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Middleware to Specific Routes Using URL Path\nDESCRIPTION: This example shows how to make middleware execute only for specific routes by comparing the current request path with a desired path using the Laminas Diactoros URI class.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/middleware.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Laminas\\Diactoros\\Uri;\n\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n  {\n    $currentRoute = $request->getUri()->getPath();\n    $routeToRunUnder = new Uri(app()->url('/path/to/run/under'));\n\n    if ($currentRoute === $routeToRunUnder->getPath()) {\n        // Your logic here!\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Post Request Throttler in PHP\nDESCRIPTION: Example of Flarum's built-in post throttler that prevents users from creating posts too frequently. It checks if the request is for post creation, verifies if the user has permission to bypass throttling, and limits posts to once every 10 seconds.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/api-throttling.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse DateTime;\nuse Flarum\\Post\\Post;\n\nfunction ($request) {\n    if (! in_array($request->getAttribute('routeName'), ['discussions.create', 'posts.create'])) {\n        return;\n    }\n\n    $actor = $request->getAttribute('actor');\n\n    if ($actor->can('postWithoutThrottle')) {\n        return false;\n    }\n\n    if (Post::where('user_id', $actor->id)->where('created_at', '>=', new DateTime('-10 seconds'))->exists()) {\n        return true;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Streams for Reactive Data in Flarum (JavaScript)\nDESCRIPTION: This snippet shows how to use Flarum's Stream utility for creating reactive data structures. It demonstrates basic usage of Streams for managing form data.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/forms.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport Stream from 'flarum/utils/Stream';\n\n\nconst value = Stream(\"hello!\");\nvalue() === \"hello!\"; // verdadero\nvalue(\"world!\");\nvalue() === \"world!\"; // verdadero\n```\n\n----------------------------------------\n\nTITLE: Defining Second-Level Translation Key Namespaces in YAML\nDESCRIPTION: This snippet illustrates the second-level namespaces used in Flarum translations. These keys indicate which interface or component uses the translation, such as admin, forum, or email.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:       # Translations used by the admin interface.\nforum:       # Translations used by the forum user interface.\nlib:         # Translations used by either of the above.\nviews:       # Translations used outside the normal JS client.\napi:         # Translations used in messages output by the API.\nemail:       # Translations used in emails sent by Flarum.\n```\n\n----------------------------------------\n\nTITLE: Defining Extended Model Attribute Types in Flarum\nDESCRIPTION: Example showing how to use the Model extension to define the type of an attribute added to an existing model, which helps PHPStan determine correct types during analysis.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Model(User::class))\n    ->cast('is_cool', 'bool'),\n```\n\n----------------------------------------\n\nTITLE: Refactoring SettingsPage Preference Saving in Mithril\nDESCRIPTION: This code snippet provides an example of how to refactor preference saving within the SettingsPage component. It demonstrates the removal of the preferenceSaver method and proposes direct saving of user preferences instead.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nSwitch.component({\n  children: app.translator.trans('core.forum.settings.privacy_disclose_online_label'),\n  state: this.user.preferences().discloseOnline,\n  onchange: (value) => {\n    this.discloseOnlineLoading = true;\n\n    this.user.savePreferences({ discloseOnline: value }).then(() => {\n      this.discloseOnlineLoading = false;\n      m.redraw();\n    });\n  },\n  loading: this.discloseOnlineLoading,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Translator in JavaScript for Flarum Extensions\nDESCRIPTION: Shows how to use the app.translator.trans() method to reference a translation in JavaScript code for a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/i18n.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('acme-hello-world', function() {\n  alert(app.translator.trans('acme-hello-world.alert.hello_text'));\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Unit Tests for Flarum Frontend Functions\nDESCRIPTION: Provides an example of writing unit tests for a frontend utility function in a Flarum extension using Jest.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport abbreviateNumber from '../../../../src/common/utils/abbreviateNumber';\n\ntest('does not change small numbers', () => {\n  expect(abbreviateNumber(1)).toBe('1');\n});\n\ntest('abbreviates large numbers', () => {\n  expect(abbreviateNumber(1000000)).toBe('1M');\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n});\n\ntest('abbreviates large numbers with decimal places', () => {\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n  expect(abbreviateNumber(13234)).toBe('13.2K');\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Extend and Override Example in Flarum JSX\nDESCRIPTION: Comprehensive example showing how to use both extend and override utilities to modify header components and handle conditional logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend, override } from 'flarum/common/extend';\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport CustomComponentClass from './components/CustomComponentClass';\n\n// Here, we add an item to the returned ItemList. We are using a custom component\n// as discussed above. We've also specified a priority as the third argument,\n// which will be used to order these items. Note that we don't need to return anything.\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add(\n    'google',\n    <CustomComponentClass>\n      <a href=\"https://google.com\">Google</a>\n    </CustomComponentClass>,\n    5\n  );\n});\n\n// Here, we conditionally use the original output of a method,\n// or create our own ItemList, and then add an item to it.\n// Note that we MUST return our custom output.\noverride(HeaderPrimary.prototype, 'items', function(original) {\n  let items;\n\n  if (someArbitraryCondition) {\n    items = original();\n  } else {\n    items = new ItemList();\n  }\n\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n\n  return items;\n});\n```\n\n----------------------------------------\n\nTITLE: Extending View Namespaces in Flarum\nDESCRIPTION: Demonstrates how to override existing templates from core or other extensions by extending view namespaces with custom override directories.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/views.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->extendNamespace('acme.hello-world', __DIR__.'/override_views'),\n];\n```\n\n----------------------------------------\n\nTITLE: Namespace Update for Zend to Laminas\nDESCRIPTION: Migration example showing the change from Zend namespace to Laminas namespace as part of Beta 13 breaking changes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b13.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Old way\nuse Zend\\...\n\n// New way\nuse Laminas\\...\n```\n\n----------------------------------------\n\nTITLE: Annotated Flarum composer.json File Structure\nDESCRIPTION: An example of a Flarum composer.json file with explanations for each section, including metadata, required packages, and configuration options.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/composer.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"flarum/flarum\",\n    \"description\": \"Delightfully simple forum software.\",\n    \"type\": \"project\",\n    \"keywords\": [\n        \"forum\",\n        \"discussion\"\n    ],\n    \"homepage\": \"https://flarum.org/\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Flarum\",\n            \"email\": \"info@flarum.org\",\n            \"homepage\": \"https://flarum.org/team\"\n        }\n    ],\n    \"support\": {\n        \"issues\": \"https://github.com/flarum/core/issues\",\n        \"source\": \"https://github.com/flarum/flarum\",\n        \"docs\": \"https://flarum.org/docs/\"\n    },\n    \"require\": {\n        \"flarum/core\": \"^1.0\",\n        \"flarum/approval\": \"*\",\n        \"flarum/bbcode\": \"*\",\n        \"flarum/emoji\": \"*\",\n        \"flarum/lang-english\": \"*\",\n        \"flarum/flags\": \"*\",\n        \"flarum/likes\": \"*\",\n        \"flarum/lock\": \"*\",\n        \"flarum/markdown\": \"*\",\n        \"flarum/mentions\": \"*\",\n        \"flarum/nicknames\": \"*\",\n        \"flarum/pusher\": \"*\",\n        \"flarum/statistics\": \"*\",\n        \"flarum/sticky\": \"*\",\n        \"flarum/subscriptions\": \"*\",\n        \"flarum/suspend\": \"*\",\n        \"flarum/tags\": \"*\"\n    },\n    \"config\": {\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true\n    },\n    \"prefer-stable\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Caddy Server Configuration\nDESCRIPTION: Complete Caddy server configuration block for hosting Flarum including PHP FastCGI and cache headers.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/install.md#2025-04-16_snippet_4\n\nLANGUAGE: caddy\nCODE:\n```\nwww.example.com {\n    root * /var/www/flarum/public\n    php_fastcgi unix//var/run/php/php7.4-fpm.sock\n    header /assets/* {\n        +Cache-Control \"public, must-revalidate, proxy-revalidate\"\n        +Cache-Control \"max-age=25000\"\n        Pragma \"public\"\n    }\n    file_server\n}\n```\n\n----------------------------------------\n\nTITLE: Access Token Response\nDESCRIPTION: Illustrates the JSON response received after successfully creating an access token. The response includes the token and user ID, which are used for subsequent API requests.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"{\n    \\\"token\\\": \\\"YACub2KLfe8mfmHPcUKtt6t2SMJOGPXnZbqhc3nX\\\",\n    \\\"userId\\\": \\\"1\\\"\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Draft Update Controller and Handler in PHP\nDESCRIPTION: Contains the UpdateDraftController for handling draft update requests and UpdateDraftHandler for processing draft updates. Includes permission checks, field updates, and timestamp management.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass UpdateDraftController extends AbstractShowController\n{\n    public $serializer = DraftSerializer::class;\n\n    protected $bus;\n\n    public function __construct(Dispatcher $bus)\n    {\n        $this->bus = $bus;\n    }\n\n    protected function data(ServerRequestInterface $request, Document $document)\n    {\n        $actor = RequestUtil::getActor($request);\n        $ipAddress = $request->getAttribute('ipAddress');\n\n        return $this->bus->dispatch(\n            new UpdateDraft(Arr::get($request->getQueryParams(), 'id'), $actor, Arr::get($request->getParsedBody(), 'data', []), $ipAddress)\n        );\n    }\n}\n\nclass UpdateDraftHandler\n{\n    use Scheduled;\n\n    public function handle(UpdateDraft $command)\n    {\n        $actor = $command->actor;\n        $data = $command->data;\n\n        $draft = Draft::findOrFail($command->draftId);\n\n        if (intval($actor->id) !== intval($draft->user_id)) {\n            throw new PermissionDeniedException();\n        }\n\n        $actor->assertCan('user.saveDrafts');\n\n        $attributes = Arr::get($data, 'attributes', []);\n\n        if ($title = Arr::get($attributes, 'title')) {\n            $draft->title = $title;\n        }\n\n        if ($content = Arr::get($attributes, 'content')) {\n            $draft->content = $content;\n        }\n\n        if ($extra = Arr::get($attributes, 'extra')) {\n            $draft->extra = json_encode($extra);\n        }\n\n        if (Arr::has($attributes, 'clearValidationError')) {\n            $draft->scheduled_validation_error = '';\n        }\n\n        $draft->scheduled_for = $this->getScheduledFor($attributes, $actor);\n        $draft->ip_address = $command->ipAddress;\n        $draft->updated_at = Carbon::now();\n\n        $draft->save();\n\n        return $draft;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flarum Configuration Array in PHP\nDESCRIPTION: This code snippet shows the structure of the Flarum configuration array in PHP. It includes settings for debug mode, offline mode, database connection, URL and API/Admin paths.  This file is located in the Flarum installation root directory.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/config.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php return array (\n  'debug' => false, // 启用或禁用调试模式，用于排查问题\n  'offline' => false, // 启用或禁用网站维护模式。这使得所有用户(包括管理员)无法访问您的网站。\n  'database' =>\n  array (\n    'driver' => 'mysql', // 数据库驱动，例如 MySQL, MariaDB ……\n    'host' => 'localhost', // 连接的主机，除非使用外部服务，否则多数情况下是 localhost\n    'database' => 'flarum', // 数据库实例名\n    'username' => 'root', // 数据库用户名\n    'password' => '', // 数据库密码\n    'charset' => 'utf8mb4',\n    'collation' => 'utf8mb4_unicode_ci',\n    'prefix' => '', // 数据表的前缀，如果您和其他服务共享一个数据库，那么添加前缀会很有用\n    'port' => '3306', // 连接数据库的端口，MySQL 默认为 3306\n    'strict' => false,\n  ),\n  'url' => 'https://flarum.localhost', // URL 配置，如果您改变了域名，您需要变更这个\n  'paths' =>\n  array (\n    'api' => 'api', // /api 跳转到 API\n    'admin' => 'admin', // /admin 跳转到 admin\n  ),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Routing API Changes in Mithril 2.0\nDESCRIPTION: Demonstrates the differences in route registration and link handling between Mithril 0.2 and Mithril 2.0, highlighting the new routing conventions\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Mithril 0.2\napp.routes.new_page = { path: '/new', component: NewPage.component() }\n\n// Mithril 2.0\napp.routes.new_page = { path: '/new', component: NewPage }\n\n// Link handling\n// Mithril 0.2\n<a href=\"/path\" config={m.route}>Link Content</a>\n\n// Mithril 2\nimport Link from 'flarum/components/Link';\n\n<Link href=\"/path\">Link Content</Link>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Translation Key Reference Example\nDESCRIPTION: Example showing incorrect practice of referencing translation keys outside the ref namespace, which can lead to unintended changes and maintenance issues.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => Log In\n\n    log_in:\n      submit_button: => core.forum.header.log_in_link  # Never reference keys\n      title: => core.forum.header.log_in_link          # that aren't in \"ref\"!\n```\n\n----------------------------------------\n\nTITLE: Registering Model with Store in JavaScript\nDESCRIPTION: Registers a new model with the frontend store\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\napp.store.models.tags = Tag;\n```\n\n----------------------------------------\n\nTITLE: Using Illuminate\\Support\\Str::slug() in PHP\nDESCRIPTION: Replace the deprecated Flarum\\Util\\Str::slug() method with Illuminate\\Support\\Str::slug() for generating URL slugs.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b12.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$slug = Str::slug($title);\n```\n\n----------------------------------------\n\nTITLE: Modifying Response Headers in Middleware\nDESCRIPTION: Demonstrates how to modify response headers after the initial request handling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/middleware.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    $response = $handler->handle($request);\n\n    // Your logic...\n    $response = $response->withHeader('Content-Type', 'application/json');\n\n    return $response;\n}\n```\n\n----------------------------------------\n\nTITLE: Typical index.js Structure\nDESCRIPTION: This snippet illustrates a typical structure for an `index.js` file, which is often the main entry point for frontend code within the `src` directory.  It imports `extend` and `override` from `flarum/common/extend`, and adds an initializer callback to `app.initializers` to execute extension code after the core has booted. The initializer logs a message to the console.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extend, override } from 'flarum/common/extend';\n\n// We provide our extension code in the form of an \"initializer\".\n// This is a callback that will run after the core has booted.\napp.initializers.add('acme-flarum-hello-world', function(app) {\n  // Your Extension Code Here\n  console.log(\"EXTENSION NAME is working!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Integration Test Case in PHP for Flarum Extension\nDESCRIPTION: Example of setting up a basic integration test case class for a Flarum extension. Demonstrates database preparation, extension enabling, and setting configuration before tests run.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    use RetrievesAuthorizedUsers;\n\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        $this->setting('my.custom.setting', true);\n\n        $this->extension('flarum-tags', 'my-cool-extension');\n\n        $this->prepareDatabase([\n            'users' => [\n                $this->normalUser()\n            ],\n            'discussions' => [\n                ['id' => 1, 'title' => 'some title', 'created_at' => Carbon::now(), 'last_posted_at' => Carbon::now(), 'user_id' => 1, 'first_post_id' => 1, 'comment_count' => 1]\n            ],\n            'posts' => [\n                ['id' => 1, 'number' => 1, 'discussion_id' => 1, 'created_at' => Carbon::now(), 'user_id' => 1, 'type' => 'comment', 'content' => '<t><p>something</p></t>']\n            ]\n        ]);\n\n        $this->extend((new CoolExtensionExtender)->doSomething('hello world'));\n    }\n\n    /**\n     * @test\n     */\n    public function some_phpunit_test_case()\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Transitioning Routing API to Mithril 2.0 Syntax - JavaScript\nDESCRIPTION: This snippet illustrates the changes made to the routing API in Mithril 2.0. It highlights the differences in how to set and get routes and the preferred way of defining links using the `Link` component in new implementations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Mithril 0.2\napp.routes.new_page = { path: '/new', component: NewPage.component() }\n\n// Mithril 2.0\napp.routes.new_page = { path: '/new', component: NewPage }\n\n// Defining internal link with Mithril 0.2\n<a href=\"/path\" config={m.route}>Link Content</a>\n\n// Defining internal link with Mithril 2\nimport Link from 'flarum/components/Link';\n\n<Link href=\"/path\">Link Content</Link>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Service Provider in Flarum's extend.php\nDESCRIPTION: This code snippet shows how to register a custom service provider in Flarum using the ServiceProvider extender in the extend.php file. It demonstrates the proper syntax for adding the provider to the Flarum extension system.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/service-provider.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    // Other extenders\n    (new Extend\\ServiceProvider())\n        ->register(CustomServiceProvider::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Example of Problematic Component Instance Storage in Mithril.js\nDESCRIPTION: This code demonstrates the outdated approach of storing component instances in Mithril, which no longer works with Mithril's optimization algorithms. The parent component stores an instance of ChildComponent and directly modifies its state.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nclass ChildComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return <p>{this.counter}</p>;\n  }\n}\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.child = new ChildComponent();\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.child.counter += 1}></button>\n        {this.child.render()}\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Language Pack in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to declare a Flarum language pack using the LanguagePack extender. It's a simple instantiation with no additional configuration required.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/language-packs.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn new Flarum\\Extend\\LanguagePack();\n```\n\n----------------------------------------\n\nTITLE: Creating Access Tokens in Flarum REST API\nDESCRIPTION: Example of creating an access token by sending user credentials to the /api/token endpoint. The response includes the token and user ID that can be used for subsequent authenticated requests.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"identification\": \"Toby\",\n    \"password\": \"pass7word\"\n}\n\nHTTP/1.1 200 OK\n\n{\n    \"token\": \"YACub2KLfe8mfmHPcUKtt6t2SMJOGPXnZbqhc3nX\",\n    \"userId\": \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group Permissions and User Permission Checks in PHP\nDESCRIPTION: This snippet demonstrates how to access a group's permissions and check if a group or user has specific permissions using Flarum's user and group classes. It illustrates querying an Eloquent relation and permission validation methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// An Eloquent relation to the group's permissions\n$group->permissions();\n\n// Check if a group has a permission\n$group->hasPermission('viewForum');\n\n// Enumerate all the user's permissions\n$user->getPermissions();\n\n// Check if the user is in a group with the given permission\n$user->hasPermission('viewForum');\n```\n\n----------------------------------------\n\nTITLE: Updating Routing API in Mithril 2.0 for JavaScript\nDESCRIPTION: This snippet shows how to update the routing API when migrating from Mithril 0.2 to Mithril 2.0. It demonstrates changes in route registration, getting and setting routes, and creating internal links.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\napp.routes.new_page = { path: '/new', component: NewPage.component() }\n\n// Mithril 2.0\napp.routes.new_page = { path: '/new', component: NewPage }\n\n// Mithril 0.2\n<a href=\"/path\" config={m.route}>Link Content</a>\n\n// Mithril 2\nimport Link from 'flarum/components/Link';\n\n<Link href=\"/path\">Link Content</Link>\n```\n\n----------------------------------------\n\nTITLE: Adding Columns to Existing Table in Flarum Migration\nDESCRIPTION: Example of using Flarum's Migration helper to add new columns to an existing database table.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nreturn Migration::addColumns('users', [\n    'email' => ['string', 'nullable' => true],\n    'discussion_count' => ['integer', 'unsigned' => true]\n]);\n```\n\n----------------------------------------\n\nTITLE: Modifying Frontend Content with Frontend Extender in Flarum (Blanket Change)\nDESCRIPTION: This snippet shows how to use the `Frontend` extender's `content` method in Flarum to add content to every frontend page.  It uses a closure that accepts a `Document` object and a `Request` object. The example adds a JavaScript alert to the head of the HTML document.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/routes.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Frontend\\Document;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->content(function (Document $document, Request $request) {\n            $document->head[] = '<script>alert(\"Hello, world!\")</script>';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Exporting Frontend Components in JavaScript\nDESCRIPTION: This snippet demonstrates how to export classes or functions from a Flarum extension's frontend, allowing other extensions to use or modify them. It shows the structure of the index.js file, including the initializer and export statement.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/extensibility.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('your-extension-id', () => {\n  // Your Extension Code Here\n})\n\nexport {\n  // Put all the stuff you want to export here.\n}\n```\n\n----------------------------------------\n\nTITLE: Using View Extender for Blade View Registration\nDESCRIPTION: Demonstrates the new way to register Laravel Blade views in Flarum extensions using the View extender, replacing the old method of injecting a view factory.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// extend.php\nuse Flarum\\Extend\\View;\n\nreturn [\n  (new View)->namespace(NAME, RELATIVE PATH);\n]\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan Package for Flarum\nDESCRIPTION: Composer command to install the Flarum PHPStan package as a development dependency in your extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/phpstan:^1.0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Models by Slug in Flarum\nDESCRIPTION: Demonstrates how to retrieve a model from its slug using the SlugManager. The code shows using the SlugManager to find a model of a specific type using a slug string.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/slugging.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$slugManager = app(SlugManager::class);\n\n$model = $slugManager->forResource($type)->fromSlug($slug);\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listeners in PHP\nDESCRIPTION: Demonstrates how to register event listeners using the Event extender in Flarum. It shows both callback and class-based listener registration.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->listen(Deleted::class, function($event) {\n            // do something here\n        })\n        ->listen(Deleted::class, PostDeletedListener::class)\n];\n```\n\nLANGUAGE: php\nCODE:\n```\nclass PostDeletedListener\n{\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    public function handle(Deleted $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Composer Test Script Configuration\nDESCRIPTION: JSON configuration for Composer scripts to run unit and integration tests with appropriate descriptions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"scripts\": {\n        \"test\": [\n            \"@test:unit\",\n            \"@test:integration\"\n        ],\n        \"test:unit\": \"phpunit -c tests/phpunit.unit.xml\",\n        \"test:integration\": \"phpunit -c tests/phpunit.integration.xml\",\n        \"test:setup\": \"@php tests/integration/setup.php\"\n    },\n    \"scripts-descriptions\": {\n        \"test\": \"Runs all tests.\",\n        \"test:unit\": \"Runs all unit tests.\",\n        \"test:integration\": \"Runs all integration tests.\",\n        \"test:setup\": \"Sets up a database for use with integration tests. Execute this only once.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from View Factory to View Extender in Flarum\nDESCRIPTION: Examples showing how to update code that previously injected the Laravel View Factory to instead use the new View extender in Flarum, which prevents breaking views for other extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// Old way (deprecated)\n// extend.php\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n  function (Factory $view) {\n    $view->addNamespace(NAME, RELATIVE PATH);\n  }\n]\n```\n\nLANGUAGE: php\nCODE:\n```\n// New way\n// extend.php\nuse Flarum\\Extend\\View;\n\nreturn [\n  (new View)->namespace(NAME, RELATIVE PATH);\n]\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom SlugDriver in Flarum\nDESCRIPTION: Demonstrates how to register a custom slug driver in Flarum using the Extend\\ModelUrl extender. This example registers a slug driver for the Discussion model.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/slugging.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\ModelUrl(Discussion::class))\n    ->addSlugDriver('custom', CustomSlugDriver::class)\n```\n\n----------------------------------------\n\nTITLE: Checking for Optional Dependencies in PHP\nDESCRIPTION: This PHP snippet demonstrates how to use the Flarum\\Extension\\ExtensionManager to check if an extension is enabled on the backend. It involves dependency injection and the use of the isEnabled() method for conditional logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extension\\ExtensionManager;\n\nclass SomeClass {\n    public function __construct(ExtensionManager $extensions)\n    {\n        $this->extensions = $extensions;\n    }\n\n    public function someMethod()\n    {\n        if ($this->extensions->isEnabled('some-extension-id')) {\n            // do something.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Request to Next Middleware in Flarum\nDESCRIPTION: This code snippet demonstrates how to pass the request to the next middleware in the chain using the `$handler->handle($request)` call.  This is crucial when your middleware doesn't need to return a custom response but needs to perform some action before or after subsequent middleware.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/middleware.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn $handler->handle($request);\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Notification Driver in Flarum PHP\nDESCRIPTION: This code snippet shows how to register a custom notification driver using the Notification extender. It provides an example from Flarum Pusher to illustrate the registration of a PusherNotificationDriver with its unique driver name.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Flarum\\Extend\nuse Flarum\\Pusher\\PusherNotificationDriver;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->driver('pusher', PusherNotificationDriver::class),\n    // Other extenders\n];\n\n```\n\n----------------------------------------\n\nTITLE: Integration Testing Example for Alert Component\nDESCRIPTION: Example of integration tests for a UI component, showing how to test rendering, interaction, and conditional display logic using mithril-query.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport Alert from '../../../../src/common/components/Alert';\nimport m from 'mithril';\nimport mq from 'mithril-query';\nimport { jest } from '@jest/globals';\n\ndescribe('Alert displays as expected', () => {\n  it('should display alert messages with an icon', () => {\n    const alert = mq(m(Alert, { type: 'error' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toHaveElement('i.icon');\n  });\n\n  it('should display alert messages with a custom icon when using a title', () => {\n    const alert = mq(Alert, { type: 'error', icon: 'fas fa-users', title: 'Woops..' });\n    expect(alert).toContainRaw('Woops..');\n    expect(alert).toHaveElement('i.fas.fa-users');\n  });\n\n  it('should display alert messages with a title', () => {\n    const alert = mq(m(Alert, { type: 'error', title: 'Error Title' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toContainRaw('Error Title');\n    expect(alert).toHaveElement('.Alert-title');\n  });\n\n  it('should display alert messages with custom controls', () => {\n    const alert = mq(Alert, { type: 'error', controls: [m('button', { className: 'Button--test' }, 'Click me!')] });\n    expect(alert).toHaveElement('button.Button--test');\n  });\n});\n\ndescribe('Alert is dismissible', () => {\n  it('should show dismiss button', function () {\n    const alert = mq(m(Alert, { dismissible: true }, 'Shoot!'));\n    expect(alert).toHaveElement('button.Alert-dismiss');\n  });\n\n  it('should call ondismiss when dismiss button is clicked', function () {\n    const ondismiss = jest.fn();\n    const alert = mq(Alert, { dismissible: true, ondismiss });\n    alert.click('.Alert-dismiss');\n    expect(ondismiss).toHaveBeenCalled();\n  });\n\n  it('should not be dismissible if not chosen', function () {\n    const alert = mq(Alert, { type: 'error', dismissible: false });\n    expect(alert).not.toHaveElement('button.Alert-dismiss');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Monkey Patching Example in Flarum JSX\nDESCRIPTION: Demonstrates basic monkey patching by adding a global attribute and modifying a component's view method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// This adds an attribute to the `app` global.\napp.googleUrl = \"https://google.com\";\n\n// This replaces the output of the discussion page with \"Hello World\"\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\n\nDiscussionPage.prototype.view = function() {\n  return <p>Hello World</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Controller Implementation in PHP\nDESCRIPTION: Example of a basic controller class implementing RequestHandlerInterface to handle HTTP requests and return responses.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Acme\\HelloWorld;\n\nuse Laminas\\Diactoros\\Response\\HtmlResponse;\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass HelloWorldController implements RequestHandlerInterface\n{\n    public function handle(Request $request): Response\n    {\n        return new HtmlResponse('<h1>Hello, world!</h1>');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing API Endpoints in PHP\nDESCRIPTION: Demonstrates how to remove an endpoint from an existing Flarum API resource using the removeEndpoint method.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Resource;\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\ApiResource(Resource\\UserResource::class))\n        ->removeEndpoint('delete'),\n];\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Page as Homepage Option in Flarum Admin\nDESCRIPTION: Shows how to extend the BasicsPage to include a custom page as a homepage option in the Flarum admin panel.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/frontend-pages.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport BasicsPage from 'flarum/common/components/BasicsPage';\n\nexport default function() {\n  extend(BasicsPage.prototype, 'homePageItems', items => {\n    items.add('tags', {\n      path: '/tags',\n      label: app.translator.trans('flarum-tags.admin.basics.tags_label')\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Notification Driver in PHP\nDESCRIPTION: Example showing how to register a custom notification driver using the Notification extender.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/notifications.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend\nuse Flarum\\Pusher\\PusherNotificationDriver;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->driver('pusher', PusherNotificationDriver::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Frontend Testing\nDESCRIPTION: JSON configuration to add to package.json for enabling frontend testing. This adds the test script and sets up the module type for Jest compatibility.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"scripts\": {\n    ...,\n    \"test\": \"yarn node --experimental-vm-modules $(yarn bin jest)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Sender in PHP\nDESCRIPTION: PHP implementation of notification sending logic, including event listeners for post likes and unlikes. Shows how to sync notifications using NotificationSyncer.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Listener;\n\nuse Flarum\\Event\\ConfigureNotificationTypes;\nuse Flarum\\Likes\\Event\\PostWasLiked;\nuse Flarum\\Likes\\Event\\PostWasUnliked;\nuse Flarum\\Likes\\Notification\\PostLikedBlueprint;\nuse Flarum\\Notification\\NotificationSyncer;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nclass SendNotificationWhenPostIsLiked\n{\n    protected $notifications;\n\n    public function __construct(NotificationSyncer $notifications)\n    {\n        $this->notifications = $notifications;\n    }\n\n    public function subscribe(Dispatcher $events)\n    {\n        $events->listen(PostWasLiked::class, [$this, 'whenPostWasLiked']);\n        $events->listen(PostWasUnliked::class, [$this, 'whenPostWasUnliked']);\n    }\n\n    public function whenPostWasLiked(PostWasLiked $event)\n    {\n        $this->syncNotification($event->post, $event->user, [$event->post->user]);\n    }\n\n    public function whenPostWasUnliked(PostWasUnliked $event)\n    {\n        $this->syncNotification($event->post, $event->user, []);\n    }\n\n    public function syncNotification(Post $post, User $user, array $recipients)\n    {\n        if ($post->user->id != $user->id) {\n            $this->notifications->sync(\n                new PostLikedBlueprint($post, $user),\n                $recipients\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bidi for Bidirectional Binding in Flarum Forms (JSX)\nDESCRIPTION: This snippet demonstrates how to use the bidi attribute for bidirectional binding in Flarum forms. It shows both the traditional approach and the simplified bidi approach.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/forms.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\n\nconst value = Stream();\n\n// Without bidi\n<input type=\"text\" value={value()} oninput={e => value(e.target.value)}></input>\n\n// With bidi\n<input type=\"text\" bidi={value}></input>\n```\n\n----------------------------------------\n\nTITLE: Registering Locales in PHP for Flarum Extensions\nDESCRIPTION: Shows how to register translation directories in a Flarum extension's extend.php file using the Locales extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnew Extend\\Locales(__DIR__ . '/locale'),\n```\n\n----------------------------------------\n\nTITLE: Integration Test Setup Script\nDESCRIPTION: PHP script used to set up the testing database and file structure for Flarum integration tests.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/testing.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Testing\\integration\\Setup\\SetupScript;\n\nrequire __DIR__.'/../../vendor/autoload.php';\n\n$setup = new SetupScript();\n\n$setup->run();\n```\n\n----------------------------------------\n\nTITLE: Model Extension Configuration\nDESCRIPTION: Extending existing Flarum models with custom attribute casts and default values using the Model extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\User\\User;\n\nreturn [\n    (new Extend\\Model(User::class))\n        ->default('is_alive', true)\n        ->cast('suspended_until', 'datetime')\n        ->cast('is_admin', 'boolean')\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Controller in PHP\nDESCRIPTION: Example of a simple controller class that implements RequestHandlerInterface and returns an HTML response.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/routes.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Acme\\HelloWorld;\n\nuse Laminas\\Diactoros\\Response\\HtmlResponse;\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass HelloWorldController implements RequestHandlerInterface\n{\n    public function handle(Request $request): Response\n    {\n        return new HtmlResponse('<h1>Hello, world!</h1>');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing PHPStan Cache then Running Analysis\nDESCRIPTION: Clears the PHPStan cache before running analysis using Composer scripts. Useful for ensuring fresh analysis results. Depends on Composer configuration with valid scripts.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer clear-cache:phpstan && composer analyse:phpstan\n```\n\n----------------------------------------\n\nTITLE: Enviando solicitudes HTTP en pruebas de integración de Flarum\nDESCRIPTION: Ejemplos de cómo enviar solicitudes HTTP en pruebas de integración de Flarum, incluyendo solicitudes GET y POST con autenticación y parámetros.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    /**\n     * @test\n     */\n    public function can_search_users()\n    {\n        $response = $this->send(\n          $this->request('GET', '/api/users', ['authenticatedAs' => 1])\n               ->withQueryParams(['filter' => ['q' => 'john group:1'], 'sort' => 'username'])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    /**\n     * @test\n     */\n    public function can_create_user()\n    {\n        $response = $this->send(\n          $this->request(\n                'POST',\n                '/api/users',\n                [\n                    'authenticatedAs' => 1,\n                    'json' => [\n                        'data' => [\n                            'attributes' => [\n                                'username' => 'test',\n                                'password' => 'too-obscure',\n                                'email' => 'test@machine.local'\n                            ]\n                        ]\n                    ]\n                ]\n            )\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Redraw Prevention in Flarum with Mithril 2.0\nDESCRIPTION: This snippet shows how to update the syntax for preventing redraws in event handlers when migrating from Mithril 0.2 to Mithril 2.0 in Flarum. It demonstrates the change from using 'm.redraw.strategy('none')' to setting 'e.redraw = false'.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\n<button onclick={() => {\n  console.log(\"Hello world\");\n  m.redraw.strategy('none');\n}}>\n  Click Me!\n</button>\n\n// Mithril 2\n<button onclick={e => {\n  console.log(\"Hello world\");\n  e.redraw = false;\n}}>\n  Click Me!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using Bidi Binding for Form Inputs in Flarum (JSX)\nDESCRIPTION: This snippet demonstrates how to use bidi (bidirectional) binding in Flarum forms. It shows both the traditional approach and the simplified bidi approach for handling input changes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/forms.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/utils/Stream';\n\nconst value = Stream();\n\n// Sin bidi\n<input type=\"text\" value={value()} oninput={e => value(e.target.value)}></input>\n\n// Con bidi\n<input type=\"text\" bidi={value}></input>\n```\n\n----------------------------------------\n\nTITLE: Listing Discussions with Flarum REST API\nDESCRIPTION: Fetches a list of discussions available to the user from the Flarum API. This is a GET request to /api/discussions, returning structured JSON data with discussion attributes and relationships. The response includes pagination links for browsing.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/rest-api.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"links\": {\"first\": \"https://flarum.tld/api/discussions\", \"next\": \"https://flarum.tld/api/discussions?page%5Boffset%5D=20\"}, \"data\": [{\"type\": \"discussions\", \"id\": \"234\", \"attributes\": {\"title\": \"Lorem Ipsum\", \"slug\": \"234-lorem-ipsum\", \"commentCount\": 10, \"participantCount\": 3, \"createdAt\": \"2022-01-01T10:20:30+00:00\", \"lastPostedAt\": \"2022-01-05T10:20:30+00:00\", \"lastPostNumber\": 10, \"canReply\": true, \"canRename\": true, \"canDelete\": true, \"canHide\": true, \"isHidden\": true, \"hiddenAt\": \"2022-01-06T10:20:30+00:00\", \"lastReadAt\": \"2022-01-02T10:20:30+00:00\", \"lastReadPostNumber\": 2, \"isApproved\": true, \"canTag\": true, \"isLocked\": false, \"canLock\": true, \"isSticky\": false, \"canSticky\": true, \"canMerge\": true, \"subscription\": null}, \"relationships\": {\"user\": {\"data\": {\"type\": \"users\", \"id\": \"1\"}}, \"lastPostedUser\": {\"data\": {\"type\": \"users\", \"id\": \"64\"}}, \"tags\": {\"data\": [{\"type\": \"tags\", \"id\": \"3\"}]}, \"firstPost\": {\"data\": {\"type\": \"posts\", \"id\": \"668\"}}}}], \"included\": [{\"type\": \"users\", \"id\": \"1\", \"attributes\": {\"username\": \"Admin\", \"displayName\": \"Admin\", \"avatarUrl\": null, \"slug\": \"1\"}}, {\"type\": \"users\", \"id\": \"64\", \"attributes\": {\"username\": \"Flarum\", \"displayName\": \"Flarum\", \"avatarUrl\": \"https://flarum.tld/assets/avatars/Z4hEncw0ndVqZ8be.png\", \"slug\": \"64\"}}, {\"type\": \"tags\", \"id\": \"3\", \"attributes\": {\"name\": \"Welcome\", \"description\": \"Post interesting things here\", \"slug\": \"welcome\", \"color\": \"#888\", \"backgroundUrl\": null, \"backgroundMode\": null, \"icon\": \"fas fa-bullhorn\", \"discussionCount\": 30, \"position\": 1, \"defaultSort\": null, \"isChild\": false, \"isHidden\": false, \"lastPostedAt\": \"2022-01-05T10:20:30+00:00\", \"canStartDiscussion\": true, \"canAddToDiscussion\": true, \"isRestricted\": false}}, {\"type\": \"posts\", \"id\": \"668\", \"attributes\": {\"number\": 1, \"createdAt\": \"2022-01-01T10:20:30+00:00\", \"contentType\": \"comment\", \"contentHtml\": \"<p>Hello World</p>\"}}]}\n```\n\n----------------------------------------\n\nTITLE: Defining Frontend Routes with Parameters in JavaScript\nDESCRIPTION: Example of capturing URI segments in frontend routes using Mithril's routing parameters.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n  new Extend.Routes()\n    .add('acme.user', '/user/:id', <UsersPage />)\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Storing Component Instances in Mithril 2\nDESCRIPTION: Example of the deprecated pattern where a parent component stores a child component instance. This no longer works in Mithril 2 as the Component class no longer has a render method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nclass ChildComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return <p>{this.counter}</p>;\n  }\n}\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.child = new ChildComponent();\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.child.counter += 1}></button>\n        {this.child.render()}\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Name-Based Middleware Filtering\nDESCRIPTION: Demonstrates how to filter middleware execution based on route names after ResolveRoute middleware.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    if ($request->getAttribute('routeName') === 'register') {\n        // Your logic here!\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Global Flarum Update Command\nDESCRIPTION: Command to update all Flarum packages with their dependencies while preserving dist preferences and excluding dev dependencies.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/internal/extension-manager.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncommand update --prefer-dist --no-dev -a --with-all-dependencies\n```\n\n----------------------------------------\n\nTITLE: Pluralization Example in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to use the Flarum translator to handle pluralization, accommodating different counts of items in a message.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/i18n.md#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst remaining = this.minPrimary - primaryCount;\nreturn app.translator.trans(\n  'choose_primary_placeholder',\n  { count: remaining }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Flarum Extension\nDESCRIPTION: Sets up the webpack.config.js file to use Flarum's official webpack configuration for extension development.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = require('flarum-webpack-config');\n\nmodule.exports = config();\n```\n\n----------------------------------------\n\nTITLE: Defining Email Specific Suffixes in YAML\nDESCRIPTION: This final snippet specifies suffixes used exclusively within the email namespace for translation keys in the Flarum framework. These suffixes distinguish elements of an email message and ensure consistent labeling across translations.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/i18n.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n_body:          # Used for the content of the email message.\n_subject:       # Used for the subject line of the email message.\n```\n\n----------------------------------------\n\nTITLE: CSRF Token Mismatch Error in Flarum's REST API\nDESCRIPTION: Example error response when the CSRF token validation fails. This occurs when the Authorization header is absent or invalid and Flarum attempts to authenticate through the session cookie.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"400\",\n      \"code\": \"csrf_token_mismatch\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Link Creation from Mithril 0.2 to Mithril 2.0\nDESCRIPTION: Demonstrates how to create internal links using the new Link component in Mithril 2.0 instead of the config={m.route} approach from Mithril 0.2.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\n<a href=\"/path\" config={m.route}>Link Content</a>\n\n// Mithril 2\nimport Link from 'flarum/components/Link';\n\n<Link href=\"/path\">Link Content</Link>\n```\n\n----------------------------------------\n\nTITLE: Initial DraftResource Class Framework for Flarum 2.0\nDESCRIPTION: The initial structure of the DraftResource class that will replace multiple API controllers and serializers in Flarum 2.0. This class defines the resource type, model, and fields based on the original serializer.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**  \n * @extends Resource\\AbstractDatabaseResource<Draft>  \n */  \nclass DraftResource extends Resource\\AbstractDatabaseResource  \n{  \n    public function type(): string  \n    {  \n        // insert-next-line\n        return 'drafts';\n    }\n  \n    public function model(): string  \n    {  \n        // insert-next-line\n        return Draft::class;  \n    }\n  \n    public function endpoints(): array  \n    {  \n        return [  \n            //\n        ];  \n    }  \n  \n    public function fields(): array  \n    {  \n        return [  \n            // insert-start\n            Schema\\Str::make('title'),  \n            Schema\\Str::make('content'),  \n            Schema\\Arr::make('extra'),  \n            Schema\\Str::make('scheduledValidationError'),\n            Schema\\DateTime::make('scheduledFor'),\n            Schema\\DateTime::make('updatedAt'),\n  \n            Schema\\Relationship\\ToOne::make('user')  \n                ->includable()  \n                ->inverse('drafts')  \n                ->type('users'),  \n            // insert-end\n        ];  \n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Resource Controller in PHP\nDESCRIPTION: Example of a controller for deleting resources, extending AbstractDeleteController with deletion logic implementation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractDeleteController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nclass DeleteTagController extends AbstractDeleteController\n{    \n    protected function delete(Request $request)\n    {\n        $id = Arr::get($request->getQueryParams(), 'id');\n\n        Tag::findOrFail($id)->delete();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CLI Models in Flarum\nDESCRIPTION: Commands to generate backend and frontend models using Flarum CLI\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend model\n$ flarum-cli make frontend model\n```\n\n----------------------------------------\n\nTITLE: Component Children Passing Refactoring\nDESCRIPTION: Shows the updated method of passing children to components in Flarum, highlighting the shift from prop-based to argument-based child passing\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n// Old method (no longer works)\nButton.component({\n  className: 'Button Button--primary',\n  children: 'Button Text'\n});\n\n// New method\nButton.component({\n  className: 'Button Button--primary'\n}, 'Button Text');\n```\n\n----------------------------------------\n\nTITLE: Registering Number Setting with Constraints in Flarum Admin\nDESCRIPTION: Demonstrates adding a number setting with min/max constraints to the Flarum admin panel.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/admin.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\nimport app from 'flarum/admin/app';\n\nreturn [\n  new Extend.Admin()\n    .setting(\n      () => ({\n        setting: 'acme-interstellar.crew_count',\n        label: app.translator.trans('acme-interstellar.admin.crew_count_label', {}, true),\n        type: 'number',\n        min: 1,\n        max: 10\n      }),\n    )\n];\n```\n\n----------------------------------------\n\nTITLE: Pluralization Example in JavaScript\nDESCRIPTION: Demonstrates using ICU MessageFormat for pluralization in translations\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst remaining = this.minPrimary - primaryCount;\nreturn app.translator.trans(\n  'choose_primary_placeholder',\n  { count: remaining }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Notification Blueprint Type in PHP for Flarum\nDESCRIPTION: Example of creating a PostLikedBlueprint class that implements BlueprintInterface. This class defines notification content and behavior for when a post is liked, including methods to get subject, sender, and notification type.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass PostLikedBlueprint implements BlueprintInterface\n{\n    public $post;\n\n    public $user;\n\n    public function __construct(Post $post, User $user)\n    {\n        $this->post = $post;\n        $this->user = $user;\n    }\n\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    public function getFromUser()\n    {\n        return $this->user;\n    }\n\n    public function getData()\n    {\n    }\n\n    public static function getType()\n    {\n        return 'postLiked';\n    }\n\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Views in Flarum's extend.php\nDESCRIPTION: Illustrates how to override templates added by core or other extensions by extending an existing view namespace with a new directory.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/views.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->extendNamespace('acme.hello-world', __DIR__.'/override_views');\n];\n```\n\n----------------------------------------\n\nTITLE: Alcance de Visibilidad de Discusiones en Flarum (PHP)\nDESCRIPTION: Implementación de una clase para definir el alcance de visibilidad de las discusiones basado en permisos de tags. Filtra las discusiones visibles para un usuario según sus permisos en los tags asociados.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/authorization.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibilityForAbility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     * @param string $ability\n     */\n    public function __invoke(User $actor, Builder $query, $ability)\n    {\n        if (substr($ability, 0, 4) === 'view') {\n            return;\n        }\n\n        // Si una discusión requiere un determinado permiso para que sea\n        // visible, entonces podemos comprobar si el usuario tiene concedido ese\n        // permiso para cualquiera de las etiquetas de la discusión. $query->whereIn('discussions.id', function ($query) use ($actor, $ability) {\n            return $query->select('discussion_id')\n                ->from('discussion_tag')\n                ->whereIn('tag_id', Tag::getIdsWhereCan($actor, 'discussion.'.$ability));\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Button Component Children Syntax\nDESCRIPTION: Examples showing old and new ways to pass children to Button components\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nButton.component({\n  className: 'Button Button--primary',\n  children: 'Button Text'\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nButton.component({\n  className: 'Button Button--primary'\n}, 'Button Text');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<Button className='Button Button--primary'>Button Text</Button>\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Loading in Flarum JavaScript\nDESCRIPTION: This snippet illustrates the change in how composers are loaded in Flarum. Instead of passing a component instance, it now requires passing the body class and any attrs separately.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 2\napp.composer.load(DiscussionComposer, {user: app.session.user})\n```\n\n----------------------------------------\n\nTITLE: Implementing Settings Repository Injection in PHP\nDESCRIPTION: Example of how to inject the SettingsRepositoryInterface into a class using dependency injection. This pattern allows access to the settings repository throughout the class instance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace acme\\HelloWorld\\ExampleDir;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\n\nclass ClassInterfacesWithSettings\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Middleware in Flarum Extension\nDESCRIPTION: This code demonstrates how to register middleware in a Flarum extension using the middleware extender in the `extend.php` file. It allows adding, removing, inserting, or replacing middleware in different application layers such as admin, forum, and api.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Flarum\\Extend;\\n// use Flarum\\Http\\Middleware\\CheckCsrfToken;\\n\\nreturn [\\n    // Add middleware to forum frontend\\n    (new Extend\\Middleware('forum'))->add(YourMiddleware::class),\\n    // Admin frontend\\n    (new Extend\\Middleware('admin'))->add(YourMiddleware::class),\\n    // API frontend\\n    (new Extend\\Middleware('api'))->add(YourMiddleware::class),\\n\\n    (new Extend\\Middleware('frontend'))\\n        // remove a middleware (e.g. remove CSRF token check 😱)\\n        ->remove(CheckCsrfToken::class)\\n        // insert before another middleware (e.g. before a CSRF token check)\\n        ->insertBefore(CheckCsrfToken::class, YourMiddleware::class)\\n        // insert after another middleware (e.g. after a CSRF token check)\\n        ->insertAfter(CheckCsrfToken::class, YourMiddleware::class)\\n        // replace a middleware (e.g. replace the CSRF check with your own implementation)\\n        ->replace(CheckCsrfToken::class, YourMiddleware::class)\\n];\n```\n\n----------------------------------------\n\nTITLE: Verifica dei Permessi per Gruppi e Utenti in PHP\nDESCRIPTION: Esempi di metodi per verificare i permessi associati a gruppi e utenti in Flarum. Include relazioni eloquenti, controlli di autorizzazioni specifiche e enumerazione di tutti i permessi di un utente.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Una relazione eloquente con le autorizzazioni del gruppo\n$group->permissions();\n\n// Controlla se un gruppo dispone di un'autorizzazione\n$group->hasPermission('viewForum');\n\n// Enumera tutte le autorizzazioni dell'utente\n$user->getPermissions();\n\n// Controlla se l'utente fa parte di un gruppo con l'autorizzazione fornita\n$user->hasPermission('viewForum');\n```\n\n----------------------------------------\n\nTITLE: Updating Mithril Promise Handling\nDESCRIPTION: Example showing how to update from Mithril 0.2's deferred promises to native promises in Mithril 2.0.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\nconst deferred = m.deferred();\n\napp.store.find('posts').then(result => deferred.resolve(result));\n\nreturn deferred.promise;\n\n// Mithril 2\nreturn app.store.find('posts');\n```\n\n----------------------------------------\n\nTITLE: Defining Translation Namespace Keys in YAML\nDESCRIPTION: This snippet outlines how the top-level and second-level namespace keys are used for translations in Flarum. The top-level keys indicate the component type, while second-level keys denote the user interface aspect. These structured keys aid developers and localizers in organizing and locating translation strings efficiently.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncore:        # Translations used by the Flarum core\nvalidation:  # Translations used by Laravel's validator\n```\n\n----------------------------------------\n\nTITLE: Frontend JavaScript Asset Registration\nDESCRIPTION: This snippet shows how to register a JavaScript asset for the frontend using the `Frontend` extender in the `extend.php` file. It creates a new `Frontend` instance for the `forum` application and calls the `js` method to specify the path to the compiled JavaScript file (`forum.js`).\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum Testing Library with CLI\nDESCRIPTION: Shows how to use the Flarum CLI tool to automatically add and update backend testing infrastructure to your extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra backendTesting\n```\n\n----------------------------------------\n\nTITLE: Using Link Component for Internal and External Links - Mithril - JSX\nDESCRIPTION: This code snippet demonstrates how to use Flarum's Link component to create internal and external links in a Single Page Application built with Mithril. It shows examples of using the Link component with both generated and direct href attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'flarum/common/components/Link';\n\n// Link can be used just like any other component:\n<Link href=\"/route/known/to/mithril\">Hello World!</Link>\n\n// You'll frequently use Link with generated routes:\n<Link href={app.route('settings')}>Hello World!</Link>\n\n// Link can even generate external links with the external attr:\n<Link external={true} href=\"https://google.com\">Hello World!</Link>\n\n// The above example with external = true is equivalent to:\n<a href=\"https://google.com\">Hello World!</a>\n// but is provided for flexibility: sometimes you might have links\n// that are conditionally internal or external.\n```\n\n----------------------------------------\n\nTITLE: Using Link Component for Internal Routing in Flarum\nDESCRIPTION: Demonstrates the new preferred way of creating internal links in Flarum using the Link component, which replaces the old m.route configuration.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\n<a href=\"/path\" config={m.route}>Link Content</a>\n\n// Mithril 2\nimport Link from 'flarum/components/Link';\n\n<Link href=\"/path\">Link Content</Link>\n```\n\n----------------------------------------\n\nTITLE: Testing Console Commands in Flarum\nDESCRIPTION: Demonstrates how to test custom console commands in Flarum using the ConsoleTestCase class. Shows how to run a command with arguments and options and assert the output.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Tests\\integration\\ConsoleTestCase;\n\nclass ConsoleTest extends ConsoleTestCase\n{\n    /**\n     * @test\n     */\n    public function command_works()\n    {\n        $input = [\n            'command' => 'some:command',  // The command name, equivalent of `php flarum some:command`\n            'foo' => 'bar',  // arguments\n            '--lorem' => 'ipsum'  // options\n        ];\n\n        $this->assertEquals('Some Output.', $this->runCommand($input));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Resources in JavaScript\nDESCRIPTION: Example of creating a new resource by first creating a record with the store's createRecord method, then saving it. This pattern is used to add new items to the database via the API.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussion = app.store.createRecord('discussions');\n\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Registering Locales in Flarum using PHP\nDESCRIPTION: Code to register translation files in Flarum by adding an extension to the extend.php file. This tells Flarum where to find translation files for your extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnew Extend\\Locales(__DIR__ . '/locale'),\n```\n\n----------------------------------------\n\nTITLE: Updated Preference Saving in Mithril 2\nDESCRIPTION: Comparison of the old approach using preferenceSaver and the new direct approach for saving user preferences in Mithril 2, now using explicit loading state management.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Old way\nSwitch.component({\n  children: app.translator.trans('core.forum.settings.privacy_disclose_online_label'),\n  state: this.user.preferences().discloseOnline,\n  onchange: (value, component) => {\n    this.user.pushAttributes({ lastSeenAt: null });\n    this.preferenceSaver('discloseOnline')(value, component);\n  },\n})\n\n// Without preferenceSaver\nSwitch.component({\n  children: app.translator.trans('core.forum.settings.privacy_disclose_online_label'),\n  state: this.user.preferences().discloseOnline,\n  onchange: (value) => {\n    this.discloseOnlineLoading = true;\n\n    this.user.savePreferences({ discloseOnline: value }).then(() => {\n      this.discloseOnlineLoading = false;\n      m.redraw();\n    });\n  },\n  loading: this.discloseOnlineLoading,\n})\n```\n\n----------------------------------------\n\nTITLE: admin.js and forum.js Entry Points\nDESCRIPTION: These snippets demonstrate the recommended structure for `admin.js` and `forum.js` files, which serve as entry points for the admin and forum frontend applications, respectively. They export all contents from the corresponding `src` subdirectories, allowing for better organization of the extension's source code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// admin.js\nexport * from './src/admin';\n\n// forum.js\nexport * from './src/forum';\n```\n\n----------------------------------------\n\nTITLE: Implementing Discussion Visibility Scoper in PHP for Flarum Tags\nDESCRIPTION: This code defines a global scoper for the Discussion model. It handles visibility based on tags and user permissions, with special handling for the 'view' ability and its variants.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibilityForAbility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     * @param string $ability\n     */\n    public function __invoke(User $actor, Builder $query, $ability)\n    {\n        // Automatic scoping should be applied to the global `view` ability,\n        // and to arbitrary abilities that aren't subqueries of `view`.\n        // For example, if we want to scope discussions where the user can\n        // edit posts, this should apply.\n        // But if we are expanding a restriction of `view` (for example,\n        // `viewPrivate`), we shouldn't apply this query again.\n        if (substr($ability, 0, 4) === 'view' && $ability !== 'view') {\n            return;\n        }\n\n        // Avoid an infinite recursive loop.\n        if (Str::endsWith($ability, 'InRestrictedTags')) {\n            return;\n        }\n\n        // `view` is a special case where the permission string is represented by `viewForum`.\n        $permission = $ability === 'view' ? 'viewForum' : $ability;\n\n        // Restrict discussions where users don't have necessary permissions in all tags.\n        // We use a double notIn instead of a doubleIn because the permission must be present in ALL tags,\n        // not just one.\n        $query->where(function ($query) use ($actor, $permission) {\n            $query\n                ->whereNotIn('discussions.id', function ($query) use ($actor, $permission) {\n                    return $query->select('discussion_id')\n                        ->from('discussion_tag')\n                        ->whereNotIn('tag_id', function ($query) use ($actor, $permission) {\n                            Tag::query()->setQuery($query->from('tags'))->whereHasPermission($actor, $permission)->select('tags.id');\n                        });\n                })\n                ->orWhere(function ($query) use ($actor, $permission) {\n                    // Allow extensions a way to override scoping for any given permission.\n                    $query->whereVisibleTo($actor, \"${permission}InRestrictedTags\");\n                });\n        });\n\n        // Hide discussions with no tags if the user doesn't have that global\n        // permission.\n        if (! $actor->hasPermission($permission)) {\n            $query->has('tags');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering View Namespace in PHP\nDESCRIPTION: Registers a custom view namespace for an extension, specifying the directory where view files are located\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/views.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views'),\n];\n```\n\n----------------------------------------\n\nTITLE: Modifying Global App and Overriding Component View in JavaScript\nDESCRIPTION: Demonstrates adding an attribute to the global 'app' object and completely replacing the view method of the DiscussionPage component.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend.md#2025-04-16_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n// This adds an attribute to the `app` global.\napp.googleUrl = \"https://google.com\";\n\n// This replaces the output of the discussion page with \"Hello World\"\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\n\nDiscussionPage.prototype.view = function() {\n  return <p>Hello World</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending API Serializers - Flarum API\nDESCRIPTION: Example of extending existing serializers to add custom attributes and relationships using the ApiSerializer extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nreturn [\n    (new Extend\\ApiSerializer(UserSerializer::class))\n        // One attribute at a time\n        ->attribute('firstName', function ($serializer, $user, $attributes) {\n            return $user->first_name\n        })\n        // Multiple modifications at once, more complex logic\n        ->mutate(function($serializer, $user, $attributes) {\n            $attributes['someAttribute'] = $user->someAttribute;\n            if ($serializer->getActor()->can('administrate')) {\n                $attributes['someDate'] = $serializer->formatDate($user->some_date);\n            }\n\n            return $attributes;\n        })\n        // API relationships\n        ->hasOne('phone', PhoneSerializer::class)\n        ->hasMany('comments', CommentSerializer::class),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Flarum Frontend Testing\nDESCRIPTION: Creates a TypeScript configuration file specifically for testing, extending the main tsconfig.json and including necessary type definitions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"include\": [\"tests/**/*\"],\n  \"files\": [\"../../../node_modules/@flarum/jest-config/shims.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Route Helper Method in Flarum Frontend\nDESCRIPTION: This JavaScript code defines a route and adds a helper method for generating URLs to that route in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n  new Extend.Routes()\n   .add('acme.user', '/user/:id', <UsersPage />)\n   .helper('acmeUser', (user) => app.route('acme.user', { id: user.id() }))\n```\n\n----------------------------------------\n\nTITLE: Configuring View Namespace for Flarum Extensions\nDESCRIPTION: Example of how to set up a custom view namespace for a Flarum extension using the View extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views');\n];\n```\n\n----------------------------------------\n\nTITLE: Asset URL Implementation in Flarum Core\nDESCRIPTION: Example demonstrating how Flarum core handles serialization of logo and favicon URLs for asset management. Referenced from the Flarum framework codebase.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/assets.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n#L104-L107\n```\n\n----------------------------------------\n\nTITLE: Mocking User and Request in PHP Unit Tests\nDESCRIPTION: Shows how to mock User and Request classes in PHP unit tests for validating authorization interactions. It demonstrates mocking the actor and the request's method that provides the actor.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$this->actor = m::mock(User::class);\n$request = m::mock(Request::class)->makePartial();\n$request->shouldReceive('getAttribute->getActor')->andReturn($this->actor);\n$this->actor->shouldReceive('SOME PERMISSION')->andReturn(true/false);\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Browser Scroll Restoration in JavaScript\nDESCRIPTION: Shows how to disable automatic browser scroll restoration for individual pages in Flarum's frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-b15.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Reference to frontend-pages.md documentation\n```\n\n----------------------------------------\n\nTITLE: Registering Notification Components in Flarum (JavaScript)\nDESCRIPTION: Example from Flarum-Likes showing how to register a notification component and extend the notification grid to include settings for the notification type. This code adds the notification to the settings page so users can configure their preferences.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport NotificationGrid from 'flarum/forum/components/NotificationGrid';\n\nimport PostLikedNotification from './components/PostLikedNotification';\n\napp.initializers.add('flarum-likes', () => {\n  app.notificationComponents.postLiked = PostLikedNotification;\n\n  extend(NotificationGrid.prototype, 'notificationTypes', function (items) {\n    items.add('postLiked', {\n      name: 'postLiked',\n      icon: 'far fa-thumbs-up',\n      label: app.translator.trans('flarum-likes.forum.settings.notify_post_liked_label')\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Registering JSON:API Routes in Flarum\nDESCRIPTION: Example of how to register standard JSON:API routes for a resource type using the Routes extender. This creates the standard CRUD endpoints following REST conventions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Routes('api'))\n        ->get('/tags', 'tags.index', ListTagsController::class)\n        ->get('/tags/{id}', 'tags.show', ShowTagController::class)\n        ->post('/tags', 'tags.create', CreateTagController::class)\n        ->patch('/tags/{id}', 'tags.update', UpdateTagController::class)\n        ->delete('/tags/{id}', 'tags.delete', DeleteTagController::class)\n```\n\n----------------------------------------\n\nTITLE: Defining Second-Level Interface Namespaces in YAML for Flarum Translations\nDESCRIPTION: This snippet shows the second-level keys that indicate which interface uses the translation in Flarum. It includes keys for admin, forum, library, views, API, and email interfaces.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:       # Translations used by the admin interface.\nforum:       # Translations used by the forum user interface.\nlib:         # Translations used by either of the above.\nviews:       # Translations used outside the normal JS client.\napi:         # Translations used in messages output by the API.\nemail:       # Translations used in emails sent by Flarum.\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Flarum Frontend Testing\nDESCRIPTION: Creates a Jest configuration file for frontend testing in a Flarum extension using the @flarum/jest-config package.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('@flarum/jest-config')();\n```\n\n----------------------------------------\n\nTITLE: Accessing Cached Data in Flarum Frontend Store\nDESCRIPTION: Shows how to access cached resources from the Flarum frontend store using the all and getById methods, avoiding unnecessary API calls.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussions = app.store.all('discussions');\nconst discussion = app.store.getById('discussions', 123);\n```\n\n----------------------------------------\n\nTITLE: Executing Global Flarum Updates Bash\nDESCRIPTION: This command updates all packages by executing `composer update` with various flags to exclude development dependencies and include all necessary packages. It requires a properly configured Composer environment. Outputs result of package updates.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/internal/package-manager.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update --prefer-dist --no-dev -a --with-all-dependencies\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Extension Page for Flarum Admin Dashboard\nDESCRIPTION: Demonstrates how to register a custom extension page in the Flarum admin dashboard using the ExtensionData API.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/admin.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport StarPage from './components/StarPage';\n\napp.initializers.add('interstellar', function(app) {\n\n  app.extensionData\n    .for('acme-interstellar')\n    .registerPage(StarPage);\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Response Generation in Middleware\nDESCRIPTION: Example of generating and returning a custom JSON API response from middleware, useful for validation errors or custom handling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\JsonApiResponse;\nuse Tobscure\\JsonApi\\Document;\nuse Tobscure\\JsonApi\\Exception\\Handler\\ResponseBag;\n\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    if ($userFoundInDatabase) {\n        $error = new ResponseBag('422', [\n            [\n                'status' => '422',\n                'code' => 'validation_error',\n                'source' => [\n                    'pointer' => '/data/attributes/email',\n                ],\n                'detail' => 'Yikes! Your email can\\'t be used.',\n            ],\n        ]);\n        $document = new Document();\n        $document->setErrors($error->getErrors());\n\n        return new JsonApiResponse($document, $error->getStatus());\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Validation Errors in Flarum REST API\nDESCRIPTION: Occurs when a request contains invalid data, typically returning a 422 HTTP status code. The response provides details of each error, like the status, code, detail, and source pointer indicating the invalid field.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/rest-api.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"errors\": [{\"status\": \"422\", \"code\": \"validation_error\", \"detail\": \"The username has already been taken.\", \"source\":{\"pointer\":\"\\/data\\/attributes\\/username\"}}, {\"status\": \"422\", \"code\": \"validation_error\", \"detail\": \"The email has already been taken.\", \"source\": {\"pointer\":\"\\/data\\/attributes\\/email\"}}]}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Tags in Flarum Translations\nDESCRIPTION: This snippet shows how to incorporate HTML elements within translations. HTML tags are passed as React components in the parameters object, which can then be referenced in the translation string.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_7\n\nLANGUAGE: jsx harmony\nCODE:\n```\n<div className=\"helpText\">\n  {app.translator.trans('icon_text', {\n    a: <a href=\"https://fortawesome.github.io/Font-Awesome/icons/\" tabindex=\"-1\"/>\n  })}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Preference Saving in Mithril 0.2 vs Mithril 2\nDESCRIPTION: Comparison of how to save preferences in both Mithril versions. In Mithril 2, the preferenceSaver helper is removed and preferences should be saved directly, with loading state managed through attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n// Old way\nSwitch.component({\n  children: app.translator.trans('core.forum.settings.privacy_disclose_online_label'),\n  state: this.user.preferences().discloseOnline,\n  onchange: (value, component) => {\n    this.user.pushAttributes({ lastSeenAt: null });\n    this.preferenceSaver('discloseOnline')(value, component);\n  },\n})\n\n// Without preferenceSaver\nSwitch.component({\n  children: app.translator.trans('core.forum.settings.privacy_disclose_online_label'),\n  state: this.user.preferences().discloseOnline,\n  onchange: (value) => {\n    this.discloseOnlineLoading = true;\n\n    this.user.savePreferences({ discloseOnline: value }).then(() => {\n      this.discloseOnlineLoading = false;\n      m.redraw();\n    });\n  },\n  loading: this.discloseOnlineLoading,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Routes in PHP\nDESCRIPTION: Example of defining a backend route using Flarum's Routes extender. Shows how to register a GET route with a path, name, and controller.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\nuse Acme\\HelloWorld\\HelloWorldController;\n\nreturn [\n    (new Extend\\Routes('forum'))\n        ->get('/hello-world', 'acme.hello-world', HelloWorldController::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Tags in JSX Translation\nDESCRIPTION: Shows how to add HTML tags to translations in JSX code, allowing for flexible formatting in different languages.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"helpText\">\n  {app.translator.trans('icon_text', {\n    a: <a href=\"https://fortawesome.github.io/Font-Awesome/icons/\" tabindex=\"-1\"/>\n  })}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Migration Helper\nDESCRIPTION: Example of creating a new database table using Flarum's Migration helper with a table name and blueprint closure.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/models.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Database\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\n\nreturn Migration::createTable('users', function (Blueprint $table) {\n    $table->increments('id');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining First-Level Namespaces for Flarum Core Components in YAML\nDESCRIPTION: Examples of first-level namespaces for Flarum's core components. These keys indicate which component uses the translation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncore:        # Traduzioni usate dal core di Flarum\nvalidation:  # Traduzioni usate dal validatore di Laravel\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Discussion Visibility Scoper in PHP\nDESCRIPTION: An example scoper for handling private discussion visibility using orWhere clauses to extend existing visibility rules.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace ACME\\YourExtension\\Access;\n\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     */\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->orWhere(function($query) use ($actor) {\n            $query->where('some_column', true);\n            $query->where('some_other_column', false);\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Columns in a Table\nDESCRIPTION: Migration for renaming columns in an existing table using the renameColumns helper with a mapping of old to new names.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/models.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::renameColumns('users', ['from' => 'to']);\n```\n\n----------------------------------------\n\nTITLE: Event Listener Class Implementation\nDESCRIPTION: Example of a class-based event listener with dependency injection for handling post deletion events.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass PostDeletedListener\n{\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    public function handle(Deleted $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Settings Repository Interface in PHP\nDESCRIPTION: Demonstrates how to implement the SettingsRepositoryInterface in a Flarum extension class using dependency injection.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace acme\\HelloWorld\\ExampleDir;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\n\nclass ClassInterfacesWithSettings\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Composer Scripts for Running Tests\nDESCRIPTION: Composer script configurations for running unit and integration tests, including test setup and documentation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"test\": [\n        \"@test:unit\",\n        \"@test:integration\"\n    ],\n    \"test:unit\": \"phpunit -c tests/phpunit.unit.xml\",\n    \"test:integration\": \"phpunit -c tests/phpunit.integration.xml\",\n    \"test:setup\": \"@php tests/integration/setup.php\"\n},\n\"scripts-descriptions\": {\n    \"test\": \"Runs all tests.\",\n    \"test:unit\": \"Runs all unit tests.\",\n    \"test:integration\": \"Runs all integration tests.\",\n    \"test:setup\": \"Sets up a database for use with integration tests. Execute this only once.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Extending API Controllers in Flarum 1.x\nDESCRIPTION: This snippet shows how to extend various API controllers in Flarum 1.x, adding includes, sort fields, and custom attributes to user, discussion, and post endpoints.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// extend.php\nreturn [\n    ...\n\n    (new Extend\\ApiController(Controller\\ListUsersController::class))\n        ->addInclude('ranks'),\n\n    (new Extend\\ApiController(Controller\\ShowUserController::class))\n        ->addInclude('ranks'),\n\n    (new Extend\\ApiController(Controller\\CreateUserController::class))\n        ->addInclude('ranks'),\n\n    (new Extend\\ApiController(Controller\\UpdateUserController::class))\n        ->addInclude('ranks'),\n\n    (new Extend\\ApiController(Controller\\ShowDiscussionController::class))\n        ->addInclude('posts.user.ranks')\n        ->loadWhere('posts.actualvotes', [LoadActorVoteRelationship::class, 'mutateRelation'])\n        ->prepareDataForSerialization([LoadActorVoteRelationship::class, 'sumRelation']),\n\n    (new Extend\\ApiController(Controller\\ListDiscussionsController::class))\n        ->addSortField('hotness')\n        ->addSortField('votes')\n        ->loadWhere('firstPost.actualvotes', [LoadActorVoteRelationship::class, 'mutateRelation'])\n        ->prepareDataForSerialization([LoadActorVoteRelationship::class, 'sumRelation']),\n\n    (new Extend\\ApiController(Controller\\ListPostsController::class))\n        ->addInclude('user.ranks')\n        ->addOptionalInclude(['upvotes', 'downvotes'])\n        ->loadWhere('actualvotes', [LoadActorVoteRelationship::class, 'mutateRelation'])\n        ->prepareDataForSerialization([LoadActorVoteRelationship::class, 'sumRelation']),\n\n    (new Extend\\ApiController(Controller\\ShowPostController::class))\n        ->addInclude('user.ranks')\n        ->addOptionalInclude(['upvotes', 'downvotes'])\n        ->loadWhere('actualvotes', [LoadActorVoteRelationship::class, 'mutateRelation'])\n        ->prepareDataForSerialization([LoadActorVoteRelationship::class, 'sumRelation']),\n\n    (new Extend\\ApiController(Controller\\CreatePostController::class))\n        ->addInclude('user.ranks')\n        ->addOptionalInclude(['upvotes', 'downvotes']),\n\n    (new Extend\\ApiController(Controller\\UpdatePostController::class))\n        ->addInclude('user.ranks')\n        ->addOptionalInclude(['upvotes', 'downvotes'])\n        ->loadWhere('actualvotes', [LoadActorVoteRelationship::class, 'mutateRelation'])\n        ->prepareDataForSerialization([LoadActorVoteRelationship::class, 'sumRelation']),\n    \n    (new Extend\\ApiSerializer(Serializer\\PostSerializer::class))\n        ->attributes(function (PostSerializer $serializer, Post $post, array $attributes) {\n            $attributes['votes'] = $post->actualvotes_sum_value;\n            \n            return $attributes;\n        }),\n    \n    ...\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Visibility Logic in Flarum's PostPolicy\nDESCRIPTION: Shows how to implement custom visibility logic for posts, allowing for extension flexibility. This example demonstrates how to handle private posts and provide hooks for extensions to modify visibility.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, we want to ensure that private posts aren't visible to users by default.\n// The simplest way to do this would be:\n$query->where('posts.is_private', false);\n\n// However, we recognize that some extensions might have valid use cases for showing private posts.\n// So instead, we include all posts that aren't private, AND all private posts desired by extensions\n$query->where(function ($query) use ($actor) {\n    $query->where('posts.is_private', false)\n        ->orWhere(function ($query) use ($actor) {\n            $query->whereVisibleTo($actor, 'viewPrivate');\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Columns in Flarum Migration\nDESCRIPTION: Example of adding columns to an existing table using the Migration::addColumns helper.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addColumns('users', [\n    'email' => ['string', 'length' => 255, 'nullable' => true],\n    'discussion_count' => ['integer', 'unsigned' => true]\n]);\n```\n\n----------------------------------------\n\nTITLE: Module with Default Export Only Pattern in TypeScript\nDESCRIPTION: Demonstrates how to structure a module with a default export and how to import it from another extension using the 'ext:' prefix.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/registry.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Extension A: vendor/extension-a\n// Filename: moduleA.ts\n// Export\nexport default ...;\n\n// Extension B: vendor/extension-b\n// Import\nimport moduleA from 'ext:vendor/extension-a/.../moduleA';\n```\n\n----------------------------------------\n\nTITLE: Esportazione di componenti frontend in Flarum\nDESCRIPTION: Esempio di come esportare classi o funzioni dal frontend di un'estensione Flarum per consentirne l'utilizzo da parte di altre estensioni. Il codice mostra come aggiungere un initializer e esportare componenti separatamente.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/extensibility.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('your-extension-id', () => {\n  // Il codice della tua estensione andrà qui\n})\n\nexport {\n  // Tutto ciò che vuoi esportare invece andrà qui.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPStan for Flarum Extensions\nDESCRIPTION: Sample configuration for PHPStan in a Flarum extension, including analysis level, paths, and specific parameters for Flarum projects.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/static-code-analysis.md#2025-04-16_snippet_1\n\nLANGUAGE: neon\nCODE:\n```\nincludes:\n  - vendor/flarum/phpstan/extension.neon\n\nparameters:\n  # The level will be increased in Flarum 2.0\n  level: 5\n  paths:\n    - src\n    - extend.php\n  excludePaths:\n    - *.blade.php\n  checkMissingIterableValueType: false\n  databaseMigrationsPath: ['migrations']\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Dependencies in composer.json\nDESCRIPTION: Example showing how to specify Flarum extension dependencies in composer.json. Dependencies are automatically managed, preventing enabling an extension without its dependencies or disabling extensions that others depend on.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my/extension\",\n  \"description\": \"Cool New Extension\",\n  \"type\": \"flarum-extension\",\n  \"license\": \"MIT\",\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.14\",\n    \"flarum/tags\": \"^0.1.0-beta.14\",  // Will mark tags as a dependency\n    \"flarum/mentions\": \"^0.1.0-beta.14\",  // Will mark mentions as a dependency\n  }\n  // other config\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Event Listeners with Flarum CLI\nDESCRIPTION: Shows how to use the Flarum CLI to automatically generate event listeners for backend events.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend event-listener\n```\n\n----------------------------------------\n\nTITLE: Importing from Other Extensions in Flarum Frontend\nDESCRIPTION: JavaScript code demonstrating how to import exported items from other Flarum extensions in the frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst allThingsExportedBySomeExtension = require('@flarum-tags');\n```\n\n----------------------------------------\n\nTITLE: Specifying Extension Dependencies in composer.json\nDESCRIPTION: JSON example showing how to specify Flarum extension dependencies by adding them as Composer dependencies in composer.json.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my/extension\",\n  \"description\": \"Cool New Extension\",\n  \"type\": \"flarum-extension\",\n  \"license\": \"MIT\",\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.14\",\n    \"flarum/tags\": \"^0.1.0-beta.14\",  // Will mark tags as a dependency\n    \"flarum/mentions\": \"^0.1.0-beta.14\",  // Will mark mentions as a dependency\n  }\n  // other config\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Frontend Notification Component in JSX for Flarum\nDESCRIPTION: This code shows how to create a frontend notification component in JSX that extends Flarum's base Notification class. It implements the required methods icon(), href(), and content() to define how the notification appears and behaves in the UI.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Notification from 'flarum/components/Notification';\nimport username from 'flarum/helpers/username';\n\nexport default class NewPostNotification extends Notification {\n  icon() {\n    return 'fas fa-star';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n    const discussion = notification.subject();\n    const content = notification.content() || {};\n\n    return app.route.discussion(discussion, content.postNumber);\n  }\n\n  content() {\n    return app.translator.trans('flarum-subscriptions.forum.notifications.new_post_text', {user: this.attrs.notification.sender()});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: State Pattern Implementation in JavaScript\nDESCRIPTION: An example of using a POJO 'state instance' for managing data that can be modified by several unrelated components. This pattern is similar to 'service' singletons used in Angular and Ember.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass Counter {\n  constructor() {\n    this._counter = 0;\n  }\n\n  increaseCounter() {\n    this._counter += 1;\n  }\n\n  getCount() {\n    return this._counter;\n  }\n}\n\napp.counter = new Counter();\n\nextend(HeaderSecondary.prototype, 'items', function(items) {\n  items.add('counterDisplay',\n    <div>\n      <p>Counter: {app.counter.getCount()}</p>\n    </div>\n  );\n})\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('counterButton',\n    <div>\n      <button onclick={() => app.counter.increaseCounter()}>Increase Counter</button>\n    </div>\n  );\n})\n```\n\n----------------------------------------\n\nTITLE: Passing the Request to the Next Middleware\nDESCRIPTION: Shows the standard pattern for passing a request to the next middleware in the chain when no custom response is being returned.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/middleware.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn $handler->handle($request);\n```\n\n----------------------------------------\n\nTITLE: Rendering Blade Templates to Strings in Flarum\nDESCRIPTION: Demonstrates how to render blade templates to strings using the view factory. Shows examples of both simple rendering and passing variables to the template.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/views.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, $view is of type `Illuminate\\Contracts\\View\\Factory`\n$renderedString = $view->make('acme.hello-world::greeting')->render();\n\n// You can also pass variables to the view:\n$renderedString = $view->make('acme.hello-world::greeting', ['varName' => true])->render();\n```\n\n----------------------------------------\n\nTITLE: Using Translator in JavaScript for Flarum Extensions\nDESCRIPTION: Shows how to use the app.translator.trans() method to reference a translation in JavaScript code for a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('acme-hello-world', function() {\n  alert(app.translator.trans('acme-hello-world.alert.hello_text'));\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Promise Handling in Flarum for Mithril 2.0\nDESCRIPTION: Demonstrates the transition from using m.deferred to native promises in Flarum extensions for Mithril 2.0 compatibility.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\nconst deferred = m.deferred();\n\napp.store.find('posts').then(result => deferred.resolve(result));\n\nreturn deferred.promise;\n\n// Mithril 2\nreturn app.store.find('posts');\n```\n\n----------------------------------------\n\nTITLE: Registering Console Commands in Flarum\nDESCRIPTION: Example of registering custom console commands using the Console extender in extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/console.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Console\\CustomCommand;\n\nreturn [\n  // Other extenders\n  (new Extend\\Console())->command(CustomCommand::class)\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Frontend Imports\nDESCRIPTION: JavaScript configuration for webpack to allow importing from other Flarum extensions in the frontend code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('flarum-webpack-config')({\n    // Fornire gli ID di estensione di tutte le estensioni da cui la tua estensione verrà importata.\n    // Fai questo sia per le dipendenze complete che opzionali.\n    useExtensions: ['flarum-tags']\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Multiple Methods Example\nDESCRIPTION: Shows how to extend multiple methods simultaneously using the extend utility.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nextend(IndexPage.prototype, ['oncreate', 'onupdate'], () => { /* your logic */ });\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Route Resolver for Discussion Pages in Flarum\nDESCRIPTION: Shows the implementation of a custom route resolver for discussion pages in Flarum, handling scroll behavior and key generation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/frontend-pages.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport DefaultResolver from '../../common/resolvers/DefaultResolver';\n\n/**\n * This isn't exported as it is a temporary measure.\n * A more robust system will be implemented alongside UTF-8 support in beta 15.\n */\nfunction getDiscussionIdFromSlug(slug: string | undefined) {\n  if (!slug) return;\n  return slug.split('-')[0];\n}\n\n/**\n * A custom route resolver for DiscussionPage that generates the same key to all posts\n * on the same discussion. It triggers a scroll when going from one post to another\n * in the same discussion.\n */\nexport default class DiscussionPageResolver extends DefaultResolver {\n  static scrollToPostNumber: number | null = null;\n\n  makeKey() {\n    const params = { ...m.route.param() };\n    if ('near' in params) {\n      delete params.near;\n    }\n    params.id = getDiscussionIdFromSlug(params.id);\n    return this.routeName.replace('.near', '') + JSON.stringify(params);\n  }\n\n  onmatch(args, requestedPath, route) {\n    if (route.includes('/d/:id') && getDiscussionIdFromSlug(args.id) === getDiscussionIdFromSlug(m.route.param('id'))) {\n      DiscussionPageResolver.scrollToPostNumber = parseInt(args.near);\n    }\n\n    return super.onmatch(args, requestedPath, route);\n  }\n\n  render(vnode) {\n    if (DiscussionPageResolver.scrollToPostNumber !== null) {\n      const number = DiscussionPageResolver.scrollToPostNumber;\n      // Scroll after a timeout to avoid clashes with the render.\n      setTimeout(() => app.current.get('stream').goToNumber(number));\n      DiscussionPageResolver.scrollToPostNumber = null;\n    }\n\n    return super.render(vnode);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing attrs() method with elementAttrs()\nDESCRIPTION: Demonstrates the change from using attrs() method to elementAttrs() for providing attributes to the top-level child vnode in a component's view.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends Component {\n  view() {\n    return <div {...this.elementAttrs()}><p>Hello World!</p></div>;\n  }\n\n  elementAttrs() {\n    return {\n      className: 'SomeClass',\n      onclick: () => console.log('click'),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using New Error Handling Classes in PHP\nDESCRIPTION: Example of using the new error handling classes introduced in Flarum Beta 10. These classes are part of the Flarum\\Foundation\\ErrorHandling namespace and include Registry, HttpFormatter, and Reporter for managing exceptions and errors.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b10.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Foundation\\ErrorHandling\\Registry;\nuse Flarum\\Foundation\\ErrorHandling\\HttpFormatter;\nuse Flarum\\Foundation\\ErrorHandling\\Reporter;\n\n// Example usage would go here\n```\n\n----------------------------------------\n\nTITLE: Implementing KnownError Interface in PHP\nDESCRIPTION: Demonstrates how to implement the new Flarum\\Foundation\\KnownError interface for custom exception classes. This interface exposes a 'type' that is used to render specific error pages or messages.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b10.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Foundation\\KnownError;\n\nclass CustomException extends Exception implements KnownError\n{\n    public function getType(): string\n    {\n        return 'custom_error_type';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pluralized Translations with ICU MessageFormat in YAML\nDESCRIPTION: Shows how to create translations that handle plural forms using ICU MessageFormat syntax in YAML configuration files.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nchoose_primary_placeholder: \"{count, plural, one {Choose a primary tag} other {Choose {count} primary tags}}\"\n```\n\n----------------------------------------\n\nTITLE: Using the Tooltip Component in React/JSX\nDESCRIPTION: Example of implementing the new Tooltip component which replaces direct jQuery tooltip creation. This provides a more framework-independent way to add tooltips to elements.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Tooltip text=\"You wish!\">\n  <button>\n    Click for free money!\n  </button>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Checking for Optional Extension in Backend PHP\nDESCRIPTION: PHP class example showing how to inject and use the ExtensionManager to check if an optional extension is enabled in the backend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extension\\ExtensionManager;\n\nclass SomeClass {\n    public function __construct(ExtensionManager $extensions)\n    {\n        $this->extensions = $extensions;\n    }\n\n    public function someMethod()\n    {\n        if ($this->extensions->isEnabled('some-extension-id')) {\n            // do something.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining First-Level Translation Keys in YAML\nDESCRIPTION: This snippet outlines the definition of first-level translation keys for Flarum core and validation translations in a YAML format. Dependencies include the Flarum framework. The expected input is a YAML-formatted list of keys, and the output is structured translation references.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncore:        # Translations used by the Flarum core\nvalidation:  # Translations used by Laravel's validator\n```\n\n----------------------------------------\n\nTITLE: Loading CSS in Flarum Extension (PHP)\nDESCRIPTION: This snippet demonstrates how to use the Frontend extender to load both JavaScript and CSS files into Flarum's frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less')\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Extension Page for Flarum Admin Dashboard\nDESCRIPTION: Shows how to create a custom extension page by extending the ExtensionPage component. This allows for more complex settings or custom UI for the extension in the admin dashboard.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/admin.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport ExtensionPage from 'flarum/admin/components/ExtensionPage';\n\nexport default class StarPage extends ExtensionPage {\n  content() {\n    return (\n      <h1>Hello from the settings section!</h1>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Console Commands in Flarum Extensions\nDESCRIPTION: Example of testing custom console commands using Flarum's ConsoleTestCase class, showing command execution and output validation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Tests\\integration\\ConsoleTestCase;\n\nclass ConsoleTest extends ConsoleTestCase\n{\n    /**\n     * @test\n     */\n    public function command_works()\n    {\n        $input = [\n            'command' => 'some:command',  // The command name, equivalent of `php flarum some:command`\n            'foo' => 'bar',  // arguments\n            '--lorem' => 'ipsum'  // options\n        ];\n\n        $this->assertEquals('Some Output.', $this->runCommand($input));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Translation Key Access\nDESCRIPTION: Shows how to reference a translation key in JavaScript code\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/i18n.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'acme-hello-world.alert.hello_text'\n```\n\n----------------------------------------\n\nTITLE: Redraw API Changes in Mithril 2.0\nDESCRIPTION: Illustrates the updated methods for controlling component redraws and preventing automatic redrawing in Mithril 2.0\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Mithril 0.2\n<button onclick={() => {\n  console.log(\"Hello world\");\n  m.redraw.strategy('none');\n}>\n  Click Me!\n</button>\n\n// Mithril 2\n<button onclick={e => {\n  console.log(\"Hello world\");\n  e.redraw = false;\n}>\n  Click Me!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Special Translation Key Namespaces in YAML\nDESCRIPTION: Illustrates special namespaces for translations that require special handling, including referenced translations and default group names.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nref:         # Translations referenced by more than one key.\ngroup:       # Translations used as default group names.\n```\n\n----------------------------------------\n\nTITLE: Using Command to Publish Extension Assets in Flarum\nDESCRIPTION: Command to publish extension assets from the extension's assets directory to Flarum's public assets directory or other configured storage location.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/assets.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum assets:publish\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Models with TypeScript\nDESCRIPTION: Shows how to add attributes and relationships to existing models using the Model extender in TypeScript.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n  new Extend.Model(Discussion)\n    .attribute<string>('slug')\n    .hasOne<User>('user')\n    .hasMany<Post>('posts')\n```\n\n----------------------------------------\n\nTITLE: Checking for Optional Dependencies in PHP\nDESCRIPTION: Demonstrates how to detect whether an optional dependency extension is enabled in the backend using the ExtensionManager class.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extension\\ExtensionManager;\n\nclass SomeClass {\n    public function __construct(ExtensionManager $extensions)\n    {\n        $this->extensions = $extensions;\n    }\n\n    public function someMethod()\n    {\n        if ($this->extensions->isEnabled('some-extension-id')) {\n            // do something.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Resources in JavaScript\nDESCRIPTION: Shows how to save data and relationships through the API using the save method on a model instance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n\nuser.save({\n  relationships: {\n    groups: [\n      store.getById('groups', 1),\n      store.getById('groups', 2)\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Pluralizable Translations in YAML\nDESCRIPTION: Example YAML code showing how to structure translation keys for text that may need pluralization in other languages. These keys from the Mentions extension allow for plural forms even when English doesn't require different forms for the verb 'replied'.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/i18n.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nmentioned_by_text: \"{users} replied to this.\"       # Can be pluralized ...\nmentioned_by_self_text: \"{users} replied to this.\"  # Can be pluralized ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Workflow for Flarum Extension\nDESCRIPTION: YAML configuration for setting up a frontend workflow in a Flarum extension. It includes various parameters for build, formatting, and testing processes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/github-actions.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Frontend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_frontend.yml@main\n    with:\n      enable_bundlewatch: false\n      enable_prettier: true\n      enable_typescript: false\n\n      frontend_directory: ./js\n      backend_directory: .\n      js_package_manager: yarn\n      main_git_branch: main\n\n    secrets:\n      bundlewatch_github_token: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Testing Console Commands in Flarum\nDESCRIPTION: Example of testing custom console commands in Flarum using ConsoleTestCase with command input handling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Tests\\integration\\ConsoleTestCase;\n\nclass ConsoleTest extends ConsoleTestCase\n{\n    /**\n     * @test\n     */\n    public function command_works()\n    {\n        $input = [\n            'command' => 'some:command',\n            'foo' => 'bar',\n            '--lorem' => 'ipsum'\n        ];\n\n        $this->assertEquals('Some Output.', $this->runCommand($input));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating from affixSidebar Util to AffixedSidebar Component\nDESCRIPTION: This code snippet displays the transition from using the affixSidebar util to wrapping sidebar code in an AffixedSidebar component, which provides a structured way to implement sidebar functionality within the Flarum framework.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nclass OldWay extends Component {\n  view() {\n    return <div>\n      <div className=\"container\">\n        <div className=\"sideNavContainer\">\n          <nav className=\"sideNav\" config={affixSidebar}>\n            <p>Affixed Sidebar</p>\n          </nav>\n          <div className=\"sideNavOffset\">Actual Page Content</div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n\nclass NewWay extends Component {\n  view() {\n    return <div>\n      <div className=\"container\">\n        <div className=\"sideNavContainer\">\n          <AffixedSidebar>\n            <nav className=\"sideNav\">\n              <p>Affixed Sidebar</p>\n            </nav>\n          </AffixedSidebar>\n          <div className=\"sideNavOffset\">Actual Page Content</div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Classes from Other Extensions in PHP\nDESCRIPTION: Example of importing and using a class from another Flarum extension in PHP backend code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Tags\\Tag;\n\nclass SomeClass\n{\n    public function someMethod()\n    {\n        return new Tag();  // This is not the correct way to instantiate models, it's just here for example of importing.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Policy Registration Example\nDESCRIPTION: Example of registering both model-specific and global policies using Flarum's Policy extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/authorization.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Tags\\Tag;\nuse YourNamespace\\Access;\n\nreturn [\n  // Other extenders\n  (new Extend\\Policy())\n    ->modelPolicy(Tag::class, Access\\TagPolicy::class)\n    ->globalPolicy(Access\\GlobalPolicy::class),\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Flarum Models with CLI\nDESCRIPTION: Using the Flarum CLI to automatically create backend and frontend models.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend model\n$ flarum-cli make frontend model\n```\n\n----------------------------------------\n\nTITLE: Registering Notification Type in Flarum\nDESCRIPTION: Example of registering a new notification type using Flarum's Notification extender with configuration for alerts and emails.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Api\\Serializer\\BasicDiscussionSerializer;\nuse Flarum\\Extend\nuse Flarum\\Subscriptions\\Notification\\NewPostBlueprint;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->type(NewPostBlueprint::class, BasicDiscussionSerializer::class, ['alert', 'email']),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Console Commands in Flarum\nDESCRIPTION: This PHP snippet shows how to register custom console commands using the Flarum\\Extend\\Console extender in an extension's extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/console.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Console\\CustomCommand;\n\nreturn [\n  // Other extenders\n  (new Extend\\Console())->command(CustomCommand::class)\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Frontend Translations in JavaScript for Flarum 1.0\nDESCRIPTION: Demonstrates how to update frontend translation calls from using transChoice to the new trans method with ICU MessageFormat.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Old method\napp.translator.transChoice('some-translation', guestCount, {host: hostName});\n\n// New method\napp.translator.trans('some-translation', {host: hostName, guestCount });\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Page as Homepage Option in Flarum\nDESCRIPTION: Code snippet showing how to extend Flarum's BasicsPage to add a custom page as an option for the forum homepage, using the Tags extension as an example.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend-pages.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport BasicsPage from 'flarum/common/components/BasicsPage';\n\nexport default function() {\n  extend(BasicsPage.prototype, 'homePageItems', items => {\n    items.add('tags', {\n      path: '/tags',\n      label: app.translator.trans('flarum-tags.admin.basics.tags_label')\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing Translations in YAML for Flarum Localization\nDESCRIPTION: Demonstrates how to reuse translations in Flarum's YAML locale files using key references. It shows how to reference translations across different contexts and namespaces.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => core.ref.log_in\n\n    log_in:\n      submit_button: => core.ref.log_in\n      title: => core.ref.log_in\n\n  ref:\n    log_in: Log In\n```\n\n----------------------------------------\n\nTITLE: Defining a Middleware Class in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to create a basic middleware class in PHP that implements the MiddlewareInterface. It shows the structure of the process method where request handling logic is implemented.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/middleware.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass YourMiddleware implements MiddlewareInterface {\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // Logic to run before the request is processed and later middleware is called.\n        $response = $handler->handle($request);\n        // Logic to run after the request is processed.\n        return $response\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis\nDESCRIPTION: Commands for running PHPStan analysis and clearing the cache\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer analyse:phpstan\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer clear-cache:phpstan && composer analyse:phpstan\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Autoload for Local Extenders\nDESCRIPTION: Configuration block for composer.json to enable autoloading of custom classes in the app directory using PSR-4 standard. This allows creation of PHP files in an app subdirectory using the App namespace.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extenders.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"autoload\": {\n    \"psr-4\": {\n        \"App\\\\\": \"app/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Backend Translations in PHP\nDESCRIPTION: Changes required for backend translations, moving from transChoice to trans method and adjusting argument passing without curly braces.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Old code\n$translator->transChoice('some-translation', $guestCount, ['{host}' => $hostName]);\n\n// New code\n$translator->trans('some-translation', ['host' => $hostName, 'guestCount' => $guestCount]);\n```\n\n----------------------------------------\n\nTITLE: Setting Page Titles in Flarum Frontend Pages\nDESCRIPTION: Examples showing how to set page titles for custom pages, both for static titles and titles based on dynamically loaded data. Uses the app.setTitle() and app.setTitleCount() methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/frontend-pages.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Page from 'flarum/common/components/Page';\n\n\nexport default class CustomPage extends Page {\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    app.setTitle(\"Cool Page\");\n    app.setTitleCount(0);\n  }\n\n  view() {\n    // ...\n  }\n}\n\nexport default class CustomPageLoadsData extends Page {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    app.store.find(\"users\", 1).then(user => {\n      app.setTitle(user.displayName());\n      app.setTitleCount(0);\n    })\n  }\n\n  view() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Optional Dependencies in Frontend JavaScript\nDESCRIPTION: JavaScript code snippet demonstrating how to check if an optional dependency extension is enabled in the frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif ('some-extension-id' in flarum.extensions) {\n    // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Extension Imports\nDESCRIPTION: This JavaScript snippet configures webpack to allow imports from specific Flarum extensions. It specifies the extension IDs for both full and optional dependencies to be used for imports in the frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = require('flarum-webpack-config')({\n    // Provide the extension IDs of all extensions from which your extension will be importing.\n    // Do this for both full and optional dependencies.\n    useExtensions: ['flarum-tags']\n});\n```\n\n----------------------------------------\n\nTITLE: Creating CLI Model Commands in Flarum\nDESCRIPTION: Commands to automatically generate frontend and backend models using Flarum CLI\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend model\n$ flarum-cli make frontend model\n```\n\n----------------------------------------\n\nTITLE: Updated Preference Saving in Flarum\nDESCRIPTION: This code demonstrates the transition from using the preferenceSaver method to directly saving preferences in Flarum's SettingsPage component. This change is necessary to avoid storing component instances in Mithril 2.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// Old way\nSwitch.component({\n  children: app.translator.trans('core.forum.settings.privacy_disclose_online_label'),\n  state: this.user.preferences().discloseOnline,\n  onchange: (value, component) => {\n    this.user.pushAttributes({ lastSeenAt: null });\n    this.preferenceSaver('discloseOnline')(value, component);\n  },\n})\n\n// Without preferenceSaver\nSwitch.component({\n  children: app.translator.trans('core.forum.settings.privacy_disclose_online_label'),\n  state: this.user.preferences().discloseOnline,\n  onchange: (value) => {\n    this.discloseOnlineLoading = true;\n\n    this.user.savePreferences({ discloseOnline: value }).then(() => {\n      this.discloseOnlineLoading = false;\n      m.redraw();\n    });\n  },\n  loading: this.discloseOnlineLoading,\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Storage Drivers in Flarum\nDESCRIPTION: This snippet demonstrates how to register a custom storage driver for Flarum's filesystem. It shows the use of the Filesystem extender to register an 'aws-with-cdn' driver that implements the DriverInterface.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/filesystem.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Filesystem)\n        ->driver('aws-with-cdn', AwsWithCdnDriver::class);\n```\n\n----------------------------------------\n\nTITLE: Using Flarum CLI to Generate Console Command\nDESCRIPTION: CLI command to automatically generate and register a new console command in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/console.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend command\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on Debian/Ubuntu\nDESCRIPTION: Commands to update package lists and install cron on Debian and Ubuntu based systems.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/scheduler.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install cron\n```\n\n----------------------------------------\n\nTITLE: PHPStan Configuration for Flarum Extensions\nDESCRIPTION: A sample phpstan.neon configuration file that extends the Flarum PHPStan configuration, sets the analysis level, defines paths to check, and configures other analysis parameters.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_2\n\nLANGUAGE: neon\nCODE:\n```\nincludes:\n  - vendor/flarum/phpstan/extension.neon\n\nparameters:\n  # The level will be increased in Flarum 2.0\n  level: 5\n  paths:\n    - src\n    - extend.php\n  excludePaths:\n    - *.blade.php\n  checkMissingIterableValueType: false\n  databaseMigrationsPath: ['migrations']\n```\n\n----------------------------------------\n\nTITLE: Extending Split Component Class in TypeScript\nDESCRIPTION: Demonstrates how to extend a split component class, ensuring that the base class is loaded before loading the custom component.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/code-splitting.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst PrivateDiscussionComposer = await app.composer  \n  .load(() => import('flarum/forum/components/DiscussionComposer').then(async () => {  \n      return await import('./discussions/PrivateDiscussionComposer');  \n  }), {  \n    user: app.session.user,  \n    recipients: recipients,  \n    recipientUsers: recipients,  \n  });\n  \napp.composer.show();\n```\n\n----------------------------------------\n\nTITLE: Reusing Translations with Key References in YAML\nDESCRIPTION: Demonstrates how to reuse translations in Flarum using key references across different contexts and files. It shows the proper structure and namespacing for reusable translations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => core.ref.log_in\n\n    log_in:\n      submit_button: => core.ref.log_in\n      title: => core.ref.log_in\n\n  ref:\n    log_in: Log In\n```\n\n----------------------------------------\n\nTITLE: Specifying Composer Dependencies in Extension\nDESCRIPTION: This PHP snippet illustrates how to specify dependencies for Flarum extensions via the `composer.json` file, ensuring that all required components are present before enabling an extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my/extension\",\n  \"description\": \"Cool New Extension\",\n  \"type\": \"flarum-extension\",\n  \"license\": \"MIT\",\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.14\",\n    \"flarum/tags\": \"^0.1.0-beta.14\",  // Will mark tags as a dependency\n    \"flarum/mentions\": \"^0.1.0-beta.14\"  // Will mark mentions as a dependency\n  }\n  // other config\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Listener Class in PHP\nDESCRIPTION: Example of a class-based event listener with dependency injection for the Deleted event.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass PostDeletedListener\n{\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    public function handle(Deleted $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using withAttr for Simplified Form Processing in Flarum\nDESCRIPTION: Shows how to use the withAttr utility in Flarum for simplified form processing. It demonstrates its usage with both streams and custom callables.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/forms.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\nimport withAttr from 'flarum/common/utils/withAttr';\n\nconst value = Stream();\n\n// With a stream\n<input type=\"text\" value={value()} oninput={withAttr('value', value)}></input>\n\n// With any callable\n<input type=\"text\" value={value()} oninput={withAttr('value', (currValue) => {\n  // Some custom logic here\n})}></input>\n```\n\n----------------------------------------\n\nTITLE: Custom Event Class Definition\nDESCRIPTION: Example showing how to define a custom event class for the Post Deleted event including required properties and constructor.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Post\\Event;\n\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass Deleted\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var User\n     */\n    public $actor;\n\n    /**\n     * @param Post $post\n     * @param User $user\n     */\n    public function __construct(Post $post, User $actor = null)\n    {\n        $this->post = $post;\n        $this->actor = $actor;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Tags to Flarum Translations (JSX)\nDESCRIPTION: Illustrates how to add HTML tags to Flarum translations in JSX. This example is from the Edit Group modal in the admin interface.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"helpText\">\n  {app.translator.trans('icon_text', {\n    a: <a href=\"https://fortawesome.github.io/Font-Awesome/icons/\" tabindex=\"-1\"/>\n  })}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updated Preference Saving in JavaScript\nDESCRIPTION: The new way to save preferences after the removal of the preferenceSaver method. Preferences should now be saved directly, avoiding the storage of component instances.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Old way\nSwitch.component({\n  children: app.translator.trans('core.forum.settings.privacy_disclose_online_label'),\n  state: this.user.preferences().discloseOnline,\n  onchange: (value, component) => {\n    this.user.pushAttributes({ lastSeenAt: null });\n    this.preferenceSaver('discloseOnline')(value, component);\n  },\n})\n\n// Without preferenceSaver\nSwitch.component({\n  children: app.translator.trans('core.forum.settings.privacy_disclose_online_label'),\n  state: this.user.preferences().discloseOnline,\n  onchange: (value) => {\n    this.discloseOnlineLoading = true;\n\n    this.user.savePreferences({ discloseOnline: value }).then(() => {\n      this.discloseOnlineLoading = false;\n      m.redraw();\n    });\n  },\n  loading: this.discloseOnlineLoading,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Special Handling Namespaces in YAML for Flarum Translations\nDESCRIPTION: This snippet shows two special namespace keys used in Flarum translations. The 'ref' namespace is for translations referenced by more than one key, while 'group' is for default group name translations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nref:         # Translations referenced by more than one key.\ngroup:       # Translations used as default group names.\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New Mithril Component Lifecycles in JavaScript\nDESCRIPTION: This snippet demonstrates the differences between Mithril 0.2 and Mithril 2.0 component lifecycles. It shows how to migrate from the old 'init' and 'config' methods to the new lifecycle hooks like 'oninit', 'oncreate', 'onbeforeupdate', etc.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass OldMithrilComponent extends Component {\n  init() {\n    console.log('Code to run when component instance created, but before attached to the DOM.');\n  }\n\n  config(element, isInitialized) {\n    console.log('Code to run on every redraw AND when the element is first attached');\n\n    if (isInitialized) return;\n\n    console.log('Code to execute only once when components are first created and attached to the DOM');\n\n    context.onunload = () => {\n      console.log('Code to run when the component is removed from the DOM');\n    }\n  }\n\n  view() {\n    if (dontRedraw()) return { subtree: 'retain' };\n\n    return <p>Hello World!</p>;\n  }\n}\n\nclass NewMithrilComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    console.log('Code to run when component instance created, but before attached to the DOM.');\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    console.log('Code to run when components are first created and attached to the DOM');\n  }\n\n  onbeforeupdate(vnode, oldVnode) {\n    super.onbeforeupdate(vnode);\n\n    console.log('Code to run BEFORE diffing / redrawing components on every redraw');\n\n    if (dontRedraw()) return false;\n  }\n\n  onupdate(vnode) {\n    console.log('Code to run on every redraw AFTER the DOM is updated.');\n  }\n\n  onbeforeremove(vnode) {\n    return Promise.resolve();\n  }\n\n  onremove(vnode) {\n      console.log('Code to run when the component is removed from the DOM');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Filter for User Country in PHP\nDESCRIPTION: This snippet defines a custom Filter class to enable filtering users by country. It implements the FilterInterface and provides logic for filtering based on a 'country' query parameter.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterInterface;\nuse Flarum\\Filter\\FilterState;\n\nclass CountryFilter implements FilterInterface\n{\n    public function getFilterKey(): string\n    {\n        return 'country';\n    }\n\n    public function filter(FilterState $filterState, string $filterValue, bool $negate)\n    {\n        $country = trim($filterValue, '\"');\n\n        $filterState->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preferred pattern: Passing Data via Attributes in Mithril 2\nDESCRIPTION: The recommended pattern for Mithril 2 where data needed by child components is passed through attributes instead of storing component instances. This aligns with Mithril's redrawing optimizations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nclass ChildComponent extends Component {\n  view() {\n    return <p>{this.attrs.counter}</p>;\n  }\n}\n\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.counter += 1}></button>\n        <ChildComponent counter={this.counter}></ChildComponent>\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Alert Opening in Mithril 0.2 (Old Pattern)\nDESCRIPTION: The previous way of creating alerts in Flarum with Mithril 0.2, passing a component instance to the show method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\napp.alerts.show(new Alert(type: 'success', children: 'Hello, this is a success alert!'));\n```\n\n----------------------------------------\n\nTITLE: Default Permissions Migration\nDESCRIPTION: Adding default permissions for user groups using a data migration in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\nreturn Migration::addPermissions([\n    'some.permission' => Group::MODERATOR_ID\n]);\n```\n\n----------------------------------------\n\nTITLE: Registering Frontend Model with Store\nDESCRIPTION: Demonstrates how to register a new model with the frontend store using the Store extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Store()\n    .add('tags', Tag),\n];\n```\n\n----------------------------------------\n\nTITLE: Reusing Translations in Flarum YAML Locale Files\nDESCRIPTION: Demonstrates how to reuse translations in Flarum using key references across different contexts. It shows the use of the 'ref' namespace for organizing reusable translations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => core.ref.log_in\n\n    log_in:\n      submit_button: => core.ref.log_in\n      title: => core.ref.log_in\n\n  ref:\n    log_in: Log In\n```\n\n----------------------------------------\n\nTITLE: Using Model Casting for DateTime Attributes in PHP\nDESCRIPTION: Example of the new recommended approach to define date attributes on models in Flarum 1.7, replacing the deprecated dateAttribute method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-1_x.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Deprecated approach\nModel::dateAttribute($attribute);\n\n// New approach\nModel::cast($attribute, 'datetime');\n```\n\n----------------------------------------\n\nTITLE: Importing Extension Exports in Frontend\nDESCRIPTION: JavaScript code showing how to import exported functionality from other Flarum extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst allThingsExportedBySomeExtension = require('@flarum-tags');\n```\n\n----------------------------------------\n\nTITLE: Listening to Events with Extender in Flarum\nDESCRIPTION: This code demonstrates how to listen to a specific event (Deleted) using the Event extender in Flarum. It attaches a callback function to the event, which will be executed when the event is triggered.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->listen(Deleted::class, function($event) {\n            // do something here\n        })\n        ->listen(Deleted::class, PostDeletedListener::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Discussion via Flarum REST API\nDESCRIPTION: Initiates a new discussion on Flarum by sending a POST request to /api/discussions. The request includes discussion attributes like title and content, as well as relationships like tags, which are specified as JSON data.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/rest-api.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"data\":{\"type\": \"discussions\", \"attributes\": {\"title\": \"Lorem Ipsum\", \"content\": \"Hello World\"}, \"relationships\": {\"tags\": {\"data\": [{\"type\": \"tags\", \"id\": \"1\"}]}}}}\n```\n\n----------------------------------------\n\nTITLE: Registering New Models with Flarum's Store\nDESCRIPTION: Demonstrates how to register a newly created model with Flarum's store using the Store extender, making it available for use with API resources.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Store()\n    .add('tags', Tag),\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Notification Type in Flarum\nDESCRIPTION: Example showing how to register a new notification type using the Notification extender.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/notifications.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Flarum\\Extend\nuse Flarum\\Subscriptions\\Notification\\NewPostBlueprint;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->type(NewPostBlueprint::class, ['alert', 'email']),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: NPM Commands for Transpilation\nDESCRIPTION: This snippet shows the commands used to transpile JavaScript code. `npm install` installs the dependencies defined in the `package.json` file. `npm run dev` compiles the JavaScript code in development mode, watching for changes and automatically recompiling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: HTML-style Tags in Translation for Flexible Text Formatting\nDESCRIPTION: Shows how to implement HTML-style tags within translations to allow for flexible text formatting across different languages. This approach enables localizers to rearrange sentence structure while maintaining link functionality.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsign_up_text: \"Non hai un account? <a>Registrati</a>\"\n```\n\n----------------------------------------\n\nTITLE: Basic Translation in JavaScript\nDESCRIPTION: This snippet demonstrates the use of the Flarum JavaScript framework to display a simple alert message with a translated text. It uses the `app.translator.trans()` method to fetch the translation, requiring the proper namespaced translation to exist in the locale file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('acme-hello-world', function() {\n  alert(app.translator.trans('acme-hello-world.alert.hello_text'));\n});\n```\n\n----------------------------------------\n\nTITLE: Running Flarum Command Basic Syntax\nDESCRIPTION: Basic syntax for executing Flarum console commands through PHP CLI.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/console.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum [command]\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Filter and Mutator in Flarum\nDESCRIPTION: This PHP code demonstrates how to register a custom filter and filter mutator using Flarum's extender system. It adds the CountryFilter and OnlySameCountryFilterMutator to the UserFilterer.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\Filter(UserFilterer::class))\n    ->addFilter(CountryFilter::class)\n    ->addFilterMutator(OnlySameCountryFilterMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: Adding GitHub Actions with Flarum CLI\nDESCRIPTION: Command to use Flarum CLI for automatically adding and updating GitHub Actions workflows in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra githubActions\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Service Provider in Flarum's extend.php\nDESCRIPTION: This snippet shows how to register a custom Service Provider in Flarum's extend.php file using the ServiceProvider extender. This allows the custom Service Provider to be integrated into Flarum's boot process.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/service-provider.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    // Other extenders\n    (new Extend\\ServiceProvider())\n        ->register(CustomServiceProvider::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Flarum Integration Test Case\nDESCRIPTION: Demonstrates how to set up a basic integration test case for a Flarum extension, including setting custom values, enabling extensions, preparing the database, and adding extenders.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    use RetrievesAuthorizedUsers;\n\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        $this->setting('my.custom.setting', true);\n\n        // Let's assume our extension depends on tags.\n        // Note that tags will need to be in your extension's composer.json's `require-dev`.\n        // Also, make sure you include the ID of the extension currently being tested, unless you're\n        // testing the baseline without your extension.\n        $this->extension('flarum-tags', 'my-cool-extension');\n\n        // Note that this input isn't validated: make sure you're populating with valid, representative data.\n        $this->prepareDatabase([\n            'users' => [\n                $this->normalUser() // Available for convenience.\n            ],\n            'discussions' => [\n                ['id' => 1, 'title' => 'some title', 'created_at' => Carbon::now(), 'last_posted_at' => Carbon::now(), 'user_id' => 1, 'first_post_id' => 1, 'comment_count' => 1]\n            ],\n            'posts' => [\n                ['id' => 1, 'number' => 1, 'discussion_id' => 1, 'created_at' => Carbon::now(), 'user_id' => 1, 'type' => 'comment', 'content' => '<t><p>something</p></t>']\n            ]\n        ]);\n\n        // Most test cases won't need to test extenders, but if you want to, you can.\n        $this->extend((new CoolExtensionExtender)->doSomething('hello world'));\n    }\n\n    /**\n     * @test\n     */\n    public function some_phpunit_test_case()\n    {\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Console Commands in PHP\nDESCRIPTION: Example of registering custom console commands using the Flarum\\Extend\\Console extender in the extension's extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/console.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Console\\CustomCommand;\n\nreturn [\n  // Other extenders\n  (new Extend\\Console())->command(CustomCommand::class)\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan Package for Flarum Extension\nDESCRIPTION: Command to require the Flarum PHPStan package as a development dependency for static code analysis.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/phpstan:^1.0\n```\n\n----------------------------------------\n\nTITLE: Generating URLs in Flarum Using PHP\nDESCRIPTION: This PHP snippet utilizes Flarum's `UrlGenerator` to generate URLs based on defined routes. The `to` method selects a route collection and parameters can fill URI segments or be appended as query parameters.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$url = $this->url->to('forum')->route('acme.user', ['id' => 123, 'foo' => 'bar']);\n// http://yourforum.com/user/123?foo=bar\n```\n\n----------------------------------------\n\nTITLE: Running Flarum Console Commands in Bash\nDESCRIPTION: Basic syntax for executing Flarum console commands on the server. This requires SSH access to the server and navigation to the Flarum installation directory.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/console.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum [command]\n```\n\n----------------------------------------\n\nTITLE: Updated Translation Format for Flarum 2.0\nDESCRIPTION: The new format for translations in Flarum 2.0, using simple tag names as placeholders instead of HTML tags with attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmy_locale_key: \"You can read about a <basic_impl_link>basic queue</basic_impl_link> implementation or a <adv_impl_link>more advanced</adv_impl_link> one.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Frontend Testing\nDESCRIPTION: Shows the TypeScript configuration needed for frontend testing in Flarum extensions, including test file inclusion and type definitions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"include\": [\"tests/**/*\"],\n  \"files\": [\"../../../node_modules/@flarum/jest-config/shims.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Custom Page in Flarum\nDESCRIPTION: Demonstrates creating a simple custom page by extending the base Page component with a basic view method\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/frontend-pages.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport Page from 'flarum/common/components/Page';\n\n\nexport default class CustomPage extends Page {\n  view() {\n    return <p>Hello!</p>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Translation Key References Example in YAML\nDESCRIPTION: Demonstrates how to reuse translations across different contexts using Flarum's key reference system with proper namespacing in the ref directory.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/i18n.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => core.ref.log_in\n\n    log_in:\n      submit_button: => core.ref.log_in\n      title: => core.ref.log_in\n\n  ref:\n    log_in: Log In\n```\n\n----------------------------------------\n\nTITLE: Eager Loading API Controller Extension in PHP\nDESCRIPTION: Example showing how to use the ApiController extender to eager load relationships and solve N+1 query issues in Flarum API endpoints.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    (new Extend\\ApiController(FlarumController\\ListDiscussionsController::class))\n        ->addInclude(['tags', 'tags.state', 'tags.parent'])\n        ->load('tags'),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Core Translation Keys in YAML\nDESCRIPTION: This snippet shows how to define translation keys for the core and validation components in Flarum using YAML format. Each key represents a unique component, and they follow a structured indentation style typical for YAML files.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/i18n.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ncore:        # Translations used by the Flarum core\nvalidation:  # Translations used by Laravel's validator\n```\n\n----------------------------------------\n\nTITLE: Running Flarum Update Commands\nDESCRIPTION: Core commands needed to update Flarum installations using Composer, run migrations, and clear cache\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/update.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update --prefer-dist --no-plugins --no-dev -a --with-all-dependencies\nphp flarum migrate\nphp flarum cache:clear\n```\n\n----------------------------------------\n\nTITLE: Deprecated Method and New Requirements for Mail Driver Interface - PHP\nDESCRIPTION: This snippet outlines the changes required for implementing the 'Flarum\\Mail\\DriverInterface', noting that returning a plain array is deprecated and that methods 'validate()' and 'canSend()' must be implemented in the upcoming beta.13.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Implementing Visibility Scoper for Drafts in PHP\nDESCRIPTION: This snippet shows the implementation of a visibility scoper for drafts, which can be reused in different places or by other extensions. It includes the scoper class and its usage in the DraftResource.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nclass ScopeDraftVisibility\n{\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->where('user_id', $actor->id);\n    }\n}\n\nclass DraftResource extends Resource\\AbstractDatabaseResource\n{\n    ...\n\n    public function scope(Builder $query, OriginalContext $context): void\n    {\n        $query->whereVisibleTo($context->getActor());\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Asset URLs in Flarum (PHP)\nDESCRIPTION: This snippet demonstrates how Flarum serializes the URLs for logo and favicon assets in the ForumSerializer. It's recommended to use this approach for referencing asset URLs in extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/assets.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$attributes['logoUrl'] = $this->url->to('forum')->base().'/assets/'.$this->settings->get('logo_path');\n$attributes['faviconUrl'] = $this->url->to('forum')->base().'/assets/'.$this->settings->get('favicon_path');\n```\n\n----------------------------------------\n\nTITLE: Adding Default Settings in Flarum Migration\nDESCRIPTION: Shows how to use data migrations to specify default settings in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addSettings([\n    'foo' => 'bar',\n]);\n```\n\n----------------------------------------\n\nTITLE: Middleware Extender Usage in PHP\nDESCRIPTION: References the new PHP extender for managing middleware stacks in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b12.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nFlarum\\Extend\\Middleware\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Storage Driver in PHP\nDESCRIPTION: Example of registering a custom storage driver for AWS with CDN support using the Filesystem extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/filesystem.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Filesystem)\n        ->driver('aws-with-cdn', AwsWithCdnDriver::class);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flarum Development Environment with Git and Composer\nDESCRIPTION: Instructions for cloning the Flarum skeleton application, setting up a Composer path repository for the Flarum monorepo packages, and configuring the environment for development.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/contributing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/flarum/flarum.git\ncd flarum\n\n# Or, when you want to clone directly into the current directory\ngit clone https://github.com/flarum/flarum.git .\n# Note, the directory must be empty\n\n# Set up a Composer path repository for Flarum monorepo packages\ncomposer config repositories.0 path \"PATH_TO_MONOREPO/*/*\"\ngit clone https://github.com/<username>/framework.git PATH_TO_MONOREPO\n```\n\n----------------------------------------\n\nTITLE: Renaming Database Columns in Flarum\nDESCRIPTION: Example of renaming columns using Migration helper\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::renameColumns('users', ['from' => 'to']);\n```\n\n----------------------------------------\n\nTITLE: Checking Extension Availability in Frontend\nDESCRIPTION: JavaScript code showing how to check if an optional dependency extension is enabled in the frontend using the flarum.extensions global object.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif ('some-extension-id' in flarum.extensions) {\n    // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom API Throttlers in Flarum's extend.php\nDESCRIPTION: This code snippet shows how to add or remove custom API throttlers in Flarum's extend.php file. It demonstrates setting a new throttler and removing an existing one using the ThrottleApi extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/api-throttling.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    // Other extenders\n    (new Extend\\ThrottleApi())\n        ->set('throttleAll', function () {\n          return false;\n        })\n        ->remove('bypassThrottlingAttribute'),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPStan for Flarum Extensions\nDESCRIPTION: Sample PHPStan configuration file (phpstan.neon) that includes Flarum-specific extensions and settings for analyzing extension code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_2\n\nLANGUAGE: neon\nCODE:\n```\nincludes:\n  - vendor/flarum/phpstan/extension.neon\n\nparameters:\n  # The level will be increased in Flarum 2.0\n  level: 5\n  paths:\n    - src\n    - extend.php\n  excludePaths:\n    - *.blade.php\n  checkMissingIterableValueType: false\n  databaseMigrationsPath: ['migrations']\n```\n\n----------------------------------------\n\nTITLE: Using withAttr for Simplified Form Processing in Flarum (JSX)\nDESCRIPTION: This snippet shows how to use the withAttr utility for simplified form processing in Flarum. It demonstrates usage with both Streams and custom callables.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/forms.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\nimport withAttr from 'flarum/common/utils/withAttr';\n\nconst value = Stream();\n\n// With a stream\n<input type=\"text\" value={value()} oninput={withAttr('value', value)}></input>\n\n// With any callable\n<input type=\"text\" value={value()} oninput={withAttr('value', (currValue) => {\n  // Some custom logic here\n})}></input>\n```\n\n----------------------------------------\n\nTITLE: package.json Configuration\nDESCRIPTION: This snippet shows the configuration for `package.json`, which defines dependencies and scripts for building the Flarum extension's frontend. It includes dependencies like `flarum-webpack-config`, `webpack`, and `webpack-cli`, and dev dependencies like `flarum-tsconfig`. The scripts define commands for development (`dev`) and production (`build`) builds.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"private\": true,\n  \"name\": \"@acme/flarum-hello-world\",\n  \"dependencies\": {\n    \"flarum-webpack-config\": \"^1.0.0\",\n    \"webpack\": \"^4.0.0\",\n    \"webpack-cli\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"flarum-tsconfig\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"dev\": \"webpack --mode development --watch\",\n    \"build\": \"webpack --mode production\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from transChoice to ICU MessageFormat in Frontend JavaScript\nDESCRIPTION: Example showing how to update frontend code from using the deprecated transChoice method to the new trans method with ICU MessageFormat for pluralization.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.translator.transChoice('some-translation', guestCount, {host: hostName});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// This uses ES6 key-property shorthand notation. {guestCount: guestCount} is equivalent to {guestCount}\napp.translator.trans('some-translation', {host: hostName, guestCount });\n```\n\n----------------------------------------\n\nTITLE: Adding Google Link to Header using Mithril.js\nDESCRIPTION: Example of extending the HeaderPrimary component to add a new link item using Mithril.js and JSX syntax.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Tags in Translations JSX\nDESCRIPTION: Example of including HTML elements in translations using parameter mapping\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"helpText\">\n  {app.translator.trans('icon_text', {\n    a: <a href=\"https://fortawesome.github.io/Font-Awesome/icons/\" tabindex=\"-1\"/>\n  })}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Component Instance Storage in JavaScript\nDESCRIPTION: An example of how component instances were incorrectly stored before the Mithril upgrade. This approach is no longer recommended due to optimizations in Mithril's redrawing algorithms.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass ChildComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return <p>{this.counter}</p>;\n  }\n}\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.child = new ChildComponent();\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.child.counter += 1}></button>\n        {this.child.render()}\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Autorización en el Frontend de Flarum (PHP)\nDESCRIPTION: Ejemplos de cómo realizar comprobaciones de autorización en el frontend de Flarum utilizando métodos de la clase User. Incluye verificaciones de permisos, aserciones y comprobaciones de roles de administrador.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/authorization.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Comprueba si un usuario puede realizar una acción.\n// ADVERTENCIA: esto debe ser utilizado con precaución, ya que no\n// ejecuta el proceso de autorización, por lo que no tiene en cuenta las políticas.\n$canDoSomething = $actor->can('viewForum');\n\n// Comprueba si un usuario puede realizar una acción sobre un tema.\n// Sin embargo, es útil para implementar políticas personalizadas.\n$canDoSomething = $actor->can('reply', $discussion);\n\n// Lanza una PermissionDeniedException si un usuario no puede realizar una acción.\n$actpr->assertAdmin();\n\n// Comprueba si uno de los grupos del usuario tiene un permiso.\n$actor->assertCan('viewForum');\n$actor->assertCan('reply', $discussion);\n\n// Lanza una NotAuthenticatedException si el usuario no está conectado.\n$actor->assertRegistered();\n\n// Lanza una PermissionDeniedException si el usuario no es un administrador.\n$actorHasPermission = $actor->hasPermission(`viewForum`);\n```\n\n----------------------------------------\n\nTITLE: Updating Mithril Route Registration\nDESCRIPTION: Examples showing how to update route registration syntax from Mithril 0.2 to Mithril 2.0, including component instantiation changes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\napp.routes.new_page = { path: '/new', component: NewPage.component() }\n\n// Mithril 2.0\napp.routes.new_page = { path: '/new', component: NewPage }\n```\n\n----------------------------------------\n\nTITLE: Defining Route Helpers in JavaScript for Flarum\nDESCRIPTION: Demonstration of how to define a route helper method using the Routes extender in JavaScript for a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n  new Extend.Routes()\n   .add('acme.user', '/user/:id', <UsersPage />)\n   .helper('acmeUser', (user) => app.route('acme.user', { id: user.id() }))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lifecycle Hook Changes in Mithril Components\nDESCRIPTION: Comparison of Mithril 0.2 and Mithril 2.0 lifecycle hooks, showing how component initialization and lifecycle management have evolved\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nclass OldMithrilComponent extends Component {\n  init() {\n    console.log('Code to run when component instance created, but before attached to the DOM.');\n  }\n\n  config(element, isInitialized) {\n    console.log('Code to run on every redraw AND when the element is first attached');\n\n    if (isInitialized) return;\n\n    console.log('Code to execute only once when components are first created and attached to the DOM');\n\n    context.onunload = () => {\n      console.log('Code to run when the component is removed from the DOM');\n    }\n  }\n\n  view() {\n    if (dontRedraw()) return { subtree: 'retain' };\n\n    return <p>Hello World!</p>;\n  }\n}\n\nclass NewMithrilComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    console.log('Code to run when component instance created, but before attached to the DOM.');\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    console.log('Code to run when components are first created and attached to the DOM');\n  }\n\n  onbeforeupdate(vnode, oldVnode) {\n    super.onbeforeupdate(vnode);\n\n    console.log('Code to run BEFORE diffing / redrawing components on every redraw');\n\n    if (dontRedraw()) return false;\n  }\n\n  onupdate(vnode) {\n    console.log('Code to run on every redraw AFTER the DOM is updated.');\n  }\n\n  onbeforeremove(vnode) {\n    return Promise.resolve();\n  }\n\n  onremove(vnode) {\n      console.log('Code to run when the component is removed from the DOM');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Laravel Class Reference\nDESCRIPTION: Example showing changes in class references from Flarum's Application class to Laravel's Container class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nFlarum\\Foundation\\Application\n```\n\n----------------------------------------\n\nTITLE: Creating User\nDESCRIPTION: Shows an example of creating a new user using the `/api/users` endpoint, including username, email and password.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"{\n  \\\"data\\\": {\n    \\\"attributes\\\": {\n      \\\"username\\\": \\\"Flarum\\\",\n      \\\"email\\\": \\\"flarum@example.com\\\",\n      \\\"password\\\": \\\"correcthorsebatterystaple\\\"\n    }\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Registering Boolean Setting for Flarum Extension\nDESCRIPTION: Demonstrates how to register a boolean setting for a Flarum extension using the ExtensionData API. It includes setting key, label, help text, and type.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/admin.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('interstellar', function(app) {\n\n  app.extensionData\n    .for('acme-interstellar')\n    .registerSetting(\n      {\n        setting: 'acme-interstellar.coordinates',\n        label: app.translator.trans('acme-interstellar.admin.coordinates_label'),\n        help: app.translator.trans('acme-interstellar.admin.coordinates_help'),\n        type: 'boolean',\n      },\n      30\n    )\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Top-Level Translation Key Components in YAML\nDESCRIPTION: This snippet shows the top-level keys used in Flarum's translation system, indicating which component uses the translation. It includes core Flarum components and extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncore:        # Translations used by the Flarum core\nvalidation:  # Translations used by Laravel's validator\n```\n\n----------------------------------------\n\nTITLE: Generating Less Variables from Settings in PHP\nDESCRIPTION: Example of using the Settings extender to generate Less variables from setting values, a feature added in Flarum 1.2.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-1_x.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Settings)\n    ->serializeToForum('themePrimaryColor', 'theme_primary_color')\n    ->registerLessConfigVar('primary-color', 'theme_primary_color', function ($value) {\n        return $value ? $value : '#000';\n    })\n```\n\n----------------------------------------\n\nTITLE: Configuring composer.json for Flarum Locale\nDESCRIPTION: This snippet demonstrates the required `flarum-locale` object in `composer.json` to define the language code and title for a Flarum language pack.  This configuration is added within the `extra` section, alongside `flarum-extension`.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/language-packs.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"flarum-locale\": {\n  \"code\": \"en\",\n  \"title\": \"English\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from Frontend Store in JavaScript\nDESCRIPTION: Examples of retrieving data from the Flarum API using the frontend store\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// GET /api/discussions?sort=createdAt\napp.store.find('discussions', {sort: 'createdAt'}).then(console.log);\n\n// GET /api/discussions/123\napp.store.find('discussions', 123).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Component Children Property Examples\nDESCRIPTION: Shows different ways to handle child elements in components using both direct component calls and JSX syntax.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nButton.component({\n  className: 'Button Button--primary',\n  children: 'Button Text'\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nButton.component({\n  className: 'Button Button--primary'\n}, 'Button Text');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<Button className='Button Button--primary'>Button Text</Button>\n```\n\n----------------------------------------\n\nTITLE: Saving Model Resources\nDESCRIPTION: Examples of saving model data and relationships through the API.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/models.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n\nuser.save({\n  relationships: {\n    groups: [\n      store.getById('groups', 1),\n      store.getById('groups', 2)\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Google Link to Header Using Extend and Override (JSX)\nDESCRIPTION: Demonstrates how to use 'extend' and 'override' utilities to modify Flarum's header, adding a link to Google.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend, override } from 'flarum/common/extend';\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport CustomComponentClass from './components/CustomComponentClass';\n\n// Here, we add an item to the returned ItemList. We are using a custom component\n// as discussed above. We've also specified a priority as the third argument,\n// which will be used to order these items. Note that we don't need to return anything.\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add(\n    'google',\n    <CustomComponentClass>\n      <a href=\"https://google.com\">Google</a>\n    </CustomComponentClass>,\n    5\n  );\n});\n\n// Here, we conditionally use the original output of a method,\n// or create our own ItemList, and then add an item to it.\n// Note that we MUST return our custom output.\noverride(HeaderPrimary.prototype, 'items', function(original) {\n  let items;\n\n  if (someArbitraryCondition) {\n    items = original();\n  } else {\n    items = new ItemList();\n  }\n\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n\n  return items;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Top-Level Translation Key Namespaces in YAML\nDESCRIPTION: Demonstrates the standard top-level namespaces used for translations in Flarum's core and extensions. These namespaces indicate which component uses the translation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncore:        # Translations used by the Flarum core\nvalidation:  # Translations used by Laravel's validator\n```\n\n----------------------------------------\n\nTITLE: Text Element Translation Suffixes in YAML\nDESCRIPTION: This snippet provides suffixes for translation keys used for descriptive or informative text elements. Consistent naming aids translators in recognizing the context for texts like confirmations or tooltips and their proper localization in Flarum interfaces.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n_confirmation:  # Used for messages displayed to confirm an operation.\n_message:       # Used for messages that show the result of an operation.\n_text:          # Used for any text that is not a message, title, or tooltip.\n_title:         # Used for text displayed as the title of a page or modal.\n_tooltip:       # Used for text displayed when the user hovers over something.\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis for Flarum Extensions\nDESCRIPTION: Bash commands to run PHPStan analysis and clear its cache for a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer analyse:phpstan\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer clear-cache:phpstan && composer analyse:phpstan\n```\n\n----------------------------------------\n\nTITLE: Defining Button-Related Translation Suffixes in YAML\nDESCRIPTION: Lists suffixes used for GUI objects related to user operations, such as buttons, links, headings, labels, and placeholders.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n_button:        # Used for buttons (including dropdown menu items).\n_link:          # Used for links that are not shown graphically as buttons.\n_heading:       # Used for headings in tables and lists.\n_label:         # Used for the names of data fields, checkbox settings, etc.\n_placeholder:   # Used for placeholder text displayed in fields.\n```\n\n----------------------------------------\n\nTITLE: Structuring YAML Locale File for Flarum Extension\nDESCRIPTION: Shows the proper structure for a YAML locale file in a Flarum extension, including namespacing and nesting.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/i18n.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nacme-hello-world:                # Namespacing for the extension; unindented.\n  alert:                         # Namespacing for alerts; indented 2 spaces.\n    hello_text: \"Hello, world!\"  # Identifier/translation; indented 4 spaces.\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom API Throttler in PHP for Flarum\nDESCRIPTION: This code snippet demonstrates a custom API throttler for Flarum that limits post creation. It checks the route, user permissions, and recent post history to determine if throttling should be applied.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/api-throttling.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse DateTime;\nuse Flarum\\Post\\Post;\n\nfunction ($request) {\n    if (! in_array($request->getAttribute('routeName'), ['discussions.create', 'posts.create'])) {\n        return;\n    }\n\n    $actor = $request->getAttribute('actor');\n\n    if ($actor->can('postWithoutThrottle')) {\n        return false;\n    }\n\n    if (Post::where('user_id', $actor->id)->where('created_at', '>=', new DateTime('-10 seconds'))->exists()) {\n        return true;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPStan for Flarum Extension\nDESCRIPTION: NEON configuration file for PHPStan in a Flarum extension, specifying analysis level, paths, and other parameters.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_2\n\nLANGUAGE: neon\nCODE:\n```\nincludes:\n  - vendor/flarum/phpstan/extension.neon\n\nparameters:\n  # The level will be increased in Flarum 2.0\n  level: 5\n  paths:\n    - src\n    - extend.php\n  excludePaths:\n    - *.blade.php\n  checkMissingIterableValueType: false\n  databaseMigrationsPath: ['migrations']\n```\n\n----------------------------------------\n\nTITLE: Component Children Syntax Examples\nDESCRIPTION: Examples showing old and new ways of passing children to components using both direct component calls and JSX syntax.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nButton.component({\n  className: 'Button Button--primary',\n  children: 'Button Text'\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nButton.component({\n  className: 'Button Button--primary'\n}, 'Button Text');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<Button className='Button Button--primary'>Button Text</Button>\n```\n\n----------------------------------------\n\nTITLE: Overriding Views in Flarum's extend.php\nDESCRIPTION: This snippet demonstrates how to override existing templates from core or extensions in Flarum. It uses the View extender's extendNamespace method to specify the override directory.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/views.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->extendNamespace('acme.hello-world', __DIR__.'/override_views')\n];\n```\n\n----------------------------------------\n\nTITLE: Importing Classes from Other Extensions in PHP\nDESCRIPTION: Example of importing and using a class from another Flarum extension in PHP backend code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Tags\\Tag;\n\nclass SomeClass\n{\n    public function someMethod()\n    {\n        return new Tag();  // Questa non è la maniera corretta di istanziare modelli, E' solo un esempio.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Serialization in API Controller\nDESCRIPTION: Customizes data serialization process in API controller\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillSerializeData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->prepareDataForSerialization(function ($controller, $data, $request, $document) {\n            $data->load('myCustomRelation');\n        }),\n]\n```\n\n----------------------------------------\n\nTITLE: Preference Saving in Mithril 2 (New Pattern)\nDESCRIPTION: The new way of saving user preferences in Flarum with Mithril 2, directly calling savePreferences instead of using the removed preferenceSaver method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Without preferenceSaver\nSwitch.component({\n  children: app.translator.trans('core.forum.settings.privacy_disclose_online_label'),\n  state: this.user.preferences().discloseOnline,\n  onchange: (value) => {\n    this.discloseOnlineLoading = true;\n\n    this.user.savePreferences({ discloseOnline: value }).then(() => {\n      this.discloseOnlineLoading = false;\n      m.redraw();\n    });\n  },\n  loading: this.discloseOnlineLoading,\n})\n```\n\n----------------------------------------\n\nTITLE: Using the Help Command with Specific Command\nDESCRIPTION: Shows help information for a specific Flarum command. This provides detailed usage instructions and available options for the target command.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum help [tên_câu_lệnh]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter POJO in Mithril\nDESCRIPTION: This code snippet showcases the implementation of a simple Counter class that encapsulates the counter state. It is used as a singleton in the app, allowing components to access and modify the counter state efficiently.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass Counter {\n  constructor() {\n    this._counter = 0;\n  }\n\n  increaseCounter() {\n    this._counter += 1;\n  }\n\n  getCount() {\n    return this._counter;\n  }\n}\n\napp.counter = new Counter();\n\nextend(HeaderSecondary.prototype, 'items', function(items) {\n  items.add('counterDisplay',\n    <div>\n      <p>Counter: {app.counter.getCount()}</p>\n    </div>\n  );\n})\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('counterButton',\n    <div>\n      <button onclick={() => app.counter.increaseCounter()}>Increase Counter</button>\n    </div>\n  );\n})\n```\n\n----------------------------------------\n\nTITLE: Adding CSS to Flarum Frontend in PHP\nDESCRIPTION: This snippet demonstrates how to add both JavaScript and CSS files to Flarum's forum frontend using the Frontend extender in the extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less')\n```\n\n----------------------------------------\n\nTITLE: Setting Default Permissions in Flarum\nDESCRIPTION: Example of adding default permissions for user groups using data migrations\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\nreturn Migration::addPermissions([\n    'some.permission' => Group::MODERATOR_ID\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Frontend Workflow Configuration - YAML\nDESCRIPTION: This YAML configuration file is used to set up a GitHub Action for the frontend of a Flarum extension. It defines when to trigger the workflow and the configurations for various jobs using a reusable workflow from the Flarum framework. Key parameters include enabling Prettier and specifying the directory for frontend code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Frontend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_frontend.yml@main\n    with:\n      enable_bundlewatch: false\n      enable_prettier: true\n      enable_typescript: false\n\n      frontend_directory: ./js\n      backend_directory: .\n      js_package_manager: yarn\n      main_git_branch: main\n\n    secrets:\n      bundlewatch_github_token: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Checking Extension Availability in Frontend JavaScript\nDESCRIPTION: Shows how to detect if an optional dependency extension is enabled in the frontend using the flarum.extensions global object.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif ('some-extension-id' in flarum.extensions) {\n    // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Special Namespace Keys for References and Groups in YAML\nDESCRIPTION: Special namespace keys for translations that require special handling, including references and default group names.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nref:         # Traduzioni referenziate da più di una chiave.\ngroup:       # Traduzioni utilizzate come gruppi predefiniti.\n```\n\n----------------------------------------\n\nTITLE: Updating Preference Saving in JavaScript\nDESCRIPTION: Demonstrates the removal of the preferenceSaver method and how preferences should be directly saved now. This change is to avoid saving component instances.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Old way\nSwitch.component({\n  children: app.translator.trans('core.forum.settings.privacy_disclose_online_label'),\n  state: this.user.preferences().discloseOnline,\n  onchange: (value, component) => {\n    this.user.pushAttributes({ lastSeenAt: null });\n    this.preferenceSaver('discloseOnline')(value, component);\n  },\n})\n\n// New way\nSwitch.component({\n  children: app.translator.trans('core.forum.settings.privacy_disclose_online_label'),\n  state: this.user.preferences().discloseOnline,\n  onchange: (value) => {\n    this.discloseOnlineLoading = true;\n\n    this.user.savePreferences({ discloseOnline: value }).then(() => {\n      this.discloseOnlineLoading = false;\n      m.redraw();\n    });\n  },\n  loading: this.discloseOnlineLoading,\n})\n```\n\n----------------------------------------\n\nTITLE: Updating MariaDB Driver Configuration\nDESCRIPTION: PHP configuration update required when upgrading to Flarum v2 with MariaDB, changing the database driver from mysql to mariadb.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/update.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php return array (\n  'debug' => true,\n  'offline' => false,\n  'database' =>\n  array (\n    // remove-next-line\n    'driver' => 'mysql',\n    // insert-next-line\n    'driver' => 'mariadb',\n    'host' => 'localhost',\n    'port' => 3306,\n```\n\n----------------------------------------\n\nTITLE: Renaming Columns Using Migration Helper in PHP\nDESCRIPTION: Example of using Flarum's Migration helper to rename columns in an existing table in the database.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::renameColumns('users', ['from' => 'to']);\n```\n\n----------------------------------------\n\nTITLE: Importing Extension Split Module in JavaScript\nDESCRIPTION: Shows how to import a split module from another Flarum extension using the ext: syntax.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/code-splitting.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport('ext:flarum/tags/common/components/TagSelectionModal').then(({ default: TagSelectionModal }) => {\n  // do something with CustomPage\n});\n```\n\n----------------------------------------\n\nTITLE: PHP Class Reference - Application Instance\nDESCRIPTION: Example showing updated container usage with Illuminate Container instead of Application class\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\napp()->url()\n```\n\n----------------------------------------\n\nTITLE: Renaming Columns in Flarum Migration\nDESCRIPTION: Example of using Flarum's Migration helper to rename columns in an existing database table.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nreturn Migration::renameColumns('users', ['from' => 'to']);\n```\n\n----------------------------------------\n\nTITLE: Adding Default Permissions in Flarum Migration\nDESCRIPTION: Demonstrates how to use data migrations to specify default permissions in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\nreturn Migration::addPermissions([\n    'some.permission' => Group::MODERATOR_ID\n]);\n```\n\n----------------------------------------\n\nTITLE: Component Attributes Method Migration\nDESCRIPTION: Example of migrating from attrs() to elementAttrs() method in Flarum components\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends Component {\n  view() {\n    return <div {...this.attrs()}><p>Hello World!</p></div>;\n  }\n\n  attrs() {\n    return {\n      className: 'SomeClass',\n      onclick: () => console.log('click'),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vote Saving in JavaScript\nDESCRIPTION: Shows how to implement vote saving functionality in the frontend, with proper API payload formatting.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfunction saveVote(post, upvoted, downvoted) {\n  let action;\n\n  switch (true) {\n    case (upvoted && downvoted) || (!upvoted && !downvoted):\n      action = null;\n      break;\n    case upvoted:\n      action = 'up';\n      break;\n    case downvoted:\n      action = 'down';\n      break;\n  }\n  \n  return post.save({ vote: action });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Flarum Frontend Testing\nDESCRIPTION: Shows the TypeScript configuration needed for frontend testing in a Flarum extension using Jest.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"include\": [\"tests/**/*\"],\n  \"files\": [\"../../../node_modules/@flarum/jest-config/shims.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Component in Flarum (JSX)\nDESCRIPTION: This snippet demonstrates how to create a form component in Flarum using various form-related components like FieldSet, Button, and Switch. It shows how to handle input changes and form submission.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/forms.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/common/Component';\nimport FieldSet from 'flarum/common/components/FieldSet';\nimport Button from 'flarum/common/components/Button';\nimport Switch from 'flarum/common/components/Switch';\n\n\nclass FormComponent extends Component {\n  oninit(vnode) {\n    this.textInput = \"\";\n    this.booleanInput = false;\n  }\n\n  view() {\n    return (\n      <form onsubmit={this.onsubmit.bind(this)}>\n        <FieldSet label={app.translator.trans('fake-extension.form.fieldset_label')}>\n          <input className=\"FormControl\" value={this.textInput} oninput={e => this.textInput = e.target.value}>\n          </input>\n          <Switch state={this.booleanInput} onchange={val => this.booleanInput = val}>\n          </Switch>\n        </FieldSet>\n        <Button type=\"submit\">{app.translator.trans('core.admin.basics.submit_button')}</Button>\n      </form>\n    )\n  }\n\n  onsubmit() {\n    // Some form handling logic here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Dependencies in composer.json\nDESCRIPTION: Demonstrates how to specify extension dependencies using Composer's require field, ensuring dependent extensions are enabled before an extension can be used\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my/extension\",\n  \"description\": \"Cool New Extension\",\n  \"type\": \"flarum-extension\",\n  \"license\": \"MIT\",\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.14\",\n    \"flarum/tags\": \"^0.1.0-beta.14\",\n    \"flarum/mentions\": \"^0.1.0-beta.14\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Extenders in PHP for Flarum Beta 8\nDESCRIPTION: Demonstrates how to use the new Extender concept in Flarum Beta 8. The code shows configuration of frontend assets, routes, and event listeners using the new syntax in the extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b8.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less')\n        ->route('/t/{slug}', 'tag')\n        ->route('/tags', 'tags'),\n\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\AddForumTagsRelationship::class);\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration\nDESCRIPTION: This snippet demonstrates the basic Webpack configuration file (`webpack.config.js`) for a Flarum extension.  It imports the `flarum-webpack-config` and exports the result of calling the config function. This allows Flarum to handle the compilation and bundling of JavaScript files for the extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = require('flarum-webpack-config');\n\nmodule.exports = config();\n```\n\n----------------------------------------\n\nTITLE: Single Translation with HTML Tags in Flarum YAML\nDESCRIPTION: Shows how to use a single translation with HTML-style tags for flexible localization. This approach allows localizers to adjust word order and formatting as needed for different languages.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nsign_up_text: \"Don't have an account? <a>Sign Up</a>\"\n```\n\n----------------------------------------\n\nTITLE: Migrating attrs() Method to elementAttrs() in Components (JavaScript)\nDESCRIPTION: Example of renaming the attrs() method to elementAttrs() in a custom component. This change is necessary because this.attrs is now used for attrs passed in from parent components.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends Component {\n  view() {\n    return <div {...this.elementAttrs()}><p>Hello World!</p></div>;\n  }\n\n  elementAttrs() {\n    return {\n      className: 'SomeClass',\n      onclick: () => console.log('click'),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SubtreeRetainer in Mithril 2 Component\nDESCRIPTION: Example of using SubtreeRetainer with onbeforeupdate in a Mithril 2 component to optimize redraws. The SubtreeRetainer checks if data has changed before allowing a redraw.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.showContent = false;\n\n    this.subtree = new SubtreeRetainer(\n      () => this.showContent,\n    )\n  }\n\n  onbeforeupdate() {\n    // If needsRebuild returns true, mithril will diff and redraw the vnode as usual. Otherwise, it will skip this redraw cycle.\n    // In this example, this means that this component and its children will only be redrawn when extra content is toggled.\n    return this.subtree.needsRebuild();\n  }\n\n  view(vnode) {\n    return <div>\n      <button onclick={() => this.showContent = !this.showContent}>Toggle Extra Content</button>\n      <p>Hello World!{this.showContent ? ' Extra Content!' : ''}</p>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pluralization in Flarum Translations with JavaScript\nDESCRIPTION: Demonstrates how to implement pluralization in Flarum translations using ICU MessageFormat syntax in JavaScript. The example shows a translation that changes based on a count variable.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst remaining = this.minPrimary - primaryCount;\nreturn app.translator.trans(\n  'choose_primary_placeholder',\n  { count: remaining }\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Component Instance Storage Pattern\nDESCRIPTION: Example showing the deprecated approach of storing component instances directly, which no longer works with Mithril's optimizations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass ChildComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return <p>{this.counter}</p>;\n  }\n}\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.child = new ChildComponent();\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.child.counter += 1}></button>\n        {this.child.render()}\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the New PHP Resolve Function in Flarum Beta 16\nDESCRIPTION: Shows how to use the new 'resolve' function, which replaces the deprecated 'app' global helper function for container resolution.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nresolve('container_binding_name')\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Notification Driver in PHP\nDESCRIPTION: Example of implementing a custom notification driver for Pusher integration, showing how to handle notification sending and type registration.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Pusher;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\Driver\\NotificationDriverInterface;\nuse Illuminate\\Contracts\\Queue\\Queue;\n\nclass PusherNotificationDriver implements NotificationDriverInterface\n{\n    /**\n     * @var Queue\n     */\n    protected $queue;\n\n    public function __construct(Queue $queue)\n    {\n        $this->queue = $queue;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function send(BlueprintInterface $blueprint, array $users): void\n    {\n        if (count($users)) {\n            $this->queue->push(new SendPusherNotificationsJob($blueprint, $users));\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function registerType(string $blueprintClass, array $driversEnabledByDefault): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Extender Callbacks in PHP\nDESCRIPTION: Shows different ways to pass callbacks to Flarum extenders, including global functions and array-style class method references.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Global function\n$extender->extend('boolval')\n\n// Array-style class method reference\n$extender->extend([ClassName::class, 'methodName'])\n```\n\n----------------------------------------\n\nTITLE: Modal Usage in Mithril 0.2 vs Mithril 2\nDESCRIPTION: Comparison of how to open modals in both Mithril versions. In Mithril 2, instead of passing a component instance, you pass the component class and attributes separately.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// Mithril 0.2\napp.modal.show(new LoginModal(identification: 'prefilledUsername'));\n\n// Mithril 2\napp.modal.show(LoginModal, {identification: 'prefilledUsername'});\n```\n\n----------------------------------------\n\nTITLE: Implementing State Pattern for Shared Data in JavaScript\nDESCRIPTION: Shows how to create a POJO 'state instance' for data that can be modified by several unrelated components. This pattern is similar to 'service' singletons used in Angular and Ember.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass Counter {\n  constructor() {\n    this._counter = 0;\n  }\n\n  increaseCounter() {\n    this._counter += 1;\n  }\n\n  getCount() {\n    return this._counter;\n  }\n}\n\napp.counter = new Counter();\n\nextend(HeaderSecondary.prototype, 'items', function(items) {\n  items.add('counterDisplay',\n    <div>\n      <p>Counter: {app.counter.getCount()}</p>\n    </div>\n  );\n})\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('counterButton',\n    <div>\n      <button onclick={() => app.counter.increaseCounter()}>Increase Counter</button>\n    </div>\n  );\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Flarum Extension\nDESCRIPTION: Example package.json file for setting up a Flarum extension's frontend development environment. Includes dependencies and build scripts for webpack.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"private\": true,\n  \"name\": \"@acme/flarum-hello-world\",\n  \"dependencies\": {\n    \"flarum-webpack-config\": \"^1.0.0\",\n    \"webpack\": \"^4.0.0\",\n    \"webpack-cli\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"flarum-tsconfig\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"dev\": \"webpack --mode development --watch\",\n    \"build\": \"webpack --mode production\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Header Link in Flarum UI\nDESCRIPTION: JavaScript example demonstrating how to extend Flarum's HeaderPrimary component to add a new link in the header.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Second-Level Translation Keys for Interfaces in YAML\nDESCRIPTION: This code block defines the second-level keys used in Flarum's translation system, indicating which interface uses the translation. It covers various parts of the application including admin, forum, and API.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:       # Translations used by the admin interface.\nforum:       # Translations used by the forum user interface.\nlib:         # Translations used by either of the above.\nviews:       # Translations used outside the normal JS client.\napi:         # Translations used in messages output by the API.\nemail:       # Translations used in emails sent by Flarum.\n```\n\n----------------------------------------\n\nTITLE: Updated Flarum JavaScript Directory Structure\nDESCRIPTION: New JavaScript directory structure required for Beta 8, showing the reorganized files and folders after implementing Webpack-based build system.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b8.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\njs\n├── src\n│   ├── admin\n│   │   └── index.js\n│   └── forum\n│       └── index.js\n├── dist\n│   ├── admin.js\n│   ├── admin.js.map\n│   ├── forum.js\n│   └── forum.js.map\n├── admin.js\n├── forum.js\n├── package.json\n└── webpack.config.js\n```\n\n----------------------------------------\n\nTITLE: Interface-Level Translation Namespaces in YAML\nDESCRIPTION: Defines second-level namespace keys for different interface components and functionality areas in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:       # Traduzioni utilizzate dall'interfaccia di amministrazione.\nforum:       # Traduzioni utilizzate dall'interfaccia utente del forum.\nlib:         # Traduzioni utilizzate da uno dei precedenti.\nviews:       # Traduzioni utilizzate al di fuori del normale client JS.\napi:         # Traduzioni utilizzate nei messaggi emessi dall'API.\nemail:       # Traduzioni utilizzate nelle email inviate da Flarum.\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Serializers in Flarum\nDESCRIPTION: Demonstrates how to extend existing serializers to add attributes and relationships using the ApiSerializer extender, including single attributes, complex mutations, and relationship definitions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nreturn [\n    (new Extend\\ApiSerializer(UserSerializer::class))\n        // One attribute at a time\n        ->attribute('firstName', function ($serializer, $user, $attributes) {\n            return $user->first_name\n        })\n        // Multiple modifications at once, more complex logic\n        ->mutate(function($serializer, $user, $attributes) {\n            $attributes['someAttribute'] = $user->someAttribute;\n            if ($serializer->getActor()->can('administrate')) {\n                $attributes['someDate'] = $serializer->formatDate($user->some_date);\n            }\n\n            return $attributes;\n        })\n        // API relationships\n        ->hasOne('phone', PhoneSerializer::class)\n        ->hasMany('comments', CommentSerializer::class),\n]\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Models in JavaScript\nDESCRIPTION: Adds new attributes and relationships to existing models\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nDiscussion.prototype.user = Model.hasOne('user');\nDiscussion.prototype.posts = Model.hasMany('posts');\nDiscussion.prototype.slug = Model.attribute('slug');\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Content to Flarum Frontend (PHP)\nDESCRIPTION: This code shows how to use the Frontend extender to inject custom JavaScript into the forum's head, demonstrating a simple 'Hello World' alert.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/start.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\nuse Flarum\\Frontend\\Document;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->content(function (Document $document) {\n            $document->head[] = '<script>alert(\"Hello, world!\")</script>';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Extending Flarum Models\nDESCRIPTION: Example of extending existing Flarum models to add casts and default values using the Model extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\User\\User;\n\nreturn [\n    (new Extend\\Model(User::class))\n        ->default('is_alive', true)\n        ->cast('suspended_until', 'datetime')\n        ->cast('is_admin', 'boolean')\n];\n```\n\n----------------------------------------\n\nTITLE: Creating OnlySameCountry Search Mutator in Flarum PHP\nDESCRIPTION: Defines a search mutator named 'OnlySameCountrySearchMutator' that adjusts the query criteria to filter users by the country of the current actor. This class, when invoked, modifies the search query to apply the country filter based on the authenticated user.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Query\\QueryCriteria;\nuse Flarum\\Search\\SearchState;\n\nclass OnlySameCountrySearchMutator\n{\n    public function __invoke(SearchState $searchState, QueryCriteria $queryCriteria)\n    {\n        $searchState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Translation Usage in JavaScript\nDESCRIPTION: Demonstrates basic usage of the translator in a Flarum extension initialization\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('acme-hello-world', function() {\n  alert(app.translator.trans('acme-hello-world.alert.hello_text'));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Dependencies in composer.json\nDESCRIPTION: JSON configuration showing how to specify optional dependencies in a Flarum extension's composer.json file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extra\": {\n    \"flarum-extension\": {\n      \"optional-dependencies\": [\n        \"flarum/tags\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Special Translation Namespaces in YAML\nDESCRIPTION: Special namespace keys for referenced translations and group names\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nref:         # Translations referenced by more than one key.\ngroup:       # Translations used as default group names.\n```\n\n----------------------------------------\n\nTITLE: Registering Locales in Flarum Extensions with PHP\nDESCRIPTION: Shows how to register translations for a Flarum extension using PHP in the extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnew Extend\\Locales(__DIR__ . '/locale'),\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: Git command to initialize a new repository for version control. This is the first step in preparing an extension for distribution.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/distribution.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Configuring Sorting Options in PHP Controller\nDESCRIPTION: Defines default sorting field, order and available sort fields for API resources\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n    // El campo de clasificación por defecto y el orden a utilizar.\n    public $sort = ['name' => 'asc'];\n    \n    // Los campos que están disponibles para ser ordenados.\n    public $sortFields = ['firstName', 'lastName'];\n```\n\n----------------------------------------\n\nTITLE: Creating Serializer via Flarum CLI\nDESCRIPTION: Command to automatically generate a new API serializer using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend api-serializer\n```\n\n----------------------------------------\n\nTITLE: Renaming a Table Using Migration Helper in PHP\nDESCRIPTION: Example of using Flarum's Migration helper to rename an existing table in the database.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::renameTable($from, $to);\n```\n\n----------------------------------------\n\nTITLE: Extracting and Loading API Relationships in PHP\nDESCRIPTION: Shows how to extract included relationships from a request and eager-load them on models before serialization.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$relations = $this->extractInclude($request);\n\nreturn Tag::all()->load($relations);\n```\n\n----------------------------------------\n\nTITLE: Basic Request Forwarding in Middleware\nDESCRIPTION: Shows the simple pattern for passing a request to the next middleware in the chain.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/middleware.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn $handler->handle($request);\n```\n\n----------------------------------------\n\nTITLE: Registering Locale Files in PHP\nDESCRIPTION: A simple PHP line that registers locale files with the Flarum extension system, enabling the use of defined translations throughout the application. This requires the Flarum extension development environment setup and proper locale file formatting.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnew Extend\\Locales(__DIR__ . '/locale'),\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Middleware Class in PHP\nDESCRIPTION: Shows how to create a PHP middleware class that implements the PSR-15 MiddlewareInterface with the process method, allowing custom logic to run before and after request handling.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/middleware.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass YourMiddleware implements MiddlewareInterface {\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        // Logic to run before the request is processed and later middleware is called.\n        $response = $handler->handle($request);\n        // Logic to run after the request is processed.\n        return $response\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Logo and Favicon URL Serialization in Flarum\nDESCRIPTION: This example demonstrates how Flarum serializes the URLs for the logo and favicon. It shows a practical approach to handle asset URLs which is recommended by Flarum, by serializing URL to assets.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/assets.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\"https://github.com/flarum/framework/blob/4ecd9a9b2ff0e9ba42bb158f3f83bb3ddfc10853/framework/core/src/Api/Serializer/ForumSerializer.php#L85-L86\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Global App and Discussion Page in Flarum (JSX)\nDESCRIPTION: Demonstrates basic monkey patching in Flarum by adding a global attribute and replacing the discussion page view.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// This adds an attribute to the `app` global.\napp.googleUrl = \"https://google.com\";\n\n// This replaces the output of the discussion page with \"Hello World\"\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\n\nDiscussionPage.prototype.view = function() {\n  return <p>Hello World</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Translations in JavaScript\nDESCRIPTION: Demonstrates how to construct a full translation key to access translations in JavaScript code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'acme-hello-world.alert.hello_text'\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Integration Test Configuration\nDESCRIPTION: XML configuration file for PHPUnit integration tests with specific settings for Flarum testing environment.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"true\"\n         stopOnFailure=\"false\">\n\n    <testsuites>\n        <testsuite name=\"Flarum Integration Tests\">\n            <directory suffix=\"Test.php\">./integration</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Importing Classes from Other Extensions in PHP\nDESCRIPTION: Demonstrates how to import classes from other Flarum extensions in PHP backend code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Tags\\Tag;\n\nclass SomeClass\n{\n    public function someMethod()\n    {\n        return new Tag();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DayJS for Internationalization in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the DayJS library for date internationalization in a language pack. It shows the necessary code to set the locale to a specified language code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/language-packs.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndayjs.locale('xx');\n```\n\n----------------------------------------\n\nTITLE: Reusing Translations in YAML for Flarum\nDESCRIPTION: Demonstrates how to reuse translations in Flarum using key references. It shows how to reference translations across different contexts and files, and explains the importance of using the 'ref' namespace for reusable translations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => core.ref.log_in\n\n    log_in:\n      submit_button: => core.ref.log_in\n      title: => core.ref.log_in\n\n  ref:\n    log_in: Log In\n```\n\n----------------------------------------\n\nTITLE: Using Flarum CLI to Generate a Modal (Bash)\nDESCRIPTION: This command utilizes the Flarum CLI tool to create a new modal component quickly. It simplifies the process of setting up a modal by generating the necessary files and structure automatically.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/interactive-components.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make frontend modal\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Extension Imports\nDESCRIPTION: Configuration for webpack to enable importing from other extensions in frontend JavaScript code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('flarum-webpack-config')({\n    useExtensions: ['flarum-tags']\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Subscriber in Flarum\nDESCRIPTION: Shows how to create an event subscriber to listen to multiple events. It includes registering the subscriber and defining methods to handle different events.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Flarum\\Post\\Event\\Saving;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->subscribe(PostEventSubscriber::class),\n];\n```\n\nLANGUAGE: php\nCODE:\n```\nclass PostEventSubscriber\n{\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    public function subscribe($events)\n    {\n        $events->listen(Deleted::class, [$this, 'handleDeleted']);\n        $events->listen(Saving::class, [$this, 'handleSaving']);\n    }\n\n    public function handleDeleted(Deleted $event)\n    {\n        // Your logic here\n    }\n\n    public function handleSaving(Saving $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from Frontend Store\nDESCRIPTION: Examples of retrieving resources from the API using the store's find method and accessing cached data.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/models.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// GET /api/discussions?sort=createdAt\napp.store.find('discussions', {sort: 'createdAt'}).then(console.log);\n\n// GET /api/discussions/123\napp.store.find('discussions', 123).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Replacing Flarum Str::slug() with Illuminate Str::slug() in PHP\nDESCRIPTION: Replace the removed Flarum\\Util\\Str::slug() method with Illuminate\\Support\\Str::slug() for string slugification in Flarum Beta 13.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b13.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Old code\nuse Flarum\\Util\\Str;\n$slug = Str::slug($string);\n\n// New code\nuse Illuminate\\Support\\Str;\n$slug = Str::slug($string);\n```\n\n----------------------------------------\n\nTITLE: Namespace Update for String Slugs\nDESCRIPTION: Migration from Flarum's custom string slug implementation to Laravel's built-in string helper. Developers should replace Flarum\\Util\\Str::slug() with Illuminate\\Support\\Str::slug().\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b13.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Old implementation\nFlarum\\Util\\Str::slug();\n\n// New implementation\nIlluminate\\Support\\Str::slug();\n```\n\n----------------------------------------\n\nTITLE: Configuring Flarum Composer.json File\nDESCRIPTION: Example composer.json configuration file for Flarum installation with detailed annotations explaining each section including metadata, package requirements, composer configuration, and version preferences.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/composer.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"flarum/flarum\",\n    \"description\": \"Delightfully simple forum software.\",\n    \"type\": \"project\",\n    \"keywords\": [\n        \"forum\",\n        \"discussion\"\n    ],\n    \"homepage\": \"https://flarum.org/\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Flarum\",\n            \"email\": \"info@flarum.org\",\n            \"homepage\": \"https://flarum.org/team\"\n        }\n    ],\n    \"support\": {\n        \"issues\": \"https://github.com/flarum/core/issues\",\n        \"source\": \"https://github.com/flarum/flarum\",\n        \"docs\": \"https://flarum.org/docs/\"\n    },\n    \"require\": {\n        \"flarum/core\": \"^2.0\",\n        \"flarum/approval\": \"*\",\n        \"flarum/bbcode\": \"*\",\n        \"flarum/emoji\": \"*\",\n        \"flarum/lang-english\": \"*\",\n        \"flarum/flags\": \"*\",\n        \"flarum/likes\": \"*\",\n        \"flarum/lock\": \"*\",\n        \"flarum/markdown\": \"*\",\n        \"flarum/mentions\": \"*\",\n        \"flarum/nicknames\": \"*\",\n        \"flarum/pusher\": \"*\",\n        \"flarum/statistics\": \"*\",\n        \"flarum/sticky\": \"*\",\n        \"flarum/subscriptions\": \"*\",\n        \"flarum/suspend\": \"*\",\n        \"flarum/tags\": \"*\"\n    },\n    \"config\": {\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true\n    },\n    \"prefer-stable\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis on Flarum Extensions\nDESCRIPTION: Commands to run PHPStan analysis and clear its cache for a Flarum extension using Composer scripts.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer analyse:phpstan\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer clear-cache:phpstan && composer analyse:phpstan\n```\n\n----------------------------------------\n\nTITLE: Model Extension Configuration - PHP\nDESCRIPTION: Shows how to extend existing models with default values and type casting using Flarum's Model extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\User\\User;\n\nreturn [\n    (new Extend\\Model(User::class))\n        ->default('is_alive', true)\n        ->cast('suspended_until', 'datetime')\n        ->cast('is_admin', 'boolean')\n];\n```\n\n----------------------------------------\n\nTITLE: Component Props Pattern Example\nDESCRIPTION: Recommended pattern using props/attrs to pass data between parent and child components instead of storing instances.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass ChildComponent extends Component {\n  view() {\n    return <p>{this.attrs.counter}</p>;\n  }\n}\n\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.counter += 1}></button>\n        <ChildComponent counter={this.counter}></ChildComponent>\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Name in PHP Controllers and Middleware\nDESCRIPTION: Demonstrates how to retrieve the route name from a request in PHP controllers and middleware that run after ResolveRoute.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b15.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$routeName = $request->getAttribute('routeName');\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Requests in Flarum Integration Tests\nDESCRIPTION: Shows how to send HTTP requests in Flarum integration tests using the TestCase class methods. Includes examples of GET and POST requests with authentication and JSON payloads.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    /**\n     * @test\n     */\n    public function can_search_users()\n    {\n        $response = $this->send(\n          $this->request('GET', '/api/users', ['authenticatedAs' => 1])\n               ->withQueryParams(['filter' => ['q' => 'john group:1'], 'sort' => 'username'])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    /**\n     * @test\n     */\n    public function can_create_user()\n    {\n        $response = $this->send(\n          $this->request(\n                'POST',\n                '/api/users',\n                [\n                    'authenticatedAs' => 1,\n                    'json' => [\n                        'data' => [\n                            'attributes' => [\n                                'username' => 'test',\n                                'password' => 'too-obscure',\n                                'email' => 'test@machine.local'\n                            ]\n                        ]\n                    ]\n                ]\n            )\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Response in Flarum Middleware\nDESCRIPTION: This snippet shows how to return a custom JSON API response from middleware in Flarum. It demonstrates creating an error response when a condition is met during request processing.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/middleware.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\JsonApiResponse;\nuse Tobscure\\JsonApi\\Document;\nuse Tobscure\\JsonApi\\Exception\\Handler\\ResponseBag;\n\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    if ($userFoundInDatabase) {\n        $error = new ResponseBag('422', [\n            [\n                'status' => '422',\n                'code' => 'validation_error',\n                'source' => [\n                    'pointer' => '/data/attributes/email',\n                ],\n                'detail' => 'Yikes! Your email can\\'t be used.',\n            ],\n        ]);\n        $document = new Document();\n        $document->setErrors($error->getErrors());\n\n        return new JsonApiResponse($document, $error->getStatus());\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Translator in JavaScript for Flarum Extensions\nDESCRIPTION: Demonstrates how to use the app.translator.trans() method to reference translations in Flarum extension JavaScript code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('acme-hello-world', function() {\n  alert(app.translator.trans('acme-hello-world.alert.hello_text'));\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Route Definitions in JavaScript\nDESCRIPTION: This snippet shows how to update route definitions in Flarum extensions from Mithril 0.2 to Mithril 2.0. It demonstrates the change in syntax for defining new routes and using the Link component for internal links.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\napp.routes.new_page = { path: '/new', component: NewPage.component() }\n\n// Mithril 2.0\napp.routes.new_page = { path: '/new', component: NewPage }\n\n// Mithril 0.2\n<a href=\"/path\" config={m.route}>Link Content</a>\n\n// Mithril 2\nimport Link from 'flarum/components/Link';\n\n<Link href=\"/path\">Link Content</Link>\n```\n\n----------------------------------------\n\nTITLE: Registering Number Setting with Constraints for Flarum Extension\nDESCRIPTION: Shows how to register a number setting with min and max constraints for a Flarum extension using the ExtensionData API.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/admin.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  setting: 'acme-interstellar.crew_count',\n  label: app.translator.trans('acme-interstellar.admin.crew_count_label'),\n  type: 'number',\n  min: 1,\n  max: 10\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Translations in PHP\nDESCRIPTION: Code snippet showing how to register translation files in Flarum's extend.php configuration file\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnew Extend\\Locales(__DIR__ . '/locale'),\n```\n\n----------------------------------------\n\nTITLE: Using Select Component with Disabled Prop in JavaScript\nDESCRIPTION: Utilize the new 'disabled' prop in the flarum/components/Select component for disabling select inputs.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Select from 'flarum/components/Select';\n\n<Select\n  options={options}\n  value={value}\n  disabled={isDisabled}\n  onChange={handleChange}\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating Developer Access Token in Flarum (PHP)\nDESCRIPTION: Illustrates how developers can create non-expiring developer tokens from within a Flarum extension. This method generates a new token for the specified user ID.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nFlarum\\Http\\DeveloperAccessToken::generate($userId)\n```\n\n----------------------------------------\n\nTITLE: Private Posts Visibility Logic Example\nDESCRIPTION: Shows how to implement visibility logic for private posts while maintaining extensibility for other extensions to modify the behavior.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, we want to ensure that private posts aren't visible to users by default.\n// The simplest way to do this would be:\n$query->where('posts.is_private', false);\n\n// However, we recognize that some extensions might have valid use cases for showing private posts.\n// So instead, we include all posts that aren't private, AND all private posts desired by extensions\n$query->where(function ($query) use ($actor) {\n    $query->where('posts.is_private', false)\n        ->orWhere(function ($query) use ($actor) {\n            $query->whereVisibleTo($actor, 'viewPrivate');\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Alert Opening in Mithril 2 (New Pattern)\nDESCRIPTION: The new ways of creating alerts in Flarum with Mithril 2, showing three different overloads of the show method that avoid component instances.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\napp.alerts.show('Hello, this is a success alert!');\napp.alerts.show({type: 'success'}, 'Hello, this is a success alert!');\napp.alerts.show(Alert, {type: 'success'}, 'Hello, this is a success alert!');\n```\n\n----------------------------------------\n\nTITLE: Updated Composer Loading in Flarum\nDESCRIPTION: This example shows how to load the composer in Flarum after the Mithril 2 upgrade. Instead of passing a component instance to app.composer.load(), you now pass the component class and attributes separately.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n// Mithril 0.2\napp.composer.load(new DiscussionComposer({user: app.session.user}));\n\n// Mithril 2\napp.composer.load(DiscussionComposer, {user: app.session.user})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current User in Flarum Extension\nDESCRIPTION: Method to get the current user from a request object inside a Flarum extension. Returns a User instance which might be a Guest user.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$request->getAttribute('actor')\n```\n\n----------------------------------------\n\nTITLE: Discussion Creation Response\nDESCRIPTION: Shows the JSON response received after successfully creating a new discussion. The response includes the ID of the new discussion, along with attributes and relationships to posts and users.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"{\n  \\\"data\\\": {\n    \\\"type\\\": \\\"discussions\\\",\n    \\\"id\\\": \\\"42\\\",\n    \\\"attributes\\\": {\n      \\\"title\\\": \\\"Lorem Ipsum\\\",\n      \\\"slug\\\": \\\"42-lorem-ipsum\\\",\n      \\\"commentCount\\\": 1\n      // [...] other attributes\n    },\n    \\\"relationships\\\": {\n      \\\"posts\\\": {\n        \\\"data\\\": [\n          {\n            \\\"type\\\": \\\"posts\\\",\n            \\\"id\\\": \\\"58\\\"\n          }\n        ]\n      },\n      \\\"user\\\": {\n        \\\"data\\\": {\n          \\\"type\\\": \\\"users\\\",\n          \\\"id\\\": \\\"1\\\"\n        }\n      }\n      // [...] các quan hệ khác\n    }\n  },\n  \\\"included\\\":[\n    {\n      \\\"type\\\": \\\"posts\\\",\n      \\\"id\\\": \\\"38\\\",\n      \\\"attributes\\\": {\n        \\\"number\\\": 1,\n        \\\"contentType\\\": \\\"comment\\\",\n        \\\"contentHtml\\\": \\\"\\u003Cp\\u003EHello World\\u003C/p\\u003E\\\"\n        // [...] các thuộc tính khác\n      }\n    }\n    // [...] other includes\n  ]\n}\"\n```\n\n----------------------------------------\n\nTITLE: Using PageState to Check Current Page\nDESCRIPTION: Shows how to use PageState methods to check current page type and retrieve page-specific data\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/frontend-pages.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport IndexPage from 'flarum/forum/components/DiscussionPage';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\n\n// To just check page type\napp.current.matches(DiscussionPage);\n\n// To check page type and some data\napp.current.matches(IndexPage, {routeName: 'following'});\n```\n\n----------------------------------------\n\nTITLE: Defining Translation Key Suffixes for Email Content in YAML\nDESCRIPTION: This snippet shows suffixes specifically used for translation keys in the email namespace, covering the email body and subject line.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n_body:          # Used for the content of the email message.\n_subject:       # Used for the subject line of the email message.\n```\n\n----------------------------------------\n\nTITLE: Using Link Component Instead of m.route for Internal Links\nDESCRIPTION: Demonstrates how to replace m.route config for internal links with the new Link component in Mithril 2.0.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\n<a href=\"/path\" config={m.route}>Link Content</a>\n\n// Mithril 2\nimport Link from 'flarum/components/Link';\n\n<Link href=\"/path\">Link Content</Link>\n```\n\n----------------------------------------\n\nTITLE: Registering Commands from Bash Script Example\nDESCRIPTION: This bash example demonstrates how to use the Console extender to register a custom command in a Flarum extension's configuration file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/console.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Console\\CustomCommand;\n\nreturn [\n  // Otros extensores\n  (new Extend\\Console())->command(CustomCommand::class)\n  // Otros extensores\n];\n```\n\n----------------------------------------\n\nTITLE: Extracting and Applying Sort Criteria in Flarum\nDESCRIPTION: This code extracts sorting information from the request and applies it to an Eloquent query in Flarum.  The `extractSort` method returns an array of sort criteria (field and order), which are then iterated over to construct the `orderBy` clauses. The fields are converted to snake case before being used in the query.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Illuminate\\Support\\Str;\n\n// ...\n\n$sort = $this->extractSort($request);\n$query = Tag::query();\n\nforeach ($sort as $field => $order) {\n    $query->orderBy(Str::snake($field), $order);\n}\n\nreturn $query->get();\n?>\n```\n\n----------------------------------------\n\nTITLE: Generating Backend Routes with Flarum CLI\nDESCRIPTION: Command to use the Flarum CLI for automatically generating backend routes in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend route\n```\n\n----------------------------------------\n\nTITLE: Creating Access Token\nDESCRIPTION: Shows how to create an access token by sending a POST request to the `/api/token` endpoint with user credentials.  The response includes the access token and user ID, which can be used for authenticated API requests.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"{\n    \\\"identification\\\": \\\"Toby\\\",\n    \\\"password\\\": \\\"pass7word\\\"\n}\"\n```\n\n----------------------------------------\n\nTITLE: Caddy Server Configuration\nDESCRIPTION: Complete Caddy server configuration for Flarum including PHP FastCGI and cache control headers.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/install.md#2025-04-16_snippet_4\n\nLANGUAGE: nginx\nCODE:\n```\nwww.example.com {\n    root * /var/www/flarum/public\n    php_fastcgi unix//var/run/php/php7.4-fpm.sock\n    header /assets/* {\n        +Cache-Control \"public, must-revalidate, proxy-revalidate\"\n        +Cache-Control \"max-age=25000\"\n        Pragma \"public\"\n    }\n    file_server\n}\n```\n\n----------------------------------------\n\nTITLE: Creating YAML Literal Blocks for Multi-line Translations\nDESCRIPTION: Illustrates how to use YAML literal blocks for translations that span multiple lines or contain special formatting.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nliteral_block_text: |\n  These lines will be displayed as shown here, line breaks and all.\n\n      Extra indentation is also preserved: this line will be indented 4 spaces!\n\n  Quote marks are unnecessary, even when the block contains special characters.\n```\n\n----------------------------------------\n\nTITLE: Deleting Resources in Flarum's Frontend\nDESCRIPTION: Demonstrates how to delete a resource by calling the delete method on a model instance, which returns a Promise that resolves when the deletion is complete.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.delete().then(done);\n```\n\n----------------------------------------\n\nTITLE: Correct Component Attr Pattern\nDESCRIPTION: Demonstrates the recommended approach of passing data through component attrs instead of storing component instances.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass ChildComponent extends Component {\n  view() {\n    return <p>{this.attrs.counter}</p>;\n  }\n}\n\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.counter += 1}></button>\n        <ChildComponent counter={this.counter}></ChildComponent>\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Cached Resources in Flarum's Frontend Store\nDESCRIPTION: Shows how to access resources that have already been loaded and cached in the store without making additional API requests, using the all and getById methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussions = app.store.all('discussions');\nconst discussion = app.store.getById('discussions', 123);\n```\n\n----------------------------------------\n\nTITLE: Creating a Filter Mutator for Same Country Users in PHP\nDESCRIPTION: This code snippet shows how to implement a filter mutator that restricts results to users from the same country as the current user. It applies to all filter requests.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterState;\nuse Flarum\\Query\\QueryCriteria;\n\nclass OnlySameCountryFilterMutator\n{\n    public function __invoke(FilterState $filterState, QueryCriteria $queryCriteria)\n    {\n        $filterState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Second-Level Namespaces for Flarum Interfaces in YAML\nDESCRIPTION: List of second-level namespace keys indicating which interface uses the translation, including admin, forum, lib, views, api, and email.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:       # Traduzioni utilizzate dall'interfaccia di amministrazione.\nforum:       # Traduzioni utilizzate dall'interfaccia utente del forum.\nlib:         # Traduzioni utilizzate da uno dei precedenti.\nviews:       # Traduzioni utilizzate al di fuori del normale client JS.\napi:         # Traduzioni utilizzate nei messaggi emessi dall'API.\nemail:       # Traduzioni utilizzate nelle email inviate da Flarum.\n```\n\n----------------------------------------\n\nTITLE: New Discussion Response from Flarum API\nDESCRIPTION: Example response after successfully creating a discussion. The response includes the new discussion ID, attributes, relationships, and the associated first post.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/rest-api.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"type\": \"discussions\",\n    \"id\": \"42\",\n    \"attributes\": {\n      \"title\": \"Lorem Ipsum\",\n      \"slug\": \"42-lorem-ipsum\",\n      \"commentCount\": 1\n      // [...] other attributes\n    },\n    \"relationships\": {\n      \"posts\": {\n        \"data\": [\n          {\n            \"type\": \"posts\",\n            \"id\": \"58\"\n          }\n        ]\n      },\n      \"user\": {\n        \"data\": {\n          \"type\": \"users\",\n          \"id\": \"1\"\n        }\n      },\n      // [...] other relationships\n    }\n  },\n  \"included\":[\n    {\n      \"type\": \"posts\",\n      \"id\": \"38\",\n      \"attributes\": {\n        \"number\": 1,\n        \"contentType\": \"comment\",\n        \"contentHtml\": \"\\u003Cp\\u003EHello World\\u003C\\/p\\u003E\"\n        // [...] other attributes\n      }\n    }\n    // [...] other includes\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Notification Components in JavaScript\nDESCRIPTION: Frontend initialization code for registering notification components and extending the notification grid with custom notification types.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport NotificationGrid from 'flarum/forum/components/NotificationGrid';\n\nimport PostLikedNotification from './components/PostLikedNotification';\n\napp.initializers.add('flarum-likes', () => {\n  app.notificationComponents.postLiked = PostLikedNotification;\n\n  extend(NotificationGrid.prototype, 'notificationTypes', function (items) {\n    items.add('postLiked', {\n      name: 'postLiked',\n      icon: 'far fa-thumbs-up',\n      label: app.translator.trans('flarum-likes.forum.settings.notify_post_liked_label')\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in PHP API Controller\nDESCRIPTION: Extracts pagination parameters from the request and applies them to the query. Returns a collection of Tag models with the specified limit and offset.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$limit = $this->extractLimit($request);\n$offset = $this->extractOffset($request);\n\nreturn Tag::skip($offset)->take($limit);\n```\n\n----------------------------------------\n\nTITLE: Implementando el Extensor LanguagePack para Flarum en PHP\nDESCRIPTION: Código mínimo necesario para definir una extensión como paquete de idiomas en Flarum. Este ejemplo muestra la implementación del extensor LanguagePack sin setters adicionales.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/translate.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn new Flarum\\Extend\\LanguagePack;\n```\n\n----------------------------------------\n\nTITLE: Implementing Sorting in PHP API Controller\nDESCRIPTION: Extracts sorting parameters from the request and applies them to a database query. Creates a Tag query and adds orderBy clauses for each requested sort field and direction.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$sort = $this->extractSort($request);\n$query = Tag::query();\n\nforeach ($sort as $field => $order) {\n    $query->orderBy(snake_case($field), $order);\n}\n\nreturn $query->get();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Testing Environment in PHP\nDESCRIPTION: PHP script to set up the testing environment using the SetupScript class from flarum/testing.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Testing\\integration\\Setup\\SetupScript;\n\nrequire __DIR__.'/../../vendor/autoload.php';\n\n$setup = new SetupScript();\n\n$setup->run();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Serializer in Flarum\nDESCRIPTION: This code snippet provides an example of how to create a new serializer in Flarum by extending `AbstractSerializer`. It defines a resource type and specifies default attributes for the serialized data. This is important for converting Eloquent models into JSON:API format.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/api.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\AbstractSerializer;\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nclass DiscussionSerializer extends AbstractSerializer\n{\n    protected $type = 'discussions';\n\n    protected function getDefaultAttributes($discussion)\n    {\n        return [\n            'title' => $discussion->title,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Group and User Permissions in PHP\nDESCRIPTION: Demonstrates common methods for checking permissions associated with groups and users in Flarum. Includes accessing group permissions, checking specific permissions, and enumerating user permissions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// An Eloquent relation to the group's permissions\n$group->permissions();\n\n// Check if a group has a permission\n$group->hasPermission('viewForum');\n\n// Enumerate all the user's permissions\n$user->getPermissions();\n\n// Check if the user is in a group with the given permission\n$user->hasPermission('viewForum');\n```\n\n----------------------------------------\n\nTITLE: Adding Columns to Existing Table in Flarum Migration\nDESCRIPTION: Using the Migration::addColumns helper to add new columns to an existing table in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addColumns('users', [\n    'email' => ['string', 'length' => 255, 'nullable' => true],\n    'discussion_count' => ['integer', 'unsigned' => true]\n]);\n```\n\n----------------------------------------\n\nTITLE: Using JSX Elements in Translations\nDESCRIPTION: JavaScript code showing how to use JSX elements as parameters in translations, replacing the placeholder tags with actual components.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.translator.trans('acme.my_locale_key', {\n  basic_impl_link: <a href=\"https://discuss.flarum.org/d/28151-database-queue-the-simplest-queue-even-for-shared-hosting\" />,\n  adv_impl_link: <a href=\"https://discuss.flarum.org/d/21873-redis-sessions-cache-queues\" />,\n})\n```\n\n----------------------------------------\n\nTITLE: Translation Key Access in JavaScript\nDESCRIPTION: Demonstrates how to form the full translation key to access a translation in JavaScript code by combining namespace elements with period delimiters.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'acme-hello-world.alert.hello_text'\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Configuration for Integration Tests\nDESCRIPTION: Example PHPUnit configuration file for integration tests in Flarum extensions, with process isolation enabled and targeting the integration directory.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"true\"\n         stopOnFailure=\"false\">\n\n    <testsuites>\n        <testsuite name=\"Flarum Integration Tests\">\n            <directory suffix=\"Test.php\">./integration</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Importing from Other Flarum Extensions\nDESCRIPTION: This JavaScript code configures webpack to allow importing from other Flarum extensions by specifying the extension IDs in the useExtensions array.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('flarum-webpack-config')({\n    useExtensions: ['flarum-tags']\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring DayJS Locale in JavaScript\nDESCRIPTION: JavaScript code to configure DayJS library for date internationalization in the target language.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/language-packs.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndayjs.locale('xx');\n```\n\n----------------------------------------\n\nTITLE: Hello World Example Using Frontend Extender\nDESCRIPTION: This example shows how to use the Frontend extender to inject a simple JavaScript alert into the forum's document head, demonstrating a basic extension capability.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/start.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\nuse Flarum\\Frontend\\Document;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->content(function (Document $document) {\n            $document->head[] = '<script>alert(\"Hello, world!\")</script>';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Importing from Other Extensions in Frontend JavaScript\nDESCRIPTION: Example of how to import exported items from another Flarum extension in frontend JavaScript code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst tutteLeCoseEsportateDaQualcheEstensione = require('@flarum-tags');\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Tags to Translations in JSX Components\nDESCRIPTION: Demonstrates how to include HTML elements within translations by passing them as parameters to the translator function.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"helpText\">\n  {app.translator.trans('icon_text', {\n    a: <a href=\"https://fortawesome.github.io/Font-Awesome/icons/\" tabindex=\"-1\"/>\n  })}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Delete All Drafts Endpoint in PHP\nDESCRIPTION: This snippet shows the implementation of the DeleteMyDraftsController, which handles deleting all drafts for the current user. It also includes the route definition in extend.php.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass DeleteMyDraftsController extends AbstractDeleteController\n{\n    protected $bus;\n\n    public function __construct(Dispatcher $bus)\n    {\n        $this->bus = $bus;\n    }\n\n    protected function delete(ServerRequestInterface $request)\n    {\n        $actor = RequestUtil::getActor($request);\n\n        $actor->drafts()->delete();\n    }\n}\n\n// from extend.php\n(new Extend\\Routes('api'))\n        ->get('/drafts', 'fof.drafts.index', Controller\\ListDraftsController::class)\n        ->post('/drafts', 'fof.drafts.create', Controller\\CreateDraftController::class)\n        ->delete('/drafts/all', 'fof.drafts.delete.all', Controller\\DeleteMyDraftsController::class)\n        ->patch('/drafts/{id}', 'fof.drafts.update', Controller\\UpdateDraftController::class)\n        ->delete('/drafts/{id}', 'fof.drafts.delete', Controller\\DeleteDraftController::class),\n```\n\n----------------------------------------\n\nTITLE: Creating and Deleting Resources\nDESCRIPTION: Shows how to create new resources and delete existing ones using the store and model methods.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/models.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussion = app.store.createRecord('discussions');\n\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n\ndiscussion.delete().then(done);\n```\n\n----------------------------------------\n\nTITLE: Migrating from attrs() method to elementAttrs()\nDESCRIPTION: Example showing how to migrate from the deprecated attrs() method to the new elementAttrs() method for providing attributes to the top-level element in a component.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends Component {\n  view() {\n    return <div {...this.attrs()}><p>Hello World!</p></div>;\n  }\n\n  attrs() {\n    return {\n      className: 'SomeClass',\n      onclick: () => console.log('click'),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Top-level Translation Key Namespaces in YAML\nDESCRIPTION: Examples of top-level namespaces for translation keys in Flarum. These keys indicate which component uses the translation, with core and validation being fixed namespaces for Flarum's non-extension components.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncore:        # Translations used by the Flarum core\nvalidation:  # Translations used by Laravel's validator\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPStan for Flarum Extensions\nDESCRIPTION: This NEON configuration file sets up PHPStan for a Flarum extension, specifying analysis level, paths to analyze, and other parameters.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_1\n\nLANGUAGE: neon\nCODE:\n```\nincludes:\n  - vendor/flarum/phpstan/extension.neon\n\nparameters:\n  # The level will be increased in Flarum 2.0\n  level: 5\n  paths:\n    - src\n    - extend.php\n  excludePaths:\n    - *.blade.php\n  checkMissingIterableValueType: false\n  databaseMigrationsPath: ['migrations']\n```\n\n----------------------------------------\n\nTITLE: Updated Modal Usage in Mithril 2\nDESCRIPTION: Comparison of old and new ways to show modals in Mithril 2, demonstrating the shift from passing component instances to passing component classes with separate attrs.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Old way\napp.modal.show(new LoginModal(identification: 'prefilledUsername'));\n\n// New way\napp.modal.show(LoginModal, {identification: 'prefilledUsername'});\n```\n\n----------------------------------------\n\nTITLE: Using attrs() Method in Mithril Component\nDESCRIPTION: This snippet shows how to define an `attrs` method in a custom Mithril component and how it has now been renamed to `elementAttrs`. The purpose of this method is to provide additional attributes to the top-level child vnode returned by `view()`.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends Component {\n  view() {\n    return <div {...this.attrs()}><p>Hello World!</p></div>;\n  }\n\n  attrs() {\n    return {\n      className: 'SomeClass',\n      onclick: () => console.log('click'),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from attrs() to elementAttrs() in Flarum Components\nDESCRIPTION: Example of how to update component code that previously used the attrs() method, which is now replaced with elementAttrs() to avoid conflicts with Mithril 2's this.attrs property.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends Component {\n  view() {\n    return <div {...this.attrs()}><p>Hello World!</p></div>;\n  }\n\n  attrs() {\n    return {\n      className: 'SomeClass',\n      onclick: () => console.log('click'),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Flarum Extension via Composer\nDESCRIPTION: Command for users to install your published Flarum extension using Composer. This is the standard method for adding extensions to a Flarum installation.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/distribution.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require vendor/package\n```\n\n----------------------------------------\n\nTITLE: Mocking User and Request Objects for Authorization Testing\nDESCRIPTION: Shows how to mock user and request objects for testing authorization in Flarum extensions. This pattern allows testing permission-based functionality.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n    $this->actor = m::mock(User::class);\n    $request = m::mock(Request::class)->makePartial();\n    $request->shouldReceive('getAttribute->getActor')->andReturn($this->actor);\n    $this->actor->shouldReceive('SOME PERMISSION')->andReturn(true/false);\n```\n\n----------------------------------------\n\nTITLE: Defining Special Translation Key Namespaces in YAML\nDESCRIPTION: This snippet shows special namespaces for translations that require special handling. The 'ref' namespace is for reusable translations, while 'group' is for default group names.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nref:         # Translations referenced by more than one key.\ngroup:       # Translations used as default group names.\n```\n\n----------------------------------------\n\nTITLE: Incorrect Component Instance Storage Example in Mithril 2\nDESCRIPTION: Shows an anti-pattern of storing component instances that is no longer supported in Mithril 2. The parent component creates and stores a child component instance, which breaks with Mithril 2's redrawing algorithms.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nclass ChildComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return <p>{this.counter}</p>;\n  }\n}\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.child = new ChildComponent();\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.child.counter += 1}></button>\n        {this.child.render()}\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Mithril 0.2 Component to Mithril 2.0\nDESCRIPTION: Example showing how to update component lifecycle methods from Mithril 0.2 to Mithril 2.0, including init/config to oninit/oncreate/onupdate conversion and handling component updates and removal.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass OldMithrilComponent extends Component {\n  init() {\n    console.log('Code to run when component instance created, but before attached to the DOM.');\n  }\n\n  config(element, isInitialized) {\n    console.log('Code to run on every redraw AND when the element is first attached');\n\n    if (isInitialized) return;\n\n    console.log('Code to execute only once when components are first created and attached to the DOM');\n\n    context.onunload = () => {\n      console.log('Code to run when the component is removed from the DOM');\n    }\n  }\n\n  view() {\n    if (dontRedraw()) return { subtree: 'retain' };\n\n    return <p>Hello World!</p>;\n  }\n}\n\nclass NewMithrilComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    console.log('Code to run when component instance created, but before attached to the DOM.');\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    console.log('Code to run when components are first created and attached to the DOM');\n  }\n\n  onbeforeupdate(vnode, oldVnode) {\n    super.onbeforeupdate(vnode);\n\n    console.log('Code to run BEFORE diffing / redrawing components on every redraw');\n\n    if (dontRedraw()) return false;\n  }\n\n  onupdate(vnode) {\n    console.log('Code to run on every redraw AFTER the DOM is updated.');\n  }\n\n  onbeforeremove(vnode) {\n    return Promise.resolve();\n  }\n\n  onremove(vnode) {\n      console.log('Code to run when the component is removed from the DOM');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flarum Locale in composer.json\nDESCRIPTION: This JSON snippet shows how to configure the flarum-locale object in the composer.json file for a Flarum translation package. It specifies the language code and title within the extra section.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/translate.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"flarum-locale\": {\n  \"code\": \"en\",\n  \"title\": \"English\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing from Other Flarum Extensions in Frontend\nDESCRIPTION: This JavaScript code demonstrates how to import exported items from other Flarum extensions in the frontend after configuring webpack.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst allThingsExportedBySomeExtension = require('@flarum-tags');\n```\n\n----------------------------------------\n\nTITLE: Deleting Resources in JavaScript\nDESCRIPTION: Shows how to delete a resource by calling the delete method on a model instance. The method returns a Promise that resolves when the deletion is complete.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.delete().then(done);\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Visibility Logic with orWhere in PostPolicy\nDESCRIPTION: Example showing how to create extensible visibility logic in a policy class. This demonstrates allowing private posts to be visible under certain conditions defined by extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, we want to ensure that private posts aren't visible to users by default.\n// The simplest way to do this would be:\n$query->where('posts.is_private', false);\n\n// However, we recognize that some extensions might have valid use cases for showing private posts.\n// So instead, we include all posts that aren't private, AND all private posts desired by extensions\n$query->where(function ($query) use ($actor) {\n    $query->where('posts.is_private', false)\n        ->orWhere(function ($query) use ($actor) {\n            $query->whereVisibleTo($actor, 'viewPrivate');\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Tag Placeholders in YAML Translations\nDESCRIPTION: Shows how to define HTML tag locations in translation strings that allow translators to reposition tags as needed for different languages.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nicon_text: \"Enter the name of any <a>FontAwesome</a> icon class, <em>without</em> the <code>fa-</code> prefix.\"\n```\n\n----------------------------------------\n\nTITLE: Loading CSS Files in Flarum\nDESCRIPTION: This snippet shows how to include a CSS file into the Flarum frontend using the Frontend extender's css method in conjunction with js.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less')\n```\n\n----------------------------------------\n\nTITLE: Generating a Console Command with Flarum CLI\nDESCRIPTION: This command shows how to use the Flarum CLI tool to automatically generate and register a console command, which simplifies the development process.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/console.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend command\n```\n\n----------------------------------------\n\nTITLE: Including Variables in Flarum Translations with JSX\nDESCRIPTION: This snippet demonstrates how to pass variables to translations in JSX components. The variable is passed as part of an object in the second parameter to app.translator.trans().\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx harmony\nCODE:\n```\n{LinkButton.component({\n  icon: 'search',\n  children: app.translator.trans('all_discussions_button', {query}),\n  href: app.route('index', {q: query})\n})}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Titles in Flarum\nDESCRIPTION: Demonstrates setting page titles using app.setTitle() and app.setTitleCount() in page lifecycle hooks\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/frontend-pages.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport Page from 'flarum/common/components/Page';\n\n\nexport default class CustomPage extends Page {\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    app.setTitle(\"Cool Page\");\n    app.setTitleCount(0);\n  }\n\n  view() {\n    // ...\n  }\n}\n\nexport default class CustomPageLoadsData extends Page {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    app.store.find(\"users\", 1).then(user => {\n      app.setTitle(user.displayName());\n      app.setTitleCount(0);\n    })\n  }\n\n  view() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementando una Clase con Repositorio de Ajustes en PHP\nDESCRIPTION: Muestra cómo inyectar el SettingsRepositoryInterface en una clase PHP para acceder a las configuraciones del foro. Utiliza inyección de dependencias a través del contenedor de servicios de Laravel.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace acme\\HelloWorld\\ExampleDir;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\n\nclass ClassInterfacesWithSettings\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP String Slug Deprecation\nDESCRIPTION: Reference to the deprecated string slugging method and its replacement from Illuminate Support.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b12.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nFlarum\\Util\\Str::slug()\nIlluminate\\Support\\Str::slug()\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Naming Conventions for Flarum\nDESCRIPTION: Specifies the CSS naming convention used in Flarum, which follows SUIT CSS naming conventions with a specific format for components, descendants, and modifiers.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/contributing.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### CSS\n\nFlarum's CSS classes roughly follow the [SUIT CSS naming conventions](https://github.com/suitcss/suit/blob/master/doc/naming-conventions.md) using the format `.ComponentName-descendentName--modifierName`.\n```\n\n----------------------------------------\n\nTITLE: Exporting the Extension Module in JavaScript\nDESCRIPTION: Shows how to export the extension module from the entry index.js file, which is required for Flarum to recognize and apply the extensions to the frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport { default as extend } from './extend';\n```\n\n----------------------------------------\n\nTITLE: Using withAttr Helper for Form Input Handling in Flarum\nDESCRIPTION: Example of using the withAttr utility for simplified form processing in Flarum. This helper provides a cleaner way to update form values from input events.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/forms.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\nimport withAttr from 'flarum/common/utils/withAttr';\n\nconst value = Stream();\n\n// With a stream\n<input type=\"text\" value={value()} oninput={withAttr('value', value)}></input>\n\n// With any callable\n<input type=\"text\" value={value()} oninput={withAttr('value', (currValue) => {\n  // Some custom logic here\n})}></input>\n```\n\n----------------------------------------\n\nTITLE: Flarum Extension Initialization\nDESCRIPTION: Basic JavaScript entry point for a Flarum extension showing initialization and extension setup.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extend, override } from 'flarum/common/extend';\n\napp.initializers.add('acme-flarum-hello-world', function(app) {\n  // Your Extension Code Here\n  console.log(\"EXTENSION NAME is working!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Serializer in Flarum (PHP)\nDESCRIPTION: Shows how to create a new serializer class for converting Eloquent models to JSON:API format in Flarum. This example defines a DiscussionSerializer with a default attribute and a relationship.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\AbstractSerializer;\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nclass DiscussionSerializer extends AbstractSerializer\n{\n    protected $type = 'discussions';\n\n    protected function getDefaultAttributes($discussion)\n    {\n        return [\n            'title' => $discussion->title,\n        ];\n    }\n\n    protected function user($discussion)\n    {\n        return $this->hasOne($discussion, UserSerializer::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Frontend Imports in JavaScript\nDESCRIPTION: Demonstrates the new import syntax for Flarum components using namespaces. This change improves code organization and prepares for future updates.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Component from 'flarum/common/Component'\n```\n\n----------------------------------------\n\nTITLE: Legacy Component Instance Storage Pattern\nDESCRIPTION: Example showing the old pattern of storing component instances that is no longer recommended due to Mithril's optimization requirements.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass ChildComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return <p>{this.counter}</p>;\n  }\n}\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.child = new ChildComponent();\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.child.counter += 1}></button>\n        {this.child.render()}\n      </div>\n    )\n  }\n```\n\n----------------------------------------\n\nTITLE: Accessing Cached Store Data in JavaScript\nDESCRIPTION: Shows how to access cached data from the store using all and getById methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussions = app.store.all('discussions');\nconst discussion = app.store.getById('discussions', 123);\n```\n\n----------------------------------------\n\nTITLE: View Configuration in PHP\nDESCRIPTION: Setup for view namespace and directory configuration using the View extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views')\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Migration Structure in Flarum\nDESCRIPTION: Template for creating migrations in Flarum showing the required structure with up and down functions that utilize the Laravel schema builder.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Schema\\Builder;\n\nreturn [\n    'up' => function (Builder $schema) {\n        // up migration\n    },\n    'down' => function (Builder $schema) {\n        // down migration\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Utilizzo di Stream in Flarum per Gestione Dati Form\nDESCRIPTION: Dimostrazione dell'uso base di Stream in Flarum per gestire i dati dei form. Stream è una struttura dati utilizzata per wrappare i valori dei form e facilitarne l'aggiornamento.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/forms.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport Stream from 'flarum/utils/Stream';\n\n\nconst value = Stream(\"hello!\");\nvalue() === \"hello!\"; // true\nvalue(\"world!\");\nvalue() === \"world!\"; // true\n```\n\n----------------------------------------\n\nTITLE: Defining a New Frontend Model in JavaScript\nDESCRIPTION: Shows how to create a new frontend model class by extending the base Model class. Demonstrates defining attributes with optional transformers and relationships like hasOne and hasMany.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport Model from 'flarum/common/Model';\n\nexport default class Tag extends Model {\n  title = Model.attribute('title');\n  createdAt = Model.attribute('createdAt', Model.transformDate);\n  parent = Model.hasOne('parent');\n  discussions = Model.hasMany('discussions');\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Language Pack Extension in PHP\nDESCRIPTION: Basic PHP code to declare a Flarum language pack extension using the LanguagePack extender class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/language-packs.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn new Flarum\\Extend\\LanguagePack();\n```\n\n----------------------------------------\n\nTITLE: Field Validation Configuration in PHP\nDESCRIPTION: Shows how to implement field validation rules for draft resources, including length constraints for title and content fields based on MySQL field types.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nclass DraftResource extends Resource\\AbstractDatabaseResource\n{\n    ...\n\n    public function fields(): array\n    {\n        return [\n            Schema\\Str::make('title')\n                ->nullable()\n                ->writable()\n                ->maxLength(255),\n            Schema\\Str::make('content')\n                ->requiredOnCreate()\n                ->maxLength(65535)\n                ->writable(),\n            ...\n        ];\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit for Flarum Unit Tests\nDESCRIPTION: XML configuration for PHPUnit to run unit tests. Specifies test suite directory and includes Mockery listener.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n\n    <testsuites>\n        <testsuite name=\"Flarum Unit Tests\">\n            <directory suffix=\"Test.php\">./unit</directory>\n        </testsuite>\n    </testsuites>\n    <listeners>\n        <listener class=\"\\Mockery\\Adapter\\Phpunit\\TestListener\"></listener>\n    </listeners>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub Actions via Flarum CLI\nDESCRIPTION: Command for using the Flarum CLI to automatically add and update GitHub Actions workflows to an extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra githubActions\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flarum System Information\nDESCRIPTION: Command to display comprehensive system information about the Flarum installation, which is useful for diagnosing issues.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/troubleshoot.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum info\n```\n\n----------------------------------------\n\nTITLE: Declaring Flarum Language Pack in PHP\nDESCRIPTION: This snippet shows how to declare a Flarum language pack using the LanguagePack extender in PHP. It's a simple instantiation of the LanguagePack class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/language-packs.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn new Flarum\\Extend\\LanguagePack();\n```\n\n----------------------------------------\n\nTITLE: Adding Columns to Existing Table in Flarum Migration\nDESCRIPTION: Illustrates the use of Migration::addColumns helper to add new columns to an existing table in a Flarum database migration.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nreturn Migration::addColumns('users', [\n    'email' => ['string', 'nullable' => true],\n    'discussion_count' => ['integer', 'unsigned' => true]\n]);\n```\n\n----------------------------------------\n\nTITLE: Basic Translation Method in JavaScript\nDESCRIPTION: This JavaScript snippet initializes a Flarum extension and shows how to use the translator to display a simple alert with a translation string.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/i18n.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.initializers.add('acme-hello-world', function() {\n  alert(app.translator.trans('acme-hello-world.alert.hello_text'));\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Extension Page for Flarum Extension\nDESCRIPTION: Shows how to register a custom extension page for a Flarum extension using the ExtensionData API.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/admin.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport StarPage from './components/StarPage';\n\napp.initializers.add('interstellar', function(app) {\n\n  app.extensionData\n    .for('acme-interstellar')\n    .registerPage(StarPage);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum Testing Library with Composer\nDESCRIPTION: Command to install the flarum/testing library as a development dependency using Composer.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/testing:^1.0\n```\n\n----------------------------------------\n\nTITLE: Using Modal Stack in TypeScript/JavaScript\nDESCRIPTION: Example showing how to display stacked modals in Flarum's frontend, allowing multiple modals to be open simultaneously.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-1_x.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.modal.show(ModalComponent, { attrs }, true)\n```\n\n----------------------------------------\n\nTITLE: Executing Flarum CLI Model Creation Commands\nDESCRIPTION: Commands to automatically generate backend and frontend models using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend model\n$ flarum-cli make frontend model\n```\n\n----------------------------------------\n\nTITLE: Implementing Extenders in PHP for Flarum Beta 8\nDESCRIPTION: Example of using the new extender concept in Flarum Beta 8. This code demonstrates how to set up frontend assets, routes, and event subscribers in the extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b8.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less')\n        ->route('/t/{slug}', 'tag')\n        ->route('/tags', 'tags'),\n\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\AddForumTagsRelationship::class);\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend GitHub Actions Workflow\nDESCRIPTION: YAML configuration for setting up backend workflow in a Flarum extension. This reuses a predefined workflow from the Flarum framework repository with options for PHPUnit testing and static analysis.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Backend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_backend.yml@main\n    with:\n      # Different types of jobs\n      enable_backend_testing: true\n      enable_phpstan: false\n\n      # Additional parameters\n      backend_directory: .\n```\n\n----------------------------------------\n\nTITLE: Defining Database Column Naming Conventions in Flarum\nDESCRIPTION: Guidelines for naming database columns in Flarum, including conventions for datetime fields, counts, foreign keys, and boolean fields.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/contributing.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* DATETIME or TIMESTAMP: `{verbed}_at` (eg. created_at, read_at) or `{verbed}_until` (eg. suspended_until)\n* INT that is a count: `{noun}_count` (eg. comment_count, word_count)\n* Foreign key: `{verbed}_{entity}_id` (eg. hidden_user_id)\n    * Verb can be omitted for primary relationship (eg. post author is just `user_id`)\n* BOOL: `is_{adjective}` (eg. is_locked)\n```\n\n----------------------------------------\n\nTITLE: Using Translator in JavaScript\nDESCRIPTION: Shows how to use the app.translator.trans() method to reference a translation in JavaScript code for a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('acme-hello-world', function() {\n  alert(app.translator.trans('acme-hello-world.alert.hello_text'));\n});\n```\n\n----------------------------------------\n\nTITLE: Composer JSON Configuration\nDESCRIPTION: This code snippet shows a sample `composer.json` file used in a Flarum project. It defines project metadata, package dependencies, and configuration options for Composer, and dictates which packages and versions of those packages need to be installed for the project to run.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/composer.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // 以下章节大部分只是关于包的元数据。\n    // 对论坛管理员来说，这并不重要。\n    \"name\": \"flarum/flarum\",\n    \"description\": \"Delightfully simple forum software.\",\n    \"type\": \"project\",\n    \"keywords\": [\n        \"forum\",\n        \"discussion\"\n    ],\n    \"homepage\": \"https://flarum.org/\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Flarum\",\n            \"email\": \"info@flarum.org\",\n            \"homepage\": \"https://flarum.org/team\"\n        }\n    ],\n    \"support\": {\n        \"issues\": \"https://github.com/flarum/core/issues\",\n        \"source\": \"https://github.com/flarum/flarum\",\n        \"docs\": \"https://flarum.org/docs/\"\n    },\n    // 元数据结束\n\n    // 下面是我们最关心的部分\n    // 这是我们想要的包清单和每个包的版本。\n    // 我们会简单略过他们\n    \"require\": {\n        \"flarum/core\": \"^1.0\",\n        \"flarum/approval\": \"*\",\n        \"flarum/bbcode\": \"*\",\n        \"flarum/emoji\": \"*\",\n        \"flarum/lang-english\": \"*\",\n        \"flarum/flags\": \"*\",\n        \"flarum/likes\": \"*\",\n        \"flarum/lock\": \"*\",\n        \"flarum/markdown\": \"*\",\n        \"flarum/mentions\": \"*\",\n        \"flarum/nicknames\": \"*\",\n        \"flarum/pusher\": \"*\",\n        \"flarum/statistics\": \"*\",\n        \"flarum/sticky\": \"*\",\n        \"flarum/subscriptions\": \"*\",\n        \"flarum/suspend\": \"*\",\n        \"flarum/tags\": \"*\"\n    },\n\n    // Composer 的配置多种多样。 这是合理的默认值。\n    // 您可在 https://getcomposer.org/doc/06-config.md 找到选项列表。\n    \"config\": {\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true\n    },\n\n    // 如果 composer 可以找到一个软件包的稳定（而非测试）版本，\n    // 它应当使用它。 一般来说，生产站点不应运行测试版软件，\n    // 除非你明白自己在做什么。\n    \"prefer-stable\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Workflow for Flarum Extensions\nDESCRIPTION: YAML configuration for setting up a backend workflow in a Flarum extension. It uses a predefined reusable workflow from the Flarum framework repository.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Backend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_backend.yml@main\n    with:\n      # Different types of jobs\n      enable_backend_testing: true\n      enable_phpstan: false\n\n      # Additional parameters\n      backend_directory: .\n```\n\n----------------------------------------\n\nTITLE: Basic Translation Key Example in YAML\nDESCRIPTION: Demonstrates the syntax for a simple translation key and value in a YAML locale file, showing the basic structure needed for Flarum translations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsample_key: This is a sample translation.\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub Actions via Flarum CLI\nDESCRIPTION: Command to automatically add and update GitHub Actions workflows using the Flarum CLI tool\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra githubActions\n```\n\n----------------------------------------\n\nTITLE: Updating Mithril Link Component Usage\nDESCRIPTION: Example showing how to update internal link handling from Mithril 0.2's config approach to Mithril 2.0's Link component.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\n<a href=\"/path\" config={m.route}>Link Content</a>\n\n// Mithril 2\nimport Link from 'flarum/components/Link';\n\n<Link href=\"/path\">Link Content</Link>\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis via Composer\nDESCRIPTION: Command to execute PHPStan static analysis for a Flarum extension using the Composer script.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer analyse:phpstan\n```\n\n----------------------------------------\n\nTITLE: Updating Backend Translation Usage in PHP\nDESCRIPTION: Demonstrates how to update backend translation calls from using transChoice to the new trans method with pluralization support and removal of curly braces for keys.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Old method\n$translator->transChoice('some-translation', $guestCount, ['{host}' => $hostName]);\n\n// New method\n$translator->trans('some-translation', ['host' => $hostName, 'guestCount' => $guestCount]);\n```\n\n----------------------------------------\n\nTITLE: Using Link Component for Internal Navigation in Flarum (JSX)\nDESCRIPTION: Demonstrates how to use Flarum's Link component for creating internal navigation links within the single-page application. The examples show basic usage, route generation, and handling external links with the external attribute.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'flarum/common/components/Link';\n\n// Link can be used just like any other component:\n<Link href=\"/route/known/to/mithril\">Hello World!</Link>\n\n// You'll frequently use Link with generated routes:\n<Link href={app.route('settings')}>Hello World!</Link>\n\n// Link can even generate external links with the external attr:\n<Link external={true} href=\"https://google.com\">Hello World!</Link>\n\n// The above example with external = true is equivalent to:\n<a href=\"https://google.com\">Hello World!</a>\n// but is provided for flexibility: sometimes you might have links\n// that are conditionally internal or external.\n```\n\n----------------------------------------\n\nTITLE: Generating Routes with Flarum CLI\nDESCRIPTION: Command to automatically generate backend routes using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend route\n```\n\n----------------------------------------\n\nTITLE: Accessing Model Properties in JavaScript\nDESCRIPTION: Demonstrates how to access attributes and relationships on model instances. Flarum's model instances provide methods for accessing data such as IDs, attributes, and related models.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst id = discussion.id();\nconst title = discussion.title();\nconst posts = discussion.posts(); // array of Post models\n```\n\n----------------------------------------\n\nTITLE: Defining Italian Translation Keys with Pluralization Support in YAML\nDESCRIPTION: Example YAML configuration showing how to structure translation keys that support pluralization in Italian. The snippet demonstrates singular and plural forms for 'mentioned_by' text with comments indicating pluralization capability.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nmentioned_by_text: \"{users} ha risposto.\"       # Può essere pluralizzato...\nmentioned_by_self_text: \"{users} hanno risposto.\"  # Può essere pluralizzato...\n```\n\n----------------------------------------\n\nTITLE: Preference Saving in Mithril 0.2 (Old Pattern)\nDESCRIPTION: The previous way of saving user preferences using the preferenceSaver method in Flarum with Mithril 0.2.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Old way\nSwitch.component({\n  children: app.translator.trans('core.forum.settings.privacy_disclose_online_label'),\n  state: this.user.preferences().discloseOnline,\n  onchange: (value, component) => {\n    this.user.pushAttributes({ lastSeenAt: null });\n    this.preferenceSaver('discloseOnline')(value, component);\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing ExtensionData for Flarum Extension\nDESCRIPTION: Sets up the ExtensionData API for a Flarum extension named 'acme-interstellar'. This is the first step in configuring the admin panel for an extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/admin.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('interstellar', function(app) {\n\n  app.extensionData\n    .for('acme-interstellar')\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Flarum Locale in composer.json\nDESCRIPTION: This JSON snippet shows how to configure the flarum-locale object in the composer.json file for a Flarum translation package. It specifies the language code and title, which are essential for Flarum to recognize and use the translation package.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/translate.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"flarum-locale\": {\n  \"code\": \"en\",\n  \"title\": \"English\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Optional Extension Dependency in Flarum Backend\nDESCRIPTION: This PHP code shows how to check if an optional extension dependency is enabled in the Flarum backend using the ExtensionManager class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extension\\ExtensionManager;\n\nclass SomeClass {\n    public function __construct(ExtensionManager $extensions)\n    {\n        $this->extensions = $extensions;\n    }\n\n    public function someMethod()\n    {\n        if ($this->extensions->isEnabled('some-extension-id')) {\n            // do something.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Routes with Flarum CLI\nDESCRIPTION: Command line instruction for automatically generating backend routes using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/routes.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend route\n```\n\n----------------------------------------\n\nTITLE: Accessing Cached Store Data in JavaScript\nDESCRIPTION: Shows how to access cached data from the frontend store\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussions = app.store.all('discussions');\nconst discussion = app.store.getById('discussions', 123);\n```\n\n----------------------------------------\n\nTITLE: Updating Frontend Translation Calls\nDESCRIPTION: Example of migrating from transChoice to trans method in frontend JavaScript code using ES6 key-property shorthand notation\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.translator.transChoice('some-translation', guestCount, {host: hostName});\n```\n\nLANGUAGE: javascript\nCODE:\n```\napp.translator.trans('some-translation', {host: hostName, guestCount });\n```\n\n----------------------------------------\n\nTITLE: Registering CSS Asset in Flarum Extension\nDESCRIPTION: PHP code to register both JavaScript and CSS/LESS assets for a Flarum extension using the Frontend extender. This adds custom styles to the forum frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less')\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to create a `jest.config.cjs` file that imports and executes the `@flarum/jest-config` package. This centralizes Jest configuration and allows for consistent testing settings across Flarum extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/testing.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('@flarum/jest-config')();\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Binding with Streams in JSX\nDESCRIPTION: Demonstrates the use of bidirectional binding (bidi) with Streams for simplified form input handling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/forms.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\n\nconst value = Stream();\n\n// Without bidi\n<input type=\"text\" value={value()} oninput={e => value(e.target.value)}></input>\n\n// With bidi\n<input type=\"text\" bidi={value}></input>\n```\n\n----------------------------------------\n\nTITLE: Configuring DayJS Locale in JavaScript\nDESCRIPTION: JavaScript code to configure the DayJS library for date internationalization. This should be placed in a config.js file in the locale directory of the language pack.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/language-packs.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndayjs.locale('xx');\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Visibility Scoper for Private Posts\nDESCRIPTION: Example implementation of a scoper class that grants visibility to private posts for users with the appropriate permission. This demonstrates how extensions can modify the visibility logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopePostVisibility\n{\n    public function __invoke(User $actor, $query)\n    {\n      if ($actor->can('posts.viewPrivate')) {\n        $query->whereRaw(\"1=1\");\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend Model Property Access\nDESCRIPTION: Demonstrates how to access model attributes and relationships in the frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = discussion.id();\nconst title = discussion.title();\nconst posts = discussion.posts(); // array of Post models\n```\n\n----------------------------------------\n\nTITLE: Transitioning to AffixedSidebar Util Component\nDESCRIPTION: This code shows the transition from using the `affixSidebar` util to the new `AffixedSidebar` component, ensuring the sidebar is correctly affixed and adaptive to layout.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nclass OldWay extends Component {\n  view() {\n    return <div>\n      <div className=\"container\">\n        <div className=\"sideNavContainer\">\n          <nav className=\"sideNav\" config={affixSidebar}>\n            <p>Affixed Sidebar</p>\n          </nav>\n          <div className=\"sideNavOffset\">Actual Page Content</div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n\nclass NewWay extends Component {\n  view() {\n    return <div>\n      <div className=\"container\">\n        <div className=\"sideNavContainer\">\n          <AffixedSidebar>\n            <nav className=\"sideNav\">\n              <p>Affixed Sidebar</p>\n            </nav>\n          </AffixedSidebar>\n          <div className=\"sideNavOffset\">Actual Page Content</div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events in PHP\nDESCRIPTION: Illustrates how to dispatch events in Flarum by injecting the Illuminate\\Contracts\\Events\\Dispatcher and calling its dispatch method.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Post\\Event\\Deleted;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\n\nclass SomeClass\n{\n    /**\n      * @var Dispatcher\n      */\n    protected $events;\n\n    /**\n      * @param Dispatcher $events\n      */\n    public function __construct(Dispatcher $events)\n    {\n        $this->events = $events;\n    }\n\n    public function someMethod()\n    {\n        // Logic\n        $this->events->dispatch(\n            new Deleted($somePost, $someActor)\n        );\n        // More Logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting the Extend Module in JavaScript\nDESCRIPTION: Example of exporting the extend module from an entry file. This ensures that the model extensions are properly loaded by the Flarum framework.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexport { default as extend } from './extend';\n```\n\n----------------------------------------\n\nTITLE: Asset URL Pattern in Flarum\nDESCRIPTION: Demonstrates the URL pattern for accessing extension assets when using the default storage driver. Assets are served from a predictable URL structure based on the forum URL and extension ID.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/assets.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://FORUM_URL/assets/extensions/EXTENSION_ID/file.path\n```\n\n----------------------------------------\n\nTITLE: Deleting Resources in Javascript\nDESCRIPTION: This code snippet demonstrates how to delete a resource by calling the `delete` method on a model instance. It shows how to trigger the deletion of a resource via the API and handle the resulting promise.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.delete().then(done);\n```\n\n----------------------------------------\n\nTITLE: Framework Interface Reference\nDESCRIPTION: Shows the updated translator interface to use after Laravel translator removal.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nSymfony\\Component\\Translation\\TranslatorInterface\n```\n\n----------------------------------------\n\nTITLE: Custom Frontend Model Definition\nDESCRIPTION: Shows how to create a new frontend model class with attributes and relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport Model from 'flarum/common/Model';\n\nexport default class Tag extends Model {\n  title = Model.attribute('title');\n  createdAt = Model.attribute('createdAt', Model.transformDate);\n  parent = Model.hasOne('parent');\n  discussions = Model.hasMany('discussions');\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Address from Request in Flarum (PHP)\nDESCRIPTION: Demonstrates how to obtain the IP address from a request in Flarum. This method uses the 'ipAddress' attribute of the request object.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$request->getAttribute('ipAddress')\n```\n\n----------------------------------------\n\nTITLE: Validation Errors API Response\nDESCRIPTION: Example JSON error response for validation errors, returned with a 422 HTTP status code. Shows multiple errors for different fields.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"422\",\n      \"code\": \"validation_error\",\n      \"detail\": \"The username has already been taken.\",\n      \"source\":{\n        \"pointer\":\"\\/data\\/attributes\\/username\"\n      }\n    },\n    {\n      \"status\": \"422\",\n      \"code\": \"validation_error\",\n      \"detail\": \"The email has already been taken.\",\n      \"source\": {\n        \"pointer\":\"\\/data\\/attributes\\/email\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Extension Dependencies in Composer JSON\nDESCRIPTION: This PHP snippet illustrates how to specify extension dependencies in a Flarum extension's composer.json file. By defining required packages, the Flarum framework will ensure the dependencies are enabled before allowing the parent extension to be enabled.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n{\n  \"name\": \"my/extension\",\n  \"description\": \"Cool New Extension\",\n  \"type\": \"flarum-extension\",\n  \"license\": \"MIT\",\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.14\",\n    \"flarum/tags\": \"^0.1.0-beta.14\",  // Will mark tags as a dependency\n    \"flarum/mentions\": \"^0.1.0-beta.14\"  // Will mark mentions as a dependency\n  }\n  // other config\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Translation Key Suffixes for User Interface Elements in YAML\nDESCRIPTION: This code block provides a list of suffixes used in translation keys to indicate how the translation is used in the user interface. It covers various UI elements like buttons, links, and labels.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n_button:        # Used for buttons (including dropdown menu items).\n_link:          # Used for links that are not shown graphically as buttons.\n_heading:       # Used for headings in tables and lists.\n_label:         # Used for the names of data fields, checkbox settings, etc.\n_placeholder:   # Used for placeholder text displayed in fields.\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis for Flarum Extensions\nDESCRIPTION: Bash commands to run PHPStan analysis and clear its cache for a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/static-code-analysis.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer analyse:phpstan\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer clear-cache:phpstan && composer analyse:phpstan\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Events in Flarum\nDESCRIPTION: Demonstrates how to create a custom event class in Flarum extensions, using the Deleted event as an example.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Post\\Event;\n\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass Deleted\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var User\n     */\n    public $actor;\n\n    /**\n     * @param Post $post\n     * @param User $user\n     */\n    public function __construct(Post $post, User $actor = null)\n    {\n        $this->post = $post;\n        $this->actor = $actor;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Console Command with Flarum CLI\nDESCRIPTION: This bash command uses the Flarum CLI to automatically generate and register a console command for a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/console.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend command\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving New Resources in Flarum's Frontend\nDESCRIPTION: Illustrates how to create a new resource by creating a new model instance and saving it in JavaScript.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussion = app.store.createRecord('discussions');\n\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Transpiling JavaScript for Flarum Extension\nDESCRIPTION: Commands to install dependencies and compile JavaScript code for a Flarum extension. This process transpiles the source files into browser-ready code.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining Suffixes for Email-Specific Translations in YAML\nDESCRIPTION: Suffixes specifically used for email-related translations in the email namespace, including body and subject.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n_body:          # Utilizzato per il contenuto del messaggio di posta elettronica.\n_subject:       # Utilizzato per la riga dell'oggetto del messaggio di posta elettronica.\n```\n\n----------------------------------------\n\nTITLE: Exporting the Extend Module in Flarum\nDESCRIPTION: Shows how to export the extend module from an entry index.js file, which is necessary for Flarum to apply the extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexport { default as extend } from './extend';\n```\n\n----------------------------------------\n\nTITLE: Frontend Workflow Configuration in YAML\nDESCRIPTION: Configuration for the frontend workflow file (.github/workflows/frontend.yml) that utilizes Flarum's reusable workflow. This setup enables Prettier code formatting and configures necessary parameters for frontend code quality checks.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/github-actions.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Frontend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_frontend.yml@main\n    with:\n      enable_bundlewatch: false\n      enable_prettier: true\n      enable_typescript: false\n\n      frontend_directory: ./js\n      backend_directory: .\n      js_package_manager: yarn\n      main_git_branch: main\n\n    secrets:\n      bundlewatch_github_token: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Implementación de Política Personalizada para Tags en Flarum (PHP)\nDESCRIPTION: Ejemplo de una política personalizada para el modelo Tag en Flarum. Define reglas para iniciar discusiones y añadir tags a discusiones basadas en permisos específicos.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/authorization.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\Access\\AbstractPolicy;\nuse Flarum\\User\\User;\n\nclass TagPolicy extends AbstractPolicy\n{\n    /**\n     * @param User $actor\n     * @param Tag $tag\n     * @return bool|null\n     */\n    public function startDiscussion(User $actor, Tag $tag)\n    {\n        if ($tag->is_restricted) {\n            return $actor->hasPermission('tag'.$tag->id.'.startDiscussion') ? $this->allow() : $this->deny();\n        }\n    }\n\n    /**\n     * @param User $actor\n     * @param Tag $tag\n     * @return bool|null\n     */\n    public function addToDiscussion(User $actor, Tag $tag)\n    {\n        return $this->startDiscussion($actor, $tag);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Translation Suffix Identification in YAML\nDESCRIPTION: This segment shows common suffixes for identifying the purpose of different translations, particularly those related to user interface components. Consistent suffix use simplifies translating and identifying UI elements for localizers, contributing to efficient translation management.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n_button:        # Used for buttons (including dropdown menu items).\n_link:          # Used for links that are not shown graphically as buttons.\n_heading:       # Used for headings in tables and lists.\n_label:         # Used for the names of data fields, checkbox settings, etc.\n_placeholder:   # Used for placeholder text displayed in fields.\n```\n\n----------------------------------------\n\nTITLE: Accessing Filesystem Disks in PHP Controllers\nDESCRIPTION: Demonstrates how to inject and use the Filesystem Factory to access disks in a Flarum controller. This example shows the DeleteLogoController which uses the 'flarum-assets' disk to manage logo files.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/filesystem.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Api\\Controller;\n\nuse Flarum\\Http\\RequestUtil;\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Illuminate\\Contracts\\Filesystem\\Factory;\nuse Illuminate\\Contracts\\Filesystem\\Filesystem;\nuse Laminas\\Diactoros\\Response\\EmptyResponse;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nclass DeleteLogoController extends AbstractDeleteController\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    /**\n     * @var Filesystem\n     */\n    protected $uploadDir;\n\n    /**\n     * @param SettingsRepositoryInterface $settings\n     * @param Factory $filesystemFactory\n     */\n    public function __construct(SettingsRepositoryInterface $settings, Factory $filesystemFactory)\n    {\n        $this->settings = $settings;\n        $this->uploadDir = $filesystemFactory->disk('flarum-assets');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function delete(ServerRequestInterface $request)\n    {\n        RequestUtil::getActor($request)->assertAdmin();\n\n        $path = $this->settings->get('logo_path');\n\n        $this->settings->set('logo_path', null);\n\n        if ($this->uploadDir->exists($path)) {\n            $this->uploadDir->delete($path);\n        }\n\n        return new EmptyResponse(204);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Closure Extender in PHP\nDESCRIPTION: Example of a deprecated approach that used closures in extend.php to subscribe to events. This pattern is no longer supported in Flarum 1.0 as it has been replaced by the extender API.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\FilterDiscussionListByTags::class);\n        $events->subscribe(Listener\\FilterPostsQueryByTag::class);\n        $events->subscribe(Listener\\UpdateTagMetadata::class);\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Flarum Models with CLI\nDESCRIPTION: Shows how to use the Flarum CLI to automatically generate backend and frontend model files.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend model\n$ flarum-cli make frontend model\n```\n\n----------------------------------------\n\nTITLE: Using Mithril Streams for Data Binding\nDESCRIPTION: Example demonstrating basic usage of Mithril's Stream utility for reactive data handling in forms.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/forms.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\n\n\nconst value = Stream(\"hello!\");\nvalue() === \"hello!\"; // true\nvalue(\"world!\");\nvalue() === \"world!\"; // true\n```\n\n----------------------------------------\n\nTITLE: Adding Flarum Scheduler Cron Job\nDESCRIPTION: Cron job entry to run Flarum's scheduler every minute. It changes to the project directory and executes the scheduler, suppressing any output.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/scheduler.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * cd /path-to-your-project && php flarum schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: PHP Model Cast Definition\nDESCRIPTION: Example showing the new recommended way to cast date attributes in Flarum models, replacing the deprecated dateAttribute method.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-1_x.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nModel::cast($attribute, 'datetime')\n```\n\n----------------------------------------\n\nTITLE: Checking for Optional Extension in Frontend JavaScript\nDESCRIPTION: JavaScript code snippet demonstrating how to check if an optional extension is enabled in the frontend using the global flarum.extensions object.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nif ('some-extension-id' in flarum.extensions) {\n    // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Adding View Namespace in Flarum Extension\nDESCRIPTION: Shows how to register a view directory for an extension using the View extender in extend.php. This tells the view factory where to find the extension's template files.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/views.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views'),\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Flarum Migration Structure\nDESCRIPTION: Demonstrates the basic structure of a Flarum migration file with up and down functions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Schema\\Builder;\n\nreturn [\n    'up' => function (Builder $schema) {\n        // up migration\n    },\n    'down' => function (Builder $schema) {\n        // down migration\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Flarum Scheduler Cron Configuration\nDESCRIPTION: Crontab entry to run the Flarum scheduler every minute. This configuration enables automated execution of tasks registered by Flarum extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/scheduler.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * cd /path-to-your-project && php flarum schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Updating Font Awesome Icons for Flarum - General\nDESCRIPTION: This section highlights the upgrades to Font Awesome 5 in Flarum Beta 8, emphasizing the need to use full icon class names with the `flarum/helpers/icon` helper. This change is essential for maintaining the correct display of icons in the UI.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b8.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nThe `flarum/helpers/icon` helper now requires the **full Font Awesome icon class names** to be passed, eg. `fas fa-bolt`.\n```\n\n----------------------------------------\n\nTITLE: Writing Unit Tests for Flarum Frontend Functions\nDESCRIPTION: Demonstrates how to write unit tests for frontend utility functions in Flarum using Jest. The example tests the 'abbreviateNumber' function.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport abbreviateNumber from '../../../../src/common/utils/abbreviateNumber';\n\ntest('does not change small numbers', () => {\n  expect(abbreviateNumber(1)).toBe('1');\n});\n\ntest('abbreviates large numbers', () => {\n  expect(abbreviateNumber(1000000)).toBe('1M');\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n});\n\ntest('abbreviates large numbers with decimal places', () => {\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n  expect(abbreviateNumber(13234)).toBe('13.2K');\n});\n```\n\n----------------------------------------\n\nTITLE: Renaming Columns in Flarum Migrations\nDESCRIPTION: Example of using the Migration helper to rename columns in an existing table using an associative array to map old column names to new ones.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::renameColumns('users', ['from' => 'to']);\n```\n\n----------------------------------------\n\nTITLE: Reading Settings in Flarum\nDESCRIPTION: This code shows how to read a setting value using the get() method of the SettingsRepositoryInterface. It includes details about the parameters for the get method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->settings->get('forum_title')\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Frontend Testing\nDESCRIPTION: Adds necessary configuration to package.json for running frontend tests using Jest in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"scripts\": {\n    ...,\n    \"test\": \"yarn node --experimental-vm-modules $(yarn bin jest)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from affixSidebar to AffixedSidebar Component\nDESCRIPTION: Comparison of old and new approaches for creating affixed sidebars, showing the migration from the affixSidebar util to the AffixedSidebar component.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nclass OldWay extends Component {\n  view() {\n    return <div>\n      <div className=\"container\">\n        <div className=\"sideNavContainer\">\n          <nav className=\"sideNav\" config={affixSidebar}>\n            <p>Affixed Sidebar</p>\n          </nav>\n          <div className=\"sideNavOffset\">Actual Page Content</div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n\nclass NewWay extends Component {\n  view() {\n    return <div>\n      <div className=\"container\">\n        <div className=\"sideNavContainer\">\n          <AffixedSidebar>\n            <nav className=\"sideNav\">\n              <p>Affixed Sidebar</p>\n            </nav>\n          </AffixedSidebar>\n          <div className=\"sideNavOffset\">Actual Page Content</div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Frontend Testing Infrastructure with Flarum CLI\nDESCRIPTION: Command for using the Flarum CLI to automatically add and update frontend testing infrastructure to an extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra frontendTesting\n```\n\n----------------------------------------\n\nTITLE: Defining Suffixes for Informative Text Translations in YAML\nDESCRIPTION: List of suffixes used for translations of informative or descriptive text elements, such as confirmations, messages, general text, titles, and tooltips.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n_confirmation:  # Utilizzato per i messaggi visualizzati per confermare un'operazione.\n_message:       # Utilizzato per i messaggi che mostrano il risultato di un'operazione.\n_text:          # Utilizzato per qualsiasi testo che non sia un messaggio, un titolo o una descrizione comando.\n_title:         # Utilizzato per il testo visualizzato come titolo di una pagina o modale.\n_tooltip:       # Utilizzato per il testo visualizzato quando l'utente passa con il mouse su qualcosa.\n```\n\n----------------------------------------\n\nTITLE: Using Queue Support in PHP\nDESCRIPTION: Illustrates how to use the new queue support in Flarum Beta 10, which incorporates Laravel's illuminate/queue package for offloading long-running tasks.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b10.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Queue;\n\nQueue::push(new SendEmailJob($user));\n```\n\n----------------------------------------\n\nTITLE: Create User Request\nDESCRIPTION: Example request body for creating a new user via POST /api/users endpoint, showing required user attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"attributes\": {\n      \"username\": \"Flarum\",\n      \"email\": \"flarum@example.com\",\n      \"password\": \"correcthorsebatterystaple\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Backend Translations in PHP for Flarum 1.0\nDESCRIPTION: Shows how to update backend translation calls from using transChoice to the new trans method without curly braces for keys.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Old method\n$translator->transChoice('some-translation', $guestCount, ['{host}' => $hostName]);\n\n// New method\n$translator->trans('some-translation', ['host' => $hostName, 'guestCount' => $guestCount]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Dependencies in composer.json\nDESCRIPTION: Shows how to specify optional extension dependencies in composer.json. Optional dependencies will be initialized before your extension if enabled, but aren't required.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extra\": {\n    \"flarum-extension\": {\n      \"optional-dependencies\": [\n        \"package/name1\",\n        \"package/name2\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum Testing Library with Composer\nDESCRIPTION: This command installs the flarum/testing library as a development dependency for automated testing of Flarum extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/testing:^1.0\n```\n\n----------------------------------------\n\nTITLE: Running Flarum Test Setup Command in PHP\nDESCRIPTION: Command for setting up a clean test database environment by dropping existing test database tables before creating a new one, eliminating the need for manual table dropping.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum test:setup\n```\n\n----------------------------------------\n\nTITLE: Frontend Entry Points for Flarum Extension\nDESCRIPTION: Example of admin.js and forum.js entry point files that export the contents of their respective source directories.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// admin.js\nexport * from './src/admin';\n\n// forum.js\nexport * from './src/forum';\n```\n\n----------------------------------------\n\nTITLE: Accessing Model Properties in JavaScript\nDESCRIPTION: JavaScript code demonstrating how to access attributes and relationships from Flarum model instances using the predefined instance methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = discussion.id();\nconst title = discussion.title();\nconst posts = discussion.posts(); // array of Post models\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag Visibility Scoper in PHP for Flarum Tags\nDESCRIPTION: This code defines a custom scoper for the Tag model with the 'view' ability. It filters tags based on the actor's permissions to view forums.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeTagVisibility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     */\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->whereIn('id', function ($query) use ($actor) {\n            Tag::query()->setQuery($query->from('tags'))->whereHasPermission($actor, 'viewForum')->select('tags.id');\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring View Namespace in PHP\nDESCRIPTION: Setting up a view namespace for an extension using the View extender to enable template rendering.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/routes.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views')\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Post Visibility Scoper in PHP\nDESCRIPTION: Extension example showing how to implement a custom visibility scoper for private posts. Demonstrates handling special viewing permissions for private content.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopePostVisibility\n{\n    public function __invoke(User $actor, $query)\n    {\n      if ($actor->can('posts.viewPrivate')) {\n        $query->whereRaw(\"1=1\");\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Frontend HTML Document in PHP\nDESCRIPTION: Shows how to use the Frontend extender's content method to modify the HTML document that will be displayed. This example adds a script tag to the document head.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Frontend\\Document;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->content(function (Document $document, Request $request) {\n            $document->head[] = '<script>alert(\"Hello, world!\")</script>';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Content to Frontend Routes in Flarum (PHP)\nDESCRIPTION: Demonstrates how to add specific content to frontend routes in Flarum using PHP. This example shows setting the document title for a custom route.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->route('/users', 'acme.users', function (Document $document, Request $request) {\n            $document->title = 'Users';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware in Flarum Extension\nDESCRIPTION: Demonstrates how to register, remove, and modify middleware order in a Flarum extension's extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/middleware.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n// use Flarum\\Http\\Middleware\\CheckCsrfToken;\n\nreturn [\n    // Add middleware to forum frontend\n    (new Extend\\Middleware('forum'))->add(YourMiddleware::class),\n    // Admin frontend\n    (new Extend\\Middleware('admin'))->add(YourMiddleware::class),\n    // API frontend\n    (new Extend\\Middleware('api'))->add(YourMiddleware::class),\n\n    (new Extend\\Middleware('frontend'))\n        // remove a middleware (e.g. remove CSRF token check 😱)\n        ->remove(CheckCsrfToken::class)\n        // insert before another middleware (e.g. before a CSRF token check)\n        ->insertBefore(CheckCsrfToken::class, YourMiddleware::class)\n        // insert after another middleware (e.g. after a CSRF token check)\n        ->insertAfter(CheckCsrfToken::class, YourMiddleware::class)\n        // replace a middleware (e.g. replace the CSRF check with your own implementation)\n        ->replace(CheckCsrfToken::class, YourMiddleware::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Migration Structure in PHP\nDESCRIPTION: Demonstrates the basic structure of a Flarum migration file, including up and down functions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Schema\\Builder;\n\nreturn [\n    'up' => function (Builder $schema) {\n        // up migration\n    },\n    'down' => function (Builder $schema) {\n        // down migration\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Model Date Casting in PHP\nDESCRIPTION: Example of updating the $dates property to $casts for handling datetime fields in Laravel models.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0.md#2025-04-16_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nprotected $casts = [\n    'example_at' => 'datetime',\n];\n```\n\n----------------------------------------\n\nTITLE: Using Key References for Translation Reuse in Flarum YAML\nDESCRIPTION: Demonstrates how to use key references in Flarum's locale files to reuse translations across multiple contexts. This pattern avoids duplication and ensures consistency by referencing translations stored in the 'ref' namespace.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => core.ref.log_in\n\n    log_in:\n      submit_button: => core.ref.log_in\n      title: => core.ref.log_in\n\n  ref:\n    log_in: Log In\n```\n\n----------------------------------------\n\nTITLE: Declaring New Filesystem Disks in Flarum\nDESCRIPTION: This snippet shows how to declare new custom disks for an extension using the Filesystem extender. It demonstrates creating a 'flarum-uploads' disk with a specific root path and URL.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/filesystem.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Filesystem)\n        ->disk('flarum-uploads', function (Paths $paths, UrlGenerator $url) {\n            return [\n                'root'   => \"$paths->public/assets/uploads\",\n                'url'    => $url->to('forum')->path('assets/uploads')\n            ];\n        });\n```\n\n----------------------------------------\n\nTITLE: Using slug() helper in JavaScript\nDESCRIPTION: Use the slug() helper from flarum/utils/string module to suggest slugs to users, but not to enforce them due to limited transliteration logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b12.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { slug } from 'flarum/utils/string';\n\nconst suggestedSlug = slug(userInput);\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Routes in PHP for Flarum Extension\nDESCRIPTION: Demonstrates how to add a new route to the forum collection using the Routes extender in a Flarum extension's extend.php file. The example adds a GET route for '/hello-world' that uses a HelloWorldController.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\nuse Acme\\HelloWorld\\HelloWorldController;\n\nreturn [\n    (new Extend\\Routes('forum'))\n        ->get('/hello-world', 'acme.hello-world', HelloWorldController::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Mocking Flarum Services in PHP Unit Tests\nDESCRIPTION: Demonstrates how to mock Flarum services in PHP unit tests using Mockery. It shows how to mock the settings repository and control specific return values for testing.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function setUp(): void\n{\n    parent::setUp();\n    // example - if our setting needs settings, we can mock the settings repository\n    $settingsRepo = m::mock(SettingsRepositoryInterface::class);\n    // and then control specific return values for each setting key\n    $settingsRepo->shouldReceive('get')->with('some-plugin-key')->andReturn('some-value-useful-for-testing');\n    // construct your class under test, passing mocked services as needed\n    $this->serializer = new YourClassUnderTest($settingsRepo);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Group and User Permissions in PHP\nDESCRIPTION: This snippet demonstrates various methods for checking permissions associated with groups and users in Flarum. It includes examples of accessing group permissions, checking specific permissions for groups and users, and enumerating all permissions for a user.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// An Eloquent relation to the group's permissions\n$group->permissions();\n\n// Check if a group has a permission\n$group->hasPermission('viewForum');\n\n// Enumerate all the user's permissions\n$user->getPermissions();\n\n// Check if the user is in a group with the given permission\n$user->hasPermission('viewForum');\n```\n\n----------------------------------------\n\nTITLE: JavaScript Select Component Update\nDESCRIPTION: This snippet states that the 'flarum/components/Select' component in JavaScript now supports a 'disabled' prop, allowing better control over the component's state.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Defining a Custom API Resource in PHP\nDESCRIPTION: Example of creating a custom API resource that doesn't use a database model in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Resource\\AbstractResource;\n\nclass CustomResource extends AbstractResource\n{\n    public function type(): string\n    {\n        return 'custom';\n    }\n    \n    public function getId(object $model, Context $context): string\n    {\n        return // return the model ID.\n    }\n\n    public function find(string $id, Context $context): ?object\n    {\n        // return the model instance.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Page Component in Flarum\nDESCRIPTION: A simple example of creating a custom page component by extending Flarum's base Page class. This shows the basic structure required for creating a frontend page.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Page from 'flarum/common/components/Page';\n\n\nexport default class CustomPage extends Page {\n  view() {\n    return <p>Hello!</p>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Split Module in JavaScript\nDESCRIPTION: Demonstrates how to asynchronously import a split module using the import() function, which returns a promise resolving to the imported module.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/code-splitting.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport('acme/forum/components/CustomPage').then(({ default: CustomPage }) => {\n  // do something with CustomPage\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Cached Data in Flarum Frontend\nDESCRIPTION: Shows how to access cached data in Flarum's frontend using the store's all and getById methods. This allows retrieving data without making additional API requests.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussions = app.store.all('discussions');\nconst discussion = app.store.getById('discussions', 123);\n```\n\n----------------------------------------\n\nTITLE: Installing Jest Configuration for Frontend Testing\nDESCRIPTION: Command for installing the Jest configuration dependency needed for frontend testing in Flarum extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add --dev @flarum/jest-config\n```\n\n----------------------------------------\n\nTITLE: Opening Crontab Editor\nDESCRIPTION: Command to open the crontab editor for editing scheduled tasks.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/scheduler.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncrontab -e\n```\n\n----------------------------------------\n\nTITLE: Finding Valid Access Token in Flarum (PHP)\nDESCRIPTION: Shows how to retrieve a valid token instance from Flarum using the AccessToken class. This method takes a token string as input and returns the corresponding token instance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nFlarum\\Http\\AccessToken::findValid($tokenString)\n```\n\n----------------------------------------\n\nTITLE: Example of Switching Flarum CLI Versions in Shell\nDESCRIPTION: Interactive shell session demonstrating how to switch between CLI versions and verify the active version.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/cli.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ fl flarum info\nFlarum version: 2.x\nCLI version: 3.0.1\n$ fl flarum change\nCurrently using CLI 3.x compatible with Flarum 2.x\n\n✔ Switch to CLI 2.x compatible with Flarum 1.x? … yes\n$ fl flarum info\nFlarum version: 1.x\nCLI version: 2.0.2\n```\n\n----------------------------------------\n\nTITLE: Configuring DayJS Locale\nDESCRIPTION: This snippet shows how to configure the DayJS library's locale setting in a Flarum language pack. It involves creating a `config.js` file within the `locale` directory and setting the locale using `dayjs.locale()`. The `xx` placeholder should be replaced with the appropriate locale code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/language-packs.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndayjs.locale('xx');\n```\n\n----------------------------------------\n\nTITLE: Composer Scripts Configuration\nDESCRIPTION: JSON configuration adding PHPStan analysis commands to composer scripts\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"analyse:phpstan\": \"phpstan analyse\",\n    \"clear-cache:phpstan\": \"phpstan clear-result-cache\"\n  },\n  \"scripts-descriptions\": {\n    \"analyse:phpstan\": \"Run static analysis\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: State Pattern Implementation Example\nDESCRIPTION: Example of using a POJO state instance to manage data shared between unrelated components.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass Counter {\n  constructor() {\n    this._counter = 0;\n  }\n\n  increaseCounter() {\n    this._counter += 1;\n  }\n\n  getCount() {\n    return this._counter;\n  }\n}\n\napp.counter = new Counter();\n\nextend(HeaderSecondary.prototype, 'items', function(items) {\n  items.add('counterDisplay',\n    <div>\n      <p>Counter: {app.counter.getCount()}</p>\n    </div>\n  );\n})\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('counterButton',\n    <div>\n      <button onclick={() => app.counter.increaseCounter()}>Increase Counter</button>\n    </div>\n  );\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Resources in JavaScript\nDESCRIPTION: Shows how to delete a resource by calling the delete method on a model instance. This sends a DELETE request to the API and returns a promise that resolves when the deletion is complete.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.delete().then(done);\n```\n\n----------------------------------------\n\nTITLE: Defining Key References in YAML for Flarum Translations\nDESCRIPTION: Demonstrates how to define multiple translation keys that reference a single shared translation in a Flarum locale YAML file. This approach provides flexibility for language-specific variations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nedit_stuff_button: => edit_stuff    # Used in the code that creates the button.\nedit_stuff_title: => edit_stuff     # Used in the code that creates the dialog.\n\nedit_stuff: Edit Stuff              # Not used in the code.\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on RHEL-based Systems\nDESCRIPTION: Commands to update package lists and install crontabs on RHEL-based Linux distributions like CentOS, AlmaLinux, and Rocky Linux.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/scheduler.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf update\nsudo dnf install crontabs\n```\n\n----------------------------------------\n\nTITLE: Instalando una Extensión de Flarum con Composer\nDESCRIPTION: Comando de Composer para instalar una extensión de Flarum desde Packagist.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/distribution.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require vendor/package\n```\n\n----------------------------------------\n\nTITLE: Adding Content to Frontend Routes in Flarum (PHP)\nDESCRIPTION: Demonstrates how to add specific content to custom frontend routes in Flarum. This example shows setting the document title when registering a new route, which helps with SEO and user navigation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->route('/users', 'acme.users', function (Document $document, Request $request) {\n            $document->title = 'Users';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Flarum Extension\nDESCRIPTION: Simple webpack configuration file that uses Flarum's official webpack configuration. This setup handles the compilation and bundling of JavaScript code for Flarum extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = require('flarum-webpack-config');\n\nmodule.exports = config();\n```\n\n----------------------------------------\n\nTITLE: Defining Async Routes in JavaScript\nDESCRIPTION: Demonstrates how to define an asynchronous route that loads a custom page component on demand.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/code-splitting.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Routes()\n    .add('acme', '/acme', () => import('./components/CustomPage')),\n];\n```\n\n----------------------------------------\n\nTITLE: CSRF Token Mismatch Error in Flarum REST API\nDESCRIPTION: Example of an error response when CSRF protection is triggered, typically occurring when the Authorization header is missing or invalid and Flarum attempts to use session cookie authentication.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"400\",\n      \"code\": \"csrf_token_mismatch\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Flarum Extension with Composer\nDESCRIPTION: The Composer command that users will need to run in order to install the published extension. This requires the vendor and package name defined in composer.json.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/distribution.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require vendor/package\n```\n\n----------------------------------------\n\nTITLE: Dark Mode CSS Selector Migration (LESS)\nDESCRIPTION: Example showing migration from LESS conditional variables to CSS data attribute selectors for dark mode theming.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0.md#2025-04-16_snippet_8\n\nLANGUAGE: less\nCODE:\n```\n// before\n& when (@config-dark-mode) {\n  background: black;\n}\n\n// after\n[data-theme^=dark] & {\n  background: black;\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Flarum Services in PHP Unit Tests\nDESCRIPTION: Demonstrates how to set up PHP unit tests for Flarum extensions by mocking service dependencies. This example shows mocking the settings repository to control specific return values for testing.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    public function setUp(): void\n    {\n        parent::setUp();\n        // example - if our setting needs settings, we can mock the settings repository\n        $settingsRepo = m::mock(SettingsRepositoryInterface::class);\n        // and then control specific return values for each setting key\n        $settingsRepo->shouldReceive('get')->with('some-plugin-key')->andReturn('some-value-useful-for-testing');\n        // construct your class under test, passing mocked services as needed\n        $this->serializer = new YourClassUnderTest($settingsRepo);\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Flarum Model Using CLI\nDESCRIPTION: Command-line instructions for automatically generating Flarum models using flarum-cli for both backend and frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend model\n$ flarum-cli make frontend model\n```\n\n----------------------------------------\n\nTITLE: Creating a Discussion in Flarum REST API\nDESCRIPTION: This snippet demonstrates how to create a new discussion using the POST /api/discussions endpoint. It shows the request payload structure and the expected response containing the new discussion details.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\":{\n    \"type\": \"discussions\",\n    \"attributes\": {\n      \"title\": \"Lorem Ipsum\",\n      \"content\": \"Hello World\"\n    },\n    \"relationships\": {\n      \"tags\": {\n        \"data\": [\n          {\n            \"type\": \"tags\",\n            \"id\": \"1\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"type\": \"discussions\",\n    \"id\": \"42\",\n    \"attributes\": {\n      \"title\": \"Lorem Ipsum\",\n      \"slug\": \"42-lorem-ipsum\",\n      \"commentCount\": 1\n      // [...] other attributes\n    },\n    \"relationships\": {\n      \"posts\": {\n        \"data\": [\n          {\n            \"type\": \"posts\",\n            \"id\": \"58\"\n          }\n        ]\n      },\n      \"user\": {\n        \"data\": {\n          \"type\": \"users\",\n          \"id\": \"1\"\n        }\n      },\n      // [...] other relationships\n    }\n  },\n  \"included\":[\n    {\n      \"type\": \"posts\",\n      \"id\": \"38\",\n      \"attributes\": {\n        \"number\": 1,\n        \"contentType\": \"comment\",\n        \"contentHtml\": \"\\u003Cp\\u003EHello World\\u003C\\/p\\u003E\"\n        // [...] other attributes\n      }\n    }\n    // [...] other includes\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Translation with Variables in JSX\nDESCRIPTION: Shows how to use the translator with variables in a search results component\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n{LinkButton.component({\n  icon: 'search',\n  children: app.translator.trans('all_discussions_button', {query}),\n  href: app.route('index', {q: query})\n})}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Key References for Translation Reuse in YAML\nDESCRIPTION: Example of using key references to reuse a 'log_in' translation in multiple contexts. The example shows how to properly structure translations using the 'ref' namespace for reusable content.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/i18n.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => core.ref.log_in\n\n    log_in:\n      submit_button: => core.ref.log_in\n      title: => core.ref.log_in\n\n  ref:\n    log_in: Log In\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum Testing Library with Composer\nDESCRIPTION: Command to install the Flarum testing library using Composer as a development dependency.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/testing:^2.0\n```\n\n----------------------------------------\n\nTITLE: Saving Model Relationships in JavaScript\nDESCRIPTION: JavaScript code demonstrating how to save relationship data for model instances, handling both single and multiple relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nuser.save({\n  relationships: {\n    groups: [\n      store.getById('groups', 1),\n      store.getById('groups', 2)\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using withAttr Utility for Form Processing\nDESCRIPTION: Shows how to use the withAttr utility for simplified form input processing, both with Streams and custom callables.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/forms.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\nimport withAttr from 'flarum/common/utils/withAttr';\n\nconst value = Stream();\n\n// With a stream\n<input type=\"text\" value={value()} oninput={withAttr('value', value)}></input>\n\n// With any callable\n<input type=\"text\" value={value()} oninput={withAttr('value', (currValue) => {\n  // Some custom logic here\n})}></input>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Directory Structure Update for Flarum Extensions - JavaScript\nDESCRIPTION: This section outlines the necessary changes to the JavaScript directory structure when migrating to Webpack from Gulp in Flarum Beta 8. It details folder organization and file renaming to ensure compatibility with the new build process.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b8.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\njs\n├── admin\n│   ├── src\n│   │   └── main.js\n│   ├── dist\n│   │   └── extension.js\n│   ├── Gulpfile.js\n│   └── package.json\n└── forum\n    ├── src\n    │   └── main.js\n    ├── dist\n    │   └── extension.js\n    ├── Gulpfile.js\n    └── package.json\n```\n\nLANGUAGE: plaintext\nCODE:\n```\njs\n├── src\n│   ├── admin\n│   │   └── index.js\n│   └── forum\n│       └── index.js\n├── dist\n│   ├── admin.js\n│   ├── admin.js.map\n│   ├── forum.js\n│   └── forum.js.map\n├── admin.js\n├── forum.js\n├── package.json\n└── webpack.config.js\n```\n\n----------------------------------------\n\nTITLE: Type Casting Model Attributes for PHPStan\nDESCRIPTION: PHP code example demonstrating how to properly type hint extended model attributes for PHPStan analysis using the Extend\\Model cast method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Model(User::class))\n    ->cast('is_cool', 'bool'),\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current User in Flarum Extension (PHP)\nDESCRIPTION: Demonstrates how to retrieve the current user from inside a Flarum extension using the request object. This method returns a User instance, which might be a Guest user.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$request->getAttribute('actor')\n```\n\n----------------------------------------\n\nTITLE: Adding Default Permissions in Flarum Migrations\nDESCRIPTION: Demonstrates how to use data migrations to specify default permissions in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\nreturn Migration::addPermissions([\n    'some.permission' => Group::MODERATOR_ID\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring DayJS Localization for Flarum\nDESCRIPTION: This JavaScript snippet demonstrates how to configure date internationalization for a specific language in Flarum using the DayJS library. It sets the locale for date formatting.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/language-packs.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ndayjs.locale('xx');\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit for Unit Tests\nDESCRIPTION: XML configuration for PHPUnit to run unit tests. Specifies test suite directory and includes Mockery listener.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n\n    <testsuites>\n        <testsuite name=\"Flarum Unit Tests\">\n            <directory suffix=\"Test.php\">./unit</directory>\n        </testsuite>\n    </testsuites>\n    <listeners>\n        <listener class=\"\\Mockery\\Adapter\\Phpunit\\TestListener\"></listener>\n    </listeners>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Correct Component Data Passing in Mithril 2\nDESCRIPTION: Demonstrates the correct pattern for passing data between parent and child components in Mithril 2 using attrs. The parent component manages state and passes it to the child via attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nclass ChildComponent extends Component {\n  view() {\n    return <p>{this.attrs.counter}</p>;\n  }\n}\n\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.counter += 1}></button>\n        <ChildComponent counter={this.counter}></ChildComponent>\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Settings for Frontend Access in Flarum\nDESCRIPTION: This code snippet demonstrates how to use the `Settings` extender to serialize a setting for access in the forum frontend.  It shows how to define a setting key to be serialized, how to map it to an attribute name for frontend access, and how to optionally modify the setting's value before it's sent to the frontend. This extender enhances settings serialization for frontend use.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Flarum\\Extend;\n\nreturn [\n   (new Extend\\Settings)\n      ->serializeToForum('myCoolSetting', 'my.cool.setting.key')\n      ->serializeToForum('myCoolSettingModified', 'my.cool.setting.key', function ($retrievedValue) {\n        // This third argument is optional, and allows us to pass the retrieved setting through some custom logic.\n        // In this example, we'll append a string to it.\n\n        return \"My Cool Setting: $retrievedValue\";\n      }, \"default value!\"),\n]\n\n```\n\n----------------------------------------\n\nTITLE: Adding Default Settings in Flarum Migrations\nDESCRIPTION: Data migration example showing how to specify default settings for a Flarum extension using the addSettings helper.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addSettings([\n    'foo' => 'bar',\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Flarum Frontend Testing\nDESCRIPTION: Creates a Jest configuration file for frontend testing in a Flarum extension using the @flarum/jest-config package.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('@flarum/jest-config')();\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern for Translation Key References\nDESCRIPTION: Illustrates an incorrect way of referencing translation keys that could lead to unintentional changes. This example shows why direct references to non-ref namespace keys should be avoided.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => Log In\n\n    log_in:\n      submit_button: => core.forum.header.log_in_link  # Never reference keys\n      title: => core.forum.header.log_in_link          # that aren't in \"ref\"!\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Unit Test Configuration\nDESCRIPTION: XML configuration for PHPUnit unit tests with Mockery listener for Flarum testing\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n\n    <testsuites>\n        <testsuite name=\"Flarum Unit Tests\">\n            <directory suffix=\"Test.php\">./unit</directory>\n        </testsuite>\n    </testsuites>\n    <listeners>\n        <listener class=\"\\Mockery\\Adapter\\Phpunit\\TestListener\"></listener>\n    </listeners>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Importing from Extensions in Frontend JavaScript\nDESCRIPTION: Example of how to import functionality from another Flarum extension in frontend JavaScript code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst allThingsExportedBySomeExtension = require('@flarum-tags');\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Unit Test Configuration\nDESCRIPTION: XML configuration file for PHPUnit unit tests with Mockery listener setup.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n\n    <testsuites>\n        <testsuite name=\"Flarum Unit Tests\">\n            <directory suffix=\"Test.php\">./unit</directory>\n        </testsuite>\n    </testsuites>\n    <listeners>\n        <listener class=\"\\Mockery\\Adapter\\Phpunit\\TestListener\"></listener>\n    </listeners>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Scopers in Flarum PHP\nDESCRIPTION: Example of how to register custom model visibility scopers using Flarum's extender system. Shows registration for both Tag and Discussion models.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\Tags\\Tag;\nuse YourNamespace\\Access;\n\nreturn [\n  // Other extenders\n\n  // 'view' is optional here, since that's the default value for the ability argument.\n  // However, if we were applying this to a different ability, such as `viewPrivate`,\n  // would need to explicitly specify that.\n  (new Extend\\ModelVisibility(Tag::class))\n    ->scope(Access\\ScopeTagVisibility::class, 'view'),\n\n  (new Extend\\ModelVisibility(Discussion::class))\n    ->scopeAll(Access\\ScopeDiscussionVisibilityForAbility::class),\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Scopers\nDESCRIPTION: This code snippet shows how to register custom scopers for Flarum models using the `Flarum\\Extend\\ModelVisibility` extender. It demonstrates how to scope the `Tag` model with `ScopeTagVisibility` for the `view` ability and the `Discussion` model with `ScopeDiscussionVisibilityForAbility` for all abilities.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Flarum\\Extend;\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\Tags\\Tag;\nuse YourNamespace\\Access;\n\nreturn [\n  // Other extenders\n\n  // 'view' is optional here, since that's the default value for the ability argument.\n  // However, if we were applying this to a different ability, such as `viewPrivate`,\n  // would need to explicitly specify that.\n  (new Extend\\ModelVisibility(Tag::class))\n    ->scope(Access\\ScopeTagVisibility::class, 'view'),\n\n  (new Extend\\ModelVisibility(Discussion::class))\n    ->scopeAll(Access\\ScopeDiscussionVisibilityForAbility::class),\n  // Other extenders\n];\n\n```\n\n----------------------------------------\n\nTITLE: Checking Backend Extension Dependencies\nDESCRIPTION: PHP class showing how to inject and use ExtensionManager to check if optional dependencies are enabled.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extension\\ExtensionManager;\n\nclass SomeClass {\n    public function __construct(ExtensionManager $extensions)\n    {\n        $this->extensions = $extensions;\n    }\n\n    public function someMethod()\n    {\n        if ($this->extensions->isEnabled('some-extension-id')) {\n            // do something.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Flarum Extenders in PHP\nDESCRIPTION: Example of the new extenders implementation in Beta 8, showing how to configure frontend assets and routes using the new extend.php file format. The code demonstrates setting up JavaScript and CSS files, along with custom routes for tags functionality.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b8.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less')\n        ->route('/t/{slug}', 'tag')\n        ->route('/tags', 'tags'),\n\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\AddForumTagsRelationship::class);\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on Debian/Ubuntu\nDESCRIPTION: Commands to update package lists and install cron on Debian and Ubuntu-based Linux systems.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/scheduler.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install cron\n```\n\n----------------------------------------\n\nTITLE: Adding PHPStan Infrastructure via Flarum CLI\nDESCRIPTION: This Bash command utilizes the Flarum CLI tool to automatically add PHPStan infrastructure to your extension. Ensures easy integration of static analysis setup. Requires installed Flarum CLI.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra phpstan\n```\n\n----------------------------------------\n\nTITLE: Exporting Flarum Extension Module in JavaScript\nDESCRIPTION: This JavaScript code exports the 'extend' module from the entry index.js file of a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport { default as extend } from './extend';\n```\n\n----------------------------------------\n\nTITLE: Renaming Database Table in Flarum Migration\nDESCRIPTION: Example of using Flarum's Migration helper to rename an existing database table.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nreturn Migration::renameTable($from, $to);\n```\n\n----------------------------------------\n\nTITLE: Defining Second-Level Translation Namespaces in YAML\nDESCRIPTION: Lists the second-level keys used to indicate which interface uses the translation, including admin, forum, lib, views, api, and email.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:       # Translations used by the admin interface.\nforum:       # Translations used by the forum user interface.\nlib:         # Translations used by either of the above.\nviews:       # Translations used outside the normal JS client.\napi:         # Translations used in messages output by the API.\nemail:       # Translations used in emails sent by Flarum.\n```\n\n----------------------------------------\n\nTITLE: Using New Middleware Extender - PHP\nDESCRIPTION: This snippet discusses the new 'Flarum\\Extend\\Middleware' that allows adding, removing, or replacing middleware in Flarum’s middleware stacks (api, forum, admin). It highlights that related documentation is available.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Importing from Other Extensions in Frontend JavaScript\nDESCRIPTION: Example of how to import functionality from other Flarum extensions in frontend JavaScript code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst allThingsExportedBySomeExtension = require('@flarum-tags');\n```\n\n----------------------------------------\n\nTITLE: Mocking User and Request for Authorization Testing\nDESCRIPTION: Shows how to mock user instances and request attributes for testing authorization interactions in Flarum extensions\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->actor = m::mock(User::class);\n$request = m::mock(Request::class)->makePartial();\n$request->shouldReceive('getAttribute->getActor')->andReturn($this->actor);\n$this->actor->shouldReceive('SOME PERMISSION')->andReturn(true/false);\n```\n\n----------------------------------------\n\nTITLE: Configuring DayJS Locale for Flarum Language Pack\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the DayJS library for date internationalization in a Flarum language pack. It sets the locale for the specific language.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/language-packs.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndayjs.locale('xx');\n```\n\n----------------------------------------\n\nTITLE: Using Illuminate Support String Slugging in PHP\nDESCRIPTION: Demonstrates the replacement for the removed Flarum\\Util\\Str::slug() method with Illuminate\\Support\\Str::slug(). This change is part of the breaking changes in Beta 13.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-b13.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nIlluminate\\Support\\Str::slug()\n```\n\n----------------------------------------\n\nTITLE: Configuring webpack for Flarum Extension\nDESCRIPTION: Webpack configuration file for a Flarum extension, using the official Flarum webpack config.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = require('flarum-webpack-config');\n\nmodule.exports = config();\n```\n\n----------------------------------------\n\nTITLE: Customizing Session Drivers with the Session Extender\nDESCRIPTION: Example of using the Session extender added in Flarum 1.6 to customize session drivers.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-1_x.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Session)\n    ->driver('custom_driver', CustomSessionDriver::class)\n```\n\n----------------------------------------\n\nTITLE: Implementing availableSettings() in PHP DriverInterface\nDESCRIPTION: Update the availableSettings() method in classes implementing Flarum\\Mail\\DriverInterface to return an array of field names mapping to their types.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b12.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic function availableSettings()\n{\n    return [\n        'field1' => 'string',\n        'field2' => 'boolean',\n        'field3' => 'integer'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DriverInterface for Custom Flarum Mail Driver\nDESCRIPTION: This code snippet demonstrates the implementation of a custom mail driver for Flarum by creating a class that implements the DriverInterface. It includes methods for defining available settings, validating settings, checking if sending is possible, and building a transport.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/mail.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Mail\\DriverInterface;\nuse Illuminate\\Contracts\\Validation\\Factory;\nuse Illuminate\\Mail\\Transport\\MailgunTransport;\nuse Illuminate\\Support\\MessageBag;\nuse Swift_Transport;\n\nclass MailgunDriver implements DriverInterface\n{\n    public function availableSettings(): array\n    {\n        return [\n            'setting_one' => '',\n            'setting_two' => 'defaultValue',\n            'dropdown_setting' => [\n                'option_one_val' => 'Option One Display',\n                'option_two_val' => 'Option Two Display',\n            ],\n        ];\n    }\n\n    public function validate(SettingsRepositoryInterface $settings, Factory $validator): MessageBag\n    {\n        $validator->make($settings->all(), [\n            'setting_one' => 'required',\n            'setting_two' => 'nullable|integer',\n        ])->errors();\n    }\n\n    public function canSend(): bool\n    {\n        return true;\n    }\n\n    public function buildTransport(SettingsRepositoryInterface $settings): Swift_Transport\n    {\n        // Return a mail transport that implements Swift Transport\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Valid Access Token in Flarum\nDESCRIPTION: Static method to find and validate an access token using the token string.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nFlarum\\Http\\AccessToken::findValid($tokenString)\n```\n\n----------------------------------------\n\nTITLE: Using New PHP Access Token Methods in Flarum Beta 16\nDESCRIPTION: Examples of using new and updated methods for working with access tokens in Flarum Beta 16. This includes finding valid tokens and using the new SessionAuthenticator.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// Find a valid token\n$token = AccessToken::findValid($tokenString);\n\n// Get a query builder for valid tokens\n$validTokens = AccessToken::whereValid();\n\n// Updated SessionAuthenticator usage\n$sessionAuthenticator->logIn($session, $token); // $token instead of $userId\n```\n\n----------------------------------------\n\nTITLE: Creating Access Token Request/Response\nDESCRIPTION: Example of creating an access token by sending credentials to the /api/token endpoint. Shows both the POST request format and successful response format.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"identification\": \"Toby\",\n    \"password\": \"pass7word\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"token\": \"YACub2KLfe8mfmHPcUKtt6t2SMJOGPXnZbqhc3nX\",\n    \"userId\": \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Dependencies in Composer JSON\nDESCRIPTION: JSON configuration showing how to specify optional dependencies in composer.json's extra section.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extra\": {\n    \"flarum-extension\": {\n      \"optional-dependencies\": [\n        \"flarum/tags\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Redraw Prevention in Flarum for Mithril 2.0\nDESCRIPTION: Shows how to prevent automatic redraws after DOM events in Mithril 2.0, updating from the old redraw strategy to the new event property.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\n<button onclick={() => {\n  console.log(\"Hello world\");\n  m.redraw.strategy('none');\n}}>\n  Click Me!\n</button>\n\n// Mithril 2\n<button onclick={e => {\n  console.log(\"Hello world\");\n  e.redraw = false;\n}}>\n  Click Me!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Deleting Resources in Flarum Frontend\nDESCRIPTION: Shows how to delete a resource by calling the delete method on a model instance, which returns a Promise.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.delete().then(done);\n```\n\n----------------------------------------\n\nTITLE: Handling Pluralizable Content in YAML Translation Files\nDESCRIPTION: Example YAML translation entries that can be pluralized for the Mentions extension. These keys allow localizers to implement appropriate variations for different grammatical numbers across languages, even though English does not require distinct forms for the past tense verbs shown.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nmentioned_by_text: \"{users} replied to this.\"       # Can be pluralized ...\nmentioned_by_self_text: \"{users} replied to this.\"  # Can be pluralized ...\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on Debian/Ubuntu Systems\nDESCRIPTION: Commands to update package list and install cron on Debian and Ubuntu based Linux systems.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/scheduler.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install cron\n```\n\n----------------------------------------\n\nTITLE: Serializing Asset URLs in PHP for Flarum Extensions\nDESCRIPTION: Example of how Flarum serializes logo and favicon URLs in the backend. This approach is recommended for accessing extension assets to ensure compatibility with different storage drivers.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/assets.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$attributes['logoUrl'] = $this->url->to('forum')->base().'/assets/'.$this->settings->get('logo_path');\n$attributes['faviconUrl'] = $this->url->to('forum')->base().'/assets/'.$this->settings->get('favicon_path');\n```\n\n----------------------------------------\n\nTITLE: Composer Update Error Output Example\nDESCRIPTION: Example error output when trying to update Flarum with incompatible extension versions\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/update.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNothing to modify in lock file\n```\n\n----------------------------------------\n\nTITLE: Utilizzo di bidi e withAttr per Semplificare la Gestione degli Input in Flarum\nDESCRIPTION: Esempi di utilizzo dell'attributo bidi e della funzione withAttr per semplificare la gestione degli input nei form di Flarum. Vengono mostrati diversi approcci per collegare i valori degli input a Stream.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/forms.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/utils/Stream';\nimport withAttr from 'flarum/utils/withAttr';\n\nconst value = Stream();\n\n// Without bidi\n<input type=\"text\" value={value()} oninput={e => value(e.target.value)}></input>\n\n// With bidi\n<input type=\"text\" bidi={value}></input>\n\n// With a stream\n<input type=\"text\" value={value()} oninput={withAttr('value', value)}></input>\n\n// With any callable\n<input type=\"text\" value={value()} oninput={withAttr('value', (currValue) => {\n  // Some custom logic here\n})}></input>\n```\n\n----------------------------------------\n\nTITLE: Loading Async Composer in JavaScript\nDESCRIPTION: Shows how to load an asynchronous composer component, such as the DiscussionComposer.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/code-splitting.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.composer.load(() => import('flarum/forum/components/DiscussionComposer'), { user: app.session.user }).then(() => app.composer.show());\n```\n\n----------------------------------------\n\nTITLE: Defining Special Translation Namespaces in YAML\nDESCRIPTION: Special namespaces for translations that require special handling in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/i18n.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nref:         # Translations referenced by more than one key.\ngroup:       # Translations used as default group names.\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Configuration for Integration Tests\nDESCRIPTION: Example PHPUnit configuration file for integration tests. Contains essential settings like backupGlobals, backupStaticAttributes, and processIsolation that should remain unchanged.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"true\"\n         stopOnFailure=\"false\">\n\n    <testsuites>\n        <testsuite name=\"Flarum Integration Tests\">\n            <directory suffix=\"Test.php\">./integration</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Defining Frontend Route with Parameters in JavaScript for Flarum Extension\nDESCRIPTION: Shows how to define a frontend route with a parameter using the Routes extender in JavaScript for a Flarum extension. The example adds a route for '/user/:id' that renders a UsersPage component.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n  new Extend.Routes()\n    .add('acme.user', '/user/:id', <UsersPage />)\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Setting with Conditional Rendering in JSX\nDESCRIPTION: Example of how to register a custom setting using a callback that returns JSX. This allows for conditional rendering and more complex UI components.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/admin.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\napp.initializers.add('interstellar', function(app) {\n\n  app.extensionData\n    . or('acme-interstellar')\n    .registerSetting(function () {\n      if (app. ession.user. sername() === 'RocketMan') {\n\n        return (\n          <div className=\"Form-group\">\n            <h1> {app. ranslator.trans('acme-interstellar. dmin.you_are_rocket_man_label')} </h1>\n            <label className=\"checkbox\">\n              <input type=\"checkbox\" bidi={this.setting('acme-interstellar.rocket_man_setting')}/>\n                {app. ranslator.trans('acme-interstellar. dmin.rocket_man_setting_label')}\n            </label>\n          </div>\n        );\n      }\n    })\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Translator in JavaScript for Basic Translations\nDESCRIPTION: Demonstrates how to use the app.translator.trans() method to reference translations in JavaScript code for Flarum extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('acme-hello-world', function() {\n  alert(app.translator.trans('acme-hello-world.alert.hello_text'));\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Second-Level Translation Key Namespaces in YAML\nDESCRIPTION: Shows the second-level namespaces used to indicate which interface uses the translation. This includes admin, forum, lib, views, api, and email interfaces.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:       # Translations used by the admin interface.\nforum:       # Translations used by the forum user interface.\nlib:         # Translations used by either of the above.\nviews:       # Translations used outside the normal JS client.\napi:         # Translations used in messages output by the API.\nemail:       # Translations used in emails sent by Flarum.\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum Testing Library via Composer\nDESCRIPTION: Command to install the flarum/testing library as a dev dependency for automated testing.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/testing:^1.0\n```\n\n----------------------------------------\n\nTITLE: Creating Backend Workflow Configuration - YAML\nDESCRIPTION: This YAML configuration file is utilized to set up a GitHub Action for the backend of a Flarum extension. It specifies when the workflow should trigger and the jobs to be executed using a reusable workflow from the Flarum framework. Key configurations include enabling backend testing and configuring the directory for backend code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Backend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_backend.yml@main\n    with:\n      # Different types of jobs\n      enable_backend_testing: true\n      enable_phpstan: false\n\n      # Additional parameters\n      backend_directory: .\n```\n\n----------------------------------------\n\nTITLE: Using Key References in YAML Translations for Reusability\nDESCRIPTION: Shows how to reference one translation key from another using the => syntax. This approach allows for flexibility in translations across different contexts while maintaining reusability.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nedit_stuff_button: => edit_stuff    # Se utiliza en el código que crea el botón.\nedit_stuff_title: => edit_stuff     # Se utiliza en el código que crea el diálogo.\n\nedit_stuff: Edit Stuff              # No se utiliza en el código.\n```\n\n----------------------------------------\n\nTITLE: Using View Extender for Registering Blade Views (PHP)\nDESCRIPTION: Example of using the new View extender to register Laravel Blade views in Flarum extensions. This replaces the previous method of injecting a view factory in extend.php.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// extend.php\nuse Flarum\\Extend\\View;\n\nreturn [\n  (new View)->namespace(NAME, RELATIVE PATH);\n]\n```\n\n----------------------------------------\n\nTITLE: Renaming Columns in Flarum Migrations\nDESCRIPTION: This demonstrates how to rename columns in a Flarum migration using `Migration::renameColumns`. The method takes the table name and an array where keys are original column names and values are the new column names.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::renameColumns('users', ['from' => 'to']);\n```\n\n----------------------------------------\n\nTITLE: Configuring composer.json for Flarum Language Pack\nDESCRIPTION: This JSON snippet shows the required configuration in composer.json for a Flarum language pack. It specifies the language code and title within the 'flarum-locale' object.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/language-packs.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"flarum-locale\": {\n  \"code\": \"en\",\n  \"title\": \"English\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Language Pack in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to declare a language pack extension for Flarum using the LanguagePack extender. It's a simple instantiation with no additional configuration needed.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/language-packs.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn new Flarum\\Extend\\LanguagePack();\n```\n\n----------------------------------------\n\nTITLE: Defining Translation Key Suffixes for GUI Objects in YAML\nDESCRIPTION: This snippet lists suffixes used for translation keys related to GUI objects and user operations. These suffixes indicate how the translation is used in the interface.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n_button:        # Used for buttons (including dropdown menu items).\n_link:          # Used for links that are not shown graphically as buttons.\n_heading:       # Used for headings in tables and lists.\n_label:         # Used for the names of data fields, checkbox settings, etc.\n_placeholder:   # Used for placeholder text displayed in fields.\n```\n\n----------------------------------------\n\nTITLE: Referencing Translation Keys in YAML\nDESCRIPTION: This YAML code shows how to create and reference translation keys within a Flarum extension to ensure flexibility across different interface elements. The keys are linked using special syntax to maintain consistent translations while allowing differentiation when necessary. There are no dependencies, and the key pattern consists of an equal sign, greater-than sign, and space.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nedit_stuff_button: => edit_stuff    # Used in the code that creates the button.\nedit_stuff_title: => edit_stuff     # Used in the code that creates the dialog.\n\nedit_stuff: Edit Stuff              # Not used in the code.\n```\n\n----------------------------------------\n\nTITLE: Renaming Database Table in Flarum Migration\nDESCRIPTION: Using the Migration::renameTable helper to rename an existing database table in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::renameTable($from, $to);\n```\n\n----------------------------------------\n\nTITLE: Running Frontend Development Watch Mode for Extensions\nDESCRIPTION: Commands for watching JavaScript files for changes during extension development.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/contributing.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd extensions/tags/js\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Updating Frontend Translations in JavaScript\nDESCRIPTION: Changes required for frontend translations, moving from transChoice to trans method and adjusting argument passing.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Old code\napp.translator.transChoice('some-translation', guestCount, {host: hostName});\n\n// New code\napp.translator.trans('some-translation', {host: hostName, guestCount });\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination for List API Controller in PHP\nDESCRIPTION: Demonstrates how to set up pagination limits and extract pagination information from the request in a list controller.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// The number of records included by default.\npublic $limit = 20;\n\n// The maximum number of records that can be requested.\npublic $maxLimit = 50;\n\n$limit = $this->extractLimit($request);\n$offset = $this->extractOffset($request);\n\nreturn Tag::skip($offset)->take($limit);\n```\n\n----------------------------------------\n\nTITLE: Specifying Optional Dependencies in composer.json\nDESCRIPTION: JSON configuration in composer.json to specify optional dependencies for a Flarum extension, ensuring proper boot order.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extra\": {\n    \"flarum-extension\": {\n      \"optional-dependencies\": [\n        \"flarum/tags\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Child Components in Mithril\nDESCRIPTION: This snippet illustrates the updated method of passing child elements to components in Mithril. It shows the old prop syntax, which has been replaced by simply passing children as the second argument of the component method.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nButton.component({\n  className: 'Button Button--primary',\n  children: 'Button Text'\n});\n```\n\n----------------------------------------\n\nTITLE: Discussion Model Scoper for 'viewPrivate' ability\nDESCRIPTION: This is a fake example of a custom scoper for the `Discussion` model, specifically for the `viewPrivate` ability. It demonstrates how to use `orWhere` to add additional conditions to the query, allowing discussions to be visible based on specific column values.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace ACME\\YourExtension\\Access;\n\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     */\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->orWhere(function($query) use ($actor) {\n            $query->where('some_column', true);\n            $query->where('some_other_column', false);\n        })\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Tag Model Scoper with 'view' ability\nDESCRIPTION: This code snippet demonstrates a custom scoper for the `Tag` model in Flarum. It restricts the query to only include tags for which the specified user has the `viewForum` permission. It uses a subquery to filter tags based on user permissions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeTagVisibility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     */\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->whereIn('id', function ($query) use ($actor) {\n            Tag::query()->setQuery($query->from('tags'))->whereHasPermission($actor, 'viewForum')->select('tags.id');\n        });\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using UploadImageController in PHP\nDESCRIPTION: The UploadImageController can now be used as a base class for controllers that handle image uploads, such as logos and favicons.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b15.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nFlarum\\Api\\Controller\\UploadImageController\n```\n\n----------------------------------------\n\nTITLE: Testing Console Commands in Flarum\nDESCRIPTION: Example of testing custom console commands in Flarum using the ConsoleTestCase class. Shows how to execute a command with arguments and options and verify its output.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Tests\\integration\\ConsoleTestCase;\n\nclass ConsoleTest extends ConsoleTestCase\n{\n    /**\n     * @test\n     */\n    public function command_works()\n    {\n        $input = [\n            'command' => 'some:command',  // The command name, equivalent of `php flarum some:command`\n            'foo' => 'bar',  // arguments\n            '--lorem' => 'ipsum'  // options\n        ];\n\n        $this->assertEquals('Some Output.', $this->runCommand($input));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Composer Path Repository Configuration\nDESCRIPTION: Command to configure Composer to look for packages in a local packages directory during development.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/start.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer config repositories.0 path \"packages/*\"\n```\n\n----------------------------------------\n\nTITLE: PHP Namespace Reference - Translator Interface\nDESCRIPTION: Updated translator interface namespace for Laravel 6 compatibility\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nSymfony\\Component\\Translation\\TranslatorInterface\n```\n\n----------------------------------------\n\nTITLE: Creating a Discussion API Response\nDESCRIPTION: Example JSON response after successfully creating a new discussion, including the new discussion's ID, attributes, and relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"type\": \"discussions\",\n    \"id\": \"42\",\n    \"attributes\": {\n      \"title\": \"Lorem Ipsum\",\n      \"slug\": \"42-lorem-ipsum\",\n      \"commentCount\": 1\n      // [...] other attributes\n    },\n    \"relationships\": {\n      \"posts\": {\n        \"data\": [\n          {\n            \"type\": \"posts\",\n            \"id\": \"58\"\n          }\n        ]\n      },\n      \"user\": {\n        \"data\": {\n          \"type\": \"users\",\n          \"id\": \"1\"\n        }\n      }\n      // [...] other relationships\n    }\n  },\n  \"included\":[\n    {\n      \"type\": \"posts\",\n      \"id\": \"38\",\n      \"attributes\": {\n        \"number\": 1,\n        \"contentType\": \"comment\",\n        \"contentHtml\": \"\\u003Cp\\u003EHello World\\u003C\\/p\\u003E\"\n        // [...] other attributes\n      }\n    }\n    // [...] other includes\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using LanguagePack Extender with Custom Path in PHP\nDESCRIPTION: Demonstrates how to use the updated Flarum\\Extend\\LanguagePack extender, which now accepts an optional path in its constructor for storing locales in a different directory.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b10.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend\\LanguagePack;\n\nreturn [\n    new LanguagePack('custom/path/to/locales')\n];\n```\n\n----------------------------------------\n\nTITLE: Component Subtree Retention in JavaScript\nDESCRIPTION: Example of using SubtreeRetainer with Mithril 2 to optimize component redraws by tracking data changes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.showContent = false;\n\n    this.subtree = new SubtreeRetainer(\n      () => this.showContent,\n    )\n  }\n\n  onbeforeupdate() {\n    return this.subtree.needsRebuild();\n  }\n\n  view(vnode) {\n    return <div>\n      <button onclick={() => this.showContent = !this.showContent}>Toggle Extra Content</button>\n      <p>Hello World!{this.showContent ? ' Extra Content!' : ''}</p>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Configuration for Unit Tests\nDESCRIPTION: Example PHPUnit configuration file for unit tests in Flarum extensions, including Mockery test listener and targeting the unit directory.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n\n    <testsuites>\n        <testsuite name=\"Flarum Unit Tests\">\n            <directory suffix=\"Test.php\">./unit</directory>\n        </testsuite>\n    </testsuites>\n    <listeners>\n        <listener class=\"\\Mockery\\Adapter\\Phpunit\\TestListener\"></listener>\n    </listeners>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Installing cron on Debian/Ubuntu\nDESCRIPTION: These commands update the package list and install the `cron` daemon on Debian and Ubuntu based systems. Cron is essential for scheduling tasks.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/scheduler.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install cron\n```\n\n----------------------------------------\n\nTITLE: Configuring DayJS Localization in JavaScript\nDESCRIPTION: JavaScript code to set up date localization using DayJS library for a specific language.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/language-packs.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndayjs.locale('xx');\n```\n\n----------------------------------------\n\nTITLE: Updating Redraw Prevention in JavaScript for Mithril 2.0\nDESCRIPTION: This snippet shows how to update the method for preventing redraws when migrating from Mithril 0.2 to Mithril 2.0. It demonstrates the change from using 'm.redraw.strategy('none')' to setting 'e.redraw = false'.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\n<button onclick={() => {\n  console.log(\"Hello world\");\n  m.redraw.strategy('none');\n}}>\n  Click Me!\n</button>\n\n// Mithril 2\n<button onclick={e => {\n  console.log(\"Hello world\");\n  e.redraw = false;\n}}>\n  Click Me!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Initializing Flarum Extension Frontend\nDESCRIPTION: Demonstrates how to initialize a Flarum extension's frontend code using an initializer callback.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {extend, override} from 'flarum/extend';\n\napp.initializers.add('our-extension', function(app) {\n  // Your extension code here\n  console.log(\"EXTENSION NAME is working!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing Flarum Assets\nDESCRIPTION: Publishes assets from core and extensions (compiled JS/CSS, bootstrap icons, logos, etc). Useful if assets are corrupted or when changing the filesystem driver.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum assets:publish\n```\n\n----------------------------------------\n\nTITLE: Adding PHPStan using Flarum CLI\nDESCRIPTION: Command to automatically add and update PHPStan infrastructure to your Flarum extension using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra phpstan\n```\n\n----------------------------------------\n\nTITLE: Defining Special Handling Translation Keys in YAML\nDESCRIPTION: In this snippet, special keys for translations are defined, specifically for 'ref' for reused translations and 'group' for default group names. These keys do not correspond to specific interfaces, rather they handle translations that require distinct processing.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/i18n.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nref:         # Translations referenced by more than one key.\ngroup:       # Translations used as default group names.\n```\n\n----------------------------------------\n\nTITLE: Implementing Country Search Gambit in PHP\nDESCRIPTION: A custom search gambit implementation that allows filtering users by country using a regex pattern. Extends AbstractRegexGambit to handle country-based search queries with the pattern 'country:[value]'.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Search\\AbstractRegexGambit;\nuse Flarum\\Search\\SearchState;\n\nclass CountryGambit extends AbstractRegexGambit\n{\n    public function getGambitPattern(): string\n    {\n        return 'country:(.+)';\n    }\n\n    public function conditions(SearchState $search, array $matches, bool $negate)\n    {\n        $country = trim($matches[1], '\"');\n\n        $search->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User in Flarum's REST API\nDESCRIPTION: Example of a POST request to /api/users to create a new user with username, email, and password. This shows the minimum required fields for user creation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"attributes\": {\n      \"username\": \"Flarum\",\n      \"email\": \"flarum@example.com\",\n      \"password\": \"correcthorsebatterystaple\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Extension Classes in PHP\nDESCRIPTION: Example of importing and using classes from other extensions in PHP backend code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Tags\\Tag;\n\nclass SomeClass\n{\n    public function someMethod()\n    {\n        return new Tag();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend Workflow Configuration\nDESCRIPTION: YAML configuration for setting up frontend testing workflows in Flarum extensions, including bundlewatch, prettier, and typescript options.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/github-actions.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Frontend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_frontend.yml@main\n    with:\n      enable_bundlewatch: false\n      enable_prettier: true\n      enable_typescript: false\n\n      frontend_directory: ./js\n      backend_directory: .\n      js_package_manager: yarn\n      main_git_branch: main\n\n    secrets:\n      bundlewatch_github_token: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan Package for Flarum Extensions\nDESCRIPTION: Command to install the flarum/phpstan package as a development dependency in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/static-code-analysis.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/phpstan:^2.0\n```\n\n----------------------------------------\n\nTITLE: Passing Children to Components in Mithril 2\nDESCRIPTION: Examples showing the old and new ways to pass children to components in Mithril 2, including using the component method and JSX syntax.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nButton.component({\n  className: 'Button Button--primary',\n  children: 'Button Text'\n});\n```\n\n----------------------------------------\n\nTITLE: Updated Modal Opening in JavaScript\nDESCRIPTION: The new way to open modals after the Mithril upgrade. Instead of providing a Modal component instance, pass the component class and any attributes separately.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\napp.modal.show(LoginModal, {identification: 'prefilledUsername'});\n```\n\n----------------------------------------\n\nTITLE: PHP Middleware Stack Example\nDESCRIPTION: Reference to adding, removing or replacing middleware in Flarum's three middleware stacks (api, forum, admin) using the new Flarum\\Extend\\Middleware extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b12.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nFlarum\\Extend\\Middleware\n```\n\n----------------------------------------\n\nTITLE: Registering Number Setting with Constraints for Flarum Extension\nDESCRIPTION: Demonstrates registering a number setting with min and max constraints for a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/admin.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  setting: 'acme-interstellar.crew_count',\n  label: app.translator.trans('acme-interstellar.admin.crew_count_label'),\n  type: 'number',\n  min: 1,\n  max: 10\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving URL Generator in PHP\nDESCRIPTION: Example of how to resolve and use the URL generator in PHP after the changes in Beta 14. The 'app()->url()' method no longer works, and developers need to inject or resolve an instance of Flarum\\Http\\UrlGenerator.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$urlGenerator = app()->make(Flarum\\Http\\UrlGenerator::class);\n$url = $urlGenerator->to('route.name');\n```\n\n----------------------------------------\n\nTITLE: Tagging a Git Release for Flarum Extension\nDESCRIPTION: Commands to tag a new version of your extension in Git and push it to the remote repository, which is required before publishing on Packagist.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/distribution.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v0.1.0\ngit push && git push --tags\n```\n\n----------------------------------------\n\nTITLE: Package Configuration for Flarum Extension\nDESCRIPTION: NPM package.json configuration for a Flarum extension, defining dependencies, dev dependencies, and build scripts for webpack compilation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"private\": true,\n  \"name\": \"@acme/flarum-hello-world\",\n  \"dependencies\": {\n    \"flarum-webpack-config\": \"^1.0.0\",\n    \"webpack\": \"^4.0.0\",\n    \"webpack-cli\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"flarum-tsconfig\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"dev\": \"webpack --mode development --watch\",\n    \"build\": \"webpack --mode production\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Event Listeners with Flarum CLI\nDESCRIPTION: Command to automatically generate event listener boilerplate code using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/backend-events.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend event-listener\n```\n\n----------------------------------------\n\nTITLE: Creating Serializer via CLI - Flarum\nDESCRIPTION: Command line instruction for automatically generating a serializer using Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend api-serializer\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Flarum Extension\nDESCRIPTION: Webpack configuration file that uses Flarum's official webpack config for proper JavaScript compilation and bundling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = require('flarum-webpack-config');\n\nmodule.exports = config();\n```\n\n----------------------------------------\n\nTITLE: YAML Definition with HTML Tags\nDESCRIPTION: Shows the YAML translation definition that includes HTML tag placeholders. The tags in the translation correspond to the elements passed as parameters in the code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nicon_text: \"Introduce el nombre de cualquier clase de icono <a>FontAwesome</a>, <em>sin</em> el prefijo <code>fa-</code>.\"\n```\n\n----------------------------------------\n\nTITLE: Database Migration Command - PHP\nDESCRIPTION: Command to update Flarum's database schema to the latest version using the CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/troubleshoot.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nphp flarum migrate\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum Testing Package via Composer\nDESCRIPTION: Command to install the Flarum testing package as a development dependency.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/testing:^1.0\n```\n\n----------------------------------------\n\nTITLE: Initializing Flarum Extension Frontend\nDESCRIPTION: Basic structure of an index.js file for a Flarum extension, showing how to add an initializer for the extension's frontend code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extend, override } from 'flarum/common/extend';\n\napp.initializers.add('acme-flarum-hello-world', function(app) {\n  // Your Extension Code Here\n  console.log(\"EXTENSION NAME is working!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Directory with Index Module Import Patterns in TypeScript\nDESCRIPTION: Demonstrates different ways to import from a directory with an index.js file, allowing for named imports, namespace imports, or specific module imports.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/registry.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Can import as\nimport Routes from 'flarum/common/extenders/Routes';\n// Or\nimport { Model, PostTypes } from 'flarum/common/extenders';\n// Or\nimport Extend from 'flarum/common/extenders';\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Pack in composer.json\nDESCRIPTION: JSON configuration for the composer.json file that specifies the language pack details including language code and title.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/language-packs.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"flarum-locale\": {\n  \"code\": \"en\",\n  \"title\": \"English\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Actions Workflows for Frontend - YAML\nDESCRIPTION: This snippet illustrates the setup of a frontend GitHub Actions workflow that runs in a single job. It includes several parameters for build scripts, JavaScript package management, and configuration for tests and formatting.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/github-actions.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Frontend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_frontend.yml@main\n    with:\n      enable_bundlewatch: false\n      enable_prettier: true\n      enable_typescript: false\n\n      frontend_directory: ./js\n      backend_directory: .\n      js_package_manager: yarn\n      main_git_branch: main\n\n    secrets:\n      bundlewatch_github_token: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Composer Loading in Mithril 2 (New Pattern)\nDESCRIPTION: The new way of loading a composer in Flarum with Mithril 2, passing the component class and attributes separately to avoid creating component instances.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 2\napp.composer.load(DiscussionComposer, {user: app.session.user})\n```\n\n----------------------------------------\n\nTITLE: Accessing Cached Data from Flarum Store in Javascript\nDESCRIPTION: This code snippet demonstrates how to access cached data from the Flarum frontend store using the `all` and `getById` methods. It shows how to retrieve all resources of a given type or a specific resource by its ID after they have been initially loaded from the API.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussions = app.store.all('discussions');\nconst discussion = app.store.getById('discussions', 123);\n```\n\n----------------------------------------\n\nTITLE: Defining Second-level Translation Key Namespaces in YAML\nDESCRIPTION: Examples of second-level namespaces that indicate which interface uses the translation. These include admin, forum, lib, views, api, and email interfaces where translations are used.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:       # Translations used by the admin interface.\nforum:       # Translations used by the forum user interface.\nlib:         # Translations used by either of the above.\nviews:       # Translations used outside the normal JS client.\napi:         # Translations used in messages output by the API.\nemail:       # Translations used in emails sent by Flarum.\n```\n\n----------------------------------------\n\nTITLE: Configuring DayJS Locale for Flarum Language Pack\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the DayJS library for date internationalization in a Flarum language pack. It sets the locale for the specific language.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/language-packs.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ndayjs.locale('xx');\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Category in Flarum Extension JSON\nDESCRIPTION: JSON configuration snippet showing how to mark a Flarum extension as a theme by setting the category property in the extension's composer.json file.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/theme.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // other fields\n    \"extra\": {\n        \"flarum-extension\": {\n            \"category\": \"theme\"\n        }\n    }\n    // other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Informative Suffixes in YAML\nDESCRIPTION: This snippet outlines additional suffixes tailored for informative or descriptive text elements in the interface. These suffixes assist in categorizing translations that provide feedback or conversion messages to users.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/i18n.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n_confirmation:  # Used for messages displayed to confirm an operation.\n_message:       # Used for messages that show the result of an operation.\n_text:          # Used for any text that is not a message, title, or tooltip.\n_title:         # Used for text displayed as the title of a page or modal.\n_tooltip:       # Used for text displayed when the user hovers over something.\n```\n\n----------------------------------------\n\nTITLE: Defining Key References in YAML for Flarum Translations\nDESCRIPTION: Demonstrates how to define multiple translation keys that reference a single shared translation in a YAML file for Flarum extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/i18n.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nedit_stuff_button: => edit_stuff    # Used in the code that creates the button.\nedit_stuff_title: => edit_stuff     # Used in the code that creates the dialog.\n\nedit_stuff: Edit Stuff              # Not used in the code.\n```\n\n----------------------------------------\n\nTITLE: Defining Pluralizable Translations in YAML for Flarum\nDESCRIPTION: YAML configuration for translation keys that support pluralization in Flarum's localization system. These translations are used for the 'mentioned by' feature, allowing for singular and plural forms.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nmentioned_by_text: \"{users} replied to this.\"       # Can be pluralized ...\nmentioned_by_self_text: \"{users} replied to this.\"  # Can be pluralized ...\n```\n\n----------------------------------------\n\nTITLE: Deprecated Closure Extender in PHP\nDESCRIPTION: Example of a deprecated closure extender in Flarum's extend.php file. This approach is no longer supported in Flarum 1.0.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\FilterDiscussionListByTags::class);\n        $events->subscribe(Listener\\FilterPostsQueryByTag::class);\n        $events->subscribe(Listener\\UpdateTagMetadata::class);\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: CSRF Token Mismatch Error Response\nDESCRIPTION: Example JSON error response when a CSRF token mismatch occurs, typically due to missing or invalid Authorization header.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"400\",\n      \"code\": \"csrf_token_mismatch\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Name in PHP Controllers and Middleware\nDESCRIPTION: Demonstrates how to access the route name in PHP controllers and middleware after the ResolveRoute middleware.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-b15.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$request->getAttribute('routeName')\n```\n\n----------------------------------------\n\nTITLE: View Extender Migration\nDESCRIPTION: Examples showing old and new ways to register Laravel Blade views in Flarum\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n  function (Factory $view) {\n    $view->addNamespace(NAME, RELATIVE PATH);\n  }\n]\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend\\View;\n\nreturn [\n  (new View)->namespace(NAME, RELATIVE PATH);\n]\n```\n\n----------------------------------------\n\nTITLE: Testing Environment Setup Script\nDESCRIPTION: PHP script to initialize the testing database and file structure for Flarum integration tests.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Testing\\integration\\Setup\\SetupScript;\n\nrequire __DIR__.'/../../vendor/autoload.php';\n\n$setup = new SetupScript();\n\n$setup->run();\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum via Composer CLI\nDESCRIPTION: Command to create a new Flarum installation using Composer package manager, installing version 2.0.0 beta.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/install.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project flarum/flarum:^2.0.0 --stability=beta .\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum Extension Manager\nDESCRIPTION: Composer command to install the Extension Manager package which enables installing extensions via admin dashboard.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/install.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require flarum/extension-manager:\"*\"\n```\n\n----------------------------------------\n\nTITLE: Frontend Settings Configuration in Flarum\nDESCRIPTION: Shows how to serialize settings for frontend access using the Settings extender in Flarum's extend.php configuration file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n   (new Extend\\Settings)\n      ->serializeToForum('myCoolSetting', 'my.cool.setting.key')\n      ->serializeToForum('myCoolSettingModified', 'my.cool.setting.key', function ($retrievedValue) {\n        // This third argument is optional, and allows us to pass the retrieved setting through some custom logic.\n        // In this example, we'll append a string to it.\n\n        return \"My Cool Setting: $retrievedValue\";\n      }, \"default value!\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Testing with Jest in package.json\nDESCRIPTION: Shows how to set up the package.json file for running frontend tests using Jest in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"scripts\": {\n    ...,\n    \"test\": \"yarn node --experimental-vm-modules $(yarn bin jest)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Tooltip Component in React/JSX\nDESCRIPTION: Example of how to use the new Tooltip component in React/JSX syntax for creating tooltips in Flarum extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Tooltip text=\"You wish!\">\n  <button>\n    Click for free money!\n  </button>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Registering Pusher Notification Driver in PHP\nDESCRIPTION: Example of registering a custom Pusher notification driver using the Notification extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend\nuse Flarum\\Pusher\\PusherNotificationDriver;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->driver('pusher', PusherNotificationDriver::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Button.component Usage in Mithril 2\nDESCRIPTION: Examples of correct ways to pass children to Button.component in Mithril 2, using both the component method and JSX.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nButton.component({\n  className: 'Button Button--primary'\n}, 'Button Text');\n\n<Button className='Button Button--primary'>Button Text</Button>\n```\n\n----------------------------------------\n\nTITLE: Interface Level Translation Keys in YAML\nDESCRIPTION: Second-level translation keys used to indicate which interface uses the translation\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:       # Translations used by the admin interface.\nforum:       # Translations used by the forum user interface.\nlib:         # Translations used by either of the above.\nviews:       # Translations used outside the normal JS client.\napi:         # Translations used in messages output by the API.\nemail:       # Translations used in emails sent by Flarum.\n```\n\n----------------------------------------\n\nTITLE: Integration Test for Alert Component\nDESCRIPTION: Comprehensive integration test for Flarum's Alert component demonstrating various rendering and interaction scenarios\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('Alert displays as expected', () => {\n  it('should display alert messages with an icon', () => {\n    const alert = mq(m(Alert, { type: 'error' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toHaveElement('i.icon');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Mail Driver in Flarum's extend.php\nDESCRIPTION: This code snippet shows how to register a custom mail driver in Flarum's extend.php file using the Mail extender. It demonstrates the proper syntax for adding the driver to the extension's configuration.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/mail.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Mail\\CustomDriver;\n\nreturn [\n  // Other extenders\n  (new Extend\\Mail())->driver(CustomDriver::class)\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Route Registration in Flarum with Mithril 2.0\nDESCRIPTION: This snippet shows how to update the route registration syntax when migrating from Mithril 0.2 to Mithril 2.0 in Flarum. It demonstrates the change from passing a component instance to passing a component class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\napp.routes.new_page = { path: '/new', component: NewPage.component() }\n\n// Mithril 2.0\napp.routes.new_page = { path: '/new', component: NewPage }\n```\n\n----------------------------------------\n\nTITLE: Overriding Flarum Views in PHP\nDESCRIPTION: This PHP snippet outlines how to override existing templates in Flarum by setting up a corresponding directory structure. The `extendNamespace` method is used to specify the path to the override views. It requires the `Flarum\\Extend` and `Illuminate\\Contracts\\View\\Factory` dependencies.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/views.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->extendNamespace('acme.hello-world', __DIR__.'/override_views');\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Flarum Extension Frontend\nDESCRIPTION: This snippet shows the contents of package.json for a Flarum extension's frontend. It includes necessary dependencies and scripts for development and production builds.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/frontend.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"private\": true,\n  \"name\": \"@acme/flarum-hello-world\",\n  \"dependencies\": {\n    \"flarum-webpack-config\": \"^1.0.0\",\n    \"webpack\": \"^4.0.0\",\n    \"webpack-cli\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"flarum-tsconfig\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"dev\": \"webpack --mode development --watch\",\n    \"build\": \"webpack --mode production\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing from Other Extensions in JavaScript\nDESCRIPTION: Demonstrates how to import exported functionality from other extensions in the frontend JavaScript code after configuring webpack.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst allThingsExportedBySomeExtension = require('@flarum-tags');\n```\n\n----------------------------------------\n\nTITLE: Create Discussion Request\nDESCRIPTION: Example request body for creating a new discussion via POST /api/discussions, demonstrating required attributes and tag relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\":{\n    \"type\": \"discussions\",\n    \"attributes\": {\n      \"title\": \"Lorem Ipsum\",\n      \"content\": \"Hello World\"\n    },\n    \"relationships\": {\n      \"tags\": {\n        \"data\": [\n          {\n            \"type\": \"tags\",\n            \"id\": \"1\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Models with TypeScript in Flarum\nDESCRIPTION: Demonstrates how to add attributes and relationships to existing models using the Model extender with TypeScript typing for better type safety.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n  new Extend.Model(Discussion)\n    .attribute<string>('slug')\n    .hasOne<User>('user')\n    .hasMany<Post>('posts')\n```\n\n----------------------------------------\n\nTITLE: API Error Response Examples\nDESCRIPTION: Examples of error responses following the JSON:API error specification, including CSRF token mismatch and validation errors.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"400\",\n      \"code\": \"csrf_token_mismatch\"\n    }\n  ]\n}\n\n{\n  \"errors\": [\n    {\n      \"status\": \"422\",\n      \"code\": \"validation_error\",\n      \"detail\": \"The username has already been taken.\",\n      \"source\":{\n        \"pointer\":\"\\/data\\/attributes\\/username\"\n      }\n    },\n    {\n      \"status\": \"422\",\n      \"code\": \"validation_error\",\n      \"detail\": \"The email has already been taken.\",\n      \"source\": {\n        \"pointer\":\"\\/data\\/attributes\\/email\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Background Tasks with Composer Bash\nDESCRIPTION: This command runs Composer tasks in the background using the queue to handle timeout issues. Requires installation of Blomstra's Database Queue Implementation. Executes Composer commands without user intervention.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/internal/package-manager.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer [command] &\n```\n\n----------------------------------------\n\nTITLE: Injecting SettingsRepositoryInterface in PHP\nDESCRIPTION: Demonstrates how to use dependency injection to access the SettingsRepositoryInterface in a Flarum extension class. This allows reading and modifying settings within the class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace acme\\HelloWorld\\ExampleDir;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\n\nclass ClassInterfacesWithSettings\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub Actions via Flarum CLI\nDESCRIPTION: Command to automatically add and update GitHub Actions workflows using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra githubActions\n```\n\n----------------------------------------\n\nTITLE: Accessing Cached Store Data\nDESCRIPTION: Shows how to access cached resources from the store using all and getById methods.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/models.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussions = app.store.all('discussions');\nconst discussion = app.store.getById('discussions', 123);\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltips Component\nDESCRIPTION: Example of using the new Tooltip component in TSX/React-style syntax for creating tooltips instead of direct jQuery manipulation\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Tooltip text=\"You wish!\">\n  <button>\n    Click for free money!\n  </button>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Returning a Custom JSON API Response from Middleware\nDESCRIPTION: This example shows how to return a custom error response from middleware instead of passing the request to the next handler, useful for validation or permission checks.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/middleware.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\JsonApiResponse;\nuse Tobscure\\JsonApi\\Document;\nuse Tobscure\\JsonApi\\Exception\\Handler\\ResponseBag;\n\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    if ($userFoundInDatabase) {\n        $error = new ResponseBag('422', [\n            [\n                'status' => '422',\n                'code' => 'validation_error',\n                'source' => [\n                    'pointer' => '/data/attributes/email',\n                ],\n                'detail' => 'Yikes! Your email can\\'t be used.',\n            ],\n        ]);\n        $document = new Document();\n        $document->setErrors($error->getErrors());\n      \n        return new JsonApiResponse($document, $error->getStatus());\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Select Box Setting for Flarum Extension in JavaScript\nDESCRIPTION: Example of how to register a dropdown select setting for a Flarum extension. This shows how to define options and a default value for a select input.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/admin.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  setting: 'acme-interstellar.fuel_type',\n  label: app.translator.trans('acme-interstellar.admin.fuel_type_label'),\n  type: 'select',\n  options: {\n    'LOH': 'Liquid Fuel', // La chiave in questo oggetto è ciò che verrà memorizzato nel database, il valore è l'etichetta che l'amministratore vedrà (ricorda di usare le traduzioni se hanno senso nel tuo contesto).\n    'RDX': 'Solid Fuel',\n  },\n  default: 'LOH',\n}\n```\n\n----------------------------------------\n\nTITLE: Using AffixedSidebar Component\nDESCRIPTION: Example of migrating from the affixSidebar util to the new AffixedSidebar component for creating affixed sidebars in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nclass OldWay extends Component {\n  view() {\n    return <div>\n      <div className=\"container\">\n        <div className=\"sideNavContainer\">\n          <nav className=\"sideNav\" config={affixSidebar}>\n            <p>Affixed Sidebar</p>\n          </nav>\n          <div className=\"sideNavOffset\">Actual Page Content</div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n\nclass NewWay extends Component {\n  view() {\n    return <div>\n      <div className=\"container\">\n        <div className=\"sideNavContainer\">\n          <AffixedSidebar>\n            <nav className=\"sideNav\">\n              <p>Affixed Sidebar</p>\n            </nav>\n          </AffixedSidebar>\n          <div className=\"sideNavOffset\">Actual Page Content</div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Frontend Model in JavaScript\nDESCRIPTION: Shows how to register a new model with the frontend store\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\napp.store.models.tags = Tag;\n```\n\n----------------------------------------\n\nTITLE: Etiquetando y Publicando una Versión con Git\nDESCRIPTION: Comandos para etiquetar una nueva versión de la extensión y publicarla en el repositorio remoto de Git.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/distribution.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v0.1.0\ngit push && git push --tags\n```\n\n----------------------------------------\n\nTITLE: Informative Text Translation Suffixes in YAML\nDESCRIPTION: Defines suffix conventions for informative and descriptive text elements in the interface.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n_confirmation:  # Utilizzato per i messaggi visualizzati per confermare un'operazione.\n_message:       # Utilizzato per i messaggi che mostrano il risultato di un'operazione.\n_text:          # Utilizzato per qualsiasi testo che non sia un messaggio, un titolo o una descrizione comando.\n_title:         # Utilizzato per il testo visualizzato come titolo di una pagina o modale.\n_tooltip:       # Utilizzato per il testo visualizzato quando l'utente passa con il mouse su qualcosa.\n```\n\n----------------------------------------\n\nTITLE: Executing Composer Why-Not Command for Compatibility Checking in PHP\nDESCRIPTION: This command is used to check why a specific version of flarum/core cannot be installed. It's particularly useful when trying to diagnose compatibility issues during major version updates.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/internal/package-manager.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ncomposer why-not flarum/core 2.0\n```\n\n----------------------------------------\n\nTITLE: Implementing KnownError Interface in PHP\nDESCRIPTION: Example of implementing the KnownError interface for custom exception classes with semantic meaning.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b10.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Flarum\\Foundation\\KnownError;\n\nclass CustomException implements KnownError\n{\n    public function getType(): string\n    {\n        return 'custom_error_type';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Visible Groups in PHP using Flarum's whereVisibleTo Method\nDESCRIPTION: Demonstrates how to use the whereVisibleTo method to query for groups visible to a specific user. It shows both constructing a new query and applying visibility scoping to an existing query.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\n// Construct and execute a query for all groups that a given user can see.\n$groups = Group::whereVisibleTo($actor)->get();\n\n// Apply visibility scoping to an existing query.\nMore eloquent filters can be added after this.\n$query\n  ->whereVisibleTo($actor)\n  ->whereRaw('1=1');\n\n// Apply visibility scoping with an ability\n$query\n  ->whereVisibleTo($actor, 'someAbility')\n```\n\n----------------------------------------\n\nTITLE: Defining Translation Key Suffixes for Informative Text Elements in YAML\nDESCRIPTION: This snippet lists the suffixes used in translation keys for informative or descriptive text elements in the Flarum interface. It includes suffixes for confirmations, messages, and tooltips.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n_confirmation:  # Used for messages displayed to confirm an operation.\n_message:       # Used for messages that show the result of an operation.\n_text:          # Used for any text that is not a message, title, or tooltip.\n_title:         # Used for text displayed as the title of a page or modal.\n_tooltip:       # Used for text displayed when the user hovers over something.\n```\n\n----------------------------------------\n\nTITLE: Apache Directory Configuration\nDESCRIPTION: Apache configuration to enable .htaccess overrides for proper URL rewriting in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/install.md#2025-04-16_snippet_2\n\nLANGUAGE: apache\nCODE:\n```\n<Directory \"/path/to/flarum/public\">\n    AllowOverride All\n</Directory>\n```\n\n----------------------------------------\n\nTITLE: Installing Local Extension\nDESCRIPTION: Command to install a locally developed Flarum extension using Composer.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/start.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require acme/flarum-hello-world *@dev\n```\n\n----------------------------------------\n\nTITLE: Registering Search Indexer Extension\nDESCRIPTION: Example of registering a custom search indexer using Flarum's extension system.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/search.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    \n    // Other extenders..\n    \n    (new Extend\\SearchIndex())\n        ->indexer(Acme::class, AcmeIndexer::class),\n    \n    // Other extenders..\n    \n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Autoload for Local Extenders in Flarum\nDESCRIPTION: This JSON snippet shows how to modify the composer.json file to enable autoloading of custom classes for local extenders. It sets up PSR-4 autoloading for the 'App\\' namespace, pointing to the 'app/' directory.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extenders.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"autoload\": {\n    \"psr-4\": {\n        \"App\\\\\": \"app/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Literal Block for Multiline Translations\nDESCRIPTION: Shows how to use YAML literal blocks for multiline translations in Flarum locale files, preserving line breaks and indentation in the output.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nliteral_block_text: |\n  These lines will be displayed as shown here, line breaks and all.\n\n      Extra indentation is also preserved: this line will be indented 4 spaces!\n\n  Quote marks are unnecessary, even when the block contains special characters.\n```\n\n----------------------------------------\n\nTITLE: State Pattern Implementation\nDESCRIPTION: Shows how to implement a POJO state pattern for managing data that needs to be accessed by multiple unrelated components.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass Counter {\n  constructor() {\n    this._counter = 0;\n  }\n\n  increaseCounter() {\n    this._counter += 1;\n  }\n\n  getCount() {\n    return this._counter;\n  }\n}\n\napp.counter = new Counter();\n\nextend(HeaderSecondary.prototype, 'items', function(items) {\n  items.add('counterDisplay',\n    <div>\n      <p>Counter: {app.counter.getCount()}</p>\n    </div>\n  );\n})\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('counterButton',\n    <div>\n      <button onclick={() => app.counter.increaseCounter()}>Increase Counter</button>\n    </div>\n  );\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Resources in JavaScript\nDESCRIPTION: Demonstrates how to delete a resource by calling the delete method on a model instance. This sends a DELETE request to the API and returns a promise that resolves when the resource is deleted.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_15\n\nLANGUAGE: js\nCODE:\n```\ndiscussion.delete().then(done);\n```\n\n----------------------------------------\n\nTITLE: Executing Composer Outdated Command for Update Checking in PHP\nDESCRIPTION: This snippet shows the PHP command used to check for updates of packages directly required in the root composer.json file. It outputs results in JSON format, displaying only packages marked as semver-safe-update and update-possible.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/internal/package-manager.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer outdated -D --format json\n```\n\n----------------------------------------\n\nTITLE: Defining Translation with Variable Placeholder\nDESCRIPTION: Shows the YAML translation definition that includes a variable placeholder for the query parameter. The placeholder is enclosed in curly braces and the entire string is quoted.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nall_discussions_button: 'Search all discussions for \"{query}\"'\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Flarum Update Compatibility\nDESCRIPTION: This command helps identify compatibility issues when updating Flarum by showing why a specific version cannot be installed.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/update.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer why-not flarum/core VERSION_YOU_WANT_TO_UPGRADE_TO\n```\n\n----------------------------------------\n\nTITLE: Configuring composer.json for Flarum Language Pack\nDESCRIPTION: This JSON snippet shows the required configuration in composer.json for a Flarum language pack. It specifies the language code and title within the flarum-locale object.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/language-packs.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"flarum-locale\": {\n  \"code\": \"en\",\n  \"title\": \"English\"\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Crontab Editor\nDESCRIPTION: Command to open the crontab editor for adding a new cron job.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/scheduler.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncrontab -e\n```\n\n----------------------------------------\n\nTITLE: Generating URLs in JavaScript\nDESCRIPTION: Example of generating URLs to routes on the frontend using Flarum's app.route method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = app.route('acme.user', { id: 123, foo: 'bar' });\n// http://yourforum.com/users/123?foo=bar\n```\n\n----------------------------------------\n\nTITLE: Generating Backend Routes with Flarum CLI\nDESCRIPTION: Shows the command to automatically generate backend routes using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/routes.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend route\n```\n\n----------------------------------------\n\nTITLE: Migrating affixSidebar to AffixedSidebar Component\nDESCRIPTION: Example of replacing the deprecated affixSidebar util with the new AffixedSidebar component in a Mithril component.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass NewWay extends Component {\n  view() {\n    return <div>\n      <div className=\"container\">\n        <div className=\"sideNavContainer\">\n          <AffixedSidebar>\n            <nav className=\"sideNav\">\n              <p>Affixed Sidebar</p>\n            </nav>\n          </AffixedSidebar>\n          <div className=\"sideNavOffset\">Actual Page Content</div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Test Configuration\nDESCRIPTION: TypeScript configuration for test files in Flarum extensions\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"include\": [\"tests/**/*\"],\n  \"files\": [\"../../../node_modules/@flarum/jest-config/shims.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Component Instance Storage Anti-Pattern Example\nDESCRIPTION: Example showing the old anti-pattern of storing component instances that should be avoided with Mithril's optimizations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass ChildComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return <p>{this.counter}</p>;\n  }\n}\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.child = new ChildComponent();\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.child.counter += 1}></button>\n        {this.child.render()}\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Autoload for Local Extenders\nDESCRIPTION: JSON configuration for composer.json to enable autoloading of custom PHP classes from the app directory using PSR-4 standard. This allows creation of new PHP files in an app subdirectory using the App namespace.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extenders.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"autoload\": {\n    \"psr-4\": {\n        \"App\\\\\": \"app/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing URL in Blade Templates in PHP\nDESCRIPTION: Shows how to access the URL generator in Blade templates in Flarum Beta 14. An instance of Flarum\\Http\\UrlGenerator is available via the $url variable.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// In blade.php templates\n$url->to('forum')->base();\n```\n\n----------------------------------------\n\nTITLE: Frontend Store Local Data Access\nDESCRIPTION: Shows how to access cached data from the frontend store without making API calls.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussions = app.store.all('discussions');\nconst discussion = app.store.getById('discussions', 123);\n```\n\n----------------------------------------\n\nTITLE: Scheduling Flarum's scheduler\nDESCRIPTION: This cron entry runs the Flarum scheduler every minute. It navigates to the Flarum project directory and executes the `flarum schedule:run` command via PHP, suppressing output.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/scheduler.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * cd /path-to-your-project && php flarum schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Pack in composer.json\nDESCRIPTION: This JSON snippet shows the required extra configuration for a language pack in composer.json. It defines the language code and title inside the flarum-locale object.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/language-packs.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"flarum-locale\": {\n  \"code\": \"en\",\n  \"title\": \"English\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating PHP Translator Interface Import for Flarum Beta 16\nDESCRIPTION: Demonstrates the new import statement for the Symfony Translator interface, which has been updated in Beta 16.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n```\n\n----------------------------------------\n\nTITLE: Installing a Flarum Extension via Composer\nDESCRIPTION: This command demonstrates how users can install a Flarum extension using Composer. It requires the vendor name and package name of the extension to be installed.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/distribution.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require vendor/package\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Models\nDESCRIPTION: Shows how to add attributes and relationships to existing models using the Model extender.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/models.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n  new Extend.Model(Discussion)\n    .attribute<string>('slug')\n    .hasOne<User>('user')\n    .hasMany<Post>('posts')\n```\n\n----------------------------------------\n\nTITLE: Importing Modules from Other Extensions in Flarum Frontend\nDESCRIPTION: Shows how to import modules from other Flarum extensions in the frontend TypeScript code using the ext: syntax.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/extending-extensions.md#2025-04-16_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport Tag from 'ext:flarum/tags/common/models/Tag';\n```\n\n----------------------------------------\n\nTITLE: Registering a Flarum Extension as a Theme with JSON\nDESCRIPTION: This snippet shows how to categorize an extension as a theme in Flarum by setting the extra.flarum-extension.category key to theme in the JSON configuration. This requires modifying your extension's composer.json file. There are no dependencies specific to this snippet, but it's important that this is placed within the extra section of the JSON structure of your extension's configuration.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/theme.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // other fields\n    \"extra\": {\n        \"flarum-extension\": {\n            \"category\": \"theme\"\n        }\n    }\n    // other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Settings Repository Interface in PHP\nDESCRIPTION: Example class showing how to inject and use the SettingsRepositoryInterface in a Flarum extension class\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace acme\\HelloWorld\\ExampleDir;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\n\nclass ClassInterfacesWithSettings\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Optional Dependencies in composer.json for Flarum Extension\nDESCRIPTION: This JSON snippet demonstrates how to specify optional dependencies for a Flarum extension in the composer.json file using the extra.flarum-extension.optional-dependencies key.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extra\": {\n    \"flarum-extension\": {\n      \"optional-dependencies\": [\n        \"flarum/tags\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Core Translation Namespaces in YAML\nDESCRIPTION: Example of primary translation namespaces used in Flarum core components\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncore:        # Traducciones utilizadas por el núcleo de Flarum\nvalidation:  # Traducciones utilizadas por el validador de Laravel\n```\n\n----------------------------------------\n\nTITLE: Incorrect Translation Reference Example in YAML\nDESCRIPTION: Shows an anti-pattern of referencing translation keys that aren't in the ref namespace, which can lead to unexpected changes and maintenance issues.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/i18n.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => Log In\n\n    log_in:\n      submit_button: => core.forum.header.log_in_link  # Never reference keys\n      title: => core.forum.header.log_in_link          # that aren't in \"ref\"!\n```\n\n----------------------------------------\n\nTITLE: Creating an Access Token via POST Request\nDESCRIPTION: Demonstrates how to create an access token by sending a POST request to the /api/token endpoint with user credentials. The response includes the token and user ID.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/token HTTP/1.1\n\n{\n    \"identification\": \"Toby\",\n    \"password\": \"pass7word\"\n}\n\nHTTP/1.1 200 OK\n\n{\n    \"token\": \"YACub2KLfe8mfmHPcUKtt6t2SMJOGPXnZbqhc3nX\",\n    \"userId\": \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: tsconfig.json Configuration\nDESCRIPTION: This snippet provides the configuration for `tsconfig.json`, which enables TypeScript support for the Flarum extension. It extends the `flarum-tsconfig` base configuration, includes source files and Flarum core typings, and specifies compiler options like the declaration directory and path mappings.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  //使用Flarum的tsconfig作为开始\n  \"extends\": \"flarum-tsconfig\",\n  // 这会匹配你的 `src` 文件夹中所有的.ts、.tsx、.d.ts、.js和.jsx文件\n  // 同时会让你的Typescript读取论坛核心的全局类型申明\n  // 以获取全局命名空间中的`dayjs`和`$`\n  \"include\": [\"src/**/*\", \"../vendor/flarum/core/js/dist-typings/@types/**/*\"],\n  \"compilerOptions\": {\n    // 这会让类型申明输出到 `dist-typings`\n    \"declarationDir\": \"./dist-typings\",\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"flarum/*\": [\"../vendor/flarum/core/js/dist-typings/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Language Pack Extension in PHP\nDESCRIPTION: Basic PHP code to declare a Flarum language pack extension using the LanguagePack extender. This is the minimum required code for the extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/language-packs.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn new Flarum\\Extend\\LanguagePack();\n```\n\n----------------------------------------\n\nTITLE: Using Bidi Binding for Form Inputs in Flarum (JSX)\nDESCRIPTION: This snippet demonstrates how to use bidirectional (bidi) binding for form inputs in Flarum, simplifying input handling compared to manual event processing.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/forms.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\n\nconst value = Stream();\n\n// Without bidi\n<input type=\"text\" value={value()} oninput={e => value(e.target.value)}></input>\n\n// With bidi\n<input type=\"text\" bidi={value}></input>\n```\n\n----------------------------------------\n\nTITLE: Exporting Extensions from Index File in JavaScript\nDESCRIPTION: Shows how to export the extension module from the main index.js file. This is required for Flarum to properly load and apply the extensions defined in the extend.js module.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport { default as extend } from './extend';\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Unit Test Configuration\nDESCRIPTION: XML configuration file for PHPUnit unit tests including Mockery listener setup.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n\n    <testsuites>\n        <testsuite name=\"Flarum Unit Tests\">\n            <directory suffix=\"Test.php\">./unit</directory>\n        </testsuite>\n    </testsuites>\n    <listeners>\n        <listener class=\"\\Mockery\\Adapter\\Phpunit\\TestListener\"></listener>\n    </listeners>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Registering Locales in Flarum PHP Extension\nDESCRIPTION: Demonstrates how to register translations in a Flarum extension's extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnew Extend\\Locales(__DIR__ . '/locale'),\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Children in Mithril Component\nDESCRIPTION: This snippet illustrates the new approach to pass children to a component using the second argument in the component method. This method allows for clear separation and better clarity in the component definition.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nButton.component({\n  className: 'Button Button--primary'\n}, 'Button Text');\n```\n\n----------------------------------------\n\nTITLE: Declaring Extension Dependencies in composer.json\nDESCRIPTION: Example of how to declare dependencies for a Flarum extension in the composer.json file. This ensures that required extensions are installed and enabled before the current extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.15\",\n    \"flarum/tags\": \"^0.1.0-beta.15\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Flarum Update Command\nDESCRIPTION: Command to update all packages in the Flarum installation with specified preferences for distribution and dependency handling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/internal/extension-manager.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncommand update --prefer-dist --no-dev -a --with-all-dependencies\n```\n\n----------------------------------------\n\nTITLE: Backend Workflow Configuration in YAML\nDESCRIPTION: Configuration for the backend workflow file (.github/workflows/backend.yml) that utilizes Flarum's reusable workflow. This setup enables backend testing and configures basic parameters.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/github-actions.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Backend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_backend.yml@main\n    with:\n      # Different types of jobs\n      enable_backend_testing: true\n      enable_phpstan: false\n\n      # Additional parameters\n      backend_directory: .\n```\n\n----------------------------------------\n\nTITLE: Running Flarum Update Commands\nDESCRIPTION: Core commands needed to update Flarum installation, including composer update, database migrations, and cache clearing.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/update.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update --prefer-dist --no-plugins --no-dev -a --with-all-dependencies\nphp flarum migrate\nphp flarum cache:clear\n```\n\n----------------------------------------\n\nTITLE: Frontend Unit Test Example\nDESCRIPTION: Example of unit testing a number abbreviation utility function using Jest\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport abbreviateNumber from '../../../../src/common/utils/abbreviateNumber';\n\ntest('does not change small numbers', () => {\n  expect(abbreviateNumber(1)).toBe('1');\n});\n\ntest('abbreviates large numbers', () => {\n  expect(abbreviateNumber(1000000)).toBe('1M');\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n});\n\ntest('abbreviates large numbers with decimal places', () => {\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n  expect(abbreviateNumber(13234)).toBe('13.2K');\n});\n```\n\n----------------------------------------\n\nTITLE: String Slug Method Update\nDESCRIPTION: Example of the string slug method migration from Flarum's utility class to Laravel's implementation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b13.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Old way\nFlarum\\Util\\Str::slug();\n\n// New way\nIlluminate\\Support\\Str::slug();\n```\n\n----------------------------------------\n\nTITLE: Defining Translation Key Suffixes for Informative Text in YAML\nDESCRIPTION: This snippet shows suffixes used for translation keys related to informative or descriptive text elements in the interface, such as confirmations, messages, and tooltips.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n_confirmation:  # Used for messages displayed to confirm an operation.\n_message:       # Used for messages that show the result of an operation.\n_text:          # Used for any text that is not a message, title, or tooltip.\n_title:         # Used for text displayed as the title of a page or modal.\n_tooltip:       # Used for text displayed when the user hovers over something.\n```\n\n----------------------------------------\n\nTITLE: Configuración del Paquete de Idiomas en composer.json\nDESCRIPTION: Configuración JSON requerida en el archivo composer.json para definir un paquete de idiomas en Flarum. Incluye el código del idioma y su título dentro del objeto flarum-locale.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/translate.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"flarum-locale\": {\n  \"code\": \"en\",\n  \"title\": \"English\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using PermissionDeniedException in PHP\nDESCRIPTION: Example of using the new PermissionDeniedException class instead of the removed ForbiddenException.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b10.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Flarum\\User\\Exception\\PermissionDeniedException;\n```\n\n----------------------------------------\n\nTITLE: Configuring webpack for Flarum Extension Frontend\nDESCRIPTION: This snippet demonstrates the webpack configuration for a Flarum extension. It uses the official Flarum webpack config to ensure compatibility.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/frontend.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = require('flarum-webpack-config');\n\nmodule.exports = config();\n```\n\n----------------------------------------\n\nTITLE: Running Flarum Test Setup Command\nDESCRIPTION: Command for setting up a clean database environment for testing. This command drops existing test database tables before creating a new database, eliminating the need for manual table deletion.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum test:setup\n```\n\n----------------------------------------\n\nTITLE: Registering New Frontend Model in JavaScript\nDESCRIPTION: Shows how to register a new frontend model with the store using the Store extender in an extend.js module.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Store()\n    .add('tags', Tag),\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Reference Translations with YAML in Flarum\nDESCRIPTION: Shows how to set up translation keys that reference other keys for better translation flexibility across different contexts.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nedit_stuff_button: => edit_stuff    # Used in the code that creates the button.\nedit_stuff_title: => edit_stuff     # Used in the code that creates the dialog.\n\nedit_stuff: Edit Stuff              # Not used in the code.\n```\n\n----------------------------------------\n\nTITLE: JavaScript Select Component Update\nDESCRIPTION: Usage of new disabled prop in the flarum/components/Select component.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b12.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Select\n  disabled={true}\n  // other props...\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Reference Keys in YAML for Flarum Translations\nDESCRIPTION: This snippet demonstrates how to set up reusable translation keys in YAML by using references. One key can reference another using the => syntax, allowing for more flexibility in translations while maintaining consistency.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nedit_stuff_button: => edit_stuff    # Used in the code that creates the button.\nedit_stuff_title: => edit_stuff     # Used in the code that creates the dialog.\n\nedit_stuff: Edit Stuff              # Not used in the code.\n```\n\n----------------------------------------\n\nTITLE: Using Illuminate Support String Slug Method in PHP\nDESCRIPTION: Shows the recommended replacement for the deprecated Flarum\\Util\\Str::slug() method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b12.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nIlluminate\\Support\\Str::slug()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic YAML Translation Entry\nDESCRIPTION: Demonstrates how to create a simple key-value pair for a translation in a YAML locale file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsample_key: This is a sample translation.\n```\n\n----------------------------------------\n\nTITLE: Referencing Flarum Preload Extender in Markdown\nDESCRIPTION: This snippet references the new Preload extender in Flarum, which allows for preloading of custom frontend assets. It includes a link to the GitHub pull request where this feature was implemented.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-1_x.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Preload extender](https://github.com/flarum/core/pull/3057)\n```\n\n----------------------------------------\n\nTITLE: Adding Default Settings in Flarum Migrations\nDESCRIPTION: Shows how to use data migrations to specify default settings in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addSettings([\n    'foo' => 'bar',\n]);\n```\n\n----------------------------------------\n\nTITLE: Extended Model Attribute Type Definition\nDESCRIPTION: Example of defining attribute types for PHPStan analysis using Flarum's Model extension\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Model(User::class))\n    ->cast('is_cool', 'bool'),\n```\n\n----------------------------------------\n\nTITLE: Unit Test Example for Number Abbreviation\nDESCRIPTION: Example of unit tests for the abbreviateNumber utility function\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport abbreviateNumber from '../../../../src/common/utils/abbreviateNumber';\n\ntest('does not change small numbers', () => {\n  expect(abbreviateNumber(1)).toBe('1');\n});\n\ntest('abbreviates large numbers', () => {\n  expect(abbreviateNumber(1000000)).toBe('1M');\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n});\n\ntest('abbreviates large numbers with decimal places', () => {\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n  expect(abbreviateNumber(13234)).toBe('13.2K');\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Optional Extension in Frontend JavaScript\nDESCRIPTION: JavaScript code snippet demonstrating how to check if an optional extension is enabled in the Flarum frontend by checking the global flarum.extensions object.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif ('some-extension-id' in flarum.extensions) {\n    // fai qualcosa\n}\n```\n\n----------------------------------------\n\nTITLE: Alert Usage in Mithril 0.2 vs Mithril 2\nDESCRIPTION: Comparison of how to show alerts in both Mithril versions. In Mithril 2, there are multiple overloads for the show method, and it returns a unique key for dismissing the alert.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n// Mithril 0.2\napp.alerts.show(new Alert(type: 'success', children: 'Hello, this is a success alert!'));\n\n// Mithril 2 - Three different ways\napp.alerts.show('Hello, this is a success alert!');\napp.alerts.show({type: 'success'}, 'Hello, this is a success alert!');\napp.alerts.show(Alert, {type: 'success'}, 'Hello, this is a success alert!');\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum Testing Package with Composer\nDESCRIPTION: Command to install the flarum/testing package as a development dependency using Composer.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/testing:^1.0\n```\n\n----------------------------------------\n\nTITLE: Removing PreferenceSaver in Flarum JS\nDESCRIPTION: Illustrates the removal of `preferenceSaver` method usage and shows how to directly save preferences, emphasizing the evolution of component state management.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nSwitch.component({\n  children: app.translator.trans('core.forum.settings.privacy_disclose_online_label'),\n  state: this.user.preferences().discloseOnline,\n  onchange: (value) => {\n    this.discloseOnlineLoading = true;\n\n    this.user.savePreferences({ discloseOnline: value }).then(() => {\n      this.discloseOnlineLoading = false;\n      m.redraw();\n    });\n  },\n  loading: this.discloseOnlineLoading,\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Notification Grid in Flarum with JavaScript\nDESCRIPTION: This snippet demonstrates how to add a new notification type to the Flarum NotificationGrid. It uses the extend method from 'flarum/common/extend' and imports NotificationGrid and PostLikedNotification. The code initializes a new notification type 'postLiked' with an icon and a description, allowing users to configure notification settings. Ensure that 'flarum/common/extend', 'flarum/forum/app', and 'flarum/forum/components/NotificationGrid' are available.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport NotificationGrid from 'flarum/forum/components/NotificationGrid';\n\nimport PostLikedNotification from './components/PostLikedNotification';\n\napp.initializers.add('flarum-likes', () => {\n  app.notificationComponents.postLiked = PostLikedNotification;\n\n  extend(NotificationGrid.prototype, 'notificationTypes', function (items) {\n    items.add('postLiked', {\n      name: 'postLiked',\n      icon: 'far fa-thumbs-up',\n      label: app.translator.trans('flarum-likes.forum.settings.notify_post_liked_label')\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: PHP Access Token Generation\nDESCRIPTION: Updated syntax for generating different types of access tokens in Beta 16, showing the new type-specific token generation methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// Generate remember access token\nRememberAccessToken::generate($userId);\n\n// Generate developer access token\nDeveloperAccessToken::generate($userId);\n\n// Generate session access token\nSessionAccessToken::generate();\n```\n\n----------------------------------------\n\nTITLE: Implementing DriverInterface Methods in PHP\nDESCRIPTION: Update the availableSettings() method and implement new validate() and canSend() methods for mail driver interfaces.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic function availableSettings()\n{\n    return [\n        'field_name' => 'field_type',\n        // ...\n    ];\n}\n\npublic function validate($settings)\n{\n    // Validation logic\n}\n\npublic function canSend()\n{\n    // Check if driver can send emails\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Alerts Usage in Mithril 2\nDESCRIPTION: Examples of the new syntax for showing alerts in Mithril 2, with three different overloads available and returning a key for dismissal instead of using the instance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Old way\napp.alerts.show(new Alert(type: 'success', children: 'Hello, this is a success alert!'));\n\n// New ways (3 overloads)\napp.alerts.show('Hello, this is a success alert!');\napp.alerts.show({type: 'success'}, 'Hello, this is a success alert!');\napp.alerts.show(Alert, {type: 'success'}, 'Hello, this is a success alert!');\n```\n\n----------------------------------------\n\nTITLE: Database Table Naming Conventions\nDESCRIPTION: Conventions for naming database tables, including pluralization rules and handling of relationship tables.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/contributing.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ndiscussions         // plural form\naccess_tokens       // multiple words with underscores\ndiscussion_user     // relationship tables (alphabetical order)\n```\n\n----------------------------------------\n\nTITLE: API Error Responses\nDESCRIPTION: Examples of common API error responses including CSRF token mismatch and validation errors.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"400\",\n      \"code\": \"csrf_token_mismatch\"\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"422\",\n      \"code\": \"validation_error\",\n      \"detail\": \"The username has already been taken.\",\n      \"source\":{\n        \"pointer\":\"\\/data\\/attributes\\/username\"\n      }\n    },\n    {\n      \"status\": \"422\",\n      \"code\": \"validation_error\",\n      \"detail\": \"The email has already been taken.\",\n      \"source\": {\n        \"pointer\":\"\\/data\\/attributes\\/email\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Deferred Promises in Flarum with Mithril 2.0\nDESCRIPTION: This snippet demonstrates how to update the usage of deferred promises when migrating from Mithril 0.2 to Mithril 2.0 in Flarum. It shows the change from using 'm.deferred()' to using native promises.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\nconst deferred = m.deferred();\n\napp.store.find('posts').then(result => deferred.resolve(result));\n\nreturn deferred.promise;\n\n// Mithril 2\nreturn app.store.find('posts');\n```\n\n----------------------------------------\n\nTITLE: Email-Specific Translation Suffixes in YAML\nDESCRIPTION: This YAML code details suffixes used exclusively in the email namespace, denoting the content and subject line of email communications sent by Flarum. It emphasizes the importance of identifying email elements straightforwardly to ensure accurate localization.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n_body:          # Used for the content of the email message.\n_subject:       # Used for the subject line of the email message.\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Storage Driver in PHP\nDESCRIPTION: Example of registering a custom storage driver implementation using Flarum's Filesystem extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/filesystem.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Filesystem)\n        ->driver('aws-with-cdn', AwsWithCdnDriver::class);\n```\n\n----------------------------------------\n\nTITLE: Importing Classes from Other Extensions in PHP\nDESCRIPTION: Shows how to import and use classes from other extensions in the backend PHP code using standard PHP import mechanisms.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Tags\\Tag;\n\nclass SomeClass\n{\n    public function someMethod()\n    {\n        return new Tag();  // This is not the correct way to instantiate models, it's just here for example of importing.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Extend Module in JavaScript\nDESCRIPTION: Code to export the extend module from an entry index.js file in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport { default as extend } from './extend';\n```\n\n----------------------------------------\n\nTITLE: Custom Response in Middleware\nDESCRIPTION: This snippet demonstrates returning a custom HTTP response from middleware, including error handling and JSON API response creation using Flarum's JSON API response class and Tobscure libraries.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Flarum\\Api\\JsonApiResponse;\\nuse Tobscure\\JsonApi\\Document;\\nuse Tobscure\\JsonApi\\Exception\\Handler\\ResponseBag;\\n\\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\\n{\\n    if ($userFoundInDatabase) {\\n        $error = new ResponseBag('422', [\\n            [\\n                'status' => '422',\\n                'code' => 'validation_error',\\n                'source' => [\\n                    'pointer' => '/data/attributes/email',\\n                ],\\n                'detail' => 'Yikes! Your email can\\'t be used.',\\n            ],\\n        ]);\\n        $document = new Document();\\n        $document->setErrors($error->getErrors());\\n\\n        return new JsonApiResponse($document, $error->getStatus());\\n    }\\n\\n    return $handler->handle($request);\\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Modal using Flarum CLI\nDESCRIPTION: This bash command demonstrates how to automatically generate a modal component using the Flarum CLI.  The `flarum-cli make frontend modal` command scaffolds the necessary files and directory structure for a new modal component within a Flarum extension's frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/interactive-components.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make frontend modal\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Service Provider in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to create a custom service provider by extending AbstractServiceProvider. It includes register and boot methods for container configuration and application boot logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/service-provider.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Foundation\\AbstractServiceProvider;\nuse Illuminate\\Contracts\\Container\\Container;\n\nclass CustomServiceProvider extends AbstractServiceProvider\n{\n    public function register()\n    {\n        // custom logic here, for example:\n        $this->container->resolving(SomeClass::class, function ($container) {\n            return new SomeClass($container->make('some.binding'));\n        });\n    }\n\n    public function boot(Container $container)\n    {\n        // custom logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PHPStan Scripts to Composer Configuration\nDESCRIPTION: JSON snippet to add PHPStan analysis and cache clearing scripts to the composer.json file of a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"analyse:phpstan\": \"phpstan analyse\",\n    \"clear-cache:phpstan\": \"phpstan clear-result-cache\"\n  },\n  \"scripts-descriptions\": {\n    \"analyse:phpstan\": \"Run static analysis\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Frontend Testing Scripts to package.json\nDESCRIPTION: Demonstrates how to add the necessary scripts to package.json for running frontend tests using Jest. It includes setting the module type and the test script command.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"scripts\": {\n    ...,\n    \"test\": \"yarn node --experimental-vm-modules $(yarn bin jest)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Literal Blocks in YAML for Flarum Translations\nDESCRIPTION: Demonstrates how to use literal blocks in YAML to define multi-line translations with preserved formatting.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nliteral_block_text: |\n  Estas líneas se mostrarán como se muestra aquí, con saltos de línea y todo.\n\n      También se conserva la sangría adicional: ¡esta línea tendrá una sangría de 4 espacios!\n\n  Las comillas son innecesarias, incluso cuando el bloque contiene caracteres especiales.\n```\n\n----------------------------------------\n\nTITLE: Specifying Supported Database Systems in composer.json\nDESCRIPTION: Shows how to declare which database systems your Flarum extension supports in the composer.json file. This helps users understand if your extension is compatible with their database system.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/database.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extra\": {\n        \"flarum-extension\": {\n            \"database-support\": [\n                \"mysql\",\n                \"pgsql\",\n                \"sqlite\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Promise Handling in JavaScript for Mithril 2.0\nDESCRIPTION: This snippet demonstrates how to update promise handling when migrating from Mithril 0.2 to Mithril 2.0. It shows the change from using 'm.deferred()' to using native promises.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\nconst deferred = m.deferred();\n\napp.store.find('posts').then(result => deferred.resolve(result));\n\nreturn deferred.promise;\n\n// Mithril 2\nreturn app.store.find('posts');\n```\n\n----------------------------------------\n\nTITLE: Component Attributes Method Example\nDESCRIPTION: Demonstration of the attrs() method usage in components for providing extensible attributes to top-level child nodes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends Component {\n  view() {\n    return <div {...this.attrs()}><p>Hello World!</p></div>;\n  }\n\n  attrs() {\n    return {\n      className: 'SomeClass',\n      onclick: () => console.log('click'),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bidi Usage in Flarum with JSX\nDESCRIPTION: This JSX code snippet compares using bidi (bidirectional binding) to a manual approach for binding an input's value to a Stream in Flarum. It shows how bidi simplifies form processing by abstracting away the input event handling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/forms.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\n\nconst value = Stream();\n\n// Without bidi\n<input type=\"text\" value={value()} oninput={e => value(e.target.value)}></input>\n\n// With bidi\n<input type=\"text\" bidi={value}></input>\n```\n\n----------------------------------------\n\nTITLE: Creating New Resources in JavaScript\nDESCRIPTION: Demonstrates how to create a new resource by creating a new model instance using the store's createRecord method and then saving it.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussion = app.store.createRecord('discussions');\n\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Model Factory for Flarum User Model\nDESCRIPTION: Demonstrates how to create a custom model factory for the Flarum User model. It shows the structure of a factory class and how to define default attributes for model creation.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/testing.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\User;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass UserFactory extends Factory\n{\n    public function definition(): array\n    {\n        return [\n            'username' => $this->faker->userName,\n            'email' => $this->faker->safeEmail,\n            'is_email_confirmed' => 1,\n            'password' => $this->faker->password,\n            'avatar_url' => $this->faker->imageUrl,\n            'preferences' => [],\n            'joined_at' => null,\n            'last_seen_at' => null,\n            'marked_all_as_read_at' => null,\n            'read_notifications_at' => null,\n            'discussion_count' => 0,\n            'comment_count' => 0,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Key References in YAML\nDESCRIPTION: Example showing how to reference translation keys in YAML using the => syntax for reusable translations\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nedit_stuff_button: => edit_stuff    # Used in the code that creates the button.\nedit_stuff_title: => edit_stuff     # Used in the code that creates the dialog.\n\nedit_stuff: Edit Stuff              # Not used in the code.\n```\n\n----------------------------------------\n\nTITLE: Overriding Existing Views in PHP\nDESCRIPTION: Shows how to override templates from core or other extensions by extending an existing view namespace with a custom directory containing override templates.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/views.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->extendNamespace('acme.hello-world', __DIR__.'/override_views')\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Translation Suffixes in YAML\nDESCRIPTION: This snippet lists various suffixes that indicate how different translations are used in Flarum. These suffixes assist localizers in identifying the context in which a translation will appear. Inputs are YAML-formatted strings, outputs are organized translation references.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n_button:        # Used for buttons (including dropdown menu items).\n_link:          # Used for links that are not shown graphically as buttons.\n_heading:       # Used for headings in tables and lists.\n_label:         # Used for the names of data fields, checkbox settings, etc.\n_placeholder:   # Used for placeholder text displayed in fields.\n```\n\n----------------------------------------\n\nTITLE: Updating Button.component() usage in Mithril 2\nDESCRIPTION: Shows the correct way to pass children to Button.component() in Mithril 2, using the second argument instead of the 'children' prop.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nButton.component({\n  className: 'Button Button--primary'\n}, 'Button Text');\n```\n\n----------------------------------------\n\nTITLE: Legacy Extension Event Subscriber Example\nDESCRIPTION: Example of deprecated closure-based event subscriber registration in extend.php that is no longer supported in Flarum 1.0.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\FilterDiscussionListByTags::class);\n        $events->subscribe(Listener\\FilterPostsQueryByTag::class);\n        $events->subscribe(Listener\\UpdateTagMetadata::class);\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend GitHub Actions Workflow\nDESCRIPTION: YAML configuration for setting up backend testing workflows including PHPUnit tests and static code analysis using a reusable workflow from the Flarum framework\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Backend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_backend.yml@main\n    with:\n      # Different types of jobs\n      enable_backend_testing: true\n      enable_phpstan: false\n\n      # Additional parameters\n      backend_directory: .\n```\n\n----------------------------------------\n\nTITLE: Running Flarum Update Commands\nDESCRIPTION: Core commands needed to update Flarum, including updating dependencies, running migrations, and clearing cache.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/update.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update --prefer-dist --no-plugins --no-dev -a --with-all-dependencies\nphp flarum migrate\nphp flarum cache:clear\n```\n\n----------------------------------------\n\nTITLE: Initializing LanguagePack Extender in PHP for Flarum\nDESCRIPTION: This code snippet demonstrates how to initialize the LanguagePack extender in a Flarum extension. It's a simple instantiation of the LanguagePack class from the Flarum\\Extend namespace.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/translate.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn new Flarum\\Extend\\LanguagePack;\n```\n\n----------------------------------------\n\nTITLE: Creating Basic JSON:API Serializer in PHP\nDESCRIPTION: Shows how to create a basic serializer class that converts Eloquent models into JSON:API format, including defining resource type and default attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\AbstractSerializer;\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nclass DiscussionSerializer extends AbstractSerializer\n{\n    protected $type = 'discussions';\n\n    protected function getDefaultAttributes($discussion)\n    {\n        return [\n            'title' => $discussion->title,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Use extend.php Instead of bootstrap.php\nDESCRIPTION: Reminder that extension main files should be named 'extend.php' instead of 'bootstrap.php', which will no longer be supported in stable 0.1 release.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n**Reminder**: In previous versions of Flarum, an extensions' main file was named `bootstrap.php`. This name will no longer be supported in the stable 0.1 release. Make sure your extension uses the name `extend.php`.\n```\n\n----------------------------------------\n\nTITLE: PHP Class Reference - Foundation Paths\nDESCRIPTION: Reference to the Paths class namespace for path handling\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nFlarum\\Foundation\\Paths\n```\n\n----------------------------------------\n\nTITLE: Clearing Flarum Cache\nDESCRIPTION: Clears all backend caches including compiled JS/CSS, text formatting cache, and cached translations. Should be run after installing or removing extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum cache:clear\n```\n\n----------------------------------------\n\nTITLE: Updating Site Root Path in PHP\nDESCRIPTION: Code snippet showing how to modify the site.php reference in index.php when customizing Flarum's directory structure.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/install.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$site = require './site.php';\n```\n\n----------------------------------------\n\nTITLE: Adding PHPStan Scripts to Composer Configuration\nDESCRIPTION: Adding PHPStan analysis commands to composer.json scripts section to simplify running static analysis and clearing the cache.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"analyse:phpstan\": \"phpstan analyse\",\n    \"clear-cache:phpstan\": \"phpstan clear-result-cache\"\n  },\n  \"scripts-descriptions\": {\n    \"analyse:phpstan\": \"Run static analysis\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Dependencies in Composer JSON\nDESCRIPTION: Example of specifying Flarum extension dependencies in composer.json configuration file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my/extension\",\n  \"description\": \"Cool New Extension\",\n  \"type\": \"flarum-extension\",\n  \"license\": \"MIT\",\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.14\",\n    \"flarum/tags\": \"^0.1.0-beta.14\",\n    \"flarum/mentions\": \"^0.1.0-beta.14\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Second-Level Translation Namespaces in YAML\nDESCRIPTION: List of second-level keys for translation namespaces in Flarum, indicating which interface uses the translation.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/i18n.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:       # Translations used by the admin interface.\nforum:       # Translations used by the forum user interface.\nlib:         # Translations used by either of the above.\nviews:       # Translations used outside the normal JS client.\napi:         # Translations used in messages output by the API.\nemail:       # Translations used in emails sent by Flarum.\n```\n\n----------------------------------------\n\nTITLE: Editing Paths in PHP Configuration\nDESCRIPTION: These PHP lines inside 'site.php' show how to redefine application base paths to align with a custom directory structure. Modifying these paths is crucial when relocating Flarum files outside the default 'public' directory.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/install.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n'base' => __DIR__,\n'public' => __DIR__,\n'storage' => __DIR__.'/storage',\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic YAML Translation Entry\nDESCRIPTION: Demonstrates how to add a simple key-value pair for a translation in a YAML locale file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsample_key: This is a sample translation.\n```\n\n----------------------------------------\n\nTITLE: Specifying Extension Dependencies in composer.json (JSON)\nDESCRIPTION: Example of how to specify extension dependencies in the composer.json file. This allows Flarum to ensure that all required extensions are enabled before activating an extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my/extension\",\n  \"description\": \"Cool New Extension\",\n  \"type\": \"flarum-extension\",\n  \"license\": \"MIT\",\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.14\",\n    \"flarum/tags\": \"^0.1.0-beta.14\",\n    \"flarum/mentions\": \"^0.1.0-beta.14\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Console Command with Flarum CLI\nDESCRIPTION: This bash command uses the Flarum CLI to automatically generate and register a console command for a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/console.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend command\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Flarum CLI Versions Globally with Aliases in Bash\nDESCRIPTION: Commands to install both version 2 and 3 of the Flarum CLI globally with aliases (fl1 and fl2) for managing extensions compatible with different Flarum versions.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/cli.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g fl1@npm:@flarum/cli@2 --force\nnpm install -g fl2@npm:@flarum/cli@3 --force\n```\n\n----------------------------------------\n\nTITLE: Deprecated Closure-based Extension Pattern in PHP\nDESCRIPTION: Shows an example of the old, now deprecated pattern of using closures in extend.php for event subscriptions. This approach is no longer supported in Flarum's stable version.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\FilterDiscussionListByTags::class);\n        $events->subscribe(Listener\\FilterPostsQueryByTag::class);\n        $events->subscribe(Listener\\UpdateTagMetadata::class);\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Sample Flarum Composer Configuration\nDESCRIPTION: An annotated composer.json file showing the standard configuration for a Flarum installation, including metadata, package requirements, and composer configurations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/composer.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"flarum/flarum\",\n    \"description\": \"Delightfully simple forum software.\",\n    \"type\": \"project\",\n    \"keywords\": [\n        \"forum\",\n        \"discussion\"\n    ],\n    \"homepage\": \"https://flarum.org/\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Flarum\",\n            \"email\": \"info@flarum.org\",\n            \"homepage\": \"https://flarum.org/team\"\n        }\n    ],\n    \"support\": {\n        \"issues\": \"https://github.com/flarum/core/issues\",\n        \"source\": \"https://github.com/flarum/flarum\",\n        \"docs\": \"https://flarum.org/docs/\"\n    },\n    \"require\": {\n        \"flarum/core\": \"^1.0\",\n        \"flarum/approval\": \"*\",\n        \"flarum/bbcode\": \"*\",\n        \"flarum/emoji\": \"*\",\n        \"flarum/lang-english\": \"*\",\n        \"flarum/flags\": \"*\",\n        \"flarum/likes\": \"*\",\n        \"flarum/lock\": \"*\",\n        \"flarum/markdown\": \"*\",\n        \"flarum/mentions\": \"*\",\n        \"flarum/nicknames\": \"*\",\n        \"flarum/pusher\": \"*\",\n        \"flarum/statistics\": \"*\",\n        \"flarum/sticky\": \"*\",\n        \"flarum/subscriptions\": \"*\",\n        \"flarum/suspend\": \"*\",\n        \"flarum/tags\": \"*\"\n    },\n    \"config\": {\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true\n    },\n    \"prefer-stable\": true\n}\n```\n\n----------------------------------------\n\nTITLE: New PHP Error Handling Extender\nDESCRIPTION: The new Flarum\\Extend\\ErrorHandling extender allows configuration of status codes and error handling based on error types or exception classes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n  - `Flarum\\Extend\\ErrorHandling` lets you configure status codes and other aspects of our error handling stack depending on error types or exception classes.\n```\n\n----------------------------------------\n\nTITLE: Test Setup Script\nDESCRIPTION: PHP script to initialize the testing database and file structure for integration tests.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Testing\\integration\\Setup\\SetupScript;\n\nrequire __DIR__.'/../../vendor/autoload.php';\n\n$setup = new SetupScript();\n\n$setup->run();\n```\n\n----------------------------------------\n\nTITLE: Implementing Extenders in PHP for Flarum Beta 8\nDESCRIPTION: Example of using the new extenders concept in Flarum Beta 8. This code demonstrates how to set up frontend assets, routes, and event listeners in the extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b8.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less')\n        ->route('/t/{slug}', 'tag')\n        ->route('/tags', 'tags'),\n\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\AddForumTagsRelationship::class);\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events in PHP\nDESCRIPTION: Illustrates how to inject the event dispatcher and use it to dispatch events in a Flarum class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Post\\Event\\Deleted;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\n\nclass SomeClass\n{\n    /**\n      * @var Dispatcher\n      */\n    protected $events;\n\n    /**\n      * @param Dispatcher $events\n      */\n    public function __construct(Dispatcher $events)\n    {\n        $this->events = $events;\n    }\n\n    public function someMethod()\n    {\n        // Logic\n        $this->events->dispatch(\n            new Deleted($somePost, $someActor)\n        );\n        // More Logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Global Functions in PHP Extenders\nDESCRIPTION: Shows how to use global functions or array-type functions in Flarum extenders that support callbacks or closures. This enhances flexibility in extension development.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n'boolval'\n```\n\nLANGUAGE: PHP\nCODE:\n```\n[ClassName::class, 'methodName']\n```\n\n----------------------------------------\n\nTITLE: Checking Frontend Extension Dependencies\nDESCRIPTION: JavaScript code demonstrating how to check if an optional extension dependency is enabled in the frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif ('some-extension-id' in flarum.extensions) {\n    // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SettingsRepositoryInterface in PHP for Flarum Extensions\nDESCRIPTION: This snippet demonstrates how to inject and use the SettingsRepositoryInterface in a Flarum extension class. It shows the proper way to set up dependency injection for accessing settings.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace acme\\HelloWorld\\ExampleDir;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\n\nclass ClassInterfacesWithSettings\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SubtreeRetainer in JavaScript Component\nDESCRIPTION: Example showing how to use SubtreeRetainer with a custom component to optimize redraws in Mithril 2\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.showContent = false;\n\n    this.subtree = new SubtreeRetainer(\n      () => this.showContent,\n    )\n  }\n\n  onbeforeupdate() {\n    return this.subtree.needsRebuild();\n  }\n\n  view(vnode) {\n    return <div>\n      <button onclick={() => this.showContent = !this.showContent}>Toggle Extra Content</button>\n      <p>Hello World!{this.showContent ? ' Extra Content!' : ''}</p>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Naming Conventions for Flarum\nDESCRIPTION: Specifies naming conventions for database columns and tables in the Flarum project. Includes rules for different data types and relationship tables.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/contributing.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Database\n\n**Columns** should be named according to their data type:\n* DATETIME or TIMESTAMP: `{verbed}_at` (eg. created_at, read_at) or `{verbed}_until` (eg. suspended_until)\n* INT that is a count: `{noun}_count` (eg. comment_count, word_count)\n* Foreign key: `{verbed}_{entity}_id` (eg. hidden_user_id)\n    * Verb can be omitted for primary relationship (eg. post author is just `user_id`)\n* BOOL: `is_{adjective}` (eg. is_locked)\n\n**Tables** should be named as follows:\n* Use plural form (`discussions`)\n* Separate multiple words with underscores (`access_tokens`)\n* For relationships tables, join the two table names in singular form with an underscore in alphabetical order (eg. `discussion_user`)\n```\n\n----------------------------------------\n\nTITLE: List Discussions Response\nDESCRIPTION: Example response from the GET /api/discussions endpoint showing the JSON:API format with pagination links, discussion data, relationships and included resources.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"links\": {\n    \"first\": \"https://flarum.tld/api/discussions\",\n    \"next\": \"https://flarum.tld/api/discussions?page%5Boffset%5D=20\"\n  },\n  \"data\": [\n    {\n      \"type\": \"discussions\",\n      \"id\": \"234\",\n      \"attributes\": {\n        \"title\": \"Lorem Ipsum\",\n        \"slug\": \"234-lorem-ipsum\",\n        \"commentCount\": 10,\n        \"participantCount\": 3,\n        \"createdAt\": \"2022-01-01T10:20:30+00:00\",\n        \"lastPostedAt\": \"2022-01-05T10:20:30+00:00\",\n        \"lastPostNumber\": 10,\n        \"canReply\": true,\n        \"canRename\": true,\n        \"canDelete\": true,\n        \"canHide\": true,\n        \"isHidden\": true,\n        \"hiddenAt\": \"2022-01-06T10:20:30+00:00\",\n        \"lastReadAt\": \"2022-01-02T10:20:30+00:00\",\n        \"lastReadPostNumber\": 2,\n        \"isApproved\": true,\n        \"canTag\": true,\n        \"isLocked\": false,\n        \"canLock\": true,\n        \"isSticky\": false,\n        \"canSticky\": true,\n        \"canMerge\": true,\n        \"subscription\": null\n      },\n      \"relationships\": {\n        \"user\": {\n          \"data\": {\n            \"type\": \"users\",\n            \"id\": \"1\"\n          }\n        },\n        \"lastPostedUser\": {\n          \"data\": {\n            \"type\": \"users\",\n            \"id\": \"64\"\n          }\n        },\n        \"tags\": {\n          \"data\": [\n            {\n              \"type\": \"tags\",\n              \"id\": \"3\"\n            }\n          ]\n        },\n        \"firstPost\": {\n          \"data\": {\n            \"type\": \"posts\",\n            \"id\": \"668\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Component Data Passing in JavaScript\nDESCRIPTION: The recommended approach for passing data between parent and child components after the Mithril upgrade. Data needed by a child component that is modified by a parent component should be passed as an attribute.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass ChildComponent extends Component {\n  view() {\n    return <p>{this.attrs.counter}</p>;\n  }\n}\n\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.counter += 1}></button>\n        <ChildComponent counter={this.counter}></ChildComponent>\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AffixedSidebar Component Migration\nDESCRIPTION: Example of migrating from affixSidebar util to AffixedSidebar component\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nclass OldWay extends Component {\n  view() {\n    return <div>\n      <div className=\"container\">\n        <div className=\"sideNavContainer\">\n          <nav className=\"sideNav\" config={affixSidebar}>\n            <p>Affixed Sidebar</p>\n          </nav>\n          <div className=\"sideNavOffset\">Actual Page Content</div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n\nclass NewWay extends Component {\n  view() {\n    return <div>\n      <div className=\"container\">\n        <div className=\"sideNavContainer\">\n          <AffixedSidebar>\n            <nav className=\"sideNav\">\n              <p>Affixed Sidebar</p>\n            </nav>\n          </AffixedSidebar>\n          <div className=\"sideNavOffset\">Actual Page Content</div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Frontend Development Mode for Flarum Core\nDESCRIPTION: Command to run the development watcher for Flarum core JavaScript files, which automatically recompiles files when changes are detected during development.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/contributing.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd framework/core/js\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Using createTableIfNotExists Migration Helper in PHP\nDESCRIPTION: Example of the migration helper added in Flarum 1.5 that creates database tables only if they don't already exist.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-1_x.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn $schema->createTableIfNotExists('table_name', function (Blueprint $table) {\n    $table->increments('id');\n    // Define other columns\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Flarum Paths in PHP Configuration\nDESCRIPTION: PHP code modifications required when customizing Flarum's directory structure. This includes updating file paths in index.php and site.php to reflect the new directory layout.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/install.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$site = require './site.php';\n```\n\nLANGUAGE: php\nCODE:\n```\n'base' => __DIR__,\n'public' => __DIR__,\n'storage' => __DIR__.'/storage',\n```\n\n----------------------------------------\n\nTITLE: Tooltip Implementation (JSX)\nDESCRIPTION: This code snippet shows how to use the new `Tooltip` component in Flarum to add tooltips to elements. It wraps the target element with the `Tooltip` component and provides the tooltip text via the `text` prop.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Tooltip text=\"You wish!\">\n  <button>\n    Click for free money!\n  </button>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Flarum Language Pack Extension in PHP\nDESCRIPTION: This snippet shows how to declare a language pack by instantiating the LanguagePack extender in the extension's extend.php file. No setters or additional configuration is required.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/language-packs.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn new Flarum\\Extend\\LanguagePack();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Discussion Page Resolver in Flarum\nDESCRIPTION: Example of a custom route resolver that extends DefaultResolver to provide specialized behavior for discussion pages, including post scrolling and maintaining state between posts in the same discussion.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport DefaultResolver from '../../common/resolvers/DefaultResolver';\n\n/**\n * This isn't exported as it is a temporary measure.\n * A more robust system will be implemented alongside UTF-8 support in beta 15.\n */\nfunction getDiscussionIdFromSlug(slug: string | undefined) {\n  if (!slug) return;\n  return slug.split('-')[0];\n}\n\n/**\n * A custom route resolver for DiscussionPage that generates the same key to all posts\n * on the same discussion. It triggers a scroll when going from one post to another\n * in the same discussion.\n */\nexport default class DiscussionPageResolver extends DefaultResolver {\n  static scrollToPostNumber: number | null = null;\n\n  makeKey() {\n    const params = { ...m.route.param() };\n    if ('near' in params) {\n      delete params.near;\n    }\n    params.id = getDiscussionIdFromSlug(params.id);\n    return this.routeName.replace('.near', '') + JSON.stringify(params);\n  }\n\n  onmatch(args, requestedPath, route) {\n    if (route.includes('/d/:id') && getDiscussionIdFromSlug(args.id) === getDiscussionIdFromSlug(m.route.param('id'))) {\n      DiscussionPageResolver.scrollToPostNumber = parseInt(args.near);\n    }\n\n    return super.onmatch(args, requestedPath, route);\n  }\n\n  render(vnode) {\n    if (DiscussionPageResolver.scrollToPostNumber !== null) {\n      const number = DiscussionPageResolver.scrollToPostNumber;\n      // Scroll after a timeout to avoid clashes with the render.\n      setTimeout(() => app.current.get('stream').goToNumber(number));\n      DiscussionPageResolver.scrollToPostNumber = null;\n    }\n\n    return super.render(vnode);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Pack in composer.json\nDESCRIPTION: JSON configuration for the composer.json file to specify the language code and title for a Flarum language pack. This should be added to the 'extra' section of the composer.json file.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/language-packs.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"flarum-locale\": {\n  \"code\": \"en\",\n  \"title\": \"English\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Extension Imports\nDESCRIPTION: Shows how to configure webpack.config.js to allow importing from other Flarum extensions in frontend JavaScript.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('flarum-webpack-config')({\n    useExtensions: ['flarum-tags']\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Translation Reuse in Flarum YAML Localization\nDESCRIPTION: Illustrates an incorrect way of reusing translations in Flarum's YAML locale files, which can lead to unintended changes and maintenance issues.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => Log In\n\n    log_in:\n      submit_button: => core.forum.header.log_in_link  # No hay que hacer referencia a las claves\n      title: => core.forum.header.log_in_link          # que no están en \"ref\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Flarum Assets\nDESCRIPTION: Command to publish assets from Flarum core and extensions, including compiled JS/CSS, icons, and logos.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/console.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum assets:publish\n```\n\n----------------------------------------\n\nTITLE: Deleting Resources in JavaScript\nDESCRIPTION: JavaScript code demonstrating how to delete a resource from the API using the delete method on a model instance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.delete().then(done);\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit for Integration Tests in Flarum\nDESCRIPTION: This XML configuration file sets up PHPUnit for running integration tests in Flarum extensions. It specifies test suite location and important PHPUnit settings.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"true\"\n         stopOnFailure=\"false\">\n\n    <testsuites>\n        <testsuite name=\"Flarum Integration Tests\">\n            <directory suffix=\"Test.php\">./integration</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Defining Email Translation Suffixes in YAML\nDESCRIPTION: Suffixes used specifically for email-related translation keys in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/i18n.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n_body:          # Used for the content of the email message.\n_subject:       # Used for the subject line of the email message.\n```\n\n----------------------------------------\n\nTITLE: Defining Route Helper Methods in JavaScript\nDESCRIPTION: Demonstrates how to define a route helper method for generating URLs to a specific route in Flarum's frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/routes.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n  new Extend.Routes()\n   .add('acme.user', '/user/:id', <UsersPage />)\n   .helper('acmeUser', (user) => app.route('acme.user', { id: user.id() }))\n```\n\n----------------------------------------\n\nTITLE: Exporting Admin Extension Module in JavaScript\nDESCRIPTION: Exports the admin extension module from the entry admin/index.js file.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/admin.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport { default as extend } from './extend';\n```\n\n----------------------------------------\n\nTITLE: Documenting PR Merging Workflow in Markdown\nDESCRIPTION: This Markdown snippet describes the entire process of reviewing and merging pull requests in the Flarum project. It includes implementation review criteria, merging strategies, and post-merge tasks.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/internal/merging.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# PR Merging Workflow\n\n\n## Implementation Review Criteria\n\n- Adheres to our conventions or can be patched up easily after merging, follows proper code style.\n- Are there any implementation details that could be done better through alternate technologies/technical approaches?\n- Does not touch any lines outside of the intended changes, eg through formatting or compilation.\n- If the changes are to code intended as a public API, has a proper doc block been included?\n\n## Merge Time!\n\nIf all of the checks in the template are met, **any** core developer may merge this PR. If the PR is authored by a core developer, they should probably be the ones to merge it.\n\n- Merging:\n  - GitHub offers several ways to merge a PR. Choose between the following strategies:\n    - **Merge** when the PR branch consists of atomic, well-described commits that are nice to have in the version history.\n    - **Squash** when lots of cleanup commits have accumulated. Please make sure to follow the [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/#summary) spec for the squash commit.\n\n- After merging:\n  - Make sure the *issue* (if none exists, the PR - but not both) belongs to the appropriate milestone and project board.\n  - PRs in extensions cannot be assigned to core milestones, so create a core issue that references it and add it to the milestone.\n  - Close all relevant issues (*if* they are closed completely).\n  - Regressions should be labeled as such and removed from the project board and milestone after merging.\n  - Check for follow-up tasks:\n    - Merge related PRs (language files, extensions, documentations).\n    - Documentation updates.\n  - Create issues for further follow-up tasks, if necessary.\n```\n\n----------------------------------------\n\nTITLE: Frontend Workflow Configuration for Flarum Extensions\nDESCRIPTION: YAML configuration for setting up frontend testing workflow. Includes settings for bundlewatch, prettier, and typescript checks using Flarum's reusable workflow.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/github-actions.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Frontend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_frontend.yml@main\n    with:\n      enable_bundlewatch: false\n      enable_prettier: true\n      enable_typescript: false\n\n      frontend_directory: ./js\n      backend_directory: .\n      js_package_manager: yarn\n      main_git_branch: main\n\n    secrets:\n      bundlewatch_github_token: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Running Flarum Console Commands in Bash\nDESCRIPTION: Instructions for connecting to the server, navigating to the Flarum directory, and executing Flarum commands using PHP.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCollegarsi in ssh\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum [command]\n```\n\n----------------------------------------\n\nTITLE: Frontend Translation Migration Example - JavaScript\nDESCRIPTION: Example showing how to update frontend translation code from using transChoice to the new ICU MessageFormat system.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.translator.transChoice('some-translation', guestCount, {host: hostName});\n```\n\nLANGUAGE: javascript\nCODE:\n```\napp.translator.trans('some-translation', {host: hostName, guestCount });\n```\n\n----------------------------------------\n\nTITLE: Adding PHPStan to Flarum Extension using CLI\nDESCRIPTION: Command to use Flarum CLI for adding and updating PHPStan infrastructure in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra phpstan\n```\n\n----------------------------------------\n\nTITLE: Adding PHPStan Scripts to Composer Configuration\nDESCRIPTION: This JSON snippet adds scripts to the composer.json file for running PHPStan analysis and clearing its cache.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"analyse:phpstan\": \"phpstan analyse\",\n    \"clear-cache:phpstan\": \"phpstan clear-result-cache\"\n  },\n  \"scripts-descriptions\": {\n    \"analyse:phpstan\": \"Run static analysis\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Composer Configuration for Flarum Extension\nDESCRIPTION: Example composer.json configuration for a Flarum extension, defining package metadata, dependencies, autoloading, and extension-specific settings.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/start.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"acme/flarum-hello-world\",\n    \"description\": \"Say hello to the world!\",\n    \"type\": \"flarum-extension\",\n    \"require\": {\n        \"flarum/core\": \"^1.0.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\"Acme\\\\HelloWorld\\\\\": \"src/\"}\n    },\n    \"extra\": {\n        \"flarum-extension\": {\n            \"title\": \"Hello World\",\n            \"icon\": {\n                \"name\": \"fas fa-smile\",\n                \"backgroundColor\": \"#238c59\",\n                \"color\": \"#fff\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Tables in Flarum Migrations\nDESCRIPTION: Example of using the Migration helper to rename an existing database table from one name to another.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::renameTable($from, $to);\n```\n\n----------------------------------------\n\nTITLE: Registering Console Commands in Flarum's extend.php\nDESCRIPTION: This PHP snippet shows how to register custom console commands using the Flarum\\Extend\\Console extender in an extension's extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/console.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Console\\CustomCommand;\n\nreturn [\n  // Other extenders\n  (new Extend\\Console())->command(CustomCommand::class)\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: CSRF Token Mismatch Error\nDESCRIPTION: Example of the JSON error response for a CSRF token mismatch (HTTP 400).  This occurs when the `Authorization` header is missing or invalid, and Flarum attempts to authenticate via session cookies.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"{\n  \\\"errors\\\": [\n    {\n      \\\"status\\\": \\\"400\\\",\n      \\\"code\\\": \\\"csrf_token_mismatch\\\"\n    }\n  ]\n}\"\n```\n\n----------------------------------------\n\nTITLE: Using Streams for Reactive Data in Flarum (JavaScript)\nDESCRIPTION: This snippet shows how to use Flarum's Stream utility for creating reactive data structures, commonly used for form data management.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/forms.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\n\n\nconst value = Stream(\"hello!\");\nvalue() === \"hello!\"; // true\nvalue(\"world!\");\nvalue() === \"world!\"; // true\n```\n\n----------------------------------------\n\nTITLE: Adding PHPStan to Flarum Extension Using CLI\nDESCRIPTION: Shows how to use the Flarum CLI to automatically add and update PHPStan infrastructure to an extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra phpstan\n```\n\n----------------------------------------\n\nTITLE: YAML Literal Block Translation\nDESCRIPTION: Example of using YAML literal blocks for multiline translations\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/i18n.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nliteral_block_text: |\n  These lines will be displayed as shown here, line breaks and all.\n\n      Extra indentation is also preserved: this line will be indented 4 spaces!\n\n  Quote marks are unnecessary, even when the block contains special characters.\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum via Composer CLI\nDESCRIPTION: Command to create a new Flarum installation using Composer package manager. Installs version 1.8.0 or higher in the current directory.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/install.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project flarum/flarum:^1.8.0 .\n```\n\n----------------------------------------\n\nTITLE: Creating a User in Flarum REST API\nDESCRIPTION: This snippet shows how to create a new user using the POST /api/users endpoint. It demonstrates the required attributes for user creation in the request payload.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"attributes\": {\n      \"username\": \"Flarum\",\n      \"email\": \"flarum@example.com\",\n      \"password\": \"correcthorsebatterystaple\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend Workflow Configuration\nDESCRIPTION: YAML configuration for setting up frontend testing workflow, including options for bundlewatch, prettier, and typescript checks\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/github-actions.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Frontend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_frontend.yml@main\n    with:\n      enable_bundlewatch: false\n      enable_prettier: true\n      enable_typescript: false\n\n      frontend_directory: ./js\n      backend_directory: .\n      js_package_manager: yarn\n      main_git_branch: main\n\n    secrets:\n      bundlewatch_github_token: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: PHPStan Configuration Setup\nDESCRIPTION: Configuration file for PHPStan defining analysis parameters, paths, and includes\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_2\n\nLANGUAGE: neon\nCODE:\n```\nincludes:\n  - vendor/flarum/phpstan/extension.neon\n\nparameters:\n  # The level will be increased in Flarum 2.0\n  level: 5\n  paths:\n    - src\n    - extend.php\n  excludePaths:\n    - *.blade.php\n  checkMissingIterableValueType: false\n  databaseMigrationsPath: ['migrations']\n```\n\n----------------------------------------\n\nTITLE: Using Config Array in PHP\nDESCRIPTION: Demonstrates how to access the URL configuration using the new array structure in config.php. The 'url' is now an array accessible via the $config->url() method on an instance of the Config class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$config = app()->make(Flarum\\Foundation\\Config::class);\n$url = $config->url();\n```\n\n----------------------------------------\n\nTITLE: Exporting Extend Module from index.js in Javascript\nDESCRIPTION: This code snippet demonstrates how to export the `extend` module from your entry `index.js` file, making it available for use in other parts of your Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexport { default as extend } from './extend';\n```\n\n----------------------------------------\n\nTITLE: PHP Error Handling Extension\nDESCRIPTION: Reference to configuring error handling and status codes using the new Flarum\\Extend\\ErrorHandling extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b12.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nFlarum\\Extend\\ErrorHandling\n```\n\n----------------------------------------\n\nTITLE: Implementing SubtreeRetainer in Mithril 2 Component\nDESCRIPTION: Example of using SubtreeRetainer with onbeforeupdate in a Mithril 2 component to optimize redraws.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass CustomComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.showContent = false;\n\n    this.subtree = new SubtreeRetainer(\n      () => this.showContent,\n    )\n  }\n\n  onbeforeupdate() {\n    return this.subtree.needsRebuild();\n  }\n\n  view(vnode) {\n    return <div>\n      <button onclick={() => this.showContent = !this.showContent}>Toggle Extra Content</button>\n      <p>Hello World!{this.showContent ? ' Extra Content!' : ''}</p>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating Zend Namespace Classes - PHP\nDESCRIPTION: This snippet informs developers that using classes from the 'Zend' namespace is deprecated and should be replaced with the 'Laminas' namespace. This transition is part of the ongoing cleanup efforts leading to Beta 13.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Flarum Extension\nDESCRIPTION: TSConfig setup for enabling TypeScript support in Flarum extensions with proper type definitions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"flarum-tsconfig\",\n  \"include\": [\"src/**/*\", \"../vendor/flarum/core/js/dist-typings/@types/**/*\"],\n  \"compilerOptions\": {\n    \"declarationDir\": \"./dist-typings\",\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"flarum/*\": [\"../vendor/flarum/core/js/dist-typings/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model Attribute Types for PHPStan\nDESCRIPTION: Example of using Flarum's Model extension to cast attributes to specific types, helping PHPStan with type inference.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Model(User::class))\n    ->cast('is_cool', 'bool'),\n```\n\n----------------------------------------\n\nTITLE: Importing Extension Exports in Frontend\nDESCRIPTION: JavaScript code showing how to import exported items from other Flarum extensions in frontend code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst allThingsExportedBySomeExtension = require('@flarum-tags');\n```\n\n----------------------------------------\n\nTITLE: Finding Valid Access Tokens in Flarum\nDESCRIPTION: Example of how to find a valid access token using the new methods introduced in Beta 16, which replace the deprecated AccessToken::find() method.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nAccessToken::findValid($tokenString)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nAccessToken::whereValid()\n```\n\n----------------------------------------\n\nTITLE: Adding PHPStan to Flarum Extension using CLI\nDESCRIPTION: Command to use Flarum CLI for automatically adding and updating PHPStan infrastructure to the extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra phpstan\n```\n\n----------------------------------------\n\nTITLE: Using Flarum CLI to Add PHPStan Infrastructure\nDESCRIPTION: Command to automatically add and update PHPStan infrastructure to your Flarum extension using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra phpstan\n```\n\n----------------------------------------\n\nTITLE: Listing Discussions Response from Flarum's REST API\nDESCRIPTION: Example response from the GET /api/discussions endpoint, showing discussions with their attributes, relationships, and included resources such as users, tags, and posts.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"links\": {\n    \"first\": \"https://flarum.tld/api/discussions\",\n    \"next\": \"https://flarum.tld/api/discussions?page%5Boffset%5D=20\"\n  },\n  \"data\": [\n    {\n      \"type\": \"discussions\",\n      \"id\": \"234\",\n      \"attributes\": {\n        \"title\": \"Lorem Ipsum\",\n        \"slug\": \"234-lorem-ipsum\",\n        \"commentCount\": 10,\n        \"participantCount\": 3,\n        \"createdAt\": \"2022-01-01T10:20:30+00:00\",\n        \"lastPostedAt\": \"2022-01-05T10:20:30+00:00\",\n        \"lastPostNumber\": 10,\n        \"canReply\": true,\n        \"canRename\": true,\n        \"canDelete\": true,\n        \"canHide\": true,\n        \"isHidden\": true,\n        \"hiddenAt\": \"2022-01-06T10:20:30+00:00\",\n        \"lastReadAt\": \"2022-01-02T10:20:30+00:00\",\n        \"lastReadPostNumber\": 2,\n        \"isApproved\": true,\n        \"canTag\": true,\n        \"isLocked\": false,\n        \"canLock\": true,\n        \"isSticky\": false,\n        \"canSticky\": true,\n        \"canMerge\": true,\n        \"subscription\": null\n      },\n      \"relationships\": {\n        \"user\": {\n          \"data\": {\n            \"type\": \"users\",\n            \"id\": \"1\"\n          }\n        },\n        \"lastPostedUser\": {\n          \"data\": {\n            \"type\": \"users\",\n            \"id\": \"64\"\n          }\n        },\n        \"tags\": {\n          \"data\": [\n            {\n              \"type\": \"tags\",\n              \"id\": \"3\"\n            }\n          ]\n        },\n        \"firstPost\": {\n          \"data\": {\n            \"type\": \"posts\",\n            \"id\": \"668\"\n          }\n        }\n      }\n    },\n    {\n      \"type\": \"discussions\",\n      \"id\": \"234\",\n      \"attributes\": {\n        // [...]\n      },\n      \"relationships\": {\n        // [...]\n      }\n    },\n    // [...] more discussions\n  ],\n  \"included\": [\n    {\n      \"type\": \"users\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"username\": \"Admin\",\n        \"displayName\": \"Admin\",\n        \"avatarUrl\": null,\n        \"slug\": \"1\"\n      }\n    },\n    {\n      \"type\": \"users\",\n      \"id\": \"64\",\n      \"attributes\": {\n        \"username\": \"Flarum\",\n        \"displayName\": \"Flarum\",\n        \"avatarUrl\": \"https://flarum.tld/assets/avatars/Z4hEncw0ndVqZ8be.png\",\n        \"slug\": \"64\"\n      }\n    },\n    {\n      \"type\": \"tags\",\n      \"id\": \"3\",\n      \"attributes\": {\n        \"name\": \"Welcome\",\n        \"description\": \"Post interesting things here\",\n        \"slug\": \"welcome\",\n        \"color\": \"#888\",\n        \"backgroundUrl\": null,\n        \"backgroundMode\": null,\n        \"icon\": \"fas fa-bullhorn\",\n        \"discussionCount\": 30,\n        \"position\": 1,\n        \"defaultSort\": null,\n        \"isChild\": false,\n        \"isHidden\": false,\n        \"lastPostedAt\": \"2022-01-05T10:20:30+00:00\",\n        \"canStartDiscussion\": true,\n        \"canAddToDiscussion\": true,\n        \"isRestricted\": false\n      }\n    },\n    {\n      \"type\": \"posts\",\n      \"id\": \"668\",\n      \"attributes\": {\n        \"number\": 1,\n        \"createdAt\": \"2022-01-01T10:20:30+00:00\",\n        \"contentType\": \"comment\",\n        \"contentHtml\": \"<p>Hello World</p>\"\n      }\n    },\n    // [...] more includes for the other discussions\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Alerts Implementation in Flarum\nDESCRIPTION: This code shows how to update alerts implementation in Flarum. The new approach offers three overloads for the show method, and returns a unique key for dismissing specific alerts instead of using the alert instance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// Old way\napp.alerts.show(new Alert(type: 'success', children: 'Hello, this is a success alert!'));\n\n// New way (3 overloads)\napp.alerts.show('Hello, this is a success alert!');\napp.alerts.show({type: 'success'}, 'Hello, this is a success alert!');\napp.alerts.show(Alert, {type: 'success'}, 'Hello, this is a success alert!');\n```\n\n----------------------------------------\n\nTITLE: Specifying Optional Dependencies in composer.json\nDESCRIPTION: JSON configuration in composer.json to specify optional dependencies for a Flarum extension, ensuring proper load order of extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"extra\": {\n    \"flarum-extension\": {\n      \"optional-dependencies\": [\n        \"flarum/tags\"\n      ]\n    }\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Access Tokens in Flarum\nDESCRIPTION: Examples of how to generate different types of access tokens using the new token generation methods introduced in Beta 16.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nFlarum\\Http\\RememberAccessToken::generate($userId)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nFlarum\\Http\\DeveloperAccessToken::generate($userId)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nFlarum\\Http\\SessionAccessToken::generate()\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions in Flarum Groups and Users\nDESCRIPTION: Code examples demonstrating how to work with permissions in Flarum, including accessing a group's permissions, checking if a group has a specific permission, enumerating a user's permissions, and checking if a user has a specific permission.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// An Eloquent relation to the group's permissions\n$group->permissions();\n\n// Check if a group has a permission\n$group->hasPermission('viewForum');\n\n// Enumerate all the user's permissions\n$user->getPermissions();\n\n// Check if the user is in a group with the given permission\n$user->hasPermission('viewForum');\n```\n\n----------------------------------------\n\nTITLE: Checking for Optional Dependencies in Backend PHP\nDESCRIPTION: PHP code example showing how to check if an optional dependency extension is enabled in the backend using the ExtensionManager.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extension\\ExtensionManager;\n\nclass SomeClass {\n    public function __construct(ExtensionManager $extensions)\n    {\n        $this->extensions = $extensions;\n    }\n\n    public function someMethod()\n    {\n        if ($this->extensions->isEnabled('some-extension-id')) {\n            // do something.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Scopers in Flarum\nDESCRIPTION: Configuration code for registering custom visibility scopers using Flarum's extender system. Shows how to register scopers for both Tag and Discussion models.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\Tags\\Tag;\nuse YourNamespace\\Access;\n\nreturn [\n  // Other extenders\n\n  // 'view' is optional here, since that's the default value for the ability argument.\n  // However, if we were applying this to a different ability, such as `viewPrivate`,\n  // would need to explicitly specify that.\n  (new Extend\\ModelVisibility(Tag::class))\n    ->scope(Access\\ScopeTagVisibility::class, 'view'),\n\n  (new Extend\\ModelVisibility(Discussion::class))\n    ->scopeAll(Access\\ScopeDiscussionVisibilityForAbility::class),\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Backend GitHub Actions Workflow Configuration\nDESCRIPTION: YAML configuration for setting up backend workflow in a Flarum extension, including PHPUnit tests and static code analysis options.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Backend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_backend.yml@main\n    with:\n      # Different types of jobs\n      enable_backend_testing: true\n      enable_phpstan: false\n\n      # Additional parameters\n      backend_directory: .\n```\n\n----------------------------------------\n\nTITLE: State Pattern Implementation\nDESCRIPTION: Shows how to implement a POJO state pattern for managing data that needs to be accessed by multiple components.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Counter {\n  constructor() {\n    this._counter = 0;\n  }\n\n  increaseCounter() {\n    this._counter += 1;\n  }\n\n  getCount() {\n    return this._counter;\n  }\n}\n\napp.counter = new Counter();\n\nextend(HeaderSecondary.prototype, 'items', function(items) {\n  items.add('counterDisplay',\n    <div>\n      <p>Counter: {app.counter.getCount()}</p>\n    </div>\n  );\n})\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('counterButton',\n    <div>\n      <button onclick={() => app.counter.increaseCounter()}>Increase Counter</button>\n    </div>\n  );\n})\n```\n\n----------------------------------------\n\nTITLE: Container Class Reference\nDESCRIPTION: Reference to the Laravel container class that should be used instead of Application methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nIlluminate\\Container\\Container\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Tags to Flarum Translations in JSX\nDESCRIPTION: Shows how to add HTML tags to translations in Flarum using JSX. The example demonstrates passing an HTML anchor tag as a parameter to the translator.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"helpText\">\n  {app.translator.trans('icon_text', {\n    a: <a href=\"https://fortawesome.github.io/Font-Awesome/icons/\" tabindex=\"-1\"/>\n  })}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Checking Package Updates with Composer\nDESCRIPTION: Command to check for outdated packages in composer.json that are directly required. Only displays packages marked as semver-safe-update and update-possible.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/internal/package-manager.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer outdated -D --format json\n```\n\n----------------------------------------\n\nTITLE: Using Key References in YAML for Flarum Translations\nDESCRIPTION: Shows how to use key references in YAML to reuse translations across multiple contexts in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nedit_stuff_button: => edit_stuff    # Se utiliza en el código que crea el botón.\nedit_stuff_title: => edit_stuff     # Se utiliza en el código que crea el diálogo.\n\nedit_stuff: Edit Stuff              # No se utiliza en el código.\n```\n\n----------------------------------------\n\nTITLE: Incorrect Translation Referencing in YAML for Flarum\nDESCRIPTION: Illustrates an incorrect way of referencing translations in Flarum. This example shows why referencing keys that aren't in the 'ref' namespace can lead to unintended changes and difficulties in tracking translation reuse.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => Log In\n\n    log_in:\n      submit_button: => core.forum.header.log_in_link  # Never reference keys\n      title: => core.forum.header.log_in_link          # that aren't in \"ref\"!\n```\n\n----------------------------------------\n\nTITLE: Defining Top-Level Translation Key Namespaces in YAML\nDESCRIPTION: This snippet shows the top-level namespaces for translation keys used in Flarum's core components. It defines namespaces for the core functionality and Laravel's validator.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncore:        # Translations used by the Flarum core\nvalidation:  # Translations used by Laravel's validator\n```\n\n----------------------------------------\n\nTITLE: Custom Visibility Scoper Implementation\nDESCRIPTION: Example of implementing a custom visibility scoper in an extension to allow certain users to view private posts.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopePostVisibility\n{\n    public function __invoke(User $actor, $query)\n    {\n      if ($actor->can('posts.viewPrivate')) {\n        $query->whereRaw(\"1=1\");\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Modal Opening in Flarum JavaScript\nDESCRIPTION: This snippet shows how to update the modal opening process in Flarum. Instead of passing a component instance, it now requires passing the component class and attrs separately.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\napp.modal.show(LoginModal, {identification: 'prefilledUsername'});\n```\n\n----------------------------------------\n\nTITLE: Changing Directory Ownership in Linux\nDESCRIPTION: This command changes the ownership of a directory and its contents to the 'www-data' user and group, commonly used for PHP and web server operations in Linux. Proper ownership prevents permission issues during web server operations and CLI interaction.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/install.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nchown -R www-data:www-data /path/to/directory\n```\n\n----------------------------------------\n\nTITLE: Setting up package.json for Flarum Extension Frontend\nDESCRIPTION: Configures the package.json file for a Flarum extension's frontend, including dependencies and build scripts.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"private\": true,\n  \"name\": \"@acme/flarum-hello-world\",\n  \"dependencies\": {\n    \"flarum-webpack-config\": \"^1.0.0\",\n    \"webpack\": \"^4.0.0\",\n    \"webpack-cli\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"flarum-tsconfig\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"dev\": \"webpack --mode development --watch\",\n    \"build\": \"webpack --mode production\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend for Split Modules in PHP\nDESCRIPTION: Shows how to configure the Flarum backend to be aware of split modules by adding the js/dist/forum path as a source for the forum frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/code-splitting.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->jsDirectory(__DIR__.'/js/dist/forum'),\n];\n```\n\n----------------------------------------\n\nTITLE: Updated Composer Loading\nDESCRIPTION: Shows the new pattern for loading composer components by passing class and attributes separately.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\napp.composer.load(new DiscussionComposer({user: app.session.user}));\n\n// Mithril 2\napp.composer.load(DiscussionComposer, {user: app.session.user})\n```\n\n----------------------------------------\n\nTITLE: Running Pending Migrations\nDESCRIPTION: Executes all pending database migrations, required when adding or updating extensions that modify the database.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum migrate\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current User in Flarum Extension\nDESCRIPTION: Code to get the current user object from within a Flarum extension using the request attribute\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$request->getAttribute('actor')\n```\n\n----------------------------------------\n\nTITLE: Passing Request to Next Middleware in Chain\nDESCRIPTION: This minimal snippet shows how to pass the request to the next middleware in the chain when no custom response is needed from the current middleware.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/middleware.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn $handler->handle($request);\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan Package for Flarum\nDESCRIPTION: Composer command to install the flarum/phpstan package as a development dependency in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/phpstan:^1.0\n```\n\n----------------------------------------\n\nTITLE: PHP Route and Frontend Extender Usage\nDESCRIPTION: Example of using remove methods on Route and Frontend extenders to remove and replace routes in Beta 16.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Using Route extender\n$routes->remove('routeName');\n\n// Using Frontend extender\n$frontend->remove('frontendRouteName');\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Extension Category in Composer JSON\nDESCRIPTION: JSON configuration to mark a Flarum extension as a theme in composer.json, which affects how the extension is categorized in the admin dashboard.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/theme.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // other fields\n    \"extra\": {\n        \"flarum-extension\": {\n            \"category\": \"theme\"\n        }\n    }\n    // other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Application Usage\nDESCRIPTION: Example showing the change from direct app URL access to proper Config injection and usage.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n// Old approach - no longer works\napp()->url()\n\n// New approach\n$config = app()->make(Flarum\\Foundation\\Config::class);\n$config->url()\n```\n\n----------------------------------------\n\nTITLE: Accessing Filesystem Disks in PHP\nDESCRIPTION: Demonstrates how to inject the Filesystem Factory and access a disk in a Flarum controller. This example shows the DeleteLogoController from Flarum core, which uses the 'flarum-assets' disk to manage the forum logo.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/filesystem.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Api\\Controller;\n\nuse Flarum\\Http\\RequestUtil;\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Illuminate\\Contracts\\Filesystem\\Factory;\nuse Illuminate\\Contracts\\Filesystem\\Filesystem;\nuse Laminas\\Diactoros\\Response\\EmptyResponse;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nclass DeleteLogoController extends AbstractDeleteController\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    /**\n     * @var Filesystem\n     */\n    protected $uploadDir;\n\n    /**\n     * @param SettingsRepositoryInterface $settings\n     * @param Factory $filesystemFactory\n     */\n    public function __construct(SettingsRepositoryInterface $settings, Factory $filesystemFactory)\n    {\n        $this->settings = $settings;\n        $this->uploadDir = $filesystemFactory->disk('flarum-assets');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function delete(ServerRequestInterface $request)\n    {\n        RequestUtil::getActor($request)->assertAdmin();\n\n        $path = $this->settings->get('logo_path');\n\n        $this->settings->set('logo_path', null);\n\n        if ($this->uploadDir->exists($path)) {\n            $this->uploadDir->delete($path);\n        }\n\n        return new EmptyResponse(204);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Text-Related Translation Suffixes in YAML\nDESCRIPTION: Lists suffixes used for informative or descriptive text elements, such as confirmations, messages, general text, titles, and tooltips.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n_confirmation:  # Used for messages displayed to confirm an operation.\n_message:       # Used for messages that show the result of an operation.\n_text:          # Used for any text that is not a message, title, or tooltip.\n_title:         # Used for text displayed as the title of a page or modal.\n_tooltip:       # Used for text displayed when the user hovers over something.\n```\n\n----------------------------------------\n\nTITLE: Adding PHPStan Scripts to Composer Configuration\nDESCRIPTION: JSON snippet showing how to add PHPStan analysis commands to the composer.json scripts section for easier execution.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"analyse:phpstan\": \"phpstan analyse\",\n    \"clear-cache:phpstan\": \"phpstan clear-result-cache\"\n  },\n  \"scripts-descriptions\": {\n    \"analyse:phpstan\": \"Run static analysis\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pluralizable YAML Translation Text\nDESCRIPTION: This snippet defines translation keys in YAML format, where the text can be pluralized depending on the number of users. The use of variables allows different language localizers to adjust the translation for plural forms.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nmentioned_by_text: \"{users} replied to this.\"       # Can be pluralized ...\nmentioned_by_self_text: \"{users} replied to this.\"  # Can be pluralized ...\n```\n\n----------------------------------------\n\nTITLE: Adding GitHub Actions with Flarum CLI\nDESCRIPTION: Command to use Flarum CLI for automatically adding and updating GitHub Actions workflows to an extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/github-actions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra githubActions\n```\n\n----------------------------------------\n\nTITLE: Adding PHPStan Scripts to composer.json\nDESCRIPTION: JSON snippet to add PHPStan analysis scripts to the composer.json file of a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"analyse:phpstan\": \"phpstan analyse\",\n    \"clear-cache:phpstan\": \"phpstan clear-result-cache\"\n  },\n  \"scripts-descriptions\": {\n    \"analyse:phpstan\": \"Run static analysis\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Translation in JavaScript\nDESCRIPTION: Demonstrates how to access a translation using its full key in JavaScript code.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/i18n.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'acme-hello-world.alert.hello_text'\n```\n\n----------------------------------------\n\nTITLE: Flarum Scheduler Cron Configuration\nDESCRIPTION: Crontab entry to run the Flarum scheduler every minute. This configuration enables automated tasks for all compatible Flarum extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/scheduler.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * cd /path-to-your-project && php flarum schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Adding Frontend Route in JavaScript for Flarum Extension\nDESCRIPTION: Illustrates how to add a frontend route using the Routes extender in JavaScript for a Flarum extension. The example adds a route for '/users' that renders a UsersPage component.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Routes()\n    .add('acme.users', '/users', <UsersPage />),\n];\n```\n\n----------------------------------------\n\nTITLE: Migrating Component Lifecycle Methods in JavaScript\nDESCRIPTION: This snippet demonstrates how to migrate component lifecycle methods from Mithril 0.2 to Mithril 2.0 in Flarum extensions. It shows the equivalents of 'init' and 'config' methods in the new version, including new lifecycle hooks like 'oninit', 'oncreate', and 'onbeforeupdate'.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass OldMithrilComponent extends Component {\n  init() {\n    console.log('Code to run when component instance created, but before attached to the DOM.');\n  }\n\n  config(element, isInitialized) {\n    console.log('Code to run on every redraw AND when the element is first attached');\n\n    if (isInitialized) return;\n\n    console.log('Code to execute only once when components are first created and attached to the DOM');\n\n    context.onunload = () => {\n      console.log('Code to run when the component is removed from the DOM');\n    }\n  }\n\n  view() {\n    if (dontRedraw()) return { subtree: 'retain' };\n\n    return <p>Hello World!</p>;\n  }\n}\n\nclass NewMithrilComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    console.log('Code to run when component instance created, but before attached to the DOM.');\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    console.log('Code to run when components are first created and attached to the DOM');\n  }\n\n  onbeforeupdate(vnode, oldVnode) {\n    super.onbeforeupdate(vnode);\n\n    console.log('Code to run BEFORE diffing / redrawing components on every redraw');\n\n    if (dontRedraw()) return false;\n  }\n\n  onupdate(vnode) {\n    console.log('Code to run on every redraw AFTER the DOM is updated.');\n  }\n\n  onbeforeremove(vnode) {\n    return Promise.resolve();\n  }\n\n  onremove(vnode) {\n      console.log('Code to run when the component is removed from the DOM');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Updates Using Composer\nDESCRIPTION: Command to check for available updates of packages directly required in the root composer.json. Only shows packages marked as semver-safe-update and update-possible.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/internal/extension-manager.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer outdated -D --format json\n```\n\n----------------------------------------\n\nTITLE: Error Handling Extender in PHP\nDESCRIPTION: Shows how to use the new error handling extender to configure status codes and error handling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b12.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nFlarum\\Extend\\ErrorHandling\n```\n\n----------------------------------------\n\nTITLE: Package Configuration for Flarum Extension\nDESCRIPTION: NPM package.json configuration for a Flarum extension, including build scripts and dependencies.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"private\": true,\n  \"name\": \"@acme/flarum-hello-world\",\n  \"dependencies\": {\n    \"flarum-webpack-config\": \"^1.0.0\",\n    \"webpack\": \"^4.0.0\",\n    \"webpack-cli\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"flarum-tsconfig\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"dev\": \"webpack --mode development --watch\",\n    \"build\": \"webpack --mode production\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating HTML Tags in Translations\nDESCRIPTION: Examples showing how to update HTML tags in translations to use the simpler tag format required in Flarum 2.0, removing attributes from HTML tags.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmy_locale_key: \"You can read about a <a href='{basic_impl_link}'>basic queue</a> implementation or a <a href='{adv_impl_link}'>more advanced</a> one.\"\n```\n\n----------------------------------------\n\nTITLE: List Discussions Response\nDESCRIPTION: Example response from the GET /api/discussions endpoint showing the JSON:API compliant format with pagination links, discussion data, relationships, and included resources.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"links\": {\n    \"first\": \"https://flarum.tld/api/discussions\",\n    \"next\": \"https://flarum.tld/api/discussions?page%5Boffset%5D=20\"\n  },\n  \"data\": [\n    {\n      \"type\": \"discussions\",\n      \"id\": \"234\",\n      \"attributes\": {\n        \"title\": \"Lorem Ipsum\",\n        \"slug\": \"234-lorem-ipsum\",\n        \"commentCount\": 10,\n        \"participantCount\": 3,\n        \"createdAt\": \"2022-01-01T10:20:30+00:00\",\n        \"lastPostedAt\": \"2022-01-05T10:20:30+00:00\",\n        \"lastPostNumber\": 10,\n        \"canReply\": true,\n        \"canRename\": true,\n        \"canDelete\": true,\n        \"canHide\": true,\n        \"isHidden\": true,\n        \"hiddenAt\": \"2022-01-06T10:20:30+00:00\",\n        \"lastReadAt\": \"2022-01-02T10:20:30+00:00\",\n        \"lastReadPostNumber\": 2,\n        \"isApproved\": true,\n        \"canTag\": true,\n        \"isLocked\": false,\n        \"canLock\": true,\n        \"isSticky\": false,\n        \"canSticky\": true,\n        \"canMerge\": true,\n        \"subscription\": null\n      },\n      \"relationships\": {\n        \"user\": {\n          \"data\": {\n            \"type\": \"users\",\n            \"id\": \"1\"\n          }\n        },\n        \"lastPostedUser\": {\n          \"data\": {\n            \"type\": \"users\",\n            \"id\": \"64\"\n          }\n        },\n        \"tags\": {\n          \"data\": [\n            {\n              \"type\": \"tags\",\n              \"id\": \"3\"\n            }\n          ]\n        },\n        \"firstPost\": {\n          \"data\": {\n            \"type\": \"posts\",\n            \"id\": \"668\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Testing with Jest in Flarum Extensions\nDESCRIPTION: This snippet provides the necessary configuration for setting up frontend testing using Jest in Flarum extensions. It includes package.json scripts, Jest configuration, and TypeScript configuration for testing.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/testing.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"scripts\": {\n    \"test\": \"yarn node --experimental-vm-modules $(yarn bin jest)\"\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('@flarum/jest-config')();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"include\": [\"tests/**/*\"],\n  \"files\": [\"../../../node_modules/@flarum/jest-config/shims.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan via Flarum CLI\nDESCRIPTION: Command to add and update PHPStan infrastructure using Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra phpstan\n```\n\n----------------------------------------\n\nTITLE: Validation Errors in Flarum REST API\nDESCRIPTION: Example of validation error responses with 422 HTTP status code, showing multiple field-specific errors with pointers to the invalid data attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"422\",\n      \"code\": \"validation_error\",\n      \"detail\": \"The username has already been taken.\",\n      \"source\":{\n        \"pointer\":\"\\/data\\/attributes\\/username\"\n      }\n    },\n    {\n      \"status\": \"422\",\n      \"code\": \"validation_error\",\n      \"detail\": \"The email has already been taken.\",\n      \"source\": {\n        \"pointer\":\"\\/data\\/attributes\\/email\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Parameters in PHP\nDESCRIPTION: Example showing how to capture URI segments using route parameters in Flarum's backend routing system.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Routes('forum'))\n        ->get('/user/{id}', 'acme.user', UserController::class)\n```\n\n----------------------------------------\n\nTITLE: Using Illuminate Support String Slug in PHP\nDESCRIPTION: Demonstrates the replacement for the removed Flarum\\Util\\Str::slug() method with Illuminate\\Support\\Str::slug().\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b13.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$slug = Str::slug($string);\n```\n\n----------------------------------------\n\nTITLE: Creating a User API Request\nDESCRIPTION: Example JSON payload for creating a new user using the POST /api/users endpoint. Includes username, email, and password attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"attributes\": {\n      \"username\": \"Flarum\",\n      \"email\": \"flarum@example.com\",\n      \"password\": \"correcthorsebatterystaple\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: System Information Command - PHP\nDESCRIPTION: Command to display system information and configuration details for diagnostic purposes.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/troubleshoot.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nphp flarum info\n```\n\n----------------------------------------\n\nTITLE: Adding Header Link with Mithril.js\nDESCRIPTION: Example of extending Flarum's HeaderPrimary component to add a custom link using Mithril.js JSX syntax\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Frontend Routes in PHP\nDESCRIPTION: Example of registering a frontend route on the backend using the Frontend extender in PHP.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Frontend('forum'))\n        ->route('/users', 'acme.users')\n```\n\n----------------------------------------\n\nTITLE: Backend Translation Migration Example - PHP\nDESCRIPTION: Example showing how to update backend translation code from using transChoice to the new ICU MessageFormat system.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$translator->transChoice('some-translation', $guestCount, ['{host}' => $hostName]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$translator->trans('some-translation', ['host' => $hostName, 'guestCount' => $guestCount]);\n```\n\n----------------------------------------\n\nTITLE: Literal Blocks in YAML\nDESCRIPTION: This snippet demonstrates the use of literal blocks in YAML for multi-line translations. A vertical bar (`|`) is used to indicate the start of the block, with subsequent lines indented by two spaces.  This preserves line breaks and extra indentation within the translation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n\"literal_block_text: |\\n  These lines will be displayed as shown here, line breaks and all.\\n\\n      Extra indentation is also preserved: this line will be indented 4 spaces!\\n\\n  Quote marks are unnecessary, even when the block contains special characters.\"\n```\n\n----------------------------------------\n\nTITLE: Project file structure (generic)\nDESCRIPTION: This snippet illustrates the recommended file structure for Flarum extension testing. It includes directories for source code (`src`), distribution files (`dist`), unit tests (`tests/unit`), and integration tests (`tests/integration`), along with configuration files for Jest, webpack and typescript.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/testing.md#2025-04-16_snippet_14\n\nLANGUAGE: js\nCODE:\n```\njs\n├── dist\n├── src\n├── tests\n│   ├── unit\n│   │   └── functionTest.test.js\n│   ├── integration\n│   │   └── componentTest.test.js\n├── package.json\n├── tsconfig.json\n├── tsconfig.test.json\n├── jest.config.cjs\n└── webpack.config.cjs\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Workflow in YAML\nDESCRIPTION: YAML configuration for setting up the backend workflow in a Flarum extension. It specifies job types and additional parameters like the backend directory.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Backend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_backend.yml@main\n    with:\n      # Different types of jobs\n      enable_backend_testing: true\n      enable_phpstan: false\n\n      # Additional parameters\n      backend_directory: .\n```\n\n----------------------------------------\n\nTITLE: Button and User Interface Element Suffixes in YAML\nDESCRIPTION: Suffix naming conventions for translation keys related to user interface elements and operations, such as buttons, links, headings, labels, and placeholders.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n_button:        # Used for buttons (including dropdown menu items).\n_link:          # Used for links that are not shown graphically as buttons.\n_heading:       # Used for headings in tables and lists.\n_label:         # Used for the names of data fields, checkbox settings, etc.\n_placeholder:   # Used for placeholder text displayed in fields.\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag Visibility Scoper in PHP for Flarum Tags\nDESCRIPTION: This code snippet defines a custom scoper for the Tag model with the 'view' ability. It filters tags based on the actor's permission to view the forum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeTagVisibility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     */\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->whereIn('id', function ($query) use ($actor) {\n            Tag::query()->setQuery($query->from('tags'))->whereHasPermission($actor, 'viewForum')->select('tags.id');\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Show Controller in PHP\nDESCRIPTION: Example of a controller for showing a single resource that extends AbstractShowController. Demonstrates how to retrieve and return a single model instance.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/api.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractShowController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass ShowTagController extends AbstractShowController\n{\n    public $serializer = TagSerializer::class;\n    \n    protected function data(Request $request, Document $document)\n    {\n        $id = Arr::get($request->getQueryParams(), 'id');\n        \n        return Tag::findOrFail($id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis in Flarum Extension\nDESCRIPTION: Bash commands to run PHPStan analysis and clear its cache in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer analyse:phpstan\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer clear-cache:phpstan && composer analyse:phpstan\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum PHPStan Package\nDESCRIPTION: This command installs the flarum/phpstan package in development mode. Necessary for enabling static code analysis by adding PHPStan dependencies. Requires Composer to run.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/phpstan:^1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Extension Metadata in JSON\nDESCRIPTION: Example JSON configuration to mark a Flarum extension as a theme by setting the category property in the package.json extra field. This categorization affects how the extension appears in the admin dashboard.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/theme.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // other fields\n    \"extra\": {\n        \"flarum-extension\": {\n            \"category\": \"theme\"\n        }\n    }\n    // other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Including Variables in Flarum Translations with JSX\nDESCRIPTION: Demonstrates how to include variables in translations using JSX syntax in Flarum. The example shows a search results dropdown item that includes a search query variable.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n{LinkButton.component({\n  icon: 'search',\n  children: app.translator.trans('all_discussions_button', {query}),\n  href: app.route('index', {q: query})\n})}\n```\n\n----------------------------------------\n\nTITLE: Custom Visibility Scoper Implementation in PHP\nDESCRIPTION: An example extension class that implements a custom visibility scoper to allow users with specific permissions to view private posts. This demonstrates how extensions can allow access to otherwise restricted content.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopePostVisibility\n{\n    public function __invoke(User $actor, $query)\n    {\n      if ($actor->can('posts.viewPrivate')) {\n        $query->whereRaw(\"1=1\");\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Modal Implementation\nDESCRIPTION: Shows the new way to handle modals by passing component class and attributes separately instead of instances.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\napp.modal.show(LoginModal, {identification: 'prefilledUsername'});\n```\n\n----------------------------------------\n\nTITLE: Adding Flarum Scheduler Cron Job\nDESCRIPTION: Cron job entry to run the Flarum scheduler every minute. This job changes to the Flarum project directory, executes the scheduler, and suppresses output.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/scheduler.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * cd /path-to-your-project && php flarum schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Configuring Sorting Options in PHP\nDESCRIPTION: Defines default sorting fields and available sort options in a controller\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n    // El campo de clasificación por defecto y el orden a utilizar.\n    public $sort = ['name' => 'asc'];\n    \n    // Los campos que están disponibles para ser ordenados.\n    public $sortFields = ['firstName', 'lastName'];\n```\n\n----------------------------------------\n\nTITLE: Routes Configuration\nDESCRIPTION: Example of using Routes extender instead of deprecated ConfigureApiRoutes event.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n// Old approach - deprecated\nuse Flarum\\Event\\ConfigureApiRoutes;\n\n// New approach\nuse Flarum\\Extend\\Routes;\n```\n\n----------------------------------------\n\nTITLE: Importing Extension Exports in Frontend JavaScript\nDESCRIPTION: Shows how to import exported functionality from other extensions in frontend code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst allThingsExportedBySomeExtension = require('@flarum-tags');\n```\n\n----------------------------------------\n\nTITLE: Using Flarum CLI to Add GitHub Actions - Bash\nDESCRIPTION: This bash command utilizes the Flarum CLI to automatically add and update GitHub workflows in your codebase, simplifying the process of workflow management for Flarum extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra githubActions\n```\n\n----------------------------------------\n\nTITLE: List Discussions Response\nDESCRIPTION: Example response from the GET /api/discussions endpoint showing discussion listings with their attributes, relationships, and included resources.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"links\": {\n    \"first\": \"https://flarum.tld/api/discussions\",\n    \"next\": \"https://flarum.tld/api/discussions?page%5Boffset%5D=20\"\n  },\n  \"data\": [\n    {\n      \"type\": \"discussions\",\n      \"id\": \"234\",\n      \"attributes\": {\n        \"title\": \"Lorem Ipsum\",\n        \"slug\": \"234-lorem-ipsum\",\n        \"commentCount\": 10,\n        \"participantCount\": 3,\n        \"createdAt\": \"2022-01-01T10:20:30+00:00\",\n        \"lastPostedAt\": \"2022-01-05T10:20:30+00:00\",\n        \"lastPostNumber\": 10,\n        \"canReply\": true,\n        \"canRename\": true,\n        \"canDelete\": true,\n        \"canHide\": true,\n        \"isHidden\": true,\n        \"hiddenAt\": \"2022-01-06T10:20:30+00:00\",\n        \"lastReadAt\": \"2022-01-02T10:20:30+00:00\",\n        \"lastReadPostNumber\": 2,\n        \"isApproved\": true,\n        \"canTag\": true,\n        \"isLocked\": false,\n        \"canLock\": true,\n        \"isSticky\": false,\n        \"canSticky\": true,\n        \"canMerge\": true,\n        \"subscription\": null\n      },\n      \"relationships\": {\n        \"user\": {\n          \"data\": {\n            \"type\": \"users\",\n            \"id\": \"1\"\n          }\n        },\n        \"lastPostedUser\": {\n          \"data\": {\n            \"type\": \"users\",\n            \"id\": \"64\"\n          }\n        },\n        \"tags\": {\n          \"data\": [\n            {\n              \"type\": \"tags\",\n              \"id\": \"3\"\n            }\n          ]\n        },\n        \"firstPost\": {\n          \"data\": {\n            \"type\": \"posts\",\n            \"id\": \"668\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Optional Dependencies in composer.json\nDESCRIPTION: JSON configuration in composer.json to specify optional dependencies, ensuring proper boot order for extensions with optional dependencies.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extra\": {\n    \"flarum-extension\": {\n      \"optional-dependencies\": [\n        \"flarum/tags\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Pluralization with transChoice in JavaScript\nDESCRIPTION: Demonstrates how to use the transChoice method to handle pluralization in translations. This example shows calculating a remaining count and passing it to the translator for plural-aware translation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst remaining = this.minPrimary - primaryCount;\nreturn app.translator.transChoice(\n  'choose_primary_placeholder',\n  remaining,\n  { count: remaining }\n);\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis\nDESCRIPTION: Commands to run PHPStan analysis and clear cache\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer analyse:phpstan\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer clear-cache:phpstan && composer analyse:phpstan\n```\n\n----------------------------------------\n\nTITLE: Updating Site Path Reference\nDESCRIPTION: Modification to index.php for custom directory structure\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/install.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$site = require './site.php';\n```\n\n----------------------------------------\n\nTITLE: Cron Job Configuration for Scheduled Tasks\nDESCRIPTION: Crontab entry for running scheduled Flarum tasks at regular intervals\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/console.md#2025-04-16_snippet_2\n\nLANGUAGE: cron\nCODE:\n```\n* * * * * cd /path-to-your-flarum-install && php flarum schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Extension Imports\nDESCRIPTION: Webpack configuration for enabling imports from other Flarum extensions in frontend code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('flarum-webpack-config')({\n    useExtensions: ['flarum-tags']\n});\n```\n\n----------------------------------------\n\nTITLE: Adding PHPStan Scripts to Composer Configuration\nDESCRIPTION: JSON configuration to add PHPStan analysis scripts to composer.json, providing commands for running analysis and clearing the cache.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"analyse:phpstan\": \"phpstan analyse\",\n    \"clear-cache:phpstan\": \"phpstan clear-result-cache\"\n  },\n  \"scripts-descriptions\": {\n    \"analyse:phpstan\": \"Run static analysis\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Filesystem Disk in Flarum\nDESCRIPTION: Example of declaring a new filesystem disk using Flarum's extend system. Shows configuration of root path and URL for local filesystem storage.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/filesystem.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Filesystem)\n        ->disk('flarum-uploads', function (Paths $paths, UrlGenerator $url) {\n            return [\n                'root'   => \"$paths->public/assets/uploads\",\n                'url'    => $url->to('forum')->path('assets/uploads')\n            ];\n        });\n```\n\n----------------------------------------\n\nTITLE: PHPStan Configuration File\nDESCRIPTION: Basic PHPStan configuration for Flarum extensions, including paths, level settings, and database migrations configuration\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_2\n\nLANGUAGE: neon\nCODE:\n```\nincludes:\n  - vendor/flarum/phpstan/extension.neon\n\nparameters:\n  # The level will be increased in Flarum 2.0\n  level: 5\n  paths:\n    - src\n    - extend.php\n  excludePaths:\n    - *.blade.php\n  checkMissingIterableValueType: false\n  databaseMigrationsPath: ['migrations']\n```\n\n----------------------------------------\n\nTITLE: Adding Composer Scripts for Flarum Testing\nDESCRIPTION: JSON configuration to add Composer scripts for running unit tests, integration tests, and setting up the testing environment.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"test\": [\n        \"@test:unit\",\n        \"@test:integration\"\n    ],\n    \"test:unit\": \"phpunit -c tests/phpunit.unit.xml\",\n    \"test:integration\": \"phpunit -c tests/phpunit.integration.xml\",\n    \"test:setup\": \"@php tests/integration/setup.php\"\n},\n\"scripts-descriptions\": {\n    \"test\": \"Runs all tests.\",\n    \"test:unit\": \"Runs all unit tests.\",\n    \"test:integration\": \"Runs all integration tests.\",\n    \"test:setup\": \"Sets up a database for use with integration tests. Execute this only once.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Categorizing Flarum Extension as Theme\nDESCRIPTION: This JSON snippet shows how to categorize a Flarum extension as a theme by setting the 'extra.flarum-extension.category' key to 'theme'. This setup will display the extension under the 'theme' section in the admin dashboard. No dependencies are required for this configuration.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/theme.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // other fields\n    \"extra\": {\n        \"flarum-extension\": {\n            \"category\": \"theme\"\n        }\n    }\n    // other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring composer.json for Local Extenders in Flarum\nDESCRIPTION: This JSON snippet shows how to modify the composer.json file to enable autoloading of custom classes for local extenders. It adds a PSR-4 autoload configuration for the 'App' namespace.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extenders.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"autoload\": {\n    \"psr-4\": {\n        \"App\\\\\": \"app/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Composer Scripts Configuration\nDESCRIPTION: Adding PHPStan analysis commands to composer.json scripts section.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"analyse:phpstan\": \"phpstan analyse\",\n    \"clear-cache:phpstan\": \"phpstan clear-result-cache\"\n  },\n  \"scripts-descriptions\": {\n    \"analyse:phpstan\": \"Run static analysis\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the New Tooltip Component in React\nDESCRIPTION: Demonstrates how to use the new Tooltip component for creating tooltips in a more framework-independent way.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Tooltip text=\"You wish!\">\n  <button>\n    Click for free money!\n  </button>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Tagging and Pushing Git Release\nDESCRIPTION: Commands for creating a version tag and pushing both code and tags to the remote Git repository. This is typically done when releasing a new version of the extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/distribution.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v0.1.0\ngit push && git push --tags\n```\n\n----------------------------------------\n\nTITLE: Email-specific Translation Suffixes in YAML\nDESCRIPTION: Suffix naming conventions specific to email translations, covering the body content and subject line of email messages sent by Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n_body:          # Used for the content of the email message.\n_subject:       # Used for the subject line of the email message.\n```\n\n----------------------------------------\n\nTITLE: Accessing URL Generator in Blade Templates\nDESCRIPTION: Shows how to access the URL generator instance in Blade templates in Flarum Beta 14. The $url variable is now available in blade.php templates, providing an instance of Flarum\\Http\\UrlGenerator.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// In blade.php templates\n$url->to('forum')->route('index');\n```\n\n----------------------------------------\n\nTITLE: Configuring Flarum Scheduler Cron Job\nDESCRIPTION: The cron job configuration to run the Flarum scheduler every minute, which enables task automation for all Flarum extensions that use the scheduler.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/scheduler.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * cd /path-to-your-project && php flarum schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: JavaScript Slug Helper Usage Recommendation\nDESCRIPTION: The JS slug() helper should only be used for suggesting slugs to users, not enforcing them, as it lacks sophisticated transliteration logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n- The JS `slug()` helper from the `flarum/utils/string` module should only be used to *suggest* slugs to users, not enforce them. It does not employ any sophisticated transliteration logic like its PHP counterpart.\n```\n\n----------------------------------------\n\nTITLE: Running Flarum Migrations\nDESCRIPTION: Command to execute all pending migrations, typically used when adding or updating extensions that modify the database.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/console.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum migrate\n```\n\n----------------------------------------\n\nTITLE: Create User Request\nDESCRIPTION: Example request payload for creating a new user via POST /api/users endpoint showing the required attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"attributes\": {\n      \"username\": \"Flarum\",\n      \"email\": \"flarum@example.com\",\n      \"password\": \"correcthorsebatterystaple\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Translation Referencing in Flarum YAML\nDESCRIPTION: Illustrates an incorrect way of referencing translations in Flarum, where keys outside the 'ref' namespace are referenced directly. This approach can lead to unintended changes and maintenance issues.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => Log In\n\n    log_in:\n      submit_button: => core.forum.header.log_in_link  # Never reference keys\n      title: => core.forum.header.log_in_link          # that aren't in \"ref\"!\n```\n\n----------------------------------------\n\nTITLE: Deprecated View Factory Injection in extend.php\nDESCRIPTION: Example of the deprecated approach for registering Laravel Blade view namespaces in Flarum extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// extend.php\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n  function (Factory $view) {\n    $view->addNamespace(NAME, RELATIVE PATH);\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Config Array Access\nDESCRIPTION: Demonstrates accessing URL configuration through the new array structure in config.php using the Config instance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$config->url()\n```\n\n----------------------------------------\n\nTITLE: Create Discussion Request/Response\nDESCRIPTION: Example of creating a new discussion via POST /api/discussions endpoint, showing the required request payload structure and example response with the created discussion details.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\":{\n    \"type\": \"discussions\",\n    \"attributes\": {\n      \"title\": \"Lorem Ipsum\",\n      \"content\": \"Hello World\"\n    },\n    \"relationships\": {\n      \"tags\": {\n        \"data\": [\n          {\n            \"type\": \"tags\",\n            \"id\": \"1\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"type\": \"discussions\",\n    \"id\": \"42\",\n    \"attributes\": {\n      \"title\": \"Lorem Ipsum\",\n      \"slug\": \"42-lorem-ipsum\",\n      \"commentCount\": 1\n    },\n    \"relationships\": {\n      \"posts\": {\n        \"data\": [\n          {\n            \"type\": \"posts\",\n            \"id\": \"58\"\n          }\n        ]\n      },\n      \"user\": {\n        \"data\": {\n          \"type\": \"users\",\n          \"id\": \"1\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Event Listeners with Flarum CLI\nDESCRIPTION: Shows how to use the Flarum CLI to automatically generate event listeners for backend events.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend event-listener\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Extension Imports\nDESCRIPTION: Webpack configuration for enabling imports from other Flarum extensions in frontend code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('flarum-webpack-config')({\n    useExtensions: ['flarum-tags']\n});\n```\n\n----------------------------------------\n\nTITLE: Using withAttr Utility for Form Processing\nDESCRIPTION: Shows how to use the withAttr utility for simplified input handling and custom logic\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/forms.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\nimport withAttr from 'flarum/common/utils/withAttr';\n\nconst value = Stream();\n\n// With a stream\n<input type=\"text\" value={value()} oninput={withAttr('value', value)}></input>\n\n// With any callable\n<input type=\"text\" value={value()} oninput={withAttr('value', (currValue) => {\n  // Some custom logic here\n})}></input>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Migration in PHP\nDESCRIPTION: Example of creating a migration file in Flarum to modify the database schema. This snippet shows the basic structure of a migration with 'up' and 'down' functions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Schema\\Builder;\n\nreturn [\n    'up' => function (Builder $schema) {\n        // up migration\n    },\n    'down' => function (Builder $schema) {\n        // down migration\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Updating JavaScript Import Syntax\nDESCRIPTION: Example showing the new namespace-based import syntax required in Beta 16. Imports should now specify the namespace (common, forum, or admin) when importing Flarum components.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Old style (deprecated)\nimport Component from 'flarum/Component'\n\n// New style\nimport Component from 'flarum/common/Component'\n```\n\n----------------------------------------\n\nTITLE: Listing Discussions API Response\nDESCRIPTION: Example JSON response from the GET /api/discussions endpoint, showing the structure of returned data including discussion attributes, relationships, and included resources.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"links\": {\n    \"first\": \"https://flarum.tld/api/discussions\",\n    \"next\": \"https://flarum.tld/api/discussions?page%5Boffset%5D=20\"\n  },\n  \"data\": [\n    {\n      \"type\": \"discussions\",\n      \"id\": \"234\",\n      \"attributes\": {\n        \"title\": \"Lorem Ipsum\",\n        \"slug\": \"234-lorem-ipsum\",\n        \"commentCount\": 10,\n        \"participantCount\": 3,\n        \"createdAt\": \"2022-01-01T10:20:30+00:00\",\n        \"lastPostedAt\": \"2022-01-05T10:20:30+00:00\",\n        \"lastPostNumber\": 10,\n        \"canReply\": true,\n        \"canRename\": true,\n        \"canDelete\": true,\n        \"canHide\": true,\n        \"isHidden\": true,\n        \"hiddenAt\": \"2022-01-06T10:20:30+00:00\",\n        \"lastReadAt\": \"2022-01-02T10:20:30+00:00\",\n        \"lastReadPostNumber\": 2,\n        \"isApproved\": true,\n        \"canTag\": true,\n        \"isLocked\": false,\n        \"canLock\": true,\n        \"isSticky\": false,\n        \"canSticky\": true,\n        \"canMerge\": true,\n        \"subscription\": null\n      },\n      \"relationships\": {\n        \"user\": {\n          \"data\": {\n            \"type\": \"users\",\n            \"id\": \"1\"\n          }\n        },\n        \"lastPostedUser\": {\n          \"data\": {\n            \"type\": \"users\",\n            \"id\": \"64\"\n          }\n        },\n        \"tags\": {\n          \"data\": [\n            {\n              \"type\": \"tags\",\n              \"id\": \"3\"\n            }\n          ]\n        },\n        \"firstPost\": {\n          \"data\": {\n            \"type\": \"posts\",\n            \"id\": \"668\"\n          }\n        }\n      }\n    },\n    {\n      \"type\": \"discussions\",\n      \"id\": \"234\",\n      \"attributes\": {\n        // [...]\n      },\n      \"relationships\": {\n        // [...]\n      }\n    }\n  ],\n  \"included\": [\n    {\n      \"type\": \"users\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"username\": \"Admin\",\n        \"displayName\": \"Admin\",\n        \"avatarUrl\": null,\n        \"slug\": \"1\"\n      }\n    },\n    {\n      \"type\": \"users\",\n      \"id\": \"64\",\n      \"attributes\": {\n        \"username\": \"Flarum\",\n        \"displayName\": \"Flarum\",\n        \"avatarUrl\": \"https://flarum.tld/assets/avatars/Z4hEncw0ndVqZ8be.png\",\n        \"slug\": \"64\"\n      }\n    },\n    {\n      \"type\": \"tags\",\n      \"id\": \"3\",\n      \"attributes\": {\n        \"name\": \"Welcome\",\n        \"description\": \"Post interesting things here\",\n        \"slug\": \"welcome\",\n        \"color\": \"#888\",\n        \"backgroundUrl\": null,\n        \"backgroundMode\": null,\n        \"icon\": \"fas fa-bullhorn\",\n        \"discussionCount\": 30,\n        \"position\": 1,\n        \"defaultSort\": null,\n        \"isChild\": false,\n        \"isHidden\": false,\n        \"lastPostedAt\": \"2022-01-05T10:20:30+00:00\",\n        \"canStartDiscussion\": true,\n        \"canAddToDiscussion\": true,\n        \"isRestricted\": false\n      }\n    },\n    {\n      \"type\": \"posts\",\n      \"id\": \"668\",\n      \"attributes\": {\n        \"number\": 1,\n        \"createdAt\": \"2022-01-01T10:20:30+00:00\",\n        \"contentType\": \"comment\",\n        \"contentHtml\": \"<p>Hello World</p>\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Flarum CLI to Generate Routes\nDESCRIPTION: This is a command-line snippet that shows how to use the Flarum CLI tool to automatically generate backend routes in a Flarum extension. It streamlines the process of setting up route definitions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend route\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Workflow for Flarum Extension\nDESCRIPTION: YAML configuration for setting up a backend workflow in a Flarum extension. It specifies job types and additional parameters.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/github-actions.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Backend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_backend.yml@main\n    with:\n      # Different types of jobs\n      enable_backend_testing: true\n      enable_phpstan: false\n\n      # Additional parameters\n      backend_directory: .\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Token Changes in Flarum\nDESCRIPTION: The AccessToken API has undergone significant changes in Beta 16. Methods related to token generation now accept token objects instead of user IDs. These adjustments simplify token handling and increase security by scoping token searches to valid tokens. Developers should adapt their authentication processes accordingly to ensure compatibility with future versions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nFlarum\\Http\\AccessToken::generate($userId);  // No longer accepts $lifetime parameter\nFlarum\\Http\\Rememberer::remember(ResponseInterface $response, AccessToken $token);\n```\n\n----------------------------------------\n\nTITLE: Checking Package Updates with Composer\nDESCRIPTION: Command to check for outdated packages directly required in the root composer.json, outputting results in JSON format. Only shows packages marked as semver-safe-update and update-possible.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/internal/extension-manager.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer outdated -D --format json\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Page to Homepage Options in Admin\nDESCRIPTION: Shows how to extend the BasicsPage to add a custom page as a homepage option using the extend utility\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/frontend-pages.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport BasicsPage from 'flarum/common/components/BasicsPage';\n\nexport default function() {\n  extend(BasicsPage.prototype, 'homePageItems', items => {\n    items.add('tags', {\n      path: '/tags',\n      label: app.translator.trans('flarum-tags.admin.basics.tags_label')\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Developer Access Token in Flarum (PHP)\nDESCRIPTION: Illustrates how developers can create non-expiring developer tokens from within a Flarum extension. This method requires a user ID as an argument.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nFlarum\\Http\\DeveloperAccessToken::generate($userId)\n```\n\n----------------------------------------\n\nTITLE: Rendering Notification Component in JSX for Flarum\nDESCRIPTION: This code snippet demonstrates how to create a custom notification component in Flarum's frontend. It extends the base Notification class and implements methods for icon, href, and content rendering.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Notification from 'flarum/forum/components/Notification';\nimport username from 'flarum/common/helpers/username';\n\nexport default class NewPostNotification extends Notification {\n  icon() {\n    return 'fas fa-star';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n    const discussion = notification.subject();\n    const content = notification.content() || {};\n\n    return app.route.discussion(discussion, content.postNumber);\n  }\n\n  content() {\n    return app.translator.trans('flarum-subscriptions.forum.notifications.new_post_text', {user: this.attrs.notification.fromUser()});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum PHPStan Package with Composer\nDESCRIPTION: Command to install the Flarum PHPStan package as a development dependency for static code analysis.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/phpstan:^1.0\n```\n\n----------------------------------------\n\nTITLE: Composer Package Compatibility Check\nDESCRIPTION: Command to check why a specific package version is not compatible with the current setup.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/internal/extension-manager.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer why-not flarum/core 2.0\n```\n\n----------------------------------------\n\nTITLE: Demonstrating String Helper Deprecation in PHP\nDESCRIPTION: Example showing the transition from deprecated global string helpers to class-based alternatives in Laravel/Flarum\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b10.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Deprecated:\nstr_contains($string, $search);\narray_only($array, $keys);\n\n// New usage:\nIlluminate\\Support\\Str::contains($string, $search);\nIlluminate\\Support\\Arr::only($array, $keys);\n```\n\n----------------------------------------\n\nTITLE: Interface Translation Keys in YAML\nDESCRIPTION: This YAML snippet specifies second-level translation keys for various Flarum interfaces, such as admin and forum interfaces. These keys indicate where translations are utilized within the application's structure, assisting in clear categorization of translation entries for both developers and translators.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:       # Translations used by the admin interface.\nforum:       # Translations used by the forum user interface.\nlib:         # Translations used by either of the above.\nviews:       # Translations used outside the normal JS client.\napi:         # Translations used in messages output by the API.\nemail:       # Translations used in emails sent by Flarum.\n```\n\n----------------------------------------\n\nTITLE: Creating a Discussion with Flarum REST API\nDESCRIPTION: Example of how to create a new discussion by sending a POST request to the /api/discussions endpoint with title, content, and tags. Also shows the response structure with the newly created discussion ID.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\":{\n    \"type\": \"discussions\",\n    \"attributes\": {\n      \"title\": \"Lorem Ipsum\",\n      \"content\": \"Hello World\"\n    },\n    \"relationships\": {\n      \"tags\": {\n        \"data\": [\n          {\n            \"type\": \"tags\",\n            \"id\": \"1\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Name in PHP Controllers\nDESCRIPTION: New method to access route name from request object in controllers and middleware that run after ResolveRoute.php\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b15.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$request->getAttribute('routeName')\n```\n\n----------------------------------------\n\nTITLE: CSRF Token Mismatch Error in Flarum API\nDESCRIPTION: Example of a CSRF token mismatch error response when the Authorization header is absent or invalid and Flarum attempts to authenticate through a session cookie.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/rest-api.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"400\",\n      \"code\": \"csrf_token_mismatch\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating PHP Access Token Generation for Flarum Beta 16\nDESCRIPTION: Examples of generating different types of access tokens in Flarum Beta 16. This update introduces specific methods for creating remember and developer access tokens.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// Generate a standard access token\n$token = AccessToken::generate($userId);\n\n// Generate a remember access token\n$rememberToken = RememberAccessToken::generate($userId);\n\n// Generate a developer access token\n$devToken = DeveloperAccessToken::generate($userId);\n```\n\n----------------------------------------\n\nTITLE: Implementing Mailable Notifications in PHP for Flarum\nDESCRIPTION: This example demonstrates how to create a PostMentionedBlueprint class that implements both BlueprintInterface and MailableInterface for sending email notifications. It includes methods for defining email views and subjects.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Mentions\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\MailableInterface;\nuse Flarum\\Post\\Post;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass PostMentionedBlueprint implements BlueprintInterface, MailableInterface\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var Post\n     */\n    public $reply;\n\n    /**\n     * @param Post $post\n     * @param Post $reply\n     */\n    public function __construct(Post $post, Post $reply)\n    {\n        $this->post = $post;\n        $this->reply = $reply;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getFromUser()\n    {\n        return $this->reply->user;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getData()\n    {\n        return ['replyNumber' => (int) $this->reply->number];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailView()\n    {\n        return ['text' => 'flarum-mentions::emails.postMentioned'];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailSubject(TranslatorInterface $translator)\n    {\n        return $translator->trans('flarum-mentions.email.post_mentioned.subject', [\n            '{replier_display_name}' => $this->post->user->display_name,\n            '{title}' => $this->post->discussion->title\n        ]);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getType()\n    {\n        return 'postMentioned';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Database Columns Migration\nDESCRIPTION: Example of adding new columns to an existing table using Flarum's Migration helper with column definitions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addColumns('users', [\n    'email' => ['string', 'length' => 255, 'nullable' => true],\n    'discussion_count' => ['integer', 'unsigned' => true]\n]);\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New Mithril Component Lifecycle in JavaScript\nDESCRIPTION: This snippet demonstrates the differences between Mithril 0.2 and Mithril 2.0 component lifecycle methods. It shows how to migrate from old methods like 'init' and 'config' to new ones like 'oninit', 'oncreate', and 'onbeforeupdate'.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass OldMithrilComponent extends Component {\n  init() {\n    console.log('Code to run when component instance created, but before attached to the DOM.');\n  }\n\n  config(element, isInitialized) {\n    console.log('Code to run on every redraw AND when the element is first attached');\n\n    if (isInitialized) return;\n\n    console.log('Code to execute only once when components are first created and attached to the DOM');\n\n    context.onunload = () => {\n      console.log('Code to run when the component is removed from the DOM');\n    }\n  }\n\n  view() {\n    if (dontRedraw()) return { subtree: 'retain' };\n\n    return <p>Hello World!</p>;\n  }\n}\n\nclass NewMithrilComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    console.log('Code to run when component instance created, but before attached to the DOM.');\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    console.log('Code to run when components are first created and attached to the DOM');\n  }\n\n  onbeforeupdate(vnode, oldVnode) {\n    super.onbeforeupdate(vnode);\n\n    console.log('Code to run BEFORE diffing / redrawing components on every redraw');\n\n    if (dontRedraw()) return false;\n  }\n\n  onupdate(vnode) {\n    console.log('Code to run on every redraw AFTER the DOM is updated.');\n  }\n\n  onbeforeremove(vnode) {\n    return Promise.resolve();\n  }\n\n  onremove(vnode) {\n      console.log('Code to run when the component is removed from the DOM');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Model Attribute Casting\nDESCRIPTION: Demonstrates the new recommended way to cast date attributes in Flarum models, replacing the deprecated dateAttribute method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-1_x.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nModel::cast($attribute, 'datetime')\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend GitHub Actions Workflow\nDESCRIPTION: YAML configuration for setting up frontend workflow in a Flarum extension. This reuses a predefined workflow from the Flarum framework repository with options for code formatting, type checking, and bundlewatch.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Frontend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_frontend.yml@main\n    with:\n      enable_bundlewatch: false\n      enable_prettier: true\n      enable_typescript: false\n\n      frontend_directory: ./js\n      backend_directory: .\n      js_package_manager: yarn\n      main_git_branch: main\n\n    secrets:\n      bundlewatch_github_token: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan for Flarum Extensions\nDESCRIPTION: Command to install the flarum/phpstan package as a development dependency for a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/phpstan:^1.0\n```\n\n----------------------------------------\n\nTITLE: Creating a User with Flarum REST API\nDESCRIPTION: Example of creating a new user by sending a POST request to the /api/users endpoint with username, email, and password attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"attributes\": {\n      \"username\": \"Flarum\",\n      \"email\": \"flarum@example.com\",\n      \"password\": \"correcthorsebatterystaple\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Autoload for Local Extenders in Flarum\nDESCRIPTION: This JSON snippet shows how to modify the composer.json file to enable autoloading of custom classes for local extenders in Flarum. It sets up PSR-4 autoloading for the 'App' namespace in the 'app/' directory.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extenders.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"autoload\": {\n    \"psr-4\": {\n        \"App\\\\\": \"app/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Composer Loading in Mithril 0.2 vs Mithril 2\nDESCRIPTION: Comparison of how to load the composer in both Mithril versions. In Mithril 2, you pass the body class and attributes separately instead of a component instance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n// Mithril 0.2\napp.composer.load(new DiscussionComposer({user: app.session.user}));\n\n// Mithril 2\napp.composer.load(DiscussionComposer, {user: app.session.user})\n```\n\n----------------------------------------\n\nTITLE: PHP Queue Configuration Example\nDESCRIPTION: Default queue driver configuration showing the sync driver implementation for handling background tasks.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b10.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Default queue configuration\n$config['queue'] = [\n    'driver' => 'sync'  // Executes tasks immediately\n];\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration Include\nDESCRIPTION: Nginx server configuration to include Flarum's URL rewriting rules.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/install.md#2025-04-16_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\ninclude /path/to/flarum/.nginx.conf;\n```\n\n----------------------------------------\n\nTITLE: Basic Flarum Command Structure\nDESCRIPTION: Basic command syntax for executing Flarum CLI commands\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/console.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum [comando]\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Specific Commands\nDESCRIPTION: Shows help information for a specified command. The format can be customized using the --format option.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum help [command_name]\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum help --format=xml list\n```\n\n----------------------------------------\n\nTITLE: Tagging and Pushing a Git Release for Flarum Extension\nDESCRIPTION: Commands to tag your Flarum extension with a version number and push both the code and tags to the remote repository. This is a critical step before publishing to Packagist.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/distribution.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v0.1.0\ngit push && git push --tags\n```\n\n----------------------------------------\n\nTITLE: Email Translation Suffixes in YAML\nDESCRIPTION: Defines suffix conventions specifically for email-related translations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n_body:          # Utilizzato per il contenuto del messaggio di posta elettronica.\n_subject:       # Utilizzato per la riga dell'oggetto del messaggio di posta elettronica.\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Flarum Admin App for Testing in TypeScript\nDESCRIPTION: This code snippet demonstrates how to bootstrap the Flarum admin app for testing. It uses the bootstrapAdmin function from the Flarum jest-config package within a test suite setup.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/testing.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport bootstrapAdmin from '@flarum/jest-config/src/boostrap/admin';\n\ndescribe('Admin tests', () => {\n  beforeAll(() => bootstrapAdmin());\n\n  it('should do something', () => {\n    // your test code here\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Access Token Request/Response\nDESCRIPTION: Example of creating an access token via the /api/token endpoint using user credentials. Shows both the POST request payload and successful response format.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"identification\": \"Toby\",\n    \"password\": \"pass7word\"\n}\n\n{\n    \"token\": \"YACub2KLfe8mfmHPcUKtt6t2SMJOGPXnZbqhc3nX\",\n    \"userId\": \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations\nDESCRIPTION: Executes all pending migrations. Used when an extension that modifies the database is added or updated.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum migrate\n```\n\n----------------------------------------\n\nTITLE: Running Frontend Development Watch Mode for Core\nDESCRIPTION: Commands for watching JavaScript files for changes during core development.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/contributing.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd framework/core/js\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache and Running Analysis\nDESCRIPTION: Commands to clear PHPStan cache and run fresh analysis.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer clear-cache:phpstan && composer analyse:phpstan\n```\n\n----------------------------------------\n\nTITLE: Installing the Extension via Composer\nDESCRIPTION: This command shows how users can install your Flarum extension via Composer. Users need to execute the require command with the appropriate vendor/package name to add the extension to their Flarum installation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/distribution.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require vendor/package\n```\n\n----------------------------------------\n\nTITLE: PHPStan Configuration Setup\nDESCRIPTION: Basic PHPStan configuration for Flarum extensions, including path definitions and analysis parameters.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_2\n\nLANGUAGE: neon\nCODE:\n```\nincludes:\n  - vendor/flarum/phpstan/extension.neon\n\nparameters:\n  # The level will be increased in Flarum 2.0\n  level: 5\n  paths:\n    - src\n    - extend.php\n  excludePaths:\n    - *.blade.php\n  checkMissingIterableValueType: false\n  databaseMigrationsPath: ['migrations']\n```\n\n----------------------------------------\n\nTITLE: API Controller Eager Loading Configuration in PHP\nDESCRIPTION: Example of using the new ApiController extender to configure eager loading of relationships to prevent N+1 query issues.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    (new Extend\\ApiController(FlarumController\\ListDiscussionsController::class))\n        ->addInclude(['tags', 'tags.state', 'tags.parent'])\n        ->load('tags'),\n];\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis on a Flarum Extension\nDESCRIPTION: Command to execute static code analysis on a Flarum extension using the configured PHPStan setup.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer analyse:phpstan\n```\n\n----------------------------------------\n\nTITLE: Create Discussion Response\nDESCRIPTION: Example response from creating a discussion showing the created discussion ID, attributes and relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"type\": \"discussions\",\n    \"id\": \"42\",\n    \"attributes\": {\n      \"title\": \"Lorem Ipsum\",\n      \"slug\": \"42-lorem-ipsum\",\n      \"commentCount\": 1\n    },\n    \"relationships\": {\n      \"posts\": {\n        \"data\": [\n          {\n            \"type\": \"posts\",\n            \"id\": \"58\"\n          }\n        ]\n      },\n      \"user\": {\n        \"data\": {\n          \"type\": \"users\",\n          \"id\": \"1\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting File Permissions in Linux for Flarum\nDESCRIPTION: Commands to set proper file permissions for Flarum installation directories. This includes changing directory permissions and ownership to ensure Flarum can write to necessary folders.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/install.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchmod 775 -R /path/to/directory\n```\n\nLANGUAGE: bash\nCODE:\n```\nchown -R www-data:www-data /path/to/directory\n```\n\nLANGUAGE: bash\nCODE:\n```\nchcon -R -t httpd_sys_rw_content_t /path/to/directory\n```\n\n----------------------------------------\n\nTITLE: Declaring a Flarum Language Pack\nDESCRIPTION: This snippet demonstrates how to declare a Flarum language pack using the `LanguagePack` extender.  The language pack should reside in the `locale` folder. This extender doesn't have any setters; instantiation is sufficient.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/language-packs.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn new Flarum\\Extend\\LanguagePack();\n```\n\n----------------------------------------\n\nTITLE: Implementing LoadActorVoteRelationship in Flarum 1.x\nDESCRIPTION: This class provides methods for mutating and summing vote relationships in Flarum 1.x, used in conjunction with the API controller extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// src/LoadActorVoteRelationship.php\nclass LoadActorVoteRelationship\n{\n    public static function mutateRelation(HasMany $query, ServerRequestInterface $request): HasMany\n    {\n        $actor = RequestUtil::getActor($request);\n\n        return $query\n            // So that we can tell if the current user has liked the post.\n            ->where('user_id', $actor->id);\n    }\n\n    public static function sumRelation($controller, $data): void\n    {\n        $loadable = null;\n\n        if ($data instanceof Discussion) {\n            $loadable = $data->newCollection($data->posts)->filter(function ($post) {\n                return $post instanceof Post;\n            });\n        } elseif ($data instanceof Collection) {\n            $loadable = (new Post())->newCollection($data->map(function ($model) {\n                return $model instanceof Discussion ? ($model->mostRelevantPost ?? $model->firstPost) : $model;\n            })->filter());\n        } elseif ($data instanceof Post) {\n            $loadable = $data->newCollection([$data]);\n        }\n\n        if ($loadable && $loadable instanceof Collection) {\n            $loadable->loadSum('actualvotes', 'value');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Composer in Mithril with Attributes\nDESCRIPTION: This snippet shows the updated method for loading the Composer, where a body class and its attributes are provided instead of an instance. This change is part of the effort to avoid storing component instances.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\napp.composer.load(DiscussionComposer, {user: app.session.user});\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events in Flarum (PHP)\nDESCRIPTION: Shows how to inject the event dispatcher and use it to dispatch a custom event in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Post\\Event\\Deleted;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\n\nclass SomeClass\n{\n    /**\n      * @var Dispatcher\n      */\n    protected $events;\n\n    /**\n      * @param Dispatcher $events\n      */\n    public function __construct(Dispatcher $events)\n    {\n        $this->events = $events;\n    }\n\n    public function someMethod()\n    {\n        // Lógica\n        $this->events->dispatch(\n        new Deleted($somePost, $someActor)\n        );\n        // Más lógica\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Watching JavaScript Files for Changes in Flarum Core\nDESCRIPTION: Command to watch JavaScript files for changes during development of Flarum core.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/contributing.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd framework/core/js\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Executing Composer Update Command for Global Flarum Updates\nDESCRIPTION: This command updates all packages in a Flarum installation, including dependencies. It's used for global Flarum updates.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/internal/package-manager.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncommand update --prefer-dist --no-dev -a --with-all-dependencies\n```\n\n----------------------------------------\n\nTITLE: Checking for Optional Extension in Backend PHP\nDESCRIPTION: PHP class example showing how to inject and use the ExtensionManager to check if an optional extension is enabled in the Flarum backend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extension\\ExtensionManager;\n\nclass SomeClass {\n    public function __construct(ExtensionManager $extensions)\n    {\n        $this->extensions = $extensions;\n    }\n\n    public function someMethod()\n    {\n        if ($this->extensions->isEnabled('some-extension-id')) {\n            // fai qualcosa.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Binding in Flarum Forms\nDESCRIPTION: Illustrates the difference between standard input handling and Flarum's bidi attribute for simplified form data binding\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/forms.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\n\nconst value = Stream();\n\n// Without bidi\n<input type=\"text\" value={value()} oninput={e => value(e.target.value)}></input>\n\n// With bidi\n<input type=\"text\" bidi={value}></input>\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Integration Test Configuration\nDESCRIPTION: XML configuration file for PHPUnit integration tests with specific settings for Flarum testing environment.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"true\"\n         stopOnFailure=\"false\">\n\n    <testsuites>\n        <testsuite name=\"Flarum Integration Tests\">\n            <directory suffix=\"Test.php\">./integration</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: API Error Response Examples\nDESCRIPTION: Examples of error responses following the JSON:API error specification, including CSRF token mismatch and validation errors.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"400\",\n      \"code\": \"csrf_token_mismatch\"\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"422\",\n      \"code\": \"validation_error\",\n      \"detail\": \"The username has already been taken.\",\n      \"source\":{\n        \"pointer\":\"\\/data\\/attributes\\/username\"\n      }\n    },\n    {\n      \"status\": \"422\",\n      \"code\": \"validation_error\",\n      \"detail\": \"The email has already been taken.\",\n      \"source\": {\n        \"pointer\":\"\\/data\\/attributes\\/email\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum CLI v3 for Automated Upgrades\nDESCRIPTION: Command to install version 3 of the Flarum CLI globally via npm. This version is specifically compatible with Flarum 2.x.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @flarum/cli@3\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPStan for Flarum Extensions\nDESCRIPTION: Sample PHPStan configuration file (phpstan.neon) with Flarum-specific settings including analysis level, paths to analyze, and database migrations path.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_2\n\nLANGUAGE: neon\nCODE:\n```\nincludes:\n  - vendor/flarum/phpstan/extension.neon\n\nparameters:\n  # The level will be increased in Flarum 2.0\n  level: 5\n  paths:\n    - src\n    - extend.php\n  excludePaths:\n    - *.blade.php\n  checkMissingIterableValueType: false\n  databaseMigrationsPath: ['migrations']\n```\n\n----------------------------------------\n\nTITLE: Generating Developer Access Token\nDESCRIPTION: Creates a non-expiring developer access token for a specific user ID\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nFlarum\\Http\\DeveloperAccessToken::generate($userId)\n```\n\n----------------------------------------\n\nTITLE: Publishing Assets\nDESCRIPTION: Publishes assets from core and extensions, useful after switching filesystem drivers or if assets are corrupted.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum assets:publish\n```\n\n----------------------------------------\n\nTITLE: Finding Valid Access Token in Flarum (PHP)\nDESCRIPTION: Shows how to retrieve a valid token instance in Flarum using the AccessToken class. This method takes a token string as an argument and returns the corresponding token instance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nFlarum\\Http\\AccessToken::findValid($tokenString)\n```\n\n----------------------------------------\n\nTITLE: Extending Flarum Models with Attributes\nDESCRIPTION: Shows how to use the Model extender to add default values, casts, and other attributes to existing Flarum models.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\User\\User;\n\nreturn [\n    (new Extend\\Model(User::class))\n        ->default('is_alive', true)\n        ->cast('suspended_until', 'datetime')\n        ->cast('is_admin', 'boolean')\n];\n```\n\n----------------------------------------\n\nTITLE: TypeScript Test Configuration for Flarum Extensions\nDESCRIPTION: Setting up TypeScript configuration for running tests in Flarum frontend extensions\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"include\": [\"tests/**/*\"],\n  \"files\": [\"../../../node_modules/@flarum/jest-config/shims.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Models in Typescript\nDESCRIPTION: This code snippet demonstrates how to add attributes and relationships to existing Flarum models using the `Model` extender. It shows how to use the `attribute`, `hasOne`, and `hasMany` methods to extend the model's schema.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n  new Extend.Model(Discussion)\n    .attribute<string>('slug')\n    .hasOne<User>('user')\n    .hasMany<Post>('posts')\n```\n\n----------------------------------------\n\nTITLE: JavaScript String Utils\nDESCRIPTION: Reference to the string utility module for slug generation in JavaScript.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b12.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nflarum/utils/string\n```\n\n----------------------------------------\n\nTITLE: Defining Key Suffixes in YAML for UI Elements\nDESCRIPTION: This snippet illustrates the naming conventions for suffixes used with translation keys that relate to user interface elements in Flarum. The suffixes indicate the type of UI component, such as buttons, links, headings, and labels. Proper usage ensures clarity for developers and localizers.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/i18n.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n_button:        # Used for buttons (including dropdown menu items).\n_link:          # Used for links that are not shown graphically as buttons.\n_heading:       # Used for headings in tables and lists.\n_label:         # Used for the names of data fields, checkbox settings, etc.\n_placeholder:   # Used for placeholder text displayed in fields.\n```\n\n----------------------------------------\n\nTITLE: Tagging Git Release for Flarum Extension\nDESCRIPTION: Commands to create and push a version tag for a Flarum extension release. This creates a local tag v0.1.0 and pushes both the code and tags to the remote repository.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/distribution.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v0.1.0\ngit push && git push --tags\n```\n\n----------------------------------------\n\nTITLE: Using Streams for Reactive Data in Flarum\nDESCRIPTION: This snippet shows how to use Flarum's Stream utility, which is a wrapper for Mithril's Stream, to create reactive data structures. It demonstrates basic usage of Stream for form data management.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/forms.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\n\n\nconst value = Stream(\"hello!\");\nvalue() === \"hello!\"; // true\nvalue(\"world!\");\nvalue() === \"world!\"; // true\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on RHEL-based Systems\nDESCRIPTION: Commands to update package lists and install cron on RHEL-based Linux distributions like CentOS, AlmaLinux, and Rocky Linux.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/scheduler.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf update\nsudo dnf install crontabs\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Notification Driver in PHP for Flarum\nDESCRIPTION: This code snippet demonstrates how to register a custom notification driver (Pusher) using the Notification extender in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend\nuse Flarum\\Pusher\\PusherNotificationDriver;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->driver('pusher', PusherNotificationDriver::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Flysystem Adapter Usage in PHP\nDESCRIPTION: Example of updating Flysystem adapter instantiation for version 3 compatibility.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0.md#2025-04-16_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// Before\nnew FilesystemAdapter(new Filesystem(new LocalAdapter($path)));\n\n// After\n$adapter = new LocalFilesystemAdapter($path);\nnew FilesystemAdapter(new Filesystem($adapter), $adapter);\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan via Composer\nDESCRIPTION: Command to install the Flarum PHPStan package as a development dependency\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/phpstan:^1.0\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan via Composer\nDESCRIPTION: Command to install the Flarum PHPStan package as a development dependency.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/phpstan:^1.0\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum Extension via Composer\nDESCRIPTION: Command to install a published Flarum extension using Composer package manager. Replace vendor/package with the actual package name from Packagist.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/distribution.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require vendor/package\n```\n\n----------------------------------------\n\nTITLE: Generating Developer Access Token\nDESCRIPTION: Method to generate a non-expiring developer access token for a specific user ID.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nFlarum\\Http\\DeveloperAccessToken::generate($userId)\n```\n\n----------------------------------------\n\nTITLE: Installing Extension via Composer\nDESCRIPTION: Composer command to install a Flarum extension from Packagist. Users can use this command to add the extension to their Flarum installation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/distribution.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require vendor/package\n```\n\n----------------------------------------\n\nTITLE: Executing Patch-Minor Flarum Updates Bash\nDESCRIPTION: This operation changes package versions to a wildcard and executes `composer update`. It requires Composer, with permissions to modify `composer.json`. Outputs result of updated or unchanged packages.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/internal/package-manager.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update --prefer-dist --no-dev -a --with-all-dependencies\n```\n\n----------------------------------------\n\nTITLE: Listing Scheduled Commands\nDESCRIPTION: Returns a list of scheduled commands registered by Flarum and its extensions. Helpful for verifying that extension commands are properly registered.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum schedule:list\n```\n\n----------------------------------------\n\nTITLE: Creating a Cron Job for Flarum Scheduler\nDESCRIPTION: This snippet shows how to edit the cron table to create a new cron job for the Flarum scheduler that runs every minute.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/scheduler.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncrontab -e\n```\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * cd /path-to-your-project && php flarum schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events in PHP\nDESCRIPTION: Illustrates how to inject the event dispatcher and use it to dispatch custom events in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Post\\Event\\Deleted;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\n\nclass SomeClass\n{\n    /**\n      * @var Dispatcher\n      */\n    protected $events;\n\n    /**\n      * @param Dispatcher $events\n      */\n    public function __construct(Dispatcher $events)\n    {\n        $this->events = $events;\n    }\n\n    public function someMethod()\n    {\n        // Logic\n        $this->events->dispatch(\n            new Deleted($somePost, $someActor)\n        );\n        // More Logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Model Attribute Type Definition\nDESCRIPTION: Example of defining attribute types for PHPStan analysis using Flarum's Model extension\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Model(User::class))\n    ->cast('is_cool', 'bool'),\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Cron Job for Flarum Scheduled Tasks\nDESCRIPTION: Cron job configuration to run Flarum's scheduled tasks. This should be added to the server's crontab to execute every minute, ensuring regular execution of tasks like database cleanups and sitemap generation.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/console.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * cd /path-to-your-flarum-install && php flarum schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running Flarum Docs Locally with Yarn\nDESCRIPTION: Commands for installing dependencies and starting a local development server for the Flarum documentation site. Uses Yarn package manager to install all required dependencies and launches Docusaurus in development mode for local testing.\nSOURCE: https://github.com/flarum/docs/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn run start\n```\n\n----------------------------------------\n\nTITLE: Registering Boolean Setting in Flarum Admin\nDESCRIPTION: Demonstrates how to add a boolean setting to the Flarum admin panel using the Admin extender.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/admin.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\nimport app from 'flarum/admin/app';\n\nreturn [\n  new Extend.Admin()\n    .setting(\n      () => ({\n        setting: 'acme-interstellar.coordinates',\n        label: app.translator.trans('acme-interstellar.admin.coordinates_label', {}, true),\n        help: app.translator.trans('acme-interstellar.admin.coordinates_help', {}, true),\n        type: 'boolean',\n      }),\n      30\n    )\n];\n```\n\n----------------------------------------\n\nTITLE: Generating Modal Component with Flarum CLI (Bash)\nDESCRIPTION: Command line instruction for automatically generating a modal component using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/interactive-components.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make frontend modal\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration Include\nDESCRIPTION: Nginx server block configuration to include Flarum's nginx configuration file.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/install.md#2025-04-16_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\ninclude /path/to/flarum/.nginx.conf;\n```\n\n----------------------------------------\n\nTITLE: Sample Flarum composer.json Configuration\nDESCRIPTION: An annotated example of a composer.json file for a Flarum installation, showing metadata, package requirements, and configuration settings. Used to manage dependencies and extensions for a Flarum forum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/composer.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"flarum/flarum\",\n    \"description\": \"Delightfully simple forum software.\",\n    \"type\": \"project\",\n    \"keywords\": [\n        \"forum\",\n        \"discussion\"\n    ],\n    \"homepage\": \"https://flarum.org/\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Flarum\",\n            \"email\": \"info@flarum.org\",\n            \"homepage\": \"https://flarum.org/team\"\n        }\n    ],\n    \"support\": {\n        \"issues\": \"https://github.com/flarum/core/issues\",\n        \"source\": \"https://github.com/flarum/flarum\",\n        \"docs\": \"https://flarum.org/docs/\"\n    },\n    \"require\": {\n        \"flarum/core\": \"^1.0\",\n        \"flarum/approval\": \"*\",\n        \"flarum/bbcode\": \"*\",\n        \"flarum/emoji\": \"*\",\n        \"flarum/lang-english\": \"*\",\n        \"flarum/flags\": \"*\",\n        \"flarum/likes\": \"*\",\n        \"flarum/lock\": \"*\",\n        \"flarum/markdown\": \"*\",\n        \"flarum/mentions\": \"*\",\n        \"flarum/nicknames\": \"*\",\n        \"flarum/pusher\": \"*\",\n        \"flarum/statistics\": \"*\",\n        \"flarum/sticky\": \"*\",\n        \"flarum/subscriptions\": \"*\",\n        \"flarum/suspend\": \"*\",\n        \"flarum/tags\": \"*\"\n    },\n    \"config\": {\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true\n    },\n    \"prefer-stable\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan for Flarum Extensions using Composer\nDESCRIPTION: Command to install the flarum/phpstan package as a development dependency for a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/phpstan:^1.0\n```\n\n----------------------------------------\n\nTITLE: Implementing File Deletion Controller in PHP\nDESCRIPTION: Example implementation of a controller to delete logo files using Flarum's filesystem interface. Demonstrates dependency injection of filesystem factory and interaction with storage disks.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/filesystem.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Api\\Controller;\n\nuse Flarum\\Http\\RequestUtil;\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Illuminate\\Contracts\\Filesystem\\Factory;\nuse Illuminate\\Contracts\\Filesystem\\Filesystem;\nuse Laminas\\Diactoros\\Response\\EmptyResponse;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nclass DeleteLogoController extends AbstractDeleteController\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    /**\n     * @var Filesystem\n     */\n    protected $uploadDir;\n\n    /**\n     * @param SettingsRepositoryInterface $settings\n     * @param Factory $filesystemFactory\n     */\n    public function __construct(SettingsRepositoryInterface $settings, Factory $filesystemFactory)\n    {\n        $this->settings = $settings;\n        $this->uploadDir = $filesystemFactory->disk('flarum-assets');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function delete(ServerRequestInterface $request)\n    {\n        RequestUtil::getActor($request)->assertAdmin();\n\n        $path = $this->settings->get('logo_path');\n\n        $this->settings->set('logo_path', null);\n\n        if ($this->uploadDir->exists($path)) {\n            $this->uploadDir->delete($path);\n        }\n\n        return new EmptyResponse(204);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Response from Creating a Discussion in Flarum's REST API\nDESCRIPTION: Example response from the POST /api/discussions endpoint showing the newly created discussion with its ID and related resources. It includes the first post and its HTML content.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"type\": \"discussions\",\n    \"id\": \"42\",\n    \"attributes\": {\n      \"title\": \"Lorem Ipsum\",\n      \"slug\": \"42-lorem-ipsum\",\n      \"commentCount\": 1\n      // [...] other attributes\n    },\n    \"relationships\": {\n      \"posts\": {\n        \"data\": [\n          {\n            \"type\": \"posts\",\n            \"id\": \"58\"\n          }\n        ]\n      },\n      \"user\": {\n        \"data\": {\n          \"type\": \"users\",\n          \"id\": \"1\"\n        }\n      },\n      // [...] other relationships\n    }\n  },\n  \"included\":[\n    {\n      \"type\": \"posts\",\n      \"id\": \"38\",\n      \"attributes\": {\n        \"number\": 1,\n        \"contentType\": \"comment\",\n        \"contentHtml\": \"\\u003Cp\\u003EHello World\\u003C\\/p\\u003E\"\n        // [...] other attributes\n      }\n    }\n    // [...] other includes\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Jest Config (Bash)\nDESCRIPTION: This command installs the `@flarum/jest-config` package as a development dependency using `yarn`. This package provides pre-configured Jest settings for Flarum extensions, simplifying the setup process.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/testing.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add --dev @flarum/jest-config\n```\n\n----------------------------------------\n\nTITLE: Generate Policy Using Flarum CLI\nDESCRIPTION: Command for automatically generating policies using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/authorization.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend policy\n```\n\n----------------------------------------\n\nTITLE: Backend Workflow Configuration for Flarum Extensions\nDESCRIPTION: YAML configuration for setting up backend testing workflow. Defines job parameters for PHPUnit tests and PHPStan analysis using Flarum's reusable workflow.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/github-actions.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Backend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_backend.yml@main\n    with:\n      # Different types of jobs\n      enable_backend_testing: true\n      enable_phpstan: false\n\n      # Additional parameters\n      backend_directory: .\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Ownership in Linux\nDESCRIPTION: Command to recursively change ownership of Flarum directories to web server user and group\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/install.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchown -R www-data:www-data /path/to/directory\n```\n\n----------------------------------------\n\nTITLE: Running Frontend Development Mode for Flarum Extensions\nDESCRIPTION: Example showing how to run the development watcher for a Flarum extension (in this case, the Tags extension), which recompiles JavaScript files when changes are detected.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/contributing.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd extensions/tags/js\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Closure Extender Example (Deprecated)\nDESCRIPTION: An example of a deprecated closure extender that subscribes event listeners. This approach is no longer supported in Flarum 1.0.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\FilterDiscussionListByTags::class);\n        $events->subscribe(Listener\\FilterPostsQueryByTag::class);\n        $events->subscribe(Listener\\UpdateTagMetadata::class);\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Passing Attributes in Mithril Components\nDESCRIPTION: This snippet illustrates the recommended method of passing data from a parent to a child component using attrs instead of storing component instances.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass ChildComponent extends Component {\n  view() {\n    return <p>{this.attrs.counter}</p>;\n  }\n}\n\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.counter += 1}></button>\n        <ChildComponent counter={this.counter}></ChildComponent>\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Backend Translation Calls\nDESCRIPTION: Example of migrating from transChoice to trans method in backend PHP code, removing the need for curly brace wrapping of translation keys\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$translator->transChoice('some-translation', $guestCount, ['{host}' => $hostName]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$translator->trans('some-translation', ['host' => $hostName, 'guestCount' => $guestCount]);\n```\n\n----------------------------------------\n\nTITLE: Correct Pattern Using Attrs in Mithril 2\nDESCRIPTION: The recommended pattern for Mithril 2 where data is passed to child components via attributes rather than storing component instances. This aligns with Mithril's redrawing algorithms.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nclass ChildComponent extends Component {\n  view() {\n    return <p>{this.attrs.counter}</p>;\n  }\n}\n\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.counter += 1}></button>\n        <ChildComponent counter={this.counter}></ChildComponent>\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Investigating Extension Compatibility Command\nDESCRIPTION: Executes a Composer command to investigate why a specific version of flarum/core cannot be installed, useful for debugging extension compatibility issues.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/internal/package-manager.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncomposer why-not flarum/core 2.0\n```\n\n----------------------------------------\n\nTITLE: Modifying Site Path in PHP\nDESCRIPTION: This PHP code snippet is from the 'index.php' file, demonstrating how to require the 'site.php' configuration file. It is part of the setup process when customizing directory paths for a Flarum installation.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/install.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$site = require './site.php';\n```\n\n----------------------------------------\n\nTITLE: Registering Model Visibility Scopers in PHP\nDESCRIPTION: Example of registering custom visibility scopers using Flarum's extender system. Shows how to register both specific ability scopers and global scopers.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\Tags\\Tag;\nuse YourNamespace\\Access;\n\nreturn [\n  // Other extenders\n\n  // 'view' is optional here, since that's the default value for the ability argument.\n  // However, if we were applying this to a different ability, such as `viewPrivate`,\n  // would need to explicitly specify that.\n  (new Extend\\ModelVisibility(Tag::class))\n    ->scope(Access\\ScopeTagVisibility::class, 'view'),\n\n  (new Extend\\ModelVisibility(Discussion::class))\n    ->scopeAll(Access\\ScopeDiscussionVisibilityForAbility::class),\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Comparing Object Exports in TypeScript Modules\nDESCRIPTION: Shows how directly exporting an object literal prevents registry inclusion, while assigning to a named constant first allows proper registry integration.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/registry.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Will not be added to the registry\nimport Model from './Model';\nimport PostTypes from './PostTypes';\nimport Routes from './Routes';\nimport Store from './Store';\n\nexport default {\n  Model,\n  PostTypes,\n  Routes,\n  Store,\n};\n\n// Will be added\nimport Model from './Model';\nimport PostTypes from './PostTypes';\nimport Routes from './Routes';\nimport Store from './Store';\n\nconst extenders = {\n  Model,\n  PostTypes,\n  Routes,\n  Store,\n};\n\nexport default extenders;\n```\n\n----------------------------------------\n\nTITLE: Accessing Cached API Resources in JavaScript\nDESCRIPTION: Shows how to access resources that have already been loaded into the store cache without making new API requests, using the all and getById methods to retrieve collections or individual resources.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussions = app.store.all('discussions');\nconst discussion = app.store.getById('discussions', 123);\n```\n\n----------------------------------------\n\nTITLE: Running Scheduled Tasks\nDESCRIPTION: Executes scheduled tasks created by extensions, such as database cleanup or scheduled drafts publishing. Should be configured as a cron job rather than run manually.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum schedule:run\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Slugger in PHP for Flarum Model Slugging\nDESCRIPTION: This code snippet shows how to register a custom slugger for a specific model in Flarum using the SlugManager in the boot method of an extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/slugging.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Http\\SlugManager;\n\nreturn [\n    (new Extend\\Slugdriver(SlugManager::class))\n        ->withSlugDriver('yourModel', CustomSlugger::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Generating Developer Access Token in Flarum (PHP)\nDESCRIPTION: Illustrates how developers can create non-expiring developer tokens from within a Flarum extension. This method generates a new token for the specified user ID.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nFlarum\\Http\\DeveloperAccessToken::generate($userId)\n```\n\n----------------------------------------\n\nTITLE: Introducing Preload Extender in Flarum Backend\nDESCRIPTION: A new Preload extender has been added to Flarum for preloading custom frontend assets. This feature allows developers to optimize the loading of their custom assets.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-1_x.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Flarum now comes with a [Preload extender](https://github.com/flarum/core/pull/3057) for preloading any custom frontend assets.\n```\n\n----------------------------------------\n\nTITLE: Database Column Naming Conventions\nDESCRIPTION: Standardized naming patterns for database columns based on data types and relationships. Includes conventions for datetime fields, counts, foreign keys, and boolean fields.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/contributing.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n{verbed}_at          // for DATETIME/TIMESTAMP (e.g. created_at)\n{verbed}_until       // for DATETIME/TIMESTAMP (e.g. suspended_until)\n{noun}_count        // for INT counts (e.g. comment_count)\n{verbed}_{entity}_id // for foreign keys (e.g. hidden_user_id)\nuser_id            // for primary relationships\nis_{adjective}      // for BOOL (e.g. is_locked)\n```\n\n----------------------------------------\n\nTITLE: PHP Namespace Change - Zend to Laminas\nDESCRIPTION: Migration from deprecated Zend namespace to new Laminas namespace, scheduled for removal in beta.13.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b12.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Old (Deprecated)\nZend\\...\n\n// New\nLaminas\\...\n```\n\n----------------------------------------\n\nTITLE: Implementing Mailable Post Mention Notification in PHP\nDESCRIPTION: Complete implementation of a mailable notification blueprint for post mentions, including email view and subject handling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Mentions\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\MailableInterface;\nuse Flarum\\Post\\Post;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass PostMentionedBlueprint implements BlueprintInterface, MailableInterface\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var Post\n     */\n    public $reply;\n\n    /**\n     * @param Post $post\n     * @param Post $reply\n     */\n    public function __construct(Post $post, Post $reply)\n    {\n        $this->post = $post;\n        $this->reply = $reply;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getFromUser()\n    {\n        return $this->reply->user;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getData()\n    {\n        return ['replyNumber' => (int) $this->reply->number];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailView()\n    {\n        return ['text' => 'flarum-mentions::emails.postMentioned'];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailSubject(TranslatorInterface $translator)\n    {\n        return $translator->trans('flarum-mentions.email.post_mentioned.subject', [\n            '{replier_display_name}' => $this->post->user->display_name,\n            '{title}' => $this->post->discussion->title\n        ]);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getType()\n    {\n        return 'postMentioned';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Sort Columns to API Resources in PHP\nDESCRIPTION: Shows how to add sortable columns to a Flarum API resource using the sorts method.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Resource;\nuse Flarum\\Api\\Sort\\SortColumn;\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\ApiResource(Resource\\UserResource::class))\n        ->sorts(fn () => [\n            SortColumn::make('createdAt'),\n        ]),\n];\n\n```\n\n----------------------------------------\n\nTITLE: Testing Environment Setup Script\nDESCRIPTION: PHP script to initialize the testing database and file structure for Flarum tests\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Testing\\integration\\Setup\\SetupScript;\n\nrequire __DIR__.'/../../vendor/autoload.php';\n\n$setup = new SetupScript();\n\n$setup->run();\n```\n\n----------------------------------------\n\nTITLE: Installing Extension Manager via Composer\nDESCRIPTION: Command to install the Flarum extension manager package using Composer package manager\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extensions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require flarum/extension-manager:\"*\"\n```\n\n----------------------------------------\n\nTITLE: Accessing i18n Namespace in YAML\nDESCRIPTION: Shows the format for accessing translation keys in YAML files based on the i18n namespace standard.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b13.md#2025-04-16_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nvendor-name:\n  extension-name:\n    key: value\n```\n\n----------------------------------------\n\nTITLE: Specifying Email-Specific Translation Key Suffixes in YAML\nDESCRIPTION: This code block shows the suffixes used specifically for email-related translations in Flarum. It includes suffixes for email body and subject line.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n_body:          # Used for the content of the email message.\n_subject:       # Used for the subject line of the email message.\n```\n\n----------------------------------------\n\nTITLE: Declaring a Language Pack in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to declare a language pack extension for Flarum using the LanguagePack extender. It's a simple instantiation with no additional configuration required.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/language-packs.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn new Flarum\\Extend\\LanguagePack();\n```\n\n----------------------------------------\n\nTITLE: Generating Routes with Flarum CLI\nDESCRIPTION: Command line instruction for automatically generating backend routes using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend route\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Pack in composer.json\nDESCRIPTION: JSON configuration required in composer.json to specify language pack details including language code and title.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/language-packs.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"flarum-locale\": {\n  \"code\": \"en\",\n  \"title\": \"English\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mailable Notifications in Flarum PHP\nDESCRIPTION: Demonstrates the implementation of mailable notifications by augmenting a notification blueprint with the MailableInterface. It details methods for setting up email views and subjects, with translation support enabled for email notification strings.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace Flarum\\Mentions\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\MailableInterface;\nuse Flarum\\Post\\Post;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass PostMentionedBlueprint implements BlueprintInterface, MailableInterface\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var Post\n     */\n    public $reply;\n\n    /**\n     * @param Post $post\n     * @param Post $reply\n     */\n    public function __construct(Post $post, Post $reply)\n    {\n        $this->post = $post;\n        $this->reply = $reply;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getFromUser()\n    {\n        return $this->reply->user;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getData()\n    {\n        return ['replyNumber' => (int) $this->reply->number];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailView()\n    {\n        return ['text' => 'flarum-mentions::emails.postMentioned'];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailSubject(TranslatorInterface $translator)\n    {\n        return $translator->trans('flarum-mentions.email.post_mentioned.subject', [\n            '{replier_display_name}' => $this->post->user->display_name,\n            '{title}' => $this->post->discussion->title\n        ]);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getType()\n    {\n        return 'postMentioned';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Translation Key Format for Flarum\nDESCRIPTION: Refers to a standard key format for naming translation keys in Flarum to ensure descriptive and consistent naming across the project.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/contributing.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Translations\n\nWe use a [standard key format](./extend/i18n.md#appendix-a-standard-key-format) to name translation keys descriptively and consistently.\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Browser Scroll Restoration in JavaScript\nDESCRIPTION: Shows how to disable automatic browser scroll restoration for specific pages in the frontend JavaScript code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b15.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Note: Actual code not provided in the original text.\n// Refer to the frontend page documentation for implementation details.\n```\n\n----------------------------------------\n\nTITLE: Understanding the composer.json Structure in Flarum\nDESCRIPTION: An annotated example of a composer.json file from flarum/flarum, explaining the metadata, package requirements, configuration options, and version constraints that control Flarum's dependencies.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/composer.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // This following section is mostly just metadata about the package.\n    // For forum admins, this doesn't really matter.\n    \"name\": \"flarum/flarum\",\n    \"description\": \"Delightfully simple forum software.\",\n    \"type\": \"project\",\n    \"keywords\": [\n        \"forum\",\n        \"discussion\"\n    ],\n    \"homepage\": \"https://flarum.org/\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Flarum\",\n            \"email\": \"info@flarum.org\",\n            \"homepage\": \"https://flarum.org/team\"\n        }\n    ],\n    \"support\": {\n        \"issues\": \"https://github.com/flarum/core/issues\",\n        \"source\": \"https://github.com/flarum/flarum\",\n        \"docs\": \"https://flarum.org/docs/\"\n    },\n    // End of metadata\n\n    // This next section is the one we care about the most.\n    // It's a list of packages we want, and the versions for each.\n    // We'll discuss this shortly.\n    \"require\": {\n        \"flarum/core\": \"^1.0\",\n        \"flarum/approval\": \"*\",\n        \"flarum/bbcode\": \"*\",\n        \"flarum/emoji\": \"*\",\n        \"flarum/lang-english\": \"*\",\n        \"flarum/flags\": \"*\",\n        \"flarum/likes\": \"*\",\n        \"flarum/lock\": \"*\",\n        \"flarum/markdown\": \"*\",\n        \"flarum/mentions\": \"*\",\n        \"flarum/nicknames\": \"*\",\n        \"flarum/pusher\": \"*\",\n        \"flarum/statistics\": \"*\",\n        \"flarum/sticky\": \"*\",\n        \"flarum/subscriptions\": \"*\",\n        \"flarum/suspend\": \"*\",\n        \"flarum/tags\": \"*\"\n    },\n\n    // Various composer config. The ones here are sensible defaults.\n    // See https://getcomposer.org/doc/06-config.md for a list of options.\n    \"config\": {\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true\n    },\n\n    // If composer can find a stable (not dev, alpha, or beta) version\n    // of a package, it should use that. Generally speaking, production\n    // sites shouldn't run beta software unless you know what you're doing.\n    \"prefer-stable\": true\n}\n```\n\n----------------------------------------\n\nTITLE: String Slug Method Deprecation\nDESCRIPTION: The Flarum\\Util\\Str::slug() method is deprecated in favor of Illuminate\\Support\\Str::slug().\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nThe `Flarum\\Util\\Str::slug()` method has been deprecated. Use `Illuminate\\Support\\Str::slug()` instead.\n```\n\n----------------------------------------\n\nTITLE: Running Basic Flarum Console Command\nDESCRIPTION: Basic syntax for executing a Flarum console command from the terminal after connecting via SSH and navigating to the Flarum installation directory.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum [command]\n```\n\n----------------------------------------\n\nTITLE: Special Translation Namespaces in YAML\nDESCRIPTION: Defines special namespace keys for reference translations and default group names.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nref:         # Traduzioni referenziate da più di una chiave.\ngroup:       # Traduzioni utilizzate come gruppi predefiniti.\n```\n\n----------------------------------------\n\nTITLE: Using Version-Specific Flarum CLI Aliases in Bash\nDESCRIPTION: Example of accessing specific CLI versions directly through their aliases regardless of the default version.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/cli.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ fl1 flarum info\nFlarum version: 1.x\nCLI version: 2.0.2\n$ fl2 flarum info\nFlarum version: 2.x\nCLI version: 3.0.1\n```\n\n----------------------------------------\n\nTITLE: Disabling Browser Scroll Restoration in JavaScript\nDESCRIPTION: Beta 15 allows disabling automatic browser scroll restoration for specific pages in the frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b15.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Refer to frontend-pages.md for implementation details\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan via Flarum CLI\nDESCRIPTION: Command to automatically add and update PHPStan infrastructure using Flarum CLI\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra phpstan\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Flarum Commands in Bash\nDESCRIPTION: Command to show help and instructions for a specific Flarum command. Replace [command_name] with the name of the command you need help with.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/console.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum help [command_name]\n```\n\n----------------------------------------\n\nTITLE: Executing Flarum Console Commands in Bash\nDESCRIPTION: Basic syntax for running Flarum console commands. Replace [command] with the specific command you want to run.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/console.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum [command]\n```\n\n----------------------------------------\n\nTITLE: Installing Guzzle for Mailgun Driver\nDESCRIPTION: Composer command to install Guzzle HTTP client, which is required for the Mailgun email driver in Flarum\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/mail.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require guzzlehttp\\/guzzle:^6.0|^7.0\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis for Flarum Extensions\nDESCRIPTION: These bash commands demonstrate how to run PHPStan analysis and clear its cache for a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer analyse:phpstan\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer clear-cache:phpstan && composer analyse:phpstan\n```\n\n----------------------------------------\n\nTITLE: Configuring API Throttling in Flarum Extension\nDESCRIPTION: Demonstrates how to modify API throttling settings using the ThrottleApi extender, including setting a global throttle bypass and removing specific throttling attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/api-throttling.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    // Other extenders\n    (new Extend\\ThrottleApi())\n        ->set('throttleAll', function () {\n          return false;\n        })\n        ->remove('bypassThrottlingAttribute'),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a cron entry for Flarum\nDESCRIPTION: This command opens the cron editor where you can add the entry to run the Flarum scheduler. The next code snippet shows the entry itself.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/scheduler.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncrontab -e\n```\n\n----------------------------------------\n\nTITLE: Scheduled Task Cron Configuration\nDESCRIPTION: Cron job configuration for running scheduled tasks in Flarum. Should be set to run every minute to handle scheduled operations from extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/console.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n* * * * * cd /path-to-your-flarum-install && php flarum schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Workflow in YAML\nDESCRIPTION: YAML configuration for setting up the frontend workflow in a Flarum extension. It includes various parameters for build scripts, code checks, and environment settings.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Frontend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_frontend.yml@main\n    with:\n      enable_bundlewatch: false\n      enable_prettier: true\n      enable_typescript: false\n\n      frontend_directory: ./js\n      backend_directory: .\n      js_package_manager: yarn\n      main_git_branch: main\n\n    secrets:\n      bundlewatch_github_token: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Testing in Flarum Extensions\nDESCRIPTION: TypeScript configuration specifically for test files in Flarum extensions. This extends the main tsconfig and adds the necessary type definitions for Jest.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"include\": [\"tests/**/*\"],\n  \"files\": [\"../../../node_modules/@flarum/jest-config/shims.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Language Pack Extension in PHP\nDESCRIPTION: Basic PHP code to declare a Flarum language pack extension. This is the minimal required code in the extend.php file to create a language pack.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/language-packs.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn new Flarum\\Extend\\LanguagePack();\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Browser Scroll Restoration in JavaScript\nDESCRIPTION: Indicates that automatic browser scroll restoration can be disabled for individual pages in the frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b15.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// See frontend-pages.md for implementation details\n```\n\n----------------------------------------\n\nTITLE: Backend Workflow Configuration\nDESCRIPTION: YAML configuration for setting up backend testing workflow, including options for PHPUnit tests and static code analysis\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/github-actions.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Backend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_backend.yml@main\n    with:\n      # Different types of jobs\n      enable_backend_testing: true\n      enable_phpstan: false\n\n      # Additional parameters\n      backend_directory: .\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on RHEL-based Systems\nDESCRIPTION: Commands for installing cron (crontabs) on RHEL-based Linux distributions like CentOS, AlmaLinux, and Rocky Linux using dnf package manager.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/scheduler.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf update\nsudo dnf install crontabs\n```\n\n----------------------------------------\n\nTITLE: Configurazione JSON per Language Pack Flarum\nDESCRIPTION: Questo snippet mostra la configurazione JSON necessaria nel file composer.json per dichiarare un language pack Flarum. Include il codice della lingua e il titolo.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/language-packs.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"flarum-locale\": {\n  \"code\": \"en\",\n  \"title\": \"English\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Class-based String and Array Helpers in PHP\nDESCRIPTION: Shows how to use the class-based alternatives to Laravel's deprecated global string and array helpers, as recommended in Flarum Beta 10.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b10.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Arr;\n\n$contains = Str::contains('Hello World', 'World');\n$only = Arr::only(['name' => 'John', 'age' => 30], ['name']);\n```\n\n----------------------------------------\n\nTITLE: PHP Model Date Attribute Cast\nDESCRIPTION: Demonstrates the new recommended way to cast date attributes in Flarum models\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-1_x.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nModel::cast($attribute, 'datetime')\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination Limits in PHP\nDESCRIPTION: Sets default and maximum limits for paginated resources in a controller\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n    // El número de registros incluidos por defecto.\n    public $limit = 20;\n    \n    // El número máximo de registros que se pueden solicitar.\n    public $maxLimit = 50;\n```\n\n----------------------------------------\n\nTITLE: Generating Backend Routes with Flarum CLI\nDESCRIPTION: Shows the command to use Flarum CLI for automatically generating backend routes in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend route\n```\n\n----------------------------------------\n\nTITLE: Opening Nested Modals in JavaScript\nDESCRIPTION: Example of the new modal stacking feature added in Flarum 1.5 that allows multiple modals to be open simultaneously.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-1_x.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napp.modal.show(ModalComponent, { attrs }, true);\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum Testing Package with Composer\nDESCRIPTION: Command to install Flarum testing library as a dev dependency\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/testing:^1.0\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Flarum Development Environment with Composer\nDESCRIPTION: Commands to clone the Flarum repository, set up a Composer path repository for the Flarum monorepo, and install dependencies.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/contributing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/flarum/flarum.git\ncd flarum\n\n# Or, when you want to clone directly into the current directory\ngit clone https://github.com/flarum/flarum.git .\n# Note, the directory must be empty\n\n# Set up a Composer path repository for Flarum monorepo packages\ncomposer config repositories.0 path \"PATH_TO_MONOREPO/*/*\"\ngit clone https://github.com/<username>/framework.git PATH_TO_MONOREPO\n```\n\n----------------------------------------\n\nTITLE: Setting Default Permissions in Flarum\nDESCRIPTION: Example of adding default permissions using Migration helper\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\nreturn Migration::addPermissions([\n    'some.permission' => Group::MODERATOR_ID\n]);\n```\n\n----------------------------------------\n\nTITLE: Using AffixedSidebar component in Mithril 2\nDESCRIPTION: Demonstrates how to replace the deprecated affixSidebar util with the new AffixedSidebar component in Mithril 2.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass NewWay extends Component {\n  view() {\n    return <div>\n      <div className=\"container\">\n        <div className=\"sideNavContainer\">\n          <AffixedSidebar>\n            <nav className=\"sideNav\">\n              <p>Affixed Sidebar</p>\n            </nav>\n          </AffixedSidebar>\n          <div className=\"sideNavOffset\">Actual Page Content</div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Mailable Notification Blueprint in PHP\nDESCRIPTION: Implementation of a notification blueprint that can be sent via email by implementing both BlueprintInterface and MailableInterface. Includes methods for generating email subjects and views.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Mentions\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\MailableInterface;\nuse Flarum\\Post\\Post;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass PostMentionedBlueprint implements BlueprintInterface, MailableInterface\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var Post\n     */\n    public $reply;\n\n    /**\n     * @param Post $post\n     * @param Post $reply\n     */\n    public function __construct(Post $post, Post $reply)\n    {\n        $this->post = $post;\n        $this->reply = $reply;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getFromUser()\n    {\n        return $this->reply->user;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getData()\n    {\n        return ['replyNumber' => (int) $this->reply->number];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailView()\n    {\n        return ['text' => 'flarum-mentions::emails.postMentioned'];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailSubject(TranslatorInterface $translator)\n    {\n        return $translator->trans('flarum-mentions.email.post_mentioned.subject', [\n            '{replier_display_name}' => $this->post->user->display_name,\n            '{title}' => $this->post->discussion->title\n        ]);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getType()\n    {\n        return 'postMentioned';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Default Settings in Flarum Migration\nDESCRIPTION: Using the Migration::addSettings helper to specify default settings in a Flarum migration.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addSettings([\n    'foo' => 'bar',\n]);\n```\n\n----------------------------------------\n\nTITLE: Writing Integration Tests for Flarum Frontend Components\nDESCRIPTION: Shows how to create integration tests for Flarum frontend components using Jest and mithril-query. The example tests the 'Alert' component.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport Alert from '../../../../src/common/components/Alert';\nimport m from 'mithril';\nimport mq from 'mithril-query';\nimport { jest } from '@jest/globals';\n\ndescribe('Alert displays as expected', () => {\n  it('should display alert messages with an icon', () => {\n    const alert = mq(m(Alert, { type: 'error' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toHaveElement('i.icon');\n  });\n\n  it('should display alert messages with a custom icon when using a title', () => {\n    const alert = mq(Alert, { type: 'error', icon: 'fas fa-users', title: 'Woops..' });\n    expect(alert).toContainRaw('Woops..');\n    expect(alert).toHaveElement('i.fas.fa-users');\n  });\n\n  it('should display alert messages with a title', () => {\n    const alert = mq(m(Alert, { type: 'error', title: 'Error Title' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toContainRaw('Error Title');\n    expect(alert).toHaveElement('.Alert-title');\n  });\n\n  it('should display alert messages with custom controls', () => {\n    const alert = mq(Alert, { type: 'error', controls: [m('button', { className: 'Button--test' }, 'Click me!')] });\n    expect(alert).toHaveElement('button.Button--test');\n  });\n});\n\ndescribe('Alert is dismissible', () => {\n  it('should show dismiss button', function () {\n    const alert = mq(m(Alert, { dismissible: true }, 'Shoot!'));\n    expect(alert).toHaveElement('button.Alert-dismiss');\n  });\n\n  it('should call ondismiss when dismiss button is clicked', function () {\n    const ondismiss = jest.fn();\n    const alert = mq(Alert, { dismissible: true, ondismiss });\n    alert.click('.Alert-dismiss');\n    expect(ondismiss).toHaveBeenCalled();\n  });\n\n  it('should not be dismissible if not chosen', function () {\n    const alert = mq(Alert, { type: 'error', dismissible: false });\n    expect(alert).not.toHaveElement('button.Alert-dismiss');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Relationships in Flarum Flag Extension - PHP 1.x Implementation\nDESCRIPTION: Shows how to set up a relationship between flags and posts in Flarum 1.x using a CreateFlagHandler class. Includes validation, permissions checking, and flag creation logic.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nclass CreateFlagHandler\n{\n    public function handle(CreateFlag $command)\n    {\n        $actor = $command->actor;\n        $data = $command->data;\n    \n        $postId = Arr::get($data, 'relationships.post.data.id');\n        $post = $this->posts->findOrFail($postId, $actor);\n    \n        if (! ($post instanceof CommentPost)) {\n            throw new InvalidParameterException;\n        }\n    \n        $actor->assertCan('flag', $post);\n    \n        if ($actor->id === $post->user_id && ! $this->settings->get('flarum-flags.can_flag_own')) {\n            throw new PermissionDeniedException();\n        }\n    \n        if (Arr::get($data, 'attributes.reason') === null && Arr::get($data, 'attributes.reasonDetail') === '') {\n            throw new ValidationException([\n                'message' => $this->translator->trans('flarum-flags.forum.flag_post.reason_missing_message')\n            ]);\n        }\n    \n        Flag::unguard();\n    \n        $flag = Flag::firstOrNew([\n            'post_id' => $post->id,\n            'user_id' => $actor->id\n        ]);\n    \n        $flag->post_id = $post->id;\n        $flag->user_id = $actor->id;\n        $flag->type = 'user';\n        $flag->reason = Arr::get($data, 'attributes.reason');\n        $flag->reason_detail = Arr::get($data, 'attributes.reasonDetail');\n        $flag->created_at = Carbon::now();\n    \n        $flag->save();\n    \n        $this->events->dispatch(new Created($flag, $actor, $data));\n    \n        return $flag;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create User Request\nDESCRIPTION: Example request body for creating a new user via POST /api/users endpoint.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"attributes\": {\n      \"username\": \"Flarum\",\n      \"email\": \"flarum@example.com\",\n      \"password\": \"correcthorsebatterystaple\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Browser Scroll Restoration in JavaScript\nDESCRIPTION: Shows how to disable automatic browser scroll restoration for specific pages in the frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b15.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Note: This is a conceptual example, not actual code\napp.initializers.add('my-extension', () => {\n  extend(IndexPage.prototype, 'oninit', function() {\n    this.disableScrollRestoration = true;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Integration Testing Flarum Frontend Components in TypeScript\nDESCRIPTION: Shows how to perform integration tests on Flarum's Alert component using mithril-query and Jest in TypeScript.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport Alert from '../../../../src/common/components/Alert';\nimport m from 'mithril';\nimport mq from 'mithril-query';\nimport { jest } from '@jest/globals';\n\ndescribe('Alert displays as expected', () => {\n  it('should display alert messages with an icon', () => {\n    const alert = mq(m(Alert, { type: 'error' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toHaveElement('i.icon');\n  });\n\n  it('should display alert messages with a custom icon when using a title', () => {\n    const alert = mq(Alert, { type: 'error', icon: 'fas fa-users', title: 'Woops..' });\n    expect(alert).toContainRaw('Woops..');\n    expect(alert).toHaveElement('i.fas.fa-users');\n  });\n\n  it('should display alert messages with a title', () => {\n    const alert = mq(m(Alert, { type: 'error', title: 'Error Title' }, 'Shoot!'));\n    expect(alert).toContainRaw('Shoot!');\n    expect(alert).toContainRaw('Error Title');\n    expect(alert).toHaveElement('.Alert-title');\n  });\n\n  it('should display alert messages with custom controls', () => {\n    const alert = mq(Alert, { type: 'error', controls: [m('button', { className: 'Button--test' }, 'Click me!')] });\n    expect(alert).toHaveElement('button.Button--test');\n  });\n});\n\ndescribe('Alert is dismissible', () => {\n  it('should show dismiss button', function () {\n    const alert = mq(m(Alert, { dismissible: true }, 'Shoot!'));\n    expect(alert).toHaveElement('button.Alert-dismiss');\n  });\n\n  it('should call ondismiss when dismiss button is clicked', function () {\n    const ondismiss = jest.fn();\n    const alert = mq(Alert, { dismissible: true, ondismiss });\n    alert.click('.Alert-dismiss');\n    expect(ondismiss).toHaveBeenCalled();\n  });\n\n  it('should not be dismissible if not chosen', function () {\n    const alert = mq(Alert, { type: 'error', dismissible: false });\n    expect(alert).not.toHaveElement('button.Alert-dismiss');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Illuminate Support String Slug in PHP\nDESCRIPTION: Demonstrates the recommended way to generate slugs in PHP after the deprecation of Flarum's custom string slug method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$slug = Str::slug($string);\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Integration Test Configuration\nDESCRIPTION: XML configuration for PHPUnit integration tests with specific settings for Flarum testing environment\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"true\"\n         stopOnFailure=\"false\">\n\n    <testsuites>\n        <testsuite name=\"Flarum Integration Tests\">\n            <directory suffix=\"Test.php\">./integration</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Flarum Frontend Testing\nDESCRIPTION: Demonstrates how to set up the Jest configuration file for frontend testing in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('@flarum/jest-config')();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Translation Key Referencing Example\nDESCRIPTION: Demonstrates a problematic approach to translation key referencing that can lead to unintended consequences and maintenance challenges\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\\n\\n  forum:\\n    header:\\n      log_in_link: => Log In\\n\\n    log_in:\\n      submit_button: => core.forum.header.log_in_link  # Never reference keys\\n      title: => core.forum.header.log_in_link          # that aren't in \"ref\"!\n```\n\n----------------------------------------\n\nTITLE: Validation Errors Response in Flarum API\nDESCRIPTION: Example of validation errors returned with a 422 HTTP status code. Shows multiple errors for different fields with pointers to the specific attributes that failed validation.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/rest-api.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"422\",\n      \"code\": \"validation_error\",\n      \"detail\": \"The username has already been taken.\",\n      \"source\":{\n        \"pointer\":\"\\/data\\/attributes\\/username\"\n      }\n    },\n    {\n      \"status\": \"422\",\n      \"code\": \"validation_error\",\n      \"detail\": \"The email has already been taken.\",\n      \"source\": {\n        \"pointer\":\"\\/data\\/attributes\\/email\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum Testing Package with Composer\nDESCRIPTION: Command to install the Flarum testing package as a development dependency.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/testing:^1.0\n```\n\n----------------------------------------\n\nTITLE: Creating a User with Flarum REST API\nDESCRIPTION: Registers a new user to the system by making a POST request to the /api/users endpoint. This request requires user attributes such as username, email, and password to be included in the JSON body.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/rest-api.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"data\": {\"attributes\": {\"username\": \"Flarum\", \"email\": \"flarum@example.com\", \"password\": \"correcthorsebatterystaple\"}}}\n```\n\n----------------------------------------\n\nTITLE: Renaming a Table with Migration Helper\nDESCRIPTION: Simple migration for renaming an existing database table using Flarum's renameTable helper.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/models.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::renameTable($from, $to);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Route Resolvers in Flarum\nDESCRIPTION: This custom resolver example extends `DefaultResolver` to customize route matching and rendering behaviors for a discussion page. It efficiently manages scrolling when navigating between posts within a single discussion.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DefaultResolver from '../../common/resolvers/DefaultResolver';\n\n/**\n * This isn't exported as it is a temporary measure.\n * A more robust system will be implemented alongside UTF-8 support in beta 15.\n */\nfunction getDiscussionIdFromSlug(slug: string | undefined) {\n  if (!slug) return;\n  return slug.split('-')[0];\n}\n\n/**\n * A custom route resolver for DiscussionPage that generates the same key to all posts\n * on the same discussion. It triggers a scroll when going from one post to another\n * in the same discussion.\n */\nexport default class DiscussionPageResolver extends DefaultResolver {\n  static scrollToPostNumber: number | null = null;\n\n  makeKey() {\n    const params = { ...m.route.param() };\n    if ('near' in params) {\n      delete params.near;\n    }\n    params.id = getDiscussionIdFromSlug(params.id);\n    return this.routeName.replace('.near', '') + JSON.stringify(params);\n  }\n\n  onmatch(args, requestedPath, route) {\n    if (route.includes('/d/:id') && getDiscussionIdFromSlug(args.id) === getDiscussionIdFromSlug(m.route.param('id'))) {\n      DiscussionPageResolver.scrollToPostNumber = parseInt(args.near);\n    }\n\n    return super.onmatch(args, requestedPath, route);\n  }\n\n  render(vnode) {\n    if (DiscussionPageResolver.scrollToPostNumber !== null) {\n      const number = DiscussionPageResolver.scrollToPostNumber;\n      // Scroll after a timeout to avoid clashes with the render.\n      setTimeout(() => app.current.get('stream').goToNumber(number));\n      DiscussionPageResolver.scrollToPostNumber = null;\n    }\n\n    return super.render(vnode);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generate API Controller with Flarum CLI\nDESCRIPTION: Command to automatically create API controller boilerplate using Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend api-controller\n```\n\n----------------------------------------\n\nTITLE: Example Flarum Composer Configuration\nDESCRIPTION: A detailed composer.json configuration file for a Flarum installation, including package requirements, metadata, and composer settings. The file specifies core Flarum dependencies and bundled extensions with their version constraints.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/composer.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"flarum/flarum\",\n    \"description\": \"Delightfully simple forum software.\",\n    \"type\": \"project\",\n    \"keywords\": [\n        \"forum\",\n        \"discussion\"\n    ],\n    \"homepage\": \"https://flarum.org/\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Flarum\",\n            \"email\": \"info@flarum.org\",\n            \"homepage\": \"https://flarum.org/team\"\n        }\n    ],\n    \"support\": {\n        \"issues\": \"https://github.com/flarum/core/issues\",\n        \"source\": \"https://github.com/flarum/flarum\",\n        \"docs\": \"https://flarum.org/docs/\"\n    },\n    \"require\": {\n        \"flarum/core\": \"^1.0\",\n        \"flarum/approval\": \"*\",\n        \"flarum/bbcode\": \"*\",\n        \"flarum/emoji\": \"*\",\n        \"flarum/lang-english\": \"*\",\n        \"flarum/flags\": \"*\",\n        \"flarum/likes\": \"*\",\n        \"flarum/lock\": \"*\",\n        \"flarum/markdown\": \"*\",\n        \"flarum/mentions\": \"*\",\n        \"flarum/nicknames\": \"*\",\n        \"flarum/pusher\": \"*\",\n        \"flarum/statistics\": \"*\",\n        \"flarum/sticky\": \"*\",\n        \"flarum/subscriptions\": \"*\",\n        \"flarum/suspend\": \"*\",\n        \"flarum/tags\": \"*\"\n    },\n    \"config\": {\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true\n    },\n    \"prefer-stable\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Composer Dependency Conflict Example\nDESCRIPTION: Detailed example output from composer showing version conflicts between Flarum core and various dependencies.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/update.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflarum/flarum                     -               requires          flarum/core (v0.1.0-beta.15)\nfof/moderator-notes               0.4.4           requires          flarum/core (>=0.1.0-beta.15 <0.1.0-beta.16)\njordanjay29/flarum-ext-summaries  0.3.2           requires          flarum/core (>=0.1.0-beta.14 <0.1.0-beta.16)\nflarum/core                       v0.1.0-beta.16  requires          dflydev/fig-cookies (^3.0.0)\nflarum/flarum                     -               does not require  dflydev/fig-cookies (but v2.0.3 is installed)\nflarum/core                       v0.1.0-beta.16  requires          franzl/whoops-middleware (^2.0.0)\nflarum/flarum                     -               does not require  franzl/whoops-middleware (but 0.4.1 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/bus (^8.0)\nflarum/flarum                     -               does not require  illuminate/bus (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/cache (^8.0)\nflarum/flarum                     -               does not require  illuminate/cache (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/config (^8.0)\nflarum/flarum                     -               does not require  illuminate/config (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/container (^8.0)\nflarum/flarum                     -               does not require  illuminate/container (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/contracts (^8.0)\nflarum/flarum                     -               does not require  illuminate/contracts (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/database (^8.0)\nflarum/flarum                     -               does not require  illuminate/database (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/events (^8.0)\nflarum/flarum                     -               does not require  illuminate/events (but v6.20.19 is installed)\n```\n\n----------------------------------------\n\nTITLE: Database Table Naming Conventions\nDESCRIPTION: Guidelines for naming database tables including pluralization and handling of relationship tables.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/contributing.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ndiscussions        // Plural form\naccess_tokens     // Multiple words separated by underscore\ndiscussion_user   // Relationship tables - singular form in alphabetical order\n```\n\n----------------------------------------\n\nTITLE: Special Namespace Types in YAML\nDESCRIPTION: Additional special namespaces used for reference translations that may be used in multiple places or for default group names that are translated by the server.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nref:         # Translations referenced by more than one key.\ngroup:       # Translations used as default group names.\n```\n\n----------------------------------------\n\nTITLE: Getting Flarum System Information\nDESCRIPTION: Retrieves information about Flarum core and installed extensions, useful for debugging and support requests.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum info\n```\n\n----------------------------------------\n\nTITLE: Specifying Extension Dependencies in composer.json\nDESCRIPTION: Shows how to specify dependencies for a Flarum extension by adding them as composer dependencies in the composer.json file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my/extension\",\n  \"description\": \"Cool New Extension\",\n  \"type\": \"flarum-extension\",\n  \"license\": \"MIT\",\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.14\",\n    \"flarum/tags\": \"^0.1.0-beta.14\",  // Will mark tags as a dependency\n    \"flarum/mentions\": \"^0.1.0-beta.14\"  // Will mark mentions as a dependency\n  }\n  // other config\n}\n```\n\n----------------------------------------\n\nTITLE: Dichiarare un Language Pack in PHP per Flarum\nDESCRIPTION: Questo snippet mostra come dichiarare un language pack per Flarum utilizzando l'extender LanguagePack. È un esempio semplice tratto dal language pack Flarum English.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/language-packs.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn new Flarum\\Extend\\LanguagePack();\n```\n\n----------------------------------------\n\nTITLE: Including Variables in Flarum Translations with JSX\nDESCRIPTION: Demonstrates how to include variables in Flarum translations using JSX syntax. The example shows a search results dropdown item that includes the user's search query.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{LinkButton.component({\n  icon: 'search',\n  children: app.translator.trans('all_discussions_button', {query}),\n  href: app.route('index', {q: query})\n})}\n```\n\n----------------------------------------\n\nTITLE: Using Flarum CLI to Configure GitHub Actions - Bash\nDESCRIPTION: This snippet shows the command to use the Flarum CLI for automatically adding GitHub Actions workflows for an extension. It simplifies configuration by integrating predefined workflows.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/github-actions.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra githubActions\n```\n\n----------------------------------------\n\nTITLE: Adding Flarum Scheduler Cron Job\nDESCRIPTION: Cron job entry to run Flarum's scheduler every minute. This command changes to the Flarum project directory, executes the scheduler, and suppresses output.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/scheduler.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * cd /path-to-your-project && php flarum schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Creating a Filter Mutator for User Country in PHP\nDESCRIPTION: This snippet demonstrates how to create a filter mutator that restricts user results to those with the same country as the current user. It's applied to all filter requests for the User model.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterState;\nuse Flarum\\Query\\QueryCriteria;\n\nclass OnlySameCountryFilterMutator\n{\n    public function __invoke(FilterState $filterState, QueryCriteria $queryCriteria)\n    {\n        $filterState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Optional Extension in Flarum Frontend\nDESCRIPTION: JavaScript code to check if an optional extension is enabled in the Flarum frontend by checking the global flarum.extensions object.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nif ('some-extension-id' in flarum.extensions) {\n    // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on RHEL-Based Systems\nDESCRIPTION: This snippet provides the commands needed to install cron on RHEL-based Linux distributions such as CentOS, AlmaLinux, and Rocky Linux.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/scheduler.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf update\nsudo dnf install crontabs\n```\n\n----------------------------------------\n\nTITLE: Defining Route Helper in JavaScript\nDESCRIPTION: Example of defining a route helper method for generating URLs to specific routes with parameters.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/routes.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n  new Extend.Routes()\n   .add('acme.user', '/user/:id', <UsersPage />)\n   .helper('acmeUser', (user) => app.route('acme.user', { id: user.id() }))\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum Extension Manager\nDESCRIPTION: Command to install the Flarum Extension Manager which enables installing extensions via admin dashboard.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/install.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require flarum/extension-manager:\"*\"\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub Actions via Flarum CLI\nDESCRIPTION: Command to automatically add and update GitHub Actions workflows using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/github-actions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra githubActions\n```\n\n----------------------------------------\n\nTITLE: Documenting PR Merging Workflow in Markdown\nDESCRIPTION: This snippet outlines the entire PR merging workflow, including implementation review criteria, merging strategies, and post-merge tasks. It serves as a guide for core developers to ensure consistency and quality in the merging process.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/internal/merging.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# PR Merging Workflow\n\n\n## Implementation Review Criteria\n\n- Adheres to our conventions or can be patched up easily after merging, follows proper code style.\n- Are there any implementation details that could be done better through alternate technologies/technical approaches?\n- Does not touch any lines outside of the intended changes, eg through formatting or compilation.\n- If the changes are to code intended as a public API, has a proper doc block been included?\n\n## Merge Time!\n\nIf all of the checks in the template are met, **any** core developer may merge this PR. If the PR is authored by a core developer, they should probably be the ones to merge it.\n\n- Merging:\n  - GitHub offers several ways to merge a PR. Choose between the following strategies:\n    - **Merge** when the PR branch consists of atomic, well-described commits that are nice to have in the version history.\n    - **Squash** when lots of cleanup commits have accumulated. Please make sure to follow the [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/#summary) spec for the squash commit.\n\n- After merging:\n  - Make sure the *issue* (if none exists, the PR - but not both) belongs to the appropriate milestone and project board.\n  - PRs in extensions cannot be assigned to core milestones, so create a core issue that references it and add it to the milestone.\n  - Close all relevant issues (*if* they are closed completely).\n  - Regressions should be labeled as such and removed from the project board and milestone after merging.\n  - Check for follow-up tasks:\n    - Merge related PRs (language files, extensions, documentations).\n    - Documentation updates.\n  - Create issues for further follow-up tasks, if necessary.\n```\n\n----------------------------------------\n\nTITLE: Running Composer Commands for Flarum\nDESCRIPTION: Basic usage of Composer commands for managing Flarum, including running commands and optimizing autoload.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/composer.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer COMMAND\ncomposer dump-autoload -a\n```\n\n----------------------------------------\n\nTITLE: JavaScript Select Component Props\nDESCRIPTION: Reference to the updated Select component with new disabled prop support.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b12.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nflarum/components/Select\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination Limits in PHP Controller\nDESCRIPTION: Defines default and maximum pagination limits for API resources\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n    // El número de registros incluidos por defecto.\n    public $limit = 20;\n    \n    // El número máximo de registros que se pueden solicitar.\n    public $maxLimit = 50;\n```\n\n----------------------------------------\n\nTITLE: Frontend GitHub Actions Workflow Configuration\nDESCRIPTION: YAML configuration for setting up frontend workflow in a Flarum extension, including bundlewatch, prettier, and typescript options.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Frontend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_frontend.yml@main\n    with:\n      enable_bundlewatch: false\n      enable_prettier: true\n      enable_typescript: false\n\n      frontend_directory: ./js\n      backend_directory: .\n      js_package_manager: yarn\n      main_git_branch: main\n\n    secrets:\n      bundlewatch_github_token: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Discussion Visibility Scoper in PHP\nDESCRIPTION: Example scoper for handling private discussion visibility using orWhere clauses. Demonstrates how to implement conditional visibility rules.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace ACME\\YourExtension\\Access;\n\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     */\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->orWhere(function($query) use ($actor) {\n            $query->where('some_column', true);\n            $query->where('some_other_column', false);\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Gambit and Search Mutator in Flarum\nDESCRIPTION: This code snippet demonstrates how to register the custom CountryGambit and OnlySameCountrySearchMutator with Flarum's SimpleFlarumSearch extender. This integration allows the custom search functionality to be used within the Flarum system.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\SimpleFlarumSearch(UserSearcher::class))\n    ->addGambit(CountryGambit::class)\n    ->addSearchMutator(OnlySameCountrySearchMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: Composer Dependency Resolution Output\nDESCRIPTION: Sample output from composer why-not command showing dependency conflicts between core and extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/update.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflarum/flarum                     -               requires          flarum/core (v0.1.0-beta.15)\nfof/moderator-notes               0.4.4           requires          flarum/core (>=0.1.0-beta.15 <0.1.0-beta.16)\njordanjay29/flarum-ext-summaries  0.3.2           requires          flarum/core (>=0.1.0-beta.14 <0.1.0-beta.16)\nflarum/core                       v0.1.0-beta.16  requires          dflydev/fig-cookies (^3.0.0)\nflarum/flarum                     -               does not require  dflydev/fig-cookies (but v2.0.3 is installed)\nflarum/core                       v0.1.0-beta.16  requires          franzl/whoops-middleware (^2.0.0)\nflarum/flarum                     -               does not require  franzl/whoops-middleware (but 0.4.1 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/bus (^8.0)\nflarum/flarum                     -               does not require  illuminate/bus (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/cache (^8.0)\nflarum/flarum                     -               does not require  illuminate/cache (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/config (^8.0)\nflarum/flarum                     -               does not require  illuminate/config (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/container (^8.0)\nflarum/flarum                     -               does not require  illuminate/container (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/contracts (^8.0)\nflarum/flarum                     -               does not require  illuminate/contracts (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/database (^8.0)\nflarum/flarum                     -               does not require  illuminate/database (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/events (^8.0)\nflarum/flarum                     -               does not require  illuminate/events (but v6.20.19 is installed)\n```\n\n----------------------------------------\n\nTITLE: Finding Valid Access Token in Flarum (PHP)\nDESCRIPTION: Shows how to retrieve a valid access token instance in Flarum using the AccessToken class. This method takes a token string as input and returns the corresponding token instance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nFlarum\\Http\\AccessToken::findValid($tokenString)\n```\n\n----------------------------------------\n\nTITLE: Implementing List Resources Controller in PHP\nDESCRIPTION: Example of a controller for listing resources, extending AbstractListController with serializer specification and data method implementation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractListController;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass ListTagsController extends AbstractListController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        return Tag::all();\n    }\n```\n\n----------------------------------------\n\nTITLE: Opening Crontab Editor\nDESCRIPTION: Command to open the crontab editor for adding or modifying cron jobs.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/scheduler.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncrontab -e\n```\n\n----------------------------------------\n\nTITLE: Setting up package.json for Flarum Extension\nDESCRIPTION: Configuration file for a Flarum extension's frontend dependencies, including development scripts for building, formatting, and type checking. This defines the necessary dependencies like TypeScript, Webpack, and Flarum's configuration packages.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"private\": true,\n  \"name\": \"@acme/flarum-hello-world\",\n  \"dependencies\": {\n    \"@flarum/prettier-config\": \"^1.0.0\",\n    \"flarum-tsconfig\": \"^2.0.0\",\n    \"flarum-webpack-config\": \"^3.0.0\",\n    \"prettier\": \"^2.5.1\",\n    \"typescript\": \"^4.5.4\",\n    \"typescript-coverage-report\": \"^0.6.1\",\n    \"webpack\": \"^5.65.0\",\n    \"webpack-cli\": \"^4.9.1\"\n  },\n  \"scripts\": {\n    \"dev\": \"webpack --mode development --watch\",\n    \"build\": \"webpack --mode production\",\n    \"analyze\": \"cross-env ANALYZER=true <%= params.jsPackageManager %> run build\",\n    \"format\": \"prettier --write src\",\n    \"format-check\": \"prettier --check src\",\n    \"clean-typings\": \"npx rimraf dist-typings && mkdir dist-typings\",\n    \"build-typings\": \"<%= params.jsPackageManager %> run clean-typings && ([ -e src/@types ] && cp -r src/@types dist-typings/@types || true) && tsc && <%= params.jsPackageManager %> run post-build-typings\",\n    \"post-build-typings\": \"find dist-typings -type f -name '*.d.ts' -print0 | xargs -0 sed -i 's,../src/@types,@types,g'\",\n    \"check-typings\": \"tsc --noEmit --emitDeclarationOnly false\",\n    \"check-typings-coverage\": \"typescript-coverage-report\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP String Slug Method Update\nDESCRIPTION: Migration from deprecated Flarum Str::slug() to Illuminate Support Str::slug() method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b12.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Old (Deprecated)\nFlarum\\Util\\Str::slug()\n\n// New\nIlluminate\\Support\\Str::slug()\n```\n\n----------------------------------------\n\nTITLE: Generating a Modal with Flarum CLI\nDESCRIPTION: Command to generate a new modal component using the Flarum CLI tool, which automates the creation of boilerplate code for a modal.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/interactive-components.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make frontend modal\n```\n\n----------------------------------------\n\nTITLE: Composer Update Check Command\nDESCRIPTION: Command to check for outdated packages in composer.json, outputting results in JSON format. Only shows packages marked as semver-safe-update and update-possible.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/internal/extension-manager.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer outdated -D --format json\n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux for Web Server Access\nDESCRIPTION: This Bash command configures SELinux to allow the web server to write to a specified directory by setting a specific SELinux context type. This may be necessary if SELinux policies restrict web server file operations.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/install.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nchcon -R -t httpd_sys_rw_content_t /path/to/directory\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration Setup\nDESCRIPTION: Jest configuration file setup for Flarum frontend testing\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('@flarum/jest-config')();\n```\n\n----------------------------------------\n\nTITLE: Updated Flarum Extension Directory Structure\nDESCRIPTION: Example of the new directory structure for Flarum extensions after Beta 8 changes, showing the reorganized JavaScript files and build artifacts.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-b8.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\njs\n├── src\n│   ├── admin\n│   │   └── index.js\n│   └── forum\n│       └── index.js\n├── dist\n│   ├── admin.js\n│   ├── admin.js.map\n│   ├── forum.js\n│   └── forum.js.map\n├── admin.js\n├── forum.js\n├── package.json\n└── webpack.config.js\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current User in Flarum Extension (PHP)\nDESCRIPTION: Demonstrates how to retrieve the current user from inside a Flarum extension using the request attribute 'actor'. This method returns a User instance, which might be a Guest user.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$request->getAttribute('actor')\n```\n\n----------------------------------------\n\nTITLE: Global Flarum Update Command\nDESCRIPTION: Command to update all Flarum packages with their dependencies, using preferred dist versions and excluding dev dependencies.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/internal/package-manager.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncommand update --prefer-dist --no-dev -a --with-all-dependencies\n```\n\n----------------------------------------\n\nTITLE: Registering Frontend JavaScript in Flarum Extension\nDESCRIPTION: Shows how to register a JavaScript file for the forum frontend using the Frontend extender in extend.php\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n];\n```\n\n----------------------------------------\n\nTITLE: Flarum Extension Directory Structure\nDESCRIPTION: Example of the legacy directory structure for Flarum extensions showing the organization of JavaScript files before Beta 8 changes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-b8.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\njs\n├── admin\n│   ├── src\n│   │   └── main.js\n│   ├── dist\n│   │   └── extension.js\n│   ├── Gulpfile.js\n│   └── package.json\n└── forum\n    ├── src\n    │   └── main.js\n    ├── dist\n    │   └── extension.js\n    ├── Gulpfile.js\n    └── package.json\n```\n\n----------------------------------------\n\nTITLE: Modal Opening in Mithril 0.2 (Old Pattern)\nDESCRIPTION: The previous way of opening modals in Flarum with Mithril 0.2, passing a component instance to the show method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\napp.modal.show(new LoginModal(identification: 'prefilledUsername'));\n```\n\n----------------------------------------\n\nTITLE: Replacing String Slug Method\nDESCRIPTION: Switch from Flarum's custom slug method to Laravel's Illuminate string slug method\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b13.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Old: Flarum\\Util\\Str::slug()\n// New: Illuminate\\Support\\Str::slug()\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum Testing Library with CLI\nDESCRIPTION: Using the Flarum CLI to automatically add and update backend testing infrastructure to your codebase.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra backendTesting\n```\n\n----------------------------------------\n\nTITLE: Model Attribute Type Extension\nDESCRIPTION: Example of extending a model with typed attributes for PHPStan analysis\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Model(User::class))\n    ->cast('is_cool', 'bool'),\n```\n\n----------------------------------------\n\nTITLE: Package.json Configuration for Frontend Testing\nDESCRIPTION: Configuration required in package.json for enabling frontend testing with Jest\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"scripts\": {\n    ...,\n    \"test\": \"yarn node --experimental-vm-modules $(yarn bin jest)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Modal via Flarum CLI\nDESCRIPTION: This bash command creates a modal file in Flarum using the Flarum CLI. It automatically sets up the necessary boilerplate for a frontend modal. Ensure you have Flarum CLI installed in your development environment.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/interactive-components.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make frontend modal\n```\n\n----------------------------------------\n\nTITLE: Changing Directory Permissions in Linux\nDESCRIPTION: This Bash command recursively sets the permission level of a specified directory to 775, allowing read, write, and execute access to the owner and group, and read and execute access to others. This is essential for allowing the web server to modify directories during Flarum operations.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/install.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nchmod 775 -R /path/to/directory\n```\n\n----------------------------------------\n\nTITLE: Running Patch-Minor Flarum Update Command\nDESCRIPTION: Executes a Composer command to update Flarum and its extensions to the latest patch or minor versions, after setting version constraints to '*'.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/internal/package-manager.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncommand update --prefer-dist --no-dev -a --with-all-dependencies\n```\n\n----------------------------------------\n\nTITLE: Implementing Mailable Post Mention Notification in PHP\nDESCRIPTION: Example of a mailable notification blueprint for post mentions. Implements both BlueprintInterface and MailableInterface to support email notifications with translated subjects.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Mentions\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\MailableInterface;\nuse Flarum\\Post\\Post;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass PostMentionedBlueprint implements BlueprintInterface, MailableInterface\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var Post\n     */\n    public $reply;\n\n    /**\n     * @param Post $post\n     * @param Post $reply\n     */\n    public function __construct(Post $post, Post $reply)\n    {\n        $this->post = $post;\n        $this->reply = $reply;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getFromUser()\n    {\n        return $this->reply->user;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getData()\n    {\n        return ['replyNumber' => (int) $this->reply->number];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailView()\n    {\n        return ['text' => 'flarum-mentions::emails.postMentioned'];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getEmailSubject(TranslatorInterface $translator)\n    {\n        return $translator->trans('flarum-mentions.email.post_mentioned.subject', [\n            '{replier_display_name}' => $this->post->user->display_name,\n            '{title}' => $this->post->discussion->title\n        ]);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getType()\n    {\n        return 'postMentioned';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Notification Component in Flarum's Frontend\nDESCRIPTION: This JavaScript code shows how to register a custom notification component in Flarum's frontend. It extends the NotificationGrid to include the new notification type in the user's notification settings.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport NotificationGrid from 'flarum/forum/components/NotificationGrid';\n\nimport PostLikedNotification from './components/PostLikedNotification';\n\napp.initializers.add('flarum-likes', () => {\n  app.notificationComponents.postLiked = PostLikedNotification;\n\n  extend(NotificationGrid.prototype, 'notificationTypes', function (items) {\n    items.add('postLiked', {\n      name: 'postLiked',\n      icon: 'far fa-thumbs-up',\n      label: app.translator.trans('flarum-likes.forum.settings.notify_post_liked_label')\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Tags to Flarum Translations in JSX\nDESCRIPTION: Shows how to add HTML tags to Flarum translations using JSX. The example demonstrates passing an HTML anchor tag as a parameter to the translator.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"helpText\">\n  {app.translator.trans('icon_text', {\n    a: <a href=\"https://fortawesome.github.io/Font-Awesome/icons/\" tabindex=\"-1\"/>\n  })}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Symfony Translator Interface\nDESCRIPTION: Reference to the new translator interface that replaces Laravel's translator implementation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nSymfony\\Component\\Translation\\TranslatorInterface\n```\n\n----------------------------------------\n\nTITLE: Using Slug Helper for Suggestions in JavaScript\nDESCRIPTION: The slug() helper from flarum/utils/string should only be used to suggest slugs to users, not enforce them. It lacks sophisticated transliteration logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { slug } from 'flarum/utils/string';\n\nconst suggestedSlug = slug(userInput);\n// Use suggestedSlug to populate a form field, but allow user to modify it\n```\n\n----------------------------------------\n\nTITLE: Resetting Flarum Extension Migrations\nDESCRIPTION: Command to reset all migrations for a specific extension. Replace [extension_id] with the ID of the extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/console.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum migrate:reset --extension [extension_id]\n```\n\n----------------------------------------\n\nTITLE: Legacy Closure Extender Example in PHP\nDESCRIPTION: Demonstrates the deprecated closure-based extension approach that was used in early Flarum versions for subscribing event listeners.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\FilterDiscussionListByTags::class);\n        $events->subscribe(Listener\\FilterPostsQueryByTag::class);\n        $events->subscribe(Listener\\UpdateTagMetadata::class);\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on Debian/Ubuntu\nDESCRIPTION: Commands for installing the cron service on Debian and Ubuntu-based Linux distributions using apt-get package manager.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/scheduler.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install cron\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Dependencies for Flarum Frontend Development\nDESCRIPTION: Commands for installing JavaScript dependencies and setting up the development environment for frontend work using yarn.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/contributing.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/framework\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on RHEL-based Systems\nDESCRIPTION: Commands to update package lists and install crontabs on RHEL-based Linux distributions like CentOS, AlmaLinux, and Rocky Linux.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/scheduler.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf update\nsudo dnf install crontabs\n```\n\n----------------------------------------\n\nTITLE: Importing Classes from Other Extensions in Flarum Backend\nDESCRIPTION: Demonstrates how to import and use classes from other Flarum extensions in the backend PHP code.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/extending-extensions.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Tags\\Tag;\n\nclass SomeClass\n{\n    public function someMethod()\n    {\n        return new Tag();  // This is not the correct way to instantiate models, it's just here for example of importing.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Component in Flarum with JSX\nDESCRIPTION: Demonstrates various ways to use Flarum's Link component for internal and external routing. Shows examples of basic usage, route generation, and external link handling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'flarum/common/components/Link';\n\n// Link can be used just like any other component:\n<Link href=\"/route/known/to/mithril\">Hello World!</Link>\n\n// You'll frequently use Link with generated routes:\n<Link href={app.route('settings')}>Hello World!</Link>\n\n// Link can even generate external links with the external attr:\n<Link external={true} href=\"https://google.com\">Hello World!</Link>\n\n// The above example with external = true is equivalent to:\n<a href=\"https://google.com\">Hello World!</a>\n// but is provided for flexibility: sometimes you might have links\n// that are conditionally internal or external.\n```\n\n----------------------------------------\n\nTITLE: Installing Extension Manager via Composer\nDESCRIPTION: This command installs the Flarum extension manager using Composer. It allows a graphical interface for installing and updating extensions and Flarum itself.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extensions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"composer require flarum/extension-manager:\\\"*\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Updating Flarum via Composer\nDESCRIPTION: This command updates Flarum and its dependencies using Composer. It also runs database migrations and clears the cache.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/update.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update --prefer-dist --no-plugins --no-dev -a --with-all-dependencies\nphp flarum migrate\nphp flarum cache:clear\n```\n\n----------------------------------------\n\nTITLE: CSS Component Naming Convention\nDESCRIPTION: SUIT CSS naming pattern for components, descendents and modifiers.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/contributing.md#2025-04-16_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.ComponentName-descendentName--modifierName\n```\n\n----------------------------------------\n\nTITLE: Composer Scripts Configuration\nDESCRIPTION: JSON configuration for adding PHPStan analysis commands to composer scripts\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"analyse:phpstan\": \"phpstan analyse\",\n    \"clear-cache:phpstan\": \"phpstan clear-result-cache\"\n  },\n  \"scripts-descriptions\": {\n    \"analyse:phpstan\": \"Run static analysis\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend GitHub Actions Workflow for Flarum Extensions\nDESCRIPTION: YAML configuration for setting up a backend workflow in a Flarum extension. It specifies the workflow name, trigger events, and job configurations using a reusable workflow from the Flarum framework repository.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Backend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_backend.yml@main\n    with:\n      # Different types of jobs\n      enable_backend_testing: true\n      enable_phpstan: false\n\n      # Additional parameters\n      backend_directory: .\n```\n\n----------------------------------------\n\nTITLE: GUI Operation Translation Suffixes in YAML\nDESCRIPTION: Defines suffix conventions for GUI-related translation keys including buttons, links, and form elements.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n_button:        # Utilizzato per i pulsanti (comprese le voci del menu a discesa).\n_link:          # Utilizzato per i collegamenti che non vengono visualizzati graficamente come pulsanti.\n_heading:       # Utilizzato per le intestazioni in tabelle ed elenchi.\n_label:         # Utilizzato per i nomi dei campi dati, le impostazioni delle caselle di controllo, ecc.\n_placeholder:   # Utilizzato per il testo predefinito visualizzato nei campi.\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Gambit and Search Mutator in Flarum\nDESCRIPTION: This snippet demonstrates how to register a custom gambit and search mutator in Flarum using the SimpleFlarumSearch extender. It adds the CountryGambit and OnlySameCountrySearchMutator to the UserSearcher.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\SimpleFlarumSearch(UserSearcher::class))\n    ->addGambit(CountryGambit::class)\n    ->addSearchMutator(OnlySameCountrySearchMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: Dependency Conflict Example\nDESCRIPTION: Sample output from composer why-not command showing dependency conflicts between core and extensions during update.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/update.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflarum/flarum                     -               requires          flarum/core (v0.1.0-beta.15)\nfof/moderator-notes               0.4.4           requires          flarum/core (>=0.1.0-beta.15 <0.1.0-beta.16)\njordanjay29/flarum-ext-summaries  0.3.2           requires          flarum/core (>=0.1.0-beta.14 <0.1.0-beta.16)\nflarum/core                       v0.1.0-beta.16  requires          dflydev/fig-cookies (^3.0.0)\nflarum/flarum                     -               does not require  dflydev/fig-cookies (but v2.0.3 is installed)\nflarum/core                       v0.1.0-beta.16  requires          franzl/whoops-middleware (^2.0.0)\nflarum/flarum                     -               does not require  franzl/whoops-middleware (but 0.4.1 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/bus (^8.0)\nflarum/flarum                     -               does not require  illuminate/bus (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/cache (^8.0)\nflarum/flarum                     -               does not require  illuminate/cache (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/config (^8.0)\nflarum/flarum                     -               does not require  illuminate/config (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/container (^8.0)\nflarum/flarum                     -               does not require  illuminate/container (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/contracts (^8.0)\nflarum/flarum                     -               does not require  illuminate/contracts (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/database (^8.0)\nflarum/flarum                     -               does not require  illuminate/database (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/events (^8.0)\nflarum/flarum                     -               does not require  illuminate/events (but v6.20.19 is installed)\n```\n\n----------------------------------------\n\nTITLE: Specifying Optional Dependencies in composer.json\nDESCRIPTION: Shows how to specify optional dependencies for a Flarum extension in the composer.json file using the extra.flarum-extension.optional-dependencies key.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/extending-extensions.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extra\": {\n    \"flarum-extension\": {\n      \"optional-dependencies\": [\n        \"flarum/tags\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Disabled Prop in Select Component in JavaScript\nDESCRIPTION: The flarum/components/Select component now supports a 'disabled' prop for disabling the select input.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Select from 'flarum/components/Select';\n\nm.component(Select, {\n  disabled: true,\n  // other props\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Major Flarum Updates Bash\nDESCRIPTION: This snippet modifies package versions to a wildcard and sets the core to the latest version. Execute `composer update` to update all packages then check compatibility with `composer why-not`. Requires Composer and appropriate package configuration.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/internal/package-manager.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update --prefer-dist --no-dev -a --with-all-dependencies\n```\n\n----------------------------------------\n\nTITLE: Defining New Frontend Model\nDESCRIPTION: Shows how to create a new frontend model class with attributes and relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/models.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport Model from 'flarum/common/Model';\n\nexport default class Tag extends Model {\n  title = Model.attribute('title');\n  createdAt = Model.attribute('createdAt', Model.transformDate);\n  parent = Model.hasOne('parent');\n  discussions = Model.hasMany('discussions');\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Flarum Extension with Composer\nDESCRIPTION: Command for users to install a published Flarum extension using Composer, where vendor/package should be replaced with the actual package name.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/distribution.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require vendor/package\n```\n\n----------------------------------------\n\nTITLE: Defining Key References in YAML for Flarum Localization\nDESCRIPTION: Demonstrates how to define multiple keys referencing a single translation in a YAML locale file for Flarum. This approach provides flexibility for different language requirements.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nedit_stuff_button: => edit_stuff    # Used in the code that creates the button.\nedit_stuff_title: => edit_stuff     # Used in the code that creates the dialog.\n\nedit_stuff: Edit Stuff              # Not used in the code.\n```\n\n----------------------------------------\n\nTITLE: Registering Event Subscribers in PHP (Deprecated)\nDESCRIPTION: Example of registering event subscribers in the extend.php file using a closure. This approach is now deprecated in Flarum 1.0 in favor of the extender API.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\FilterDiscussionListByTags::class);\n        $events->subscribe(Listener\\FilterPostsQueryByTag::class);\n        $events->subscribe(Listener\\UpdateTagMetadata::class);\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub Actions via Flarum CLI\nDESCRIPTION: Command to automatically add and update GitHub Actions workflows using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/github-actions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra githubActions\n```\n\n----------------------------------------\n\nTITLE: PHPStan Configuration\nDESCRIPTION: Base configuration for PHPStan including analysis level, paths, and specific Flarum settings\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_2\n\nLANGUAGE: neon\nCODE:\n```\nincludes:\n  - vendor/flarum/phpstan/extension.neon\n\nparameters:\n  # The level will be increased in Flarum 2.0\n  level: 5\n  paths:\n    - src\n    - extend.php\n  excludePaths:\n    - *.blade.php\n  checkMissingIterableValueType: false\n  databaseMigrationsPath: ['migrations']\n```\n\n----------------------------------------\n\nTITLE: Translation Key in JavaScript\nDESCRIPTION: This snippet shows how to form the full translation key in JavaScript. The translation key is formed by listing keys in order from extension namespace to an identifier, with periods as delimiters. For example, the full translation key for the \"Hello, world!\" translation would be: `acme-hello-world.alert.hello_text`\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n \"'acme-hello-world.alert.hello_text'\"\n```\n\n----------------------------------------\n\nTITLE: Saving Resources in Flarum's Frontend\nDESCRIPTION: Shows how to save data and relationships through the API using the save method on a model instance in JavaScript.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n\nuser.save({\n  relationships: {\n    groups: [\n      store.getById('groups', 1),\n      store.getById('groups', 2)\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Extension composer.json Configuration\nDESCRIPTION: Complete example of a composer.json file for a Flarum extension, defining package details, dependencies, autoloading configuration, and Flarum-specific metadata for the extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/start.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"acme/flarum-hello-world\",\n    \"description\": \"Say hello to the world!\",\n    \"type\": \"flarum-extension\",\n    \"require\": {\n        \"flarum/core\": \">=0.1.0-beta.15 <0.1.0-beta.16\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\"Acme\\\\HelloWorld\\\\\": \"src/\"}\n    },\n    \"extra\": {\n        \"flarum-extension\": {\n            \"title\": \"Hello World\",\n            \"icon\": {\n                \"name\": \"fas fa-smile\",\n                \"backgroundColor\": \"#238c59\",\n                \"color\": \"#fff\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Composer Loading in Mithril 0.2 (Old Pattern)\nDESCRIPTION: The previous way of loading a composer in Flarum with Mithril 0.2, passing a component instance to the load method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\napp.composer.load(new DiscussionComposer({user: app.session.user}));\n```\n\n----------------------------------------\n\nTITLE: Adding Flarum Scheduler Cron Job\nDESCRIPTION: Cron job entry to run the Flarum scheduler every minute. This command changes to the Flarum project directory, executes the scheduler, and suppresses output.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/scheduler.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * cd /path-to-your-project && php flarum schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Migrating from Deferred to Native Promises in JavaScript\nDESCRIPTION: This snippet shows how to migrate from using m.deferred in Mithril 0.2 to using native Promises in Mithril 2.0 for Flarum extensions. It demonstrates the simplification of asynchronous code handling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\nconst deferred = m.deferred();\n\napp.store.find('posts').then(result => deferred.resolve(result));\n\nreturn deferred.promise;\n\n// Mithril 2\nreturn app.store.find('posts');\n```\n\n----------------------------------------\n\nTITLE: Basic Flarum Migration Structure\nDESCRIPTION: Example of a basic Flarum migration file structure with up and down functions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Schema\\Builder;\n\nreturn [\n    'up' => function (Builder $schema) {\n        // up migration\n    },\n    'down' => function (Builder $schema) {\n        // down migration\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: PHP Table Creation Helper\nDESCRIPTION: Shows usage of the new migration helper for conditionally creating database tables if they don't already exist.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-1_x.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\ncreateTableIfNotExists\n```\n\n----------------------------------------\n\nTITLE: Model Visibility Query Scope\nDESCRIPTION: New method for scoping Eloquent queries to items visible to specific users with optional ability parameter\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b15.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nwhereVisibleTo($user, 'view')\n```\n\n----------------------------------------\n\nTITLE: Installing Testing Infrastructure via Flarum CLI\nDESCRIPTION: Command to automatically add and update backend testing infrastructure using Flarum CLI.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflarum-cli infra backendTesting\n```\n\n----------------------------------------\n\nTITLE: Running Composer Outdated Command for Update Checking\nDESCRIPTION: This command checks for updates of packages directly required in the root composer.json and outputs the results in JSON format, displaying only packages marked as semver-safe-update and update-possible.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/internal/extension-manager.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer outdated -D --format json\n```\n\n----------------------------------------\n\nTITLE: Composer Update Error Output Example\nDESCRIPTION: Example of a common error output when attempting to update Flarum, showing version constraint conflicts between core and extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/update.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNothing to modify in lock file\n```\n\n----------------------------------------\n\nTITLE: Application Class Reference\nDESCRIPTION: Reference to the updated application class that no longer implements Laravel's application contract.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nFlarum\\Foundation\\Application\n```\n\n----------------------------------------\n\nTITLE: Adding Database Columns in Flarum\nDESCRIPTION: Example of adding new columns to an existing table using Migration helper\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addColumns('users', [\n    'email' => ['string', 'length' => 255, 'nullable' => true],\n    'discussion_count' => ['integer', 'unsigned' => true]\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Dependencies for Flarum Monorepo\nDESCRIPTION: Commands for installing JavaScript dependencies using yarn workspaces across all packages in the Flarum monorepo, enabling development work on the frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/contributing.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/framework\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Mail Driver Interface Implementation Changes\nDESCRIPTION: Updates to the DriverInterface implementation including new required methods for beta.13 compatibility.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nIf you implement the `Flarum\\Mail\\DriverInterface`:\n  - Returning a plain array of field names from the `availableSettings()` method is deprecated, but still supported. It must now return an array of field names mapping to their type.\n  - Implement the `validate()` method that will be required in beta.13.\n  - Implement the `canSend()` method that will be required in beta.13.\n```\n\n----------------------------------------\n\nTITLE: Opening Crontab Editor\nDESCRIPTION: Command to open the crontab editor for configuring scheduled tasks.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/scheduler.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncrontab -e\n```\n\n----------------------------------------\n\nTITLE: Configuring Directory Paths\nDESCRIPTION: Updates to site.php for custom directory structure configuration\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/install.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'base' => __DIR__,\n'public' => __DIR__,\n'storage' => __DIR__.'/storage',\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on Debian/Ubuntu Systems\nDESCRIPTION: Commands to install the cron service on Debian and Ubuntu based Linux distributions using apt-get package manager.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/scheduler.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install cron\n```\n\n----------------------------------------\n\nTITLE: Composer Repository Configuration\nDESCRIPTION: Command to configure Composer to find packages in a local packages directory.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/start.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer config repositories.0 path \"packages/*\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic YAML Translation Entry\nDESCRIPTION: Demonstrates how to create a basic translation entry in a YAML locale file for Flarum extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/i18n.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsample_key: This is a sample translation.\n```\n\n----------------------------------------\n\nTITLE: Pull Request Template Link\nDESCRIPTION: This snippet provides a link to the pull request template used by the Flarum project. This template helps ensure that pull requests are well-formatted and contain all the necessary information for review.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/internal/merging-policy.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n\"[Pull Request 模板](https://github.com/flarum/.github/blob/main/PULL_REQUEST_TEMPLATE.md)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Flarum Scheduler Cron Job\nDESCRIPTION: Cron job entry to run the Flarum scheduler every minute. This job changes to the Flarum project directory, executes the scheduler, and suppresses output.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/scheduler.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * cd /path-to-your-project && php flarum schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Installing Jest Config for Flarum Extensions\nDESCRIPTION: Command for installing the Jest configuration dependency required for frontend testing in Flarum extensions. This is the first step in setting up the testing environment.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add --dev @flarum/jest-config\n```\n\n----------------------------------------\n\nTITLE: Implementing Show Resource Controller in PHP\nDESCRIPTION: Example of a controller that shows a single resource by extending AbstractShowController\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractShowController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass ShowTagController extends AbstractShowController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        $id = Arr::get($request->getQueryParams(), 'id');\n\n        return Tag::findOrFail($id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Zend Namespace with Laminas\nDESCRIPTION: Update namespace references from Zend to Laminas due to library changes in Beta 13\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b13.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Old: use Zend\\SomeClass\n// New: use Laminas\\SomeClass\n```\n\n----------------------------------------\n\nTITLE: Accessing Filesystem Disks in PHP (Flarum)\nDESCRIPTION: Example of how to access and use filesystem disks in Flarum, demonstrated through the DeleteLogoController class. It shows dependency injection of the filesystem factory and disk usage for file operations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/filesystem.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Api\\Controller;\n\nuse Flarum\\Http\\RequestUtil;\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Illuminate\\Contracts\\Filesystem\\Factory;\nuse Illuminate\\Contracts\\Filesystem\\Filesystem;\nuse Laminas\\Diactoros\\Response\\EmptyResponse;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nclass DeleteLogoController extends AbstractDeleteController\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    /**\n     * @var Filesystem\n     */\n    protected $uploadDir;\n\n    /**\n     * @param SettingsRepositoryInterface $settings\n     * @param Factory $filesystemFactory\n     */\n    public function __construct(SettingsRepositoryInterface $settings, Factory $filesystemFactory)\n    {\n        $this->settings = $settings;\n        $this->uploadDir = $filesystemFactory->disk('flarum-assets');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function delete(ServerRequestInterface $request)\n    {\n        RequestUtil::getActor($request)->assertAdmin();\n\n        $path = $this->settings->get('logo_path');\n\n        $this->settings->set('logo_path', null);\n\n        if ($this->uploadDir->exists($path)) {\n            $this->uploadDir->delete($path);\n        }\n\n        return new EmptyResponse(204);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Optional Dependencies in composer.json\nDESCRIPTION: This JSON snippet shows how to specify optional dependencies in the composer.json file under the extra section. It instructs Flarum to boot the extension after the specified optional dependencies.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"extra\": {\n    \"flarum-extension\": {\n      \"optional-dependencies\": [\n        \"flarum/tags\"\n      ]\n    }\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using Laravel View Factory in PHP\nDESCRIPTION: This PHP example shows how to use Laravel's View factory within a Flarum extension controller to render a Blade template. It involves setting the view namespace and rendering HTML responses.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views');\n];\n```\n\nLANGUAGE: php\nCODE:\n```\nclass HelloWorldController implements RequestHandlerInterface\n{\n    protected $view;\n\n    public function __construct(Factory $view)\n    {\n        $this->view = $view;\n    }\n\n    public function handle(Request $request): Response\n    {\n        $view = $this->view->make('acme.hello-world::greeting');\n\n        return new HtmlResponse($view->render());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Discussions in Flarum REST API\nDESCRIPTION: This snippet shows the response structure when listing discussions using the GET /api/discussions endpoint. It includes pagination links, discussion data with attributes and relationships, and included resources.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"links\": {\n    \"first\": \"https://flarum.tld/api/discussions\",\n    \"next\": \"https://flarum.tld/api/discussions?page%5Boffset%5D=20\"\n  },\n  \"data\": [\n    {\n      \"type\": \"discussions\",\n      \"id\": \"234\",\n      \"attributes\": {\n        \"title\": \"Lorem Ipsum\",\n        \"slug\": \"234-lorem-ipsum\",\n        \"commentCount\": 10,\n        \"participantCount\": 3,\n        \"createdAt\": \"2022-01-01T10:20:30+00:00\",\n        \"lastPostedAt\": \"2022-01-05T10:20:30+00:00\",\n        \"lastPostNumber\": 10,\n        \"canReply\": true,\n        \"canRename\": true,\n        \"canDelete\": true,\n        \"canHide\": true,\n        \"isHidden\": true,\n        \"hiddenAt\": \"2022-01-06T10:20:30+00:00\",\n        \"lastReadAt\": \"2022-01-02T10:20:30+00:00\",\n        \"lastReadPostNumber\": 2,\n        \"isApproved\": true,\n        \"canTag\": true,\n        \"isLocked\": false,\n        \"canLock\": true,\n        \"isSticky\": false,\n        \"canSticky\": true,\n        \"canMerge\": true,\n        \"subscription\": null\n      },\n      \"relationships\": {\n        \"user\": {\n          \"data\": {\n            \"type\": \"users\",\n            \"id\": \"1\"\n          }\n        },\n        \"lastPostedUser\": {\n          \"data\": {\n            \"type\": \"users\",\n            \"id\": \"64\"\n          }\n        },\n        \"tags\": {\n          \"data\": [\n            {\n              \"type\": \"tags\",\n              \"id\": \"3\"\n            }\n          ]\n        },\n        \"firstPost\": {\n          \"data\": {\n            \"type\": \"posts\",\n            \"id\": \"668\"\n          }\n        }\n      }\n    },\n    {\n      \"type\": \"discussions\",\n      \"id\": \"234\",\n      \"attributes\": {\n        // [...]\n      },\n      \"relationships\": {\n        // [...]\n      }\n    },\n    // [...] more discussions\n  ],\n  \"included\": [\n    {\n      \"type\": \"users\",\n      \"id\": \"1\",\n      \"attributes\": {\n        \"username\": \"Admin\",\n        \"displayName\": \"Admin\",\n        \"avatarUrl\": null,\n        \"slug\": \"1\"\n      }\n    },\n    {\n      \"type\": \"users\",\n      \"id\": \"64\",\n      \"attributes\": {\n        \"username\": \"Flarum\",\n        \"displayName\": \"Flarum\",\n        \"avatarUrl\": \"https://flarum.tld/assets/avatars/Z4hEncw0ndVqZ8be.png\",\n        \"slug\": \"64\"\n      }\n    },\n    {\n      \"type\": \"tags\",\n      \"id\": \"3\",\n      \"attributes\": {\n        \"name\": \"Welcome\",\n        \"description\": \"Post interesting things here\",\n        \"slug\": \"welcome\",\n        \"color\": \"#888\",\n        \"backgroundUrl\": null,\n        \"backgroundMode\": null,\n        \"icon\": \"fas fa-bullhorn\",\n        \"discussionCount\": 30,\n        \"position\": 1,\n        \"defaultSort\": null,\n        \"isChild\": false,\n        \"isHidden\": false,\n        \"lastPostedAt\": \"2022-01-05T10:20:30+00:00\",\n        \"canStartDiscussion\": true,\n        \"canAddToDiscussion\": true,\n        \"isRestricted\": false\n      }\n    },\n    {\n      \"type\": \"posts\",\n      \"id\": \"668\",\n      \"attributes\": {\n        \"number\": 1,\n        \"createdAt\": \"2022-01-01T10:20:30+00:00\",\n        \"contentType\": \"comment\",\n        \"contentHtml\": \"<p>Hello World</p>\"\n      }\n    },\n    // [...] more includes for the other discussions\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing PHPStan Cache and Running Analysis\nDESCRIPTION: Command to clear the PHPStan cache and then run the static analysis on a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer clear-cache:phpstan && composer analyse:phpstan\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Flarum Commands in XML Format\nDESCRIPTION: Example of using the help command with a specific format option to display command information in XML.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum help --format=xml list\n```\n\n----------------------------------------\n\nTITLE: Resetting Extension Migrations\nDESCRIPTION: Resets all migrations for a specific extension, useful for developers or when removing an extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum migrate:reset --extension [extension_id]\n```\n\n----------------------------------------\n\nTITLE: Using Illuminate Support String Slug in PHP\nDESCRIPTION: Example of using the Illuminate\\Support\\Str::slug() method as a replacement for the removed Flarum\\Util\\Str::slug() method.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b13.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nIlluminate\\Support\\Str::slug()\n```\n\n----------------------------------------\n\nTITLE: PHP Class Reference - Foundation Config\nDESCRIPTION: Reference to the Config class namespace for URL configuration\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nFlarum\\Foundation\\Config\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub Actions with Flarum CLI\nDESCRIPTION: Command to use Flarum CLI for automatically adding and updating GitHub Actions workflows in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra githubActions\n```\n\n----------------------------------------\n\nTITLE: Field Validation Configuration in Flarum API\nDESCRIPTION: Shows various validation rules and constraints that can be applied to API fields\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\npublic function fields(): array\n{\n    return [\n        Schema\\Str::make('name')\n            ->rule('ruleName')\n            ->rule('ruleName', false) // will not apply\n            ->rule('ruleName', function (Context $context, ?Label $model) {\n                return // if the rule should apply.\n            })\n            ->rule(function (Context $context) {\n                return function ($attribute, $value, $fail) {\n                    if ($value !== 'foo') {\n                        $fail('The '.$attribute.' must be foo.');\n                    }\n                };\n            }, $condition),\n    \n    \n        Schema\\Str::make('name')\n            ->requiredOnCreate() // only required when creating a new model.\n            ->maxLength(255),\n        Schema\\Str::make('slug')\n            ->required() // required on both create and update.\n            ->unique('labels', 'slug', true) // unique in the labels table, ignoring the current model.\n            ->regex('/^[^\\/\\\\ ]*$/i'), // must match the regex.\n        Schema\\Str::make('color')\n            ->rule('hex_color'),\n        Schema\\Number::make('price')\n            ->min(1)\n            ->max(100),\n        Schema\\DateTime::make('createdAt')\n            ->before('2022-01-01')\n            ->after('2021-01-01'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Request Forwarding in Middleware\nDESCRIPTION: Demonstrates the simple pattern for passing a request to the next middleware in the chain.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn $handler->handle($request);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Events in PHP\nDESCRIPTION: Demonstrates how to create a custom event class in Flarum, using the Deleted event from the Post namespace as an example.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Post\\Event;\n\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass Deleted\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var User\n     */\n    public $actor;\n\n    /**\n     * @param Post $post\n     * @param User $user\n     */\n    public function __construct(Post $post, User $actor = null)\n    {\n        $this->post = $post;\n        $this->actor = $actor;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Global Flarum Update Command\nDESCRIPTION: This command updates all packages in the Flarum installation, useful for global updates across the entire application.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/internal/extension-manager.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncommand update --prefer-dist --no-dev -a --with-all-dependencies\n```\n\n----------------------------------------\n\nTITLE: Accessing URL Generator in PHP\nDESCRIPTION: Example showing the updated way to access URL generation functionality by injecting Flarum\\Http\\UrlGenerator instead of using the deprecated app()->url() method.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\napp()->url() // OLD - Deprecated\\nFlarum\\Http\\UrlGenerator // NEW - Should be injected\n```\n\n----------------------------------------\n\nTITLE: Adding Default Settings in Flarum Migration\nDESCRIPTION: Example of adding default settings using a data migration in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addSettings([\n    'foo' => 'bar',\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Resolvers in Flarum\nDESCRIPTION: Examples of different ways to configure route resolvers in Flarum, including using a resolver instance, a custom resolver class, or the default resolver class.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// See above for a custom page example\nimport CustomPage from './components/CustomPage';\n// See below for a custom resolver example\nimport CustomPageResolver from './resolvers/CustomPageResolver';\n\n// Use a route resolver instance\napp.routes['resolverInstance'] = {path: '/custom/path/1', resolver: {\n  onmatch: function(args) {\n    if (!app.session.user) return m.route.SKIP;\n\n    return CustomPage;\n  }\n}};\n\n// Use a custom route resolver class\napp.routes['resolverClass'] = {path: '/custom/path/2', resolverClass: CustomPageResolver, component: CustomPage};\n\n// Use the default resolver class (`flarum/common/resolvers/DefaultResolver`)\napp.routes['resolverClass'] = {path: '/custom/path/2', component: CustomPage};\n```\n\n----------------------------------------\n\nTITLE: Running Flarum Scheduled Tasks\nDESCRIPTION: Command to run scheduled tasks for Flarum extensions. This should be set up as a cron job to run at regular intervals.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/console.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * cd /path-to-your-flarum-install && php flarum schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Using Flarum CLI to Add GitHub Actions\nDESCRIPTION: Command to use the Flarum CLI for automatically adding and updating GitHub Actions workflows in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra githubActions\n```\n\n----------------------------------------\n\nTITLE: Validation Errors in Flarum REST API\nDESCRIPTION: This snippet demonstrates the structure of validation error responses in Flarum's REST API. It shows multiple validation errors for different fields, each with a 422 HTTP status code and detailed error messages.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"422\",\n      \"code\": \"validation_error\",\n      \"detail\": \"The username has already been taken.\",\n      \"source\":{\n        \"pointer\":\"\\/data\\/attributes\\/username\"\n      }\n    },\n    {\n      \"status\": \"422\",\n      \"code\": \"validation_error\",\n      \"detail\": \"The email has already been taken.\",\n      \"source\": {\n        \"pointer\":\"\\/data\\/attributes\\/email\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Apache .htaccess Configuration\nDESCRIPTION: Apache server configuration to enable .htaccess overrides for Flarum URL rewriting.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/install.md#2025-04-16_snippet_2\n\nLANGUAGE: apache\nCODE:\n```\n<Directory \"/path/to/flarum/public\">\n    AllowOverride All\n</Directory>\n```\n\n----------------------------------------\n\nTITLE: Adding Views in Flarum using Extend\\View\nDESCRIPTION: This snippet demonstrates how to add a new view namespace to Flarum using the Extend\\View extender. It tells the view factory where to find the extension's view files.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/views.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views'),\n];\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis\nDESCRIPTION: Command to execute PHPStan analysis on the extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer analyse:phpstan\n```\n\n----------------------------------------\n\nTITLE: Running Flarum Database Migration Command\nDESCRIPTION: Command to update the database schema to the latest version, resolving issues related to outdated database structure.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/troubleshoot.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum migrate\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flarum Integration Test Case in PHP\nDESCRIPTION: This snippet demonstrates how to set up a Flarum integration test case, including setting up the database, enabling extensions, and configuring settings. It shows the usage of various TestCase methods like setting(), extension(), and prepareDatabase().\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    use RetrievesAuthorizedUsers;\n\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        $this->setting('my.custom.setting', true);\n\n        $this->extension('flarum-tags', 'my-cool-extension');\n\n        $this->prepareDatabase([\n            'users' => [\n                $this->normalUser()\n            ],\n            'discussions' => [\n                ['id' => 1, 'title' => 'some title', 'created_at' => Carbon::now(), 'last_posted_at' => Carbon::now(), 'user_id' => 1, 'first_post_id' => 1, 'comment_count' => 1]\n            ],\n            'posts' => [\n                ['id' => 1, 'number' => 1, 'discussion_id' => 1, 'created_at' => Carbon::now(), 'user_id' => 1, 'type' => 'comment', 'content' => '<t><p>something</p></t>']\n            ]\n        ]);\n\n        $this->extend((new CoolExtensionExtender)->doSomething('hello world'));\n    }\n\n    /**\n     * @test\n     */\n    public function some_phpunit_test_case()\n    {\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis\nDESCRIPTION: Commands for running PHPStan analysis and clearing its cache\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer analyse:phpstan\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer clear-cache:phpstan && composer analyse:phpstan\n```\n\n----------------------------------------\n\nTITLE: Legacy Closure Extender Example in PHP\nDESCRIPTION: Example of the deprecated closure-based extension pattern from early Flarum versions that allowed arbitrary code execution on extension boot.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\FilterDiscussionListByTags::class);\n        $events->subscribe(Listener\\FilterPostsQueryByTag::class);\n        $events->subscribe(Listener\\UpdateTagMetadata::class);\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Deprecated Closure Extender Example in PHP\nDESCRIPTION: An example of a deprecated closure-based extension approach that was used in early Flarum versions. This pattern allowed execution of arbitrary code on extension boot, but has been removed in Flarum 1.0 in favor of the extender API.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\FilterDiscussionListByTags::class);\n        $events->subscribe(Listener\\FilterPostsQueryByTag::class);\n        $events->subscribe(Listener\\UpdateTagMetadata::class);\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Referencing Translation Key Format in Flarum\nDESCRIPTION: This snippet refers to the standard key format used for naming translation keys in Flarum, linking to more detailed documentation.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/contributing.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Translations\n\nWe use a [standard key format](/extend/i18n.md#appendix-a-standard-key-format) to name translation keys descriptively and consistently.\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Gambit and Search Mutator in Flarum\nDESCRIPTION: This snippet demonstrates how to register the custom CountryGambit and OnlySameCountrySearchMutator using the SimpleFlarumSearch extender in Flarum. It shows the configuration for adding these components to the UserSearcher.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\SimpleFlarumSearch(UserSearcher::class))\n    ->addGambit(CountryGambit::class)\n    ->addSearchMutator(OnlySameCountrySearchMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Name in PHP Controllers and Middleware\nDESCRIPTION: Shows how to retrieve the route name from a request in PHP controllers and middleware that run after ResolveRoute.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b15.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$routeName = $request->getAttribute('routeName');\n```\n\n----------------------------------------\n\nTITLE: Referencing Flarum Theme Extender in Markdown\nDESCRIPTION: This snippet references the new Theme extender in Flarum, which allows for overriding Less files and internal imports. It includes a link to the GitHub pull request where this feature was implemented.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-1_x.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Theme](https://github.com/flarum/core/pull/3008)\n```\n\n----------------------------------------\n\nTITLE: Getting Flarum System Information\nDESCRIPTION: Command to retrieve information about Flarum's core and installed extensions, useful for debugging issues.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/console.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum info\n```\n\n----------------------------------------\n\nTITLE: Create User Request\nDESCRIPTION: Example of creating a new user via POST /api/users endpoint, showing the required user attributes in the request payload.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"attributes\": {\n      \"username\": \"Flarum\",\n      \"email\": \"flarum@example.com\",\n      \"password\": \"correcthorsebatterystaple\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PHPStan Configuration for Flarum\nDESCRIPTION: Provides a sample PHPStan configuration file for Flarum. Includes paths to analyze, exclusion patterns, and relevant parameters. Adjust according to specific project needs. Requires PHPStan for usage.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_2\n\nLANGUAGE: neon\nCODE:\n```\nincludes:\n  - vendor/flarum/phpstan/extension.neon\n\nparameters:\n  # The level will be increased in Flarum 2.0\n  level: 5\n  paths:\n    - src\n    - extend.php\n  excludePaths:\n    - *.blade.php\n  checkMissingIterableValueType: false\n  databaseMigrationsPath: ['migrations']\n```\n\n----------------------------------------\n\nTITLE: Global Flarum Update Command\nDESCRIPTION: Command to update all packages in the Flarum installation with their dependencies.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/internal/extension-manager.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncommand update --prefer-dist --no-dev -a --with-all-dependencies\n```\n\n----------------------------------------\n\nTITLE: Rendering Blade Templates in PHP\nDESCRIPTION: Demonstrates how to render Blade templates using the view factory, with optional variable passing\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/views.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, $view is of type `Illuminate\\Contracts\\View\\Factory`\n$renderedString = $view->make('acme.hello-world::greeting')->render();\n\n// You can also pass variables to the view:\n$renderedString = $view->make('acme.hello-world::greeting', ['varName' => true])->render();\n```\n\n----------------------------------------\n\nTITLE: Registering New Frontend Model with Store Extender in JavaScript\nDESCRIPTION: This code demonstrates how to register a new frontend model (Tag) with Flarum's store using the Store extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Store()\n    .add('tags', Tag),\n];\n```\n\n----------------------------------------\n\nTITLE: Adjusting Data Before Serialization in PHP API Controller\nDESCRIPTION: This code shows how to use the ApiController extender to modify data before it's serialized in the API response, such as loading additional relations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillSerializeData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->prepareDataForSerialization(function ($controller, $data, $request, $document) {\n            $data->load('myCustomRelation');\n        }),\n]\n```\n\n----------------------------------------\n\nTITLE: Backend Workflow Configuration\nDESCRIPTION: YAML configuration for setting up backend testing workflows in Flarum extensions, including PHPUnit tests and static code analysis options.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/github-actions.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Backend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_backend.yml@main\n    with:\n      # Different types of jobs\n      enable_backend_testing: true\n      enable_phpstan: false\n\n      # Additional parameters\n      backend_directory: .\n```\n\n----------------------------------------\n\nTITLE: State Pattern Implementation with POJO in Flarum\nDESCRIPTION: Demonstrates the state pattern using a Plain Old JavaScript Object (POJO) for sharing state between unrelated components. This pattern is used throughout Flarum core for components that need to share state.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nclass Counter {\n  constructor() {\n    this._counter = 0;\n  }\n\n  increaseCounter() {\n    this._counter += 1;\n  }\n\n  getCount() {\n    return this._counter;\n  }\n}\n\napp.counter = new Counter();\n\nextend(HeaderSecondary.prototype, 'items', function(items) {\n  items.add('counterDisplay',\n    <div>\n      <p>Counter: {app.counter.getCount()}</p>\n    </div>\n  );\n})\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('counterButton',\n    <div>\n      <button onclick={() => app.counter.increaseCounter()}>Increase Counter</button>\n    </div>\n  );\n})\n```\n\n----------------------------------------\n\nTITLE: Opening Crontab Editor\nDESCRIPTION: Command to open the crontab editor for adding new cron jobs.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/scheduler.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncrontab -e\n```\n\n----------------------------------------\n\nTITLE: Using Illuminate Support Str Slug in PHP\nDESCRIPTION: Replace the deprecated Flarum\\Util\\Str::slug() method with Illuminate\\Support\\Str::slug() for generating slugs in PHP.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n$slug = Str::slug($string);\n```\n\n----------------------------------------\n\nTITLE: Implementing SlugDriver Interface in PHP for Flarum Model Slugging\nDESCRIPTION: This code snippet demonstrates how to implement the SlugDriver interface in PHP for Flarum model slugging. It includes methods for generating and validating slugs.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/slugging.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Database\\AbstractModel;\nuse Flarum\\Http\\SlugManager;\n\ninterface SlugDriver\n{\n    public function toSlug(AbstractModel $instance): string;\n\n    public function fromSlug(string $slug, SlugManager $slugManager): AbstractModel;\n\n    public function getSlugGenerator(): callable;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Proper Namespace for Library Classes\nDESCRIPTION: Deprecated use of 'Zend' namespace in favor of 'Laminas' namespace, which will be required in beta.13.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUsing library classes from the `Zend` namespace is now deprecated and will be removed in beta.13. Use the `Laminas` namespace instead.\n```\n\n----------------------------------------\n\nTITLE: Registering View Directory in Flarum\nDESCRIPTION: Shows how to register a directory containing view files with Flarum's view factory using the View extender. This is required to make your extension's view files accessible to the system.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/views.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views'),\n];\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub Actions via Flarum CLI\nDESCRIPTION: Command to automatically add and update GitHub Actions workflows using the Flarum CLI tool\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/github-actions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra githubActions\n```\n\n----------------------------------------\n\nTITLE: Creating YAML Literal Block for Multiline Translations\nDESCRIPTION: Shows how to use YAML literal blocks for multiline translations in Flarum locale files.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/i18n.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nliteral_block_text: |\n  These lines will be displayed as shown here, line breaks and all.\n\n      Extra indentation is also preserved: this line will be indented 4 spaces!\n\n  Quote marks are unnecessary, even when the block contains special characters.\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Subscriber in Flarum (PHP)\nDESCRIPTION: Shows how to create an event subscriber that listens to multiple events in a Flarum extension, useful for grouping common functionality.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Flarum\\Post\\Event\\Saving;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->subscribe(PostEventSubscriber::class),\n];\n```\n\nLANGUAGE: php\nCODE:\n```\nclass PostEventSubscriber\n{\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    public function subscribe($events)\n    {\n        $events->listen(Deleted::class, [$this, 'handleDeleted']);\n        $events->listen(Saving::class, [$this, 'handleSaving']);\n    }\n\n    public function handleDeleted(Deleted $event)\n    {\n        // Your logic here\n    }\n\n    public function handleSaving(Saving $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Table in Flarum Migration\nDESCRIPTION: Using the Migration::createTable helper to create a new database table in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Database\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\n\nreturn Migration::createTable('users', function (Blueprint $table) {\n    $table->increments('id');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in Flarum Migrations\nDESCRIPTION: Example of using Flarum's Migration helper to create a new database table with defined columns. The example shows how to create a 'users' table with an auto-incrementing ID.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Database\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\n\nreturn Migration::createTable('users', function (Blueprint $table) {\n    $table->increments('id');\n});\n```\n\n----------------------------------------\n\nTITLE: Deprecated Closure Extender in PHP\nDESCRIPTION: An example of a deprecated closure extender that subscribes event listeners. This approach is no longer supported in Flarum 1.0.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\FilterDiscussionListByTags::class);\n        $events->subscribe(Listener\\FilterPostsQueryByTag::class);\n        $events->subscribe(Listener\\UpdateTagMetadata::class);\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Opening Crontab Editor\nDESCRIPTION: Command to open the crontab editor for configuring scheduled tasks.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/scheduler.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncrontab -e\n```\n\n----------------------------------------\n\nTITLE: Installing Local Flarum Extension\nDESCRIPTION: Command to install a local Flarum extension using Composer.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/start.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require acme/flarum-hello-world *@dev\n```\n\n----------------------------------------\n\nTITLE: Updated Component Attribute Pattern\nDESCRIPTION: Demonstrates the new recommended pattern for passing data between components using attributes instead of storing instances.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass ChildComponent extends Component {\n  view() {\n    return <p>{this.attrs.counter}</p>;\n  }\n}\n\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.counter += 1}></button>\n        <ChildComponent counter={this.counter}></ChildComponent>\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Frontend Routes in JavaScript for Flarum\nDESCRIPTION: Example of how to define a frontend route with parameters using the Routes extender in JavaScript for a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n  new Extend.Routes()\n    .add('acme.user', '/user/:id', <UsersPage />)\n```\n\n----------------------------------------\n\nTITLE: Sortmap Implementation Comparison - PHP 1.x vs 2.x\nDESCRIPTION: Compares the implementation of discussion sortmaps between Flarum 1.x and 2.x, showing both container-based and resource-based approaches.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0-api.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n// 1.x Implementation\n(new Extend\\ApiController(Controller\\ListDiscussionsController::class))\n    ->addSortField('hotness')\n    ->addSortField('votes'),\n\nclass CustomServiceProvider extends AbstractServiceProvider\n{\n    public function register()\n    {\n        $this->container->extend('flarum.forum.discussions.sortmap', function (array $options) {\n            return array_merge($options, [\n                'votes' => '-votes',\n                'hot'   => '-hotness',\n            ]);\n        });\n    }\n}\n\n// 2.x Implementation\n(new Extend\\ApiResource(Resource\\DiscussionResource::class))\n    ->sorts(fn () => [\n        SortColumn::make('votes')\n            ->descendingAlias('votes'),\n        SortColumn::make('hotness')\n            ->descendingAlias('hot'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Clearing Flarum Cache\nDESCRIPTION: Clears the backend cache including generated JS/CSS, text formatter cache, and cached translations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum cache:clear\n```\n\n----------------------------------------\n\nTITLE: Adding PHPStan Scripts to composer.json\nDESCRIPTION: JSON snippet to add PHPStan analysis and cache clearing scripts to the composer.json file of a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"analyse:phpstan\": \"phpstan analyse\",\n    \"clear-cache:phpstan\": \"phpstan clear-result-cache\"\n  },\n  \"scripts-descriptions\": {\n    \"analyse:phpstan\": \"Run static analysis\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Color Preview Implementation\nDESCRIPTION: Shows how to register a color preview setting in Flarum extensions using extensionData API\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-1_x.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.extensionData.registerSetting\n```\n\n----------------------------------------\n\nTITLE: Composer Update Error Output\nDESCRIPTION: Example output when encountering dependency conflicts during Flarum update process.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/update.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNothing to modify in lock file\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Internal Docs Page\nDESCRIPTION: YAML frontmatter that specifies the URL slug for the internal documentation page.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/internal/README.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nslug: '/internal'\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Country Gambit in PHP\nDESCRIPTION: Implements a regex-based search gambit for filtering users by country using Flarum's AbstractRegexGambit. Allows searching and negating country-based queries in the user search.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/search.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Search\\AbstractRegexGambit;\nuse Flarum\\Search\\SearchState;\n\nclass CountryGambit extends AbstractRegexGambit\n{\n    public function getGambitPattern(): string\n    {\n        return 'country:(.+)';\n    }\n\n    public function conditions(SearchState $search, array $matches, bool $negate)\n    {\n        $country = trim($matches[1], '\"');\n\n        $search->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending View Namespace in PHP\nDESCRIPTION: This PHP snippet demonstrates how to register a custom namespace for Blade templates in a Flarum extension. The 'Extend\\View' is used to associate a directory with a namespace, enabling organized management of template files.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/views.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views'),\n];\n```\n\n----------------------------------------\n\nTITLE: PHP Middleware Extender Implementation\nDESCRIPTION: New PHP extender for configuring middleware in Flarum's three middleware stacks (api, forum, admin)\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b12.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Flarum\\Extend\\Middleware;\n\n$middleware = new Middleware();\n$middleware->add($middleware);\n$middleware->remove($middleware);\n$middleware->replace($oldMiddleware, $newMiddleware);\n```\n\n----------------------------------------\n\nTITLE: Switching Between Flarum CLI Versions in Bash\nDESCRIPTION: Command to switch between version 2 and 3 of the Flarum CLI using the change function.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/cli.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfl flarum change\n```\n\n----------------------------------------\n\nTITLE: Colored Header CSS Selector Migration (LESS)\nDESCRIPTION: Example showing migration from LESS conditional variables to CSS data attribute selectors for colored header styling.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0.md#2025-04-16_snippet_9\n\nLANGUAGE: less\nCODE:\n```\n// before\n& when (@config-colored-header = true) {\n  background: @primary-color;\n}\n\n// after\n[data-colored-header=true] & {\n  background: var(--primary-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Request in PHP Middleware\nDESCRIPTION: This snippet is a simple example demonstrating how to pass an HTTP request to the next middleware in the chain without returning a custom response. It's a fundamental operation in middleware implementations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nreturn $handler->handle($request);\n```\n\n----------------------------------------\n\nTITLE: Implementing List Resources Controller in PHP\nDESCRIPTION: Example of a controller that lists resources by extending AbstractListController with serializer specification and data method implementation\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractListController;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass ListTagsController extends AbstractListController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        return Tag::all();\n    }\n```\n\n----------------------------------------\n\nTITLE: Opening Crontab Editor\nDESCRIPTION: Command to open the crontab editor for adding or modifying cron jobs.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/scheduler.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncrontab -e\n```\n\n----------------------------------------\n\nTITLE: PHP Class Name Changes\nDESCRIPTION: Updated namespace paths for core Flarum classes reflecting architectural changes in Beta 10.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b10.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nFlarum\\User\\Event\\GetDisplayName          // New path\nFlarum\\Event\\GetDisplayName                  // Old path\n\nFlarum\\User\\Exception\\PermissionDeniedException  // New path\nFlarum\\Http\\Exception\\ForbiddenException        // Old path (removed)\n```\n\n----------------------------------------\n\nTITLE: Displaying Help in XML Format for Flarum List Command\nDESCRIPTION: Command to display help for the 'list' command in XML format, demonstrating the use of the --format option.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/console.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum help --format=xml list\n```\n\n----------------------------------------\n\nTITLE: Using Global Functions in PHP Extenders for Flarum Beta 16\nDESCRIPTION: Example of using global functions in PHP extenders, which is now supported in Flarum Beta 16. This allows for more flexible callback definitions in extenders.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Using a global function as a callback\n$extender->add('someExtender', 'boolval');\n\n// Using an array-type function as a callback\n$extender->add('someExtender', [ClassName::class, 'methodName']);\n```\n\n----------------------------------------\n\nTITLE: Less Variable CSS Implementation\nDESCRIPTION: Example of using CSS custom properties instead of Less variables for theme customization in Flarum 1.2+.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-1_x.md#2025-04-16_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\napp.extensionData.registerSetting\n```\n\n----------------------------------------\n\nTITLE: Updating Redraw Prevention in Event Handlers\nDESCRIPTION: Shows how to update the syntax for preventing automatic redraws after DOM events in Mithril 2.0.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\n<button onclick={() => {\n  console.log(\"Hello world\");\n  m.redraw.strategy('none');\n}>\n  Click Me!\n</button>\n\n// Mithril 2\n<button onclick={e => {\n  console.log(\"Hello world\");\n  e.redraw = false;\n}>\n  Click Me!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend JavaScript in Flarum Extension\nDESCRIPTION: Example of using Frontend extender to load JavaScript files into Flarum's frontend from an extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n];\n```\n\n----------------------------------------\n\nTITLE: Response Modification in Middleware\nDESCRIPTION: Shows how to modify the response after the initial request handling, demonstrating header modification.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    $response = $handler->handle($request);\n\n    // Your logic...\n    $response = $response->withHeader('Content-Type', 'application/json');\n\n    return $response;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Internal Link Definitions in JavaScript for Mithril 2.0\nDESCRIPTION: This snippet demonstrates how to update internal link definitions when migrating from Mithril 0.2 to Mithril 2.0. It shows the change from using 'config={m.route}' to using the new 'Link' component.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\n<a href=\"/path\" config={m.route}>Link Content</a>\n\n// Mithril 2\nimport Link from 'flarum/components/Link';\n\n<Link href=\"/path\">Link Content</Link>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Event Classes in PHP\nDESCRIPTION: Demonstrates how to create a custom event class in Flarum, using the Deleted event as an example.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Post\\Event;\n\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass Deleted\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var User\n     */\n    public $actor;\n\n    /**\n     * @param Post $post\n     * @param User $user\n     */\n    public function __construct(Post $post, User $actor = null)\n    {\n        $this->post = $post;\n        $this->actor = $actor;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Seeding Records with Fixed IDs in PostgreSQL\nDESCRIPTION: Demonstrates how to properly seed records with pre-defined IDs in PostgreSQL. PostgreSQL requires manually updating the sequence counter after inserting records with explicit IDs to prevent conflicts with future auto-incremented values.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/database.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    'up' => function (Builder $schema) {\n        $db = $schema->getConnection();\n\n        $groups = [\n            [Group::ADMINISTRATOR_ID, 'Admin', 'Admins', '#B72A2A', 'fas fa-wrench'],\n            [Group::GUEST_ID, 'Guest', 'Guests', null, null],\n            [Group::MEMBER_ID, 'Member', 'Members', null, null],\n            [Group::MODERATOR_ID, 'Mod', 'Mods', '#80349E', 'fas fa-bolt']\n        ];\n\n        foreach ($groups as $group) {\n            if ($db->table('groups')->where('id', $group[0])->exists()) {\n                continue;\n            }\n\n            $db->table('groups')->insert(array_combine(['id', 'name_singular', 'name_plural', 'color', 'icon'], $group));\n        }\n\n        // PgSQL doesn't auto-increment the sequence when inserting the IDs manually.\n        if ($db->getDriverName() === 'pgsql') {\n            $table = $db->getSchemaGrammar()->wrapTable('groups');\n            $seq = $db->getSchemaGrammar()->wrapTable('groups_id_seq');\n            $db->statement(\"SELECT setval('$seq', (SELECT MAX(id) FROM $table))\");\n        }\n    },\n```\n\n----------------------------------------\n\nTITLE: Importing Extension Classes in PHP\nDESCRIPTION: Example of importing and using classes from other Flarum extensions in PHP code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Tags\\Tag;\n\nclass SomeClass\n{\n    public function someMethod()\n    {\n        return new Tag();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Frontend Components in Flarum Extension\nDESCRIPTION: Demonstrates how to export classes or functions from a Flarum extension's frontend for use by other extensions. This allows other extensions to reuse or modify the exported components using Flarum's extend/override utilities.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/extensibility.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('your-extension-id', () => {\n  // Your Extension Code Here\n})\n\nexport {\n  // Put all the stuff you want to export here.\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled Prop for Select Component\nDESCRIPTION: The JavaScript Select component now supports a 'disabled' prop for indicating disabled state.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n  - The `flarum/components/Select` component now supports a `disabled` prop.\n```\n\n----------------------------------------\n\nTITLE: Adding PHPStan Scripts to Composer Configuration\nDESCRIPTION: JSON snippet to add PHPStan analysis and cache clearing scripts to the composer.json file of a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"analyse:phpstan\": \"phpstan analyse\",\n    \"clear-cache:phpstan\": \"phpstan clear-result-cache\"\n  },\n  \"scripts-descriptions\": {\n    \"analyse:phpstan\": \"Run static analysis\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Google Link to Flarum Header with Mithril.js\nDESCRIPTION: Demonstrates how to extend Flarum's UI by adding a custom link to Google in the header using Mithril.js components and the extend utility for modifying existing components.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend } from 'flarum/extend';\nimport HeaderPrimary from 'flarum/components/HeaderPrimary';\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Valid Access Tokens in PHP\nDESCRIPTION: Shows the new recommended methods for finding valid access tokens. This change improves security by automatically scoping requests to valid tokens only.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nAccessToken::findValid($tokenString)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nAccessToken::whereValid()\n```\n\n----------------------------------------\n\nTITLE: Second-level Translation Namespaces in YAML\nDESCRIPTION: Examples of second-level namespaces in Flarum's translation system. These identify which interface uses the translation, such as admin panel or forum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:       # Translations used by the admin interface.\nforum:       # Translations used by the forum user interface.\nlib:         # Translations used by either of the above.\nviews:       # Translations used outside the normal JS client.\napi:         # Translations used in messages output by the API.\nemail:       # Translations used in emails sent by Flarum.\n```\n\n----------------------------------------\n\nTITLE: Extension Dependencies in composer.json\nDESCRIPTION: Example of specifying Flarum extension dependencies in composer.json\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my/extension\",\n  \"description\": \"Cool New Extension\",\n  \"type\": \"flarum-extension\",\n  \"license\": \"MIT\",\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.14\",\n    \"flarum/tags\": \"^0.1.0-beta.14\",\n    \"flarum/mentions\": \"^0.1.0-beta.14\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Composer Version\nDESCRIPTION: This command checks the installed version of Composer, which is important for ensuring compatibility with Flarum updates.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/update.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer --version\n```\n\n----------------------------------------\n\nTITLE: Flarum Scheduler Cron Entry\nDESCRIPTION: Cron entry that runs the Flarum scheduler every minute. This command changes to the project directory and executes the scheduler while suppressing output.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/scheduler.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * cd /path-to-your-project && php flarum schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Registering a Notification Type in Flarum with PHP\nDESCRIPTION: This snippet shows how to register a notification type using the Notification extender. The example from Flarum Subscriptions demonstrates registering a NewPostBlueprint that sends both alerts and emails by default.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Api\\Serializer\\BasicDiscussionSerializer;\nuse Flarum\\Extend\nuse Flarum\\Subscriptions\\Notification\\NewPostBlueprint;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->type(NewPostBlueprint::class, BasicDiscussionSerializer::class, ['alert', 'email']),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Listing Scheduled Commands\nDESCRIPTION: Displays a list of all scheduled commands registered by Flarum and its extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum schedule:list\n```\n\n----------------------------------------\n\nTITLE: Custom Post Visibility Policy Example in PHP\nDESCRIPTION: Implementation example showing how to handle private post visibility in Flarum's PostPolicy, demonstrating the pattern of combining base rules with extension override capabilities.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Aquí queremos asegurarnos de que las publicaciones privadas no sean visibles para los usuarios por defecto.\n// La forma más simple de hacer esto sería:\n$query->where('posts.is_private', false);\n\n// Sin embargo, reconocemos que algunas extensiones podrían tener casos de uso válidos para mostrar publicaciones privadas.\n// Así que en su lugar, incluimos todos los mensajes que no son privados, Y todos los mensajes privados deseados por las extensiones. $query->where(function ($query) use ($actor) {\n    $query->where('posts.is_private', false)\n        ->orWhere(function ($query) use ($actor) {\n            $query->whereVisibleTo($actor, 'viewPrivate');\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Routes in PHP\nDESCRIPTION: Demonstrates how to add routes to Flarum's backend using the Routes extender. This example adds a GET route to the 'forum' collection.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/routes.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\nuse Acme\\HelloWorld\\HelloWorldController;\n\nreturn [\n    (new Extend\\Routes('forum'))\n        ->get('/hello-world', 'acme.hello-world', HelloWorldController::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Frontend Unit Testing Example with Jest in Flarum\nDESCRIPTION: Example of a unit test for the abbreviateNumber utility function in Flarum. The test verifies that the function correctly formats numbers with appropriate abbreviations based on size.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport abbreviateNumber from '../../../../src/common/utils/abbreviateNumber';\n\ntest('does not change small numbers', () => {\n  expect(abbreviateNumber(1)).toBe('1');\n});\n\ntest('abbreviates large numbers', () => {\n  expect(abbreviateNumber(1000000)).toBe('1M');\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n});\n\ntest('abbreviates large numbers with decimal places', () => {\n  expect(abbreviateNumber(100500)).toBe('100.5K');\n  expect(abbreviateNumber(13234)).toBe('13.2K');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring composer.json for Flarum Language Pack\nDESCRIPTION: This JSON snippet shows the required configuration in composer.json for a Flarum language pack. It specifies the language code and title within the 'flarum-locale' object.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/language-packs.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"flarum-locale\": {\n  \"code\": \"en\",\n  \"title\": \"English\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Model Searcher\nDESCRIPTION: Implements a searcher class for making a model searchable using Flarum's database search system.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/search.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace YourPackage\\Search;\n\nuse Flarum\\Search\\Database\\AbstractSearcher;\nuse YourPackage\\Model\\Acme;\n\nclass AcmeSearcher extends AbstractSearcher\n{\n    public function getQuery(User $actor): Builder\n    {\n        return Acme::query()->select('acmes.*'); // The selection is recommended to avoid conflicts with other extensions.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Views in Flarum using PHP\nDESCRIPTION: This snippet demonstrates how to add a new view namespace to Flarum using the View extender in the extend.php file. It tells the view factory where to find the extension's view files.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/views.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views'),\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Mithril Redraw Prevention\nDESCRIPTION: Shows how to prevent automatic redraw in Mithril 2.0 by setting e.redraw = false in event handlers, replacing the previous m.redraw.strategy('none') approach.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\n<button onclick={() => {\n  console.log(\"Hello world\");\n  m.redraw.strategy('none');\n}>\n  Click Me!\n</button>\n\n// Mithril 2\n<button onclick={e => {\n  console.log(\"Hello world\");\n  e.redraw = false;\n}>\n  Click Me!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub Actions via Flarum CLI\nDESCRIPTION: Command to automatically add and update GitHub Actions workflows using the Flarum CLI tool\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/github-actions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra githubActions\n```\n\n----------------------------------------\n\nTITLE: Opening Crontab Editor\nDESCRIPTION: Command to open the crontab editor for adding or modifying cron jobs.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/scheduler.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncrontab -e\n```\n\n----------------------------------------\n\nTITLE: TypeScript Test Configuration (JSON)\nDESCRIPTION: This code snippet shows how to configure `tsconfig.test.json` for TypeScript tests. It extends the base `tsconfig.json`, includes the `tests` directory, and adds shims from `@flarum/jest-config` to resolve type definitions during testing.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/testing.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"include\": [\"tests/**/*\"],\n  \"files\": [\"../../../node_modules/@flarum/jest-config/shims.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Class-based String and Array Helpers in PHP\nDESCRIPTION: Example of using the new class-based string and array helpers instead of the deprecated global helpers.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b10.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Arr;\n\n$contains = Str::contains($haystack, $needle);\n$only = Arr::only($array, $keys);\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan Package for Flarum Extension\nDESCRIPTION: Composer command to install the flarum/phpstan package as a development dependency for the extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/phpstan:^1.0\n```\n\n----------------------------------------\n\nTITLE: Route Registration Examples with Different Resolver Approaches\nDESCRIPTION: Demonstrates three different ways to register routes in Flarum: using a resolver instance, using a custom resolver class, or using the default resolver. Shows how to handle authentication checks in routes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/frontend-pages.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// See above for a custom page example\nimport CustomPage from './components/CustomPage';\n// See below for a custom resolver example\nimport CustomPageResolver from './resolvers/CustomPageResolver';\n\n// Use a route resolver instance\napp.routes['resolverInstance'] = {path: '/custom/path/1', resolver: {\n  onmatch: function(args) {\n    if (!app.session.user) return m.route.SKIP;\n\n    return CustomPage;\n  }\n}};\n\n// Use a custom route resolver class\napp.routes['resolverClass'] = {path: '/custom/path/2', resolverClass: CustomPageResolver, component: CustomPage};\n\n// Use the default resolver class (`flarum/common/resolvers/DefaultResolver`)\napp.routes['resolverClass'] = {path: '/custom/path/2', component: CustomPage};\n```\n\n----------------------------------------\n\nTITLE: Registering CSS Assets in PHP\nDESCRIPTION: Demonstrates how to add both JavaScript and CSS/LESS assets to the forum frontend using the Frontend extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less')\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend GitHub Actions Workflow\nDESCRIPTION: YAML configuration for frontend workflow including bundling, formatting and TypeScript options\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/github-actions.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Frontend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_frontend.yml@main\n    with:\n      enable_bundlewatch: false\n      enable_prettier: true\n      enable_typescript: false\n\n      frontend_directory: ./js\n      backend_directory: .\n      js_package_manager: yarn\n      main_git_branch: main\n\n    secrets:\n      bundlewatch_github_token: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Modal Component in Flarum\nDESCRIPTION: Example of extending the Modal base component to create a custom modal dialog. This shows how to customize the modal's appearance, title, content, and handle form submissions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/interactive-components.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Modal from 'flarum/common/components/Modal';\n\nexport default class CustomModal extends Modal {\n  // True by default, dictates whether the modal can be dismissed by clicking on the background or in the top right corner.\n  static isDismissible = true;\n\n  className() {\n    // Custom CSS classes to apply to the modal\n    return 'custom-modal-class';\n  }\n\n  title() {\n    // Content to show in the modal's title bar\n    return <p>Custom Modal</p>;\n  }\n\n  content() {\n    // Content to show in the modal's body\n    return <p>Hello World!</p>;\n  }\n\n  onsubmit() {\n    // If your modal contains a form, you can add form processing logic here.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Filters and Mutators in Flarum\nDESCRIPTION: This snippet demonstrates how to register custom filters and filter mutators using Flarum's Filter extender. It adds the CountryFilter and OnlySameCountryFilterMutator to the UserFilterer.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\Filter(UserFilterer::class))\n    ->addFilter(CountryFilter::class)\n    ->addFilterMutator(OnlySameCountryFilterMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: Using SubtreeRetainer with onbeforeupdate in Mithril 2\nDESCRIPTION: Example of implementing SubtreeRetainer with the onbeforeupdate lifecycle hook in Mithril 2 to avoid unnecessary component redraws by tracking state changes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.showContent = false;\n\n    this.subtree = new SubtreeRetainer(\n      () => this.showContent,\n    )\n  }\n\n  onbeforeupdate() {\n    // If needsRebuild returns true, mithril will diff and redraw the vnode as usual. Otherwise, it will skip this redraw cycle.\n    // In this example, this means that this component and its children will only be redrawn when extra content is toggled.\n    return this.subtree.needsRebuild();\n  }\n\n  view(vnode) {\n    return <div>\n      <button onclick={() => this.showContent = !this.showContent}>Toggle Extra Content</button>\n      <p>Hello World!{this.showContent ? ' Extra Content!' : ''}</p>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on RHEL-based Systems\nDESCRIPTION: Commands to install the cron service on RHEL-based Linux distributions (CentOS, AlmaLinux, Rocky Linux) using dnf package manager.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/scheduler.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf update\nsudo dnf install crontabs\n```\n\n----------------------------------------\n\nTITLE: Registering a Notification Type in Flarum\nDESCRIPTION: Example of registering a notification type using the Notification extender. This code specifies the blueprint class, serializer, and which notification methods (alert, email) should be enabled by default.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Api\\Serializer\\BasicDiscussionSerializer;\nuse Flarum\\Extend\nuse Flarum\\Subscriptions\\Notification\\NewPostBlueprint;\n\nreturn [\n    // Otros extensores\n    (new Extend\\Notification())\n        ->type(NewPostBlueprint::class, BasicDiscussionSerializer::class, ['alert', 'email']),\n    // Otros extensores\n];\n```\n\n----------------------------------------\n\nTITLE: Overriding HeaderPrimary items\nDESCRIPTION: This snippet demonstrates overriding the `items` method of `HeaderPrimary` to conditionally modify the header items in Flarum. It imports necessary modules and uses the `override` utility. The function checks for `someArbitraryCondition` to either use the original `ItemList` or create a new one, and then adds a 'google' link to the header. The modified `items` list is then returned.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/frontend.md#2025-04-16_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n// Here, we conditionally use the original output of a method,\n// or create our own ItemList, and then add an item to it.\n// Note that we MUST return our custom output.\noverride(HeaderPrimary.prototype, 'items', function(original) {\n  let items;\n\n  if (someArbitraryCondition) {\n    items = original();\n  } else {\n    items = new ItemList();\n  }\n\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n\n  return items;\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating attrs() Method to elementAttrs()\nDESCRIPTION: Example of renaming the attrs() method to elementAttrs() in a custom component to avoid conflicts with Mithril 2's this.attrs.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass CustomComponent extends Component {\n  view() {\n    return <div {...this.elementAttrs()}><p>Hello World!</p></div>;\n  }\n\n  elementAttrs() {\n    return {\n      className: 'SomeClass',\n      onclick: () => console.log('click'),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining New Frontend Models in Flarum\nDESCRIPTION: Shows how to define a new model for a custom resource type by extending the Model class and defining attributes and relationships. The example creates a Tag model with various attribute types.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport Model from 'flarum/common/Model';\n\nexport default class Tag extends Model {\n  title = Model.attribute('title');\n  createdAt = Model.attribute('createdAt', Model.transformDate);\n  parent = Model.hasOne('parent');\n  discussions = Model.hasMany('discussions');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flarum Integration Test Case in PHP\nDESCRIPTION: Demonstrates how to set up a Flarum integration test case using the TestCase class, including setting custom settings, enabling extensions, preparing the database, and using extenders.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    use RetrievesAuthorizedUsers;\n\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        $this->setting('my.custom.setting', true);\n\n        $this->extension('flarum-tags', 'my-cool-extension');\n\n        $this->prepareDatabase([\n            'users' => [\n                $this->normalUser()\n            ],\n            'discussions' => [\n                ['id' => 1, 'title' => 'some title', 'created_at' => Carbon::now(), 'last_posted_at' => Carbon::now(), 'user_id' => 1, 'first_post_id' => 1, 'comment_count' => 1]\n            ],\n            'posts' => [\n                ['id' => 1, 'number' => 1, 'discussion_id' => 1, 'created_at' => Carbon::now(), 'user_id' => 1, 'type' => 'comment', 'content' => '<t><p>something</p></t>']\n            ]\n        ]);\n\n        $this->extend((new CoolExtensionExtender)->doSomething('hello world'));\n    }\n\n    /**\n     * @test\n     */\n    public function some_phpunit_test_case()\n    {\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Extenders in Flarum PHP\nDESCRIPTION: This PHP snippet demonstrates how to adapt existing event listeners to use the new Flarum extenders in Beta 8. It makes use of the Flarum\\Extend namespace to register JavaScript, CSS, and routes for the forum. Dependencies include Flarum backend and Dispatcher for event handling. Inputs are extender configurations, and expected outputs are an array of configured extender instances and a function for event subscription.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b8.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less')\n        ->route('/t/{slug}', 'tag')\n        ->route('/tags', 'tags'),\n\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\AddForumTagsRelationship::class);\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Help Command with Format Option\nDESCRIPTION: Example of using the help command with XML format option\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/console.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum help --format=xml list\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Notification Driver in PHP\nDESCRIPTION: Example of creating a custom notification driver (PusherNotificationDriver) that implements NotificationDriverInterface. This driver handles sending notifications through Pusher and includes methods for sending notifications and registering notification types.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Pusher;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\Driver\\NotificationDriverInterface;\nuse Illuminate\\Contracts\\Queue\\Queue;\n\nclass PusherNotificationDriver implements NotificationDriverInterface\n{\n    /**\n     * @var Queue\n     */\n    protected $queue;\n\n    public function __construct(Queue $queue)\n    {\n        $this->queue = $queue;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function send(BlueprintInterface $blueprint, array $users): void\n    {\n        // El método `send` se encarga de determinar si es necesario enviar notificaciones.\n        // Si no (por ejemplo, si no hay usuarios a los que enviar), no tiene sentido programar un trabajo.\n        // Recomendamos encarecidamente que las notificaciones se envíen a través de una cola de trabajo por razones de rendimiento.\n        if (count($users)) {\n            $this->queue->push(new SendPusherNotificationsJob($blueprint, $users));\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function registerType(string $blueprintClass, array $driversEnabledByDefault): void\n    {\n        // Este método se utiliza generalmente para registrar una preferencia del usuario para esta notificación.\n        // En el caso de pusher, no hay necesidad de esto.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Policy in Flarum\nDESCRIPTION: Example of a global policy that's applied when permissions are checked without a specific model instance. This policy checks if users have permissions to view the forum or start discussions based on tag settings.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/authorization.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\Access\\AbstractPolicy;\nuse Flarum\\User\\User;\n\nclass GlobalPolicy extends AbstractPolicy\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n\n    /**\n     * @param Flarum\\User\\User $actor\n     * @param string $ability\n     * @return bool|void\n     */\n    public function can(User $actor, string $ability)\n    {\n        if (in_array($ability, ['viewForum', 'startDiscussion'])) {\n            $enoughPrimary = count(Tag::getIdsWhereCan($actor, $ability, true, false)) >= $this->settings->get('min_primary_tags');\n            $enoughSecondary = count(Tag::getIdsWhereCan($actor, $ability, false, true)) >= $this->settings->get('min_secondary_tags');\n\n            if ($enoughPrimary && $enoughSecondary) {\n                return $this->allow();\n            } else {\n                return $this->deny();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Language Pack Extension in PHP\nDESCRIPTION: Example of how to declare a Flarum language pack extension using the LanguagePack extender. This code should be placed in the extend.php file of the language pack extension.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/language-packs.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn new Flarum\\Extend\\LanguagePack();\n```\n\n----------------------------------------\n\nTITLE: Resetting Migrations for an Extension\nDESCRIPTION: Resets all migrations for a specific extension. Useful for extension developers or when removing an extension and its data from the database.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum migrate:reset --extension [extension_id]\n```\n\n----------------------------------------\n\nTITLE: Checking Extension Compatibility with Flarum Core\nDESCRIPTION: This command shows detailed information about why a specific extension might not be compatible with a particular version of Flarum core, helping diagnose update issues.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/internal/extension-manager.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer why-not flarum/core 2.0\n```\n\n----------------------------------------\n\nTITLE: Composer Test Script Configuration\nDESCRIPTION: JSON configuration for Composer scripts to run unit and integration tests\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"test\": [\n        \"@test:unit\",\n        \"@test:integration\"\n    ],\n    \"test:unit\": \"phpunit -c tests/phpunit.unit.xml\",\n    \"test:integration\": \"phpunit -c tests/phpunit.integration.xml\",\n    \"test:setup\": \"@php tests/integration/setup.php\"\n},\n\"scripts-descriptions\": {\n    \"test\": \"Runs all tests.\",\n    \"test:unit\": \"Runs all unit tests.\",\n    \"test:integration\": \"Runs all integration tests.\",\n    \"test:setup\": \"Sets up a database for use with integration tests. Execute this only once.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Modal Component in JSX\nDESCRIPTION: Example showing how to create a custom modal component by extending Flarum's base Modal class. Demonstrates key methods that can be overridden including className, title, content, and onsubmit.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/interactive-components.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Modal from 'flarum/common/components/Modal';\n\nexport default class CustomModal extends Modal {\n  // True by default, dictates whether the modal can be dismissed by clicking on the background or in the top right corner.\n  static isDismissible = true;\n\n  className() {\n    // Custom CSS classes to apply to the modal\n    return 'custom-modal-class';\n  }\n\n  title() {\n    // Content to show in the modal's title bar\n    return <p>Custom Modal</p>;\n  }\n\n  content() {\n    // Content to show in the modal's body\n    return <p>Hello World!</p>;\n  }\n\n  onsubmit() {\n    // If your modal contains a form, you can add form processing logic here.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Name in PHP Controllers\nDESCRIPTION: In Beta 15, the route name is now available via the request object for controllers and middleware that run after ResolveRoute.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b15.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$request->getAttribute('routeName')\n```\n\n----------------------------------------\n\nTITLE: Implementing SubtreeRetainer in Mithril 2 Component\nDESCRIPTION: Shows how to use SubtreeRetainer with onbeforeupdate in a Mithril 2 component to optimize redraws. The component only redraws when the showContent state changes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.showContent = false;\n\n    this.subtree = new SubtreeRetainer(\n      () => this.showContent,\n    )\n  }\n\n  onbeforeupdate() {\n    // If needsRebuild returns true, mithril will diff and redraw the vnode as usual. Otherwise, it will skip this redraw cycle.\n    // In this example, this means that this component and its children will only be redrawn when extra content is toggled.\n    return this.subtree.needsRebuild();\n  }\n\n  view(vnode) {\n    return <div>\n      <button onclick={() => this.showContent = !this.showContent}>Toggle Extra Content</button>\n      <p>Hello World!{this.showContent ? ' Extra Content!' : ''}</p>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: URL Configuration Array\nDESCRIPTION: Example of the new array-based URL configuration structure accessible through Config instance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$config->url()\n```\n\n----------------------------------------\n\nTITLE: Updating Frontend Translation Usage in JavaScript\nDESCRIPTION: Demonstrates how to update frontend translation calls from using transChoice to the new trans method with ICU MessageFormat.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Old way\napp.translator.transChoice('some-translation', guestCount, {host: hostName});\n\n// New way\napp.translator.trans('some-translation', {host: hostName, guestCount });\n```\n\n----------------------------------------\n\nTITLE: Defining Pluralized Translations in YAML\nDESCRIPTION: Shows the YAML translation definition for a pluralized string using the pipe character to separate singular and plural variants. This format supports ICU MessageFormat for pluralization.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nchoose_primary_placeholder: \"Choose a primary tag|Choose {count} primary tags\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource in Flarum with AbstractCreateController\nDESCRIPTION: This code snippet shows how to create a resource in Flarum by extending the `Flarum\\Api\\Controller\\AbstractCreateController`. It sets the `$serializer` property and implements the `data` method to create a new model instance using data from the request body. It retrieves attributes from the parsed JSON:API request body and uses them to create a new `Tag` model.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Flarum\\Api\\Controller\\AbstractCreateController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass CreateTagController extends AbstractCreateController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        $attributes = Arr::get($request->getParsedBody(), 'data.attributes');\n\n        return Tag::create([\n            'name' => Arr::get($attributes, 'name')\n        ]);\n    }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Notification Driver in PHP for Flarum\nDESCRIPTION: This snippet shows how to implement a custom notification driver (PusherNotificationDriver) that implements NotificationDriverInterface. It includes methods for sending notifications and registering notification types.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Pusher;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\Driver\\NotificationDriverInterface;\nuse Illuminate\\Contracts\\Queue\\Queue;\n\nclass PusherNotificationDriver implements NotificationDriverInterface\n{\n    /**\n     * @var Queue\n     */\n    protected $queue;\n\n    public function __construct(Queue $queue)\n    {\n        $this->queue = $queue;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function send(BlueprintInterface $blueprint, array $users): void\n    {\n        // The `send` method is responsible for determining any notifications need to be sent.\n        // If not (for example, if there are no users to send to), there's no point in scheduling a job.\n        // We HIGHLY recommend that notifications are sent via a queue job for performance reasons.\n        if (count($users)) {\n            $this->queue->push(new SendPusherNotificationsJob($blueprint, $users));\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function registerType(string $blueprintClass, array $driversEnabledByDefault): void\n    {\n        // This method is generally used to register a user preference for this notification.\n        // In the case of pusher, there's no need for this.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Pack in composer.json\nDESCRIPTION: JSON configuration for the language pack in the composer.json file, specifying the language code and title.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/language-packs.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"flarum-locale\": {\n  \"code\": \"en\",\n  \"title\": \"English\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create Discussion Request\nDESCRIPTION: Example request body for creating a new discussion via POST /api/discussions showing required attributes and tag relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\":{\n    \"type\": \"discussions\",\n    \"attributes\": {\n      \"title\": \"Lorem Ipsum\",\n      \"content\": \"Hello World\"\n    },\n    \"relationships\": {\n      \"tags\": {\n        \"data\": [\n          {\n            \"type\": \"tags\",\n            \"id\": \"1\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Configuration for Integration Tests\nDESCRIPTION: Example PHPUnit configuration file for integration tests with specific settings for Flarum testing.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/testing.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"true\"\n         stopOnFailure=\"false\">\n\n    <testsuites>\n        <testsuite name=\"Flarum Integration Tests\">\n            <directory suffix=\"Test.php\">./integration</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Promise Handling Changes in Mithril 2.0\nDESCRIPTION: Shows the transition from Mithril 0.2's deferred promises to native promises in Mithril 2.0\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Mithril 0.2\nconst deferred = m.deferred();\n\napp.store.find('posts').then(result => deferred.resolve(result));\n\nreturn deferred.promise;\n\n// Mithril 2\nreturn app.store.find('posts');\n```\n\n----------------------------------------\n\nTITLE: Defining a Notification Type in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to create a PostLikedBlueprint class that implements BlueprintInterface to define a new notification type for when a post is liked in Flarum. It includes methods for getting the subject, user, data, type, and subject model.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass PostLikedBlueprint implements BlueprintInterface\n{\n    public $post;\n\n    public $user;\n\n    public function __construct(Post $post, User $user)\n    {\n        $this->post = $post;\n        $this->user = $user;\n    }\n\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    public function getFromUser()\n    {\n        return $this->user;\n    }\n\n    public function getData()\n    {\n    }\n\n    public static function getType()\n    {\n        return 'postLiked';\n    }\n\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MailgunDriver Class for Custom Mail Driver in PHP\nDESCRIPTION: This code snippet demonstrates how to create a custom mail driver class implementing the DriverInterface in Flarum. It includes methods for defining available settings, validation, checking send capability, and building the transport.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/mail.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Mail\\DriverInterface;\nuse Illuminate\\Contracts\\Validation\\Factory;\nuse Illuminate\\Mail\\Transport\\MailgunTransport;\nuse Illuminate\\Support\\MessageBag;\nuse Swift_Transport;\n\nclass MailgunDriver implements DriverInterface\n{\n    public function availableSettings(): array\n    {\n        return [\n            'setting_one' => '',\n            'setting_two' => 'defaultValue',\n            'dropdown_setting' => [\n                'option_one_val' => 'Option One Display',\n                'option_two_val' => 'Option Two Display',\n            ],\n        ];\n    }\n\n    public function validate(SettingsRepositoryInterface $settings, Factory $validator): MessageBag\n    {\n        $validator->make($settings->all(), [\n            'setting_one' => 'required',\n            'setting_two' => 'nullable|integer',\n        ])->errors();\n    }\n\n    public function canSend(): bool\n    {\n        return true;\n    }\n\n    public function buildTransport(SettingsRepositoryInterface $settings): Swift_Transport\n    {\n        // Return a mail transport that implements Swift Transport\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: FormComponent Example in Flarum with JSX\nDESCRIPTION: This JSX code demonstrates how to create a form component in Flarum using FieldSet, Button, and Switch components. It shows how to handle form submission and input changes using Mithril's event handlers and component state.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/forms.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/common/Component';\nimport FieldSet from 'flarum/common/components/FieldSet';\nimport Button from 'flarum/common/components/Button';\nimport Switch from 'flarum/common/components/Switch';\n\n\nclass FormComponent extends Component {\n  oninit(vnode) {\n    this.textInput = \"\";\n    this.booleanInput = false;\n  }\n\n  view() {\n    return (\n      <form onsubmit={this.onsubmit.bind(this)}>\n        <FieldSet label={app.translator.trans('fake-extension.form.fieldset_label')}>\n          <input className=\"FormControl\" value={this.textInput} oninput={e => this.textInput = e.target.value}>\n          </input>\n          <Switch state={this.booleanInput} onchange={val => this.booleanInput = val}>\n          </Switch>\n        </FieldSet>\n        <Button type=\"submit\">{app.translator.trans('core.admin.basics.submit_button')}</Button>\n      </form>\n    )\n  }\n\n  onsubmit() {\n    // Some form handling logic here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Notification Type with Flarum in PHP\nDESCRIPTION: This snippet demonstrates how to define a notification type by implementing the BlueprintInterface in Flarum. It illustrates the setup of a notification for when a post is liked, capturing the post and user involved. The snippet showcases methods such as getSubject and getFromUser for returning relevant models.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass PostLikedBlueprint implements BlueprintInterface\n{\n    public $post;\n    public $user;\n\n    public function __construct(Post $post, User $user)\n    {\n        $this->post = $post;\n        $this->user = $user;\n    }\n\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    public function getFromUser()\n    {\n        return $this->user;\n    }\n\n    public function getData()\n    {\n    }\n\n    public static function getType()\n    {\n        return 'postLiked';\n    }\n\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Content to Frontend Route Registration in PHP\nDESCRIPTION: Demonstrates how to add content to a specific frontend route registration in Flarum. This example shows setting the title of the document for a custom 'users' route.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->route('/users', 'acme.users', function (Document $document, Request $request) {\n            $document->title = 'Users';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Sorting Logic in PHP\nDESCRIPTION: Extracts sorting parameters from request and applies them to database query\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$sort = $this->extractSort($request);\n$query = Tag::query();\n\nforeach ($sort as $field => $order) {\n    $query->orderBy(snake_case($field), $order);\n}\n\nreturn $query->get();\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from Frontend Store in JavaScript\nDESCRIPTION: This code demonstrates how to fetch data from Flarum's frontend store using the find method, which interacts with the JSON:API.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// GET /api/discussions?sort=createdAt\napp.store.find('discussions', {sort: 'createdAt'}).then(console.log);\n\n// GET /api/discussions/123\napp.store.find('discussions', 123).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Composer Scripts Configuration for Testing\nDESCRIPTION: JSON configuration for Composer scripts to run unit and integration tests with descriptions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"test\": [\n        \"@test:unit\",\n        \"@test:integration\"\n    ],\n    \"test:unit\": \"phpunit -c tests/phpunit.unit.xml\",\n    \"test:integration\": \"phpunit -c tests/phpunit.integration.xml\",\n    \"test:setup\": \"@php tests/integration/setup.php\"\n},\n\"scripts-descriptions\": {\n    \"test\": \"Runs all tests.\",\n    \"test:unit\": \"Runs all unit tests.\",\n    \"test:integration\": \"Runs all integration tests.\",\n    \"test:setup\": \"Sets up a database for use with integration tests. Execute this only once.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Console Commands in Flarum with the Console Extender\nDESCRIPTION: This code demonstrates how to register custom console commands in a Flarum extension using the Console extender in the extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/console.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Console\\CustomCommand;\n\nreturn [\n  // Other extenders\n  (new Extend\\Console())->command(CustomCommand::class)\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Logic in PHP\nDESCRIPTION: Extracts pagination parameters from request and applies them to database query\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$limit = $this->extractLimit($request);\n$offset = $this->extractOffset($request);\n\nreturn Tag::skip($offset)->take($limit);\n```\n\n----------------------------------------\n\nTITLE: Checking for Outdated Packages in Flarum\nDESCRIPTION: This Composer command checks for updates of packages directly required in the root composer.json file. It outputs results in JSON format, showing only packages marked as semver-safe-update and update-possible.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/internal/package-manager.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer outdated -D --format json\n```\n\n----------------------------------------\n\nTITLE: Modifying Frontend Content with PHP Frontend Extender\nDESCRIPTION: Shows how to use the Frontend extender in PHP to modify the HTML document of the frontend. It demonstrates adding a script to the head of the document using the content method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Frontend\\Document;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->content(function (Document $document, Request $request) {\n            $document->head[] = '<script>alert(\"Hello, world!\")</script>';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Component in Flarum (JSX)\nDESCRIPTION: This snippet demonstrates how to create a form component in Flarum using various form elements like FieldSet, Button, and Switch. It shows how to handle input changes and form submission.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/forms.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/Component';\nimport FieldSet from 'flarum/components/FieldSet';\nimport Button from 'flarum/components/Button';\nimport Switch from 'flarum/components/Switch';\n\n\nclass FormComponent extends Component {\n  oninit(vnode) {\n    this.textInput = \"\";\n    this.booleanInput = false;\n  }\n\n  view() {\n    return (\n      <form onsubmit={this.onsubmit.bind(this)}>\n        <FieldSet label={app.translator.trans('fake-extension.form.fieldset_label')}>\n          <input className=\"FormControl\" value={this.textInput} oninput={e => this.textInput = e.target.value}>\n          </input>\n          <Switch state={this.booleanInput} onchange={val => this.booleanInput = val}>\n          </Switch>\n        </FieldSet>\n        <Button type=\"submit\">{app.translator.trans('core.admin.basics.submit_button')}</Button>\n      </form>\n    )\n  }\n\n  onsubmit() {\n    // Lógica de manejo de formularios aquí\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Flarum CLI Versions in Bash\nDESCRIPTION: Commands to verify the installation and display version information for the different CLI versions.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/cli.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfl1 flarum info\nfl2 flarum info\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Mail Driver Class in PHP\nDESCRIPTION: Example implementation of a Mailgun driver class that implements Flarum's DriverInterface. Shows how to define available settings, validate configurations, check sending capability, and build transport.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/mail.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Mail\\DriverInterface;\nuse Illuminate\\Contracts\\Validation\\Factory;\nuse Illuminate\\Mail\\Transport\\MailgunTransport;\nuse Illuminate\\Support\\MessageBag;\nuse Swift_Transport;\n\nclass MailgunDriver implements DriverInterface\n{\n    public function availableSettings(): array\n    {\n        return [\n            'setting_one' => '',\n            'setting_two' => 'defaultValue',\n            'dropdown_setting' => [\n                'option_one_val' => 'Option One Display',\n                'option_two_val' => 'Option Two Display',\n            ],\n        ];\n    }\n\n    public function validate(SettingsRepositoryInterface $settings, Factory $validator): MessageBag\n    {\n        $validator->make($settings->all(), [\n            'setting_one' => 'required',\n            'setting_two' => 'nullable|integer',\n        ])->errors();\n    }\n\n    public function canSend(): bool\n    {\n        return true;\n    }\n\n    public function buildTransport(SettingsRepositoryInterface $settings): Swift_Transport\n    {\n        // Return a mail transport that implements Swift Transport\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SubtreeRetainer with Mithril 2 in Flarum Components\nDESCRIPTION: Example showing how to implement SubtreeRetainer with the onbeforeupdate lifecycle hook to optimize component rendering in Mithril 2. This utility helps avoid unnecessary redraws by tracking specific pieces of data.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.showContent = false;\n\n    this.subtree = new SubtreeRetainer(\n      () => this.showContent,\n    )\n  }\n\n  onbeforeupdate() {\n    // If needsRebuild returns true, mithril will diff and redraw the vnode as usual. Otherwise, it will skip this redraw cycle.\n    // In this example, this means that this component and its children will only be redrawn when extra content is toggled.\n    return this.subtree.needsRebuild();\n  }\n\n  view(vnode) {\n    return <div>\n      <button onclick={() => this.showContent = !this.showContent}>Toggle Extra Content</button>\n      <p>Hello World!{this.showContent ? ' Extra Content!' : ''}</p>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Subtree Retainer in Mithril Component\nDESCRIPTION: This snippet demonstrates how to use the `SubtreeRetainer` class to manage redraw behaviour in a Mithril component, avoiding unnecessary updates. It checks if specific data has changed before deciding if a redraw is needed.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.showContent = false;\n\n    this.subtree = new SubtreeRetainer(\n      () => this.showContent,\n    )\n  }\n\n  onbeforeupdate() {\n    // If needsRebuild returns true, mithril will diff and redraw the vnode as usual. Otherwise, it will skip this redraw cycle.\n    // In this example, this means that this component and its children will only be redrawn when extra content is toggled.\n    return this.subtree.needsRebuild();\n  }\n\n  view(vnode) {\n    return <div>\n      <button onclick={() => this.showContent = !this.showContent}>Toggle Extra Content</button>\n      <p>Hello World!{this.showContent ? ' Extra Content!' : ''}</p>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on RHEL-based Systems\nDESCRIPTION: Commands to update package lists and install cron (crontabs) on RHEL-based Linux distributions like CentOS, AlmaLinux, and Rocky Linux.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/scheduler.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf update\nsudo dnf install crontabs\n```\n\n----------------------------------------\n\nTITLE: Updating Dependency Management in Flarum Extensions\nDESCRIPTION: Flarum Beta 16 enables optional extension dependencies by allowing developers to list composer package names under `extra.flarum-extension.optional-dependencies` in the `composer.json` file. This ensures that any enabled optional dependencies will load before the main extension, although they are not mandatory for activation. This feature improves extension modularity and reduces dependency conflicts.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n{\n  \"extra\": {\n    \"flarum-extension\": {\n      \"optional-dependencies\": [\n        \"vendor/package-name\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Component in Flarum using JSX\nDESCRIPTION: This snippet demonstrates how to create a form component in Flarum using various form-related components such as FieldSet, Button, and Switch. It shows how to handle input changes and form submission.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/forms.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/common/Component';\nimport FieldSet from 'flarum/common/components/FieldSet';\nimport Button from 'flarum/common/components/Button';\nimport Switch from 'flarum/common/components/Switch';\n\n\nclass FormComponent extends Component {\n  oninit(vnode) {\n    this.textInput = \"\";\n    this.booleanInput = false;\n  }\n\n  view() {\n    return (\n      <form onsubmit={this.onsubmit.bind(this)}>\n        <FieldSet label={app.translator.trans('fake-extension.form.fieldset_label')}>\n          <input className=\"FormControl\" value={this.textInput} oninput={e => this.textInput = e.target.value}>\n          </input>\n          <Switch state={this.booleanInput} onchange={val => this.booleanInput = val}>\n          </Switch>\n        </FieldSet>\n        <Button type=\"submit\">{app.translator.trans('core.admin.basics.submit_button')}</Button>\n      </form>\n    )\n  }\n\n  onsubmit() {\n    // Some form handling logic here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Global Policy in PHP\nDESCRIPTION: An example of a global policy from Flarum Tags that checks if users can view the forum or start discussions based on tag permissions.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/authorization.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\Access\\AbstractPolicy;\nuse Flarum\\User\\User;\n\nclass GlobalPolicy extends AbstractPolicy\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n\n    /**\n     * @param Flarum\\User\\User $actor\n     * @param string $ability\n     * @return bool|void\n     */\n    public function can(User $actor, string $ability)\n    {\n        if (in_array($ability, ['viewForum', 'startDiscussion'])) {\n            $enoughPrimary = count(Tag::getIdsWhereCan($actor, $ability, true, false)) >= $this->settings->get('min_primary_tags');\n            $enoughSecondary = count(Tag::getIdsWhereCan($actor, $ability, false, true)) >= $this->settings->get('min_secondary_tags');\n\n            if ($enoughPrimary && $enoughSecondary) {\n                return $this->allow();\n            } else {\n                return $this->deny();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Resources in JavaScript\nDESCRIPTION: Shows how to delete a resource by calling the delete method on a model instance, which returns a Promise.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.delete().then(done);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Database Naming Conventions in Flarum\nDESCRIPTION: This snippet illustrates the naming conventions for database columns and tables in Flarum. It covers various data types and their corresponding naming patterns.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/contributing.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Database\n\n**Columns** should be named according to their data type:\n* DATETIME or TIMESTAMP: `{verbed}_at` (eg. created_at, read_at) or `{verbed}_until` (eg. suspended_until)\n* INT that is a count: `{noun}_count` (eg. comment_count, word_count)\n* Foreign key: `{verbed}_{entity}_id` (eg. hidden_user_id)\n    * Verb can be omitted for primary relationship (eg. post author is just `user_id`)\n* BOOL: `is_{adjective}` (eg. is_locked)\n\n**Tables** should be named as follows:\n* Use plural form (`discussions`)\n* Separate multiple words with underscores (`access_tokens`)\n* For relationships tables, join the two table names in singular form with an underscore in alphabetical order (eg. `discussion_user`)\n```\n\n----------------------------------------\n\nTITLE: Creating Jest Configuration File for Flarum Extensions\nDESCRIPTION: JavaScript configuration file for Jest testing in Flarum extensions. This simple configuration imports the Flarum Jest configuration preset.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('@flarum/jest-config')();\n```\n\n----------------------------------------\n\nTITLE: Custom Counter Component Example\nDESCRIPTION: Example of creating a custom Mithril component in Flarum by extending the base Component class with state management and lifecycle methods.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/frontend.md#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/common/Component';\n\nclass Counter extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.count = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        Count: {this.count}\n        <button onclick={e => this.count++}>\n          {this.attrs.buttonLabel}\n        </button>\n      </div>\n    );\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    // We aren't actually doing anything here, but this would\n    // be a good place to attach event handlers, initialize libraries\n    // like sortable, or make other DOM modifications.\n    $element = this.$();\n    $button = this.$('button');\n  }\n}\n\nm.mount(document.body, <MyComponent buttonLabel=\"Increment\" />);\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan using Flarum CLI\nDESCRIPTION: Command to automatically add and update PHPStan infrastructure using Flarum CLI\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra phpstan\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Page Titles in Flarum\nDESCRIPTION: Examples illustrate how to dynamically set the page title using `app.setTitle()` and manage the count using `app.setTitleCount()`. This functionality is crucial for creating a customized user experience, with titles reflective of the content or page purpose.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Page from 'flarum/common/components/Page';\n\n\nexport default class CustomPage extends Page {\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    app.setTitle(\"Cool Page\");\n    app.setTitleCount(0);\n  }\n\n  view() {\n    // ...\n  }\n}\n\nexport default class CustomPageLoadsData extends Page {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    app.store.find(\"users\", 1).then(user => {\n      app.setTitle(user.displayName());\n      app.setTitleCount(0);\n    })\n  }\n\n  view() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Model Attribute Type Definition\nDESCRIPTION: Example of defining attribute types for PHPStan using Model extension in PHP.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Model(User::class))\n    ->cast('is_cool', 'bool'),\n```\n\n----------------------------------------\n\nTITLE: Configuring Extenders in Flarum - PHP\nDESCRIPTION: This code demonstrates how to set up extenders in Flarum Beta 8. It includes two extenders: one for frontend JavaScript and CSS, and another for a custom event listener subscription. It's essential to replace any existing event listeners with extenders for compatibility with the new system.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b8.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less')\n        ->route('/t/{slug}', 'tag')\n        ->route('/tags', 'tags'),\n\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\AddForumTagsRelationship::class);\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Setting up TypeScript Configuration for Flarum Extension\nDESCRIPTION: TypeScript configuration that extends Flarum's base configuration, specifying file inclusion patterns and compiler options. This enables proper type checking and IntelliSense for Flarum extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Use Flarum's tsconfig as a starting point\n  \"extends\": \"flarum-tsconfig\",\n  // This will match all .ts, .tsx, .d.ts, .js, .jsx files in your `src` folder\n  // and also tells your Typescript server to read core's global typings for\n  // access to `dayjs` and `$` in the global namespace.\n  \"include\": [\n    \"src/**/*\",\n    \"../vendor/*/*/js/dist-typings/@types/**/*\",\n    \"@types/**/*\"\n  ],\n  \"compilerOptions\": {\n    // This will output typings to `dist-typings`\n    \"declarationDir\": \"./dist-typings\",\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"flarum/*\": [\"../vendor/flarum/core/js/dist-typings/*\"],\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Compatibility Check\nDESCRIPTION: Command to check why a specific extension is not compatible with a new Flarum core version.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/internal/extension-manager.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer why-not flarum/core 2.0\n```\n\n----------------------------------------\n\nTITLE: Defining a Notification Blueprint in PHP for Flarum\nDESCRIPTION: This code demonstrates how to create a notification blueprint class that implements BlueprintInterface. The example from Flarum Likes shows the implementation of PostLikedBlueprint which defines a notification when a post is liked.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass PostLikedBlueprint implements BlueprintInterface\n{\n    public $post;\n\n    public $user;\n\n    public function __construct(Post $post, User $user)\n    {\n        $this->post = $post;\n        $this->user = $user;\n    }\n\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    public function getSender()\n    {\n        return $this->user;\n    }\n\n    public function getData()\n    {\n    }\n\n    public static function getType()\n    {\n        return 'postLiked';\n    }\n\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging a Release with Git\nDESCRIPTION: This code snippet demonstrates how to tag a release using Git. Tagging is crucial for marking specific versions of your extension before publishing. After committing your changes, you can use the git tag command followed by a version number to create a tag, and then push both the changes and tags to the remote repository.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/distribution.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v0.1.0\ngit push && git push --tags\n```\n\n----------------------------------------\n\nTITLE: Example Composer Configuration for Flarum\nDESCRIPTION: Annotated composer.json file showing the standard configuration for a Flarum installation, including metadata, required packages, composer configuration, and stability preferences.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/composer.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"flarum/flarum\",\n    \"description\": \"Delightfully simple forum software.\",\n    \"type\": \"project\",\n    \"keywords\": [\n        \"forum\",\n        \"discussion\"\n    ],\n    \"homepage\": \"https://flarum.org/\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Flarum\",\n            \"email\": \"info@flarum.org\",\n            \"homepage\": \"https://flarum.org/team\"\n        }\n    ],\n    \"support\": {\n        \"issues\": \"https://github.com/flarum/core/issues\",\n        \"source\": \"https://github.com/flarum/flarum\",\n        \"docs\": \"https://flarum.org/docs/\"\n    },\n    \"require\": {\n        \"flarum/core\": \"^1.0\",\n        \"flarum/approval\": \"*\",\n        \"flarum/bbcode\": \"*\",\n        \"flarum/emoji\": \"*\",\n        \"flarum/lang-english\": \"*\",\n        \"flarum/flags\": \"*\",\n        \"flarum/likes\": \"*\",\n        \"flarum/lock\": \"*\",\n        \"flarum/markdown\": \"*\",\n        \"flarum/mentions\": \"*\",\n        \"flarum/nicknames\": \"*\",\n        \"flarum/pusher\": \"*\",\n        \"flarum/statistics\": \"*\",\n        \"flarum/sticky\": \"*\",\n        \"flarum/subscriptions\": \"*\",\n        \"flarum/suspend\": \"*\",\n        \"flarum/tags\": \"*\"\n    },\n    \"config\": {\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true\n    },\n    \"prefer-stable\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Columns in Flarum Migration\nDESCRIPTION: Using the Migration::renameColumns helper to rename columns in an existing table in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::renameColumns('users', ['from' => 'to']);\n```\n\n----------------------------------------\n\nTITLE: Module with Named Exports Only Pattern in TypeScript\nDESCRIPTION: Shows how to create a module with multiple named exports (functions, classes, and constants) and how to import them selectively from another extension.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/registry.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Extension A: vendor/extension-a\n// Filename: moduleA.ts\n// Export\nexport function acme() {}\nexport class Test {}\nconst foo = 'foo';\nexport { foo };\n\n// Extension B: vendor/extension-b\n// Import\nimport { acme, Test, foo } from 'ext:vendor/extension-a/.../moduleA';\n```\n\n----------------------------------------\n\nTITLE: Defining Interface Translation Keys in YAML\nDESCRIPTION: This code snippet lists various second-level translation keys utilized across different interfaces in Flarum, including administrative and forum areas, as well as API responses and email contents. These keys facilitate the organization of translations based on their usage context.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/i18n.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:       # Translations used by the admin interface.\nforum:       # Translations used by the forum user interface.\nlib:         # Translations used by either of the above.\nviews:       # Translations used outside the normal JS client.\napi:         # Translations used in messages output by the API.\nemail:       # Translations used in emails sent by Flarum.\n```\n\n----------------------------------------\n\nTITLE: Installing cron on RHEL-based systems\nDESCRIPTION: These commands update the package list and install the `crontabs` package, which includes the `cron` daemon, on RHEL-based systems (CentOS, AlmaLinux, Rocky Linux).\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/scheduler.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf update\nsudo dnf install crontabs\n```\n\n----------------------------------------\n\nTITLE: Migrating from affixSidebar to AffixedSidebar Component\nDESCRIPTION: Example showing how to update code that previously used the affixSidebar utility to instead use the new AffixedSidebar component in Flarum with Mithril 2.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nclass OldWay extends Component {\n  view() {\n    return <div>\n      <div className=\"container\">\n        <div className=\"sideNavContainer\">\n          <nav className=\"sideNav\" config={affixSidebar}>\n            <p>Affixed Sidebar</p>\n          </nav>\n          <div className=\"sideNavOffset\">Actual Page Content</div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n\nclass NewWay extends Component {\n  view() {\n    return <div>\n      <div className=\"container\">\n        <div className=\"sideNavContainer\">\n          <AffixedSidebar>\n            <nav className=\"sideNav\">\n              <p>Affixed Sidebar</p>\n            </nav>\n          </AffixedSidebar>\n          <div className=\"sideNavOffset\">Actual Page Content</div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Política Global para Tags en Flarum (PHP)\nDESCRIPTION: Implementación de una política global para tags en Flarum. Define reglas de autorización para ver el foro y iniciar discusiones basadas en la cantidad de tags primarios y secundarios que un usuario puede acceder.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/authorization.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\Access\\AbstractPolicy;\nuse Flarum\\User\\User;\n\nclass GlobalPolicy extends AbstractPolicy\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n\n    /**\n     * @param Flarum\\User\\User $actor\n     * @param string $ability\n     * @return bool|void\n     */\n    public function can(User $actor, string $ability)\n    {\n        if (in_array($ability, ['viewForum', 'startDiscussion'])) {\n            $enoughPrimary = count(Tag::getIdsWhereCan($actor, $ability, true, false)) >= $this->settings->get('min_primary_tags');\n            $enoughSecondary = count(Tag::getIdsWhereCan($actor, $ability, false, true)) >= $this->settings->get('min_secondary_tags');\n\n            if ($enoughPrimary && $enoughSecondary) {\n                return $this->allow();\n            } else {\n                return $this->deny();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Second-Level Translation Keys in YAML\nDESCRIPTION: This snippet specifies the second-level keys used for translations in various Flarum interfaces. It includes keys for admin and forum interfaces, among others. Dependencies include the Flarum framework. The expected input is a YAML-formatted list, and the output is structured translation references corresponding to different interfaces.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:       # Translations used by the admin interface.\nforum:       # Translations used by the forum user interface.\nlib:         # Translations used by either of the above.\nviews:       # Translations used outside the normal JS client.\napi:         # Translations used in messages output by the API.\nemail:       # Translations used in emails sent by Flarum.\n```\n\n----------------------------------------\n\nTITLE: Extending Flarum Model with Typed Attribute in PHP\nDESCRIPTION: PHP code snippet demonstrating how to extend a Flarum User model with a typed attribute for improved PHPStan analysis.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Model(User::class))\n    ->cast('is_cool', 'bool'),\n```\n\n----------------------------------------\n\nTITLE: Registering Boolean Setting for Flarum Extension\nDESCRIPTION: Shows how to register a boolean (switch) setting for a Flarum extension using the ExtensionData API. It includes setting key, label, help text, and type.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/admin.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('interstellar', function(app) {\n\n  app.extensionData\n    .for('acme-interstellar')\n    .registerSetting(\n      {\n        setting: 'acme-interstellar.coordinates', // This is the key the settings will be saved under in the settings table in the database.\n        label: app.translator.trans('acme-interstellar.admin.coordinates_label'), // The label to be shown letting the admin know what the setting does.\n        help: app.translator.trans('acme-interstellar.admin.coordinates_help'), // Optional help text where a longer explanation of the setting can go.\n        type: 'boolean', // What type of setting this is, valid options are: boolean, text (or any other <input> tag type), and select. \n      },\n      30 // Optional: Priority\n    )\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Gambit for Country Search in PHP\nDESCRIPTION: This snippet demonstrates how to create a custom gambit for searching users by country in Flarum. It extends the AbstractRegexGambit class and implements the necessary methods to define the gambit pattern and apply conditions to the search query.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Search\\AbstractRegexGambit;\nuse Flarum\\Search\\SearchState;\n\nclass CountryGambit extends AbstractRegexGambit\n{\n    public function getGambitPattern(): string\n    {\n        return 'country:(.+)';\n    }\n\n    public function conditions(SearchState $search, array $matches, bool $negate)\n    {\n        $country = trim($matches[1], '\"');\n\n        $search->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Tag-based Authorization Policy in PHP\nDESCRIPTION: An example policy class from Flarum Tags that determines whether a user can start discussions or add tags based on tag restrictions and user permissions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/authorization.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Flarum\\Tags\\Access;\n\nuse Flarum\\Tags\\Tag;\nuse Flarum\\User\\Access\\AbstractPolicy;\nuse Flarum\\User\\User;\n\nclass TagPolicy extends AbstractPolicy\n{\n    /**\n     * @param User $actor\n     * @param Tag $tag\n     * @return bool|null\n     */\n    public function startDiscussion(User $actor, Tag $tag)\n    {\n        if ($tag->is_restricted) {\n            return $actor->hasPermission('tag'.$tag->id.'.startDiscussion') ? $this->allow() : $this->deny();\n        }\n    }\n\n    /**\n     * @param User $actor\n     * @param Tag $tag\n     * @return bool|null\n     */\n    public function addToDiscussion(User $actor, Tag $tag)\n    {\n        return $this->startDiscussion($actor, $tag);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Post Type in PHP for Flarum\nDESCRIPTION: This code snippet demonstrates how to create a custom post type in Flarum by extending the Post model. It includes a static create method to instantiate the post and set its attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/post-types.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Post\\Post;\nuse Flarum\\Post\\AbstractEventPost;\nuse Flarum\\Post\\MergeableInterface;\n\nclass MyCustomPost extends Post implements MergeableInterface\n{\n    public static function create(array $attributes): static\n    {\n        $post = new static;\n\n        $post->content = $attributes['content'];\n        $post->created_at = $attributes['createdAt'];\n\n        return $post;\n    }\n\n    public static function reply(int $discussionId, int $userId, string $content): static\n    {\n        $post = static::create([\n            'content' => $content,\n            'created_at' => time(),\n        ]);\n\n        $post->discussion_id = $discussionId;\n        $post->user_id = $userId;\n\n        return $post;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a HelloWorldController in PHP\nDESCRIPTION: This PHP code defines a `HelloWorldController` class that implements `RequestHandlerInterface`, handling HTTP requests by returning a `HtmlResponse` containing an HTML greeting. It highlights dependency injection and follows the pattern of processing a request to generate a response.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Acme\\HelloWorld;\n\nuse Laminas\\Diactoros\\Response\\HtmlResponse;\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass HelloWorldController implements RequestHandlerInterface\n{\n    public function handle(Request $request): Response\n    {\n        return new HtmlResponse('<h1>Hello, world!</h1>');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Component for Internal and External Links in JSX\nDESCRIPTION: Demonstrates how to use the Link component from Flarum to create internal and external links in JSX. It shows various use cases including linking to known routes, generated routes, and external websites.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'flarum/common/components/Link';\n\n// Link can be used just like any other component:\n<Link href=\"/route/known/to/mithril\">Hello World!</Link>\n\n// You'll frequently use Link with generated routes:\n<Link href={app.route('settings')}>Hello World!</Link>\n\n// Link can even generate external links with the external attr:\n<Link external={true} href=\"https://google.com\">Hello World!</Link>\n\n// The above example with external = true is equivalent to:\n<a href=\"https://google.com\">Hello World!</a>\n// but is provided for flexibility: sometimes you might have links\n// that are conditionally internal or external.\n```\n\n----------------------------------------\n\nTITLE: AffixedSidebar Component Implementation\nDESCRIPTION: Demonstrates migration from affixSidebar util to AffixedSidebar component wrapper, showing both old and new implementation methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nclass OldWay extends Component {\n  view() {\n    return <div>\n      <div className=\"container\">\n        <div className=\"sideNavContainer\">\n          <nav className=\"sideNav\" config={affixSidebar}>\n            <p>Affixed Sidebar</p>\n          </nav>\n          <div className=\"sideNavOffset\">Actual Page Content</div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n\nclass NewWay extends Component {\n  view() {\n    return <div>\n      <div className=\"container\">\n        <div className=\"sideNavContainer\">\n          <AffixedSidebar>\n            <nav className=\"sideNav\">\n              <p>Affixed Sidebar</p>\n            </nav>\n          </AffixedSidebar>\n          <div className=\"sideNavOffset\">Actual Page Content</div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Test Script to package.json (JSON)\nDESCRIPTION: This snippet shows how to add or modify the `test` script in your `package.json` file to run Jest. It uses `yarn` to execute the Jest binary located in the `node_modules/.bin` directory.  The `type: module` is also set for enabling ESM.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/testing.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"scripts\": {\n    ...,\n    \"test\": \"yarn node --experimental-vm-modules $(yarn bin jest)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using View Extender for Laravel Blade Views in Flarum\nDESCRIPTION: This PHP snippet demonstrates the recommended method to register Laravel Blade views in Flarum extensions using the View extender instead of the deprecated method, to prevent breaking views for other extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// extend.php\nuse Flarum\\Extend\\View;\n\nreturn [\n  (new View)->namespace(NAME, RELATIVE PATH);\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Visibility Logic in Post Policy\nDESCRIPTION: Example from PostPolicy showing how to implement visibility rules that can be extended by other extensions. It demonstrates how to filter private posts while allowing extensions to override this behavior.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/model-visibility.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, we want to ensure that private posts aren't visible to users by default.\n// The simplest way to do this would be:\n$query->where('posts.is_private', false);\n\n// However, we recognize that some extensions might have valid use cases for showing private posts.\n// So instead, we include all posts that aren't private, AND all private posts desired by extensions\n$query->where(function ($query) use ($actor) {\n    $query->where('posts.is_private', false)\n        ->orWhere(function ($query) use ($actor) {\n            $query->whereVisibleTo($actor, 'viewPrivate');\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Restricting Middleware to Specific Routes in Flarum\nDESCRIPTION: This snippet demonstrates how to restrict middleware execution to specific routes in Flarum. It shows two methods: one using the full URL path and another using the route name attribute.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Laminas\\Diactoros\\Uri;\n\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n  {\n    $currentRoute = $request->getUri()->getPath();\n    $routeToRunUnder = new Uri(app()->url('/path/to/run/under'));\n\n    if ($currentRoute === $routeToRunUnder->getPath()) {\n        // Your logic here!\n    }\n\n    return $handler->handle($request);\n}\n\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    if ($request->getAttribute('routeName') === 'register') {\n        // Your logic here!\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Route-Specific Middleware in PHP\nDESCRIPTION: This example shows how to restrict middleware execution to specific routes using path comparison or route attributes. It requires the use of Laminas Diactoros for URI handling and assumes the middleware processes requests after route resolution.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Laminas\\Diactoros\\Uri;\\n\\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\\n  {\\n    $currentRoute = $request->getUri()->getPath();\\n    $routeToRunUnder = new Uri(app()->url('/path/to/run/under'));\\n\\n    if ($currentRoute === $routeToRunUnder->getPath()) {\\n        // Your logic here!\\n    }\\n\\n    return $handler->handle($request);\\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\\n{\\n    if ($request->getAttribute('routeName') === 'register') {\\n        // Your logic here!\\n    }\\n\\n    return $handler->handle($request);\\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying the Response in Flarum Middleware\nDESCRIPTION: This snippet illustrates how to modify the HTTP response within a Flarum middleware. After obtaining the response using `$handler->handle($request)`, the code demonstrates how to modify headers, specifically setting the `Content-Type` to `application/json`. It's important to reassign the modified response due to PSR-7 immutability.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/middleware.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    $response = $handler->handle($request);\n\n    // Your logic...\n    $response = $response->withHeader('Content-Type', 'application/json');\n\n    return $response;\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection with SettingsRepositoryInterface in Flarum\nDESCRIPTION: This code snippet demonstrates how to inject the `SettingsRepositoryInterface` into a class constructor using Flarum's dependency injection. This allows the class to access and manipulate Flarum settings via the `$this->settings` property. It relies on Laravel's service container for instantiation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace acme\\HelloWorld\\ExampleDir;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\n\nclass ClassInterfacesWithSettings\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using FormGroup Component for Flexible Form Building in Flarum\nDESCRIPTION: Example of using the FormGroup component to create form inputs with consistent styling and behavior. FormGroup automatically selects the appropriate input component based on the type specified.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/forms.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/common/Component';\nimport FormGroup from 'flarum/common/components/FormGroup';\nimport Stream from 'flarum/common/utils/Stream';\n\nexport default class MyComponent extends Component {\n  oninit(vnode) {\n    this.value = Stream(false);\n  }\n\n  view() {\n    return (\n      <div>\n        <FormGroup\n          key=\"acme.checkbox\"\n          stream={this.value}\n          label={app.translator.trans('acme.forum.my_component.my_value')}\n          type=\"bool\"\n          help={app.translator.trans('acme.forum.my_component.my_value')}\n          className=\"Setting-item\"\n        />\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Mutator for Filtering Users by Country in PHP\nDESCRIPTION: This code snippet shows how to create a search mutator that filters users to only those from the same country as the actor. It defines a class with an __invoke method that modifies the search query to add the country condition.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Query\\QueryCriteria;\nuse Flarum\\Search\\SearchState;\n\nclass OnlySameCountrySearchMutator\n{\n    public function __invoke(SearchState $searchState, QueryCriteria $queryCriteria)\n    {\n        $searchState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Custom API Throttlers in PHP\nDESCRIPTION: Example showing how to use the ThrottleApi extender in extend.php to add a new throttler or remove an existing one. The example adds a throttler that bypasses all throttling and removes the bypassThrottlingAttribute throttler.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/api-throttling.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    // Other extenders\n    (new Extend\\ThrottleApi())\n        ->set('throttleAll', function () {\n          return false;\n        })\n        ->remove('bypassThrottlingAttribute'),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from API using Flarum Store in Javascript\nDESCRIPTION: This code snippet demonstrates how to fetch data from the Flarum API using the frontend store's `find` method. It shows how to retrieve resources by specifying the resource type and optional parameters for sorting or filtering. The results are returned as a promise.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// GET /api/discussions?sort=createdAt\napp.store.find('discussions', {sort: 'createdAt'}).then(console.log);\n\n// GET /api/discussions/123\napp.store.find('discussions', 123).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Updating Parent-Child Component Communication in JavaScript\nDESCRIPTION: This snippet demonstrates the old and new ways of handling parent-child component communication in Flarum. It shows how to avoid storing component instances and instead pass data through attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass ChildComponent extends Component {\n  view() {\n    return <p>{this.attrs.counter}</p>;\n  }\n}\n\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.counter += 1}></button>\n        <ChildComponent counter={this.counter}></ChildComponent>\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Permission for Flarum Extension\nDESCRIPTION: Shows how to register a new permission for a Flarum extension using the ExtensionData API. It includes icon, label, permission name, and tag scoping.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/admin.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('interstellar', function(app) {\n\n  app.extensionData\n    .for('acme-interstellar')\n    .registerPermission(\n      {\n        icon: 'fas fa-rocket', // Font-Awesome Icon\n        label: app.translator.trans('acme-interstellar.admin.permissions.fly_rockets_label'), // Permission Label\n        permission: 'discussion.rocket_fly', // Actual permission name stored in database (and used when checking permission).\n        tagScoped: true, // Whether it be possible to apply this permission on tags, not just globally. Explained in the next paragraph.\n      }, \n      'start', // Category permission will be added to on the grid\n      95 // Optional: Priority\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom API Throttler in PHP for Flarum\nDESCRIPTION: This code snippet demonstrates a custom API throttler for Flarum. It checks if the request is for creating discussions or posts, verifies user permissions, and throttles if a post was created in the last 10 seconds.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/api-throttling.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse DateTime;\nuse Flarum\\Post\\Post;\n\nfunction ($request) {\n    if (! in_array($request->getAttribute('routeName'), ['discussions.create', 'posts.create'])) {\n        return;\n    }\n\n    $actor = $request->getAttribute('actor');\n\n    if ($actor->can('postWithoutThrottle')) {\n        return false;\n    }\n\n    if (Post::where('user_id', $actor->id)->where('created_at', '>=', new DateTime('-10 seconds'))->exists()) {\n        return true;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Counter Component Implementation\nDESCRIPTION: Example of creating a custom component in Flarum extending the base Component class with lifecycle methods and event handling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/common/Component';\n\nclass Counter extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.count = 0;\n  }\n\n  view() {\n    return (\n      <div>\n        Count: {this.count}\n        <button onclick={e => this.count++}>\n          {this.attrs.buttonLabel}\n        </button>\n      </div>\n    );\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    // We aren't actually doing anything here, but this would\n    // be a good place to attach event handlers, initialize libraries\n    // like sortable, or make other DOM modifications.\n    $element = this.$();\n    $button = this.$('button');\n  }\n}\n\nm.mount(document.body, <MyComponent buttonLabel=\"Increment\" />);\n```\n\n----------------------------------------\n\nTITLE: Registering a Notification Type in Flarum PHP\nDESCRIPTION: This code snippet shows how to register a defined notification type with the Flarum framework using the Notification extender. It configures the NewPostBlueprint to send notifications via alerts and email by default, depicting necessary serializers and blueprint class specifications.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse Flarum\\Api\\Serializer\\BasicDiscussionSerializer;\nuse Flarum\\Extend\nuse Flarum\\Subscriptions\\Notification\\NewPostBlueprint;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->type(NewPostBlueprint::class, BasicDiscussionSerializer::class, ['alert', 'email']),\n    // Other extenders\n];\n\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Scopers in PHP for Flarum\nDESCRIPTION: This snippet shows how to register custom scopers using Flarum's extender system. It demonstrates registering scopers for both Tag and Discussion models with different abilities.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/model-visibility.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\Tags\\Tag;\nuse YourNamespace\\Access;\n\nreturn [\n  // Other extenders\n\n  // 'view' is optional here, since that's the default value for the ability argument.\n  // However, if we were applying this to a different ability, such as `viewPrivate`,\n  // would need to explicitly specify that.\n  (new Extend\\ModelVisibility(Tag::class))\n    ->scope(Access\\ScopeTagVisibility::class, 'view'),\n\n  (new Extend\\ModelVisibility(Discussion::class))\n    ->scopeAll(Access\\ScopeDiscussionVisibilityForAbility::class),\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Registering New Filesystem Storage Drivers in Flarum\nDESCRIPTION: This code snippet demonstrates how to register a new filesystem storage driver in Flarum using the `Filesystem` extender. It defines a driver named `aws-with-cdn` and associates it with the `AwsWithCdnDriver` class, which must implement the `Flarum\\Filesystem\\DriverInterface` interface. It requires the `Flarum\\Extend` namespace.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/filesystem.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Filesystem)\n        ->driver('aws-with-cdn', AwsWithCdnDriver::class);\n```\n\n----------------------------------------\n\nTITLE: Using Authorization Methods in PHP\nDESCRIPTION: Demonstrates how to use various authorization methods provided by the Flarum\\User\\User class to check permissions and assert user capabilities.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/authorization.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Check whether a user can perform an action.\n$canDoSomething = $actor->can('viewForum');\n\n// Check whether a user can perform an action on a subject.\n$canDoSomething = $actor->can('reply', $discussion);\n\n// Raise a PermissionDeniedException if a user cannot perform an action.\n$actor->assertCan('viewForum');\n$actor->assertCan('reply', $discussion);\n\n// Raise a NotAuthenticatedException if the user is not logged in.\n$actor->assertRegistered();\n\n// Raise a PermissionDeniedException if the user is not an admin.\n$actor->assertAdmin();\n\n// Check whether one of the user's groups have a permission.\n// WARNING: this should be used with caution, as it doesn't actually\n// run through the authorization process, so it doesn't account for policies.\n// It is, however, useful in implementing custom policies.\n$actorHasPermission = $actor->hasPermission(`viewForum`);\n```\n\n----------------------------------------\n\nTITLE: Implementing SubtreeRetainer in JavaScript Component\nDESCRIPTION: Example showing how to use SubtreeRetainer util class to optimize component redraws in Mithril 2, using onbeforeupdate lifecycle hook.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.showContent = false;\n\n    this.subtree = new SubtreeRetainer(\n      () => this.showContent,\n    )\n  }\n\n  onbeforeupdate() {\n    return this.subtree.needsRebuild();\n  }\n\n  view(vnode) {\n    return <div>\n      <button onclick={() => this.showContent = !this.showContent}>Toggle Extra Content</button>\n      <p>Hello World!{this.showContent ? ' Extra Content!' : ''}</p>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Updates with Composer Bash\nDESCRIPTION: This command checks for updates of packages directly required in the root `composer.json` by executing `composer outdated`. It checks using a JSON format and displays only `semver-safe-update` packages. Ensure that Composer is installed and configured correctly before running this command. It outputs a JSON list of outdated packages.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/internal/package-manager.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer outdated -D --format json\n```\n\n----------------------------------------\n\nTITLE: Implementing Mail Driver Interface in PHP\nDESCRIPTION: Update the availableSettings() method in classes implementing Flarum\\Mail\\DriverInterface to return an array of field names mapping to their types. Also implement the new validate() and canSend() methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic function availableSettings()\n{\n    return [\n        'field1' => 'string',\n        'field2' => 'bool'\n    ];\n}\n\npublic function validate(array $settings)\n{\n    // Implement validation logic\n}\n\npublic function canSend(): bool\n{\n    // Implement logic to determine if driver can send mail\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Filter Mutator for User Country Filtering\nDESCRIPTION: Implements a filter mutator that constrains all user queries to only show users from the same country as the current user. This mutator runs on every filter request regardless of other filters.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/search.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterState;\nuse Flarum\\Query\\QueryCriteria;\n\nclass OnlySameCountryFilterMutator\n{\n    public function __invoke(FilterState $filterState, QueryCriteria $queryCriteria)\n    {\n        $filterState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom User Filter in PHP\nDESCRIPTION: Example of implementing a custom filter for the User model to filter users by country. Demonstrates creating a Filter class that implements FilterInterface with methods to specify the filter key and apply the filtering logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/search.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterInterface;\nuse Flarum\\Filter\\FilterState;\n\nclass CountryFilter implements FilterInterface\n{\n    public function getFilterKey(): string\n    {\n        return 'country';\n    }\n\n    public function filter(FilterState $filterState, string $filterValue, bool $negate)\n    {\n        $country = trim($filterValue, '\"');\n\n        $filterState->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing PHPStan Cache and Running Analysis\nDESCRIPTION: Command sequence to clear the PHPStan cache before running the analysis to ensure fresh results.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer clear-cache:phpstan && composer analyse:phpstan\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Filter for User Country in PHP\nDESCRIPTION: This snippet demonstrates how to create a custom Filter class to filter users by country. It implements the FilterInterface and defines methods for getting the filter key and applying the filter to the query.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterInterface;\nuse Flarum\\Filter\\FilterState;\n\nclass CountryFilter implements FilterInterface\n{\n    public function getFilterKey(): string\n    {\n        return 'country';\n    }\n\n    public function filter(FilterState $filterState, string $filterValue, bool $negate)\n    {\n        $country = trim($filterValue, '\"');\n\n        $filterState->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Component Instance Storage in Mithril 2\nDESCRIPTION: An example showing the incorrect pattern of storing child component instances in parent components. This approach is no longer compatible with Mithril 2's redrawing algorithms.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nclass ChildComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.counter = 0;\n  }\n\n  view() {\n    return <p>{this.counter}</p>;\n  }\n}\nclass ParentComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.child = new ChildComponent();\n  }\n\n  view() {\n    return (\n      <div>\n        <button onclick={() => this.child.counter += 1}></button>\n        {this.child.render()}\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend GitHub Actions Workflow for Flarum Extensions\nDESCRIPTION: YAML configuration for setting up a frontend workflow in a Flarum extension. It defines the workflow name, trigger events, job configurations, and secrets using a reusable workflow from the Flarum framework repository.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Frontend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_frontend.yml@main\n    with:\n      enable_bundlewatch: false\n      enable_prettier: true\n      enable_typescript: false\n\n      frontend_directory: ./js\n      backend_directory: .\n      js_package_manager: yarn\n      main_git_branch: main\n\n    secrets:\n      bundlewatch_github_token: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Resource Hooks in PHP\nDESCRIPTION: Demonstrates various hooks available for database resources to run custom logic during CRUD operations.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function creating(object $model, Context $context): ?object\n{\n    return $model;\n}\n\npublic function updating(object $model, Context $context): ?object\n{\n    return $model;\n}\n\npublic function saving(object $model, Context $context): ?object\n{\n    return $model;\n}\n\npublic function saved(object $model, Context $context): ?object\n{\n    return $model;\n}\n\npublic function created(object $model, Context $context): ?object\n{\n    return $model;\n}\n\npublic function updated(object $model, Context $context): ?object\n{\n    return $model;\n}\n\npublic function deleting(object $model, Context $context): void\n{\n    //\n}\n\npublic function deleted(object $model, Context $context): void\n{\n    //\n}\n\npublic function mutateDataBeforeValidation(Context $context, array $data): array\n{\n    return $data;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Console Commands in Flarum\nDESCRIPTION: This snippet demonstrates how to test custom console commands in Flarum using the ConsoleTestCase class. It shows how to run a command with arguments and options, and assert the output.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Tests\\integration\\ConsoleTestCase;\n\nclass ConsoleTest extends ConsoleTestCase\n{\n    /**\n     * @test\n     */\n    public function command_works()\n    {\n        $input = [\n            'command' => 'some:command',  // The command name, equivalent of `php flarum some:command`\n            'foo' => 'bar',  // arguments\n            '--lorem' => 'ipsum'  // options\n        ];\n\n        $this->assertEquals('Some Output.', $this->runCommand($input));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Dependencies in composer.json\nDESCRIPTION: Example of how to specify required dependencies in a Flarum extension's composer.json file. Shows how to require both core and other extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.15\",\n    \"flarum/tags\": \"^0.1.0-beta.15\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering API Routes in Flarum\nDESCRIPTION: Demonstrates how to register the five standard API endpoints (list, show, create, update, delete) for a resource using the Routes extender. The example uses tags as the resource type.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Routes('api'))\n        ->get('/tags', 'tags.index', ListTagsController::class)\n        ->get('/tags/{id}', 'tags.show', ShowTagController::class)\n        ->post('/tags', 'tags.create', CreateTagController::class)\n        ->patch('/tags/{id}', 'tags.update', UpdateTagController::class)\n        ->delete('/tags/{id}', 'tags.delete', DeleteTagController::class)\n```\n\n----------------------------------------\n\nTITLE: Affixed Sidebar Implementation\nDESCRIPTION: Comparison of old and new ways to implement affixed sidebars using the AffixedSidebar component.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclass OldWay extends Component {\n  view() {\n    return <div>\n      <div className=\"container\">\n        <div className=\"sideNavContainer\">\n          <nav className=\"sideNav\" config={affixSidebar}>\n            <p>Affixed Sidebar</p>\n          </nav>\n          <div className=\"sideNavOffset\">Actual Page Content</div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n\nclass NewWay extends Component {\n  view() {\n    return <div>\n      <div className=\"container\">\n        <div className=\"sideNavContainer\">\n          <AffixedSidebar>\n            <nav className=\"sideNav\">\n              <p>Affixed Sidebar</p>\n            </nav>\n          </AffixedSidebar>\n          <div className=\"sideNavOffset\">Actual Page Content</div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Redraw API in Mithril 2.0 for JavaScript\nDESCRIPTION: This snippet demonstrates how to update the redraw API when migrating from Mithril 0.2 to Mithril 2.0. It shows changes in synchronous redraws, lazy redraws, and preventing redraws in event handlers.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\n<button onclick={() => {\n  console.log(\"Hello world\");\n  m.redraw.strategy('none');\n}}>\n  Click Me!\n</button>\n\n// Mithril 2\n<button onclick={e => {\n  console.log(\"Hello world\");\n  e.redraw = false;\n}}>\n  Click Me!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Creating a Filter Mutator for Same Country Users in PHP\nDESCRIPTION: This code snippet shows how to implement a filter mutator that restricts the query to only include users from the same country as the current user. It demonstrates the use of FilterState and QueryCriteria.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Filter\\FilterState;\nuse Flarum\\Query\\QueryCriteria;\n\nclass OnlySameCountryFilterMutator\n{\n    public function __invoke(FilterState $filterState, QueryCriteria $queryCriteria)\n    {\n        $filterState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Discussion Visibility Scoper in PHP for Flarum\nDESCRIPTION: This code snippet demonstrates a custom scoper for the 'viewPrivate' ability. It adds additional conditions to the query using orWhere to expand visibility based on specific columns.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace ACME\\YourExtension\\Access;\n\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopeDiscussionVisibility\n{\n    /**\n     * @param User $actor\n     * @param Builder $query\n     */\n    public function __invoke(User $actor, Builder $query)\n    {\n        $query->orWhere(function($query) use ($actor) {\n            $query->where('some_column', true);\n            $query->where('some_other_column', false);\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Internal Link Syntax in Flarum with Mithril 2.0\nDESCRIPTION: This snippet demonstrates how to update the syntax for creating internal links in Flarum when migrating from Mithril 0.2 to Mithril 2.0. It shows the change from using 'config={m.route}' to using the new 'Link' component.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\n<a href=\"/path\" config={m.route}>Link Content</a>\n\n// Mithril 2\nimport Link from 'flarum/components/Link';\n\n<Link href=\"/path\">Link Content</Link>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Create Controller for JSON:API in Flarum\nDESCRIPTION: Shows how to create a controller for creating resources that extends AbstractCreateController. The example implements a CreateTagController that creates a new tag from request data.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractCreateController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass CreateTagController extends AbstractCreateController\n{\n    public $serializer = TagSerializer::class;\n    \n    protected function data(Request $request, Document $document)\n    {\n        $attributes = Arr::get($request->getParsedBody(), 'data.attributes');\n        \n        return Tag::create([\n            'name' => Arr::get($attributes, 'name')\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using withAttr for Form Input Handling in Flarum (JSX)\nDESCRIPTION: This snippet shows how to use the withAttr utility in Flarum for simplifying form input handling. It demonstrates usage with both Streams and custom callables.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/forms.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/utils/Stream';\nimport withAttr from 'flarum/utils/withAttr';\n\nconst value = Stream();\n\n// With a stream\n<input type=\"text\" value={value()} oninput={withAttr('value', value)}></input>\n\n// With any callable\n<input type=\"text\" value={value()} oninput={withAttr('value', (currValue) => {\n  // Some custom logic here\n})}></input>\n```\n\n----------------------------------------\n\nTITLE: Implementing Subtree Retainer for Mithril Components\nDESCRIPTION: This snippet demonstrates the usage of the SubtreeRetainer utility class in a Mithril component to optimize rendering by avoiding unnecessary redraws. The component only redraws when specific conditions are met, managed through the needsRebuild method.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.showContent = false;\n\n    this.subtree = new SubtreeRetainer(\n      () => this.showContent,\n    )\n  }\n\n  onbeforeupdate() {\n    // If needsRebuild returns true, mithril will diff and redraw the vnode as usual. Otherwise, it will skip this redraw cycle.\n    // In this example, this means that this component and its children will only be redrawn when extra content is toggled.\n    return this.subtree.needsRebuild();\n  }\n\n  view(vnode) {\n    return <div>\n      <button onclick={() => this.showContent = !this.showContent}>Toggle Extra Content</button>\n      <p>Hello World!{this.showContent ? ' Extra Content!' : ''}</p>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Console Commands in Flarum\nDESCRIPTION: This snippet demonstrates how to test custom console commands in Flarum using the ConsoleTestCase class, including running commands with arguments and options.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Tests\\integration\\ConsoleTestCase;\n\nclass ConsoleTest extends ConsoleTestCase\n{\n    /**\n     * @test\n     */\n    public function command_works()\n    {\n        $input = [\n            'command' => 'some:command',  // The command name, equivalent of `php flarum some:command`\n            'foo' => 'bar',  // arguments\n            '--lorem' => 'ipsum'  // options\n        ];\n\n        $this->assertEquals('Some Output.', $this->runCommand($input));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on RHEL-based Systems\nDESCRIPTION: Commands to install cron (crontabs) on RHEL-based Linux distributions like CentOS, AlmaLinux, and Rocky Linux.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/scheduler.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf update\nsudo dnf install crontabs\n```\n\n----------------------------------------\n\nTITLE: Creating New Resources in JavaScript\nDESCRIPTION: Shows how to create a new resource by creating a model instance with createRecord and then saving it. This process creates a new record in the database via the API.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconst discussion = app.store.createRecord('discussions');\n\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: SubtreeRetainer Example in Mithril 2\nDESCRIPTION: Demonstrates the usage of SubtreeRetainer with Mithril 2's onbeforeupdate lifecycle method to optimize component rendering by preventing unnecessary redraws\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nclass CustomComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.showContent = false;\n\n    this.subtree = new SubtreeRetainer(\n      () => this.showContent,\n    )\n  }\n\n  onbeforeupdate() {\n    return this.subtree.needsRebuild();\n  }\n\n  view(vnode) {\n    return <div>\n      <button onclick={() => this.showContent = !this.showContent}>Toggle Extra Content</button>\n      <p>Hello World!{this.showContent ? ' Extra Content!' : ''}</p>\n    </div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Backend Translation Update (PHP)\nDESCRIPTION: This code snippet illustrates how to update backend translation calls to use the new ICU MessageFormat. It replaces `transChoice` with `trans`, includes the pluralization variable in the data array, and removes the need to wrap translation keys in curly braces.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"$translator->transChoice('some-translation', $guestCount, ['{host}' => $hostName]);\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$translator->trans('some-translation', ['host' => $hostName, 'guestCount' => $guestCount]);\n```\n\n----------------------------------------\n\nTITLE: Updated Modal Implementation in Flarum\nDESCRIPTION: This code comparison shows how to update modal implementation in Flarum after the Mithril 2 upgrade. Instead of passing a component instance to app.modal.show(), you now pass the component class and attributes separately.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// Old way\napp.modal.show(new LoginModal(identification: 'prefilledUsername'));\n\n// New way\napp.modal.show(LoginModal, {identification: 'prefilledUsername'});\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Like Notification Blueprint in PHP\nDESCRIPTION: Example implementation of a notification blueprint for post likes, showing required methods for handling notification content and behavior.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Likes\\Notification;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass PostLikedBlueprint implements BlueprintInterface\n{\n    public $post;\n\n    public $user;\n\n    public function __construct(Post $post, User $user)\n    {\n        $this->post = $post;\n        $this->user = $user;\n    }\n\n    public function getSubject()\n    {\n        return $this->post;\n    }\n\n    public function getFromUser()\n    {\n        return $this->user;\n    }\n\n    public function getData()\n    {\n    }\n\n    public static function getType()\n    {\n        return 'postLiked';\n    }\n\n    public static function getSubjectModel()\n    {\n        return Post::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Titles in Flarum Frontend\nDESCRIPTION: Examples of how to set browser tab titles for pages, showing both static and dynamic approaches with data loading.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Page from 'flarum/common/components/Page';\n\n\nexport default class CustomPage extends Page {\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    app.setTitle(\"Cool Page\");\n    app.setTitleCount(0);\n  }\n\n  view() {\n    // ...\n  }\n}\n\nexport default class CustomPageLoadsData extends Page {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    app.store.find(\"users\", 1).then(user => {\n      app.setTitle(user.displayName());\n      app.setTitleCount(0);\n    })\n  }\n\n  view() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Flarum Services in PHP Unit Tests\nDESCRIPTION: Demonstrates how to mock Flarum services in PHP unit tests using Mockery. It shows how to mock the settings repository and control specific return values for setting keys.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function setUp(): void\n{\n    parent::setUp();\n    // example - if our setting needs settings, we can mock the settings repository\n    $settingsRepo = m::mock(SettingsRepositoryInterface::class);\n    // and then control specific return values for each setting key\n    $settingsRepo->shouldReceive('get')->with('some-plugin-key')->andReturn('some-value-useful-for-testing');\n    // construct your class under test, passing mocked services as needed\n    $this->serializer = new YourClassUnderTest($settingsRepo);\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Settings Serialization in Flarum\nDESCRIPTION: This example code illustrates how to serialize settings to the frontend when using Flarum's Settings extender. It allows for preprocessing of the retrieved setting value.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/settings.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n   (new Extend\\Settings)\n      ->serializeToForum('myCoolSetting', 'my.cool.setting.key')\n      ->serializeToForum('myCoolSettingModified', 'my.cool.setting.key', function ($retrievedValue) {\n        // This third argument is optional, and allows us to pass the retrieved setting through some custom logic.\n        // In this example, we'll append a string to it.\n\n        return \"My Cool Setting: $retrievedValue\";\n      }, \"default value!\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Defining New Frontend Model in JavaScript\nDESCRIPTION: Creates a new model class with attributes and relationships\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport Model from 'flarum/Model';\n\nexport default class Tag extends Model {\n  title = Model.attribute('title');\n  createdAt = Model.attribute('createdAt', Model.transformDate);\n  parent = Model.hasOne('parent');\n  discussions = Model.hasMany('discussions');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PHPStan Scripts in Composer\nDESCRIPTION: This JSON snippet defines custom scripts for PHPStan analysis and cache clearing using Composer. Facilitates ease of use via simple Composer commands. Ensure `composer.json` is set correctly.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"analyse:phpstan\": \"phpstan analyse\",\n    \"clear-cache:phpstan\": \"phpstan clear-result-cache\"\n  },\n  \"scripts-descriptions\": {\n    \"analyse:phpstan\": \"Run static analysis\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Classes in PHP\nDESCRIPTION: This PHP snippet shows how to import classes from other extensions using the use statement. It includes an example of instantiating a class to demonstrate the import, with a note on checking for class existence if the dependency might be optional.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Tags\\Tag;\n\nclass SomeClass\n{\n    public function someMethod()\n    {\n        return new Tag();  // This is not the correct way to instantiate models, it's just here for example of importing.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Extension Dependencies in composer.json\nDESCRIPTION: Example of how to specify extension dependencies in the composer.json file for a Flarum extension. This ensures that required extensions are enabled before the dependent extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my/extension\",\n  \"description\": \"Cool New Extension\",\n  \"type\": \"flarum-extension\",\n  \"license\": \"MIT\",\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.14\",\n    \"flarum/tags\": \"^0.1.0-beta.14\",  // Will mark tags as a dependency\n    \"flarum/mentions\": \"^0.1.0-beta.14\"  // Will mark mentions as a dependency\n  }\n  // other config\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Relationships in PHP for Flarum Backend\nDESCRIPTION: Shows how to define custom relationships using the relationship method of the Model extender in Flarum's backend. This allows for more complex relationships like morphMany, morphToMany, and morphedByMany.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->relationship('mobile', 'App\\Phone', function ($user) {\n            // Return any Eloquent relationship here.\n            return $user->belongsToMany(Discussion::class, 'recipients')\n                ->withTimestamps()\n                ->wherePivot('removed_at', null);\n        })\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Console Command Class in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to create a custom console command by extending the AbstractCommand class. It includes methods for configuring the command name and description, and a placeholder for the command logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/console.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Console\\AbstractCommand;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass YourCommand extends AbstractCommand {\n  protected function configure()\n  {\n      $this\n          ->setName('YOUR COMMAND NAME')\n          ->setDescription('YOUR COMMAND DESCRIPTION');\n  }\n  protected function fire()\n  {\n    // Your logic here!\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using withAttr for Simplified Form Processing in Flarum (JSX)\nDESCRIPTION: This snippet shows how to use the withAttr utility in Flarum for simplified form input processing, both with streams and custom callables.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/forms.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\nimport withAttr from 'flarum/common/utils/withAttr';\n\nconst value = Stream();\n\n// With a stream\n<input type=\"text\" value={value()} oninput={withAttr('value', value)}></input>\n\n// With any callable\n<input type=\"text\" value={value()} oninput={withAttr('value', (currValue) => {\n  // Some custom logic here\n})}></input>\n```\n\n----------------------------------------\n\nTITLE: Handling CSRF Token Mismatch Error in Flarum REST API\nDESCRIPTION: Indicates an error when the CSRF token is absent or invalid in a request, typical of a 400 HTTP error response. This error implies missing or invalid 'Authorization' header, attempting authentication through session cookies instead.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/rest-api.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"errors\": [{\"status\": \"400\", \"code\": \"csrf_token_mismatch\"}]}\n```\n\n----------------------------------------\n\nTITLE: Modifying AJAX Request Structure for Mithril 2.0 - JavaScript\nDESCRIPTION: This snippet demonstrates the updated structure for making AJAX requests in Mithril 2.0, where the `data` parameter is divided into `body` and `params`, aligning with current best practices for request handling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Mithril 0.2\nconst deferred = m.deferred();\n\napp.store.find('posts').then(result => deferred.resolve(result));\n\nreturn deferred.promise;\n\n// Mithril 2\nreturn app.store.find('posts');\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Console Command in PHP for Flarum\nDESCRIPTION: This snippet demonstrates how to create a custom console command by extending the AbstractCommand class. It includes methods for configuring the command name and description, as well as a placeholder for the command logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/console.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Console\\AbstractCommand;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass YourCommand extends AbstractCommand {\n  protected function configure()\n  {\n      $this\n          ->setName('YOUR COMMAND NAME')\n          ->setDescription('YOUR COMMAND DESCRIPTION');\n  }\n  protected function fire()\n  {\n    // Your logic here!\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Key References for Translation Reuse in YAML\nDESCRIPTION: Demonstrates how to reuse translations across different locations using Flarum's key reference system with the ref namespace. This pattern helps maintain consistency and simplifies translation management.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => core.ref.log_in\n\n    log_in:\n      submit_button: => core.ref.log_in\n      title: => core.ref.log_in\n\n  ref:\n    log_in: Log In\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Configuration for Unit Tests\nDESCRIPTION: Example PHPUnit configuration file for unit tests. Includes specific settings and a Mockery listener for unit testing Flarum extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n\n    <testsuites>\n        <testsuite name=\"Flarum Unit Tests\">\n            <directory suffix=\"Test.php\">./unit</directory>\n        </testsuite>\n    </testsuites>\n    <listeners>\n        <listener class=\"\\Mockery\\Adapter\\Phpunit\\TestListener\"></listener>\n    </listeners>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Component in JSX\nDESCRIPTION: Example of creating a notification component for new posts in Flarum. Demonstrates implementation of icon, href, and content methods for notification display.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Notification from 'flarum/forum/components/Notification';\nimport username from 'flarum/common/helpers/username';\n\nexport default class NewPostNotification extends Notification {\n  icon() {\n    return 'fas fa-star';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n    const discussion = notification.subject();\n    const content = notification.content() || {};\n\n    return app.route.discussion(discussion, content.postNumber);\n  }\n\n  content() {\n    return app.translator.trans('flarum-subscriptions.forum.notifications.new_post_text', {user: this.attrs.notification.fromUser()});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Nested YAML Translation Keys\nDESCRIPTION: Shows how to organize translations using nested keys in a YAML locale file, following Flarum's namespacing conventions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nacme-hello-world:\n  alert:\n    hello_text: \"Hello, world!\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Setting Component in Flarum Admin\nDESCRIPTION: Shows how to create a custom setting component with conditional rendering in the Flarum admin panel.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/admin.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\nimport app from 'flarum/admin/app';\n\nreturn [\n  new Extend.Admin()\n    .setting(\n      () => function () {\n        if (app.session.user.username() === 'RocketMan') {\n          return (\n            <div className=\"Form-group\">\n              <h1> {app.translator.trans('acme-interstellar.admin.you_are_rocket_man_label')} </h1>\n              <label className=\"checkbox\">\n                <input type=\"checkbox\" bidi={this.setting('acme-interstellar.rocket_man_setting')}/>\n                {app.translator.trans('acme-interstellar.admin.rocket_man_setting_label')}\n              </label>\n            </div>\n          );\n        }\n      },\n    )\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Gambits and Mutators in Flarum PHP\nDESCRIPTION: Demonstrates how to register custom gambits and search mutators using the 'SimpleFlarumSearch' extender. This snippet includes the instantiation of the 'CountryGambit' and 'OnlySameCountrySearchMutator' classes into the search extension mechanism.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\SimpleFlarumSearch(UserSearcher::class))\n    ->addGambit(CountryGambit::class)\n    ->addSearchMutator(OnlySameCountrySearchMutator::class),\n  // Other extenders\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Discussion in Flarum's REST API\nDESCRIPTION: Example of a POST request to /api/discussions to create a new discussion with title, content, and tag relationships. This shows the required structure for creating discussion resources.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\":{\n    \"type\": \"discussions\",\n    \"attributes\": {\n      \"title\": \"Lorem Ipsum\",\n      \"content\": \"Hello World\"\n    },\n    \"relationships\": {\n      \"tags\": {\n        \"data\": [\n          {\n            \"type\": \"tags\",\n            \"id\": \"1\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Composer Update Error Example\nDESCRIPTION: Example of a common Composer dependency resolution error when updating Flarum, showing incompatible package versions.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/update.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflarum/flarum                     -               requires          flarum/core (v0.1.0-beta.15)\nfof/moderator-notes               0.4.4           requires          flarum/core (>=0.1.0-beta.15 <0.1.0-beta.16)\njordanjay29/flarum-ext-summaries  0.3.2           requires          flarum/core (>=0.1.0-beta.14 <0.1.0-beta.16)\nflarum/core                       v0.1.0-beta.16  requires          dflydev/fig-cookies (^3.0.0)\nflarum/flarum                     -               does not require  dflydev/fig-cookies (but v2.0.3 is installed)\n```\n\n----------------------------------------\n\nTITLE: Using Link Component for Internal Navigation in JSX\nDESCRIPTION: Examples of using Flarum's Link component for creating links to internal pages and external websites in JSX.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/routes.md#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'flarum/common/components/Link';\n\n// Link can be used just like any other component:\n<Link href=\"/route/known/to/mithril\">Hello World!</Link>\n\n// You'll frequently use Link with generated routes:\n<Link href={app.route('settings')}>Hello World!</Link>\n\n// Link can even generate external links with the external attr:\n<Link external={true} href=\"https://google.com\">Hello World!</Link>\n\n// The above example with external = true is equivalent to:\n<a href=\"https://google.com\">Hello World!</a>\n// but is provided for flexibility: sometimes you might have links\n// that are conditionally internal or external.\n```\n\n----------------------------------------\n\nTITLE: Exporting Frontend Components in JavaScript\nDESCRIPTION: This snippet demonstrates how to export classes or functions from a Flarum extension's frontend, allowing other extensions to use or modify them. It shows the structure of the extension's index.js file with an initializer and exports.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/extensibility.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('your-extension-id', () => {\n  // Your Extension Code Here\n})\n\nexport {\n  // Put all the stuff you want to export here.\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Notification Type in Flarum\nDESCRIPTION: Example of using the Notification extender to register a custom notification type with Flarum. This code registers the NewPostBlueprint notification with both alert and email notification methods enabled by default.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Api\\Serializer\\BasicDiscussionSerializer;\nuse Flarum\\Extend\nuse Flarum\\Subscriptions\\Notification\\NewPostBlueprint;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->type(NewPostBlueprint::class, BasicDiscussionSerializer::class, ['alert', 'email']),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Translation Key Reference Example in YAML\nDESCRIPTION: Example demonstrating an incorrect approach to key references where translations directly reference each other instead of using the 'ref' namespace. This creates maintainability issues when translations need to be changed.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/i18n.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => Log In\n\n    log_in:\n      submit_button: => core.forum.header.log_in_link  # Never reference keys\n      title: => core.forum.header.log_in_link          # that aren't in \"ref\"!\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom User Filter in PHP\nDESCRIPTION: Creates a custom filter for filtering users by country in Flarum's database search driver. Implements FilterInterface to define filtering logic.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/search.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace YourPackage\\Filter;\n\nuse Flarum\\Search\\Database\\DatabaseSearchState;\nuse Flarum\\Search\\Filter\\FilterInterface;\nuse Flarum\\Search\\SearchState;\n\n/**\n * @implements FilterInterface<DatabaseSearchState>\n */\nclass CountryFilter implements FilterInterface\n{\n    public function getFilterKey(): string\n    {\n        return 'country';\n    }\n\n    public function filter(SearchState $state, string $filterValue, bool $negate)\n    {\n        $country = trim($filterValue, '\"');\n\n        $state->getQuery()->where('users.country', $negate ? '!=' : '=', $country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom JSON:API Serializer for Flarum\nDESCRIPTION: Shows how to create a new JSON:API serializer for a custom resource type. The serializer defines the resource type, default attributes, and relationships that will be exposed through the API.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\AbstractSerializer;\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nclass DiscussionSerializer extends AbstractSerializer\n{\n    protected $type = 'discussions';\n\n    protected function getDefaultAttributes($discussion)\n    {\n        return [\n            'title' => $discussion->title,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Eloquent Relationships in PHP\nDESCRIPTION: Demonstrates how to add relationships to existing models using the Model extender. Shows examples of hasOne, belongsTo, hasMany, and belongsToMany relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->hasOne('phone', 'App\\Phone', 'foreign_key', 'local_key')\n        ->belongsTo('country', 'App\\Country', 'foreign_key', 'other_key')\n        ->hasMany('comment', 'App\\Comment', 'foreign_key', 'local_key')\n        ->belongsToMany('role', 'App\\Role', 'role_user', 'user_id', 'role_id')\n```\n\n----------------------------------------\n\nTITLE: Handling Slug Changes in PHP for Flarum Models\nDESCRIPTION: This code demonstrates how to handle slug changes in Flarum models. It uses the onSlugChanged method to perform actions when a slug is modified, such as updating related records.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/slugging.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Database\\AbstractModel;\nuse Flarum\\Http\\SlugManager;\n\nclass YourModel extends AbstractModel\n{\n    use Flarum\\Database\\Traits\\HasSlug;\n\n    protected function onSlugChanged($oldSlug, $newSlug)\n    {\n        // Perform actions when the slug changes\n        // For example, update related records\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Slugging for Models in PHP using Flarum\nDESCRIPTION: This code snippet demonstrates how to implement basic slugging for a model in Flarum. It uses the HasSlug trait and defines the getSlugDriver method to create a SlugDriver instance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/slugging.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Database\\AbstractModel;\nuse Flarum\\Http\\SlugManager;\n\nclass YourModel extends AbstractModel\n{\n    use Flarum\\Database\\Traits\\HasSlug;\n\n    public function getSlugDriver(): SlugDriver\n    {\n        return $this->container->make(SlugManager::class)->forModel($this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Titles in Flarum Custom Pages\nDESCRIPTION: Demonstrates how to set custom page titles for Flarum pages, including examples for static and dynamically loaded titles.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Page from 'flarum/common/components/Page';\n\n\nexport default class CustomPage extends Page {\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    app.setTitle(\"Cool Page\");\n    app.setTitleCount(0);\n  }\n\n  view() {\n    // ...\n  }\n}\n\nexport default class CustomPageLoadsData extends Page {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    app.store.find(\"users\", 1).then(user => {\n      app.setTitle(user.displayName());\n      app.setTitleCount(0);\n    })\n  }\n\n  view() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Group and User Permissions in PHP\nDESCRIPTION: Examples of common methods used to check permissions for groups and users in Flarum. Shows how to retrieve permissions via Eloquent relations, check specific permissions, and enumerate user permissions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// An Eloquent relation to the group's permissions\n$group->permissions();\n\n// Check if a group has a permission\n$group->hasPermission('viewForum');\n\n// Enumerate all the user's permissions\n$user->getPermissions();\n\n// Check if the user is in a group with the given permission\n$user->hasPermission('viewForum');\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Pusher Notification Driver in PHP\nDESCRIPTION: Example of implementing a custom notification driver for Pusher integration with queue support.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/notifications.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Flarum\\Pusher;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\Driver\\NotificationDriverInterface;\nuse Illuminate\\Contracts\\Queue\\Queue;\n\nclass PusherNotificationDriver implements NotificationDriverInterface\n{\n    /**\n     * @var Queue\n     */\n    protected $queue;\n\n    public function __construct(Queue $queue)\n    {\n        $this->queue = $queue;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function send(BlueprintInterface $blueprint, array $users): void\n    {\n        if (count($users)) {\n            $this->queue->push(new SendPusherNotificationsJob($blueprint, $users));\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function registerType(string $blueprintClass, array $driversEnabledByDefault): void\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on RHEL-based Systems\nDESCRIPTION: Commands to install cron (crontabs package) on RHEL-based Linux distributions such as CentOS, AlmaLinux, and Rocky Linux.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/scheduler.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf update\nsudo dnf install crontabs\n```\n\n----------------------------------------\n\nTITLE: Using AssertPermissionTrait Methods in PHP\nDESCRIPTION: Shows the usage of assertRegistered() and assertPermission() methods from the Flarum\\User\\AssertPermissionTrait, which have been updated to match new HTTP status code semantics in Beta 10.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b10.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\User\\AssertPermissionTrait;\n\nclass SomeClass\n{\n    use AssertPermissionTrait;\n\n    public function someMethod()\n    {\n        $this->assertRegistered();\n        $this->assertPermission('some.permission');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model Relationships in PHP\nDESCRIPTION: Demonstrates how to add relationships to existing models using the Model extender with various relationship types like hasOne, belongsTo, hasMany, and belongsToMany.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/models.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->hasOne('phone', 'App\\Phone', 'foreign_key', 'local_key')\n        ->belongsTo('country', 'App\\Country', 'foreign_key', 'other_key')\n        ->hasMany('comment', 'App\\Comment', 'foreign_key', 'local_key')\n        ->belongsToMany('role', 'App\\Role', 'role_user', 'user_id', 'role_id')\n```\n\n----------------------------------------\n\nTITLE: View Extender in Flarum Extension\nDESCRIPTION: Shows the correct method of registering Laravel Blade views using Flarum's View extender, replacing the previous direct view factory injection method\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// Deprecated method\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n  function (Factory $view) {\n    $view->addNamespace(NAME, RELATIVE PATH);\n  }\n];\n\n// New recommended method\nuse Flarum\\Extend\\View;\n\nreturn [\n  (new View)->namespace(NAME, RELATIVE PATH)\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Discussion\nDESCRIPTION: Illustrates how to create a new discussion using a POST request to the `/api/discussions` endpoint. The JSON payload includes the discussion title, content, and associated tags.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"{\n  \\\"data\\\":{\n    \\\"type\\\": \\\"discussions\\\",\n    \\\"attributes\\\": {\n      \\\"title\\\": \\\"Lorem Ipsum\\\",\n      \\\"content\\\": \\\"Hello World\\\"\n    },\n    \\\"relationships\\\": {\n      \\\"tags\\\": {\n        \\\"data\\\": [\n          {\n            \\\"type\\\": \\\"tags\\\",\n            \\\"id\\\": \\\"1\\\"\n          }\n        ]\n      }\n    }\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Using Bidi Attribute for Bidirectional Binding in Flarum Forms\nDESCRIPTION: This snippet demonstrates the use of the bidi attribute in Flarum forms for bidirectional binding. It shows how bidi simplifies input processing compared to manual value and oninput handling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/forms.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\n\nconst value = Stream();\n\n// Without bidi\n<input type=\"text\" value={value()} oninput={e => value(e.target.value)}></input>\n\n// With bidi\n<input type=\"text\" bidi={value}></input>\n```\n\n----------------------------------------\n\nTITLE: Informative Text Element Suffixes in YAML\nDESCRIPTION: Suffix naming conventions for translation keys used in informative or descriptive text elements, including confirmations, messages, general text, titles, and tooltips.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n_confirmation:  # Used for messages displayed to confirm an operation.\n_message:       # Used for messages that show the result of an operation.\n_text:          # Used for any text that is not a message, title, or tooltip.\n_title:         # Used for text displayed as the title of a page or modal.\n_tooltip:       # Used for text displayed when the user hovers over something.\n```\n\n----------------------------------------\n\nTITLE: Updating Mithril Redraw Prevention\nDESCRIPTION: Example showing how to prevent automatic redraws in event handlers, updated from Mithril 0.2 to Mithril 2.0 syntax.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\n<button onclick={() => {\n  console.log(\"Hello world\");\n  m.redraw.strategy('none');\n}>\n  Click Me!\n</button>\n\n// Mithril 2\n<button onclick={e => {\n  console.log(\"Hello world\");\n  e.redraw = false;\n}>\n  Click Me!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Overriding Views in Flarum using PHP\nDESCRIPTION: This snippet demonstrates how to override existing templates from core or other extensions in Flarum. It uses the View extender's extendNamespace method to specify the directory containing the override templates.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/views.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->extendNamespace('acme.hello-world', __DIR__.'/override_views'),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a New Model in JavaScript\nDESCRIPTION: Creates a new model class for a custom resource type. The example shows how to extend the Model class and define attributes and relationships using the appropriate Model methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport Model from 'flarum/Model';\n\nexport default class Tag extends Model {\n  title = Model.attribute('title');\n  createdAt = Model.attribute('createdAt', Model.transformDate);\n  parent = Model.hasOne('parent');\n  discussions = Model.hasMany('discussions');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Table Naming Conventions in Flarum\nDESCRIPTION: Guidelines for naming database tables in Flarum, including using plural forms, separating words with underscores, and naming conventions for relationship tables.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/contributing.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Use plural form (`discussions`)\n* Separate multiple words with underscores (`access_tokens`)\n* For relationships tables, join the two table names in singular form with an underscore in alphabetical order (eg. `discussion_user`)\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Filters and Mutators with Flarum Extend in PHP\nDESCRIPTION: This snippet demonstrates how to register custom filters and filter mutators using Flarum's Extend system. It shows the use of the Filter extender to add a custom filter and mutator to the UserFilterer.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\Filter(UserFilterer::class))\n    ->addFilter(CountryFilter::class)\n    ->addFilterMutator(OnlySameCountryFilterMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: CSRF Token Mismatch Error in Flarum REST API\nDESCRIPTION: This snippet shows the error response when a CSRF token mismatch occurs, typically due to missing or invalid Authorization header. It returns a 400 HTTP status code with a specific error message.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"400\",\n      \"code\": \"csrf_token_mismatch\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving URL from Container in PHP\nDESCRIPTION: Demonstrates how to resolve the URL from the container in Flarum Beta 14. The old method of using app()->url() no longer works, and developers need to resolve or inject an instance of Flarum\\Foundation\\Config.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\napp()->url() // No longer works\n\n// New method\n$config = app()->make(Flarum\\Foundation\\Config::class);\n$url = $config->url();\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Address from Request (PHP)\nDESCRIPTION: This snippet demonstrates how to access the IP address from a request using `$request->getAttribute('ipAddress')`. This method retrieves the IP address associated with the current request. The IP address is made available through the request attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"$request->getAttribute('ipAddress')\"\n```\n\n----------------------------------------\n\nTITLE: API Controller Data Serialization Extension in PHP\nDESCRIPTION: Shows how to use the ApiController extender to modify data before serialization, such as loading additional model relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillSerializeData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->prepareDataForSerialization(function ($controller, $data, $request, $document) {\n            $data->load('myCustomRelation');\n        }),\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing LanguagePack Extender in PHP for Flarum\nDESCRIPTION: This code snippet demonstrates how to initialize the LanguagePack extender in a Flarum extension. It's a simple instantiation of the Flarum\\Extend\\LanguagePack class, which is all that's needed for both language packs and translation packages.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/translate.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn new Flarum\\Extend\\LanguagePack;\n```\n\n----------------------------------------\n\nTITLE: Stream Usage in Flarum with Javascript\nDESCRIPTION: This JavaScript code illustrates how to use Mithril's Stream in Flarum to manage form data reactively. It demonstrates how to create a Stream, set its value, and retrieve its value.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/forms.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\n\n\nconst value = Stream(\"hello!\");\nvalue() === \"hello!\"; // true\nvalue(\"world!\");\nvalue() === \"world!\"; // true\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Content to Forum Frontend in PHP\nDESCRIPTION: This code shows how to use the Frontend extender to inject custom JavaScript into the forum's HTML document head, creating an alert message.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/start.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\nuse Flarum\\Frontend\\Document;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->content(function (Document $document) {\n            $document->head[] = '<script>alert(\"Hello, world!\")</script>';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Eloquent Relationship Definition\nDESCRIPTION: Shows how to create custom Eloquent relationships using the relationship method for more complex scenarios like morphMany, morphToMany, and morphedByMany.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n    new Extend\\Model(User::class)\n        ->relationship('mobile', 'App\\Phone', function ($user) {\n            // Return any Eloquent relationship here.\n            return $user->belongsToMany(Discussion::class, 'recipients')\n                ->withTimestamps()\n                ->wherePivot('removed_at', null);\n        })\n```\n\n----------------------------------------\n\nTITLE: Modifying Frontend Content in Flarum (PHP)\nDESCRIPTION: Shows how to use the Frontend extender in PHP to modify the HTML document of Flarum's frontend. It demonstrates adding scripts to the head and changing the document title.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Frontend\\Document;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->content(function (Document $document, Request $request) {\n            $document->head[] = '<script>alert(\"Hello, world!\")</script>';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Eager Loading with ApiController Extender\nDESCRIPTION: Example of using the ApiController extender to add includes and eager load relationships for the ListDiscussionsController. This helps solve N+1 query issues.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    (new Extend\\ApiController(FlarumController\\ListDiscussionsController::class))\n        ->addInclude(['tags', 'tags.state', 'tags.parent'])\n        ->load('tags'),\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Serializer in PHP for Flarum\nDESCRIPTION: Shows how to define a new resource type by creating a custom serializer class that extends AbstractSerializer in Flarum, including specifying the resource type and default attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Serializer\\AbstractSerializer;\nuse Flarum\\Api\\Serializer\\UserSerializer;\n\nclass DiscussionSerializer extends AbstractSerializer\n{\n    protected $type = 'discussions';\n\n    protected function getDefaultAttributes($discussion)\n    {\n        return [\n            'title' => $discussion->title,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Mail Driver in Flarum's extend.php\nDESCRIPTION: This code snippet shows how to register a custom mail driver in Flarum using the Mail extender in the extension's extend.php file. It demonstrates the use of the driver method to add the custom driver class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/mail.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Mail\\CustomDriver;\n\nreturn [\n  // Other extenders\n  (new Extend\\Mail())->driver(CustomDriver::class)\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Discussion with Flarum API\nDESCRIPTION: Example of how to create a new discussion using a POST request to /api/discussions. The request includes the discussion title, content, and relationship to tags.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/rest-api.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\":{\n    \"type\": \"discussions\",\n    \"attributes\": {\n      \"title\": \"Lorem Ipsum\",\n      \"content\": \"Hello World\"\n    },\n    \"relationships\": {\n      \"tags\": {\n        \"data\": [\n          {\n            \"type\": \"tags\",\n            \"id\": \"1\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Response Headers After Request Handling in Middleware\nDESCRIPTION: This snippet demonstrates how to modify the response after the request has been handled by the next middleware in the pipeline, showing how to add a custom content-type header.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/middleware.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    $response = $handler->handle($request);\n\n    // Your logic...\n    $response = $response->withHeader('Content-Type', 'application/json');\n\n    return $response;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Views in Flarum (PHP)\nDESCRIPTION: This snippet demonstrates how to override existing templates from core or extensions in Flarum. It uses the View extender's extendNamespace method to specify a directory containing override templates.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/views.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->extendNamespace('acme.hello-world', __DIR__.'/override_views');\n];\n```\n\n----------------------------------------\n\nTITLE: Translation Key References in YAML\nDESCRIPTION: Demonstrates how to reuse translations across different contexts using Flarum's key reference system within the core namespace. Shows proper organization of reusable translations in the ref namespace.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => core.ref.log_in\n\n    log_in:\n      submit_button: => core.ref.log_in\n      title: => core.ref.log_in\n\n  ref:\n    log_in: Log In\n```\n\n----------------------------------------\n\nTITLE: Create Discussion Request/Response\nDESCRIPTION: Example of creating a new discussion via POST /api/discussions endpoint, showing the required request payload structure and response format.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\":{\n    \"type\": \"discussions\",\n    \"attributes\": {\n      \"title\": \"Lorem Ipsum\",\n      \"content\": \"Hello World\"\n    },\n    \"relationships\": {\n      \"tags\": {\n        \"data\": [\n          {\n            \"type\": \"tags\",\n            \"id\": \"1\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pluralization with ICU MessageFormat\nDESCRIPTION: This snippet uses the ICU MessageFormat syntax for handling pluralization in translations. It dynamically adjusts translation strings based on a count variable, facilitating accurate grammatical representation in multiple languages.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst remaining = this.minPrimary - primaryCount;\nreturn app.translator.trans(\n  'choose_primary_placeholder',\n  { count: remaining }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Controller in PHP\nDESCRIPTION: Example of a controller for deleting resources that extends AbstractDeleteController. Shows how to handle DELETE requests and remove model instances.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/api.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractDeleteController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nclass DeleteTagController extends AbstractDeleteController\n{    \n    protected function delete(Request $request)\n    {\n        $id = Arr::get($request->getQueryParams(), 'id');\n        \n        Tag::findOrFail($id)->delete();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Access Tokens via Flarum REST API\nDESCRIPTION: Token creation request that allows users to create access tokens for authentication. Requires user credentials for authentication and returns a token upon successful creation. The request is made to the /api/token endpoint using a POST request.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/rest-api.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"identification\": \"Toby\", \"password\": \"pass7word\"}\n```\n\n----------------------------------------\n\nTITLE: Saving Resources in Flarum's Frontend\nDESCRIPTION: Shows how to save changes to a model instance using the save method, which sends data back through the API and returns a Promise that resolves with the updated model instance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Name in Flarum Middleware\nDESCRIPTION: This code demonstrates how to access the route name within a middleware after the ResolveRoute middleware has run. It checks if the current route matches a specific name before executing custom logic.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/middleware.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    if ($request->getAttribute('routeName') === 'register') {\n        // Your logic here!\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Scopers in Flarum\nDESCRIPTION: Example of registering custom scopers using Flarum's extender system. Shows how to register both specific ability scopers and global scopers.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\Tags\\Tag;\nuse YourNamespace\\Access;\n\nreturn [\n  (new Extend\\ModelVisibility(Tag::class))\n    ->scope(Access\\ScopeTagVisibility::class, 'view'),\n\n  (new Extend\\ModelVisibility(Discussion::class))\n    ->scopeAll(Access\\ScopeDiscussionVisibilityForAbility::class),\n];\n```\n\n----------------------------------------\n\nTITLE: Restricting Middleware Using Route Name Attribute\nDESCRIPTION: This snippet demonstrates how to restrict middleware execution to specific routes by checking the routeName attribute, which is available after the ResolveRoute middleware has run.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/middleware.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n{\n    if ($request->getAttribute('routeName') === 'register') {\n        // Your logic here!\n    }\n\n    return $handler->handle($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events Example\nDESCRIPTION: Example showing how to dispatch events in a Flarum class by injecting and using the event dispatcher.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Post\\Event\\Deleted;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\n\nclass SomeClass\n{\n    /**\n      * @var Dispatcher\n      */\n    protected $events;\n\n    /**\n      * @param Dispatcher $events\n      */\n    public function __construct(Dispatcher $events)\n    {\n        $this->events = $events;\n    }\n\n    public function someMethod()\n    {\n        // Lógica\n        $this->events->dispatch(\n        new Deleted($somePost, $someActor)\n        );\n        // Más lógica\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Attrs Method Refactoring\nDESCRIPTION: Illustrates the change from using an attrs() method to elementAttrs() method in Flarum components, showing how component attributes are now handled\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nclass CustomComponent extends Component {\n  view() {\n    return <div {...this.attrs()}><p>Hello World!</p></div>;\n  }\n\n  attrs() {\n    return {\n      className: 'SomeClass',\n      onclick: () => console.log('click'),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Binding with Stream in Flarum\nDESCRIPTION: Example showing how to use bidirectional (bidi) binding with Stream in Flarum forms. Demonstrates both the traditional approach and the simplified bidi approach.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/forms.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\n\nconst value = Stream();\n\n// Without bidi\n<input type=\"text\" value={value()} oninput={e => value(e.target.value)}></input>\n\n// With bidi\n<input type=\"text\" bidi={value}></input>\n```\n\n----------------------------------------\n\nTITLE: Checking for Updates using Composer in Flarum (Shell)\nDESCRIPTION: Executes a Composer command to check for updates of packages directly required in the root composer.json file. It outputs the results in JSON format, displaying only packages marked as semver-safe-update and update-possible.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/internal/package-manager.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer outdated -D --format json\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Package for Flarum Extension Frontend\nDESCRIPTION: Defines the NPM package.json file for a Flarum extension frontend, specifying dependencies and build scripts.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"private\": true,\n  \"name\": \"@acme/flarum-hello-world\",\n  \"dependencies\": {\n    \"flarum-webpack-config\": \"0.1.0-beta.10\",\n    \"webpack\": \"^4.0.0\",\n    \"webpack-cli\": \"^3.0.7\"\n  },\n  \"scripts\": {\n    \"dev\": \"webpack --mode development --watch\",\n    \"build\": \"webpack --mode production\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a New Model with the Store in Javascript\nDESCRIPTION: This code snippet demonstrates how to register a new model with the Flarum frontend store using the `Store` extender. It shows how to add the model to the store, associating it with a resource type.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/models.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Store()\n    .add('tags', Tag),\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Search Mutator in PHP for Flarum\nDESCRIPTION: Implementation of a search mutator class that modifies search queries to only show results from the same country as the current user.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace YourPackage\\Search;\n\nuse Flarum\\Query\\QueryCriteria;\nuse Flarum\\Search\\SearchState;\n\nclass OnlySameCountrySearchMutator\n{\n    public function __invoke(SearchState $searchState, QueryCriteria $queryCriteria)\n    {\n        $searchState->getQuery()->where('users.country', $filterState->getActor()->country);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Monkey Patching Example in Flarum Frontend\nDESCRIPTION: Demonstrates basic monkey patching by adding a global attribute and replacing a component's view method with a simple hello world message.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// This adds an attribute to the `app` global.\napp.googleUrl = \"https://google.com\";\n\n// This replaces the output of the discussion page with \"Hello World\"\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\n\nDiscussionPage.prototype.view = function() {\n  return <p>Hello World</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering API Routes in PHP\nDESCRIPTION: Example of how to register standard REST API endpoints for a tags resource using Flarum's Routes extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Routes('api'))\n        ->get('/tags', 'tags.index', ListTagsController::class)\n        ->get('/tags/{id}', 'tags.show', ShowTagController::class)\n        ->post('/tags', 'tags.create', CreateTagController::class)\n        ->patch('/tags/{id}', 'tags.update', UpdateTagController::class)\n        ->delete('/tags/{id}', 'tags.delete', DeleteTagController::class)\n```\n\n----------------------------------------\n\nTITLE: Executing Composer Update Command for Global Flarum Updates in PHP\nDESCRIPTION: This command updates all packages in a Flarum installation. It uses the --prefer-dist flag for faster installation, --no-dev to exclude development dependencies, and --with-all-dependencies to update all dependencies.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/internal/package-manager.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ncommand update --prefer-dist --no-dev -a --with-all-dependencies\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Autoloading for Local Extenders in Flarum\nDESCRIPTION: This snippet shows how to configure the composer.json file to enable autoloading of custom classes for local extenders. It sets up PSR-4 autoloading for the 'App' namespace in the 'app/' directory.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extenders.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"autoload\": {\n    \"psr-4\": {\n        \"App\\\\\": \"app/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Blade Templates in Flarum\nDESCRIPTION: Shows how to render Blade templates to strings, including passing variables to the view. This snippet demonstrates the use of the view factory instance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/views.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, $view is of type `Illuminate\\Contracts\\View\\Factory`\n$renderedString = $view->make('acme.hello-world::greeting')->render();\n\n// You can also pass variables to the view:\n$renderedString = $view->make('acme.hello-world::greeting', ['varName' => true])->render();\n```\n\n----------------------------------------\n\nTITLE: Exporting Frontend Components in a Flarum Extension\nDESCRIPTION: Example of how to export classes or functions from a Flarum extension's frontend so other extensions can use or modify them. The code shows how to combine the extension initializer with exports.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/extensibility.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('your-extension-id', () => {\n  // Your Extension Code Here\n})\n\nexport {\n  // Put all the stuff you want to export here.\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Blade Templates in Flarum\nDESCRIPTION: Demonstrates how to render Blade templates to strings, including passing variables to the view. Shows both basic rendering and rendering with variable injection.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/views.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Here, $view is of type `Illuminate\\Contracts\\View\\Factory`\n$renderedString = $view->make('acme.hello-world::greeting')->render();\n\n// You can also pass variables to the view:\n$renderedString = $view->make('acme.hello-world::greeting', ['varName' => true])->render();\n```\n\n----------------------------------------\n\nTITLE: Customizing Slug Generation in PHP for Flarum Models\nDESCRIPTION: This snippet shows how to customize slug generation by overriding the generateSlug method in the SlugDriver. It allows for custom logic in slug creation based on model attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/slugging.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Http\\SlugManager;\n\n$slugManager->addDriver('yourModel', function ($model) {\n    return new SlugDriver(\n        'slug',\n        function ($model) {\n            return Str::slug($model->title);\n        }\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining API Controller Relationships in PHP\nDESCRIPTION: Shows how to specify default and optional relationships in a Flarum API controller. These properties determine which relationships are included when listing, showing, or creating resources.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n    // The relationships that are included by default.\n    public $include = ['user'];\n\n    // Other relationships that are available to be included.\n    public $optionalInclude = ['discussions'];\n```\n\n----------------------------------------\n\nTITLE: Adding Views in Flarum's extend.php\nDESCRIPTION: This snippet demonstrates how to add a new view namespace to Flarum using the View extender in the extend.php file. It specifies the namespace and the directory where the view files are located.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/views.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views'),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Routes in PHP\nDESCRIPTION: Example of adding a new route to Flarum's forum collection using the Routes extender. Shows how to define a basic GET route with a controller.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\nuse Acme\\HelloWorld\\HelloWorldController;\n\nreturn [\n    (new Extend\\Routes('forum'))\n        ->get('/hello-world', 'acme.hello-world', HelloWorldController::class)\n];\n```\n\n----------------------------------------\n\nTITLE: Registering JavaScript in Flarum Extension\nDESCRIPTION: Demonstrates how to register JavaScript files for a Flarum extension using the Frontend extender in the extend.php file. This makes the extension's JavaScript code available in the frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPStan for Flarum Extension\nDESCRIPTION: NEON configuration file (phpstan.neon) for setting up PHPStan in a Flarum extension, including analysis level, paths, and exclusions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_2\n\nLANGUAGE: neon\nCODE:\n```\nincludes:\n  - vendor/flarum/phpstan/extension.neon\n\nparameters:\n  # The level will be increased in Flarum 2.0\n  level: 5\n  paths:\n    - src\n    - extend.php\n  excludePaths:\n    - *.blade.php\n  checkMissingIterableValueType: false\n  databaseMigrationsPath: ['migrations']\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Event Class in PHP\nDESCRIPTION: Example of defining a custom event class (Deleted) for use in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Post\\Event;\n\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nclass Deleted\n{\n    /**\n     * @var Post\n     */\n    public $post;\n\n    /**\n     * @var User\n     */\n    public $actor;\n\n    /**\n     * @param Post $post\n     * @param User $user\n     */\n    public function __construct(Post $post, User $actor = null)\n    {\n        $this->post = $post;\n        $this->actor = $actor;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Laminas Namespace in PHP\nDESCRIPTION: Example of using the Laminas namespace instead of the removed Zend namespace for class references.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b13.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Laminas\\...\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Service Provider in Flarum's extend.php\nDESCRIPTION: This snippet shows how to register a custom service provider in Flarum's extend.php file using the ServiceProvider extender. This is necessary to integrate the custom service provider into Flarum's boot process.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/service-provider.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    // Other extenders\n    (new Extend\\ServiceProvider())\n        ->register(CustomServiceProvider::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Namespaced Translation Example for Flarum Extension\nDESCRIPTION: Shows how to structure a YAML locale file with proper namespacing for a Flarum extension, using the example from the Quick Start tutorial.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nacme-hello-world:                # Namespacing for the extension; unindented.\n  alert:                         # Namespacing for alerts; indented 2 spaces.\n    hello_text: \"Hello, world!\"  # Identifier/translation; indented 4 spaces.\n```\n\n----------------------------------------\n\nTITLE: Saving Model Changes in JavaScript\nDESCRIPTION: Shows how to save changes to a model back to the API using the save method. This sends a request to update the model with the provided attributes and returns a promise resolving to the updated model instance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Registering a View Namespace in Flarum Extension\nDESCRIPTION: Shows how to tell the view factory where to find your extension's view files by adding a View extender to extend.php. This sets up a namespace for your blade templates.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/views.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views'),\n];\n```\n\n----------------------------------------\n\nTITLE: Injection Example - URL Generator Usage\nDESCRIPTION: Shows how to properly inject and use the URL Generator after the removal of app()->url(). Must use Flarum\\Http\\UrlGenerator instead of the previous direct method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nFlarum\\Http\\UrlGenerator\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flarum Testing Environment\nDESCRIPTION: This PHP script sets up the testing environment for Flarum extensions. It uses the SetupScript class from the flarum/testing library to initialize the testing database and file structure.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/testing.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Testing\\integration\\Setup\\SetupScript;\n\nrequire __DIR__.'/../../vendor/autoload.php';\n\n$setup = new SetupScript();\n\n$setup->run();\n```\n\n----------------------------------------\n\nTITLE: Preparing Data for Serialization in PHP\nDESCRIPTION: PHP code showing how to modify data before serialization in a Flarum API controller using the ApiController extender's prepareDataForSerialization method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillSerializeData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->prepareDataForSerialization(function ($controller, $data, $request, $document) {\n            $data->load('myCustomRelation');\n        }),\n]\n```\n\n----------------------------------------\n\nTITLE: Handling Frontend Route Parameters in JS/JSX\nDESCRIPTION: This JavaScript/JSX snippet shows how to define frontend routes with parameters in Flarum using Mithril. Parameters are passed to components and accessed via `m.route.param`.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nnew Extend.Routes()\n  .add('acme.user', '/user/:id', <UsersPage />)\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving New Resources in JavaScript\nDESCRIPTION: Shows how to create a new resource by creating a model instance with createRecord and then saving it with initial attributes. This is used for creating new records through the API.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussion = app.store.createRecord('discussions');\n\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Checking for Optional Dependencies in JavaScript\nDESCRIPTION: This JavaScript snippet checks if a certain extension ID is present in the global flarum.extensions object, indicating if the extension is enabled in the frontend. It allows conditional functionality based on the presence of optional dependencies.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nif ('some-extension-id' in flarum.extensions) {\n    // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from Frontend Store\nDESCRIPTION: Examples of retrieving resources from the API using the store's find method and accessing cached data with all and getById methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// GET /api/discussions?sort=createdAt\napp.store.find('discussions', {sort: 'createdAt'}).then(console.log);\n\n// GET /api/discussions/123\napp.store.find('discussions', 123).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Importing Exported Elements from Extensions\nDESCRIPTION: This JavaScript snippet demonstrates how to import elements that are explicitly exported by other Flarum extensions, following the webpack configuration. It shows the use of the require function to access exported elements.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst allThingsExportedBySomeExtension = require('@flarum-tags');\n```\n\n----------------------------------------\n\nTITLE: Defining Key References in YAML\nDESCRIPTION: Demonstrates how to define multiple translation keys referencing a single translation in a YAML locale file. This approach provides flexibility for different language contexts.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nedit_stuff_button: => edit_stuff    # Used in the code that creates the button.\nedit_stuff_title: => edit_stuff     # Used in the code that creates the dialog.\n\nedit_stuff: Edit Stuff              # Not used in the code.\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Service Provider in Flarum's extend.php\nDESCRIPTION: This code snippet shows how to register a custom service provider in Flarum's extend.php file using the ServiceProvider extender. This allows the custom service provider to be included in Flarum's boot process.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/service-provider.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    // Other extenders\n    (new Extend\\ServiceProvider())\n        ->register(CustomServiceProvider::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Using User Extender in PHP\nDESCRIPTION: Shows how to use the new User Extender to replace the deprecated PrepareUserGroups and GetDisplayName events. This is the new way to extend user functionality in Flarum Beta 14.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\User())\n        ->displayNameDriver('custom_driver', function ($user) {\n            // Custom logic to generate display name\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Controller in PHP for Flarum\nDESCRIPTION: Example of a simple controller class that implements RequestHandlerInterface for handling HTTP requests in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Acme\\HelloWorld;\n\nuse Laminas\\Diactoros\\Response\\HtmlResponse;\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass HelloWorldController implements RequestHandlerInterface\n{\n    public function handle(Request $request): Response\n    {\n        return new HtmlResponse('<h1>Hello, world!</h1>');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Relationships in PHP\nDESCRIPTION: Shows how to add custom relationships, such as morphMany, morphToMany, and morphedByMany, using the relationship method of the Model extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnew Extend\\Model(User::class)\n    ->relationship('mobile', 'App\\Phone', function ($user) {\n        // Return any Eloquent relationship here.\n        return $user->belongsToMany(Discussion::class, 'recipients')\n            ->withTimestamps()\n            ->wherePivot('removed_at', null);\n    })\n```\n\n----------------------------------------\n\nTITLE: Defining Frontend Routes in JavaScript for Flarum Extension\nDESCRIPTION: This JavaScript code uses the Routes extender to add a new frontend route in a Flarum extension. It specifies the route name, path, and the component to render.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Routes()\n    .add('acme.users', '/users', <UsersPage />),\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions in Flarum Migrations\nDESCRIPTION: Demonstrates adding permissions using a migration. This example assigns a specific permission to a Flarum group, ensuring that the permissions are correctly configured during extension installation or updates.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\nreturn Migration::addPermissions([\n    'some.permission' => Group::MODERATOR_ID\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring composer.json for Local Extenders in Flarum\nDESCRIPTION: This JSON snippet shows how to modify the composer.json file to support custom classes for local extenders. It adds PSR-4 autoloading for the App namespace, pointing to an app/ directory.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extenders.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"autoload\": {\n    \"psr-4\": {\n        \"App\\\\\": \"app/\"\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Component Attrs Method Example\nDESCRIPTION: Demonstration of the attrs() method usage in components, which provides extensible way to provide attrs to top-level child vnode.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends Component {\n  view() {\n    return <div {...this.attrs()}><p>Hello World!</p></div>;\n  }\n\n  attrs() {\n    return {\n      className: 'SomeClass',\n      onclick: () => console.log('click'),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Usage in JavaScript\nDESCRIPTION: Shows the changes in how the Composer component is used in Flarum. Methods have been moved to ComposerState and the way of loading the composer has changed.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Old way\napp.composer.load(new DiscussionComposer({user: app.session.user}));\n\n// New way\napp.composer.load(DiscussionComposer, {user: app.session.user})\n```\n\n----------------------------------------\n\nTITLE: Updating Backend Translations in PHP\nDESCRIPTION: Changes required for backend translations in PHP to use the new ICU MessageFormat system and remove curly braces from translation keys.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Old code\n$translator->transChoice('some-translation', $guestCount, ['{host}' => $hostName]);\n\n// New code\n$translator->trans('some-translation', ['host' => $hostName, 'guestCount' => $guestCount]);\n```\n\n----------------------------------------\n\nTITLE: Adding CSS to Flarum Extension\nDESCRIPTION: Shows how to add both JavaScript and CSS/LESS assets to a Flarum extension using the Frontend extender, allowing for custom styling in addition to functionality.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less')\n```\n\n----------------------------------------\n\nTITLE: Mocking Flarum Services in PHP Unit Tests\nDESCRIPTION: Demonstrates how to mock Flarum services in PHP unit tests using Mockery. It shows setting up mocks for settings repository and user authentication.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function setUp(): void\n{\n    parent::setUp();\n    // example - if our setting needs settings, we can mock the settings repository\n    $settingsRepo = m::mock(SettingsRepositoryInterface::class);\n    // and then control specific return values for each setting key\n    $settingsRepo->shouldReceive('get')->with('some-plugin-key')->andReturn('some-value-useful-for-testing');\n    // construct your class under test, passing mocked services as needed\n    $this->serializer = new YourClassUnderTest($settingsRepo);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->actor = m::mock(User::class);\n$request = m::mock(Request::class)->makePartial();\n$request->shouldReceive('getAttribute->getActor')->andReturn($this->actor);\n$this->actor->shouldReceive('SOME PERMISSION')->andReturn(true/false);\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination in List API Controller\nDESCRIPTION: This snippet shows how to configure pagination limits and extract pagination information from the request in a list API controller.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// The number of records included by default.\npublic $limit = 20;\n\n// The maximum number of records that can be requested.\npublic $maxLimit = 50;\n\n$limit = $this->extractLimit($request);\n$offset = $this->extractOffset($request);\n\nreturn Tag::skip($offset)->take($limit);\n```\n\n----------------------------------------\n\nTITLE: Renaming Tables in Flarum Migrations\nDESCRIPTION: This example showcases how to rename an existing table in a Flarum migration using the `Migration::renameTable` helper. The helper takes two parameters, the original table name, and the new table name.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::renameTable($from, $to);\n```\n\n----------------------------------------\n\nTITLE: Frontend Data Fetching in JavaScript\nDESCRIPTION: Examples of fetching data from the API using Flarum's store methods, including finding resources and accessing cached data.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// GET /api/discussions?sort=createdAt\napp.store.find('discussions', {sort: 'createdAt'}).then(console.log);\n\n// GET /api/discussions/123\napp.store.find('discussions', 123).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Specifying Extension Dependencies in composer.json\nDESCRIPTION: Example of how to specify Flarum extension dependencies in the composer.json file of an extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"my/extension\",\n  \"description\": \"Cool New Extension\",\n  \"type\": \"flarum-extension\",\n  \"license\": \"MIT\",\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.14\",\n    \"flarum/tags\": \"^0.1.0-beta.14\",\n    \"flarum/mentions\": \"^0.1.0-beta.14\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Model Properties in JavaScript\nDESCRIPTION: Shows how to access various properties of a model instance using predefined accessor methods. This includes retrieving the ID, attributes like title, and relationships like posts.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = discussion.id();\nconst title = discussion.title();\nconst posts = discussion.posts(); // array of Post models\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Notification Driver in PHP for Flarum\nDESCRIPTION: This code shows how to register a custom notification driver (Pusher) in Flarum using the Notification extender. It specifies the driver name and class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend\nuse Flarum\\Pusher\\PusherNotificationDriver;\n\nreturn [\n    // Other extenders\n    (new Extend\\Notification())\n        ->driver('pusher', PusherNotificationDriver::class),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Injecting the Settings Repository in PHP\nDESCRIPTION: Demonstrates how to inject the SettingsRepositoryInterface into a class using dependency injection. This allows the class to access forum settings.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace acme\\HelloWorld\\ExampleDir;\n\nuse Flarum\\Settings\\SettingsRepositoryInterface;\n\nclass ClassInterfacesWithSettings\n{\n    /**\n     * @var SettingsRepositoryInterface\n     */\n    protected $settings;\n\n    public function __construct(SettingsRepositoryInterface $settings)\n    {\n        $this->settings = $settings;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Button Component with Children\nDESCRIPTION: Examples of creating a Button component with child elements using the component method and JSX syntax. The new version requires passing children as the second argument to the component method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nButton.component({\n  className: 'Button Button--primary'\n}, 'Button Text');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<Button className='Button Button--primary'>Button Text</Button>\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Page as Homepage Option in Flarum\nDESCRIPTION: Shows how to extend the BasicsPage to add a custom page as a homepage option in the Flarum admin panel.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport BasicsPage from 'flarum/common/components/BasicsPage';\n\nexport default function() {\n  extend(BasicsPage.prototype, 'homePageItems', items => {\n    items.add('tags', {\n      path: '/tags',\n      label: app.translator.trans('flarum-tags.admin.basics.tags_label')\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Console Commands in Flarum's extend.php\nDESCRIPTION: This PHP code snippet shows how to register a custom console command in a Flarum extension's extend.php file using the Flarum\\Extend\\Console extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/console.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Console\\CustomCommand;\n\nreturn [\n  // Other extenders\n  (new Extend\\Console())->command(CustomCommand::class)\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Route Registration in Flarum for Mithril 2.0\nDESCRIPTION: Shows how to update route registration syntax for Mithril 2.0 in Flarum extensions, changing from providing a component instance to a component class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\napp.routes.new_page = { path: '/new', component: NewPage.component() }\n\n// Mithril 2.0\napp.routes.new_page = { path: '/new', component: NewPage }\n```\n\n----------------------------------------\n\nTITLE: Registering Models with the Store in JavaScript\nDESCRIPTION: Shows how to register a new model with the store using the Store extender. This is required after defining a new model class to make it available in the frontend application.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Store()\n    .add('tags', Tag),\n];\n```\n\n----------------------------------------\n\nTITLE: Creating New Resources in Flarum's Frontend\nDESCRIPTION: Shows how to create a new resource by creating a new model instance using the store's createRecord method and then saving it with initial data.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussion = app.store.createRecord('discussions');\n\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Eager Loading API Controller Extension in PHP\nDESCRIPTION: Shows how to use the ApiController extender to add eager loading for relationships to prevent N+1 query issues.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    (new Extend\\ApiController(FlarumController\\ListDiscussionsController::class))\n        ->addInclude(['tags', 'tags.state', 'tags.parent'])\n        ->load('tags'),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships in PHP Serializer for Flarum API\nDESCRIPTION: This code shows how to specify relationships for a resource in a Flarum API serializer, using the hasOne method to define a one-to-one relationship.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n    protected function user($discussion)\n    {\n        return $this->hasOne($discussion, UserSerializer::class);\n    }\n```\n\n----------------------------------------\n\nTITLE: Saving Model Relationships in JavaScript\nDESCRIPTION: Demonstrates how to save relationship changes using the relationships key in the save method. Shows how to handle both hasOne and hasMany relationships when saving.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nuser.save({\n  relationships: {\n    groups: [\n      store.getById('groups', 1),\n      store.getById('groups', 2)\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Flarum Frontend Testing\nDESCRIPTION: Demonstrates how to create a TypeScript configuration file specifically for testing. It extends the main tsconfig.json and includes test-specific settings.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"include\": [\"tests/**/*\"],\n  \"files\": [\"../../../node_modules/@flarum/jest-config/shims.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Modal Stack in TypeScript\nDESCRIPTION: Shows how to initialize multiple stacked modals in Flarum's frontend using TypeScript. Useful for scenarios where modals need to open other modals.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-1_x.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\napp.modal.show(ModalComponent, { attrs }, true)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Select Component Disabled Prop\nDESCRIPTION: New disabled prop for the Flarum Select component to disable user interaction\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b12.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nm('Select', { \n  disabled: true \n})\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis via Composer\nDESCRIPTION: This command executes the PHPStan analysis using a custom script in Composer. Ensures static analysis is performed to detect issues. Requires configured `composer.json` scripts.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer analyse:phpstan\n```\n\n----------------------------------------\n\nTITLE: Creating Access Token Request/Response\nDESCRIPTION: Example of creating an access token via the /api/token endpoint using user credentials. Shows both the POST request body and successful response format.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"identification\": \"Toby\",\n    \"password\": \"pass7word\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"token\": \"YACub2KLfe8mfmHPcUKtt6t2SMJOGPXnZbqhc3nX\",\n    \"userId\": \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Header UI in Flarum (JavaScript)\nDESCRIPTION: This snippet shows how to extend Flarum's HeaderPrimary component to add a new link to Google in the header.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend } from 'flarum/common/extend';\nimport HeaderPrimary from 'flarum/forum/components/HeaderPrimary';\n\nextend(HeaderPrimary.prototype, 'items', function(items) {\n  items.add('google', <a href=\"https://google.com\">Google</a>);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring View Namespace in PHP for Flarum Extension\nDESCRIPTION: Demonstrates how to set up a view namespace for an extension using the View extender in extend.php. This allows the extension to use its own view files.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views');\n];\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Models in TypeScript for Flarum Frontend\nDESCRIPTION: Shows how to extend existing models in Flarum's frontend using the Model extender in TypeScript. It demonstrates adding attributes and relationships to the Discussion model.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n  new Extend.Model(Discussion)\n    .attribute<string>('slug')\n    .hasOne<User>('user')\n    .hasMany<Post>('posts')\n```\n\n----------------------------------------\n\nTITLE: Extracting and Loading Relationships in PHP API Controller\nDESCRIPTION: This code demonstrates how to extract included relationships from a request and use them to eager-load relations on models before serialization.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$relations = $this->extractInclude($request);\n\nreturn Tag::all()->load($relations);\n```\n\n----------------------------------------\n\nTITLE: Configuring CRUD Endpoints for AbstractDatabaseResource in PHP\nDESCRIPTION: Demonstrates how to set up Show, Create, Update, and Delete endpoints for a resource class extending AbstractDatabaseResource.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Endpoint;\n\npublic function endpoints(): array\n{\n    return [\n        Endpoint\\Show::make(),\n        Endpoint\\Create::make(),\n        Endpoint\\Update::make(),\n        Endpoint\\Delete::make(),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Migration in PHP\nDESCRIPTION: Example of creating a migration file in Flarum that adds a new table to the database. It demonstrates the structure of a migration with up and down functions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Schema\\Builder;\n\nreturn [\n    'up' => function (Builder $schema) {\n        // up migration\n    },\n    'down' => function (Builder $schema) {\n        // down migration\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Frontend Store Data Fetching in JavaScript\nDESCRIPTION: Examples of fetching data from the API using Flarum's frontend store, including sorting and individual record retrieval.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// GET /api/discussions?sort=createdAt\napp.store.find('discussions', {sort: 'createdAt'}).then(console.log);\n\n// GET /api/discussions/123\napp.store.find('discussions', 123).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Resolving URL Generator in PHP\nDESCRIPTION: Example of how to resolve and use the URL generator after the changes to the Application class. This demonstrates the new method of accessing configuration and URL generation functionality.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\napp()->url()\n```\n\n----------------------------------------\n\nTITLE: Implementing List API Controller in PHP\nDESCRIPTION: Shows how to create a controller for listing resources by extending AbstractListController and implementing the data method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractListController;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass ListTagsController extends AbstractListController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        return Tag::all();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Extension Settings in PHP\nDESCRIPTION: Example of using the Settings extender added in Flarum 1.2 to define default settings, replacing the deprecated addSettings migration helper.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-1_x.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Deprecated approach\n$this->addSettings([\n    'setting_key' => 'default_value'\n]);\n\n// New approach\n(new Extend\\Settings)\n    ->default('setting_key', 'default_value')\n```\n\n----------------------------------------\n\nTITLE: Using Variables in JSX Translations for Search Results\nDESCRIPTION: Shows how to pass variables to translations in React components, which allows for dynamic content within translated strings.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n{LinkButton.component({\n  icon: 'search',\n  children: app.translator.trans('all_discussions_button', {query}),\n  href: app.route('index', {q: query})\n})}\n```\n\n----------------------------------------\n\nTITLE: Modal Opening in Mithril 2 (New Pattern)\nDESCRIPTION: The new way of opening modals in Flarum with Mithril 2, passing the component class and attributes separately to avoid creating component instances.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\napp.modal.show(LoginModal, {identification: 'prefilledUsername'});\n```\n\n----------------------------------------\n\nTITLE: Declaring Extension Dependencies in composer.json\nDESCRIPTION: Example of how to declare dependencies for a Flarum extension in the composer.json file. This ensures proper installation and loading order of extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.15\",\n    \"flarum/tags\": \"^0.1.0-beta.15\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Optional Dependencies in composer.json\nDESCRIPTION: Shows how to specify optional dependencies in the composer.json file to ensure your extension loads after them when they're present.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"extra\": {\n    \"flarum-extension\": {\n      \"optional-dependencies\": [\n        \"flarum/tags\"\n      ]\n    }\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updated JavaScript Import Syntax\nDESCRIPTION: New namespace-based import pattern for Flarum components, replacing the old direct import style. Required change for frontend development in Beta 16.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Old style (deprecated)\nimport Component from 'flarum/Component'\n\n// New style\nimport Component from 'flarum/common/Component'\n```\n\n----------------------------------------\n\nTITLE: Extension Dependencies in Composer JSON\nDESCRIPTION: Configuration example showing how to specify Flarum extension dependencies in composer.json file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my/extension\",\n  \"description\": \"Cool New Extension\",\n  \"type\": \"flarum-extension\",\n  \"license\": \"MIT\",\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.14\",\n    \"flarum/tags\": \"^0.1.0-beta.14\",\n    \"flarum/mentions\": \"^0.1.0-beta.14\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Model Data in JavaScript\nDESCRIPTION: Shows how to update a model's attributes by calling the save method. The method returns a Promise that resolves with the updated model instance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ndiscussion.save({ title: 'Hello, world!' }).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Generating Modal with Flarum CLI\nDESCRIPTION: Command line example showing how to use Flarum CLI to automatically generate a modal component, which creates the basic structure and boilerplate code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/interactive-components.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make frontend modal\n```\n\n----------------------------------------\n\nTITLE: Accessing a Translation Key in JavaScript\nDESCRIPTION: Illustrates how to form a full translation key to access a specific translation in JavaScript code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'acme-hello-world.alert.hello_text'\n```\n\n----------------------------------------\n\nTITLE: Implementing Pluralization in Flarum Translations with JavaScript\nDESCRIPTION: Demonstrates how to implement pluralization in Flarum translations using ICU MessageFormat syntax in JavaScript. The example is from the Tags extension's Choose Tags modal.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst remaining = this.minPrimary - primaryCount;\nreturn app.translator.trans(\n  'choose_primary_placeholder',\n  { count: remaining }\n);\n```\n\n----------------------------------------\n\nTITLE: Using View Extender for Registering Blade Views\nDESCRIPTION: Example of using the new View extender to register Laravel Blade views in Flarum extensions, replacing the old method of injecting the view factory.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n// extend.php\nuse Flarum\\Extend\\View;\n\nreturn [\n  (new View)->namespace(NAME, RELATIVE PATH);\n]\n```\n\n----------------------------------------\n\nTITLE: Defining New Frontend Model in JavaScript\nDESCRIPTION: This snippet shows how to define a new frontend model (Tag) in Flarum by extending the Model class and defining attributes and relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Model from 'flarum/common/Model';\n\nexport default class Tag extends Model {\n  title = Model.attribute('title');\n  createdAt = Model.attribute('createdAt', Model.transformDate);\n  parent = Model.hasOne('parent');\n  discussions = Model.hasMany('discussions');\n}\n```\n\n----------------------------------------\n\nTITLE: HTML-Style Tags in YAML Translations\nDESCRIPTION: Shows how to use HTML-style tags in YAML translations to provide flexibility for localizers, allowing them to embed links or adjust text structure as needed for different languages.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nsign_up_text: \"Don't have an account? <a>Sign Up</a>\"\n```\n\n----------------------------------------\n\nTITLE: Migrating from Mithril Deferred to Native Promises\nDESCRIPTION: Shows how to replace Mithril's deferred objects with native JavaScript promises for asynchronous operations in Flarum extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\nconst deferred = m.deferred();\n\napp.store.find('posts').then(result => deferred.resolve(result));\n\nreturn deferred.promise;\n\n// Mithril 2\nreturn app.store.find('posts');\n```\n\n----------------------------------------\n\nTITLE: Eager Loading API Controller Relationships in PHP for Flarum\nDESCRIPTION: Shows how to extract and use the included relationships to eager load related models before serialization, improving query performance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$relations = $this->extractInclude($request);\n\nreturn Tag::all()->load($relations);\n```\n\n----------------------------------------\n\nTITLE: Laravel Helper Function Removal\nDESCRIPTION: Example of removed Laravel helper functions as part of the Laravel 6 upgrade. Developers need to use alternative methods for array and string manipulation.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\narray_*() // Removed\\nstr_*() // Removed\n```\n\n----------------------------------------\n\nTITLE: Custom Visibility Scoper Implementation\nDESCRIPTION: Demonstrates how to implement a custom visibility scoper class that handles private post visibility based on user permissions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/model-visibility.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass ScopePostVisibility\n{\n    public function __invoke(User $actor, $query)\n    {\n      if ($actor->can('posts.viewPrivate')) {\n        $query->whereRaw(\"1=1\");\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Address from Request in Flarum (PHP)\nDESCRIPTION: Demonstrates how to obtain the IP address from a request object in Flarum. This new feature allows easy access to the client's IP address.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$request->getAttribute('ipAddress')\n```\n\n----------------------------------------\n\nTITLE: Registering Policies in Flarum Extender\nDESCRIPTION: Example of how to register both model-specific and global policies in a Flarum extension using the Policy extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/authorization.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Tags\\Tag;\nuse YourNamespace\\Access;\n\nreturn [\n  // Other extenders\n  (new Extend\\Policy())\n    ->modelPolicy(Tag::class, Access\\TagPolicy::class)\n    ->globalPolicy(Access\\GlobalPolicy::class),\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Laminas Namespace in PHP\nDESCRIPTION: Shows the namespace change from Zend to Laminas, which is a breaking change in Beta 13. Developers need to update their imports and class references accordingly.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-b13.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Laminas\\...\n```\n\n----------------------------------------\n\nTITLE: Adding PHPStan Scripts to composer.json\nDESCRIPTION: JSON snippet to add PHPStan analysis and cache clearing scripts to the composer.json file of a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/static-code-analysis.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"analyse:phpstan\": \"phpstan analyse\",\n    \"clear-cache:phpstan\": \"phpstan clear-result-cache\"\n  },\n  \"scripts-descriptions\": {\n    \"analyse:phpstan\": \"Run static analysis\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Locales in PHP\nDESCRIPTION: This PHP snippet defines how to register translation files for use in Flarum, initializing the translator with localization data located in a specified directory.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/i18n.md#2025-04-16_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nnew Extend\\Locales(__DIR__ . '/locale'),\n```\n\n----------------------------------------\n\nTITLE: Accessing URL Generator in Blade Templates\nDESCRIPTION: Shows how to access the URL generator instance in Blade templates after the changes. The $url variable is now available directly in blade.php templates.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$url\n```\n\n----------------------------------------\n\nTITLE: Basic Translation Usage in JavaScript\nDESCRIPTION: Demonstrates the basic usage of the Flarum translator in JavaScript. The example shows how to use the app.translator.trans() method to reference a namespaced translation key.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('acme-hello-world', function() {\n  alert(app.translator.trans('acme-hello-world.alert.hello_text'));\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a New Frontend Model in JavaScript\nDESCRIPTION: Illustrates how to define a new frontend model by extending the Model class and defining resource attributes and relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport Model from 'flarum/common/Model';\n\nexport default class Tag extends Model {\n  title = Model.attribute('title');\n  createdAt = Model.attribute('createdAt', Model.transformDate);\n  parent = Model.hasOne('parent');\n  discussions = Model.hasMany('discussions');\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Console Commands in PHP for Flarum\nDESCRIPTION: This snippet shows how to register custom console commands in a Flarum extension's extend.php file using the Flarum\\Extend\\Console extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/console.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse YourNamespace\\Console\\CustomCommand;\n\nreturn [\n  // Other extenders\n  (new Extend\\Console())->command(CustomCommand::class)\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Exporting Frontend Code in Flarum Extension\nDESCRIPTION: Shows how to export frontend code from the src directory in the main admin.js and forum.js files of a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// admin.js\nexport * from './src/admin';\n\n// forum.js\nexport * from './src/forum';\n```\n\n----------------------------------------\n\nTITLE: Accessing URL Configuration in PHP\nDESCRIPTION: Demonstrates how to access the URL configuration using the new array structure in the Config class. This replaces the previous method of accessing URL configuration.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$config->url()\n```\n\n----------------------------------------\n\nTITLE: Deprecating Extension Bootstrap File\nDESCRIPTION: Guidance on renaming the main extension file from `bootstrap.php` to `extend.php` for compatibility with Flarum's upcoming stable release\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-b12.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Old: bootstrap.php\n// New: extend.php\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Workflow for Flarum Extensions\nDESCRIPTION: YAML configuration for setting up a frontend workflow in a Flarum extension. It uses a predefined reusable workflow from the Flarum framework repository and includes various customization options.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/github-actions.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Frontend\n\non: [workflow_dispatch, push, pull_request]\n\njobs:\n  run:\n    uses: flarum/framework/.github/workflows/REUSABLE_frontend.yml@main\n    with:\n      enable_bundlewatch: false\n      enable_prettier: true\n      enable_typescript: false\n\n      frontend_directory: ./js\n      backend_directory: .\n      js_package_manager: yarn\n      main_git_branch: main\n\n    secrets:\n      bundlewatch_github_token: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Updating JavaScript Import Statements for Flarum Beta 16\nDESCRIPTION: Demonstrates the new import syntax using namespaces for Flarum components. This change improves code organization and prepares for future updates.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Component from 'flarum/common/Component'\n```\n\n----------------------------------------\n\nTITLE: Creazione di un Componente Form in JSX per Flarum\nDESCRIPTION: Esempio di creazione di un componente form utilizzando JSX in Flarum. Il componente include un input di testo, uno switch e un pulsante di invio, dimostrando l'uso di FieldSet, Switch e Button components.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/forms.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Component from 'flarum/Component';\nimport FieldSet from 'flarum/components/FieldSet';\nimport Button from 'flarum/components/Button';\nimport Switch from 'flarum/components/Switch';\n\n\nclass FormComponent extends Component {\n  oninit(vnode) {\n    this.textInput = \"\";\n    this.booleanInput = false;\n  }\n\n  view() {\n    return (\n      <form onsubmit={this.onsubmit.bind(this)}>\n        <FieldSet label={app.translator.trans('fake-extension.form.fieldset_label')}>\n          <input className=\"FormControl\" value={this.textInput} oninput={e => this.textInput = e.target.value}>\n          </input>\n          <Switch state={this.booleanInput} onchange={val => this.booleanInput = val}>\n          </Switch>\n        </FieldSet>\n        <Button type=\"submit\">{app.translator.trans('core.admin.basics.submit_button')}</Button>\n      </form>\n    )\n  }\n\n  onsubmit() {\n    // Some form handling logic here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Flarum Model with Attribute Casting for PHPStan\nDESCRIPTION: This PHP code snippet shows how to use attribute casting in Flarum to explicitly define an attribute type for PHPStan analysis.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Model(User::class))\n    ->cast('is_cool', 'bool'),\n```\n\n----------------------------------------\n\nTITLE: Using Flarum Streams for Reactive Data\nDESCRIPTION: Demonstrates the basic usage of Flarum's Stream utility for managing reactive data and form inputs\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/forms.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\n\n\nconst value = Stream(\"hello!\");\nvalue() === \"hello!\"; // true\nvalue(\"world!\");\nvalue() === \"world!\"; // true\n```\n\n----------------------------------------\n\nTITLE: Creating Route Helper Methods in JavaScript\nDESCRIPTION: Example of defining a custom route helper method for convenient URL generation in the frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n  new Extend.Routes()\n   .add('acme.user', '/user/:id', <UsersPage />)\n   .helper('acmeUser', (user) => app.route('acme.user', { id: user.id() }))\n```\n\n----------------------------------------\n\nTITLE: Using the New 'resolve' Function in PHP\nDESCRIPTION: Example of how to use the new 'resolve' function, which replaces the deprecated 'app' global helper function for resolving container bindings.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nresolve('container_binding_name')\n```\n\n----------------------------------------\n\nTITLE: Access Token Generation\nDESCRIPTION: Updated syntax for generating different types of access tokens in Beta 16, showing the new type-specific token generation methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// Session token\nAccessToken::generate($userId);\n\n// Remember token\nRememberAccessToken::generate($userId);\n\n// Developer token\nDeveloperAccessToken::generate($userId);\n```\n\n----------------------------------------\n\nTITLE: Registering Number Input Setting with Constraints in JavaScript\nDESCRIPTION: Example of how to register a numeric input setting with min/max constraints for a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/admin.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  setting: 'acme-interstellar.crew_count',\n  label: app.translator.trans('acme-interstellar.admin.crew_count_label'),\n  type: 'number',\n  min: 1,\n  max: 10\n}\n```\n\n----------------------------------------\n\nTITLE: Integration Test Setup Script\nDESCRIPTION: PHP script that initializes the testing environment for integration tests. It runs the SetupScript class from the Flarum Testing library.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Testing\\integration\\Setup\\SetupScript;\n\nrequire __DIR__.'/../../vendor/autoload.php';\n\n$setup = new SetupScript();\n\n$setup->run();\n```\n\n----------------------------------------\n\nTITLE: Creating Event Subscribers in PHP\nDESCRIPTION: Shows how to create and register an event subscriber class that can listen to multiple events in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Flarum\\Post\\Event\\Saving;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->subscribe(PostEventSubscriber::class),\n];\n```\n\nLANGUAGE: php\nCODE:\n```\nclass PostEventSubscriber\n{\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    public function subscribe($events)\n    {\n        $events->listen(Deleted::class, [$this, 'handleDeleted']);\n        $events->listen(Saving::class, [$this, 'handleSaving']);\n    }\n\n    public function handleDeleted(Deleted $event)\n    {\n        // Your logic here\n    }\n\n    public function handleSaving(Saving $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Modal with Attributes in Flarum JS\nDESCRIPTION: Instead of passing a component instance to open modals, pass the component class and attributes separately, as demonstrated in this example.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.modal.show(LoginModal, {identification: 'prefilledUsername'});\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltips with New Tooltip Component\nDESCRIPTION: Example of using the new Tooltip component in JSX for creating tooltips instead of direct jQuery calls.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Tooltip text=\"You wish!\">\n  <button>\n    Click for free money!\n  </button>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Using View Extender for Blade View Registration\nDESCRIPTION: Example of using the new View extender to register Laravel Blade views in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n// extend.php\nuse Flarum\\Extend\\View;\n\nreturn [\n  (new View)->namespace(NAME, RELATIVE PATH);\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on RHEL-based Systems\nDESCRIPTION: Commands to install the cron service on RHEL-based Linux distributions (CentOS, AlmaLinux, Rocky Linux), which is required for the Flarum scheduler to function.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/scheduler.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf update\nsudo dnf install crontabs\n```\n\n----------------------------------------\n\nTITLE: Defining Informative Text Translation Suffixes in YAML\nDESCRIPTION: Suffixes used for translation keys related to informative or descriptive text elements in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/i18n.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n_confirmation:  # Used for messages displayed to confirm an operation.\n_message:       # Used for messages that show the result of an operation.\n_text:          # Used for any text that is not a message, title, or tooltip.\n_title:         # Used for text displayed as the title of a page or modal.\n_tooltip:       # Used for text displayed when the user hovers over something.\n```\n\n----------------------------------------\n\nTITLE: Using the New Tooltip Component in React\nDESCRIPTION: Shows how to use the new Tooltip component from flarum/common/components/Tooltip for creating tooltips in a more framework-independent way.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Tooltip text=\"You wish!\">\n  <button>\n    Click for free money!\n  </button>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Extending Lazy-Loaded Flarum Components\nDESCRIPTION: Shows how to use the 'extend' utility to modify lazy-loaded components by providing the import format as the first argument.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/frontend.md#2025-04-16_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend, override } from 'flarum/common/extend';\n\nextend('flarum/forum/components/LogInModal', 'oninit', function() {\n  console.log('LogInModal is loaded');\n});\n```\n\n----------------------------------------\n\nTITLE: Running the Automated Upgrade Command\nDESCRIPTION: Command to run the Flarum CLI upgrade process for version 2.0, which automates many of the required changes for migrating extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/update-2_0.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfl upgrade 2.0\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on Debian/Ubuntu Systems\nDESCRIPTION: Commands to install cron on Debian and Ubuntu based Linux systems, which is required for the Flarum scheduler to work.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/scheduler.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install cron\n```\n\n----------------------------------------\n\nTITLE: View Namespace Registration Examples\nDESCRIPTION: Comparison of old and new methods for registering Laravel Blade view namespaces in Flarum extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n  function (Factory $view) {\n    $view->addNamespace(NAME, RELATIVE PATH);\n  }\n]\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend\\View;\n\nreturn [\n  (new View)->namespace(NAME, RELATIVE PATH);\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Sorting Configuration in PHP\nDESCRIPTION: Example of configuring sortable fields and default sort order in a list controller.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/api.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    // The default sort field and order to use.\n    public $sort = ['name' => 'asc'];\n    \n    // The fields that are available to be sorted by.\n    public $sortFields = ['firstName', 'lastName'];\n```\n\n----------------------------------------\n\nTITLE: Composer Scripts Configuration\nDESCRIPTION: Script definitions for running PHPStan analysis and clearing cache in composer.json\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"analyse:phpstan\": \"phpstan analyse\",\n    \"clear-cache:phpstan\": \"phpstan clear-result-cache\"\n  },\n  \"scripts-descriptions\": {\n    \"analyse:phpstan\": \"Run static analysis\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Email-Specific Translation Suffixes in YAML\nDESCRIPTION: Lists suffixes used specifically in the email namespace for email content and subject lines.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n_body:          # Used for the content of the email message.\n_subject:       # Used for the subject line of the email message.\n```\n\n----------------------------------------\n\nTITLE: Extension Initializer Example\nDESCRIPTION: Basic structure of a Flarum extension's index.js file showing how to register an initializer callback.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extend, override } from 'flarum/common/extend';\n\napp.initializers.add('acme-flarum-hello-world', function(app) {\n  // Your Extension Code Here\n  console.log(\"EXTENSION NAME is working!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Subscriber in PHP\nDESCRIPTION: Shows how to create an event subscriber to listen to multiple events at once, useful for grouping common functionality.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Post\\Event\\Deleted;\nuse Flarum\\Post\\Event\\Saving;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n\nreturn [\n    (new Extend\\Event)\n        ->subscribe(PostEventSubscriber::class),\n];\n```\n\nLANGUAGE: php\nCODE:\n```\nclass PostEventSubscriber\n{\n    protected $translator;\n  \n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n  \n    public function subscribe($events)\n    {\n        $events->listen(Deleted::class, [$this, 'handleDeleted']);\n        $events->listen(Saving::class, [$this, 'handleSaving']);\n    }\n  \n    public function handleDeleted(Deleted $event)\n    {\n        // Your logic here\n    }\n  \n    public function handleSaving(Saving $event)\n    {\n        // Your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing route name in PHP controllers and middleware\nDESCRIPTION: Demonstrates how to access the route name from the request object in PHP controllers and middleware that run after ResolveRoute middleware.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b15.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$request->getAttribute('routeName')\n```\n\n----------------------------------------\n\nTITLE: Defining Top-Level Translation Namespaces in YAML\nDESCRIPTION: Demonstrates the top-level namespacing for translation keys used in official Flarum components, including core and validation translations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncore:        # Translations used by the Flarum core\nvalidation:  # Translations used by Laravel's validator\n```\n\n----------------------------------------\n\nTITLE: Extending Model Attributes in Flarum\nDESCRIPTION: Example of extending existing models with custom attributes, casts, and default values\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\User\\User;\n\nreturn [\n    (new Extend\\Model(User::class))\n        ->default('is_alive', true)\n        ->cast('suspended_until', 'datetime')\n        ->cast('is_admin', 'boolean')\n];\n```\n\n----------------------------------------\n\nTITLE: Adding CSS/LESS to Flarum Frontend\nDESCRIPTION: Example showing how to add both JavaScript and CSS/LESS assets to Flarum's frontend using the Frontend extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less')\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Tags to Flarum Translations (JSX)\nDESCRIPTION: Illustrates how to add HTML tags to Flarum translations using JSX syntax and the app.translator.trans() method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"helpText\">\n  {app.translator.trans('icon_text', {\n    a: <a href=\"https://fortawesome.github.io/Font-Awesome/icons/\" tabindex=\"-1\"/>\n  })}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Data Serialization in PHP\nDESCRIPTION: Demonstrates how to modify data before serialization using the ApiController extender\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillSerializeData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->prepareDataForSerialization(function ($controller, $data, $request, $document) {\n            $data->load('myCustomRelation');\n        }),\n]\n```\n\n----------------------------------------\n\nTITLE: Checking for Outdated Packages Command\nDESCRIPTION: Executes a Composer command to check for outdated packages directly required in the root composer.json file, outputting results in JSON format.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/internal/package-manager.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposer outdated -D --format json\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Address from Request in Flarum (PHP)\nDESCRIPTION: Demonstrates how to obtain the IP address from a request object in Flarum. This method returns the IP address as a string attribute.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$request->getAttribute('ipAddress')\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Pack in composer.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the language pack in the composer.json file. It includes the language code and title in the flarum-locale object.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/language-packs.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"flarum-locale\": {\n  \"code\": \"en\",\n  \"title\": \"English\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cron Job for Flarum Scheduled Tasks\nDESCRIPTION: Example cron job configuration to run Flarum's schedule:run command at regular intervals for executing scheduled tasks.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * cd /path-to-your-flarum-install && php flarum schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on Debian/Ubuntu Systems\nDESCRIPTION: Commands to install the cron service on Debian and Ubuntu based Linux distributions, which is required for the Flarum scheduler to function.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/scheduler.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install cron\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Name in PHP Controllers and Middleware\nDESCRIPTION: Demonstrates how to retrieve the route name from a request in PHP controllers and middleware that run after ResolveRoute.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b15.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$routeName = $request->getAttribute('routeName');\n```\n\n----------------------------------------\n\nTITLE: Using ICU MessageFormat for Pluralization in JavaScript\nDESCRIPTION: Shows how to implement pluralization in translations using the ICU MessageFormat syntax with a variable count parameter.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst remaining = this.minPrimary - primaryCount;\nreturn app.translator.trans(\n  'choose_primary_placeholder',\n  { count: remaining }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on RHEL-based Systems\nDESCRIPTION: Commands to update package list and install crontabs on RHEL-based Linux distributions like CentOS, AlmaLinux, and Rocky Linux.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/scheduler.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf update\nsudo dnf install crontabs\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Page Component in JavaScript\nDESCRIPTION: Demonstrates how to create a simple custom page component by extending the Page class provided by Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Page from 'flarum/common/components/Page';\n\n\nexport default class CustomPage extends Page {\n  view() {\n    return <p>Hello!</p>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DayJS Locale in JavaScript\nDESCRIPTION: This JavaScript code shows how to configure the DayJS locale for date internationalization in a language pack. It sets the locale using the dayjs.locale() method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/language-packs.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndayjs.locale('xx');\n```\n\n----------------------------------------\n\nTITLE: Importing Classes from Other Extensions in Flarum Backend\nDESCRIPTION: PHP code showing how to import and use classes from other Flarum extensions in the backend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Tags\\Tag;\n\nclass SomeClass\n{\n    public function someMethod()\n    {\n        return new Tag();  // This is not the correct way to instantiate models, it's just here for example of importing.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: New Policy Return Format\nDESCRIPTION: Example of the new required return format for policies, replacing boolean returns with specific allow/deny methods\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b15.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->allow()\n$this->deny()\n$this->forceAllow()\n$this->forceDeny()\n```\n\n----------------------------------------\n\nTITLE: Error Response Examples\nDESCRIPTION: Examples of error responses following the JSON:API error specification, including CSRF token mismatch and validation errors.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"400\",\n      \"code\": \"csrf_token_mismatch\"\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"status\": \"422\",\n      \"code\": \"validation_error\",\n      \"detail\": \"The username has already been taken.\",\n      \"source\":{\n        \"pointer\":\"\\/data\\/attributes\\/username\"\n      }\n    },\n    {\n      \"status\": \"422\",\n      \"code\": \"validation_error\",\n      \"detail\": \"The email has already been taken.\",\n      \"source\": {\n        \"pointer\":\"\\/data\\/attributes\\/email\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding View Templates in PHP\nDESCRIPTION: Example showing how to override existing templates using the View extender's extendNamespace method\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/views.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->extendNamespace('acme.hello-world', __DIR__.'/override_views')\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Test Script to package.json\nDESCRIPTION: JSON configuration to add to package.json to enable testing with Jest using experimental VM modules for ESM support.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"scripts\": {\n    ...,\n    \"test\": \"yarn node --experimental-vm-modules $(yarn bin jest)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Settings in Flarum\nDESCRIPTION: This snippet demonstrates how to store a setting value using the set() method of the SettingsRepositoryInterface with the required parameters.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/settings.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->settings->set('forum_title', 'Super Awesome Forum')\n```\n\n----------------------------------------\n\nTITLE: Composer Scripts Configuration for Testing\nDESCRIPTION: JSON configuration for Composer scripts to run unit and integration tests with appropriate descriptions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"test\": [\n        \"@test:unit\",\n        \"@test:integration\"\n    ],\n    \"test:unit\": \"phpunit -c tests/phpunit.unit.xml\",\n    \"test:integration\": \"phpunit -c tests/phpunit.integration.xml\",\n    \"test:setup\": \"@php tests/integration/setup.php\"\n},\n\"scripts-descriptions\": {\n    \"test\": \"Runs all tests.\",\n    \"test:unit\": \"Runs all unit tests.\",\n    \"test:integration\": \"Runs all integration tests.\",\n    \"test:setup\": \"Sets up a database for use with integration tests. Execute this only once.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining New Frontend Model\nDESCRIPTION: Demonstrates how to create a new frontend model class with attributes and relationships.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport Model from 'flarum/common/Model';\n\nexport default class Tag extends Model {\n  title = Model.attribute('title');\n  createdAt = Model.attribute('createdAt', Model.transformDate);\n  parent = Model.hasOne('parent');\n  discussions = Model.hasMany('discussions');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in Flarum Migration\nDESCRIPTION: Shows how to use the Migration::createTable helper to create a new database table in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Database\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\n\nreturn Migration::createTable('users', function (Blueprint $table) {\n    $table->increments('id');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Page Titles in Flarum Custom Pages\nDESCRIPTION: Demonstrates how to set page titles for custom pages in Flarum, including examples for static and dynamically loaded titles.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/frontend-pages.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Page from 'flarum/common/components/Page';\n\n\nexport default class CustomPage extends Page {\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    app.setTitle(\"Cool Page\");\n    app.setTitleCount(0);\n  }\n\n  view() {\n    // ...\n  }\n}\n\nexport default class CustomPageLoadsData extends Page {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    app.store.find(\"users\", 1).then(user => {\n      app.setTitle(user.displayName());\n      app.setTitleCount(0);\n    })\n  }\n\n  view() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Dependencies in Composer JSON\nDESCRIPTION: Example of how to specify required dependencies for a Flarum extension in composer.json configuration file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"require\": {\n    \"flarum/core\": \"^0.1.0-beta.15\",\n    \"flarum/tags\": \"^0.1.0-beta.15\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Optional Dependencies in composer.json\nDESCRIPTION: Example of how to specify optional dependencies in the composer.json file to ensure proper boot order of extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extra\": {\n    \"flarum-extension\": {\n      \"optional-dependencies\": [\n        \"flarum/tags\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Access Token in HTTP Request\nDESCRIPTION: Shows how to use an access token for authentication in the Authorization header of an HTTP request.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/rest-api.md#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nAuthorization: Token YACub2KLfe8mfmHPcUKtt6t2SMJOGPXnZbqhc3nX\n```\n\n----------------------------------------\n\nTITLE: Generating a Console Command Using Flarum CLI\nDESCRIPTION: This bash command uses the Flarum CLI to automatically generate and register a console command for a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/console.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend command\n```\n\n----------------------------------------\n\nTITLE: Correct Way to Pass Children in Mithril 2\nDESCRIPTION: The proper way to pass children to components in Mithril 2 using the second argument of the component method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nButton.component({\n  className: 'Button Button--primary'\n}, 'Button Text');\n```\n\n----------------------------------------\n\nTITLE: Using View Extender for Registering View Namespaces\nDESCRIPTION: The recommended way to register Laravel Blade view namespaces in Flarum extensions using the View extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// extend.php\nuse Flarum\\Extend\\View;\n\nreturn [\n  (new View)->namespace(NAME, RELATIVE PATH);\n]\n```\n\n----------------------------------------\n\nTITLE: Using Translator in Flarum JavaScript Extension\nDESCRIPTION: Shows how to use the app.translator.trans() method to reference a translation in a Flarum extension's JavaScript code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.initializers.add('acme-hello-world', function() {\n  alert(app.translator.trans('acme-hello-world.alert.hello_text'));\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Default Permissions in Flarum Migration\nDESCRIPTION: Shows how to add default permissions for a new feature using a data migration in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\nreturn Migration::addPermissions([\n    'some.permission' => Group::MODERATOR_ID\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring ThrottleApi Middleware in Flarum's extend.php\nDESCRIPTION: This code snippet shows how to modify the ThrottleApi middleware in Flarum's extend.php file. It sets a new throttler that disables all throttling and removes an existing throttler.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/api-throttling.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Extend;\n\nreturn [\n    // Other extenders\n    (new Extend\\ThrottleApi())\n        ->set('throttleAll', function () {\n          return false;\n        })\n        ->remove('bypassThrottlingAttribute'),\n    // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Using Illuminate Support String Slug Method in PHP\nDESCRIPTION: Example of using the Illuminate\\Support\\Str::slug() method as a replacement for the removed Flarum\\Util\\Str::slug() method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b13.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nIlluminate\\Support\\Str::slug()\n```\n\n----------------------------------------\n\nTITLE: Frontend Store Model Registration\nDESCRIPTION: Demonstrates how to register a new model with the frontend store using the Store extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Store()\n    .add('tags', Tag),\n];\n```\n\n----------------------------------------\n\nTITLE: Laravel Container Usage\nDESCRIPTION: Example of updated container resolution syntax, showing how to properly resolve dependencies in the new architecture.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nIlluminate\\Container\\Container\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis for Flarum Extension\nDESCRIPTION: Bash commands to run PHPStan analysis and clear its cache for a Flarum extension using Composer scripts.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer analyse:phpstan\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer clear-cache:phpstan && composer analyse:phpstan\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters in PHP\nDESCRIPTION: Code snippet demonstrating how to retrieve route parameters from the request object in a controller.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$id = Arr::get($request->getQueryParams(), 'id');\n```\n\n----------------------------------------\n\nTITLE: Translator Interface Update\nDESCRIPTION: Example showing the change from Laravel's translator interface to Symfony's translator interface following the Laravel 6 upgrade.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nSymfony\\Component\\Translation\\TranslatorInterface // New interface to use\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Name in PHP Controllers and Middleware\nDESCRIPTION: Shows how to retrieve the route name in PHP controllers and middleware that run after ResolveRoute.php.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b15.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$request->getAttribute('routeName')\n```\n\n----------------------------------------\n\nTITLE: Running Scheduled Tasks\nDESCRIPTION: Executes scheduled jobs set up by extensions for regular tasks like database cleanup or sitemap generation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum schedule:run\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Flarum Extension\nDESCRIPTION: Sets up the Webpack configuration file for a Flarum extension, using the official Flarum webpack config.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = require('flarum-webpack-config');\n\nmodule.exports = config();\n```\n\n----------------------------------------\n\nTITLE: Modal Stack Implementation TypeScript\nDESCRIPTION: Shows how to implement stacked modals in Flarum frontend, allowing multiple modals to be open simultaneously\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-1_x.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.modal.show(ModalComponent, { attrs }, true)\n```\n\n----------------------------------------\n\nTITLE: Clearing PHPStan Cache and Running Analysis\nDESCRIPTION: Combined command to clear the PHPStan cache and then run the analysis on a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer clear-cache:phpstan && composer analyse:phpstan\n```\n\n----------------------------------------\n\nTITLE: Updated File Naming Convention in PHP\nDESCRIPTION: Example showing the change in extension main file naming from bootstrap.php to extend.php\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b10.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Old naming (deprecated):\n/extensions/your-extension/bootstrap.php\n\n// New naming:\n/extensions/your-extension/extend.php\n```\n\n----------------------------------------\n\nTITLE: Watching JavaScript Files for Changes in Flarum Extensions\nDESCRIPTION: Command to watch JavaScript files for changes during development of Flarum extensions, using the Tags extension as an example.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/contributing.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd extensions/tags/js\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Creating Database Table Migration - PHP\nDESCRIPTION: Example of creating a new database table using Flarum's Migration helper class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Database\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\n\nreturn Migration::createTable('users', function (Blueprint $table) {\n    $table->increments('id');\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Frontend Model with Store\nDESCRIPTION: Shows how to register a new model with the store using the Store extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport Extend from 'flarum/common/extenders';\n\nexport default [\n  new Extend.Store()\n    .add('tags', Tag),\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Jest Configuration for Flarum Extensions\nDESCRIPTION: Demonstrates how to create a Jest configuration file for frontend testing in Flarum extensions using the @flarum/jest-config package.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('@flarum/jest-config')();\n```\n\n----------------------------------------\n\nTITLE: Installing flarum/testing Library via Composer\nDESCRIPTION: Command to install the flarum/testing library as a development dependency using Composer.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/testing:^1.0\n```\n\n----------------------------------------\n\nTITLE: Composer Scripts for Test Execution\nDESCRIPTION: JSON configuration for composer.json that adds test-related scripts and descriptions. Includes commands for running unit tests, integration tests, and setting up the test environment.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"test\": [\n        \"@test:unit\",\n        \"@test:integration\"\n    ],\n    \"test:unit\": \"phpunit -c tests/phpunit.unit.xml\",\n    \"test:integration\": \"phpunit -c tests/phpunit.integration.xml\",\n    \"test:setup\": \"@php tests/integration/setup.php\"\n},\n\"scripts-descriptions\": {\n    \"test\": \"Runs all tests.\",\n    \"test:unit\": \"Runs all unit tests.\",\n    \"test:integration\": \"Runs all integration tests.\",\n    \"test:setup\": \"Sets up a database for use with integration tests. Execute this only once.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Classes from Other Extensions in PHP\nDESCRIPTION: Example of importing and using classes from other Flarum extensions in PHP backend code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Tags\\Tag;\n\nclass SomeClass\n{\n    public function someMethod()\n    {\n        return new Tag();  // This is not the correct way to instantiate models, it's just here for example of importing.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Multiple Methods in Flarum (JSX)\nDESCRIPTION: Shows how to use 'extend' to modify multiple methods at once in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nextend(IndexPage.prototype, ['oncreate', 'onupdate'], () => { /* your logic */ });\n```\n\n----------------------------------------\n\nTITLE: Generating Modal with Flarum CLI\nDESCRIPTION: Command line instruction for automatically generating a modal component using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/interactive-components.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make frontend modal\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on Debian/Ubuntu Systems\nDESCRIPTION: Commands to update package lists and install cron on Debian and Ubuntu based Linux systems.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/scheduler.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install cron\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cron Job for Scheduled Tasks\nDESCRIPTION: Cron configuration to automatically run scheduled tasks at regular intervals.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * cd /path-to-your-flarum-install && php flarum schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Extension Imports\nDESCRIPTION: Configuration for webpack.config.js to allow importing from other Flarum extensions in frontend JavaScript.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('flarum-webpack-config')({\n    useExtensions: ['flarum-tags']\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on Debian/Ubuntu Systems\nDESCRIPTION: Commands to update package lists and install cron on Debian and Ubuntu based Linux systems.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/scheduler.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install cron\n```\n\n----------------------------------------\n\nTITLE: Multiple Method Extension Example in Flarum JSX\nDESCRIPTION: Shows how to extend multiple methods simultaneously using the extend utility.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nextend(IndexPage.prototype, ['oncreate', 'onupdate'], () => { /* your logic */ });\n```\n\n----------------------------------------\n\nTITLE: Model Attribute Access in JavaScript\nDESCRIPTION: Demonstrates how to access model attributes and relationships using instance methods.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = discussion.id();\nconst title = discussion.title();\nconst posts = discussion.posts(); // array of Post models\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on Debian/Ubuntu\nDESCRIPTION: Commands to install the cron service on Debian and Ubuntu based Linux distributions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/scheduler.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install cron\n```\n\n----------------------------------------\n\nTITLE: Generating Console Command with Flarum CLI in Bash\nDESCRIPTION: This command uses the Flarum CLI to automatically generate and register a console command for a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/console.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend command\n```\n\n----------------------------------------\n\nTITLE: Mocking User Authentication in Flarum\nDESCRIPTION: Example of mocking user authentication and request handling in Flarum tests\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n    $this->actor = m::mock(User::class);\n    $request = m::mock(Request::class)->makePartial();\n    $request->shouldReceive('getAttribute->getActor')->andReturn($this->actor);\n    $this->actor->shouldReceive('SOME PERMISSION')->andReturn(true/false);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Storage Driver in PHP\nDESCRIPTION: Shows how to register a custom storage driver implementation using the Filesystem extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/filesystem.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Filesystem)\n        ->driver('aws-with-cdn', AwsWithCdnDriver::class);\n```\n\n----------------------------------------\n\nTITLE: Common Update Error Output\nDESCRIPTION: Example of a common error message when trying to update Flarum indicating nothing was modified in the lock file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/update.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNothing to modify in lock file\n```\n\n----------------------------------------\n\nTITLE: Generating CLI Command for Flarum Backend Route\nDESCRIPTION: This bash command uses the Flarum CLI to generate a new backend route.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend route\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Permissions in Linux\nDESCRIPTION: Command to recursively set read and write permissions (775) for Flarum directories\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/install.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchmod 775 -R /path/to/directory\n```\n\n----------------------------------------\n\nTITLE: Flarum CLI Policy Generation Command\nDESCRIPTION: Command line instruction for automatically generating policy files using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/authorization.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend policy\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Flarum Extension Frontend\nDESCRIPTION: This snippet shows the tsconfig.json configuration for enabling TypeScript support in a Flarum extension. It extends the Flarum TypeScript config and sets up proper paths and compiler options.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/frontend.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"flarum-tsconfig\",\n  \"include\": [\"src/**/*\", \"../vendor/flarum/core/js/dist-typings/@types/**/*\"],\n  \"compilerOptions\": {\n    \"declarationDir\": \"./dist-typings\",\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"flarum/*\": [\"../vendor/flarum/core/js/dist-typings/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Classes in Backend PHP\nDESCRIPTION: Example of importing and using classes from other Flarum extensions in PHP backend code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/extending-extensions.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Tags\\Tag;\n\nclass SomeClass\n{\n    public function someMethod()\n    {\n        return new Tag();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan Package via Composer\nDESCRIPTION: Command to install the Flarum PHPStan package as a development dependency\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/static-code-analysis.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/phpstan:^1.0\n```\n\n----------------------------------------\n\nTITLE: Generating Event Listeners with Flarum CLI\nDESCRIPTION: Shows how to use the Flarum CLI to automatically generate event listeners for backend events.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend event-listener\n```\n\n----------------------------------------\n\nTITLE: Generating Event Listeners with Flarum CLI\nDESCRIPTION: Shows how to use the Flarum CLI to automatically generate event listeners for backend events.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/backend-events.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend event-listener\n```\n\n----------------------------------------\n\nTITLE: Creating a Flarum Model using CLI\nDESCRIPTION: Commands to automatically create backend and frontend models using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend model\n$ flarum-cli make frontend model\n```\n\n----------------------------------------\n\nTITLE: Generate API Serializer using Flarum CLI\nDESCRIPTION: Command to automatically create a new API serializer using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend api-serializer\n```\n\n----------------------------------------\n\nTITLE: Installing Flarum Testing Package via Composer\nDESCRIPTION: Command to install the Flarum testing package as a development dependency.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli infra backendTesting\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev flarum/testing:^1.0\n```\n\n----------------------------------------\n\nTITLE: Running Global Flarum Update Command\nDESCRIPTION: Executes a Composer command to update all packages in a Flarum installation, including dependencies.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/internal/package-manager.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncommand update --prefer-dist --no-dev -a --with-all-dependencies\n```\n\n----------------------------------------\n\nTITLE: Basic Store Query with Gambit\nDESCRIPTION: Example of using gambits in a frontend store query.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/search.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napp.store.find('discussions', { q: 'is:unread' });\n```\n\n----------------------------------------\n\nTITLE: Finding Valid Access Token in Flarum\nDESCRIPTION: Method to retrieve and validate an access token using the token string\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nFlarum\\Http\\AccessToken::findValid($tokenString)\n```\n\n----------------------------------------\n\nTITLE: Renaming Tables in Flarum Migration\nDESCRIPTION: Example of renaming an existing database table using the Migration::renameTable helper.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::renameTable($from, $to);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Key References in YAML\nDESCRIPTION: Illustrates an incorrect approach to reusing translations, where keys outside the 'ref' namespace are referenced. This can lead to unintended changes and maintenance issues.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => Log In\n\n    log_in:\n      submit_button: => core.forum.header.log_in_link  # Never reference keys\n      title: => core.forum.header.log_in_link          # that aren't in \"ref\"!\n```\n\n----------------------------------------\n\nTITLE: Accessing Cached Store Data\nDESCRIPTION: Shows how to access cached resources from the store without making new API requests.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst discussions = app.store.all('discussions');\nconst discussion = app.store.getById('discussions', 123);\n```\n\n----------------------------------------\n\nTITLE: Frontend Testing Package Configuration\nDESCRIPTION: Package.json configuration for running frontend tests with Jest\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"scripts\": {\n    ...,\n    \"test\": \"yarn node --experimental-vm-modules $(yarn bin jest)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Default Permissions in Flarum Migration\nDESCRIPTION: Example of adding default permissions using a data migration in Flarum.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Group\\Group;\n\nreturn Migration::addPermissions([\n    'some.permission' => Group::MODERATOR_ID\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Jest Configuration File\nDESCRIPTION: JavaScript code for the Jest configuration file that imports the standard Flarum Jest configuration.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('@flarum/jest-config')();\n```\n\n----------------------------------------\n\nTITLE: Using JSX to Pass Children in Mithril 2\nDESCRIPTION: Example of using JSX syntax to pass children to components in Mithril 2.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n<Button className='Button Button--primary'>Button Text</Button>\n```\n\n----------------------------------------\n\nTITLE: Opening Crontab Editor\nDESCRIPTION: Command to open the crontab editor for configuring scheduled tasks.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/scheduler.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncrontab -e\n```\n\n----------------------------------------\n\nTITLE: Generating Event Listener with Flarum CLI\nDESCRIPTION: Command to automatically generate an event listener using the Flarum CLI tool.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/backend-events.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flarum-cli make backend event-listener\n```\n\n----------------------------------------\n\nTITLE: Symfony Translator Interface Usage\nDESCRIPTION: Migration from Laravel translator to Symfony translator interface implementation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Translation\\TranslatorInterface;\n\n// Inject or resolve TranslatorInterface instead of Laravel's translator\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Dependencies for Flarum Frontend Development\nDESCRIPTION: Commands to install JavaScript dependencies using Yarn in the Flarum monorepo.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/contributing.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/framework\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Listing Flarum Scheduled Tasks\nDESCRIPTION: Command to list all scheduled tasks registered by Flarum and its extensions.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/console.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum schedule:list\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Address from Request\nDESCRIPTION: Shows how to get the client IP address from a request object.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$request->getAttribute('ipAddress')\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New Mithril Component Lifecycle in JavaScript\nDESCRIPTION: Demonstrates the changes in component lifecycle methods between Mithril 0.2 and Mithril 2.0, including initialization, creation, updates, and removal.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass OldMithrilComponent extends Component {\n  init() {\n    console.log('Code to run when component instance created, but before attached to the DOM.');\n  }\n\n  config(element, isInitialized) {\n    console.log('Code to run on every redraw AND when the element is first attached');\n\n    if (isInitialized) return;\n\n    console.log('Code to execute only once when components are first created and attached to the DOM');\n\n    context.onunload = () => {\n      console.log('Code to run when the component is removed from the DOM');\n    }\n  }\n\n  view() {\n    if (dontRedraw()) return { subtree: 'retain' };\n\n    return <p>Hello World!</p>;\n  }\n}\n\nclass NewMithrilComponent extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    console.log('Code to run when component instance created, but before attached to the DOM.');\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    console.log('Code to run when components are first created and attached to the DOM');\n  }\n\n  onbeforeupdate(vnode, oldVnode) {\n    super.onbeforeupdate(vnode);\n\n    console.log('Code to run BEFORE diffing / redrawing components on every redraw');\n\n    if (dontRedraw()) return false;\n  }\n\n  onupdate(vnode) {\n    console.log('Code to run on every redraw AFTER the DOM is updated.');\n  }\n\n  onbeforeremove(vnode) {\n    return Promise.resolve();\n  }\n\n  onremove(vnode) {\n      console.log('Code to run when the component is removed from the DOM');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Address from Request\nDESCRIPTION: Method to get the IP address from the current request object.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$request->getAttribute('ipAddress')\n```\n\n----------------------------------------\n\nTITLE: Installing Frontend Testing Dependencies\nDESCRIPTION: Command to install Jest configuration for frontend testing in Flarum extensions\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add --dev @flarum/jest-config\n```\n\n----------------------------------------\n\nTITLE: PHP Class Reference - URL Generator\nDESCRIPTION: Reference to the UrlGenerator class for handling URLs\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nFlarum\\Http\\UrlGenerator\n```\n\n----------------------------------------\n\nTITLE: Response from Creating a Discussion in Flarum REST API\nDESCRIPTION: Example response after successfully creating a discussion, showing the discussion ID, attributes, relationships to posts and user, and included related resources.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/rest-api.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"type\": \"discussions\",\n    \"id\": \"42\",\n    \"attributes\": {\n      \"title\": \"Lorem Ipsum\",\n      \"slug\": \"42-lorem-ipsum\",\n      \"commentCount\": 1\n      // [...] other attributes\n    },\n    \"relationships\": {\n      \"posts\": {\n        \"data\": [\n          {\n            \"type\": \"posts\",\n            \"id\": \"58\"\n          }\n        ]\n      },\n      \"user\": {\n        \"data\": {\n          \"type\": \"users\",\n          \"id\": \"1\"\n        }\n      },\n      // [...] other relationships\n    }\n  },\n  \"included\":[\n    {\n      \"type\": \"posts\",\n      \"id\": \"38\",\n      \"attributes\": {\n        \"number\": 1,\n        \"contentType\": \"comment\",\n        \"contentHtml\": \"\\u003Cp\\u003EHello World\\u003C\\/p\\u003E\"\n        // [...] other attributes\n      }\n    }\n    // [...] other includes\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis in Flarum Extension\nDESCRIPTION: Command to run the PHPStan static analysis on a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer analyse:phpstan\n```\n\n----------------------------------------\n\nTITLE: Modal Stack Implementation in TypeScript\nDESCRIPTION: Example of implementing stacked modals in Flarum 1.5+ to allow multiple modals to be open simultaneously.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-1_x.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\napp.modal.show(ModalComponent, { attrs }, true)\n```\n\n----------------------------------------\n\nTITLE: Installing Frontend Testing Dependencies\nDESCRIPTION: Command to install Jest configuration for Flarum frontend testing\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add --dev @flarum/jest-config\n```\n\n----------------------------------------\n\nTITLE: Using the Select Component with Disabled Prop in JavaScript\nDESCRIPTION: Shows how to use the disabled property with the Select component in Flarum JavaScript code.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/update-b12.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nflarum/components/Select\n```\n\n----------------------------------------\n\nTITLE: Deprecated PHP Model Date Attribute\nDESCRIPTION: Example showing the deprecated method for defining date attributes in Flarum models that should no longer be used.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-1_x.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nModel::dateAttribute($attribute)\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration Setup\nDESCRIPTION: Jest configuration file setup for Flarum frontend testing\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/testing.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require('@flarum/jest-config')();\n```\n\n----------------------------------------\n\nTITLE: Modifying Frontend Content with Frontend Extender in PHP\nDESCRIPTION: Demonstrates how to modify the frontend HTML document using the Frontend extender's content method. This example adds a JavaScript alert to the document head.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/routes.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Frontend\\Document;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->content(function (Document $document, Request $request) {\n            $document->head[] = '<script>alert(\"Hello, world!\")</script>';\n        })\n];\n```\n\n----------------------------------------\n\nTITLE: Updated Alert Implementation\nDESCRIPTION: Demonstrates the new approach for showing alerts with multiple overload options.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\napp.alerts.show('Hello, this is a success alert!');\napp.alerts.show({type: 'success'}, 'Hello, this is a success alert!');\napp.alerts.show(Alert, {type: 'success'}, 'Hello, this is a success alert!');\n```\n\n----------------------------------------\n\nTITLE: Configuring Flarum Scheduler Cron Job\nDESCRIPTION: The cron job configuration line to add to the crontab that runs the Flarum scheduler every minute. This enables all extension-based scheduled tasks to run automatically.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/scheduler.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * cd /path-to-your-project && php flarum schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Legacy Closure Extender Example in PHP\nDESCRIPTION: Demonstrates the deprecated approach of using closure functions in extend.php for event subscription, which is no longer supported in Flarum 1.0\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-1_0.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\FilterDiscussionListByTags::class);\n        $events->subscribe(Listener\\FilterPostsQueryByTag::class);\n        $events->subscribe(Listener\\UpdateTagMetadata::class);\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flarum Testing Environment\nDESCRIPTION: PHP script to initialize the Flarum testing environment using the SetupScript class from flarum/testing.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Flarum\\Testing\\integration\\Setup\\SetupScript;\n\nrequire __DIR__.'/../../vendor/autoload.php';\n\n$setup = new SetupScript();\n\n$setup->run();\n```\n\n----------------------------------------\n\nTITLE: Installing Extension via Composer\nDESCRIPTION: Command for users to install the extension using Composer package manager. The vendor and package names should be replaced with actual values.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/distribution.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require vendor/package\n```\n\n----------------------------------------\n\nTITLE: Using attrs() Method in Custom Component\nDESCRIPTION: Example of using the attrs() method in a custom component to provide extensible attributes to the top-level child vnode. This method has been renamed to elementAttrs() in the new version.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b14.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends Component {\n  view() {\n    return <div {...this.attrs()}><p>Hello World!</p></div>;\n  }\n\n  attrs() {\n    return {\n      className: 'SomeClass',\n      onclick: () => console.log('click'),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit for Flarum Integration Tests\nDESCRIPTION: XML configuration for PHPUnit to run integration tests. Specifies test suite directory and important settings like process isolation.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"true\"\n         stopOnFailure=\"false\">\n\n    <testsuites>\n        <testsuite name=\"Flarum Integration Tests\">\n            <directory suffix=\"Test.php\">./integration</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Composer Dependency Resolution Output\nDESCRIPTION: Sample output from composer why-not command showing dependency conflicts during update\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/update.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflarum/flarum                     -               requires          flarum/core (v0.1.0-beta.15)\nfof/moderator-notes               0.4.4           requires          flarum/core (>=0.1.0-beta.15 <0.1.0-beta.16)\njordanjay29/flarum-ext-summaries  0.3.2           requires          flarum/core (>=0.1.0-beta.14 <0.1.0-beta.16)\nflarum/core                       v0.1.0-beta.16  requires          dflydev/fig-cookies (^3.0.0)\nflarum/flarum                     -               does not require  dflydev/fig-cookies (but v2.0.3 is installed)\nflarum/core                       v0.1.0-beta.16  requires          franzl/whoops-middleware (^2.0.0)\nflarum/flarum                     -               does not require  franzl/whoops-middleware (but 0.4.1 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/bus (^8.0)\nflarum/flarum                     -               does not require  illuminate/bus (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/cache (^8.0)\nflarum/flarum                     -               does not require  illuminate/cache (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/config (^8.0)\nflarum/flarum                     -               does not require  illuminate/config (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/container (^8.0)\nflarum/flarum                     -               does not require  illuminate/container (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/contracts (^8.0)\nflarum/flarum                     -               does not require  illuminate/contracts (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/database (^8.0)\nflarum/flarum                     -               does not require  illuminate/database (but v6.20.19 is installed)\nflarum/core                       v0.1.0-beta.16  requires          illuminate/events (^8.0)\nflarum/flarum                     -               does not require  illuminate/events (but v6.20.19 is installed)\n```\n\n----------------------------------------\n\nTITLE: Using flarum/components/Select with disabled prop in JavaScript\nDESCRIPTION: Utilize the new 'disabled' prop in the flarum/components/Select component to disable the select input when needed.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-b12.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Select from 'flarum/components/Select';\n\nm.component(Select, {\n  disabled: true,\n  options: {\n    'option1': 'Option 1',\n    'option2': 'Option 2'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Cron on Debian/Ubuntu\nDESCRIPTION: This snippet provides the commands needed to install cron on Debian and Ubuntu based systems.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/scheduler.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install cron\n```\n\n----------------------------------------\n\nTITLE: Clearing Flarum Cache\nDESCRIPTION: Command to clear Flarum's backend cache, including generated JS/CSS, text formatter cache, and cached translations.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/console.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum cache:clear\n```\n\n----------------------------------------\n\nTITLE: Updating Promise Handling in Mithril 2.0 for JavaScript\nDESCRIPTION: This snippet shows how to update promise handling when migrating from Mithril 0.2 to Mithril 2.0. It demonstrates the replacement of m.deferred with native promises.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\nconst deferred = m.deferred();\n\napp.store.find('posts').then(result => deferred.resolve(result));\n\nreturn deferred.promise;\n\n// Mithril 2\nreturn app.store.find('posts');\n```\n\n----------------------------------------\n\nTITLE: Activating Debug Mode Command - PHP\nDESCRIPTION: Command to clear Flarum's backend cache using the CLI tool. Used as part of troubleshooting steps.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/troubleshoot.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp flarum cache:clear\n```\n\n----------------------------------------\n\nTITLE: Using the TagSelectionModal Component in TypeScript\nDESCRIPTION: Reference to the new tag selection component added in Flarum 1.7, useful for extensions that need to implement tag selection functionality.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-1_x.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport TagSelectionModal from 'flarum/tags/common/components/TagSelectionModal';\n```\n\n----------------------------------------\n\nTITLE: Directory Permissions Commands\nDESCRIPTION: Series of Linux commands for setting proper file permissions and ownership for Flarum directories.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/install.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nchmod 775 -R /path/to/directory\n```\n\nLANGUAGE: bash\nCODE:\n```\nchown -R www-data:www-data /path/to/directory\n```\n\nLANGUAGE: bash\nCODE:\n```\nchcon -R -t httpd_sys_rw_content_t /path/to/directory\n```\n\n----------------------------------------\n\nTITLE: Running Flarum Console Commands\nDESCRIPTION: Basic syntax for executing Flarum commands via terminal. First SSH into your server, navigate to the Flarum directory, and run commands using the PHP interpreter.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/console.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum [comando]\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Referencing Keys Outside the 'ref' Namespace\nDESCRIPTION: Illustrates an incorrect approach to translation reuse where keys outside the designated 'ref' namespace are referenced. This practice makes translations harder to maintain and can lead to unintended changes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => Log In\n\n    log_in:\n      submit_button: => core.forum.header.log_in_link  # Never reference keys\n      title: => core.forum.header.log_in_link          # that aren't in \"ref\"!\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit for Unit Tests in Flarum\nDESCRIPTION: This XML configuration file sets up PHPUnit for running unit tests in Flarum extensions. It specifies test suite location, important PHPUnit settings, and includes a Mockery listener.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/testing.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n\n    <testsuites>\n        <testsuite name=\"Flarum Unit Tests\">\n            <directory suffix=\"Test.php\">./unit</directory>\n        </testsuite>\n    </testsuites>\n    <listeners>\n        <listener class=\"\\Mockery\\Adapter\\Phpunit\\TestListener\"></listener>\n    </listeners>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Testing Console Commands in Flarum\nDESCRIPTION: Example of testing a custom console command in Flarum using the ConsoleTestCase class. It demonstrates how to run a command with arguments and options, and assert the output.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Tests\\integration\\ConsoleTestCase;\n\nclass ConsoleTest extends ConsoleTestCase\n{\n    /**\n     * @test\n     */\n    public function command_works()\n    {\n        $input = [\n            'command' => 'some:command',  // The command name, equivalent of `php flarum some:command`\n            'foo' => 'bar',  // arguments\n            '--lorem' => 'ipsum'  // options\n        ];\n\n        $this->assertEquals('Some Output.', $this->runCommand($input));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Translation Keys with Pluralization Support\nDESCRIPTION: Example of YAML translation keys that support pluralization for the 'mentioned by' functionality. These keys demonstrate how to structure translations that can handle plural forms in different languages.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nmentioned_by_text: \"{users} replied to this.\"       # Can be pluralized ...\nmentioned_by_self_text: \"{users} replied to this.\"  # Can be pluralized ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Model Attributes and Relationships in JavaScript\nDESCRIPTION: Demonstrates how to access attributes and relationships of model instances using the pre-defined instance methods. Shows retrieving simple properties and related models.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/models.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = discussion.id();\nconst title = discussion.title();\nconst posts = discussion.posts(); // array of Post models\n```\n\n----------------------------------------\n\nTITLE: Help Command with XML Format\nDESCRIPTION: Example of using the help command with XML output format option.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/console.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp flarum help --format=xml list\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in Flarum Migrations\nDESCRIPTION: Illustrates the use of the `createTableIfNotExists` helper in Flarum migrations to create database tables only if they do not already exist, preventing errors during migration execution.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/update-1_x.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ncreateTableIfNotExists\n```\n\n----------------------------------------\n\nTITLE: Adding Settings in Flarum Migrations\nDESCRIPTION: Demonstrates adding default settings using a migration. This is useful for configuring default values for extension settings, and ensures that new settings are populated automatically upon installation or updates.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/models.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn Migration::addSettings([\n    'foo' => 'bar',\n]);\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Browser Scroll Restoration in JavaScript\nDESCRIPTION: Demonstrates how to disable automatic browser scroll restoration for specific pages in the frontend.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b15.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Code example not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Using Views in Controllers\nDESCRIPTION: Example of injecting and using Laravel's View factory in a Flarum controller to render Blade templates.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/routes.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass HelloWorldController implements RequestHandlerInterface\n{\n    protected $view;\n\n    public function __construct(Factory $view)\n    {\n        $this->view = $view;\n    }\n\n    public function handle(Request $request): Response\n    {\n        $view = $this->view->make('acme.hello-world::greeting');\n\n        return new HtmlResponse($view->render());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from the API in JavaScript\nDESCRIPTION: Demonstrates how to retrieve resources from the Flarum API using the store object. Shows how to make API requests with filtering options and how to fetch individual resources by ID.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/data.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// GET /api/discussions?sort=createdAt\napp.store.find('discussions', {sort: 'createdAt'}).then(console.log);\n\n// GET /api/discussions/123\napp.store.find('discussions', 123).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Address from Request\nDESCRIPTION: Method to get the client IP address from the request object\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$request->getAttribute('ipAddress')\n```\n\n----------------------------------------\n\nTITLE: Exporting Frontend Code in Flarum Extension\nDESCRIPTION: Shows how to export the main frontend code for both admin and forum interfaces in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/frontend.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// admin.js\nexport * from './src/admin';\n\n// forum.js\nexport * from './src/forum';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Tests\nDESCRIPTION: JSON configuration for TypeScript testing that extends the main tsconfig and includes testing-specific settings.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"include\": [\"tests/**/*\"],\n  \"files\": [\"../../../node_modules/@flarum/jest-config/shims.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Extended Model Attribute Types for PHPStan\nDESCRIPTION: PHP code snippet demonstrating how to use attribute casting to define types for extended model attributes, which PHPStan can then recognize.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/static-code-analysis.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Model(User::class))\n    ->cast('is_cool', 'bool'),\n```\n\n----------------------------------------\n\nTITLE: Finding Valid Access Token in Flarum\nDESCRIPTION: Demonstrates how to retrieve and validate an access token using the AccessToken class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-b16.md#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nFlarum\\Http\\AccessToken::findValid($tokenString)\n```\n\n----------------------------------------\n\nTITLE: First-level Translation Namespaces in YAML\nDESCRIPTION: Examples of first-level namespaces in Flarum's translation system. These identify which component uses the translation and should match the locale file name for the component.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncore:        # Traducciones utilizadas por el núcleo de Flarum\nvalidation:  # Traducciones utilizadas por el validador de Laravel\n```\n\n----------------------------------------\n\nTITLE: Extending API Controller Configuration in PHP\nDESCRIPTION: Shows how to customize existing API controllers using the ApiController extender, including setting serializers, including relationships, and modifying sort options.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/current/extend/api.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Event\\WillGetData;\nuse Flarum\\Api\\Controller\\ListDiscussionsController;\nuse Illuminate\\Contracts\\Events\\Dispatcher;\n\nreturn [\n    (new Extend\\ApiController(ListDiscussionsController::class))\n        ->setSerializer(MyDiscussionSerializer::class)\n        ->addInclude('user')\n        ->addOptionalInclude('posts')\n        ->setLimit(20)\n        ->setMaxLimit(50)\n        ->setSort(['name' => 'asc'])\n        ->addSortField('firstName')\n        ->prepareDataQuery(function ($controller) {\n            // Add custom logic here to modify the controller\n            // before data queries are executed.\n        })\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from Flarum API in JavaScript\nDESCRIPTION: JavaScript code demonstrating how to retrieve resources from Flarum's API using the store's find method, handling both collection requests and single resource requests.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/data.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// GET /api/discussions?sort=createdAt\napp.store.find('discussions', {sort: 'createdAt'}).then(console.log);\n\n// GET /api/discussions/123\napp.store.find('discussions', 123).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Mutating Existing API Endpoints in PHP\nDESCRIPTION: Shows how to modify existing Flarum API endpoints using the endpoint method. Examples include adding visibility conditions, changing pagination settings, and requiring authentication.\nSOURCE: https://github.com/flarum/docs/blob/master/docs/extend/api.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Resource;\nuse Flarum\\Api\\Endpoint;\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\ApiResource(Resource\\UserResource::class))\n        ->endpoint('show', function (Endpoint\\Show $endpoint) {\n            return $endpoint->visible(fn (User $user, Context $context) => $context->getActor()->can('view', $user));\n        })\n        ->endpoint(Endpoint\\Index::class, function (Endpoint\\Index $endpoint) {\n            return $endpoint->paginate(20, 50);\n        })\n        ->endpoint(['create', 'update'], function (Endpoint\\Create|Endpoint\\Update $endpoint) {\n            return $endpoint->authenticated();\n        }),\n];\n\n```\n\n----------------------------------------\n\nTITLE: Referencing Laminas Namespace in PHP\nDESCRIPTION: Example of using the Laminas namespace instead of the removed Zend namespace.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b13.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nLaminas\\...\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Storage Drivers in PHP\nDESCRIPTION: Demonstrates how to register a custom storage driver using the Filesystem extender. This example registers an 'aws-with-cdn' driver with a custom implementation class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/tr/docusaurus-plugin-content-docs/version-1.x/extend/filesystem.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Filesystem)\n        ->driver('aws-with-cdn', AwsWithCdnDriver::class);\n```\n\n----------------------------------------\n\nTITLE: Using Route Resolvers in Flarum\nDESCRIPTION: This example illustrates multiple approaches to set a component/route resolver, such as using a resolver instance, a custom resolver class, or the default resolver. Each method offers different customization levels for routing behavior.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// See above for a custom page example\nimport CustomPage from './components/CustomPage';\n// See below for a custom resolver example\nimport CustomPageResolver from './resolvers/CustomPageResolver';\n\n// Use a route resolver instance\napp.routes['resolverInstance'] = {path: '/custom/path/1', resolver: {\n  onmatch: function(args) {\n    if (!app.session.user) return m.route.SKIP;\n\n    return CustomPage;\n  }\n}};\n\n// Use a custom route resolver class\napp.routes['resolverClass'] = {path: '/custom/path/2', resolverClass: CustomPageResolver, component: CustomPage};\n\n// Use the default resolver class (`flarum/common/resolvers/DefaultResolver`)\napp.routes['resolverClass'] = {path: '/custom/path/2', component: CustomPage};\n```\n\n----------------------------------------\n\nTITLE: Updated Composer Loading in JavaScript\nDESCRIPTION: The new way to load the composer after the Mithril upgrade. Instead of passing a component instance, pass the body class and any attributes.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\napp.composer.load(new DiscussionComposer({user: app.session.user}));\n\n// Mithril 2\napp.composer.load(DiscussionComposer, {user: app.session.user})\n```\n\n----------------------------------------\n\nTITLE: Basic Translation Key References in YAML\nDESCRIPTION: Demonstrates how to reuse translations across different contexts using Flarum's key reference system within the core namespace.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => core.ref.log_in\n\n    log_in:\n      submit_button: => core.ref.log_in\n      title: => core.ref.log_in\n\n  ref:\n    log_in: Log In\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Requests in Flarum Extension Tests\nDESCRIPTION: Shows how to send HTTP requests in Flarum extension tests, including GET and POST requests with authentication and JSON payloads.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CoolExtension\\Tests\\integration;\n\nuse Flarum\\Testing\\integration\\TestCase;\n\nclass SomeTest extends TestCase\n{\n    /**\n     * @test\n     */\n    public function can_search_users()\n    {\n        $response = $this->send(\n          $this->request('GET', '/api/users', ['authenticatedAs' => 1])\n               ->withQueryParams(['filter' => ['q' => 'john group:1'], 'sort' => 'username'])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    /**\n     * @test\n     */\n    public function can_create_user()\n    {\n        $response = $this->send(\n          $this->request(\n                'POST',\n                '/api/users',\n                [\n                    'authenticatedAs' => 1,\n                    'json' => [\n                        'data' => [\n                            'attributes' => [\n                                'username' => 'test',\n                                'password' => 'too-obscure',\n                                'email' => 'test@machine.local'\n                            ]\n                        ]\n                    ]\n                ]\n            )\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Testing in package.json\nDESCRIPTION: Shows the necessary configuration in package.json to set up frontend testing with Jest in a Flarum extension.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/testing.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"scripts\": {\n    ...,\n    \"test\": \"yarn node --experimental-vm-modules $(yarn bin jest)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding attrs() Method in Mithril Components\nDESCRIPTION: This snippet shows how to override the attrs() method in a Mithril component to provide additional attributes to a top-level child vnode. The new naming convention requires renaming attrs() to elementAttrs() to avoid conflicts with the built-in attrs.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomComponent extends Component {\n  view() {\n    return <div {...this.attrs()}><p>Hello World!</p></div>;\n  }\n\n  attrs() {\n    return {\n      className: 'SomeClass',\n      onclick: () => console.log('click'),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Optional Extension in Frontend JavaScript\nDESCRIPTION: Demonstrates how to check if an optional extension is enabled in the frontend using the global flarum.extensions object.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/extending-extensions.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif ('some-extension-id' in flarum.extensions) {\n    // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Modal Component in JSX\nDESCRIPTION: This snippet demonstrates how to create a custom modal component by extending Flarum's base Modal class. It shows how to override key methods to customize the modal's appearance and behavior.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/interactive-components.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Modal from 'flarum/common/components/Modal';\n\nexport default class CustomModal extends Modal {\n  // True by default, dictates whether the modal can be dismissed by clicking on the background or in the top right corner.\n  static isDismissible = true;\n\n  className() {\n    // Custom CSS classes to apply to the modal\n    return 'custom-modal-class';\n  }\n\n  title() {\n    // Content to show in the modal's title bar\n    return <p>Custom Modal</p>;\n  }\n\n  content() {\n    // Content to show in the modal's body\n    return <p>Hello World!</p>;\n  }\n\n  onsubmit() {\n    // If your modal contains a form, you can add form processing logic here.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Extenders in PHP for Flarum Beta 8\nDESCRIPTION: Example of using the new Extender concept in Flarum Beta 8. This code demonstrates how to set up frontend assets, routes, and event listeners in the extend.php file.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/update-b8.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less')\n        ->route('/t/{slug}', 'tag')\n        ->route('/tags', 'tags'),\n\n    function (Dispatcher $events) {\n        $events->subscribe(Listener\\AddForumTagsRelationship::class);\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Updated Alert Opening in JavaScript\nDESCRIPTION: The new way to open alerts after the Mithril upgrade. The show method now has three overloads, allowing for different levels of customization.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\napp.alerts.show('Hello, this is a success alert!');\napp.alerts.show({type: 'success'}, 'Hello, this is a success alert!');\napp.alerts.show(Alert, {type: 'success'}, 'Hello, this is a success alert!');\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltips in React for Flarum 1.0\nDESCRIPTION: Demonstrates how to use the new Tooltip component in React for creating tooltips in Flarum 1.0.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Tooltip text=\"You wish!\">\n  <button>\n    Click for free money!\n  </button>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Registering Search Components with SimpleFlarumSearch Extender\nDESCRIPTION: Configuration code to register the custom gambit and search mutator with Flarum's SimpleFlarumSearch extender for the UserSearcher class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/search.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n  // Other extenders\n  (new Extend\\SimpleFlarumSearch(UserSearcher::class))\n    ->addGambit(CountryGambit::class)\n    ->addSearchMutator(OnlySameCountrySearchMutator::class),\n  // Other extenders\n```\n\n----------------------------------------\n\nTITLE: Checking Page Type with PostStreamState in Flarum\nDESCRIPTION: This example demonstrates checking the type and data of the current page using the `PostStreamState.matches` method. It validates if the user is currently viewing a discussion page by matching against specific page components or route name.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/frontend-pages.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport IndexPage from 'flarum/forum/components/DiscussionPage';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\n\n// To just check page type\napp.current.matches(DiscussionPage);\n\n// To check page type and some data\napp.current.matches(IndexPage, {routeName: 'following'});\n```\n\n----------------------------------------\n\nTITLE: Updating Route Definitions in JavaScript for Mithril 2.0\nDESCRIPTION: This snippet shows how to update route definitions when migrating from Mithril 0.2 to Mithril 2.0. It demonstrates the change from providing a component instance to providing a component class.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Mithril 0.2\napp.routes.new_page = { path: '/new', component: NewPage.component() }\n\n// Mithril 2.0\napp.routes.new_page = { path: '/new', component: NewPage }\n```\n\n----------------------------------------\n\nTITLE: Handling Route Parameters in Flarum with PHP\nDESCRIPTION: This PHP snippet demonstrates how to define a route with parameters using the FastRoute syntax. It captures segments of the URI and extracts them within the controller using `$request->getQueryParams()`.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/routes.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n(new Extend\\Routes('forum'))\n    ->get('/user/{id}', 'acme.user', UserController::class)\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Arr;\n\n$id = Arr::get($request->getQueryParams(), 'id');\n```\n\n----------------------------------------\n\nTITLE: Showing Alerts with Overloads in Flarum JS\nDESCRIPTION: This code showcases the various overloads for the `show` method in managing alerts, allowing strings, attributes, and component classes to be used, along with the introduction of unique keys for dismissal.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/version-1.x/extend/update-b14.md#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.alerts.show('Hello, this is a success alert!');\napp.alerts.show({type: 'success'}, 'Hello, this is a success alert!');\napp.alerts.show(Alert, {type: 'success'}, 'Hello, this is a success alert!');\n```\n\n----------------------------------------\n\nTITLE: Adding Views in Flarum's extend.php\nDESCRIPTION: Demonstrates how to add a View extender to Flarum's extend.php file to register a new view namespace and directory.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/current/extend/views.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Illuminate\\Contracts\\View\\Factory;\n\nreturn [\n    (new Extend\\View)\n        ->namespace('acme.hello-world', __DIR__.'/views'),\n];\n```\n\n----------------------------------------\n\nTITLE: Using Streams for Reactive Data in Flarum\nDESCRIPTION: Explains how to use Flarum's Stream utility for reactive data handling. It shows basic usage of Stream for wrapping form data and updating values.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/forms.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport Stream from 'flarum/common/utils/Stream';\n\n\nconst value = Stream(\"hello!\");\nvalue() === \"hello!\"; // true\nvalue(\"world!\");\nvalue() === \"world!\"; // true\n```\n\n----------------------------------------\n\nTITLE: Using Global Functions in PHP Extenders\nDESCRIPTION: Example of how to use global functions or array-type functions in PHP extenders that support callbacks or closures.\nSOURCE: https://github.com/flarum/docs/blob/master/versioned_docs/version-1.x/extend/update-b16.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n'boolval'\n```\n\nLANGUAGE: PHP\nCODE:\n```\n[ClassName::class, 'methodName']\n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux Permissions\nDESCRIPTION: Command to set SELinux context for web server write access to Flarum directories\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/install.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nchcon -R -t httpd_sys_rw_content_t /path/to/directory\n```\n\n----------------------------------------\n\nTITLE: Policy Registration in Flarum\nDESCRIPTION: Example showing how to register both model-specific and global policies using Flarum's Policy extender.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/authorization.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Extend;\nuse Flarum\\Tags\\Tag;\nuse YourNamespace\\Access;\n\nreturn [\n  // Other extenders\n  (new Extend\\Policy())\n    ->modelPolicy(Tag::class, Access\\TagPolicy::class)\n    ->globalPolicy(Access\\GlobalPolicy::class),\n  // Other extenders\n];\n```\n\n----------------------------------------\n\nTITLE: Eager Loading API Controller in PHP\nDESCRIPTION: Example of using the new load method on the ApiController extender to eager load relationships and solve N+1 query issues.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/vi/docusaurus-plugin-content-docs/current/extend/update-1_0.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // other extenders\n    (new Extend\\ApiController(FlarumController\\ListDiscussionsController::class))\n        ->addInclude(['tags', 'tags.state', 'tags.parent'])\n        ->load('tags'),\n];\n```\n\n----------------------------------------\n\nTITLE: Global Flarum Update Command (Shell)\nDESCRIPTION: Runs a Composer command to update all packages in the Flarum installation, including dependencies. This is useful for performing a global update of all components.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/internal/package-manager.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncommand update --prefer-dist --no-dev -a --with-all-dependencies\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Notification Driver in Flarum PHP\nDESCRIPTION: This snippet details how to implement a custom notification driver by adhering to the NotificationDriverInterface. The PusherNotificationDriver example illustrates sending notifications using a queue, emphasizing performance enhancement through job scheduling.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/version-1.x/extend/notifications.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace Flarum\\Pusher;\n\nuse Flarum\\Notification\\Blueprint\\BlueprintInterface;\nuse Flarum\\Notification\\Driver\\NotificationDriverInterface;\nuse Illuminate\\Contracts\\Queue\\Queue;\n\nclass PusherNotificationDriver implements NotificationDriverInterface\n{\n    /**\n     * @var Queue\n     */\n    protected $queue;\n\n    public function __construct(Queue $queue)\n    {\n        $this->queue = $queue;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function send(BlueprintInterface $blueprint, array $users): void\n    {\n        // The `send` method is responsible for determining any notifications need to be sent.\n        // If not (for example, if there are no users to send to), there's no point in scheduling a job.\n        // We HIGHLY recommend that notifications are sent via a queue job for performance reasons.\n        if (count($users)) {\n            $this->queue->push(new SendPusherNotificationsJob($blueprint, $users));\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function registerType(string $blueprintClass, array $driversEnabledByDefault): void\n    {\n        // This method is generally used to register a user preference for this notification.\n        // In the case of pusher, there's no need for this.\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Incorrect Translation Reference Pattern in YAML\nDESCRIPTION: Example showing an incorrect approach to translation references that should be avoided. This demonstrates why references should point to the 'ref' namespace rather than directly to other interface elements.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/version-1.x/extend/i18n.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ncore:\n\n  forum:\n    header:\n      log_in_link: => Log In\n\n    log_in:\n      submit_button: => core.forum.header.log_in_link  # Never reference keys\n      title: => core.forum.header.log_in_link          # that aren't in \"ref\"!\n```\n\n----------------------------------------\n\nTITLE: Configurazione JavaScript per Internazionalizzazione Date con DayJS\nDESCRIPTION: Questo snippet mostra come configurare l'internazionalizzazione delle date per una specifica lingua utilizzando la libreria DayJS in Flarum. Il codice 'xx' deve essere sostituito con il codice della lingua appropriato.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/current/extend/language-packs.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndayjs.locale('xx');\n```\n\n----------------------------------------\n\nTITLE: Single Translation with Embedded Link Example\nDESCRIPTION: Demonstrates a flexible approach to translation that allows for embedded links and preserves localizer flexibility\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/zh/docusaurus-plugin-content-docs/current/extend/i18n.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nsign_up_text: \"Don't have an account? <a>Sign Up</a>\"\n```\n\n----------------------------------------\n\nTITLE: New PHP Middleware Extender\nDESCRIPTION: The new Flarum\\Extend\\Middleware extender allows adding, removing or replacing middleware in the three middleware stacks (api, forum, admin).\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/it/docusaurus-plugin-content-docs/version-1.x/extend/update-b12.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n  - `Flarum\\Extend\\Middleware` offers methods for adding, removing or replacing middleware in our three middleware stacks (api, forum, admin).\n```\n\n----------------------------------------\n\nTITLE: Basic Monkey Patching in Flarum Frontend\nDESCRIPTION: Demonstrates basic monkey patching by adding a global attribute and replacing a component's view method.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/de/docusaurus-plugin-content-docs/current/extend/frontend.md#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// This adds an attribute to the `app` global.\napp.googleUrl = \"https://google.com\";\n\n// This replaces the output of the discussion page with \"Hello World\"\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\n\nDiscussionPage.prototype.view = function() {\n  return <p>Hello World</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Create API Controller Implementation in PHP\nDESCRIPTION: Example of an API controller for creating a new resource by extending AbstractCreateController, showing how to handle incoming data and create a new model instance.\nSOURCE: https://github.com/flarum/docs/blob/master/i18n/es/docusaurus-plugin-content-docs/version-1.x/extend/api.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Flarum\\Api\\Controller\\AbstractCreateController;\nuse Illuminate\\Support\\Arr;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Tobscure\\JsonApi\\Document;\n\nclass CreateTagController extends AbstractCreateController\n{\n    public $serializer = TagSerializer::class;\n\n    protected function data(Request $request, Document $document)\n    {\n        $attributes = Arr::get($request->getParsedBody(), 'data.attributes');\n\n        return Tag::create([\n            'name' => Arr::get($attributes, 'name')\n        ]);\n    }\n}\n```"
  }
]