[
  {
    "owner": "ib-api-reloaded",
    "repo": "ib_async",
    "content": "TITLE: Retrieving Current Positions using ib_async in Python\nDESCRIPTION: This snippet shows how to retrieve the current positions using the ib.positions() method after establishing a connection.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/basics.ipynb#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nib.positions()\n```\n\n----------------------------------------\n\nTITLE: Placing an Order with IB API in Python\nDESCRIPTION: Places the order using the placeOrder method which returns a Trade object immediately (non-blocking). The Trade object contains all information related to the order.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/ordering.ipynb#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntrade = ib.placeOrder(contract, order)\n```\n\n----------------------------------------\n\nTITLE: Historical Data Download Example\nDESCRIPTION: Complete script demonstrating how to connect to IB Gateway/TWS and download historical forex data, including converting the results to a pandas dataframe.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_async import *\n# util.startLoop()  # uncomment this line when in a notebook\n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=1)\n\nib.reqMarketDataType(4)  # Use free, delayed, frozen data\ncontract = Forex('EURUSD')\nbars = ib.reqHistoricalData(\n    contract, endDateTime='', durationStr='30 D',\n    barSizeSetting='1 hour', whatToShow='MIDPOINT', useRTH=True)\n\n# convert to pandas dataframe (pandas needs to be installed):\ndf = util.df(bars)\nprint(df)\n```\n\n----------------------------------------\n\nTITLE: Implementing Blocking Order Placement in IB API Python\nDESCRIPTION: Demonstrates how to make order placement blocking by waiting until the order is either filled or canceled using a while loop with waitOnUpdate() method.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/ordering.ipynb#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n%%time\norder = MarketOrder('BUY', 100)\n\ntrade = ib.placeOrder(contract, order)\nwhile not trade.isDone():\n    ib.waitOnUpdate()\n```\n\n----------------------------------------\n\nTITLE: Fetching Consecutive Historical Data with ib_async in Python\nDESCRIPTION: This snippet demonstrates how to fetch consecutive 1-minute bar data for Tesla stock from the earliest available date to the present using ib_async. It uses a loop to request historical data in 10-day chunks and saves the result to a CSV file.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/recipes.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nfrom ib_async import *\n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=1)\n\ncontract = Stock('TSLA', 'SMART', 'USD')\n\ndt = ''\nbarsList = []\nwhile True:\n    bars = ib.reqHistoricalData(\n        contract,\n        endDateTime=dt,\n        durationStr='10 D',\n        barSizeSetting='1 min',\n        whatToShow='MIDPOINT',\n        useRTH=True,\n        formatDate=1)\n    if not bars:\n        break\n    barsList.append(bars)\n    dt = bars[0].date\n    print(dt)\n\n# save to CSV file\nallBars = [b for bars in reversed(barsList) for b in bars]\ndf = util.df(allBars)\ndf.to_csv(contract.symbol + '.csv', index=False)\n```\n\n----------------------------------------\n\nTITLE: Retrieving News Articles with ib_async in Python\nDESCRIPTION: This snippet demonstrates how to fetch news providers, historical news headlines, and a specific news article for AMD stock using ib_async. It prints the latest headline and its corresponding article.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/recipes.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nnewsProviders = ib.reqNewsProviders()\nprint(newsProviders)\ncodes = '+'.join(np.code for np in newsProviders)\n\namd = Stock('AMD', 'SMART', 'USD')\nib.qualifyContracts(amd)\nheadlines = ib.reqHistoricalNews(amd.conId, codes, '', '', 10)\nlatest = headlines[0]\nprint(latest)\narticle = ib.reqNewsArticle(latest.providerCode, latest.articleId)\nprint(article)\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Order Book Display\nDESCRIPTION: Creates a dynamic order book display using pandas DataFrame and event handling to show real-time bid/ask updates\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/market_depth.ipynb#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, clear_output\nimport pandas as pd\n\ndf = pd.DataFrame(index=range(5),\n        columns='bidSize bidPrice askPrice askSize'.split())\n\ndef onTickerUpdate(ticker):\n    bids = ticker.domBids\n    for i in range(5):\n        df.iloc[i, 0] = bids[i].size if i < len(bids) else 0\n        df.iloc[i, 1] = bids[i].price if i < len(bids) else 0\n    asks = ticker.domAsks\n    for i in range(5):\n        df.iloc[i, 2] = asks[i].price if i < len(asks) else 0\n        df.iloc[i, 3] = asks[i].size if i < len(asks) else 0\n    clear_output(wait=True)\n    display(df)\n\nticker.updateEvent += onTickerUpdate\n\nIB.sleep(15);\n```\n\n----------------------------------------\n\nTITLE: Cancelling an Order in IB API Python\nDESCRIPTION: Cancels the previously submitted limit order using the cancelOrder method, which stops the order from being executed in the market.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/ordering.ipynb#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nib.cancelOrder(limitOrder)\n```\n\n----------------------------------------\n\nTITLE: Requesting Market Data Streams\nDESCRIPTION: Initiates market data streaming for all forex contracts. Sets up continuous data feed for price updates.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/tick_data.ipynb#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfor contract in contracts:\n    ib.reqMktData(contract, '', False, False)\n```\n\n----------------------------------------\n\nTITLE: Advanced Scanner Filtering Using TagValue Objects in Python\nDESCRIPTION: Demonstrates the modern approach to filtering scanner results using TagValue objects. This example finds US stocks with a 20% gain and price between $5-$50, sorted by percentage gain.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/scanners.ipynb#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsub = ScannerSubscription(\n    instrument='STK',\n    locationCode='STK.US.MAJOR',\n    scanCode='TOP_PERC_GAIN')\n\ntagValues = [\n    TagValue(\"changePercAbove\", \"20\"),\n    TagValue('priceAbove', 5),\n    TagValue('priceBelow', 50)]\n\n# the tagValues are given as 3rd argument; the 2nd argument must always be an empty list\n# (IB has not documented the 2nd argument and it's not clear what it does)\nscanData = ib.reqScannerData(sub, [], tagValues)\n\nsymbols = [sd.contractDetails.contract.symbol for sd in scanData]\nprint(symbols)\n```\n\n----------------------------------------\n\nTITLE: Initializing IB API Connection in Python\nDESCRIPTION: Sets up the connection to Interactive Brokers API using the ib_async library, starting the event loop and connecting to the TWS or Gateway on port 7497 (paper trading).\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/ordering.ipynb#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_async import *\nutil.startLoop()\n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=13)\n# util.logToConsole()\n```\n\n----------------------------------------\n\nTITLE: Creating Various Contract Types with ib_async in Python\nDESCRIPTION: This snippet showcases different ways to create contracts using the Contract class and specialized contract types like Stock, Option, Future, etc.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/basics.ipynb#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nContract(conId=270639)\nStock('AMD', 'SMART', 'USD')\nStock('INTC', 'SMART', 'USD', primaryExchange='NASDAQ')\nForex('EURUSD')\nCFD('IBUS30')\nFuture('ES', '20180921', 'GLOBEX')\nOption('SPY', '20170721', 240, 'C', 'SMART')\nBond(secIdType='ISIN', secId='US03076KAA60');\n```\n\n----------------------------------------\n\nTITLE: Qualifying Multiple Contracts Simultaneously\nDESCRIPTION: Qualifies multiple contracts at once and verifies which contracts were successfully qualified based on the returned list.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/contract_details.ipynb#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nqualContracts = ib.qualifyContracts(amd, intc, xxx, eurusd)\n\nassert intc in qualContracts\nassert xxx not in qualContracts\n```\n\n----------------------------------------\n\nTITLE: Requesting Option Chain Data for SPX in Python\nDESCRIPTION: This snippet fetches the option chain data for the SPX index using the IB API. It retrieves information about available expirations and strikes.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/option_chain.ipynb#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nchains = ib.reqSecDefOptParams(spx.symbol, '', spx.secType, spx.conId)\n\nutil.df(chains)\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing ib_async Package in Python\nDESCRIPTION: This snippet demonstrates how to import the ib_async package and start an event loop for notebook usage. The startLoop() function is specific to notebook environments.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/basics.ipynb#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_async import *\nutil.startLoop()\n```\n\n----------------------------------------\n\nTITLE: Requesting Contract Details using ib_async in Python\nDESCRIPTION: This code demonstrates how to request contract details for a specific stock (TSLA) using the reqContractDetails method.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/basics.ipynb#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncontract = Stock('TSLA', 'SMART', 'USD')\nib.reqContractDetails(contract)\n```\n\n----------------------------------------\n\nTITLE: Performing Option Calculations with ib_async in Python\nDESCRIPTION: This snippet shows how to perform option calculations using ib_async. It calculates the implied volatility and option price for a given option contract, option price, underlying price, and volatility.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/recipes.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\noption = Option('EOE', '20171215', 490, 'P', 'FTA', multiplier=100)\n\ncalc = ib.calculateImpliedVolatility(\n    option, optionPrice=6.1, underPrice=525)\nprint(calc)\n\ncalc = ib.calculateOptionPrice(\n    option, volatility=0.14, underPrice=525)\nprint(calc)\n```\n\n----------------------------------------\n\nTITLE: Generating Option Contracts Based on Criteria in Python\nDESCRIPTION: This snippet generates option contracts based on specified criteria: strikes within ±20 of current SPX value, multiples of 5, next three monthly expiries, and both put and call options.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/option_chain.ipynb#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nstrikes = [strike for strike in chain.strikes\n        if strike % 5 == 0\n        and spxValue - 20 < strike < spxValue + 20]\nexpirations = sorted(exp for exp in chain.expirations)[:3]\nrights = ['P', 'C']\n\ncontracts = [Option('SPX', expiration, strike, right, 'SMART', tradingClass='SPX')\n        for right in rights\n        for expiration in expirations\n        for strike in strikes]\n\ncontracts = ib.qualifyContracts(*contracts)\nlen(contracts)\n```\n\n----------------------------------------\n\nTITLE: Creating Live Ticker Table Display\nDESCRIPTION: Implements a real-time updating table of forex ticker data using pandas DataFrame. Updates on every ticker change for 30 seconds.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/tick_data.ipynb#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, clear_output\nimport pandas as pd\n\ndf = pd.DataFrame(\n    index=[c.pair() for c in contracts],\n    columns=['bidSize', 'bid', 'ask', 'askSize', 'high', 'low', 'close'])\n\ndef onPendingTickers(tickers):\n    for t in tickers:\n        df.loc[t.contract.pair()] = (\n            t.bidSize, t.bid, t.ask, t.askSize, t.high, t.low, t.close)\n        clear_output(wait=True)\n    display(df)        \n\nib.pendingTickersEvent += onPendingTickers\nib.sleep(30)\nib.pendingTickersEvent -= onPendingTickers\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Positions in IB API Python\nDESCRIPTION: Queries and displays the current positions in the trading account using the positions() method, which returns all open positions.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/ordering.ipynb#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nib.positions()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fundamental Ratios with ib_async in Python\nDESCRIPTION: This snippet demonstrates how to fetch fundamental ratios for IBM stock using ib_async. It requests market data and prints the fundamental ratios after a short delay.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/recipes.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncontract = Stock('IBM', 'SMART', 'USD')\nticker = ib.reqMktData(contract, '258')\nib.sleep(2)\nprint(ticker.fundamentalRatios)\n```\n\n----------------------------------------\n\nTITLE: Streaming Scanner Data with ib_async in Python\nDESCRIPTION: This snippet demonstrates how to set up a streaming scanner subscription using ib_async. It defines a callback function to handle incoming scanner data, subscribes to the scanner, and cancels the subscription after 60 seconds.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/recipes.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef onScanData(scanData):\n    print(scanData[0])\n    print(len(scanData))\n\nsub = ScannerSubscription(\n    instrument='FUT.US',\n    locationCode='FUT.GLOBEX',\n    scanCode='TOP_PERC_GAIN')\nscanData = ib.reqScannerSubscription(sub)\nscanData.updateEvent += onScanData\nib.sleep(60)\nib.cancelScannerSubscription(scanData)\n```\n\n----------------------------------------\n\nTITLE: Initializing IB API Connection in Python\nDESCRIPTION: This snippet initializes the connection to the Interactive Brokers API. It starts the event loop and connects to the IB gateway or TWS.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/option_chain.ipynb#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_async import *\nutil.startLoop()\n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=12)\n```\n\n----------------------------------------\n\nTITLE: Connecting to TWS/IBG using IB class in Python\nDESCRIPTION: This code creates an instance of the IB class and establishes a connection to TWS/IBG. It specifies the host, port, and client ID for the connection.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/basics.ipynb#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=10)\n```\n\n----------------------------------------\n\nTITLE: Running and Canceling Real-time Bar Subscription\nDESCRIPTION: Allows the real-time bar subscription to run for 30 seconds before canceling it, demonstrating how to properly clean up resources.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/bar_data.ipynb#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nib.sleep(30)\nib.cancelRealTimeBars(bars)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Book Data with ib_async in Python\nDESCRIPTION: This snippet demonstrates how to retrieve and print the order book (DOM) for the EURUSD forex pair using ib_async. It continuously prints the bid and ask prices every 5 seconds.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/recipes.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\neurusd = Forex('EURUSD')\nticker = ib.reqMktDepth(eurusd)\nwhile ib.sleep(5):\n    print(\n        [d.price for d in ticker.domBids],\n        [d.price for d in ticker.domAsks])\n```\n\n----------------------------------------\n\nTITLE: Creating a Forex Contract and Limit Order in Python\nDESCRIPTION: Creates a Forex contract for EURUSD and a limit order to sell 20000 units at a price of 1.11. The qualifyContracts method is used to ensure the contract is fully specified.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/ordering.ipynb#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncontract = Forex('EURUSD')\nib.qualifyContracts(contract)\n\norder = LimitOrder('SELL', 20000, 1.11)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Event Handler for Real-time Bar Updates\nDESCRIPTION: Defines a simple callback function that prints each new bar as it's received from a real-time bar subscription.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/bar_data.ipynb#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef onBarUpdate(bars, hasNewBar):\n    print(bars[-1])\n```\n\n----------------------------------------\n\nTITLE: Fetching Minimum Price Increments with ib_async in Python\nDESCRIPTION: This snippet shows how to retrieve the minimum price increments (market rules) for the USDJPY forex pair using ib_async. It first gets the contract details and then fetches the market rules for the contract.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/recipes.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nusdjpy = Forex('USDJPY')\ncd = ib.reqContractDetails(usdjpy)[0]\nprint(cd.marketRuleIds)\n\nrules = [\n    ib.reqMarketRule(ruleId)\n    for ruleId in cd.marketRuleIds.split(',')]\nprint(rules)\n```\n\n----------------------------------------\n\nTITLE: Converting Bar Data to DataFrame and Displaying Results\nDESCRIPTION: Demonstrates how to convert the list of bars to a pandas DataFrame using the util.df function and display the first and last rows of the data.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/bar_data.ipynb#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndf = util.df(bars)\n\ndisplay(df.head())\ndisplay(df.tail())\n```\n\n----------------------------------------\n\nTITLE: Modifying Limit Price and Resubmitting Order in Python\nDESCRIPTION: Modifies the limit price of an existing order and resubmits it to the market. This demonstrates how to update order parameters without creating a new order.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/ordering.ipynb#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlimitOrder.lmtPrice = 0.10\n\nib.placeOrder(contract, limitOrder)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scanner Data (Blocking) with ib_async in Python\nDESCRIPTION: This snippet shows how to retrieve scanner parameters and data using a blocking call with ib_async. It requests scanner parameters and then fetches scanner data for the top percentage gainers in US futures on the GLOBEX exchange.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/recipes.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nallParams = ib.reqScannerParameters()\nprint(allParams)\n\nsub = ScannerSubscription(\n    instrument='FUT.US',\n    locationCode='FUT.GLOBEX',\n    scanCode='TOP_PERC_GAIN')\nscanData = ib.reqScannerData(sub)\nprint(scanData)\n```\n\n----------------------------------------\n\nTITLE: Parsing Scanner Parameters XML to Extract Filter Tags in Python\nDESCRIPTION: Parses the scanner parameters XML document to extract all available filter tags. These tags can be used for advanced filtering of scanner results using the new filtering method.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/scanners.ipynb#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# parse XML document\nimport xml.etree.ElementTree as ET\ntree = ET.fromstring(xml)\n\n# find all tags that are available for filtering\ntags = [elem.text for elem in tree.findall('.//AbstractField/code')]\nprint(len(tags), 'tags:')\nprint(tags)\n```\n\n----------------------------------------\n\nTITLE: Requesting Contract Details for AMD Stock\nDESCRIPTION: Creates a Stock object for AMD and requests its contract details from the IB API. Returns the number of contracts found.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/contract_details.ipynb#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\namd = Stock('AMD')\n\ncds = ib.reqContractDetails(amd)\n\nlen(cds)\n```\n\n----------------------------------------\n\nTITLE: Requesting Hourly Historical Price Data\nDESCRIPTION: Shows how to retrieve 60 days of hourly trading data for a stock using reqHistoricalData with specific duration and bar size settings.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/bar_data.ipynb#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbars = ib.reqHistoricalData(\n        contract,\n        endDateTime='',\n        durationStr='60 D',\n        barSizeSetting='1 hour',\n        whatToShow='TRADES',\n        useRTH=True,\n        formatDate=1)\n```\n\n----------------------------------------\n\nTITLE: Extracting Contracts from Contract Details\nDESCRIPTION: Creates a list of contract objects from the contract details list and displays the first contract.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/contract_details.ipynb#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncontracts = [cd.contract for cd in cds]\n\ncontracts[0]\n```\n\n----------------------------------------\n\nTITLE: Retrieving WSH Event Calendar Data with ib_async in Python\nDESCRIPTION: This snippet demonstrates how to fetch Wall Street Horizon (WSH) event calendar data using ib_async. It retrieves the contract ID for IBM, gets available filters and event types, and then queries for specific events (earnings dates and board meetings) for IBM.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/recipes.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_async import *\n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=1)\n\n# Get the conId of an instrument (IBM in this case):\nibm = Stock('IBM', 'SMART', 'USD')\nib.qualifyContracts(ibm)\nprint(ibm.conId)  # is 8314\n\n# Get the list of available filters and event types:\nmeta = ib.getWshMetaData()\nprint(meta)\n\n# For IBM (with conId=8314) query the:\n#   - Earnings Dates (wshe_ed)\n#   - Board of Directors meetings (wshe_bod)\ndata = WshEventData(\n    filter = '''{\\n  \"country\": \"All\",\\n  \"watchlist\": [\"8314\"],\\n  \"limit_region\": 10,\\n  \"limit\": 10,\\n  \"wshe_ed\": \"true\",\\n  \"wshe_bod\": \"true\"\\n}''')\nevents = ib.getWshEventData(data)\nprint(events)\n```\n\n----------------------------------------\n\nTITLE: Filtering Account Values for Liquidation Value in Python\nDESCRIPTION: This code demonstrates how to filter account values to get the net liquidation value in the base currency using a list comprehension.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/basics.ipynb#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n[v for v in ib.accountValues() if v.tag == 'NetLiquidationByCurrency' and v.currency == 'BASE']\n```\n\n----------------------------------------\n\nTITLE: Subscribing to EURUSD Market Depth\nDESCRIPTION: Creates a Forex contract for EURUSD, qualifies it, and requests market depth data\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/market_depth.ipynb#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncontract = Forex('EURUSD')\nib.qualifyContracts(contract)\nticker = ib.reqMktDepth(contract)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Stock Scanner for Top Percentage Gainers in Python\nDESCRIPTION: Creates a basic scanner subscription to find top percentage gainers in US stocks. The code demonstrates the three required parameters for any scanner: instrument, locationCode, and scanCode.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/scanners.ipynb#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsub = ScannerSubscription(\n    instrument='STK', \n    locationCode='STK.US.MAJOR', \n    scanCode='TOP_PERC_GAIN')\n\nscanData = ib.reqScannerData(sub)\n\nprint(f'{len(scanData)} results, first one:')\nprint(scanData[0])\n```\n\n----------------------------------------\n\nTITLE: Initializing IB API Connection in Python\nDESCRIPTION: Establishes connection to Interactive Brokers TWS/Gateway using the ib_async library. Connects to localhost on port 7497 with client ID 15.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/tick_data.ipynb#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_async import *\nutil.startLoop()\n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=15)\n```\n\n----------------------------------------\n\nTITLE: Filtering Option Chain for Monthly SPX Options in Python\nDESCRIPTION: This snippet filters the option chain data to select only the monthly SPX options trading on SMART exchange.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/option_chain.ipynb#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nchain = next(c for c in chains if c.tradingClass == 'SPX' and c.exchange == 'SMART')\nchain\n```\n\n----------------------------------------\n\nTITLE: Requesting Market Data for Multiple Option Contracts in Python\nDESCRIPTION: This snippet requests market data tickers for all the generated option contracts in a single API call.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/option_chain.ipynb#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntickers = ib.reqTickers(*contracts)\n\ntickers[0]\n```\n\n----------------------------------------\n\nTITLE: Searching for Contracts by Symbol Pattern\nDESCRIPTION: Uses reqMatchingSymbols to find all stock contracts that match the 'intc' pattern and displays the matches.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/contract_details.ipynb#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nmatches = ib.reqMatchingSymbols('intc')\nmatchContracts = [m.contract for m in matches]\n\nmatches\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Tick Data\nDESCRIPTION: Retrieves historical tick data for EUR/USD with a maximum of 1000 ticks, specifying end time as current datetime.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/tick_data.ipynb#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\n\nstart = ''\nend = datetime.datetime.now()\nticks = ib.reqHistoricalTicks(eurusd, start, end, 1000, 'BID_ASK', useRth=False)\n\nticks[-1]\n```\n\n----------------------------------------\n\nTITLE: Setting Delayed Market Data Type in IB API\nDESCRIPTION: This snippet sets the market data type to delayed data (type 4) to avoid issues with real-time market data permissions.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/option_chain.ipynb#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nib.reqMarketDataType(4)\n```\n\n----------------------------------------\n\nTITLE: Accessing Trade Log in IB API Python\nDESCRIPTION: Retrieves the log associated with the trade after waiting for 1 second. The log contains a history of events related to the order's lifecycle.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/ordering.ipynb#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nib.sleep(1)\ntrade.log\n```\n\n----------------------------------------\n\nTITLE: Creating Candlestick Chart from Bar Data\nDESCRIPTION: Uses the utility function barplot to create a candlestick chart from the last 100 bars of historical data with the stock symbol as the title.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/bar_data.ipynb#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nutil.barplot(bars[-100:], title=contract.symbol);\n```\n\n----------------------------------------\n\nTITLE: Managing Short-lived Connections with ib_async in Python\nDESCRIPTION: This snippet shows how to properly manage short-lived connections using ib_async. It adds a one-second delay before disconnecting to ensure all data is flushed and sent.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/recipes.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nib = IB()\nib.connect()\n\n...  # create and submit some orders\n\nib.sleep(1)  # added delay\nib.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Initializing IB API Connection in Python\nDESCRIPTION: Sets up the basic connection to Interactive Brokers API by importing the library, starting the event loop, and connecting to a local IB Gateway or TWS instance.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/bar_data.ipynb#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_async import *\nutil.startLoop()\n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=14)\n```\n\n----------------------------------------\n\nTITLE: Filtering Scanner Results Using Traditional Parameters in Python\nDESCRIPTION: Demonstrates how to filter scanner results using the traditional method by setting properties directly on the ScannerSubscription object. This example filters for stocks above a certain price.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/scanners.ipynb#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsub.abovePrice = 200\nscanData = ib.reqScannerData(sub)\n\nsymbols = [sd.contractDetails.contract.symbol for sd in scanData]\nprint(symbols)\n```\n\n----------------------------------------\n\nTITLE: Fetching News Bulletins with ib_async in Python\nDESCRIPTION: This snippet shows how to request and print news bulletins using ib_async. It subscribes to news bulletins, waits for 5 seconds, and then prints all received bulletins.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/recipes.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nib.reqNewsBulletins(True)\nib.sleep(5)\nprint(ib.newsBulletins())\n```\n\n----------------------------------------\n\nTITLE: Creating and Qualifying SPX Index Contract in Python\nDESCRIPTION: This snippet creates a contract object for the S&P 500 index (SPX) and qualifies it using the IB API.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/option_chain.ipynb#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nspx = Index('SPX', 'CBOE')\nib.qualifyContracts(spx)\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from TWS/IBG using ib_async in Python\nDESCRIPTION: This code snippet demonstrates how to disconnect the IB instance and clear its state using the disconnect method.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/basics.ipynb#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nib.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Using whatIfOrder to Preview Order Impact in Python\nDESCRIPTION: Demonstrates the whatIfOrder method which shows the commission and margin impact of a market order without actually sending it to the market.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/ordering.ipynb#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\norder = MarketOrder('SELL', 20000)\nib.whatIfOrder(contract, order)\n```\n\n----------------------------------------\n\nTITLE: Requesting Historical Data with Real-time Updates\nDESCRIPTION: Sets up a request for historical data with the keepUpToDate parameter set to True to receive continuous updates for the latest bar, using 10-second bars for a forex pair.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/bar_data.ipynb#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncontract = Forex('EURUSD')\n\nbars = ib.reqHistoricalData(\n        contract,\n        endDateTime='',\n        durationStr='900 S',\n        barSizeSetting='10 secs',\n        whatToShow='MIDPOINT',\n        useRTH=True,\n        formatDate=1,\n        keepUpToDate=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing IB API Connection in Python\nDESCRIPTION: Sets up the IB API connection by importing necessary modules, starting the event loop, and connecting to the Interactive Brokers gateway or TWS application.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/contract_details.ipynb#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_async import *\nutil.startLoop()\n\nimport logging\n# util.logToConsole(logging.DEBUG)\n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=11)\n```\n\n----------------------------------------\n\nTITLE: Creating and Placing a Limit Order with Unrealistic Price in Python\nDESCRIPTION: Creates a limit order to buy 20000 units at an unrealistic price of 0.05 and places it. This demonstrates how to work with orders that will likely remain open.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/ordering.ipynb#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlimitOrder = LimitOrder('BUY', 20000, 0.05)\nlimitTrade = ib.placeOrder(contract, limitOrder)\n\nlimitTrade\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from IB API in Python\nDESCRIPTION: Closes the connection to the Interactive Brokers API when finished with scanner operations. This ensures a clean disconnection from the IB Gateway or TWS application.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/scanners.ipynb#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nib.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Extracting Current Market Price for SPX in Python\nDESCRIPTION: This snippet extracts the current market price of the SPX index from the received ticker data.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/option_chain.ipynb#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nspxValue = ticker.marketPrice()\nspxValue\n```\n\n----------------------------------------\n\nTITLE: Installing IB Async via pip\nDESCRIPTION: Command to install the ib_async library using pip package manager.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install ib_async\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for ib_async in Python\nDESCRIPTION: These snippets show how to enable logging for the ib_async package, including setting the log level to DEBUG for more detailed information.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/basics.ipynb#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nutil.logToConsole()\n```\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nutil.logToConsole(logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Requesting Head Timestamp for Historical Data Availability\nDESCRIPTION: Demonstrates how to retrieve the earliest available date for a stock's historical data using reqHeadTimeStamp with the TRADES data type.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/bar_data.ipynb#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncontract = Stock('TSLA', 'SMART', 'USD')\n\nib.reqHeadTimeStamp(contract, whatToShow='TRADES', useRTH=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing IB API Connection\nDESCRIPTION: Establishes connection to Interactive Brokers API using localhost and port 7497 with a specific client ID\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/market_depth.ipynb#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_async import *\nutil.startLoop()\n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=16)\n```\n\n----------------------------------------\n\nTITLE: Fetching Dividend Information with ib_async in Python\nDESCRIPTION: This snippet shows how to retrieve dividend information for Intel (INTC) stock using ib_async. It requests market data and prints the dividend information after a short delay.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/recipes.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ncontract = Stock('INTC', 'SMART', 'USD')\nticker = ib.reqMktData(contract, '456')\nib.sleep(2)\nprint(ticker.dividends)\n```\n\n----------------------------------------\n\nTITLE: Initializing IB API Connection for Scanner Usage in Python\nDESCRIPTION: Sets up the Interactive Brokers API connection for scanner usage. This code initializes the event loop, creates an IB instance, and connects to TWS or IB Gateway on localhost port 7497.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/scanners.ipynb#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_async import *\nutil.startLoop()  \n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=17)\n```\n\n----------------------------------------\n\nTITLE: Verifying Open Trade Status in IB API Python\nDESCRIPTION: Confirms that the limit trade is included in the list of open trades available from the IB instance using an assertion statement.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/ordering.ipynb#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nassert limitTrade in ib.openTrades()\n```\n\n----------------------------------------\n\nTITLE: Specifying Unique Stock Contract with Exchange and Currency\nDESCRIPTION: Creates a more specific AMD stock contract by specifying the SMART exchange and USD currency, then verifies it returns exactly one contract.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/contract_details.ipynb#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\namd = Stock('AMD', 'SMART', 'USD')\n\nassert len(ib.reqContractDetails(amd)) == 1\n```\n\n----------------------------------------\n\nTITLE: Creating and Verifying Forex Contract\nDESCRIPTION: Creates a Forex object for the EURUSD pair and verifies it returns exactly one contract.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/contract_details.ipynb#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\neurusd = Forex('EURUSD')\n\nassert len(ib.reqContractDetails(eurusd)) == 1\n```\n\n----------------------------------------\n\nTITLE: Extracting Available Scan Codes from Scanner Parameters XML in Python\nDESCRIPTION: Extracts and displays all available scan codes from the scanner parameters XML. This helps identify the various types of scans that can be performed through the API.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/scanners.ipynb#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nscanCodes = [e.text for e in tree.findall('.//scanCode')]\n\nprint(len(scanCodes), 'scan codes, showing the ones starting with \"TOP\":')\nprint([sc for sc in scanCodes if sc.startswith('TOP')])\n```\n\n----------------------------------------\n\nTITLE: Creating Forex Contracts in IB API\nDESCRIPTION: Creates contract objects for major forex pairs (EUR/USD, USD/JPY, GBP/USD, USD/CHF, USD/CAD, AUD/USD) and qualifies them with IB.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/tick_data.ipynb#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncontracts = [Forex(pair) for pair in ('EURUSD', 'USDJPY', 'GBPUSD', 'USDCHF', 'USDCAD', 'AUDUSD')]\nib.qualifyContracts(*contracts)\n\neurusd = contracts[0]\n```\n\n----------------------------------------\n\nTITLE: Auto-updating Plot with New Bar Data\nDESCRIPTION: Creates a function to update a candlestick plot whenever new bar data is received, then subscribes this function to the bars' updateEvent and runs it for 10 seconds.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/bar_data.ipynb#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, clear_output\nimport matplotlib.pyplot as plt\n\ndef onBarUpdate(bars, hasNewBar):\n    plt.close()\n    plot = util.barplot(bars)\n    clear_output(wait=True)\n    display(plot)\n\nbars.updateEvent += onBarUpdate\n\nib.sleep(10)\nib.cancelHistoricalData(bars)\n```\n\n----------------------------------------\n\nTITLE: Verifying Order in Active Orders List in Python\nDESCRIPTION: Confirms that the order object is included in the list of orders available from the IB instance using an assertion statement.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/ordering.ipynb#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nassert order in ib.orders()\n```\n\n----------------------------------------\n\nTITLE: Accessing Ticker Data\nDESCRIPTION: Retrieves ticker information for EUR/USD with a brief delay to allow data population.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/tick_data.ipynb#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nticker = ib.ticker(eurusd)\nib.sleep(2)\n\nticker\n```\n\n----------------------------------------\n\nTITLE: Integrating ib_async with PyGame in Python\nDESCRIPTION: This snippet demonstrates how to integrate ib_async with PyGame to create a simple real-time forex quote display. It updates the IB data and PyGame display in a single loop, showing how to combine both event loops effectively.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/recipes.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport ib_async as ibi\nimport pygame\n\n\ndef onTicker(ticker):\n    screen.fill(bg_color)\n    text = f'bid: {ticker.bid}   ask: {ticker.ask}'\n    quote = font.render(text, True, fg_color)\n    screen.blit(quote, (40, 40))\n    pygame.display.flip()\n\n\npygame.init()\nscreen = pygame.display.set_mode((800, 600))\nfont = pygame.font.SysFont('arial', 48)\nbg_color = (255, 255, 255)\nfg_color = (0, 0, 0)\n\nib = ibi.IB()\nib.connect()\ncontract = ibi.Forex('EURUSD')\nticker = ib.reqMktData(contract)\nticker.updateEvent += onTicker\n\nrunning = True\nwhile running:\n    # This updates IB-insync:\n    ib.sleep(0.03)\n\n    # This updates PyGame:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n            pygame.quit()\n```\n\n----------------------------------------\n\nTITLE: Requesting Market Data Ticker for SPX in Python\nDESCRIPTION: This snippet requests a market data ticker for the SPX index. It can take up to 11 seconds to receive the data.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/option_chain.ipynb#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n[ticker] = ib.reqTickers(spx)\nticker\n```\n\n----------------------------------------\n\nTITLE: Making BracketOrder Iterable in Python\nDESCRIPTION: Restores the ability to iterate over BracketOrder objects.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/changelog.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfor order in BracketOrder():\n    # Iterate over orders\n```\n\n----------------------------------------\n\nTITLE: Extracting Available Location Codes for Scanner Queries in Python\nDESCRIPTION: Extracts all available location codes from the scanner parameters XML. These codes specify the geographical markets that can be targeted in scanner queries.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/scanners.ipynb#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlocationCodes = [e.text for e in tree.findall('.//locationCode')]\nprint(locationCodes)\n```\n\n----------------------------------------\n\nTITLE: Requesting Scanner Parameters XML Document in Python\nDESCRIPTION: Retrieves the XML document containing all available scanner parameters from IB API. This document is essential for understanding the full range of filtering options available for scanners.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/scanners.ipynb#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nxml = ib.reqScannerParameters()\n\nprint(len(xml), 'bytes')\n```\n\n----------------------------------------\n\nTITLE: Adding Ticker.marketDataType Attribute in Python\nDESCRIPTION: Adds the marketDataType attribute to the Ticker class to indicate the delayed/frozen status of the reqMktData ticks.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/changelog.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nTicker.marketDataType\n```\n\n----------------------------------------\n\nTITLE: Qualifying and Viewing Contract\nDESCRIPTION: Uses the qualifyContracts method to fill in additional contract details for the AMD stock and displays the updated contract.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/contract_details.ipynb#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nib.qualifyContracts(amd)\namd\n```\n\n----------------------------------------\n\nTITLE: Requesting Real-time 5-Second Bars\nDESCRIPTION: Creates a subscription for real-time 5-second bars using reqRealTimeBars and attaches the previously defined event handler to process updates.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/bar_data.ipynb#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nbars = ib.reqRealTimeBars(contract, 5, 'MIDPOINT', False)\nbars.updateEvent += onBarUpdate\n```\n\n----------------------------------------\n\nTITLE: Requesting Tick-By-Tick Data\nDESCRIPTION: Demonstrates requesting and canceling tick-by-tick data for bid-ask prices on EUR/USD.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/tick_data.ipynb#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nticker = ib.reqTickByTickData(eurusd, 'BidAsk')\nib.sleep(2)\nprint(ticker)\n\nib.cancelTickByTickData(ticker.contract, 'BidAsk')\n```\n\n----------------------------------------\n\nTITLE: Checking Order Status in IB API Python\nDESCRIPTION: Waits for 1 second and then verifies that the order status has changed from 'PendingSubmit' to 'Submitted' using an assertion statement.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/ordering.ipynb#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nib.sleep(1)\nassert limitTrade.orderStatus.status == 'Submitted'\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Commissions from Fills in Python\nDESCRIPTION: Calculates the sum of all commissions paid today by iterating through all fills and extracting the commission values from their commission reports.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/ordering.ipynb#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nsum(fill.commissionReport.commission for fill in ib.fills())\n```\n\n----------------------------------------\n\nTITLE: Extracting Available Instrument Types from Scanner Parameters in Python\nDESCRIPTION: Retrieves all supported instrument types for scanner queries from the scanner parameters XML. This shows the range of assets that can be scanned beyond just stocks.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/scanners.ipynb#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ninstrumentTypes = set(e.text for e in tree.findall('.//Instrument/type'))\nprint(instrumentTypes)\n```\n\n----------------------------------------\n\nTITLE: Converting Contracts to DataFrame\nDESCRIPTION: Uses the util.df utility function to convert the list of contracts to a pandas DataFrame for better visualization.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/contract_details.ipynb#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nutil.df(contracts)\n```\n\n----------------------------------------\n\nTITLE: Saving Scanner Parameters XML to File and Opening in Browser\nDESCRIPTION: Saves the scanner parameters XML to a file and opens it in a web browser for easier viewing. This helps with exploring the vast number of parameters available for scanner filtering.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/scanners.ipynb#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npath = 'scanner_parameters.xml'\nwith open(path, 'w') as f:\n    f.write(xml)\n\nimport webbrowser\nwebbrowser.open(path)\n```\n\n----------------------------------------\n\nTITLE: Requesting Intel Stock Contract Details\nDESCRIPTION: Creates a Stock object for Intel with specific exchange and currency parameters, then verifies it returns exactly one contract.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/contract_details.ipynb#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nintc = Stock('INTC', 'SMART', 'USD')\n\nassert len(ib.reqContractDetails(intc)) == 1\n```\n\n----------------------------------------\n\nTITLE: Viewing Contract Details Object\nDESCRIPTION: Displays the first contract details object from the list of AMD contract details.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/contract_details.ipynb#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncds[0]\n```\n\n----------------------------------------\n\nTITLE: Adding New Ticker Fields in Python\nDESCRIPTION: Adds new fields to the Ticker class: rtTradeVolume, auctionVolume, auctionPrice, and auctionImbalance.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/changelog.rst#2025-04-20_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nticker.rtTradeVolume\nticker.auctionVolume\nticker.auctionPrice\nticker.auctionImbalance\n```\n\n----------------------------------------\n\nTITLE: Requesting Market Depth Exchanges\nDESCRIPTION: Retrieves and displays the first five exchanges that support market depth data\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/market_depth.ipynb#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nl = ib.reqMktDepthExchanges()\nl[:5]\n```\n\n----------------------------------------\n\nTITLE: Verifying Contract Search Results\nDESCRIPTION: Verifies that the Intel stock contract is included in the matches returned by the symbol pattern search.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/contract_details.ipynb#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nassert intc in matchContracts\n```\n\n----------------------------------------\n\nTITLE: Plotting Close Prices from Bar Data\nDESCRIPTION: Creates a simple line plot of closing prices from the previously created DataFrame of historical bar data.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/bar_data.ipynb#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndf.plot(y='close');\n```\n\n----------------------------------------\n\nTITLE: Using Dataclasses for Objects in Python\nDESCRIPTION: Switches to using dataclasses for objects instead of inheriting from a base Object class. For Python 3.6.*, dataclasses need to be installed separately.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/changelog.rst#2025-04-20_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass MyClass:\n    attribute: int\n```\n\n----------------------------------------\n\nTITLE: Verifying Trade in Active Trades List in Python\nDESCRIPTION: Confirms that the trade object is included in the list of trades available from the IB instance using an assertion statement.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/ordering.ipynb#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nassert trade in ib.trades()\n```\n\n----------------------------------------\n\nTITLE: Adding IB.MaxSyncedSubAccounts Attribute in Python\nDESCRIPTION: Adds the MaxSyncedSubAccounts attribute to the IB class.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/changelog.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nIB.MaxSyncedSubAccounts\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from IB API in Python\nDESCRIPTION: This snippet disconnects the client from the Interactive Brokers API, closing the connection.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/option_chain.ipynb#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nib.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Adding Timeout Parameter to IB.reqHistoricalData() in Python\nDESCRIPTION: Adds a new timeout parameter to the IB.reqHistoricalData() method that automatically cancels the request after timing out.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/changelog.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nIB.reqHistoricalData(timeout=...)\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from IB API\nDESCRIPTION: Properly terminates the connection to the Interactive Brokers API when finished with all operations.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/bar_data.ipynb#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nib.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Accessing Individual Bar Data\nDESCRIPTION: Shows how to access the first element of the bars list, which contains historical price data previously requested.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/bar_data.ipynb#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbars[0]\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from IB API\nDESCRIPTION: Closes the connection to Interactive Brokers API.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/tick_data.ipynb#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nib.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Canceling Market Depth Subscription\nDESCRIPTION: Stops the market depth data subscription for the specified contract\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/market_depth.ipynb#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nib.cancelMktDepth(contract)\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from IB API\nDESCRIPTION: Terminates the connection to Interactive Brokers API\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/market_depth.ipynb#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nib.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Canceling Market Data Subscriptions\nDESCRIPTION: Stops live tick data subscriptions for all contracts to free up system resources.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/tick_data.ipynb#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfor contract in contracts:\n    ib.cancelMktData(contract)\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from IB API in Python\nDESCRIPTION: Terminates the connection to the Interactive Brokers API, cleaning up resources and ending the session.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/ordering.ipynb#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nib.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Matplotlib Plots for Jupyter Notebook\nDESCRIPTION: Sets up matplotlib to display plots inline within a Jupyter notebook environment using the magic command.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/bar_data.ipynb#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\n```\n\n----------------------------------------\n\nTITLE: Checking Trade Log After Cancellation in Python\nDESCRIPTION: Retrieves the updated log for the limit trade after cancellation to see the complete history of events, including the cancellation.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/ordering.ipynb#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nlimitTrade.log\n```\n\n----------------------------------------\n\nTITLE: Updating util.schedule Return Value in Python\nDESCRIPTION: Modifies util.schedule to return a handle that can be canceled.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/changelog.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nhandle = util.schedule(callback, when)\nhandle.cancel()\n```\n\n----------------------------------------\n\nTITLE: Creating Contract Using ConId\nDESCRIPTION: Creates a contract using only the contract ID (conId) and verifies it can be fully qualified to match the AMD contract.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/contract_details.ipynb#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ncontract_4391 = Contract(conId=4391)\n\nib.qualifyContracts(contract_4391)\n\nassert contract_4391 == amd\n```\n\n----------------------------------------\n\nTITLE: Viewing Contract Before Qualification\nDESCRIPTION: Displays the AMD stock contract before qualifying it with additional details.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/contract_details.ipynb#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\namd\n```\n\n----------------------------------------\n\nTITLE: Changing Order.totalQuantity Type in Python\nDESCRIPTION: Changes the type of Order.totalQuantity from int to float.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/changelog.rst#2025-04-20_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nOrder.totalQuantity = 100.5  # Now accepts float values\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Existent Contract\nDESCRIPTION: Creates a Stock object with a non-existent symbol and verifies that no contracts are returned.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/contract_details.ipynb#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nxxx = Stock('XXX', 'SMART', 'USD')\n\nassert len(ib.reqContractDetails(xxx)) == 0\n```\n\n----------------------------------------\n\nTITLE: Changing Order.discretionaryAmt Type in Python\nDESCRIPTION: Changes the type of Order.discretionaryAmt from int to float.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/changelog.rst#2025-04-20_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nOrder.discretionaryAmt = 1.5  # Now accepts float values\n```\n\n----------------------------------------\n\nTITLE: Adding Ticker.rtTime Attribute in Python\nDESCRIPTION: Adds the rtTime attribute to the Ticker class. Note that this timestamp appears to be mostly inaccurate.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/changelog.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTicker.rtTime\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from IB API\nDESCRIPTION: Closes the connection to the Interactive Brokers API.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/notebooks/contract_details.ipynb#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nib.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Poetry\nDESCRIPTION: Commands for generating documentation using Poetry and Sphinx.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry install --with=docs\npoetry run sphinx-build -b html docs html\n```\n\n----------------------------------------\n\nTITLE: Adding Readonly Option to Watchdog in Python\nDESCRIPTION: Adds a readonly option to the Watchdog class.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/changelog.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nWatchdog(readonly=True)\n```\n\n----------------------------------------\n\nTITLE: Package Building and Publishing with Poetry\nDESCRIPTION: Commands for building and publishing the package using Poetry.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\npoetry config pypi-token.pypi your-api-token\npoetry publish --build\n```\n\n----------------------------------------\n\nTITLE: Updating IB.waitOnUpdate() Return Value in Python\nDESCRIPTION: Modifies the IB.waitOnUpdate() method to return False on timeout.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/changelog.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nresult = IB.waitOnUpdate()\nif result == False:\n    print(\"Timeout occurred\")\n```\n\n----------------------------------------\n\nTITLE: Adding Throttle Events to Client in Python\nDESCRIPTION: Adds throttleStart and throttleEnd events to the Client class.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/changelog.rst#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nclient.throttleStart\nclient.throttleEnd\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation Structure with Sphinx Toctree\nDESCRIPTION: Sphinx RST configuration that sets up the documentation table of contents tree with maxdepth of 2 and includes various documentation sections. Also includes the project README using myst_parser.\nSOURCE: https://github.com/ib-api-reloaded/ib_async/blob/main/docs/index.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   readme\n   api\n   notebooks\n   recipes\n   code\n   changelog\n   links\n\n.. include:: ../README.md\n   :parser: myst_parser.sphinx_\n```"
  }
]