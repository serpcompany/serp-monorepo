[
  {
    "owner": "apache",
    "repo": "arrow-rs",
    "content": "TITLE: Cargo Features Configuration List\nDESCRIPTION: A list of available feature flags that can be enabled in Cargo.toml for the Parquet crate. Includes support for Arrow integration, async operations, compression algorithms, and other functionality.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/parquet/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `arrow` (default) - support for reading / writing [`arrow`] arrays to / from Parquet\n- `async` - support `async` APIs for reading Parquet\n- `json` - support for reading / writing `json` data to / from Parquet\n- `brotli` (default) - support for Parquet using `brotli` compression\n- `flate2` (default) - support for Parquet using `gzip` compression\n- `lz4` (default) - support for Parquet using `lz4` compression\n- `zstd` (default) - support for Parquet using `zstd` compression\n- `snap` (default) - support for Parquet using `snappy` compression\n- `cli` - parquet CLI tools\n- `crc` - enables functionality to automatically verify checksums of each page\n- `experimental` - Experimental APIs which may change\n- `simdutf8` (default) - Use the `simdutf8` crate for SIMD-accelerated UTF-8 validation\n- `encryption` - support for reading / writing encrypted Parquet files\n```\n\n----------------------------------------\n\nTITLE: Configuring Arrow Dependencies in Cargo.toml\nDESCRIPTION: Example of how to include Arrow as a dependency in a Rust project's Cargo.toml file, disabling default features and selecting specific ones for WASM compatibility.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow/README.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\narrow = { version = \"5.0\", default-features = false, features = [\"csv\", \"ipc\"] }\n```\n\n----------------------------------------\n\nTITLE: Setting RUSTFLAGS for Performance Optimization\nDESCRIPTION: Examples of setting RUSTFLAGS environment variable to enable CPU-specific optimizations for improved Arrow performance.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nRUSTFLAGS=\"-C target-cpu=native\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nRUSTFLAGS=\"-C target-cpu=native -C target-feature=-prefer-256-bit\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nRUSTFLAGS=\"-C target-cpu=haswell\"\n```\n\n----------------------------------------\n\nTITLE: Parquet Implementation Status Checklist\nDESCRIPTION: A checklist showing the current implementation status of various Parquet features in the Rust implementation, including encodings, compression, read/write support, and other functionality.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/parquet/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [x] All encodings supported\n- [x] All compression codecs supported\n- [x] Read support\n  - [x] Primitive column value readers\n  - [x] Row record reader\n  - [x] Arrow record reader\n  - [x] Async support (to Arrow)\n  - [x] Encrypted files\n- [x] Statistics support\n- [x] Write support\n  - [x] Primitive column value writers\n  - [ ] Row record writer\n  - [x] Arrow record writer\n  - [x] Async support\n  - [x] Encrypted files\n- [x] Predicate pushdown\n- [x] Parquet format 4.0.0 support\n```\n\n----------------------------------------\n\nTITLE: Deriving ParquetRecordReader for a Rust Struct\nDESCRIPTION: This example demonstrates how to use the ParquetRecordReader derive macro on a Rust struct and read records from a Parquet file.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/parquet_derive/README.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse parquet::file::{serialized_reader::SerializedFileReader, reader::FileReader};\nuse parquet_derive::ParquetRecordReader;\n\n#[derive(ParquetRecordReader)]\nstruct ACompleteRecord {\n    pub a_bool: bool,\n    pub a_string: String,\n    pub i16: i16,\n    pub i32: i32,\n    pub u64: u64,\n    pub isize: isize,\n    pub float: f32,\n    pub double: f64,\n    pub now: chrono::NaiveDateTime,\n    pub byte_vec: Vec<u8>,\n}\n\n// Initialize your parquet file\nlet reader = SerializedFileReader::new(file).unwrap();\nlet mut row_group = reader.get_row_group(0).unwrap();\n\n// create your records vector to read into\nlet mut chunks: Vec<ACompleteRecord> = Vec::new();\n\n// The derived `RecordReader` takes over here\nchunks.read_from_row_group(&mut *row_group, 1).unwrap();\n```\n\n----------------------------------------\n\nTITLE: Adding Parquet Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the parquet and parquet_derive dependencies to a Rust project's Cargo.toml file.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/parquet_derive/README.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nparquet = \"39.0.0\"\nparquet_derive = \"39.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Deriving ParquetRecordWriter for a Rust Struct\nDESCRIPTION: This example shows how to use the ParquetRecordWriter derive macro on a Rust struct and write records to a Parquet file.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/parquet_derive/README.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse parquet;\nuse parquet::record::RecordWriter;\n\n#[derive(ParquetRecordWriter)]\nstruct ACompleteRecord<'a> {\n    pub a_bool: bool,\n    pub a_str: &'a str,\n    pub a_string: String,\n    pub a_borrowed_string: &'a String,\n    pub maybe_a_str: Option<&'a str>,\n    pub magic_number: i32,\n    pub low_quality_pi: f32,\n    pub high_quality_pi: f64,\n    pub maybe_pi: Option<f32>,\n    pub maybe_best_pi: Option<f64>,\n}\n\n// Initialize your parquet file\nlet mut writer = SerializedFileWriter::new(file, schema, props).unwrap();\nlet mut row_group = writer.next_row_group().unwrap();\n\n// Build up your records\nlet chunks = vec![ACompleteRecord{...}];\n\n// The derived `RecordWriter` takes over here\n(&chunks[..]).write_to_row_group(&mut row_group);\n\nwriter.close_row_group(row_group).unwrap();\nwriter.close().unwrap();\n```\n\n----------------------------------------\n\nTITLE: Installing Arrow Flight Rust Dependencies\nDESCRIPTION: Cargo.toml dependency configuration for adding Arrow Flight to a Rust project.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-flight/README.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\narrow-flight = \"54.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Developing and Testing Arrow + PyArrow Integration\nDESCRIPTION: This bash script activates the Python virtual environment, uses maturin to develop the Rust crate, and runs pytest to execute the integration tests. It should be run whenever Rust code changes.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-pyarrow-integration-testing/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource venv/bin/activate\nmaturin develop\npytest -v .\n```\n\n----------------------------------------\n\nTITLE: Building Arrow-rs Project\nDESCRIPTION: Commands for building the project using cargo directly or via Docker.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -v $(pwd):/arrow-rs -it rust /bin/bash -c \"cd /arrow-rs && rustup component add rustfmt && cargo build\"\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query via Flight SQL CLI\nDESCRIPTION: Example command showing how to execute a SQL query using the Flight SQL command line interface.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-flight/README.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ flight_sql_client --host example.com statement-query \"SELECT 1;\"\n+----------+\n| Int64(1) |\n+----------+\n| 1        |\n+----------+\n```\n\n----------------------------------------\n\nTITLE: Importing Parquet and Parquet Derive in Rust\nDESCRIPTION: This code snippet demonstrates how to import the parquet crate and enable the parquet_derive macros in a Rust file.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/parquet_derive/README.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nextern crate parquet;\n#[macro_use] extern crate parquet_derive;\n```\n\n----------------------------------------\n\nTITLE: Setting up Development Environment for Arrow + PyArrow Integration Testing\nDESCRIPTION: This bash script sets up a Python virtual environment and installs the necessary dependencies for developing and testing the Arrow + PyArrow integration. It uses pip to install maturin, toml, pytest, pytz, and pyarrow.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-pyarrow-integration-testing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# prepare development environment (used to build wheel / install in development)\npython -m venv venv\nvenv/bin/pip install maturin toml pytest pytz pyarrow>=5.0\n```\n\n----------------------------------------\n\nTITLE: Updating Rust Toolchain\nDESCRIPTION: Command to update the Rust stable toolchain to the latest version, which is required for the project.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrustup update stable\n```\n\n----------------------------------------\n\nTITLE: Parquet CLI Usage and Options\nDESCRIPTION: Defines the command-line interface for a Parquet conversion tool. It includes options for specifying input/output files, schema, input format, batch size, CSV parsing settings, compression modes, and Parquet-specific configurations.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/parquet/src/bin/parquet-fromcsv-help.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUsage: parquet [OPTIONS] --schema <SCHEMA> --input-file <INPUT_FILE> --output-file <OUTPUT_FILE>\n\nOptions:\n  -s, --schema <SCHEMA>\n          message schema for output Parquet\n\n  -i, --input-file <INPUT_FILE>\n          input CSV file\n\n  -o, --output-file <OUTPUT_FILE>\n          output Parquet file\n\n  -f, --input-format <INPUT_FORMAT>\n          input file format\n          \n          [default: csv]\n          [possible values: csv, tsv]\n\n  -b, --batch-size <BATCH_SIZE>\n          batch size\n          \n          [env: PARQUET_FROM_CSV_BATCHSIZE=]\n          [default: 1000]\n\n  -h, --has-header\n          has header\n\n  -d, --delimiter <DELIMITER>\n          field delimiter\n          \n          default value: when input_format==CSV: ',' when input_format==TSV: 'TAB'\n\n  -r, --record-terminator <RECORD_TERMINATOR>\n          record terminator\n          \n          [possible values: lf, crlf, cr]\n\n  -e, --escape-char <ESCAPE_CHAR>\n          escape character\n\n  -q, --quote-char <QUOTE_CHAR>\n          quote character\n\n  -D, --double-quote <DOUBLE_QUOTE>\n          double quote\n          \n          [possible values: true, false]\n\n  -C, --csv-compression <CSV_COMPRESSION>\n          compression mode of csv\n          \n          [default: UNCOMPRESSED]\n\n  -c, --parquet-compression <PARQUET_COMPRESSION>\n          compression mode of parquet\n          \n          [default: SNAPPY]\n\n  -w, --writer-version <WRITER_VERSION>\n          writer version\n\n  -m, --max-row-group-size <MAX_ROW_GROUP_SIZE>\n          max row group size\n\n      --enable-bloom-filter <ENABLE_BLOOM_FILTER>\n          whether to enable bloom filter writing\n          \n          [possible values: true, false]\n\n      --help\n          display usage help\n\n  -V, --version\n          Print version\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Various commands for running different types of tests in the project.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo test\ncargo test -p arrow\ncargo test -p parquet\ncargo test -p arrow --all-features\ncargo test --doc\n```\n\n----------------------------------------\n\nTITLE: Installing Archery integration tools\nDESCRIPTION: Commands to install the necessary tools for running integration tests using Archery.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-integration-testing/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd arrow\npip install -e dev/archery[integration]\n```\n\n----------------------------------------\n\nTITLE: Listing Available CPU Targets and Features\nDESCRIPTION: Shell commands to list available target CPUs and features for Rust compiler optimization.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ rustc --print target-cpus\n$ rustc --print target-features\n```\n\n----------------------------------------\n\nTITLE: Running Clippy Checks\nDESCRIPTION: Commands for running Clippy lints across the workspace with all features enabled.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo clippy --workspace --all-targets --all-features -- -D warnings\n```\n\n----------------------------------------\n\nTITLE: Building C++ integration test binaries\nDESCRIPTION: Commands to build the C++ integration test binaries using CMake and Ninja.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-integration-testing/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# build cpp binaries\ncd arrow/cpp\nmkdir build\ncd  build\ncmake  -DARROW_BUILD_INTEGRATION=ON -DARROW_FLIGHT=ON --preset ninja-debug-minimal ..\nninja\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks\nDESCRIPTION: Commands for running various benchmarks and comparing against baselines.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncargo bench\ncargo bench -p arrow\ncargo bench -p arrow-cast --bench parse_time\ngit checkout main\ncargo bench --bench parse_time -- --save-baseline main\ngit checkout feature\ncargo bench --bench parse_time -- --baseline main\n```\n\n----------------------------------------\n\nTITLE: Checking out Arrow code and linking Rust source\nDESCRIPTION: Commands to clone the Apache Arrow repository and link the Rust source code.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-integration-testing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# check out arrow\ngit clone git@github.com:apache/arrow.git\n# link rust source code into arrow\nln -s <path_to_arrow_rs> arrow/rust\n```\n\n----------------------------------------\n\nTITLE: Building Rust integration test binaries\nDESCRIPTION: Command to build all Rust integration test binaries using Cargo.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-integration-testing/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# build rust:\ncd ../arrow-rs\ncargo build --all\n```\n\n----------------------------------------\n\nTITLE: Demonstrating API Deprecation in Rust with Arrow\nDESCRIPTION: Shows the recommended way to mark APIs as deprecated in the arrow-rs codebase using the #[deprecated] attribute with version info and migration notes.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[deprecated(since = \"51.0.0\", note = \"Use `date_part` instead\")]\n```\n\n----------------------------------------\n\nTITLE: Code Formatting Commands\nDESCRIPTION: Commands for checking code formatting using rustfmt, including special handling for parquet files.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo +stable fmt --all -- --check\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo fmt -p parquet -- --check --config skip_children=true `find ./parquet -name \"*.rs\" \\! -name format.rs`\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Submodules\nDESCRIPTION: Commands for setting up test data by initializing and updating git submodules.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Installing Arrow Flight SQL CLI Client\nDESCRIPTION: Command to install the Arrow Flight SQL command line interface client with specific feature flags.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-flight/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cargo install --features=cli,flight-sql-experimental,tls --bin=flight_sql_client --path=. --locked\n```\n\n----------------------------------------\n\nTITLE: Setting Test Data Environment Variables\nDESCRIPTION: Commands to configure environment variables for test data locations.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport PARQUET_TEST_DATA=$(cd ./parquet-testing/data; pwd)\nexport ARROW_TEST_DATA=$(cd ./testing/data; pwd)\n```\n\n----------------------------------------\n\nTITLE: Running individual integration test scenarios\nDESCRIPTION: Commands to run specific integration test scenarios, such as a C++ server and Rust client for Flight tests.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-integration-testing/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Run cpp server\n$ arrow/cpp/build/debug/flight-test-integration-server -port 49153\n\n# run rust client (you can see file names if you run archery --debug\n$ arrow/rust/target/debug/flight-test-integration-client --host localhost --port=49153 --path /tmp/generated_dictionary_unsigned.json\n```\n\n----------------------------------------\n\nTITLE: Running Archery integration tests\nDESCRIPTION: Commands to run integration tests using Archery, including variations with golden files and multiple implementations.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-integration-testing/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\narchery integration --with-cpp=true --with-rust=true\n```\n\nLANGUAGE: shell\nCODE:\n```\narchery integration --with-cpp=true --with-rust=true --gold-dirs=/path/to/arrow/testing/data/arrow-ipc-stream/integration/0.14.1 --gold-dirs=/path/to/arrow/testing/data/arrow-ipc-stream/integration/0.17.1\n```\n\nLANGUAGE: shell\nCODE:\n```\narchery integration --run-flight --with-cpp=1 --with-csharp=1 --with-java=1 --with-js=1 --with-go=1 --gold-dirs=/arrow/testing/data/arrow-ipc-stream/integration/0.14.1 --gold-dirs=/arrow/testing/data/arrow-ipc-stream/integration/0.17.1 --gold-dirs=/arrow/testing/data/arrow-ipc-stream/integration/1.0.0-bigendian --gold-dirs=/arrow/testing/data/arrow-ipc-stream/integration/1.0.0-littleendian --gold-dirs=/arrow/testing/data/arrow-ipc-stream/integration/2.0.0-compression --gold-dirs=/arrow/testing/data/arrow-ipc-stream/integration/4.0.0-shareddict\n```\n\n----------------------------------------\n\nTITLE: Unsafe Code Documentation Example in Rust\nDESCRIPTION: Example showing the required documentation format for unsafe code blocks, including justification for using unsafe and explanation of soundness guarantees.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// JUSTIFICATION\n//  Benefit\n//      Describe the benefit of using unsafe. E.g.\n//      \"30% performance degradation if the safe counterpart is used, see bench X.\"\n//  Soundness\n//      Describe why the code remains sound (according to the definition of rust's unsafe code guidelines). E.g.\n//      \"We bounded check these values at initialization and the array is immutable.\"\nlet ... = unsafe { ... };\n```\n\n----------------------------------------\n\nTITLE: Verifying Release Candidate in Shell\nDESCRIPTION: This snippet shows how to use a custom script to verify a release candidate. It takes the version and release candidate number as parameters.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/dev/release/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./dev/release/verify-release-candidate.sh 4.1.0 2\n```\n\n----------------------------------------\n\nTITLE: Generating IPC Flatbuffer Code for Arrow-RS\nDESCRIPTION: Command to regenerate the IPC flatbuffer code using the regen.sh script. The script compiles flatbuffer definitions using flatc (v1.12.0+) and performs post-processing modifications including type__ replacement, namespace removal, and include additions.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-ipc/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./regen.sh\n```\n\n----------------------------------------\n\nTITLE: Generating prost/tonic code for Flight protocol in Rust\nDESCRIPTION: This bash command runs a script to generate the prost/tonic code for the Flight protocol implementation. It invokes a Rust binary located in the 'gen' directory and requires a valid installation of protoc.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-flight/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./regen.sh\n```\n\n----------------------------------------\n\nTITLE: Accessing Flight SQL CLI Help\nDESCRIPTION: Command to display help documentation for the Flight SQL command line interface.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-flight/README.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ flight_sql_client help\n```\n\n----------------------------------------\n\nTITLE: Building Apache Arrow Rust with SSE4.2 Instructions\nDESCRIPTION: This command builds the Apache Arrow Rust project in release mode with SSE4.2 instructions enabled. It uses the RUSTFLAGS environment variable to set the target feature.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/parquet/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nRUSTFLAGS=\"-C target-feature=+sse4.2\" cargo build --release\n```\n\n----------------------------------------\n\nTITLE: Unsound Code Documentation Example in Rust\nDESCRIPTION: Example showing how to document existing unsafe code that is not sound and references a JIRA issue for tracking the problem.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n//  Soundness\n//      This is not sound because .... see https://issues.apache.org/jira/browse/ARROW-nnnnn\n```\n\n----------------------------------------\n\nTITLE: Publishing Rust Arrow Crates to crates.io in Shell\nDESCRIPTION: This snippet shows the sequence of commands to publish the various Rust Arrow Crates to crates.io. It uses cargo publish for each crate in the correct order.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/dev/release/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n(cd arrow-buffer && cargo publish)\n(cd arrow-schema && cargo publish)\n(cd arrow-data && cargo publish)\n(cd arrow-array && cargo publish)\n(cd arrow-select && cargo publish)\n(cd arrow-cast && cargo publish)\n(cd arrow-ipc && cargo publish)\n(cd arrow-csv && cargo publish)\n(cd arrow-json && cargo publish)\n(cd arrow-avro && cargo publish)\n(cd arrow-ord && cargo publish)\n(cd arrow-arith && cargo publish)\n(cd arrow-string && cargo publish)\n(cd arrow-row && cargo publish)\n(cd arrow && cargo publish)\n(cd arrow-flight && cargo publish)\n(cd parquet && cargo publish)\n(cd parquet_derive && cargo publish)\n(cd arrow-integration-test && cargo publish)\n```\n\n----------------------------------------\n\nTITLE: Preparing CHANGELOG and Version Update in Bash\nDESCRIPTION: This snippet demonstrates how to update version numbers, create a changelog, and commit changes for a new release. It uses sed for version updates and a custom script for changelog generation.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/dev/release/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\ngit pull\ngit checkout -b <RELEASE_BRANCH>\n\n# Update versions\nsed -i '' -e 's/14.0.0/39.0.0/g' `find . -name 'Cargo.toml' -or -name '*.md' | grep -v CHANGELOG.md | grep -v README.md`\ngit commit -a -m 'Update version'\n\n# ensure your github token is available\nexport ARROW_GITHUB_API_TOKEN=<TOKEN>\n\n# create the changelog\n./dev/release/update_change_log.sh\n# commit the intial changes\ngit commit -a -m 'Create changelog'\n\n# run automated script to copy labels to issues based on referenced PRs\npython dev/release/label_issues.py\n\n# review change log / edit issues and labels if needed, rerun, repeat as necessary\nCHANGELOG_GITHUB_TOKEN=<TOKEN> ./dev/release/update_change_log.sh\n\n# Commit the changes\ngit commit -a -m 'Update changelog'\n\ngit push\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Ignore Patterns for Apache Arrow Rust\nDESCRIPTION: Defines file and directory patterns that Git should ignore, including virtual environments, test data, build artifacts, and auto-generated files specific to the Apache Arrow Rust implementation.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/dev/release/rat_exclude_files.txt#2025-04-22_snippet_0\n\nLANGUAGE: gitignore\nCODE:\n```\nvenv/*\ntesting/*\ntarget/*\ndev/release/rat_exclude_files.txt\narrow/test/data/*\narrow-csv/test/data/*\narrow-json/test/data/*\narrow/test/dependency/*\narrow-integration-test/data/*\nparquet_derive/test/dependency/*\n.gitattributes\n**.gitignore\n.gitmodules\nCargo.lock\nfiltered_rat.txt\nrat.txt\n# auto-generated\narrow-flight/src/arrow.flight.protocol.rs\narrow-flight/src/sql/arrow.flight.protocol.sql.rs\n.github/*\nparquet/src/bin/parquet-fromcsv-help.txt\narrow-flight/examples/data/*\n```\n\n----------------------------------------\n\nTITLE: Setting LD_LIBRARY_PATH for Apache Arrow Rust Binaries\nDESCRIPTION: This command sets the LD_LIBRARY_PATH environment variable to include the Rust system library path. It's used to resolve 'Library not loaded' errors when running the project's binaries.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/parquet/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(rustc --print sysroot)/lib\n```\n\n----------------------------------------\n\nTITLE: Listing CSV Calculation Example in Markdown\nDESCRIPTION: This snippet lists an example file 'csv_calculation.rs' that demonstrates performing a simple calculation using the CSV reader in Apache Arrow Rust.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-csv/examples/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [`csv_calculation.rs`](csv_calculation.rs): performs a simple calculation using the CSV reader\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Pre-commit Hook\nDESCRIPTION: Commands for checking and setting up git pre-commit hooks for automated checking.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nls -l .git/hooks/pre-commit\n```\n\nLANGUAGE: bash\nCODE:\n```\nln -s  ../../pre-commit.sh .git/hooks/pre-commit\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit commit --no-verify -m \"... commit message ...\"\n```\n\n----------------------------------------\n\nTITLE: Listing Communication Channels for Apache Arrow Rust Community\nDESCRIPTION: This snippet enumerates the various communication channels available for the Apache Arrow Rust community, including mailing lists, Slack, GitHub Discussions, and Discord.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. the `dev@arrow.apache.org` mailing list\n2. the [GitHub Discussions][discussions]\n3. the [Discord channel](https://discord.gg/YAb2TdazKQ)\n```\n\n----------------------------------------\n\nTITLE: Creating Git Tag for Release in Shell\nDESCRIPTION: This snippet shows how to create and push a git tag for the release. It uses the version number as the tag name and pushes it to the Apache remote.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/dev/release/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch apache\ngit tag <version> apache/main\n# push tag to apache\ngit push apache <version>\n```\n\n----------------------------------------\n\nTITLE: Creating Release Candidate Tarball in Shell\nDESCRIPTION: This snippet demonstrates how to create a release candidate tarball using a custom script. It takes the version and release candidate number as parameters.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/dev/release/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./dev/release/create-tarball.sh 4.1.0 2\n```\n\n----------------------------------------\n\nTITLE: Releasing Approved Tarball in Shell\nDESCRIPTION: This snippet demonstrates how to move an approved release candidate tarball to the official release location using a custom script.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/dev/release/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./dev/release/release-tarball.sh 4.1.0 2\n```\n\n----------------------------------------\n\nTITLE: Updating Python Package Requirements for Apache Arrow-rs\nDESCRIPTION: This code snippet provides instructions for updating the requirements file using pip-compile. It specifies the Python version and the command to run for generating the updated requirements with hashes.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/parquet/pytest/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# This file is autogenerated by pip-compile with python 3.10\n# To update, run:\n#\n#    pip-compile --generate-hashes --resolver=backtracking\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Hashes in Python Dependencies\nDESCRIPTION: This snippet demonstrates how to specify exact package versions using SHA256 hash values in a Python dependencies file. It includes two different hash values for the same package, likely to support multiple platforms or build variants.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/parquet/pytest/requirements.txt#2025-04-22_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n--hash=sha256:69b1a937c3a517342112fb4c6df7e72fc39a38e7891a5730ed4985b5214b5475 \\\n--hash=sha256:b0abd7c89e8fb96f98db18d86106ff1d90ab692004eb746cf6eda2682f91b3cb\n# via black\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the boilerplate notice that should be included in source files to apply the Apache License 2.0, containing placeholders for copyright year and owner information.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-integration-test/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice text to be included in files when applying the Apache License 2.0 to a project. It includes placeholders for copyright year and owner information, followed by the standard license terms reference.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-select/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Changelog Title in Markdown\nDESCRIPTION: This code snippet defines the title of the changelog document using Markdown syntax.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n# Changelog\n```\n\n----------------------------------------\n\nTITLE: Apache 2.0 License Header in Markdown\nDESCRIPTION: This code snippet contains the Apache 2.0 license header as a Markdown comment. It specifies the terms under which the Apache Software Foundation licenses the file.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<!---\n  Licensed to the Apache Software Foundation (ASF) under one\n  or more contributor license agreements.  See the NOTICE file\n  distributed with this work for additional information\n  regarding copyright ownership.  The ASF licenses this file\n  to you under the Apache License, Version 2.0 (the\n  \"License\"); you may not use this file except in compliance\n  with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing,\n  software distributed under the License is distributed on an\n  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  KIND, either express or implied.  See the License for the\n  specific language governing permissions and limitations\n  under the License.\n-->\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard boilerplate notice for applying the Apache License 2.0 to a software project. The notice needs to be customized with the copyright year and owner name, and should be included in the appropriate comment syntax for the file format.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Applying Apache 2.0 License Boilerplate Notice\nDESCRIPTION: Standard boilerplate notice text for applying the Apache 2.0 license to a project. The template includes placeholders for year and copyright owner information that should be replaced with actual values.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard copyright and license notice template to be included in project files. The template includes placeholders for year and copyright owner information that should be replaced with actual project details.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-buffer/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A boilerplate copyright notice template for applying the Apache License 2.0 to a software project. Developers should replace the placeholder fields with their own copyright information and include this notice in their software files.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-data/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License Boilerplate Notice Template\nDESCRIPTION: Standard copyright and license notice template for applying Apache License 2.0 to software projects. Includes placeholders for year and copyright owner information.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-row/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard boilerplate notice to be included in source files when applying the Apache License 2.0. The notice includes placeholders for copyright year and owner information, along with standard license text and a link to the full license.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-ipc/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard copyright and license notice template to be included in project files. The template includes placeholders for year and copyright owner information.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-arith/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard copyright and license notice template to be included in project files. The [yyyy] and [name of copyright owner] placeholders should be replaced with actual values.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/parquet/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate text to be included in files to apply the Apache License 2.0. Contains placeholders for copyright year and owner information, along with standard license terms and reference to the full license.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/arrow-csv/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Linking to Apache Software Foundation Code of Conduct in Markdown\nDESCRIPTION: This snippet creates a markdown link to the official Code of Conduct for The Apache Software Foundation. It uses a reference-style link for better readability.\nSOURCE: https://github.com/apache/arrow-rs/blob/main/CODE_OF_CONDUCT.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Code of Conduct\n\n- [Code of Conduct for The Apache Software Foundation][1]\n\n[1]: https://www.apache.org/foundation/policies/conduct.html\n```"
  }
]