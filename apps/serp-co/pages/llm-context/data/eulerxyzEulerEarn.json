[
  {
    "owner": "euler-xyz",
    "repo": "euler-earn",
    "content": "TITLE: Implementing Actor Selection with the setup Modifier in Solidity\nDESCRIPTION: Example of how the setup modifier works in handler functions to select the appropriate actor for proxied calls to the protocol based on the caller. The function demonstrates the pattern of declaring success flags and return data, executing the proxied call through the actor, and performing post-call operations.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/test/enigma-dark-invariants/docs/overview.md#2025-04-18_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction redeem(uint256 amount, uint8 i) external setup {\n  /// setup modifier selects the actor to be used in the proxied call\n  /// based on the caller of this handler function\n\n  bool success; /// success flag and returnData for the proxied call are declared at the beginning of the function\n  bytes memory returnData;\n\n  ...\n\n  address target = address(eulerEulerEarnVault);\n\n  _before();\n\n  /// actor.proxy is used to call the protocol, targetting the protocol with the required calldata\n  (success, returnData) = actor.proxy(\n    target,\n    abi.encodeWithSelector(\n      IERC4626.redeem.selector,\n      shares,\n      receiver,\n      address(actor)\n    )\n  );\n\n  if (success) { /// success flag is checked to ensure the call was successful in order to make further checks\n    _after();\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post-Condition Checks in Hook System for Solidity Tests\nDESCRIPTION: The _after and _checkPostConditions functions that handle post-execution state updates and run invariant checks. This ensures that various global postconditions related to base state, interest calculations, and strategy operations are verified after each handler operation.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/test/enigma-dark-invariants/docs/overview.md#2025-04-18_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _after() internal {\n  _defaultHooksAfter();\n\n  // POST-CONDITIONS\n  _checkPostConditions();\n\n  // RESET\n  targetStrategy = address(0);\n}\n\n/// @notice Postconditions for the handlers\nfunction _checkPostConditions() internal {\n  // BASE\n  assert_GPOST_BASE_A();\n  assert_GPOST_BASE_B();\n  assert_GPOST_BASE_C();\n  // INTEREST\n  assert_GPOST_INTEREST_A();\n  assert_GPOST_INTEREST_B();\n  // STRATEGY\n  assert_GPOST_STRATEGIES_A();\n  assert_GPOST_STRATEGIES_H();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Deposit Function in a Handler Contract (Solidity)\nDESCRIPTION: Example implementation of a deposit function in a handler contract that uses actor proxying for permissionless actions and includes proper hooks for state validation.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/test/enigma-dark-invariants/docs/internal-docs.md#2025-04-18_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deposit(\n  uint256 assets,\n  uint8 i\n) external setup {\n  bool success; /// <--- Variables to store the success of the call and return data\n  bytes memory returnData;\n\n  address receiver = _getRandomActor(i); /// <--- Random receiver actor selection\n\n  _before(); /// <--- Before hook\n  (success, returnData) = actor.proxy(target, /// <--- Proxied call to the protocol\n    abi.encodeWithSelector(\n      IERC4626.deposit.selector,\n      assets,\n      receiver\n    ));\n\n  if (success) {\n    _after(); /// <--- After hook on success\n    ...\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Echidna Wrapper Function for Asset Invariants in Solidity\nDESCRIPTION: The echidna_INV_ASSETS_INVARIANTS function that wraps multiple asset-related invariant checks, including looping through all strategy tokens to calculate their sum for verification.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/test/enigma-dark-invariants/docs/internal-docs.md#2025-04-18_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction echidna_INV_ASSETS_INVARIANTS() public returns (bool) {\n  assert_INV_ASSETS_A();\n  assert_INV_ASSETS_D();\n\n  uint256 sumStrategiesAllocated;\n  for (uint256 i; i < strategies.length; i++) { /// <--- Looping through all strategies tokens,\n    IEulerEarn.Strategy memory strategy = eulerEulerEarnVault.getStrategy(strategies[i]);\n    if (strategy.status == IEulerEarn.StrategyStatus.Active) {\n      sumStrategiesAllocated += eulerEulerEarnVault.getStrategy(strategies[i]).allocated;\n    }\n  }\n\n  assert_INV_ASSETS_B(sumStrategiesAllocated);\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Invariant Asset Checks in Solidity\nDESCRIPTION: Implementation of the BASE_INVARIANT_A that verifies totalAssetsDeposited + interestLeft >= totalAllocated. This function is part of the BaseInvariants contract.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/test/enigma-dark-invariants/docs/internal-docs.md#2025-04-18_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assert_INV_ASSETS_A() internal {\n  (,, uint168 interestLeft) = eulerEulerEarnVault.getEulerEarnSavingRate();\n\n  uint256 totalAssetsDeposited = eulerEulerEarnVault.totalAssetsDeposited();\n\n  if (eulerEulerEarnVault.totalAssetsAllocatable() - totalAssetsDeposited - interestLeft == 0) {\n    assertGe(totalAssetsDeposited + interestLeft, eulerEulerEarnVault.totalAllocated(), INV_ASSETS_A);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Global Postconditions in the _after Hook\nDESCRIPTION: Partial implementation of the _checkPostConditions function that executes global postconditions (GPOSTs) after each test sequence.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/test/enigma-dark-invariants/docs/internal-docs.md#2025-04-18_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _checkPostConditions() internal {\n  // Implement post conditions here\n  ...\n\n  // BASE\n  assert_GPOST_BASE_A(); /// <--- Global postcondition execution\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Handler-Specific Postconditions for Deposits\nDESCRIPTION: Partial implementation of the deposit handler function that checks HSPOST_USER_A to verify the amount is credited to the cash reserve after a successful deposit.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/test/enigma-dark-invariants/docs/internal-docs.md#2025-04-18_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deposit(uint8 i) external setup {\n  bool success;\n  bytes memory returnData;\n\n  ... /// <--- variable caching, actor-call, etc. summarized for brevity\n\n  if (success) {\n    _after();\n\n    // POST-CONDITIONS\n    /// @dev HSPOST_USER_A\n    assertEq(defaultVarsBefore.balance + assets, defaultVarsAfter.balance, HSPOST_USER_A);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Postconditions for Harvest Timestamp in Solidity\nDESCRIPTION: Implementation of GPOST_BASE_A which verifies that lastHarvestTimestamp increases monotonically across test sequences.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/test/enigma-dark-invariants/docs/internal-docs.md#2025-04-18_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction assert_GPOST_BASE_A() internal {\n  assertGe(defaultVarsAfter.lastHarvestTimestamp, defaultVarsBefore.lastHarvestTimestamp, GPOST_BASE_A);\n}\n```\n\n----------------------------------------\n\nTITLE: DefaultVars Struct for Protocol State Caching in Solidity\nDESCRIPTION: The DefaultVars struct used to cache protocol and user values before and after function calls in the Hooks system. It captures various aspects of the vault's state including accounting, interest calculations, and strategy data.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/test/enigma-dark-invariants/docs/overview.md#2025-04-18_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n  // Vault Accounting\n  uint256 totalSupply;\n  uint256 totalAssets;\n  uint256 totalAssetsAllocatable;\n  uint256 totalAssetsDeposited;\n  uint256 totalAllocated;\n  // External Accounting\n  uint256 balance;\n  uint256 exchangeRate;\n  uint256 toGulp;\n  // Interest\n  uint256 lastHarvestTimestamp;\n  uint40 lastInterestUpdate;\n  uint40 interestSmearingEnd;\n  uint168 interestLeft;\n  uint256 interestAccrued;\n  // Strategies data\n  mapping(address => Strategy) strategies;\n```\n\n----------------------------------------\n\nTITLE: Strategy Deposit and Allocation Code in Euler Earn\nDESCRIPTION: This code snippet shows how Euler Earn handles strategy deposits during rebalancing. It deposits assets and updates the allocated amount without considering potential strategy deposit fees, which can lead to discrepancies if the strategy charges fees on deposits.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/docs/known-limitations.md#2025-04-18_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nIERC4626(_strategy).deposit(amountToRebalance, address(this));\n$.strategies[_strategy].allocated = (strategyData.allocated + amountToRebalance).toUint120();\n```\n\n----------------------------------------\n\nTITLE: Running Echidna-based Fuzzing for Euler Earn\nDESCRIPTION: Command to run Echidna-based fuzzing tests on the CryticERC4626TestsHarness contract.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/README.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nechidna test/echidna/CryticERC4626TestsHarness.t.sol --contract CryticERC4626TestsHarness --config test/echidna/config/echidna.config.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Symbolic Tests with Halmos for Euler Earn\nDESCRIPTION: Command to run symbolic tests using Halmos on the EulerEarnSymbolicTest contract.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/README.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nhalmos --match-contract EulerEarnSymbolicTest --storage-layout=generic --test-parallel --solver-parallel --solver-timeout-assertion 0\n```\n\n----------------------------------------\n\nTITLE: Running Various Test Suites for Euler Earn\nDESCRIPTION: Commands to run unit tests, fuzz tests, invariant tests, and coverage reports using Forge.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nFOUNDRY_PROFILE=test forge test\n```\n\nLANGUAGE: sh\nCODE:\n```\nFOUNDRY_PROFILE=fuzz forge test\n```\n\nLANGUAGE: sh\nCODE:\n```\nFOUNDRY_PROFILE=invariant forge test\n```\n\nLANGUAGE: sh\nCODE:\n```\nFOUNDRY_PROFILE=coverage forge coverage --report summary\n```\n\n----------------------------------------\n\nTITLE: Running Echidna in Property Mode for Invariant Testing\nDESCRIPTION: Command to run the Echidna testing suite in property mode, which checks protocol invariants.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/test/enigma-dark-invariants/docs/internal-docs.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake echidna\n```\n\n----------------------------------------\n\nTITLE: Running Echidna in Assertion Mode for Postcondition Testing\nDESCRIPTION: Command to run the Echidna testing suite in assertion mode, which checks protocol postconditions.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/test/enigma-dark-invariants/docs/internal-docs.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake echidna-assert\n```\n\n----------------------------------------\n\nTITLE: Running Echidna in Exploration Mode\nDESCRIPTION: Command to run Echidna without checking properties, focusing only on increasing corpus size and coverage.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/test/enigma-dark-invariants/docs/internal-docs.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake echidna-explore\n```\n\n----------------------------------------\n\nTITLE: Foundry Test for Debugging Failed Echidna Property (Solidity)\nDESCRIPTION: Example of using the CryticToFoundry helper to reproduce and debug a failing property identified by Echidna in Foundry.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/test/enigma-dark-invariants/docs/internal-docs.md#2025-04-18_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction test_INV_ASSETS_INVARIANTS_1() public {\n  Tester.donateUnderlying(1 ether, 0);\n  Tester.simulateYieldAccrual(1 ether, 0);\n  Tester.addStrategy(1, 0);\n  Tester.toggleStrategyEmergencyStatus(0);\n  Tester.toggleStrategyEmergencyStatus(0);\n  _delay(2 weeks);\n  console.log(block.timestamp);\n  echidna_INV_ASSETS_INVARIANTS();\n}\n```\n\n----------------------------------------\n\nTITLE: Building Euler Earn Project with Forge\nDESCRIPTION: Command to build the Euler Earn project using Forge, a part of the Foundry toolkit.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nforge build\n```\n\n----------------------------------------\n\nTITLE: Deploy Euler Earn Protocol Script Command\nDESCRIPTION: Command to deploy the Euler Earn protocol using Forge with network configuration and broadcasting\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/script/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge script ./script/DeployProtocol.s.sol --rpc-url network_name --broadcast --slow\n```\n\n----------------------------------------\n\nTITLE: Deploy New Earn Vault Script Command\nDESCRIPTION: Command to deploy a new Euler Earn vault using Forge with network configuration and broadcasting\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/script/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nforge script ./script/DeployEulerEarn.s.sol --rpc-url network_name --broadcast --slow\n```\n\n----------------------------------------\n\nTITLE: Add Strategies Script Command\nDESCRIPTION: Command to add strategies to an existing Earn vault using Forge with network configuration and broadcasting\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/script/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nforge script ./script/AddStrategies.s.sol --rpc-url network_name --broadcast --slow\n```\n\n----------------------------------------\n\nTITLE: Remove Strategies Script Command\nDESCRIPTION: Command to remove strategies from an existing Earn vault using Forge with network configuration and broadcasting\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/script/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nforge script ./script/RemoveStrategies.s.sol --rpc-url network_name --broadcast --slow\n```\n\n----------------------------------------\n\nTITLE: Rebalance Vault Script Command\nDESCRIPTION: Command to rebalance an Earn vault using Forge with network configuration and broadcasting\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/script/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nforge script ./script/Rebalance.s.sol --rpc-url network_name --broadcast --slow\n```\n\n----------------------------------------\n\nTITLE: Adjust Allocation Points Script Command\nDESCRIPTION: Command to adjust strategy allocation points using Forge with network configuration and broadcasting\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/script/README.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nforge script ./script/AdjustAllocationPoints.s.sol --rpc-url network_name --broadcast --slow\n```\n\n----------------------------------------\n\nTITLE: Harvest Script Command\nDESCRIPTION: Command to perform harvesting operations using Forge with network configuration and broadcasting\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/script/README.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nforge script ./script/Harvest.s.sol --rpc-url network_name --broadcast --slow\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Remappings for Solidity Project\nDESCRIPTION: Defines path remappings for dependencies used in the euler-earn project. These remappings allow the compiler to resolve import statements using shorthand notation instead of full paths.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/remappings.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nerc4626-tests/=lib/erc4626-tests/\nethereum-vault-connector/=lib/ethereum-vault-connector/src/\nforge-std/=lib/forge-std/src/\nevk/=lib/euler-vault-kit/src/\nevk-test/=lib/euler-vault-kit/test/\nreward-streams/=lib/reward-streams/src/\nopenzeppelin-contracts/=lib/reward-streams/lib/openzeppelin-contracts/contracts\n@openzeppelin/=lib/openzeppelin-contracts/\n@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\ncrytic-properties/=lib/properties/contracts/\nhalmos-cheatcodes/=lib/halmos-cheatcodes/src/\n```\n\n----------------------------------------\n\nTITLE: Formatting Euler Earn Code with Forge\nDESCRIPTION: Command to format the codebase using Forge's formatting tool.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/README.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nforge fmt\n```\n\n----------------------------------------\n\nTITLE: Generating and Serving Smart Contract Documentation\nDESCRIPTION: Command to generate and serve documentation for Euler Earn smart contracts using Forge.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/README.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nforge doc --serve --port 4000\n```\n\n----------------------------------------\n\nTITLE: Installing Foundry for Euler Earn Development\nDESCRIPTION: Commands to install and start Foundry, a development framework for Ethereum.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L https://foundry.paradigm.xyz | bash\n```\n\nLANGUAGE: sh\nCODE:\n```\nfoundryup\n```\n\n----------------------------------------\n\nTITLE: Cloning the Euler Earn Repository\nDESCRIPTION: Git command to clone the Euler Earn repository from GitHub.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/euler-xyz/euler-earn\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Euler Earn Testing Suite\nDESCRIPTION: Commands to set up the environment by copying the example environment file and installing dependencies using Forge.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/test/enigma-dark-invariants/docs/internal-docs.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncp .env.example .env\n\nforge install\n```\n\n----------------------------------------\n\nTITLE: Environment Setup Command\nDESCRIPTION: Command to load environment variables from .env file into the current shell session\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/script/README.md#2025-04-18_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key for Corpus Repository Access (Shell)\nDESCRIPTION: Shell command for generating an RSA key pair used to securely access the private corpus repository from CI.\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/test/enigma-dark-invariants/docs/internal-docs.md#2025-04-18_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nssh-keygen -t rsa -b 4096 -C \"\n```\n\n----------------------------------------\n\nTITLE: Markdown TOC Structure\nDESCRIPTION: Auto-generated table of contents showing the document structure and navigation\nSOURCE: https://github.com/euler-xyz/euler-earn/blob/main/docs/low-level-spec.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [Specification](#specification)\n    * [Strategy](#strategy)\n        * [Cash reserve](#cash-reserve)\n        * [Allocation points](#allocation-points)\n        * [Strategy cap](#strategy-cap)\n        * [Circuit-breaker](#circuit-breaker)\n        * [Withdrawal queue](#withdrawal-queue)\n    * [Deposits & withdraws](#deposits--withdraws)\n    * [Rebalance](#rebalance)\n    * [Harvest](#harvest)\n        * [Performance fee](#performance-fee)\n    * [Loss deduction & socialisation](#loss-deduction--socialisation)\n    * [Gulping & smearing period](#gulping--smearing-period)\n* [Known limitations and security considerations](#known-limitations-and-security-considerations)\n```"
  }
]