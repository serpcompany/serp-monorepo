[
  {
    "owner": "temporalio",
    "repo": "sdk-typescript",
    "content": "TITLE: Defining Core Data Converter Interfaces in TypeScript\nDESCRIPTION: Defines the interface hierarchy for the data conversion system, including DataConverter, PayloadConverter, FailureConverter, and PayloadCodec. These interfaces establish the contract for converting between user data types and Temporal's wire format.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/docs/data-converter.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DataConverter {\n  payloadConverterPath?: string;\n  failureConverterPath?: string;\n  payloadCodecs?: PayloadCodec[];\n}\n\nexport interface PayloadConverter {\n  toPayload<T>(value: T): Payload | undefined;\n  fromPayload<T>(payload: Payload): T;\n}\n\nexport interface FailureConverter {\n  errorToFailure(err: unknown): ProtoFailure;\n  failureToError(err: ProtoFailure): TemporalFailure;\n}\n\nexport interface PayloadCodec {\n  encode(payloads: Payload[]): Promise<Payload[]>;\n  decode(payloads: Payload[]): Promise<Payload[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Protobuf Serialization in Temporal TypeScript SDK\nDESCRIPTION: An example implementation showing how to set up protobuf serialization in a Temporal TypeScript project. It includes setting up a patched protobuf root, creating a custom payload converter, configuring workers and clients, and implementing a workflow that uses protobuf messages.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/docs/protobuf-libraries.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// json-module.js generated with:\n// pbjs -t json-module -w commonjs -o json-module.js *.proto\n\n// protos/root.js\nconst { patchProtobufRoot } = require('@temporalio/common');\nconst unpatchedRoot = require('./json-module');\nmodule.exports = patchProtobufRoot(unpatchedRoot);\n\n// root.d.ts generated with:\n// pbjs -t static-module *.proto | pbts -o root.d.ts -\n\n// src/payload-converter.ts\nimport { DefaultPayloadConverterWithProtobufs } from '@temporalio/common/lib/protobufs';\nimport root from '../protos/root';\n\nexport const payloadConverter = new DefaultPayloadConverterWithProtobufs({ protobufRoot: root });\n\n// src/worker.ts\nconst worker = Worker.create({ dataConverter: { payloadConverterPath: require.resolve('./payload-converter') }, ... });\n\n// src/client.ts\nimport { foo } from '../protos/root';\nimport { dataConverter } from './payload-converter';\n\nconst client = new WorkflowClient(connection.service, {\n  dataConverter: { payloadConverterPath: require.resolve('./payload-converter') }\n});\n\nawait client.start(protoWorkflow, {\n  args: [foo.bar.ProtoInput.create({ name: 'Proto', age: 1 })], // can't use `new foo.bar.ProtoInput()`\n  taskQueue: 'tutorial',\n  workflowId: 'my-business-id',\n});\n\n// src/workflows.ts\nimport { foo } from '../protos/root';\n\nexport async function protoWorkflow(input: foo.bar.ProtoInput): Promise<foo.bar.ProtoResult> {\n  return foo.bar.ProtoResult.create({ sentence: `Name is ${input.name}` });\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Public Packages in Temporal TypeScript SDK\nDESCRIPTION: This snippet enumerates the public packages that comprise the Temporal TypeScript SDK, including their names and brief descriptions. It covers packages for worker communication, workflow runtime, activity context, client operations, protobuf definitions, shared code, and project initialization.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/docs/sdk-structure.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [`temporalio`](../packages/meta) - Meta package, bundles the common packages for ease of installation.\n- [`@temporalio/worker`](../packages/worker) - Communicates with the Temporal service and runs workflows and activities\n- [`@temporalio/workflow`](../packages/workflow) - Workflow runtime library\n- [`@temporalio/activity`](../packages/activity) - Access to current activity context\n- [`@temporalio/client`](../packages/client) - Communicate with the Temporal service for things like administration and scheduling workflows\n- [`@temporalio/proto`](../packages/proto) - Compiled protobuf definitions\n- [`@temporalio/workflow-common`](../packages/workflow-common) - Code shared between `@temporalio/workflow` and other packages\n- [`@temporalio/common`](../packages/common) - All shared code (re-exports everything in `@temporalio/workflow-common`, and also has code shared between packages other than `@temporalio/workflow`)\n- [`@temporalio/create`](../packages/create-project) - NPM package initializer\n```\n\n----------------------------------------\n\nTITLE: Implementing instanceof Check for Workflow VM Objects in TypeScript\nDESCRIPTION: A workaround function that checks if an object is an instance of a class when the object comes from a different VM context. It traverses the prototype chain to compare constructor string representations since direct instanceof checks don't work across VM boundaries.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/docs/data-converter.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction workflowInclusiveInstanceOf(instance: unknown, type: Function): boolean {\n  let proto = Object.getPrototypeOf(instance);\n  while (proto) {\n    if (proto.constructor?.toString() === type.toString()) return true;\n    proto = Object.getPrototypeOf(proto);\n  }\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Temporal.io TypeScript SDK Individual Packages\nDESCRIPTION: Command to install the recommended individual Temporal.io TypeScript SDK packages instead of the deprecated meta package. This includes the client, worker, workflow, and activity packages.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/packages/meta/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @temporalio/client @temporalio/worker @temporalio/workflow @temporalio/activity\n```\n\n----------------------------------------\n\nTITLE: Configuring WorkflowCoverage for Worker in TypeScript\nDESCRIPTION: This snippet demonstrates how to instantiate WorkflowCoverage and use it to augment Worker options for gathering code coverage data in Workflows.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/packages/nyc-test-coverage/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WorkflowCoverage } from '@temporalio/nyc-test-coverage';\n\nconst workflowCoverage = new WorkflowCoverage();\n\nworker = await Worker.create(workflowCoverage.augmentWorkerOptions({\n  connection: nativeConnection,\n  taskQueue,\n  workflowsPath: require.resolve(\"./workflows\"),\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring WorkflowCoverage for Jest in TypeScript\nDESCRIPTION: This snippet shows how to set up WorkflowCoverage for use with Jest, including augmenting Worker options for gathering code coverage data in Workflows.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/packages/nyc-test-coverage/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WorkflowCoverage } from '@temporalio/nyc-test-coverage';\n\nconst workflowCoverage = new WorkflowCoverage();\n\nworker = await Worker.create(workflowCoverage.augmentWorkerOptions({\n  connection: nativeConnection,\n  taskQueue,\n  workflowsPath: require.resolve(\"./workflows\"),\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring WorkflowCoverage with bundleWorkflowCode in TypeScript\nDESCRIPTION: This snippet illustrates how to use WorkflowCoverage with bundleWorkflowCode, including augmenting bundle options and worker options for pre-bundled Workflows.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/packages/nyc-test-coverage/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst bundle = await bundleWorkflowCode(\n  workflowCoverage.augmentBundleOptions({\n    workflowsPath: require.resolve('./workflows'),\n  })\n);\n\nconst worker = await Worker.create(\n  workflowCoverage.augmentWorkerOptionsWithBundle({\n    connection,\n    taskQueue,\n    workflowBundle: bundle,\n    activities,\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Merging Workflow Coverage into Global Coverage in TypeScript\nDESCRIPTION: This code shows how to merge the collected Workflow code coverage data into the global coverage after tests are completed.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/packages/nyc-test-coverage/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nafter(() => {\n  workflowCoverage.mergeIntoGlobalCoverage();\n});\n```\n\n----------------------------------------\n\nTITLE: Merging Workflow Coverage into Jest Global Coverage in TypeScript\nDESCRIPTION: This code demonstrates how to merge the collected Workflow code coverage data into Jest's global coverage after tests are completed.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/packages/nyc-test-coverage/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nafterAll(() => {\n  workflowCoverage.mergeIntoGlobalCoverage();\n});\n```\n\n----------------------------------------\n\nTITLE: Merging Workflow Coverage with bundleWorkflowCode in TypeScript\nDESCRIPTION: This code demonstrates how to merge Workflow test coverage into the global coverage when using bundleWorkflowCode.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/packages/nyc-test-coverage/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nafter(() => {\n  workflowCoverage.mergeIntoGlobalCoverage();\n});\n```\n\n----------------------------------------\n\nTITLE: Encountering Namespace Issues with Protobuf Root Patching\nDESCRIPTION: An example showing a TypeScript error that occurs when attempting to use namespaces with the patched protobuf root. This demonstrates a limitation of the current implementation where namespaces get lost through the patching process.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/docs/protobuf-libraries.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as generatedRoot from '../protos/json-module';\n\nconst patchProtobufRoot = <T>(x: T): T => x;\nconst root = patchProtobufRoot(generatedRoot);\n\nfunction myWorkflowError(input: root.foo.bar.ProtoActivityInput) {\n  return input.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Temporal TypeScript SDK\nDESCRIPTION: Command to build the Temporal TypeScript SDK project, compiling protobuf definitions, Rust bridge, C++ isolate extension, and TypeScript code.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Temporal TypeScript SDK\nDESCRIPTION: Command to install the necessary dependencies for the Temporal TypeScript SDK project using npm. This may take some time due to Rust dependency compilation.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Submodule for Core SDK in TypeScript SDK\nDESCRIPTION: Command to initialize the Core SDK submodule within the TypeScript SDK repository. This is necessary for setting up the development environment.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Resetting Temporal TypeScript SDK Environment\nDESCRIPTION: Commands to reset the development environment by cleaning Lerna-managed dependencies and reinstalling all packages. This can help resolve build issues.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx lerna clean -y && npm ci\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Temporal TypeScript SDK Docs\nDESCRIPTION: This command starts a local development server for the Temporal TypeScript SDK documentation and opens a browser window. It allows for live updates without server restarts.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/packages/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Verifying Release with Samples\nDESCRIPTION: Tests the newly released SDK packages by updating dependencies in the samples-typescript project, building it, and running tests to ensure compatibility.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/CONTRIBUTING.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncd /path/to/samples-typescript\nlerna exec -- npm update\nnpm run build\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Checking Core Bridge Release Targets\nDESCRIPTION: Verifies that all 5 build targets for the core-bridge package have been successfully created before proceeding with the release process.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nls packages/core-bridge/releases/\n```\n\n----------------------------------------\n\nTITLE: Publishing Temporal TypeScript SDK\nDESCRIPTION: Script to prepare and publish the Temporal TypeScript SDK. It cleans the repository, builds the project, and sets up release artifacts for publishing.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/bash\nset -euo pipefail\n\ngit clean -fdx\nnpm ci\nnpm run build\n\nmkdir -p packages/core-bridge/releases\n\n# in the next command, replace ~/gh/release-sdk-typescript with your dir\nfor f in ~/Downloads/packages-*.zip; do mkdir \"$HOME/Downloads/$(basename -s .zip $f)\"; (cd \"$HOME/Downloads/$(basename -s .zip $f)\" && unzip $f && tar -xvzf @temporalio/core-bridge/core-bridge-*.tgz package/releases/ && cp -r package/releases/* ~/gh/release-sdk-typescript/packages/core-bridge/releases/); done\n```\n\n----------------------------------------\n\nTITLE: Preparing Dependencies for Publishing\nDESCRIPTION: Creates a temporary branch, runs a prepublish script to fix dependencies, commits changes, publishes packages, and returns to the original branch. The prepublish script likely ensures dependencies are set correctly for publication.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -B fix-deps\nnode scripts/prepublish.mjs\ngit commit -am 'Fix dependencies'\nnpx lerna publish from-package # add `--dist-tag next` for pre-release versions\ngit checkout -\n```\n\n----------------------------------------\n\nTITLE: Versioning Temporal SDK Packages with Lerna\nDESCRIPTION: Uses Lerna to bump the patch version of all packages and updates their respective package.json files. The command forces all packages to be updated regardless of what's changed.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpx lerna version patch --force-publish='*' # or major|minor|etc, or leave out to be prompted. either way, you get a confirmation dialog.\n```\n\n----------------------------------------\n\nTITLE: Updating Samples Repository After SDK Release\nDESCRIPTION: Updates the next branch of the samples-typescript repository by rebasing it on the main branch after the SDK release changes have been merged.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/CONTRIBUTING.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout next\ngit rebase origin/main\ngit push\n```\n\n----------------------------------------\n\nTITLE: Removing Next Tags from Published Packages\nDESCRIPTION: Removes the 'next' distribution tag from all packages after a stable release has been published, ensuring users don't get pre-release versions by default.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/CONTRIBUTING.md#2025-04-21_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnpm dist-tag rm @temporalio/client next\nnpm dist-tag rm @temporalio/worker next\nnpm dist-tag rm @temporalio/workflow next\nnpm dist-tag rm @temporalio/activity next\nnpm dist-tag rm @temporalio/testing next\nnpm dist-tag rm @temporalio/common next\nnpm dist-tag rm @temporalio/proto next\nnpm dist-tag rm @temporalio/interceptors-opentelemetry next\nnpm dist-tag rm @temporalio/common/lib/internal-workflow next\nnpm dist-tag rm @temporalio/common/lib/internal-non-workflow next\nnpm dist-tag rm @temporalio/create next\nnpm dist-tag rm temporalio next\n```\n\n----------------------------------------\n\nTITLE: Deprecating Legacy Temporal Package\nDESCRIPTION: Marks the previous major version of the monolithic temporalio package as deprecated and provides guidance to users about switching to the individual scoped packages.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpm deprecate temporalio@^1.0.0 \"Instead of installing temporalio, we recommend directly installing our packages: npm remove temporalio; npm install @temporalio/client @temporalio/worker @temporalio/workflow @temporalio/activity\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up After Publishing\nDESCRIPTION: Removes temporary files and build artifacts that were created during the release process, including downloaded packages and core-bridge release files.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/CONTRIBUTING.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nrm -rf $HOME/Downloads/packages-*\nrm -rf packages/core-bridge/releases/*\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog for Temporal TypeScript SDK\nDESCRIPTION: Command to generate a changelog for a new version of the SDK using git-cliff. The output is copied to the clipboard for easy pasting into CHANGELOG.md.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit-cliff --tag 1.0.1 v1.0.0..HEAD | pbcopy\n```\n\n----------------------------------------\n\nTITLE: Building the Bridge for All Targets\nDESCRIPTION: Command to build the TypeScript bridge for all configured target platforms with appropriate compiler settings.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/docs/building.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nCC_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnu-gcc CC_x86_64_unknown_linux_gnu=x86_64-unknown-linux-gnu-gcc npx lerna run --stream build-rust -- --target all\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install the project's NPM dependencies with foreground scripts enabled.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/docs/building.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nNPM_CONFIG_FOREGROUND_SCRIPTS=true npm ci\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo for Cross-Compilation\nDESCRIPTION: Command to copy the project's Cargo configuration for Windows and Linux build targets.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/docs/building.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncp etc/mac-cargo-config.toml ~/.cargo/config.toml\n```\n\n----------------------------------------\n\nTITLE: Installing Linux x86_64 Toolchain\nDESCRIPTION: Command to install the x86_64-unknown-linux-gnu toolchain for compiling to Linux x86_64.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/docs/building.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nbrew install x86_64-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: Installing Linux arm64 Toolchain\nDESCRIPTION: Command to install the aarch64-unknown-linux-gnu toolchain for compiling to Linux arm64.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/docs/building.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nbrew install aarch64-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: Adding Rust Target for Linux x86_64\nDESCRIPTION: Command to add x86_64-unknown-linux-gnu as a Rust compilation target for Linux on x86_64.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/docs/building.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nrustup target add x86_64-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: Adding Rust Target for Linux arm64\nDESCRIPTION: Command to add aarch64-unknown-linux-gnu as a Rust compilation target for Linux on arm64.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/docs/building.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nrustup target add aarch64-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: Adding Rust Target for Windows\nDESCRIPTION: Command to add x86_64-pc-windows-gnu as a Rust compilation target for Windows.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/docs/building.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nrustup target add x86_64-pc-windows-gnu\n```\n\n----------------------------------------\n\nTITLE: Adding Rust Target for arm64 MacOS\nDESCRIPTION: Command to add aarch64-apple-darwin as a Rust compilation target for Intel Mac users.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/docs/building.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nrustup target add aarch64-apple-darwin\n```\n\n----------------------------------------\n\nTITLE: Adding Rust Target for x86_64 MacOS\nDESCRIPTION: Command to add x86_64-apple-darwin as a Rust compilation target for M1 Mac users.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/docs/building.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrustup target add x86_64-apple-darwin\n```\n\n----------------------------------------\n\nTITLE: Adding Mac Cross-Toolchain Tap\nDESCRIPTION: Command to add the messense/macos-cross-toolchains tap to Homebrew for cross-compilation tools.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/docs/building.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nbrew tap messense/macos-cross-toolchains\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Toolchain on Intel Macs\nDESCRIPTION: Command to install mingw-w64 for Windows compilation on Intel Macs.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/docs/building.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nbrew install mingw-w64\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Toolchain on M1 Macs\nDESCRIPTION: Command to install mingw-w64 for Windows compilation on M1 Macs using Rosetta.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/docs/building.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\narch -x86_64 /usr/local/bin/brew install mingw-w64\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew under Rosetta for M1 Macs\nDESCRIPTION: Command to install Homebrew under Rosetta for M1 Macs, enabling installation of x86_64 packages.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/docs/building.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\narch -x86_64 /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta for M1 Macs\nDESCRIPTION: Command to install Rosetta on M1 Macs, which is required for running x86_64 binaries.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/docs/building.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsoftwareupdate --install-rosetta\n```\n\n----------------------------------------\n\nTITLE: Displaying NPM Package Badge for @temporalio/worker in Markdown\nDESCRIPTION: This code snippet shows how to display an NPM package badge for the @temporalio/worker package using Markdown syntax. It includes a link to the package on npmjs.com and uses shields.io for the badge image.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/packages/worker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![NPM](https://img.shields.io/npm/v/@temporalio/worker?style=for-the-badge)](https://www.npmjs.com/package/@temporalio/worker)\n```\n\n----------------------------------------\n\nTITLE: Displaying NPM Badge for @temporalio/client Package in Markdown\nDESCRIPTION: This code snippet shows how to embed an NPM version badge for the @temporalio/client package using Markdown syntax. It links to the package's NPM page and uses shields.io for badge generation.\nSOURCE: https://github.com/temporalio/sdk-typescript/blob/main/packages/client/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[![NPM](https://img.shields.io/npm/v/@temporalio/client?style=for-the-badge)](https://www.npmjs.com/package/@temporalio/client)\n```"
  }
]