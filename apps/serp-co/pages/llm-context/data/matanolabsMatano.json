[
  {
    "owner": "matanolabs",
    "repo": "matano",
    "content": "TITLE: Matano Directory Structure Example\nDESCRIPTION: This shows the directory structure of an initialized Matano project. It illustrates the organization of detections, log sources, configuration files, and context data within the project. It helps users understand how to structure their Matano projects for managing security resources.\nSOURCE: https://github.com/matanolabs/matano/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n➜  example-matano-dir git:(main) tree\n├── detections\n│   └── aws_root_credentials\n│       ├── detect.py\n│       └── detection.yml\n├── log_sources\n│   ├── cloudtrail\n│   │   ├── log_source.yml\n│   │   └── tables\n│   │       └── default.yml\n│   └── zeek\n│       ├── log_source.yml\n│       └── tables\n│           └── dns.yml\n├── matano.config.yml\n└── matano.context.json\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Data with VRL\nDESCRIPTION: This snippet demonstrates parsing a JSON string within a log event, renaming a field, removing another field, and converting a field to lowercase using VRL in a Matano log source transform. It assumes the input JSON structure as shown.\nSOURCE: https://github.com/matanolabs/matano/blob/main/README.md#_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\ntransform: |\n  . = object!(parse_json!(string!(.json.line)))\n  .source.ip = del(.srcIpAddress)\n  del(.username)\n  .message = downcase(string!(.message))\n\nschema:\n  ecs_field_names:\n    - source.ip\n    - http.status\n```\n\n----------------------------------------\n\nTITLE: Detect Brute Force Logins by IP\nDESCRIPTION: This Python code defines a Matano detection rule to identify brute-force login attempts across configured log sources based on failed authentication events. It also includes functions for generating alert titles and deduplicating alerts by source IP.\nSOURCE: https://github.com/matanolabs/matano/blob/main/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef detect(r):\n    return (\n        \"authentication\" in r.deepget(\"event.category\", [])\n        and r.deepget(\"event.outcome\") == \"failure\"\n    )\n\n\ndef title(r):\n    return f\"Multiple failed logins from {r.deepget('user.full_name')} - {r.deepget('source.ip')}\"\n\n\ndef dedupe(r):\n    return r.deepget(\"source.ip\")\n```\n\n----------------------------------------\n\nTITLE: Configure Brute Force Detection in YAML\nDESCRIPTION: This YAML configuration defines the tables to query for brute-force login attempts (aws_cloudtrail, okta_system, o365_audit), alert severity, threshold, deduplication window, and alert destinations.\nSOURCE: https://github.com/matanolabs/matano/blob/main/README.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntables:\n  - aws_cloudtrail\n  - okta_system\n  - o365_audit\nalert:\n  severity: medium\n  threshold: 5\n  deduplication_window_minutes: 15\n  destinations:\n    - slack_my_team\n```\n\n----------------------------------------\n\nTITLE: Detect Successful Login from New IP\nDESCRIPTION: This Python code defines a Matano detection rule to detect successful logins from previously unseen IPs for a given user, utilizing a remote cache for tracking user-IP associations. It depends on a remote cache service and utilizes the `remotecache` module.\nSOURCE: https://github.com/matanolabs/matano/blob/main/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom detection import remotecache\n\n# a cache of user -> ip[]\nuser_to_ips = remotecache(\"user_ip\")\n\ndef detect(record):\n    if (\n      record.deepget(\"event.action\") == \"ConsoleLogin\" and\n      record.deepget(\"event.outcome\") == \"success\"\n    ):\n        # A unique key on the user name\n        user = record.deepget(\"user.name\")\n\n        existing_ips = user_to_ips[user] or []\n        updated_ips = user_to_ips.add_to_string_set(\n          user,\n          record.deepget(\"source.ip\")\n        )\n\n        # Alert on new IPs\n        new_ips = set(updated_ips) - set(existing_ips)\n        if existing_ips and new_ips:\n            return True\n```\n\n----------------------------------------\n\nTITLE: Summarize Matano Alerts with SQL\nDESCRIPTION: This SQL query summarizes alerts in the `matano_alerts` table for the last week, grouping them by rule name and alert ID. It filters for activated alerts and extracts related IP addresses, users, hosts, and hashes.\nSOURCE: https://github.com/matanolabs/matano/blob/main/README.md#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  matano.alert.id as alert_id,\n  matano.alert.rule.name as rule_name,\n  max(matano.alert.title) as title,\n  count(*) as match_count,\n  min(matano.alert.first_matched_at) as first_matched_at,\n  max(ts) as last_matched_at,\n  array_distinct(flatten(array_agg(related.ip))) as related_ip,\n  array_distinct(flatten(array_agg(related.user))) as related_user,\n  array_distinct(flatten(array_agg(related.hosts))) as related_hosts,\n  array_distinct(flatten(array_agg(related.hash))) as related_hash\nfrom\n  matano_alerts\nwhere\n  matano.alert.first_matched_at > (current_timestamp - interval '7' day)\n  and matano.alert.activated = true\ngroup by\n  matano.alert.rule.name,\n  matano.alert.id\norder by\n  last_matched_at desc\n```\n\n----------------------------------------\n\nTITLE: Detect AWS EC2 Instance Export Failures\nDESCRIPTION: This Python function defines a Matano detection rule to identify failed attempts to export AWS EC2 instances in AWS CloudTrail logs. It checks for specific event actions, providers, and outcomes.\nSOURCE: https://github.com/matanolabs/matano/blob/main/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef detect(record):\n  return (\n    record.deepget(\"event.action\") == \"CreateInstanceExportTask\"\n    and record.deepget(\"event.provider\") == \"ec2.amazonaws.com\"\n    and record.deepget(\"event.outcome\") == \"failure\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Matano Deploy Usage\nDESCRIPTION: Deploys the Matano platform. It allows specifying an AWS profile and a user directory, and enables debugging output.\nSOURCE: https://github.com/matanolabs/matano/blob/main/cli/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ matano deploy [--debug] [-p <value>] [--user-directory <value>]\n```\n\n----------------------------------------\n\nTITLE: Matano Init Usage\nDESCRIPTION: Starts a wizard to initialize and deploy Matano. Allows specifying an AWS profile and enabling debug output.\nSOURCE: https://github.com/matanolabs/matano/blob/main/cli/README.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\n$ matano init [--debug] [-p <value>]\n```\n\n----------------------------------------\n\nTITLE: Installing Matano CLI on macOS\nDESCRIPTION: This code snippet provides instructions to install the Matano CLI on a macOS system. It downloads the installation script, grants execute permissions, and runs the script with sudo privileges. This allows deploying and managing Matano in an AWS environment.\nSOURCE: https://github.com/matanolabs/matano/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -OL https://github.com/matanolabs/matano/releases/download/nightly/matano-macos-x64.sh\nchmod +x matano-macos-x64.sh\nsudo ./matano-macos-x64.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Matano CLI on Linux\nDESCRIPTION: This code snippet provides instructions to install the Matano CLI on a Linux system. It downloads the installation script, grants execute permissions, and runs the script with sudo privileges. This allows deploying and managing Matano in an AWS environment.\nSOURCE: https://github.com/matanolabs/matano/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -OL https://github.com/matanolabs/matano/releases/download/nightly/matano-linux-x64.sh\nchmod +x matano-linux-x64.sh\nsudo ./matano-linux-x64.sh\n```\n\n----------------------------------------\n\nTITLE: Matano Deploy Examples\nDESCRIPTION: Demonstrates how to use the matano deploy command with different profiles and user directories.\nSOURCE: https://github.com/matanolabs/matano/blob/main/cli/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ matano deploy\n\n$ matano deploy --profile prod\n\n$ matano deploy --profile prod --user-directory matano-directory\n```\n\n----------------------------------------\n\nTITLE: Matano Diff Usage\nDESCRIPTION: Shows differences in a Matano deployment. Allows specifying an AWS profile, user directory, and enabling debugging output.\nSOURCE: https://github.com/matanolabs/matano/blob/main/cli/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ matano diff [--debug] [-p <value>] [--user-directory <value>]\n```\n\n----------------------------------------\n\nTITLE: Matano Refresh Context Usage\nDESCRIPTION: Refreshes the Matano context, using provided AWS account, profile, region, and user directory. Allows enabling debug output.\nSOURCE: https://github.com/matanolabs/matano/blob/main/cli/README.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\n$ matano refresh-context [--debug] [-p <value>] [-a <value>] [-r <value>] [--user-directory <value>]\n```\n\n----------------------------------------\n\nTITLE: Matano Info Usage\nDESCRIPTION: Retrieves information about a Matano deployment. It can specify an AWS profile, a user directory, and output format (CSV, JSON, or YAML).\nSOURCE: https://github.com/matanolabs/matano/blob/main/cli/README.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\n$ matano info [--debug] [-p <value>] [--user-directory <value>] [--output csv|json|yaml |  | ]\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Matano Locally - Bash\nDESCRIPTION: These commands build all Matano packages and install the Matano CLI locally. The `make build-all` command compiles all necessary components. The `make local-install` command then installs the CLI, potentially conflicting with a globally installed version from the prebuilt binary.\nSOURCE: https://github.com/matanolabs/matano/blob/main/DEVELOPMENT.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake build-all\nmake local-install\n```\n\n----------------------------------------\n\nTITLE: Matano Diff Examples\nDESCRIPTION: Provides examples of how to use the matano diff command with different profiles and user directories.\nSOURCE: https://github.com/matanolabs/matano/blob/main/cli/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ matano diff\n\n$ matano diff --profile prod\n\n$ matano diff --profile prod --user-directory matano-directory\n```\n\n----------------------------------------\n\nTITLE: Matano Refresh Context Examples\nDESCRIPTION: Demonstrates how to use the matano refresh-context command with different profiles, regions, accounts, and user directories.\nSOURCE: https://github.com/matanolabs/matano/blob/main/cli/README.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\n$ matano refresh-context\n\n$ matano refresh-context --profile prod\n\n$ matano refresh-context --profile prod --user-directory my-matano-directory\n\n$ matano refresh-context --profile prod --region eu-central-1 --account 12345678901\n```\n\n----------------------------------------\n\nTITLE: Matano Info Examples\nDESCRIPTION: Demonstrates how to use the matano info command with different profiles and output formats.\nSOURCE: https://github.com/matanolabs/matano/blob/main/cli/README.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\n$ matano info\n\n$ matano info --profile prod\n\n$ matano info --output json\n```\n\n----------------------------------------\n\nTITLE: Matano Init Examples\nDESCRIPTION: Demonstrates how to use the matano init command with a specific profile.\nSOURCE: https://github.com/matanolabs/matano/blob/main/cli/README.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\n$ matano init\n\n$ matano init --profile prod\n```\n\n----------------------------------------\n\nTITLE: Matano Autocomplete Usage\nDESCRIPTION: Displays autocomplete installation instructions for the Matano CLI. It allows specifying the shell type and refreshing the cache. Requires the `@oclif/plugin-autocomplete` dependency.\nSOURCE: https://github.com/matanolabs/matano/blob/main/cli/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ matano autocomplete [SHELL] [-r]\n```\n\n----------------------------------------\n\nTITLE: Matano Autocomplete Examples\nDESCRIPTION: Provides examples of how to use the matano autocomplete command with different shells and the refresh-cache option.\nSOURCE: https://github.com/matanolabs/matano/blob/main/cli/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ matano autocomplete\n\n$ matano autocomplete bash\n\n$ matano autocomplete zsh\n\n$ matano autocomplete --refresh-cache\n```\n\n----------------------------------------\n\nTITLE: Matano Help Usage\nDESCRIPTION: Displays help information for Matano commands. It takes an optional command name as an argument and supports including nested commands.\nSOURCE: https://github.com/matanolabs/matano/blob/main/cli/README.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n$ matano help [COMMAND] [-n]\n```\n\n----------------------------------------\n\nTITLE: Matano Disable Metadata Reporting Usage\nDESCRIPTION: Disables metadata reporting in Matano. Allows enabling debugging output.\nSOURCE: https://github.com/matanolabs/matano/blob/main/cli/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ matano disable-metadata-reporting [--debug]\n```\n\n----------------------------------------\n\nTITLE: Matano Disable Metadata Reporting Example\nDESCRIPTION: Example usage for disabling metadata reporting with the Matano CLI.\nSOURCE: https://github.com/matanolabs/matano/blob/main/cli/README.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n$ matano disable-metadata-reporting\n```\n\n----------------------------------------\n\nTITLE: Matano Generate Matano Dir Usage\nDESCRIPTION: Generates a sample Matano directory. Takes the directory name as an argument.\nSOURCE: https://github.com/matanolabs/matano/blob/main/cli/README.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n$ matano generate:matano-dir [DIRECTORY-NAME]\n```\n\n----------------------------------------\n\nTITLE: Matano Generate Matano Dir Example\nDESCRIPTION: Example usage for generating the Matano directory.\nSOURCE: https://github.com/matanolabs/matano/blob/main/cli/README.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n$ matano generate:matano-dir\n```\n\n----------------------------------------\n\nTITLE: Setting MATANO_REPO_DIR environment variable - Bash\nDESCRIPTION: This snippet sets the `MATANO_REPO_DIR` environment variable to the root directory of the Matano source repository. This is necessary when using NVM (Node Version Manager) for Node.js installations. It ensures that the Matano CLI can correctly resolve dependencies and paths within the project.\nSOURCE: https://github.com/matanolabs/matano/blob/main/DEVELOPMENT.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MATANO_REPO_DIR=\"/home/myname/workplace/matano\"\n```\n\n----------------------------------------\n\nTITLE: Building CLI - Bash\nDESCRIPTION: This command builds the Matano command-line interface (CLI). The CLI is written in NodeJS and distributed as a single binary using `vercel/pkg`. The build process is defined in `scripts/packaging`.\nSOURCE: https://github.com/matanolabs/matano/blob/main/DEVELOPMENT.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake build-cli\n```\n\n----------------------------------------\n\nTITLE: Building Python Components - Bash\nDESCRIPTION: This command builds the Python components of Matano. It likely compiles or packages the Python code found in `lib/python`.\nSOURCE: https://github.com/matanolabs/matano/blob/main/DEVELOPMENT.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake build-python\n```\n\n----------------------------------------\n\nTITLE: Building Rust Components - Bash\nDESCRIPTION: This command builds the Rust components of Matano.  It compiles the Rust code located in the `lib/rust` directory.\nSOURCE: https://github.com/matanolabs/matano/blob/main/DEVELOPMENT.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake build-rust\n```\n\n----------------------------------------\n\nTITLE: Building Infrastructure - Bash\nDESCRIPTION: This command builds the Matano infrastructure components. This likely involves using a tool like CDK (Cloud Development Kit) to generate cloud infrastructure code.\nSOURCE: https://github.com/matanolabs/matano/blob/main/DEVELOPMENT.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake build-infra\n```\n\n----------------------------------------\n\nTITLE: Building JVM/Kotlin Components - Bash\nDESCRIPTION: This command builds the JVM/Kotlin components of Matano, typically located in the `lib/java` directory. It compiles the Kotlin code and packages it into JAR files.\nSOURCE: https://github.com/matanolabs/matano/blob/main/DEVELOPMENT.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake build-jvm\n```\n\n----------------------------------------\n\nTITLE: Matano PGP Public Key\nDESCRIPTION: This is the PGP public key for the Matano project. It is used to encrypt sensitive information when reporting security vulnerabilities to security@matano.dev.\nSOURCE: https://github.com/matanolabs/matano/blob/main/SECURITY.md#_snippet_0\n\nLANGUAGE: PGP\nCODE:\n```\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\n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\nFXm9MedEAPNT2hc9\n=BE9X\n-----END PGP PUBLIC KEY BLOCK-----\n```"
  }
]