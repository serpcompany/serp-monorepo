[
  {
    "owner": "charleskorn",
    "repo": "kaml",
    "content": "TITLE: Implementing Polymorphism with kaml (Kotlin/YAML)\nDESCRIPTION: Demonstrates how kaml supports kotlinx.serialization's polymorphism for sealed classes. It shows the Kotlin code structure using `@Serializable` and `@SerialName` for sealed class subtypes and provides examples of the resulting YAML output using different polymorphism styles (YAML tags or 'type' property).\nSOURCE: https://github.com/charleskorn/kaml/blob/main/README.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nservers:\n  - !<frontend>\n    hostname: a.mycompany.com\n  - !<backend>\n    database: db-1\n```\n\nLANGUAGE: YAML\nCODE:\n```\nservers:\n  - type: frontend\n    hostname: a.mycompany.com\n  - type: backend\n    database: db-1\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\n@Serializable\nsealed class Server {\n  @SerialName(\"frontend\")\n  @Serializable\n  data class Frontend(val hostname: String) : Server()\n\n  @SerialName(\"backend\")\n  @Serializable\n  data class Backend(val database: String) : Server()\n}\n\n@Serializable\ndata class Config(val servers: List<Server>)\n\nval config = Config(listOf(\n  Frontend(\"a.mycompany.com\"),\n  Backend(\"db-1\")\n))\n\nval result = Yaml.default.encodeToString(Config.serializer(), config)\n\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Serializing Kotlin Object to YAML with kaml (Kotlin)\nDESCRIPTION: Illustrates how to serialize a Kotlin data class instance into a YAML string using the kaml library. The data class requires the `@Serializable` annotation. The example uses the default `Yaml` instance for encoding.\nSOURCE: https://github.com/charleskorn/kaml/blob/main/README.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\n@Serializable\ndata class Team(\n    val leader: String,\n    val members: List<String>\n)\n\nval input = Team(\"Amy\", listOf(\"Bob\", \"Cindy\", \"Dan\"))\n\nval result = Yaml.default.encodeToString(Team.serializer(), input)\n\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML to Kotlin Object with kaml (Kotlin)\nDESCRIPTION: Demonstrates how to parse a YAML string into a Kotlin data class using the kaml library. The data class must be annotated with `@Serializable` from `kotlinx.serialization`. The default `Yaml` instance is used for the decoding operation.\nSOURCE: https://github.com/charleskorn/kaml/blob/main/README.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\n@Serializable\ndata class Team(\n    val leader: String,\n    val members: List<String>\n)\n\nval input = \"\"\"\n        leader: Amy\n        members:\n          - Bob\n          - Cindy\n          - Dan\n    \"\"\".trimIndent()\n\nval result = Yaml.default.decodeFromString(Team.serializer(), input)\n\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Creating Git Tag for Release\nDESCRIPTION: This command creates a signed Git tag with the specified version number.  It's a crucial step in marking a specific commit as a release point. Replace <version> with the actual version number (e.g., v1.2.3).\nSOURCE: https://github.com/charleskorn/kaml/blob/main/RELEASING.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit tag -s <version>\n```\n\n----------------------------------------\n\nTITLE: Adding kaml Dependency in Gradle (Groovy)\nDESCRIPTION: Provides the necessary configuration snippet for a Gradle build script using the Groovy DSL to include the kaml library and the kotlinx.serialization Gradle plugin.\nSOURCE: https://github.com/charleskorn/kaml/blob/main/README.md#_snippet_3\n\nLANGUAGE: Groovy\nCODE:\n```\nplugins {\n    id 'org.jetbrains.kotlin.jvm' version '1.4.20'\n    id 'org.jetbrains.kotlin.plugin.serialization' version '1.4.20'\n}\n\ndependencies {\n  implementation \"com.charleskorn.kaml:kaml:<version number here>\" // Get the latest version number from https://github.com/charleskorn/kaml/releases/latest\n}\n```\n\n----------------------------------------\n\nTITLE: Using YAML Extension Fields with kaml (YAML)\nDESCRIPTION: Explains how kaml handles Docker Compose-style extension fields using YAML anchors and aliases. It shows a YAML structure where common labels are defined using an anchor and then merged into multiple server definitions using an alias and the merge key ('<<').\nSOURCE: https://github.com/charleskorn/kaml/blob/main/README.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nx-common-labels: &common-labels\n  labels:\n    owned-by: myteam@mycompany.com\n    cost-centre: myteam\n\nservers:\n  server-a:\n    <<: *common-labels\n    kind: frontend\n\n  server-b:\n    <<: *common-labels\n    kind: backend\n\n  # server-b and server-c are equivalent\n  server-c:\n    labels:\n      owned-by: myteam@mycompany.com\n      cost-centre: myteam\n    kind: backend\n```\n\n----------------------------------------\n\nTITLE: Adding kaml Dependency in Gradle (Kotlin)\nDESCRIPTION: Provides the necessary configuration snippet for a Gradle build script using the Kotlin DSL to include the kaml library and the kotlinx.serialization Gradle plugin.\nSOURCE: https://github.com/charleskorn/kaml/blob/main/README.md#_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nplugins {\n    kotlin(\"jvm\") version \"1.4.20\"\n    kotlin(\"plugin.serialization\") version \"1.4.20\"\n}\n\ndependencies {\n  implementation(\"com.charleskorn.kaml:kaml:<version number here>\") // Get the latest version number from https://github.com/charleskorn/kaml/releases/latest\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML to YamlNode with kaml (Kotlin)\nDESCRIPTION: Shows how to parse a YAML string directly into a generic `YamlNode` structure instead of a specific data class. This allows navigating the YAML structure programmatically to access elements like maps, lists, and scalar values.\nSOURCE: https://github.com/charleskorn/kaml/blob/main/README.md#_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nval input = \"\"\"\n        leader: Amy\n        members:\n          - Bob\n          - Cindy\n          - Dan\n    \"\"\".trimIndent()\n\nval result = Yaml.default.parseToYamlNode(input)\n\nprintln(\n    result\n        .yamlMap.get<YamlList>(\"members\")!![1]\n        .yamlScalar\n        .content\n)\n```"
  }
]