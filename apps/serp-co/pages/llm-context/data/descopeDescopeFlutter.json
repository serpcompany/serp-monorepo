[
  {
    "owner": "descope",
    "repo": "descope-flutter",
    "content": "TITLE: Initializing Descope SDK in Flutter Application\nDESCRIPTION: Demonstrates how to set up the Descope SDK in a Flutter application using the project ID and optional configuration settings. It also shows how to load any available sessions.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:descope/descope.dart';\n\n// Where your application state is being created\nDescope.setup('<Your-Project-ID>');\n\n// Optionally, you can configure the SDK to your needs\nDescope.setup('<Your-Project-Id>', (config) {\n  // set a custom base URL (needs to be set up in the Descope console)\n  config.baseUrl = 'https://my.app.com';\n  // enable the logger\n  if (kDebugMode) {\n    config.logger = DescopeLogger();\n  }\n});\n\n// Load any available sessions\nawait Descope.sessionManager.loadSession();\n```\n\n----------------------------------------\n\nTITLE: Checking User Session Status on Application Launch\nDESCRIPTION: Shows how to check if there's a valid user session from a previous app launch to determine whether to show the main UI or login screen.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// check if we have a valid session from a previous launch and that it hasn't expired yet\nif (Descope.sessionManager.session?.refreshToken?.isExpired == true) {\n    // Show main UI\n} else {\n    // Show login UI\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing User Sessions in Descope\nDESCRIPTION: Shows how to create a Descope session from authentication response and manage it with the session manager to handle persistence and refreshing.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal authResponse = await Descope.otp.verify(method: DeliverMethod.Email, loginId: 'andy@example.com', code: '123456');\nfinal session = DescopeSession.fromAuthenticationResponse(authResponse);\nDescope.sessionManager.manageSession(session);\n```\n\n----------------------------------------\n\nTITLE: Signing Out User and Revoking Descope Sessions\nDESCRIPTION: Shows how to implement user sign-out by revoking the active session and clearing it from the session manager.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nfinal refreshJwt = Descope.sessionManager.session?.refreshToken.jwt;\nif (refreshJwt != null) {\n  Descope.sessionManager.clearSession();\n  try {\n    Descope.auth.revokeSessions(RevokeType.currentSession, refreshJwt);\n  } catch (e) {\n    // handle errors\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating API Requests with Descope Session\nDESCRIPTION: Demonstrates how to use the active Descope session to authenticate outgoing API requests to the application's backend.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nrequest.setAuthorization(Descope.sessionManager);\n```\n\n----------------------------------------\n\nTITLE: OTP Authentication for User Sign-up in Flutter\nDESCRIPTION: Shows how to implement OTP (one-time password) authentication for user sign-up via email and verify the code to create a session.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// sends an OTP code to the given email address\nawait Descope.otp.signUp(method: DeliveryMethod.email, loginId: 'andy@example.com');\n\n// if the user entered the right code the authentication is successful\nfinal authResponse = await Descope.otp.verify(method: DeliveryMethod.email, loginId: 'andy@example.com', code: code);\n\n// we create a DescopeSession object that represents an authenticated user session\nfinal session = DescopeSession.fromAuthenticationResponse(authResponse);\n\n// the session manager automatically takes care of persisting the session\n// and refreshing it as needed\nDescope.sessionManager.manageSession(session);\n```\n\n----------------------------------------\n\nTITLE: Loading Descope Session on Application Launch\nDESCRIPTION: Demonstrates how to load existing Descope sessions when the application is relaunched to maintain user authentication state.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait Descope.sessionManager.loadSession();\n```\n\n----------------------------------------\n\nTITLE: Initializing Descope in Flutter main() Function\nDESCRIPTION: Shows how to properly initialize Descope in the main() function before runApp() by ensuring widget bindings are initialized first.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  Descope.setup('...');\n  await Descope.sessionManager.loadSession();\n\n  final session = Descope.sessionManager.session;\n  if (session != null) {\n    print('User is logged in: ${session.user}');\n  }\n\n  runApp(\n    ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Descope Authentication Flow in Flutter\nDESCRIPTION: Dart implementation for starting an authentication flow with Descope, configuring both mobile and web options. The code demonstrates how to initialize the flow, handle the authentication response, and manage the resulting session.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nfinal options = DescopeFlowOptions(\n        mobile: DescopeMobileFlowOptions(\n          flowUrl: '<URL_FOR_FLOW_IN_MOBILE_SETUP_#1>',\n          deepLinkUrl: '<URL_FOR_APP_LINK_IN_MOBILE_SETUP_#2>'\n        ),\n        web: DescopeWebFlowOptions(\n          flowId: 'flowId',\n          flowContainerCss: {\n            \"background-color\": \"antiquewhite\",\n            \"width\": \"500px\",\n            \"min-height\": \"300px\",\n            \"margin\": \"auto\",\n            \"position\": \"relative\",\n            \"top\": \"50%\",\n            \"transform\": \"translateY(-50%)\",\n            \"display\": \"flex\",\n            \"flex-direction\": \"column\",\n            \"align-items\": \"center\",\n            \"justify-content\": \"center\",\n            \"box-shadow\": \"0px 0px 10px gray\",\n          },\n        ));\nfinal authResponse = await Descope.flow.start(options);\nfinal session = DescopeSession.fromAuthenticationResponse(authResponse);\nDescope.sessionManager.manageSession(session);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Claims to User JWT during Authentication\nDESCRIPTION: Demonstrates how to request additional custom claims to be added to the user's JWT during the authentication process.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nconst options = SignInOptions(customClaims: {'name': '{{user.name}}'});\nawait Descope.otp.signIn(method: DeliveryMethod.email, loginId: 'desmond_c@mail.com', options: options);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Authorization with Descope Session JWT\nDESCRIPTION: Shows how to implement custom authorization mechanisms using the session JWT directly instead of the extension function.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait Descope.sessionManager.refreshSessionIfNeeded();\nfinal sessionJwt = Descope.sessionManager.session?.sessionJwt;\nif (sessionJwt != null) {\n    request.headers['X-Auth-Token'] = sessionJwt;\n} else {\n    // unauthorized\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Descope Authentication Errors\nDESCRIPTION: Shows how to catch and handle DescopeException errors during authentication operations to provide appropriate user feedback.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  final authResponse = await Descope.otp.verify(method: DeliveryMethod.email, loginId: loginId, code: code);\n  final session = DescopeSession.fromAuthenticationResponse(authResponse);\n  Descope.sessionManager.manageSession(session);\n} on DescopeException catch (e) {\n  switch(e) {\n    case DescopeException.wrongOTPCode:\n    case DescopeException.invalidRequest:\n      showBadCodeAlert();\n      break;\n    case DescopeException.networkError:\n      showNetworkErrorRetry();\n      break;\n    default:\n      showUnexpectedErrorAlert(with: e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth Authentication Implementation in Flutter\nDESCRIPTION: Shows the implementation of OAuth authentication flow using flutter_web_auth, including starting the flow, handling redirect, and exchanging the code for authentication response.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nfinal authUrl = await Descope.oauth.start(provider: OAuthProvider.google, redirectUrl: 'exampleauthschema://my-app.com/handle-oauth');\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal result = await FlutterWebAuth.authenticate(url: authUrl, callbackUrlScheme: 'exampleauthschema');\nfinal code = Uri.parse(result).queryParameters['code'];\nfinal authResponse = await Descope.oauth.exchange(code: code!);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvoid loginWithOAuth() async {\n  AuthenticationResponse response;\n  if (!kIsWeb && Platform.isIOS) {\n    response = await Descope.oauth.native(provider: OAuthProvider.named(\"ios\"));\n  } else if (!kIsWeb && Platform.isAndroid) {\n    response = await Descope.oauth.native(provider: OAuthProvider.named(\"android\"));\n  } else {\n    // regular web OAuth\n  }\n  final session = DescopeSession.fromAuthenticationResponse(response)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: SSO/SAML Authentication in Flutter\nDESCRIPTION: Implementation of SSO/SAML authentication flow including initialization, redirect handling, and code exchange for authentication.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nfinal authUrl = await Descope.sso.start(emailOrTenantId: 'my-tenant-ID', redirectUrl: 'exampleauthschema://my-app.com/handle-saml');\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal result = await FlutterWebAuth.authenticate(url: authUrl, callbackUrlScheme: 'exampleauthschema');\nfinal code = Uri.parse(result).queryParameters['code'];\nfinal authResponse = await Descope.sso.exchange(code: code!);\n```\n\n----------------------------------------\n\nTITLE: Passkey Authentication Implementation\nDESCRIPTION: Shows how to implement Passkey authentication with error handling and session management.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n    showLoading(true);\n    final authResponse = await Descope.passkey.signUpOrIn(loginId: loginId);\n    final session = DescopeSession.fromAuthenticationResponse(authResponse);\n    Descope.sessionManager.manageSession(session);\n    showHomeScreen() \n} on DescopeException catch (e) {\n    if (e == DescopeException.passkeyCancelled) {\n      showLoading(false)\n      print(\"Authentication cancelled\")\n    } else {\n      showError(error)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Password Authentication Implementation\nDESCRIPTION: Shows implementation of traditional password-based authentication including sign-up, password updates, and password reset functionality.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\nfinal authResponse = await Descope.password.signUp(loginId: 'desmond_c@mail.com', password: 'cleartext-password',\n    details: SignUpDetails(name: 'Desmond Copeland'));\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait Descope.password.update(loginId: 'andy@example.com', newPassword: 'newSecurePassword456!', refreshJwt: \"user-refresh-jwt\");\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal authResponse = await Descope.password.replace(loginId: 'andy@example.com', oldPassword: 'SecurePassword123!', newPassword: 'NewSecurePassword456!');\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait Descope.password.sendReset(loginId: 'andy@example.com', redirectUrl: \"exampleauthschema://my-app.com/handle-reset\");\n```\n\n----------------------------------------\n\nTITLE: TOTP Authentication Implementation\nDESCRIPTION: Demonstrates implementation of Time-based One-Time Password (TOTP) authentication including sign-up and verification.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\nfinal totpResponse = await Descope.totp.signUp(loginId: 'desmond@descope.com', details: SignUpDetails(name: 'Desmond Copeland'));\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal authResponse = await Descope.totp.verify(loginId: 'desmond@descope.com', code: '123456');\n```\n\n----------------------------------------\n\nTITLE: Implementing Enchanted Link Authentication in Flutter\nDESCRIPTION: Demonstrates how to implement sign-up using Enchanted Link authentication with optional redirect URL configuration. Includes polling for session after link activation.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nfinal enchantedLinkResponse = await Descope.enchantedLink.signUp(loginId: 'desmond_c@mail.com',\n    details: SignUpDetails(name: 'Desmond Copeland'), redirectUrl: 'https://your-redirect-address.com/verify');\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal authResponse = await Descope.enchantedLink.pollForSession(pendingRef: enchantedLinkResponse.pendingRef);\n```\n\n----------------------------------------\n\nTITLE: Implementing OTP Authentication Sign-Up with Descope in Flutter\nDESCRIPTION: Dart code example for implementing OTP (One-Time Password) authentication signup flow with Descope. This snippet shows how to initiate the signup process via email delivery method and collect user details.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n// Every user must have a loginID. All other user information is optional\nfinal maskedEmail = await Descope.otp.signUp(method: DeliveryMethod.email, loginId: 'desmond_c@mail.com',\n    details: SignUpDetails(name: 'Desmond Copeland'));\n```\n\n----------------------------------------\n\nTITLE: Verifying OTP Code with Descope in Flutter\nDESCRIPTION: Dart implementation for verifying a one-time password code received via email or SMS using Descope authentication. The function validates the provided code against the user's login ID and returns an authentication response.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nfinal authResponse = await Descope.otp.verify(method: DeliveryMethod.email, loginId: 'desmond_c@mail.com', code: '123456');\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic Link Authentication Sign-Up with Descope in Flutter\nDESCRIPTION: Dart code example for implementing Magic Link authentication signup flow with Descope. This snippet shows how to initiate the signup process via email with an optional redirect URL configuration.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n// If configured globally, the redirect URL is optional. If provided however, it will be used\n// instead of any global configuration\nawait Descope.magicLink.signUp(method: DeliveryMethod.email, loginId: 'desmond_c@mail.com',\n    details: SignUpDetails(name: 'Desmond Copeland'), redirectUrl: 'https://your-redirect-address.com/verify');\n```\n\n----------------------------------------\n\nTITLE: Verifying Magic Link Token with Descope in Flutter\nDESCRIPTION: Dart implementation for verifying a magic link token in Descope authentication. This function is called on the redirect page after a user clicks a magic link, using the token parameter from the URL.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nfinal authResponse = await Descope.magicLink.verify(token: '<token>');\n```\n\n----------------------------------------\n\nTITLE: Handling App Links for Descope Flows in Flutter\nDESCRIPTION: Shows how to set up routes to handle App Links sent at the end of an authentication flow in a Flutter application using GoRouter.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal _router = GoRouter(\n  routes: [\n    GoRoute(\n      path: '/',\n      builder: (_, __) => const MyHomePage(title: 'Flutter Demo Home Page'), // Your main app\n      routes: [\n        GoRoute(\n          path: 'auth', // This path needs to correspond to the deep link you configured in your manifest - see below\n          redirect: (context, state) async {\n            try {\n              Descope.flow.exchange(state.uri); // Call exchange to complete the flow\n            } catch (e) {\n              // Handle errors here\n            }\n            return '/'; // This route doesn't display anything but returns the root path where the user will be signed in\n          },\n        ),\n        // Magic Link handling will be here. See the documentation below.\n      ],\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing GoRouter for Deep Link and Magic Link Handling in Flutter\nDESCRIPTION: Dart implementation of GoRouter configuration that handles both standard authentication deep links and specific magic link redirects. The router defines routes for both authentication paths and handles the proper flow exchange and resumption.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nfinal _router = GoRouter(\n  routes: [\n    GoRoute(\n      path: '/',\n      builder: (_, __) => const MyHomePage(title: 'Flutter Demo Home Page'),\n      routes: [\n        GoRoute(\n          path: 'auth',\n          redirect: (context, state) {\n            try {\n              Descope.flow.exchange(state.uri);\n            } catch (e) {\n              // Handle errors here\n            }\n            return '/';\n          },\n        ),\n        // Adding the magic link handling here:\n        GoRoute(\n          path: 'magiclink', // This path needs to correspond to the deep link you configured in your manifest or associated domain - see below\n          redirect: (context, state) async {\n            try {\n              await Descope.flow.resume(state.uri); // Resume the flow after returning from a magic link\n            } catch (e) {\n              // Handle errors here\n            }\n            return '/'; // This route doesn't display anything but returns the root path where the user will be signed in\n          },\n        ),\n      ],\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Android Manifest Configuration for Deep Linking and Magic Links in Flutter\nDESCRIPTION: XML configuration for the Android manifest file that enables deep linking and magic link functionality in a Flutter app. It includes activity settings with exported attribute, launch mode, and intent filters for handling specific URLs.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n        android:name=\".MainActivity\"\n        android:exported=\"true\"\n        android:launchMode=\"singleTask\"\n        android:theme=\"@style/LaunchTheme\"\n        android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode\"\n        android:hardwareAccelerated=\"true\"\n        android:windowSoftInputMode=\"adjustResize\"> <!-- exported, singleTop are enabled by default but singleTask is required for the magic links to work -->\n        \n    <!-- add the following at the end of the activity tag, after anything you have defined currently -->\n    \n    <meta-data android:name=\"flutter_deeplinking_enabled\" android:value=\"true\" />\n    <intent-filter android:autoVerify=\"true\"> <!-- autoVerify required for app links -->\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <!-- replace with your host, the path can change must must be reflected when running the flow -->\n        <!-- the path should correspond with the routing path defined above -->\n        <data android:scheme=\"https\" android:host=\"<YOUR_HOST_HERE>\" android:path=\"/auth\" />\n        <!-- see magic link setup below for more details -->\n        <data android:scheme=\"https\" android:host=\"<YOUR_HOST_HERE>\" android:path=\"/magiclink\" />\n    </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Flow Options in Descope for Flutter\nDESCRIPTION: Dart code showing how to configure the Descope web flow options with custom CSS and flow ID. This setup is specifically for web applications using the Descope authentication flows as a Web Component.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/README.md#2025-04-22_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nfinal options = DescopeFlowOptions(\n        web: DescopeWebFlowOptions(\n            flowId: 'flowId', \n            flowContainerCss: {\n                \"background-color\": \"antiquewhite\",\n                \"width\": \"500px\",\n                \"min-height\": \"300px\",\n                \"margin\": \"auto\",\n                \"position\": \"relative\",\n                \"top\": \"50%\",\n                \"transform\": \"translateY(-50%)\",\n                \"display\": \"flex\",\n                \"flex-direction\": \"column\",\n                \"align-items\": \"center\",\n                \"justify-content\": \"center\",\n                \"box-shadow\": \"0px 0px 10px gray\",\n            },\n            loadingElement: myCustomLoadingElement,\n        ));\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Detailed changelog entries documenting version changes, new features, breaking changes and bug fixes for the Descope Flutter SDK. Includes information about authentication flows, session management, passkey support, and other key functionality.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 0.9.6\n\n- Add more fields to the `DescopeUser`\n\n# 0.9.5\n\n- Migrate Android passkey implementation to use `CredentialManager` instead of `Fido2`\n\n# 0.9.4\n\n- Add the ability to explicitly check if passkeys are supported on the device\n\n# 0.9.3\n\n- Fix issue with passkey userId encoding/decoding\n\n# 0.9.2\n\n- Add exception parsing from server response\n\n# 0.9.1\n\n- Support passkeys in Flutter Web\n\n# 0.9.0\n\n- New setup function for initializing the Descope SDK\n- Replace password now returns a `AuthenticationResponse`\n- Flutter Web support for both Session Management and Flows\n\n# 0.8.1\n\n- Remove OAuth `clientId` validation in iOS plugin\n\n# 0.8.0\n\n- Add custom attributes and multiple names to DescopeUser objects\n- Add support for native Sign in with Apple/Google authentication\n- Add support for authentication with Passkeys\n\n# 0.7.2\n\n- Fix issue with parsing cookie headers\n\n# 0.7.1\n\n- Add support for custom OAuth providers\n\n# 0.7.0\n\n- Added Magic Link support to Flows\n- New `DescopeException` now thrown from all operations\n- Fixed `redirectUrl` parameter\n- Added Logger & Network client for easier debugging\n\n# 0.6.0\n\n- Beta release. \n- `README.md` updated to convey all changes.\n\n## New Features\n\n- The new `Descope` convenience class wraps around the `DescopeSdk` and provides easier access for most cases. Alternatively `DescopeSdk` instances can still be created. \n- Manage your session using the new `DescopeSessionManager`. Sessions are saved securely on Android and iOS.\n- Authenticate using [Flows](https://app.descope.com/flows).\n- Added `http.Request` authorization extensions.\n- Added `createdTime` to `UserResponse`.\n\n## Breaking Changes\n\n- Authentication methods no longer return a session directly, but rather the new `AuthenticationResponse`. It can be converted into a `DescopeSession` by calling `DescopeSession.fromAuthenticationResponse(authResponse)`.\n- `DescopeSDK` renamed to `DescopeSdk`.\n- `refreshSession()`  now returns `RefreshResponse` instead of `DescopeSession`.\n- `DescopeConfig` constructor changed.\n- `User` renamed to `SignUpDetials`.\n- `me` request now returns a `DescopeUser` instead of `MeResponse` which has been deleted.\n\n# 0.5.1\n\n- Fixed publish workflow\n\n# 0.5.0\n\n- Initial alpha release\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Descope Flutter Plugin\nDESCRIPTION: Sets up the CMake project for the Descope Flutter plugin, including minimum CMake version, project name, and plugin name. It also defines the source files and creates the shared library target.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(PROJECT_NAME \"descope\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\nset(PLUGIN_NAME \"descope_plugin\")\n\nlist(APPEND PLUGIN_SOURCES\n  \"descope_plugin.cc\"\n)\n\nadd_library(${PLUGIN_NAME} SHARED\n  ${PLUGIN_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Descope Flutter Plugin\nDESCRIPTION: Sets up the CMake project for the Descope Flutter plugin, including minimum CMake version, project name, and language settings.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(PROJECT_NAME \"descope\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\nset(PLUGIN_NAME \"descope_plugin\")\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Library for Descope Flutter Plugin\nDESCRIPTION: Defines the shared library target for the Descope Flutter plugin, including source files and headers.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(${PLUGIN_NAME} SHARED\n  \"include/descope/descope_plugin_c_api.h\"\n  \"descope_plugin_c_api.cpp\"\n  ${PLUGIN_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Settings for Descope Flutter Plugin\nDESCRIPTION: Applies standard build settings, sets symbol visibility, and defines include directories and library dependencies for the plugin.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${PLUGIN_NAME})\n\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\n\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter flutter_wrapper_plugin)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Settings for Descope Flutter Plugin\nDESCRIPTION: Applies standard build settings, sets symbol visibility, and configures include directories and library dependencies for the Descope Flutter plugin.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${PLUGIN_NAME})\n\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\n\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter)\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Descope Flutter Plugin\nDESCRIPTION: Lists the source files that make up the Descope Flutter plugin.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND PLUGIN_SOURCES\n  \"descope_plugin.cpp\"\n  \"descope_plugin.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Google Test for Descope Flutter Plugin\nDESCRIPTION: Configures Google Test for unit testing the Descope Flutter plugin, including dependency fetching and test executable setup.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/windows/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (${include_${PROJECT_NAME}_tests})\nset(TEST_RUNNER \"${PROJECT_NAME}_test\")\nenable_testing()\n\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  URL https://github.com/google/googletest/archive/release-1.11.0.zip\n)\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\nset(INSTALL_GTEST OFF CACHE BOOL \"Disable installation of googletest\" FORCE)\nFetchContent_MakeAvailable(googletest)\n\nadd_executable(${TEST_RUNNER}\n  test/descope_plugin_test.cpp\n  ${PLUGIN_SOURCES}\n)\napply_standard_settings(${TEST_RUNNER})\ntarget_include_directories(${TEST_RUNNER} PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}\")\ntarget_link_libraries(${TEST_RUNNER} PRIVATE flutter_wrapper_plugin)\ntarget_link_libraries(${TEST_RUNNER} PRIVATE gtest_main gmock)\n\ninclude(GoogleTest)\ngtest_discover_tests(${TEST_RUNNER})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Tests for Descope Flutter Plugin\nDESCRIPTION: Sets up Google Test for unit testing the Descope Flutter plugin. This includes fetching the Google Test library, creating a test runner executable, and configuring test discovery. This section is only included when building the example project.\nSOURCE: https://github.com/descope/descope-flutter/blob/main/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (${include_${PROJECT_NAME}_tests})\nif(${CMAKE_VERSION} VERSION_LESS \"3.11.0\")\nmessage(\"Unit tests require CMake 3.11.0 or later\")\nelse()\nset(TEST_RUNNER \"${PROJECT_NAME}_test\")\nenable_testing()\n\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  URL https://github.com/google/googletest/archive/release-1.11.0.zip\n)\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\nset(INSTALL_GTEST OFF CACHE BOOL \"Disable installation of googletest\" FORCE)\n\nFetchContent_MakeAvailable(googletest)\n\nadd_executable(${TEST_RUNNER}\n  test/descope_plugin_test.cc\n  ${PLUGIN_SOURCES}\n)\napply_standard_settings(${TEST_RUNNER})\ntarget_include_directories(${TEST_RUNNER} PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}\")\ntarget_link_libraries(${TEST_RUNNER} PRIVATE flutter)\ntarget_link_libraries(${TEST_RUNNER} PRIVATE PkgConfig::GTK)\ntarget_link_libraries(${TEST_RUNNER} PRIVATE gtest_main gmock)\n\ninclude(GoogleTest)\ngtest_discover_tests(${TEST_RUNNER})\n\nendif()\nendif()\n```"
  }
]