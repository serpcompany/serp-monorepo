[
  {
    "owner": "pointfreeco",
    "repo": "swift-sharing",
    "content": "TITLE: Sharing Data Between Observable Models with File Storage\nDESCRIPTION: Demonstrates how to use @Shared with file storage to synchronize a collection of Meeting objects between two different observable models, allowing both to access and modify the same data.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Extensions/Shared.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// MeetingsList.swift\n@Observable\nclass MeetingsListModel {\n  @ObservationIgnored\n  @Shared(.fileStorage(.meetingsURL)) var meetings: [Meeting] = []\n}\n\n// ArchivedMeetings.swift\n@Observable\nclass ArchivedMeetingsModel {\n  @ObservationIgnored\n  @Shared(.fileStorage(.meetingsURL)) var meetings: [Meeting] = []\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shared State in SwiftUI Views\nDESCRIPTION: Demonstrates how to use @Shared directly in a SwiftUI view to access shared data without needing an observable model.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Extensions/Shared.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nstruct DebugMeetingsView: View {\n  @Shared(.fileStorage(.meetingsURL)) var meetings: [Meeting] = []\n  var body: some View {\n    ForEach(meetings) { meeting in\n      Text(meeting.title)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared State in Observable Models\nDESCRIPTION: Example showing how to use @Shared property wrapper with @Observable models to synchronize meeting data across different views with file system persistence.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nclass MeetingsListModel {\n  @ObservationIgnored\n  @Shared(.fileStorage(.meetingsURL)) var meetings: [Meeting] = []\n}\n\n@Observable\nclass ArchivedMeetingsModel {\n  @ObservationIgnored\n  @Shared(.fileStorage(.meetingsURL)) var meetings: [Meeting] = []\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Shared Property Wrapper Directly in SwiftUI View\nDESCRIPTION: Demonstrates how to use the @Shared property wrapper with AppStorage to create a counter view in SwiftUI. The view automatically subscribes to changes in the shared state, causing it to re-render when the count changes.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/ObservingChanges.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct CounterView: View {\n  @Shared(.appStorage(\"count\")) var count = 0\n  var body: some View {\n    Form {\n      Text(\"\\(count)\")\n      Button(\"Increment\") { count += 1 }\n    } \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing State Between Observable Models in Swift\nDESCRIPTION: Demonstrates how to use the @Shared property wrapper with file storage to synchronize a collection of meetings across two different observable models.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Sharing.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// MeetingsList.swift\n@Observable\nclass MeetingsListModel {\n  @ObservationIgnored\n  @Shared(.fileStorage(.meetingsURL)) var meetings: [Meeting] = []\n}\n\n// ArchivedMeetings.swift\n@Observable\nclass ArchivedMeetingsModel {\n  @ObservationIgnored\n  @Shared(.fileStorage(.meetingsURL)) var meetings: [Meeting] = []\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Shared Property in an Observable Model with SwiftUI\nDESCRIPTION: Shows how to store shared state in an Observable class model that can be used by a SwiftUI view. The @ObservationIgnored attribute prevents the Observation system from tracking the property, while still allowing the shared state to be observed through the wrapper.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/ObservingChanges.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@Observable class CounterModel {\n  @ObservationIgnored \n  @Shared(.appStorage(\"count\")) var count = 0\n}\nstruct CounterView: View {\n  @State var model = CounterModel()\n  var body: some View {\n    Form {\n      Text(\"\\(model.count)\")\n      Button(\"Increment\") { model.count += 1 }\n    } \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Safe @Shared Property Mutation Example\nDESCRIPTION: Example showing the recommended way to mutate @Shared properties using withLock to prevent race conditions.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/MutatingSharedState.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nawait withTaskGroup(of: Void.self) { group in\n  for _ in 1...1_000 {\n    group.addTask { \n      $count.withLock { \n        $0 += 1 \n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using File System Persistence Strategy in Swift with @Shared\nDESCRIPTION: Example of using the fileStorage persistence strategy with the @Shared property wrapper to persist complex data types to the file system as JSON. This approach requires the data type to conform to Codable.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/PersistenceStrategies.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@Shared(.fileStorage(/* URL */) var users: [User] = []\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Race Condition with @AppStorage in SwiftUI\nDESCRIPTION: Example showing how concurrent access to @AppStorage can lead to race conditions when multiple tasks attempt to increment a counter simultaneously.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/MutatingSharedState.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\n\nstruct AppStorageRaceCondition: View {\n  @AppStorage(\"count\") var count = 0\n  var body: some View {\n    Form {\n      Text(\"\\(count)\")\n      Button(\"Race!\") {\n        Task {\n          await withTaskGroup(of: Void.self) { group in\n            for _ in 1...1_000 {\n              group.addTask { _count.wrappedValue += 1 }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n#Preview(\"AppStorage race condition\") {\n  AppStorageRaceCondition()\n}\n```\n\n----------------------------------------\n\nTITLE: Using UserDefaults Persistence Strategy with AppStorage in Swift\nDESCRIPTION: Example of using the AppStorage persistence strategy with the @Shared property wrapper to persist data to UserDefaults. This approach allows simple data types to be persisted across app launches.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/PersistenceStrategies.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@Shared(.appStorage(\"count\")) var count = 0\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only Shared State in Swift\nDESCRIPTION: This snippet demonstrates how to create a read-only shared state using SharedReader, allowing a child feature to observe changes without write access.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/DerivingSharedState.md#2025-04-20_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// Parent feature needs read-write access to the option\n@Shared(.appStorage(\"isHapticsEnabled\")) var isHapticsEnabled = true\n\n// Child feature only needs to observe changes to the option\nChild(isHapticsEnabled: SharedReader($isHapticsEnabled))\n```\n\n----------------------------------------\n\nTITLE: Using FileStorage with Shared Property Wrapper in Swift\nDESCRIPTION: Example of using the fileStorage key with the Shared property wrapper to persist an array of User objects to a specified URL. Changes to the shared value will be automatically synchronized to disk.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Extensions/FileStorageKey.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nextension URL {\n  static let users = URL(/* ... */)\n}\n@Shared(.fileStorage(.users)) var users: [User] = []\n```\n\n----------------------------------------\n\nTITLE: Passing Derived Shared State to Child Feature in Swift\nDESCRIPTION: This snippet demonstrates how to pass a derived piece of shared state (user name) from a parent feature to a child feature.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/DerivingSharedState.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nfunc editNameButtonTapped() {\n  destination = .editName(\n    EditNameModel(currentUserName: $currentUser.name)\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Simple Settings with AppStorage Strategy\nDESCRIPTION: Shows how to use @Shared with appStorage strategy to persist simple settings like boolean flags and enums in UserDefaults.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Extensions/Shared.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@Shared(.appStorage(\"soundsOn\")) var soundsOn = true\n@Shared(.appStorage(\"hapticsOn\")) var hapticsOn = true\n@Shared(.appStorage(\"userSort\")) var userSort = UserSort.name\n```\n\n----------------------------------------\n\nTITLE: Testing a Counter Model with Shared State in Swift\nDESCRIPTION: A unit test for the CounterModel that demonstrates how to test features using @Shared properties. The test verifies the increment functionality works correctly without needing special test setup.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/Testing.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@Test func increment() {\n  let model = CounterModel()\n  model.incrementButtonTapped()\n  #expect(model.count == 1)\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting Complex Data with FileStorage Strategy\nDESCRIPTION: Demonstrates using the fileStorage strategy to persist complex data types like arrays of custom objects to the file system through serialization.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Extensions/Shared.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@Shared(.fileStorage(.meetingsURL)) var meetings: [Meeting] = []\n```\n\n----------------------------------------\n\nTITLE: Using State.Shared for Preventing Key Resets in SwiftUI Views\nDESCRIPTION: Demonstrates how to use @State.Shared to prevent key resets when SwiftUI views are recreated, addressing a common pitfall when dynamically changing keys.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/Gotchas.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n$value.load(.newKey)\n// or…\n$value = Shared(.newKey)\n```\n\nLANGUAGE: swift\nCODE:\n```\n@State.Shared(.key) var value\n```\n\n----------------------------------------\n\nTITLE: Implementing an Observable Counter Model with Shared App Storage in Swift\nDESCRIPTION: A simple counter model class that uses @Shared with appStorage persistence to store a count value. The class is Observable and includes a method to increment the counter while handling thread safety.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/Testing.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nclass CounterModel {\n  @ObservationIgnored\n  @Shared(.appStorage(\"count\")) var count = 0\n  func incrementButtonTapped() {\n    $count.withLock { $0 += 1 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Observing Shared State Changes with Combine Publisher\nDESCRIPTION: Shows how to observe changes to shared state using Combine's publisher and sink APIs. This example creates a publisher from a shared property that prints the updated count value whenever it changes.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/ObservingChanges.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nclass Model {\n  @Shared(.appStorage(\"count\")) var count = 0\n\n  var cancellables: Set<AnyCancellable> = []\n  func startObservation() {\n    $count.publisher.sink { count in\n      print(\"count is now\", count)\n    }\n    .store(in: &cancellables)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic AppStorage Usage with Shared Property Wrapper\nDESCRIPTION: Demonstrates the basic usage of AppStorage with the @Shared property wrapper to persist a boolean value to UserDefaults.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Extensions/AppStorageKey.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@Shared(.appStorage(\"isOn\")) var isOn = true\n```\n\n----------------------------------------\n\nTITLE: Loading New Key with Task in Swift\nDESCRIPTION: This snippet demonstrates how to load a new key into @Shared or @SharedReader when the change is due to user action, such as updating a search string. It uses a task modifier with an id parameter to trigger the load operation.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/DynamicKeys.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n.task(id: searchText) {\n  do {\n    try await $items.load(.search(searchText))\n  } catch {\n    // Handle error\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using State.Shared for Persistent Storage in SwiftUI Views\nDESCRIPTION: Demonstrates the recommended approach for using shared state in SwiftUI views when the key might need to change. This approach preserves the key across view recreations.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/ObservingChanges.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@State.Shared(.key) var value\n```\n\n----------------------------------------\n\nTITLE: Working with Shared Collections in Swift\nDESCRIPTION: This snippet demonstrates how to work with shared collections, specifically an IdentifiedArray, to create a collection of shared elements.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/DerivingSharedState.md#2025-04-20_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n@Shared(.fileStorage(.todos)) var todos: IdentifiedArrayOf<Todo> = []\n\nForEach(Array($todos)) { $todo in  // '$todo' is a 'Shared<Todo>'\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Persisted @Shared State in Swift\nDESCRIPTION: This snippet demonstrates how to initialize persisted @Shared state in a custom initializer. It uses the appStorage persistence strategy and shows how to handle the wrapped value.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/InitializationRules.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nclass FeatureModel {\n  // A piece of shared state that is persisted to an external system.\n  @Shared public var count: Int\n  // Other fields...\n\n  public init(count: Int, /* Other fields... */) {\n    _count = Shared(wrappedValue: count, .appStorage(\"count\"))\n    // Other assignments...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Shared State Value for Testing in Swift\nDESCRIPTION: Example showing how to initialize shared state with a specific value for testing purposes. This approach allows tests to start with a predictable state for consistent test results.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/Testing.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@Test\nfunc basics() {\n  @Shared(.appStorage(\"count\")) var count = 42\n\n  // Shared state will be 42 for all features using it.\n  let model = FeatureModel()\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using In-Memory Shared Data\nDESCRIPTION: Shows how to use the inMemory strategy to share data globally within an app session without persisting it after app relaunch.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Extensions/Shared.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@Shared(.inMemory(\"events\")) var events: [String] = []\n```\n\n----------------------------------------\n\nTITLE: Mutating Shared State in Swift - Pre-1.0 vs 1.0\nDESCRIPTION: Demonstrates the change in how shared state mutations are handled. The new approach uses withLock method to prevent data races in parallel operations.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/MigrationGuides/MigratingTo1.0.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@Shared var count: Int\ncount += 1\n```\n\nLANGUAGE: swift\nCODE:\n```\n@Shared var count: Int\n$count.withLock { $0 += 1 }\n```\n\n----------------------------------------\n\nTITLE: Using In-Memory Persistence Strategy in Swift with @Shared\nDESCRIPTION: Example of using the in-memory persistence strategy with the @Shared property wrapper to share an integer count value across an application. This approach keeps data in memory but does not persist it across app launches.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/PersistenceStrategies.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@Obsrevable\nclass FeatureModel {\n  @ObservationIgnored\n  @Shared(.inMemory(\"count\")) var count = 0\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: SwiftUI View with Shared State\nDESCRIPTION: Implementation of a SwiftUI view using @Shared property wrapper directly without an observable model.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/README.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nstruct DebugMeetingsView: View {\n  @Shared(.fileStorage(.meetingsURL)) var meetings: [Meeting] = []\n  var body: some View {\n    ForEach(meetings) { meeting in\n      Text(meeting.title)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SharedReader with AppStorage in SwiftUI\nDESCRIPTION: This example demonstrates how to use the @SharedReader property wrapper to access app settings in a read-only manner. The view can check if sound effects are enabled but cannot modify the setting.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Extensions/SharedReader.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct FeatureView: View {\n  @SharedReader(.appStorage(\"soundsOn\")) var soundsOn = true\n\n  var body: some View {\n    Button(\"Tap\") {\n      if soundsOn {\n        SoundEffects.shared.tap()\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Swift Navigation's observe Method in UIKit\nDESCRIPTION: Shows a simplified approach to observing shared state in UIKit using the Swift Navigation library. The observe method automatically tracks any state accessed in the closure and re-evaluates when that state changes.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/ObservingChanges.md#2025-04-20_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfinal class CounterViewController: UIViewController {\n  @Shared(.appStorage(\"count\")) var count = 0\n\n  func viewDidLoad() {\n    super.viewDidLoad()\n\n    let counterLabel = UILabel()\n    // Set up constraints and add label to screen...\n\n    observe { [weak self] in \n      guard let self else { return }\n\n      counterLabel.text = \"\\(count)\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Type-Safe Keys for File Storage in Swift Sharing\nDESCRIPTION: Extension to SharedKey protocol that creates a reusable, type-safe key for file storage of an identified array of users. This approach enforces type consistency at compile time.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/TypeSafeKeys.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nextension SharedKey\nwhere Self == FileStorageKey<IdentifiedArrayOf<User>> {\n  static var users: Self {\n    fileStorage(/* ... */)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Optional Shared State in Swift\nDESCRIPTION: This code shows how to unwrap an optional shared state into a non-optional shared value using the Shared initializer.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/DerivingSharedState.md#2025-04-20_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n@Shared var currentUser: User?\n\nif let loggedInUser = Shared($currentUser) {\n  loggedInUser  // Shared<User>\n}\n```\n\n----------------------------------------\n\nTITLE: Safe MainActor Synchronization for AppStorage\nDESCRIPTION: Solution showing how to safely mutate AppStorage by synchronizing access through the MainActor.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/MutatingSharedState.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nawait withTaskGroup(of: Void.self) { group in\n  for _ in 1...1_000 {\n    group.addTask { \n      await MainActor.run { \n        count += 1 \n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type-Safe Keys with Swift Sharing\nDESCRIPTION: Example of using the type-safe key created earlier, which simplifies the shared property declaration and provides compile-time type checking.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/TypeSafeKeys.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@Shared(.users) var users: IdentifiedArrayOf<User> = []\n```\n\n----------------------------------------\n\nTITLE: Using Shared State in UIKit View Controllers\nDESCRIPTION: Shows how to integrate @Shared with UIKit view controllers for backward compatibility or when SwiftUI isn't suitable.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Extensions/Shared.md#2025-04-20_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nfinal class DebugMeetingsViewController: UIViewController {\n  @Shared(.fileStorage(.meetingsURL)) var meetings: [Meeting] = []\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Shared State Declaration with Default Values\nDESCRIPTION: Example showing how type-safe keys with default values simplify shared property declarations by eliminating the need for explicit type annotations and default values.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/TypeSafeKeys.md#2025-04-20_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n@Shared(.users) var users\n```\n\n----------------------------------------\n\nTITLE: UIKit Integration with Shared State\nDESCRIPTION: Example showing how to use @Shared in a UIKit view controller for legacy or UIKit-specific features.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/README.md#2025-04-20_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nfinal class DebugMeetingsViewController: UIViewController {\n  @Shared(.fileStorage(.meetingsURL)) var meetings: [Meeting] = []\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using State.Shared for Persistent Keys in Swift SwiftUI\nDESCRIPTION: This snippet demonstrates the use of State.Shared, which works like @State in SwiftUI views. This approach prevents the key from being reset when the view is recreated, ensuring persistence of the shared state.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/DynamicKeys.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@State.Shared(.key) var value\n```\n\n----------------------------------------\n\nTITLE: Observing Shared State in UIKit with Combine\nDESCRIPTION: Demonstrates how to observe changes to shared state in a UIKit view controller using Combine. This approach uses the publisher property to update a UILabel whenever the count changes.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/ObservingChanges.md#2025-04-20_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nfinal class CounterViewController: UIViewController {\n  @Shared(.appStorage(\"count\")) var count = 0\n  var cancellables: Set<AnyCancellable> = []\n\n  func viewDidLoad() {\n    super.viewDidLoad()\n\n    let counterLabel = UILabel()\n    // Set up constraints and add label to screen...\n\n    $count.publisher.sink { count in\n      counterLabel.text = \"\\(count)\"\n    }\n    .store(in: &cancellables)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Codable Implementation for Types with @Shared Properties\nDESCRIPTION: Shows a complete custom implementation of Codable for a type with @Shared properties, handling both encoding and decoding while properly managing the shared state.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/Gotchas.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct TodosFeature {\n  @Shared(.appStorage(\"launchCount\")) var launchCount = 0\n  var todos: [String] = []\n}\n\nextension TodosFeature: Codable {\n  enum CodingKeys: String, CodingKey {\n    case todos\n  }\n\n  init(from decoder: any Decoder) throws {\n    let container = try decoder.container(keyedBy: CodingKeys.self)\n\n    // Do not decode 'launchCount'\n    self._launchCount = Shared(wrappedValue: 0, .appStorage(\"launchCount\"))\n    self.todos = try container.decode([String].self, forKey: .todos)\n  }\n\n  func encode(to encoder: any Encoder) throws {\n    var container = encoder.container(keyedBy: CodingKeys.self)\n    try container.encode(self.todos, forKey: .todos)\n    // Do not encode 'launchCount'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Persistence Strategy by Conforming to SharedKey Protocol\nDESCRIPTION: Example of creating a custom persistence strategy by defining a type that conforms to the SharedKey protocol. This allows for integration with external storage systems beyond the built-in strategies.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/PersistenceStrategies.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\npublic final class CustomSharedKey: SharedKey {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: File Storage Implementation for Complex Data\nDESCRIPTION: Shows how to use fileStorage strategy to persist complex data types to the file system.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@Shared(.fileStorage(.meetingsURL)) var meetings: [Meeting] = []\n```\n\n----------------------------------------\n\nTITLE: Handling Loading States with @Shared Properties\nDESCRIPTION: Shows how to use the new isLoading and error properties of @Shared to display different views based on the loading state and potential errors.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/MigrationGuides/MigratingTo2.0.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nif $content.isLoading {\n  ProgressView()\n} else if let loadError = $content.loadError {\n  ContentUnavailableView {\n    Label(\"Failed to load content\", systemImage: \"xmark.circle\")\n  } description: {\n    Text(loadError.localizedDescription)\n  }\n} else {\n  MyView(content: content)\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Persistence Strategy with @Shared in Swift\nDESCRIPTION: Example of using a custom persistence strategy with the @Shared property wrapper, similar to how the built-in strategies are used.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/PersistenceStrategies.md#2025-04-20_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n@Shared(.custom(/* ... */)) var myValue: Value\n```\n\n----------------------------------------\n\nTITLE: Testing External File Changes with FileStorage in Swift\nDESCRIPTION: Test demonstrating how changes made directly to the file at the specified URL are reflected in the Shared property. Uses dependency injection to configure file storage for testing purposes.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Extensions/FileStorageKey.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@Test(.dependency(\\.defaultFileStorage, .fileSystem))\nfunc externalWrite() throws {\n  let url = URL.temporaryDirectory.appending(component: \"is-on.json\")\n  try? FileManager.default.removeItem(at: url)\n\n  @Shared(.fileStorage(url)) var isOn = true\n  #expect(isOn == true)\n  try Data(\"false\".utf8).write(to: url)\n  #expect(isOn == false)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Phone Number in Swift\nDESCRIPTION: This snippet shows how to define a class with a shared phone number property using @Shared and @ObservationIgnored property wrappers.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/DerivingSharedState.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nclass PhoneNumberModel { \n  @ObservationIgnored\n  @Shared var phoneNumber: String\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Persisted @Shared State with @autoclosure in Swift\nDESCRIPTION: This snippet shows an alternative approach to initializing persisted @Shared state using @autoclosure. This method ensures the initial value is only evaluated if needed.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/InitializationRules.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\npublic struct State {\n  @Shared public var count: Int\n  // Other fields...\n\n  public init(count: @autoclosure () -> Int, /* Other fields... */) {\n    _count = Shared(wrappedValue: count(), .appStorage(\"count\"))\n    // Other assignments...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Derived Shared State in Swift\nDESCRIPTION: This code demonstrates how to pass a derived piece of shared state from a parent feature to a child feature using the $ syntax.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/DerivingSharedState.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc nextButtonTapped() {\n  path.append(\n    PhoneNumberModel(phoneNumber: $signUpData.phoneNumber)\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SharedReader with Remote Configuration\nDESCRIPTION: This example shows how to initialize a SharedReader property wrapper with a custom remote configuration strategy that can load and subscribe to remote settings but cannot write to them.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Extensions/SharedReader.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@SharedReader(.remoteConfig) var remoteConfig\n```\n\n----------------------------------------\n\nTITLE: In-Memory Storage Implementation\nDESCRIPTION: Example of using inMemory strategy for temporary global state sharing within the app.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@Shared(.inMemory(\"events\")) var events: [String] = []\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom UserDefaults in App Entry Point\nDESCRIPTION: Shows how to configure a custom UserDefaults instance for all @Shared(.appStorage) instances in an application.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Extensions/AppStorageKey.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@main struct EntryPoint: App {\n  init() {\n    prepareDependencies {\n      $0.defaultAppStorage = UserDefaults(suiteName: \"co.pointfree.suite\")!\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Non-persisted @Shared State Owned by Feature in Swift\nDESCRIPTION: This example illustrates how to initialize non-persisted @Shared state when the feature owns the state. It directly constructs the Shared value in the initializer.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/InitializationRules.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nclass FeatureModel {\n  // A piece of shared state that this feature will own.\n  @Shared public var count: Int\n  // Other fields...\n\n  public init(count: Int, /* Other fields... */) {\n    _count = Shared(value: count)\n    // Other assignments...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending SharedKey Protocol with a Custom Persistence Strategy Helper Method\nDESCRIPTION: Example of extending the SharedKey protocol to provide a simple API for using a custom persistence strategy with the @Shared property wrapper.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/PersistenceStrategies.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nextension SharedKey {\n  public static func custom<Value>(/* ... */) -> Self\n  where Self == CustomSharedKey<Value> {\n    CustomSharedKey(/* ... */)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Non-persisted @Shared State Owned by Other Feature in Swift\nDESCRIPTION: This snippet shows how to initialize non-persisted @Shared state when the state is owned by a parent feature. It takes a Shared value as a parameter and assigns it directly.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/InitializationRules.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nclass FeatureModel {\n  // A piece of shared state that will be provided by whoever constructs this model.\n  @Shared public var count: Int\n  // Other fields...\n\n  public init(count: Shared<Int>, /* Other fields... */) {\n    _count = count\n    // Other assignments...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Storage for UI Testing in Swift\nDESCRIPTION: Implementation that detects UI testing environment and configures dependencies to use in-memory storage. This prevents persistence between app runs during UI tests, ensuring test isolation.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/Testing.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@main\nstruct EntryPoint: App {\n  init() {\n    if ProcessInfo.processInfo.environment[\"UI_TESTING\"] != nil {\n      prepareDependencies {\n        $0.defaultAppStorage = .inMemory\n        $0.defaultFileStorage = .inMemory\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Remote Configuration Properties in SwiftUI\nDESCRIPTION: This example demonstrates how to access properties from a remote configuration using SharedReader to conditionally render UI components based on configuration values.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Extensions/SharedReader.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nif remoteConfig.isToggleEnabled {\n  Toggle(/* ... */)\n    .toggleStyle(\n      remoteConfig.useToggleSwitch \n        ? .switch \n        : .automatic\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Testing External UserDefaults Changes\nDESCRIPTION: Shows how to test that changes made directly to UserDefaults are reflected in the @Shared property. Includes setup and verification steps.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Extensions/AppStorageKey.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@Test(.dependency(\\.defaultAppStorage, .liveValue))\nfunc externalWrite() {\n  UserDefaults.standard.removeObject(forKey: \"isOn\")\n\n  @Shared(.appStorage(\"isOn\")) var isOn = true\n  #expect(isOn == true)\n  UserDefaults.standard.set(false, forKey: \"isOn\")\n  #expect(isOn == false)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Child Feature with Shared State in Swift\nDESCRIPTION: This code defines a child feature class that holds a shared piece of state (user name) using @Shared and @ObservationIgnored.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/DerivingSharedState.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nclass EditNameModel {\n  @ObservationIgnored\n  @Shared var currentUserName: String\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File System for Tests\nDESCRIPTION: Example demonstrating how to use the live file system in tests using the dependency test trait with defaultFileStorage.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Extensions/FileStorageKey.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@Test(.dependency(\\.defaultFileStorage, .fileSystem))\nfunc basics() {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing App Entry Point Execution During Tests in Swift\nDESCRIPTION: Code that conditionally renders app UI based on whether tests are running. This prevents the app's entry point from executing during tests, which can help avoid issues with shared state initialization.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/Testing.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@main\nstruct EntryPoint: App {\n  var body: some Scene {\n    if !isTesting {\n      WindowGroup {\n        // ...\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Key Dynamically in Swift SwiftUI View\nDESCRIPTION: This snippet illustrates how to dynamically change the key of a property wrapper in a SwiftUI view. However, this approach may reset the key when the view is recreated, which is a common occurrence in SwiftUI.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/DynamicKeys.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n$value.load(.newKey)\n// or...\n$value = Shared(.newKey)\n```\n\n----------------------------------------\n\nTITLE: Reloading Shared Value in SwiftUI Refreshable List\nDESCRIPTION: Demonstrates how to reload a shared value from a refreshable SwiftUI list using the new asynchronous load method.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/MigrationGuides/MigratingTo2.0.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n.refreshable {\n  try? await $shared.load()\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning New Key Directly in Swift Initializer\nDESCRIPTION: This snippet shows how to re-assign the projected value of the shared state directly in an initializer. This method is used when the key change is not due to user action, such as the first appearance of a view.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/DynamicKeys.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ninit() {\n  $items = SharedReader(.search(searchText))\n}\n```\n\n----------------------------------------\n\nTITLE: Unsafe AppStorage Access Example\nDESCRIPTION: Code snippet demonstrating the problematic single line operation that can lead to race conditions due to multiple underlying instructions.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/MutatingSharedState.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n_count.wrappedValue += 1\n```\n\n----------------------------------------\n\nTITLE: Using AppStorage Strategy for Simple Data\nDESCRIPTION: Demonstrates using @Shared with appStorage strategy to persist simple settings in UserDefaults.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@Shared(.appStorage(\"soundsOn\")) var soundsOn = true\n@Shared(.appStorage(\"hapticsOn\")) var hapticsOn = true\n@Shared(.appStorage(\"userSort\")) var userSort = UserSort.name\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic File Storage for Swift Sharing\nDESCRIPTION: Example of using file storage strategy to save an array of User objects to disk. This approach demonstrates the basic implementation but lacks type safety when refactoring.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/TypeSafeKeys.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@Shared(\n  .fileStorage(.documentsDirectory.appending(component: \"users.json\"))\n)\nvar users: [User] = []\n```\n\n----------------------------------------\n\nTITLE: Using Shared State in SwiftUI Views\nDESCRIPTION: Demonstrates how to directly use the @Shared property wrapper in a SwiftUI view to access file-persisted data.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Sharing.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nstruct DebugMeetingsView: View {\n  @Shared(.fileStorage(.meetingsURL)) var meetings: [Meeting] = []\n  var body: some View {\n    ForEach(meetings) { meeting in\n      Text(meeting.title)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shared State with Persistence Strategy in Swift\nDESCRIPTION: This snippet shows how to define a shared state property with a file storage persistence strategy using @Shared and @ObservationIgnored.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/DerivingSharedState.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nclass ParentModel {\n  @ObservationIgnored\n  @Shared(.fileStorage(.currentUser)) var currentUser\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: File Storage for Complex Data Persistence in Swift\nDESCRIPTION: Demonstrates using the @Shared property wrapper with fileStorage strategy to persist complex data types to the file system.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Sharing.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@Shared(.fileStorage(.meetingsURL)) var meetings: [Meeting] = []\n```\n\n----------------------------------------\n\nTITLE: Using App Storage for Simple Data Persistence in Swift\nDESCRIPTION: Shows how to use the @Shared property wrapper with appStorage strategy to persist simple settings data in user defaults.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Sharing.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@Shared(.appStorage(\"soundsOn\")) var soundsOn = true\n@Shared(.appStorage(\"hapticsOn\")) var hapticsOn = true\n@Shared(.appStorage(\"userSort\")) var userSort = UserSort.name\n```\n\n----------------------------------------\n\nTITLE: In-Memory Global State Sharing in Swift\nDESCRIPTION: Shows how to use the @Shared property wrapper with inMemory strategy to share state globally within an app during runtime.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Sharing.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@Shared(.inMemory(\"events\")) var events: [String] = []\n```\n\n----------------------------------------\n\nTITLE: Creating Type-Safe Keys for In-Memory Storage in Swift Sharing\nDESCRIPTION: Extension to SharedReaderKey protocol that creates a type-safe key for in-memory storage, showing how the pattern works for different storage strategies.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/TypeSafeKeys.md#2025-04-20_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nextension SharedReaderKey\nwhere Self == InMemoryKey<IdentifiedArrayOf<User>> {\n  static var users: Self {\n    inMemory(\"users\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shared State in UIKit View Controllers\nDESCRIPTION: Shows how to use the @Shared property wrapper in a UIKit view controller to access file-persisted data.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Sharing.md#2025-04-20_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nfinal class DebugMeetingsViewController: UIViewController {\n  @Shared(.fileStorage(.meetingsURL)) var meetings: [Meeting] = []\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Sharing Product to Target Dependencies\nDESCRIPTION: This snippet demonstrates how to add the Sharing product to a target's dependencies in a Swift Package Manager project. This allows the target to access the Sharing library.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/README.md#2025-04-20_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n.product(name: \"Sharing\", package: \"swift-sharing\"),\n```\n\n----------------------------------------\n\nTITLE: Dynamically Changing Shared Key in SwiftUI (Anti-pattern)\nDESCRIPTION: Shows an example of an anti-pattern when dynamically changing the key of a shared property wrapper in a SwiftUI view. This approach can lead to the key being reset when the view recreates.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/ObservingChanges.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n$value.load(.newKey)\n// or…\n$value = Shared(.newKey)\n```\n\n----------------------------------------\n\nTITLE: Adding Default Values to Type-Safe Keys in Swift Sharing\nDESCRIPTION: Extension that uses the Default type to pair a default value with a persistence strategy, further enhancing the reusability of shared state declarations.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/TypeSafeKeys.md#2025-04-20_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nextension SharedReaderKey\nwhere Self == FileStorageKey<IdentifiedArrayOf<User>>.Default {\n  static var users: Self {\n    Self[.fileStorage(URL(/* ... */)), default: []]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Type Safety Error in Swift Sharing\nDESCRIPTION: Example showing the compile-time error that occurs when trying to use the wrong type with a type-safe key, demonstrating the benefit of this approach.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/TypeSafeKeys.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@Shared(.users) var users: [User] = []\n```\n\n----------------------------------------\n\nTITLE: Refactoring to Identified Array with Potential Type Safety Issues\nDESCRIPTION: Example showing how refactoring from a plain array to an identified array can lead to type safety issues if not consistently applied throughout the codebase.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/TypeSafeKeys.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// Somewhere else in the application\n@Shared(.fileStorage(/* ... */)) var users: IdentifiedArrayOf<User> = []\n```\n\n----------------------------------------\n\nTITLE: SharedReaderKey Load Method in Sharing 2.0\nDESCRIPTION: Shows the updated load method signature in Sharing 2.0, which supports asynchronous loading and error handling.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/MigrationGuides/MigratingTo2.0.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nfunc load(\n  context: LoadContext<Value>,\n  continuation: LoadContinuation<Value>\n)\n```\n\n----------------------------------------\n\nTITLE: Publisher Behavior Update in Swift Sharing\nDESCRIPTION: Illustrates the change in publisher behavior where initial value is now immediately emitted and how to skip it using dropFirst operator.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/MigrationGuides/MigratingTo1.0.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n$shared.publisher\n```\n\nLANGUAGE: swift\nCODE:\n```\n$shared.publisher\n  .dropFirst()\n```\n\n----------------------------------------\n\nTITLE: SharedKey Save Method in Sharing 2.0\nDESCRIPTION: Shows the updated save method signature in Sharing 2.0, which supports asynchronous saving and error handling.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/MigrationGuides/MigratingTo2.0.md#2025-04-20_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nfunc save(\n  _ value: Value,\n  context: SaveContext,\n  continuation: SaveContinuation\n)\n```\n\n----------------------------------------\n\nTITLE: SharedReaderKey Subscribe Method in Sharing 2.0\nDESCRIPTION: Shows the updated subscribe method signature in Sharing 2.0, which supports better context handling and error reporting.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/MigrationGuides/MigratingTo2.0.md#2025-04-20_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nfunc subscribe(\n  context: LoadContext<Value>, \n  subscriber: SharedSubscriber<Value>\n) -> SharedSubscription\n```\n\n----------------------------------------\n\nTITLE: Configuring UserDefaults for SwiftUI Previews\nDESCRIPTION: Demonstrates how to configure standard UserDefaults for use in SwiftUI previews instead of the default ephemeral storage.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Extensions/AppStorageKey.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n#Preview {\n  let _ = prepareDependencies { $0.defaultAppStorage = .standard }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UserDefaults for Tests\nDESCRIPTION: Shows how to use standard UserDefaults in tests instead of the default ephemeral storage.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Extensions/AppStorageKey.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@Test(.dependency(\\.defaultAppStorage, .standard))\nfunc basics() {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Type-Safe Keys for App Storage in Swift Sharing\nDESCRIPTION: Extension to SharedReaderKey protocol that creates a type-safe key for app storage, further demonstrating the versatility of this pattern across different storage types.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/TypeSafeKeys.md#2025-04-20_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nextension SharedReaderKey where Self == AppStorageKey<Int> {\n  static var count: Self {\n    appStorage(\"count\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling AppStorage Key Format Warnings\nDESCRIPTION: Shows how to disable runtime warnings about special characters in AppStorage keys that affect KVO behavior.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Extensions/AppStorageKey.md#2025-04-20_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nprepareDependencies {\n  $0.appStorageKeyFormatWarningEnabled = false\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Sharing Dependency in SwiftPM Package.swift\nDESCRIPTION: This snippet shows how to add the Sharing library as a dependency in a Swift Package Manager project. It specifies the GitHub repository URL and version constraint.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/README.md#2025-04-20_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\n  .package(url: \"https://github.com/pointfreeco/swift-sharing\", from: \"2.0.0\")\n]\n```\n\n----------------------------------------\n\nTITLE: AppStorage Key Usage with KVO Limitations\nDESCRIPTION: Shows how to use AppStorageKey with KVO-incompatible keys and how to disable warning messages for such cases.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/MigrationGuides/MigratingTo1.0.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@Shared(.appStorage(\"co.pointfree.haptics-enabled\"))\nvar isHapticsEnabled: Bool\n```\n\nLANGUAGE: swift\nCODE:\n```\n@main\nstruct MyApp: App {\n  init() {\n    prepareDependencies { \n      $0.appStorageKeyFormatWarningEnabled = false\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File System for SwiftUI Previews\nDESCRIPTION: Example showing how to override the default in-memory file system with the live file system for SwiftUI previews using the prepareDependencies function.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Extensions/FileStorageKey.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n#Preview {\n  let _ = prepareDependencies { $0.defaultFileStorage = .fileSystem }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: SharedReaderKey Load Method in Sharing 1.0\nDESCRIPTION: Displays the old load method signature from Sharing 1.0 for comparison purposes.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/MigrationGuides/MigratingTo2.0.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc load(initialValue: Value?) -> Value?\n```\n\n----------------------------------------\n\nTITLE: SharedReaderKey Subscribe Method in Sharing 1.0\nDESCRIPTION: Displays the old subscribe method signature from Sharing 1.0 for comparison purposes.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/MigrationGuides/MigratingTo2.0.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nfunc subscribe(\n  initialValue: Value?, \n  didSet receiveValue: @escaping @Sendable (Value?) -> Void\n) -> SharedSubscription\n```\n\n----------------------------------------\n\nTITLE: SharedKey Save Method in Sharing 1.0\nDESCRIPTION: Displays the old save method signature from Sharing 1.0 for comparison purposes.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/MigrationGuides/MigratingTo2.0.md#2025-04-20_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfunc save(_ value: Value, immediately: Bool)\n```\n\n----------------------------------------\n\nTITLE: InMemoryKey Documentation Structure\nDESCRIPTION: Documentation structure for the InMemoryKey component showing the main topics including value storage, storage overriding, and storage identification capabilities.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Extensions/InMemoryKey.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ``Sharing/InMemoryKey``\n\n## Topics\n\n### Storing a value\n\n- ``SharedReaderKey/inMemory(_:)``\n\n### Overriding storage\n\n- ``Dependencies/DependencyValues/defaultInMemoryStorage``\n- ``InMemoryStorage``\n\n### Identifying storage\n\n- ``InMemoryKeyID``\n```\n\n----------------------------------------\n\nTITLE: Running Swift Sharing Wasm Demo in Browser\nDESCRIPTION: Shell commands to navigate to the WasmDemo directory and run the Carton development server. This allows the Swift Sharing demo to be executed in a web browser using Web Assembly.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Examples/WasmDemo/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd Examples/WasmDemo\n$ swift run carton dev\n```\n\n----------------------------------------\n\nTITLE: Firebase Remote Config Parameter Definition\nDESCRIPTION: Remote configuration parameter specification for controlling promo visibility feature.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Examples/FirebaseDemo/README.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nshowPromo\n```\n\n----------------------------------------\n\nTITLE: Firebase Project Bundle ID Configuration\nDESCRIPTION: The bundle identifier used for configuring the Firebase iOS application.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Examples/FirebaseDemo/README.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nco.pointfree.FirebaseDemo\n```\n\n----------------------------------------\n\nTITLE: Implementing Codable with @Shared Properties by Omitting Shared Values\nDESCRIPTION: Demonstrates how to make a type with @Shared properties conform to Codable by explicitly declaring non-shared coding keys, omitting the shared property from serialization.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/Gotchas.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct TodosFeature {\n  @Shared(.appStorage(\"launchCount\")) var launchCount = 0\n  var todos: [String] = []\n}\n\nextension TodosFeature: Codable {\n  enum CodingKeys: String, CodingKey {\n    // Omit 'launchCount'\n    case todos\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Shared Element by ID in Swift\nDESCRIPTION: This code shows how to access a shared element from a collection by its ID and unwrap it as a non-optional shared value.\nSOURCE: https://github.com/pointfreeco/swift-sharing/blob/main/Sources/Sharing/Documentation.docc/Articles/DerivingSharedState.md#2025-04-20_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n@Shared(.fileStorage(.todos)) var todos: IdentifiedArrayOf<Todo> = []\n\nguard let todo = Shared($todos[id: todoID])\nelse { return }\ntodo  // Shared<Todo>\n```"
  }
]