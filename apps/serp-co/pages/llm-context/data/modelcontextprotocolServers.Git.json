[
  {
    "owner": "modelcontextprotocol",
    "repo": "servers.git",
    "content": "TITLE: Sample System Prompt for Memory Integration\nDESCRIPTION: Example prompt for utilizing the memory system with Claude. This prompt instructs the model on how to retrieve, use, and update memory during interactions with users.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/memory/README.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nFollow these steps for each interaction:\n\n1. User Identification:\n   - You should assume that you are interacting with default_user\n   - If you have not identified default_user, proactively try to do so.\n\n2. Memory Retrieval:\n   - Always begin your chat by saying only \"Remembering...\" and retrieve all relevant information from your knowledge graph\n   - Always refer to your knowledge graph as your \"memory\"\n\n3. Memory\n   - While conversing with the user, be attentive to any new information that falls into these categories:\n     a) Basic Identity (age, gender, location, job title, education level, etc.)\n     b) Behaviors (interests, habits, etc.)\n     c) Preferences (communication style, preferred language, etc.)\n     d) Goals (goals, targets, aspirations, etc.)\n     e) Relationships (personal and professional relationships up to 3 degrees of separation)\n\n4. Memory Update:\n   - If any new information was gathered during the interaction, update your memory as follows:\n     a) Create entities for recurring organizations, people, and significant events\n     b) Connect them to the current entities using relations\n     b) Store facts about them as observations\n```\n\n----------------------------------------\n\nTITLE: GitHub Repository Management Tools Documentation\nDESCRIPTION: Detailed documentation of 24+ GitHub API tools covering repository operations, issue management, pull requests, and search functionality. Each tool is documented with its required inputs and expected outputs.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/github/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. `create_or_update_file`\n   - Create or update a single file in a repository\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `path` (string): Path where to create/update the file\n     - `content` (string): Content of the file\n     - `message` (string): Commit message\n     - `branch` (string): Branch to create/update the file in\n     - `sha` (optional string): SHA of file being replaced (for updates)\n   - Returns: File content and commit details\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up MCP Server Repository\nDESCRIPTION: Instructions for forking, cloning, and setting up the MCP servers repository for development. Includes commands for adding upstream remote and creating feature branches.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-username/servers.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/modelcontextprotocol/servers.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-feature\n```\n\n----------------------------------------\n\nTITLE: Running Build and Development Commands\nDESCRIPTION: Core NPM commands for building, testing, and running the MCP server with different transport layers.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/everything/CLAUDE.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start:sse\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run prepare\n```\n\n----------------------------------------\n\nTITLE: Submitting Changes to MCP Server Repository\nDESCRIPTION: Commands for committing and pushing changes to a forked MCP servers repository before creating a pull request.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Description of changes\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin my-feature\n```\n\n----------------------------------------\n\nTITLE: Advanced Claude Desktop MCP Servers Configuration\nDESCRIPTION: An extended JSON configuration example for Claude Desktop that demonstrates how to configure multiple MCP servers including filesystem, git, GitHub, and PostgreSQL. It also shows how to set environment variables for authentication.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/path/to/allowed/files\"]\n    },\n    \"git\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-git\", \"--repository\", \"path/to/git/repo\"]\n    },\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-github\"],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    },\n    \"postgres\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-postgres\", \"postgresql://localhost/mydb\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Claude Desktop MCP Server Configuration\nDESCRIPTION: A simple JSON configuration for Claude Desktop to use the Memory MCP server. This demonstrates the basic structure needed to integrate an MCP server with an MCP client.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-memory\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Structure in JSON\nDESCRIPTION: JSON structure showing how entities are represented in the knowledge graph. Each entity has a unique name identifier, an entity type classification, and a list of observations.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/memory/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"John_Smith\",\n  \"entityType\": \"person\",\n  \"observations\": [\"Speaks fluent Spanish\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Memory MCP Server with npx\nDESCRIPTION: Command to start the Memory MCP server directly using npx. This allows users to quickly launch the server without installation.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y @modelcontextprotocol/server-memory\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server in Claude Desktop\nDESCRIPTION: JSON configuration snippet for adding the Everything MCP server to Claude Desktop through the claude_desktop_config.json file. Defines the server command using npx package manager.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/everything/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"everything\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-everything\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Observations Structure in JSON\nDESCRIPTION: JSON structure showing how observations are stored for an entity. Observations are discrete, atomic pieces of information attached to specific entities that can be added or removed independently.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/memory/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entityName\": \"John_Smith\",\n  \"observations\": [\n    \"Speaks fluent Spanish\",\n    \"Graduated in 2019\",\n    \"Prefers morning meetings\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relation Structure in JSON\nDESCRIPTION: JSON structure demonstrating how relations between entities are represented. Relations are directed connections stored in active voice that describe how entities relate to each other.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/memory/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"from\": \"John_Smith\",\n  \"to\": \"Anthropic\",\n  \"relationType\": \"works_at\"\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Annotation Format in MCP Tools\nDESCRIPTION: Example JSON structure showing how annotations can be applied to messages with different priority levels and audience targeting in the 'annotatedMessage' tool.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/everything/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"priority\": 1.0,\n  \"audience\": [\"user\", \"assistant\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Notification Format in MCP\nDESCRIPTION: Example of the JSON structure used for server-sent log messages in the MCP protocol, showing the format of notification messages with level and data fields.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/everything/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"notifications/message\",\n  \"params\": {\n\t\"level\": \"info\",\n\t\"data\": \"Info-level message\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Interaction: Get Current Time\nDESCRIPTION: JSON request and response example for getting the current time in a specific timezone using the MCP Server Time.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/time/README.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"get_current_time\",\n  \"arguments\": {\n    \"timezone\": \"Europe/Warsaw\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timezone\": \"Europe/Warsaw\",\n  \"datetime\": \"2024-01-01T13:00:00+01:00\",\n  \"is_dst\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Testing SQLite MCP Server with MCP Inspector\nDESCRIPTION: Commands for testing the SQLite MCP server using the MCP inspector. It first installs the MCP CLI tools via uv and then starts the server in development mode.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/sqlite/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nuv add \"mcp[cli]\"\nmcp dev src/mcp_server_sqlite/server.py:wrapper  \n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Server with Custom Settings in Claude Desktop\nDESCRIPTION: JSON configuration for adding the memory server with custom environment variables. This example shows how to specify a custom path for the memory storage file.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/memory/README.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-memory\"\n      ],\n      \"env\": {\n        \"MEMORY_FILE_PATH\": \"/path/to/custom/memory.json\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Interaction: Convert Time Between Timezones\nDESCRIPTION: JSON request and response example for converting time between timezones using the MCP Server Time.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/time/README.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"convert_time\",\n  \"arguments\": {\n    \"source_timezone\": \"America/New_York\",\n    \"time\": \"16:30\",\n    \"target_timezone\": \"Asia/Tokyo\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": {\n    \"timezone\": \"America/New_York\",\n    \"datetime\": \"2024-01-01T12:30:00-05:00\",\n    \"is_dst\": false\n  },\n  \"target\": {\n    \"timezone\": \"Asia/Tokyo\",\n    \"datetime\": \"2024-01-01T12:30:00+09:00\",\n    \"is_dst\": false\n  },\n  \"time_difference\": \"+13.0h\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Server with NPX in Claude Desktop\nDESCRIPTION: JSON configuration for adding the memory server to Claude Desktop using NPX. This approach installs and runs the server directly through the Node.js package manager.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/memory/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-memory\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Server with NPX in VS Code\nDESCRIPTION: JSON configuration for adding the memory server to VS Code settings using NPX. This setup can be added to User Settings or workspace-specific settings.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/memory/README.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"servers\": {\n      \"memory\": {\n        \"command\": \"npx\",\n        \"args\": [\n          \"-y\",\n          \"@modelcontextprotocol/server-memory\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Git MCP Server with Python Package Managers\nDESCRIPTION: Commands for starting the Git MCP server using either uvx (recommended) or pip. The example demonstrates two alternative approaches for Python-based MCP servers.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# With uvx\nuvx mcp-server-git\n\n# With pip\npip install mcp-server-git\npython -m mcp_server_git\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Server with Docker in Claude Desktop\nDESCRIPTION: JSON configuration for adding the memory server to Claude Desktop using Docker. This setup mounts a volume for persistent storage and runs the memory server container.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/memory/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"-v\", \"claude-memory:/app/dist\", \"--rm\", \"mcp/memory\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack MCP Server for VS Code using Docker\nDESCRIPTION: JSON configuration for setting up the Slack MCP Server using Docker in VS Code. It includes input prompts for the Slack Bot Token and Team ID, as well as the Docker-based server configuration.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/slack/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"slack_bot_token\",\n        \"description\": \"Slack Bot Token (starts with xoxb-)\",\n        \"password\": true\n      },\n      {\n        \"type\": \"promptString\",\n        \"id\": \"slack_team_id\",\n        \"description\": \"Slack Team ID (starts with T)\"\n      }\n    ],\n    \"servers\": {\n      \"slack\": {\n        \"command\": \"docker\",\n        \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/slack\"],\n        \"env\": {\n          \"SLACK_BOT_TOKEN\": \"${input:slack_bot_token}\",\n          \"SLACK_TEAM_ID\": \"${input:slack_team_id}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Puppeteer Launch Options with Environment Variables\nDESCRIPTION: JSON configuration that demonstrates how to customize Puppeteer's browser behavior using environment variables in the MCP configuration. This example sets the browser to non-headless mode and specifies a custom Chrome executable path.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/puppeteer/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mcp-puppeteer\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-puppeteer\"],\n      \"env\": {\n        \"PUPPETEER_LAUNCH_OPTIONS\": \"{ \\\"headless\\\": false, \\\"executablePath\\\": \\\"C:/Program Files/Google/Chrome/Application/chrome.exe\\\", \\\"args\\\": [] }\",\n        \"ALLOW_DANGEROUS\": \"true\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Server with Docker in VS Code\nDESCRIPTION: JSON configuration for adding the memory server to VS Code settings using Docker. This setup mounts a volume for persistent storage and runs the memory server container.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/memory/README.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"servers\": {\n      \"memory\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"-i\",\n          \"-v\",\n          \"claude-memory:/app/dist\",\n          \"--rm\",\n          \"mcp/memory\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing System Timezone for MCP Server Time\nDESCRIPTION: JSON configuration example for overriding the default system timezone detection in MCP Server Time.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/time/README.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"command\": \"python\",\n  \"args\": [\"-m\", \"mcp_server_time\", \"--local-timezone=America/New_York\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Puppeteer Launch Options with Tool Call Arguments\nDESCRIPTION: JSON payload for customizing Puppeteer's browser behavior through parameters passed to the puppeteer_navigate tool. This example sets the browser to non-headless mode and configures a custom viewport size.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/puppeteer/README.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\": \"https://example.com\",\n  \"launchOptions\": {\n    \"headless\": false,\n    \"defaultViewport\": { \"width\": 1280, \"height\": 720 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack MCP Server for Claude Desktop using Docker\nDESCRIPTION: JSON configuration for setting up the Slack MCP Server using Docker in the Claude Desktop application. It specifies the Docker command, arguments, and required environment variables.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/slack/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"slack\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"SLACK_BOT_TOKEN\",\n        \"-e\",\n        \"SLACK_TEAM_ID\",\n        \"-e\",\n        \"SLACK_CHANNEL_IDS\",\n        \"mcp/slack\"\n      ],\n      \"env\": {\n        \"SLACK_BOT_TOKEN\": \"xoxb-your-bot-token\",\n        \"SLACK_TEAM_ID\": \"T01234567\",\n        \"SLACK_CHANNEL_IDS\": \"C01234567, C76543210\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite MCP Server with uv for VS Code\nDESCRIPTION: JSON configuration for adding the SQLite MCP server to VS Code using uv. It includes interactive input for the database path and the necessary command and arguments to run the server.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/sqlite/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"db_path\",\n        \"description\": \"SQLite Database Path\",\n        \"default\": \"${workspaceFolder}/db.sqlite\"\n      }\n    ],\n    \"servers\": {\n      \"sqlite\": {\n        \"command\": \"uvx\",\n        \"args\": [\n          \"mcp-server-sqlite\",\n          \"--db-path\",\n          \"${input:db_path}\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Image Generation Tool in JavaScript\nDESCRIPTION: JavaScript example demonstrating how to use the 'generate_image' tool with the EverArt MCP Server client.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/everart/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await client.callTool({\n  name: \"generate_image\",\n  arguments: {\n    prompt: \"A cat sitting elegantly\",\n    model: \"7000\",\n    image_count: 1\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite MCP Server with uv for Claude Desktop\nDESCRIPTION: Configuration snippet for adding the SQLite MCP server to Claude Desktop using uv. It specifies the command and arguments needed to run the server with a custom database path.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/sqlite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Add the server to your claude_desktop_config.json\n\"mcpServers\": {\n  \"sqlite\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"--directory\",\n      \"parent_of_servers_repo/servers/src/sqlite\",\n      \"run\",\n      \"mcp-server-sqlite\",\n      \"--db-path\",\n      \"~/test.db\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for Image Generation Tool in TypeScript\nDESCRIPTION: TypeScript interface defining the parameters for the 'generate_image' tool, including prompt, model, and image count.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/everart/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  prompt: string,       // Image description\n  model?: string,       // Model ID (default: \"207910310772879360\")\n  image_count?: number  // Number of images (default: 1)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL MCP Server with NPX in Claude Desktop\nDESCRIPTION: JSON configuration for setting up the PostgreSQL MCP server using NPX in Claude Desktop. This configuration installs and runs the server directly via npm, connecting to a specified database.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/postgres/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"postgres\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-postgres\",\n        \"postgresql://localhost/mydb\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging MCP Server Fetch with Inspector\nDESCRIPTION: Commands to debug the MCP Server Fetch using the MCP inspector with different installation methods.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/fetch/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx @modelcontextprotocol/inspector uvx mcp-server-fetch\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd path/to/servers/src/fetch\nnpx @modelcontextprotocol/inspector uv run mcp-server-fetch\n```\n\n----------------------------------------\n\nTITLE: Configuring NPX for GitLab MCP Server\nDESCRIPTION: JSON configuration for NPX setup of the GitLab MCP server. Defines input parameters for GitLab token and API URL, and specifies server configuration with environment variable mapping.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/gitlab/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"gitlab_token\",\n        \"description\": \"GitLab Personal Access Token\",\n        \"password\": true\n      },\n      {\n        \"type\": \"promptString\",\n        \"id\": \"gitlab_url\",\n        \"description\": \"GitLab API URL (optional)\",\n        \"default\": \"https://gitlab.com/api/v4\"\n      }\n    ],\n    \"servers\": {\n      \"gitlab\": {\n        \"command\": \"npx\",\n        \"args\": [\n          \"-y\",\n          \"@modelcontextprotocol/server-gitlab\"\n        ],\n        \"env\": {\n          \"GITLAB_PERSONAL_ACCESS_TOKEN\": \"${input:gitlab_token}\",\n          \"GITLAB_API_URL\": \"${input:gitlab_url}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis MCP Server for Claude Desktop with Docker\nDESCRIPTION: JSON configuration for setting up the Redis MCP server using Docker in the Claude Desktop app. It specifies the command and arguments needed to run the server, including the Redis URL.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/redis/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"redis\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \n        \"-i\", \n        \"--rm\", \n        \"mcp/redis\", \n        \"redis://host.docker.internal:6379\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NPX Configuration for GitHub MCP Server in VS Code\nDESCRIPTION: JSON configuration for manually setting up the GitHub MCP server using NPX in VS Code. This snippet includes an interactive prompt for the GitHub token and configures the NPX command to run the server.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/github/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"github_token\",\n        \"description\": \"GitHub Personal Access Token\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"github\": {\n        \"command\": \"npx\",\n        \"args\": [\n          \"-y\",\n          \"@modelcontextprotocol/server-github\"\n        ],\n        \"env\": {\n          \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"${input:github_token}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code NPX Configuration Setup\nDESCRIPTION: Detailed VS Code configuration for the Google Maps MCP server using NPX, including input prompts for the API key and server configuration settings.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/google-maps/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"maps_api_key\",\n        \"description\": \"Google Maps API Key\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"google-maps\": {\n        \"command\": \"npx\",\n        \"args\": [\"-y\", \"@modelcontextprotocol/server-google-maps\"],\n        \"env\": {\n          \"GOOGLE_MAPS_API_KEY\": \"${input:maps_api_key}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Docker Configuration for Sequential Thinking Server\nDESCRIPTION: JSON configuration for setting up the Sequential Thinking server using Docker in VS Code settings or workspace configuration.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/sequentialthinking/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"servers\": {\n      \"sequential-thinking\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"-i\",\n          \"mcp/sequentialthinking\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Knowledge Base Retrieval Server with NPX in Claude Desktop\nDESCRIPTION: JSON configuration for setting up the AWS Knowledge Base Retrieval MCP server using NPX in Claude Desktop. This configuration includes the NPX command, package name, and environment variables for AWS credentials.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/aws-kb-retrieval-server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"aws-kb-retrieval\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-aws-kb-retrieval\"],\n      \"env\": {\n        \"AWS_ACCESS_KEY_ID\": \"YOUR_ACCESS_KEY_HERE\",\n        \"AWS_SECRET_ACCESS_KEY\": \"YOUR_SECRET_ACCESS_KEY_HERE\",\n        \"AWS_REGION\": \"YOUR_AWS_REGION_HERE\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis MCP Server for VS Code with NPX\nDESCRIPTION: JSON configuration for setting up the Redis MCP server using NPX in VS Code. It includes input prompts for the Redis URL and specifies the command and arguments needed to run the server.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/redis/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"redis_url\",\n        \"description\": \"Redis URL (e.g. redis://localhost:6379)\"\n      }\n    ],\n    \"servers\": {\n      \"redis\": {\n        \"command\": \"npx\",\n        \"args\": [\"-y\", \"@modelcontextprotocol/server-redis\"],\n        \"env\": {\n          \"REDIS_URL\": \"${input:redis_url}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub MCP Server with Docker in Claude Desktop\nDESCRIPTION: JSON configuration for setting up the GitHub MCP server using Docker in Claude Desktop. This snippet shows how to configure the MCP server with your GitHub Personal Access Token as an environment variable.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/github/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"mcp/github\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequential Thinking Server with Docker in Claude Desktop\nDESCRIPTION: JSON configuration for setting up the Sequential Thinking server using Docker in Claude Desktop environment.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/sequentialthinking/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"sequentialthinking\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"mcp/sequentialthinking\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack MCP Server for VS Code using NPX\nDESCRIPTION: JSON configuration for setting up the Slack MCP Server using NPX in VS Code. It includes input prompts for the Slack Bot Token and Team ID, as well as the server configuration.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/slack/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"slack_bot_token\",\n        \"description\": \"Slack Bot Token (starts with xoxb-)\",\n        \"password\": true\n      },\n      {\n        \"type\": \"promptString\",\n        \"id\": \"slack_team_id\",\n        \"description\": \"Slack Team ID (starts with T)\"\n      }\n    ],\n    \"servers\": {\n      \"slack\": {\n        \"command\": \"npx\",\n        \"args\": [\"-y\", \"@modelcontextprotocol/server-slack\"],\n        \"env\": {\n          \"SLACK_BOT_TOKEN\": \"${input:slack_bot_token}\",\n          \"SLACK_TEAM_ID\": \"${input:slack_team_id}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code NPX Configuration for Sequential Thinking Server\nDESCRIPTION: JSON configuration for setting up the Sequential Thinking server using NPX in VS Code settings or workspace configuration.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/sequentialthinking/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"servers\": {\n      \"sequential-thinking\": {\n        \"command\": \"npx\",\n        \"args\": [\n          \"-y\",\n          \"@modelcontextprotocol/server-sequential-thinking\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MCP Server Fetch with Pip\nDESCRIPTION: Commands to install the MCP Server Fetch package using pip and run it as a Python module.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/fetch/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install mcp-server-fetch\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m mcp_server_fetch\n```\n\n----------------------------------------\n\nTITLE: NPX Server Configuration for Desktop App\nDESCRIPTION: JSON configuration for integrating the Google Drive server with a desktop application using NPX. Specifies the package installation and execution parameters.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/gdrive/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"gdrive\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-gdrive\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Sentry using uvx in Claude Desktop\nDESCRIPTION: JSON configuration for setting up the Sentry MCP server using uvx in Claude Desktop. It specifies the command and arguments needed to run the server, including the authentication token.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/sentry/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"mcpServers\": {\n  \"sentry\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-sentry\", \"--auth-token\", \"YOUR_SENTRY_TOKEN\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Docker Configuration for PostgreSQL MCP Server\nDESCRIPTION: JSON configuration for VS Code settings that sets up the PostgreSQL MCP server using Docker. This configuration includes interactive input prompting for the database URL and container configuration.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/postgres/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"pg_url\",\n        \"description\": \"PostgreSQL URL (e.g. postgresql://user:pass@host.docker.internal:5432/mydb)\"\n      }\n    ],\n    \"servers\": {\n      \"postgres\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"-i\",\n          \"--rm\",\n          \"mcp/postgres\",\n          \"${input:pg_url}\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code NPX Configuration\nDESCRIPTION: JSON configuration for VS Code settings to integrate the Google Drive server using NPX. Includes environment variable for credentials path.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/gdrive/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"servers\": {\n      \"gdrive\": {\n        \"command\": \"npx\",\n        \"args\": [\n          \"-y\",\n          \"@modelcontextprotocol/server-gdrive\"\n        ],\n        \"env\": {\n          \"GDRIVE_CREDENTIALS_PATH\": \"/path/to/.gdrive-server-credentials.json\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Sentry using pip installation in Claude Desktop\nDESCRIPTION: JSON configuration for setting up the Sentry MCP server using a pip installation in Claude Desktop. It specifies the Python command and module to run, along with the authentication token.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/sentry/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"mcpServers\": {\n  \"sentry\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_sentry\", \"--auth-token\", \"YOUR_SENTRY_TOKEN\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer MCP Server with Docker for Claude Desktop\nDESCRIPTION: JSON configuration for setting up the Puppeteer MCP server using Docker in Claude Desktop. This configuration runs Puppeteer in headless mode inside a Docker container.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/puppeteer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"--init\",\n        \"-e\",\n        \"DOCKER_CONTAINER=true\",\n        \"mcp/puppeteer\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite MCP Server with Docker for Claude Desktop\nDESCRIPTION: Configuration snippet for adding the SQLite MCP server to Claude Desktop using Docker. It specifies the command and arguments needed to run the server in a Docker container with volume mounting for database persistence.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/sqlite/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n# Add the server to your claude_desktop_config.json\n\"mcpServers\": {\n  \"sqlite\": {\n    \"command\": \"docker\",\n    \"args\": [\n      \"run\",\n      \"--rm\",\n      \"-i\",\n      \"-v\",\n      \"mcp-test:/mcp\",\n      \"mcp/sqlite\",\n      \"--db-path\",\n      \"/mcp/test.db\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub MCP Server with NPX in Claude Desktop\nDESCRIPTION: JSON configuration for setting up the GitHub MCP server using NPX in Claude Desktop. This snippet demonstrates how to use the NPX package manager to run the GitHub MCP server with your Personal Access Token.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/github/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-github\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer MCP Server with NPX for Claude Desktop\nDESCRIPTION: JSON configuration for setting up the Puppeteer MCP server using NPX in Claude Desktop. This configuration opens a browser window as it doesn't use headless mode.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/puppeteer/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-puppeteer\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Environment for Claude Desktop\nDESCRIPTION: Configuration setup for running the Google Maps MCP server using Docker in Claude Desktop. Specifies the Docker command and environment variables including the API key.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/google-maps/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"google-maps\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GOOGLE_MAPS_API_KEY\",\n        \"mcp/google-maps\"\n      ],\n      \"env\": {\n        \"GOOGLE_MAPS_API_KEY\": \"<YOUR_API_KEY>\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Configuration for GitHub MCP Server in VS Code\nDESCRIPTION: JSON configuration for manually setting up the GitHub MCP server using Docker in VS Code. This snippet includes an interactive prompt for entering your GitHub Personal Access Token securely.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/github/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"github_token\",\n        \"description\": \"GitHub Personal Access Token\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"github\": {\n        \"command\": \"docker\",\n        \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/github\"],\n        \"env\": {\n          \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"${input:github_token}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite MCP Server with Docker for VS Code\nDESCRIPTION: JSON configuration for adding the SQLite MCP server to VS Code using Docker. It includes interactive input for the database path within the container and the necessary Docker command and arguments for running the server.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/sqlite/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"db_path\",\n        \"description\": \"SQLite Database Path (within container)\",\n        \"default\": \"/mcp/db.sqlite\"\n      }\n    ],\n    \"servers\": {\n      \"sqlite\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"-i\",\n          \"--rm\",\n          \"-v\",\n          \"mcp-sqlite:/mcp\",\n          \"mcp/sqlite\",\n          \"--db-path\",\n          \"${input:db_path}\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging MCP Server Time with Inspector\nDESCRIPTION: Commands to debug the MCP Server Time using the MCP inspector for different installation methods.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/time/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx @modelcontextprotocol/inspector uvx mcp-server-time\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd path/to/servers/src/time\nnpx @modelcontextprotocol/inspector uv run mcp-server-time\n```\n\n----------------------------------------\n\nTITLE: Docker Server Configuration for Desktop App\nDESCRIPTION: JSON configuration for integrating the Google Drive server with a desktop application using Docker. Specifies the container setup with volume mounting and environment variables.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/gdrive/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"gdrive\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"-v\", \"mcp-gdrive:/gdrive-server\", \"-e\", \"GDRIVE_CREDENTIALS_PATH=/gdrive-server/credentials.json\", \"mcp/gdrive\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NPX MCP Server in Claude Desktop\nDESCRIPTION: JSON configuration for setting up the Brave Search MCP server using NPX in Claude Desktop. Specifies the package and environment variables needed.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/brave-search/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"brave-search\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-brave-search\"\n      ],\n      \"env\": {\n        \"BRAVE_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude.app with Docker for MCP Fetch Server\nDESCRIPTION: JSON configuration for adding the MCP Fetch Server to Claude.app using Docker.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/fetch/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"mcpServers\": {\n  \"fetch\": {\n    \"command\": \"docker\",\n    \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/fetch\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Sentry using Docker in Claude Desktop\nDESCRIPTION: JSON configuration for setting up the Sentry MCP server using Docker in Claude Desktop. It specifies the Docker command and arguments needed to run the server container, including the authentication token.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/sentry/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"mcpServers\": {\n  \"sentry\": {\n    \"command\": \"docker\",\n    \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/sentry\", \"--auth-token\", \"YOUR_SENTRY_TOKEN\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code NPX Configuration\nDESCRIPTION: VS Code settings for NPX-based Brave Search MCP server setup, including secure API key input handling.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/brave-search/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"brave_api_key\",\n        \"description\": \"Brave Search API Key\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"brave-search\": {\n        \"command\": \"npx\",\n        \"args\": [\"-y\", \"@modelcontextprotocol/server-brave-search\"],\n        \"env\": {\n          \"BRAVE_API_KEY\": \"${input:brave_api_key}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Sentry using Docker in VS Code\nDESCRIPTION: JSON configuration for setting up the Sentry MCP server using Docker in VS Code. It includes input prompts for the authentication token and specifies the Docker command and environment variables needed to run the server container.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/sentry/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"auth_token\",\n        \"description\": \"Sentry Auth Token\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"sentry\": {\n        \"command\": \"docker\",\n        \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/sentry\"],\n        \"env\": {\n          \"SENTRY_AUTH_TOKEN\": \"${input:auth_token}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Setup for Claude Desktop\nDESCRIPTION: JSON configuration for setting up GitLab MCP Server using Docker in Claude Desktop. Includes environment variables for GitLab token and API URL.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/gitlab/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": { \n    \"gitlab\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\",\n        \"GITLAB_PERSONAL_ACCESS_TOKEN\",\n        \"-e\",\n        \"GITLAB_API_URL\",\n        \"mcp/gitlab\"\n      ],\n      \"env\": {\n        \"GITLAB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\",\n        \"GITLAB_API_URL\": \"https://gitlab.com/api/v4\" // Optional, for self-hosted instances\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL MCP Server with Docker in Claude Desktop\nDESCRIPTION: JSON configuration for setting up the PostgreSQL MCP server using Docker in Claude Desktop. This configuration specifies container settings and database connection parameters, with special consideration for macOS hosts.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/postgres/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"postgres\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \n        \"-i\", \n        \"--rm\", \n        \"mcp/postgres\", \n        \"postgresql://host.docker.internal:5432/mydb\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server Time for Claude.app using uvx\nDESCRIPTION: JSON configuration for setting up the MCP Server Time in Claude.app using uvx.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/time/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"mcpServers\": {\n  \"time\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-time\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Docker Configuration Setup\nDESCRIPTION: Detailed VS Code configuration for the Google Maps MCP server using Docker, including input prompts for the API key and Docker-specific server settings.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/google-maps/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"maps_api_key\",\n        \"description\": \"Google Maps API Key\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"google-maps\": {\n        \"command\": \"docker\",\n        \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/google-maps\"],\n        \"env\": {\n          \"GOOGLE_MAPS_API_KEY\": \"${input:maps_api_key}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code NPX Configuration for PostgreSQL MCP Server\nDESCRIPTION: JSON configuration for VS Code settings that sets up the PostgreSQL MCP server using NPX. This configuration prompts for database connection details and installs the server package from npm.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/postgres/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"pg_url\",\n        \"description\": \"PostgreSQL URL (e.g. postgresql://user:pass@localhost:5432/mydb)\"\n      }\n    ],\n    \"servers\": {\n      \"postgres\": {\n        \"command\": \"npx\",\n        \"args\": [\n          \"-y\",\n          \"@modelcontextprotocol/server-postgres\",\n          \"${input:pg_url}\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer MCP Server with NPX for VS Code\nDESCRIPTION: JSON configuration for setting up the Puppeteer MCP server using NPX in VS Code. This configuration should be added to the User Settings (JSON) file or a .vscode/mcp.json file in the workspace.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/puppeteer/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"servers\": {\n      \"puppeteer\": {\n        \"command\": \"npx\",\n        \"args\": [\"-y\", \"@modelcontextprotocol/server-puppeteer\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server Time for Claude.app using Docker\nDESCRIPTION: JSON configuration for setting up the MCP Server Time in Claude.app using Docker.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/time/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"mcpServers\": {\n  \"time\": {\n    \"command\": \"docker\",\n    \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/time\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EverArt MCP Server for Claude Desktop with Docker\nDESCRIPTION: JSON configuration for using EverArt MCP Server with Claude Desktop using Docker.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/everart/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"everart\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"-e\", \"EVERART_API_KEY\", \"mcp/everart\"],\n      \"env\": {\n        \"EVERART_API_KEY\": \"your_key_here\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Knowledge Base Retrieval Server with Docker in Claude Desktop\nDESCRIPTION: JSON configuration for setting up the AWS Knowledge Base Retrieval MCP server using Docker in Claude Desktop. This configuration specifies the Docker command, required arguments, and environment variables for AWS authentication.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/aws-kb-retrieval-server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"aws-kb-retrieval\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"AWS_ACCESS_KEY_ID\",\n        \"-e\",\n        \"AWS_SECRET_ACCESS_KEY\",\n        \"-e\",\n        \"AWS_REGION\",\n        \"mcp/aws-kb-retrieval-server\"\n      ],\n      \"env\": {\n        \"AWS_ACCESS_KEY_ID\": \"YOUR_ACCESS_KEY_HERE\",\n        \"AWS_SECRET_ACCESS_KEY\": \"YOUR_SECRET_ACCESS_KEY_HERE\",\n        \"AWS_REGION\": \"YOUR_AWS_REGION_HERE\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker MCP Server in Claude Desktop\nDESCRIPTION: JSON configuration for setting up the Brave Search MCP server using Docker in Claude Desktop. Requires a valid Brave API key for authentication.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/brave-search/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"brave-search\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"BRAVE_API_KEY\",\n        \"mcp/brave-search\"\n      ],\n      \"env\": {\n        \"BRAVE_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server Time for Claude.app using pip installation\nDESCRIPTION: JSON configuration for setting up the MCP Server Time in Claude.app using pip installation.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/time/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"mcpServers\": {\n  \"time\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_time\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis MCP Server for VS Code with Docker\nDESCRIPTION: JSON configuration for setting up the Redis MCP server using Docker in VS Code. It includes input prompts for the Redis URL and specifies the command and arguments needed to run the server in a Docker container.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/redis/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"redis_url\",\n        \"description\": \"Redis URL (e.g. redis://host.docker.internal:6379)\"\n      }\n    ],\n    \"servers\": {\n      \"redis\": {\n        \"command\": \"docker\",\n        \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/redis\"],\n        \"env\": {\n          \"REDIS_URL\": \"${input:redis_url}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Installation Configuration with NPX for VS Code\nDESCRIPTION: JSON configuration for manually setting up the AWS Knowledge Base Retrieval MCP server in VS Code using NPX. This setup includes input prompts for AWS credentials and configures the server with those inputs.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/aws-kb-retrieval-server/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"aws_access_key\",\n        \"description\": \"AWS Access Key ID\",\n        \"password\": true\n      },\n      {\n        \"type\": \"promptString\",\n        \"id\": \"aws_secret_key\",\n        \"description\": \"AWS Secret Access Key\",\n        \"password\": true\n      },\n      {\n        \"type\": \"promptString\",\n        \"id\": \"aws_region\",\n        \"description\": \"AWS Region\"\n      }\n    ],\n    \"servers\": {\n      \"aws-kb-retrieval\": {\n        \"command\": \"npx\",\n        \"args\": [\"-y\", \"@modelcontextprotocol/server-aws-kb-retrieval\"],\n        \"env\": {\n          \"AWS_ACCESS_KEY_ID\": \"${input:aws_access_key}\",\n          \"AWS_SECRET_ACCESS_KEY\": \"${input:aws_secret_key}\",\n          \"AWS_REGION\": \"${input:aws_region}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EverArt MCP Server for VS Code with Docker\nDESCRIPTION: JSON configuration for using EverArt MCP Server in VS Code with Docker, including user input for the API key.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/everart/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"everart_api_key\",\n        \"description\": \"EverArt API Key\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"everart\": {\n        \"command\": \"docker\",\n        \"args\": [\"run\", \"-i\", \"--rm\", \"-e\", \"EVERART_API_KEY\", \"mcp/everart\"],\n        \"env\": {\n          \"EVERART_API_KEY\": \"${input:everart_api_key}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server Time for Zed using uvx\nDESCRIPTION: JSON configuration for setting up the MCP Server Time in Zed settings using uvx.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/time/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"context_servers\": [\n  \"mcp-server-time\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-time\"]\n  }\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code with uvx for MCP Fetch Server\nDESCRIPTION: JSON configuration for adding the MCP Fetch Server to VS Code using uvx.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/fetch/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"servers\": {\n      \"fetch\": {\n        \"command\": \"uvx\",\n        \"args\": [\"mcp-server-fetch\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EverArt MCP Server for Claude Desktop with NPX\nDESCRIPTION: JSON configuration for using EverArt MCP Server with Claude Desktop using NPX.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/everart/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"everart\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-everart\"],\n      \"env\": {\n        \"EVERART_API_KEY\": \"your_key_here\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Setup for VS Code\nDESCRIPTION: JSON configuration for setting up GitLab MCP Server using Docker in VS Code. Includes input prompts for token and API URL configuration.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/gitlab/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"gitlab_token\",\n        \"description\": \"GitLab Personal Access Token\",\n        \"password\": true\n      },\n      {\n        \"type\": \"promptString\",\n        \"id\": \"gitlab_url\",\n        \"description\": \"GitLab API URL (optional)\",\n        \"default\": \"https://gitlab.com/api/v4\"\n      }\n    ],\n    \"servers\": {\n      \"gitlab\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"-i\",\n          \"mcp/gitlab\"\n        ],\n        \"env\": {\n          \"GITLAB_PERSONAL_ACCESS_TOKEN\": \"${input:gitlab_token}\",\n          \"GITLAB_API_URL\": \"${input:gitlab_url}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server Time for VS Code using uvx\nDESCRIPTION: JSON configuration for setting up the MCP Server Time in VS Code settings using uvx.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/time/README.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"servers\": {\n      \"time\": {\n        \"command\": \"uvx\",\n        \"args\": [\"mcp-server-time\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EverArt MCP Server for VS Code with NPX\nDESCRIPTION: JSON configuration for using EverArt MCP Server in VS Code with NPX, including user input for the API key.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/everart/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"everart_api_key\",\n        \"description\": \"EverArt API Key\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"everart\": {\n        \"command\": \"npx\",\n        \"args\": [\"-y\", \"@modelcontextprotocol/server-everart\"],\n        \"env\": {\n          \"EVERART_API_KEY\": \"${input:everart_api_key}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code with Docker for MCP Fetch Server\nDESCRIPTION: JSON configuration for adding the MCP Fetch Server to VS Code using Docker.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/fetch/README.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"servers\": {\n      \"fetch\": {\n        \"command\": \"docker\",\n        \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/fetch\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Slack MCP Server\nDESCRIPTION: Bash command to build a Docker image for the Slack MCP Server. This command uses the Dockerfile located in the src/slack directory and tags the image as mcp/slack.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/slack/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t mcp/slack -f src/slack/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Manual Installation Configuration with Docker for VS Code\nDESCRIPTION: JSON configuration for manually setting up the AWS Knowledge Base Retrieval MCP server in VS Code using Docker. This configuration includes input prompts for AWS credentials and Docker runtime configuration.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/aws-kb-retrieval-server/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"aws_access_key\",\n        \"description\": \"AWS Access Key ID\",\n        \"password\": true\n      },\n      {\n        \"type\": \"promptString\",\n        \"id\": \"aws_secret_key\",\n        \"description\": \"AWS Secret Access Key\",\n        \"password\": true\n      },\n      {\n        \"type\": \"promptString\",\n        \"id\": \"aws_region\",\n        \"description\": \"AWS Region\"\n      }\n    ],\n    \"servers\": {\n      \"aws-kb-retrieval\": {\n        \"command\": \"docker\",\n        \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/aws-kb-retrieval-server\"],\n        \"env\": {\n          \"AWS_ACCESS_KEY_ID\": \"${input:aws_access_key}\",\n          \"AWS_SECRET_ACCESS_KEY\": \"${input:aws_secret_key}\",\n          \"AWS_REGION\": \"${input:aws_region}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude.app with Pip for MCP Fetch Server\nDESCRIPTION: JSON configuration for adding the MCP Fetch Server to Claude.app using a pip installation.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/fetch/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"mcpServers\": {\n  \"fetch\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_fetch\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NPX-based Filesystem MCP Server for Claude Desktop\nDESCRIPTION: JSON configuration for adding the filesystem MCP server to Claude Desktop using NPX. This configuration specifies the directories that the server is allowed to access.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/filesystem/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-filesystem\",\n        \"/Users/username/Desktop\",\n        \"/path/to/other/allowed/dir\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MCP Server Time with PIP\nDESCRIPTION: Commands to install the MCP Server Time package using pip and run it as a script.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/time/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install mcp-server-time\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m mcp_server_time\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude.app with uvx for MCP Fetch Server\nDESCRIPTION: JSON configuration for adding the MCP Fetch Server to Claude.app using uvx.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/fetch/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"mcpServers\": {\n  \"fetch\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-fetch\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command\nDESCRIPTION: Command for building the Docker image for the Google Maps MCP server.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/google-maps/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t mcp/google-maps -f src/google-maps/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: VS Code Docker Configuration\nDESCRIPTION: JSON configuration for VS Code settings to integrate the Google Drive server using Docker. Includes volume mounting and environment configuration.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/gdrive/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"servers\": {\n      \"gdrive\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"-i\",\n          \"--rm\",\n          \"-v\",\n          \"mcp-gdrive:/gdrive-server\",\n          \"-e\",\n          \"GDRIVE_CREDENTIALS_PATH=/gdrive-server/credentials.json\",\n          \"mcp/gdrive\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NPX-based Filesystem MCP Server for VS Code\nDESCRIPTION: JSON configuration for VS Code settings to add the filesystem MCP server using NPX. The configuration specifies the workspace folder as the directory that the server is allowed to access.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/filesystem/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"servers\": {\n      \"filesystem\": {\n        \"command\": \"npx\",\n        \"args\": [\n          \"-y\",\n          \"@modelcontextprotocol/server-filesystem\",\n          \"${workspaceFolder}\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server in VS Code with NPX\nDESCRIPTION: JSON configuration snippet for adding the Everything MCP server to VS Code settings. Shows how to configure the server using the npx package manager in VS Code settings or workspace configuration.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/everything/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"servers\": {\n      \"everything\": {\n        \"command\": \"npx\",\n        \"args\": [\"-y\", \"@modelcontextprotocol/server-everything\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NPX Setup for Claude Desktop\nDESCRIPTION: JSON configuration for setting up GitLab MCP Server using NPX in Claude Desktop. Includes environment variables for GitLab token and API URL.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/gitlab/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"gitlab\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-gitlab\"\n      ],\n      \"env\": {\n        \"GITLAB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\",\n        \"GITLAB_API_URL\": \"https://gitlab.com/api/v4\" // Optional, for self-hosted instances\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker-based Filesystem MCP Server for VS Code\nDESCRIPTION: JSON configuration for VS Code settings to add the filesystem MCP server using Docker. The configuration mounts the workspace folder to the container and allows the server to access it.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/filesystem/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"servers\": {\n      \"filesystem\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"-i\",\n          \"--rm\",\n          \"--mount\", \"type=bind,src=${workspaceFolder},dst=/projects/workspace\",\n          \"mcp/filesystem\",\n          \"/projects\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Docker Configuration\nDESCRIPTION: Detailed VS Code settings for Docker-based Brave Search MCP server setup, including input configuration for the API key.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/brave-search/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"brave_api_key\",\n        \"description\": \"Brave Search API Key\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"brave-search\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"-i\",\n          \"--rm\",\n          \"-e\",\n          \"BRAVE_API_KEY\",\n          \"mcp/brave-search\"\n        ],\n        \"env\": {\n          \"BRAVE_API_KEY\": \"${input:brave_api_key}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker-based Filesystem MCP Server for Claude Desktop\nDESCRIPTION: JSON configuration for adding the filesystem MCP server to Claude Desktop using Docker. This configuration mounts specific directories to /projects, optionally with read-only access, and launches the server container.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/filesystem/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"--mount\", \"type=bind,src=/Users/username/Desktop,dst=/projects/Desktop\",\n        \"--mount\", \"type=bind,src=/path/to/other/allowed/dir,dst=/projects/other/allowed/dir,ro\",\n        \"--mount\", \"type=bind,src=/path/to/file.txt,dst=/projects/path/to/file.txt\",\n        \"mcp/filesystem\",\n        \"/projects\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server Time for Zed using pip installation\nDESCRIPTION: JSON configuration for setting up the MCP Server Time in Zed settings using pip installation.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/time/README.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"context_servers\": {\n  \"mcp-server-time\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_time\"]\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring NPX Environment for Claude Desktop\nDESCRIPTION: Configuration setup for running the Google Maps MCP server using NPX in Claude Desktop. Defines the NPX command and required environment variables.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/google-maps/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"google-maps\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-google-maps\"],\n      \"env\": {\n        \"GOOGLE_MAPS_API_KEY\": \"<YOUR_API_KEY>\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Sentry using pip installation in Zed\nDESCRIPTION: JSON configuration for setting up the Sentry MCP server using a pip installation in Zed editor. It specifies the Python command, module, and authentication token needed to run the server.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/sentry/README.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"context_servers\": {\n  \"mcp-server-sentry\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_sentry\", \"--auth-token\", \"YOUR_SENTRY_TOKEN\"]\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer MCP Server with Docker for VS Code\nDESCRIPTION: JSON configuration for setting up the Puppeteer MCP server using Docker in VS Code. This configuration runs Puppeteer in headless mode inside a Docker container.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/puppeteer/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"servers\": {\n      \"puppeteer\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"-i\",\n          \"--rm\",\n          \"--init\",\n          \"-e\",\n          \"DOCKER_CONTAINER=true\",\n          \"mcp/puppeteer\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EverArt MCP Server with npm\nDESCRIPTION: Commands to install the EverArt MCP Server using npm and set the API key as an environment variable.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/everart/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nexport EVERART_API_KEY=your_key_here\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis MCP Server for Claude Desktop with NPX\nDESCRIPTION: JSON configuration for setting up the Redis MCP server using NPX in the Claude Desktop app. It specifies the command and arguments needed to run the server, including the Redis URL.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/redis/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"redis\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-redis\",\n        \"redis://localhost:6379\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Authentication Command for Google Drive Server\nDESCRIPTION: Command to authenticate the Docker-based Google Drive server using OAuth credentials. Mounts the OAuth keys file and creates a volume for storing credentials.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/gdrive/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -i --rm --mount type=bind,source=/path/to/gcp-oauth.keys.json,target=/gcp-oauth.keys.json -v mcp-gdrive:/gdrive-server -e GDRIVE_OAUTH_PATH=/gcp-oauth.keys.json -e \"GDRIVE_CREDENTIALS_PATH=/gdrive-server/credentials.json\" -p 3000:3000 mcp/gdrive auth\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Sentry using uvx in Zed\nDESCRIPTION: JSON configuration for setting up the Sentry MCP server using uvx in Zed editor. It specifies the command path, arguments, and authentication token needed to run the server.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/sentry/README.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"context_servers\": [\n  \"mcp-server-sentry\": {\n    \"command\": {\n      \"path\": \"uvx\",\n      \"args\": [\"mcp-server-sentry\", \"--auth-token\", \"YOUR_SENTRY_TOKEN\"]\n    }\n  }\n],\n```\n\n----------------------------------------\n\nTITLE: Building Memory Server Docker Image\nDESCRIPTION: Shell command for building the Docker image for the memory server. This command builds the image using the provided Dockerfile and tags it as 'mcp/memory'.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/memory/README.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t mcp/memory -f src/memory/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Sentry using uvx in VS Code\nDESCRIPTION: JSON configuration for setting up the Sentry MCP server using uvx in VS Code. It includes input prompts for the authentication token and specifies the command and environment variables needed to run the server.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/sentry/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"auth_token\",\n        \"description\": \"Sentry Auth Token\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"sentry\": {\n        \"command\": \"uvx\",\n        \"args\": [\"mcp-server-sentry\"],\n        \"env\": {\n          \"SENTRY_AUTH_TOKEN\": \"${input:auth_token}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for PostgreSQL MCP Server\nDESCRIPTION: Shell command for building a Docker image for the PostgreSQL MCP server. This command builds the image with the tag 'mcp/postgres' using the specified Dockerfile.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/postgres/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t mcp/postgres -f src/postgres/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequential Thinking Server with NPX in Claude Desktop\nDESCRIPTION: JSON configuration for setting up the Sequential Thinking server using NPX package manager in Claude Desktop environment.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/sequentialthinking/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"sequential-thinking\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-sequential-thinking\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building GitLab MCP Docker Container\nDESCRIPTION: Docker build command for creating the GitLab MCP server container image using the specified Dockerfile.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/gitlab/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t vonwig/gitlab:mcp -f src/gitlab/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack MCP Server for Claude Desktop using NPX\nDESCRIPTION: JSON configuration for setting up the Slack MCP Server using NPX in the Claude Desktop application. It includes the command, arguments, and required environment variables.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/slack/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"slack\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-slack\"\n      ],\n      \"env\": {\n        \"SLACK_BOT_TOKEN\": \"xoxb-your-bot-token\",\n        \"SLACK_TEAM_ID\": \"T01234567\",\n        \"SLACK_CHANNEL_IDS\": \"C01234567, C76543210\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for MCP Server Time\nDESCRIPTION: Commands to build a Docker image for the MCP Server Time.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/time/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncd src/time\ndocker build -t mcp/time .\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server Time for VS Code using Docker\nDESCRIPTION: JSON configuration for setting up the MCP Server Time in VS Code settings using Docker.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/time/README.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcp\": {\n    \"servers\": {\n      \"time\": {\n        \"command\": \"docker\",\n        \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/time\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command\nDESCRIPTION: Command for building the Brave Search MCP Docker image locally.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/brave-search/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t mcp/brave-search:latest -f src/brave-search/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Building EverArt MCP Server Docker Image\nDESCRIPTION: Shell command to build the Docker image for the EverArt MCP Server.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/everart/README.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t mcp/everart -f src/everart/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Filesystem MCP Server\nDESCRIPTION: Bash command to build a Docker image for the filesystem MCP server from the Dockerfile in the source directory.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/filesystem/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t mcp/filesystem -f src/filesystem/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Building Docker Container for AWS Knowledge Base Retrieval Server\nDESCRIPTION: Shell command for building a Docker container for the AWS Knowledge Base Retrieval server. This command specifies the Dockerfile location and sets the image tag.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/aws-kb-retrieval-server/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t mcp/aws-kb-retrieval -f src/aws-kb-retrieval-server/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Sequential Thinking Server\nDESCRIPTION: Command for building a Docker image for the Sequential Thinking server from the Dockerfile.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/sequentialthinking/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t mcp/sequentialthinking -f src/sequentialthinking/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for GitHub MCP Server\nDESCRIPTION: Bash command for building the Docker image for the GitHub MCP server. This command builds a Docker image tagged as 'mcp/github' using the Dockerfile located in the src/github directory.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/github/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t mcp/github -f src/github/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Building Puppeteer MCP Server Docker Image\nDESCRIPTION: Bash command for building the Docker image for the Puppeteer MCP server. This creates a Docker image tagged as mcp/puppeteer based on the Dockerfile in the src/puppeteer directory.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/puppeteer/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t mcp/puppeteer -f src/puppeteer/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Building SQLite MCP Server Docker Image\nDESCRIPTION: Command for building a Docker image for the SQLite MCP server. It creates a Docker image named 'mcp/sqlite' from the current directory.\nSOURCE: https://github.com/modelcontextprotocol/servers.git/blob/main/src/sqlite/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t mcp/sqlite .\n```"
  }
]