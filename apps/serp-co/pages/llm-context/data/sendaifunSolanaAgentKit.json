[
  {
    "owner": "sendaifun",
    "repo": "solana-agent-kit",
    "content": "TITLE: Initializing Solana Agent Kit and Creating Tools\nDESCRIPTION: This snippet demonstrates how to initialize the Solana Agent Kit with a private key and optional RPC URL, and create LangChain tools for blockchain operations.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SolanaAgentKit, createSolanaTools } from \"solana-agent-kit\";\n\n// Initialize with private key and optional RPC URL\nconst agent = new SolanaAgentKit(\n  \"your-wallet-private-key-as-base58\",\n  \"https://api.mainnet-beta.solana.com\",\n  { OPENAI_API_KEY: \"your-openai-api-key\" } // optional config\n);\n\n// Create LangChain tools\nconst tools = createSolanaTools(agent);\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Solana Agent Kit\nDESCRIPTION: Example of environment variable configuration for the Solana Agent Kit. It includes setting the Solana private key and RPC URL.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/agent-kit-mcp-server/README.md#2025-04-11_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nSOLANA_PRIVATE_KEY=your_private_key_here\nRPC_URL=your_solana_rpc_url_here\n```\n\n----------------------------------------\n\nTITLE: Installing Solana Agent Kit via npm\nDESCRIPTION: This snippet shows how to install the Solana Agent Kit package using npm.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install solana-agent-kit\n```\n\n----------------------------------------\n\nTITLE: Executing Token Swaps on OKX DEX with Solana Agent Kit\nDESCRIPTION: Performs a token swap transaction on OKX DEX using the Solana Agent Kit. Requires source and destination token addresses, amount, and optional slippage parameters. Users can specify custom slippage or use automatic slippage protection. Returns detailed swap execution results.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nconst swapResult = await agent.executeSwap({\n  fromTokenAddress: \"So11111111111111111111111111111111111111112\", // SOL\n  toTokenAddress: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\", // USDC\n  amount: \"1000000000\", // amount in base units\n  autoSlippage: true, // optional, use auto slippage\n  slippage: \"0.1\", // optional, custom slippage (0.1%)\n  maxAutoSlippageBps: \"100\" // optional, max auto slippage in basis points\n  userAddress: \"signer-public-key\" // optional, user wallet address\n});\nconsole.log(\"Swap executed:\", swapResult);\n```\n\n----------------------------------------\n\nTITLE: Swapping Tokens on Solana\nDESCRIPTION: This snippet demonstrates how to swap tokens on Solana using the Solana Agent Kit, specifying the target and source token mints, amount, and slippage.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PublicKey } from \"@solana/web3.js\";\n\nconst signature = await agent.trade(\n  new PublicKey(\"target-token-mint\"),\n  100, // amount\n  new PublicKey(\"source-token-mint\"),\n  300 // 3% slippage\n);\n```\n\n----------------------------------------\n\nTITLE: Deploying a New Token on Solana\nDESCRIPTION: This snippet shows how to deploy a new SPL token using the Solana Agent Kit, specifying token details such as name, symbol, decimals, and initial supply.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await agent.deployToken(\n  \"my ai token\", // name\n  \"uri\", // uri\n  \"token\", // symbol\n  9, // decimals\n  {\n    mintAuthority: null, // by default, deployer account\n    freezeAuthority: null, // by default, deployer account\n    updateAuthority: undefined, // by default, deployer account\n    isMutable: false // by default, true\n  },\n  1000000 // initial supply\n);\n\nconsole.log(\"Token Mint Address:\", result.mint.toString());\n```\n\n----------------------------------------\n\nTITLE: Executing a Cross-Chain Swap in TypeScript\nDESCRIPTION: Performs a cross-chain token swap between different blockchains. Requires specifying amount, source and destination chains, tokens, and recipient address.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PublicKey } from \"@solana/web3.js\";\n\nconst signature = await agent.swap(\n  amount: \"10\",\n  fromChain: \"bsc\",\n  fromToken: \"0x3c499c542cef5e3811e1192ce70d8cc03d5c3359\",\n  toChain: \"solana\",\n  toToken: \"0x0000000000000000000000000000000000000000\",\n  dstAddr: \"0xc2d3024d64f27d85e05c40056674Fd18772dd922\",\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Supported Tokens from OKX DEX on Solana\nDESCRIPTION: Retrieves a list of all tokens supported by the OKX DEX on Solana. This function requires proper initialization of the agent with appropriate OKX API credentials. Returns detailed information about available tokens.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokens = await agent.getTokens();\nconsole.log(\"Supported tokens:\", tokens);\n// Returns list of tokens available on OKX DEX\n```\n\n----------------------------------------\n\nTITLE: Performing Token Transfer using Wormhole\nDESCRIPTION: This snippet demonstrates how to perform a token transfer using Wormhole, specifying the destination chain, token address (or native SOL), and network type.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst transfer = await agent.tokenTransfer({\n  destinationChain: \"Base Sepolia\", // Target chain\n  tokenAddress: \"4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU\", // Original token address or leave it empty to treansfer Native SOL\n  network: \"Testnet\", // Network type (Testnet or Mainnet)\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Token Information in TypeScript\nDESCRIPTION: Retrieves detailed information about a specific token by its address. Returns metadata, market data, and other relevant token information.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokenInfo = await agent.getTokenInfo(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\nconsole.log(\"Token info:\", tokenInfo);\n```\n\n----------------------------------------\n\nTITLE: Fetching Price Data from Pyth in TypeScript\nDESCRIPTION: Retrieves SOL/USD price data from Pyth using the agent's API. First gets the price feed ID for SOL and then fetches the current price from that feed.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst priceFeedID = await agent.getPythPriceFeedID(\"SOL\");\n\nconst price = await agent.getPythPrice(priceFeedID);\n\nconsole.log(\"Price of SOL/USD:\", price);\n```\n\n----------------------------------------\n\nTITLE: Trading Using a Personal Drift Account in TypeScript\nDESCRIPTION: Executes a perpetual trade using the agent's own Drift account. Requires specifying amount, symbol, action (long/short), order type, and price parameters.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await agent.tradeUsingDriftPerpAccount({\n  amount: 500,\n  symbol: \"SOL\",\n  action: \"long\",\n  type: \"limit\",\n  price: 180 // Please long limit order at $180/SOL\n})\n```\n\n----------------------------------------\n\nTITLE: Opening a Perpetual Long Trade in TypeScript\nDESCRIPTION: Opens a leveraged long position using the agent's perpetual trading API. Requires specifying collateral amount, price limits, leverage, token mint, and slippage tolerance.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PublicKey } from \"@solana/web3.js\";\n\nconst signature = await agent.openPerpTradeLong({\n  price: 300, // $300 SOL Max price\n  collateralAmount: 10, // 10 jitoSOL in\n  collateralMint: new PublicKey(\"J1toso1uCk3RLmjorhTtrVwY9HJ7X8V9yYac6Y7kGCPn\"), // jitoSOL\n  leverage: 50000, // x5\n  tradeMint: new PublicKey(\"J1toso1uCk3RLmjorhTtrVwY9HJ7X8V9yYac6Y7kGCPn\"), // jitoSOL\n  slippage: 0.3, // 0.3%\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying a Token using Solana Agent Kit in TypeScript\nDESCRIPTION: Example of how to create and deploy a token using the SolanaAgentKit class. It initializes the agent with a wallet private key and RPC endpoint, then deploys a token with specified decimals.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/test_it_out.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SolanaAgentKit } from \"solana-agent-kit\";\n\nconst agent = new SolanaAgentKit(\n  \"your-wallet-private-key-as-base58\",\n  \"https://api.mainnet-beta.solana.com\",\n  { OPENAI_API_KEY: \"your-openai-api-key\" } // optional config\n);\nconst result = await agent.deployToken(\n  9, // decimals\n);\n\nconsole.log(\"Token Mint Address:\", result.mint.toString());\n```\n\n----------------------------------------\n\nTITLE: Closing a Perpetual Long Trade in TypeScript\nDESCRIPTION: Closes an existing perpetual long position using the agent's trading API. Requires specifying the target price and the token mint associated with the trade.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PublicKey } from \"@solana/web3.js\";\n\nconst signature = await agent.closePerpTradeLong({\n  price: 200, // $200 SOL price\n  tradeMint: new PublicKey(\"J1toso1uCk3RLmjorhTtrVwY9HJ7X8V9yYac6Y7kGCPn\"), // jitoSOL\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Swap Quotes from OKX DEX on Solana\nDESCRIPTION: Fetches a price quote for swapping between two tokens on OKX DEX. Parameters include source and destination token addresses, amount to swap in base units, and optional slippage tolerance. Returns detailed quote information including price, fees, and token metadata.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nconst quote = await agent.getQuote(\n  \"So11111111111111111111111111111111111111112\", // fromTokenAddress (SOL)\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\", // toTokenAddress (USDC)\n  \"1000000000\", // amount in base units\n  \"0.5\" // slippage (optional, default 0.5%)\n);\nconsole.log(\"Swap quote:\", quote);\n// Returns quote data with price, fees, and slippage, token symbol, decimals\n```\n\n----------------------------------------\n\nTITLE: Creating a Drift Vault in TypeScript\nDESCRIPTION: Creates a Drift vault with specified parameters including name, market, fees, and access settings. Drift vaults allow for managed trading strategies with customizable parameters.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await agent.createDriftVault({\n  name: \"my-drift-vault\",\n  marketName: \"USDC-SPOT\",\n  redeemPeriod: 1, // in days\n  maxTokens: 100000, // in token units e.g 100000 USDC\n  minDepositAmount: 5, // in token units e.g 5 USDC\n  managementFee: 1, // 1%\n  profitShare: 10, // 10%\n  hurdleRate: 5, // 5%\n  permissioned: false, // public vault or whitelist\n})\n```\n\n----------------------------------------\n\nTITLE: Creating NFT on 3Land\nDESCRIPTION: This snippet demonstrates how to create an NFT on 3Land using the Solana Agent Kit, specifying NFT details, collection account, and optional parameters like network and liquidity pool creation.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst isDevnet = true; // (Optional) if not present TX takes place in Mainnet\nconst withPool = true; // (Optional) only present if NFT will be created with a Liquidity Pool for a specific SPL token\nconst priorityFeeParam = 1000000; // (Optional) if not present the default priority fee will be 50000\nconst collectionAccount = \"\"; //hash for the collection\nconst createItemOptions: CreateSingleOptions = {\n  itemName: \"\",\n  sellerFee: 500, //5%\n  itemAmount: 100, //total items to be created\n  itemSymbol: \"\",\n  itemDescription: \"\",\n  traits: [\n    { trait_type: \"\", value: \"\" },\n  ],\n  price: 0, //100000000 == 0.1 sol, can be set to 0 for a free mint\n  splHash: \"\", //present if listing is on a specific SPL token, if not present sale will be on $SOL, must be present if \"withPool\" is true\n  poolName: \"\", // Only present if \"withPool\" is true\n  mainImageUrl: \"\",\n};\nconst result = await agent.create3LandNft(\n  collectionAccount,\n  createItemOptions,\n  isDevnet, // (Optional) if not present TX takes place in Mainnet\n  withPool\n  priorityFeeParam, //(Optional)\n);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Tool in Solana Agent Kit\nDESCRIPTION: Example usage of the custom tool, showing how to create a SolanaAgentKit instance, get the tools, and execute the custom tool functionality.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/add_your_own_tool.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SolanaAgentKit, createSolanaTools } from \"solana-agent-kit\";\n\nconst agent = new SolanaAgentKit(\n  \"your-wallet-private-key-as-base58\",\n  \"https://api.mainnet-beta.solana.com\",\n  { OPENAI_API_KEY: \"your-openai-api-key\" } // optional config\n);\n\nconst tools = createSolanaTools(agent);\nconst customTool = tools.find(tool => tool.name === \"custom_tool\");\n\nif (customTool) {\n  const result = await customTool._call(\"your-input\");\n  console.log(result);\n}\n\n// or alternatively\nconst result = await agent.customFunction(\"your-input\"); // assuming you have implemented `customFunction` method in SolanaAgentKit\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Withdrawing from a Drift Account in TypeScript\nDESCRIPTION: Withdraws tokens from the agent's Drift user account. Requires specifying the amount and token symbol to withdraw.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nconst {txSig} = await agent.withdrawFromDriftAccount(100, \"USDC\")\n```\n\n----------------------------------------\n\nTITLE: Parsing Account Data on Solana\nDESCRIPTION: Parses encoded account data from a Solana program. Takes a program ID and base64-encoded account data, and returns the parsed account information. This functionality enables developers to extract structured data from Solana accounts.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nconst parsedData = await agent.parseAccount(\n  \"<programId>\",\n  \"<accountData>\" // base64\n)\n\nconsole.log(\"parsed data:\", parsedData)\n```\n\n----------------------------------------\n\nTITLE: Requesting Withdrawal from a Drift Vault in TypeScript\nDESCRIPTION: Initiates a withdrawal request from a Drift vault. This starts the redemption period before funds can be withdrawn, requiring both an amount and vault address.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await agent.requestWithdrawalFromDriftVault(100, \"41Y8C4oxk4zgJT1KXyQr35UhZcfsp5mP86Z2G7UUzojU\")\n```\n\n----------------------------------------\n\nTITLE: Parsing Instruction Data on Solana\nDESCRIPTION: Parses encoded instruction data from a Solana program. Takes a program ID and base64-encoded instruction data, and returns the decoded instruction information. This is useful for understanding the details of transaction instructions on the Solana blockchain.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nconst parsedData = await agent.parseInstruction(\n  \"<programId>\",\n  \"<instructionData>\" // base64\n)\n\nconsole.log(\"parsed data:\", parsedData)\n```\n\n----------------------------------------\n\nTITLE: Depositing into a Voltr Strategy in TypeScript\nDESCRIPTION: Deposits assets into a specific strategy within a Voltr vault. Requires the amount in base units, vault address, and strategy address.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await agent.voltrDepositStrategy(\n  new BN(\"1000000000\"), // amount in base units (e.g., 1 USDC = 1000000)\n  \"7opUkqYtxmQRriZvwZkPcg6LqmGjAh1RSEsVrdsGDx5K\", // vault\n  \"9ZQQYvr4x7AMqd6abVa1f5duGjti5wk1MHsX6hogPsLk\"  // strategy\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Action Class for Custom Tool\nDESCRIPTION: Implementation of an Action class for the custom tool, which defines the interface, validation schema, and handler function for the tool's action.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/add_your_own_tool.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Action } from \"../../types/action\";\nimport { SolanaAgentKit } from \"../../agent\";\nimport { z } from \"zod\";\nimport { custom_tool } from \"../../tools\";\n\nconst customAction: Action = {\n  name: \"CUSTOM_ACTION\",\n  similes: [\"custom tool\"],\n  description: \"Description of what the custom tool does.\",\n  examples: [\n    {\n      input: {},\n      output: {\n        status: \"success\",\n        message: \"Custom tool executed successfully\",\n        data: result,\n      },\n      explanation: \"Custom tool executed successfully\",\n    },\n  ],\n  schema: z.object({\n    input: z.string(),\n  }),\n  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {\n    const result = await agent.customFunction(input);\n    return result;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Langchain Tool Class for Custom Tool\nDESCRIPTION: Creation of a Langchain Tool class for the custom functionality. This class defines how the tool interacts with the LLM, handling inputs and formatting outputs properly.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/add_your_own_tool.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tool } from \"langchain/tools\";\nimport { SolanaAgentKit } from \"../../agent\";\n\nexport class CustomTool extends Tool {\n  name = \"custom_tool\";\n  description = \"Description of what the custom tool does.\";\n\n  constructor(private solanaKit: SolanaAgentKit) {\n    super();\n  }\n\n  protected async _call(input: string): Promise<string> {\n    try {\n      const result = await this.solanaKit.customFunction(input);\n      return JSON.stringify({\n        status: \"success\",\n        message: \"Custom tool executed successfully\",\n        data: result,\n      });\n    } catch (error: any) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\",\n      });\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Trending Pools on Solana with Agent Kit\nDESCRIPTION: Demonstrates how to fetch trending pools on Solana over a specified time period. This functionality requires the Solana Agent Kit to be properly initialized. Returns data about the most active pools in the specified timeframe.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nconst trendingPools = await agent.getTrendingPools(\"24h\");\nconsole.log(\"Trending pools:\", trendingPools);\n```\n\n----------------------------------------\n\nTITLE: Client-Side Para Plugin Integration with Solana Agent Kit\nDESCRIPTION: Code snippet showing how to integrate the Para web plugin with Solana Agent Kit on the client side. It imports the web plugin, uses it with the Solana agent, and exposes a method to get the Para instance.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/para-plugin-example/README.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport ParaWebPlugin from \"@getpara/plugin-para-web\";\nimport { solanaAgent } from \"./solana\";\n\nexport const solanaAgentWithPara = solanaAgent.use(ParaWebPlugin);\nexport const para = solanaAgentWithPara.methods.getParaInstance();\n```\n\n----------------------------------------\n\nTITLE: Getting Trending Tokens in TypeScript\nDESCRIPTION: Retrieves a list of currently trending tokens in the Solana ecosystem. Provides market data for tokens with high trading volume or interest.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nconst trendingTokens = await agent.getTrendingTokens();\nconsole.log(\"Trending tokens:\", trendingTokens);\n```\n\n----------------------------------------\n\nTITLE: Server-Side Para Plugin Integration with Solana Agent Kit\nDESCRIPTION: Code snippet showing how to integrate the Para server plugin with Solana Agent Kit on the server side. It imports the necessary dependencies and initializes the Solana agent with the Para plugin.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/para-plugin-example/README.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SolanaAgentKit } from \"solana-agent-kit\";\nimport ParaServerPlugin from \"@getpara/plugin-para-server\";\n\nconst solanaAgent = new SolanaAgentKit(/* config */);\nexport const solanaAgentWithPara = solanaAgent.use(ParaServerPlugin);\n```\n\n----------------------------------------\n\nTITLE: Getting Token Price Data from CoinGecko in TypeScript\nDESCRIPTION: Retrieves current price data for multiple tokens using CoinGecko's API. Requires an array of token addresses to fetch their price information.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nconst priceData = await agent.getTokenPriceData([\n  \"So11111111111111111111111111111111111111112\", // SOL\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"  // USDC\n]);\nconsole.log(\"Token prices:\", priceData);\n```\n\n----------------------------------------\n\nTITLE: Listing All Topics from Allora in TypeScript\nDESCRIPTION: Retrieves a list of all available topics from Allora's API. These topics represent different prediction markets or inference categories.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nconst topics = await agent.getAllTopics();\nconsole.log(\"Allora topics:\", topics);\n```\n\n----------------------------------------\n\nTITLE: Getting Top Gainers in TypeScript\nDESCRIPTION: Retrieves a list of tokens with the highest price gains over a specified time period. Requires specifying the timeframe and token category.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nconst topGainers = await agent.getTopGainers(\"24h\", \"all\");\nconsole.log(\"Top gainers:\", topGainers);\n```\n\n----------------------------------------\n\nTITLE: Market Maker Configuration Example in JSON\nDESCRIPTION: Sample configuration object showing market maker parameters including market ID, token pairs, quote parameters, token allowances, and update interval settings. This configuration determines how the market maker will place and manage orders on the Manifest DEX.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/market-making-agent/README.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"marketId\": \"2Uj8277fkaVBtTU6Wp2GPRbQC86SkSdgQ2mp1Q5N2LHc\",\n  \"baseToken\": \"SEND\",\n  \"quoteToken\": \"USDC\",\n  \"quoteParams\": {\n    \"number\": 4,\n    \"minDepth\": 0.1,\n    \"maxDepth\": 2\n  },\n  \"allowance\": {\n    \"base\": 2,\n    \"quote\": 3\n  },\n  \"intervalSeconds\": 20\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Latest Pools in TypeScript\nDESCRIPTION: Retrieves information about recently created or active liquidity pools on Solana. Provides data about new trading opportunities and liquidity pools.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nconst latestPools = await agent.getLatestPools();\nconsole.log(\"Latest pools:\", latestPools);\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Solana Agent Kit\nDESCRIPTION: Create a .env file in the project root to store sensitive configuration data. This includes API keys and private keys necessary for the project's functionality.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/setup_locally.md#2025-04-11_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nOPENAI_API_KEY=your_openai_api_key_here\nRPC_URL=your_rpc_url\nSOLANA_PRIVATE_KEY=your_solana_private_key_here\n```\n\n----------------------------------------\n\nTITLE: Getting Price Inference from Allora in TypeScript\nDESCRIPTION: Retrieves a price inference for a given token and timeframe from Allora's API. Useful for forward-looking price predictions over specific periods.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst sol5mPrice = await agent.getPriceInference(\"SOL\", \"5m\");\nconsole.log(\"5m price inference of SOL/USD:\", sol5mPrice);\n```\n\n----------------------------------------\n\nTITLE: Exporting Action in Actions Index\nDESCRIPTION: Adding the custom action to the main ACTIONS object in the actions index file, making it available for use in the agent's action system.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/add_your_own_tool.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport customAction from \"./your_protocol/custom_action\";\n\nexport const ACTIONS = {\n    // ... existing actions ...\n  CUSTOM_ACTION: customAction,\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Inference for a Specific Topic from Allora in TypeScript\nDESCRIPTION: Retrieves an inference for a specific topic ID from Allora's API. Provides prediction data for the requested topic identifier.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nconst inference = await agent.getInferenceByTopicId(42);\nconsole.log(\"Allora inference for topic 42:\", inference);\n```\n\n----------------------------------------\n\nTITLE: Simulating a Switchboard Feed in TypeScript\nDESCRIPTION: Simulates a given Switchboard oracle feed to get its current value. Requires the feed's public key and an optional API endpoint for the simulation.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = await agent.simulateSwitchboardFeed(\n      \"9wcBMATS8bGLQ2UcRuYjsRAD7TPqB1CMhqfueBx78Uj2\", // TRUMP/USD\n      \"http://crossbar.switchboard.xyz\");;\nconsole.log(\"Simulation resulted in the following value:\", value);\n```\n\n----------------------------------------\n\nTITLE: Building Solana Agent Kit Project with PNPM\nDESCRIPTION: Compile the TypeScript code to JavaScript using the project's build script. This command generates compiled files in the dist/ directory.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/setup_locally.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Getting a Solana Asset by ID in TypeScript\nDESCRIPTION: Retrieves information about a Solana asset using its public key. Returns detailed asset data for the specified token or NFT.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nconst asset = await agent.getAsset(\"41Y8C4oxk4zgJT1KXyQr35UhZcfsp5mP86Z2G7UUzojU\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Drift Account Information in TypeScript\nDESCRIPTION: Gets detailed information about the agent's Drift user account. This provides access to account balances, positions, and other relevant data.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst accountInfo = await agent.driftUserAccountInfo()\n```\n\n----------------------------------------\n\nTITLE: Running the Test Suite for Solana Agent Kit\nDESCRIPTION: Command to execute the test suite for the Solana Agent Kit project to verify functionality.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/CONTRIBUTING.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test\n```\n\n----------------------------------------\n\nTITLE: Checking for a Drift User Account in TypeScript\nDESCRIPTION: Verifies if the agent has an existing Drift user account. Returns both a boolean flag indicating account existence and the account information if it exists.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst {hasAccount, account} = await agent.doesUserHaveDriftAccount()\n```\n\n----------------------------------------\n\nTITLE: Deriving a Drift Vault Address in TypeScript\nDESCRIPTION: Derives the public key address for a Drift vault based on its name. This is useful for retrieving an address without creating the vault first.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst vaultPublicKey = await agent.deriveDriftVaultAddress(\"my-drift-vault\")\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Para Plugin Integration\nDESCRIPTION: Steps to install the necessary dependencies for the Para plugin example. This includes cloning the solana-plugin-para repository, installing dependencies, and building the project.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/para-plugin-example/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/uratmangun/solana-plugin-para/\ncd solana-plugin-para\npnpm install\npnpm build\ncd ..\ncd <this-repository-folder>/examples/para-plugin-example\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Depositing into a Drift User Account in TypeScript\nDESCRIPTION: Deposits tokens into the agent's Drift user account. Requires specifying the amount and token symbol (e.g., USDC) to deposit.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst {txSig} = await agent.depositToDriftUserAccount(100, \"USDC\")\n```\n\n----------------------------------------\n\nTITLE: Depositing into a Drift Vault in TypeScript\nDESCRIPTION: Deposits tokens into an existing Drift vault. Requires specifying the amount to deposit and the vault's public key address.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await agent.depositIntoDriftVault(100, \"41Y8C4oxk4zgJT1KXyQr35UhZcfsp5mP86Z2G7UUzojU\")\n```\n\n----------------------------------------\n\nTITLE: Setting Telegram Bot Webhook\nDESCRIPTION: This curl command sets the webhook URL for the Telegram bot, connecting it to the deployed application. It's essential for the bot to receive updates from Telegram.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/tg-bot-starter/advanced-tg-bot/README.md#2025-04-11_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://api.telegram.org/bot<telegram_bot_token>/setWebhook?url=https://<your-deployment-url>.app/api/bot\n```\n\n----------------------------------------\n\nTITLE: Trading Using a Delegated Drift Vault in TypeScript\nDESCRIPTION: Executes a perpetual trade using a Drift vault that has been delegated to the agent. Requires specifying the vault, amount, symbol, action, order type, and target price.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await agent.tradeUsingDelegatedDriftVault({\n  vault: \"41Y8C4oxk4zgJT1KXyQr35UhZcfsp5mP86Z2G7UUzojU\",\n  amount: 500,\n  symbol: \"SOL\",\n  action: \"long\",\n  type: \"limit\",\n  price: 180 // Please long limit order at $180/SOL\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Drift Vault Parameters in TypeScript\nDESCRIPTION: Updates the parameters of an existing Drift vault. Allows for changes to fees, redemption periods, limits, and other vault settings after creation.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await agent.updateDriftVault({\n  name: \"my-drift-vault\",\n  marketName: \"USDC-SPOT\",\n  redeemPeriod: 1, // in days\n  maxTokens: 100000, // in token units e.g 100000 USDC\n  minDepositAmount: 5, // in token units e.g 5 USDC\n  managementFee: 1, // 1%\n  profitShare: 10, // 10%\n  hurdleRate: 5, // 5%\n  permissioned: false, // public vault or whitelist\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Telegram Bot Webhook\nDESCRIPTION: Command to set the webhook URL for the Telegram bot. This connects the bot to the deployed application.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/tg-bot-starter/group-tg-bot/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.telegram.org/bot<telegram_bot_token>/setWebhook?url=https://<your-deployment-url>.app/api/bot\n```\n\n----------------------------------------\n\nTITLE: Borrowing from Drift in TypeScript\nDESCRIPTION: Borrows tokens from Drift by setting the third parameter to true in the withdrawFromDriftAccount method. This creates a loan position rather than a standard withdrawal.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst {txSig} = await agent.withdrawFromDriftAccount(1, \"SOL\", true)\n```\n\n----------------------------------------\n\nTITLE: Repaying a Drift Loan in TypeScript\nDESCRIPTION: Repays a loan from Drift by setting the third parameter to true in the depositToDriftUserAccount method. This allocates the deposit to loan repayment rather than increasing available balance.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nconst {txSig} = await agent.depositToDriftUserAccount(1, \"SOL\", true)\n```\n\n----------------------------------------\n\nTITLE: Setting Telegram Bot Webhook\nDESCRIPTION: cURL command to set the webhook URL for the Telegram bot. Replace placeholders with actual bot token and deployment URL.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/tg-bot-starter/basic-tg-bot/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.telegram.org/bot<telegram_bot_token>/setWebhook?url=https://<your-deployment-url>.app/api/bot\n```\n\n----------------------------------------\n\nTITLE: Withdrawing from a Drift Vault in TypeScript\nDESCRIPTION: Withdraws tokens from a Drift vault after the redemption period has elapsed. Requires the vault's public key address to process the withdrawal.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await agent.withdrawFromDriftVault( \"41Y8C4oxk4zgJT1KXyQr35UhZcfsp5mP86Z2G7UUzojU\")\n```\n\n----------------------------------------\n\nTITLE: Updating a Drift Vault Delegate in TypeScript\nDESCRIPTION: Updates the address a Drift vault is delegated to. This changes which account has trading authority over the vault's assets.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await agent.updateDriftVaultDelegate(\"41Y8C4oxk4zgJT1KXyQr35UhZcfsp5mP86Z2G7UUzojU\", \"new-address\")\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository with Git\nDESCRIPTION: Command to clone the repository containing the Para plugin example. This is the first step in setting up the example project locally.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/para-plugin-example/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone <repository-url>\n```\n\n----------------------------------------\n\nTITLE: Getting Voltr Vault Position Values in TypeScript\nDESCRIPTION: Retrieves the current position values and total value of assets in a Voltr vault. Requires the vault's public key to fetch position data.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst values = await agent.voltrGetPositionValues(\"7opUkqYtxmQRriZvwZkPcg6LqmGjAh1RSEsVrdsGDx5K\")\n```\n\n----------------------------------------\n\nTITLE: Withdrawing from a Voltr Strategy in TypeScript\nDESCRIPTION: Withdraws assets from a specific strategy within a Voltr vault. Requires the amount in base units, vault address, and strategy address.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await agent.voltrWithdrawStrategy(\n  new BN(\"1000000000\"), // amount in base units (e.g., 1 USDC = 1000000)\n  \"7opUkqYtxmQRriZvwZkPcg6LqmGjAh1RSEsVrdsGDx5K\", // vault\n  \"9ZQQYvr4x7AMqd6abVa1f5duGjti5wk1MHsX6hogPsLk\"  // strategy\n)\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the development server for the Para plugin example application.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/para-plugin-example/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Creating a deBridge Order in TypeScript\nDESCRIPTION: Creates a cross-chain bridge order using deBridge's DLN protocol. Requires source and destination chain IDs, tokens, amounts, and recipient address.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nconst orderInput = {\n  srcChainId: \"7565164\", // Solana\n  srcChainTokenIn: \"11111111111111111111111111111111\", // Native SOL\n  srcChainTokenInAmount: \"1000000000\", // 1 SOL (9 decimals)\n  dstChainId: \"1\", // Ethereum\n  dstChainTokenOut: \"0x0000000000000000000000000000000000000000\", // ETH\n  dstChainTokenOutRecipient: \"0x23C279e58ddF1018C3B9D0C224534fA2a83fb1d2\" // ETH recipient\n};\n\nconst order = await agent.createDebridgeOrder(orderInput);\nconsole.log(\"Order created:\", order);\n// Contains transaction data and estimated amounts\n```\n\n----------------------------------------\n\nTITLE: Executing a deBridge Order in TypeScript\nDESCRIPTION: Executes a previously created deBridge cross-chain transfer order. Requires the transaction data returned from the order creation step.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await agent.executeDebridgeOrder(order.tx.data);\nconsole.log(\"Bridge transaction sent:\", signature);\n```\n\n----------------------------------------\n\nTITLE: Opening Claude Desktop Config on MacOS\nDESCRIPTION: Command to open the Claude Desktop configuration file on MacOS using VS Code. This file is used to set up the MCP server settings.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/agent-kit-mcp-server/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n----------------------------------------\n\nTITLE: Checking deBridge Transaction Status in TypeScript\nDESCRIPTION: Checks the status of a deBridge cross-chain transaction. Returns the current state such as Created, Fulfilled, etc.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nconst status = await agent.checkDebridgeTransactionStatus(signature);\nconsole.log(\"Bridge status:\", status);\n// Shows current status: Created, Fulfilled, etc.\n```\n\n----------------------------------------\n\nTITLE: Getting Supported Chains for deBridge in TypeScript\nDESCRIPTION: Retrieves the list of blockchain networks supported by deBridge's cross-chain protocol. Returns chain IDs and names for available networks.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nconst chains = await agent.getDebridgeSupportedChains();\nconsole.log(\"Available chains:\", chains);\n// Example output: { chains: [{ chainId: \"1\", chainName: \"Ethereum\" }, { chainId: \"7565164\", chainName: \"Solana\" }] }\n```\n\n----------------------------------------\n\nTITLE: Getting Available Tokens for deBridge in TypeScript\nDESCRIPTION: Retrieves information about available tokens on a specific blockchain for deBridge operations. Takes chain ID and optional token name for filtering results.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokens = await agent.getDebridgeTokensInfo(\"1\", \"USDC\"); // Search for USDC on Ethereum\nconsole.log(\"Available tokens:\", tokens);\n// Shows tokens matching 'USDC' on the specified chain\n```\n\n----------------------------------------\n\nTITLE: Performing CCTP Transfer using Wormhole\nDESCRIPTION: This snippet shows how to perform a CCTP (Cross-Chain Transfer Protocol) transfer using Wormhole, specifying the destination chain, transfer amount, and network type.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst transfer = await agent.cctpTransfer({\n  destinationChain: \"Base Sepolia\", // Target chain\n  transferAmount: \"1\", // Amount to transfer\n  network: \"Testnet\", // Network type (Testnet or Mainnet)\n});\nconsole.log(\"Transfer result:\", transfer);\n```\n\n----------------------------------------\n\nTITLE: Creating a Wrapped Token using Wormhole\nDESCRIPTION: This snippet demonstrates how to create a wrapped token using Wormhole, specifying the destination chain, original token address, and network type.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await agent.createWrappedToken({\n  destinationChain: \"BaseSepolia\", // Target chain\n  tokenAddress: \"4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU\", // Original token address\n  network: \"Testnet\", // Network type (Testnet or Mainnet)\n});\nconsole.log(\"Wrapped Token Result:\", result);\n```\n\n----------------------------------------\n\nTITLE: Getting Wormhole Supported Chains\nDESCRIPTION: This snippet shows how to retrieve all supported chains using the Wormhole integration in Solana Agent Kit.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst chains = await agent.getWormholeSupportedChains();\nconsole.log(\"Supported Chains:\", chains);\n```\n\n----------------------------------------\n\nTITLE: Deploying a New Token2022 on Solana\nDESCRIPTION: This snippet demonstrates how to deploy a new Token2022 using the Solana Agent Kit, specifying token details similar to standard SPL token deployment.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await agent.delpoyToken2022(\n  \"my ai token 2022\", // name\n  \"uri\", // uri\n  \"token2022\", // symbol\n  9, // decimals\n  {\n    mintAuthority: null, // by default, deployer account\n    freezeAuthority: null, // by default, deployer account\n    updateAuthority: undefined, // by default, deployer account\n    isMutable: false // by default, true\n  },\n  1000000 // initial supply\n);\n\nconsole.log(\"Token2022 Mint Address:\", result.mint.toString());\n```\n\n----------------------------------------\n\nTITLE: Creating NFT Collection on 3Land\nDESCRIPTION: This snippet shows how to create an NFT collection on 3Land using the Solana Agent Kit, specifying collection details and optional parameters like network and priority fee.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst isDevnet = false; // (Optional) if not present TX takes place in Mainnet\nconst priorityFeeParam = 1000000; // (Optional) if not present the default priority fee will be 50000\n\n const collectionOpts: CreateCollectionOptions = {\n    collectionName: \"\",\n    collectionSymbol: \"\",\n    collectionDescription: \"\",\n    mainImageUrl: \"\"\n  };\n\nconst result = await agent.create3LandCollection(\n      collectionOpts,\n      isDevnet, // (Optional) if not present TX takes place in Mainnet\n      priorityFeeParam, //(Optional)\n    );\n```\n\n----------------------------------------\n\nTITLE: Creating NFT Collection on Solana\nDESCRIPTION: This snippet shows how to create an NFT collection on Solana using the Solana Agent Kit, specifying collection details such as name, URI, royalty, and creators.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst collection = await agent.deployCollection({\n  name: \"My NFT Collection\",\n  uri: \"https://arweave.net/metadata.json\",\n  royaltyBasisPoints: 500, // 5%\n  creators: [\n    {\n      address: \"creator-wallet-address\",\n      percentage: 100,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Lending Tokens on Solana\nDESCRIPTION: This snippet shows how to lend USDC tokens on Solana using the Solana Agent Kit, specifying the amount to lend.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PublicKey } from \"@solana/web3.js\";\n\nconst signature = await agent.lendAssets(\n  100 // amount of USDC to lend\n);\n```\n\n----------------------------------------\n\nTITLE: Staking SOL on Solana\nDESCRIPTION: This snippet demonstrates how to stake SOL on Solana using the Solana Agent Kit, specifying the amount to stake.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await agent.stake(\n  1 // amount in SOL to stake\n);\n```\n\n----------------------------------------\n\nTITLE: Staking SOL on Solayer\nDESCRIPTION: This snippet shows how to stake SOL on Solayer using the Solana Agent Kit, specifying the amount to stake.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await agent.restake(\n  1 // amount in SOL to stake\n);\n```\n\n----------------------------------------\n\nTITLE: Sending SPL Token Airdrop via ZK Compression\nDESCRIPTION: This snippet demonstrates how to send an SPL token airdrop using ZK compression on Solana, specifying the token mint, amount per recipient, recipient list, and priority fee.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PublicKey } from \"@solana/web3.js\";\n\n(async () => {\n  console.log(\n    \"~Airdrop cost estimate:\",\n    getAirdropCostEstimate(\n      1000, // recipients\n      30_000 // priority fee in lamports\n    )\n  );\n\n  const signature = await agent.sendCompressedAirdrop(\n    new PublicKey(\"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN\"), // mint\n    42, // amount per recipient\n    [\n      new PublicKey(\"1nc1nerator11111111111111111111111111111111\"),\n      // ... add more recipients\n    ],\n    30_000 // priority fee in lamports\n  );\n})();\n```\n\n----------------------------------------\n\nTITLE: Closing Empty Token Accounts in TypeScript\nDESCRIPTION: Cleans up empty token accounts to reclaim SOL rent. Returns the transaction signature after closing all identified empty token accounts associated with the agent.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst { signature } = await agent.closeEmptyTokenAccounts();\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Price Fetching Tool Example\nDESCRIPTION: A complete example implementation of a tool for fetching token prices, demonstrating the full implementation of a useful tool from scratch.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/add_your_own_tool.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tool } from \"langchain/tools\";\nimport { SolanaAgentKit } from \"../agent\";\n\nexport class FetchTokenPriceTool extends Tool {\n  name = \"fetch_token_price\";\n  description = \"Fetches the current price of a specified token.\";\n\n  constructor(private solanaKit: SolanaAgentKit) {\n    super();\n  }\n\n  protected async _call(tokenSymbol: string): Promise<string> {\n    try {\n      const price = await this.solanaKit.getTokenPrice(tokenSymbol);\n      return JSON.stringify({\n        status: \"success\",\n        message: `Price fetched successfully for ${tokenSymbol}.`,\n        data: { token: tokenSymbol, price },\n      });\n    } catch (error: any) {\n      return JSON.stringify({\n        status: \"error\",\n        message: error.message,\n        code: error.code || \"UNKNOWN_ERROR\",\n      });\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Token Price Function to SolanaAgentKit\nDESCRIPTION: Implementation of the getTokenPrice method in the SolanaAgentKit class, which provides the backend functionality for the token price fetching tool.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/add_your_own_tool.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport class SolanaAgentKit {\n  async getTokenPrice(tokenSymbol: string): Promise<number> {\n    const mockPrices: { [key: string]: number } = {\n      SOL: 150,\n      USDC: 1,\n      USDT: 1,\n      BONK: 0.5,\n    };\n\n    if (!mockPrices[tokenSymbol.toUpperCase()]) {\n      throw new Error(`Price for token symbol ${tokenSymbol} not found.`);\n    }\n\n    return mockPrices[tokenSymbol.toUpperCase()];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Action for Token Price Fetching Tool\nDESCRIPTION: Implementation of an Action for the token price fetching tool, defining its interface, validation schema, and handler function for integration with the agent.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/add_your_own_tool.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Action } from \"../types/action\";\nimport { SolanaAgentKit } from \"../agent\";\nimport { z } from \"zod\";\nimport { fetch_token_price } from \"../tools\";\n\nconst fetchTokenPriceAction: Action = {\n  name: \"FETCH_TOKEN_PRICE\",\n  similes: [\"fetch token price\"],\n  description: \"Fetches the current price of a specified token.\",\n  examples: [\n    {\n      input: { tokenSymbol: \"SOL\" },\n      output: {\n        status: \"success\",\n        message: \"Price fetched successfully for SOL.\",\n        price: 150,\n      },\n      explanation: \"Fetch the current price of SOL token in USDC\",\n    },\n  ],\n  schema: z.object({\n    tokenSymbol: z.string().describe(\"The symbol of the token to fetch the price for\"),\n  }),\n  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {\n    const price = await agent.getTokenPrice(input.tokenSymbol);\n    return {\n      status: \"success\",\n      price,\n      message: `Price fetched successfully for ${input.tokenSymbol}.`,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Token Price Fetching Tool\nDESCRIPTION: Example showing how to use the token price fetching tool by creating a SolanaAgentKit instance and calling the getTokenPrice method directly.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/add_your_own_tool.md#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SolanaAgentKit } from \"solana-agent-kit\";\n\nconst agent = new SolanaAgentKit(\n  \"your-wallet-private-key-as-base58\",\n  \"https://api.mainnet-beta.solana.com\",\n  { OPENAI_API_KEY: \"your-openai-api-key\" } // optional config\n);\n\nconst result = await agent.getTokenPrice(\"SOL\");\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom Protocol Tools in Tools Index\nDESCRIPTION: Code snippet showing how to export a custom protocol from the tools index file. This allows the toolkit to recognize and use tools from your custom protocol.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/add_your_own_tool.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from \"./squads\";\nexport * from \"./jupiter\";\nexport * from \"./your_protocol\"; // Add your protocol here if it's not already in the list\n```\n\n----------------------------------------\n\nTITLE: Adding Supporting Functions to SolanaAgentKit Class\nDESCRIPTION: Implementation of custom supporting functions in the SolanaAgentKit class that will be used by the custom tool. This example shows adding a customFunction method to the class.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/add_your_own_tool.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class SolanaAgentKit {\n  // ... existing code ...\n\n  async customFunction(input: string): Promise<string> {\n    // Implement your custom functionality\n    return `Processed input: ${input}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Langchain Custom Tool from Protocol Directory\nDESCRIPTION: Exporting the custom Langchain tool from its protocol directory, making it available for import elsewhere in the codebase.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/add_your_own_tool.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from \"./custom_tool\";\n```\n\n----------------------------------------\n\nTITLE: Exporting Protocol's Langchain Tools in Main Index\nDESCRIPTION: Adding the export for the custom protocol's tools to the main Langchain index file, making them accessible when importing from the langchain module.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/add_your_own_tool.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from \"./tiplink\";\nexport * from \"./your_protocol\"; // Add your protocol here if it's not already in the list\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Solana Agent Kit MCP Server\nDESCRIPTION: Command to install project dependencies using pnpm package manager. This step is crucial before running the server.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/agent-kit-mcp-server/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Opening Claude Desktop Config on Windows\nDESCRIPTION: Command to open the Claude Desktop configuration file on Windows using VS Code. This file is used to set up the MCP server settings.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/agent-kit-mcp-server/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncode $env:AppData\\Claude\\claude_desktop_config.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop for Solana Agent Kit MCP Server\nDESCRIPTION: JSON configuration for Claude Desktop to set up the Solana Agent Kit MCP server. It includes environment variables and command execution details.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/agent-kit-mcp-server/README.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mcpServers\": {\n        \"agent-kit\": {\n            \"command\": \"node\",\n            \"env\": {\n                \"RPC_URL\": \"your_solana_rpc_url_here\",\n                \"SOLANA_PRIVATE_KEY\": \"your_private_key_here\"\n            },\n            \"args\": [\n                \"/ABSOLUTE/PATH/TO/YOUR/PROJECT\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Solana Agent Kit MCP Server Project\nDESCRIPTION: Command to build the project, which compiles TypeScript code and sets appropriate permissions for the executable.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/agent-kit-mcp-server/README.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables Configuration\nDESCRIPTION: Command to copy the example environment variables file to create a local configuration file for the project.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/para-plugin-example/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Para Plugin\nDESCRIPTION: Example environment variables configuration for the Para plugin integration, including API keys, RPC URL, and environment settings for both server and client sides.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/para-plugin-example/README.md#2025-04-11_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nLANGCHAIN_CALLBACKS_BACKGROUND=false\nOPENAI_API_KEY=#optional\nRPC_URL=\nSOLANA_PRIVATE_KEY=\nPARA_API_KEY=\nPARA_ENV=BETA | PROD\nGROQ_API_KEY=\nNEXT_PUBLIC_PARA_ENV=BETA | PROD\nNEXT_PUBLIC_PARA_API_KEY=\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Agent Behavior Without Persistence in TypeScript\nDESCRIPTION: Terminal interaction output showing how an agent without persistence loses context between sessions, making it unable to remember previously shared information like a user's name.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/persistent-agent/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAvailable modes:\n1. chat\n- Interactive chat mode\n2. auto\n- Autonomous action mode\nChoose a mode (enter number or name: 1\nStarting chat mode... Type 'exit' to end.\nPrompt: i am arpit\nHello Arpit! How can I assist you today?\nPrompt: ^С\n$ ts-node index.ts\nStarting Agent...\nAvailable modes:\n1. chat\n- Interactive chat mode\n2. auto\n- Autonomous action mode\nChoose a mode (enter number or name): 1\nStarting chat mode... Type 'exit' to end.\nPrompt: do u know my name\nI don't know your name yet. If you'd like, you can share it.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Agent Behavior With Persistence in TypeScript\nDESCRIPTION: Terminal interaction output showing how an agent with PostgreSQL persistence maintains context between sessions, allowing it to remember the user's name even after the application restarts.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/persistent-agent/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAvailable modes:\n1. chat\n- Interactive chat mode\n2. auto\n- Autonomous action mode\nChoose a mode (enter number or name: 1\nStarting chat mode... Type 'exit' to end.\nPrompt: i am arpit\nHello Arpit! How can I assist you today?\nPrompt: ^С\n$ ts-node index.ts\nStarting Agent...\nAvailable modes:\n1. chat\n- Interactive chat mode\n2. auto\n- Autonomous action mode\nChoose a mode (enter number or name): 1\nStarting chat mode... Type 'exit' to end.\nPrompt: do u know my name\nYes, you mentioned that your name is Arpit. How can I help you today?\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Discord Bot\nDESCRIPTION: Command to install project dependencies using pnpm package manager.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/discord-bot-starter/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting the Discord Bot\nDESCRIPTION: Command to start the Discord bot after installation.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/discord-bot-starter/README.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Telegram Bot with Solana Agent Kit\nDESCRIPTION: Command to install project dependencies using pnpm package manager.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/tg-bot-starter/basic-tg-bot/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Telegram Bot\nDESCRIPTION: Command to start the development server for the Telegram bot project.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/tg-bot-starter/basic-tg-bot/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Exposing Local Server with ngrok for Telegram Bot\nDESCRIPTION: Command to expose the local server on port 3000 using ngrok for Telegram bot webhook setup.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/tg-bot-starter/basic-tg-bot/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server with Package Managers\nDESCRIPTION: Commands to start the Next.js development server using different package managers. After setup, the application will be available at http://localhost:3000.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/wormhole-nextjs-agent/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Orbofi Personality Fetcher Script\nDESCRIPTION: Command to start the Orbofi Personality Fetcher script. This launches the interactive interface where users can input names to fetch corresponding AI personalities.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/orbofi-personality-engine/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Solana Agent Kit Example\nDESCRIPTION: Command to navigate to the example directory containing the LangGraph implementation.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/agent-kit-langgraph/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/agent-kit-langgraph\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install required package dependencies using pnpm package manager.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/agent-kit-langgraph/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating a Drift User Account in TypeScript\nDESCRIPTION: Creates a Drift user account with an initial token deposit. This is required before using other Drift functionality through the agent API.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/README.md#2025-04-11_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await agent.createDriftUserAccount()\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables\nDESCRIPTION: Command to create environment configuration file from template.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/agent-kit-langgraph/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Overview of the project's folder organization showing key directories and their purposes.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/agent-kit-langgraph/README.md#2025-04-11_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/\n├── agents/         # Individual agent implementations\n├── helper/         # Helper utilities and examples\n├── prompts/        # Agent prompts and templates\n├── tools/          # Custom tools for agents\n└── utils/          # Utility functions and configurations\n```\n\n----------------------------------------\n\nTITLE: Running the Example\nDESCRIPTION: Command to execute the example implementation using pnpm.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/examples/agent-kit-langgraph/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Cloning Solana Agent Kit Repository with Git\nDESCRIPTION: Use Git to clone the Solana Agent Kit repository to your local machine. This command downloads the project files to your current directory.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/setup_locally.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/yourusername/solana-agent-kit.git\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Bash\nDESCRIPTION: Change the current working directory to the newly cloned Solana Agent Kit project folder. This step is necessary before running further commands.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/setup_locally.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd solana-agent-kit\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Use PNPM to install all necessary project dependencies as specified in the package.json file. This command should be run from the project's root directory.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/setup_locally.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for Solana Agent Kit\nDESCRIPTION: Generate project documentation using the provided script. This optional step creates documentation files in the docs/ directory.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/setup_locally.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm run docs\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information\nDESCRIPTION: Set up Git with your user name and email. This configuration is important for proper attribution of commits in version control.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/setup_locally.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Solana Agent Kit Installation\nDESCRIPTION: Run the build and test scripts to verify that the project has been set up correctly and all tests pass successfully.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/setup_locally.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build\npnpm run test\n```\n\n----------------------------------------\n\nTITLE: Running Automated Tests for Solana Agent Kit in Bash\nDESCRIPTION: Command to execute the test script located at test/index.ts using pnpm.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/test_it_out.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test\n```\n\n----------------------------------------\n\nTITLE: Launching the Solana Agent in Interactive Mode using Bash\nDESCRIPTION: Command to start the Solana Agent in interactive mode, allowing selection between chat and autonomous modes.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/test_it_out.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:vercel-ai\n```\n\n----------------------------------------\n\nTITLE: Creating an NFT Collection using Solana Agent Kit in TypeScript\nDESCRIPTION: Example demonstrating how to create an NFT collection using the SolanaAgentKit class. It initializes the agent and then deploys a collection with specified name, URI, royalty, and creator information.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/guides/test_it_out.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SolanaAgentKit } from \"solana-agent-kit\";\n\nconst agent = new SolanaAgentKit(\n  \"your-wallet-private-key-as-base58\",\n  \"https://api.mainnet-beta.solana.com\",\n  { OPENAI_API_KEY: \"your-openai-api-key\" } // optional config\n);\n\nconst collection = await agent.deployCollection({\n  name: \"My NFT Collection\",\n  uri: \"https://arweave.net/metadata.json\",\n  royaltyBasisPoints: 500,  // 5%\n  creators: [\n    {\n      address: \"creator-wallet-address\",\n      percentage: 100,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch for Feature Development in Git\nDESCRIPTION: Command to create a new Git branch for feature development, following the project's naming convention.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branch to Remote Git Repository\nDESCRIPTION: Command to push a feature branch to the remote Git repository after making changes.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Cloning the Solana Agent Kit Repository\nDESCRIPTION: Command to clone the Solana Agent Kit repository to the local machine as the first step in the development setup.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/CONTRIBUTING.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/yourusername/solana-agent-kit.git\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory\nDESCRIPTION: Command to change directory to the cloned Solana Agent Kit project folder after cloning.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/CONTRIBUTING.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd solana-agent-kit\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with PNPM\nDESCRIPTION: Command to install all required dependencies for the Solana Agent Kit project using PNPM package manager.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/CONTRIBUTING.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Building the Solana Agent Kit Project\nDESCRIPTION: Command to compile the TypeScript code in the Solana Agent Kit project using the build script defined in package.json.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/CONTRIBUTING.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Generating TypeDoc Documentation for Solana Agent Kit\nDESCRIPTION: Command to generate project documentation using TypeDoc, which will create documentation in the docs/ directory.\nSOURCE: https://github.com/sendaifun/solana-agent-kit/blob/main/CONTRIBUTING.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs\n```"
  }
]