[
  {
    "owner": "octokit",
    "repo": "octokit.js",
    "content": "TITLE: Authenticating and Querying GitHub API with Octokit\nDESCRIPTION: This example shows how to create an authenticated Octokit instance using a personal access token and make a REST API request to get the authenticated user's username.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a personal access token at https://github.com/settings/tokens/new?scopes=repo\nconst octokit = new Octokit({ auth: `personal-access-token123` });\n\n// Compare: https://docs.github.com/en/rest/reference/users#get-the-authenticated-user\nconst {\n  data: { login },\n} = await octokit.rest.users.getAuthenticated();\nconsole.log(\"Hello, %s\", login);\n```\n\n----------------------------------------\n\nTITLE: Importing Octokit in Browsers using ES modules\nDESCRIPTION: This snippet demonstrates how to import the Octokit and App classes from the octokit package using ES modules in a browser environment.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\nimport { Octokit, App } from \"https://esm.sh/octokit\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Octokit in Node.js\nDESCRIPTION: This snippet demonstrates how to import the Octokit and App classes from the octokit package in a Node.js environment after installation via npm, pnpm, or yarn.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Octokit, App } from \"octokit\";\n```\n\n----------------------------------------\n\nTITLE: Creating an Issue Using Octokit Request Method\nDESCRIPTION: This example shows how to create an issue using the `octokit.request` method, which provides a more direct mapping to the GitHub REST API documentation. It demonstrates the flexibility of using the request method for any API endpoint.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nawait octokit.request(\"POST /repos/{owner}/{repo}/issues\", {\n  owner: \"octocat\",\n  repo: \"hello-world\",\n  title: \"Hello, world!\",\n  body: \"I created this issue using Octokit!\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Issue Using Octokit REST API Methods\nDESCRIPTION: This snippet demonstrates how to create an issue using the Octokit REST API endpoint methods. It shows the convenience of using the `octokit.rest.*` syntax for better code readability.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nawait octokit.rest.issues.create({\n  owner: \"octocat\",\n  repo: \"hello-world\",\n  title: \"Hello, world!\",\n  body: \"I created this issue using Octokit!\",\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Request Errors in Octokit\nDESCRIPTION: This snippet demonstrates how to handle request errors when using Octokit. It shows how to import the RequestError class and use a try-catch block to handle Octokit-specific errors and other errors separately.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RequestError } from \"octokit\";\n\ntry {\n  // your code here that sends at least one Octokit request\n  await octokit.request(\"GET /\");\n} catch (error) {\n  // Octokit errors are instances of RequestError, so they always have an `error.status` property containing the HTTP response code.\n  if (error instanceof RequestError) {\n    // handle Octokit error\n    // error.message; // Oops\n    // error.status; // 500\n    // error.request; // { method, url, headers, body }\n    // error.response; // { url, status, headers, data }\n  } else {\n    // handle all other errors\n    throw error;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating Through Repository Issues Using Octokit\nDESCRIPTION: This snippet demonstrates how to use Octokit's pagination API to iterate through all issues in a repository. It uses an async iterator for memory-efficient pagination, processing 100 issues per page.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst iterator = octokit.paginate.iterator(octokit.rest.issues.listForRepo, {\n  owner: \"octocat\",\n  repo: \"hello-world\",\n  per_page: 100,\n});\n\n// iterate through each response\nfor await (const { data: issues } of iterator) {\n  for (const issue of issues) {\n    console.log(\"Issue #%d: %s\", issue.number, issue.title);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating as a GitHub App Installation in JavaScript\nDESCRIPTION: This snippet demonstrates how to authenticate as a GitHub App Installation using the createAppAuth strategy. It shows how to create an authenticated Octokit instance and make API calls using the installation access token.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createAppAuth } from \"@octokit/auth-app\";\nconst octokit = new Octokit({\n  authStrategy: createAppAuth,\n  auth: {\n    appId: 1,\n    privateKey: \"-----BEGIN PRIVATE KEY-----\\n...\",\n    installationId: 123,\n  },\n});\n\n// authenticates as app based on request URLs\nconst {\n  data: { slug },\n} = await octokit.rest.apps.getAuthenticated();\n\n// creates an installation access token as needed\n// assumes that installationId 123 belongs to @octocat, otherwise the request will fail\nawait octokit.rest.issues.create({\n  owner: \"octocat\",\n  repo: \"hello-world\",\n  title: \"Hello world from \" + slug,\n});\n```\n\n----------------------------------------\n\nTITLE: Using App SDK for GitHub App Authentication in JavaScript\nDESCRIPTION: This example shows how to use the App SDK to simplify GitHub App authentication and API interactions. It demonstrates creating an App instance, authenticating, and making API calls using the installation Octokit.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = new App({ appId, privateKey });\nconst { data: slug } = await app.octokit.rest.apps.getAuthenticated();\nconst octokit = await app.getInstallationOctokit(123);\nawait octokit.rest.issues.create({\n  owner: \"octocat\",\n  repo: \"hello-world\",\n  title: \"Hello world from \" + slug,\n});\n```\n\n----------------------------------------\n\nTITLE: Handling GitHub Webhooks with Octokit\nDESCRIPTION: Example of receiving and handling GitHub webhook events to create a comment on newly opened issues. Uses the App client and a Node.js HTTP server.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createServer } from \"node:http\";\nimport { App, createNodeMiddleware } from \"octokit\";\n\nconst app = new App({\n  appId,\n  privateKey,\n  webhooks: { secret },\n});\n\napp.webhooks.on(\"issues.opened\", ({ octokit, payload }) => {\n  return octokit.rest.issues.createComment({\n    owner: payload.repository.owner.login,\n    repo: payload.repository.name,\n    issue_number: payload.issue.number,\n    body: \"Hello, World!\",\n  });\n});\n\n// Your app can now receive webhook events at `/api/github/webhooks`\ncreateServer(createNodeMiddleware(app)).listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Creating Express Server with Octokit App Middleware\nDESCRIPTION: Example of setting up an Express server with Octokit App middleware for handling GitHub webhook events and OAuth flows. Demonstrates initialization of the App instance and middleware integration.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from \"express\";\nimport { App, createNodeMiddleware } from \"octokit\";\n\nconst expressApp = express();\nconst octokitApp = new App({\n  appId,\n  privateKey,\n  webhooks: { secret },\n  oauth: { clientId, clientSecret },\n});\n\nexpressApp.use(createNodeMiddleware(app));\n\nexpressApp.listen(3000, () => {\n  console.log(`Example app listening at http://localhost:3000`);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth Web Flow with GitHub App Client\nDESCRIPTION: Example of using the App client's OAuth features to handle the OAuth web flow, watch a repository when a user logs in, and serve the necessary HTTP endpoints.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createServer } from \"node:http\";\nimport { App, createNodeMiddleware } from \"octokit\";\n\nconst app = new App({\n  oauth: { clientId, clientSecret },\n});\n\napp.oauth.on(\"token.created\", async ({ token, octokit }) => {\n  await octokit.rest.activity.setRepoSubscription({\n    owner: \"octocat\",\n    repo: \"hello-world\",\n    subscribed: true,\n  });\n});\n\n// Your app can receive the OAuth redirect at /api/github/oauth/callback\n// Users can initiate the OAuth web flow by opening /api/github/oauth/login\ncreateServer(createNodeMiddleware(app)).listen(3000);\n```\n\n----------------------------------------\n\nTITLE: OAuth Token Exchange and User Authentication in Browser\nDESCRIPTION: Client-side implementation of OAuth token exchange and user authentication. Handles authorization code retrieval, URL cleanup, token exchange with backend, and basic GitHub API usage.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst code = new URL(location.href).searchParams.get(\"code\");\nif (code) {\n  // remove ?code=... from URL\n  const path =\n    location.pathname +\n    location.search.replace(/\\b(code|state)=\\w+/g, \"\").replace(/[?&]+$/, \"\");\n  history.replaceState({}, \"\", path);\n\n  // exchange the code for a token with your backend.\n  // If you use https://github.com/octokit/oauth-app.js\n  // the exchange would look something like this\n  const response = await fetch(\"/api/github/oauth/token\", {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify({ code }),\n  });\n  const { token } = await response.json();\n  // `token` is the OAuth Access Token that can be use\n\n  const { Octokit } = await import(\"https://esm.sh/@octokit/core\");\n  const octokit = new Octokit({ auth: token });\n\n  const {\n    data: { login },\n  } = await octokit.request(\"GET /user\");\n  alert(\"Hi there, \" + login);\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to GraphQL Queries\nDESCRIPTION: Shows how to pass variables as a second argument to octokit.graphql when querying the GitHub GraphQL API. This example retrieves recent issues from a repository.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst { lastIssues } = await octokit.graphql(\n  `\n    query lastIssues($owner: String!, $repo: String!, $num: Int = 3) {\n      repository(owner: $owner, name: $repo) {\n        issues(last: $num) {\n          edges {\n            node {\n              title\n            }\n          }\n        }\n      }\n    }\n  `,\n  {\n    owner: \"octokit\",\n    repo: \"graphql.js\",\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Paginating through GraphQL API Results\nDESCRIPTION: Example of using octokit.graphql.paginate to retrieve all issues from a repository, working around GitHub's GraphQL API 100-item limit.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst { allIssues } = await octokit.graphql.paginate(\n  `\n    query allIssues($owner: String!, $repo: String!, $num: Int = 10, $cursor: String) {\n      repository(owner: $owner, name: $repo) {\n        issues(first: $num, after: $cursor) {\n          edges {\n            node {\n              title\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }\n  `,\n  {\n    owner: \"octokit\",\n    repo: \"graphql.js\",\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw Content of a File Using Octokit\nDESCRIPTION: This example shows how to retrieve the raw content of a file (in this case, package.json) using Octokit. It demonstrates setting the media type format to 'raw' for the request.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data } = await octokit.rest.repos.getContent({\n  mediaType: {\n    format: \"raw\",\n  },\n  owner: \"octocat\",\n  repo: \"hello-world\",\n  path: \"package.json\",\n});\nconsole.log(\"package name: %s\", JSON.parse(data).name);\n```\n\n----------------------------------------\n\nTITLE: Configuring Octokit for GitHub Enterprise Server\nDESCRIPTION: This example shows how to configure the Octokit instance to work with a GitHub Enterprise Server by setting the baseUrl option to the root URL of the API.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst octokit = new Octokit({\n  baseUrl: \"https://github.acme-inc.com/api/v3\",\n});\n```\n\n----------------------------------------\n\nTITLE: Getting an Installation-Authenticated Octokit Instance\nDESCRIPTION: Shows how to get an Octokit instance authenticated as a GitHub App installation using the installation ID.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst octokit = await app.getInstallationOctokit(123);\n```\n\n----------------------------------------\n\nTITLE: Verifying and Receiving Webhook Events in Serverless Environments\nDESCRIPTION: Shows how to manually verify and process GitHub webhook events in serverless environments using the App client.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nawait app.webhooks.verifyAndReceive({\n  id: request.headers[\"x-github-delivery\"],\n  name: request.headers[\"x-github-event\"],\n  signature: request.headers[\"x-hub-signature-256\"],\n  payload: request.body,\n});\n```\n\n----------------------------------------\n\nTITLE: Exchanging OAuth Code for Access Token\nDESCRIPTION: Shows how to exchange the OAuth code from a web flow redirect for an access token in serverless environments using the App client.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst { token } = await app.oauth.createToken({\n  code: request.query.code,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Token with Device Flow\nDESCRIPTION: Demonstrates creating an OAuth token using the device flow, which allows users to authenticate on a separate device using a verification code.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst { token } = await app.oauth.createToken({\n  async onVerification(verification) {\n    await sendMessageToUser(\n      request.body.phoneNumber,\n      `Your code is ${verification.user_code}. Enter it at ${verification.verification_uri}`,\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an OAuth App Server with Default Scopes\nDESCRIPTION: Example of creating an OAuth App using the OAuthApp client with default scopes, handling token events, and setting up the necessary HTTP endpoints.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createServer } from \"node:http\";\nimport { OAuthApp, createNodeMiddleware } from \"octokit\";\n\nconst app = new OAuthApp({\n  clientId,\n  clientSecret,\n  defaultScopes: [\"repo\", \"gist\"],\n});\n\napp.oauth.on(\"token\", async ({ token, octokit }) => {\n  await octokit.rest.gists.create({\n    description: \"I created this gist using Octokit!\",\n    public: true,\n    files: {\n      \"example.js\": `/* some code here */`,\n    },\n  });\n});\n\n// Your app can receive the OAuth redirect at /api/github/oauth/callback\n// Users can initiate the OAuth web flow by opening /api/oauth/login\ncreateServer(createNodeMiddleware(app)).listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Querying GitHub GraphQL API for Authenticated User\nDESCRIPTION: Example showing how to use octokit.graphql to fetch the login of the currently authenticated user using GitHub's GraphQL API.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  viewer: { login },\n} = await octokit.graphql(`{\n  viewer {\n    login\n  }\n}`);\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Schema Previews\nDESCRIPTION: Shows how to enable schema previews in GraphQL queries using the mediaType option. This example creates a label in a repository.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nawait octokit.graphql(\n  `mutation createLabel($repositoryId:ID!,name:String!,color:String!) {\n  createLabel(input:{repositoryId:$repositoryId,name:$name}) {\n    label: {\n      id\n    }\n  }\n}`,\n  {\n    repositoryId: 1,\n    name: \"important\",\n    color: \"cc0000\",\n    mediaType: {\n      previews: [\"bane\"],\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Dispatching Repository Events with GitHub App\nDESCRIPTION: Example of using the App client to dispatch repository events to all repositories where the app is installed. Creates a custom event with a payload.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { App } from \"octokit\";\n\nconst app = new App({ appId, privateKey });\n\nfor await (const { octokit, repository } of app.eachRepository.iterator()) {\n  // https://docs.github.com/en/rest/reference/repos#create-a-repository-dispatch-event\n  await octokit.rest.repos.createDispatchEvent({\n    owner: repository.owner.login,\n    repo: repository.name,\n    event_type: \"my_event\",\n    client_payload: {\n      foo: \"bar\",\n    },\n  });\n  console.log(\"Event dispatched for %s\", repository.full_name);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom User Agent for Octokit\nDESCRIPTION: This snippet demonstrates how to set a custom user agent when initializing an Octokit instance, which is recommended for all requests to GitHub's Platform APIs.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst octokit = new Octokit({\n  userAgent: \"my-app/v1.2.3\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Server for Octokit in Node.js\nDESCRIPTION: This snippet demonstrates how to configure Octokit to use a proxy server in a Node.js environment. It uses the undici ProxyAgent to route requests through a specified proxy URL.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fetch as undiciFetch, ProxyAgent } from 'undici';\n\nconst myFetch = (url, options) => {\n  return undiciFetch(url, {\n    ...options,\n    dispatcher: new ProxyAgent(<your_proxy_url>)\n  })\n}\n\nconst octokit = new Octokit({\n  request: {\n     fetch: myFetch\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Fetch Implementation for Octokit in Node.js\nDESCRIPTION: This example shows how to provide a custom fetch implementation for Octokit when using an unsupported version of Node.js. It uses node-fetch as an alternative to the native fetch API.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport fetch from \"node-fetch\";\n\nconst octokit = new Octokit({\n  request: {\n    fetch: fetch,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Time Zone for Octokit Requests\nDESCRIPTION: This snippet demonstrates how to set a specific time zone for Octokit requests, which affects the timestamp used when creating commits.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst octokit = new Octokit({\n  timeZone: \"America/Los_Angeles\",\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Throttling in Octokit\nDESCRIPTION: This code shows how to opt-out of the default request throttling feature in Octokit by setting the throttle.enabled option to false.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nnew Octokit({ throttle: { enabled: false } });\n```\n\n----------------------------------------\n\nTITLE: Disabling Retry Mechanism in Octokit\nDESCRIPTION: This snippet demonstrates how to disable the default request retry mechanism in Octokit by setting the retry.enabled option to false.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nnew Octokit({ retry: { enabled: false } });\n```\n\n----------------------------------------\n\nTITLE: Importing Octokit in Deno\nDESCRIPTION: This code snippet shows how to import the Octokit and App classes from the octokit package in a Deno environment, including TypeScript declarations.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Octokit, App } from \"https://esm.sh/octokit?dts\";\n```\n\n----------------------------------------\n\nTITLE: Setting Up Octokit Repository Locally with Git and npm\nDESCRIPTION: Instructions for cloning a forked Octokit repository, navigating to the project directory, and installing dependencies. This is the initial setup required before making any code changes.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/<your account name>/<repository name>.git\ncd <repository name>\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Octokit Tests Locally\nDESCRIPTION: Command to run the test suite before making any changes to ensure the local environment is set up correctly.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing Octokit from a GitHub Pull Request\nDESCRIPTION: Command to install a specific version of an Octokit package from a pull request for local testing. This allows contributors to test changes before they are merged.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install https://github.pika.dev/octokit/<repository name>/pr/[PULL REQUEST NUMBER]\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic-Release Branches in package.json\nDESCRIPTION: Configuration example for semantic-release in package.json to include maintenance release branches using the pattern +([0-9]).x alongside main and beta branches.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/MAINTAINING.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n  \"release\": {\n    \"branches\": [\n      \"+([0-9]).x\",\n      \"main\",\n      \"beta\"\n    ],\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Releases\nDESCRIPTION: GitHub Actions workflow configuration (release.yml) that triggers the release process on push events to main, next, beta, and maintenance version branches.\nSOURCE: https://github.com/octokit/octokit.js/blob/main/MAINTAINING.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nname: Release\n\"on\":\n  push:\n    branches:\n      - main\n      - next\n      - beta\n      - \"*.x\"\n```"
  }
]