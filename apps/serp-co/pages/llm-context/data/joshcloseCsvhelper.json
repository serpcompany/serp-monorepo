[
  {
    "owner": "joshclose",
    "repo": "csvhelper",
    "content": "TITLE: Reading CSV Data as Dynamic Objects using CsvHelper in C#\nDESCRIPTION: This code snippet demonstrates how to use CsvHelper to read CSV data and convert it into dynamic objects. It uses StreamReader to read the CSV file and CsvReader to parse the data. The GetRecords<dynamic>() method is used to retrieve the records as dynamic objects.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/reading/get-dynamic-records/index.md#2025-04-16_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvoid Main()\n{\n    using (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n    using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n    {\n        var records = csv.GetRecords<dynamic>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading CSV into C# Class Objects\nDESCRIPTION: Demonstrates how to use CsvReader to parse CSV file content into strongly-typed Foo class objects. Uses StreamReader for file access and specifies InvariantCulture for parsing.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/reading/get-class-records/index.md#2025-04-16_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvoid Main()\n{\n\tusing (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n\tusing (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n\t{\n\t\tvar records = csv.GetRecords<Foo>();\n\t}\n}\n\npublic class Foo\n{\n\tpublic int Id { get; set; }\n\tpublic string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CsvHelper with Attributes in C#\nDESCRIPTION: Complete example showing how to use CsvHelper with attribute-based configuration. Demonstrates reading CSV data, applying attributes for column mapping, data conversion, and handling special values. Includes class definition with various attribute types.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/attributes/index.md#2025-04-16_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvoid Main()\n{\n\tvar config = CsvConfiguration.FromAttributes<Foo>();\n\tusing (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n\tusing (var csv = new CsvReader(reader, config))\n\t{\n\t\tList<Foo> records = csv.GetRecords<Foo>().ToList();\n\n\t\t// These all print \"True\"\n\n\t\tConsole.WriteLine(records.Count == 2);\n\t\tConsole.WriteLine(records[0].Id == 1);\n\t\tConsole.WriteLine(records[0].Amount == 1.234m);\n\t\tConsole.WriteLine(records[0].Amount2 == 1234);\n\t\tConsole.WriteLine(records[0].IsBool == true);\n\t\tConsole.WriteLine(records[0].Constant == \"bar\");\n\t\tConsole.WriteLine(records[0].Optional == null);\n\t\tConsole.WriteLine(records[0].Ignored == null);\n\n\t\tConsole.WriteLine(records[1].Amount == 1234);\n\t\tConsole.WriteLine(records[1].Amount2 == 1.234m);\n\n\t}\n}\n\n[Delimiter(\"|\")] \n[CultureInfo(\"de-DE\")]\npublic class Foo\n{\n\t[Name(\"Identifier\")]\n\tpublic int Id { get; set; }\n\n\t[Index(1)]\n\tpublic decimal Amount { get; set; }\n\t\n\t[CultureInfo(\"InvariantCulture\")]\n\tpublic decimal Amount2 { get; set; }\n\n\t[BooleanTrueValues(\"yes\")]\n\t[BooleanFalseValues(\"no\")]\n\tpublic bool IsBool { get; set; }\n\n\t[Constant(\"bar\")]\n\tpublic string Constant { get; set; }\n\n\t[Optional]\n\tpublic string Optional { get; set; }\n\n\t[Ignore]\n\tpublic string Ignored { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading CSV with Case-Insensitive Header Matching\nDESCRIPTION: Configuring CsvHelper to handle case differences between CSV headers and C# property names by converting headers to lowercase for matching.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/getting-started/index.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tPrepareHeaderForMatch = args => args.Header.ToLower(),\n};\nusing (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\nusing (var csv = new CsvReader(reader, config))\n{\n\tvar records = csv.GetRecords<Foo>();\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Multiple Data Sets with CsvHelper in C#\nDESCRIPTION: This code demonstrates how to parse a CSV file containing multiple distinct data sets. The approach involves registering class maps for each data type, tracking headers and blanks lines, and switching between record types based on header field values. The example reads and categorizes records into either Foo or Bar objects based on their header signatures.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/reading/reading-multiple-data-sets/index.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Main()\n{\n    var config = new CsvConfiguration(CultureInfo.InvariantCulture)\n\t{\n\t\tIgnoreBlankLines = false,\t\t\n\t};\n    using (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n    using (var csv = new CsvReader(reader, config))\n    {\n\t\tcsv.Context.RegisterClassMap<FooMap>();\n\t\tcsv.Context.RegisterClassMap<BarMap>();\n\t\tvar fooRecords = new List<Foo>();\n\t\tvar barRecords = new List<Bar>();\n\t\tvar isHeader = true;\n\t\twhile (csv.Read())\n\t\t{\n\t\t\tif (isHeader)\n\t\t\t{\n\t\t\t\tcsv.ReadHeader();\n\t\t\t\tisHeader = false;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif (string.IsNullOrEmpty(csv.GetField(0)))\n\t\t\t{\n\t\t\t\tisHeader = true;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tswitch (csv.HeaderRecord[0])\n\t\t\t{\n\t\t\t\tcase \"FooId\":\n\t\t\t\t\tfooRecords.Add(csv.GetRecord<Foo>());\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"BarId\":\n\t\t\t\t\tbarRecords.Add(csv.GetRecord<Bar>());\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new InvalidOperationException(\"Unknown record type.\");\n\t\t\t}\n\t\t}\n    }\n}\n\npublic class Foo\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n\npublic class Bar\n{\n\tpublic Guid Id { get; set; }\n\tpublic string Name { get; set; }\n}\n\npublic sealed class FooMap : ClassMap<Foo>\n{\n\tpublic FooMap()\n\t{\n\t\tMap(m => m.Id).Name(\"FooId\");\n\t\tMap(m => m.Name);\n\t}\n}\n\npublic sealed class BarMap : ClassMap<Bar>\n{\n\tpublic BarMap()\n\t{\n\t\tMap(m => m.Id).Name(\"BarId\");\n\t\tMap(m => m.Name);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Reading CSV File with Matching Header Names\nDESCRIPTION: Basic example of reading a CSV file where the header names match the property names of the target class without any additional configuration.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/getting-started/index.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\nusing (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n{\n\tvar records = csv.GetRecords<Foo>();\n}\n```\n\n----------------------------------------\n\nTITLE: CsvHelper Built-in Type Converters Reference Table\nDESCRIPTION: Table showing the mapping between CsvHelper converters, C# keywords, and .NET framework types. Lists all available built-in converters for various data types including primitives, collections, and special types like DateTime and GUID.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/type-conversion/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCsvHelper Converter | C# type keyword | .NET Type\n- | -\nArrayConverter | [ ] | System.Array\nBigIntegerConverter | | System.Numerics.BigInteger\nBooleanConverter | bool | System.Boolean\nByteArrayConverter | byte[ ] | System.Array\nByteConverter | byte | System.Byte\nCharConverter | char | System.Char\nCollectionGenericConverter | | System.Collections.Generic.Collection\\<T\\>, System.Collections.Generic.List\\<T\\>\nDateOnlyConverter | | System.DateOnly\nDateTimeConverter | | System.DateTime\nDateTimeOffsetConverter | | System.DateTimeOffset\nDecimalConverter | decimal | System.Decimal\nDoubleConverter | double | System.Double\nEnumConverter | enum | System.Enum\nGuidConverter | | System.Guid\nIDictionaryConverter | | System.Collections.Generic.Dictionary\\<string, string\\>\nIDictionaryGenericConverter | | System.Collections.Generic.Dictionary\\<TKey, TValue\\>\nIEnumerableConverter | | System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList\nIEnumerableGenericConverter | | System.Collections.Generic.ICollection\\<T\\>, System.Collections.Generic.IEnumerable\\<T\\>, System.Collections.Generic.IList\\<T\\>\nInt16Converter | short | System.Int16\nInt32Converter | int | System.Int32\nInt64Converter | long | System.Int64\nNullableConverter | | System.Nullable\\<T\\>\nSByteConverter | sbyte | System.SByte\nSingleConverter | float | System.Single\nStringConverter | string | System.String\nTimeOnlyConverter | | System.TimeOnly\nUInt16Converter | ushort | System.UInt16\nUInt32Converter | uint | System.UInt32\nUInt64Converter | ulong | System.UInt64\nUriConverter | | System.Uri\n```\n\n----------------------------------------\n\nTITLE: Writing List of Objects to CSV using CsvHelper\nDESCRIPTION: Demonstrates how to write a List<T> of class objects to a CSV file using CsvHelper. Uses StreamWriter and CsvWriter with InvariantCulture to write objects to a CSV file with automatic header generation based on property names.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/writing/write-class-objects/index.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvoid Main()\n{\n\tvar records = new List<Foo>\n\t{\n\t\tnew Foo { Id = 1, Name = \"one\" },\n\t};\n\t\n\tusing (var writer = new StreamWriter(\"path\\\\to\\\\file.csv\"))\n\tusing (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))\n\t{\n\t\tcsv.WriteRecords(records);\n\t}\n}\n\npublic class Foo\n{\n\tpublic int Id { get; set; }\n\tpublic string Name { get; set; }\n}\n```\n\nLANGUAGE: text\nCODE:\n```\nId,Name\n1,one\n```\n\n----------------------------------------\n\nTITLE: Parsing CSV into Anonymous Types using CsvHelper in C#\nDESCRIPTION: This C# code snippet demonstrates how to use CsvHelper to read a CSV file and convert its rows into anonymous type objects. It defines an anonymous type with Id and Name properties, matching the CSV structure.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/reading/get-anonymous-type-records/index.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Main()\n{\n    using (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n    using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n    {\n\t\tvar anonymousTypeDefinition = new\n\t\t{\n\t\t\tId = default(int),\n\t\t\tName = string.Empty\n\t\t};\n        var records = csv.GetRecords(anonymousTypeDefinition);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping CSV Columns to Class Properties using CsvHelper in C#\nDESCRIPTION: This code snippet demonstrates how to use CsvHelper to read a CSV file and map its columns to properties of a custom class when the names don't match. It utilizes a ClassMap to define the mapping between CSV columns and class properties.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/class-maps/mapping-by-name/index.md#2025-04-16_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvoid Main()\n{\n\tusing (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n\tusing (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n\t{\n\t\tcsv.Context.RegisterClassMap<FooMap>();\n\t\tvar records = csv.GetRecords<Foo>();\n\t}\n}\n\npublic class Foo\n{\n\tpublic int Id { get; set; }\n\tpublic string Name { get set; }\n}\n\npublic sealed class FooMap : ClassMap<Foo>\n{\n\tpublic FooMap()\n\t{\n\t\tMap(m => m.Id).Name(\"ColumnA\");\n\t\tMap(m => m.Name).Name(\"ColumnB\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Type Conversion in CsvHelper (C#)\nDESCRIPTION: This code demonstrates how to use CsvHelper with a custom type converter to read CSV data containing JSON and convert it to a custom object. It includes class definitions, a custom JSON converter, and a class map for CsvHelper.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/class-maps/type-conversion/index.md#2025-04-16_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvoid Main()\n{\n\tusing (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n\tusing (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n\t{\n\t\tcsv.Context.RegisterClassMap<FooMap>();\n\t\tcsv.GetRecords<Foo>().ToList().Dump();\n\t}\n}\n\npublic class Foo\n{\n\tpublic int Id { get; set; }\n\tpublic string Name { get; set; }\n\tpublic Json Json { get; set; }\n}\n\npublic class Json\n{\n\tpublic string Foo { get; set; }\n}\n\npublic class JsonConverter<T> : DefaultTypeConverter\n{\n\tpublic override object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData)\n\t{\n\t\treturn JsonConvert.DeserializeObject<T>(text);\n\t}\n\n\tpublic override string ConvertToString(object value, IWriterRow row, MemberMapData memberMapData)\n\t{\n\t\treturn JsonConvert.SerializeObject(value);\n\t}\n}\n\npublic class FooMap : ClassMap<Foo>\n{\n\tpublic FooMap()\n\t{\n\t\tMap(m => m.Id);\n\t\tMap(m => m.Name);\n\t\tMap(m => m.Json).TypeConverter<JsonConverter<Json>>();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Records to a CSV File\nDESCRIPTION: Basic example of writing a collection of objects to a CSV file, automatically generating the header and formatting the data according to the specified culture.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/getting-started/index.md#2025-04-16_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var writer = new StreamWriter(\"path\\\\to\\\\file.csv\"))\nusing (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))\n{\n\tcsv.WriteRecords(records);\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping CSV Fields with Multiple Possible Header Names using CsvHelper in C#\nDESCRIPTION: This code demonstrates how to use CsvHelper's ClassMap to define multiple possible header names for properties in a class. The example registers a custom class map that allows the CSV reader to match fields with alternate header names to the corresponding properties.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/class-maps/mapping-by-alternate-names/index.md#2025-04-16_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvoid Main()\n{\n    using (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n    using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n    {\n        csv.Context.RegisterClassMap<FooMap>();\n        var records = csv.GetRecords<Foo>();\n    }\n}\n\npublic class Foo\n{\n    public int Id { get; set; }\n    public string Name { get set; }\n}\n\npublic sealed class FooMap : ClassMap<Foo>\n{\n    public FooMap()\n    {\n        Map(m => m.Id).Name(\"TheId\", \"Id\");\n        Map(m => m.Name).Name(\"TheName\", \"Name\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data with Specified Column Types using CsvDataReader in C#\nDESCRIPTION: This snippet shows how to load CSV data into a DataTable with specified column names and types using CsvDataReader. It demonstrates adding columns with specific types to the DataTable before loading the data.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/csvdatareader/index.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\nusing (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n{\n\t// Do any configuration to `CsvReader` before creating CsvDataReader.\n\tusing (var dr = new CsvDataReader(csv))\n\t{\t\t\n\t\tvar dt = new DataTable();\n\t\tdt.Columns.Add(\"Id\", typeof(int));\n\t\tdt.Columns.Add(\"Name\", typeof(string));\n\n\t\tdt.Load(dr);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Records to CSV File using CsvHelper in C#\nDESCRIPTION: Demonstrates writing initial records to a CSV file and then appending additional records using CsvHelper. The example shows how to configure the CSV writer to skip writing headers when appending data. Uses StreamWriter and CsvWriter classes with proper configuration handling.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/writing/appending-to-an-existing-file/index.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvoid Main()\n{\n\tvar records = new List<Foo>\n\t{\n\t\tnew Foo { Id = 1, Name = \"one\" },\n\t};\n\n\t// Write to a file.\n\tusing (var writer = new StreamWriter(\"path\\\\to\\\\file.csv\"))\n\tusing (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))\n\t{\n\t\tcsv.WriteRecords(records);\n\t}\n\n\trecords = new List<Foo>\n\t{\n\t\tnew Foo { Id = 2, Name = \"two\" },\n\t};\n\n\t// Append to the file.\n\tvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n\t{\n\t\t// Don't write the header again.\n\t\tHasHeaderRecord = false,\n\t};\n\tusing (var stream = File.Open(\"path\\\\to\\\\file.csv\", FileMode.Append))\n\tusing (var writer = new StreamWriter(stream))\n\tusing (var csv = new CsvWriter(writer, config))\n\t{\n\t\tcsv.WriteRecords(records);\n\t}\n}\n\npublic class Foo\n{\n\tpublic int Id { get; set; }\n\tpublic string Name { get; set; }\n}\n```\n\nLANGUAGE: text\nCODE:\n```\nId,Name\n1,one\n2,two\n```\n\n----------------------------------------\n\nTITLE: Writing Anonymous Type Objects to CSV with CsvHelper in C#\nDESCRIPTION: This code snippet demonstrates how to write a list of anonymous type objects to a CSV file using CsvHelper. It creates a list with a single anonymous object, then uses StreamWriter and CsvWriter to write the records to a file.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/writing/write-anonymous-type-objects/index.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvoid Main()\n{\n\tvar records = new List<object>\n\t{\n\t\tnew { Id = 1, Name = \"one\" },\n\t};\n\t\n\tusing (var writer = new StreamWriter(\"path\\\\to\\\\file.csv\"))\n\tusing (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))\n\t{\n\t\tcsv.WriteRecords(records);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CSV Property Mapping in C#\nDESCRIPTION: Complete example showing how to map class properties to CSV headers using CsvHelper. Demonstrates class definition, mapping configuration, and CSV reading with registered class map.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/class-maps/mapping-properties/index.md#2025-04-16_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvoid Main()\n{\n\tusing (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n\tusing (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n\t{\t\t\n\t\tcsv.Context.RegisterClassMap<FooMap>();\n\t\tvar records = csv.GetRecords<Foo>();\n\t}\n}\n\npublic class Foo\n{\n\tpublic int Id { get; set; }\t\n\tpublic string Name { get; set; }\n}\n\npublic sealed class FooMap : ClassMap<Foo>\n{\n\tpublic FooMap()\n\t{\n\t\tMap(m => m.Id);\n\t\tMap(m => m.Name);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enumerating CSV Records with CsvHelper in C#\nDESCRIPTION: This snippet demonstrates how to use the EnumerateRecords method of CsvHelper to iterate over CSV data and populate a class object. It shows the creation of a StreamReader, CsvReader, and the usage of EnumerateRecords with a pre-instantiated object.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/reading/enumerate-class-records/index.md#2025-04-16_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvoid Main()\n{\n    using (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n    using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n    {\n\t\tvar record = new Foo();\n        var records = csv.EnumerateRecords(record);\n\t\tforeach (var r in records)\n\t\t{\n\t\t\t// r is the same instance as record.\n\t\t}\n    }\n}\n\npublic class Foo\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Index-Based CSV Mapping Implementation\nDESCRIPTION: Complete example showing how to configure CsvHelper for headerless CSV files, create a data model class, and implement index-based mapping. Demonstrates proper configuration, model definition, and mapping class setup using CsvHelper's ClassMap.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/class-maps/mapping-by-index/index.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Main()\n{\n    var config = new CsvConfiguration(CultureInfo.InvariantCulture)\n    {\n        HasHeaderRecord = false,\n    };\n    using (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n    using (var csv = new CsvReader(reader, config))\n    {\n        csv.Context.RegisterClassMap<FooMap>();\n        var records = csv.GetRecords<Foo>();\n    }\n}\n\npublic class Foo\n{\n    public int Id { get; set; }\n    public string Name { get set; }\n}\n\npublic sealed class FooMap : ClassMap<Foo>\n{\n    public FooMap()\n    {\n        Map(m => m.Id).Index(0);\n        Map(m => m.Name).Index(1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual CSV Reading Implementation in C#\nDESCRIPTION: Demonstrates how to read CSV data manually using CsvHelper, including header reading and field extraction. Creates strongly-typed objects from CSV rows without using class mapping.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/reading/reading-by-hand/index.md#2025-04-16_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvoid Main()\n{\n    using (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n    using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n    {\n        var records = new List<Foo>();\n\t\tcsv.Read();\n\t\tcsv.ReadHeader();\n\t\twhile (csv.Read())\n\t\t{\n\t\t\tvar record = new Foo\n\t\t\t{\n\t\t\t\tId = csv.GetField<int>(\"Id\"),\n\t\t\t\tName = csv.GetField(\"Name\")\n\t\t\t};\n\t\t\trecords.Add(record);\n\t\t}\n    }\n}\n\npublic class Foo\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data into DataTable using CsvDataReader in C#\nDESCRIPTION: This snippet demonstrates how to use CsvDataReader to load CSV data into a DataTable. It uses StreamReader and CsvReader to read the CSV file, then creates a CsvDataReader to populate the DataTable.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/csvdatareader/index.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\nusing (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n{\n\t// Do any configuration to `CsvReader` before creating CsvDataReader.\n\tusing (var dr = new CsvDataReader(csv))\n\t{\t\t\n\t\tvar dt = new DataTable();\n\t\tdt.Load(dr);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Reading CSV with Multiple Record Types using CsvHelper in C#\nDESCRIPTION: This code snippet demonstrates how to read a CSV file containing multiple record types using CsvHelper. It configures the CSV reader, registers class maps for different record types, and dynamically parses records based on the first column value. The example handles two record types: Foo and Bar.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/reading/reading-multiple-record-types/index.md#2025-04-16_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvoid Main()\n{\n\tvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n\t{\n\t\tHasHeaderRecord = false,\n\t};\n    using (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n    using (var csv = new CsvReader(reader, config))\n    {\n\t\tcsv.Context.RegisterClassMap<FooMap>();\n\t\tcsv.Context.RegisterClassMap<BarMap>();\n\t\tvar fooRecords = new List<Foo>();\n\t\tvar barRecords = new List<Bar>();\n\t\twhile (csv.Read())\n\t\t{\n\t\t\tswitch (csv.GetField(0))\n\t\t\t{\n\t\t\t\tcase \"A\":\n\t\t\t\t\tfooRecords.Add(csv.GetRecord<Foo>());\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"B\":\n\t\t\t\t\tbarRecords.Add(csv.GetRecord<Bar>());\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new InvalidOperationException(\"Unknown record type.\");\n\t\t\t}\n\t\t}\n    }\n}\n\npublic class Foo\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n\npublic class Bar\n{\n\tpublic Guid Id { get; set; }\n\tpublic string Name { get; set; }\n}\n\npublic sealed class FooMap : ClassMap<Foo>\n{\n\tpublic FooMap()\n\t{\n\t\tMap(m => m.Id).Index(1);\n\t\tMap(m => m.Name).Index(2);\n\t}\n}\n\npublic sealed class BarMap : ClassMap<Bar>\n{\n\tpublic BarMap()\n\t{\n\t\tMap(m => m.Id).Index(1);\n\t\tMap(m => m.Name).Index(2);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Constant Property Values with CsvHelper in C#\nDESCRIPTION: This example demonstrates how to set a constant value for a property when mapping CSV data using CsvHelper. The code registers a custom class map that maps two fields from the CSV file and sets a constant boolean value 'true' to the IsDirty property, which doesn't exist in the CSV file.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/class-maps/constant-value/index.md#2025-04-16_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvoid Main()\n{       \n    using (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n    using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n    {\n        csv.Context.RegisterClassMap<FooMap>();\n        var records = csv.GetRecords<Foo>();\n    }\n}\n\npublic class Foo\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public bool IsDirty { get; set; }\n}\n\npublic sealed class FooMap : ClassMap<Foo>\n{\n    public FooMap()\n    {\n\t\tMap(m => m.Id);\n\t\tMap(m => m.Name);\n        Map(m => m.IsDirty).Constant(true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Duplicate CSV Headers to C# Class Properties using CsvHelper\nDESCRIPTION: This code snippet shows how to use CsvHelper to read a CSV file with duplicate column names and map it to a C# class. It demonstrates the use of NameIndex() method to differentiate between duplicate 'Name' columns.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/class-maps/mapping-duplicate-names/index.md#2025-04-16_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvoid Main()\n{\n    using (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n    using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n    {\n        csv.Context.RegisterClassMap<FooMap>();\n        var records = csv.GetRecords<Foo>();\n    }\n}\n\npublic class Foo\n{\n    public int Id { get; set; }\n    public string FirstName { get set; }\n\tpublic string LastName { get; set; }\n}\n\npublic sealed class FooMap : ClassMap<Foo>\n{\n    public FooMap()\n    {\n        Map(m => m.Id);\n        Map(m => m.FirstName).Name(\"Name\").NameIndex(0);\n\t\tMap(m => m.LastName).Name(\"Name\").NameIndex(1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading CSV File Row by Row Manually\nDESCRIPTION: Manually reading a CSV file row by row, which provides more control over the reading process and allows for custom processing of each row.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/getting-started/index.md#2025-04-16_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var reader = new StreamReader(\"path\\\\to\\file.csv\"))\nusing (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n{\n\tcsv.Read();\n\tcsv.ReadHeader();\n\twhile (csv.Read())\n\t{\n\t\tvar record = csv.GetRecord<Foo>();\n\t\t// Do something with the record.\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Reading CSV with Inline JSON Conversion using CsvHelper in C#\nDESCRIPTION: This snippet demonstrates how to read a CSV file containing JSON data using CsvHelper. It uses a custom ClassMap to convert the JSON string to a strongly-typed object during the reading process.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/class-maps/inline-type-conversion/index.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Main()\n{\n    using (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n    using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n    {\n        csv.Context.RegisterClassMap<FooMap>();\n        csv.GetRecords<Foo>().ToList().Dump();\n    }\n}\n\npublic class Foo\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public Json Json { get; set; }\n}\n\npublic class Json\n{\n    public string Foo { get; set; }\n}\n\npublic class FooMap : ClassMap<Foo>\n{\n    public FooMap()\n    {\n        Map(m => m.Id);\n        Map(m => m.Name);\n        Map(m => m.Json).Convert(args => JsonConvert.DeserializeObject<Json>(args.Row.GetField(\"Json\")));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Ignoring with CsvHelper Class Mapping\nDESCRIPTION: Complete example demonstrating how to use CsvHelper to read CSV data while ignoring specific properties in the target class. The example registers a custom class map that uses AutoMap but explicitly ignores the IsDirty property.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/class-maps/ignoring-properties/index.md#2025-04-16_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvoid Main()\n{       \n    using (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n    using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n    {\n        csv.Context.RegisterClassMap<FooMap>();\n        var records = csv.GetRecords<Foo>();\n    }\n}\n\npublic class Foo\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public bool IsDirty { get; set; }\n}\n\npublic sealed class FooMap : ClassMap<Foo>\n{\n    public FooMap()\n    {\n        AutoMap(CultureInfo.InvariantCulture);\n        Map(m => m.IsDirty).Ignore();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto Mapping with Custom Field Mapping in CsvHelper (C#)\nDESCRIPTION: This code snippet demonstrates how to use auto mapping in CsvHelper while also customizing the mapping for specific fields. It includes a sample CSV data structure, a main method for reading the CSV file, and class definitions for the data model and mapping.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/class-maps/auto-mapping/index.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Main()\n{\t   \n\tusing (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n    using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n    {\n        csv.Context.RegisterClassMap<FooMap>();\n        var records = csv.GetRecords<Foo>();\n    }\n}\n\npublic class Foo\n{\n\tpublic int Id { get; set; }\n\tpublic string Name { get; set; }\n}\n\npublic sealed class FooMap : ClassMap<Foo>\n{\n\tpublic FooMap()\n\t{\n\t\tAutoMap(CultureInfo.InvariantCulture);\n\t\tMap(m => m.Name).Name(\"The Name\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering a Custom JSON Type Converter in CsvHelper\nDESCRIPTION: This example demonstrates creating a custom JsonNodeConverter and registering it in three different ways: globally via TypeConverterCache, via an attribute on a property, and through a ClassMap configuration. The converter handles deserialization of JSON strings from CSV data.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/type-conversion/custom-type-converter/index.md#2025-04-16_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvoid Main()\n{\n    using (var reader = new new StreamReader(\"path\\\\to\\\\file.csv\"))\n    using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n    {\n        // Register globally.\n        csv.Context.TypeConverterCache.AddConverter<JsonNode>(new JsonNodeConverter());\n        csv.Context.RegisterClassMap<FooMap>();\n        csv.GetRecords<Foo>().ToList().Dump();\n    }\n}\n\npublic class Foo\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    // Register via attribute.\n    [TypeConverter(typeof(JsonNodeConverter))]\n    public JsonNode Json { get; set; }\n}\n\npublic class FooMap : ClassMap<Foo>\n{\n    public FooMap()\n    {\n        Map(m => m.Id);\n        Map(m => m.Name);\n        // Register via map.\n        Map(m => m.Json).TypeConverter<JsonNodeConverter>();\n    }\n}\n\npublic class JsonNodeConverter : DefaultTypeConverter\n{\n    public override object ConvertFromString(string text, IReaderRow row, MemberMapData memberMapData)\n    {\n        return JsonSerializer.Deserialize<JsonNode>(text);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening CSV Files for Reading and Writing in C#\nDESCRIPTION: Demonstrates how to open CSV files for reading and writing using System.IO.File.OpenRead() and File.OpenWrite() methods. These methods return a FileStream for file operations.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/prerequisites/reading-and-writing-files/index.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing (var stream = File.OpenRead(\"path\\\\to\\\\file.csv\"))\n{\n}\n\nusing (var stream = File.OpenWrite(\"path\\\\to\\\\file.csv\"))\n{\t\n}\n```\n\n----------------------------------------\n\nTITLE: Writing CSV File Row by Row Manually\nDESCRIPTION: Manually writing a CSV file row by row, with separate control over header and record writing, which allows for more complex writing scenarios.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/getting-started/index.md#2025-04-16_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var writer = new StreamWriter(\"path\\\\to\\\\file.csv\"))\nusing (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))\n{\n\tcsv.WriteHeader<Foo>();\n\tcsv.NextRecord();\n\tforeach (var record in records)\n\t{\n\t\tcsv.WriteRecord(record);\n\t\tcsv.NextRecord();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a C# Class for CSV Mapping\nDESCRIPTION: Class definition that matches the structure of the CSV file, with properties that correspond to the CSV columns.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/getting-started/index.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Foo\n{\n\tpublic int Id { get; set; }\n\tpublic string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime Converter Using ClassMap in C#\nDESCRIPTION: Example showing how to configure DateTime type converter options using CsvHelper's ClassMap approach. Demonstrates setting DateTimeStyles flags for handling DateTime parsing and formatting.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/type-conversion/type-converter-options/index.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class FooMap : ClassMap<Foo>\n{\n    public FooMap()\n    {\n        Map(m => m.DateTimeProps).TypeConverterOption.DateTimeStyles(DateTimeStyles.AllowInnerWhite | DateTimeStyles.RoundtripKind);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deferred Resource Disposal with using Block in C#\nDESCRIPTION: Demonstrates an alternative pattern for disposing of resources at a later time while still leveraging the using block's error handling capabilities. This approach maintains the resource for longer-term use before disposal.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/prerequisites/using-and-dispose/index.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar stream = new MemoryStream();\n// Later in a different part of your code.\nusing (stream) { }\n```\n\n----------------------------------------\n\nTITLE: Using CsvReader and CsvWriter with StreamReader and StreamWriter in C#\nDESCRIPTION: Shows how to use CsvReader and CsvWriter in conjunction with StreamReader and StreamWriter for CSV file operations. This setup allows for more advanced CSV parsing and writing capabilities.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/prerequisites/reading-and-writing-files/index.md#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\nusing (var csv = new CsvReader(reader))\n{\n}\n\nusing (var writer = new StreamWriter(\"path\\\\to\\\\file.csv\"))\nusing (var csv = new CsvWriter(writer))\n{\t\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a ClassMap with CsvHelper\nDESCRIPTION: Registering a custom ClassMap with CsvHelper to use the defined mapping rules when reading a CSV file, which is necessary when using fluent mapping.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/getting-started/index.md#2025-04-16_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\nusing (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n{\n\tcsv.Context.RegisterClassMap<FooMap>();\n\tvar records = csv.GetRecords<Foo>();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime Converter Using Attributes in C#\nDESCRIPTION: Example showing how to configure DateTime type converter options using attributes. Shows the attribute-based approach to setting DateTimeStyles flags for DateTime parsing and formatting.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/type-conversion/type-converter-options/index.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Foo\n{\n    [DateTimeStyles(DateTimeStyles.AllowInnerWhite | DateTimeStyles.RoundtripKind)]\n    public DateTime DateTimeProp { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Dynamic Objects to CSV using CsvHelper in C#\nDESCRIPTION: Example showing how to create dynamic objects using ExpandoObject and write them to CSV format using CsvHelper. The code creates a dynamic object with Id and Name properties, adds it to a list, and writes it to CSV using CsvWriter.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/writing/write-dynamic-objects/index.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvoid Main()\n{\n\tvar records = new List<dynamic>();\n\t\n\tdynamic record = new ExpandoObject();\n\trecord.Id = 1;\n\trecord.Name = \"one\";\n\trecords.Add(record);\n\t\n\tusing (var writer = new StringWriter())\n\tusing (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))\n\t{\n\t\tcsv.WriteRecords(records);\n\t\t\n\t\twriter.ToString().Dump();\n\t}\n}\n```\n\nLANGUAGE: text\nCODE:\n```\nId,Name\n1,one\n```\n\n----------------------------------------\n\nTITLE: Using Index Attributes for Position-Based Mapping\nDESCRIPTION: Mapping CSV fields to C# properties based on their position in the file using the IndexAttribute, which is useful for files without headers.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/getting-started/index.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Foo\n{\n\t[Index(0)]\n\tpublic int Id { get; set; }\n\n\t[Index(1)]\n\tpublic string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing CSV with Inline JSON Conversion using CsvHelper in C#\nDESCRIPTION: This snippet shows how to write a CSV file with complex objects using CsvHelper. It uses a custom ClassMap to convert the object to a JSON string during the writing process.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/class-maps/inline-type-conversion/index.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Main()\n{\n\tvar records = new List<Foo>\n\t{\n\t\tnew Foo { Id = 1, Name = \"one\" }\n\t};\n\t\n\tusing (var writer = new StreamWriter(\"path\\\\to\\\\file.csv\"))\n\tusing (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))\n\t{\n\t\tcsv.Context.RegisterClassMap<FooMap>();\n\t\tcsv.WriteRecords(records);\n\t\t\n\t\twriter.ToString().Dump();\n\t}\n}\n\npublic class Foo\n{\n\tpublic int Id { get; set; }\n\tpublic string Name { get; set; }\n\tpublic Json Json { get; set; }\n}\n\npublic class Json\n{\n\tpublic string Foo { get; set; }\n}\n\npublic class FooMap : ClassMap<Foo>\n{\n\tpublic FooMap()\n\t{\n\t\tMap(m => m.Id);\n\t\tMap(m => m.Name);\n\t\tMap(m => m.Json).Convert(args => JsonConvert.SerializeObject(args.Row));\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Text Encoding for CSV File Operations in C#\nDESCRIPTION: Demonstrates how to specify text encoding (e.g., UTF-8) when reading or writing CSV files. This is important when dealing with files that use non-default encodings.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/prerequisites/reading-and-writing-files/index.md#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing (var reader = new StreamReader(\"path\\\\to\\\\file.csv\", Encoding.UTF8))\n{\n}\n\nusing (var writer = new StreamWriter(\"path\\\\to\\\\file.csv\", Encoding.UTF8))\n{\t\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Immediate Resource Disposal with using Block in C#\nDESCRIPTION: Shows the recommended pattern for disposing of IDisposable resources immediately after use using a using block. The stream is automatically disposed when execution leaves the using block scope.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/prerequisites/using-and-dispose/index.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing (var stream = new MemoryStream())\n{\n\t// Use the stream.\n}\n// The stream will be disposed of as soon as possible.\n```\n\n----------------------------------------\n\nTITLE: Defining ClassMap with Indices for Ordered CSV Output\nDESCRIPTION: Creating a ClassMap that specifies both the order (index) and names of columns when writing to a CSV file, ensuring consistent output format.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/getting-started/index.md#2025-04-16_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic class FooMap : ClassMap<Foo>\n{\n\tpublic FooMap()\n\t{\n\t\tMap(m => m.Id).Index(0).Name(\"id\");\n\t\tMap(m => m.Name).Index(1).Name(\"name\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Reading CSV without Headers\nDESCRIPTION: Reading a CSV file that doesn't contain a header row by configuring CsvHelper to skip header processing.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/getting-started/index.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tHasHeaderRecord = false,\n};\nusing (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\nusing (var csv = new CsvReader(reader, config))\n{\n\tvar records = csv.GetRecords<Foo>();\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified StreamReader and StreamWriter Usage for CSV Files in C#\nDESCRIPTION: Illustrates a shortcut method to use StreamReader and StreamWriter directly with file paths, simplifying the process of reading and writing CSV files.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/prerequisites/reading-and-writing-files/index.md#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n{\n}\n\nusing (var writer = new StreamWriter(\"path\\\\to\\\\file.csv\"))\n{\t\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSV Data Validation with ClassMap\nDESCRIPTION: Demonstrates how to create a custom ClassMap with field-level validation for CSV data. Shows validation of a field to prevent certain characters or patterns.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/class-maps/validation/index.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Foo\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public DateTimeOffset? Date { get; set; }\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic class FooMap : ClassMap<Foo>\n{\n    public FooMap()\n    {\n        Map(m => m.Id);\n        Map(m => m.Name).Validate(field => !field.Contains(\"-\"));\n    }\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Main()\n{\n    using (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n    using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n    {\n        csv.Context.RegisterClassMap<FooMap>();\n        csv.GetRecords<Foo>().ToList().Dump();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading and Resetting Stream Position in C#\nDESCRIPTION: Demonstrates how to read file content and reset the stream position to beginning using Stream.Position property. Shows how to perform multiple reads on the same stream by repositioning to the start.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/prerequisites/streams/index.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing (var stream = new File.OpenRead(\"path\\\\to\\\\file\"))\nusing (var reader = new StreamReader(stream))\n{\t\n\t// Read file content.\n\tvar content = reader.ReadToEnd();\n\n\t// Go back to beginning of the stream.\n\tstream.Position = 0;\n\n\t// Read file content again.\n\tcontent = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fluent ClassMap for Custom Mapping\nDESCRIPTION: Creating a fluent mapping class that defines how CSV fields map to C# properties, which is useful when you can't modify the target class directly.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/getting-started/index.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class FooMap : ClassMap<Foo>\n{\n\tpublic FooMap()\n\t{\n\t\tMap(m => m.Id).Name(\"id\");\n\t\tMap(m => m.Name).Name(\"name\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: CSV Injection Character Examples\nDESCRIPTION: Examples showing how the Escape injection protection transforms fields containing potential injection characters. The field is prepended with an InjectionEscapeCharacter (default ') and quoted if needed.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/writing/index.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n=one -> \"'=one\"\n\n\"=one\" -> \"'=one\"\n\n=one\"two -> \"'=one\"\"two\"\n```\n\n----------------------------------------\n\nTITLE: Using Name Attributes for Custom Header Mapping\nDESCRIPTION: Mapping CSV fields to C# properties by specifying the exact header names using the NameAttribute, which is useful when header names don't match property names.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/getting-started/index.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Foo\n{\n\t[Name(\"id\")]\n\tpublic int Id { get; set; }\n\n\t[Name(\"name\")]\n\tpublic string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using StreamReader and StreamWriter with FileStream for CSV Operations in C#\nDESCRIPTION: Shows how to use StreamReader and StreamWriter with FileStream to read and write text data from CSV files. This approach allows for more specific text handling.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/prerequisites/reading-and-writing-files/index.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing (var stream = File.OpenRead(\"path\\\\to\\\\file.csv\"))\nusing (var reader = new StreamReader(stream))\n{\n}\n\nusing (var stream = File.OpenWrite(\"path\\\\to\\\\file.csv\"))\nusing (var writer = new StreamWriter(stream))\n{\t\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optional Maps with CsvHelper in C#\nDESCRIPTION: C# code demonstrating how to use CsvHelper with optional maps. It includes a main method for reading CSV data, a Foo class representing the data structure, and a FooMap class for mapping CSV fields to object properties, with an optional Date field.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/class-maps/optional-maps/index.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Main()\n{\n\tusing (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\n\tusing (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n\t{\n\t\tcsv.Context.RegisterClassMap<FooMap>();\n\t\tcsv.GetRecords<Foo>().ToList().Dump();\n\t}\n}\n\npublic class Foo\n{\n\tpublic int Id { get; set; }\n\tpublic string Name { get; set; }\n\tpublic DateTimeOffset? Date { get; set; }\n}\n\npublic class FooMap : ClassMap<Foo>\n{\n\tpublic FooMap()\n\t{\n\t\tMap(m => m.Id);\n\t\tMap(m => m.Name);\n\t\tMap(m => m.Date).Optional();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Async Methods to CsvReader in C#\nDESCRIPTION: This snippet shows the addition of several async methods to the CsvReader class, enabling asynchronous reading of CSV records.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/change-log/index.md#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nAdded `IAsyncEnumerable<T> CsvReader.GetRecordsAsync<T>()`\nAdded `IAsyncEnumerable<T> CsvReader.GetRecordsAsync<T>(T anonymousTypeDefinition)`\nAdded `IAsyncEnumerable<object> CsvReader.GetRecordsAsync(Type type)`\nAdded `IAsyncEnumerable<T> CsvReader.EnumerateRecordsAsync<T>(T record)`\n```\n\n----------------------------------------\n\nTITLE: Adding Async Methods to CsvWriter in C#\nDESCRIPTION: This snippet demonstrates the addition of async methods to the CsvWriter class for writing records asynchronously.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/change-log/index.md#2025-04-16_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nAdded `Task CsvWriter.WriteRecordsAsync(IEnumerable records)`\nAdded `Task CsvWriter.WriteRecordsAsync<T>(IEnumerable<T> records)`\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Newlines in CsvHelper\nDESCRIPTION: Shows how to configure CsvHelper to use the environment's newline characters instead of the default RFC 4180 standard (\\r\\n).\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/getting-started/index.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tNewLine = Environment.NewLine,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring WhiteSpaceChars in CsvConfiguration\nDESCRIPTION: Shows how to explicitly configure tab character as whitespace for trimming in CsvHelper v27. Required because \\t is no longer included in default whitespace characters.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v27/index.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tWhiteSpaceChars = new[] { ' ', '\\t' },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring CSV Settings with CsvConfiguration\nDESCRIPTION: Shows how to initialize CsvConfiguration with custom delimiter settings. Version 23 removes constructor parameters in favor of property setters.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v23/index.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// v22\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture, delimiter = \";\");\n\n// v23\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tDelimiter = \";\",\n};\n```\n\n----------------------------------------\n\nTITLE: CSV File Structure with Multiple Data Sets\nDESCRIPTION: Example of a CSV file containing multiple data sets. The file includes two separate data structures: a Foo record with integer ID and a Bar record with GUID ID, separated by a blank line. This structure requires special handling as demonstrated in the C# implementation.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/reading/reading-multiple-data-sets/index.md#2025-04-16_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\nFooId,Name\n1,foo\n\nBarId,Name\n07a0fca2-1b1c-4e44-b1be-c2b05da5afc7,bar\n```\n\n----------------------------------------\n\nTITLE: Type Converter Sample - C#\nDESCRIPTION: Example of type converter factory usage introduced in version 29.0.0 for handling multiple types, including nullable types, enums, and collections.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/change-log/index.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nConfigurationFunction.GetDelimiter\n```\n\n----------------------------------------\n\nTITLE: Writing to Stream with Buffer Management in C#\nDESCRIPTION: Shows how to write to a file stream using StreamWriter with proper buffer management. Demonstrates explicit flushing of writer buffer and automatic flushing when using blocks exit.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/prerequisites/streams/index.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing (var stream = new File.OpenWrite(\"path\\\\to\\\\file\"))\nusing (var writer = new StreamWriter(stream))\n{\t\n\twriter.WriteLine(\"Foo\");\n\twriter.Flush(); // Data is written from the writer buffer to the stream.\n} // Flush is also called here.\n```\n\n----------------------------------------\n\nTITLE: Moving AutoMap to CsvContext in C#\nDESCRIPTION: The AutoMap method has moved from Configuration to Context. This snippet demonstrates how to use AutoMap in the new version.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v20/index.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// v19\ncsv.Configuration.AutoMap<MyType>();\n\n// v20\ncsv.Context.AutoMap<MyType>();\n```\n\n----------------------------------------\n\nTITLE: Class Maps Table of Contents in Markdown\nDESCRIPTION: A markdown table that lists and links to various class mapping topics in the CsvHelper library documentation. Each row contains a topic name and a description about a specific mapping functionality.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/class-maps/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Class Maps\n\nTopics | &nbsp;\n- | -\n[Mapping Properties](~/examples/configuration/class-maps/mapping-properties) | Mapping to properties.\n[Mapping by Name](~/examples/configuration/class-maps/mapping-by-name) | Mapping properties by header name.\n[Mapping by Alternate Names](~/examples/configuration/class-maps/mapping-by-alternate-names) | Mapping properties that may be one of many names.\n[Mapping Duplicate Names](~/examples/configuration/class-maps/mapping-duplicate-names) | Mapping properties that have duplicate header names.\n[Mapping by Index](~/examples/configuration/class-maps/mapping-by-index) | Mapping properties by header index position.\n[Auto Mapping](~/examples/configuration/class-maps/auto-mapping) | Automatic mapping.\n[Ignoring Properties](~/examples/configuration/class-maps/ignoring-properties) | Ignoring mapped properites.\n[Constant Value](~/examples/configuration/class-maps/constant-value) | Setting a constant value for a property.\n[Type Conversion](~/examples/configuration/class-maps/type-conversion) | Using a specific type converter.\n[Inline Type Conversion](~/examples/configuration/class-maps/inline-type-conversion) | Convert a field to a type inline.\n[Optional Maps](~/examples/configuration/class-maps/optional-maps) | Map a property only if it exists.\n[Validation](~/examples/configuration/class-maps/validation) | Validate a field value.\n```\n\n----------------------------------------\n\nTITLE: Updating ShouldSkipRecord Configuration in C#\nDESCRIPTION: This snippet demonstrates how to update the ShouldSkipRecord configuration from version 27 to 28. The change involves using IReaderRow instead of a string array for accessing record data.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v28/index.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// 27\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tShouldSkipRecord = args => args.Record.Length < 10;\n};\n\n// 28\n\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tShouldSkipRecord = args => args.Row.Parser.Record.Length < 10;\n};\n```\n\n----------------------------------------\n\nTITLE: ConvertFromString Migration\nDESCRIPTION: Shows the updated Convert method usage for field conversion, using a single args parameter that contains the Row property.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v23/index.md#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// v22\nMap(m => m.Property).Convert(row => row.GetField(0));\n\n// v23\nMap(m => m.Property).Convert(args => args.Row.GetField(0));\n```\n\n----------------------------------------\n\nTITLE: Updating ShouldQuote Configuration in CsvHelper\nDESCRIPTION: Demonstrates the modification to ShouldQuote delegate signature which now includes an additional 'row' parameter in v22.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v22/index.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// v21\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tShouldQuote = (field, context) => true,\n};\n\n// v22\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tShouldQuote = (field, context, row) => true,\n};\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Data Structure\nDESCRIPTION: Example CSV data format showing ID and Name columns\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/reading/get-class-records/index.md#2025-04-16_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nId,Name\n1,one\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Data Structure\nDESCRIPTION: Example CSV data format showing Id and Name columns\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/reading/reading-by-hand/index.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nId,Name\n1,one\n```\n\n----------------------------------------\n\nTITLE: Updating IWriterRow Interface Usage in C#\nDESCRIPTION: Shows the change in WriteConvertedField method signature for IWriterRow interface between versions 23 and 24. The updated version requires an additional fieldType parameter.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v24/index.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// v23\nWriteConvertedField(field);\n\n// v24\nWriteConvertedField(field, fieldType);\n```\n\n----------------------------------------\n\nTITLE: Updating CsvWriter Class Usage in C#\nDESCRIPTION: Shows the change in WriteConvertedField method signature for CsvWriter class between versions 23 and 24. The updated version requires an additional fieldType parameter.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v24/index.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// v23\nWriteConvertedField(field);\n\n// v24\nWriteConvertedField(field, fieldType);\n```\n\n----------------------------------------\n\nTITLE: New Features Introduced in CsvHelper - C#\nDESCRIPTION: The snippet highlights new features that have been added to the CsvHelper library in various releases, providing developers with insight into enhancements that could simplify their CSV data handling tasks.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/change-log/index.md#2025-04-16_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n// Features\n- Added CsvReader.ReadHeader so headers can be read without reading the first row.\n- Added SerializableAttribute to all exceptions.\n- Added support to ignore whitespace when determining a record is empty.\n```\n\n----------------------------------------\n\nTITLE: Updating CsvConfiguration for Injection Handling in C#\nDESCRIPTION: Demonstrates the change from SanitizeForInjection boolean property to InjectionOptions enum in CsvConfiguration. This update provides more granular control over injection handling.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v29/index.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// 28\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n    SanitizeForInjection = true,\n}\n\n// 29\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n    InjectionOptions = InjectionOptions.Escape,\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ConvertUsing to Convert in C#\nDESCRIPTION: The 'ConvertUsing' method has been renamed to 'Convert' in version 20. This snippet shows how to update the method call in property mapping.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v20/index.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// v19\nMap(m => m.Property).ConvertUsing(row => row.GetField<int>(0) + row.GetField<int>(1));\n\n// v20\nMap(m => m.Property).Convert(row => row.GetField<int>(0) + row.GetField<int>(1));\n```\n\n----------------------------------------\n\nTITLE: Modifying CsvConfiguration Property Initialization in C#\nDESCRIPTION: CsvConfiguration properties have changed from 'get; set;' to 'get; init;'. This snippet demonstrates how to initialize properties in the new version.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v20/index.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// v19\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture);\nconfig.Delimiter = \";\"\n\n// v20\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tDelimiter = \";\",\n}\n```\n\n----------------------------------------\n\nTITLE: Moving RegisterClassMap to CsvContext in C#\nDESCRIPTION: The RegisterClassMap method has moved from Configuration to Context. This snippet demonstrates the new location for registering class maps.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v20/index.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// v19\ncsv.Configuration.RegisterClassMap<MyMap>();\n\n// v20\ncsv.Context.RegisterClassMap<MyMap>();\n```\n\n----------------------------------------\n\nTITLE: Updating BadDataException Constructor in C#\nDESCRIPTION: The BadDataException constructor now requires additional parameters: field and rawRecord. This change provides more context when throwing the exception.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v30/index.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// 29\nthrow new BadDataException(context);\n\n// 30\nthrow new BadDataException(field, rawRecord, context);\n```\n\n----------------------------------------\n\nTITLE: Record Writer API Changes - C#\nDESCRIPTION: Breaking changes in version 32.0.0 showing the transition from instance-based to type-based record writing.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/change-log/index.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nRecordWriter.CreateWriteDelegate<T>(Type type)\nDynamicRecordWriter.CreateWriteDelegate<T>(Type type)\nExpandoObjectRecordWriter.CreateWriteDelegate<T>(Type type)\n```\n\n----------------------------------------\n\nTITLE: Changed Configuration Settings in CsvHelper - C#\nDESCRIPTION: Outlining the changes made to various configuration settings within the CsvHelper, this snippet discusses the renaming and removal of certain settings to enhance clarity and functionality.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/change-log/index.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// Changed config setting name from IgnorePrivateAccessor to IncludePrivateProperties to be more clear on intention.\n// Removed configuration IsHeaderCaseSensitive, IgnoreHeaderWhiteSpace, and TrimHeaders and added PrepareHeaderForMatch.\n```\n\n----------------------------------------\n\nTITLE: CSV Data Example for CsvHelper\nDESCRIPTION: Sample CSV data with pipe delimiter and various data types including identifiers, numbers with different formatting, boolean values, and constants.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/attributes/index.md#2025-04-16_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nIdentifier||Amount2|IsBool|Constant\n1|1,234|1.234|yes|a\n2|1.234|1.234|no|b\n```\n\n----------------------------------------\n\nTITLE: Generic Type Converter Declaration - C#\nDESCRIPTION: Creation of generic TypeConverter class in version 31.0.0 for simplified type converter implementation.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/change-log/index.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nTypeConverter<T>\n```\n\n----------------------------------------\n\nTITLE: Removing ConfigurationFunctions.ShouldSkipRecord in C#\nDESCRIPTION: This snippet shows how to handle the removal of ConfigurationFunctions.ShouldSkipRecord. In version 28, null can be used as a replacement, which is also the default behavior.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v28/index.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tShouldSkipRecord = null\n};\n```\n\n----------------------------------------\n\nTITLE: Bug Fixes Across Multiple Versions - C#\nDESCRIPTION: This snippet aggregates various bug fixes implemented across multiple versions of CsvHelper, detailing specific issues resolved to improve the overall reliability of the library.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/change-log/index.md#2025-04-16_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// Bug Fixes\n- Fixed issue with CsvClassMapCollection[type] choosing the wrong type when multiple types on the inheritance tree are mapped.\n- Made TypeInfo compatibility stuff internal to not cause conflicts.\n- Fix for UWP release not working.\n```\n\n----------------------------------------\n\nTITLE: Updating ValidateArgs Constructor in C#\nDESCRIPTION: The ValidateArgs constructor now requires an additional 'row' parameter. This change allows for more comprehensive validation by providing access to the entire row of data.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v30/index.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// 29\nvar args = new ValidateArgs(field);\n\n// 30\nvar args = new ValidateArgs(field, row);\n```\n\n----------------------------------------\n\nTITLE: Configuring Case-Insensitive Enum Conversion in CsvHelper\nDESCRIPTION: Shows how to configure enum conversion to be case-insensitive using TypeConverterOption after the EnumConverter default change to case-sensitive.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v22/index.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nMap(m => m.Property).TypeConverterOption.EnumIgnoreCase();\n```\n\n----------------------------------------\n\nTITLE: Modifying Factory Methods in CsvHelper\nDESCRIPTION: This snippet illustrates changes to factory methods in the CsvHelper library, adding CultureInfo parameters.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/change-log/index.md#2025-04-16_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n`Factory.CreateParser(TextReader)` -> `Factory.CreateParser(TextReader, CultureInfo)`\n`Factory.CreateReader(TextReader)` -> `Factory.CreateReader(TextReader, CultureInfo)`\n`Factory.CreateWriter(TextWriter)` -> `Factory.CreateWriter(TextWriter, CultureInfo)`\n`IFactory.CreateParser(TextReader)` -> `IFactory.CreateParser(TextReader, CultureInfo)`\n`IFactory.CreateReader(TextReader)` -> `IFactory.CreateReader(TextReader, CultureInfo)`\n`IFactory.CreateWriter(TextWriter)` -> `IFactory.CreateWriter(TextWriter, CultureInfo)`\n```\n\n----------------------------------------\n\nTITLE: GetConstructor Delegate Migration\nDESCRIPTION: Shows the updated GetConstructor delegate implementation using a single args parameter containing ClassType property.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v23/index.md#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// v22\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tGetConstructor = classType => classType.GetConstructors().First(),\n};\n\n// v23\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tGetConstructor = args => args.ClassType.GetConstructors().First(),\n};\n```\n\n----------------------------------------\n\nTITLE: Modifying IParserConfiguration Interface in C#\nDESCRIPTION: Classes implementing IParserConfiguration need to add two new properties: MaxFixFieldSize of type double and LeaveOpen of type bool. These properties provide additional configuration options for parsing.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v30/index.md#2025-04-16_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: CSV Data Example for Type Conversion\nDESCRIPTION: Sample CSV data containing an Id, Name, and a JSON string to be converted.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/class-maps/type-conversion/index.md#2025-04-16_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nId,Name,Json\n1,one,\"{ \"\"Foo\"\": \"\"Bar\"\" }\"\n```\n\n----------------------------------------\n\nTITLE: Initializing ValidateArgs in C#\nDESCRIPTION: Shows the migration of ValidateArgs initialization to object initializer syntax.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v25/index.md#2025-04-16_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n// v25\nvar args = new ValidateArgs(field);\n\n// v26\nvar args = new ValidateArgs\n{\n\tField = field,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuration Interface Changes - C#\nDESCRIPTION: Changes to configuration interfaces demonstrating the move from direct configuration to interface-based configuration in version 28.0.0.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/change-log/index.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nCsvParser constructor(IParserConfiguration config)\nCsvReader constructor(IReaderConfiguration config)\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Data Structure\nDESCRIPTION: A simple CSV data structure with Id and Name columns.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/reading/get-anonymous-type-records/index.md#2025-04-16_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nId,Name\n1,one\n```\n\n----------------------------------------\n\nTITLE: Initializing ReadingExceptionOccurredArgs in C#\nDESCRIPTION: Details the migration of ReadingExceptionOccurredArgs initialization pattern.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v25/index.md#2025-04-16_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n// v25\nvar args = new ReadingExceptionOccurredArgs(exception);\n\n// v26\nvar args = new ReadingExceptionOccurredArgs\n{\n\tException = exception,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing PrepareHeaderForMatchArgs in C#\nDESCRIPTION: Shows how to update PrepareHeaderForMatchArgs initialization using object initializers.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v25/index.md#2025-04-16_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n// v25\nvar args = new PrepareHeaderForMatchArgs(header, fieldIndex);\n\n// v26\nvar args = new PrepareHeaderForMatchArgs\n{\n\tHeader = header,\n\tFieldIndex = fieldIndex,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing CsvHelper via Package Manager Console\nDESCRIPTION: This command installs the CsvHelper package using the NuGet Package Manager Console in Visual Studio.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/README.markdown#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPM> Install-Package CsvHelper\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Data Structure\nDESCRIPTION: Example of CSV data with headers and a single row of values.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/class-maps/optional-maps/index.md#2025-04-16_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nId,Name\n1,one\n```\n\n----------------------------------------\n\nTITLE: Initializing HeaderValidatedArgs in C#\nDESCRIPTION: Shows the updated initialization pattern for HeaderValidatedArgs using object initializers.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v25/index.md#2025-04-16_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n// v25\nvar args = new HeaderValidatedArgs(headers, context);\n\n// v26\nvar args = new HeaderValidatedArgs\n{\n\tInvalidHeaders = headers,\n\tContext = context,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing MissingFieldFoundArgs in C#\nDESCRIPTION: Demonstrates the migration of MissingFieldFoundArgs initialization to object initializer syntax.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v25/index.md#2025-04-16_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n// v25\nvar args = new MissingFieldFoundArgs(headerNames, index, context);\n\n// v26\nvar args = new MissingFieldFoundArgs\n{\n\tHeaderNames = headerNames,\n\tIndex = index,\n\tContext = context,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing GetDynamicPropertyNameArgs in C#\nDESCRIPTION: Details the migration of GetDynamicPropertyNameArgs initialization to object initializer syntax.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v25/index.md#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// v25\nvar args = new GetDynamicPropertyNameArgs(index, context);\n\n// v26\nvar args = new GetDynamicPropertyNameArgs\n{\n\tFieldIndex = index,\n\tContext = context,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing CsvHelper via .NET CLI Console\nDESCRIPTION: This command adds the CsvHelper package to a .NET project using the .NET CLI (Command Line Interface).\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/README.markdown#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n> dotnet add package CsvHelper\n```\n\n----------------------------------------\n\nTITLE: CSV Data Example\nDESCRIPTION: Sample CSV data format without headers that will be processed.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/class-maps/mapping-by-index/index.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1,one\n```\n\n----------------------------------------\n\nTITLE: Migrating BadDataFoundArgs Initialization in C#\nDESCRIPTION: Shows migration from object initializer to constructor parameters for BadDataFoundArgs class.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v26/index.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// v26\nvar args = new BadDataFoundArgs\n{\n\tField = field,\n\tRawRecord = rawRecord,\n\tContext = context,\n};\n\n// v27\nvar args = new BadDataRoundArgs(field, rawRecord, context);\n```\n\n----------------------------------------\n\nTITLE: Installing CsvHelper via Package Manager Console\nDESCRIPTION: Command to install CsvHelper using the NuGet Package Manager Console in Visual Studio.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/getting-started/index.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPM> Install-Package CsvHelper\n```\n\n----------------------------------------\n\nTITLE: Installing CsvHelper via .NET CLI\nDESCRIPTION: Command to install CsvHelper using the .NET Core Command Line Interface.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/getting-started/index.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> dotnet add package CsvHelper\n```\n\n----------------------------------------\n\nTITLE: Migrating GetDynamicPropertyNameArgs Initialization in C#\nDESCRIPTION: Shows migration from object initializer to constructor parameters for GetDynamicPropertyNameArgs class.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v26/index.md#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// v26\nvar args = new GetDynamicPropertyNameArgs\n{\n\tFieldIndex = index,\n\tContext = context,\n};\n\n// v27\nvar args = new GetDynamicPropertyNameArgs(index, context);\n```\n\n----------------------------------------\n\nTITLE: Migrating PrepareHeaderForMatchArgs Initialization in C#\nDESCRIPTION: Shows migration from object initializer to constructor parameters for PrepareHeaderForMatchArgs class.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v26/index.md#2025-04-16_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n// v26\nvar args = new PrepareHeaderForMatchArgs\n{\n\tHeader = header,\n\tFieldIndex = fieldIndex,\n};\n\n// v27\nvar args = new PrepareHeaderForMatchArgs(header, fieldIndex);\n```\n\n----------------------------------------\n\nTITLE: Initializing ConvertToStringArgs in C#\nDESCRIPTION: Shows how to migrate ConvertToStringArgs initialization to use object initializer syntax.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v25/index.md#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// v25\nvar args = new ConvertToStringArgs(value);\n\n// v26\nvar args = new ConvertToStringArgs\n{\n\tValue = value,\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating ReferenceHeaderPrefixArgs Initialization in C#\nDESCRIPTION: Shows migration from object initializer to constructor parameters for ReferenceHeaderPrefixArgs class.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v26/index.md#2025-04-16_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n// v26\nvar args = new ReferenceHeaderPrefixArgs\n{\n\tMemberType = memberType,\n\tMemberName = memberName,\n};\n\n// v27\nvar args = new ReferenceHeaderPrefixArgs(memberType, memberName);\n```\n\n----------------------------------------\n\nTITLE: Migrating ShouldSkipRecordArgs Initialization in C#\nDESCRIPTION: Shows migration from object initializer to constructor parameters for ShouldSkipRecordArgs class.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v26/index.md#2025-04-16_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n// v26\nvar args = new ShouldSkipRecordArgs\n{\n\tRecord = record,\n};\n\n// v27\nvar args = new ShouldSkipRecordArgs(record);\n```\n\n----------------------------------------\n\nTITLE: Migrating ConvertToStringArgs Initialization in C#\nDESCRIPTION: Shows migration from object initializer to constructor parameters for ConvertToStringArgs class.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v26/index.md#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// v26\nvar args = new ConvertToStringArgs\n{\n\tValue = value,\n};\n\n// v27\nvar args = new ConvertToStringArgs(value);\n```\n\n----------------------------------------\n\nTITLE: Initializing ShouldUseConstructorParametersArgs in C#\nDESCRIPTION: Details the migration of ShouldUseConstructorParametersArgs initialization pattern.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v25/index.md#2025-04-16_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n// v25\nvar args = new ShouldUseConstructorParametersArgs(parameterType);\n\n// v26\nvar args = new ShouldUseConstructorParametersArgs\n{\n\tParameterType = parameterType,\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating GetConstructorArgs Initialization in C#\nDESCRIPTION: Shows migration from object initializer to constructor parameters for GetConstructorArgs class.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v26/index.md#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// v26\nvar args = new GetConstructorArgs\n{\n\tClassType = type,\n};\n\n// v27\nvar args = new GetConstructorArgs(type);\n```\n\n----------------------------------------\n\nTITLE: Migrating ConvertFromStringArgs Initialization in C#\nDESCRIPTION: Shows migration from object initializer to constructor parameters for ConvertFromStringArgs class.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v26/index.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// v26\nvar args = new ConvertFromStringArgs\n{\n\tRow = row,\n};\n\n// v27\nvar args = new ConvertFromStringArgs(row);\n```\n\n----------------------------------------\n\nTITLE: Migrating HeaderValidatedArgs Initialization in C#\nDESCRIPTION: Shows migration from object initializer to constructor parameters for HeaderValidatedArgs class.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v26/index.md#2025-04-16_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n// v26\nvar args = new HeaderValidatedArgs\n{\n\tInvalidHeaders = headers,\n\tContext = context,\n};\n\n// v27\nvar args = new HeaderValidatedArgs(headers, context);\n```\n\n----------------------------------------\n\nTITLE: Updating NewLine Property in CsvConfiguration for CsvHelper v21\nDESCRIPTION: This code snippet demonstrates how to update the NewLine property in CsvConfiguration when migrating from CsvHelper version 20 to version 21. The property type has changed from char? to string.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v21/index.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// v20\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tNewLine = '\\r',\n};\n\n// v21\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tNewLine = \"\\r\",\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating ReadingExceptionOccurredArgs Initialization in C#\nDESCRIPTION: Shows migration from object initializer to constructor parameters for ReadingExceptionOccurredArgs class.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v26/index.md#2025-04-16_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n// v26\nvar args = new ReadingExceptionOccurredArgs\n{\n\tException = exception,\n};\n\n// v27\nvar args = new ReadingExceptionOccurredArgs(exception);\n```\n\n----------------------------------------\n\nTITLE: Migrating ShouldQuoteArgs Initialization in C#\nDESCRIPTION: Shows migration from object initializer to constructor parameters for ShouldQuoteArgs class.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v26/index.md#2025-04-16_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n// v26\nvar args = new ShouldQuoteArgs\n{\n\tField = field,\n\tFieldType = fieldType,\n\tRow = row,\n};\n\n// v27\nvar args = new ShouldQuoteArgs(field, fieldType, row);\n```\n\n----------------------------------------\n\nTITLE: Changing CsvConfiguration from Class to Record in C#\nDESCRIPTION: CsvConfiguration has changed from a class to a record in version 20. This snippet shows how to update custom configurations.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v20/index.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// v19\nclass MyConfig : CsvConfiguration {}\n\n// v20\nrecord MyConfig : CsvConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Migrating ValidateArgs Initialization in C#\nDESCRIPTION: Shows migration from object initializer to constructor parameters for ValidateArgs class.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v26/index.md#2025-04-16_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n// v26\nvar args = new ValidateArgs\n{\n\tField = field,\n};\n\n// v27\nvar args = new ValidateArgs(field);\n```\n\n----------------------------------------\n\nTITLE: Updating ParserMode to CsvMode in CsvHelper\nDESCRIPTION: Shows the change in enum name from ParserMode to CsvMode while maintaining the same RFC4180 value.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v22/index.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// v21\nParserMode.RFC4180\n\n//v22\nCsvMode.RFC4180\n```\n\n----------------------------------------\n\nTITLE: CSV Reading Navigation Menu in Markdown\nDESCRIPTION: Markdown table listing different reading operations and examples available in the CsvHelper documentation, including links to various reading methods and approaches.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/reading/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTopics | &nbsp;\n- | -\n[Get Class Records](~/examples/reading/get-class-records) | \n[Get Dynamic Records](~/examples/reading/get-dynamic-records) | \n[Get Anonymous Type Records](~/examples/reading/get-anonymous-type-records) | \n[Enumerate Class Records](~/examples/reading/enumerate-class-records) | \n[Reading by Hand](~/examples/reading/reading-by-hand) | \n[Reading Multiple Data Sets](~/examples/reading/reading-multiple-data-sets) | \n[Reading Multiple Record Types](~/examples/reading/reading-multiple-record-types) | \n```\n\n----------------------------------------\n\nTITLE: Updating ShouldQuote Parameter in CsvConfiguration in C#\nDESCRIPTION: The ShouldQuote method now takes IWriterRow instead of CsvContext. This snippet demonstrates the updated method signature.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v20/index.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// v19\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tShouldQuote = (field, row) => true,\n};\n\n// v20\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tShouldQuote = (field, context) => true,\n};\n```\n\n----------------------------------------\n\nTITLE: Changing NewLine Property Type in CsvConfiguration in C#\nDESCRIPTION: The NewLine property has changed from enum NewLines to char?. This snippet shows how to set the new line character in version 20.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v20/index.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// v19\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tNewLine = NewLines.LF,\n};\n\n// v20\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tNewLine = '\\n',\n};\n```\n\n----------------------------------------\n\nTITLE: BadDataFound Delegate Migration\nDESCRIPTION: Demonstrates the change in BadDataFound delegate signature to use a single struct argument containing Field and Context properties.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v23/index.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// v22\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tBadDataFound = (field, context) => \n\t{\n\t\tConsole.WriteLine($\"field: {field}\");\n\t\tConsole.WriteLine($\"context: {context}\");\n\t},\n};\n\n// v23\nvar config = new CsvConfiguration(CultureInfo.InvariantCulture)\n{\n\tBadDataFound = args =>\n\t{\n\t\tConsole.WriteLine($\"field: {args.Field}\");\n\t\tConsole.WriteLine($\"context: {args.Context}\");\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Universal User-Agent Access in robots.txt\nDESCRIPTION: This snippet configures the robots.txt file to allow access for all user-agents. It uses the wildcard '*' to indicate that the rule applies to any web crawler or bot.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/docs/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\n```\n\n----------------------------------------\n\nTITLE: ConvertToString Migration\nDESCRIPTION: Demonstrates the updated Convert method signature for string conversion, using args.Value instead of direct value parameter.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v23/index.md#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// v22\nMap(m => m.Property).Convert(value => value.ToString());\n\n// v23\nMap(m => m.Property).Convert(args => args.Value.ToString());\n```\n\n----------------------------------------\n\nTITLE: Markdown Header\nDESCRIPTION: Simple markdown header indicating future content\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v5/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Coming Soon\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table for CsvHelper Examples\nDESCRIPTION: This snippet demonstrates how to create a markdown table listing different sections of CsvHelper documentation with links to their respective pages.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSections | &nbsp;\n- | -\n[Prerequisites](~/examples/prerequisites) | Implied knowledge when using CsvHelper.\n[Reading](~/examples/reading) | Reading CSV data.\n[Writing](~/examples/writing) | Writing CSV data.\n[Configuration](~/examples/configuration) | Configuring the behavior of CsvHelper to work with your CSV data or custom class structures.\n[Type Conversion](~/examples/type-conversion) | Using type conversion to convert CSV fields to and from .NET types.\n[DataReader](~/examples/csvdatareader) | Using a DataTable to read CSV data.\n```\n\n----------------------------------------\n\nTITLE: Moving UnregisterClassMap to CsvContext in C#\nDESCRIPTION: The UnregisterClassMap method has moved from Configuration to Context. This snippet shows how to unregister class maps in version 20.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v20/index.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// v19\ncsv.Configuration.UnregisterClassMap<MyMap>();\n\n// v20\ncsv.Context.UnregisterClassMap<MyMap>();\n```\n\n----------------------------------------\n\nTITLE: Markdown Header\nDESCRIPTION: A simple markdown header indicating future content.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v19/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Coming Soon\n```\n\n----------------------------------------\n\nTITLE: Updating CsvParser Read Method in C#\nDESCRIPTION: The Read method of CsvParser now returns bool instead of string[]. This snippet shows how to use the updated Read method and access parsed fields.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v20/index.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// v19\nstring[] record;\nwhile ((record = parser.Read()) != null)\n{\n}\n\n// v20\nwhile (parser.Read())\n{\n\t// Only get fields you need.\n\tvar field1 = parser[0];\n\tvar field2 = parser[1];\n\n\t// Get all fields.\n\tvar record = parser.Record;\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming ConvertUsing to Convert in MemberMap in C#\nDESCRIPTION: The ConvertUsing method in MemberMap has been renamed to Convert. This snippet demonstrates how to update the method calls in property mapping.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v20/index.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// v19\nMap(m => m.Property).ConvertUsing(row => row.Get(0));\nMap(m => m.Property).ConvertUsing(value => value?.ToString() ?? string.Empty);\n\n// v20\nMap(m => m.Property).Convert(row => row.Get(0));\nMap(m => m.Property).Convert(value => value?.ToString() ?? string.Empty);\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Data Format\nDESCRIPTION: Example of a simple CSV file format with an Id and Name column, demonstrating the expected input format for subsequent code examples.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/getting-started/index.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nId,Name\n1,one\n2,two\n```\n\n----------------------------------------\n\nTITLE: Updating Constructor Signatures in CsvHelper Classes\nDESCRIPTION: This snippet shows changes to constructor signatures for various CsvHelper classes, adding CultureInfo parameters.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/change-log/index.md#2025-04-16_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n`CsvParser.CsvParser(TextReader)` -> `CsvParser.CsvParser(TextReader, CultureInfo)`\n`CsvParser.CsvParser(TextReader, bool)` -> `CsvParser.CsvParser(TextReader, CultureInfo, bool)`\n`CsvReader.CsvReader(TextReader)` -> `CsvReader.CsvReader(TextReader, CultureInfo)`\n`CsvReader.CsvReader(TextReader, bool)` -> `CsvReader.CsvReader(TextReader, CultureInfo, bool)`\n`CsvSerializer.CsvSerializer(TextWriter)` -> `CsvSerializer.CsvSerializer(TextWriter, CultureInfo)`\n`CsvSerializer.CsvSerializer(TextWriter, bool)` -> `CsvSerializer.CsvSerializer(TextWriter, CultureInfo, bool)`\n`CsvWriter.CsvWriter(TextWriter)` -> `CsvWriter.CsvWriter(TextWriter, CultureInfo)`\n`CsvWriter.CsvWriter(TextWriter, bool)` -> `CsvWriter.CsvWriter(TextWriter, CultureInfo, bool)`\n```\n\n----------------------------------------\n\nTITLE: Removed Obsolete Methods in ICsvReader and ICsvWriter - C#\nDESCRIPTION: This snippet lists the methods that have been removed from the ICsvReader and ICsvWriter interfaces, indicating a significant change in the API that may affect existing code that relies on these methods.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/change-log/index.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// Removed obsolete code.\n- object ICsvReader.GetField( int index, ITypeConverter converter )\n- object ICsvReader.GetField( string name, ITypeConverter converter )\n- object ICsvReader.GetField( string name, int index, ITypeConverter converter )\n- void ICsvWriter.WriteField( Type type, object field )\n- void ICsvWriter.WriteField( Type type, object field, ITypeConverter converter )\n- void ICsvWriter.WriteRecord( Type type, object record )\n```\n\n----------------------------------------\n\nTITLE: Moved Methods from ICsvReaderRow to ICsvReader - C#\nDESCRIPTION: This snippet highlights the methods that have been relocated from the ICsvReaderRow interface to ICsvReader, which suggests a restructuring of the API for better organization and accessibility.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/change-log/index.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// Moved methods that aren't row level out of ICsvReaderRow and into ICsvReader.\n- IEnumerable<T> GetRecords<T>()\n- IEnumerable<object> GetRecords( Type type )\n- void ClearRecordCache<T>()\n- void ClearRecordCache( Type type )\n- void ClearRecordCache()\n```\n\n----------------------------------------\n\nTITLE: Initializing BadDataFoundArgs in C#\nDESCRIPTION: Shows the migration of BadDataFoundArgs initialization from constructor-based to object initializer syntax.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v25/index.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// v25\nvar args = new BadDataRoundArgs(field, rawRecord, context);\n\n// v26\nvar args = new BadDataFoundArgs\n{\n\tField = field,\n\tRawRecord = rawRecord,\n\tContext = context,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ConvertFromStringArgs in C#\nDESCRIPTION: Demonstrates the updated initialization pattern for ConvertFromStringArgs using object initializers.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v25/index.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// v25\nvar args = new ConvertFromStringArgs(row);\n\n// v26\nvar args = new ConvertFromStringArgs\n{\n\tRow = row,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing GetConstructorArgs in C#\nDESCRIPTION: Illustrates the change in GetConstructorArgs initialization pattern using object initializers.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v25/index.md#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// v25\nvar args = new GetConstructorArgs(type);\n\n// v26\nvar args = new GetConstructorArgs\n{\n\tClassType = type,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ReferenceHeaderPrefixArgs in C#\nDESCRIPTION: Shows the updated initialization pattern for ReferenceHeaderPrefixArgs using object initializers.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v25/index.md#2025-04-16_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n// v25\nvar args = new ReferenceHeaderPrefixArgs(memberType, memberName);\n\n// v26\nvar args = new ReferenceHeaderPrefixArgs\n{\n\tMemberType = memberType,\n\tMemberName = memberName,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ShouldQuoteArgs in C#\nDESCRIPTION: Demonstrates the migration of ShouldQuoteArgs initialization to object initializer syntax.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v25/index.md#2025-04-16_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n// v25\nvar args = new ShouldQuoteArgs(field, fieldType, row);\n\n// v26\nvar args = new ShouldQuoteArgs\n{\n\tField = field,\n\tFieldType = fieldType,\n\tRow = row,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ShouldSkipRecordArgs in C#\nDESCRIPTION: Shows how to update ShouldSkipRecordArgs initialization using object initializers.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v25/index.md#2025-04-16_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n// v25\nvar args = new ShouldSkipRecordArgs(record);\n\n// v26\nvar args = new ShouldSkipRecordArgs\n{\n\tRecord = record,\n};\n```\n\n----------------------------------------\n\nTITLE: Running Local Documentation Preview with .NET CLI\nDESCRIPTION: Command to start a local preview server for CsvHelper documentation using the dotnet CLI. The preview will be accessible under the /CsvHelper virtual directory.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> dotnet run -- preview --virtual-dir CsvHelper\n```\n\n----------------------------------------\n\nTITLE: CSV Output Example for Anonymous Type Objects\nDESCRIPTION: This snippet shows the expected CSV output after writing the anonymous type object. It demonstrates that the CSV file will contain headers based on the object's property names and the corresponding values.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/writing/write-anonymous-type-objects/index.md#2025-04-16_snippet_1\n\nLANGUAGE: CSV\nCODE:\n```\nId,Name\n1,one\n```\n\n----------------------------------------\n\nTITLE: Example Data Format for CSV Parsing with CsvHelper\nDESCRIPTION: Sample CSV data format showing a simple structure with Id and Name columns that will be mapped to a C# class.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/class-maps/ignoring-properties/index.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nId,Name\n1,one\n```\n\n----------------------------------------\n\nTITLE: Migrating MissingFieldFoundArgs Initialization in C#\nDESCRIPTION: Shows migration from object initializer to constructor parameters for MissingFieldFoundArgs class.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v26/index.md#2025-04-16_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n// v26\nvar args = new MissingFieldFoundArgs\n{\n\tHeaderNames = headerNames,\n\tIndex = index,\n\tContext = context,\n};\n\n// v27\nvar args = new MissingFieldFoundArgs(headerNames, index, context);\n```\n\n----------------------------------------\n\nTITLE: Migrating ShouldUseConstructorParametersArgs Initialization in C#\nDESCRIPTION: Shows migration from object initializer to constructor parameters for ShouldUseConstructorParametersArgs class.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v26/index.md#2025-04-16_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n// v26\nvar args = new ShouldUseConstructorParametersArgs\n{\n\tParameterType = parameterType,\n};\n\n// v27\nvar args = new ShouldUseConstructorParametersArgs(parameterType);\n```\n\n----------------------------------------\n\nTITLE: Configuring User-Agent Access in robots.txt\nDESCRIPTION: This snippet defines the user-agent directive in the robots.txt file. It allows unrestricted access to all web crawlers and search engine bots.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\n```\n\n----------------------------------------\n\nTITLE: Displaying Coming Soon Message in Markdown\nDESCRIPTION: A simple Markdown heading indicating that content is coming soon for the CsvHelper project. This is likely used as a placeholder for future documentation or feature announcements.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v13/index.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Coming Soon\n```\n\n----------------------------------------\n\nTITLE: Markdown Header\nDESCRIPTION: Simple markdown heading indicating future content\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/migration/v16/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Coming Soon\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Data Structure\nDESCRIPTION: Example CSV data format showing ID and Name columns.\nSOURCE: https://github.com/JoshClose/CsvHelper/blob/master/src/CsvHelper.Website/input/examples/configuration/class-maps/mapping-properties/index.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nId,Name\n1,one\n```"
  }
]