[
  {
    "owner": "eth-infinitism",
    "repo": "account-abstraction",
    "content": "TITLE: Implementing a Smart Contract Account\nDESCRIPTION: Example Solidity code for creating a custom smart contract account by extending the BaseAccount class. Demonstrates how to implement signature validation for user operations.\nSOURCE: https://github.com/eth-infinitism/account-abstraction/blob/develop/README.md#2025-04-23_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@account-abstraction/contracts/core/BaseAccount.sol\";\n\ncontract MyAccount is BaseAccount {\n\n    /// implement your authentication logic here\n    function _validateSignature(PackedUserOperation calldata userOp, bytes32 userOpHash)\n    internal override virtual returns (uint256 validationData) {\n\n        // UserOpHash can be generated using eth_signTypedData_v4\n        if (owner != ECDSA.recover(userOpHash, userOp.signature))\n            return SIG_VALIDATION_FAILED;\n        return SIG_VALIDATION_SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Paymaster Contract\nDESCRIPTION: Example Solidity code for creating a custom paymaster by extending the BasePaymaster class. Shows how to implement the validation logic for user operations.\nSOURCE: https://github.com/eth-infinitism/account-abstraction/blob/develop/README.md#2025-04-23_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@account-abstraction/contracts/core/BasePaymaster.sol\";\n\ncontract MyCustomPaymaster is BasePaymaster {\n    /// implement your gas payment logic here\n    function _validatePaymasterUserOp(\n        PackedUserOperation calldata userOp,\n        bytes32 userOpHash,\n        uint256 maxCost\n    ) internal virtual override returns (bytes memory context, uint256 validationData) {\n        context = \"\"; // specify \"context\" if needed in postOp call. \n        validationData = _packValidationData(\n            false,\n            validUntil,\n            validAfter\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying EntryPoint Contract to Network\nDESCRIPTION: Command to deploy the EntryPoint contract to a specified network using Hardhat.\nSOURCE: https://github.com/eth-infinitism/account-abstraction/blob/develop/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhardhat deploy --network {net}\n```\n\n----------------------------------------\n\nTITLE: Installing Account Abstraction Library\nDESCRIPTION: Command to add the account abstraction contracts as a dependency in a project.\nSOURCE: https://github.com/eth-infinitism/account-abstraction/blob/develop/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @account-abstraction/contracts\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Account Abstraction Contracts\nDESCRIPTION: Command to run the test suite for the smart contracts.\nSOURCE: https://github.com/eth-infinitism/account-abstraction/blob/develop/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Compiling Account Abstraction Contracts\nDESCRIPTION: Command to compile the smart contracts in the repository.\nSOURCE: https://github.com/eth-infinitism/account-abstraction/blob/develop/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn compile\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing the Account Abstraction Repository\nDESCRIPTION: Commands for cloning the repository from GitHub and installing dependencies using yarn.\nSOURCE: https://github.com/eth-infinitism/account-abstraction/blob/develop/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/eth-infinitism/account-abstraction.git\ncd account-abstraction\nyarn install\n```"
  }
]