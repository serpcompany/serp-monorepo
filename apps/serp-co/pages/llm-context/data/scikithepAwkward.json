[
  {
    "owner": "scikit-hep",
    "repo": "awkward",
    "content": "TITLE: Creating an Awkward Array from Python Data Structures\nDESCRIPTION: Demonstrates how to create an Awkward Array using nested Python lists and dictionaries. The resulting array contains variable-length lists of records with 'x' and 'y' fields.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\n\nexample = ak.Array([\n    [{\"x\": 1.1, \"y\": [1]}, {\"x\": 2.2, \"y\": [1, 2]}, {\"x\": 3.3, \"y\": [1, 2, 3]}],\n    [],\n    [{\"x\": 4.4, \"y\": [1, 2, 3, 4]}, {\"x\": 5.5, \"y\": [1, 2, 3, 4, 5]}]\n])\n```\n\n----------------------------------------\n\nTITLE: Creating Structured Awkward Arrays with Records in Python\nDESCRIPTION: Demonstrates how to create Awkward Arrays with complex structures using records, including nested data and unions.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/what-is-an-awkward-array.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nak.Array(\n    [\n        [\n            {\"name\": \"Benjamin List\", \"age\": 53},\n            {\"name\": \"David MacMillan\", \"age\": 53},\n        ],\n        [\n            {\"name\": \"Emmanuelle Charpentier\", \"age\": 52},\n            {\"name\": \"Jennifer A. Doudna\", \"age\": 57},\n        ],\n        [\n            {\"name\": \"Akira Yoshino\", \"age\": 73},\n            {\"name\": \"M. Stanley Whittingham\", \"age\": 79},\n            {\"name\": \"John B. Goodenough\", \"age\": 98},\n        ],\n    ]\n)\n\nak.Array(\n    [\n        [\n            {\n                \"name\": \"Benjamin List\",\n                \"age\": 53,\n                \"institutions\": [\n                    \"University of Cologne\",\n                    \"Max Planck Institute for Coal Research\",\n                    \"Hokkaido University\",\n                ],\n            },\n            {\n                \"name\": \"David MacMillan\",\n                \"age\": 53,\n                \"institutions\": None,\n            },\n        ]\n    ]\n)\n\nak.Array(\n    [\n        [np.datetime64(\"1815-12-10\"), \"Cassini\"],\n        [np.datetime64(\"1564-04-26\")],\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Selecting Opposite-Charge Muon Pairs with Awkward Array\nDESCRIPTION: Demonstrates how to select pairs of muons with opposite charges and plot their mass distribution using Awkward Array and hist.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/jagged-ragged-awkward-arrays.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncut = (mu1.charge != mu2.charge)\n\nhist.Hist(hist.axis.Regular(120, 0, 120, label=\"mass [GeV]\")).fill(ak.ravel(mass[cut])).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating Nested Awkward Arrays\nDESCRIPTION: Shows how to create a nested Awkward Array and perform operations like square root, multiplication, and addition using NumPy functions.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n\ny = ak.Array([\n    [[1], [1, 2], [1, 2, 3]],\n    [],\n    [[1, 2, 3, 4], [1, 2, 3, 4, 5]]\n])\n\n# Examples of operations:\n# np.sqrt(y)\n# y * 2\n# y + y\n# np.sum(y)\n# np.argmax(y, axis=-1)\n# np.mean(y, axis=0)\n# np.sort(y)\n# np.concatenate((y, y))\n```\n\n----------------------------------------\n\nTITLE: Preparing Taxi Route Data for Plotting with Awkward Array in Python\nDESCRIPTION: Shows how to prepare taxi route data for plotting by concatenating latitude and longitude arrays and converting to a list format compatible with mapping libraries.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/10-minutes-to-awkward-array.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlat_lon_taxi_75 = ak.concatenate(\n    (trip_longest.path.lat[..., np.newaxis], trip_longest.path.lon[..., np.newaxis]),\n    axis=-1\n)\nlat_lon_taxi_75.to_list()\n```\n\n----------------------------------------\n\nTITLE: Finding Longest Taxi Routes with Awkward Array in Python\nDESCRIPTION: Demonstrates how to flatten a jagged array, sort by trip length, and select the longest routes using Awkward Array operations like flatten, argsort, and indexing.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/10-minutes-to-awkward-array.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntrip = ak.flatten(taxi.trip, axis=1)\nix_length = ak.argsort(trip.km, ascending=False)\ntrip_longest = trip[ix_length[:3]]\n```\n\n----------------------------------------\n\nTITLE: Adding Methods to Record Instances\nDESCRIPTION: Shows how to add methods to Record instances of a specific named type using class definition and ak.behavior.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nclass SpecialRecord(ak.Record):\n    def len_y(self):\n        return len(self.y)\n\n\nak.behavior[\"Special\"] = SpecialRecord\n\nak.Record(layout[2]).len_y()\n```\n\n----------------------------------------\n\nTITLE: Mass Calculation and Plotting\nDESCRIPTION: Calculates and plots the invariant mass of electron pairs.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/thinking-in-arrays.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n(first_electron_in_pair + second_electron_in_pair).mass\n```\n\nLANGUAGE: python\nCODE:\n```\nHist.new.Reg(120, 0, 120, name=\"mass (GeV)\").Double().fill(\n    ak.flatten((first_electron_in_pair + second_electron_in_pair).mass, axis=-1)\n).plot();\n```\n\n----------------------------------------\n\nTITLE: Using Awkward Arrays with Numba JIT Compilation in Python\nDESCRIPTION: Demonstrates how to use Awkward Arrays within Numba JIT-compiled functions for improved performance. The example shows a function that sums the 'x' field of records in nested lists.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/index.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\nimport numba as nb\n\nexample = ak.Array([\n    [{\"x\": 1.1, \"y\": [1]}, {\"x\": 2.2, \"y\": [1, 2]}, {\"x\": 3.3, \"y\": [1, 2, 3]}],\n    [],\n    [{\"x\": 4.4, \"y\": [1, 2, 3, 4]}, {\"x\": 5.5, \"y\": [1, 2, 3, 4, 5]}]\n])\n\n@nb.jit\ndef sum_over_x(array):\n    output = np.zeros(len(array))\n    for i, list_of_records in enumerate(array):\n        for record in list_of_records:\n            output[i] += record.x\n    return output\n\nsum_over_x(example)\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Awkward Arrays in Python\nDESCRIPTION: Examples of creating basic Awkward Arrays with different dimensions and data types, including numbers, dates, and strings.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/what-is-an-awkward-array.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nak.Array([1, 2, 3])\n\nak.Array([\n    [1, 2, 3],\n    [4, 5, 6]\n])\n\nak.Array([\n    [1, 2, 3],\n    [4],\n    [5, 6]\n])\n\nak.Array([\n    [1, 2, 3],\n    [4],\n    [5, 6, None]\n])\n\nak.Array([\n    [3, 141], \n    [59, 26, 535], \n    [8]\n])\n\nak.Array(\n    [\n        [np.datetime64(\"1815-12-10\"), np.datetime64(\"1969-07-16\")],\n        [np.datetime64(\"1564-04-26\")],\n    ]\n)\n\nak.Array(\n    [\n        [\n            \"Benjamin List\",\n            \"David MacMillan\",\n        ],\n        [\n            \"Emmanuelle Charpentier\",\n            \"Jennifer A. Doudna\",\n        ],\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Writing to Parquet Format\nDESCRIPTION: Demonstrates how to write an Awkward Array to a Parquet file using ak.to_parquet().\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-arrow.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nak_array = ak.Array([{\"x\": 1.1, \"y\": [1]}, {\"x\": 2.2, \"y\": [1, 2]}, {\"x\": 3.3, \"y\": [1, 2, 3]}])\nak.to_parquet(ak_array, \"/tmp/example.parquet\")\n```\n\n----------------------------------------\n\nTITLE: Adding Fields to Awkward Array in Python\nDESCRIPTION: Shows how to add new fields to an existing Awkward Array using subscript notation. This is useful for storing computed values alongside original data.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/10-minutes-to-awkward-array.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntaxi[(\"trip\", \"path\", \"lat\")] = taxi_trip_lat\ntaxi[(\"trip\", \"path\", \"lon\")] = taxi_trip_lon\n```\n\n----------------------------------------\n\nTITLE: Combinatorics with Awkward Array: Cartesian Product and Combinations\nDESCRIPTION: Demonstrates how to perform combinatorial operations like Cartesian product and combinations on Awkward Arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/jagged-ragged-awkward-arrays.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nnumbers = ak.Array([[1, 2, 3], [], [5, 7], [11]])\nletters = ak.Array([[\"a\", \"b\"], [\"c\"], [\"d\"], [\"e\", \"f\"]])\npairs = ak.cartesian((numbers, letters))\npairs[\"0\"]\npairs[\"1\"]\nlefts, rights = ak.unzip(pairs)\npairs = ak.combinations(numbers, 2)\nlefts, rights = ak.unzip(pairs)\nlefts * rights\n```\n\n----------------------------------------\n\nTITLE: Processing Nested Arrays with NumPy Operations\nDESCRIPTION: Demonstrates how to slice array data, access nested fields, and apply NumPy operations across nested structures efficiently.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\noutput = np.square(array[\"y\", ..., 1:])\n```\n\n----------------------------------------\n\nTITLE: Creating RegularArrays\nDESCRIPTION: Shows how to create RegularArrays, which represent regular-length lists. It can contain both regular and irregular nested data.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nlayout = ak.contents.RegularArray(\n    ak.from_iter([1, 2, 3, 4, 5, 6], highlevel=False),\n    3,\n)\nlayout\n```\n\nLANGUAGE: python\nCODE:\n```\nlayout = ak.contents.RegularArray(\n    ak.from_iter(\n        [[], [1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]], highlevel=False\n    ),\n    3,\n)\nlayout\n```\n\n----------------------------------------\n\nTITLE: Using Nested Cartesian Product for Per-Bunny Analysis in Python\nDESCRIPTION: Applies ak.cartesian with nested=True to create a structure where each bunny is paired with all foxes in its yard. This allows for per-bunny analysis using reducers like ak.any.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-combinatorics-best-match.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npair_bunnies, pair_foxes = ak.unzip(ak.cartesian([bunnies, foxes], nested=True))\n\ndistances = np.sqrt((pair_bunnies.x - pair_foxes.x)**2 + (pair_bunnies.y - pair_foxes.y)**2)\neaten = (distances < 1)\n\nbunny_eaten = ak.any(eaten, axis=-1)\nbunnies[~bunny_eaten]\n```\n\n----------------------------------------\n\nTITLE: Particle Pair Analysis\nDESCRIPTION: Creates and analyzes electron-muon pairs using cartesian product and calculates delta R.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/thinking-in-arrays.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nelectron_muon_pairs = ak.cartesian([events.electron, events.muon])\nelectron_muon_pairs.type.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nelectron_in_pair, muon_in_pair = ak.unzip(electron_muon_pairs)\nelectron_in_pair.type.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nelectron_in_pair.pt, muon_in_pair.pt\n```\n\nLANGUAGE: python\nCODE:\n```\nak.num(electron_in_pair), ak.num(muon_in_pair)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Initial setup importing core libraries needed for data analysis including skhep_testdata, awkward, numpy and uproot\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/uproot-awkward-columnar-hats.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport skhep_testdata\nimport awkward as ak\nimport numpy as np\nimport uproot\n```\n\n----------------------------------------\n\nTITLE: Using ArrayBuilder to Construct Arrays of Records in Awkward Array\nDESCRIPTION: This example shows how to use ArrayBuilder to construct arrays of records, demonstrating both the begin_record/end_record methods and the record context manager.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-records.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbuilder = ak.ArrayBuilder()\n\nfor i in range(3):\n    with builder.record(\"XY\"):\n        builder.field(\"x\").append(i)\n        builder.field(\"y\").append(i * 1.1)\n\narray = builder.snapshot()\narray\n```\n\n----------------------------------------\n\nTITLE: Normalizing Awkward Array to Overall Mean 0 and Standard Deviation 1\nDESCRIPTION: This example demonstrates how to normalize an entire Awkward Array to have an overall mean of 0 and standard deviation of 1 using ak.mean and ak.std functions.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-statistics.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([[1.1, 2.2, 3.3], [4.4, 5.5], [6.6, 7.7, 8.8, 9.9]])\n```\n\nLANGUAGE: python\nCODE:\n```\n(array - ak.mean(array)) / ak.std(array)\n```\n\n----------------------------------------\n\nTITLE: Explicit Type Building with Awkward\nDESCRIPTION: Shows explicit type building using specific methods like boolean(), integer(), real(), complex(), null(), and string().\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-arraybuilder.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbuilder = ak.ArrayBuilder()\nbuilder.boolean(False)\nbuilder.integer(1)\nbuilder.real(2.2)\nbuilder.complex(3 + 1j)\nbuilder.null()\nbuilder.string(\"five\")\n```\n\n----------------------------------------\n\nTITLE: Loading Partial Parquet Data with Awkward Array in Python\nDESCRIPTION: Shows how to load a subset of data from a Parquet file using Awkward Array's from_parquet function. It specifies row groups and columns to load, reducing memory usage for large datasets.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/10-minutes-to-awkward-array.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntaxi = ak.from_parquet(\n    \"https://zenodo.org/records/14537442/files/chicago-taxi.parquet\",\n    row_groups=[0],\n    columns=[\"trip.km\", \"trip.begin.l*\", \"trip.end.l*\", \"trip.path.*\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Multidimensional Array Conversion\nDESCRIPTION: Shows conversion of multidimensional NumPy arrays to Awkward Arrays, demonstrating fixed-size vs variable-length dimensions.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-numpy.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnp_array = np.array([[100, 200], [101, 201], [103, 203]])\nak_array = ak.Array(np_array)\n# Type will be 3 * 2 * int64\n```\n\n----------------------------------------\n\nTITLE: Creating Jagged Arrays with Awkward Array in Python\nDESCRIPTION: Demonstrates how to create a jagged array using Awkward Array, which allows for variable-length nested lists that NumPy cannot represent directly.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/jagged-ragged-awkward-arrays.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\n\nak.Array([[0.0, 1.1, 2.2], [], [3.3, 4.4], [5.5], [6.6, 7.7, 8.8, 9.9]])\n```\n\n----------------------------------------\n\nTITLE: Creating an Awkward Array from a List of Python Dicts\nDESCRIPTION: This example demonstrates how to create an Awkward Array from a list of Python dictionaries, where each dictionary represents a record with consistent field names.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-records.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython_dicts = [\n    {\"x\": 1, \"y\": 1.1, \"z\": \"one\"},\n    {\"x\": 2, \"y\": 2.2, \"z\": \"two\"},\n    {\"x\": 3, \"y\": 3.3, \"z\": \"three\"},\n    {\"x\": 4, \"y\": 4.4, \"z\": \"four\"},\n    {\"x\": 5, \"y\": 5.5, \"z\": \"five\"},\n]\nawkward_array = ak.Array(python_dicts)\nawkward_array\n```\n\n----------------------------------------\n\nTITLE: Building Records Using ArrayBuilder with Numba JIT\nDESCRIPTION: Demonstrates using ak.ArrayBuilder within JIT-compiled functions to build records with 'x' and 'y' fields. Shows how to create individual records and combine them into an array using builder.snapshot().\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-records.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@nb.jit\ndef append_record(builder, i):\n    builder.begin_record()\n    builder.field(\"x\").append(i)\n    builder.field(\"y\").append(i * 1.1)\n    builder.end_record()\n\n\n@nb.jit\ndef example(builder):\n    append_record(builder, 1)\n    append_record(builder, 2)\n    append_record(builder, 3)\n    return builder\n\n\nbuilder = example(ak.ArrayBuilder())\n\narray = builder.snapshot()\narray\n```\n\n----------------------------------------\n\nTITLE: Electron PT Filtering\nDESCRIPTION: Shows filtering of electrons based on PT threshold of 30 GeV.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/thinking-in-arrays.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nevents.electron.pt, events.electron.pt > 30\n```\n\nLANGUAGE: python\nCODE:\n```\nak.num(events.electron), ak.num(events.electron[events.electron.pt > 30])\n```\n\nLANGUAGE: python\nCODE:\n```\nevents.electron[events.electron.pt > 30]\n```\n\n----------------------------------------\n\nTITLE: Finding Values with Numba-compiled Functions\nDESCRIPTION: Demonstrates how to write and use Numba-compiled functions to search through Awkward Arrays and return indices of specific values.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-numba-features.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@nb.jit\ndef first_array(array):\n    for i, list_of_numbers in enumerate(array):\n        for x in list_of_numbers:\n            if x == 3.3:\n                return i\n\n@nb.jit\ndef second_array(array):\n    for i, list_of_records in enumerate(array):\n        for record in list_of_records:\n            if record.x == 3.3:\n                return i\n\n@nb.jit\ndef where_is_3_point_3(a, b):\n    return first_array(a), second_array(b)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nested JSON Data Structure\nDESCRIPTION: Example of deeply nested JSON data with variable-length arrays showing irregular data patterns\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/thinking-in-arrays.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  [[1.84, 0.324]],\n  [[-1.609, -0.713, 0.005], [0.953, -0.993, 0.011, 0.718]],\n  [[0.459, -1.517, 1.545], [0.33, 0.292]],\n  [[-0.376, -1.46, -0.206], [0.65, 1.278]],\n  [[], [], [1.617]],\n  []\n]\n```\n\n----------------------------------------\n\nTITLE: Importing Awkward Array in Python\nDESCRIPTION: This snippet demonstrates how to import the Awkward Array library in Python. It shows the common import alias 'ak' used for the library.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\n```\n\n----------------------------------------\n\nTITLE: Converting Arrow Array to Awkward Array\nDESCRIPTION: Demonstrates conversion from a PyArrow array containing nested lists to an Awkward Array using ak.from_arrow().\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-arrow.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npa_array = pa.array([[1.1, 2.2, 3.3], [], [4.4, 5.5]])\nak.from_arrow(pa_array)\n```\n\n----------------------------------------\n\nTITLE: ArrayBuilder Data Type Methods in Python\nDESCRIPTION: Methods for adding different data types to the array including boolean, integer, real, string, and null values.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/ak.builder.ArrayBuilder.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nArrayBuilder.boolean(arg0)\nArrayBuilder.bytestring(arg0)\nArrayBuilder.integer(arg0)\nArrayBuilder.real(arg0)\nArrayBuilder.string(arg0)\nArrayBuilder.null()\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Array and Record Directly from Python Objects in Python\nDESCRIPTION: This snippet shows how to create Awkward Arrays and Records directly by passing Python objects to their constructors.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nak.Array([[1.1, 2.2, 3.3], [], [4.4, 5.5]])\n```\n\nLANGUAGE: python\nCODE:\n```\nak.Record({\"x\": 1, \"y\": [1.1, 2.2]})\n```\n\n----------------------------------------\n\nTITLE: Using ak.zip to Combine Columns into an Array of Records\nDESCRIPTION: This example demonstrates the use of ak.zip function to combine columns into an array of records, which can handle nested lists up to a specified depth limit.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-records.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nzipped = ak.zip(\n    {\n        \"x\": ak.Array([[1, 2, 3], [], [4, 5]]),\n        \"y\": ak.Array([[1.1, 2.2, 3.3], [], [4.4, 5.5]]),\n    }\n)\nzipped\n```\n\n----------------------------------------\n\nTITLE: Converting Awkward Array with Different-Length Lists to Multiple DataFrames\nDESCRIPTION: This example demonstrates using ak.to_dataframe() with how=None to handle Awkward Arrays containing lists of different lengths, returning a list of DataFrames.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-pandas.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nak_array = ak.Array(\n    [\n        {\"x\": [], \"y\": [4.4, 3.3, 2.2, 1.1]},\n        {\"x\": [1], \"y\": [3.3, 2.2, 1.1]},\n        {\"x\": [1, 2], \"y\": [2.2, 1.1]},\n        {\"x\": [1, 2, 3], \"y\": [1.1]},\n        {\"x\": [1, 2, 3, 4], \"y\": []},\n    ]\n)\nak.to_dataframe(ak_array, how=None)\n```\n\n----------------------------------------\n\nTITLE: Performing Operations on Awkward Arrays in Python\nDESCRIPTION: Examples of operations on Awkward Arrays, including summing elements and working with varying length lists.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/what-is-an-awkward-array.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nx = ak.Array([\n    [1, 2, 3],\n    [4, 5, 6]\n]);\n\nak.sum(x, axis=-1)\n\npowers_of_two = ak.Array(\n    [\n        [1, 2, 4],\n        [None, 8],\n        [16],\n    ]\n);\n\nak.sum(powers_of_two)\n\nak.sum(powers_of_two, axis=0)\n```\n\n----------------------------------------\n\nTITLE: Awkward to NumPy Conversion\nDESCRIPTION: Demonstrates conversion from Awkward Arrays back to NumPy arrays using ak.to_numpy, including handling of regular and irregular structures.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-numpy.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nak_array = ak.Array([[1, 2, 3], [4, 5, 6]])\nnp_array = ak.to_numpy(ak_array)\n```\n\n----------------------------------------\n\nTITLE: Creating a ListOffsetArray in Awkward Array\nDESCRIPTION: This snippet demonstrates how to create a ListOffsetArray structure, which is a more compact representation of variable-length lists using a single 'offsets' array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nlayout = ak.contents.ListOffsetArray(\n    ak.index.Index64(np.array([0, 3, 3, 5])),\n    ak.contents.NumpyArray(np.array([1.1, 2.2, 3.3, 4.4, 5.5])),\n)\nlayout\n```\n\n----------------------------------------\n\nTITLE: Converting Awkward Array to NumPy and Modifying\nDESCRIPTION: This snippet demonstrates converting an Awkward Array to a NumPy array, modifying the NumPy array, and showing how it affects the original Awkward Array. It illustrates that the conversion can create a view.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-numpy.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nak_array = ak.Array([[1, 2, 3], [4, 5, 6]])\nak_array\n```\n\nLANGUAGE: python\nCODE:\n```\nnp_array = ak.to_numpy(ak_array)\nnp_array\n```\n\nLANGUAGE: python\nCODE:\n```\n# Change the NumPy array in place.\nnp_array *= 100\nnp_array\n```\n\nLANGUAGE: python\nCODE:\n```\n# The Awkward Array that it came from is changed as well.\nak_array\n```\n\n----------------------------------------\n\nTITLE: Applying Softmax Function with Awkward Array\nDESCRIPTION: This snippet shows how to use ak.softmax function to compute softmax values of an Awkward Array along the innermost axis.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-statistics.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nak.softmax(array, axis=-1)\n```\n\n----------------------------------------\n\nTITLE: Creating and Slicing a Multidimensional Awkward Array in Python\nDESCRIPTION: This snippet shows how to create a 3D Awkward Array from a NumPy array and perform multidimensional slicing on it.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-simple-slicing.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nnp_array3d = np.arange(2*3*5).reshape(2, 3, 5)\nnp_array3d\n\narray3d = ak.Array(np_array3d)\narray3d\n\nnp_array3d[1, ::2, 1:-1]\n\narray3d[1, ::2, 1:-1]\n\narray3d[:, :, 1:-1]\n\narray3d[..., 1:-1]\n```\n\n----------------------------------------\n\nTITLE: Handling NaN Values in Statistical Computations with Awkward Array\nDESCRIPTION: These snippets show how to use nanmean, nanvar, and nanstd functions to compute statistics while ignoring NaN values in the array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-statistics.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\narray_with_nan = ak.Array([[0, 1.1, np.nan], [3.3, 4.4], [np.nan], [6.6, np.nan, 8.8, 9.9]])\n```\n\nLANGUAGE: python\nCODE:\n```\nak.nanmean(array_with_nan, axis=-1)\n```\n\nLANGUAGE: python\nCODE:\n```\nak.nanvar(array_with_nan, axis=-1)\n```\n\nLANGUAGE: python\nCODE:\n```\nak.nanstd(array_with_nan, axis=-1)\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Values in Awkward Arrays with Python\nDESCRIPTION: Demonstrates how to create an Awkward Array with potentially missing values (None) and shows the result of a max operation that produces None for empty lists.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/index.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\n\nx = ak.Array([[1.1, 2.2, 3.3], [], [4.4, 5.5]])\nak.max(x, axis=1)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Performance of Awkward Arrays in Python\nDESCRIPTION: Shows the performance benefits of using Awkward Arrays for large datasets, comparing it with pure Python operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/what-is-an-awkward-array.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlarge_array = ak.Array([[1, 2, 3], [], [4, 5]] * 1_000_000)\n\nak.sum(large_array)\n\nlarge_flat_array = ak.ravel(large_array)\n\nsum(large_flat_array)\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Fields in Awkward Array of Records in Python\nDESCRIPTION: Demonstrates how Awkward Array handles records with missing fields, filling them with None (option type).\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nak.Array([{\"x\": 1, \"y\": [1, 2]}, {\"x\": 2}])\n```\n\n----------------------------------------\n\nTITLE: Boolean Array Slicing in Awkward Array with Python\nDESCRIPTION: This snippet demonstrates how to use boolean arrays for slicing Awkward Arrays, including filtering elements based on conditions.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-simple-slicing.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\narray > 20\n\narray[array > 20]\n\narray % 2 == 0\n\narray[array % 2 == 0]\n```\n\n----------------------------------------\n\nTITLE: Creating Complex UnionArray with Multiple Content Types\nDESCRIPTION: Creates a UnionArray with three different content types (numbers, lists, and strings). This demonstrates how UnionArray can represent heterogeneous data using tags and indices to specify which content array and element to use.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nlayout = ak.contents.UnionArray(\n    ak.index.Index8(np.array([0, 1, 2, 0, 0, 1, 1, 2, 2, 0], np.int8)),\n    ak.index.Index64(np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])),\n    [\n        ak.contents.NumpyArray(\n            np.array([0.0, 1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9])\n        ),\n        ak.from_iter(\n            [\n                [],\n                [1],\n                [1, 2],\n                [1, 2, 3],\n                [1, 2, 3, 4],\n                [1, 2, 3, 4, 5],\n                [6],\n                [6, 7],\n                [6, 7, 8],\n                [6, 7, 8, 9],\n            ],\n            highlevel=False,\n        ),\n        ak.from_iter(\n            [\n                \"zero\",\n                \"one\",\n                \"two\",\n                \"three\",\n                \"four\",\n                \"five\",\n                \"six\",\n                \"seven\",\n                \"eight\",\n                \"nine\",\n            ],\n            highlevel=False,\n        ),\n    ],\n)\nlayout\n```\n\n----------------------------------------\n\nTITLE: Creating an Awkward Array using ArrayBuilder\nDESCRIPTION: Demonstrates how to create a complex nested structure using Awkward Array's ArrayBuilder. This method allows thinking about data as Python objects rather than columnar data.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbuilder = ak.ArrayBuilder()\n\nwith builder.list():\n    with builder.record():\n        builder.field(\"x\").real(1.1)\n        with builder.field(\"y\").list():\n            builder.integer(1)\n    with builder.record():\n        builder.field(\"x\").real(2.2)\n        with builder.field(\"y\").list():\n            builder.integer(1)\n            builder.integer(2)\n    with builder.record():\n        builder.field(\"x\").real(3.3)\n        with builder.field(\"y\").list():\n            builder.integer(1)\n            builder.integer(2)\n            builder.integer(3)\n\nwith builder.list():\n    pass\n\nwith builder.list():\n    with builder.record():\n        builder.field(\"x\").real(4.4)\n        with builder.field(\"y\").list():\n            builder.integer(3)\n            builder.integer(2)\n\n    with builder.record():\n        builder.field(\"x\").real(5.5)\n        with builder.field(\"y\").list():\n            builder.integer(3)\n\narray = builder.snapshot()\narray\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Arrays of Vectors using Vector Library in Python\nDESCRIPTION: Shows how to create and work with Awkward Arrays of spatial or momentum vectors using the Vector library. The example demonstrates creating a 3D momentum vector and performing operations on it.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/index.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport vector\nvector.register_awkward()\n\nexample = ak.zip({\n    \"x\": ak.Array([[1.1, 2.2, 3.3], [], [4.4, 5.5]]),\n    \"y\": ak.Array([[  1,   2,   3], [], [  4,   5]]),\n    \"z\": ak.Array([[ 10,  20,  30], [], [ 40,  50]])\n}, with_name=\"Momentum3D\")\n\nexample.phi\n(2 * example).is_parallel(example)\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Array from Dictionary using Pandas-style Constructor in Python\nDESCRIPTION: This snippet shows how to create an Awkward Array from a dictionary of iterables, similar to the Pandas DataFrame constructor.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npy_objects1 = [[1.1, 2.2, 3.3], [], [4.4, 5.5]]\npy_objects2 = [\"one\", \"two\", \"three\"]\nak_array = ak.Array({\"x\": py_objects1, \"y\": py_objects2})\nak_array\n```\n\n----------------------------------------\n\nTITLE: Custom Numba ufunc Implementation\nDESCRIPTION: Example of creating a custom vectorized function using Numba that can be applied to Awkward Arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-numpy.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@nb.vectorize\ndef gcd_euclid(x, y):\n    while y != 0:\n        x, y = y, x % y\n    return x\n\nx = ak.Array([[10, 20, 30], [], [40, 50]])\ny = ak.Array([[5, 40, 15], [], [24, 255]])\n\ngcd_euclid(x, y)\n```\n\n----------------------------------------\n\nTITLE: Converting Pandas DataFrame to Awkward Array via Apache Arrow\nDESCRIPTION: This example demonstrates the process of converting a Pandas DataFrame to an Awkward Array using Apache Arrow as an intermediary, which is currently the only method for this conversion.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-pandas.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npokemon = urllib.request.urlopen(\n    \"https://gist.githubusercontent.com/armgilles/194bcff35001e7eb53a2a8b441e8b2c6/raw/92200bc0a673d5ce2110aaad4544ed6c4010f687/pokemon.csv\"\n)\ndf = pd.read_csv(pokemon)\nak_array = ak.from_arrow(pa.Table.from_pandas(df))\nak.type(ak_array)\nak.to_list(ak_array[0])\n```\n\n----------------------------------------\n\nTITLE: Dimuon Analysis with Awkward Array in Particle Physics\nDESCRIPTION: Illustrates a more complex example of using Awkward Array for dimuon analysis in particle physics, including combining multiple particle properties and calculating invariant masses.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/jagged-ragged-awkward-arrays.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport uproot\nimport awkward as ak\nimport numpy as np\n\nfile = uproot.open(\"https://github.com/jpivarski-talks/2023-12-18-hsf-india-tutorial-bhubaneswar/raw/main/data/SMHiggsToZZTo4L.root\")\ntree = file[\"Events\"]\n\narrays = tree.arrays(filter_name=\"/Muon_(pt|eta|phi|charge)/\", entry_stop=10000)\n\nmuons = ak.zip({\n    \"pt\": arrays[\"Muon_pt\"],\n    \"eta\": arrays[\"Muon_eta\"],\n    \"phi\": arrays[\"Muon_phi\"],\n    \"charge\": arrays[\"Muon_charge\"],\n})\n\npairs = ak.combinations(muons, 2)\nmu1, mu2 = ak.unzip(pairs)\n\nmass = np.sqrt(2 * mu1.pt * mu2.pt * (np.cosh(mu1.eta - mu2.eta) - np.cos(mu1.phi - mu2.phi)))\n```\n\n----------------------------------------\n\nTITLE: Initializing Nested Array Data Structure in Python\nDESCRIPTION: Creates an Awkward Array containing nested lists of objects with x and y fields, where y contains nested lists. Demonstrates the core data structure capabilities of the library.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\n\narray = ak.Array([\n    [{\"x\": 1.1, \"y\": [1]}, {\"x\": 2.2, \"y\": [1, 2]}, {\"x\": 3.3, \"y\": [1, 2, 3]}],\n    [],\n    [{\"x\": 4.4, \"y\": [1, 2, 3, 4]}, {\"x\": 5.5, \"y\": [1, 2, 3, 4, 5]}]\n])\n```\n\n----------------------------------------\n\nTITLE: Extracting Fields from Awkward Arrays\nDESCRIPTION: Demonstrates how to extract individual fields from an Awkward Array of records and convert it to a dictionary of arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\n\nexample = ak.Array([\n    [{\"x\": 1.1, \"y\": [1]}, {\"x\": 2.2, \"y\": [1, 2]}, {\"x\": 3.3, \"y\": [1, 2, 3]}],\n    [],\n    [{\"x\": 4.4, \"y\": [1, 2, 3, 4]}, {\"x\": 5.5, \"y\": [1, 2, 3, 4, 5]}]\n])\n\n# Extract individual fields\nx, y = ak.unzip(example)\n\n# Convert to dict of arrays\ndict_of_arrays = dict(zip(ak.fields(example), ak.unzip(example)))\n```\n\n----------------------------------------\n\nTITLE: Creating Arrays from NumPy with Different Representations\nDESCRIPTION: Shows how to create Awkward Arrays from NumPy arrays using different representations, either as a single NumpyArray or nested in RegularArrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nak.from_numpy(\n    np.array([[1, 2, 3], [4, 5, 6]], np.int16), regulararray=False, highlevel=False\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nak.from_numpy(\n    np.array([[1, 2, 3], [4, 5, 6]], np.int16), regulararray=True, highlevel=False\n)\n```\n\n----------------------------------------\n\nTITLE: Converting NumPy Masked Arrays\nDESCRIPTION: Demonstration of creating and converting between NumPy masked arrays and Awkward Arrays with missing values\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-missing.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nnumpy_array = np.ma.MaskedArray([1, 2, 3, 4, 5], [False, False, True, True, False])\nawkward_array = ak.Array(numpy_array)\nak.to_numpy(awkward_array)\n```\n\n----------------------------------------\n\nTITLE: Creating an Awkward Array from a Single Dict of Columns\nDESCRIPTION: This snippet shows how to create an Awkward Array from a single dictionary representing columns, similar to Pandas DataFrame constructor.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-records.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom_columns = ak.Array(\n    {\n        \"x\": [1, 2, 3, 4, 5],\n        \"y\": [1.1, 2.2, 3.3, 4.4, 5.5],\n        \"z\": [\"one\", \"two\", \"three\", \"four\", \"five\"],\n    }\n)\nfrom_columns\n```\n\n----------------------------------------\n\nTITLE: Converting Awkward Array to Generic Buffers\nDESCRIPTION: Demonstrates converting an Awkward Array to form, length, and container components using ak.to_buffers().\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-buffers.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nform, length, container = ak.to_buffers(ak_array)\n```\n\n----------------------------------------\n\nTITLE: Creating Union Type Awkward Array with Concatenation in Python\nDESCRIPTION: Shows how to create a union type Awkward Array by concatenating arrays with different record structures.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nak.concatenate(\n    [\n        ak.Array([{\"x\": 1.1, \"y\": [1]}]),\n        ak.Array([{\"x\": 2.2, \"z\": \"two\"}]),\n        ak.Array([{\"x\": 3.3, \"y\": [1, 2, 3], \"z\": \"three\"}]),\n    ]\n).to_list()\n```\n\n----------------------------------------\n\nTITLE: Converting Simple Awkward Array to Pandas DataFrame\nDESCRIPTION: This example demonstrates converting a simple Awkward Array with record structure to a Pandas DataFrame using ak.to_dataframe().\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-pandas.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nak_array = ak.Array(\n    [\n        {\"x\": 1.1, \"y\": 1, \"z\": \"one\"},\n        {\"x\": 2.2, \"y\": 2, \"z\": \"two\"},\n        {\"x\": 3.3, \"y\": 3, \"z\": \"three\"},\n        {\"x\": 4.4, \"y\": 4, \"z\": \"four\"},\n        {\"x\": 5.5, \"y\": 5, \"z\": \"five\"},\n    ]\n)\nak.to_dataframe(ak_array)\n```\n\n----------------------------------------\n\nTITLE: Record Building with Awkward\nDESCRIPTION: Shows how to create record structures with named fields using the record() context manager.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-arraybuilder.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbuilder = ak.ArrayBuilder()\n\nwith builder.record(\"Point\"):\n    builder.field(\"x\").real(1.1)\n    builder.field(\"y\").real(2.2)\n    builder.field(\"z\").real(3.3)\n```\n\n----------------------------------------\n\nTITLE: Slicing Jagged Arrays in Awkward Array\nDESCRIPTION: Shows various slicing operations on Awkward Arrays, including basic indexing, range slicing, and boolean masking.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/jagged-ragged-awkward-arrays.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([[0.0, 1.1, 2.2], [], [3.3, 4.4], [5.5], [6.6, 7.7, 8.8, 9.9]])\narray[2]\narray[-1, 1]\narray[2:, 0]\narray[2:, 1:]\narray[:, 0]\narray[[True, False, True, False, True]]\narray[[2, 3, 3, 1]]\n```\n\n----------------------------------------\n\nTITLE: Conditional Operations with Broadcasting\nDESCRIPTION: Shows how to use NumPy's where function with broadcasting to conditionally select values from two arrays based on a condition.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-broadcasting.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\narray1 = ak.Array([[1, 2, 3], [], [4, 5]])\narray2 = ak.Array([10, 20, 30])\n\nnp.where(array1 % 2 == 0, array1, array2)\n```\n\n----------------------------------------\n\nTITLE: Filtering Awkward Array by Value\nDESCRIPTION: Demonstrates filtering an Awkward array by numerical value, selecting only elements greater than 4.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-num.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\narray[array > 4]\n```\n\n----------------------------------------\n\nTITLE: Converting Awkward Array to Python List using ak.to_list() in Python\nDESCRIPTION: This snippet demonstrates how to convert an Awkward Array back into a Python list using the ak.to_list() function.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nak_array = ak.Array([[1.1, 2.2, 3.3], [], [4.4, 5.5]])\nak_array\n```\n\nLANGUAGE: python\nCODE:\n```\nak.to_list(ak_array)\n```\n\n----------------------------------------\n\nTITLE: Converting Awkward Array to Arrow Format\nDESCRIPTION: Shows how to convert an Awkward Array with nested structure to PyArrow format using ak.to_arrow().\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-arrow.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nak_array = ak.Array([{\"x\": 1.1, \"y\": [1]}, {\"x\": 2.2, \"y\": [1, 2]}, {\"x\": 3.3, \"y\": [1, 2, 3]}])\npa_array = ak.to_arrow(ak_array)\n```\n\n----------------------------------------\n\nTITLE: Converting Awkward Array to Pandas via Apache Arrow\nDESCRIPTION: This example shows the process of converting an Awkward Array to a Pandas DataFrame using Apache Arrow as an intermediary, which preserves nested structures differently than direct conversion.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-pandas.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nak_array = ak.Array(\n    [\n        [\n            {\"x\": 1.1, \"y\": 1, \"z\": \"one\"},\n            {\"x\": 2.2, \"y\": 2, \"z\": \"two\"},\n            {\"x\": 3.3, \"y\": 3, \"z\": \"three\"},\n        ],\n        [],\n        [{\"x\": 4.4, \"y\": 4, \"z\": \"four\"}, {\"x\": 5.5, \"y\": 5, \"z\": \"five\"}],\n    ]\n)\npa_array = ak.to_arrow(ak_array)\npa_table = pa.Table.from_batches(\n    [\n        pa.RecordBatch.from_arrays(\n            [\n                ak.to_arrow(ak_array.x, extensionarray=False),\n                ak.to_arrow(ak_array.y, extensionarray=False),\n                ak.to_arrow(ak_array.z, extensionarray=False),\n            ],\n            [\"x\", \"y\", \"z\"],\n        )\n    ]\n)\npa_table.to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Applying NumPy Universal Function to Awkward Array\nDESCRIPTION: This example demonstrates how to apply a NumPy universal function (sqrt) to an Awkward Array, showcasing vectorized operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-lists.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nnp.sqrt(awkward_array)\n```\n\n----------------------------------------\n\nTITLE: Broadcasting with Record Arrays\nDESCRIPTION: Shows how to broadcast arrays containing nested record structures using ak.broadcast_arrays, demonstrating Awkward Array's ability to work with complex nested data.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-broadcasting.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\narray1 = ak.Array([\n    [{\"x\": 1.1, \"y\": [1]}, {\"x\": 2.2, \"y\": [1, 2]}, {\"x\": 3.3, \"y\": [1, 2, 3]}],\n    [],\n    [{\"x\": 4.4, \"y\": [1, 2, 3, 4]}, {\"x\": 5.5, \"y\": [1, 2, 3, 4, 5]}],\n])\narray2 = ak.Array([10, 20, 30])\n\nak.broadcast_arrays(array1, array2)\n```\n\n----------------------------------------\n\nTITLE: Basic Imports for Awkward Array\nDESCRIPTION: Imports the Awkward Array and NumPy libraries, which are necessary dependencies for working with Awkward arrays and performing operations on them.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-broadcasting.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Custom Type String Registration\nDESCRIPTION: Demonstrates how to register a custom type string representation for a reversible list using __typestr__ behavior.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/ak.behavior.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nak.behavior[\"__typestr__\", \"reversible\"] = \"a-reversible-list\"\n```\n\n----------------------------------------\n\nTITLE: Nested List Construction with Awkward\nDESCRIPTION: Demonstrates creating nested list structures using begin_list/end_list methods.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-arraybuilder.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbuilder = ak.ArrayBuilder()\n\nbuilder.begin_list()\nbuilder.append(1.1)\nbuilder.append(2.2)\nbuilder.append(3.3)\nbuilder.end_list()\n\nbuilder.begin_list()\nbuilder.end_list()\n\nbuilder.begin_list()\nbuilder.append(4.4)\nbuilder.append(5.5)\nbuilder.end_list()\n```\n\n----------------------------------------\n\nTITLE: Creating a JAX-backed Awkward Array in Python\nDESCRIPTION: This code creates an Awkward Array backed by JAX arrays. The 'backend=\"jax\"' argument ensures that the array is compatible with JAX's automatic differentiation features.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-specialize-differentiate-jax.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([[1.0, 2.0, 3.0], [], [4.0, 5.0]], backend=\"jax\")\n```\n\n----------------------------------------\n\nTITLE: Adding End-of-List Markers to Awkward Array in Python\nDESCRIPTION: Shows how to add markers (zeros) at the end of each list in an Awkward Array, which can be useful for preserving list boundaries in machine learning applications.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-pad.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([[5512, 1364], [657], [4853, 6421, 3461, 7745], [5245, 654, 4216]])\nperiods = np.zeros((len(array), 1), np.int64)\nak.concatenate([array, periods], axis=1)\nak.flatten(ak.concatenate([array, periods], axis=1))\n```\n\n----------------------------------------\n\nTITLE: Converting Awkward Array of Records to Python List in Python\nDESCRIPTION: Shows how to convert an Awkward Array of records back to a Python list using the to_list() method.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nak_array_rec.to_list()\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Arrays from NumPy Arrays (Case 1 and 2)\nDESCRIPTION: These snippets show two cases of creating Awkward Arrays from NumPy arrays: one without and one with the regulararray option. Both cases result in views of the original NumPy array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-numpy.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Case 1: C-contiguous and not RegularArray (should view).\nak_array1 = ak.from_numpy(np_array)\nak_array1\n```\n\nLANGUAGE: python\nCODE:\n```\n# Case 2: C-contiguous and RegularArray (should view).\nak_array2 = ak.from_numpy(np_array, regulararray=True)\nak_array2\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Awkward-Pandas Conversion\nDESCRIPTION: This snippet imports the necessary libraries for working with Awkward Arrays, Pandas DataFrames, and Apache Arrow. It also includes urllib for fetching sample data.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-pandas.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport pandas as pd\nimport pyarrow as pa\nimport urllib.request\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Awkward Array Conversions in Python\nDESCRIPTION: This snippet imports the necessary libraries for working with Awkward Arrays, NumPy arrays, and Pandas DataFrames.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\nimport pandas as pd\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Nested Awkward Arrays in Python\nDESCRIPTION: Creates a complex Awkward Array with nested structures including dictionaries and lists, then converts it to buffers format. Shows how to represent and serialize hierarchical data structures with Awkward Arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\narray = ak.Array(\n\n[\n\n    {\"px\": [{\"key\": \"first key\", \"value\": 1}, {\"key\": \"second key\", \"value\": 2}], \"py\": {\"px\": True, \"py\": 3.2, \"pz\": 5.4, \"E\": 2.5}, \"pz\": 5.4, \"E\": 2.5, \"ex\": [\"fde\",\"fde\"]},\n\n    {\"px\": [{\"key\": \"first key\", \"value\": 1}, {\"key\": \"second key\", \"value\": 2}], \"py\": {\"px\": True, \"py\": 3.2, \"pz\": 5.4, \"E\": 2.5}, \"pz\": 543.34, \"E\": 24.12, \"ex\": [\"fde\",\"fde\"]},\n\n    {\"px\": [{\"key\": \"first key\", \"value\": 1}, {\"key\": \"second key\", \"value\": 2}], \"py\": {\"px\": True, \"py\": 3.2, \"pz\": 5.4, \"E\": 2.5}, \"pz\": 543.14, \"E\": 24.56, \"ex\": [\"fde\",\"fde\"]},\n\n],\n\n)\na,b,c = ak.to_buffers(array)\nprint(a)\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Array from Python Lists\nDESCRIPTION: This example demonstrates how to create an Awkward Array from a list of Python lists using the ak.Array constructor.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-lists.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython_lists = [[1, 2, 3], [], [4, 5], [6], [7, 8, 9, 10]]\nawkward_array = ak.Array(python_lists)\nawkward_array\n```\n\n----------------------------------------\n\nTITLE: Using Nested Cartesian Products in Awkward Array\nDESCRIPTION: Demonstrates how to use the nested argument in ak.cartesian to maintain grouping, which is useful for operations like finding the best combination or checking conditions across combinations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-combinatorics-cartesian-combinations.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nresult = ak.cartesian([np.arange(5), np.arange(4)], axis=0, nested=True)\nresult\n\nlefts, rights = ak.unzip(result)\n\nak.any(abs(lefts - rights) >= 3, axis=1)\n```\n\n----------------------------------------\n\nTITLE: Compact Idiom for Selecting Maximum Score Records in Awkward Array using Python\nDESCRIPTION: Provides a concise one-liner to select records with maximum scores from an Awkward Array, combining argmax, indexing, and slicing operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-argminmax.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndata[ak.argmax(data.x**2 + data.y**2, axis=1, keepdims=True)][:, 0]\n```\n\n----------------------------------------\n\nTITLE: Converting JSON String to Awkward Array\nDESCRIPTION: Demonstrates converting a JSON string containing nested arrays directly to an Awkward Array using ak.from_json.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-json.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nak.from_json(\"[[1.1, 2.2, 3.3], [], [4.4, 5.5]]\")\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Import statements for Awkward Array and NumPy libraries necessary for string array operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-strings.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Point Mixin Class Implementation\nDESCRIPTION: Shows how to use mixin decorators to implement a Point class with custom behaviors for equality, absolute value, and addition.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/ak.behavior.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@ak.mixin_class(ak.behavior)\nclass Point:\n    def distance(self, other):\n        return np.sqrt((self.x - other.x) ** 2 + (self.y - other.y) ** 2)\n\n    @ak.mixin_class_method(np.equal, {\"Point\"})\n    def point_equal(self, other):\n        return np.logical_and(self.x == other.x, self.y == other.y)\n\n    @ak.mixin_class_method(np.abs)\n    def point_abs(self):\n        return np.sqrt(self.x ** 2 + self.y ** 2)\n```\n\n----------------------------------------\n\nTITLE: Creating a NumpyArray\nDESCRIPTION: Demonstrates various ways to create NumpyArrays, which represent data similar to NumPy ndarrays. It can be multidimensional and handle different data types.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nak.contents.NumpyArray(np.array([1.1, 2.2, 3.3, 4.4, 5.5]))\n```\n\nLANGUAGE: python\nCODE:\n```\nak.contents.NumpyArray(np.array([[1, 2, 3], [4, 5, 6]], np.int16))\n```\n\nLANGUAGE: python\nCODE:\n```\nak.contents.NumpyArray(np.array([1.1, 2.2, 3.3, 4.4, 5.5])[::2])\n```\n\nLANGUAGE: python\nCODE:\n```\nak.contents.NumpyArray(np.array([[1, 2, 3], [4, 5, 6]], np.int16)[:, 1:])\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Import statements for the Awkward Array and NumPy libraries needed for array operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-ragged.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Converting JSON Object to Awkward Record\nDESCRIPTION: Shows conversion of a JSON object with mixed data types to an Awkward Record structure.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-json.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nak.from_json('{\"x\": 1, \"y\": [1, 2], \"z\": \"hello\"}')\n```\n\n----------------------------------------\n\nTITLE: Matplotlib Integration with Awkward Arrays\nDESCRIPTION: Example of creating custom plots using Matplotlib with Awkward Array data structures.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-flatten.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nimport matplotlib.path\nimport matplotlib.patches\n\nfig, ax = plt.subplots()\n\nfor line in array:\n    if len(line) > 0:\n        vertices = np.dstack([np.asarray(line.x), np.asarray(line.y)])[0]\n        codes = [matplotlib.path.Path.MOVETO] + [matplotlib.path.Path.LINETO] * (len(line) - 1)\n        path = matplotlib.path.Path(vertices, codes)\n        ax.add_patch(matplotlib.patches.PathPatch(path, facecolor=\"none\"))\n\nax.set_xlim(0, 6)\nax.set_ylim(0, 6);\n```\n\n----------------------------------------\n\nTITLE: Recursive Nested List Building\nDESCRIPTION: Shows how to create arbitrarily nested list structures using recursive function calls.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-arraybuilder.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef arbitrary_nesting(builder, depth):\n    if depth == 0:\n        builder.append(1)\n        builder.append(2)\n        builder.append(3)\n    else:\n        builder.begin_list()\n        arbitrary_nesting(builder, depth - 1)\n        builder.end_list()\n\nbuilder = ak.ArrayBuilder()\narbitrary_nesting(builder, 5)\n```\n\n----------------------------------------\n\nTITLE: Creating Arrays with ArrayBuilder in Numba\nDESCRIPTION: Shows how to create new Awkward Arrays using ArrayBuilder within Numba-compiled functions, demonstrating both simple and complex data structures.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-numba-features.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@nb.jit\ndef create_ragged_array(builder, n):\n    for i in range(n):\n        builder.begin_list()\n        for j in range(i):\n            builder.integer(j)\n        builder.end_list()\n    return builder\n```\n\n----------------------------------------\n\nTITLE: Using ak.zip for Column-wise Concatenation in Awkward Array\nDESCRIPTION: This snippet demonstrates how to use ak.zip to achieve column-wise concatenation similar to Pandas' axis=1 behavior.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-concatenate.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nak.zip({\"column1\": array1.column, \"column2\": array2.column}, depth_limit=1)\n\nak.zip({\"column1\": array1.column, \"column2\": array2.column})\n```\n\n----------------------------------------\n\nTITLE: Using ArrayBuilder with Strings\nDESCRIPTION: Demonstrates how to build string arrays using ArrayBuilder methods.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-strings.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nbuilder = ak.ArrayBuilder()\n\nbuilder.string(\"one\")\nbuilder.append(\"two\")\nbuilder.append(\"three\")\n\narray = builder.snapshot()\narray\n```\n\n----------------------------------------\n\nTITLE: Creating and Slicing a Basic Awkward Array in Python\nDESCRIPTION: This snippet demonstrates creating a simple Awkward Array from a NumPy array and performing basic slicing operations on it.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-simple-slicing.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array(np.arange(10)**2)  # squaring numbers for clarity\narray\n\narray[:5]\n\narray[-5:]\n\narray[1::2]\n```\n\n----------------------------------------\n\nTITLE: Non-ufunc NumPy Operations\nDESCRIPTION: Demonstrates usage of NumPy functions that aren't ufuncs but have Awkward Array implementations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-numpy.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nnp.where(y % 2 == 0, x, y)\nnp.concatenate([x, y])\nnp.concatenate([x, y], axis=1)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for GPU Operations\nDESCRIPTION: Initialize required Python packages including awkward, numpy and cupy for GPU operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-gpu.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\nimport cupy as cp\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Array from List of NumPy Arrays in Python\nDESCRIPTION: Shows how to create an Awkward Array from a list of NumPy arrays, resulting in an array of variable-length lists.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npy_objects = [np.array([100, 200]), np.array([101, 201]), np.array([103, 203])]\npy_objects\n```\n\n----------------------------------------\n\nTITLE: Reading from Parquet Format\nDESCRIPTION: Shows how to read data from a Parquet file into an Awkward Array, including column selection.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-arrow.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nak.from_parquet(\"/tmp/example.parquet\")\nak.from_parquet(\"/tmp/example.parquet\", columns=[\"x\"])\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Awkward Arrays\nDESCRIPTION: Initializes example Awkward Arrays with nested structures for demonstration. Creates three arrays with different shapes but equal lengths.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-rdataframe.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narray_x = ak.Array([\n    {\"x\": [1.1, 1.2, 1.3]},\n    {\"x\": [2.1, 2.2]},\n    {\"x\": [3.1]},\n    {\"x\": [4.1, 4.2, 4.3, 4.4]},\n    {\"x\": [5.1]},\n])\narray_y = ak.Array([1, 2, 3, 4, 5])\narray_z = ak.Array([[1.1], [2.1, 2.3, 2.4], [3.1], [4.1, 4.2, 4.3], [5.1]])\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Awkward Array in Python\nDESCRIPTION: This code creates a complex nested Awkward array containing dictionaries with 'title', 'x', and 'y' fields. This array serves as the basis for subsequent filtering operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-cut-mask.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\noriginal_array = ak.Array([\n    [\n        {\"title\": \"zero\", \"x\": 0, \"y\": 0},\n        {\"title\": \"one\", \"x\": 1, \"y\": 1.1},\n        {\"title\": \"two\", \"x\": 2, \"y\": 2.2},\n    ],\n    [],\n    [\n        {\"title\": \"three\", \"x\": 3, \"y\": 3.3},\n        {\"title\": \"four\", \"x\": 4, \"y\": 4.4},\n    ],\n    [\n        {\"title\": \"five\", \"x\": 5, \"y\": 5.5},\n    ],\n    [\n        {\"title\": \"six\", \"x\": 6, \"y\": 6.6},\n        {\"title\": \"seven\", \"x\": 7, \"y\": 7.7},\n        {\"title\": \"eight\", \"x\": 8, \"y\": 8.8},\n        {\"title\": \"nine\", \"x\": 9, \"y\": 9.9},\n    ],\n])\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Nested Array\nDESCRIPTION: Creates a sample nested array with records, lists, and None values to demonstrate flattening operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-flatten.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([[{\"x\": 1.1, \"y\": [1]}, {\"x\": None, \"y\": [1, 2]}], [], [{\"x\": 3.3, \"y\": [1, 2, 3]}]])\n```\n\n----------------------------------------\n\nTITLE: Indexing with Named Axes in Awkward Array\nDESCRIPTION: Shows how to perform indexing operations using named axes with dictionary syntax and various indexing patterns\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-array-properties-named-axis.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([[[1, 2]], [[3]], [[4]], [[5, 6], [7]]])\nnamed_array = ak.with_named_axis(array, named_axis=(\"x\", \"y\", \"z\"))\n\n# named axes\nnamed_array[{\"x\": 0}] # array[0, :, :]\nnamed_array[{\"z\": 0}] # array[:, :, 0]\n\nnamed_array[{\"x\": 0, \"y\": 0}] # array[0, 0, :]\nnamed_array[{\"x\": slice(0, 1), \"y\": 0}] # array[0:1, 0, :]\n\nnamed_array[named_array > 3] # array[array > 3]\n```\n\n----------------------------------------\n\nTITLE: Computing Mean, Variance, and Standard Deviation with Awkward Array\nDESCRIPTION: These snippets demonstrate how to use ak.mean, ak.var, and ak.std functions to compute basic statistics on the sample array along the innermost axis.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-statistics.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nak.mean(array, axis=-1)\n```\n\nLANGUAGE: python\nCODE:\n```\nak.var(array, axis=-1)\n```\n\nLANGUAGE: python\nCODE:\n```\nak.std(array, axis=-1)\n```\n\n----------------------------------------\n\nTITLE: Getting Validity Error for Awkward Array in Python\nDESCRIPTION: This snippet shows how to use ak.validity_error() to get detailed error information for an invalid Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-checking-validity.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nak.validity_error(array_is_valid)\nak.validity_error(array_is_invalid)\n```\n\n----------------------------------------\n\nTITLE: Using Numba with Awkward Arrays in Python\nDESCRIPTION: Demonstrates how to use Numba with Awkward Arrays for custom, high-performance computations on complex data structures.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/what-is-an-awkward-array.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport numba as nb\n\n@nb.njit\ndef cumulative_sum(arr):\n    result = 0\n    for x in arr:\n        for y in x:\n            result += y\n    return result\n    \ncumulative_sum(large_array)\n```\n\n----------------------------------------\n\nTITLE: Filtering Array by List Length at Second Level\nDESCRIPTION: Demonstrates filtering the array to keep only inner lists with more than 2 elements using ak.num with axis=2.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-num.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\narray[ak.num(array, axis=2) > 2]\n```\n\n----------------------------------------\n\nTITLE: Record Field Selection\nDESCRIPTION: Demonstrates accessing specific fields from record structures using attribute access and string indexing.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-flatten.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([[{\"x\": 1.1, \"y\": [1], \"z\": \"one\"}, {\"x\": None, \"y\": [1, 2], \"z\": \"two\"}], [], [{\"x\": 3.3, \"y\": [1, 2, 3], \"z\": \"three\"}]])\narray.x  # or array[\"x\"]\n```\n\n----------------------------------------\n\nTITLE: Computing Correlation and Covariance with Awkward Array\nDESCRIPTION: These snippets demonstrate how to use ak.corr and ak.covar functions to compute correlation and covariance between two Awkward Arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-statistics.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\narray_x = ak.Array([[0, 1.1, 2.2], [3.3, 4.4], [5.5], [6.6, 7.7, 8.8, 9.9]])\narray_y = ak.Array([[0, 1, 2], [3, 4], [5], [6, 7, 8, 9]])\n```\n\nLANGUAGE: python\nCODE:\n```\nak.corr(array_x, array_y, axis=-1)\n```\n\nLANGUAGE: python\nCODE:\n```\nak.covar(array_x, array_y, axis=-1)\n```\n\n----------------------------------------\n\nTITLE: Doubling First and Last Values in Awkward Array Lists\nDESCRIPTION: This example demonstrates how to use ak.concatenate to double the first and last values of lists in an Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-concatenate.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nak.concatenate([array1[:, :1], array1, array1[:, -1:]], axis=1)\n```\n\n----------------------------------------\n\nTITLE: NumPy Array Casting in Numba\nDESCRIPTION: Demonstrates how to cast one-dimensional Awkward Arrays to NumPy arrays within Numba-compiled functions for numerical operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-numba-features.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@nb.jit\ndef return_last_y_list_squared(array):\n    y_list_squared = None\n    for list_of_records in array:\n        for record in list_of_records:\n            y_list_squared = np.asarray(record.y)**2\n    return y_list_squared\n```\n\n----------------------------------------\n\nTITLE: Reading Awkward Array from HDF5\nDESCRIPTION: Reconstructs an Awkward Array from HDF5 storage by reading buffers and metadata.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-buffers.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nreconstituted = ak.from_buffers(\n    ak.forms.from_json(group.attrs[\"form\"]),\n    group.attrs[\"length\"],\n    {k: np.asarray(v) for k, v in group.items()},\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Array by List Length at First Level\nDESCRIPTION: Shows how to filter the array to keep only outer lists that have exactly 2 inner lists using ak.num with the default axis.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-num.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\narray[ak.num(array) == 2]\n```\n\n----------------------------------------\n\nTITLE: Structured Array Conversion\nDESCRIPTION: Shows conversion between NumPy structured arrays and Awkward Arrays with record types.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-numpy.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nnp_array = np.array([(1, 1.1), (2, 2.2), (3, 3.3)], dtype=[('x', int), ('y', float)])\nak_array = ak.from_numpy(np_array)\n```\n\n----------------------------------------\n\nTITLE: Integer Array Slicing in Awkward Array with Python\nDESCRIPTION: This snippet shows how to use integer arrays for slicing Awkward Arrays, allowing for selection of specific elements and reordering.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-simple-slicing.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nindices = ak.Array([2, 5, 3])\narray[indices]\n\narray[[2, 5, 3]]\n\narray[[2, 5, 5, 5, 5, 5, 3]]\n```\n\n----------------------------------------\n\nTITLE: Using ArgMin with Awkward Arrays\nDESCRIPTION: Shows how to use argmin with keepdims parameter to maintain array dimensions for filtering.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-ragged.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([\n    [10, 3, 2, 9],\n    [4, 5, 5, 12, 6],\n    [8, 9, -1],\n])\n\narray[ak.from_regular(ak.argmin(array, axis=-1, keepdims=True, mask_identity=False))]\n```\n\n----------------------------------------\n\nTITLE: Creating Nested String Arrays in Awkward Array\nDESCRIPTION: This snippet demonstrates how to create nested arrays of strings using multiple levels of ListOffsetArray with appropriate parameters.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nak.Array(\n    ak.contents.ListOffsetArray(\n        ak.index.Index64([0, 2, 4]),\n        ak.contents.ListOffsetArray(\n            ak.index.Index64(np.array([0, 3, 12, 15, 19])),\n            ak.contents.NumpyArray(\n                np.array(\n                    [\n                        104,\n                        101,\n                        121,\n                        226,\n                        128,\n                        148,\n                        226,\n                        128,\n                        148,\n                        226,\n                        128,\n                        148,\n                        121,\n                        111,\n                        117,\n                        103,\n                        117,\n                        121,\n                        115,\n                    ],\n                    np.uint8,\n                ),\n                parameters={\"__array__\": \"char\"},\n            ),\n            parameters={\"__array__\": \"string\"},\n        ),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Arrays on GPU\nDESCRIPTION: This code generates Awkward Arrays on the GPU using CuPy. It creates a jagged array with random counts and content, demonstrating how to prepare data for GPU processing.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-numba-cuda.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nN = 2**20\n\ncounts = ak.Array(cp.random.poisson(1.5, N).astype(np.int32))\ncontent = ak.Array(cp.random.normal(0, 45.0, int(ak.sum(counts))).astype(np.float32))\narray = ak.unflatten(content, counts)\narray\n```\n\n----------------------------------------\n\nTITLE: Reconstructing Taxi Routes with Awkward Array in Python\nDESCRIPTION: Demonstrates how to reconstruct taxi routes by adding relative waypoint positions to the starting position. This showcases Awkward Array's broadcasting capabilities for jagged arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/10-minutes-to-awkward-array.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntaxi_trip_lat = taxi.trip.begin.lat + taxi.trip.path.latdiff\ntaxi_trip_lon = taxi.trip.begin.lon + taxi.trip.path.londiff\n```\n\n----------------------------------------\n\nTITLE: Flattening Selected Records in Awkward Array with Python\nDESCRIPTION: Removes the length-1 list structure from the selected records, resulting in a flattened array of records with the highest scores.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-argminmax.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresult[:, 0]\n```\n\n----------------------------------------\n\nTITLE: Flattening an Awkward Array in Python\nDESCRIPTION: Demonstrates how to flatten a nested Awkward Array using the ak.flatten function. This is useful when list boundaries are not relevant for machine learning applications.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-pad.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([[0.0, 1.1, 2.2], [], [3.3, 4.4], [5.5], [6.6, 7.7, 8.8, 9.9]])\narray\n\nak.flatten(array)\n```\n\n----------------------------------------\n\nTITLE: Using broadcast_arrays Function\nDESCRIPTION: Demonstrates how to use ak.broadcast_arrays to explicitly broadcast arrays to compatible shapes without performing any operation, showing the resulting aligned arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-broadcasting.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\narray1 = ak.Array([[1, 2, 3], [], [4, 5]])\narray2 = ak.Array([10, 20, 30])\n\nak.broadcast_arrays(array1, array2)\n```\n\n----------------------------------------\n\nTITLE: Converting Record Fields to Lists in Awkward Array using Python\nDESCRIPTION: Shows how to convert record fields in an Awkward Array into lists, which can be useful for restructuring data for machine learning inputs. This uses ak.concatenate and ak.unzip functions.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-pad.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([\n    {\"a\": 11, \"b\": 12, \"c\": 13, \"d\": 14, \"e\": 15, \"f\": 16, \"g\": 17, \"h\": 18},\n    {\"a\": 21, \"b\": 22, \"c\": 23, \"d\": 24, \"e\": 25, \"f\": 26, \"g\": 27, \"h\": 28},\n    {\"a\": 31, \"b\": 32, \"c\": 33, \"d\": 34, \"e\": 35, \"f\": 36, \"g\": 37, \"h\": 38},\n    {\"a\": 41, \"b\": 42, \"c\": 43, \"d\": 44, \"e\": 45, \"f\": 46, \"g\": 47, \"h\": 48},\n    {\"a\": 51, \"b\": 52, \"c\": 53, \"d\": 54, \"e\": 55, \"f\": 56, \"g\": 57, \"h\": 58},\n])\nak.concatenate(ak.unzip(array[:, np.newaxis]), axis=1)\nnp.asarray(ak.concatenate(ak.unzip(array[:, np.newaxis]), axis=1))\n```\n\n----------------------------------------\n\nTITLE: 3D NumPy Array Operations\nDESCRIPTION: Example showing dimension reduction operations on a 3D NumPy array with different axis parameters.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-reducing.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\narray3d = np.array([\n    [\n        [    1,     2,     3,     4,     5],\n        [   10,    20,    30,    40,    50],\n        [  100,   200,   300,   400,   500],\n    ],\n    [\n        [0.1  , 0.2  , 0.3  , 0.4  , 0.5  ],\n        [0.01 , 0.02 , 0.03 , 0.04 , 0.05 ],\n        [0.001, 0.002, 0.003, 0.004, 0.005],\n    ],\n])\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Array using Numba with Unflattening\nDESCRIPTION: This example shows how to use Numba JIT compilation to create flat data and counts arrays, which are then unflattened to create an Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-lists.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@nb.jit\ndef append_list(i, data, j, counts, start, stop):\n    for x in range(start, stop):\n        data[i] = x\n        i += 1\n    counts[j] = stop - start\n    j += 1\n    return i, j\n\n@nb.jit\ndef example():\n    data = np.empty(5, np.int64)\n    counts = np.empty(3, np.int64)\n    i, j = 0, 0\n    i, j = append_list(i, data, j, counts, 1, 4)\n    i, j = append_list(i, data, j, counts, 999, 999)\n    i, j = append_list(i, data, j, counts, 4, 6)\n    return data, counts\n\ndata, counts = example()\n\narray = ak.unflatten(data, counts)\narray\n```\n\n----------------------------------------\n\nTITLE: Basic Array Type Examination in Python\nDESCRIPTION: Creates and examines the type of a basic Awkward Array containing nested strings. Shows how to use the type.show() method to display array structure.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-type.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\n\narray = ak.Array([\n    [\"Mr.\", \"Blue,\", \"you\", \"did\", \"it\", \"right\"],\n    [\"But\", \"soon\", \"comes\", \"Mr.\", \"Night\"],\n    [\"creepin'\", \"over\"]\n])\narray.type.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Arrays with Python None Values\nDESCRIPTION: Examples of creating Awkward Arrays with missing values using Python None at different nesting levels\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-missing.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nak.Array([1, 2, 3, None, 4, 5])\nak.Array([[[[], [1, 2, None]]], [[[3]]], []])\nak.Array([[[[], [1, 2]]], None, [[[3]]], []])\nak.Array([[[[], [3]]], None, [[[None]]], []])\nak.Array([{\"x\": 1, \"y\": 1}, None, {\"x\": 2, \"y\": 2}])\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Constant Value to New Field\nDESCRIPTION: Demonstrates broadcasting a constant value to create a new field across all array elements.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-add-fields.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\narray[\"z\"] = 0\narray.show()\n```\n\n----------------------------------------\n\nTITLE: Adding New Field to Array\nDESCRIPTION: Shows how to add a new field 'y' to an existing Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-add-fields.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\narray[\"y\"] = [9, 8, 7]\narray.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Awkward Array with Records in Python\nDESCRIPTION: Initializes a complex Awkward Array containing nested lists of records with title, x, and y fields. This array serves as the primary data structure for subsequent operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-argminmax.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata = ak.Array([\n    [\n        {\"title\": \"zero\", \"x\": 0, \"y\": 0},\n        {\"title\": \"two\", \"x\": 2, \"y\": 2.2},\n        {\"title\": \"one\", \"x\": 1, \"y\": 1.1},\n    ],\n    [],\n    [\n        {\"title\": \"four\", \"x\": 4, \"y\": 4.4},\n        {\"title\": \"three\", \"x\": 3, \"y\": 3.3},\n    ],\n    [\n        {\"title\": \"five\", \"x\": 5, \"y\": 5.5},\n    ],\n    [\n        {\"title\": \"eight\", \"x\": 8, \"y\": 8.8},\n        {\"title\": \"six\", \"x\": 6, \"y\": 6.6},\n        {\"title\": \"nine\", \"x\": 9, \"y\": 9.9},\n        {\"title\": \"seven\", \"x\": 7, \"y\": 7.7},\n    ],\n])\n```\n\n----------------------------------------\n\nTITLE: Creating and Inspecting an Array of Records in Python with Awkward Array\nDESCRIPTION: This snippet demonstrates how to create an array of records using Awkward Array and inspect its fields. It shows the use of the 'type' attribute and 'fields' property to list the fields.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-list-fields.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n\nrecords = ak.Array(\n    [\n        {\"x\": 0.014309631995020777, \"y\": 0.7077380205549498},\n        {\"x\": 0.44925764718311145, \"y\": 0.11927022136408238},\n        {\"x\": 0.9870653236436898, \"y\": 0.1543661194285082},\n        {\"x\": 0.7071893130949595, \"y\": 0.3966721033002645},\n        {\"x\": 0.3059032831996634, \"y\": 0.5094743992919755},\n    ]\n)\n\nprint(records.type)\nrecords.type.show()\nrecords.fields\nak.fields(records)\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Values\nDESCRIPTION: Demonstrates different approaches to handle missing values using ak.fill_none and flattening operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-flatten.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nak.fill_none(ak.mean(array, axis=1), 0)  # fill with zero\nak.fill_none(ak.mean(array, axis=1), ak.mean(array))  # fill with the mean of all\nak.flatten(ak.mean(array, axis=1), axis=0)\n```\n\n----------------------------------------\n\nTITLE: Accessing Awkward Array Layout\nDESCRIPTION: Demonstrates how to access the internal layout of an Awkward Array, showing the columnar structure of the data.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\narray.layout\n```\n\n----------------------------------------\n\nTITLE: Sorting Awkward Array by Scores using Python\nDESCRIPTION: Uses ak.argsort to obtain sorted indices based on scores, then applies these indices to sort the original data array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-argminmax.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsorted_indexes = ak.argsort(score)\ndata[sorted_indexes]\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Values in Statistical Computations with Awkward Array\nDESCRIPTION: This snippet demonstrates how Awkward Array handles missing values (None) in statistical computations, showing that they are ignored or passed through depending on their position.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-statistics.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\narray_with_None = ak.Array([[0, 1.1, 2.2], None, [None, 4.4], [5.5], [6.6, np.nan, 8.8, 9.9]])\n```\n\nLANGUAGE: python\nCODE:\n```\nak.mean(array_with_None, axis=-1)\n```\n\nLANGUAGE: python\nCODE:\n```\nak.nanmean(array_with_None, axis=-1)\n```\n\n----------------------------------------\n\nTITLE: Boolean Filtering with Awkward Arrays\nDESCRIPTION: Demonstrates boolean masking to filter array elements while preserving the ragged structure.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-ragged.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nnumbers = ak.Array([\n    [0, 1, 2, 3],\n    [4, 5, 6],\n    [8, 9, 10, 11, 12],\n])\n\nis_even = (numbers % 2) == 0\nnumbers[is_even]\n```\n\n----------------------------------------\n\nTITLE: Defining a CUDA Kernel for Awkward Array Processing\nDESCRIPTION: This snippet defines a CUDA kernel function that processes Awkward Arrays. It calculates the sum of elements for each sub-array in the input array. The function is decorated with @numba.cuda.jit and uses the ak.numba.cuda extension.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-numba-cuda.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@numba.cuda.jit(extensions=[ak.numba.cuda])\ndef path_length(out, array):\n    tid = numba.cuda.grid(1)\n    if tid < len(array):\n        out[tid] = 0\n        for i, x in enumerate(array[tid]):\n            out[tid] += x\n```\n\n----------------------------------------\n\nTITLE: Single Axis Flattening\nDESCRIPTION: Shows flattening along a single axis using ak.flatten with specific axis parameters.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-flatten.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nak.flatten(ak.Array([[0, 1, 2], [], [3, 4], [5], [6, 7, 8, 9]]))\n```\n\n----------------------------------------\n\nTITLE: Regular vs Ragged Array Types\nDESCRIPTION: Demonstrates the difference between regular and ragged array types using NumPy and Awkward Array conversions.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-type.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nregular = ak.from_numpy(np.arange(8).reshape(2, 4))\nragged = ak.from_regular(regular)\n\nregular.type.show()\nragged.type.show()\n```\n\n----------------------------------------\n\nTITLE: Plotting Taxi Routes on a Map using ipyleaflet and Awkward Array in Python\nDESCRIPTION: Demonstrates how to use the prepared taxi route data from Awkward Array to plot routes on an interactive map using ipyleaflet. This showcases the integration of Awkward Array with visualization libraries.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/10-minutes-to-awkward-array.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport ipyleaflet as ipl\n\nmap_taxi_75 = ipl.Map(\n    basemap=ipl.basemap_to_tiles(ipl.basemaps.CartoDB.Voyager, \"2022-04-08\"),\n    center=(41.8921, -87.6623),\n    zoom=11,\n)\nfor route in lat_lon_taxi_75:\n    path = ipl.AntPath(locations=route.to_list(), delay=1000)\n    map_taxi_75.add_layer(path)\nmap_taxi_75\n```\n\n----------------------------------------\n\nTITLE: Adding Methods to Array Collections\nDESCRIPTION: Demonstrates how to add methods to arrays of a specific record type using class definition and ak.behavior with wildcard notation.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nclass SpecialArray(ak.Array):\n    def len_y(self):\n        return ak.num(self.y)\n\n\nak.behavior[\"*\", \"Special\"] = SpecialArray\n\nak.Array(layout).len_y()\n```\n\n----------------------------------------\n\nTITLE: Splitting Awkward Array String into Lines\nDESCRIPTION: This code demonstrates how to split a long string in an Awkward Array into individual lines using the split_pattern function, and then remove the temporary outer dimension.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-strings-read-binary.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsplit_at_newlines = ak.str.split_pattern(string, \"\\n\")\nsplit_at_newlines\n\nlines = split_at_newlines[0]\nlines\n```\n\n----------------------------------------\n\nTITLE: Creating Basic String Arrays\nDESCRIPTION: Demonstrates creating Awkward Arrays from Python strings using the ak.Array constructor.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-strings.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nak.Array([\"one\", \"two\", \"three\"])\n```\n\n----------------------------------------\n\nTITLE: Slicing Ragged Awkward Arrays in Python\nDESCRIPTION: This snippet demonstrates slicing operations on ragged Awkward Arrays, including selecting sublists and performing cross-sublist operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-simple-slicing.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nragged_array = ak.Array([[10, 20, 30], [40], [], [50, 60]])\nragged_array\n\nragged_array[1]\n\nragged_array[:, :2]  # get first two elements of each sublist\n\nragged_array[ak.num(ragged_array) > 1, 1:]\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Array using ArrayBuilder with Context Manager\nDESCRIPTION: This example demonstrates how to use ak.ArrayBuilder with the list context manager to create an Awkward Array with nested lists.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-lists.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nbuilder = ak.ArrayBuilder()\n\nwith builder.list():\n    builder.append(1)\n    builder.append(2)\n    builder.append(3)\n\nwith builder.list():\n    pass\n\nwith builder.list():\n    builder.append(4)\n    builder.append(5)\n\narray = builder.snapshot()\narray\n```\n\n----------------------------------------\n\nTITLE: Zipping Arrays with Different Dimensions\nDESCRIPTION: Demonstrates zipping arrays with different dimensions using ak.zip() and controlling broadcast depth with depth_limit parameter.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-zip-project.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = ak.Array([103, 450, 33, 4])\n\ndigits_of_x = ak.Array([\n    [1, 0, 3],\n    [4, 5, 0],\n    [3, 3],\n    [4]\n])\nx_and_digits = ak.zip({\"x\": x, \"digits\": digits_of_x}, depth_limit=1)\n```\n\n----------------------------------------\n\nTITLE: Handling None Values in Awkward Arrays with Python\nDESCRIPTION: This snippet demonstrates various methods to handle None values in the result array, including dropping them, filling them with a value, and converting them to empty lists.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-cut-mask.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nak.drop_none(result, axis=1)\nak.fill_none(result, -1, axis=1)\nak.singletons(result, axis=1)\n```\n\n----------------------------------------\n\nTITLE: Converting NumPy Array to Awkward Array using ak.from_numpy() in Python\nDESCRIPTION: This snippet demonstrates the difference between using ak.from_iter() and ak.from_numpy() when converting a NumPy array to an Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nnp_array = np.array([[100, 200], [101, 201], [103, 203]])\nnp_array\n```\n\nLANGUAGE: python\nCODE:\n```\nak.from_iter(np_array)\n```\n\nLANGUAGE: python\nCODE:\n```\nak.from_numpy(np_array)\n```\n\n----------------------------------------\n\nTITLE: Extracting Fields from Awkward Array in Python\nDESCRIPTION: This snippet extracts the 'x' and 'y' fields from the original Awkward array, creating two separate arrays that maintain the original nested structure.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-cut-mask.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\narray_x = original_array.x\narray_y = original_array.y\n```\n\n----------------------------------------\n\nTITLE: Computing Peak-to-Peak Values with Awkward Array\nDESCRIPTION: This snippet demonstrates the use of ak.ptp function to compute the range (maximum - minimum) of data along an axis in an Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-statistics.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nak.ptp(array, axis=-1)\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Score Indices in Awkward Array with Python\nDESCRIPTION: Uses ak.argmax to find the index of the maximum score for each list in the Awkward Array. The keepdims parameter is used to maintain the array structure.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-argminmax.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbest_index = ak.argmax(score, axis=1, keepdims=True)\nbest_index\n```\n\n----------------------------------------\n\nTITLE: Installing Awkward with pip\nDESCRIPTION: Command to install the Awkward package using pip, rip, pixi, or uv package managers.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install awkward\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Lists with ListOffsetArray\nDESCRIPTION: This snippet shows how to create nested lists using ListOffsetArray, demonstrating the creation of an array of lists containing other lists.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nlayout = ak.contents.ListOffsetArray(\n    ak.index.Index64(np.array([0, 18, 42, 59, 83, 100])),\n    ak.contents.NumpyArray(np.arange(100)),\n)\narray = ak.Array(layout)\narray[0], array[1], array[2], array[3], array[4]\n```\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array(\n    ak.contents.ListOffsetArray(\n        ak.index.Index64(np.array([0, 3, 3, 5])),\n        layout,\n    )\n)\narray[0], array[1], array[2]\n```\n\n----------------------------------------\n\nTITLE: Slicing Awkward Arrays with Conditions in Python\nDESCRIPTION: This code demonstrates slicing Awkward arrays based on conditions. It shows how slicing can lead to misaligned arrays when different conditions are applied to each array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-cut-mask.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsliced_x = array_x[array_x > 3]\nsliced_y = array_y[array_y > 3]\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing Scalar Records from Arrays\nDESCRIPTION: Demonstrates how to create an array of records and extract a scalar record, which can still be sliced like an Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array(\n    ak.contents.RecordArray(\n        [\n            ak.from_iter([1.1, 2.2, 3.3, 4.4, 5.5], highlevel=False),\n            ak.from_iter([[1], [1, 2], [1, 2, 3], [3, 2], [3]], highlevel=False),\n        ],\n        [\n            \"x\",\n            \"y\",\n        ],\n    )\n)\nrecord = array[2]\nrecord\n```\n\n----------------------------------------\n\nTITLE: Grouping Meteorite Data by Classification\nDESCRIPTION: Creating grouped data structure by unflattening the sorted meteorite data using computed run lengths.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-unflatten-group.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlanding_by_class = ak.unflatten(landing_sorted_class, lengths)\nlanding_by_class\n\nlanding_by_class.recclass[..., 0]\n```\n\n----------------------------------------\n\nTITLE: Creating a ListArray in Awkward Array\nDESCRIPTION: This snippet demonstrates how to create a ListArray structure in Awkward Array, which represents variable-length lists using 'starts' and 'stops' indexes.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nlayout = ak.contents.ListArray(\n    ak.index.Index64(np.array([0, 3, 3])),\n    ak.index.Index64(np.array([3, 3, 5])),\n    ak.contents.NumpyArray(np.array([1.1, 2.2, 3.3, 4.4, 5.5])),\n)\nlayout\n```\n\n----------------------------------------\n\nTITLE: Numba Integration with Awkward Array\nDESCRIPTION: Demonstrates using Numba JIT compilation with Awkward Array for improved performance in physics calculations\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/uproot-awkward-columnar-hats.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@nb.njit\ndef first_big_dimuon(events):\n    for event in events:\n        for i in range(len(event)):\n            mu1 = event[i]\n            for j in range(i + 1, len(event)):\n                mu2 = event[j]\n                dimuon = mu1 + mu2\n                if dimuon.mass > 10:\n                    return dimuon\n```\n\n----------------------------------------\n\nTITLE: Cartesian Product Example\nDESCRIPTION: Demonstrates cartesian product operation between two arrays using ak.cartesian.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/thinking-in-arrays.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nnumbers = ak.Array([[1, 2, 3], [], [4]])\nletters = ak.Array([[\"a\", \"b\"], [\"c\"], [\"d\", \"e\"]])\n```\n\nLANGUAGE: python\nCODE:\n```\nak.cartesian([numbers, letters])\n```\n\n----------------------------------------\n\nTITLE: Ragged Array Operations\nDESCRIPTION: Examples of reduction operations on ragged arrays with different lengths and missing values.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-reducing.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\narray_ragged = ak.Array([\n    [None, None,    3,    4],\n    [  10, None,   30      ],\n    [ 100,  200,  300,  400],\n])\nak.sum(array_ragged, axis=-1)\nak.sum(array_ragged, axis=-2)\n```\n\n----------------------------------------\n\nTITLE: Creating a NumpyArray with Parameters\nDESCRIPTION: Demonstrates how to add custom parameters to a NumpyArray, which can be used for metadata or to define custom behaviors.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nak.Array(\n    ak.contents.NumpyArray(\n        np.array([[1, 2, 3], [4, 5, 6]]),\n        parameters={\"name1\": \"value1\", \"name2\": {\"more\": [\"complex\", \"value\"]}}\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Projecting Array Fields in Python\nDESCRIPTION: Shows how to project specific fields from arrays using list-based field selection and demonstrates combining projections with array slicing.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-zip-project.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntriangle = ak.Array([\n    {\"x\": 1, \"y\": 6, \"z\": 0},\n    {\"x\": 2, \"y\": 7, \"z\": 0},\n    {\"x\": 3, \"y\": 8, \"z\": 0}\n])\n\ntriangle_2d = triangle[[\"x\", \"y\"]]\n```\n\n----------------------------------------\n\nTITLE: Converting Awkward Array Fields to NumPy Arrays in Python\nDESCRIPTION: Demonstrates how to convert specific fields (x and y) from the padded Awkward Array to NumPy arrays, useful for further processing or machine learning tasks.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-argminmax.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nak.to_numpy(padded.x)\nak.to_numpy(padded.y)\n```\n\n----------------------------------------\n\nTITLE: Defining City Class and Creating Lists of Cities in Python\nDESCRIPTION: Creates a City class and initializes lists of US and Canadian cities for demonstration purposes. This sets up the data structure for later examples.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-combinatorics-cartesian-combinations.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass City:\n    def __init__(self, name, latitude, longitude):\n        self.name = name\n        self.latitude = latitude\n        self.longitude = longitude\n\ncities_us = [\n    City(\"New York\", 40.7128, -74.0060),\n    City(\"Los Angeles\", 34.0522, -118.2437),\n    City(\"Chicago\", 41.8781, -87.6298),\n]\ncities_canada = [\n    City(\"Toronto\", 43.6510, -79.3470),\n    City(\"Vancouver\", 49.2827, -123.1207),\n    City(\"Montreal\", 45.5017, -73.5673),\n]\n```\n\n----------------------------------------\n\nTITLE: Computing Array Length on GPU\nDESCRIPTION: Shows GPU computation using ak.num() function to get lengths of nested arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-gpu.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nak.num(array_gpu)\n```\n\n----------------------------------------\n\nTITLE: Returning Array Sections with Numba\nDESCRIPTION: Shows how to return parts of Awkward Arrays from Numba-compiled functions when specific conditions are met.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-numba-features.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@nb.jit\ndef first_array(array):\n    for list_of_numbers in array:\n        for x in list_of_numbers:\n            if x == 3.3:\n                return list_of_numbers\n\n@nb.jit\ndef second_array(array):\n    for list_of_records in array:\n        for record in list_of_records:\n            if record.x == 3.3:\n                return record\n\n@nb.jit\ndef find_3_point_3(a, b):\n    return first_array(a), second_array(b)\n```\n\n----------------------------------------\n\nTITLE: Using itertools for Cartesian Product and Combinations in Python\nDESCRIPTION: Demonstrates the use of Python's itertools library to create Cartesian products and combinations, which are more efficient than nested loops for large datasets.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-combinatorics-cartesian-combinations.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport itertools\n\nlist(\n    CityPair(city1, city2)\n    for city1, city2 in itertools.product(cities_us, cities_canada)\n)\n\nlist(\n    CityPair(city1, city2)\n    for city1, city2 in itertools.combinations(all_cities, 2)\n)\n```\n\n----------------------------------------\n\nTITLE: Binary Operations with Awkward Arrays\nDESCRIPTION: Shows how binary operations are implemented using NumPy ufuncs under the hood.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-numpy.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\narray1 = ak.Array([[1, 2, 3], [], [4, 5]])\narray2 = ak.Array([[10, 20, 30], [], [40, 50]])\n\narray1 + array2\nnp.add(array1, array2)\n```\n\n----------------------------------------\n\nTITLE: Accessing and Calculating with Combination Pairs in Awkward Array\nDESCRIPTION: Shows how to access individual elements of combination pairs and perform calculations on them using Awkward Array operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-combinatorics-cartesian-combinations.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntuples = ak.combinations(numbers, 2)\n\ntuples[\"0\"], tuples[\"1\"]\n\ntuples[\"0\"] * tuples[\"1\"]\n\nlefts, rights = ak.unzip(tuples)\n\nlefts * rights\n```\n\n----------------------------------------\n\nTITLE: Creating an IndexedArray for Data Rearrangement\nDESCRIPTION: Creates an IndexedArray that rearranges elements from its content array using indices, demonstrating how to permute, remove, or duplicate items.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nlayout = ak.contents.IndexedArray(\n    ak.index.Index64(np.array([2, 0, 0, 1, 2])),\n    ak.contents.NumpyArray(np.array([0.0, 1.1, 2.2, 3.3])),\n)\nlayout\n```\n\n----------------------------------------\n\nTITLE: Categorical String Operations\nDESCRIPTION: Shows how to create and work with categorical string data for more efficient string operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-strings.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nuncategorized = ak.Array([\"three\", \"one\", \"two\", \"two\", \"three\", \"one\", \"one\", \"one\"])\nuncategorized\n\ncategorized = ak.str.to_categorical(uncategorized)\ncategorized\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Awkward Array in Python\nDESCRIPTION: This code creates a sample Awkward Array with variable-length nested lists, which will be used for demonstrating statistical functions.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-statistics.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([[0, 1.1, 2.2], [3.3, 4.4], [5.5], [6.6, 7.7, 8.8, 9.9]])\n```\n\n----------------------------------------\n\nTITLE: Viewing an IndexedArray as a High-level Array\nDESCRIPTION: Shows how an IndexedArray appears when converted to a high-level Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nak.Array(layout)\n```\n\n----------------------------------------\n\nTITLE: ArrayBuilder with Mixed Integers\nDESCRIPTION: Shows ArrayBuilder handling a mix of positive and negative integers to demonstrate full array type inference.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-arraybuilder.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprocess_data(\n    ak.ArrayBuilder(),\n    [1, 2, 3, 4, -1, -2, -3, -4],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Named Records with Customized Behavior in Awkward Array\nDESCRIPTION: This code snippet demonstrates how to create named records and customize their behavior using the ak.behavior registry, including custom __repr__, methods, and NumPy function overloading.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-records.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass XYZRecord(ak.Record):\n    def __repr__(self):\n        return f\"(X={self.x}:Y={self.y})\"\n\nclass XYZArray(ak.Array):\n    def diff(self):\n        return abs(self.x - self.y)\n\nak.behavior[\"XYZ\"] = XYZRecord\nak.behavior[\"*\", \"XYZ\"] = XYZArray\nak.behavior[\"__typestr__\", \"XYZ\"] = \"XYZ\"\nak.behavior[np.sqrt, \"XYZ\"] = lambda xyz: np.sqrt(xyz.x)\n\narray = ak.Array(\n    [\n        {\"x\": 1, \"y\": 1.1},\n        {\"x\": 2, \"y\": 2.2},\n        {\"x\": 3, \"y\": 3.3},\n        {\"x\": 4, \"y\": 4.4},\n        {\"x\": 5, \"y\": 5.5},\n    ],\n    with_name=\"XYZ\"\n)\narray\n```\n\n----------------------------------------\n\nTITLE: Differentiating Between Records and Tuples in Python with Awkward Array\nDESCRIPTION: This snippet demonstrates how to use the 'ak.is_tuple()' function to differentiate between arrays of records and arrays of tuples in Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-list-fields.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nak.is_tuple(tuples)\nak.is_tuple(records)\n```\n\n----------------------------------------\n\nTITLE: Creating and Checking CPU Array Backend\nDESCRIPTION: Creates an Awkward Array in CPU memory and verifies its backend location using ak.backend().\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-gpu.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narray_cpu = ak.Array(\n    [[0, 1.1, 2.2], [], [3.3, 4.4], [5.5], [6.6, 7.7, 8.8, 9.9]] * 10000\n)\nak.backend(array_cpu)\n```\n\n----------------------------------------\n\nTITLE: Generating Combinations without Replacement using Awkward Array\nDESCRIPTION: Demonstrates the use of ak.combinations to create combinations without replacement, which is useful for generating unique pairs from a single list.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-combinatorics-cartesian-combinations.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nak.combinations(numbers, 2)\n```\n\n----------------------------------------\n\nTITLE: Creating and Slicing a RecordArray\nDESCRIPTION: Demonstrates how slicing operations on RecordArrays are optimized by creating IndexedArrays instead of modifying the underlying field arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nrecordarray = ak.contents.RecordArray(\n    [\n        ak.from_iter([1.1, 2.2, 3.3, 4.4, 5.5], highlevel=False),\n        ak.from_iter([[1], [1, 2], [1, 2, 3], [3, 2], [3]], highlevel=False),\n    ],\n    None,\n)\nrecordarray\n```\n\n----------------------------------------\n\nTITLE: Creating Records from Dictionary of Arrays\nDESCRIPTION: Shows how to create an Awkward Array of records from a dictionary of arrays using the ak.zip function.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/index.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nak.zip(dict_of_arrays)\n```\n\n----------------------------------------\n\nTITLE: Delta R Calculation\nDESCRIPTION: Calculates delta R between electron-muon pairs and electron-electron pairs.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/thinking-in-arrays.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nelectron_in_pair, muon_in_pair = ak.unzip(ak.cartesian([events.electron, events.muon]))\n```\n\nLANGUAGE: python\nCODE:\n```\nelectron_in_pair.deltaR(muon_in_pair)\n```\n\nLANGUAGE: python\nCODE:\n```\nfirst_electron_in_pair, second_electron_in_pair = ak.unzip(ak.combinations(events.electron, 2))\n```\n\nLANGUAGE: python\nCODE:\n```\nfirst_electron_in_pair.deltaR(second_electron_in_pair)\n```\n\n----------------------------------------\n\nTITLE: Creating and Unzipping Record Arrays in Python\nDESCRIPTION: Creates an array of records with named fields and demonstrates how to unzip it into separate arrays using ak.unzip(). Shows both named records and unnamed tuples.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-zip-project.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n\nrecords = ak.Array([\n    {\"x\": 1, \"y\": 1.1, \"z\": \"one\"},\n    {\"x\": 2, \"y\": 2.2, \"z\": \"two\"},\n    {\"x\": 3, \"y\": 3.3, \"z\": \"three\"},\n    {\"x\": 4, \"y\": 4.4, \"z\": \"four\"},\n    {\"x\": 5, \"y\": 5.5, \"z\": \"five\"}\n])\n\nak.unzip(records)\n```\n\n----------------------------------------\n\nTITLE: Adding a Field to an Existing Awkward Array Record in Python\nDESCRIPTION: Shows how to add a new field to an existing Awkward Array record using array assignment syntax. This example adds a 'z' field calculated from the existing 'x' field.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/index.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\n\nexample = ak.Array([\n    [{\"x\": 1.1, \"y\": [1]}, {\"x\": 2.2, \"y\": [1, 2]}, {\"x\": 3.3, \"y\": [1, 2, 3]}],\n    [],\n    [{\"x\": 4.4, \"y\": [1, 2, 3, 4]}, {\"x\": 5.5, \"y\": [1, 2, 3, 4, 5]}]\n])\n\nexample[\"z\"] = example.x * 10\n```\n\n----------------------------------------\n\nTITLE: Selecting Particles in Particle Physics Data with Awkward Array\nDESCRIPTION: Shows how to select particles (muons) based on certain criteria using Awkward Array operations on particle physics data.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/jagged-ragged-awkward-arrays.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport uproot\n\nfile = uproot.open(\"https://github.com/jpivarski-talks/2023-12-18-hsf-india-tutorial-bhubaneswar/raw/main/data/SMHiggsToZZTo4L.root\")\ntree = file[\"Events\"]\n\nmuon_pt = tree[\"Muon_pt\"].array(entry_stop=10)\nparticle_cut = muon_pt > 20\nmuon_pt[particle_cut]\nevent_cut = ak.any(muon_pt > 20, axis=1)\nmuon_pt[event_cut]\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing Field Values\nDESCRIPTION: Demonstrates how to modify values of an existing field in an Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-add-fields.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\narray[\"x\"] = [-1, -2, 3]\narray.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Awkward Array\nDESCRIPTION: Creates a demonstration array with multiple levels of nesting and variable-length lists to illustrate filtering techniques.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-num.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([\n    [[0, 1.1, 2.2], []], [[3.3, 4.4]], [], [[5.5], [6.6, 7.7, 8.8, 9.9]]\n])\n```\n\n----------------------------------------\n\nTITLE: Examining Awkward Array Types\nDESCRIPTION: Shows how to view the type information of Awkward Arrays with fixed dimensions, displaying their dimensional structure.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-broadcasting.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nprint(ak.Array(x).type)\nprint(ak.Array(y).type)\n```\n\n----------------------------------------\n\nTITLE: Using Masks to Handle Shape Mismatches in Awkward Arrays with Python\nDESCRIPTION: Illustrates how to use masks to handle shape mismatches in mathematical operations on Awkward Arrays, preserving the array structure by introducing missing values instead of removing elements.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/index.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\n\nx = ak.Array([[1.1, 2.2, 3.3], [], [4.4, 5.5]])\nx.mask[x > 2]\nx + x.mask[x > 2]\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Function for Awkward Array in Python\nDESCRIPTION: This snippet defines a function 'reverse_sum' that reverses an Awkward Array and then sums its elements along the first axis. This function will be used to demonstrate differentiation.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-specialize-differentiate-jax.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef reverse_sum(array):\n    return ak.sum(array[::-1], axis=0)\n```\n\n----------------------------------------\n\nTITLE: Plotting Closest Z Mass Candidate with Awkward Arrays in Python\nDESCRIPTION: This code snippet demonstrates how to find the mass candidate closest to the Z boson mass using ak.argmin, and then plot it using the hist library. It uses ak.flatten to handle nested arrays and remove missing values.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/jagged-ragged-awkward-arrays.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwhich = ak.argmin(abs(mass - zmass), axis=1, keepdims=True)\n\nhist.Hist(hist.axis.Regular(120, 0, 120, label=\"mass [GeV]\")).fill(\n\n    ak.flatten(mass[which], axis=None)\n\n).plot()\n\nNone\n```\n\n----------------------------------------\n\nTITLE: Concatenating Arrays with Different Data Types\nDESCRIPTION: This snippet shows how ak.concatenate can handle arrays with different data types, resulting in a union-type output.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-concatenate.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\narray3 = ak.Array([{\"z\": None}, {\"z\": 0}, {\"z\": 123}])\n\nak.concatenate([array1, array2, array3])\n```\n\n----------------------------------------\n\nTITLE: Converting ListArray to Awkward Array\nDESCRIPTION: This snippet shows how to convert a ListArray layout to an Awkward Array for easier manipulation and display.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nak.Array(layout)\n```\n\n----------------------------------------\n\nTITLE: Tuple Type Inference in Awkward Array\nDESCRIPTION: Shows that tuples with different lengths are treated as distinct types in Awkward Array, unlike records with different fields which are merged.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nak.type(\n    ak.Array(\n        [\n            (1.1, [1]),\n            (2.2, \"two\"),\n            (3.3, [1, 2, 3], \"three\"),\n        ]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Combinations Example\nDESCRIPTION: Shows how to create combinations of values using ak.combinations function.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/thinking-in-arrays.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nvalues = ak.Array([[1.1, 2.2, 3.3, 4.4], [], [5.5, 6.6]])\n```\n\nLANGUAGE: python\nCODE:\n```\nak.combinations(values, 2)\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Arrays with Different Dimensions\nDESCRIPTION: Demonstrates how Awkward array broadcasting works when adding a 1D array to a 2D array, with the single values from the 1D array being added to each element of the corresponding lists in the 2D array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-broadcasting.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narray1 = ak.Array([[1, 2, 3], [], [4, 5]])\narray2 = ak.Array([10, 20, 30])\n\narray1 + array2\n```\n\n----------------------------------------\n\nTITLE: Saving Awkward Array to HDF5\nDESCRIPTION: Creates an HDF5 file and group, then stores the Awkward Array buffers and metadata within it.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-buffers.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfile = h5py.File(\"/tmp/example.hdf5\", \"w\")\ngroup = file.create_group(\"awkward\")\nform, length, container = ak.to_buffers(ak.to_packed(ak_array), container=group)\ngroup.attrs[\"form\"] = form.to_json()\ngroup.attrs[\"length\"] = length\n```\n\n----------------------------------------\n\nTITLE: Basic Array Summation\nDESCRIPTION: Demonstrates sum reduction on a nested array structure with both axis and no-axis specifications.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-reducing.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([[1, 2, 3], [4, 5], [], [6]])\nak.sum(array)\nak.sum(array, axis=-1)\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Nested Array Structure\nDESCRIPTION: Creates a complex Awkward Array with nested records containing x values and y arrays, replicated multiple times\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-numba-intro.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([\n    [{\"x\": 1.1, \"y\": [1]}, {\"x\": 2.2, \"y\": [1, 2]}, {\"x\": 3.3, \"y\": [1, 2, 3]}],\n    [],\n    [{\"x\": 4.4, \"y\": [1, 2, 3, 4]}, {\"x\": 5.5, \"y\": [1, 2, 3, 4, 5]}],\n    [{\"x\": 6.6, \"y\": [1, 2, 3, 4, 5, 6]}],\n])[np.tile([0, 1, 2, 3], 250000)]\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Heterogeneous Awkward Array in Python\nDESCRIPTION: Demonstrates creating a complex Awkward Array with mixed types including lists, records, and None values.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nak.Array([[1, 2, 3], {\"x\": 1, \"y\": 2}, None])\n```\n\n----------------------------------------\n\nTITLE: Converting Awkward Array with Missing Data to NumPy\nDESCRIPTION: This snippet shows converting an Awkward Array with missing data to a NumPy array. It demonstrates that modifying the resulting NumPy array doesn't affect the original Awkward Array, indicating a copy was made.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-numpy.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nak_array1 = ak.Array([[1, None, 3], [None, None, 6]])\nak_array1\n```\n\nLANGUAGE: python\nCODE:\n```\nnp_array = ak.to_numpy(ak_array1)\nnp_array\n```\n\nLANGUAGE: python\nCODE:\n```\n# Change the NumPy array in place.\nnp_array *= 100\nnp_array\n```\n\nLANGUAGE: python\nCODE:\n```\n# The Awkward Array that it came from is not changed in this case.\nak_array1\n```\n\n----------------------------------------\n\nTITLE: BitMaskedArray with MSB Order in Python\nDESCRIPTION: Shows how changing only the lsb_order parameter to False (most-significant bit first) affects the interpretation of the same bit mask data.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nak.Array(\n    ak.contents.BitMaskedArray(\n        layout.mask,\n        layout.content,\n        layout.valid_when,\n        len(layout),\n        lsb_order=False,\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Variable-Length Object Dtype NumPy Array to Awkward Array in Python\nDESCRIPTION: Uses ak.from_iter to convert a NumPy array with dtype=\"O\" containing variable-length lists to an Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nak.from_iter(np_array_dtype_O)\n```\n\n----------------------------------------\n\nTITLE: Using ak.num with axis=2\nDESCRIPTION: Demonstrates using ak.num with axis=2 to get the number of items in each list at the second level of nesting.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-num.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nak.num(array, axis=2)\n```\n\n----------------------------------------\n\nTITLE: Reducer Operations with Named Axes in Awkward Array\nDESCRIPTION: Shows how reducer operations (like sum) handle named axes, demonstrating behavior with different axis and keepdims parameters. Includes examples of axis removal and preservation.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-array-properties-named-axis.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([[1, 2], [3], [], [4, 5, 6]])\nnamed_array = ak.with_named_axis(array, (\"x\", \"y\"))\n\nassert ak.sum(named_array, axis=\"x\", keepdims=False).named_axis == {\"y\": 0}\nassert ak.sum(named_array, axis=\"x\", keepdims=True).named_axis == {\"x\": 0, \"y\": 1}\n```\n\n----------------------------------------\n\nTITLE: Creating a Ragged Array Example\nDESCRIPTION: Creates a nested ragged array with varying depths and lengths to demonstrate filtering capabilities.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-ragged.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([\n    [\n        [0.0, 1.1, 2.2],\n        [3.3, 4.4, 5.5, 6.6],\n        [7.7],\n    ],\n    [],\n    [\n        [8.8, 9.9, 10.10, 11.11, 12.12],\n    ],\n])\n```\n\n----------------------------------------\n\nTITLE: Padding Lists in Awkward Arrays using Concatenation\nDESCRIPTION: This snippet shows how to use ak.concatenate to pad lists with zeros at the start and end.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-concatenate.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npad = np.zeros(len(array1))[:, np.newaxis]\npad\n\nak.concatenate([pad, array1, pad], axis=1)\n```\n\n----------------------------------------\n\nTITLE: Record Type Inference with Different Fields in Awkward Array\nDESCRIPTION: Demonstrates how records with different sets of fields are treated as a single record type with missing values rather than a union of different record types.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nak.type(\n    ak.Array(\n        [\n            {\"x\": 1.1, \"y\": [1]},\n            {\"x\": 2.2, \"z\": \"two\"},\n            {\"x\": 3.3, \"y\": [1, 2, 3], \"z\": \"three\"},\n        ]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Verifying GPU Results against CPU Computation\nDESCRIPTION: This code compares the results of the GPU computation with the CPU implementation to ensure correctness. It uses ak.isclose to check for numerical equivalence within a small tolerance.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-numba-cuda.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncheck_result = ak.sum(cpu_array, axis=-1)\n```\n\nLANGUAGE: python\nCODE:\n```\nak.all(ak.isclose(check_result, ak.Array(result, backend=\"cpu\"), atol=1e-05))\n```\n\n----------------------------------------\n\nTITLE: Building an Awkward Index for Filtering\nDESCRIPTION: Demonstrates how to create and use an awkward index to selectively extract elements from the array while maintaining structure.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-ragged.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nindex = ak.Array([\n    [[], [0], [0]],\n    [],\n    [[2, 3, 4]],\n])\n\narray[index]\n```\n\n----------------------------------------\n\nTITLE: Converting Awkward Arrays to RDataFrame\nDESCRIPTION: Creates an RDataFrame from Awkward Arrays using a dictionary mapping column names to arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-rdataframe.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf = ak.to_rdataframe({\"x\": array_x, \"y\": array_y, \"z\": array_z})\n```\n\n----------------------------------------\n\nTITLE: Efficient Array Building with NumPy and ak.zip\nDESCRIPTION: Shows a faster approach using NumPy arrays within JIT-compiled functions, then combining them with ak.zip outside the compiled context. This method is more efficient as it avoids ArrayBuilder's runtime type identification.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-records.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@nb.jit\ndef faster_example():\n    x = np.empty(3, np.int64)\n    y = np.empty(3, np.float64)\n    x[0] = 1\n    y[0] = 1.1\n    x[1] = 2\n    y[1] = 2.2\n    x[2] = 3\n    y[2] = 3.3\n    return x, y\n\n\narray = ak.zip(dict(zip([\"x\", \"y\"], faster_example())))\narray\n```\n\n----------------------------------------\n\nTITLE: Converting NumPy String Arrays\nDESCRIPTION: Example of creating NumPy string arrays and converting them to Awkward Arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-strings.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nnumpy_array = np.array([\"one\", \"two\", \"three\", \"four\"])\nnumpy_array\n\nawkward_array = ak.Array(numpy_array)\nawkward_array\n```\n\n----------------------------------------\n\nTITLE: Converting Variable-Length NumPy Arrays to Awkward Array in Python\nDESCRIPTION: Demonstrates converting a list of variable-length NumPy arrays to an Awkward Array, handling empty arrays and different lengths.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nak.Array(py_objects)\n```\n\n----------------------------------------\n\nTITLE: Merging Integers and Floats in Awkward Array\nDESCRIPTION: Demonstrates how Awkward Array automatically merges integers and floating point numbers into a single floating-point type without creating a union type.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nak.Array([1, 2, 3, 4, 5.5, 6.6, 7.7, 8, 9])\n```\n\n----------------------------------------\n\nTITLE: Calculating Distances Between Bunnies and Foxes in Python\nDESCRIPTION: Computes the Euclidean distance between each bunny-fox pair using NumPy operations on Awkward Arrays. Also determines which bunnies are 'eaten' based on a distance threshold.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-combinatorics-best-match.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndistances = np.sqrt((pair_bunnies.x - pair_foxes.x)**2 + (pair_bunnies.y - pair_foxes.y)**2)\neaten = (distances < 1)\n```\n\n----------------------------------------\n\nTITLE: Plotting Jagged Arrays with Awkward Array and hist\nDESCRIPTION: Shows how to plot jagged arrays using the hist library, including flattening the array and selecting specific elements for plotting.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/jagged-ragged-awkward-arrays.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport hist\n\nhist.Hist(hist.axis.Regular(120, 0, 120, label=\"mass [GeV]\")).fill(ak.ravel(mass)).plot()\n\nak.max(mass, axis=1)\nak.flatten(ak.max(mass, axis=1), axis=0)\nak.max(mass[ak.num(mass) > 0], axis=1)\n```\n\n----------------------------------------\n\nTITLE: Normalizing Each List in Awkward Array to Mean 0 and Standard Deviation 1\nDESCRIPTION: This example shows how to normalize each list within an Awkward Array to have a mean of 0 and a standard deviation of 1 using ak.mean and ak.std functions with axis=-1.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-statistics.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n(array - ak.mean(array, axis=-1)) / ak.std(array, axis=-1)\n```\n\n----------------------------------------\n\nTITLE: Using ak.unzip on Awkward Array of Records in Python\nDESCRIPTION: Demonstrates the use of ak.unzip to separate fields of an Awkward Array of records into individual arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nx, y = ak.unzip(ak_array_rec)\ny\n```\n\n----------------------------------------\n\nTITLE: List Element Selection\nDESCRIPTION: Demonstrates selecting specific elements from nested lists using array indexing.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-flatten.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([[0, 1, 2], [3, 4], [5], [6, 7, 8, 9]])\narray[:, 0]  # Select first element from each sublist\n```\n\n----------------------------------------\n\nTITLE: Nested Field Assignment\nDESCRIPTION: Shows how to assign values to nested fields in a complex Awkward Array structure.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-add-fields.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nnested = ak.zip({\"a\": ak.zip({\"x\": [1, 2, 3]})})\nnested[\"a\", \"y\"] = 2 * nested.a.x\n\nnested.show()\n```\n\n----------------------------------------\n\nTITLE: Boolean Array Slicing with Missing Data in Awkward Array\nDESCRIPTION: This snippet shows how Awkward Array handles boolean array slicing when the boolean mask includes missing (None) values.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-simple-slicing.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbool_mask = ak.Array([True, None, False, True])\narray[bool_mask]\n```\n\n----------------------------------------\n\nTITLE: Creating and Operating on Awkward Arrays\nDESCRIPTION: Demonstrates creation of Awkward Arrays and basic operations including indexing, slicing, and reductions\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/thinking-in-arrays.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nragged = ak.Array([\n    [\n      [[1.84, 0.324]],\n      [[-1.609, -0.713, 0.005], [0.953, -0.993, 0.011, 0.718]],\n      [[0.459, -1.517, 1.545], [0.33, 0.292]],\n      [[-0.376, -1.46, -0.206], [0.65, 1.278]],\n      [[], [], [1.617]],\n      []\n    ]\n])\n\n# Multidimensional indexing\nragged[3, 1, -1, 2]\n\n# Basic slicing\nragged[3, 1:, -1, 1:3]\n```\n\n----------------------------------------\n\nTITLE: Numba Boolean Mask Generation\nDESCRIPTION: Creates a boolean mask for filtering arrays based on sum calculations using Numba\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-numba-intro.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@nb.jit\ndef sum_of_y_is_more_than_10(array):\n    out = np.zeros(len(array), dtype=np.bool_)\n\n    for i, list_of_records in enumerate(array):\n        total = 0\n        for record in list_of_records:\n            for y in record.y:\n                total += y\n        if total > 10:\n            out[i] = True\n\n    return out\n```\n\n----------------------------------------\n\nTITLE: Using ak.unzip on Awkward Array of Tuples in Python\nDESCRIPTION: Shows how to use ak.unzip to separate fields of an Awkward Array of tuples into individual arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nslot0, slot1 = ak.unzip(ak_array_tup)\nslot1\n```\n\n----------------------------------------\n\nTITLE: Demonstrating argmax with mask_identity False\nDESCRIPTION: Shows how argmax behaves with mask_identity=False when operating on arrays with empty sublists.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-masked.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nak.argmax(array, keepdims=True, axis=-1, mask_identity=False)\n```\n\n----------------------------------------\n\nTITLE: Record and Tuple Array Types\nDESCRIPTION: Shows how to create and examine types of arrays containing records (dictionary-like) and tuples (ordered sequences).\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-type.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npoet_records = ak.Array([\n    {\"first\": \"William\", \"last\": \"Shakespeare\"},\n    {\"first\": \"Sylvia\", \"last\": \"Plath\"},\n    {\"first\": \"Homer\", \"last\": \"Simpson\"}\n])\n\npoet_records.type.show()\n```\n\n----------------------------------------\n\nTITLE: Using ak.from_iter for Object Dtype NumPy Array in Python\nDESCRIPTION: Shows how to use ak.from_iter to convert a NumPy array with dtype=\"O\" to an Awkward Array, explicitly indicating that iteration is intentional.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nak.from_iter(np_array_dtype_O)\n```\n\n----------------------------------------\n\nTITLE: Awkward Array Broadcasting with Fixed Dimensions\nDESCRIPTION: Shows how Awkward Arrays with fixed-length dimensions behave identically to NumPy arrays when broadcasting, adding dimensions from the left for compatibility.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-broadcasting.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nak.Array(x) + ak.Array(y)\n```\n\n----------------------------------------\n\nTITLE: Masked Array Conversion\nDESCRIPTION: Demonstrates handling of NumPy masked arrays and their conversion to Awkward Arrays with option types.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-numpy.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nnp_array = np.ma.MaskedArray([[1, 2, 3], [4, 5, 6]], mask=[[False, True, False], [True, True, False]])\nak_array = ak.from_numpy(np_array)\n```\n\n----------------------------------------\n\nTITLE: Converting to JSON Format\nDESCRIPTION: Shows how to convert Awkward Array data to JSON format with custom indentation and readability spacing for better visualization.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-single-item.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(ak.to_json(single_trip, num_indent_spaces=4, num_readability_spaces=1))\n```\n\n----------------------------------------\n\nTITLE: Converting NumPy Array to Awkward Array in Python\nDESCRIPTION: Demonstrates how to convert a NumPy array to an Awkward Array using ak.Array constructor. This creates an array of fixed-size lists.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nak.Array(np_array)\n```\n\n----------------------------------------\n\nTITLE: Broadcasting with Missing Data\nDESCRIPTION: Shows how None values (missing data) are handled during broadcasting, treating them similarly to empty lists.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-broadcasting.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\narray1 = ak.Array([[1, 2, 3], None, [4, 5]])\narray2 = ak.Array([10, 20, 30])\n\narray1 + array2\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Arrays from NumPy Arrays (Case 3 and 4)\nDESCRIPTION: These snippets demonstrate creating Awkward Arrays from non-C-contiguous NumPy arrays. Case 3 creates a view, while Case 4 must create a copy due to the regulararray option.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-numpy.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Case 3: not C-contiguous and not RegularArray (should view).\nak_array3 = ak.from_numpy(np_array[:, :-1])\nak_array3\n```\n\nLANGUAGE: python\nCODE:\n```\n# Case 4: not C-contiguous and RegularArray (has to copy).\nak_array4 = ak.from_numpy(np_array[:, :-1], regulararray=True)\nak_array4\n```\n\n----------------------------------------\n\nTITLE: Creating Array with Empty Sublists\nDESCRIPTION: Creates an Awkward Array containing a mix of empty sublists and populated lists to demonstrate filtering behavior.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-masked.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([\n    [],\n    [10, 3, 2, 9],\n    [4, 5, 5, 12, 6],\n    [],\n    [8, 9, -1],\n])\n```\n\n----------------------------------------\n\nTITLE: Creating Unicode String Arrays in Awkward Array\nDESCRIPTION: This snippet shows how to create an array of Unicode-encoded strings (UTF-8) using ListOffsetArray and NumpyArray with special parameters.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nak.Array(\n    ak.contents.ListOffsetArray(\n        ak.index.Index64(np.array([0, 3, 12, 15, 19])),\n        ak.contents.NumpyArray(\n            np.array(\n                [\n                    104,\n                    101,\n                    121,\n                    226,\n                    128,\n                    148,\n                    226,\n                    128,\n                    148,\n                    226,\n                    128,\n                    148,\n                    121,\n                    111,\n                    117,\n                    103,\n                    117,\n                    121,\n                    115,\n                ],\n                np.uint8,\n            ),\n            parameters={\"__array__\": \"char\"},\n        ),\n        parameters={\"__array__\": \"string\"},\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Forth Loop with do..loop\nDESCRIPTION: Demonstrates a basic do..loop construct that pushes a constant value to the stack multiple times. Shows how to initialize and run a ForthMachine32 instance.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\n... 10 0 do\n...   123\n... loop\n... \"\"\")\n>>> vm.run()\n>>> vm.stack\n[123, 123, 123, 123, 123, 123, 123, 123, 123, 123]\n```\n\n----------------------------------------\n\nTITLE: Imperative Code Simulation with Nested Loops\nDESCRIPTION: Demonstrates how imperative code with nested loops would handle operations across arrays with different dimensions, showing why right-broadcasting is used for variable-length arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-broadcasting.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfor x_i, y_i in zip(x, y):\n    for x_ij, y_ij in zip(x_i, y_i):\n        print(\"[\", end=\" \")\n        for y_ijk in y_ij:\n            print(x_ij + y_ijk, end=\" \")\n        print(\"]\")\n    print()\n```\n\n----------------------------------------\n\nTITLE: Masking Awkward Arrays in Python\nDESCRIPTION: This snippet introduces masking as a solution to maintain array alignment. It uses ak.mask to replace values not meeting the condition with None, preserving the original array structure.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-cut-mask.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmasked_x = array_x.mask[array_x > 3]\nmasked_y = array_y.mask[array_y > 3]\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Array with Union Type\nDESCRIPTION: This snippet shows how creating an Awkward Array with inconsistent nesting levels results in a union type.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-lists.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nunion_array = ak.Array([[[[], [1, 2, 3]]], [[4, 5]], []])\nunion_array\nunion_array.type\n```\n\n----------------------------------------\n\nTITLE: Broadcasting with Heterogeneous Data\nDESCRIPTION: Demonstrates broadcasting with arrays containing mixed data types (lists and scalar values), showing how numerical operations can still work with compatible shapes.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-broadcasting.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\narray1 = ak.Array([[1, 2, 3], 4, 5])\narray2 = ak.Array([10, 20, 30])\n\narray1 + array2\n```\n\n----------------------------------------\n\nTITLE: Converting JSON File to Awkward Array\nDESCRIPTION: Demonstrates loading JSON data from a file into an Awkward Array using pathlib.Path.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-json.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nak.from_json(pathlib.Path(\"/tmp/awkward-example-1.json\"))\n```\n\n----------------------------------------\n\nTITLE: Inspecting Type of Named RecordArray\nDESCRIPTION: Demonstrates how record type names appear in the type string representation.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nak.type(layout)\n```\n\n----------------------------------------\n\nTITLE: Creating Deeply Nested Awkward Array from Python Lists\nDESCRIPTION: This snippet shows how to create an Awkward Array with multiple levels of nesting from a deeply nested Python list.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-lists.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npython_lists = [[[[], [1, 2, 3]]], [[[4, 5]]], []]\nawkward_array = ak.Array(python_lists)\nawkward_array\n```\n\n----------------------------------------\n\nTITLE: Converting RecordArray to Awkward Array\nDESCRIPTION: This snippet demonstrates how to convert a RecordArray layout to an Awkward Array for easier manipulation and display.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nak.Array(layout)\n```\n\n----------------------------------------\n\nTITLE: Naming Record Types with Parameters\nDESCRIPTION: Demonstrates how to give a name to a RecordArray using the '__record__' parameter, which enables behavioral overloads and better type string readability.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nlayout = ak.contents.RecordArray(\n    [\n        ak.from_iter([1.1, 2.2, 3.3, 4.4, 5.5], highlevel=False),\n        ak.from_iter([[1], [1, 2], [1, 2, 3], [3, 2], [3]], highlevel=False),\n    ],\n    [\n        \"x\",\n        \"y\",\n    ],\n    parameters={\"__record__\": \"Special\"},\n)\nlayout\n```\n\n----------------------------------------\n\nTITLE: Demonstrating argmax with mask_identity True\nDESCRIPTION: Shows how argmax behaves with mask_identity=True, replacing None values with the identity value -1.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-masked.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nak.argmax(array, keepdims=True, axis=-1, mask_identity=True)\n```\n\n----------------------------------------\n\nTITLE: Numba JIT-compiled Sum Function\nDESCRIPTION: Implements a faster sum calculation using Numba's JIT compilation with explicit loops\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-numba-intro.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@nb.jit\ndef sum_of_y(array):\n    out = np.zeros(len(array), dtype=np.int64)\n\n    for i, list_of_records in enumerate(array):\n        for record in list_of_records:\n            for y in record.y:\n                out[i] += y\n\n    return out\n```\n\n----------------------------------------\n\nTITLE: String Type Representation\nDESCRIPTION: Shows how Awkward Array implements and represents string types as views over 1D arrays of uint8 characters.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-type.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([\"Mr.\", \"Blue,\", \"you\", \"did\", \"it\", \"right\"])\narray.type\n```\n\n----------------------------------------\n\nTITLE: Forth Variable Declaration and Manipulation\nDESCRIPTION: Shows how to declare variables and use basic variable operations (!, +!, @) to store and retrieve values.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\n... variable x\n... 10 x !\n... 5 x +!\n... x @\n... \"\"\")\n>>> vm.run()\n>>> vm.stack\n[15]\n```\n\n----------------------------------------\n\nTITLE: Creating BitMaskedArray with LSB Order in Python\nDESCRIPTION: Creates a BitMaskedArray with bit-packed boolean mask using least-significant bit ordering. This example demonstrates how to represent data with missing values using bit-packed masks, similar to Apache Arrow's approach.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nlayout = ak.contents.BitMaskedArray(\n    ak.index.IndexU8(\n        np.packbits(np.array([False, False, True, True, False, True, False], np.uint8))\n    ),\n    ak.contents.NumpyArray(np.array([0.0, 1.1, 2.2, 3.3, 4.4, 5.5, 6.6])),\n    valid_when=False,\n    length=7,\n    lsb_order=True,\n)\nlayout\n```\n\n----------------------------------------\n\nTITLE: Comparing GPU and CPU Performance\nDESCRIPTION: These snippets demonstrate how to measure and compare the performance of GPU and CPU implementations. They use the %%timeit magic command to benchmark the execution times.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-numba-cuda.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n%%timeit\n\npath_length[numblocks, blocksize](result, array)\n```\n\nLANGUAGE: python\nCODE:\n```\ncpu_array = ak.to_backend(array, \"cpu\")\n```\n\nLANGUAGE: python\nCODE:\n```\n%%timeit\n\nak.sum(cpu_array, axis=-1)\n```\n\n----------------------------------------\n\nTITLE: Modifying NumPy Array and Checking Awkward Array Changes\nDESCRIPTION: This set of snippets modifies the original NumPy array and checks how it affects the Awkward Arrays created from it. It demonstrates which Awkward Arrays are views (and change) and which are copies (and don't change).\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-numpy.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Change the NumPy array in place.\nnp_array *= 100\nnp_array[:, :-1]\n```\n\nLANGUAGE: python\nCODE:\n```\n# Case 1 changes as well because it is a view.\nak_array1\n```\n\nLANGUAGE: python\nCODE:\n```\n# Case 2 changes as well because it is a view.\nak_array2\n```\n\nLANGUAGE: python\nCODE:\n```\n# Case 3 changes as well because it is a view.\nak_array3\n```\n\nLANGUAGE: python\nCODE:\n```\n# Case 4 does not change because it is a copy.\nak_array4\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiplication with Scalar Values\nDESCRIPTION: Demonstrates implementing commutative multiplication between points and scalar values using numbers.Real type.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/ak.behavior.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport numbers\ndef point_lmult(point, scalar):\n    return ak.Array({\"x\": point.x * scalar, \"y\": point.y * scalar})\n\ndef point_rmult(scalar, point):\n    return point_lmult(point, scalar)\n\nak.behavior[np.multiply, \"point\", numbers.Real] = point_lmult\nak.behavior[np.multiply, numbers.Real, \"point\"] = point_rmult\n```\n\n----------------------------------------\n\nTITLE: Zipping Awkward Arrays with Depth Limit in Python\nDESCRIPTION: Demonstrates how to use the depth_limit argument in ak.zip to control the nesting level of records when zipping Awkward Arrays together.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/index.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nak.zip(dict_of_arrays, depth_limit=2)\n```\n\n----------------------------------------\n\nTITLE: Emulating NumPy Stack Functions with Awkward Arrays\nDESCRIPTION: This section shows how to emulate NumPy's stack functions using ak.concatenate and np.newaxis with Awkward Arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-concatenate.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\na = ak.Array([[1], [1, 2], [1, 2, 3]])\nb = ak.Array([[4], [4, 5], [4, 5, 6]])\n\nak.concatenate([a[np.newaxis], b[np.newaxis]], axis=0)\n\nak.concatenate([a[:, np.newaxis], b[:, np.newaxis]], axis=1)\n```\n\n----------------------------------------\n\nTITLE: Examining Internal Layout of Awkward Array of Strings in Python\nDESCRIPTION: Shows the internal representation of an Awkward Array of strings, revealing the ListOffsetArray structure with special parameters for string behavior.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nak.Array([\"one\", \"two\", \"three\", \"four\"]).layout\n```\n\n----------------------------------------\n\nTITLE: Converting Python List to Awkward Array using ak.from_iter() in Python\nDESCRIPTION: This snippet demonstrates how to convert a nested Python list into an Awkward Array using the ak.from_iter() function.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npy_objects = [[1.1, 2.2, 3.3], [], [4.4, 5.5]]\npy_objects\n```\n\nLANGUAGE: python\nCODE:\n```\nak_array = ak.from_iter(py_objects)\nak_array\n```\n\n----------------------------------------\n\nTITLE: Creating IndexedOptionArray for Missing Data\nDESCRIPTION: Demonstrates how to use IndexedOptionArray to represent missing data using negative indices, which is more compact for record-type data with many missing values.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nlayout = ak.contents.IndexedOptionArray(\n    ak.index.Index64(np.array([2, -1, 0, -1, -1, 1, 2])),\n    ak.contents.NumpyArray(np.array([0.0, 1.1, 2.2, 3.3])),\n)\nlayout\n```\n\n----------------------------------------\n\nTITLE: Numba Integration with Missing Values\nDESCRIPTION: Examples of JIT-compiled functions using ArrayBuilder and mask arrays to handle missing values\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-missing.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@nb.jit\ndef example(builder):\n    builder.append(1)\n    builder.append(2)\n    builder.null()\n    builder.append(None)\n    builder.append(3)\n    return builder\n\n@nb.jit\ndef faster_example():\n    data = np.empty(5, np.int64)\n    mask = np.empty(5, np.bool_)\n    data[0] = 1\n    mask[0] = True\n    data[1] = 2\n    mask[1] = True\n    mask[2] = False\n    mask[3] = False\n    data[4] = 5\n    mask[4] = True\n    return data, mask\n```\n\n----------------------------------------\n\nTITLE: Creating a RecordArray with Named Fields in Awkward Array\nDESCRIPTION: This snippet shows how to create a RecordArray structure with named fields, representing a 'struct of arrays' data layout.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nlayout = ak.contents.RecordArray(\n    [\n        ak.from_iter([1.1, 2.2, 3.3, 4.4, 5.5], highlevel=False),\n        ak.from_iter([[1], [1, 2], [1, 2, 3], [3, 2], [3]], highlevel=False),\n    ],\n    [\n        \"x\",\n        \"y\",\n    ],\n)\nlayout\n```\n\n----------------------------------------\n\nTITLE: Converting Heterogeneous Awkward Array to Python List in Python\nDESCRIPTION: Shows how to convert a heterogeneous Awkward Array (union type) back to a Python list.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nak.Array([1.1, 2.2, [], [1], [1, 2], 3.3]).to_list()\n```\n\n----------------------------------------\n\nTITLE: Creating RecordArray with Multiple Content Arrays\nDESCRIPTION: Creates a RecordArray with fields of different lengths, demonstrating how RecordArray length is determined by the shortest field array when not explicitly specified.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ncontent0 = ak.contents.NumpyArray(np.array([1, 2, 3, 4, 5, 6, 7, 8]))\ncontent1 = ak.contents.NumpyArray(np.array([1.1, 2.2, 3.3, 4.4, 5.5]))\ncontent2 = ak.from_iter(\n    [[1], [1, 2], [1, 2, 3], [3, 2, 1], [3, 2], [3]], highlevel=False\n)\nprint(f\"{len(content0) = }, {len(content1) = }, {len(content2) = }\")\n\nlayout = ak.contents.RecordArray([content0, content1, content2], [\"x\", \"y\", \"z\"])\nprint(f\"{len(layout) = }\")\n```\n\n----------------------------------------\n\nTITLE: Combined Division and Modulo in ForthMachine32\nDESCRIPTION: Shows the /mod operation which performs division and modulo in a single instruction, pushing both results onto the stack.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"22 7 /mod\")\n>>> vm.run()\n>>> vm.stack\n[1, 3]\n```\n\n----------------------------------------\n\nTITLE: Performing Operations on Masked Awkward Arrays in Python\nDESCRIPTION: This code shows how masked arrays can be used in mathematical operations without alignment issues. It calculates the sum of squares of the masked x and y arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-cut-mask.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresult = masked_x**2 + masked_y**2\n```\n\n----------------------------------------\n\nTITLE: Selecting Records with Maximum Scores in Awkward Array using Python\nDESCRIPTION: Demonstrates how to select records with the highest scores from each list in the Awkward Array using the previously calculated best_index.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-argminmax.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresult = data[best_index]\nresult\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Fields in a Scalar Record\nDESCRIPTION: Shows how to access nested elements in a scalar record using multi-level indexing.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nrecord[\"y\", -1]\n```\n\n----------------------------------------\n\nTITLE: Interleaving Lists with axis > 0 in Awkward Arrays\nDESCRIPTION: This example demonstrates how to use ak.concatenate with axis=1 to interleave lists within Awkward Arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-concatenate.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\narray1 = ak.Array([[1.1, 2.2, 3.3], [], [4.4, 5.5]])\narray2 = ak.Array([[10, 20], [30], [40, 50, 60, 70]])\n\nlen(array1), len(array2)\n\nak.concatenate([array1, array2], axis=1)\n```\n\n----------------------------------------\n\nTITLE: Transforming Optional Records in Awkward Arrays using Python\nDESCRIPTION: This code snippet demonstrates how to decompose an optional record of optional fields and rebuild it with inner options lifted outside the record. It uses ak.fields, ak.unzip, and ak.zip functions from the Awkward Array library, with the special optiontype_outside_record argument.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-strings-extract-substrings.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfields = ak.fields(structured)\ncontents = ak.unzip(structured)\n\nresult = ak.zip(dict(zip(fields, contents)), optiontype_outside_record=True)\nresult\n```\n\n----------------------------------------\n\nTITLE: Accessing Fields in Awkward Array of Records in Python\nDESCRIPTION: Demonstrates how to access fields in an Awkward Array of records using string indexing.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nak_array_rec[\"y\"]\nak_array_rec[\"y\", 1]\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Awkward Array\nDESCRIPTION: Creates a nested Awkward Array containing dictionaries with numeric values and variable-length lists.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-buffers.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nak_array = ak.Array([\n    [{\"x\": 1.1, \"y\": [1]}, {\"x\": 2.2, \"y\": [1, 2]}, {\"x\": 3.3, \"y\": [1, 2, 3]}],\n    [],\n    [{\"x\": 4.4, \"y\": [1, 2, 3, 4]}, {\"x\": 5.5, \"y\": [1, 2, 3, 4, 5]}],\n])\n```\n\n----------------------------------------\n\nTITLE: Logical Operations with Broadcasting\nDESCRIPTION: Demonstrates how logical operations work with broadcasting, applying np.logical_and between a 2D array of booleans and a 1D array of booleans.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-broadcasting.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\narray1 = ak.Array([[True, False, True], [], [False, True]])\narray2 = ak.Array([True, True, False])\n\nnp.logical_and(array1, array2)\n```\n\n----------------------------------------\n\nTITLE: Creating a RecordArray without Field Names in Awkward Array\nDESCRIPTION: This snippet demonstrates creating a RecordArray without field names, which is interpreted as an array of tuples.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nlayout = ak.contents.RecordArray(\n    [\n        ak.from_iter([1.1, 2.2, 3.3, 4.4, 5.5], highlevel=False),\n        ak.from_iter([[1], [1, 2], [1, 2, 3], [3, 2], [3]], highlevel=False),\n    ],\n    None,\n)\nlayout\n```\n\n----------------------------------------\n\nTITLE: Basic Array Building with Awkward\nDESCRIPTION: Demonstrates importing Awkward and creating a basic ArrayBuilder with different data types including integers, floats, complex numbers and strings.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-arraybuilder.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\n\nbuilder = ak.ArrayBuilder()\nbuilder.append(1)\nbuilder.append(2.2)\nbuilder.append(3 + 1j)\nbuilder.append(None)\nbuilder.append(\"five\")\n```\n\n----------------------------------------\n\nTITLE: Universal Functions with Named Axes\nDESCRIPTION: Shows how unary and binary operations handle named axes propagation in Awkward Array\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-array-properties-named-axis.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([[1, 2], [3], [], [4, 5, 6]])\nnamed_array = ak.with_named_axis(array, named_axis=(\"x\", \"y\"))\n\n# unary operations with named axes\nassert (-named_array).named_axis == {\"x\": 0, \"y\": 1}\nassert (+named_array).named_axis == {\"x\": 0, \"y\": 1}\nassert (~named_array).named_axis == {\"x\": 0, \"y\": 1}\nassert abs(named_array).named_axis == {\"x\": 0, \"y\": 1}\n```\n\n----------------------------------------\n\nTITLE: Handling Tuples of Different Lengths in Awkward Array in Python\nDESCRIPTION: Shows how Awkward Array handles tuples of different lengths, resulting in a heterogeneous (union type) array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nak.Array([(1, [1, 2]), (2,)])\n```\n\n----------------------------------------\n\nTITLE: Reading Packed Multi-Bit Integers in AwkwardForth\nDESCRIPTION: Shows how to read a sequence of arbitrary bit-width integers (3-bit in this example) that don't align with byte boundaries, demonstrating bit-packing capabilities.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\n... input x\n... output y int32\n... \n... .\\\" begin: \\\" x pos . cr   \\\\ show the starting input position\n... \n... 8 x #3bit-> y\n... \n... .\\\" end:   \\\" x pos . cr   \\\\ show the position after reading 8 3-bit integers\n... .\\\" total: \\\" x len . cr   \\\\ show the total length of the input\n... \"\"\")\n>>> vm.run({\"x\": np.array([0b_000_001_010_011_100_101_110_111], np.uint32)})\nbegin: 0 \nend:   3 \ntotal: 4 \n>>> np.asarray(vm[\"y\"])\narray([7, 6, 5, 4, 3, 2, 1, 0], dtype=int32)\n```\n\n----------------------------------------\n\nTITLE: Array Sorting and Top-N Elements\nDESCRIPTION: Shows how to sort arrays and extract top N elements from nested lists using ak.sort and slicing.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-flatten.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nak.sort(array, axis=1)\nak.sort(array, axis=1)[:, -2:]\nak.sort(array[ak.num(array) >= 2], axis=1)[:, -2:]\n```\n\n----------------------------------------\n\nTITLE: Pretty Printing Awkward Array Data\nDESCRIPTION: Demonstrates converting Awkward Array data to a Python list and pretty printing it using the pprint module for detailed inspection.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-single-item.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pprint\n\ntrip_list = ak.to_list(single_trip)\npprint.pprint(trip_list)\n```\n\n----------------------------------------\n\nTITLE: Using Awkward Array for Cartesian Product and Combinations\nDESCRIPTION: Demonstrates the use of ak.cartesian and ak.combinations functions from Awkward Array to create Cartesian products and combinations efficiently.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-combinatorics-cartesian-combinations.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nak.cartesian([cities_us, cities_canada], axis=0)\n\nak.combinations(all_cities, 2, axis=0)\n```\n\n----------------------------------------\n\nTITLE: Defining Regular Expression Pattern\nDESCRIPTION: Creates a regular expression pattern with named groups to match timestamp, fractional seconds, integers, category, and message from log lines.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-strings-extract-substrings.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npattern = (\n    # Timestamp\n    r\"(?P<datetime>\\d\\d-\\d\\d\\s\\d\\d:\\d\\d:\\d\\d)\\.\" \n    # Fractional seconds\n    r\"(?P<datetime_frac>\\d\\d\\d)\\s\\s\"\n    # Unknown integers\n    r\"(?P<i0>\\d\\d\\d\\d)\\s\\s\"\n    r\"(?P<i1>\\d\\d\\d\\d)\\s\"\n    # String category\n    r\"(?P<category>\\w)\\s\"\n    # String message\n    r\"(?P<message>.*)\"\n)\n```\n\n----------------------------------------\n\nTITLE: Performing Linear Fits with Awkward Array\nDESCRIPTION: This snippet shows how to use ak.linear_fit to perform linear regression on two Awkward Arrays, returning intercept, slope, and their errors.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-statistics.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nak.linear_fit(array_x, array_y, axis=-1)\n```\n\n----------------------------------------\n\nTITLE: Missing Items and Union Types\nDESCRIPTION: Demonstrates how Awkward Array represents missing values and unions of different types.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-type.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmissing = ak.Array([33.0, None, 15.5, 99.1])\nmissing.type.show()\n\nmixed = ak.concatenate((\n    [{\"x\": 1}],\n    [{\"y\": 2}]\n))\nmixed.type.show()\n```\n\n----------------------------------------\n\nTITLE: Padding Awkward Array Lists to Common Length in Python\nDESCRIPTION: Demonstrates how to pad lists in an Awkward Array to a common length using ak.pad_none, which is useful for creating fixed-size inputs for machine learning models.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-pad.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([[0, 1, 2], [], [3, 4], [5], [6, 7, 8, 9]])\nak.pad_none(array, 2, clip=True)\nnp.asarray(ak.fill_none(ak.pad_none(array, 2, clip=True), 999))\n```\n\n----------------------------------------\n\nTITLE: Initializing Named Arrays in Python\nDESCRIPTION: Demonstrates different ways to create arrays with named axes using both constructor and ak.with_named_axis function\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-array-properties-named-axis.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n\nnamed_array = ak.Array([[1, 2], [3], [], [4, 5, 6]], named_axis=(\"x\", \"y\"))\n# or\nnamed_array = ak.Array([[1, 2], [3], [], [4, 5, 6]], named_axis={\"x\": 0, \"y\": 1})\n```\n\n----------------------------------------\n\nTITLE: Extracting Structured Data with Awkward Array\nDESCRIPTION: Uses ak.str.extract_regex to parse the entire array of log lines into structured data with named fields.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-strings-extract-substrings.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstructured = ak.str.extract_regex(lines, pattern)\nstructured\n```\n\n----------------------------------------\n\nTITLE: String Comparison Operations\nDESCRIPTION: Shows string comparison operations using equality operators on Awkward Arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-strings.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nawkward_array == \"three\"\n\nawkward_array == ak.Array([\"ONE\", \"TWO\", \"three\", \"four\"])\n```\n\n----------------------------------------\n\nTITLE: Converting Binary Data to Awkward Array of Strings\nDESCRIPTION: This snippet shows how to read binary data from a gzip file, convert it to a NumPy array, and then to an Awkward Array of strings. It demonstrates the process of unflattening and enforcing the string type.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-strings-read-binary.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n\nwith gzip.open(log_path, \"rb\") as f:\n    # `gzip.open` doesn't return a true file descriptor that NumPy can ingest\n    # So, instead we read into memory.\n    arr = np.frombuffer(f.read(), dtype=np.uint8)\n\nraw_bytes = ak.from_numpy(arr)\nraw_bytes.type.show()\n\narray_of_chars = ak.unflatten(raw_bytes, len(raw_bytes))\narray_of_chars\n\nstring = ak.enforce_type(array_of_chars, \"string\")\nstring.type.show()\n```\n\n----------------------------------------\n\nTITLE: Converting Python Strings to Awkward Array in Python\nDESCRIPTION: Demonstrates converting a list of Python strings to an Awkward Array, which uses UTF-8 encoding internally.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nak.Array([\"one\", \"two\", \"three\", \"four\"])\n```\n\n----------------------------------------\n\nTITLE: Comparing Equality of Awkward Arrays of Strings in Python\nDESCRIPTION: Shows how equality comparison works for Awkward Arrays of strings, demonstrating the string-wise comparison behavior.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nak.Array([\"one\", \"two\", \"three\", \"four\"]) == ak.Array(\n    [\"one\", \"TWO\", \"thirty three\", \"four\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Using EnumOnly for Required String Pattern Matching in AwkwardForth\nDESCRIPTION: Shows the 'enumonly' command which works like 'enum' but raises an exception if no match is found, useful for enforcing required patterns.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\n... input x\n... \n... 5 0 do\n...   x skipws\n...   x enumonly s\\\" zero\\\" s\\\" one\\\" s\\\" two\\\" s\\\" three\\\"\n... loop\n... \"\"\")\n>>> vm.run({\"x\": b\"  zero  three two one four  \"})\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: 'enumeration missing' in AwkwardForth runtime: expected one of several enumerated values in the input text, didn't find one\n```\n\n----------------------------------------\n\nTITLE: Unflattening Array Examples\nDESCRIPTION: Demonstrations of unflattening arrays using both variable and fixed lengths.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-unflatten-group.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nak.unflatten([\"Do\", \"re\", \"mi\", \"fa\", \"so\", \"la\"], [1, 2, 2, 1])\n\nak.unflatten([\"Do\", \"re\", \"mi\", \"fa\", \"so\", \"la\"], 2)\n```\n\n----------------------------------------\n\nTITLE: Handling Tuples with Different Structures in Awkward Array in Python\nDESCRIPTION: Demonstrates how Awkward Array handles tuples with different structures, resulting in a union type array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nak.Array(\n    [\n        (1.1, [1]),\n        (2.2, \"two\"),\n        (3.3, [1, 2, 3], \"three\"),\n    ]\n).to_list()\n```\n\n----------------------------------------\n\nTITLE: Padding Awkward Array with None Values in Python\nDESCRIPTION: Uses ak.pad_none to ensure all lists in the Awkward Array have a consistent length, padding shorter lists with None values.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-argminmax.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npadded = ak.pad_none(top2, 2, axis=1)\npadded\n```\n\n----------------------------------------\n\nTITLE: Converting ListOffsetArray to Awkward Array\nDESCRIPTION: This snippet shows how to convert a ListOffsetArray layout to an Awkward Array for easier manipulation and display.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nak.Array(layout)\n```\n\n----------------------------------------\n\nTITLE: Nested For Loops with Awkward Arrays\nDESCRIPTION: Example of nested for loops pattern with Awkward Arrays for Cartesian product operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/index.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\noutput = []\nfor x in awkward_array1:\n    for y in awkward_array2:\n        output.append(compute(x, y))\n```\n\n----------------------------------------\n\nTITLE: Creating a Scalar Record from a RecordArray\nDESCRIPTION: Shows how to manually build a scalar Record by providing a RecordArray and an index to specify which record to extract.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nlayout = ak.record.Record(\n    ak.contents.RecordArray(\n        [\n            ak.from_iter([1.1, 2.2, 3.3, 4.4, 5.5], highlevel=False),\n            ak.from_iter([[1], [1, 2], [1, 2, 3], [3, 2], [3]], highlevel=False),\n        ],\n        [\n            \"x\",\n            \"y\",\n        ],\n    ),\n    2,\n)\nrecord = ak.Record(layout)  # note the high-level ak.Record, rather than ak.Array\nrecord\n```\n\n----------------------------------------\n\nTITLE: Calculating Scores for Awkward Array Records in Python\nDESCRIPTION: Computes a score for each record in the Awkward Array using the formula x^2 + y^2. This demonstrates element-wise operations on nested structures.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-argminmax.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nscore = data.x**2 + data.y**2\nscore\n```\n\n----------------------------------------\n\nTITLE: Accessing Fields in Awkward Array of Tuples in Python\nDESCRIPTION: Shows how to access fields in an Awkward Array of tuples using string indexing with numeric strings.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nak_array_tup[\"1\"]\nak_array_tup[\"1\", 1]\n```\n\n----------------------------------------\n\nTITLE: Converting RDataFrame Back to Awkward Array\nDESCRIPTION: Demonstrates conversion from RDataFrame back to Awkward Array format, specifying column names to include.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-rdataframe.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\narray = ak.from_rdataframe(\n    df,\n    columns=(\n        \"x\",\n        \"y\",\n        \"z\",\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Scalar Types Example\nDESCRIPTION: Demonstrates the difference between array types and scalar types when working with records.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-type.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrecord_array = ak.Array([\n    {'x': 10, 'y': 11}\n])\nrecord = record_array[0]\nrecord.type\n```\n\n----------------------------------------\n\nTITLE: Indexing with None Values\nDESCRIPTION: Demonstrates indexing using None values to mask out specific sublists.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-masked.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\narray[\n    [\n        [0, 1],\n        None,\n        [],\n        [2],\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Comparing Equality of Awkward Arrays of Lists in Python\nDESCRIPTION: Demonstrates element-wise comparison of Awkward Arrays containing lists, showing how equality is determined for nested structures.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nak.Array([[1.1, 2.2], [], [3.3]]) == ak.Array([[1.1, 200], [], [3.3]])\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Input Buffer Operations in ForthMachine\nDESCRIPTION: Shows how to work with input buffers using len, pos, and end operations. The example reads from an input array and demonstrates buffer position tracking.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\ninput x\n\n10 0 do\n  x i-> stack\n  drop\nloop\n\nx len\nx pos\nx end\n\"\"\")\n>>> vm.run({\"x\": np.arange(10, dtype=np.int32)})\n>>> vm.stack\n[40, 40, -1]\n```\n\n----------------------------------------\n\nTITLE: Defining Point Array Behavior\nDESCRIPTION: Creates a PointArray class that extends ak.Array to add vectorized distance calculation functionality for arrays of points.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/ak.behavior.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass PointArray(ak.Array):\n    def distance(self, other):\n        return np.sqrt((self.x - other.x)**2 + (self.y - other.y)**2)\n\nak.behavior[\"*\", \"point\"] = PointArray\n```\n\n----------------------------------------\n\nTITLE: Array-oriented Sum Calculation\nDESCRIPTION: Computes the sum of all y values using Awkward Array's built-in functions\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-numba-intro.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nak.sum(ak.sum(array.y, axis=-1), axis=-1)\n```\n\n----------------------------------------\n\nTITLE: Performing Cartesian Product with axis=1 in Awkward Array\nDESCRIPTION: Shows how to use ak.cartesian with axis=1 for combining multiple small, variable-length lists efficiently, which is useful for large-scale data processing.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-combinatorics-cartesian-combinations.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nnumbers = ak.Array([[1, 2, 3], [], [4, 5], [6, 7, 8, 9]] * 250)\nletters = ak.Array([[\"a\", \"b\"], [\"c\"], [\"d\", \"e\", \"f\", \"g\"], [\"h\", \"i\"]] * 250)\n\nak.cartesian([numbers, letters])\n```\n\n----------------------------------------\n\nTITLE: Checking C-Contiguity of NumPy Arrays\nDESCRIPTION: This snippet creates a NumPy array and checks its C-contiguity before and after slicing. It demonstrates how slicing can affect the contiguity of an array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-numpy.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Slicing the inner dimension of this NumPy array makes it not C-contiguous.\nnp_array = np.array([[1, 2, 3], [4, 5, 6]])\nnp_array.flags[\"C_CONTIGUOUS\"], np_array[:, :-1].flags[\"C_CONTIGUOUS\"]\n```\n\n----------------------------------------\n\nTITLE: Computing Higher Moments with Awkward Array\nDESCRIPTION: This snippet shows how to use the ak.moment function to compute higher moments, such as the third moment (skewness) of the array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-statistics.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nak.moment(array, 3, axis=-1)\n```\n\n----------------------------------------\n\nTITLE: Viewing ByteMaskedArray as High-level Array\nDESCRIPTION: Shows how a ByteMaskedArray with missing values appears when converted to a high-level Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nak.Array(layout)\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Array from Python Dictionaries in Python\nDESCRIPTION: Demonstrates creating an Awkward Array from a list of Python dictionaries, resulting in a record type with named fields.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nak_array_rec = ak.Array([{\"x\": 1, \"y\": [1, 2]}, {\"x\": 2, \"y\": []}])\nak_array_rec\n```\n\n----------------------------------------\n\nTITLE: Basic NumPy to Awkward Conversion\nDESCRIPTION: Demonstrates basic conversion from NumPy arrays to Awkward Arrays using ak.from_numpy and ak.Array constructor.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-numpy.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n\nnp_array = np.array([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9])\nak_array = ak.from_numpy(np_array)\n# Alternative method\nak_array = ak.Array(np_array)\n```\n\n----------------------------------------\n\nTITLE: Loading Parquet Data with Awkward Array\nDESCRIPTION: Loads Chicago taxi dataset from a Parquet file using ak.from_parquet, selecting only the first row group and specific columns related to trip data.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-single-item.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\n\nurl = \"https://zenodo.org/records/14537442/files/chicago-taxi.parquet\"\ntaxi = ak.from_parquet(\n    url,\n    row_groups=[0],\n    columns=[\"trip.km\", \"trip.begin.l*\", \"trip.end.l*\", \"trip.path.*\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Behavior and Creating Reversible List\nDESCRIPTION: Demonstrates how to register the ReversibleArray behavior and create an array with this behavior using the __list__ parameter.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/ak.behavior.md#2025-04-21_snippet_11\n\nLANGUAGE: pycon\nCODE:\n```\n>>> reversible_list = ak.with_parameter([[1, 2, 3], [4], [5, 6, 7]], \"__list__\", \"reversible\")\n>>> reversible_list.reversed()\n[[3, 2, 1], [4], [7, 6, 5]]\n```\n\n----------------------------------------\n\nTITLE: Examining Internal Layout of Awkward Array of Lists in Python\nDESCRIPTION: Demonstrates the internal representation of an Awkward Array containing lists, showing the ListOffsetArray structure.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nak.Array([[1.1, 2.2, 3.3], [], [4.4, 5.5]]).layout\n```\n\n----------------------------------------\n\nTITLE: Defining Function Overloads for Named Records\nDESCRIPTION: Demonstrates how to override NumPy functions for named record types using ak.behavior.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nak.behavior[np.sqrt, \"Special\"] = lambda special: np.sqrt(special.x)\n\nnp.sqrt(ak.Array(layout))\n```\n\n----------------------------------------\n\nTITLE: Converting Awkward Array of Tuples to Python List in Python\nDESCRIPTION: Shows how to convert an Awkward Array of tuples back to a Python list using the to_list() method.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nak_array_tup.to_list()\n```\n\n----------------------------------------\n\nTITLE: Cumulative Sum Output in ForthMachine\nDESCRIPTION: Demonstrates the '+<- stack' operation for writing cumulative sums to an output buffer.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\noutput x int32\n\n100 5 5 5\nx +<- stack\nx +<- stack\nx +<- stack\nx +<- stack\n\"\"\")\n>>> vm.run()\n>>> np.asarray(vm[\"x\"])\narray([  5,  10,  15, 115], dtype=int32)\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Awkward Array\nDESCRIPTION: Creates a complex nested Awkward Array with records containing lists\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-cpp-cppyy.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array(\n    [\n        [{\"x\": 1, \"y\": [1.1]}, {\"x\": 2, \"y\": [2.2, 0.2]}],\n        [],\n        [{\"x\": 3, \"y\": [3.0, 0.3, 3.3]}],\n    ]\n)\narray\n```\n\n----------------------------------------\n\nTITLE: Creating Categorical Data with IndexedArray\nDESCRIPTION: Demonstrates how to use IndexedArray with the '__array__': 'categorical' parameter to represent categorical data (dictionary-encoding).\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nlayout = ak.contents.IndexedArray(\n    ak.index.Index64(np.array([2, 2, 1, 4, 0, 5, 3, 3, 0, 1])),\n    ak.from_iter([\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\"], highlevel=False),\n    parameters={\"__array__\": \"categorical\"},\n)\nak.to_list(layout)\n```\n\n----------------------------------------\n\nTITLE: Converting Awkward Array to JSON String\nDESCRIPTION: Demonstrates converting an Awkward Array to a JSON string representation.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-json.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nak.to_json(ak.Array([[1.1, 2.2, 3.3], [], [4.4, 5.5]]))\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Array using Numba with ArrayBuilder\nDESCRIPTION: This snippet demonstrates how to use Numba JIT compilation with ak.ArrayBuilder to create an Awkward Array efficiently.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-lists.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport numba as nb\n\n@nb.jit\ndef append_list(builder, start, stop):\n    builder.begin_list()\n    for x in range(start, stop):\n        builder.append(x)\n    builder.end_list()\n\n@nb.jit\ndef example(builder):\n    append_list(builder, 1, 4)\n    append_list(builder, 999, 999)\n    append_list(builder, 4, 6)\n    return builder\n\nbuilder = example(ak.ArrayBuilder())\n\narray = builder.snapshot()\narray\n```\n\n----------------------------------------\n\nTITLE: Right-Broadcasting with Variable-Length Arrays\nDESCRIPTION: Shows how variable-length Awkward Arrays perform right-broadcasting to match the expected behavior of imperative code, comparing the loop-based approach with the vectorized operation.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-broadcasting.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nx = ak.Array([\n    [1.1, 2.2, 3.3],\n    [],\n    [4.4, 5.5]\n])\ny = ak.Array([\n    [[1], [1, 2], [1, 2, 3]],\n    [],\n    [[1, 2, 3, 4], [1, 2, 3, 4, 5]]\n])\n\nfor x_i, y_i in zip(x, y):\n    print(\"[\")\n    for x_ij, y_ij in zip(x_i, y_i):\n        print(\"    [\", end=\" \")\n        for y_ijk in y_ij:\n            print(x_ij + y_ijk, end=\" \")\n        print(\"]\")\n    print(\"]\\n\")\n\nx + y\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation with Awkward Array\nDESCRIPTION: Demonstrates basic array operations using Awkward Array including slicing and array construction\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/uproot-awkward-columnar-hats.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nevents[\"Muon_Px\"].array()\n```\n\nLANGUAGE: python\nCODE:\n```\nevents[\"Muon_Px\"].array(entry_stop=20).tolist()\n```\n\n----------------------------------------\n\nTITLE: Comparing Bytestrings and UTF-8 Strings in Awkward Array\nDESCRIPTION: This snippet illustrates the difference between bytestrings and UTF-8 strings in Awkward Array, showing how string length is computed differently for each type using various Awkward Array functions.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-strings-read-binary.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlarge_code_point = ak.Array([\"Å\"])\nlarge_code_point.layout\n\nak.num(large_code_point)\nak.str.length(large_code_point)\n\nlarge_code_point_bytes = ak.enforce_type(large_code_point, \"bytes\")\nlarge_code_point_bytes\nlarge_code_point_bytes.layout\n\nak.str.length(large_code_point_bytes)\n```\n\n----------------------------------------\n\nTITLE: Computing PT-Eta Product\nDESCRIPTION: Calculates the product of electron PT and hyperbolic sine of muon eta.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/thinking-in-arrays.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nevents.electron.pt * np.sinh(events.muon.eta)\n```\n\n----------------------------------------\n\nTITLE: Converting RecordArray to List Representation\nDESCRIPTION: This snippet shows how to convert a RecordArray to a nested list representation for easier visualization of the data structure.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nak.to_list(layout)\n```\n\n----------------------------------------\n\nTITLE: Using ak.num with axis=0\nDESCRIPTION: Shows how to use ak.num function to get the length of the array at the outermost dimension (axis=0).\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-num.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nak.num(array, axis=0)\n```\n\n----------------------------------------\n\nTITLE: Sampling Without Replacement Loop\nDESCRIPTION: Example of nested loops for sampling without replacement from an Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/index.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\noutput = []\nfor i, x in enumerate(awkward_array):\n    for j in range(i + 1, len(awkward_array)):  # avoid repeating x\n        y = awkward_array[j]\n        output.append(compute(x, y))\n```\n\n----------------------------------------\n\nTITLE: Implementing ReversibleArray Class in Python\nDESCRIPTION: Defines a custom array class that adds a reversed() method to Awkward Arrays. The method reverses elements along the last axis using slice notation.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/ak.behavior.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass ReversibleArray(ak.Array):\n    def reversed(self):\n        return self[..., ::-1]\n```\n\n----------------------------------------\n\nTITLE: Halt Control Flow in ForthMachine\nDESCRIPTION: Demonstrates the 'halt' command which stops ForthMachine execution and raises a user halt error.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_53\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"halt\")\n>>> vm.run(raise_user_halt=False)\n'user halt'\n```\n\n----------------------------------------\n\nTITLE: Implementing Combinations without Replacement using Nested Loops in Python\nDESCRIPTION: Shows how to create combinations without replacement (n choose k) using nested loops, combining all cities into pairs without repetition.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-combinatorics-cartesian-combinations.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nall_cities = cities_us + cities_canada\n\npairs = []\n\nfor i, city1 in enumerate(all_cities):\n    for city2 in all_cities[i + 1:]:\n        pairs.append(CityPair(city1, city2))\n\npairs\n```\n\n----------------------------------------\n\nTITLE: Accessing Single Point Coordinates\nDESCRIPTION: Calculates and prints the longitude and latitude coordinates for a single point in a taxi trip path by combining base coordinates with differences.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-single-item.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint(f\"longitude: {single_trip.begin.lon + single_point.londiff:.3f}\")\nprint(f\"latitude:  {single_trip.begin.lat + single_point.latdiff:.3f}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Heterogeneous Awkward Array in Python\nDESCRIPTION: Demonstrates creating an Awkward Array with heterogeneous data types, resulting in a union type array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nak.Array([1.1, 2.2, [], [1], [1, 2], 3.3])\n```\n\n----------------------------------------\n\nTITLE: Accessing Elements from a UnionArray\nDESCRIPTION: Code snippet explaining how to access individual elements from a UnionArray using the tags and index arrays. This pseudocode demonstrates the lookup mechanism used by UnionArray internally.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_61\n\nLANGUAGE: python\nCODE:\n```\ncontents[tags[i]][index[i]]\n```\n\n----------------------------------------\n\nTITLE: Boolean Array Reduction\nDESCRIPTION: Demonstrates logical reduction operations (any/all) on boolean arrays with different axis specifications.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-reducing.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\narray_bool = ak.Array([\n    [False, False,  True,  True],\n    [False,  True, False,  True],\n    [False,  True,  True,  True],\n])\nak.any(array_bool, axis=-1)\nak.all(array_bool, axis=-1)\n```\n\n----------------------------------------\n\nTITLE: Calling C++ Template Function\nDESCRIPTION: Shows how to call the templated C++ function with an Awkward Array\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-cpp-cppyy.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nout = cppyy.gbl.go_fast_cpp[array.cpp_type](array)\n```\n\n----------------------------------------\n\nTITLE: Comparing Awkward Array and Pandas Concatenation\nDESCRIPTION: This example compares concatenation in Awkward Array and Pandas, highlighting the differences in behavior for different axis values.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-concatenate.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\narray1 = ak.Array({\"column\": [[1, 2, 3], [], [4, 5]]})\narray2 = ak.Array({\"column\": [[1.1, 2.2, 3.3], [], [4.4, 5.5]]})\n\nak.concatenate([array1, array2], axis=0)\n\ndf1 = pd.DataFrame({\"column\": [[1, 2, 3], [], [4, 5]]})\ndf2 = pd.DataFrame({\"column\": [[1.1, 2.2, 3.3], [], [4.4, 5.5]]})\n\npd.concat([df1, df2], axis=0)\n\nak.concatenate([array1, array2], axis=1)\n\npd.concat([df1, df2], axis=1)\n```\n\n----------------------------------------\n\nTITLE: Vector Operations with Awkward Array\nDESCRIPTION: Shows how to perform vector operations using the Vector library integrated with Awkward Array\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/uproot-awkward-columnar-hats.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport vector\nvector.register_awkward()\n\nmuons = ak.zip({\"px\": array.Muon_Px, \"py\": array.Muon_Py, \"pz\": array.Muon_Pz, \"E\": array.Muon_E}, with_name=\"Momentum4D\")\n```\n\n----------------------------------------\n\nTITLE: Numba Integration with Awkward\nDESCRIPTION: Demonstrates using ArrayBuilder within Numba-compiled functions with necessary limitations and patterns.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-arraybuilder.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport numba as nb\n\n@nb.jit\ndef build(builder):\n    builder.begin_list()\n    builder.append(1.1)\n    builder.append(2.2)\n    builder.append(3.3)\n    builder.end_list()\n    builder.begin_list()\n    builder.end_list()\n    builder.begin_list()\n    builder.append(4.4)\n    builder.append(5.5)\n    builder.end_list()\n    return builder\n\narray = build(ak.ArrayBuilder()).snapshot()\n```\n\n----------------------------------------\n\nTITLE: Checking Variable-Length Array Types\nDESCRIPTION: Demonstrates how to check the type structure of Awkward Arrays with variable-length dimensions, showing the difference in type representation.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-broadcasting.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nprint(ak.Array(x.tolist()).type)\nprint(ak.Array(y.tolist()).type)\n```\n\n----------------------------------------\n\nTITLE: Defining Point Record Behavior\nDESCRIPTION: Creates a Point class that extends ak.Record to add distance calculation functionality for individual point records.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/ak.behavior.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Point(ak.Record):\n    def distance(self, other):\n        return np.sqrt((self.x - other.x)**2 + (self.y - other.y)**2)\n\nak.behavior[\"point\"] = Point\n```\n\n----------------------------------------\n\nTITLE: Array Copying with New Field\nDESCRIPTION: Shows how to create a new array with an additional field using Python's copy module.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-add-fields.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport copy\n\ncopied = copy.copy(nested)\ncopied[\"z\"] = [10, 20, 30]\n\ncopied.show()\nnested.show()\n```\n\n----------------------------------------\n\nTITLE: Generic UFuncs Override Implementation\nDESCRIPTION: Shows how to implement a generic ufunc override for trigonometric functions applied to point types.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/ak.behavior.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef apply_ufunc(ufunc, method, args, kwargs):\n    if ufunc in (np.sin, np.cos, np.tan):\n        x = ufunc(args[0].x)\n        y = ufunc(args[0].y)\n        return ak.Array({\"x\": x, \"y\": y})\n    else:\n        return NotImplemented\n\nak.behavior[np.ufunc, \"point\"] = apply_ufunc\n```\n\n----------------------------------------\n\nTITLE: Importing Z Boson Mass from Particle Library in Python\nDESCRIPTION: This snippet shows how to import the Z boson mass from the Particle library and convert it to GeV units. It uses the particle and hepunits modules.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/jagged-ragged-awkward-arrays.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport particle, hepunits\n\nzmass = particle.Particle.findall(\"Z0\")[0].mass / hepunits.GeV\n```\n\n----------------------------------------\n\nTITLE: Vector Addition and Reduction Implementation\nDESCRIPTION: Implements vector addition and sum reduction for 2D vectors with polar coordinates.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/ak.behavior.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef vector_add(left, right):\n    return ak.contents.RecordArray(\n        [\n            ak.to_layout(left[\"rho\"] + right[\"rho\"]),\n            ak.to_layout(left[\"phi\"] + right[\"phi\"]),\n        ],\n        [\"rho\", \"phi\"],\n        parameters={\"__record__\": \"Vector2D\"},\n    )\n\nak.behavior[np.add, \"Vector2D\", \"Vector2D\"] = vector_add\n```\n\n----------------------------------------\n\nTITLE: Converting UnionArray to Python List\nDESCRIPTION: Shows how to convert a UnionArray to a nested Python list structure for inspection, revealing the heterogeneous data types it contains.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nak.to_list(layout)\n```\n\n----------------------------------------\n\nTITLE: Reversing Analysis for Fox-Centric Calculation in Python\nDESCRIPTION: Demonstrates how to reverse the order of arguments in ak.cartesian to perform a fox-centric analysis, determining which foxes get to eat. This shows the asymmetry in the problem formulation.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-combinatorics-best-match.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npair_foxes, pair_bunnies = ak.unzip(ak.cartesian([foxes, bunnies], nested=True))\n\ndistances = np.sqrt((pair_foxes.x - pair_bunnies.x)**2 + (pair_foxes.y - pair_bunnies.y)**2)\n\neating = (distances < 1)\n\nfox_eats = ak.any(eating, axis=-1)\n\nfoxes[fox_eats]\n```\n\n----------------------------------------\n\nTITLE: Vectorized Awkward Array Operation\nDESCRIPTION: Vectorized version of the simple for loop pattern showing how to compute on entire arrays at once.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/index.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\noutput = compute(awkward_array)\n```\n\n----------------------------------------\n\nTITLE: String Sorting Operations\nDESCRIPTION: Demonstrates lexicographical sorting of string arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-strings.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nak.sort(awkward_array)\n```\n\n----------------------------------------\n\nTITLE: Using ak.count with axis=2\nDESCRIPTION: Demonstrates using ak.count with axis=2, which for this array is equivalent to using axis=-1.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-num.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nak.count(array, axis=2)   # equivalent to axis=-1 for this array\n```\n\n----------------------------------------\n\nTITLE: Creating Ragged Arrays of Bunnies and Foxes in Python\nDESCRIPTION: Generates random data for bunnies and foxes across 1000 yards, creating ragged arrays of records using Awkward Arrays. Uses Poisson distribution for counts and normal distribution for positions.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-combinatorics-best-match.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnp.random.seed(12345)\n\nnumber_of_bunnies = np.random.poisson(3.5, 1000)   # average of 3.5 bunnies/yard\nnumber_of_foxes = np.random.poisson(1.5, 1000)     # average of 1.5 foxes/yard\n\nbunny_xy = np.random.normal(0, 1, (number_of_bunnies.sum(), 2))\nfox_xy = np.random.normal(0, 1, (number_of_foxes.sum(), 2))\n\nbunnies = ak.unflatten(ak.zip({\"x\": bunny_xy[:, 0], \"y\": bunny_xy[:, 1]}), number_of_bunnies)\nfoxes = ak.unflatten(ak.zip({\"x\": fox_xy[:, 0], \"y\": fox_xy[:, 1]}), number_of_foxes)\n```\n\n----------------------------------------\n\nTITLE: Computing VJP with JAX on Awkward Array in Python\nDESCRIPTION: This code shows how to compute the vector-Jacobian product (VJP) of the 'reverse_sum' function using JAX. It returns the function value and a function for computing the VJP given a cotangent vector.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-specialize-differentiate-jax.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nvalue_vjp, func_vjp = jax.vjp(reverse_sum, array)\ncotanget = ak.Array([0., 1., 0.], backend=\"jax\")\nfunc_vjp(value_vjp)\n```\n\n----------------------------------------\n\nTITLE: Creating Raw Bytestring Arrays in Awkward Array\nDESCRIPTION: This snippet demonstrates how to create an array of raw bytestrings using ListOffsetArray and NumpyArray with special parameters.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nak.Array(\n    ak.contents.ListOffsetArray(\n        ak.index.Index64(np.array([0, 3, 8, 11, 15])),\n        ak.contents.NumpyArray(\n            np.array(\n                [\n                    104,\n                    101,\n                    121,\n                    116,\n                    104,\n                    101,\n                    114,\n                    101,\n                    121,\n                    111,\n                    117,\n                    103,\n                    117,\n                    121,\n                    115,\n                ],\n                np.uint8,\n            ),\n            parameters={\"__array__\": \"byte\"},\n        ),\n        parameters={\"__array__\": \"bytestring\"},\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Length Validation Check\nDESCRIPTION: Verifies that all arrays have equal lengths using assertion.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-rdataframe.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nassert len(array_x) == len(array_y) == len(array_z)\n```\n\n----------------------------------------\n\nTITLE: Checking Array Length with ak.num\nDESCRIPTION: Demonstrates how to check the length of nested lists using ak.num and filter arrays based on length conditions.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-flatten.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nak.num(array)\narray[ak.num(array) > 0, 0]\n```\n\n----------------------------------------\n\nTITLE: Creating Compact UnionArray without Dummy Values\nDESCRIPTION: Demonstrates a more efficient UnionArray construction that avoids storing unreachable data by carefully managing indices to point only to valid elements in each content array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nlayout = ak.contents.UnionArray(\n    ak.index.Index8(np.array([0, 1, 2, 0, 0, 1, 1, 2, 2, 0], np.int8)),\n    ak.index.Index64(np.array([0, 0, 0, 1, 2, 1, 2, 1, 2, 3])),\n    [\n        ak.contents.NumpyArray(np.array([0.0, 3.3, 4.4, 9.9])),\n        ak.from_iter([[1], [1, 2, 3, 4, 5], [6]], highlevel=False),\n        ak.from_iter([\"two\", \"seven\", \"eight\"], highlevel=False),\n    ],\n)\nlayout\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Template Function\nDESCRIPTION: Template function in C++ that processes an Awkward Array by iterating over nested structures\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-cpp-cppyy.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsource_code = \"\"\"\ntemplate<typename T>\ndouble go_fast_cpp(T& awkward_array) {\n    double out = 0.0;\n\n    for (auto list : awkward_array) {\n        for (auto record : list) {\n            for (auto item : record.y()) {\n                out += item;\n            }\n        }\n    }\n\n    return out;\n}\n\"\"\"\n\ncppyy.cppdef(source_code)\n```\n\n----------------------------------------\n\nTITLE: Creating Point Arrays with Parameters\nDESCRIPTION: Creates two nested arrays of records with 'x' and 'y' fields named 'point', demonstrating how to attach parameters to array data structures.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/ak.behavior.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\none = ak.Array([[{\"x\": 1, \"y\": 1.1}, {\"x\": 2, \"y\": 2.2}, {\"x\": 3, \"y\": 3.3}],\n                [],\n                [{\"x\": 4, \"y\": 4.4}, {\"x\": 5, \"y\": 5.5}],\n                [{\"x\": 6, \"y\": 6.6}],\n                [{\"x\": 7, \"y\": 7.7}, {\"x\": 8, \"y\": 8.8}, {\"x\": 9, \"y\": 9.9}]],\n               with_name=\"point\")\ntwo = ak.Array([[{\"x\": 0.9, \"y\": 1}, {\"x\": 2, \"y\": 2.2}, {\"x\": 2.9, \"y\": 3}],\n                [],\n                [{\"x\": 3.9, \"y\": 4}, {\"x\": 5, \"y\": 5.5}],\n                [{\"x\": 5.9, \"y\": 6}],\n                [{\"x\": 6.9, \"y\": 7}, {\"x\": 8, \"y\": 8.8}, {\"x\": 8.9, \"y\": 9}]],\n               with_name=\"point\")\n```\n\n----------------------------------------\n\nTITLE: Computing JVP with JAX on Awkward Array in Python\nDESCRIPTION: This snippet demonstrates how to compute the Jacobian-vector product (JVP) of the 'reverse_sum' function using JAX. It requires a tangent vector, which is also defined as an Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-specialize-differentiate-jax.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntangent = ak.Array([[0.0, 0.0, 0.0], [], [0.0, 1.0]], backend=\"jax\")\nvalue_jvp, jvp_grad = jax.jvp(reverse_sum, (array,), (tangent,))\n```\n\n----------------------------------------\n\nTITLE: Finding All Bunny-Fox Combinations with Cartesian Product in Python\nDESCRIPTION: Uses ak.cartesian to find all possible bunny-fox pairs in each yard, then unpacks the pairs using ak.unzip. This creates two arrays with matching shapes for further calculations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-combinatorics-best-match.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npair_bunnies, pair_foxes = ak.unzip(ak.cartesian([bunnies, foxes]))\n```\n\n----------------------------------------\n\nTITLE: Using ak.count with default axis\nDESCRIPTION: Shows the result of using ak.count with the default axis=None parameter, which returns the total count of elements.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-num.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nak.count(array, axis=None)   # default\n```\n\n----------------------------------------\n\nTITLE: Registering Awkward Arrays with Numba\nDESCRIPTION: This code registers Awkward Arrays with Numba to ensure compatibility. This step is necessary for Numba's CUDA backend to recognize Awkward Arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-numba-cuda.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nak.numba.register_and_check()\n```\n\n----------------------------------------\n\nTITLE: Creating ByteMaskedArray for Missing Data\nDESCRIPTION: Demonstrates how to use ByteMaskedArray to represent missing data with a byte mask, similar to NumPy's masked arrays but supporting any data type and variable-length structures.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nlayout = ak.contents.ByteMaskedArray(\n    ak.index.Index8(np.array([False, False, True, True, False, True, False], np.int8)),\n    ak.contents.NumpyArray(np.array([0.0, 1.1, 2.2, 3.3, 4.4, 5.5, 6.6])),\n    valid_when=False,\n)\nlayout\n```\n\n----------------------------------------\n\nTITLE: Unflattening NumPy Arrays in Awkward Array\nDESCRIPTION: This example demonstrates how to use ak.unflatten to create an Awkward Array with variable-length lists from flat data and counts arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-lists.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndata = np.array([1, 2, 3, 4, 5, 6, 7, 8])\ncounts = np.array([3, 0, 1, 4])\n\nunflattened = ak.unflatten(data, counts)\nunflattened\n```\n\n----------------------------------------\n\nTITLE: Creating Irregular Awkward Array from Nested NumPy Arrays\nDESCRIPTION: This snippet shows how nesting NumPy arrays within Python lists creates an Awkward Array with variable-length lists.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-lists.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nnumpy_arrays = [\n    np.arange(3 * 5).reshape(3, 5),\n    np.arange(3 * 5, 2 * 3 * 5).reshape(3, 5),\n]\nirregular_array = ak.Array(numpy_arrays)\nirregular_array\n```\n\n----------------------------------------\n\nTITLE: Flattening with ak.flatten\nDESCRIPTION: Shows how to use ak.flatten with axis=None to convert arrays to 1-dimensional form while removing None values.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-flatten.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nak.flatten(array, axis=None)\n```\n\n----------------------------------------\n\nTITLE: Saving Awkward Array to JSON File\nDESCRIPTION: Shows how to save an Awkward Array directly to a JSON file.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-json.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nak.to_json(ak.Array([[1.1, 2.2, 3.3], [], [4.4, 5.5]]), \"/tmp/awkward-example-2.json\")\n```\n\n----------------------------------------\n\nTITLE: Using ak.count with axis=0\nDESCRIPTION: Demonstrates using ak.count with axis=0, showing why its output isn't suitable for filtering arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-num.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nak.count(array, axis=0)\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Property of Awkward Array Layout\nDESCRIPTION: Demonstrates how to access the form property of an Awkward Array layout, which describes its structure without the actual data.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_58\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([[1.1, 2.2, 3.3], [], [4.4, 5.5]])\narray.layout\n```\n\n----------------------------------------\n\nTITLE: High-level Operations with Named Axes\nDESCRIPTION: Demonstrates how to use named axes with high-level operations like sum, showing axis specification by name\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-array-properties-named-axis.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([[[1, 2]], [[3]], [[4]], [[5, 6], [7]]])\nnamed_array = ak.with_named_axis(array, named_axis=(\"x\", \"y\", \"z\"))\n\nprint(\"Sum over axis 'x':\", ak.sum(named_array, axis=\"x\"))  # ak.sum(array, axis=0)\nprint(\"Sum over axis 'y':\", ak.sum(named_array, axis=\"y\"))  # ak.sum(array, axis=1)\nprint(\"Sum over axis 'z':\", ak.sum(named_array, axis=\"z\"))  # ak.sum(array, axis=2)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Run Lengths Function\nDESCRIPTION: Example showing how run_lengths function works on a simple array to find consecutive value lengths.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-unflatten-group.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nak.run_lengths([1, 1, 1, 3, 3, 2, 4, 4, 4])\n```\n\n----------------------------------------\n\nTITLE: Reading int16 Values into int32 Output in AwkwardForth\nDESCRIPTION: Shows how values are still interpreted based on the read command (h->) but can be converted to a different output type (int32), demonstrating format conversion.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\n... input x\n... output y int32\n... \n... 10 0 do\n...   x h-> y\n... loop\n... \"\"\")\n>>> vm.run({\"x\": np.arange(5, dtype=np.int32)})\n>>> np.asarray(vm[\"y\"])\narray([0, 0, 1, 0, 2, 0, 3, 0, 4, 0], dtype=int32)\n```\n\n----------------------------------------\n\nTITLE: Creating a RegularArray with Unreachable Data\nDESCRIPTION: Demonstrates how a RegularArray can have unreachable data when the length of its nested content doesn't evenly divide the RegularArray's size.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nak.Array(\n    ak.contents.RegularArray(\n        ak.contents.NumpyArray(np.array([1, 2, 3, 4, 5, 6, 7])),\n        3,\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Computing Run Lengths for Classifications\nDESCRIPTION: Computing the lengths of consecutive runs in the sorted classification data.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-unflatten-group.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlengths = ak.run_lengths(landing_sorted_class.recclass)\nlengths\n```\n\n----------------------------------------\n\nTITLE: Loading ROOT Data with Uproot\nDESCRIPTION: Opens a ROOT file and accesses the events tree using uproot\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/uproot-awkward-columnar-hats.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nevents = uproot.open(skhep_testdata.data_path(\"uproot-HZZ.root\"))[\"events\"]\nevents.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Array using ArrayBuilder\nDESCRIPTION: This snippet shows how to use ak.ArrayBuilder to construct an Awkward Array with nested lists using begin_list and end_list methods.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-lists.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nbuilder = ak.ArrayBuilder()\n\nbuilder.begin_list()\nbuilder.append(1)\nbuilder.append(2)\nbuilder.append(3)\nbuilder.end_list()\n\nbuilder.begin_list()\nbuilder.end_list()\n\nbuilder.begin_list()\nbuilder.append(4)\nbuilder.append(5)\nbuilder.end_list()\n\narray = builder.snapshot()\narray\n```\n\n----------------------------------------\n\nTITLE: Examining the Layout of a Scalar Record\nDESCRIPTION: Demonstrates that a Record contains a RecordArray as its layout, illustrating the columnar orientation of Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nrecord.layout\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram with Flattened Electron PT\nDESCRIPTION: Creates a histogram using hist library to plot flattened electron transverse momentum (pt) data with 100 bins from 0 to 100.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/thinking-in-arrays.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom hist import Hist\n\nHist.new.Regular(100, 0, 100, name=\" \").Double().fill(\n    ak.flatten(events.electron.pt)\n).plot();\n```\n\n----------------------------------------\n\nTITLE: Viewing Full JSON Representation of Form\nDESCRIPTION: Displays the complete JSON representation of an Awkward Array's form, which can be used to reconstruct the array structure when using ak.from_buffers.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_60\n\nLANGUAGE: python\nCODE:\n```\n# Full JSON representation\nprint(array.layout.form.to_json())\n```\n\n----------------------------------------\n\nTITLE: Viewing Abbreviated JSON Representation of Form\nDESCRIPTION: Shows the abbreviated JSON representation of an Awkward Array's form, which is useful for understanding its structure.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_59\n\nLANGUAGE: python\nCODE:\n```\n# Abbreviated JSON representation\narray.layout.form\n```\n\n----------------------------------------\n\nTITLE: Handling Booleans and Integers in Awkward Array\nDESCRIPTION: Shows that unlike integers and floats, booleans and integers are not automatically merged into a single type in Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nak.Array([1, 2, 3, True, True, False, 4, 5])\n```\n\n----------------------------------------\n\nTITLE: Record Builder Instance Creation\nDESCRIPTION: Example of creating a Record Builder instance with field mapping\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-header-only-layoutbuilder.md#2025-04-21_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nRecordBuilder<\n  RecordField<Field::one, NumpyBuilder<double>>,\n  RecordField<Field::two, ListOffsetBuilder<int64_t,\n      NumpyBuilder<int32_t>>>\n> builder(fields_map);\n```\n\n----------------------------------------\n\nTITLE: Implementing NumPy Equal Operation for Points\nDESCRIPTION: Demonstrates overriding numpy.equal for custom point types by defining a comparison function and registering it in ak.behavior.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/ak.behavior.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef point_equal(left, right):\n    return np.logical_and(left.x == right.x, left.y == right.y)\n\nak.behavior[np.equal, \"point\", \"point\"] = point_equal\n```\n\n----------------------------------------\n\nTITLE: Converting Compact UnionArray to Python List\nDESCRIPTION: Shows that the compact UnionArray representation produces the same nested Python list structure as the previous example, despite using less storage.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nak.to_list(layout)\n```\n\n----------------------------------------\n\nTITLE: Converting Awkward Array of Strings to Python List in Python\nDESCRIPTION: Shows how to convert an Awkward Array of strings back to a Python list using the to_list() method.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nak.Array([\"one\", \"two\", \"three\", \"four\"]).to_list()\n```\n\n----------------------------------------\n\nTITLE: Examining Array Shapes in NumPy vs. Awkward\nDESCRIPTION: Compares the shape representations between NumPy arrays and Awkward Arrays, showing how shape information is stored differently.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-broadcasting.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nprint(x.shape)\nprint(y.shape)\n```\n\n----------------------------------------\n\nTITLE: Sorting Array by Classification\nDESCRIPTION: Sorting the landing data array by record classification using argsort.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-unflatten-group.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlanding_sorted_class = landing[ak.argsort(landing.recclass)]\nlanding_sorted_class\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Fields in Awkward Array of Records in Python\nDESCRIPTION: Demonstrates how Awkward Array handles records with different sets of fields, filling missing fields with None.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nak.Array(\n    [\n        {\"x\": 1.1, \"y\": [1]},\n        {\"x\": 2.2, \"z\": \"two\"},\n        {\"x\": 3.3, \"y\": [1, 2, 3], \"z\": \"three\"},\n    ]\n).to_list()\n```\n\n----------------------------------------\n\nTITLE: Converting Nested Awkward Array to Pandas DataFrame with MultiIndex\nDESCRIPTION: This example shows how nested Awkward Arrays are converted to Pandas DataFrames with MultiIndex for both rows and columns.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-pandas.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nak_array = ak.Array(\n    [\n        [\n            {\"x\": 1.1, \"y\": 1, \"z\": \"one\"},\n            {\"x\": 2.2, \"y\": 2, \"z\": \"two\"},\n            {\"x\": 3.3, \"y\": 3, \"z\": \"three\"},\n        ],\n        [],\n        [{\"x\": 4.4, \"y\": 4, \"z\": \"four\"}, {\"x\": 5.5, \"y\": 5, \"z\": \"five\"}],\n    ]\n)\nak.to_dataframe(ak_array)\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Array from NumPy Array\nDESCRIPTION: This example demonstrates how to create an Awkward Array from a 3-dimensional NumPy array, resulting in fixed-length nested lists.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-lists.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nnumpy_array = np.arange(2 * 3 * 5).reshape(2, 3, 5)\nregular_array = ak.Array(numpy_array)\nregular_array\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Record from Python Dictionary in Python\nDESCRIPTION: Demonstrates creating an Awkward Record (scalar) from a single Python dictionary with string-valued keys.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nak.Record({\"x\": 1, \"y\": [1, 2], \"z\": 3.3})\n```\n\n----------------------------------------\n\nTITLE: Converting UnmaskedArray to High-Level Awkward Array\nDESCRIPTION: Demonstrates converting an UnmaskedArray layout to a high-level Awkward Array object.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nak.Array(layout)\n```\n\n----------------------------------------\n\nTITLE: Checking Awkward Array Validity in Python\nDESCRIPTION: This snippet demonstrates how to use ak.is_valid() to check if an Awkward Array is valid.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-checking-validity.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nak.is_valid(array_is_valid)\nak.is_valid(array_is_invalid)\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Failure with Variable-Length Arrays\nDESCRIPTION: Shows how broadcasting fails when trying to add variable-length arrays with different dimensions, illustrating the difference from NumPy broadcasting.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-broadcasting.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nak.Array(x.tolist()) + ak.Array(y.tolist())\n```\n\n----------------------------------------\n\nTITLE: Unary Arithmetic Operations in ForthMachine32\nDESCRIPTION: Demonstrates various unary operations (negate, increment, decrement, absolute value) that pop one value from the stack and push the result.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"12 negate\")\n>>> vm.run()\n>>> vm.stack\n[-12]\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"12 1+\")\n>>> vm.run()\n>>> vm.stack\n[13]\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"12 1-\")\n>>> vm.run()\n>>> vm.stack\n[11]\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"-12 abs\")\n>>> vm.run()\n>>> vm.stack\n[12]\n```\n\n----------------------------------------\n\nTITLE: Creating an Invalid Awkward Array in Python\nDESCRIPTION: This snippet shows how to create an invalid Awkward Array by modifying the offsets of a valid array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-checking-validity.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\narray_is_invalid = ak.copy(array_is_valid)\narray_is_invalid.layout.offsets.data[3] = 100\n```\n\n----------------------------------------\n\nTITLE: Implementing Cartesian Product with Nested Loops in Python\nDESCRIPTION: Demonstrates a traditional nested loop approach to create a Cartesian product of US and Canadian cities, creating CityPair objects for each combination.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-combinatorics-cartesian-combinations.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass CityPair:\n    def __init__(self, city1, city2):\n        self.city1 = city1\n        self.city2 = city2\n    def __repr__(self):\n        return f\"<CityPair {self.city1.name} {self.city2.name}>\"\n\npairs = []\n\nfor city_us in cities_us:\n    for city_canada in cities_canada:\n        pairs.append(CityPair(city_us, city_canada))\n\npairs\n```\n\n----------------------------------------\n\nTITLE: Initializing ArrayBuilder in Python\nDESCRIPTION: Constructor for the ArrayBuilder class that builds Content arrays. Takes optional parameters for initial buffer size and resize factor.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/ak.builder.ArrayBuilder.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nArrayBuilder(initial=1024, resize=8)\n```\n\n----------------------------------------\n\nTITLE: Basic ForthMachine Addition Example\nDESCRIPTION: Demonstrates creating a ForthMachine instance to compute the sum of two numbers using basic Forth syntax.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"3 5 +\")\n>>> vm.run()\n>>> vm.stack\n[8]\n```\n\n----------------------------------------\n\nTITLE: Implementing Forth +loop with Custom Step\nDESCRIPTION: Demonstrates the do..+loop construct which allows for custom step values in the loop iteration.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\n... 100 0 do\n...   i\n...   10\n... +loop\n... \"\"\")\n>>> vm.run()\n>>> vm.stack\n[0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\n```\n\n----------------------------------------\n\nTITLE: Array Reduction Operations\nDESCRIPTION: Shows how to perform reduction operations like sum and mean on nested arrays with explicit axis specification.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-flatten.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([[0, 1, 2], [], [3, 4], [5], [6, 7, 8, 9]])\nak.sum(array, axis=1)\nak.mean(array, axis=1)\n```\n\n----------------------------------------\n\nTITLE: Using NumPy ufuncs with Ragged Arrays\nDESCRIPTION: Demonstrates applying NumPy's sqrt ufunc to ragged arrays, showing how operations work through nested structures.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-numpy.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata = ak.Array([[1, 4, 9], [], [16, 25]])\n\nnp.sqrt(data)\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Array from Layout\nDESCRIPTION: Creates an Awkward Array from a layout object, which is a low-level representation of the array structure.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nak.Array(layout)\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Array from Python Tuples in Python\nDESCRIPTION: Demonstrates creating an Awkward Array from a list of Python tuples, resulting in a record type with unnamed fields.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nak_array_tup = ak.Array([(1, [1, 2]), (2, [])])\nak_array_tup\n```\n\n----------------------------------------\n\nTITLE: Creating Array for Sublist Indexing\nDESCRIPTION: Creates a sample array to demonstrate indexing with missing sublists.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-masked.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array([\n    [10, 3, 2, 9],\n    [4, 5, 5, 12, 6],\n    [],\n    [8, 9, -1],\n])\n```\n\n----------------------------------------\n\nTITLE: Registering Awkward's JAX Integration in Python\nDESCRIPTION: This code imports the Awkward Array library and registers its JAX integration. This step is crucial for enabling JAX operations on Awkward Arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-specialize-differentiate-jax.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nak.jax.register_and_check()\n```\n\n----------------------------------------\n\nTITLE: Attempting to Create Awkward Record from Python Tuple in Python\nDESCRIPTION: Shows that creating an Awkward Record directly from a Python tuple is not supported and raises an exception.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nak.Record((1, [1, 2], 3.3))\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Import statements for awkward array and numpy libraries needed for array manipulation.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-add-fields.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Initializing Arrays for Numba Compilation\nDESCRIPTION: Creates sample Awkward Arrays containing nested lists, numbers and records for demonstration of Numba compilation features.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-numba-features.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\nimport numba as nb\n\narray1 = ak.Array([[0, 1.1, 2.2], [], [3.3, 4.4], [5.5], [6.6, 7.7, 8.8, 9.9]])\narray2 = ak.Array([\n    [{\"x\": 1.1, \"y\": [1]}, {\"x\": 2.2, \"y\": [1, 2]}, {\"x\": 3.3, \"y\": [1, 2, 3]}],\n    [],\n    [{\"x\": 4.4, \"y\": [1, 2, 3, 4]}, {\"x\": 5.5, \"y\": [1, 2, 3, 4, 5]}]\n])\n```\n\n----------------------------------------\n\nTITLE: Binary Operations with Named Axes in Awkward Array\nDESCRIPTION: Demonstrates how named axes are handled in binary operations between arrays. Shows various combinations of named and unnamed arrays and how their axis names are preserved in the results.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-array-properties-named-axis.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# binary operations with named axes\nnamed_array1 = ak.with_named_axis(array, named_axis=(None, \"y\"))\nnamed_array2 = ak.with_named_axis(array, named_axis=(\"x\", None))\nnamed_array3 = ak.with_named_axis(array, named_axis=(\"x\", \"y\"))\n\nassert (array + array).named_axis == {}\nassert (named_array1 + array).named_axis == {\"y\": 1}\nassert (named_array2 + array).named_axis == {\"x\": 0}\nassert (named_array3 + array).named_axis == {\"x\": 0, \"y\": 1}\n\nassert (named_array1 + named_array2).named_axis == {\"x\": 0, \"y\": 1}\nassert (named_array3 + named_array3).named_axis == {\"x\": 0, \"y\": 1}\n```\n\n----------------------------------------\n\nTITLE: Using ak.count with axis=1\nDESCRIPTION: Shows the result of using ak.count with axis=1, illustrating its behavior as a reducer rather than a shape-preserving function.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-num.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nak.count(array, axis=1)\n```\n\n----------------------------------------\n\nTITLE: Managing Variables in ForthMachine32\nDESCRIPTION: Demonstrates how to create and manipulate variables in AwkwardForth using ForthMachine32. Shows basic variable assignment and retrieval.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"variable x    10 x !\")\n>>> vm[\"x\"]\n0\n>>> vm.run()\n>>> vm[\"x\"]\n10\n```\n\n----------------------------------------\n\nTITLE: Initializing Log Data Array with Awkward Array\nDESCRIPTION: Creates an Awkward Array from a list of log lines containing system messages and timestamps.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-strings-extract-substrings.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\n\nlines = ak.from_iter([\n    \"12-17 19:31:36.263  1795  1825 I PowerManager_screenOn: DisplayPowerStatesetColorFadeLevel: level=1.0\\r\",\n    \"12-17 19:31:36.263  5224  5283 I SendBroadcastPermission: action:android.com.huawei.bone.NOTIFY_SPORT_DATA, mPermissionType:0\\r\",\n    # ... additional log lines ...\n])\n```\n\n----------------------------------------\n\nTITLE: Creating Nested String Arrays\nDESCRIPTION: Shows how to create nested arrays of strings using Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-strings.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nak.Array([[\"one\", \"two\"], [], [\"three\"]])\n```\n\n----------------------------------------\n\nTITLE: Particle Physics Data Analysis with Awkward Arrays\nDESCRIPTION: Shows how to work with particle physics data using Awkward Arrays, including reading ROOT files and computing physics quantities\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/thinking-in-arrays.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport uproot\nimport numpy as np\n\nfile = uproot.open(\"SMHiggsToZZTo4L.root\")\ntree = file[\"Events\"]\n\n# Computing p_z\nevents.electron.pt * np.sinh(events.electron.eta)\n```\n\n----------------------------------------\n\nTITLE: Using ak.num with default axis\nDESCRIPTION: Shows how to use ak.num with the default axis=1 parameter to get the number of items in each list at the first level of nesting.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-num.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nak.num(array, axis=1)   # default\n```\n\n----------------------------------------\n\nTITLE: Creating RecordArray with Explicit Length\nDESCRIPTION: Creates a RecordArray with an explicitly specified length, which can be less than the length of its field arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nlayout = ak.contents.RecordArray(\n    [content0, content1, content2], [\"x\", \"y\", \"z\"], length=3\n)\nprint(f\"{len(layout) = }\")\n```\n\n----------------------------------------\n\nTITLE: Importing Awkward Array Library in Python\nDESCRIPTION: Imports the Awkward Array library which enables manipulation of nested, variable-length data structures.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-num.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for ROOT RDataFrame Integration\nDESCRIPTION: Imports the necessary packages awkward and ROOT for data conversion operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-rdataframe.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport ROOT\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Array with Missing Values in Python\nDESCRIPTION: Demonstrates creating an Awkward Array with missing values (None), resulting in an option type array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nak.Array([1.1, 2.2, None, 3.3, None, 4.4])\n```\n\n----------------------------------------\n\nTITLE: Decoding and Parsing Protocol Buffer Data with Python\nDESCRIPTION: Executes the generated code to decode Protocol Buffer data, loads JSON form specification, and creates Awkward Arrays from the decoded buffers. The process involves converting the raw buffer data into structured arrays according to the schema.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nexec(\"\".join(bb+cc))\n\npos = json.loads(\"\".join(form)[:-2])\n#print(\"\".join(pos))\n#print(json.dumps(pos, indent = 1))\nfor key in con.keys():\n    con[key] = np.array(con[key])\n```\n\n----------------------------------------\n\nTITLE: MET PT Filtering\nDESCRIPTION: Demonstrates filtering events based on Missing Transverse Energy (MET) threshold of 20.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/thinking-in-arrays.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nevents.MET.pt, events.MET.pt > 20\n```\n\nLANGUAGE: python\nCODE:\n```\nlen(events), len(events[events.MET.pt > 20])\n```\n\n----------------------------------------\n\nTITLE: Flattening with ak.ravel\nDESCRIPTION: Demonstrates using ak.ravel to convert any array into a 1-dimensional array while preserving None values.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-flatten.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nak.ravel(array)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Awkward Arrays and CUDA\nDESCRIPTION: This snippet imports the necessary libraries for working with Awkward Arrays, NumPy, CuPy, and Numba's CUDA functionality.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-numba-cuda.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\nimport cupy as cp\n\nimport numba.cuda\n```\n\n----------------------------------------\n\nTITLE: Using ArrayBuilder for Missing Values\nDESCRIPTION: Example of using ArrayBuilder to construct arrays with missing values programmatically\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-missing.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbuilder = ak.ArrayBuilder()\n\nbuilder.append(1)\nbuilder.append(2)\nbuilder.null()\nbuilder.append(None)\nbuilder.append(3)\n\narray = builder.snapshot()\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Data with Awkward Array\nDESCRIPTION: Loading meteorite landing data from a JSON file using Awkward Array's from_json function.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-unflatten-group.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"../data/y77d-th95.json\", \"rb\") as f:\n    landing = ak.from_json(f)\nlanding.fields\n```\n\n----------------------------------------\n\nTITLE: Converting Awkward Array with Missing Values to Python List in Python\nDESCRIPTION: Shows how to convert an Awkward Array with missing values (None) back to a Python list.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nak.Array([1.1, 2.2, None, 3.3, None, 4.4]).to_list()\n```\n\n----------------------------------------\n\nTITLE: String Array Operations\nDESCRIPTION: Demonstrates various operations on string arrays including length checking and slicing.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-strings.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nak.num(awkward_array)\n\nawkward_array[:, 1:]\n```\n\n----------------------------------------\n\nTITLE: Creating a ListOffsetArray with Non-Zero Start\nDESCRIPTION: This snippet demonstrates creating a ListOffsetArray where the offsets do not start at 0, resulting in some unreachable data in the content.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nak.Array(\n    ak.contents.ListOffsetArray(\n        ak.index.Index64(np.array([1, 3, 3, 4])),\n        ak.contents.NumpyArray(np.array([1.1, 2.2, 3.3, 4.4, 5.5])),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Reading Avro File and Metadata\nDESCRIPTION: Reads an Avro file, extracts metadata and schema information, and stores records in memory.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith open('users.avro', 'rb') as f:\n    reader = DataFileReader(f, DatumReader())\n    metadata = copy.deepcopy(reader.meta)\n    schema_from_file = json.loads(metadata['avro.schema'])\n    users = [user for user in reader]\n    reader.close()\n```\n\n----------------------------------------\n\nTITLE: Traditional Python Loop Implementation\nDESCRIPTION: Shows the equivalent nested loop implementation in pure Python, highlighting the verbosity compared to the Awkward Array approach.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\noutput = []\nfor sublist in array:\n    tmp1 = []\n    for record in sublist:\n        tmp2 = []\n        for number in record[\"y\"][1:]:\n            tmp2.append(np.square(number))\n        tmp1.append(tmp2)\n    output.append(tmp1)\n```\n\n----------------------------------------\n\nTITLE: Converting Awkward Array to Dask Collection\nDESCRIPTION: Converting an Awkward Array to a Dask collection for delayed computation using dask-awkward.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/index.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndak.from_awkward(example, npartitions=1)\n```\n\n----------------------------------------\n\nTITLE: Input Handling in ForthMachine32\nDESCRIPTION: Shows how input buffers are declared and how they must be provided to the ForthMachine's run method. Demonstrates error handling when inputs are missing.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"input x\")\n>>> vm.run()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: AwkwardForth source code defines an input that was not provided: x\n>>> import numpy as np\n>>> vm.run({\"x\": np.array([1, 2, 3])})\n```\n\n----------------------------------------\n\nTITLE: Converting Regular Array to Ragged\nDESCRIPTION: Converts regular array to ragged dimension for indexing operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-masked.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nindex = ak.from_regular(\n    ak.argmax(array, keepdims=True, axis=-1, mask_identity=False)\n)\n```\n\n----------------------------------------\n\nTITLE: NumPy Universal Functions on GPU\nDESCRIPTION: Shows how to use NumPy universal functions (ufuncs) with GPU arrays through CuPy integration.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-gpu.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nnp.sqrt(array_gpu)\n```\n\n----------------------------------------\n\nTITLE: String Behavior Assignment in Awkward Array\nDESCRIPTION: Shows how string behaviors are assigned in Awkward Array, including equality comparison behavior between strings.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/ak.behavior.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nak.behavior[\"string\"] = StringBehavior\nak.behavior[np.equal, \"string\", \"string\"] = _string_equal\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Array with Dask Integration\nDESCRIPTION: Example showing how to create an Awkward Array and convert it to a Dask collection using dask-awkward library.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/index.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport dask_awkward as dak\n\nexample = ak.Array([\n    [{\"x\": 1.1, \"y\": [1]}, {\"x\": 2.2, \"y\": [1, 2]}, {\"x\": 3.3, \"y\": [1, 2, 3]}],\n    [],\n    [{\"x\": 4.4, \"y\": [1, 2, 3, 4]}, {\"x\": 5.5, \"y\": [1, 2, 3, 4, 5]}]\n])\n```\n\n----------------------------------------\n\nTITLE: Input to Stack to Output Transfer in ForthMachine32\nDESCRIPTION: Shows how data can be transferred from input to output via the stack, which allows for manipulation but may cause data type conversion issues.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\n... input x\n... output y float64\n... \n... x d-> stack   y <- stack\n... x d-> stack   y <- stack\n... x d-> stack   y <- stack\n... \"\"\")\n>>> vm.run({\"x\": np.array([1.1, 2.2, 3.3])})\n>>> np.asarray(vm[\"y\"])\narray([1., 2., 3.])\n```\n\n----------------------------------------\n\nTITLE: Transferring Array to GPU Backend\nDESCRIPTION: Demonstrates copying an array from CPU to GPU using ak.to_backend() and verifying the transfer.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-gpu.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\narray_gpu = ak.to_backend(array_cpu, \"cuda\")\nak.backend(array_gpu)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Import statements for Awkward Array and NumPy libraries needed for array operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-masked.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Enforcing Regular Structure on Awkward Array in Python\nDESCRIPTION: Uses ak.to_regular to enforce a consistent list length across all elements in the Awkward Array, changing the data type from variable-length to fixed-length lists.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-argminmax.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nak.to_regular(padded, axis=1)\n```\n\n----------------------------------------\n\nTITLE: Creating Array from Named RecordArray\nDESCRIPTION: Shows how a named RecordArray appears when converted to a high-level Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nak.Array(layout)\n```\n\n----------------------------------------\n\nTITLE: Using the Demo Function with Awkward Arrays\nDESCRIPTION: Python code demonstrating how to import and use the create_demo_array function to generate and print an Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/header-only/examples/cython/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom demo import create_demo_array\n\nprint(\n    create_demo_array()\n)\n```\n\n----------------------------------------\n\nTITLE: Viewing IndexedOptionArray as High-level Array\nDESCRIPTION: Shows how an IndexedOptionArray with missing values appears when converted to a high-level Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nak.Array(layout)\n```\n\n----------------------------------------\n\nTITLE: Installing Awkward Headers with CMake FetchContent\nDESCRIPTION: This CMake snippet demonstrates how to install the awkward-headers library using FetchContent. It declares the content to be fetched from a specific version's release on GitHub.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-header-only-layoutbuilder.md#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(FetchContent)\n\nset(AWKWARD_VERSION \"v2.1.0\")\n\nFetchContent_Declare(\n  awkward-headers\n  URL      https://github.com/scikit-hep/awkward/releases/download/${AWKWARD_VERSION}/header-only.zip\n)\n# Instead of using `FetchContent_MakeAvailable(awkward-headers)`, we manually load the target so\n```\n\n----------------------------------------\n\nTITLE: Negative Count Handling in Batch Reading\nDESCRIPTION: Demonstrates how negative count values are interpreted as zero when reading data in batch mode, resulting in an empty output array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\n... input x\n... output y float32\n... \n... -1000000 x #d-> y\n... \"\"\")\n>>> vm.run({\"x\": np.arange(1000000) * 1.1})\n>>> np.asarray(vm[\"y\"])\narray([], dtype=float32)\n```\n\n----------------------------------------\n\nTITLE: Reading Big-Endian Values in AwkwardForth\nDESCRIPTION: Demonstrates how to read big-endian values using the '!' modifier before the format specifier, regardless of the system's architecture.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\n... input x\n... \n... 10 0 do\n...   x !i-> stack\n... loop\n... \"\"\")\n>>> vm.run({\"x\": np.arange(10, dtype=np.int32)})\n>>> vm.stack\n[0, 16777216, 33554432, 50331648, 67108864, 83886080, 100663296, 117440512, 134217728, 150994944]\n```\n\n----------------------------------------\n\nTITLE: WeightedPoint Mixin Class Implementation\nDESCRIPTION: Demonstrates inheritance of Point behaviors in a WeightedPoint class with custom equality and weighted addition operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/ak.behavior.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@ak.mixin_class(ak.behavior)\nclass WeightedPoint(Point):\n    @ak.mixin_class_method(np.equal, {\"WeightedPoint\"})\n    def weighted_equal(self, other):\n        return np.logical_and(self.point_equal(other), self.weight == other.weight)\n\n    @ak.mixin_class_method(np.add, {\"WeightedPoint\"})\n    def weighted_add(self, other):\n        sumw = self.weight + other.weight\n        return ak.zip(\n            {\n                \"x\": (self.x * self.weight + other.x * other.weight) / sumw,\n                \"y\": (self.y * self.weight + other.y * other.weight) / sumw,\n                \"weight\": sumw,\n            },\n            with_name=\"WeightedPoint\",\n        )\n```\n\n----------------------------------------\n\nTITLE: Importing Awkward and NumPy in Python\nDESCRIPTION: This snippet imports the Awkward and NumPy libraries, which are essential for working with nested, variable-sized data structures and numerical operations in Python.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-cut-mask.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Executing CUDA Kernel on Awkward Arrays\nDESCRIPTION: This code launches the CUDA kernel to process the Awkward Array on the GPU. It allocates memory for the result and calls the kernel with the configured execution parameters.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-numba-cuda.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresult = cp.empty(len(array), dtype=np.float32)\n\npath_length[numblocks, blocksize](result, array)\n\nresult\n```\n\n----------------------------------------\n\nTITLE: Creating List of Variable-Length NumPy Arrays in Python\nDESCRIPTION: Creates a list of NumPy arrays with varying lengths, including an empty array, to demonstrate handling of variable-length data.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\npy_objects = [np.array([1.1, 2.2, 3.3]), np.array([]), np.array([4.4, 5.5])]\npy_objects\n```\n\n----------------------------------------\n\nTITLE: Checking Particle Counts\nDESCRIPTION: Returns the number of electrons and muons in each event using ak.num function.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/thinking-in-arrays.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nak.num(events.electron), ak.num(events.muon)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Import statements for Awkward Array, Pandas, NumPy and URL handling libraries needed for data processing.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-unflatten-group.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport pandas as pd\nimport numpy as np\nfrom urllib.request import urlopen\n```\n\n----------------------------------------\n\nTITLE: Reading and Previewing Compressed Log File in Python\nDESCRIPTION: This snippet demonstrates how to read and preview the first 8 lines of a gzip-compressed log file using Python's built-in libraries.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-strings-read-binary.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport gzip\nimport itertools\nimport pathlib\n\n# Preview logs\nlog_path = pathlib.Path(\"..\", \"samples\", \"Android.head.log.gz\")\nwith gzip.open(log_path, \"rt\") as f:\n    for line in itertools.islice(f, 8):\n        print(line, end=\"\")\n```\n\n----------------------------------------\n\nTITLE: Basic Arithmetic Operations in ForthMachine32\nDESCRIPTION: Examples of basic arithmetic operations (subtraction and multiplication) in ForthMachine32. Shows how values are pushed onto the stack and operations are applied to them.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"3 5 -\")\n>>> vm.run()\n>>> vm.stack\n[-2]\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"3 5 *\")\n>>> vm.run()\n>>> vm.stack\n[15]\n```\n\n----------------------------------------\n\nTITLE: Creating UnmaskedArray in Python\nDESCRIPTION: Creates an UnmaskedArray, which represents formally missing data where no data is actually missing. This is a corner case in the Awkward Array type system for option types.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nlayout = ak.contents.UnmaskedArray(\n    ak.contents.NumpyArray(np.array([1.1, 2.2, 3.3, 4.4, 5.5]))\n)\nlayout\n```\n\n----------------------------------------\n\nTITLE: Converting Awkward Array to Python List\nDESCRIPTION: Shows how to convert the created Awkward Array to a Python list for easier visualization of the data structure.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\narray.to_list()\n```\n\n----------------------------------------\n\nTITLE: Parsing Integer Fields in Avro Schema\nDESCRIPTION: Handles parsing of 'int' and 'long' fields in the Avro schema. It generates code to decode zigzag-encoded integers and append them to the appropriate data structure.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n_exec_code.append(\"\\n\"+\"    \"*ind+\"out = decode_zigzag(inn)\")\n_exec_code.append(\"\\n\"+\"    \"*ind+f\"con['part0-node{count}-data'].append(np.int32(out))\")\n_exec_code.append(\"\\n\"+\"    \"*ind+\"print(out)\")\n```\n\n----------------------------------------\n\nTITLE: Using Combined Modifiers (#!) for Reading in AwkwardForth\nDESCRIPTION: Shows how to combine the '#' and '!' modifiers when reading data, with the modifiers in the correct order (# first, then !).\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\n... input x\n... \n... 10 x #!i-> stack\n... \"\"\")\n>>> vm.run({\"x\": np.arange(10, dtype=np.int32)})\n>>> vm.stack\n[0, 16777216, 33554432, 50331648, 67108864, 83886080, 100663296, 117440512, 134217728, 150994944]\n```\n\n----------------------------------------\n\nTITLE: Initializing PyArrow Array with Nested Data\nDESCRIPTION: Creates a PyArrow array with nested structures containing records and variable-length arrays\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/thinking-in-arrays.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pyarrow as pa\n\narrow_array = pa.array([\n    [{\"x\": 1.1, \"y\": [1]}, {\"x\": 2.2, \"y\": [1, 2]}, {\"x\": 3.3, \"y\": [1, 2, 3]}],\n    [],\n    [{\"x\": 4.4, \"y\": [1, 2, 3, 4]}, {\"x\": 5.5, \"y\": [1, 2, 3, 4, 5]}]\n])\n```\n\n----------------------------------------\n\nTITLE: Applying Cuts to Jagged Arrays in Awkward Array\nDESCRIPTION: Demonstrates how to apply cuts (selections) to jagged arrays using boolean masks and the ak.num function.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/jagged-ragged-awkward-arrays.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nak.num(array)\nak.num(array) > 0\narray[ak.num(array) > 0, 0]\narray[ak.num(array) > 1, 1]\ncut = array * 10 % 2 == 0\narray[cut]\n```\n\n----------------------------------------\n\nTITLE: Creating an EmptyArray\nDESCRIPTION: Shows how to create an EmptyArray, which represents empty arrays with unknown type. It is an identity type and cannot have user-defined parameters.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nak.contents.EmptyArray()\n```\n\n----------------------------------------\n\nTITLE: Creating and Converting Awkward Arrays in Python\nDESCRIPTION: Demonstrates creating Awkward Arrays from various data structures including nested dictionaries and converting them to buffer format. This code shows both creating arrays manually and converting them to/from buffer representations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ntempar = ak.from_buffers(pos,2,con)\n#tempar['ex4']\ntempar.to_list()\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-threaded Processing\nDESCRIPTION: Enables ROOT's implicit multi-threading for parallel processing of data.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-rdataframe.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nROOT.ROOT.EnableImplicitMT()\n```\n\n----------------------------------------\n\nTITLE: NumPy Broadcasting with Fixed Dimensions\nDESCRIPTION: Demonstrates standard NumPy broadcasting with fixed-dimension arrays, showing how dimensions are expanded from the left when arrays have different numbers of dimensions.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-broadcasting.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nx = np.array([\n    [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12],\n])\ny = np.array([\n    [[10, 20, 30, 40], [50, 60, 70, 80], [90, 100, 110, 120]],\n    [[100, 200, 300, 400], [500, 600, 700, 800], [900, 1000, 1100, 1200]],\n])\n\nx + y\n```\n\n----------------------------------------\n\nTITLE: Using check_valid in Awkward Array Constructor in Python\nDESCRIPTION: This snippet demonstrates how to use the check_valid parameter in the ak.Array constructor to ensure array validity during creation.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-checking-validity.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nak.Array(array_is_valid, check_valid=True)\nak.Array(array_is_invalid, check_valid=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Awkward Array\nDESCRIPTION: Initialize a simple Awkward Array with a single field 'x' containing numeric values.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-add-fields.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narray = ak.Array({\"x\": [1, 2, 3]})\narray.show()\n```\n\n----------------------------------------\n\nTITLE: Forth Loop with Incrementing Counter\nDESCRIPTION: Shows how to use the 'i' variable as a loop counter in a do..loop construct to generate a sequence of numbers.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\n... 10 0 do\n...   i\n... loop\n... \"\"\")\n>>> vm.run()\n>>> vm.stack\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n----------------------------------------\n\nTITLE: ForthMachine External Stack Manipulation\nDESCRIPTION: Demonstrates manipulating the ForthMachine stack from outside the Forth program for conditional execution.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"if 123 else 321 then\")\n>>> vm.begin()\n>>> vm.stack\n[]\n>>> vm.stack_push(-1)    # true\n>>> vm.stack\n[-1]\n>>> vm.resume()          # if pops the value and runs the first branch\n>>> vm.stack\n[123]\n>>> vm.begin()\n>>> vm.stack\n[]\n>>> vm.stack_push(0)     # false\n>>> vm.stack\n[0]\n>>> vm.resume()          # if pops the value and runs the second branch\n>>> vm.stack\n[321]\n```\n\n----------------------------------------\n\nTITLE: Creating RecordArray with No Field Names\nDESCRIPTION: Creates a RecordArray with no field names (None instead of an empty list), maintaining the required length parameter.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nak.Array(ak.contents.RecordArray([], None, length=5))\n```\n\n----------------------------------------\n\nTITLE: Handling Enum Protocol Buffer Type in Python\nDESCRIPTION: Processes a protocol buffer 'enum' type by creating an IndexedArray64 containing categorical string data. It sets up the necessary array structures and generates code to decode variable-length integers from the input fields.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nelif file[\"type\"] == \"enum\":\n    #print(file[\"name\"])\n    #print(file[\"type\"],count)\n    aform.append('{{\"class\": \"IndexedArray64\",\"index\": \"i64\",\"content\": {{\"class\": \"ListOffsetArray64\",\"offsets\": \"i64\",\"content\": {{\"class\": \"NumpyArray\",\"primitive\": \"uint8\",\"parameters\": {{\"__array__\": \"char\"}},\"form_key\": \"node{}\"}},\"parameters\": {{\"__array__\": \"string\"}},\"form_key\": \"node{}\"}}, \"parameters\": {{\"__array__\": \"categorical\"}}, \"form_key\": \"node{}\"}},\\n'.format(count+2,count+1,count))\n    var1 = \" 'part0-node{}-index'\".format(count)\n    dec.append(var1)\n    dec.append(\": [],\")\n    tempar = file['symbols']\n    offset, dat = [0] , []\n    prev = 0\n    for i in range(len(tempar)):\n        offset.append(len(tempar[i])+prev)\n        prev = offset[-1]\n    for i in range(len(tempar)):\n        for elem in range(len(tempar[i])):\n            dat.append(elem)\n    var2 = \" 'part0-node{}-offsets': {},\".format(count+1,str(offset))\n    dec.append(var2)\n    var2 = \" 'part0-node{}-data': {},\".format(count+2,str(dat))\n    dec.append(var2)\n    strr.append(\"\\n\"+\"    \"*ind+\"pos, inn = decode_varint(pos,fields)\")\n    strr.append(\"\\n\"+\"    \"*ind+\"out = decode_zigzag(inn)\")\n    strr.append(\"\\n\"+\"    \"*ind+\"con['part0-node{}-index'].append(np.int64(out))\".format(count))\n    strr.append(\"\\n\"+\"    \"*ind+\"print(out)\")\n    return aform,strr,count+2,dec\n```\n\n----------------------------------------\n\nTITLE: Slicing RecordArray with Integer Indices\nDESCRIPTION: Shows how slicing a RecordArray with integer indices creates an IndexedArray for efficiency.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nrecordarray[[3, 2, 4, 4, 1, 0, 3]]\n```\n\n----------------------------------------\n\nTITLE: Creating Object Dtype NumPy Array with Variable-Length Lists in Python\nDESCRIPTION: Creates a NumPy array with dtype=\"O\" containing variable-length lists, including an empty list.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nnp_array_dtype_O = np.array([[1.1, 2.2, 3.3], [], [4.4, 5.5]], dtype=\"O\")\nnp_array_dtype_O\n```\n\n----------------------------------------\n\nTITLE: Printing RDataFrame Column Description\nDESCRIPTION: Displays information about the RDataFrame columns including their types.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-rdataframe.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndf.Describe().Print()\n```\n\n----------------------------------------\n\nTITLE: Creating JSON File Using Shell Command\nDESCRIPTION: Creates a temporary JSON file using echo command to demonstrate file-based conversion.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-json.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n!echo \"[[1.1, 2.2, 3.3], [], [4.4, 5.5]]\" > /tmp/awkward-example-1.json\n```\n\n----------------------------------------\n\nTITLE: Testing Improved Implementation with Various Inputs\nDESCRIPTION: Multiple test cases showing consistent type handling with the improved implementation across different input patterns.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-arraybuilder.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nprocess_data(\n    ak.ArrayBuilder(),\n    [1, 2, 3, 4],\n)\n\nprocess_data(\n    ak.ArrayBuilder(),\n    [-1, -2, -3, -4],\n)\n\nprocess_data(\n    ak.ArrayBuilder(),\n    [1, 2, 3, 4, -1, -2, -3, -4],\n)\n```\n\n----------------------------------------\n\nTITLE: Simple Concatenation of Awkward Arrays\nDESCRIPTION: This example demonstrates how to concatenate two Awkward Arrays with complex nested structures using ak.concatenate.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-concatenate.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narray1 = ak.Array([\n    [{\"x\": 1.1, \"y\": [1]}, {\"x\": 2.2, \"y\": [1, 2]}, {\"x\": 3.3, \"y\": [1, 2, 3]}],\n    [],\n    [{\"x\": 4.4, \"y\": [1, 2, 3, 4]}, {\"x\": 5.5, \"y\": [1, 2, 3, 4, 5]}],\n])\narray2 = ak.Array([\n    [{\"x\": 6.6, \"y\": [1, 2, 3, 4, 5, 6]}],\n    [{\"x\": 7.7, \"y\": [1, 2, 3, 4, 5, 6, 7]}],\n])\n\nak.concatenate([array1, array2])\n```\n\n----------------------------------------\n\nTITLE: Basic For Loop with Awkward Array\nDESCRIPTION: Example of a simple for loop pattern with Awkward Arrays that can be vectorized.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/index.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\noutput = []\nfor x in awkward_array:\n    output.append(compute(x))\n```\n\n----------------------------------------\n\nTITLE: Using if-then Control Structure in AwkwardForth\nDESCRIPTION: Explains the usage of if-then control structure in AwkwardForth, demonstrating conditional execution based on stack values.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"if 1 2 3 4 then\")\n>>> vm.begin()\n>>> vm.stack_push(0)\n>>> vm.resume()\n>>> vm.stack\n[]\n>>> vm.begin()\n>>> vm.stack_push(-1)\n>>> vm.resume()\n>>> vm.stack\n[1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Direct Input to Output Transfer in ForthMachine32\nDESCRIPTION: Demonstrates reading directly from an input buffer to an output buffer, which is faster and preserves more information than going through the stack.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\n... input x\n... output y float64\n... \n... x d-> y\n... x d-> y\n... x d-> y\n... \"\"\")\n>>> vm.run({\"x\": np.array([1.1, 2.2, 3.3])})\n>>> vm[\"y\"]\narray([1.1, 2.2, 3.3])\n```\n\n----------------------------------------\n\nTITLE: Importing Core Data Processing Libraries in Python\nDESCRIPTION: This snippet imports essential libraries for data processing, including NumPy for numerical operations, Pandas for data manipulation, Awkward Arrays for nested data structures, and the struct module for binary data handling.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport awkward as ak\nimport struct\n#data = np.memmap(\"users.avro\", np.uint8)\n```\n\n----------------------------------------\n\nTITLE: Accessing Strings in AwkwardForth using Python\nDESCRIPTION: Demonstrates how to access strings in AwkwardForth using the string_at method and shows the behavior of strings in source code.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> print(vm.string_at(3))\n  extra space   \n>>> vm.string_at(3)\n'  extra space   '\n\n>>> vm.run()\n>>> vm.stack\n[0, 6, 1, 9, 2, 15, 3, 16]\n```\n\n----------------------------------------\n\nTITLE: Inspecting Bytecode in ForthMachine32\nDESCRIPTION: Shows how to inspect and decompile AwkwardForth bytecode, which is stored as ListOffsetArray of 32-bit integers.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> import awkward as ak\n>>> vm = ForthMachine32(\"if 123 else 321 then\")\n>>> vm.bytecodes\n<ListOffsetArray len='3'>\n    <offsets><Index dtype='int64' len='4'>[0 3 5 7]</Index></offsets>\n    <content><NumpyArray dtype='int32' len='7'>[  4  60  61   0 123   0 321]</NumpyArray></content>\n```\n\n----------------------------------------\n\nTITLE: Converting Layout to Python List\nDESCRIPTION: Converts an Awkward Array layout to a Python list representation, providing a familiar view of the data.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nak.to_list(layout)\n```\n\n----------------------------------------\n\nTITLE: Checking UnmaskedArray Type\nDESCRIPTION: Shows how to check the type of an UnmaskedArray, demonstrating that its distinguishing feature is the question mark or 'option' in its type string.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nak.type(layout)\n```\n\n----------------------------------------\n\nTITLE: Building Awkward Array Documentation with Nox\nDESCRIPTION: This command uses nox to run various documentation build steps, including custom Python scripts, Sphinx, and Doxygen to generate browser-viewable documentation.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnox -s docs\n```\n\n----------------------------------------\n\nTITLE: Creating a Valid Awkward Array in Python\nDESCRIPTION: This snippet demonstrates the creation of a valid Awkward Array using nested lists.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-checking-validity.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narray_is_valid = ak.Array([[0, 1, 2], [], [3, 4], [5], [6, 7, 8, 9]])\n```\n\n----------------------------------------\n\nTITLE: Creating and Inspecting an Array of Tuples in Python with Awkward Array\nDESCRIPTION: This snippet shows how to create an array of tuples using Awkward Array and inspect its fields. It demonstrates the difference between tuples and records in field naming and access.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-list-fields.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntuples = ak.Array(\n    [\n        (1, 2, 3),\n        (1, 2, 3),\n    ]\n)\n\nprint(tuples.type)\nak.fields(tuples)\ntuples.fields\ntuples[\"0\"]\ntuples[\"1\"]\n```\n\n----------------------------------------\n\nTITLE: Division by Zero Error in ForthMachine32\nDESCRIPTION: Demonstrates how division by zero is handled as an error state in ForthMachine32, raising a ValueError exception.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"22 0 /\")\n>>> vm.run()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: 'division by zero' in AwkwardForth runtime: tried to divide by zero\n```\n\n----------------------------------------\n\nTITLE: Converting Python Bytestrings to Awkward Array in Python\nDESCRIPTION: Demonstrates converting a list of Python bytestrings to an Awkward Array, which stores them as unencoded bytestrings.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nak.Array([b\"one\", b\"two\", b\"three\", b\"four\"])\n```\n\n----------------------------------------\n\nTITLE: Basic NumPy and Awkward Array Import\nDESCRIPTION: Initial setup importing required libraries for NumPy integration with Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-numpy.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Debugging Output in AwkwardForth\nDESCRIPTION: Shows how to use various AwkwardForth words for printing debug information to standard output, including .\", ., .s, and cr.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32('0 1 2 3 .\" almost there\" cr 4 5 dup . cr .s cr')\n>>> vm.run()\nalmost there\n5 \n<6> 0 1 2 3 4 5 <- top \n>>> vm.stack\n[0, 1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Iterative Data Reading in ForthMachine32\nDESCRIPTION: Demonstrates how to read data iteratively using a loop, processing one item at a time. This approach is more verbose and slower than batch processing.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\n... input x\n... output y float32\n... \n... 1000000 0 do\n...   x d-> y\n... loop\n... \"\"\")\n>>> vm.run({\"x\": np.arange(1000000) * 1.1})\n>>> np.asarray(vm[\"y\"])\narray([0.0000000e+00, 1.1000000e+00, 2.2000000e+00, ..., 1.0999968e+06,\n       1.0999978e+06, 1.0999989e+06], dtype=float32)\n```\n\n----------------------------------------\n\nTITLE: Data Type Default Value Generator\nDESCRIPTION: Function to generate default values for different Avro data types. Handles int, long, float, double, boolean and bytes types.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef dum_dat(dtype):\n    print(dtype)\n    if dtype['type'] == 'int':\n        return \"np.int32(0)\"\n    if dtype['type'] == 'long':\n        return \"np.int64(0)\"\n    if dtype['type'] == 'float':\n        return \"np.float32(0)\"\n    if dtype['type'] == 'double':\n        return \"np.float64(0)\"\n    if dtype['type'] == 'boolean':\n        return \"0\"\n    if dtype['type'] == 'bytes':\n        return \"b'a'\"\n```\n\n----------------------------------------\n\nTITLE: Importing Awkward Array and Version Check\nDESCRIPTION: Basic imports for Awkward Array and version display\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-cpp-cppyy.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nak.__version__\n```\n\n----------------------------------------\n\nTITLE: ArrayBuilder Core Methods in Python\nDESCRIPTION: Core methods for the ArrayBuilder class including array access, iteration, length checking and string representation.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/ak.builder.ArrayBuilder.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nArrayBuilder.__getitem__(where)\nArrayBuilder.__iter__()\nArrayBuilder.__len__()\nArrayBuilder.__repr__()\n```\n\n----------------------------------------\n\nTITLE: Improved ArrayBuilder Implementation\nDESCRIPTION: Enhanced implementation that explicitly handles type inference by exploring all code branches and removing extra entries.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-arraybuilder.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef process_data(builder, data):\n    for item in data:\n        if item < 0:\n            builder.null()\n        else:\n            builder.integer(item)\n\n    # Ensure we have the proper type\n    builder.integer(1)\n    builder.null()\n    return builder.snapshot()[:-2]\n```\n\n----------------------------------------\n\nTITLE: Loading Parquet Metadata with Awkward Array in Python\nDESCRIPTION: Demonstrates how to load metadata from a Parquet file using Awkward Array's metadata_from_parquet function. This allows inspection of the file structure without loading the entire dataset.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/10-minutes-to-awkward-array.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport awkward as ak\n\nmetadata = ak.metadata_from_parquet(\n    \"https://zenodo.org/records/14537442/files/chicago-taxi.parquet\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CMake Macro for Adding Tests\nDESCRIPTION: Creates a macro 'addtest_nolibs' that adds an executable, sets its properties, and creates a test. It takes the test name and filename as parameters.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/header-only/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nmacro(addtest_nolibs name filename)\n  add_executable(${name} ${filename})\n  set_target_properties(\n    ${name}\n    PROPERTIES CXX_VISIBILITY_PRESET hidden\n               VISIBILITY_INLINES_HIDDEN ON\n               CXX_EXTENSIONS NO)\n  add_test(${name} ${name})\nendmacro(addtest_nolibs)\n```\n\n----------------------------------------\n\nTITLE: ArrayBuilder Utility Methods in Python\nDESCRIPTION: Utility methods for managing and manipulating the array builder including clearing, snapshots, and type operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/ak.builder.ArrayBuilder.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nArrayBuilder.clear()\nArrayBuilder.snapshot()\nArrayBuilder.type(arg0)\nArrayBuilder.field(arg0)\nArrayBuilder.fromiter(arg0)\nArrayBuilder.index(arg0)\n```\n\n----------------------------------------\n\nTITLE: Array Slicing on GPU\nDESCRIPTION: Demonstrates array slicing operations on GPU-resident data.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-gpu.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\narray_gpu[100:]\n```\n\n----------------------------------------\n\nTITLE: Result Validation\nDESCRIPTION: Verifies that C++ and Python implementations produce the same result\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-cpp-cppyy.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nassert out == ak.sum(array[\"y\"])\n```\n\n----------------------------------------\n\nTITLE: Broadcasting with Incompatible Array Shapes\nDESCRIPTION: Shows an example of broadcasting failure when arrays have incompatible shapes - the first array has two lists while the second has three elements, causing a broadcasting error.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-broadcasting.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\narray1 = ak.Array([[1, 2, 3], [4, 5]])\narray2 = ak.Array([10, 20, 30])\n\narray1 + array2\n```\n\n----------------------------------------\n\nTITLE: Installing Awkward Array via pip\nDESCRIPTION: Command to install the Awkward Array package using pip package manager.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install awkward\n```\n\n----------------------------------------\n\nTITLE: Handling Input Data in ForthMachine32\nDESCRIPTION: Shows how to work with input data in AwkwardForth, using NumPy arrays as input sources and reading integers.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> vm = ForthMachine32(\"input x    x i-> stack\")\n>>> vm.run({\"x\": np.array([3, 2, 1], np.int32)})\n>>> vm.stack\n[3]\n>>> vm.input_position(\"x\")\n4\n```\n\n----------------------------------------\n\nTITLE: Division Operations in ForthMachine32\nDESCRIPTION: Demonstrates how Forth performs floor division like Python, rounding negative values toward minus infinity. Shows examples with positive and negative numbers.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"22 7 /\")\n>>> vm.run()\n>>> vm.stack\n[3]\n>>> vm = ForthMachine32(\"-22 7 /\")\n>>> vm.run()\n>>> vm.stack\n[-4]\n```\n\n----------------------------------------\n\nTITLE: Initializing Variables and Preparing for Protocol Buffer Processing in Python\nDESCRIPTION: Initializes variables for processing Protocol Buffer data, including setting up stringification buffers, form arrays, and declarations. It calls the main recursive function to generate code and array forms for the schema.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nind = 1\nstrr = [\"data = np.memmap(\\\"{}\\\", np.uint8)\\nfields = data[{}:]\\npos=0\\n\",'''def decode_varint(pos, data):\n     shift = 0\n     result = 0\n     while True:\n         i = data[pos]\n         pos += 1\n         result |= (i & 0x7f) << shift\n         shift += 7\n         if not (i & 0x80):\n             break\n     return pos, result\\n\ndef decode_zigzag(n):\n     return (n >> 1) ^ (-(n & 1))\\n\\n''',\"while pos+16 != len(fields):\".format(aa.file_name,aa.field[0][0])]\n#for i in range(2)\naform = []\ndec = [\"import struct\\nimport numpy \\n\", 'con = {']\nform,strr,count,dec = rec_exp_json_code(aa.schema,aa._data[aa.field[0][0]:aa.field[0][1]],pos,strr,ind,aform,0,dec)\ndec.append(\"}\")\ndec.append(\"\\n\")\nbb = \"\".join(dec)\ncc = \"\".join(strr)\nprint(\"\".join(dec))\n```\n\n----------------------------------------\n\nTITLE: Installing Core Awkward Package\nDESCRIPTION: Command for performing an editable installation of the pure-Python awkward package after awkward-cpp is installed.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Dependencies\nDESCRIPTION: Finds required Python components including interpreter, development modules, NumPy, Cython, and Python extensions.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/header-only/examples/cython/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Python REQUIRED COMPONENTS Interpreter Development.Module NumPy)\nfind_package(Cython REQUIRED)\nfind_package(PythonExtensions REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Indexing with Empty Lists\nDESCRIPTION: Shows indexing behavior when using empty lists instead of None values.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-filter-masked.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\narray[\n    [\n        [0, 1],\n        [],\n        [],\n        [2],\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Custom Avro File Reader Implementation\nDESCRIPTION: Implements a custom Avro file reader class with methods for decoding blocks and handling various data types.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass read_avro:\n    def __init__(self,file_name):\n        self.file_name = file_name\n        self._data = np.memmap(file_name, np.uint8)\n        self.field = []\n        _data = self._data\n        if not self.check_valid():\n            raise\n        pos, self.pairs = self.decode_varint(4, self._data)\n        self.pairs = self.decode_zigzag(self.pairs)\n        pos = self.cont_spec(pos)\n        pos = self.decode_block(pos)\n        tempos = pos\n        ind = 2\n        _exec_code = [f\"data = np.memmap(\\\"{self.file_name}\\\", np.uint8)\\npos=0\\n\",'''def decode_varint(pos, data):\\n\\tshift = 0\\n\\tresult = 0\\n\\twhile True:\\n\\t\\ti = data[pos]\\n\\t\\tpos += 1\\n\\t\\tresult |= (i & 0x7f) << shift\\n\\t\\tshift += 7\\n\\t\\tif not (i & 0x80):\\n\\t\\t\\tbreak\\n\\treturn pos, result\\ndef decode_zigzag(n):\\n\\treturn (n >> 1) ^ (-(n & 1))\\n\\n''',f\"field = {str(self.field)}\\n\",f\"for i in range({len(self.field)}):\\n\",\"    fields = data[field[i][0]:field[i][1]]\\n\",\"    while pos != len(fields):\"]\n        aform = []\n        dec = [\"import struct\\nimport numpy \\n\", 'con = {']\n        self.form,self._exec_code,self.count,dec = self.rec_exp_json_code(self.schema,_exec_code,ind,aform,0,dec)\n        dec.append(\"}\")\n        dec.append(\"\\n\")\n        head = \"\".join(dec)\n        body = \"\".join(self._exec_code)\n        loc = {}\n        exec(\"\".join(head+body),globals(),loc)\n        self.form = json.loads(\"\".join(self.form)[:-2])\n        con = loc['con']\n        for key in con.keys():\n            con[key] = np.array(con[key])\n        self.outarr = ak.from_buffers(self.form,2,con)\n```\n\n----------------------------------------\n\nTITLE: Fetching Awkward Array Headers\nDESCRIPTION: Downloads and configures Awkward Array headers from GitHub releases using FetchContent.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/header-only/examples/cython/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(FetchContent)\nset(AWKWARD_VERSION \"v2.4.3\")\nFetchContent_Declare(\n  awkward-headers\n  URL https://github.com/scikit-hep/awkward/releases/download/${AWKWARD_VERSION}/header-only.zip\n)\nFetchContent_GetProperties(awkward-headers)\nif(NOT awkward-headers_POPULATED)\n  FetchContent_Populate(awkward-headers)\n  add_subdirectory(${awkward-headers_SOURCE_DIR} ${awkward-headers_BINARY_DIR}\n                   EXCLUDE_FROM_ALL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Importing Awkward Array and NumPy in Python\nDESCRIPTION: This snippet shows how to import the Awkward Array library and NumPy, which are required for the subsequent examples.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-lists.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Testing Pattern Match with re Module\nDESCRIPTION: Demonstrates pattern matching on a single log line using Python's re module to verify the regular expression pattern.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-strings-extract-substrings.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport re\n\nmatch = re.match(pattern, lines[0])\nmatch.groupdict()\n```\n\n----------------------------------------\n\nTITLE: Accessing Array C++ Type\nDESCRIPTION: Demonstrates how to access the C++ type of an Awkward Array\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-cpp-cppyy.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\narray.cpp_type\n```\n\n----------------------------------------\n\nTITLE: Converting Awkward Array of Bytestrings to Python List in Python\nDESCRIPTION: Shows how to convert an Awkward Array of bytestrings back to a Python list using the to_list() method.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nak.Array([b\"one\", b\"two\", b\"three\", b\"four\"]).to_list()\n```\n\n----------------------------------------\n\nTITLE: Recursive JSON Code Generator\nDESCRIPTION: Complex function for recursively generating JSON code from Avro schema types. Handles multiple data types including records, strings, numbers, and arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef rec_exp_json_code(file,fields,pos,strr,ind,aform,count,dec):\n    if file[\"type\"] == \"null\":\n        return aform,strr,count,dec\n    \n    elif file[\"type\"] == \"record\":\n        temp = count\n        aform.append( '{\"class\" : \"RecordArray\",') \n        aform.append('\"contents\": {\\n')\n        for elem in file[\"fields\"]:\n            aform.append('\"'+elem[\"name\"]+'\"'+\": \")\n            aform,strr,count,dec = rec_exp_json_code(elem,fields,pos,strr,ind,aform,count+1,dec)\n        aform.append( '}}},\"form_key\": \"node{}\"}}},\\n'.format(temp))\n        return aform,strr,count,dec\n\n    # ... additional type handling code ...\n```\n\n----------------------------------------\n\nTITLE: Record Builder Type Definitions\nDESCRIPTION: Type aliases for Record Builder and Record Field templates\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-header-only-layoutbuilder.md#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<class... BUILDERS>\nusing RecordBuilder = awkward::LayoutBuilder::Record<UserDefinedMap, BUILDERS...>;\n\ntemplate<std::size_t field_name, class BUILDER>\nusing RecordField = awkward::LayoutBuilder::Field<field_name, BUILDER>;\n```\n\n----------------------------------------\n\nTITLE: ForthMachine Pause with User-Defined Words\nDESCRIPTION: Shows interaction between pause mechanism and user-defined word execution.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\": callme 123 pause 321 ; 1 2 pause 3 4\")\n>>> vm.run()\n>>> vm.stack\n[1, 2]\n>>> vm.call(\"callme\")\n>>> vm.stack\n[1, 2, 123]\n>>> vm.resume()\n>>> vm.stack\n[1, 2, 123, 321]\n>>> vm.resume()\n>>> vm.stack\n[1, 2, 123, 321, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Building Python Extension Module\nDESCRIPTION: Configures the build process for a Python extension module using Cython and C++, linking with Awkward Array and NumPy.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/header-only/examples/cython/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_cython_target(_demo _demo.pyx PY3 CXX)\nadd_python_library(\n  _demo\n  MODULE\n  SOURCES\n  ${_demo}\n  demo_impl.cpp\n  LINK_LIBRARIES\n  awkward::layout-builder\n  Python::NumPy\n  INCLUDE_DIRECTORIES\n  include)\npython_extension_module(_demo)\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies with Version Constraints\nDESCRIPTION: Specifies required Python packages and their minimum versions. Includes platform-specific requirements for fsspec and pandas (non-Windows), and testing dependencies like pytest with associated plugins.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/requirements-test-nogil.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfsspec>=2022.11.0;sys_platform != \"win32\"\npandas>=0.24.0;sys_platform != \"win32\"\npytest>=6\npytest-cov\npytest-xdist\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Test Executables\nDESCRIPTION: Links the appropriate Awkward libraries to each test executable using target_link_libraries. Each test is linked to its corresponding Awkward component.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/header-only/tests/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(test_1494-layout-builder PRIVATE awkward::layout-builder)\ntarget_link_libraries(test_1542-growable-buffer\n                      PRIVATE awkward::growable-buffer)\ntarget_link_libraries(test_1560-builder-options\n                      PRIVATE awkward::builder-options)\ntarget_link_libraries(test_3091-layout-builder-is-valid\n                      PRIVATE awkward::layout-builder)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Nested Assignment Example\nDESCRIPTION: Demonstrates an incorrect way to assign nested fields that doesn't work due to array copying behavior.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-add-fields.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nnested[\"a\"][\"y\"] = 2 * nested.a.x  # does not work, nested[\"a\"] is a copy!\nnested.show()\n```\n\n----------------------------------------\n\nTITLE: Parsing Union Types in Avro Schema\nDESCRIPTION: Handles parsing of union types in the Avro schema. It generates code to handle different possible types, including null values, and creates appropriate masked arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n_exec_code.append(\"\\n\"+\"    \"*ind+\"pos, inn = decode_varint(pos,fields)\")\n_exec_code.append(\"\\n\"+\"    \"*ind+\"out = abs(decode_zigzag(inn))\")\n_exec_code.append(\"\\n\"+\"    \"*ind+\"print(\\\"index :\\\",out)\")\n# ... (additional code for handling different union types)\n```\n\n----------------------------------------\n\nTITLE: Parsing Fixed-Length Fields in Avro Schema\nDESCRIPTION: Handles parsing of fixed-length fields in the Avro schema. It generates code to read a fixed number of bytes and append them to the appropriate data structure.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n_exec_code.append(\"\\n\"+\"    \"*ind+\"lenn = {}\".format(file[\"size\"]))\n_exec_code.append(\"\\n\"+\"    \"*ind+\"print(fields[pos:pos+lenn].tobytes())\")\n_exec_code.append(\"\\n\"+\"    \"*ind+\"for i in range(lenn):\")\n_exec_code.append(\"\\n\"+\"    \"*(ind+1)+f\"con['part0-node{count+1}-data'].append(np.uint8(fields[i]))\")\n_exec_code.append(\"\\n\"+\"    \"*ind+\"pos = pos+lenn\")\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Awkward Array Operations\nDESCRIPTION: This snippet imports the necessary libraries for working with Awkward Arrays, NumPy, and Pandas.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-concatenate.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\nimport pandas as pd\n```\n\n----------------------------------------\n\nTITLE: Complex Avro Schema Definition and Writing\nDESCRIPTION: Defines a complex Avro schema with multiple data types and writes sample records to a file.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom avro.datafile import DataFileWriter, DataFileReader\nfrom avro.io import DatumWriter, DatumReader\nimport avro\nschema = {\n    'name': 'avro.example.User',\n    'type': 'record',\n    'fields': [\n        {'name': 'name', 'type': 'string'},\n        {'name': 'ex4', 'type': 'bytes'},\n        {\"name\": \"ex3\", \"type\": {\"type\": \"fixed\", \"size\": 13, \"name\": \"ex3\"}},\n        {'name': 'hair', 'type': 'boolean', 'default': True},\n        {'name': 'ex', 'type': 'float'},\n        {'name': 'ex2', 'type': 'double'},\n        {'name': 'age', 'type': {'type': 'int'}},\n        {\"name\": \"Numbers\", \"type\": { \"type\" : \"enum\",  \"name\" : \"Numbers\", \"namespace\": \"data\", \"symbols\" : [ \"ONE\", \"TWO\", \"THREE\", \"FOUR\" ]}},\n        {'name': 'nums', 'type': {\n                \"type\": \"array\",  \n                \"items\": 'long'}},\n        { \"name\" : \"experience\", \"type\": [\"int\", \"null\"] },\n    ]\n}\nschema_parsed = avro.schema.Parse(json.dumps(schema))\nwith open('users.avro', 'wb') as f:\n    writer = DataFileWriter(f, DatumWriter(), schema_parsed)\n    writer.append({'name': 'Pierre-Simon Laplace','ex4': bytes(\"hello\",'utf-8'),'ex3': b\"like this one\",'hair': False,'age': 77, 'ex': 1.3435,'ex2': 4.4235,'Numbers': 'TWO', 'nums': [43,12], 'experience': 88})\n    writer.append({'name': 'John von Neumann','ex4': bytes(\"help\",'utf-8'),'ex3': b\"like this one\",'hair': True,'age': 53, 'ex': 5.123142134, 'ex2': 1.34535,'Numbers': 'THREE', 'nums': [57,23,4522]})\n    writer.close()\n```\n\n----------------------------------------\n\nTITLE: Using case-of-endof-endcase in AwkwardForth\nDESCRIPTION: Demonstrates the use of case-of-endof-endcase control structure in AwkwardForth for multi-way branching, similar to a switch statement in other languages.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\n... case\n...   1 of .\" one\" cr endof\n...   2 of .\" two\" cr endof\n...   3 of .\" three\" cr endof\n...        .\" something else\" cr\n... endcase\n... \"\"\")\n>>> vm.begin()\n>>> vm.stack_push(0)\n>>> vm.resume()\nsomething else\n>>> vm.begin()\n>>> vm.stack_push(1)\n>>> vm.resume()\none\n>>> vm.begin()\n>>> vm.stack_push(2)\n>>> vm.resume()\ntwo\n>>> vm.begin()\n>>> vm.stack_push(3)\n>>> vm.resume()\nthree\n>>> vm.begin()\n>>> vm.stack_push(4)\n>>> vm.resume()\nsomething else\n```\n\n----------------------------------------\n\nTITLE: Parsing Float and Double Fields in Avro Schema\nDESCRIPTION: Handles parsing of 'float' and 'double' fields in the Avro schema. It generates code to unpack binary data into floating-point numbers using struct.Struct.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n_exec_code.append(\"\\n\"+\"    \"*ind+\"print(struct.Struct(\\\"<f\\\").unpack(fields[pos:pos+4].tobytes())[0])\")\n_exec_code.append(\"\\n\"+\"    \"*ind+f\"con['part0-node{count}-data'].append(np.float32(struct.Struct(\\\"<f\\\").unpack(fields[pos:pos+4].tobytes())[0]))\")\n_exec_code.append(\"\\n\"+\"    \"*ind+\"pos = pos+4\")\n```\n\n----------------------------------------\n\nTITLE: Reading Avro Files\nDESCRIPTION: Basic Avro file reading operations showing header and schema access\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\naa = read_avro(\"users1.avro\")\naa.form\n```\n\nLANGUAGE: python\nCODE:\n```\naa = read_header(\"users1.avro\")\naa.schema\n```\n\n----------------------------------------\n\nTITLE: ForthMachine User-Defined Word Execution\nDESCRIPTION: Demonstrates defining and calling custom words in ForthMachine.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\": callme 1 2 3 4 ;\")\n>>> vm.call(\"callme\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: 'not ready' in AwkwardForth runtime: call 'begin' before 'step' or 'resume' (note: check 'is_ready')\n>>> vm.run()\n>>> vm.stack\n[]\n>>> vm.call(\"callme\")\n>>> vm.stack\n[1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Preparing Generated Data Files for Awkward Array Documentation\nDESCRIPTION: This command uses nox to prepare the generated data files required for building the documentation. It can be run with specific flags for headers and docs.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnox -s prepare\n```\n\nLANGUAGE: bash\nCODE:\n```\nnox -s prepare -- --docs --headers\n```\n\n----------------------------------------\n\nTITLE: Including Layout Builder Header\nDESCRIPTION: Include directive for the main Layout Builder header file\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-header-only-layoutbuilder.md#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"awkward/LayoutBuilder.h\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation and Export Configuration in CMake\nDESCRIPTION: Configures the installation of targets, export of CMake targets, and generation of package version file for the project.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/header-only/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(\n  TARGETS layout-builder growable-buffer builder-options\n  EXPORT ${PROJECT_NAME}Targets\n  INCLUDES\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\ninstall(\n  EXPORT ${PROJECT_NAME}Targets\n  FILE ${PROJECT_NAME}Config.cmake\n  NAMESPACE ${NAMESPACE}\n  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})\ninclude(CMakePackageConfigHelpers)\nwrite_basic_package_version_file(\n  ${PROJECT_NAME}ConfigVersion.cmake\n  VERSION ${PROJECT_VERSION}\n  COMPATIBILITY AnyNewerVersion)\n```\n\n----------------------------------------\n\nTITLE: Numba Integration: Property Addition\nDESCRIPTION: Shows how to add a property to records in Numba-compiled code using behavior hooks.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/ak.behavior.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef lower(context, builder, sig, args):\n    return context.compile_internal(builder, function, sig, args)\n```\n\n----------------------------------------\n\nTITLE: Parsing Bytes Fields in Avro Schema\nDESCRIPTION: Handles parsing of 'bytes' fields in the Avro schema. It generates code to decode variable-length byte arrays and append them to the appropriate data structure.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n_exec_code.append(\"\\n\"+\"    \"*ind+\"pos, inn = decode_varint(pos,fields)\")\n_exec_code.append(\"\\n\"+\"    \"*ind+\"out = decode_zigzag(inn)\")\n_exec_code.append(\"\\n\"+\"    \"*ind+f\"con['part0-node{count}-offsets'].append(out+con['part0-node{count}-offsets'][-1])\")\n_exec_code.append(\"\\n\"+\"    \"*ind+\"print(fields[pos:pos+out].tobytes())\")\n_exec_code.append(\"\\n\"+\"    \"*ind+f\"con['part0-node{count+1}-data'].append(fields[pos:pos+out].tobytes())\")\n_exec_code.append(\"\\n\"+\"    \"*ind+\"pos = pos+out\")\n```\n\n----------------------------------------\n\nTITLE: Importing Avro Libraries for File Handling in Python\nDESCRIPTION: This snippet imports specific modules from the Avro library for reading and writing Avro data files. It includes DataFileWriter and DataFileReader for file operations, and DatumWriter and DatumReader for handling individual data records.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom avro.datafile import DataFileWriter, DataFileReader\nfrom avro.io import DatumWriter, DatumReader\nimport avro\n# {\n#        'name': 'avro.example.User',\n#    'type': 'record',\n```\n\n----------------------------------------\n\nTITLE: Handling Array Protocol Buffer Type in Python\nDESCRIPTION: Processes a protocol buffer 'array' type by creating a ListOffsetArray64 structure. It recursively processes the array items and generates code to decode variable-length integers for array sizes and validate termination markers.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nelif file[\"type\"] == \"array\":\n    #print(file[\"name\"])\n    temp = count\n    var1 = \" 'part0-node{}-offsets'\".format(count)\n    dec.append(var1)\n    dec.append(\": [0],\")\n    aform.append('{\"class\": \"ListOffsetArray64\",\"offsets\": \"i64\",\"content\": ')\n    strr.append(\"\\n\"+\"    \"*ind+\"pos, inn = decode_varint(pos,fields)\")\n    strr.append(\"\\n\"+\"    \"*ind+\"out = decode_zigzag(inn)\")\n    strr.append(\"\\n\"+\"    \"*ind+\"print(\\\"length\\\",out)\")\n    strr.append(\"\\n\"+\"    \"*ind+\"con['part0-node{}-offsets'].append(out+con['part0-node{}-offsets'][-1])\".format(count,count))\n    strr.append(\"\\n\"+\"    \"*ind+\"for i in range(out):\")\n    aform,strr,count,dec = rec_exp_json_code({\"type\": file[\"items\"]},fields,pos,strr,ind+1,aform,count+1,dec)\n    strr.append(\"\\n\"+\"    \"*ind+\"pos, inn = decode_varint(pos,fields)\")\n    strr.append(\"\\n\"+\"    \"*ind+\"out = decode_zigzag(inn)\")\n    strr.append(\"\\n\"+\"    \"*ind+'''if out != 0:''')\n    strr.append(\"\\n\"+\"    \"*(ind+1)+\"raise\")\n    aform.append( '\"form_key\": \"node{}\"}},\\n'.format(temp))\n    return aform,strr,count,dec\n```\n\n----------------------------------------\n\nTITLE: Writing Nested Array Data to Avro File\nDESCRIPTION: Creates and writes nested array data to an Avro file using a defined schema for string arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nschema = {'name': 'nums',\n                \"type\": \"array\",  \n                \"items\": {'name': 'nums1',\n                \"type\": \"array\",  \n                \"items\": 'string'}}\nschema_parsed = avro.schema.Parse(json.dumps(schema))\nwith open('users1.avro', 'wb') as f:\n    writer = DataFileWriter(f, DatumWriter(), schema_parsed)\n    writer.append([[\"fefef\"],[\"egege\"]])\n    writer.append([[\"Agee\",\"aegeg\"],[\"gr4gw\"]])\n    writer.close()\n```\n\n----------------------------------------\n\nTITLE: ForthMachine Step-by-Step Debugging\nDESCRIPTION: Shows how to step through ForthMachine execution one instruction at a time for debugging purposes.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"3 5 +\")\n>>> vm.begin()\n>>> vm.stack\n[]\n>>> vm.step()\n>>> vm.stack\n[3]\n>>> vm.step()\n>>> vm.stack\n[3, 5]\n>>> vm.step()\n>>> vm.stack\n[8]\n```\n\n----------------------------------------\n\nTITLE: Converting List of NumPy Arrays to Awkward Array in Python\nDESCRIPTION: Demonstrates the conversion of a list containing NumPy arrays to an Awkward Array, which results in an array of variable-length lists.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nak.Array(py_objects)\n```\n\n----------------------------------------\n\nTITLE: Configuring CUDA Kernel Execution Parameters\nDESCRIPTION: This snippet calculates the number of blocks and threads per block for CUDA kernel execution. It ensures efficient utilization of GPU resources based on the input array size.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-numba-cuda.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nblocksize = 256\nnumblocks = (N + blocksize - 1) // blocksize\n```\n\n----------------------------------------\n\nTITLE: Reading int32 Values as int16 in AwkwardForth\nDESCRIPTION: Example of reading int32 values from input as though they were int16 values, showing how the choice of format affects interpretation regardless of the actual data type.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\n... input x\n... \n... 10 0 do\n...   x h-> stack\n... loop\n... \"\"\")\n>>> vm.run({\"x\": np.arange(5, dtype=np.int32)})\n>>> vm.stack\n[0, 0, 1, 0, 2, 0, 3, 0, 4, 0]\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Bindings for Awkward C++\nDESCRIPTION: Sets up the build and installation process for Python bindings. This includes finding Python and pybind11 dependencies, building the extension module, and installing Python source files.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/awkward-cpp/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Third tier: Python modules.\nfind_package(Python REQUIRED COMPONENTS Interpreter Development.Module)\nfind_package(pybind11 CONFIG REQUIRED)\n\n# Install python bindings\nfile(GLOB LAYOUT_SOURCES \"src/python/*.cpp\")\npybind11_add_module(_ext MODULE ${LAYOUT_SOURCES})\ntarget_link_libraries(_ext PRIVATE awkward)\nset_target_properties(\n  _ext\n  PROPERTIES CXX_VISIBILITY_PRESET hidden\n             VISIBILITY_INLINES_HIDDEN ON\n             CXX_EXTENSIONS NO)\n\n# Install pure-python files\nfile(GLOB_RECURSE PYTHON_SOURCES \"src/${SKBUILD_PROJECT_NAME}/*.py\")\n\ninstall(\n  TARGETS awkward awkward-parent awkward-cpu-kernels _ext\n  LIBRARY DESTINATION \"${SKBUILD_PROJECT_NAME}/lib\"\n  RUNTIME DESTINATION \"${SKBUILD_PROJECT_NAME}/lib\"\n  ARCHIVE DESTINATION \"${SKBUILD_PROJECT_NAME}/lib\")\n\ninstall(FILES ${PYTHON_SOURCES} DESTINATION ${SKBUILD_PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Basic setup to import Awkward Array and NumPy libraries for array operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-reducing.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Cleaning Generated Awkward Array Documentation Files\nDESCRIPTION: This command removes all files that were generated to create viewable documentation, allowing for a clean rebuild.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/CONTRIBUTING.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf docs/reference/generated docs/_build docs/_static/doxygen\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suite Build in CMake\nDESCRIPTION: Conditionally adds the test suite subdirectory if the BUILD_TESTS option is enabled.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/header-only/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTS)\n  add_subdirectory(tests)\nendif(BUILD_TESTS)\n```\n\n----------------------------------------\n\nTITLE: Handling Fixed-Size Array Protocol Buffer Type in Python\nDESCRIPTION: Processes a protocol buffer 'fixed' type by generating Awkward Array form specifications and code to extract and convert the data. It creates a RegularArray containing a NumpyArray of uint8 values with the specified size.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nelif file[\"type\"] == \"fixed\":\n    #print(file[\"type\"],count)\n    var1 = \" 'part0-node{}-data'\".format(count+1)\n    dec.append(var1)\n    dec.append(\": [],\")\n    aform.append('{{\"class\": \"RegularArray\",\"content\": {{\"class\": \"NumpyArray\",\"primitive\": \"uint8\",\"form_key\": \"node{}\"}},\"size\": {},\"form_key\": \"node{}\"}},\\n'.format(count+1,file[\"size\"],count))\n    strr.append(\"\\n\"+\"    \"*ind+\"lenn = {}\".format(file[\"size\"]))\n    strr.append(\"\\n\"+\"    \"*ind+\"print(fields[pos:pos+lenn].tobytes())\")\n    strr.append(\"\\n\"+\"    \"*ind+\"for i in range(lenn):\")\n    strr.append(\"\\n\"+\"    \"*(ind+1)+\"con['part0-node{}-data'].append(np.uint8(fields[i]))\".format(count+1))\n    strr.append(\"\\n\"+\"    \"*ind+\"pos = pos+lenn\")\n    return aform,strr,count+1,dec\n```\n\n----------------------------------------\n\nTITLE: Dependencies for Awkward Array Development\nDESCRIPTION: Specifies required Python packages with version constraints for development and testing. Includes NumPy with an upper version bound, and pytest packages for testing capabilities.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/requirements-test-numpy1.txt#2025-04-21_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nnumpy<2.0.0\npytest>=6\npytest-cov\npytest-xdist\n```\n\n----------------------------------------\n\nTITLE: Developer Installation Commands\nDESCRIPTION: Series of commands for setting up a development environment for Awkward Array, including cloning the repository and installing dependencies.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recursive https://github.com/scikit-hep/awkward.git\ncd awkward\n\nnox -s prepare\npython -m pip install -v ./awkward-cpp\npython -m pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Running Kernel Unit Tests\nDESCRIPTION: Commands for running detailed unit tests for Python, CPU, and CUDA kernels.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython -m pytest -n auto awkward-cpp/tests-spec-explicit\npython -m pytest -n auto awkward-cpp/tests-cpu-kernels-explicit\npython -m pytest tests-cuda-kernels-explicit\n```\n\n----------------------------------------\n\nTITLE: Initializing ForthMachine Types in Python\nDESCRIPTION: Shows how to import and access the two main ForthMachine types (32-bit and 64-bit) available in Python through pybind11 bindings.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from awkward.forth import ForthMachine32\n>>> from awkward.forth import ForthMachine64\n```\n\n----------------------------------------\n\nTITLE: Configuring JAX for CPU Usage in Python\nDESCRIPTION: This snippet configures JAX to use only the CPU for computations. This is necessary for running the notebook on a CPU-only environment.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-specialize-differentiate-jax.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport jax\njax.config.update(\"jax_platform_name\", \"cpu\")\n```\n\n----------------------------------------\n\nTITLE: Batch Data Reading in ForthMachine32\nDESCRIPTION: Shows how to read data in batch mode using the #d-> operation, which is faster than iterative reading as it involves fewer Forth instructions and uses memcpy.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\n... input x\n... output y float32\n... \n... 1000000 x #d-> y\n... \"\"\")\n>>> vm.run({\"x\": np.arange(1000000) * 1.1})\n>>> np.asarray(vm[\"y\"])\narray([0.0000000e+00, 1.1000000e+00, 2.2000000e+00, ..., 1.0999968e+06,\n       1.0999978e+06, 1.0999989e+06], dtype=float32)\n```\n\n----------------------------------------\n\nTITLE: Defining Component Addition Macro in CMake\nDESCRIPTION: Creates a macro 'add_component' to simplify the process of adding new components to the project. It sets up the library, alias, include directories, and installation paths for each component.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/header-only/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nmacro(add_component name)\n  add_library(${name} INTERFACE)\n  add_library(${NAMESPACE}${name} ALIAS ${name})\n  target_include_directories(\n    ${name} INTERFACE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${name}>\n                      $<INSTALL_INTERFACE:include/${name}>)\n  target_compile_features(${name} INTERFACE cxx_std_17)\n\n  install(DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/${name}/awkward\"\n          DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/${name}\")\nendmacro(add_component)\n```\n\n----------------------------------------\n\nTITLE: Importing Awkward Array and NumPy in Python\nDESCRIPTION: Import statements for Awkward Array and NumPy libraries, which are essential for the array operations demonstrated in this guide.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-combinatorics-cartesian-combinations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Jupytext\nDESCRIPTION: Configuration metadata for Jupytext document conversion, specifying file format settings and Python kernel information.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-cpp.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\njupytext:\n  text_representation:\n    extension: .md\n    format_name: myst\n    format_version: 0.13\n    jupytext_version: 1.10.3\nkernelspec:\n  display_name: Python 3\n  language: python\n  name: python3\n---\n```\n\n----------------------------------------\n\nTITLE: Importing cppyy and Version Check\nDESCRIPTION: Import cppyy module and display version\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-cpp-cppyy.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport cppyy\ncppyy.__version__\n```\n\n----------------------------------------\n\nTITLE: Parsing Array Fields in Avro Schema\nDESCRIPTION: Handles parsing of array fields in the Avro schema. It generates code to handle variable-length arrays and recursively process their elements.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n_exec_code.append(\"\\n\"+\"    \"*ind+\"pos, inn = decode_varint(pos,fields)\")\n_exec_code.append(\"\\n\"+\"    \"*ind+\"out = decode_zigzag(inn)\")\n_exec_code.append(\"\\n\"+\"    \"*ind+\"print(\\\"length\\\",out)\")\n_exec_code.append(\"\\n\"+\"    \"*ind+f\"con['part0-node{count}-offsets'].append(out+con['part0-node{count}-offsets'][-1])\")\n_exec_code.append(\"\\n\"+\"    \"*ind+\"for i in range(out):\")\n# ... (recursive call for processing array elements)\n```\n\n----------------------------------------\n\nTITLE: Installing Awkward with conda\nDESCRIPTION: Command to install the Awkward package using conda or mamba package managers from the conda-forge channel.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge awkward\n```\n\n----------------------------------------\n\nTITLE: Installing Awkward Array via conda\nDESCRIPTION: Command to install the Awkward Array package using conda package manager from conda-forge channel.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge awkward\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Awkward C++\nDESCRIPTION: Sets up the CMake project with version requirements, project name, and language specifications. It also checks for required build artifacts and sets up RPATH for built libraries.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/awkward-cpp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15...3.30)\n\nif(NOT DEFINED SKBUILD)\n  set(SKBUILD_PROJECT_NAME awkward_cpp)\n  set(SKBUILD_PROJECT_VERSION 0.0.0)\nendif()\n\nproject(\n  ${SKBUILD_PROJECT_NAME}\n  LANGUAGES CXX\n  VERSION ${SKBUILD_PROJECT_VERSION})\n\n# Check for header-only libraries\nif(NOT (EXISTS \"header-only\" AND EXISTS \"include/awkward/kernels.h\"))\n  message(\n    FATAL_ERROR\n      \"\\awkward-cpp relies upon generated and copied artefacts such as the header-only libraries and generated kernel headers. \\These could not be found, which indicates that\\n\\n    nox -s prepare\\n\\nwas skipped or failed. \\Please check https://github.com/scikit-hep/awkward#installation-for-developers to learn more about this process.\\\"\n  )\nendif()\n\n# Setup the RPATH for built libraries\nset(CMAKE_BUILD_RPATH_USE_ORIGIN TRUE)\nif(APPLE)\n  set(CMAKE_INSTALL_RPATH \"@loader_path\")\nelse()\n  set(CMAKE_INSTALL_RPATH \"\\$ORIGIN\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing the Pybind11 Awkward Array Demo Library\nDESCRIPTION: Command to install the demo library using pip. This step is necessary before running the demo function.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/header-only/examples/pybind11/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install .\n```\n\n----------------------------------------\n\nTITLE: Basic ArrayBuilder Usage with Positive Integers\nDESCRIPTION: Example showing initial ArrayBuilder usage with an array of positive integers.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-arraybuilder.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprocess_data(\n    ak.ArrayBuilder(),\n    [1, 2, 3, 4],\n)\n```\n\n----------------------------------------\n\nTITLE: Output Duplication in ForthMachine\nDESCRIPTION: Shows how to use the 'dup' operation to duplicate values in an output buffer a specified number of times.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_50\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\noutput x int32\n\n123 x <- stack\n10 x dup\n\"\"\")\n>>> vm.run()\n>>> np.asarray(vm[\"x\"])\narray([123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123], dtype=int32)\n```\n\n----------------------------------------\n\nTITLE: Converting Object Dtype NumPy Array to Awkward Array in Python\nDESCRIPTION: Demonstrates that a NumPy array with dtype=\"O\" cannot be directly converted to an Awkward Array, raising an exception.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nak.Array(np_array_dtype_O)\n```\n\n----------------------------------------\n\nTITLE: Importing Numba for JIT Compilation\nDESCRIPTION: Basic import of the Numba library for Just-In-Time compilation functionality.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-records.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport numba as nb\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Module in Python\nDESCRIPTION: This snippet imports the JSON module, which is used for encoding and decoding JSON data. It's likely used in conjunction with other data processing tasks in this context.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\n```\n\n----------------------------------------\n\nTITLE: Importing Awkward Array and NumPy in Python\nDESCRIPTION: This code snippet imports the Awkward Array library as 'ak' and NumPy as 'np' for use in subsequent examples.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-records.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries in Python\nDESCRIPTION: Imports the necessary libraries: Awkward Arrays (ak) and NumPy (np) for array operations and random number generation.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-combinatorics-best-match.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Including Awkward Headers in C++ Notebook\nDESCRIPTION: This code snippet adds the include path for Awkward headers in a C++ notebook environment. It's used to make Awkward headers available for use in the notebook.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-header-only-layoutbuilder.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Make Awkward headers available in this notebook, because we know these headers are available from the Python sources\n// Don't refer to the Git repo location, because they do not exist in sdist\n#pragma cling add_include_path(\"../../src/awkward/_connect/header-only\")\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Jupytext Document\nDESCRIPTION: YAML frontmatter configuration for a Jupytext markdown document, specifying document format settings and Python kernel configuration.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-array-properties.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njupytext:\n  text_representation:\n    extension: .md\n    format_name: myst\n    format_version: 0.13\n    jupytext_version: 1.10.3\nkernelspec:\n  display_name: Python 3\n  language: python\n  name: python3\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Specifies required Python packages and their minimum versions. Includes file system support (fsspec), testing frameworks (pytest), and ML libraries (tensorflow, torch). Notable that fsspec is conditionally required for non-Windows platforms.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/requirements-test-ml.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfsspec>=2022.11.0;sys_platform != \"win32\"\npytest>=6\npytest-cov\npytest-xdist\ntensorflow >= 2.12\ntorch >= 2.4.0\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project with Header Downloads\nDESCRIPTION: Sets up CMake project configuration including version requirements, downloads Awkward Array headers using FetchContent, and configures build dependencies with Python and pybind11.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/header-only/examples/pybind11/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# BSD 3-Clause License; see\n# https://github.com/scikit-hep/awkward/blob/main/LICENSE\n\ncmake_minimum_required(VERSION 3.15...3.26)\n\nproject(\n  ${SKBUILD_PROJECT_NAME}\n  LANGUAGES CXX\n  VERSION ${SKBUILD_PROJECT_VERSION})\n\n# Download headers\ninclude(FetchContent)\nset(AWKWARD_VERSION \"v2.4.3\")\nFetchContent_Declare(\n  awkward-headers\n  URL https://github.com/scikit-hep/awkward/releases/download/${AWKWARD_VERSION}/header-only.zip\n)\n# Instead of using `FetchContent_MakeAvailable(awkward-headers)`, we manually\n# load the target so that we can EXCLUDE_FROM_ALL\nFetchContent_GetProperties(awkward-headers)\nif(NOT awkward-headers_POPULATED)\n  FetchContent_Populate(awkward-headers)\n  add_subdirectory(${awkward-headers_SOURCE_DIR} ${awkward-headers_BINARY_DIR}\n                   EXCLUDE_FROM_ALL)\nendif()\n\n# Load interpreter & pybind11\nfind_package(Python COMPONENTS Interpreter Development.Module)\nfind_package(pybind11 CONFIG)\n\n# Build demo module\npybind11_add_module(demo demo.cpp)\ntarget_link_libraries(demo PRIVATE awkward::layout-builder)\n\n# Install into wheel\ninstall(TARGETS demo DESTINATION .)\n```\n\n----------------------------------------\n\nTITLE: Output Rewinding in ForthMachine\nDESCRIPTION: Shows how to use the 'rewind' operation to move backward in an output buffer, effectively erasing data.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_52\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\noutput x int32\n\nx len\n10 0 do\n  123 x <- stack\nloop\nx len\n3 x rewind\nx len\n\"\"\")\n>>> vm.run()\n>>> np.asarray(vm[\"x\"])\narray([123, 123, 123, 123, 123, 123, 123], dtype=int32)\n>>> vm.stack\n[0, 10, 7]\n```\n\n----------------------------------------\n\nTITLE: Parsing Boolean Fields in Avro Schema\nDESCRIPTION: Handles parsing of 'boolean' fields in the Avro schema. It generates code to append the boolean value to the appropriate data structure.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n_exec_code.append(\"\\n\"+\"    \"*ind+\"print(fields[pos])\")\n_exec_code.append(\"\\n\"+\"    \"*ind+f\"con['part0-node{count}-data'].append(fields[pos])\")\n_exec_code.append(\"\\n\"+\"    \"*ind+\"pos = pos+1\")\n```\n\n----------------------------------------\n\nTITLE: Activating Systemd Units for CUDA Tests\nDESCRIPTION: Command to enable the systemd units for CUDA tests. This step is optional and activates the automated scheduling of tests.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/dev/cuda-tests/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable cuda-tests.service cuda-tests.timer\n```\n\n----------------------------------------\n\nTITLE: Markdown Configuration Block - Jupytext Settings\nDESCRIPTION: YAML configuration block that defines document metadata including Jupytext settings, format specifications and kernel information for Python 3.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\njupytext:\n  text_representation:\n    extension: .md\n    format_name: myst\n    format_version: 0.13\n    jupytext_version: 1.10.3\nkernelspec:\n  display_name: Python 3\n  language: python\n  name: python3\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Awkward Array and NumPy in Python\nDESCRIPTION: This snippet imports the required libraries: Awkward Array as 'ak' and NumPy as 'np'.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-simple-slicing.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Running Test Suites\nDESCRIPTION: Various commands for running different test suites including integration tests, kernel tests, and GPU tests.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m pytest -n auto tests\npython -m pytest -n auto awkward-cpp/tests-spec\npython -m pytest -n auto awkward-cpp/tests-cpu-kernels\npython -m pytest tests-cuda-kernels\npython -m pytest tests-cuda\n```\n\n----------------------------------------\n\nTITLE: Importing Cling Connector\nDESCRIPTION: Import for Awkward Array's Cling connection module\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-cpp-cppyy.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport awkward._connect.cling\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter Notebook Metadata for Python in YAML\nDESCRIPTION: This code snippet defines the Jupyter notebook metadata, including the file format, Python kernel specification, and version information. It's written in YAML format within a Markdown file.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-specialize.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\njupytext:\n  text_representation:\n    extension: .md\n    format_name: myst\n    format_version: 0.13\n    jupytext_version: 1.10.3\nkernelspec:\n  display_name: Python 3\n  language: python\n  name: python3\n---\n```\n\n----------------------------------------\n\nTITLE: Builder Type Aliases\nDESCRIPTION: Type aliases for ListOffset and Numpy builders\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-header-only-layoutbuilder.md#2025-04-21_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<class PRIMITIVE, class BUILDER>\nusing ListOffsetBuilder = awkward::LayoutBuilder::ListOffset<PRIMITIVE, BUILDER>;\n\ntemplate<class PRIMITIVE>\nusing NumpyBuilder = awkward::LayoutBuilder::Numpy<PRIMITIVE>;\n```\n\n----------------------------------------\n\nTITLE: Managing Output Data in ForthMachine32\nDESCRIPTION: Demonstrates output handling in AwkwardForth including type conversion and data writing from stack to output.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"output x int32    999    x <- stack\")\n>>> vm.begin()\n>>> vm.step()\n>>> vm.stack\n[999]\n>>> np.asarray(vm[\"x\"])\narray([], dtype=int32)\n>>> vm.step()\n>>> vm.stack\n[]\n>>> np.asarray(vm[\"x\"])\narray([999], dtype=int32)\n```\n\n----------------------------------------\n\nTITLE: Creating RegularArray in Awkward Array with Python\nDESCRIPTION: Creates a RegularArray in Awkward Array containing a NumpyArray of floating-point values with fixed size of 1. This demonstrates how to create arrays with regular, fixed-size subarrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nff = ak.Array(ak.layout.RegularArray(\n    ak.layout.NumpyArray([1.3,4.5,13.56,5.64,45.6,2.3,]), size = 1))\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Awkward Headers\nDESCRIPTION: Sets up the CMake project with minimum version requirements, project name, language, and version. It also includes GNUInstallDirs and defines a build option for tests.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/header-only/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15...3.24)\n\nproject(\n  awkward-headers\n  LANGUAGES CXX\n  VERSION 1.0.0)\n\ninclude(GNUInstallDirs)\n\n# Build tests?\noption(BUILD_TESTS OFF)\n\n# Add aliases for `add_subdirectory`\nset(NAMESPACE \"awkward::\")\n```\n\n----------------------------------------\n\nTITLE: HTML Grid Layout for Contributors\nDESCRIPTION: A responsive HTML table structure displaying contributor information in a grid format. Each cell contains an avatar image, username link, and contribution type indicators. The layout uses percentage-based widths and vertical alignment for consistent display.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/HenryDayHall\"><img src=\"https://avatars.githubusercontent.com/u/12996763?v=4?s=100\" width=\"100px;\" alt=\"HenryDayHall\"/><br /><sub><b>HenryDayHall</b></sub></a><br /><a href=\"https://github.com/scikit-hep/awkward/commits?author=HenryDayHall\" title=\"Code\">💻</a></td>\n```\n\n----------------------------------------\n\nTITLE: Adding Test Executables Using Custom Macro\nDESCRIPTION: Uses the 'addtest_nolibs' macro to add four test executables: layout-builder, growable-buffer, builder-options, and layout-builder-is-valid.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/header-only/tests/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\naddtest_nolibs(test_1494-layout-builder test_1494-layout-builder.cpp)\naddtest_nolibs(test_1542-growable-buffer test_1542-growable-buffer.cpp)\naddtest_nolibs(test_1560-builder-options test_1560-builder-options.cpp)\naddtest_nolibs(test_3091-layout-builder-is-valid\n               test_3091-layout-builder-is-valid.cpp)\n```\n\n----------------------------------------\n\nTITLE: Importing Awkward Array in Python\nDESCRIPTION: This snippet shows how to import the Awkward Array library in Python.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine-checking-validity.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursion in AwkwardForth\nDESCRIPTION: Demonstrates how to implement recursive functions in AwkwardForth using the recurse keyword, with an example of calculating Fibonacci numbers.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\n... : fibonacci    ( n -- nth-fibonacci-number )\n...   dup\n...   1 > if\n...     1- dup 1- recurse\n...     swap recurse\n...     +\n...   then\n... ;\n... 20 0 do\n...   i fibonacci\n... loop\n... \"\"\")\n>>> vm.run()\n>>> vm.stack\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Version and Platform Constraints\nDESCRIPTION: This snippet lists Python package dependencies with specific version requirements and platform/Python version conditions. It includes libraries for data processing, testing, and file system operations, with constraints for Windows and Python versions.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/requirements-test-full.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfsspec>=2022.11.0;sys_platform != \"win32\"\njax[cpu]>=0.2.15;sys_platform != \"win32\" and python_version < \"3.13\"\nnumba>=0.50.0;sys_platform != \"win32\" and python_version < \"3.13\"\nnumexpr>=2.7; python_version < \"3.13\"\npandas>=0.24.0;sys_platform != \"win32\" and python_version < \"3.13\"\npyarrow==16.0.0;sys_platform != \"win32\" and python_version < \"3.13\"\npytest>=6\npytest-cov\npytest-xdist\nuproot>=5\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Basic imports needed for using Awkward Array with Numba\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-numba-intro.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\nimport numba as nb\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Contributors Table with Icons\nDESCRIPTION: HTML table structure that displays contributor information including GitHub avatars, usernames, and contribution types using aligned cells and embedded links. Includes a legend explaining contribution icons.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://tacaswell.github.io\"><img src=\"https://avatars.githubusercontent.com/u/199813?v=4?s=100\" width=\"100px;\" alt=\"Thomas A Caswell\"/><br /><sub><b>Thomas A Caswell</b></sub></a><br /><a href=\"#maintenance-tacaswell\" title=\"Maintenance\">🚧</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.nijho.lt\"><img src=\"https://avatars.githubusercontent.com/u/6897215?v=4?s=100\" width=\"100px;\" alt=\"Bas Nijholt\"/><br /><sub><b>Bas Nijholt</b></sub></a><br /><a href=\"#maintenance-basnijholt\" title=\"Maintenance\">🚧</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://nj-vs-vh.name/\"><img src=\"https://avatars.githubusercontent.com/u/30616208?v=4?s=100\" width=\"100px;\" alt=\"Igor Vaiman\"/><br /><sub><b>Igor Vaiman</b></sub></a><br /><a href=\"https://github.com/scikit-hep/awkward/commits?author=nj-vs-vh\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/HavryliukAY\"><img src=\"https://avatars.githubusercontent.com/u/58536463?v=4?s=100\" width=\"100px;\" alt=\"Havryliuk Artem \"/><br /><sub><b>Havryliuk Artem </b></sub></a><br /><a href=\"https://github.com/scikit-hep/awkward/commits?author=HavryliukAY\" title=\"Code\">💻</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ikrommyd\"><img src=\"https://avatars.githubusercontent.com/u/82155404?v=4?s=100\" width=\"100px;\" alt=\"Iason Krommydas\"/><br /><sub><b>Iason Krommydas</b></sub></a><br /><a href=\"https://github.com/scikit-hep/awkward/commits?author=ikrommyd\" title=\"Code\">💻</a> <a href=\"https://github.com/scikit-hep/awkward/commits?author=ikrommyd\" title=\"Tests\">⚠️</a></td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Installing Python Extension Module\nDESCRIPTION: Configures installation paths for the compiled Python extension module.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/header-only/examples/cython/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n  TARGETS _demo\n  RUNTIME DESTINATION demo\n  LIBRARY DESTINATION demo\n  ARCHIVE DESTINATION demo)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Words in AwkwardForth\nDESCRIPTION: Illustrates how to define and use custom words in AwkwardForth, including documentation conventions and stack manipulation.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_15\n\nLANGUAGE: forth\nCODE:\n```\n: sum-of-squares ( x y -- sum )\n  dup *          ( x y -- x y*y )\n  swap           ( x y*y -- y*y x )\n  dup *          ( y*y x -- y*y x*x )\n  +              ( sum )\n;\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\n... : sum-of-squares ( x y -- sum )\n...   dup *          ( x y -- x y*y )\n...   swap           ( x y*y -- y*y x )\n...   dup *          ( y*y x -- y*y x*x )\n...   +              ( sum )\n... ;\n... 3 4 sum-of-squares\n... \"\"\")\n>>> vm.run()\n>>> vm.stack\n[25]\n```\n\n----------------------------------------\n\nTITLE: Citation BibTeX Entry\nDESCRIPTION: BibTeX entry for citing the Awkward Array library in academic papers.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bibtex\nCODE:\n```\n@software{Pivarski_Awkward_Array_2018,\nauthor = {Pivarski, Jim and Osborne, Ianna and Ifrim, Ioana and Schreiner, Henry and Hollands, Angus and Biswas, Anish and Das, Pratyush and Roy Choudhury, Santam and Smith, Nicholas and Goyal, Manasvi},\ndoi = {10.5281/zenodo.4341376},\nmonth = {10},\ntitle = {{Awkward Array}},\nyear = {2018}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Test Dependencies for Scikit-HEP Awkward\nDESCRIPTION: This code snippet lists the Python packages required for testing the Scikit-HEP Awkward project. It includes pytest for running tests, pytest-cov for code coverage analysis, and pytest-xdist for distributed testing.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/requirements-test-pypy.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npytest>=6\npytest-cov\npytest-xdist\n```\n\n----------------------------------------\n\nTITLE: Setting up Development Environment\nDESCRIPTION: Command to prepare the development environment using nox, which generates necessary code and datafiles including kernel specifications and header-only includes.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnox -s prepare\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: This snippet defines the access rules for web crawlers visiting the Awkward project site. It allows all user agents (*) to access all parts of the site, indicated by the 'Allow: /' directive.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/dev/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Basic imports of awkward and numpy libraries needed for array manipulation.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-flatten.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Selecting Top N Items from Sorted Awkward Array in Python\nDESCRIPTION: Demonstrates how to select the top N (in this case, 2) items from each list in the sorted Awkward Array using indexing and slicing.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-argminmax.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntop2 = data[ak.argsort(score)][:, :2]\ntop2\n```\n\n----------------------------------------\n\nTITLE: Executing the Awkward Array Demo Function in Python\nDESCRIPTION: Python code to import and run the create_demo_array function from the installed demo module, then print the returned Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/header-only/examples/pybind11/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom demo import create_demo_array\n\nprint(\n    create_demo_array()\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing if-else-then in AwkwardForth\nDESCRIPTION: Shows how to use the if-else-then control structure in AwkwardForth for conditional execution with two possible branches.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"if 123 else 321 then\")\n>>> vm.begin()\n>>> vm.stack_push(0)\n>>> vm.resume()\n>>> vm.stack\n[321]\n>>> vm.begin()\n>>> vm.stack_push(-1)\n>>> vm.resume()\n>>> vm.stack\n[123]\n```\n\n----------------------------------------\n\nTITLE: Creating ByteMaskedArray in Awkward Array with Python\nDESCRIPTION: Creates a ByteMaskedArray in Awkward Array with a mask of boolean values and a NumpyArray of floating-point values. Demonstrates how to create arrays with optional (nullable) values using masking.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\naa = ak.Array(ak.layout.ByteMaskedArray(\n    ak.layout.Index8([True,True,False,True,True,True]),\n    ak.layout.NumpyArray([1.3,4.5,13.56,5.64,45.6,2.3,]),valid_when = True))\n```\n\n----------------------------------------\n\nTITLE: Building Docker Container for Awkward CUDA Tests\nDESCRIPTION: Command to build a Docker container for running Awkward CUDA tests. This step is only required if not using a pre-built container image.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/dev/cuda-tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -f cuda-tests.Dockerfile -t awkward/cuda-tests:latest .\n```\n\n----------------------------------------\n\nTITLE: Installing Awkward-CPP Package\nDESCRIPTION: Commands for installing the C++ components of Awkward Array, including both standard and build isolation methods.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install ./awkward-cpp\n```\n\n----------------------------------------\n\nTITLE: Bitwise Operations in ForthMachine32\nDESCRIPTION: Demonstrates bitwise operations like invert (bitwise NOT), and (bitwise AND), and or (bitwise OR) in Forth. Shows how these operations work on different values.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"0 invert\")\n>>> vm.run()\n>>> vm.stack\n[-1]\n>>> vm = ForthMachine32(\"-1 invert\")\n>>> vm.run()\n>>> vm.stack\n[0]\n>>> vm = ForthMachine32(\"1 invert\")\n>>> vm.run()\n>>> vm.stack\n[-2]\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"1 2 or\")\n>>> vm.run()\n>>> vm.stack\n[3]\n>>> vm = ForthMachine32(\"1 2 and\")\n>>> vm.run()\n>>> vm.stack\n[0]\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Basic imports of awkward and numpy libraries needed for working with arrays\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-missing.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Creating NumPy Array with Object Dtype in Python\nDESCRIPTION: Creates a NumPy array with dtype=\"O\" (object), which cannot be directly cast to an Awkward Array without iteration.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-python.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nnp_array_dtype_O = np.array([[100, 200], [101, 201], [103, 203]], dtype=\"O\")\nnp_array_dtype_O\n```\n\n----------------------------------------\n\nTITLE: Installing Systemd Units for CUDA Tests\nDESCRIPTION: Commands to copy systemd unit files for CUDA tests to the system directory. This step is optional and allows for automated scheduling of tests.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/dev/cuda-tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp cuda-tests.service cuda-tests.timer /etc/systemd/system/\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Awkward Array\nDESCRIPTION: This snippet lists the required Python packages and their versions for the Awkward Array project. It includes conditional dependencies based on the operating system and specific version requirements for key libraries.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/requirements-test-minimal.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfsspec>=2022.11.0;sys_platform != \"win32\"\nnumpy==1.19.3\npyarrow==7.0.0\npytest>=6\npytest-cov\npytest-xdist\n```\n\n----------------------------------------\n\nTITLE: Creating RecordArray with No Fields\nDESCRIPTION: Creates a RecordArray with no fields but a specified length, which is an unusual case but allows RecordArray to be a leaf node.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nak.Array(ak.contents.RecordArray([], [], length=5))\n```\n\n----------------------------------------\n\nTITLE: Citation BibTeX Entry for Awkward Array\nDESCRIPTION: BibTeX citation entry for referencing the Awkward Array software package in academic works. Includes author list, DOI, title and publication details.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/papers-and-talks.md#2025-04-21_snippet_0\n\nLANGUAGE: bibtex\nCODE:\n```\n@software{Pivarski_Awkward_Array_2018,\nauthor = {Pivarski, Jim and Osborne, Ianna and Ifrim, Ioana and Schreiner, Henry and Hollands, Angus and Biswas, Anish and Das, Pratyush and Roy Choudhury, Santam and Smith, Nicholas and Goyal, Manasvi},\ndoi = {10.5281/zenodo.4341376},\nmonth = {10},\ntitle = {{Awkward Array}},\nyear = {2018}\n}\n```\n\n----------------------------------------\n\nTITLE: Stack to Output Writing in ForthMachine\nDESCRIPTION: Shows how to write values from the stack to an output buffer using the '<- stack' operation.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\noutput x int32\n\n1 2 3 4\nx <- stack\nx <- stack\nx <- stack\nx <- stack\n\"\"\")\n>>> vm.run()\n>>> np.asarray(vm[\"x\"])\narray([4, 3, 2, 1], dtype=int32)\n```\n\n----------------------------------------\n\nTITLE: Question Frequency Table in Markdown\nDESCRIPTION: Markdown table showing frequency distribution of different topics and features users ask about in the Awkward array library. Topics range from Pandas integration to specific array operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/how-to-questions-survey.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Frequency | Rough categories |\n|:---------:|:------------------|\n| 20 | Pandas |\n| 10 | persistence, including HDF5 (4) and Parquet (2) |\n| 8  | Lorentz vectors and TVector3 |\n| 8  | reducing |\n| 7  | jagged arrays |\n| 6  | ak.fillna and ak.rpad (regularizing) |\n| 6  | ak.concatenate and stack |\n| 5  | strings |\n| 5  | getitem |\n| 4  | Numba |\n| 4  | Histogramming (flattening before) |\n| 3  | lazy arrays |\n| 3  | ak.cross |\n| 2  | Arrow |\n| 2  | ak.with_field |\n| 2  | ak.where and np.choose |\n| 2  | ak.num (including axis=1) |\n| 1  | SQL-like join |\n| 1  | reducer-like |\n| 1  | np.digitize |\n| 1  | non-ufuncs |\n| 1  | nested records |\n| 1  | named axis |\n| 1  | masking |\n| 1  | Functional interface |\n| 1  | Content vs flatten |\n| 1  | Changing leaf (numeric) types |\n| 1  | Caching |\n| 1  | Broadcasting |\n| 1  | ak.zip |\n| 1  | ak.sort |\n| 1  | ak.isnan |\n```\n\n----------------------------------------\n\nTITLE: Installing the Library Package\nDESCRIPTION: Command to install the library package using pip.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/header-only/examples/cython/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install .\n```\n\n----------------------------------------\n\nTITLE: Converting BitMaskedArray to High-Level Awkward Array\nDESCRIPTION: Demonstrates how to convert a BitMaskedArray layout to a high-level Awkward Array object for easier manipulation and access.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nak.Array(layout)\n```\n\n----------------------------------------\n\nTITLE: Storing GitHub API Token for CUDA Tests\nDESCRIPTION: Command to store a GitHub API token with 'repo' credentials in a specific file. This token is used for authentication in the CUDA tests.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/dev/cuda-tests/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo echo \"ghp_...\" > /etc/cuda-gh-token\n```\n\n----------------------------------------\n\nTITLE: Output Buffer Declaration in ForthMachine\nDESCRIPTION: Demonstrates how to declare and initialize an output buffer with a specific type. Shows empty buffer creation with float64 type.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"output x float64\")\n>>> vm.begin()\n>>> np.asarray(vm[\"x\"])\narray([], dtype=float64)\n```\n\n----------------------------------------\n\nTITLE: Implementing Absolute Value for Points\nDESCRIPTION: Shows how to override numpy.absolute for point types to calculate the magnitude of a point vector.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/ak.behavior.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef point_abs(point):\n    return np.sqrt(point.x**2 + point.y**2)\n\nak.behavior[np.absolute, \"point\"] = point_abs\n```\n\n----------------------------------------\n\nTITLE: Filtered RDataFrame with Order Preservation\nDESCRIPTION: Demonstrates filtering RDataFrame data while maintaining original order using keep_order parameter.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-rdataframe.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndf = df.Filter(\"y % 2 == 0\")\n\narray = ak.from_rdataframe(\n    df,\n    columns=(\n        \"x\",\n        \"y\",\n        \"z\",\n    ),\n    keep_order=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Contents of Generated JSON File\nDESCRIPTION: Shows the contents of the JSON file created from the Awkward Array.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-json.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n!cat /tmp/awkward-example-2.json\n```\n\n----------------------------------------\n\nTITLE: ForthMachine Pause and Resume Execution\nDESCRIPTION: Demonstrates pausing and resuming ForthMachine execution using the pause keyword and resume() method.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"1 2 pause 3 4\")\n>>> vm.run()\n>>> vm.stack\n[1, 2]\n>>> vm.run()\n>>> vm.stack\n[1, 2]\n>>> vm.resume()\n>>> vm.stack\n[1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: C++ to Python Data Transfer\nDESCRIPTION: Function to transfer builder data to Python using pybind11\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-header-only-layoutbuilder.md#2025-04-21_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename T>\npy::object snapshot_builder(const T& builder)\n{\n    std::map<std::string, size_t> names_nbytes = {};\n    builder.buffer_nbytes(names_nbytes);\n\n    std::map<std::string, void*> buffers = {};\n    for(auto it : names_nbytes) {\n        uint8_t* ptr = new uint8_t[it.second];\n        buffers[it.first] = (void*)ptr;\n    }\n\n    builder.to_buffers(buffers);\n    auto from_buffers = py::module::import(\"awkward\").attr(\"from_buffers\");\n\n    py::dict container;\n    for (auto it: buffers) {\n        py::capsule free_when_done(it.second, [](void *data) {\n            uint8_t* dataPtr = reinterpret_cast<uint8_t*>(data);\n            delete[] dataPtr;\n        });\n\n        uint8_t* data = reinterpret_cast<uint8_t*>(it.second);\n        container[py::str(it.first)] = py::array_t<uint8_t>(\n            {names_nbytes[it.first]},\n            {sizeof(uint8_t)},\n            data,\n            free_when_done\n        );\n    }\n    return from_buffers(builder.form(), builder.length(), container);\n}\n```\n\n----------------------------------------\n\nTITLE: ForthMachine Halt Execution Example\nDESCRIPTION: Shows how to handle halting execution in ForthMachine, including error handling options.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"1 2 halt 3 4\")\n>>> vm.run()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: 'user halt' in AwkwardForth runtime: user-defined error or stopping condition\n>>> vm.stack\n[1, 2]\n>>> vm.run(raise_user_halt=False)\n'user halt'\n>>> vm.stack\n[1, 2]\n>>> vm.resume()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: 'not ready' in AwkwardForth runtime: call 'begin' before 'step' or 'resume' (note: check 'is_ready')\n```\n\n----------------------------------------\n\nTITLE: Field Mapping Definition\nDESCRIPTION: Definition of field mapping enum and map for Record Builder\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-header-only-layoutbuilder.md#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nenum Field : std::size_t {one, two};\n\nusing UserDefinedMap = std::map<std::size_t, std::string>;\n\nUserDefinedMap fields_map({\n    {Field::one, \"one\"},\n    {Field::two, \"two\"}\n});\n```\n\n----------------------------------------\n\nTITLE: Pause and Resume in ForthMachine\nDESCRIPTION: Shows how to use the 'pause' command to temporarily stop execution and resume it later.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_54\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"1 2 pause 3 4\")\n>>> vm.run()\n>>> vm.stack\n[1, 2]\n>>> vm.resume()\n>>> vm.stack\n[1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupytext and Kernel for Awkward Array\nDESCRIPTION: This YAML configuration sets up Jupytext for the Awkward Array project. It specifies the text representation format as Myst Markdown and configures the Python 3 kernel for Jupyter notebooks.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-strings-extract-substrings.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\njupytext:\n  text_representation:\n    extension: .md\n    format_name: myst\n    format_version: 0.13\n    jupytext_version: 1.15.0\nkernelspec:\n  display_name: Python 3 (ipykernel)\n  language: python\n  name: python3\n---\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for Awkward Headers\nDESCRIPTION: CMake configuration to fetch and link against awkward-headers dependency\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-header-only-layoutbuilder.md#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nFetchContent_GetProperties(awkward-headers)\nif(NOT awkward-headers_POPULATED)\n  FetchContent_Populate(awkward-headers)\n  add_subdirectory(${awkward-headers_SOURCE_DIR} ${awkward-headers_BINARY_DIR} EXCLUDE_FROM_ALL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Performance Timing Python\nDESCRIPTION: Timing the pure Python implementation using IPython magic\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-cpp-cppyy.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n%%timeit\n\nak.sum(array[\"y\"])\n```\n\n----------------------------------------\n\nTITLE: Using Enum for String Pattern Matching in AwkwardForth\nDESCRIPTION: Demonstrates the 'enum' command which recognizes constant byte patterns in the input, returning the matching pattern's index or -1 if no match is found.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\n... input x\n... \n... 5 0 do\n...   x skipws\n...   x enum s\\\" zero\\\" s\\\" one\\\" s\\\" two\\\" s\\\" three\\\"\n... loop\n... \"\"\")\n>>> vm.run({\"x\": b\"  zero  three two one four  \"})\n>>> vm.stack\n[0, 3, 2, 1, -1]\n```\n\n----------------------------------------\n\nTITLE: Min and Max Operations in ForthMachine32\nDESCRIPTION: Shows how min and max operations pop two values from the stack and push the minimum or maximum value respectively.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"3 5 min\")\n>>> vm.run()\n>>> vm.stack\n[3]\n>>> vm = ForthMachine32(\"3 5 max\")\n>>> vm.run()\n>>> vm.stack\n[5]\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Properties and Dependencies for Awkward C++\nDESCRIPTION: Sets up shared properties and dependencies for the Awkward C++ project, including compiler features, include directories, and linking external libraries like RapidJSON and GrowableBuffer.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/awkward-cpp/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Shared properties\nadd_library(awkward-parent INTERFACE)\ntarget_compile_definitions(awkward-parent INTERFACE VERSION_INFO=\"${SKBUILD_PROJECT_VERSION}\")\ntarget_include_directories(awkward-parent INTERFACE include)\ntarget_compile_features(awkward-parent INTERFACE cxx_std_17)\n\n# C++ dependencies (header-only): RapidJSON\ntarget_include_directories(awkward-parent INTERFACE rapidjson/include)\n\n# C++ dependencies (header-only): GrowableBuffer\nadd_subdirectory(header-only EXCLUDE_FROM_ALL)\ntarget_link_libraries(awkward-parent INTERFACE awkward::growable-buffer)\n\n# WASM needs exceptions enabled\nif(CMAKE_SYSTEM_NAME MATCHES Emscripten)\n  set_property(\n    TARGET awkward-parent\n    APPEND\n    PROPERTY INTERFACE_LINK_OPTIONS -fexceptions)\n  set_property(\n    TARGET awkward-parent\n    APPEND\n    PROPERTY INTERFACE_COMPILE_OPTIONS -fexceptions)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for JSON-Awkward Conversion\nDESCRIPTION: Import statements for the awkward and pathlib libraries needed for JSON conversion operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-json.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport pathlib\n```\n\n----------------------------------------\n\nTITLE: Building CPU Kernels and libawkward for Awkward C++\nDESCRIPTION: Configures the build process for CPU kernels and the main libawkward library. Sets compiler flags, visibility settings, and links dependencies.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/awkward-cpp/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# First tier: cpu-kernels\nadd_library(awkward-cpu-kernels SHARED ${CPU_KERNEL_SOURCES})\ntarget_link_libraries(awkward-cpu-kernels PUBLIC awkward-parent)\nset_target_properties(\n  awkward-cpu-kernels\n  PROPERTIES CXX_VISIBILITY_PRESET hidden\n             VISIBILITY_INLINES_HIDDEN ON\n             CXX_EXTENSIONS NO)\n\n# Second tier: libawkward\nadd_library(awkward SHARED ${LIBAWKWARD_SOURCES})\nif(${CMAKE_CXX_COMPILER_ID} MATCHES \"Clang\")\n  # Avoid emitting vtables in the dependent libraries\n  target_compile_options(\n    awkward\n    PRIVATE -Werror=weak-vtables\n            -Wweak-vtables\n            -Wshorten-64-to-32\n            -Wsign-compare\n            -Wsign-conversion\n            -Wshift-sign-overflow\n            -Wreorder\n            -Wrange-loop-analysis\n            -Wconversion\n            -Wunused)\nendif()\ntarget_link_libraries(awkward PUBLIC awkward-parent)\nset_target_properties(\n  awkward\n  PROPERTIES CXX_VISIBILITY_PRESET hidden\n             VISIBILITY_INLINES_HIDDEN ON\n             CXX_EXTENSIONS NO)\n```\n\n----------------------------------------\n\nTITLE: Modulo Operations in ForthMachine32\nDESCRIPTION: Demonstrates how Forth performs modulo operations like Python, with negative values rounding toward minus infinity. Shows examples with positive and negative numbers.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"22 7 mod\")\n>>> vm.run()\n>>> vm.stack\n[1]\n>>> vm = ForthMachine32(\"-22 7 mod\")\n>>> vm.run()\n>>> vm.stack\n[6]\n```\n\n----------------------------------------\n\nTITLE: CMake Library Linking Example\nDESCRIPTION: Example of linking against the awkward layout-builder library in CMake\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-header-only-layoutbuilder.md#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(my_application awkward::layout-builder)\n```\n\n----------------------------------------\n\nTITLE: Importing Awkward Array and NumPy\nDESCRIPTION: Imports the required libraries for working with Awkward Arrays and NumPy arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-constructors.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Running Tests with pytest\nDESCRIPTION: Command to run the test suite in parallel using pytest.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython -m pytest -n auto tests\n```\n\n----------------------------------------\n\nTITLE: Forth Stack Manipulation Operations\nDESCRIPTION: Demonstrates various stack manipulation commands like dup, drop, swap, over, rot, nip, and tuck.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"1 2 3 4 dup\")\n>>> vm.run()\n>>> vm.stack\n[1, 2, 3, 4, 4]\n```\n\n----------------------------------------\n\nTITLE: Building Distribution Wheels\nDESCRIPTION: Command for building a wheel distribution of the awkward-cpp package using pipx.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npipx run --python=$(which python) build --wheel awkward-cpp\n```\n\n----------------------------------------\n\nTITLE: Code Position Tracking in ForthMachine32\nDESCRIPTION: Demonstrates tracking execution position in bytecode and accessing current instruction information.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"1 2 pause 3 4\")\n>>> ak.Array(vm.bytecodes)\n<Array [[0, 1, 0, 2, 2, 0, 3, 0, 4]] type='1 * var * int32'>\n>>> vm.current_bytecode_position\n-1\n>>> vm.begin()\n>>> vm.current_bytecode_position\n0\n```\n\n----------------------------------------\n\nTITLE: Converting City Objects to Awkward Arrays in Python\nDESCRIPTION: Converts the previously created City objects into Awkward Arrays, preparing the data for use with Awkward Array functions.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-combinatorics-cartesian-combinations.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef instance_to_dict(city):\n    return {\"name\": city.name, \"latitude\": city.latitude, \"longitude\": city.longitude}\n\ncities_us = ak.Array([instance_to_dict(city) for city in cities_us])\ncities_canada = ak.Array([instance_to_dict(city) for city in cities_canada])\n\nall_cities = ak.concatenate([cities_us, cities_canada])\n```\n\n----------------------------------------\n\nTITLE: Installing Awkward Array Nightly Wheels\nDESCRIPTION: These commands demonstrate how to install the latest nightly wheels of awkward-cpp and awkward from the Scientific Python Nightly Wheels Anaconda Cloud organization.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/CONTRIBUTING.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install --upgrade awkward\npython -m pip uninstall --yes awkward awkward-cpp\npython -m pip install --upgrade --extra-index-url https://pypi.anaconda.org/scientific-python-nightly-wheels/simple awkward\n```\n\n----------------------------------------\n\nTITLE: Output Length Tracking in ForthMachine\nDESCRIPTION: Demonstrates how to track output buffer length using the 'len' operation.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/awkwardforth.rst#2025-04-21_snippet_51\n\nLANGUAGE: python\nCODE:\n```\n>>> vm = ForthMachine32(\"\"\"\noutput x int32\n\nx len\n10 0 do\n  123 x <- stack\nloop\nx len\n\"\"\")\n>>> vm.run()\n>>> vm.stack\n[0, 10]\n```\n\n----------------------------------------\n\nTITLE: Adding Components for Awkward Headers Project in CMake\nDESCRIPTION: Adds three main components to the project: builder-options, growable-buffer, and layout-builder. It also sets up dependencies between these components.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/header-only/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Component: Builder Options\nadd_component(builder-options)\n# Component: Growable Buffer\nadd_component(growable-buffer)\ntarget_link_libraries(growable-buffer INTERFACE builder-options)\n# Component: Layout Builder\nadd_component(layout-builder)\ntarget_link_libraries(layout-builder INTERFACE growable-buffer builder-options)\n```\n\n----------------------------------------\n\nTITLE: Finding Largest Meteorites per Classification\nDESCRIPTION: Converting mass data to float and finding the largest meteorite in each classification group.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-unflatten-group.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlanding_by_class['mass'] = ak.strings_astype(landing_by_class.mass, np.float64)\ni_largest_mass = ak.argmax(landing_by_class.mass, axis=-1, keepdims=True)\nlargest_meteorite = ak.flatten(landing_by_class[i_largest_mass], axis=1)\nlargest_meteorite\nlargest_meteorite.name\n```\n\n----------------------------------------\n\nTITLE: ArrayBuilder Data Structure Methods in Python\nDESCRIPTION: Methods for beginning and ending nested data structures like lists, records, and tuples.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/reference/ak.builder.ArrayBuilder.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nArrayBuilder.beginlist()\nArrayBuilder.beginrecord(name=None)\nArrayBuilder.begintuple(arg0)\nArrayBuilder.endlist()\nArrayBuilder.endrecord()\nArrayBuilder.endtuple()\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Jupytext\nDESCRIPTION: YAML configuration block that specifies document metadata including Jupytext settings and Python kernel specifications.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\njupytext:\n  text_representation:\n    extension: .md\n    format_name: myst\n    format_version: 0.13\n    jupytext_version: 1.10.3\nkernelspec:\n  display_name: Python 3\n  language: python\n  name: python3\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Arrow/Parquet Conversion\nDESCRIPTION: Imports the necessary Python libraries for working with Awkward Array, Apache Arrow, and URL handling.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-arrow.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport pyarrow as pa\nimport pyarrow.csv\nimport urllib.request\n```\n\n----------------------------------------\n\nTITLE: Parsing Enum Fields in Avro Schema\nDESCRIPTION: Handles parsing of enum fields in the Avro schema. It generates code to create indexed arrays for enum values and their corresponding string representations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/studies/avro-experiments.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n_exec_code.append(\"\\n\"+\"    \"*ind+\"pos, inn = decode_varint(pos,fields)\")\n_exec_code.append(\"\\n\"+\"    \"*ind+\"out = decode_zigzag(inn)\")\n_exec_code.append(\"\\n\"+\"    \"*ind+f\"con['part0-node{count}-index'].append(np.int64(out))\")\n_exec_code.append(\"\\n\"+\"    \"*ind+\"print(out)\")\n```\n\n----------------------------------------\n\nTITLE: Importing Awkward Array and NumPy in Python\nDESCRIPTION: Imports the Awkward Array and NumPy libraries, which are essential for the array manipulations demonstrated in this tutorial.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-restructure-pad.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Import statements for Awkward Array, NumPy, h5py, and json libraries needed for buffer conversion and HDF5 operations.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-convert-buffers.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\nimport h5py\nimport json\n```\n\n----------------------------------------\n\nTITLE: Importing Awkward Array and NumPy in Python\nDESCRIPTION: Import statements for the Awkward Array and NumPy libraries, which are essential for working with Awkward Arrays.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/what-is-an-awkward-array.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport awkward as ak\n```\n\n----------------------------------------\n\nTITLE: ArrayBuilder with Negative Integers\nDESCRIPTION: Demonstrates how ArrayBuilder handles negative integers, resulting in an array of None values with unknown type.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-create-arraybuilder.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nprocess_data(\n    ak.ArrayBuilder(),\n    [-1, -2, -3, -4],\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Awkward Array and NumPy in Python\nDESCRIPTION: This snippet shows how to import the Awkward Array and NumPy libraries, which are necessary for the statistical operations demonstrated in this guide.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-statistics.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Running Pre-commit Checks\nDESCRIPTION: Command for running pre-commit hooks to handle formatting and linting of code.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npre-commit run -a\n```\n\n----------------------------------------\n\nTITLE: Importing Awkward Array Library in Python\nDESCRIPTION: Imports the Awkward Array library for working with nested, variable-sized data structures in Python.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-math-argminmax.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\n```\n\n----------------------------------------\n\nTITLE: Performance Timing C++\nDESCRIPTION: Timing the C++ implementation using IPython magic\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-use-in-cpp-cppyy.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n%%timeit\n\nout = cppyy.gbl.go_fast_cpp[array.cpp_type](array)\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter Notebook for Python in Markdown\nDESCRIPTION: This code snippet sets up the Jupyter notebook configuration for using Python in a Markdown file. It specifies the file format, Python kernel, and Jupytext version.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-examine.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\njupytext:\n  text_representation:\n    extension: .md\n    format_name: myst\n    format_version: 0.13\n    jupytext_version: 1.10.3\nkernelspec:\n  display_name: Python 3\n  language: python\n  name: python3\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupytext for Python in Markdown\nDESCRIPTION: This code snippet defines the Jupytext configuration for the document, specifying the file format, version, and Python kernel settings. It ensures the markdown file can be properly interpreted as a Jupyter notebook with Python code.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/user-guide/how-to-combinatorics.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\njupytext:\n  text_representation:\n    extension: .md\n    format_name: myst\n    format_version: 0.13\n    jupytext_version: 1.10.3\nkernelspec:\n  display_name: Python 3\n  language: python\n  name: python3\n---\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies Requirements\nDESCRIPTION: Lists required Python packages with version constraints. Specifies pyodide-build version 0.23.3 and pydantic version less than 2.0.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/requirements-wasm.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npyodide-build==0.23.3\npydantic<2\n```\n\n----------------------------------------\n\nTITLE: Manipulating Record Structures in Awkward Arrays with Python\nDESCRIPTION: Demonstrates how to access and manipulate record structures within Awkward Arrays, including creating new fields.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/docs/getting-started/what-is-an-awkward-array.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nnobel_prize_winner = ak.Array(\n    [\n        [\n            {\"name\": \"Benjamin List\", \"age\": 53},\n            {\"name\": \"David MacMillan\", \"age\": 53},\n        ],\n        [\n            {\"name\": \"Emmanuelle Charpentier\", \"age\": 52},\n            {\"name\": \"Jennifer A. Doudna\", \"age\": 57},\n        ],\n        [\n            {\"name\": \"Akira Yoshino\", \"age\": 73},\n            {\"name\": \"M. Stanley Whittingham\", \"age\": 79},\n            {\"name\": \"John B. Goodenough\", \"age\": 98},\n        ],\n    ]\n);\n\nnobel_prize_winner.name\n\nnobel_prize_winner.age\n\nnobel_prize_winner_with_birth_year = ak.zip({\n    \"name\": nobel_prize_winner.name,\n    \"age\": nobel_prize_winner.age,\n    \"birth_year\": 2021 - nobel_prize_winner.age\n});\n\nnobel_prize_winner_with_birth_year.show()\n```\n\n----------------------------------------\n\nTITLE: Running CUDA Tests Container Manually\nDESCRIPTION: Docker command to run the CUDA tests container manually. This command mounts the credentials, sets the GPU runtime, and specifies the container image to use.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/dev/cuda-tests/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm \\\n--runtime=nvidia \\\n--gpus all \\\n-v \"/etc:/creds\" \\\n-e GH_TOKEN_PATH=/creds/cuda-gh-token \\\nagoose77/cuda-tests:latest\n```\n\n----------------------------------------\n\nTITLE: Viewing Built Awkward Array Documentation\nDESCRIPTION: These commands show how to open the built documentation in a web browser, either by directly opening the HTML file or by starting a local HTTP server.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocs/_build/html/index.html\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m http.server 8080 --directory docs/_build/html/\n```\n\n----------------------------------------\n\nTITLE: Referencing the awkward-cpp Package in Markdown\nDESCRIPTION: Markdown code blocks showing the package name 'awkward-cpp' and explaining that it provides precompiled routines for the 'awkward' package and is only useful as a dependency.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/awkward-cpp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `awkward-cpp`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`awkward-cpp` provides precompiled routines for the `awkward` package. It is not useful on its own, only as a dependency for `awkward `.\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project Configuration\nDESCRIPTION: Sets up basic CMake project configuration including minimum version and project languages.\nSOURCE: https://github.com/scikit-hep/awkward/blob/main/header-only/examples/cython/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15...3.26)\n\nproject(demo LANGUAGES CXX C)\n```"
  }
]