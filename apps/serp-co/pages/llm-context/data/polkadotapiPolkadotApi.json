[
  {
    "owner": "polkadot-api",
    "repo": "polkadot-api",
    "content": "TITLE: Complete Example of Encoding a Balances Transfer Extrinsic in JavaScript\nDESCRIPTION: Comprehensive example that puts everything together to create a complete extrinsic for a balances.transferKeepAlive operation, including mortality settings, call data, signature, and final encoding.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-bindings/src/extrinsics/README.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst blockNumber = 16710496;\nconst period = 64;\nconst extra = {\n  mortality: { type: \"mortal\", period, phase: blockNumber % period },\n  nonce,\n  tip: 0,\n};\nconst call = {\n  module: 4,\n  method: 3,\n  args: {\n    dest: {\n      tag: 0,\n      value: new Uint8Array(32),\n    },\n    value: 1000000000000n,\n  },\n};\nconst signaturePayload = signaturePayloadEncoder({ call, extra, ... });\nconst signature = pair.sign(signaturePayload);\nconst extrinsic = $opaqueExtrinsic.enc({\n  version: {\n    signed: true,\n    version: 4,\n  },\n  body: {\n    sender: { tag: \"0\", value: pair.publicKey },\n    signature: { tag: \"1\", value: signature },\n    extra,\n    call,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Polkadot API Client and Querying Blockchain Data\nDESCRIPTION: Sets up a Polkadot client using the smoldot provider, subscribes to finalized blocks, and demonstrates querying account balances. Uses dynamic imports for better performance and leverages typed API interfaces generated from chain metadata.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/client/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"polkadot-api\"\nimport { getSmProvider } from \"polkadot-api/sm-provider\"\nimport { polkadotTypes } from \"@polkadot-api/descriptors\"\nimport { smoldot } from \"./smoldot\"\n\n// dynamically importing the chainSpec improves the performance of your dApp\nconst smoldotRelayChain = import(\"polkadot-api/chains/polkadot\").then(\n  ({ chainSpec }) => smoldot.addChain({ chainSpec }),\n)\n\n// getting a `JsonRpcProvider` from a `smoldot` chain.\nconst jsonRpcProvider = getSmProvider(smoldotRelayChain)\n\n// we could also create a `JsonRpcProvider` from a WS connection, eg:\n// const jsonRpcProvider = WsProvider(\"wss://some-rpc-endpoint.io\")\n\nconst polkadotClient = createClient(jsonRpcProvider)\n\n// logging blocks as they get finalized\npolkadotClient.finalizedBlock$.subscribe((block) => {\n  console.log(`#${block.number} - ${block.hash} - parentHash: ${block.parent}`)\n})\n\n// pulling the latest finalized block\nconst block = await polkadotClient.getFinalizedBlock()\n\n// obtaining a delightfully typed interface from the descriptors\n// previously generated from the metadata\nconst polkadotApi = polkadotClient.getTypedApi(polkadotTypes)\n\n// presenting the transferrable amount of a given account\nconst {\n  data: { free, frozen },\n} = await polkadotApi.query.System.Account.getValue(\n  \"15oF4uVJwmo4TdGW7VfQxNLavjCXviqxT9S1MgbjMNHr6Sp5\",\n)\nconsole.log(`Transferrable amount: ${free - frozen}`)\n```\n\n----------------------------------------\n\nTITLE: Submitting and Watching Transactions\nDESCRIPTION: Shows how to submit a transaction and watch for its status updates using the client.transaction method. This function handles the complexities of transaction submission and monitoring.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-client/README.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst cancelRequest = client.transaction(\n  transaction, // SCALE-encoded transaction\n  (event) => {\n    // ...\n  },\n  (error) => {\n    // ...\n  },\n)\n\n// call `cancelRequest()` to abort the transaction (`transaction_unstable_stop`)\n```\n\n----------------------------------------\n\nTITLE: Querying Storage with ChainHead\nDESCRIPTION: Demonstrates various ways to query blockchain storage using the chainHead.storage method, including retrieving values, hashes, and merkle proofs.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-client/README.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// string with the SCALE-encoded value\nconst value = await chainHead.storage(blockHash, \"value\", key, childTrie)\n\n// string with the hash value\nconst hash = await chainHead.storage(blockHash, \"hash\", key, childTrie)\n\n// string with the merkle value\nconst items = await chainHead.storage(\n  blockHash,\n  \"closestDescendantMerkleValue\",\n  key,\n  childTrie,\n)\n\n// array of key-value pairs\nconst items = await chainHead.storage(\n  blockHash,\n  \"descendantsValues\",\n  key,\n  childTrie,\n)\n\n// array of key-hash pairs\nconst hashes = await chainHead.storage(\n  blockHash,\n  \"descendantsHashes\",\n  key,\n  childTrie,\n)\n```\n\n----------------------------------------\n\nTITLE: StorageEntry Interface Definition in TypeScript\nDESCRIPTION: Defines the StorageEntry interface returned by the buildStorage method. It includes functions for encoding storage call arguments, decoding results, decoding key data, as well as metadata about the expected arguments and fallback values.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/metadata-builders/README.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StorageEntry {\n  // Encodes the arguments of the storage call.\n  enc: (...args: any[]) => string\n  // Decodes the result from the storage call.\n  dec: (value: string) => any\n  // Decodes the arguments of the storage call\n  keyDecoder: (value: string) => any[]\n  // Expected number of arguments\n  len: number\n  // Decoded fallback value as defined in the metadata entry\n  fallback: unknown\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Finalized Block Hashes in Polkadot API (TypeScript)\nDESCRIPTION: This snippet demonstrates how to follow the chain head and track the latest finalized block hash. It uses the chainHead function to listen for initialization and finalization events, updating the latestFinalizedBlockHash accordingly.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-bindings/src/extrinsics/README.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlet latestFinalizedBlockHash: string\nconst chainHeadFollower = chainHead(true, (event: any) => {\n  if (event.event === \"initialized\") {\n    latestFinalizedBlockHash = event.finalizedBlockHash\n  } else if (event.event === \"finalized\") {\n    latestFinalizedBlockHash =\n      event.finalizedBlockHashes[event.finalizedBlockHashes.length - 1]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Signing Extrinsic Signature Payloads in JavaScript\nDESCRIPTION: Process for creating a signature payload, hashing it if needed, and signing it with a key pair. The signature payload includes call data, extra fields, and various chain-specific information.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-bindings/src/extrinsics/README.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst $signaturePayload = Struct({\n  call: $call,\n  extra: $extra,\n  specVersion: u32,\n  transactionVersion: u32,\n  genesisHash: Bytes(32),\n  blockHash: Bytes(32),\n});\nconst signaturePayloadEncoder = (signaturePayload) => {\n  const encoded = $signaturePayload.enc(signaturePayload);\n  return encoded.length > 256 ? blake2b(encoded) : encoded;\n};\nconst signaturePayload = signaturePayloadEncoder({\n  call: { ... },\n  extra: { ... },\n  specVersion: 9430, // metadata const system.version.specVersion\n  transactionVersion: 22, // metadata const system.version.transactionVersion\n  genesisHash: Bytes(32).dec(\"0x...\"), // RPC -> chain_getBlockHash(0)\n  blockHash: Bytes(32).dec(\"0x...\"), // RPC -> chain_getFinalizedHead()\n});\n\n// using PolkadotJS or similar\nconst keyring = new Keyring({ ss58Format: 42, type: \"sr25519\" });\nconst pair = keyring.getPair(\"address\")\nconst signature = pair.sign(signaturePayload);\n```\n\n----------------------------------------\n\nTITLE: Merkleizing Metadata and Generating Proofs in TypeScript\nDESCRIPTION: Demonstrates how to use the merkleizeMetadata function to process binary metadata files, compute digest values (root hashes), and generate proofs for extrinsics. The example shows both methods of generating proofs: from complete extrinsic data or from individual extrinsic parts.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/merkleize-metadata/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { merkleizeMetadata } from \"@polkadot-api/merkleized-metadata\"\n\nconst ksmMetadata = new Uint8Array(await readFile(\"ksm.bin\"))\nconst merkleizedMetadata = merkleizeMetadata(ksmMetadata, {\n  decimals: 12,\n  tokenSymbol: \"KSM\",\n})\n\n// it returns the digest value of the metadata (aka its merkleized root-hash)\nconst rootHash = merkleizedMetadata.digest()\n\n// given an extrinsic, it returns an encoded `Proof`\nconst proof1: Uint8Array = merkleizedMetadata.getProofForExtrinsic(\n  // Hex for the transaction bytes\n  \"c10184008eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a4801127d333c8f60c0d81dd0a6e2e20ea477a06f96aaca1811872c54c244f0935c60b1f8a38aabef3d3a4ef4050d8d078e35b57b3cf4f9545f8145ce98afb8755384550000000000001448656c6c6f\",\n  // Optionally, we can pass the tx additional signed data\n  \"386d0f001a000000143c3561eefac7bc66facd4f0a7ec31d33b64f1827932fb3fda0ce361def535f143c3561eefac7bc66facd4f0a7ec31d33b64f1827932fb3fda0ce361def535f00\",\n)\n\n// given the extrinsic \"parts\", it returns an encoded `Proof`\nconst proof2: Uint8Array = merkleizedMetadata.getProofForExtrinsicParts(\n  // Call data\n  \"0x040300648ad065ea416ca1725c29979cd41e288180f3e8aefde705cd3e0bab6cd212010bcb04fb711f01\",\n  // Signed Extension data included in the extrinsic\n  \"0x2503000000\",\n  // Signed Extension data included in the signature\n  \"0x164a0f001a000000b0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe878a023bcb37967b6ba0685d002bb74e6cf3b4fc4ae37eb85f756bd9b026bede00\",\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing SubstrateClient with Polkadot Relay Chain Provider\nDESCRIPTION: Creates a SubstrateClient instance using a substrate-connect provider for the Polkadot relay chain. This setup enables interaction with the Polkadot network through a light client.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-client/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getScProvider, WellKnownChain } from \"@polkadot-api/sc-provider\"\nimport { createClient } from \"@polkadot-api/substrate-client\"\n\nconst scProvider = getScProvider()\nconst { relayChain } = scProvider(WellKnownChain.polkadot)\n\nconst client = createClient(relayChain)\n```\n\n----------------------------------------\n\nTITLE: Processing New Blocks and Unpinning with ChainHead\nDESCRIPTION: Demonstrates how to handle new block events from the chainHead subscription, retrieve the block body, process it, and then unpin the block hash to free up resources.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-client/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst chainHead = client.chainHead(\n  true,\n  async (event) => {\n    if (event.type === \"newBlock\") {\n      const body = await chainHead.body(event.blockHash)\n      // body is a string[] containing the SCALE-encoded values within the body\n      processBody(body)\n\n      chainHead.unpin([event.blockHash])\n    }\n  },\n  (error) => {\n    // ...\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Smoldot Client in TypeScript\nDESCRIPTION: Sets up a smoldot light client in a separate worker thread. This pattern is recommended for better performance as it keeps blockchain processing off the main thread. Alternatively shows how to initialize on the main thread.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/client/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { startFromWorker } from \"polkadot-api/smoldot/from-worker\"\nimport SmWorker from \"polkadot-api/smoldot/worker?worker\"\n\n// Starting smoldot on a Worker (strongly recommended)\nexport const smoldot = startFromWorker(new SmWorker())\n\n// Alternatively, we could have smoldot running on the main-thread, e.g:\n// import { start } from \"polkadot-api/smoldot\"\n// export const smoldot = start()\n```\n\n----------------------------------------\n\nTITLE: Creating a Polkadot Signer for Transaction Signing\nDESCRIPTION: Demonstrates creating a PolkadotSigner interface that can be used with polkadot-api to sign transactions using the Ledger device. Requires off-chain network information.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/signers/ledger-signer/README.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// example for Polkadot\nconst info = { tokenSymbol: \"DOT\", decimals: 10 }\nconst signer = await ledger.getPolkadotSigner(info, 0) // same as `getPolkadotSigner(info, 0, 0)`\n\n// got from a `polkadot-api` client\napi.tx.System.remark({\n  remark: Binary.fromText(\"Signed from ledger!\"),\n}).sign(signer)\n```\n\n----------------------------------------\n\nTITLE: Fetching Block Body with ChainHead\nDESCRIPTION: Demonstrates how to retrieve the SCALE-encoded extrinsics in a block's body using the chainHead.body method.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-client/README.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst body = await chainHead.body(blockHash)\n```\n\n----------------------------------------\n\nTITLE: getDynamicBuilder Function Signature in TypeScript\nDESCRIPTION: Defines the getDynamicBuilder function that generates codecs for various chain interactions. It takes a MetadataLookup function and returns methods to build codecs for definitions, constants, events, errors, calls, storage entries, and runtime calls.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/metadata-builders/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getDynamicBuilder(metadataLookup: MetadataLookup): {\n  buildDefinition: (id: number) => Codec\n  buildConstant: (pallet: string, name: string) => Codec\n  buildEvent: (pallet: string, name: string) => VariantEntry\n  buildError: (pallet: string, name: string) => VariantEntry\n  buildCall: (pallet: string, name: string) => VariantEntry\n  buildStorage: (pallet: string, entry: string) => StorageEntry\n  buildRuntimeCall: (api: string, method: string) => RuntimeEntry\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Runtime Call with ChainHead\nDESCRIPTION: Shows how to perform a runtime function call using the chainHead.call method, which returns the encoded output of the function.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-client/README.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await chainHead.call(blockHash, fnName, callParameters)\n```\n\n----------------------------------------\n\nTITLE: Handling Transaction Events\nDESCRIPTION: Demonstrates how to handle different types of events emitted during a transaction's lifecycle, including validation, broadcasting, inclusion in blocks, and finalization.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-client/README.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nswitch (event.type) {\n  case \"validated\":\n    break\n  case \"broadcasted\":\n    const { numPeers } = event\n    break\n  case \"bestChainBlockIncluded\":\n  case \"finalized\":\n    const { block } = event\n    break\n  case \"dropped\":\n  case \"error\":\n  case \"invalid\":\n    const { error } = event\n    break\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Call Data for Substrate Extrinsics in JavaScript\nDESCRIPTION: Example of encoding the 'call' section of an extrinsic for a balances.transferKeepAlive operation. The call contains the module index, method index, and method arguments.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-bindings/src/extrinsics/README.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$call.enc({\n  module: 4,\n  method: 3,\n  args: {\n    dest: {\n      // MultiAddress.Id\n      tag: 0,\n      value: new Uint8Array(32),\n    },\n    value: 1000000000000n,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Multisig Signer with Polkadot Extension in TypeScript\nDESCRIPTION: Complete example showing how to create and use a multisig signer with the Polkadot.js extension. It connects to an extension, finds a specific account, creates a multisig configuration, and sends a transaction that will be automatically wrapped in a multisig call.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/signers/meta-signers/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getMultisigSigner } from \"@polkadot-api/meta-signers\"\nimport {\n  connectInjectedExtension,\n  getInjectedExtensions,\n} from \"polkadot-api/pjs-signer\"\n\n// Grab a signer from a pjs extension\nwhile (!getInjectedExtensions()?.includes(\"polkadot-js\"))\n  await new Promise((res) => setTimeout(res, 50))\nconst pjs = await connectInjectedExtension(\"polkadot-js\")\nconst accounts = pjs.getAccounts()\nconst alice = accounts.find((account) => account.name === \"Alice\")\n\n// ... create a `typedApi` to the chain you want to connect to\n\n// Create a multisig signer with alice\nconst aliceMultisig = getMultisigSigner(\n  {\n    threshold: 2,\n    signatories: [\n      \"15oF4uVJwmo4TdGW7VfQxNLavjCXviqxT9S1MgbjMNHr6Sp5\",\n      \"12Ds7U7t2biJXnRY4jWvBu71UzvPMAr3SxXBm2iHqCFBU4Yx\",\n      \"14u9dEGTLgwwzQ6oMm6bN2mt7xxwEko8qciKw9jg3Uc4pYjA\",\n    ],\n  },\n  typedApi.query.Multisig.Multisigs,\n  typedApi.apis.TransactionPaymentApi.query_info,\n  alice.signer,\n)\n\n// Send the transaction as multisig\nawait typedApi.tx.System.remark({\n  remark: Binary.fromText(\"We are all very good friends\"),\n}).signAndSubmit(aliceMultisig)\n\n// The transaction will be wraped with a multisig and signed as alice.\n```\n\n----------------------------------------\n\nTITLE: Creating a Smoldot Provider for Polkadot API\nDESCRIPTION: Function that creates a JsonRpcProvider using a Smoldot chain connection. It accepts either a Smoldot Chain instance or a Promise that resolves to a Chain, allowing for both synchronous and asynchronous chain initialization.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/json-rpc/sm-provider/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getSmProvider(\n  chain: smoldot.Chain | Promise<smoldot.Chain>,\n): JsonRpcProvider\n```\n\n----------------------------------------\n\nTITLE: Decoding System.Account(AccountId32) Storage Value in Polkadot API (TypeScript)\nDESCRIPTION: This code demonstrates how to decode the storage value for System.Account(AccountId32), which is an AccountInfo struct in Polkadot. It uses a Struct decoder with specific fields to parse the hexadecimal response.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-bindings/src/extrinsics/README.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nStruct({\n  nonce: u32,\n  consumer: u32,\n  providers: u32,\n  sufficients: u32,\n  data: Bytes(Infinity),\n}).dec(\"0x...\")\n```\n\n----------------------------------------\n\nTITLE: Initializing ChainHead Subscription with SubstrateClient\nDESCRIPTION: Sets up a chainHead subscription using the SubstrateClient. This subscription allows for real-time updates on new blocks and provides methods for interacting with the blockchain's head.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-client/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst chainHead = client.chainHead(\n  true,\n  (event) => {\n    // ...\n  },\n  (error) => {\n    // ...\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Synchronous JSON-RPC Providers in TypeScript\nDESCRIPTION: This snippet defines the types and function signatures for creating synchronized JSON-RPC providers. It includes the AsyncJsonRpcProvider type that handles messages and connection halting, and the getSyncProvider function that transforms an async provider into a synchronous one.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/json-rpc/json-rpc-provider-proxy/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AsyncJsonRpcProvider = (\n  onMessage: (message: string) => void,\n  onHalt: () => void,\n) => JsonRpcConnection\n\nfunction getSyncProvider(\n  input: () => Promise<AsyncJsonRpcProvider>,\n): JsonRpcProvider\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Subscription with ChainHead\nDESCRIPTION: Shows how to set up a storage subscription that emits storage items as they are resolved by the JSON-RPC server, allowing for efficient handling of multiple storage queries.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-client/README.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst abort = chainHead.storageSubscription(\n  hash,\n  [\n    { key, type },\n    /* ... each item */\n  ],\n  null,\n  (items) => {\n    // items is an array of { key, value?, hash?, closestDescendantMerkleValue? }\n  },\n  onError,\n  onDone,\n  (nDiscardedItems) => {\n    // amount of discarded items, as defined by the JSON-RPC spec.\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Computing System.Account(AccountId32) Storage Key in Polkadot API (TypeScript)\nDESCRIPTION: This snippet computes the storage key for System.Account(AccountId32). It uses various cryptographic functions and the Polkadot Keyring to generate the key, including TwoX128 hashing and Blake2b hashing for the account ID.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-bindings/src/extrinsics/README.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { blake2b } from \"@noble/hashes/blake2b\"\nimport { Keyring } from \"@polkadot/keyring\"\nimport { cryptoWaitReady } from \"@polkadot/util-crypto\"\nimport { twoX128 } from \"@polkadot-api/substrate-bindings\"\nimport { mergeUint8, toHex } from \"@polkadot-api/utils\"\n\nawait cryptoWaitReady()\n\nconst keyring = new Keyring({ ss58Format: 42, type: \"sr25519\" })\nconst mnemonic =\n  \"describe excess pig damage elbow audit receive buyer release very category endorse\"\nconst sender = keyring.addFromMnemonic(`${mnemonic}//sender`)\nconst systemKey = toHex(twoX128(new TextEncoder().encode(\"System\")))\nconst accountKey = toHex(twoX128(new TextEncoder().encode(\"Account\")))\nconst accountId32Key = toHex(\n  mergeUint8(blake2b(sender.publicKey, { dkLen: 128 / 8 }), sender.publicKey),\n)\nconst systemAccountKey = toHex(\n  mergeUint8(\n    twoX128(new TextEncoder().encode(\"System\")),\n    twoX128(new TextEncoder().encode(\"Account\")),\n    blake2b(sender.publicKey, { dkLen: 128 / 8 }),\n    sender.publicKey,\n  ),\n)\nconsole.log({ systemKey, accountKey, accountId32Key, systemAccountKey })\n// {\n//   systemKey: '0x26aa394eea5630e07c48ae0c9558cef7',\n//   accountKey: '0xb99d880ec681799c0cf30e8886371da9',\n//   accountId32Key: '0xf5fefa644d779872e1b0b93e4dee21a922c6592f562829da060afbdd05d82fb9a29266d9d94cb94b86ba5795c8ca986c',\n//   systemAccountKey: '0x26aa394eea5630e07c48ae0c9558cef7b99d880ec681799c0cf30e8886371da9f5fefa644d779872e1b0b93e4dee21a922c6592f562829da060afbdd05d82fb9a29266d9d94cb94b86ba5795c8ca986c'\n// }\n```\n\n----------------------------------------\n\nTITLE: Defining MetadataLookup Interface and getLookupFn Function in TypeScript\nDESCRIPTION: Defines the MetadataLookup interface and the getLookupFn function that creates a lookup function for metadata entries. The function takes a Metadata object and returns a function that retrieves LookupEntry objects by their ID, providing a denormalized view of metadata types.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/metadata-builders/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MetadataLookup {\n  (id: number): LookupEntry\n  metadata: V14 | V15\n}\n\nfunction getLookupFn(metadata: Metadata): MetadataLookup\n```\n\n----------------------------------------\n\nTITLE: Encoding an Extrinsic using scale-ts in JavaScript\nDESCRIPTION: Basic example of encoding an extrinsic using the scale-ts library. This demonstrates how to convert an extrinsic to an opaque format for submission over RPC with author_submitExtrinsic.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-bindings/src/extrinsics/README.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst opaqueExtrinsic = Bytes().enc(extrinsic)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Header with ChainHead\nDESCRIPTION: Shows how to fetch the SCALE-encoded header of a block using the chainHead.header method.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-client/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst header = await chainHead.header(blockHash)\n```\n\n----------------------------------------\n\nTITLE: Initializing LedgerSigner with Transport in NodeJS\nDESCRIPTION: Creates a LedgerSigner instance by initializing a Ledger Transport. This example shows how to create the transport for NodeJS environments using hw-transport-node-hid.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/signers/ledger-signer/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// use any other transport, we give the node example here\nimport TransportNodeHid from \"@ledgerhq/hw-transport-node-hid\"\nimport { LedgerSigner } from \"@polkadot-api/ledger-signer\"\n\n// this will take the first available device\nconst transport = await TransportNodeHid.create()\nconst ledger = new LedgerSigner(transport)\n```\n\n----------------------------------------\n\nTITLE: VariantEntry Interface Definition in TypeScript\nDESCRIPTION: Defines the VariantEntry interface returned by buildEvent, buildError, and buildCall methods. It includes the location of the entry in the metadata (as pallet and entry indices) and the codec for encoding/decoding the data.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/metadata-builders/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface VariantEntry {\n  location: [number, number] // [palletIdx, entryIdx],\n  codec: Codec\n}\n```\n\n----------------------------------------\n\nTITLE: RuntimeEntry Interface Definition in TypeScript\nDESCRIPTION: Defines the RuntimeEntry interface returned by the buildRuntimeCall method. It contains codecs for both encoding the arguments of runtime calls and decoding their results.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/metadata-builders/README.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RuntimeEntry {\n  args: Codec<any[]>\n  value: Codec<any>\n}\n```\n\n----------------------------------------\n\nTITLE: Recording RPC Logs with withLogsRecorder in TypeScript\nDESCRIPTION: Function that enhances a JsonRpcProvider to record logs of all messages sent and received. It takes a persistence function and the original provider as arguments, returning an enhanced provider that logs all interactions.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/json-rpc/logs-provider/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction withLogsRecorder(\n  persistLog: (line: string) => void,\n  provider: JsonRpcProvider,\n): JsonRpcProvider\n```\n\n----------------------------------------\n\nTITLE: Computing System.Number Storage Key in Polkadot API (TypeScript)\nDESCRIPTION: This code computes the storage key for System.Number by concatenating the TwoX128 hashes of 'System' and 'Number'. It uses the twoX128 function from @polkadot-api/substrate-bindings and utility functions for merging and converting to hex.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-bindings/src/extrinsics/README.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { twoX128 } from \"@polkadot-api/substrate-bindings\"\nimport { mergeUint8, toHex } from \"@polkaddot-api/utils\"\n\nconst systemKey = toHex(twoX128(new TextEncoder().encode(\"System\")))\nconst numberKey = toHex(twoX128(new TextEncoder().encode(\"Number\")))\nconst systemNumberKey = toHex(\n  mergeUint8(\n    twoX128(new TextEncoder().encode(\"System\")),\n    twoX128(new TextEncoder().encode(\"Number\")),\n  ),\n)\nconsole.log({ systemKey, numberKey, systemNumberKey })\n// {\n//   systemKey: '0x26aa394eea5630e07c48ae0c9558cef7',\n//   numberKey: '0x02a5c1b19ab7a04f536c519aca4983ac',\n//   systemNumberKey: '0x26aa394eea5630e07c48ae0c9558cef702a5c1b19ab7a04f536c519aca4983ac'\n// }\n```\n\n----------------------------------------\n\nTITLE: Requesting Genesis Hash using SubstrateClient\nDESCRIPTION: Demonstrates how to make a JSON-RPC request using the SubstrateClient. This example retrieves the genesis hash of the blockchain.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-client/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst genesisHash = await client.request(\"chainSpec_v1_genesisHash\", [])\n```\n\n----------------------------------------\n\nTITLE: Defining the Extrinsic Extra Data Structure in JavaScript\nDESCRIPTION: Implementation of the 'extra' field in a Polkadot extrinsic, which contains mortality information, nonce, and tip values.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-bindings/src/extrinsics/README.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst $extra = Struct({\n  mortality: $mortality,\n  nonce: compact,\n  tip: compact,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing WebSocket Provider in TypeScript\nDESCRIPTION: Function signature for creating a WebSocket-based JSON-RPC provider. Takes a URI string and optional protocol parameters to establish a WebSocket connection to a blockchain node.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/json-rpc/ws-provider/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction WebSocketProvider(\n  uri: string,\n  protocols?: string | string[],\n): JsonRpcProvider\n```\n\n----------------------------------------\n\nTITLE: Defining the getMultisigSigner Function Signature in TypeScript\nDESCRIPTION: Function signature for getMultisigSigner that creates a multisig wrapper for transactions. It requires multisig configuration, a function to query existing multisig calls, a function to get payment info, and a base signer from one of the signatories.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/signers/meta-signers/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getMultisigSigner(\n  multisig: {\n    threshold: number\n    signatories: SS58String[]\n  },\n  getMultisigInfo: (\n    multisig: SS58String,\n    callHash: Binary,\n  ) => Promise<MultisigInfo | undefined>,\n  txPaymentInfo: (uxt: Binary, len: number) => Promise<PaymentInfo | undefined>,\n  signer: PolkadotSigner,\n  options?: {\n    method: (\n      approvals: Array<SS58String>,\n      threshold: number,\n    ) => \"as_multi\" | \"approve_as_multi\"\n  },\n): PolkadotSigner\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public Keys from Ledger\nDESCRIPTION: Demonstrates retrieving public keys for different accounts by specifying derivation paths using account index and optional address offset parameters.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/signers/ledger-signer/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst first = await ledger.getPubkey(0) // exactly the same as `getPubkey(0, 0)`\nconst second = await ledger.getPubkey(1) // `getPubkey(1, 0)`\nconst third = await ledger.getPubkey(2) // `getPubkey(2, 0)`\n// ...\n```\n\n----------------------------------------\n\nTITLE: getChecksumBuilder Function Signature in TypeScript\nDESCRIPTION: Defines the getChecksumBuilder function that generates checksum functions for different metadata components. It takes a MetadataLookup function and returns methods to build checksums for definitions, runtime calls, storage entries, calls, events, errors, and constants.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/metadata-builders/README.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getChecksumBuilder(metadataLookup: MetadataLookup): {\n  buildDefinition: (id: number) => string | null\n  buildRuntimeCall: (api: string, method: string) => string | null\n  buildStorage: (pallet: string, entry: string) => string | null\n  buildCall: (pallet: string, name: string) => string | null\n  buildEvent: (pallet: string, name: string) => string | null\n  buildError: (pallet: string, name: string) => string | null\n  buildConstant: (pallet: string, constantName: string) => string | null\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding System.Number Storage Value in Polkadot API (TypeScript)\nDESCRIPTION: This snippet shows how to decode the storage value for System.Number, which is a u32 in Polkadot. It uses the u32.dec function to decode the hexadecimal response.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-bindings/src/extrinsics/README.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nu32.dec(\"0x...\")\n```\n\n----------------------------------------\n\nTITLE: Example of LookupEntry Type Structure in TypeScript\nDESCRIPTION: Illustrates the structure of the LookupEntry type, which is a union of terminal and composed variable types. This represents the denormalized data structure returned by the lookup function, showing how metadata types are represented internally.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/metadata-builders/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype TerminalVar =\n  | PrimitiveVar // u8, str, char, i128, etc.\n  | CompactVar\n  | BitSequenceVar\n  | AccountId32\n\ntype ComposedVar =\n  | TupleVar\n  | StructVar\n  | SequenceVar\n  | ArrayVar\n  | OptionVar\n  | ResultVar\n  | EnumVar\n\ntype LookupEntry = TerminalVar | ComposedVar\n```\n\n----------------------------------------\n\nTITLE: Defining Extrinsic Decoders with scale-ts in JavaScript\nDESCRIPTION: Comprehensive set of codec definitions for decoding a Polkadot extrinsic. This includes version encoding, address formats, signature types, mortality calculations, and the overall extrinsic structure.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-bindings/src/extrinsics/README.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst $version = enhanceCodec(\n  u8,\n  (value) => (+!!value.signed << 7) | value.version,\n  (value) => ({\n    version: value & ~(1 << 7),\n    signed: !!(value & (1 << 7)),\n  }),\n)\nconst $multiAddress = Enum({\n  0: Bytes(32),\n  // FIXME: complete MultiAddress variants\n})\nconst $multiSignature = Enum({\n  0: Bytes(64), // Ed25519\n  1: Bytes(64), // Sr25519\n  2: Bytes(65), // Ecdsa\n})\nconst $mortal = enhanceCodec(\n  Bytes(2),\n  (value) => {\n    const factor = Math.max(value.period >> 12, 1)\n    const left = Math.min(Math.max(trailingZeroes(value.period) - 1, 1), 15)\n    const right = (value.phase / factor) << 4\n    return u16.enc(left | right)\n  },\n  (value) => {\n    const enc = u16.dec(value)\n    const period = 2 << enc % (1 << 4)\n    const factor = Math.max(period >> 12, 1)\n    const phase = (enc >> 4) * factor\n    return { type: \"mortal\", period, phase }\n  },\n)\nconst $mortality = createCodec(\n  (value) => (value.type === \"inmortal\" ? u8.enc(0) : $mortal.enc(value)),\n  createDecoder((value) => {\n    const firstByte = u8.dec(value)\n    if (firstByte === 0) return { type: \"inmortal\" }\n    const secondByte = u8.dec(value)\n    console.log({ firstByte, secondByte })\n    return $mortal.dec(Uint8Array.from([firstByte, secondByte]))\n  }),\n)\nconst $extra = Struct({\n  mortality: $mortality,\n  nonce: compact,\n  tip: compact,\n})\nconst $call = Struct({\n  module: u8,\n  method: u8,\n  // for a balances.transferKeepAlive(dest, value) arguments\n  args: Struct({\n    dest: $multiAddress,\n    value: compact,\n  }),\n})\nconst $extrinsic = Struct({\n  version: $version,\n  // v4 Body\n  body: Struct({\n    sender: $multiAddress,\n    signature: $multiSignature,\n    extra: $extra,\n    call: $call,\n  }),\n})\nconst $opaqueExtrinsic = enhanceCodec(Bytes(), $extrinsic.enc, $extrinsic.dec)\nconst extrinsic = $opaqueExtrinsic.dec(\"0x...\")\n\nconsole.log(extrinsic)\n```\n\n----------------------------------------\n\nTITLE: Creating a Replay Provider with logsProvider in TypeScript\nDESCRIPTION: Function that creates a JsonRpcProvider that replays interactions from previously recorded logs. It takes an array of log strings and returns a provider that simulates the recorded behavior.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/json-rpc/logs-provider/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction logsProvider(logs: string[]): JsonRpcProvider\n```\n\n----------------------------------------\n\nTITLE: Example of StructVar Type Definition in TypeScript\nDESCRIPTION: Shows the structure of a StructVar type as an example of a composed variable type in the LookupEntry union. StructVar represents a struct type in the metadata with named fields that can contain other entries.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/metadata-builders/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype StructVar = {\n  type: \"struct\"\n  value: Record<string, LookupEntry>\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Address on Ledger Device Screen\nDESCRIPTION: Shows how to display a derived address on the Ledger device screen for verification, using the SS58 prefix for address encoding.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/signers/ledger-signer/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// 42 is the ss58 prefix in this case\nconst first = await ledger.seeAddressInDevice(42, 0) // exactly the same as `seeAddressInDevice(42, 0, 0)`\n```\n\n----------------------------------------\n\nTITLE: Unpinning Block Hashes with ChainHead\nDESCRIPTION: Demonstrates how to unpin block hashes to free up resources using the chainHead.unpin method.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-client/README.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nchainHead.unpin(blockHashes)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ledger Device ID\nDESCRIPTION: Shows how to get a deterministic device ID from the Ledger, which can be used to verify the same device is being used across sessions. This value is cached after the first call.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/signers/ledger-signer/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst id = await ledger.deviceId()\n// 67518578523\n```\n\n----------------------------------------\n\nTITLE: Adding Chain Specification - Shell Command\nDESCRIPTION: Command to add a new chain using the Kusama network as an example. Uses 'ksm' as the reference key and sources from the well-known chain 'ksmcc3'.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/cli/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npolkadot-api add ksm -n ksmcc3\n```\n\n----------------------------------------\n\nTITLE: Add Command Usage - Shell Output\nDESCRIPTION: Detailed usage instructions for the add command, showing all available options for adding new chain specifications.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/cli/README.md#2025-04-19_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nUsage: polkadot-api add [options] <key>\n\nAdd a new chain spec to the list\n\nArguments:\n  key                         Key identifier for the chain spec\n\nOptions:\n  --config <filename>         Source for the config file\n  -f, --file <filename>       Source from metadata encoded file\n  -w, --wsUrl <URL>           Source from websocket url\n  -c, --chainSpec <filename>  Source from chain spec file\n  -n, --name <name>           Source from a well-known chain\n  --no-persist                Do not persist the metadata as a file\n  -h, --help                  display help for command\n```\n\n----------------------------------------\n\nTITLE: Implementing MultiAddress for Polkadot Extrinsics in JavaScript\nDESCRIPTION: Definition of the MultiAddress codec for the sender field in an extrinsic. In Polkadot, this is an enum where the first variant is a 32-byte AccountId.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/substrate-bindings/src/extrinsics/README.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst $multiAddress = Enum({\n  0: Bytes(32),\n  // other variants: Index, Raw, Address32, Addres20\n})\n```\n\n----------------------------------------\n\nTITLE: CLI Help Command Usage - Shell Output\nDESCRIPTION: Displays the main help menu showing all available commands and options for the Polkadot API CLI.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/cli/README.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nUsage: polkadot-api [options] [command]\n\nPolkadot API CLI\n\nOptions:\n  -h, --help               display help for command\n\nCommands:\n  generate [options]       Generate descriptor files\n  add [options] <key>      Add a new chain spec to the list\n  update [options] [keys]  Update the metadata files\n  remove [options] <key>   Remove a chain spec from the list\n  help [command]           display help for command\n```\n\n----------------------------------------\n\nTITLE: Running Metadata Retrieval Script in Polkadot API Migration\nDESCRIPTION: This command starts the smoldot process to connect to multiple chains and retrieve their metadata. It's the first step in the migration process.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/migrate-known-types/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun start 1\n```\n\n----------------------------------------\n\nTITLE: Generating Positional Indices for Polkadot API Known Types\nDESCRIPTION: This command runs a script to generate positional indices for known types based on the retrieved metadata. It's the second step in the migration process.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/migrate-known-types/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun start 2\n```\n\n----------------------------------------\n\nTITLE: Refreshing Known Types List in Polkadot API Migration\nDESCRIPTION: This command runs a script to refresh the list of known types using the generated positional indices. It's the third step in the migration process, performed after switching to the branch with changes.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/migrate-known-types/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun start 3\n```\n\n----------------------------------------\n\nTITLE: Generate Descriptor Files - Shell Command\nDESCRIPTION: Basic command to generate descriptor files into the @polkadot-api/descriptors package.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/cli/README.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npolkadot-api\n```\n\n----------------------------------------\n\nTITLE: Update Command Usage - Shell Output\nDESCRIPTION: Shows the usage and options for the update command which refreshes metadata files for specified chains.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/cli/README.md#2025-04-19_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nUsage: polkadot-api update [options] [keys]\n\nUpdate the metadata files\n\nArguments:\n  keys                 Keys of the metadata files to update, separated by commas. Leave\n                       empty for all\n\nOptions:\n  --config <filename>  Source for the config file\n  -h, --help           display help for command\n```\n\n----------------------------------------\n\nTITLE: Querying Ledger App Information\nDESCRIPTION: Demonstrates how to use the appInfo method to query the device for information about the running application.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/signers/ledger-signer/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst info = await ledger.appInfo()\n// { appName: \"Polkadot\", appVersion: \"100.0.8\" }\n```\n\n----------------------------------------\n\nTITLE: Generate Command Usage - Shell Output\nDESCRIPTION: Shows the usage and options for the generate command which creates descriptor files for specified chains.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/cli/README.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nUsage: polkadot-api generate [options]\n\nGenerate descriptor files\n\nOptions:\n  --config <filename>  Source for the config file\n  -k, --key <key>      Key of the descriptor to generate\n  -h, --help           display help for command\n```\n\n----------------------------------------\n\nTITLE: Remove Command Usage - Shell Output\nDESCRIPTION: Displays the usage and options for the remove command which deletes chain specifications from the configuration.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/cli/README.md#2025-04-19_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nUsage: polkadot-api remove [options] <key>\n\nRemove a chain spec from the list\n\nArguments:\n  key                  Key identifier for the chain spec\n\nOptions:\n  --config <filename>  Source for the config file\n  -h, --help           display help for command\n```\n\n----------------------------------------\n\nTITLE: Running Polkadot API Documentation Generator\nDESCRIPTION: Command to execute the documentation generator tool. Requires .papi files in the current directory and generates documentation in the specified output directory.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/docgen/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx papi-generate-docs --output docs\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bun\nDESCRIPTION: Command to install the project dependencies using the Bun package manager.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/examples/ink/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Running the Project with Bun\nDESCRIPTION: Command to execute the project's main TypeScript file using the Bun runtime.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/examples/ink/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun run index.ts\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Structured changelog following semantic versioning, documenting changes across multiple versions including fixes, features, breaking changes and dependency updates.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/codegen/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unreleased\n\n## 0.13.4 - 2025-04-16\n\n### Fixed\n\n- fix nested AnonymousEnum not getting anonymized\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Detailed changelog entries documenting version history from 0.1.0 to 0.3.8, including fixes, updates, and new features for the Polkadot API project.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/smoldot/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unreleased\n\n## 0.3.8 - 2024-12-10\n\n### Fixed\n\n- Update smoldot to `2.0.34`\n\n## 0.3.7 - 2024-11-19\n\n### Fixed\n\n- Update smoldot to `2.0.33`\n\n## 0.3.6 - 2024-11-18\n\n### Fixed\n\n- Update smoldot to `2.0.32`\n\n## 0.3.5 - 2024-11-08\n\n### Fixed\n\n- Use smoldot@2.0.31\n\n## 0.3.4 - 2024-11-07\n\n### Fixed\n\n- Use @polkadot-api/smoldot-patch@100.0.0\n\n## 0.3.3 - 2024-10-05\n\n### Fixed\n\n- Target ES2022 when bundling\n\n## 0.3.2 - 2024-08-16\n\n### Fixed\n\n- Update smoldot to `2.0.30`\n\n## 0.3.1 - 2024-08-12\n\n### Fixed\n\n- Node worker: unable to add chains with potentialRelayChains.\n\n## 0.3.0 - 2024-08-12\n\n### Added\n\n- Added `@polkadot-api/smoldot/node-worker` to create a smoldot worker in NodeJS.\n- Added `@polkadot-api/smoldot/from-node-worker` to create a client from a node smoldot worker.\n\n### Fixed\n\n- Fixed correct ESM build path.\n- Update deps\n\n## 0.2.7 - 2024-07-25\n\n### Fixed\n\n- Update dependencies\n\n## 0.2.6 - 2024-07-18\n\n### Fixed\n\n- Changed build to show individual files on source map explorers [#567](https://github.com/polkadot-api/polkadot-api/pull/567)\n\n## 0.2.5 - 2024-06-17\n\n### Fixed\n\n- Bump to `smoldot@2.0.29`\n\n## 0.2.4 - 2024-05-30\n\n### Fixed\n\n- Bump to `smoldot@2.0.28`\n\n## 0.2.3 - 2024-05-10\n\n### Fixed\n\n- Upgraded to `smoldot@2.0.26`\n\n## 0.2.2 - 2024-04-29\n\n### Fixed\n\n- Upgraded to `smoldot@2.0.25`\n\n## 0.2.1 - 2024-04-25\n\n### Fixed\n\n- Upgraded to `smoldot@2.0.24`\n\n## 0.2.0 - 2024-04-11\n\n### Changed\n\n- Added optional `SmoldotOptions` parameter to `startFromWorker`\n\n## 0.1.0 - 2024-04-10\n\n### Changed\n\nInitial release\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Polkadot API Client\nDESCRIPTION: Demonstrates creating a Polkadot API client, connecting to the chain, subscribing to finalized blocks, and querying account information. Shows both Promise-based and Observable-based API usage patterns.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"polkadot-api\"\nimport { getSmProvider } from \"polkadot-api/sm-provider\"\nimport { polkadotTypes } from \"@polkadot-api/descriptors\"\nimport { smoldot } from \"./smoldot\"\n\n// dynamically importing the chainSpec improves the performance of your dApp\nconst smoldotRelayChain = import(\"polkadot-api/chains/polkadot\").then(\n  ({ chainSpec }) => smoldot.addChain({ chainSpec }),\n)\n\n// getting a `JsonRpcProvider` from a `smoldot` chain.\nconst jsonRpcProvider = getSmProvider(smoldotRelayChain)\n\n// we could also create a `JsonRpcProvider` from a WS connection, eg:\n// const jsonRpcProvider = WsProvider(\"wss://some-rpc-endpoint.io\")\n\nconst polkadotClient = createClient(jsonRpcProvider)\n\n// logging blocks as they get finalized\npolkadotClient.finalizedBlock$.subscribe((block) => {\n  console.log(`#${block.number} - ${block.hash} - parentHash: ${block.parent}`)\n})\n\n// pulling the latest finalized block\nconst block = await polkadotClient.getFinalizedBlock()\n\n// obtaining a delightfully typed interface from the descriptors\n// previously generated from the metadata\nconst polkadotApi = polkadotClient.getTypedApi(polkadotTypes)\n\n// presenting the transferrable amount of a given account\nconst {\n  data: { free, frozen },\n} = await polkadotApi.query.System.Account.getValue(\n  \"15oF4uVJwmo4TdGW7VfQxNLavjCXviqxT9S1MgbjMNHr6Sp5\",\n)\nconsole.log(`Transferrable amount: ${free - frozen}`)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry Example\nDESCRIPTION: Example of changelog entry format showing version number, date, and categorized changes\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/signers/signer/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.0 - 2024-07-11\n\n### Changed\n\n- Add API to sign arbitrary bytes and rename `sign` to `signTx`\n```\n\n----------------------------------------\n\nTITLE: Defining Polkadot API Signer Package Name\nDESCRIPTION: Package name definition for the Polkadot API signer module in markdown format.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/packages/signers/signer/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @polkadot-api/signer\n```\n\n----------------------------------------\n\nTITLE: Initializing Smoldot Worker for Polkadot API\nDESCRIPTION: Sets up a Smoldot client instance either using a Web Worker (recommended) or on the main thread. This provides the blockchain client functionality needed for the Polkadot API.\nSOURCE: https://github.com/polkadot-api/polkadot-api/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { startFromWorker } from \"polkadot-api/smoldot/from-worker\"\nimport SmWorker from \"polkadot-api/smoldot/worker?worker\"\n\n// Starting smoldot on a Worker (strongly recommended)\nexport const smoldot = startFromWorker(new SmWorker())\n\n// Alternatively, we could have smoldot running on the main-thread, e.g:\n// import { start } from \"polkadot-api/smoldot\"\n// export const smoldot = start()\n```"
  }
]