[
  {
    "owner": "cap-go",
    "repo": "capacitor-social-login",
    "content": "TITLE: Defining LoginOptions Union Type in TypeScript\nDESCRIPTION: TypeScript type for login options that specifies the provider and its associated options. This discriminated union type ensures type safety when configuring login for different providers.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/README.md#2025-04-17_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n{ provider: 'facebook'; options: FacebookLoginOptions; } | { provider: 'google'; options: GoogleLoginOptions; } | { provider: 'apple'; options: AppleProviderOptions; }\n```\n\n----------------------------------------\n\nTITLE: Performing Google Login with Capacitor Social Login in TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to use the Capacitor Social Login plugin to perform a Google login. It should be called when a user initiates the login process, such as clicking a login button.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/docs/setup_google.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await SocialLogin.login({\nprovider: 'google',\noptions: {}\n})\n// handle the response. popoutStore is specific to my app\npopoutStore.popout(\"Google login\", JSON.stringify(response))\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Social Login Plugin\nDESCRIPTION: Commands to install the @capgo/capacitor-social-login plugin and synchronize the native projects.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capgo/capacitor-social-login\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Defining GoogleLoginResponse Union Type in TypeScript\nDESCRIPTION: TypeScript type definition for Google login responses, which can be either online or offline response types. This allows handling different authentication flows for Google Sign-In.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/README.md#2025-04-17_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nGoogleLoginResponseOnline | GoogleLoginResponseOffline\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Offline Authentication with Capacitor Social Login\nDESCRIPTION: Client-side implementation of Google authentication using offline mode with the Capacitor Social Login plugin. This code initializes the plugin, performs login with the offline mode option, and handles the authentication flow including token exchange with a backend server.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/docs/setup_google.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Capacitor } from '@capacitor/core';\nimport { GoogleLoginOfflineResponse, SocialLogin } from '@capgo/capacitor-social-login';\nimport { usePopoutStore } from '@/popoutStore'; // <-- specific to my app\n\nconst baseURL = \"[redacted]\";\n\nasync function fullLogin() {\n  await SocialLogin.initialize({\n    google: {\n      webClientId: '[redacted]',  \n      iOSClientId: '[redacted]',\n      iOSServerClientId: 'The same value as webClientId',\n      mode: 'offline' // <-- important\n    } \n  })\n  const response = await SocialLogin.login({\n    provider: 'google',\n    options: {\n      forceRefreshToken: true // <-- important\n    }\n  })\n\n  if (response.provider === 'google') {\n    const result = response.result as GoogleLoginOfflineResponse\n    const res = await fetch(`${baseURL}/auth/google_offline`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        serverAuthCode: result.serverAuthCode,\n        platform: Capacitor.getPlatform()\n      }),\n      method: \"POST\"\n    })\n\n    if (res.status !== 200) {\n      popoutStore.popout(\"Full google login failed\", \"check console\");\n      return\n    }\n\n    const { jwt } = await res.json();\n    const userinfo = await fetch(`${baseURL}/auth/get_google_user`, {\n      headers: {\n        Authorization: `Bearer ${jwt}`\n      }\n    })\n    if (userinfo.status !== 200) {\n      popoutStore.popout(\"Full google (userinfo) login failed\", \"check console\");\n      return\n    }\n    popoutStore.popout(\"userinfo res\", await userinfo.text());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Token for Social Login in TypeScript\nDESCRIPTION: A method that refreshes the access token for a currently logged in user. It takes login options as parameters and returns a promise that resolves when the refresh operation completes.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/README.md#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nrefresh(options: LoginOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Social Login for Google in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import and initialize the Capacitor Social Login plugin for Google login. It should be called once, typically in a component's mounted lifecycle hook.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/docs/setup_google.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SocialLogin } from '@capgo/capacitor-social-login';\n\n// onMounted is Vue specific\n// webClientId is the client ID you got in the web client creation step not the android client ID.\nonMounted(() => {\nSocialLogin.initialize({\n  google: {\n    webClientId: '673324426943-avl4v9ubdas7a0u7igf7in03pdj1dkmg.apps.googleusercontent.com',\n  }\n})\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Facebook Login with Capgo Social Login\nDESCRIPTION: TypeScript implementation of the Facebook login function using Capgo Social Login plugin, including error handling and response management.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/docs/setup_facebook.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync function loginWithFacebook() {\n  try {\n    const result = await SocialLogin.login({\n      provider: 'facebook',\n      options: {\n        permissions: ['email', 'public_profile'],\n        limitedLogin: false // this will depend if you want to use the limited login or not. Docs: https://developers.facebook.com/docs/facebook-login/limited-login\n      }\n    });\n    console.log('Facebook login result:', result);\n    // Handle successful login\n  } catch (error) {\n    console.error('Facebook login error:', error);\n    // Handle error\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Login Status with isLoggedIn Method in TypeScript\nDESCRIPTION: A method that checks if a user is currently logged in with a specified social provider. It takes provider information as options and returns a promise with a boolean indicating login status.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/README.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nisLoggedIn(options: isLoggedInOptions) => Promise<{ isLoggedIn: boolean; }>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authorization Code from Social Provider in TypeScript\nDESCRIPTION: A method that retrieves the current authorization code or access token from a specified social provider. Returns a promise with token information in the form of an AuthorizationCode object.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/README.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ngetAuthorizationCode(options: AuthorizationCodeOptions) => Promise<AuthorizationCode>\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Login Function\nDESCRIPTION: TypeScript implementation of the Google login functionality with response handling.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/docs/setup_google.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await SocialLogin.login({\n  provider: 'google',\n  options: {}\n})\n// handle the response. popoutStore is specific to my app\npopoutStore.popout(\"Google login\", JSON.stringify(response))\n```\n\n----------------------------------------\n\nTITLE: Initializing Social Login Plugin with Apple Configuration\nDESCRIPTION: Example of initializing the Social Login plugin with Apple authentication settings, including client ID and redirect URL configuration that affects both Android and iOS platforms.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/docs/setup_apple.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait SocialLogin.initialize({\n  apple: {\n    clientId: 'ee.forgr.io.ionic.starter.service2',\n    redirectUrl: 'https://appleloginvps.wcaleniewolny.me/login/callback'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Facebook Authentication on Android\nDESCRIPTION: Code snippet showing how to initialize and login with Facebook provider on Android.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait SocialLogin.initialize({\n  facebook: {\n    appId: 'your-app-id',\n    clientToken: 'your-client-token',\n  },\n});\nconst res = await SocialLogin.login({\n  provider: 'facebook',\n  options: {\n    permissions: ['email', 'public_profile'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Facebook Authentication on iOS\nDESCRIPTION: Code snippet showing how to initialize and login with Facebook provider on iOS.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait SocialLogin.initialize({\n  facebook: {\n    appId: 'your-app-id',\n  },\n});\nconst res = await SocialLogin.login({\n  provider: 'facebook',\n  options: {\n    permissions: ['email', 'public_profile'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Google Authentication on Android\nDESCRIPTION: Code snippet showing how to initialize and login with Google provider on Android.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/README.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait SocialLogin.initialize({\n  google: {\n    webClientId: 'your-client-id', // the web client id for Android and Web\n  },\n});\nconst res = await SocialLogin.login({\n  provider: 'google',\n  options: {\n    scopes: ['email', 'profile'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Google Authentication on iOS\nDESCRIPTION: Code snippet showing how to initialize and login with Google provider on iOS.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/README.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait SocialLogin.initialize({\n  google: {\n    iOSClientId: 'your-client-id', // the iOS client id\n    iOSServerClientId: 'your-server-client-id', // the iOS server client id (required in mode offline)\n  },\n});\nconst res = await SocialLogin.login({\n  provider: 'google',\n  options: {\n    scopes: ['email', 'profile'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Google Login Response Interface\nDESCRIPTION: TypeScript interface defining the response structure from the new Social Login plugin when using Google authentication, showing all available fields.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_CODETRIX.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GoogleLoginResponse {\n  provider: 'google';\n  result: {\n    accessToken: {\n      token: string;\n      expires: string;\n      // ... other token fields\n    } | null;\n    idToken: string | null;\n    profile: {\n      email: string | null;\n      familyName: string | null;\n      givenName: string | null;\n      id: string | null;\n      name: string | null;\n      imageUrl: string | null;\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying MainActivity for Google Login in Android\nDESCRIPTION: This code snippet shows how to modify the MainActivity.java file to handle Google login in an Android app using the Capacitor Social Login plugin. It includes necessary imports and overrides the onActivityResult method to handle Google login intents.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/docs/setup_google.md#2025-04-17_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport ee.forgr.capacitor.social.login.GoogleProvider;\nimport ee.forgr.capacitor.social.login.SocialLoginPlugin;\nimport ee.forgr.capacitor.social.login.ModifiedMainActivityForSocialLoginPlugin;\nimport com.getcapacitor.PluginHandle;\nimport com.getcapacitor.Plugin;\nimport android.content.Intent;\nimport android.util.Log;\nimport com.getcapacitor.BridgeActivity;\n\n// ModifiedMainActivityForSocialLoginPlugin is VERY VERY important !!!!!!    \npublic class MainActivity extends BridgeActivity implements ModifiedMainActivityForSocialLoginPlugin {\n\n      @Override\n      public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n\n        if (requestCode >= GoogleProvider.REQUEST_AUTHORIZE_GOOGLE_MIN && requestCode < GoogleProvider.REQUEST_AUTHORIZE_GOOGLE_MAX) {\n          PluginHandle pluginHandle = getBridge().getPlugin(\"SocialLogin\");\n          if (pluginHandle == null) {\n            Log.i(\"Google Activity Result\", \"SocialLogin login handle is null\");\n            return;\n          }\n          Plugin plugin = pluginHandle.getInstance();\n          if (!(plugin instanceof SocialLoginPlugin)) {\n            Log.i(\"Google Activity Result\", \"SocialLogin plugin instance is not SocialLoginPlugin\");\n            return;\n          }\n          ((SocialLoginPlugin) plugin).handleGoogleLoginIntent(requestCode, data);\n        }\n      }\n\n      // This function will never be called, leave it empty\n      @Override\n      public void IHaveModifiedTheMainActivityForTheUseWithSocialLoginPlugin() {}\n}\n```\n\n----------------------------------------\n\nTITLE: iOS AppDelegate Configuration for Facebook SDK\nDESCRIPTION: Implementation of URL handling in AppDelegate.swift to support Facebook login callbacks and deep linking.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/docs/setup_facebook.md#2025-04-17_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport FBSDKCoreKit\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {\n        // Called when the app was launched with a url. Feel free to add additional processing here,\n        // but if you want the App API to support tracking app url opens, make sure to keep this call\n        \n        var handled: Bool\n        \n        return ApplicationDelegateProxy.shared.application(app, open: url, options: options)\n        if (FBSDKCoreKit.ApplicationDelegate.shared.application(\n            app,\n            open: url,\n            sourceApplication: options[UIApplication.OpenURLOptionsKey.sourceApplication] as? String,\n            annotation: options[UIApplication.OpenURLOptionsKey.annotation]\n        )) {\n            return true;\n        } else {\n            return ApplicationDelegateProxy.shared.application(app, open: url, options: options)\n        }\n        \n        return ApplicationDelegateProxy.shared.application(app, open: url, options: options)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying iOS AppDelegate for Google Sign-In\nDESCRIPTION: Swift code modification for AppDelegate to handle Google Sign-In URL callbacks. Implements URL handling logic for authentication flow.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/docs/setup_google.md#2025-04-17_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {\n    // Called when the app was launched with a url. Feel free to add additional processing here,\n    // but if you want the App API to support tracking app url opens, make sure to keep this call\n\n    var handled: Bool\n\n    handled = GIDSignIn.sharedInstance.handle(url)\n    if handled {\n      return true\n    }\n\n    return ApplicationDelegateProxy.shared.application(app, open: url, options: options)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Initialization Code for Google Auth\nDESCRIPTION: Diff showing how to migrate from the old GoogleAuth initialization to the new SocialLogin initialization structure, including changes to client ID handling and offline access mode.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_CODETRIX.md#2025-04-17_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- GoogleAuth.initialize({\n-   clientId: 'CLIENT_ID.apps.googleusercontent.com',\n-   scopes: ['profile', 'email'],\n-   grantOfflineAccess: true,\n- });\n\n+ await SocialLogin.initialize({\n+   google: {\n+     webClientId: 'WEB_CLIENT_ID.apps.googleusercontent.com', // Use Web Client ID for all platforms\n+     iOSClientId: 'IOS_CLIENT_ID', // for iOS\n+     mode: 'offline' // replaces grantOfflineAccess\n+   }\n+ });\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS AppDelegate for Facebook Login\nDESCRIPTION: Swift code to modify the iOS AppDelegate to support Facebook login integration.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\nimport Capacitor\nimport FBSDKCoreKit\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        // Override point for customization after application launch.\n        FBSDKCoreKit.ApplicationDelegate.shared.application(\n            application,\n            didFinishLaunchingWithOptions: launchOptions\n        )\n\n        return true\n    }\n\n    ...\n\n    func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {\n        // Called when the app was launched with a url. Feel free to add additional processing here,\n        // but if you want the App API to support tracking app url opens, make sure to keep this call\n        if (FBSDKCoreKit.ApplicationDelegate.shared.application(\n            app,\n            open: url,\n            sourceApplication: options[UIApplication.OpenURLOptionsKey.sourceApplication] as? String,\n            annotation: options[UIApplication.OpenURLOptionsKey.annotation]\n        )) {\n            return true;\n        } else {\n            return ApplicationDelegateProxy.shared.application(app, open: url, options: options)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Info.plist for Facebook Login\nDESCRIPTION: XML configuration to add to the iOS Info.plist file for Facebook login integration.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<key>CFBundleURLTypes</key>\n<array>\n    <dict>\n        <key>CFBundleURLSchemes</key>\n        <array>\n            <string>fb[APP_ID]</string>\n        </array>\n    </dict>\n</array>\n<key>FacebookAppID</key>\n<string>[APP_ID]</string>\n<key>FacebookClientToken</key>\n<string>[CLIENT_TOKEN]</string>\n<key>FacebookDisplayName</key>\n<string>[APP_NAME]</string>\n<key>LSApplicationQueriesSchemes</key>\n<array>\n    <string>fbapi</string>\n    <string>fbauth</string>\n    <string>fb-messenger-share-api</string>\n    <string>fbauth2</string>\n    <string>fbshareextension</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Defining ProviderResponseMap Type in TypeScript\nDESCRIPTION: TypeScript interface that maps provider names to their respective response types. This type associates each social login provider (Facebook, Google, Apple) with their specific response format.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/README.md#2025-04-17_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{ facebook: FacebookLoginResponse; google: GoogleLoginResponse; apple: AppleProviderResponse; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Facebook Activities in Android Manifest\nDESCRIPTION: Add Facebook activities configuration to AndroidManifest.xml to enable Facebook login functionality and custom tab handling.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/docs/setup_facebook.md#2025-04-17_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<application>\n    ...\n    <activity android:name=\"com.facebook.FacebookActivity\"\n        android:configChanges=\"keyboard|keyboardHidden|screenLayout|screenSize|orientation\"\n        android:label=\"@string/app_name\" />\n    \n    <activity\n        android:name=\"com.facebook.CustomTabActivity\"\n        android:exported=\"true\">\n        <intent-filter>\n            <action android:name=\"android.intent.action.VIEW\" />\n            <category android:name=\"android.intent.category.DEFAULT\" />\n            <category android:name=\"android.intent.category.BROWSABLE\" />\n            <data android:scheme=\"FB[APP_ID]\" />\n        </intent-filter>\n    </activity>\n</application>\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Social Login\nDESCRIPTION: TypeScript code for initializing the Google Social Login with iOS client configuration.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/docs/setup_google.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonMounted(() => {\n  SocialLogin.initialize({\n    google: {\n      iOSClientId: '673324426943-redacted.apps.googleusercontent.com',\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Android Setup for Social Login\nDESCRIPTION: Diff showing the changes in Android setup, particularly the addition of initialization code for the new social login package.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_FACEBOOK.md#2025-04-17_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- // AndroidManifest.xml changes remain the same\n- // strings.xml become irrelevant\n+ // Additionally initialize in your code:\n+ await SocialLogin.initialize({\n+   facebook: {\n+     appId: 'your-app-id',\n+     clientToken: 'your-client-token'  // New requirement\n+   }\n+ });\n```\n\n----------------------------------------\n\nTITLE: iOS Info.plist Configuration for Facebook Login\nDESCRIPTION: Required configuration entries in Info.plist for Facebook SDK integration including app ID, client token, display name and URL schemes.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/docs/setup_facebook.md#2025-04-17_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>FacebookAppID</key>\n<string>[APP-ID]</string>\n<key>FacebookClientToken</key>\n<string>[CLIENT-TOKEN]</string>\n<key>FacebookDisplayName</key>\n<string>[APP-NAME]</string>\n<key>LSApplicationQueriesSchemes</key>\n<array>\n    <string>fbapi</string>\n    <string>fb-messenger-share-api</string>\n</array>\n<key>CFBundleURLTypes</key>\n<array>\n    <dict>\n        <key>CFBundleURLSchemes</key>\n        <array>\n            <string>fb[APP-ID]</string>\n        </array>\n    </dict>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Modifying Android MainActivity for Social Login\nDESCRIPTION: Diff showing the necessary changes to MainActivity.java for Android to implement the Social Login plugin, including intent handling for Google authentication.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_CODETRIX.md#2025-04-17_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n+ import ee.forgr.capacitor.social.login.GoogleProvider;\n+ import ee.forgr.capacitor.social.login.SocialLoginPlugin;\n+ import ee.forgr.capacitor.social.login.ModifiedMainActivityForSocialLoginPlugin;\n+ import com.getcapacitor.PluginHandle;\n+ import com.getcapacitor.Plugin;\n+ import android.content.Intent;\n+ import android.util.Log;\n\n- public class MainActivity extends BridgeActivity {\n+ public class MainActivity extends BridgeActivity implements ModifiedMainActivityForSocialLoginPlugin {\n\n+   @Override\n+   public void onActivityResult(int requestCode, int resultCode, Intent data) {\n+     super.onActivityResult(requestCode, resultCode, data);\n+     \n+     if (requestCode >= GoogleProvider.REQUEST_AUTHORIZE_GOOGLE_MIN && requestCode < GoogleProvider.REQUEST_AUTHORIZE_GOOGLE_MAX) {\n+       PluginHandle pluginHandle = getBridge().getPlugin(\"SocialLogin\");\n+       if (pluginHandle == null) {\n+         Log.i(\"Google Activity Result\", \"SocialLogin login handle is null\");\n+         return;\n+       }\n+       Plugin plugin = pluginHandle.getInstance();\n+       if (!(plugin instanceof SocialLoginPlugin)) {\n+         Log.i(\"Google Activity Result\", \"SocialLogin plugin instance is not SocialLoginPlugin\");\n+         return;\n+       }\n+       ((SocialLoginPlugin) plugin).handleGoogleLoginIntent(requestCode, data);\n+     }\n+   }\n\n+   public void IHaveModifiedTheMainActivityForTheUseWithSocialLoginPlugin() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Response Types in TypeScript\nDESCRIPTION: TypeScript interfaces showing the difference between the old and new response types returned by the sign-in functions.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_APPLE.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Old response type\ninterface AppleSignInResponse {\n  response: {\n    user: string;\n    email: string | null;\n    givenName: string | null;\n    familyName: string | null;\n    identityToken: string | null;\n    authorizationCode: string | null;\n  };\n}\n\n// New response type\ninterface SocialLoginResponse {\n  provider: 'apple';\n  result: {\n    accessToken: {\n      token: string;\n      expiresIn?: number;\n      refreshToken?: string;\n    } | null;\n    idToken: string | null;\n    profile: {\n      user: string;\n      email: string | null;\n      givenName: string | null;\n      familyName: string | null;\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS AppDelegate for Facebook SDK\nDESCRIPTION: Swift code showing the configuration of AppDelegate for Facebook SDK, which remains the same in the migration.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_FACEBOOK.md#2025-04-17_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nimport FBSDKCoreKit\n\n// In application:didFinishLaunchingWithOptions:\nFBSDKCoreKit.ApplicationDelegate.shared.application(\n    application,\n    didFinishLaunchingWithOptions: launchOptions\n)\n\n// In application:openURL:options:\nApplicationDelegate.shared.application(\n    app,\n    open: url,\n    sourceApplication: options[UIApplication.OpenURLOptionsKey.sourceApplication] as? String,\n    annotation: options[UIApplication.OpenURLOptionsKey.annotation]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Info.plist for Facebook Login\nDESCRIPTION: XML configuration for Info.plist file in iOS for Facebook login, which remains the same in the migration.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_FACEBOOK.md#2025-04-17_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<key>CFBundleURLTypes</key>\n<array>\n    <dict>\n        <key>CFBundleURLSchemes</key>\n        <array>\n            <string>fb[APP_ID]</string>\n        </array>\n    </dict>\n</array>\n<key>FacebookAppID</key>\n<string>[APP_ID]</string>\n<key>FacebookClientToken</key>\n<string>[CLIENT_TOKEN]</string>\n<key>FacebookDisplayName</key>\n<string>[APP_NAME]</string>\n<key>LSApplicationQueriesSchemes</key>\n<array>\n    <string>fbapi</string>\n    <string>fbauth</string>\n    <string>fb-messenger-share-api</string>\n    <string>fbauth2</string>\n    <string>fbshareextension</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Defining Facebook Login Response Types\nDESCRIPTION: TypeScript interfaces showing the old and new response types for Facebook login.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_FACEBOOK.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Old response type\ninterface FacebookLoginResponse {\n  accessToken: {\n    applicationId: string;\n    userId: string;\n    token: string;\n    expires: string;\n  };\n  recentlyGrantedPermissions: string[];\n  recentlyDeniedPermissions: string[];\n}\n\n// New response type\ninterface FacebookLoginResponse {\n  provider: 'facebook';\n  result: {\n    accessToken: {\n      token: string;\n      applicationId?: string;\n      expires?: string;\n      userId?: string;\n      permissions?: string[];\n      declinedPermissions?: string[];\n    } | null;\n    idToken: string | null;\n    profile: {\n      userID: string;\n      email: string | null;\n      friendIDs: string[];\n      birthday: string | null;\n      ageRange: { min?: number; max?: number } | null;\n      gender: string | null;\n      location: { id: string; name: string } | null;\n      hometown: { id: string; name: string } | null;\n      profileURL: string | null;\n      name: string | null;\n      imageURL: string | null;\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Facebook Login with Capgo Social Login\nDESCRIPTION: TypeScript code to initialize the Facebook login SDK with app ID and client token using the Capgo Social Login plugin.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/docs/setup_facebook.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SocialLogin } from '@capgo/capacitor-social-login';\n\n// Initialize during app startup\nawait SocialLogin.initialize({\n  facebook: {\n    appId: 'APP_ID',\n    clientToken: 'CLIENT_TOKEN',\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Google Sign In Implementation\nDESCRIPTION: Diff showing how to change the sign-in method call from GoogleAuth.signIn() to SocialLogin.login() with provider specification and additional options.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_CODETRIX.md#2025-04-17_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- const user = await GoogleAuth.signIn();\n+ const res = await SocialLogin.login({\n+   provider: 'google',\n+   options: {\n+     scopes: ['email', 'profile'],\n+     forceRefreshToken: true // if you need refresh token\n+   }\n+ });\n```\n\n----------------------------------------\n\nTITLE: Updating Login Status Check Method\nDESCRIPTION: Diff showing the changes in checking the login status from the old Facebook login package to the new social login package.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_FACEBOOK.md#2025-04-17_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- const result = await FacebookLogin.getCurrentAccessToken();\n- const isLoggedIn = result && result.accessToken;\n\n+ const status = await SocialLogin.isLoggedIn({\n+   provider: 'facebook'\n+ });\n+ const isLoggedIn = status.isLoggedIn;\n```\n\n----------------------------------------\n\nTITLE: Updating Sign In Function Call in TypeScript\nDESCRIPTION: Diff showing the changes required to update the sign-in function call from the old package to the new SocialLogin plugin.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_APPLE.md#2025-04-17_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- const result = await SignInWithApple.authorize({\n-   clientId: 'com.your.app',\n-   redirectURI: 'https://your-app.com/callback',\n-   scopes: 'email name',\n-   state: '12345',\n-   nonce: 'nonce'\n- });\n\n+ const result = await SocialLogin.login({\n+   provider: 'apple',\n+   options: {\n+     // Optional: Add scopes if needed\n+     scopes: ['email', 'name'],\n+     nonce: 'nonce'\n+   }\n+ });\n```\n\n----------------------------------------\n\nTITLE: Initializing Social Login with Facebook Configuration\nDESCRIPTION: Diff showing the addition of explicit initialization code for the new social login package with Facebook configuration.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_FACEBOOK.md#2025-04-17_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- // Old package required no explicit initialization in code\n- // Configuration was done only in native platforms\n\n+ // New package requires explicit initialization\n+ await SocialLogin.initialize({\n+   facebook: {\n+     appId: 'YOUR_FACEBOOK_APP_ID',        // Required for web and Android\n+     clientToken: 'YOUR_CLIENT_TOKEN'       // Required for Android\n+   }\n+ });\n```\n\n----------------------------------------\n\nTITLE: Initializing SocialLogin for iOS and Android in TypeScript\nDESCRIPTION: Diff showing the new initialization step required for the SocialLogin plugin, including configurations for both iOS and Android.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_APPLE.md#2025-04-17_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- // No initialization needed in old package\n+ await SocialLogin.initialize({\n+   apple: {} // Basic iOS configuration\n+ });\n\n+ // For Android, you need additional configuration:\n+ await SocialLogin.initialize({\n+   apple: {\n+     clientId: 'YOUR_SERVICE_ID', // Service ID from Apple Developer Portal\n+     redirectUrl: 'https://your-backend.com/callback' // Your backend callback URL. Please note that this URL behaves differently than in @capacitor-community/apple-sign-in. Please refer to the documentation for more details.\n+   }\n+ });\n```\n\n----------------------------------------\n\nTITLE: Updating Facebook Login Method Call\nDESCRIPTION: Diff showing the changes in the login method call from the old Facebook login package to the new social login package.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_FACEBOOK.md#2025-04-17_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- const FACEBOOK_PERMISSIONS = ['email', 'public_profile'];\n- const result = await FacebookLogin.login({ permissions: FACEBOOK_PERMISSIONS });\n\n+ const result = await SocialLogin.login({\n+   provider: 'facebook',\n+   options: {\n+     permissions: ['email', 'public_profile'],\n+     limitedLogin: false,\n+     nonce: 'optional_nonce'\n+   }\n+ });\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Apple Authentication on Android\nDESCRIPTION: Code snippet showing how to initialize and login with Apple provider on Android. Requires a server to handle the callback from Apple login.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait SocialLogin.initialize({\n  apple: {\n    clientId: 'your-client-id',\n    redirectUrl: 'your-redirect-url',\n  },\n});\nconst res = await SocialLogin.login({\n  provider: 'apple',\n  options: {\n    scopes: ['email', 'name'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Apple Authentication on iOS\nDESCRIPTION: Code snippet demonstrating how to initialize and login with Apple provider on iOS.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait SocialLogin.initialize({\n  apple: {\n    clientId: 'your-client-id', // it not used at os level only in plugin to know which provider initialize\n  },\n});\nconst res = await SocialLogin.login({\n  provider: 'apple',\n  options: {\n    scopes: ['email', 'name'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Login Status Check and Logout Functions in TypeScript\nDESCRIPTION: Diff showing the addition of login status check and logout functions which were not available in the old package.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_APPLE.md#2025-04-17_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- // Not available in old package\n+ const status = await SocialLogin.isLoggedIn({\n+   provider: 'apple'\n+ });\n```\n\nLANGUAGE: diff\nCODE:\n```\n- // Not available in old package\n+ await SocialLogin.logout({\n+   provider: 'apple'\n+ });\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for Social Login\nDESCRIPTION: TypeScript imports for the Capgo Social Login plugin and Capacitor core functionality.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/docs/setup_google.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SocialLogin } from '@capgo/capacitor-social-login';\nimport { Capacitor } from '@capacitor/core';\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Schemes in iOS Info.plist\nDESCRIPTION: XML configuration for setting up URL schemes in the iOS Info.plist file to enable Google Sign-In functionality. Requires the reversed client ID from Google Cloud Console.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/docs/setup_google.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>CFBundleURLTypes</key>\n<array>\n <dict>\n   <key>CFBundleURLSchemes</key>\n   <array>\n     <string>YOUR_DOT_REVERSED_IOS_CLIENT_ID</string>\n   </array>\n </dict>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Defining Extract Utility Type in TypeScript\nDESCRIPTION: TypeScript utility type that extracts from type T those types that are assignable to U. This is used for type filtering within the plugin's type system.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/README.md#2025-04-17_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nT extends U ? T : never\n```\n\n----------------------------------------\n\nTITLE: Generating Android Key Hash for Facebook Authentication\nDESCRIPTION: Commands to generate debug and release key hashes required for Facebook app configuration. Debug uses the default debug keystore while release requires the app's release keystore.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/docs/setup_facebook.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore | openssl base64 -A\n```\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -exportcert -alias your-key-name -keystore your-keystore-path | openssl base64 -A\n```\n\n----------------------------------------\n\nTITLE: Configuring PM2 Environment Variables for Social Login Backend\nDESCRIPTION: Environment configuration for PM2 ecosystem file, including necessary keys and IDs for Apple authentication service and application routing settings.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/docs/setup_apple.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nenv: {\n  PRIVATE_KEY_FILE: \"AuthKey_U93M8LBQK3.p8\",\n  KEY_ID: \"U93M8LBQK3\",\n  TEAM_ID: \"UVTJ336J2D\",\n  ANDROID_SERVICE_ID: \"ee.forgr.io.ionic.starter.service2\",\n  IOS_SERVICE_ID: \"me.wcaleniewolny.test.ionic.vue\",\n  PORT: 3000,\n  REDIRECT_URI: \"https://xyz.wcaleniewolny.me/login/callback\",\n  BASE_REDIRECT_URL: \"capgo-demo-app://path\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifiedMainActivityForSocialLoginPlugin in Android MainActivity\nDESCRIPTION: For V1, it's crucial to implement ModifiedMainActivityForSocialLoginPlugin in your main activity for Android. This change is necessary for the plugin to function correctly.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/docs/migration_to_v1.md#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class MainActivity extends ModifiedMainActivityForSocialLoginPlugin {\n    // Your MainActivity implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Old GoogleAuth Configuration\nDESCRIPTION: Diff showing how to remove the deprecated GoogleAuth configuration from capacitor.config.json as it's no longer used in the new plugin.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_CODETRIX.md#2025-04-17_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"plugins\": {\n-   \"GoogleAuth\": {\n-     \"scopes\": [\"profile\", \"email\"],\n-     \"serverClientId\": \"xxxxxx-xxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\",\n-     \"forceCodeForRefreshToken\": true\n-   }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Google Sign-In Meta Tags\nDESCRIPTION: Diff showing how to remove the Google Sign-In meta tags from index.html that were required by the old plugin but are no longer needed.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_CODETRIX.md#2025-04-17_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- <meta name=\"google-signin-client_id\" content=\"{your client id here}\" />\n- <meta name=\"google-signin-scope\" content=\"profile email\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Internet Permission in Android Manifest\nDESCRIPTION: Add internet permission to AndroidManifest.xml to enable network connectivity required for Facebook login.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/docs/setup_facebook.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n```\n\n----------------------------------------\n\nTITLE: Changing Import Statements for Social Login\nDESCRIPTION: Diff showing how to update import statements from the old GoogleAuth package to the new SocialLogin package.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_CODETRIX.md#2025-04-17_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import { GoogleAuth } from '@codetrix-studio/capacitor-google-auth';\n+ import { SocialLogin } from '@capgo/capacitor-social-login';\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statement for Social Login\nDESCRIPTION: Diff showing the change in import statement from the old Facebook login package to the new social login package.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_FACEBOOK.md#2025-04-17_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import { FacebookLogin } from '@capacitor-community/facebook-login';\n+ import { SocialLogin } from '@capgo/capacitor-social-login';\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Old Package and Installing New Social Login Package\nDESCRIPTION: Commands to remove the previous Google Auth package and install the new Capgo Social Login package, followed by syncing Capacitor to apply changes.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_CODETRIX.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @codetrix-studio/capacitor-google-auth\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capgo/capacitor-social-login\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Updating Logout Method Call\nDESCRIPTION: Diff showing the changes in the logout method call from the old Facebook login package to the new social login package.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_FACEBOOK.md#2025-04-17_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- await FacebookLogin.logout();\n\n+ await SocialLogin.logout({\n+   provider: 'facebook'\n+ });\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Old Package and Installing New Package in Bash\nDESCRIPTION: Commands to remove the old apple-sign-in package and install the new capacitor-social-login package.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_APPLE.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @capacitor-community/apple-sign-in\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capgo/capacitor-social-login\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor Social Login App Example\nDESCRIPTION: Command to start the Capacitor Social Login example application. This npm command runs the default start script configured in the project.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/examples/vanilla-js/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Publishing Capacitor Plugin to NPM\nDESCRIPTION: Command to publish the plugin to NPM registry. Includes a prepublishOnly hook for preparation.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with PNPM\nDESCRIPTION: Command to install all necessary dependencies for the Ionic-Vue-Capacitor Google authentication example project using PNPM package manager.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/examples/vue3/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statement in TypeScript\nDESCRIPTION: Diff showing the change in import statement from the old package to the new package.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_APPLE.md#2025-04-17_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import { SignInWithApple } from '@capacitor-community/apple-sign-in';\n+ import { SocialLogin } from '@capgo/capacitor-social-login';\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with Hot Module Replacement\nDESCRIPTION: Command to start the development server with hot module replacement (HMR) for live reloading during development. This runs the application in iOS simulator and opens it automatically.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/examples/vue3/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm ionic cap run ios --open -l\n```\n\n----------------------------------------\n\nTITLE: Installing @capgo/capacitor-social-login Package\nDESCRIPTION: Commands to uninstall the old Facebook login package and install the new social login package, followed by syncing Capacitor.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/MIGRATION_FACEBOOK.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @capacitor-community/facebook-login\nnpm install @capgo/capacitor-social-login\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries in Markdown\nDESCRIPTION: A series of markdown formatted changelog entries detailing version changes, including features, bug fixes and version bumps, following standard-version commit guidelines.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### [7.5.3](https://github.com/Cap-go/capacitor-social-login/compare/7.5.2...7.5.3) (2025-04-15)\n\n### Bug Fixes\n\n* rawLogoutGoogle ([b0045a4](https://github.com/Cap-go/capacitor-social-login/commit/b0045a4eca51a6d3745638a07c30ea14330dcae1))\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Capacitor Plugin Development\nDESCRIPTION: Command to install all required npm dependencies for the plugin development.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing SwiftLint for iOS Development\nDESCRIPTION: Command to install SwiftLint using Homebrew for iOS code style checking on macOS systems.\nSOURCE: https://github.com/Cap-go/capacitor-social-login/blob/main/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbrew install swiftlint\n```"
  }
]