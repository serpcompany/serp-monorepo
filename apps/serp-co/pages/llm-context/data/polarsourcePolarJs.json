[
  {
    "owner": "polarsource",
    "repo": "polar-js",
    "content": "TITLE: Get Meter by ID using Polar SDK - Typescript\nDESCRIPTION: This snippet demonstrates how to retrieve a meter by its ID using the Polar SDK. It initializes the Polar SDK with an access token and then calls the `meters.get` method. The result is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/meters/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.meters.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating Products with Standalone Function in TypeScript\nDESCRIPTION: Demonstrates how to create a product using the standalone `productsCreate` function from the Polar SDK.  It uses `PolarCore` for tree-shaking. It includes examples of setting properties like name, recurring interval, prices (with currency and amount), and organization ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/products/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { productsCreate } from \"@polar-sh/sdk/funcs/productsCreate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await productsCreate(polar, {\n    name: \"<value>\",\n    recurringInterval: \"month\",\n    prices: [\n      {\n        meterId: \"<value>\",\n        priceCurrency: \"usd\",\n        unitAmount: \"<value>\",\n      },\n      {\n        priceAmount: 169727,\n        priceCurrency: \"usd\",\n      },\n    ],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Meters with Standalone Function\nDESCRIPTION: Demonstrates how to list meters using the standalone function `metersList` from the Polar SDK. It initializes a `PolarCore` instance with an access token and then calls the `metersList` function, passing the `PolarCore` instance and the organization ID. Error handling is included to throw an error if the request fails.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/meters/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { metersList } from \"@polar-sh/sdk/funcs/metersList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await metersList(polar, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Revoking a Subscription using Polar SDK in Typescript\nDESCRIPTION: This code snippet demonstrates how to revoke a subscription using the Polar SDK. It initializes the Polar client with an access token and calls the `subscriptions.revoke` method with the subscription ID. The result is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/subscriptions/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.subscriptions.revoke({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Refunds with Standalone Function (Typescript)\nDESCRIPTION: This code snippet demonstrates listing refunds using the standalone function version of the Refunds API. It initializes PolarCore, then calls `refundsList` with the PolarCore instance and organization ID.  Error handling and result processing are shown.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/refunds/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { refundsList } from \"@polar-sh/sdk/funcs/refundsList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await refundsList(polar, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating a Customer with Standalone Function in Typescript\nDESCRIPTION: This code snippet shows how to create a customer using a standalone function from the Polar SDK. It initializes a `PolarCore` instance, calls the `customersCreate` function with the core instance and customer details. The code handles the response, including error checking. The code depends on `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/customersCreate.js` and requires a `POLAR_ACCESS_TOKEN` environment variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customers/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customersCreate } from \"@polar-sh/sdk/funcs/customersCreate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await customersCreate(polar, {\n    externalId: \"usr_1337\",\n    email: \"customer@example.com\",\n    name: \"John Doe\",\n    billingAddress: {\n      country: \"SE\",\n    },\n    taxId: [\n      \"FR61954506077\",\n      \"eu_vat\",\n    ],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting Product by ID with Polar SDK\nDESCRIPTION: This example demonstrates how to retrieve a product by its ID using the Polar SDK.  It initializes the Polar SDK with an access token and then calls the `products.get` method.  The ID is passed as a parameter. The result is then logged to the console.\n\nDependencies: @polar-sh/sdk\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/products/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.products.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting a Customer by ID using Polar SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a customer by their ID using the Polar SDK. It initializes the Polar SDK with an access token and calls the `customers.get` method. The result is then logged to the console.  Requires the Polar SDK and an access token.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customers/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customers.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Organizations with Polar SDK\nDESCRIPTION: Demonstrates how to list organizations using the Polar SDK. It initializes the Polar SDK with an access token and retrieves organizations using the `organizations.list` method. The code iterates through the pages of results and logs each page.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/organizations/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating Checkout Link via Standalone Function in TypeScript\nDESCRIPTION: This snippet showcases updating a checkout link using the standalone `checkoutLinksUpdate` function from the Polar SDK. It initializes `PolarCore` for optimized tree-shaking, then calls `checkoutLinksUpdate` with the core instance, ID, and update parameters.  Error handling is included to catch potential API errors. It depends on `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/checkoutLinksUpdate.js`, along with a valid `POLAR_ACCESS_TOKEN` environment variable. The expected output is the updated checkout link object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkoutlinks/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { checkoutLinksUpdate } from \"@polar-sh/sdk/funcs/checkoutLinksUpdate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await checkoutLinksUpdate(polar, {\n    id: \"<value>\",\n    checkoutLinkUpdate: {},\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Fields with Polar SDK\nDESCRIPTION: Illustrates how to create a custom field using the Polar SDK. It initializes a Polar instance with an access token and calls the `customFields.create` method with the necessary parameters: slug, name, organizationId, and properties. The example logs the result to the console. Requires 'custom_fields:write' scope.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customfields/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customFields.create({\n    slug: \"<value>\",\n    name: \"<value>\",\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    properties: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Fields with Standalone Function\nDESCRIPTION: Shows how to create a custom field using the standalone function `customFieldsCreate` from the Polar SDK. It initializes a PolarCore instance with an access token and passes it to the function along with the required parameters: slug, name, organizationId, and properties. It also includes error handling for unsuccessful responses and logs the result to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customfields/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customFieldsCreate } from \"@polar-sh/sdk/funcs/customFieldsCreate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await customFieldsCreate(polar, {\n    slug: \"<value>\",\n    name: \"<value>\",\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    properties: {},\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Orders with Standalone Function in Typescript\nDESCRIPTION: This snippet shows how to list customer orders using the standalone function `customerPortalOrdersList` from the Polar SDK. It imports `PolarCore` and `customerPortalOrdersList`, initializes a `PolarCore` instance, and then calls the function with `customerSession` and `organizationId`. It handles potential errors and iterates through the resulting pages to log them.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarorders/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalOrdersList } from \"@polar-sh/sdk/funcs/customerPortalOrdersList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalOrdersList(polar, {\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating Checkout Session using Standalone Function in Typescript\nDESCRIPTION: This snippet shows how to update a checkout session using the standalone `checkoutsClientUpdate` function. It requires `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/checkoutsClientUpdate.js`. This approach can improve tree-shaking. It also includes basic error handling, throwing an error if the request fails.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkouts/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { checkoutsClientUpdate } from \"@polar-sh/sdk/funcs/checkoutsClientUpdate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await checkoutsClientUpdate(polar, {\n    clientSecret: \"<value>\",\n    checkoutUpdatePublic: {\n      customerBillingAddress: {\n        country: \"FR\",\n      },\n    },\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating Subscription with Polar SDK\nDESCRIPTION: This code snippet demonstrates how to update a subscription using the Polar SDK. It initializes the Polar client with an access token and then calls the `subscriptions.update` method with a subscription ID and an update object. The result is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/subscriptions/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.subscriptions.update({\n    id: \"<value>\",\n    subscriptionUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Get User Information with Polar SDK\nDESCRIPTION: This snippet demonstrates how to retrieve user information using the Polar SDK after authentication.  It initializes a Polar instance with an access token and calls the `oauth2.userinfo` method. The result is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/oauth2/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.userinfo();\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Activating License Key with Polar SDK\nDESCRIPTION: This code snippet demonstrates how to activate a license key using the Polar SDK. It imports the Polar class, instantiates it, and calls the activate method on the customerPortal.licenseKeys object. The method takes an object with the key, organizationId, and label as input.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarlicensekeys/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.licenseKeys.activate({\n    key: \"<key>\",\n    organizationId: \"<value>\",\n    label: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating Benefit with Polar SDK\nDESCRIPTION: This snippet demonstrates how to create a benefit using the Polar SDK. It initializes the Polar client with an access token and then calls the `benefits.create` method, providing a description, organization ID, and properties for the new benefit. The result of the creation is then logged.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/benefits/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.benefits.create({\n    description: \"delightfully fumigate convection though zowie up bulky electronics\",\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    properties: {\n      files: [\n        \"<value>\",\n      ],\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Customers with Polar SDK in Typescript\nDESCRIPTION: This code snippet demonstrates how to list customers using the Polar SDK. It initializes a Polar instance with an access token, calls the `customers.list` method with an organization ID, and iterates through the results to handle each page of customers. The code requires the `@polar-sh/sdk` package and a valid `POLAR_ACCESS_TOKEN` environment variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customers/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customers.list({\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Get Customer State with Standalone Function\nDESCRIPTION: This code snippet shows how to use a standalone function to retrieve a customer's state by ID. It utilizes `PolarCore` for improved tree-shaking performance. It initializes the `PolarCore` client and uses the `customersGetState` function. Error handling and result extraction are also demonstrated.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customers/README.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customersGetState } from \"@polar-sh/sdk/funcs/customersGetState.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await customersGetState(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating Organization with Standalone Function\nDESCRIPTION: Demonstrates creating an organization using the standalone function `organizationsCreate` for better tree-shaking. It initializes `PolarCore` with an access token and calls `organizationsCreate` with the necessary parameters (name and slug). Error handling is included.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/organizations/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { organizationsCreate } from \"@polar-sh/sdk/funcs/organizationsCreate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await organizationsCreate(polar, {\n    name: \"<value>\",\n    slug: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting License Key Activation with Standalone Function in TypeScript\nDESCRIPTION: This code snippet demonstrates how to retrieve a license key activation using the standalone function approach in TypeScript. It initializes the PolarCore SDK with an access token, then calls the `licenseKeysGetActivation` function, passing in the PolarCore instance and the license key ID and activation ID. The result is handled by checking for errors and then logging the successful result to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/licensekeys/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { licenseKeysGetActivation } from \"@polar-sh/sdk/funcs/licenseKeysGetActivation.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await licenseKeysGetActivation(polar, {\n    id: \"<value>\",\n    activationId: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Get User Information with Standalone Function\nDESCRIPTION: This snippet shows how to retrieve user information using the standalone `oauth2Userinfo` function from the Polar SDK. It initializes a PolarCore instance with an access token and calls the `oauth2Userinfo` function with the instance. The result is then handled, with error checking.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/oauth2/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { oauth2Userinfo } from \"@polar-sh/sdk/funcs/oauth2Userinfo.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await oauth2Userinfo(polar);\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Organizations with Standalone Function\nDESCRIPTION: Demonstrates how to list organizations using the standalone function `organizationsList` from the Polar SDK for better tree-shaking. It initializes `PolarCore` with an access token and calls `organizationsList` to retrieve organizations. The code iterates through the pages of results and logs each page. Error handling is included.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/organizations/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { organizationsList } from \"@polar-sh/sdk/funcs/organizationsList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await organizationsList(polar, {});\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating Checkouts with Polar SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a checkout session using the Polar SDK in TypeScript. It initializes the Polar SDK with an access token and calls the `checkouts.create` method with customer billing address and product details. The result of the operation is logged to the console.\n\nDependencies: @polar-sh/sdk\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkouts/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkouts.create({\n    customerBillingAddress: {\n      country: \"SE\",\n    },\n    products: [\n      \"<value>\",\n      \"<value>\",\n    ],\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Token Introspection with Polar SDK\nDESCRIPTION: This snippet demonstrates how to introspect an OAuth2 token using the Polar SDK. It initializes a Polar instance and calls the `oauth2.introspect` method with the token, client ID, and client secret. The result is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/oauth2/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.oauth2.introspect({\n    token: \"<value>\",\n    clientId: \"<id>\",\n    clientSecret: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Subscriptions using Polar SDK in Typescript\nDESCRIPTION: This code snippet demonstrates how to list subscriptions using the Polar SDK in a TypeScript environment. It initializes the Polar SDK with an access token and then calls the `subscriptions.list` method, passing an object with an `organizationId`. The code iterates through the pages of the result and logs each page to the console. It depends on the `@polar-sh/sdk` package.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/subscriptions/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.subscriptions.list({\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Deleting Custom Field using Polar JS SDK Class (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to delete a custom field using the `delete` method of the `customFields` property within the Polar JS SDK class. It initializes the SDK with an access token and then calls the `delete` method with the ID of the custom field to be deleted. The example assumes the access token is stored in the environment variable `POLAR_ACCESS_TOKEN`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customfields/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.customFields.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting Subscription via Polar SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve a subscription by its ID using the `Polar` class from the `@polar-sh/sdk` package. It initializes the SDK with an access token and calls the `subscriptions.get` method. The result is then logged to the console.  It requires an environment variable `POLAR_ACCESS_TOKEN` to be set.  The input is the subscription ID and the output is the subscription data, or an error if not found.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/subscriptions/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.subscriptions.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Checkouts with Polar SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to list checkout sessions using the Polar SDK in TypeScript. It initializes the Polar SDK with an access token and calls the `checkouts.list` method with an organization ID. It then iterates through the pages of results and logs each page to the console.\n\nDependencies: @polar-sh/sdk\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkouts/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkouts.list({\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Discounts with Polar SDK\nDESCRIPTION: Demonstrates how to list discounts using the Polar SDK. It initializes the Polar object with an access token and calls the discounts.list method with an organization ID. The result is an iterable that yields pages of discount data, which are then logged to the console. This code requires the `@polar-sh/sdk` package.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/discounts/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.discounts.list({\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Exporting Subscriptions using Polar SDK in Typescript\nDESCRIPTION: This code snippet demonstrates how to export subscriptions as a CSV file using the Polar SDK in a TypeScript environment. It initializes the Polar SDK with an access token and then calls the `subscriptions.export` method, passing an object with the `organizationId`.  The code logs the result to the console. This relies on the `@polar-sh/sdk` package.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/subscriptions/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.subscriptions.export({\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Revoking Token with Polar.js SDK\nDESCRIPTION: This snippet demonstrates how to revoke an OAuth2 token using the Polar.js SDK. It initializes the Polar client and then calls the `oauth2.revoke` method, passing in the required token, client ID, and client secret. The result of the revocation is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/oauth2/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.oauth2.revoke({\n    token: \"<value>\",\n    clientId: \"<id>\",\n    clientSecret: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating Products with Polar SDK in TypeScript\nDESCRIPTION: Demonstrates how to create a product using the `polar.products.create` method from the Polar SDK. It initializes the SDK with an access token and provides example values for product properties like name, recurring interval, prices, and organization ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/products/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.products.create({\n    name: \"<value>\",\n    recurringInterval: \"month\",\n    prices: [\n      {\n        priceCurrency: \"usd\",\n      },\n      {\n      },\n    ],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Products with Standalone Function in TypeScript\nDESCRIPTION: Demonstrates how to list products using the standalone `productsList` function from the Polar SDK. It initializes the `PolarCore` with an access token for tree-shaking benefits. The function retrieves products based on the provided `organizationId` and handles potential errors.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/products/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { productsList } from \"@polar-sh/sdk/funcs/productsList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await productsList(polar, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Refunds with Polar SDK (Typescript)\nDESCRIPTION: This code snippet demonstrates how to list refunds using the Polar SDK. It initializes the Polar SDK with an access token and calls the `refunds.list` method, passing in an organization ID. The result is then iterated over to handle each page of refunds.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/refunds/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.refunds.list({\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Add Payment Method with Standalone Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to add a payment method using the standalone function `customerPortalCustomersAddPaymentMethod` from the `@polar-sh/sdk/funcs/customerPortalCustomersAddPaymentMethod.js` module. This approach is recommended for better tree-shaking performance. It uses PolarCore instead of the full Polar SDK. Error handling checks if the request was successful before accessing the result.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarcustomers/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalCustomersAddPaymentMethod } from \"@polar-sh/sdk/funcs/customerPortalCustomersAddPaymentMethod.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalCustomersAddPaymentMethod(polar, {\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    confirmationTokenId: \"<id>\",\n    setDefault: false,\n    returnUrl: \"https://slight-digestive.info\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Products with Polar SDK in TypeScript\nDESCRIPTION: Demonstrates how to list products using the `polar.products.list` method from the Polar SDK. It initializes the SDK with an access token and iterates through the paginated results. The `organizationId` is used as a parameter to filter the products.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/products/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.products.list({\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting a Custom Field by ID as Standalone Function in TypeScript\nDESCRIPTION: Demonstrates how to retrieve a custom field by ID using a standalone function from the Polar SDK's core library. This approach is beneficial for tree-shaking to reduce bundle size.  It initializes `PolarCore` with an access token from the `POLAR_ACCESS_TOKEN` environment variable and passes it to the `customFieldsGet` function along with the custom field ID. Error handling is included.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customfields/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customFieldsGet } from \"@polar-sh/sdk/funcs/customFieldsGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await customFieldsGet(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating Checkout Link via Class Method in TypeScript\nDESCRIPTION: This snippet demonstrates how to update a checkout link using the `update` method of the `checkoutLinks` object within the Polar SDK. It initializes the Polar SDK with an access token and calls the `update` method with an ID and update parameters.  It requires the `@polar-sh/sdk` dependency and a valid `POLAR_ACCESS_TOKEN` environment variable. The expected output is the updated checkout link object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkoutlinks/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkoutLinks.update({\n    id: \"<value>\",\n    checkoutLinkUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating a Product using Standalone Function in Typescript\nDESCRIPTION: This code snippet demonstrates how to update a product using the standalone `productsUpdate` function from the Polar JS SDK's `core.js` module. It initializes `PolarCore` for optimal tree-shaking and then calls `productsUpdate` with the `PolarCore` instance, product ID, and update data. Error handling is included, and the result is logged to the console.\n\nDependencies: `@polar-sh/sdk/core.js`, `@polar-sh/sdk/funcs/productsUpdate.js`\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/products/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { productsUpdate } from \"@polar-sh/sdk/funcs/productsUpdate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await productsUpdate(polar, {\n    id: \"<value>\",\n    productUpdate: {},\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Field using Standalone Function - TypeScript\nDESCRIPTION: This code snippet shows how to update a custom field using a standalone function for better tree-shaking performance. It imports `PolarCore` and `customFieldsUpdate` from the Polar SDK. It initializes `PolarCore` with an access token and calls the `customFieldsUpdate` function, passing in the `PolarCore` instance and the parameters for the update.  Error handling is included to check if the request was successful. The access token is retrieved from an environment variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customfields/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customFieldsUpdate } from \"@polar-sh/sdk/funcs/customFieldsUpdate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await customFieldsUpdate(polar, {\n    id: \"<value>\",\n    customFieldUpdate: {},\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating an Organization using Standalone Function\nDESCRIPTION: This snippet demonstrates updating an organization using the standalone `organizationsUpdate` function from the Polar SDK. It imports `PolarCore` and the `organizationsUpdate` function.  It initializes `PolarCore` with an access token from an environment variable. The `organizationsUpdate` function is called with the `PolarCore` instance, the organization ID, and the `organizationUpdate` object.  Error handling is included, and the successful result is logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/organizations/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { organizationsUpdate } from \"@polar-sh/sdk/funcs/organizationsUpdate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await organizationsUpdate(polar, {\n    id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    organizationUpdate: {},\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Subscriptions using Standalone Function in Typescript\nDESCRIPTION: This code snippet demonstrates how to list subscriptions using the standalone function version of the Polar SDK in TypeScript.  It imports `PolarCore` and `subscriptionsList` from `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/subscriptionsList.js`, respectively. It then initializes `PolarCore` with an access token and calls `subscriptionsList` function, passing the `PolarCore` instance and an object containing `organizationId`.  Error handling is included, and the result is iterated through page by page. This approach is recommended for better tree-shaking performance.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/subscriptions/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { subscriptionsList } from \"@polar-sh/sdk/funcs/subscriptionsList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await subscriptionsList(polar, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Get Meter Quantities with Polar SDK\nDESCRIPTION: This snippet demonstrates how to use the `polar.meters.quantities` method to retrieve meter quantities within a specified time range. It initializes the Polar SDK with an access token and then calls the method with the meter ID, start timestamp, end timestamp, and interval.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/meters/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.meters.quantities({\n    id: \"<value>\",\n    startTimestamp: new Date(\"2023-09-17T00:45:34.608Z\"),\n    endTimestamp: new Date(\"2023-07-21T18:11:39.069Z\"),\n    interval: \"hour\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating Discount Standalone Function\nDESCRIPTION: Demonstrates how to create a discount using the standalone function approach with `PolarCore`. The code initializes `PolarCore` with an access token and then calls the `discountsCreate` function, passing the `PolarCore` instance and discount details. Error handling is included to handle potential request failures. Requires `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/discountsCreate.js`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/discounts/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { discountsCreate } from \"@polar-sh/sdk/funcs/discountsCreate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await discountsCreate(polar, {\n    duration: \"forever\",\n    durationInMonths: 417458,\n    type: \"fixed\",\n    amount: 69025,\n    currency: \"usd\",\n    name: \"<value>\",\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Customers with Standalone Function in Typescript\nDESCRIPTION: This code snippet shows how to list customers using a standalone function from the Polar SDK. It initializes a `PolarCore` instance, calls the `customersList` function with the core instance and an organization ID, and handles the response, including error checking. It iterates through the results to handle each page of customers. The code depends on `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/customersList.js` and requires a `POLAR_ACCESS_TOKEN` environment variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customers/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customersList } from \"@polar-sh/sdk/funcs/customersList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await customersList(polar, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting a License Key using Polar SDK in TypeScript\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific license key using the Polar SDK. It initializes the `Polar` client and calls `customerPortal.licenseKeys.get` with the required `id` parameter. It also uses the `POLAR_CUSTOMER_SESSION` environment variable for authentication.  The `@polar-sh/sdk` dependency is required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarlicensekeys/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.licenseKeys.get({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating Benefit with Standalone Function\nDESCRIPTION: This snippet demonstrates how to create a benefit using a standalone function from the Polar SDK. It initializes the PolarCore client and then calls the `benefitsCreate` function, providing a description, organization ID, and properties. The result is checked for errors, and if successful, the created benefit is logged.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/benefits/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { benefitsCreate } from \"@polar-sh/sdk/funcs/benefitsCreate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await benefitsCreate(polar, {\n    description: \"brightly sleet where schedule insolence when warming when\",\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    properties: {},\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating a Customer with Polar SDK\nDESCRIPTION: This snippet demonstrates updating a customer using the `customers.update` method from the Polar SDK. It initializes the Polar SDK with an access token and calls the `update` method with a customer ID and a `customerUpdate` object containing the desired updates.  It uses the main Polar class.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customers/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customers.update({\n    id: \"<value>\",\n    customerUpdate: {\n      externalId: \"usr_1337\",\n      email: \"customer@example.com\",\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"FR\",\n      },\n      taxId: [\n        \"FR61954506077\",\n        \"eu_vat\",\n      ],\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Discounts Standalone Function\nDESCRIPTION: Shows how to list discounts using the standalone function approach with `PolarCore`. It initializes `PolarCore` with an access token and then calls the `discountsList` function, passing the `PolarCore` instance and the organization ID. Error handling is included to catch any failed requests. Requires `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/discountsList.js`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/discounts/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { discountsList } from \"@polar-sh/sdk/funcs/discountsList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await discountsList(polar, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating Meters with Standalone Function\nDESCRIPTION: Demonstrates creating a meter using the `metersCreate` standalone function. It initializes a `PolarCore` instance and then calls `metersCreate` with the required parameters. The result is checked for errors, and if successful, the created meter's data is logged.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/meters/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { metersCreate } from \"@polar-sh/sdk/funcs/metersCreate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await metersCreate(polar, {\n    name: \"<value>\",\n    filter: {\n      conjunction: \"and\",\n      clauses: [],\n    },\n    aggregation: {\n      func: \"sum\",\n      property: \"<value>\",\n    },\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating Files with Polar SDK in Typescript\nDESCRIPTION: This code demonstrates how to create a file using the Polar SDK. It initializes the SDK with an access token and calls the `files.create` method with parameters like `organizationId`, `name`, `mimeType`, `size`, and `upload` details including parts' `number`, `chunkStart`, and `chunkEnd`. It relies on the `@polar-sh/sdk` package and expects a valid `POLAR_ACCESS_TOKEN` environment variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/files/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.files.create({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    name: \"<value>\",\n    mimeType: \"<value>\",\n    size: 638424,\n    upload: {\n      parts: [\n        {\n          number: 417458,\n          chunkStart: 134365,\n          chunkEnd: 69025,\n        },\n      ],\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Ingesting Events with Standalone Function\nDESCRIPTION: This code snippet shows how to ingest events using the standalone `eventsIngest` function from the Polar SDK. It uses `PolarCore` for better tree-shaking performance. The function takes a `PolarCore` instance and an object containing the array of events. The result is checked for errors, and the value is extracted if successful.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/events/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { eventsIngest } from \"@polar-sh/sdk/funcs/eventsIngest.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await eventsIngest(polar, {\n    events: [\n      {\n        name: \"<value>\",\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        customerId: \"<value>\",\n      },\n      {\n        name: \"<value>\",\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        externalCustomerId: \"<id>\",\n      },\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: List Customer Meters with Polar SDK\nDESCRIPTION: Demonstrates how to list customer meters using the Polar SDK. It initializes the SDK with an access token and calls the `customerMeters.list` method with an organization ID to retrieve a list of customer meters. The retrieved data is then iterated over and logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customermeters/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerMeters.list({\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating Customer with Standalone Function\nDESCRIPTION: This code snippet demonstrates how to update a customer by external ID using a standalone function (`customersUpdateExternal`) from the `@polar-sh/sdk/funcs/customersUpdateExternal.js` module and `PolarCore` from `@polar-sh/sdk/core.js`. This approach is useful for better tree-shaking performance. It initializes `PolarCore` with an access token and then calls the `customersUpdateExternal` function, passing the `PolarCore` instance, the customer's external ID, and updated information. It handles potential errors and logs the result to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customers/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customersUpdateExternal } from \"@polar-sh/sdk/funcs/customersUpdateExternal.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await customersUpdateExternal(polar, {\n    externalId: \"<id>\",\n    customerUpdate: {\n      externalId: \"usr_1337\",\n      email: \"customer@example.com\",\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"US\",\n      },\n      taxId: [\n        \"FR61954506077\",\n        \"eu_vat\",\n      ],\n    },\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Generic standalone function usage in TypeScript\nDESCRIPTION: This example illustrates the general pattern for using standalone functions from the Polar.js SDK. It imports `Core` and `fetchSomething`, initializes a `Core` instance, calls `fetchSomething` with a client and an ID, and then checks the `result.ok` property to handle potential errors. If an error exists, it throws it; otherwise, it logs the `result.value` to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/FUNCTIONS.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Core } from \"<sdk-package-name>\";\nimport { fetchSomething } from \"<sdk-package-name>/funcs/fetchSomething.js\";\n\nconst client = new Core();\n\nasync function run() {\n  const result = await fetchSomething(client, { id: \"123\" });\n  if (!result.ok) {\n    // You can throw the error or handle it. It's your choice now.\n    throw result.error;\n  }\n\n  console.log(result.value);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: List Customer Meters with Standalone Function\nDESCRIPTION: Illustrates listing customer meters using the standalone function approach from the Polar SDK. It initializes `PolarCore` with an access token and then uses the `customerMetersList` function, passing in the `PolarCore` instance and the organization ID. The result is checked for errors, and if successful, the returned list of customer meters is iterated over and logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customermeters/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerMetersList } from \"@polar-sh/sdk/funcs/customerMetersList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await customerMetersList(polar, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Validating License Key using Standalone Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to validate a license key using the standalone function `customerPortalLicenseKeysValidate`. It initializes a PolarCore instance, calls the standalone function with the instance, license key, and organization ID, and handles the result, including error checking.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarlicensekeys/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalLicenseKeysValidate } from \"@polar-sh/sdk/funcs/customerPortalLicenseKeysValidate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalLicenseKeysValidate(polar, {\n    key: \"<key>\",\n    organizationId: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Orders with Polar SDK\nDESCRIPTION: This code snippet demonstrates how to list orders using the Polar SDK. It initializes the Polar client with an access token and then calls the `orders.list` method, providing an organization ID as a parameter. The result is then iterated over to handle each page of orders.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/orders/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.orders.list({\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Get Metrics with Polar SDK (TypeScript)\nDESCRIPTION: Retrieves metrics about orders and subscriptions using the Polar SDK. It initializes the Polar SDK with an access token, then calls the `metrics.get` method with specified parameters such as start date, end date, interval, and organization ID. The result is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/metrics/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\nimport { RFCDate } from \"@polar-sh/sdk/types/rfcdate.js\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.metrics.get({\n    startDate: new RFCDate(\"2025-02-06\"),\n    endDate: new RFCDate(\"2024-09-04\"),\n    interval: \"week\",\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating Meters with Polar SDK\nDESCRIPTION: Demonstrates how to create a meter using the Polar SDK. It initializes the SDK with an access token and calls the `meters.create` method with parameters like name, filter, aggregation, and organization ID. The created meter object is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/meters/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.meters.create({\n    name: \"<value>\",\n    filter: {\n      conjunction: \"and\",\n      clauses: [],\n    },\n    aggregation: {\n      func: \"sum\",\n      property: \"<value>\",\n    },\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating a Benefit using Polar SDK (TypeScript)\nDESCRIPTION: This snippet demonstrates how to update a benefit using the `update` method on the `benefits` resource of the Polar JS SDK. It initializes the SDK with an access token and then calls the `update` method with the benefit ID and request body. The result is then logged to the console.  It requires the `@polar-sh/sdk` dependency and an access token.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/benefits/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.benefits.update({\n    id: \"<value>\",\n    requestBody: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting Order Invoice with Standalone Function\nDESCRIPTION: This snippet illustrates using the standalone `customerPortalOrdersInvoice` function from the `@polar-sh/sdk/funcs/customerPortalOrdersInvoice.js` module to retrieve an order's invoice. It uses `PolarCore` for better tree-shaking. Error handling is implemented to catch and throw errors returned by the function.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarorders/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalOrdersInvoice } from \"@polar-sh/sdk/funcs/customerPortalOrdersInvoice.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalOrdersInvoice(polar, {\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating a Customer with Polar SDK in Typescript\nDESCRIPTION: This code snippet demonstrates how to create a customer using the Polar SDK. It initializes a Polar instance with an access token, calls the `customers.create` method with customer details such as external ID, email, name, billing address, tax ID, and organization ID. The code requires the `@polar-sh/sdk` package and a valid `POLAR_ACCESS_TOKEN` environment variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customers/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customers.create({\n    externalId: \"usr_1337\",\n    email: \"customer@example.com\",\n    name: \"John Doe\",\n    billingAddress: {\n      country: \"SE\",\n    },\n    taxId: [\n      \"FR61954506077\",\n      \"eu_vat\",\n    ],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating Discount with Polar SDK\nDESCRIPTION: Illustrates how to create a discount using the Polar SDK. The code initializes the Polar object with an access token and calls the discounts.create method with discount details such as duration, amount, currency, name, and organization ID. The created discount object is then logged to the console. Requires `@polar-sh/sdk`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/discounts/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.discounts.create({\n    duration: \"forever\",\n    durationInMonths: 417458,\n    type: \"fixed\",\n    amount: 69025,\n    currency: \"usd\",\n    name: \"<value>\",\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Completing File Upload using Polar SDK\nDESCRIPTION: This code snippet demonstrates how to complete a file upload using the Polar SDK. It instantiates the Polar client with an access token and calls the `files.uploaded` method with the file ID and completion details. It then logs the result to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/files/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.files.uploaded({\n    id: \"<value>\",\n    fileUploadCompleted: {\n      id: \"<id>\",\n      path: \"/sys\",\n      parts: [\n        {\n          number: 173116,\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n        },\n        {\n          number: 894030,\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n        },\n        {\n          number: 673715,\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n        },\n      ],\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Exporting Subscriptions using Standalone Function in Typescript\nDESCRIPTION: This code snippet demonstrates how to export subscriptions as a CSV file using the standalone function version of the Polar SDK in TypeScript. It imports `PolarCore` and `subscriptionsExport` from `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/subscriptionsExport.js`, respectively. It then initializes `PolarCore` with an access token and calls the `subscriptionsExport` function, passing the `PolarCore` instance and the required parameters. Error handling is implemented, and the result is logged to the console.  This approach promotes better tree-shaking for optimized performance.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/subscriptions/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { subscriptionsExport } from \"@polar-sh/sdk/funcs/subscriptionsExport.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await subscriptionsExport(polar, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Get Customer by External ID using Polar SDK\nDESCRIPTION: This example demonstrates how to retrieve a customer by their external ID using the main Polar SDK. It initializes the SDK with an access token, then calls the `customers.getExternal` method with the external ID. The result is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customers/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customers.getExternal({\n    externalId: \"<id>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating Customer with Polar SDK\nDESCRIPTION: This code snippet demonstrates how to update a customer by external ID using the main `Polar` class from the `@polar-sh/sdk` library. It initializes the Polar SDK with an access token and then calls the `customers.updateExternal` method with the customer's external ID and updated information. It then logs the result to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customers/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customers.updateExternal({\n    externalId: \"<id>\",\n    customerUpdate: {\n      externalId: \"usr_1337\",\n      email: \"customer@example.com\",\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"US\",\n      },\n      taxId: [\n        \"FR61954506077\",\n        \"eu_vat\",\n      ],\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Link with Polar SDK in Typescript\nDESCRIPTION: This code snippet demonstrates creating a checkout link using the Polar SDK.  It initializes the Polar SDK, sets the access token, and then calls the `create` method on the `checkoutLinks` object. It configures parameters like `allowDiscountCodes`, `requireBillingAddress`, and `productId`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkoutlinks/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkoutLinks.create({\n    allowDiscountCodes: true,\n    requireBillingAddress: false,\n    productId: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting a License Key with Polar SDK (TypeScript)\nDESCRIPTION: This code demonstrates how to retrieve a specific license key by its ID using the Polar SDK. It initializes the Polar client and calls the `licenseKeys.get` method with the license key's ID. The retrieved license key is then printed to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/licensekeys/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.licenseKeys.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Customer Meters with Polar SDK\nDESCRIPTION: This snippet demonstrates how to list customer meters using the Polar SDK. It authenticates with a customer session token and iterates through the pages of results. It requires the `@polar-sh/sdk` package and a valid `POLAR_CUSTOMER_SESSION` environment variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarcustomermeters/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.customerMeters.list({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Get Benefit by ID using Polar SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a benefit by its ID using the `polar.benefits.get` method from the Polar SDK. It initializes the Polar SDK with an access token, then calls the `get` method with the benefit ID. The result is then logged to the console. The example requires the `@polar-sh/sdk` package.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/benefits/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.benefits.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing License Keys with Standalone Function (TypeScript)\nDESCRIPTION: This snippet shows how to list license keys using the standalone function `licenseKeysList` from the Polar SDK. It initializes a `PolarCore` instance and passes it along with the organization ID to the function. The code handles potential errors and iterates through the results to print each page of license keys.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/licensekeys/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { licenseKeysList } from \"@polar-sh/sdk/funcs/licenseKeysList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await licenseKeysList(polar, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting a Checkout Session via SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve a checkout session using the Polar SDK's `checkouts.clientGet` method. It initializes a Polar instance and calls the method with a client secret, handling the result. The `clientSecret` parameter is required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkouts/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.checkouts.clientGet({\n    clientSecret: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Subscription Model Usage in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the Subscription model from the @polar-sh/sdk.  It creates a Subscription object, populates its properties with example data, including nested objects like customer, product, discount, prices and meters. It showcases the structure and expected data types of the Subscription model.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscription.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Subscription } from \"@polar-sh/sdk/models/components/subscription.js\";\n\nlet value: Subscription = {\n  createdAt: new Date(\"2023-08-01T20:43:13.861Z\"),\n  modifiedAt: new Date(\"2024-06-06T01:41:03.635Z\"),\n  id: \"<value>\",\n  amount: 636180,\n  currency: \"Nakfa\",\n  recurringInterval: \"month\",\n  status: \"active\",\n  currentPeriodStart: new Date(\"2023-09-18T19:50:05.034Z\"),\n  currentPeriodEnd: new Date(\"2025-12-24T04:01:55.073Z\"),\n  cancelAtPeriodEnd: false,\n  canceledAt: new Date(\"2025-04-26T12:14:05.888Z\"),\n  startedAt: new Date(\"2023-07-18T13:08:55.704Z\"),\n  endsAt: new Date(\"2023-05-21T15:44:39.020Z\"),\n  endedAt: new Date(\"2024-12-01T07:13:21.079Z\"),\n  customerId: \"<value>\",\n  productId: \"<value>\",\n  discountId: \"<value>\",\n  checkoutId: \"<value>\",\n  customerCancellationReason: \"customer_service\",\n  customerCancellationComment: \"<value>\",\n  metadata: {\n    \"key\": 6542.35,\n  },\n  customer: {\n    id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n    createdAt: new Date(\"2025-07-14T08:13:59.069Z\"),\n    modifiedAt: new Date(\"2024-11-17T12:28:40.687Z\"),\n    metadata: {\n      \"key\": \"<value>\",\n    },\n    externalId: \"usr_1337\",\n    email: \"customer@example.com\",\n    emailVerified: true,\n    name: \"John Doe\",\n    billingAddress: {\n      country: \"US\",\n    },\n    taxId: [\n      \"FR61954506077\",\n      \"eu_vat\",\n    ],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    deletedAt: new Date(\"2023-01-08T23:04:09.508Z\"),\n    avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n  },\n  product: {\n    createdAt: new Date(\"2025-04-05T05:10:54.629Z\"),\n    modifiedAt: new Date(\"2024-01-20T02:42:04.239Z\"),\n    id: \"<value>\",\n    name: \"<value>\",\n    description: \"ew less gadzooks armchair new unit\",\n    recurringInterval: \"month\",\n    isRecurring: false,\n    isArchived: false,\n    organizationId: \"<value>\",\n    metadata: {\n      \"key\": 940861,\n    },\n    prices: [\n      {\n        createdAt: new Date(\"2025-05-23T20:40:37.708Z\"),\n        modifiedAt: new Date(\"2023-12-02T19:18:27.422Z\"),\n        id: \"<value>\",\n        isArchived: false,\n        productId: \"<value>\",\n        recurringInterval: \"year\",\n      },\n    ],\n    benefits: [\n      {\n        id: \"<value>\",\n        createdAt: new Date(\"2024-09-19T13:39:25.849Z\"),\n        modifiedAt: new Date(\"2024-07-21T20:55:28.613Z\"),\n        description: \"final convoke scaly phew siege\",\n        selectable: false,\n        deletable: false,\n        organizationId: \"<value>\",\n        metadata: {\n          \"key\": 931.52,\n        },\n        properties: {\n          repositoryOwner: \"polarsource\",\n          repositoryName: \"private_repo\",\n          permission: \"push\",\n        },\n      },\n    ],\n    medias: [\n      {\n        id: \"<value>\",\n        organizationId: \"<value>\",\n        name: \"<value>\",\n        path: \"/opt/include\",\n        mimeType: \"<value>\",\n        size: 615195,\n        storageVersion: \"<value>\",\n        checksumEtag: \"<value>\",\n        checksumSha256Base64: \"<value>\",\n        checksumSha256Hex: \"<value>\",\n        lastModifiedAt: new Date(\"2023-12-04T14:15:01.091Z\"),\n        version: \"<value>\",\n        isUploaded: false,\n        createdAt: new Date(\"2023-02-17T13:48:01.906Z\"),\n        sizeReadable: \"<value>\",\n        publicUrl: \"https://shameless-laughter.info\",\n      },\n    ],\n    attachedCustomFields: [\n      {\n        customFieldId: \"<value>\",\n        customField: {\n          createdAt: new Date(\"2024-09-24T14:32:13.939Z\"),\n          modifiedAt: new Date(\"2023-05-25T14:59:09.071Z\"),\n          id: \"<value>\",\n          metadata: {\n            \"key\": 308808,\n          },\n          slug: \"<value>\",\n          name: \"<value>\",\n          organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n          properties: {\n            options: [\n              {\n                value: \"<value>\",\n                label: \"<value>\",\n              },\n            ],\n          },\n        },\n        order: 585371,\n        required: false,\n      },\n    ],\n  },\n  discount: {\n    duration: \"once\",\n    type: \"fixed\",\n    amount: 185916,\n    currency: \"Brunei Dollar\",\n    createdAt: new Date(\"2024-11-30T12:11:39.373Z\"),\n    modifiedAt: new Date(\"2025-04-15T03:44:19.963Z\"),\n    id: \"<value>\",\n    metadata: {\n      \"key\": \"<value>\",\n    },\n    name: \"<value>\",\n    code: \"<value>\",\n    startsAt: new Date(\"2023-06-28T13:01:17.162Z\"),\n    endsAt: new Date(\"2025-01-06T18:30:57.108Z\"),\n    maxRedemptions: 375525,\n    redemptionsCount: 785363,\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  },\n  prices: [\n    {\n      createdAt: new Date(\"2023-04-26T17:31:07.183Z\"),\n      modifiedAt: new Date(\"2025-10-09T23:42:21.091Z\"),\n      id: \"<value>\",\n      isArchived: false,\n      productId: \"<value>\",\n      type: \"recurring\",\n      recurringInterval: \"year\",\n      priceCurrency: \"<value>\",\n      priceAmount: 168279,\n    },\n  ],\n  meters: [\n    {\n      createdAt: new Date(\"2024-07-02T20:09:58.478Z\"),\n      modifiedAt: new Date(\"2024-09-09T06:16:28.238Z\"),\n      id: \"<value>\",\n      consumedUnits: 25,\n      creditedUnits: 100,\n      amount: 0,\n      meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n      meter: {\n        metadata: {\n          \"key\": \"<value>\",\n        },\n        createdAt: new Date(\"2024-01-09T07:52:58.294Z\"),\n        modifiedAt: new Date(\"2023-06-29T22:16:31.198Z\"),\n        id: \"<value>\",\n        name: \"<value>\",\n        filter: {\n          conjunction: \"or\",\n          clauses: [],\n        },\n        aggregation: {},\n        organizationId: \"<value>\",\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Checkout Session using Polar Client in Typescript\nDESCRIPTION: This snippet demonstrates how to update a checkout session using the `clientUpdate` method of the `checkouts` client in the Polar SDK.  It requires the `@polar-sh/sdk` package. It takes a `clientSecret` and a `checkoutUpdatePublic` object as input to update the billing address country.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkouts/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.checkouts.clientUpdate({\n    clientSecret: \"<value>\",\n    checkoutUpdatePublic: {\n      customerBillingAddress: {\n        country: \"FR\",\n      },\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Create Customer Session with Standalone Function - TypeScript\nDESCRIPTION: This snippet demonstrates how to create a customer session using the standalone function `customerSessionsCreate` from the `@polar-sh/sdk/funcs/customerSessionsCreate.js`. It initializes a `PolarCore` instance and then calls the `customerSessionsCreate` function, passing in the `PolarCore` instance and the customer ID. It includes error handling for non-successful responses.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customersessions/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerSessionsCreate } from \"@polar-sh/sdk/funcs/customerSessionsCreate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await customerSessionsCreate(polar, {\n    customerId: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating Refund with Polar SDK (Typescript)\nDESCRIPTION: This code snippet demonstrates how to create a refund using the Polar SDK. It initializes the SDK with an access token and calls the `refunds.create` method, passing in the order ID, refund reason, and amount. The result of the creation is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/refunds/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.refunds.create({\n    orderId: \"<value>\",\n    reason: \"customer_request\",\n    amount: 638424,\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting a License Key with Standalone Function (TypeScript)\nDESCRIPTION: This snippet retrieves a license key using the standalone function `licenseKeysGet` from the Polar SDK. It initializes a `PolarCore` instance and calls the function with the license key's ID. The code includes error handling and prints the retrieved license key to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/licensekeys/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { licenseKeysGet } from \"@polar-sh/sdk/funcs/licenseKeysGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await licenseKeysGet(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Get Subscription using Polar SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a subscription using the `Polar` class from the `@polar-sh/sdk` package. It requires the `customerSession` environment variable and a subscription `id`. The result is logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarsubscriptions/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.subscriptions.get({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Field using Polar SDK - TypeScript\nDESCRIPTION: This code snippet demonstrates how to update a custom field using the main Polar SDK client. It initializes the Polar client with an access token and then calls the `update` method on the `customFields` resource. The `id` parameter specifies the ID of the custom field to update, and `customFieldUpdate` contains the updated data. The example retrieves the access token from an environment variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customfields/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customFields.update({\n    id: \"<value>\",\n    customFieldUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Meters with Polar SDK\nDESCRIPTION: Demonstrates how to list meters using the Polar SDK. It initializes the SDK with an access token and then calls the `meters.list` method with an organization ID. The result is an asynchronous iterable that yields pages of meters, which are then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/meters/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.meters.list({\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting Benefit Grant by ID with Polar SDK in TypeScript\nDESCRIPTION: This code shows how to retrieve a specific benefit grant by its ID using the Polar SDK. It initializes the Polar SDK and then calls the `customerPortal.benefitGrants.get` method with customer session and benefit grant ID. The result is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/benefitgrants/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.benefitGrants.get({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting a Checkout Session by ID with Polar SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve a checkout session using the Polar SDK. It initializes the SDK with an access token, calls the `checkouts.get` method with a checkout ID, and logs the result to the console. It assumes the presence of a Polar SDK instance and a valid checkout ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkouts/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkouts.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Get OAuth2 Client using Polar SDK (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to retrieve an OAuth2 client using the `polar.oauth2.clients.get` method from the Polar SDK. It initializes the SDK with an access token, calls the get method with a client ID, and logs the result. The access token is read from the environment variable `POLAR_ACCESS_TOKEN`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/clients/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.clients.get({\n    clientId: \"<id>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating Checkout Session with Polar SDK in Typescript\nDESCRIPTION: This code snippet demonstrates how to update a checkout session using the Polar SDK in TypeScript. It initializes the Polar SDK with an access token and then calls the `checkouts.update` method to update a specific checkout session, providing an updated customer billing address. It handles the result by logging it to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkouts/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkouts.update({\n    id: \"<value>\",\n    checkoutUpdate: {\n      customerBillingAddress: {\n        country: \"FR\",\n      },\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: List Subscriptions using Polar SDK\nDESCRIPTION: This code snippet demonstrates how to list subscriptions of an authenticated customer using the `Polar` class from the `@polar-sh/sdk` package. It requires the `customerSession` environment variable and an `organizationId`. The result is iterated over to handle each page of the subscription list.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarsubscriptions/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.subscriptions.list({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting Downloadable with Polar SDK (TypeScript)\nDESCRIPTION: This snippet demonstrates how to retrieve a specific downloadable using the Polar SDK's `get` method. It initializes the Polar SDK and calls the `get` method with a `token` parameter. It requires the `@polar-sh/sdk` package.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/downloadables/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.downloadables.get({\n    token: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Create Customer Session with Polar Class - TypeScript\nDESCRIPTION: This snippet demonstrates how to create a customer session using the `Polar` class from the `@polar-sh/sdk`. It initializes a `Polar` instance with an access token and then calls the `customerSessions.create` method with the customer ID. It shows basic usage and error handling for creating a customer session.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customersessions/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerSessions.create({\n    customerId: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Deleting Customer by External ID using Standalone Function\nDESCRIPTION: This code snippet demonstrates how to delete a customer using their external ID with the standalone function. It initializes the `PolarCore` with an access token and then calls the `customersDeleteExternal` function. The `externalId` parameter specifies the ID of the customer to delete, and the result is checked for errors.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customers/README.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customersDeleteExternal } from \"@polar-sh/sdk/funcs/customersDeleteExternal.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await customersDeleteExternal(polar, {\n    externalId: \"<id>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  \n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Checkout Link by ID using Standalone Function in Typescript\nDESCRIPTION: This snippet shows how to retrieve a checkout link using a standalone function from the Polar SDK core. This approach is beneficial for tree-shaking.  It initializes `PolarCore` with an access token and uses the `checkoutLinksGet` function. Error handling and result extraction are demonstrated. Requires `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/checkoutLinksGet.js`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkoutlinks/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { checkoutLinksGet } from \"@polar-sh/sdk/funcs/checkoutLinksGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await checkoutLinksGet(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Deleting Checkout Link using Standalone Function in Typescript\nDESCRIPTION: This snippet shows how to delete a checkout link using the standalone `checkoutLinksDelete` function from the Polar SDK. It initializes `PolarCore` for better tree-shaking, calls the `checkoutLinksDelete` function with the `PolarCore` instance and the checkout link ID. It includes error handling for non-ok responses. Requires the `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/checkoutLinksDelete.js` dependencies.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkoutlinks/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { checkoutLinksDelete } from \"@polar-sh/sdk/funcs/checkoutLinksDelete.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await checkoutLinksDelete(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  \n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating OAuth2 Client with Standalone Function\nDESCRIPTION: This snippet demonstrates how to update an OAuth2 client using a standalone function `oauth2ClientsUpdate` from the Polar SDK. It initializes a `PolarCore` instance for better tree-shaking, calls the standalone function with the Polar instance and update configuration, and handles the response, including error handling.  The access token is sourced from environment variables.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/clients/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { oauth2ClientsUpdate } from \"@polar-sh/sdk/funcs/oauth2ClientsUpdate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await oauth2ClientsUpdate(polar, {\n    clientId: \"<id>\",\n    oAuth2ClientConfigurationUpdate: {\n      redirectUris: [\n        \"https://grown-worth.name\",\n        \"https://worthwhile-avalanche.org/\",\n        \"https://general-digit.com/\",\n      ],\n      clientName: \"<value>\",\n      clientId: \"<id>\",\n    },\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Deleting a Discount with Standalone Function\nDESCRIPTION: This code snippet shows how to delete a discount using the standalone `discountsDelete` function from the Polar SDK. It initializes `PolarCore` for better tree-shaking performance, then calls `discountsDelete` with the core instance and the discount ID. The code handles potential errors and extracts the result. It requires `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/discountsDelete.js`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/discounts/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { discountsDelete } from \"@polar-sh/sdk/funcs/discountsDelete.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await discountsDelete(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  \n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Files with Standalone Function in Typescript\nDESCRIPTION: This code snippet showcases how to list files using a standalone function from the Polar SDK. It initializes the PolarCore, which is more suitable for tree-shaking. It then calls the `filesList` function with a PolarCore instance and an organization ID. The function returns a result object that needs to be checked for errors before accessing the value. It also requires the `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/filesList.js` modules.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/files/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { filesList } from \"@polar-sh/sdk/funcs/filesList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await filesList(polar, {\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Get Customer Meter by ID with Standalone Function\nDESCRIPTION: Demonstrates retrieving a customer meter by ID using the standalone function approach in the Polar SDK. It initializes `PolarCore` with an access token, and then calls the `customerMetersGet` function, passing in the `PolarCore` instance and the customer meter's ID.  The result is checked for errors, and if successful, the retrieved customer meter data is logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customermeters/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerMetersGet } from \"@polar-sh/sdk/funcs/customerMetersGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await customerMetersGet(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Initializing PolarCore and Retrieving Event by ID (Standalone)\nDESCRIPTION: This snippet demonstrates how to initialize the PolarCore and then use the `eventsGet` standalone function to retrieve an event by its ID. It includes error handling and logs the result to the console. The PolarCore is used for optimized tree-shaking.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/events/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { eventsGet } from \"@polar-sh/sdk/funcs/eventsGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await eventsGet(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating Benefit Grant using Standalone Function in TypeScript\nDESCRIPTION: This snippet showcases how to update a benefit grant using a standalone function for better tree-shaking in Polar.js.  It imports `PolarCore` and the `customerPortalBenefitGrantsUpdate` function, calls the function with necessary parameters including a `customerSession` and benefit grant ID, and handles the result. It requires `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/customerPortalBenefitGrantsUpdate.js`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/benefitgrants/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalBenefitGrantsUpdate } from \"@polar-sh/sdk/funcs/customerPortalBenefitGrantsUpdate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalBenefitGrantsUpdate(polar, {\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n    customerBenefitGrantUpdate: {},\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Information with Polar SDK (TypeScript)\nDESCRIPTION: This code demonstrates updating customer information using the Polar SDK.  It initializes a Polar object and calls the `update` method on the `customerPortal.customers` service, providing a customer session ID and the updated billing address. The updated information includes setting the billing address country to \"FR\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarcustomers/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.customers.update({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    billingAddress: {\n      country: \"FR\",\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating Subscription using Standalone Function in TypeScript\nDESCRIPTION: This snippet shows how to update a customer's subscription using a standalone function `customerPortalSubscriptionsUpdate`. It requires importing `PolarCore` and the standalone function from `@polar-sh/sdk`. The function takes a `PolarCore` instance, customer session information, and the update parameters.  It handles potential errors and logs the result to the console. `POLAR_CUSTOMER_SESSION` environment variable is used for customer session, defaulting to an empty string if not present.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarsubscriptions/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalSubscriptionsUpdate } from \"@polar-sh/sdk/funcs/customerPortalSubscriptionsUpdate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalSubscriptionsUpdate(polar, {\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n    customerSubscriptionUpdate: {},\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Link with Standalone Function in Typescript\nDESCRIPTION: This code snippet shows how to create a checkout link using the standalone function `checkoutLinksCreate`. It initializes `PolarCore`, sets the access token, calls the function with the required parameters, handles any errors, and logs the result.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkoutlinks/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { checkoutLinksCreate } from \"@polar-sh/sdk/funcs/checkoutLinksCreate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await checkoutLinksCreate(polar, {\n    allowDiscountCodes: true,\n    requireBillingAddress: false,\n    productId: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Update Product Benefits with Standalone Function (TypeScript)\nDESCRIPTION: This snippet showcases how to update product benefits using the standalone `productsUpdateBenefits` function from the Polar SDK for improved tree-shaking. It initializes a `PolarCore` instance, passes it to the function along with the product ID and updated benefits, and then handles the result, including error checking.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/products/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { productsUpdateBenefits } from \"@polar-sh/sdk/funcs/productsUpdateBenefits.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await productsUpdateBenefits(polar, {\n    id: \"<value>\",\n    productBenefitsUpdate: {\n      benefits: [\n        \"<value>\",\n      ],\n    },\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Benefit Grants with Standalone Function (TypeScript)\nDESCRIPTION: This snippet shows how to use the standalone `benefitsGrants` function from `@polar-sh/sdk/funcs/benefitsGrants.js` to list individual grants for a benefit. It utilizes `PolarCore` for better tree-shaking performance. Requires the `@polar-sh/sdk` package and a valid `POLAR_ACCESS_TOKEN` environment variable. Includes error handling.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/benefits/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { benefitsGrants } from \"@polar-sh/sdk/funcs/benefitsGrants.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await benefitsGrants(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization by ID using Standalone Function\nDESCRIPTION: This code snippet shows how to retrieve an organization by its ID using the standalone `organizationsGet` function from the Polar SDK. It initializes `PolarCore` for better tree-shaking, then calls `organizationsGet` with the `PolarCore` instance and the organization ID. Error handling and result processing are included. Requires `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/organizationsGet.js` and a valid `POLAR_ACCESS_TOKEN` environment variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/organizations/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { organizationsGet } from \"@polar-sh/sdk/funcs/organizationsGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await organizationsGet(polar, {\n    id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: CustomerUpdate Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create and populate a `CustomerUpdate` object using the `@polar-sh/sdk` library. The `CustomerUpdate` object is populated with example data for a customer, including their external ID, email, name, billing address, and tax ID. This object can then be used to update customer information via the Polar API.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerUpdate } from \"@polar-sh/sdk/models/components/customerupdate.js\";\n\nlet value: CustomerUpdate = {\n  externalId: \"usr_1337\",\n  email: \"customer@example.com\",\n  name: \"John Doe\",\n  billingAddress: {\n    country: \"US\",\n  },\n  taxId: [\n    \"FR61954506077\",\n    \"eu_vat\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Get Benefit by ID using Standalone Function\nDESCRIPTION: This code snippet demonstrates how to retrieve a benefit by its ID using the standalone `benefitsGet` function from the Polar SDK. This approach can improve tree-shaking performance. It initializes `PolarCore` with an access token, then calls `benefitsGet` with the `PolarCore` instance and the benefit ID. The result is checked for errors and then logged to the console. This example requires the `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/benefitsGet.js` packages.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/benefits/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { benefitsGet } from \"@polar-sh/sdk/funcs/benefitsGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await benefitsGet(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: CustomerPortalCustomer Initialization in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create and initialize a `CustomerPortalCustomer` object in TypeScript. It imports the `CustomerPortalCustomer` type from the `@polar-sh/sdk/models/components/customerportalcustomer.js` module and assigns sample values to its properties, including dates, strings, booleans, and nested objects. This example shows the basic structure and required fields for constructing a `CustomerPortalCustomer` instance.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerportalcustomer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalCustomer } from \"@polar-sh/sdk/models/components/customerportalcustomer.js\";\n\nlet value: CustomerPortalCustomer = {\n  createdAt: new Date(\"2023-04-03T06:47:49.140Z\"),\n  modifiedAt: new Date(\"2024-10-02T01:50:20.097Z\"),\n  id: \"<value>\",\n  email: \"Asha42@hotmail.com\",\n  emailVerified: false,\n  name: \"<value>\",\n  billingAddress: {\n    country: \"US\",\n  },\n  taxId: [\n    \"911144442\",\n    \"us_ein\",\n  ],\n  oauthAccounts: {\n    \"key\": {\n      accountId: \"<id>\",\n      accountUsername: \"<value>\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting Customer by External ID using Polar SDK\nDESCRIPTION: This code snippet demonstrates how to delete a customer using their external ID with the Polar SDK. It initializes the SDK with an access token and then calls the `deleteExternal` method on the `customers` service. The `externalId` parameter specifies the ID of the customer to delete.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customers/README.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.customers.deleteExternal({\n    externalId: \"<id>\",\n  });\n\n\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating a Discord Benefit in TypeScript\nDESCRIPTION: This snippet shows how to create a Discord benefit using `components.BenefitDiscordCreate`. It includes a description, organization ID, and properties for `guildToken` and `roleId`.  Replace `<value>` and `<id>` with actual Discord token and role ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcreate.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitDiscordCreate = {\n  description: \"posh anenst yet physical boulevard\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {\n    guildToken: \"<value>\",\n    roleId: \"<id>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting OAuth2 Client using Polar SDK\nDESCRIPTION: This code snippet demonstrates how to delete an OAuth2 client using the Polar SDK. It initializes the Polar object with an access token and calls the `delete` method on the `oauth2.clients` object, passing the `clientId` as a parameter. The result is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/clients/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.clients.delete({\n    clientId: \"<id>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Validating Webhook Events with Polar SDK and Express.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to validate webhook events received by an Express.js server using the Polar SDK. It imports necessary modules, defines a route for `/webhook`, and uses the `validateEvent` function from the SDK to verify the authenticity of the webhook event.  It uses the `POLAR_WEBHOOK_SECRET` environment variable for validation and returns a 403 status code if validation fails.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport express, { Request, Response } from \"express\";\nimport { validateEvent, WebhookVerificationError } from \"@polar-sh/sdk/webhooks\";\n\nconst app = express();\n\napp.post(\"/webhook\", express.raw({ type: \"application/json\" }), (req: Request, res: Response) => {\n  try {\n    const event = validateEvent(req.body, req.headers, process.env[\"POLAR_WEBHOOK_SECRET\"] ?? \"\");\n\n    // Process the event\n\n    res.status(202).send('')\n  } catch (error) {\n    if (error instanceof WebhookVerificationError) {\n      res.status(403).send('')\n    }\n    throw error\n  }\n});\n\n```\n\n----------------------------------------\n\nTITLE: Listing Events Standalone Function in TypeScript\nDESCRIPTION: This code snippet demonstrates how to list events using the standalone function `eventsList` from the Polar SDK in TypeScript. It initializes the PolarCore client with an access token and calls the `eventsList` function, passing the PolarCore instance and organization ID as parameters. The results are then iterated over and logged to the console. Error handling is included to throw the error if the request is not successful.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/events/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { eventsList } from \"@polar-sh/sdk/funcs/eventsList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await eventsList(polar, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating Subscription with Standalone Function\nDESCRIPTION: This snippet showcases updating a subscription using the standalone `subscriptionsUpdate` function from the Polar SDK. It initializes a `PolarCore` instance and then calls `subscriptionsUpdate` with the core instance, subscription ID, and update parameters. Error handling and result processing are included.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/subscriptions/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { subscriptionsUpdate } from \"@polar-sh/sdk/funcs/subscriptionsUpdate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await subscriptionsUpdate(polar, {\n    id: \"<value>\",\n    subscriptionUpdate: {\n      cancelAtPeriodEnd: false,\n    },\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating OAuth2 Client with Polar SDK\nDESCRIPTION: This snippet demonstrates how to update an OAuth2 client using the `update` method of the Polar SDK. It initializes a Polar instance, calls the `update` method with a client ID and update configuration, and logs the result. The `accessToken` is sourced from the environment variables.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/clients/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.clients.update({\n    clientId: \"<id>\",\n    oAuth2ClientConfigurationUpdate: {\n      redirectUris: [\n        \"https://grown-worth.name\",\n        \"https://worthwhile-avalanche.org/\",\n        \"https://general-digit.com/\",\n      ],\n      clientName: \"<value>\",\n      clientId: \"<id>\",\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Get Customer State with Polar SDK\nDESCRIPTION: This code snippet demonstrates how to use the Polar SDK to retrieve a customer's state by ID. It initializes the Polar client with an access token and then calls the `getState` method on the `customers` service.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customers/README.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customers.getState({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Deleting a Discount with Polar SDK\nDESCRIPTION: This code snippet demonstrates how to delete a discount using the Polar SDK's `discounts.delete` method. It initializes the SDK with an access token and then calls the `delete` method with the ID of the discount to be deleted. It requires the `@polar-sh/sdk` dependency and an access token.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/discounts/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.discounts.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating Subscription via Polar SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to update a customer's subscription using the `polar.customerPortal.subscriptions.update` method. It requires a `customerSession` and an object containing the `id` of the subscription to update and the `customerSubscriptionUpdate` object.  The result is then logged to the console. `POLAR_CUSTOMER_SESSION` environment variable is used for customer session, defaulting to an empty string if not present.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarsubscriptions/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.subscriptions.update({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n    customerSubscriptionUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting a Checkout Session via Standalone Function in TypeScript\nDESCRIPTION: This snippet shows how to use the standalone `checkoutsClientGet` function from the Polar SDK. It imports `PolarCore` and the `checkoutsClientGet` function.  A `PolarCore` instance is used for tree-shaking performance. It calls the function with the PolarCore instance and a client secret, handling potential errors and the result. The `clientSecret` parameter is required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkouts/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { checkoutsClientGet } from \"@polar-sh/sdk/funcs/checkoutsClientGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await checkoutsClientGet(polar, {\n    clientSecret: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Get OAuth2 Client using Standalone Function (TypeScript)\nDESCRIPTION: This code snippet shows how to retrieve an OAuth2 client using the standalone function `oauth2ClientsGet` from the Polar SDK. It initializes `PolarCore` for optimal tree-shaking and calls `oauth2ClientsGet` with a `PolarCore` instance and a client ID.  Error handling and result extraction from the response object are included. The access token is read from the environment variable `POLAR_ACCESS_TOKEN`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/clients/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { oauth2ClientsGet } from \"@polar-sh/sdk/funcs/oauth2ClientsGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await oauth2ClientsGet(polar, {\n    clientId: \"<id>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting a Custom Field by ID with Polar SDK in TypeScript\nDESCRIPTION: Demonstrates how to retrieve a custom field by ID using the Polar SDK in a TypeScript environment. It initializes the Polar SDK with an access token, calls the `customFields.get` method, and logs the result.  The access token is expected to be set as an environment variable `POLAR_ACCESS_TOKEN`. The ID of the custom field to retrieve is passed as parameter.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customfields/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customFields.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating a CustomerCreate object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a `CustomerCreate` object using the `@polar-sh/sdk` library in TypeScript. It sets properties such as `externalId`, `email`, `name`, `billingAddress`, `taxId`, and `organizationId`. The `billingAddress` and `taxId` are nested objects/arrays. The code imports the `CustomerCreate` type and then creates an instance of that type, assigning values to its properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customercreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerCreate } from \"@polar-sh/sdk/models/components/customercreate.js\";\n\nlet value: CustomerCreate = {\n  externalId: \"usr_1337\",\n  email: \"customer@example.com\",\n  name: \"John Doe\",\n  billingAddress: {\n    country: \"US\",\n  },\n  taxId: [\n    \"911144442\",\n    \"us_ein\",\n  ],\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ProductMediaFileRead Type in TypeScript\nDESCRIPTION: This code snippet defines the structure of a `ProductMediaFileRead` object using TypeScript. It includes properties such as `id`, `organizationId`, `name`, `path`, `mimeType`, `size`, checksums (`checksumEtag`, `checksumSha256Base64`, `checksumSha256Hex`), timestamps (`lastModifiedAt`, `createdAt`), `version`, `isUploaded`, `sizeReadable`, and `publicUrl`. The code shows an example instantiation with placeholder values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/filesupdateresponsefilesupdate.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductMediaFileRead = {\n  id: \"<value>\",\n  organizationId: \"<value>\",\n  name: \"<value>\",\n  path: \"/usr/bin\",\n  mimeType: \"<value>\",\n  size: 176908,\n  storageVersion: \"<value>\",\n  checksumEtag: \"<value>\",\n  checksumSha256Base64: \"<value>\",\n  checksumSha256Hex: \"<value>\",\n  lastModifiedAt: new Date(\"2024-04-30T09:42:31.237Z\"),\n  version: \"<value>\",\n  isUploaded: false,\n  createdAt: new Date(\"2024-02-27T09:24:35.992Z\"),\n  sizeReadable: \"<value>\",\n  publicUrl: \"https://nippy-beret.org\",\n};\n```\n\n----------------------------------------\n\nTITLE: Ingesting Events with Polar SDK\nDESCRIPTION: This code snippet demonstrates how to ingest a batch of events using the `polar.events.ingest` method from the Polar SDK. It initializes the Polar SDK with an access token and then calls the `ingest` method with an array of event objects. Each event object includes properties like `name`, `organizationId`, `customerId`, and `externalCustomerId`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/events/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.events.ingest({\n    events: [\n      {\n        name: \"<value>\",\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        customerId: \"<value>\",\n      },\n      {\n        name: \"<value>\",\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        externalCustomerId: \"<id>\",\n      },\n    ],\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Get Discount by ID using Polar SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a discount by its ID using the Polar SDK. It initializes the Polar SDK client with an access token and calls the `discounts.get` method with the discount ID. The result is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/discounts/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.discounts.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Information with Standalone Function (TypeScript)\nDESCRIPTION: This snippet shows how to update customer information using the standalone function `customerPortalCustomersUpdate` from the Polar SDK. It utilizes `PolarCore` for efficient tree-shaking. Error handling checks `res.ok` and throws errors accordingly. Billing address country will be updated to \"FR\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarcustomers/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalCustomersUpdate } from \"@polar-sh/sdk/funcs/customerPortalCustomersUpdate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalCustomersUpdate(polar, {\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    billingAddress: {\n      country: \"FR\",\n    },\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting Payment Methods with Standalone Function\nDESCRIPTION: This code snippet shows how to retrieve customer payment methods using the standalone function approach in the Polar SDK.  It imports PolarCore and the customerPortalCustomersGetPaymentMethods function. It initializes PolarCore and calls the standalone function with the core instance and customer session. Error handling is included to check if the request was successful.  The code iterates through the paginated results and logs each page.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarcustomers/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalCustomersGetPaymentMethods } from \"@polar-sh/sdk/funcs/customerPortalCustomersGetPaymentMethods.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalCustomersGetPaymentMethods(polar, {\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {});\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: List Subscriptions using Standalone Function\nDESCRIPTION: This code snippet demonstrates how to list subscriptions using the standalone function `customerPortalSubscriptionsList` from `@polar-sh/sdk/funcs/customerPortalSubscriptionsList.js`. It utilizes `PolarCore` for tree-shaking. It requires the `customerSession` environment variable and an `organizationId`.  Error handling is included to catch any failures during the request.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarsubscriptions/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalSubscriptionsList } from \"@polar-sh/sdk/funcs/customerPortalSubscriptionsList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalSubscriptionsList(polar, {\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: LicenseKeysGetRequest Example Usage (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to import and instantiate the `LicenseKeysGetRequest` model from the `@polar-sh/sdk/models/operations/licensekeysget.js` module. It creates an object of type `LicenseKeysGetRequest` with a required `id` property.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/licensekeysgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LicenseKeysGetRequest } from \"@polar-sh/sdk/models/operations/licensekeysget.js\";\n\nlet value: LicenseKeysGetRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting a Customer Standalone (TypeScript)\nDESCRIPTION: Deletes a customer using the standalone `customersDelete` function.  This approach promotes tree-shaking.  Replace `<value>` with the actual customer ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customers/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customersDelete } from \"@polar-sh/sdk/funcs/customersDelete.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await customersDelete(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  \n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting Order by ID with Polar SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific order by its ID using the Polar SDK. It initializes the Polar client with an access token and then calls the `orders.get` method, providing the order ID as a parameter. The retrieved order is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/orders/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.orders.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting Customer Information with Standalone Function (TypeScript)\nDESCRIPTION: This code snippet illustrates how to retrieve customer information using the standalone function `customerPortalCustomersGet` from the Polar SDK. It uses `PolarCore` for optimized tree-shaking. It also handles potential errors by checking the `res.ok` property and throwing an error if the request was not successful.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarcustomers/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalCustomersGet } from \"@polar-sh/sdk/funcs/customerPortalCustomersGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalCustomersGet(polar, {\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Activating License Key with Standalone Function\nDESCRIPTION: This code snippet demonstrates how to activate a license key using the standalone function approach from the Polar SDK. It imports PolarCore and the customerPortalLicenseKeysActivate function. It creates a PolarCore instance and calls the standalone function with the instance and an object containing the key, organizationId, and label as input. Error handling is included.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarlicensekeys/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalLicenseKeysActivate } from \"@polar-sh/sdk/funcs/customerPortalLicenseKeysActivate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalLicenseKeysActivate(polar, {\n    key: \"<key>\",\n    organizationId: \"<value>\",\n    label: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating Files with Standalone Function in Typescript\nDESCRIPTION: This code snippet illustrates how to create files using a standalone function from the Polar SDK. It initializes the PolarCore for improved tree-shaking performance. It then invokes the `filesCreate` function, passing the PolarCore instance and the necessary parameters such as `organizationId`, `name`, `mimeType`, `size`, and the `upload` object containing file parts. It's crucial to check the result for errors before attempting to access the value. The code depends on the `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/filesCreate.js` modules.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/files/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { filesCreate } from \"@polar-sh/sdk/funcs/filesCreate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await filesCreate(polar, {\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    name: \"<value>\",\n    mimeType: \"<value>\",\n    size: 816588,\n    upload: {\n      parts: [\n        {\n          number: 586220,\n          chunkStart: 752438,\n          chunkEnd: 957409,\n        },\n      ],\n    },\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Checkout Link by ID using Polar SDK in Typescript\nDESCRIPTION: This code snippet demonstrates how to retrieve a checkout link by its ID using the Polar SDK. It initializes the SDK with an access token and calls the `checkoutLinks.get` method. The retrieved result is then printed to the console. Requires the `@polar-sh/sdk` package and a valid Polar access token.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkoutlinks/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkoutLinks.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting Order Invoice with Polar SDK\nDESCRIPTION: This snippet demonstrates how to retrieve an order's invoice data using the Polar SDK's `customerPortal.orders.invoice` method. It requires the `@polar-sh/sdk` package and a valid customer session. The `id` parameter specifies the order ID for which to fetch the invoice.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarorders/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.orders.invoice({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Initializing RefundsListRequest in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and initialize a `RefundsListRequest` object from the `@polar-sh/sdk/models/operations/refundslist.js` module. It shows how to set the `organizationId` property with an array containing organization ID strings. This object can then be used to query refunds from the Polar API, filtered by the specified organization ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/refundslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RefundsListRequest } from \"@polar-sh/sdk/models/operations/refundslist.js\";\n\nlet value: RefundsListRequest = {\n  organizationId: [\n    \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodCard in TypeScript\nDESCRIPTION: This code snippet demonstrates the structure and required fields for the `components.PaymentMethodCard` type in TypeScript. It shows how to create an object of this type, including properties like `id`, `createdAt`, `default`, and nested `card` details such as `brand`, `last4`, `expMonth`, and `expYear`. The `createdAt` property is initialized with a Date object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/items.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.PaymentMethodCard = {\n  id: \"<id>\",\n  createdAt: new Date(\"2024-02-24T15:23:31.500Z\"),\n  default: false,\n  card: {\n    brand: \"<value>\",\n    last4: \"<value>\",\n    expMonth: 668136,\n    expYear: 637348,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating a Discount using Standalone Function in Typescript\nDESCRIPTION: This code snippet demonstrates how to update a discount using the standalone `discountsUpdate` function from the Polar SDK. It initializes a `PolarCore` instance with an access token, then calls the `discountsUpdate` function with the `PolarCore` instance, ID, and discount update object. It handles potential errors and logs the result to the console. It uses `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/discountsUpdate.js` for dependencies and expects the `POLAR_ACCESS_TOKEN` environment variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/discounts/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { discountsUpdate } from \"@polar-sh/sdk/funcs/discountsUpdate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await discountsUpdate(polar, {\n    id: \"<value>\",\n    discountUpdate: {},\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting Order by ID with Polar SDK in Typescript\nDESCRIPTION: This snippet retrieves an order by its ID for the authenticated customer using the Polar SDK. It imports the Polar SDK, initializes a Polar instance, and then calls the `customerPortal.orders.get` method with the necessary parameters, including `customerSession` and the `id` of the order to retrieve. The code then logs the retrieved order.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarorders/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.orders.get({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Deactivate License Key using Standalone Function\nDESCRIPTION: This example showcases the standalone function approach for deactivating a license key, leveraging `PolarCore` for optimized tree-shaking. It calls `customerPortalLicenseKeysDeactivate` with a `PolarCore` instance and the necessary parameters (`key`, `organizationId`, `activationId`). Error handling is included to catch and throw any errors returned by the function.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarlicensekeys/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalLicenseKeysDeactivate } from \"@polar-sh/sdk/funcs/customerPortalLicenseKeysDeactivate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalLicenseKeysDeactivate(polar, {\n    key: \"<key>\",\n    organizationId: \"<value>\",\n    activationId: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  \n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: WebhookOrderUpdatedPayload Usage Example (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to import and use the WebhookOrderUpdatedPayload model in TypeScript. It initializes an instance of the WebhookOrderUpdatedPayload with sample data, including nested objects and arrays representing various order details. It requires the @polar-sh/sdk package to be installed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookorderupdatedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookOrderUpdatedPayload } from \"@polar-sh/sdk/models/components/webhookorderupdatedpayload.js\";\n\nlet value: WebhookOrderUpdatedPayload = {\n  data: {\n    createdAt: new Date(\"2024-02-17T15:02:37.628Z\"),\n    modifiedAt: new Date(\"2023-02-23T23:16:53.012Z\"),\n    id: \"<value>\",\n    metadata: {\n      \"key\": 914756,\n    },\n    status: \"pending\",\n    paid: true,\n    subtotalAmount: 921898,\n    discountAmount: 788796,\n    netAmount: 20773,\n    amount: 366510,\n    taxAmount: 799785,\n    totalAmount: 290008,\n    refundedAmount: 793828,\n    refundedTaxAmount: 699917,\n    currency: \"Tanzanian Shilling\",\n    billingReason: \"subscription_update\",\n    billingAddress: {\n      country: \"FR\",\n    },\n    customerId: \"<value>\",\n    productId: \"<value>\",\n    discountId: \"<value>\",\n    subscriptionId: \"<value>\",\n    checkoutId: \"<value>\",\n    customer: {\n      id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n      createdAt: new Date(\"2025-03-21T10:41:52.459Z\"),\n      modifiedAt: new Date(\"2025-12-06T00:26:20.147Z\"),\n      metadata: {\n        \"key\": false,\n      },\n      externalId: \"usr_1337\",\n      email: \"customer@example.com\",\n      emailVerified: true,\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"SE\",\n      },\n      taxId: [\n        \"911144442\",\n        \"us_ein\",\n      ],\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      deletedAt: new Date(\"2024-06-06T13:18:25.313Z\"),\n      avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n    },\n    userId: \"<value>\",\n    product: {\n      metadata: {\n        \"key\": 3182.28,\n      },\n      createdAt: new Date(\"2024-02-01T08:01:12.331Z\"),\n      modifiedAt: new Date(\"2023-02-06T07:42:45.738Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description: \"bestride peter among\",\n      recurringInterval: \"year\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n    },\n    discount: {\n      duration: \"once\",\n      type: \"percentage\",\n      basisPoints: 132709,\n      createdAt: new Date(\"2025-04-08T10:33:45.874Z\"),\n      modifiedAt: new Date(\"2024-05-31T01:26:27.365Z\"),\n      id: \"<value>\",\n      metadata: {\n        \"key\": 461170,\n      },\n      name: \"<value>\",\n      code: \"<value>\",\n      startsAt: new Date(\"2025-12-03T04:39:22.952Z\"),\n      endsAt: new Date(\"2023-04-09T12:40:32.394Z\"),\n      maxRedemptions: 329322,\n      redemptionsCount: 666519,\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    },\n    subscription: {\n      metadata: {\n        \"key\": false,\n      },\n      createdAt: new Date(\"2023-02-13T14:10:30.972Z\"),\n      modifiedAt: new Date(\"2024-05-13T08:58:14.883Z\"),\n      id: \"<value>\",\n      amount: 302841,\n      currency: \"Rial Omani\",\n      recurringInterval: \"month\",\n      status: \"incomplete\",\n      currentPeriodStart: new Date(\"2024-12-02T02:38:02.057Z\"),\n      currentPeriodEnd: new Date(\"2025-06-20T08:58:03.801Z\"),\n      cancelAtPeriodEnd: false,\n      canceledAt: new Date(\"2024-07-13T07:04:01.155Z\"),\n      startedAt: new Date(\"2025-03-12T14:42:40.765Z\"),\n      endsAt: new Date(\"2023-05-03T18:06:28.669Z\"),\n      endedAt: new Date(\"2024-03-01T15:55:06.620Z\"),\n      customerId: \"<value>\",\n      productId: \"<value>\",\n      discountId: \"<value>\",\n      checkoutId: \"<value>\",\n      customerCancellationReason: \"unused\",\n      customerCancellationComment: \"<value>\",\n    },\n    items: [\n      {\n        createdAt: new Date(\"2024-12-27T16:16:15.365Z\"),\n        modifiedAt: new Date(\"2023-07-30T12:37:20.815Z\"),\n        id: \"<value>\",\n        label: \"<value>\",\n        amount: 471478,\n        taxAmount: 535114,\n        proration: false,\n        productPriceId: \"<value>\",\n      },\n    ],\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Updating a Benefit using Standalone Function (TypeScript)\nDESCRIPTION: This snippet demonstrates how to update a benefit using the standalone `benefitsUpdate` function from the Polar JS SDK. It initializes `PolarCore` with an access token and then calls the `benefitsUpdate` function with the `PolarCore` instance, benefit ID, and request body. The result is then logged to the console. Error handling is included. It requires the `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/benefitsUpdate.js` dependencies and an access token.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/benefits/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { benefitsUpdate } from \"@polar-sh/sdk/funcs/benefitsUpdate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await benefitsUpdate(polar, {\n    id: \"<value>\",\n    requestBody: {\n      properties: {\n        repositoryOwner: \"polarsource\",\n        repositoryName: \"private_repo\",\n        permission: \"admin\",\n      },\n    },\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting License Key Activation with Polar SDK in TypeScript\nDESCRIPTION: This code snippet demonstrates how to retrieve a license key activation using the Polar SDK in TypeScript. It initializes the Polar SDK with an access token, then calls the `getActivation` method on the `licenseKeys` object, passing in the license key ID and activation ID. The result is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/licensekeys/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.licenseKeys.getActivation({\n    id: \"<value>\",\n    activationId: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Initializing Polar SDK with Access Token in TypeScript\nDESCRIPTION: This code initializes the Polar SDK with an access token obtained from an environment variable. The access token is used for authentication and is passed as an option during SDK initialization.  It then calls the organizations.list method and iterates over the results.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Deactivate License Key using Polar SDK\nDESCRIPTION: This code snippet demonstrates how to deactivate a license key using the `deactivate` method available on the `customerPortal.licenseKeys` property of a `Polar` instance. It requires the `key`, `organizationId`, and `activationId` parameters to identify the license key instance to deactivate.  No return value is used, indicating a successful execution doesn't directly return data.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarlicensekeys/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  await polar.customerPortal.licenseKeys.deactivate({\n    key: \"<key>\",\n    organizationId: \"<value>\",\n    activationId: \"<value>\",\n  });\n\n\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating Benefit Grant using Polar SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to update a benefit grant for an authenticated customer using the Polar.js SDK. It initializes the Polar object, calls the `update` method on the `customerPortal.benefitGrants` object, and handles the result.  It requires the `@polar-sh/sdk` package and a valid `POLAR_CUSTOMER_SESSION` environment variable. The `id` parameter is required and should be a valid identifier.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/benefitgrants/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.benefitGrants.update({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n    customerBenefitGrantUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: BenefitsListResponse Usage Example (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to import the `BenefitsListResponse` type and create an instance of it with sample data. It includes properties such as `result`, `items` (containing a list of benefit objects), and `pagination` information. The example shows the basic structure and data types expected in the response.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/benefitslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitsListResponse } from \"@polar-sh/sdk/models/operations/benefitslist.js\";\n\nlet value: BenefitsListResponse = {\n  result: {\n    items: [\n      {\n        id: \"<value>\",\n        createdAt: new Date(\"2023-08-14T03:00:20.952Z\"),\n        modifiedAt: new Date(\"2024-02-14T01:05:18.036Z\"),\n        description: \"until noisily always mispronounce married\",\n        selectable: false,\n        deletable: false,\n        organizationId: \"<value>\",\n        metadata: {\n          \"key\": false,\n        },\n        properties: {\n          guildId: \"<id>\",\n          roleId: \"<id>\",\n          guildToken: \"<value>\",\n        },\n      },\n    ],\n    pagination: {\n      totalCount: 938985,\n      maxPage: 695126,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Order by ID with Standalone Function\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific order by its ID using the standalone function `ordersGet` from the Polar SDK. It initializes the `PolarCore` client, optimized for tree-shaking, and then calls the `ordersGet` function with the `PolarCore` instance and an object containing the order ID. The result is checked for errors before logging the retrieved order.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/orders/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { ordersGet } from \"@polar-sh/sdk/funcs/ordersGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await ordersGet(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Initializing Polar SDK and Retrieving Customer State\nDESCRIPTION: This code snippet demonstrates how to initialize the Polar SDK and retrieve a customer's state using their external ID. It shows the basic setup with an access token and error handling for the result.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customers/README.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customers.getStateExternal({\n    externalId: \"<id>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Checkout Links with Polar SDK in Typescript\nDESCRIPTION: This code snippet demonstrates how to list checkout links using the Polar SDK. It initializes the Polar SDK with an access token and then calls the `list` method on the `checkoutLinks` object. It iterates through the results and logs each page.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkoutlinks/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkoutLinks.list({\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating a SubscriptionsListRequest Instance in Typescript\nDESCRIPTION: This snippet demonstrates how to create an instance of the `SubscriptionsListRequest` object in TypeScript. It imports the necessary class and sets the `organizationId` property, which is used to filter subscriptions by a specific organization.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/subscriptionslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubscriptionsListRequest } from \"@polar-sh/sdk/models/operations/subscriptionslist.js\";\n\nlet value: SubscriptionsListRequest = {\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Events with Polar SDK in TypeScript\nDESCRIPTION: This code snippet demonstrates how to list events using the Polar SDK in TypeScript. It initializes the Polar client with an access token and calls the `events.list` method, passing the organization ID as a parameter. The results are then iterated over and logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/events/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.events.list({\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Deleting a File using Polar JS SDK\nDESCRIPTION: This snippet demonstrates how to delete a file using the main Polar JS SDK client. It initializes the client with an access token and then calls the `delete` method on the `files` object, passing the file ID as a parameter.  The `POLAR_ACCESS_TOKEN` environment variable is used to authenticate the request. The file requires `files:write` scope.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/files/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.files.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: WebhookCustomerUpdatedPayload Example Usage (Typescript)\nDESCRIPTION: Demonstrates how to import and use the WebhookCustomerUpdatedPayload from the @polar-sh/sdk, showing how to create an instance with sample customer data including the ID, creation and modification dates, metadata, external ID, email, and other fields. The data represents a customer that has been updated and includes details like billing address, tax ID, organization ID, deletion date, and avatar URL.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookcustomerupdatedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookCustomerUpdatedPayload } from \"@polar-sh/sdk/models/components/webhookcustomerupdatedpayload.js\";\n\nlet value: WebhookCustomerUpdatedPayload = {\n  data: {\n    id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n    createdAt: new Date(\"2023-04-17T17:52:21.274Z\"),\n    modifiedAt: new Date(\"2024-12-18T07:39:50.624Z\"),\n    metadata: {\n      \"key\": 7371.17,\n    },\n    externalId: \"usr_1337\",\n    email: \"customer@example.com\",\n    emailVerified: true,\n    name: \"John Doe\",\n    billingAddress: {\n      country: \"US\",\n    },\n    taxId: [\n      \"911144442\",\n      \"us_ein\",\n    ],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    deletedAt: new Date(\"2023-03-01T14:09:57.290Z\"),\n    avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Authorize using Standalone Function\nDESCRIPTION: This snippet demonstrates how to authorize using the standalone `oauth2Authorize` function from the Polar JS SDK. It initializes a `PolarCore` instance and passes it to the function, along with handling potential errors and logging the result.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/oauth2/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { oauth2Authorize } from \"@polar-sh/sdk/funcs/oauth2Authorize.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await oauth2Authorize(polar);\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Defining EventCreateExternalCustomer Object in TypeScript\nDESCRIPTION: This snippet shows how to define an `EventCreateExternalCustomer` object in TypeScript. It requires importing the `components` namespace and providing values for the `name`, `organizationId`, and `externalCustomerId` properties. The `organizationId` is a fixed UUID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/events.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.EventCreateExternalCustomer = {\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  externalCustomerId: \"<id>\",\n};\n```\n\n----------------------------------------\n\nTITLE: CustomerBenefitGrantGitHubRepository Usage Example (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create an instance of the CustomerBenefitGrantGitHubRepository object in TypeScript. It imports the necessary class from the '@polar-sh/sdk/models/components/customerbenefitgrantgithubrepository.js' module and then instantiates the object with sample data for its various properties, including nested objects such as 'customer' and 'benefit'. The example shows how to set values for properties like dates, strings, booleans, and nested objects, including arrays and maps within the customer and benefit objects.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantgithubrepository.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerBenefitGrantGitHubRepository } from \"@polar-sh/sdk/models/components/customerbenefitgrantgithubrepository.js\";\n\nlet value: CustomerBenefitGrantGitHubRepository = {\n  createdAt: new Date(\"2023-06-08T12:55:02.312Z\"),\n  modifiedAt: new Date(\"2024-05-05T14:19:05.514Z\"),\n  id: \"<value>\",\n  grantedAt: new Date(\"2025-10-31T02:54:17.895Z\"),\n  revokedAt: new Date(\"2023-12-01T22:13:09.289Z\"),\n  customerId: \"<value>\",\n  benefitId: \"<value>\",\n  subscriptionId: \"<value>\",\n  orderId: \"<value>\",\n  isGranted: false,\n  isRevoked: false,\n  customer: {\n    createdAt: new Date(\"2024-07-03T05:59:16.312Z\"),\n    modifiedAt: new Date(\"2023-10-11T19:40:28.157Z\"),\n    id: \"<value>\",\n    email: \"Nick26@hotmail.com\",\n    emailVerified: false,\n    name: \"<value>\",\n    billingAddress: {\n      country: \"SE\",\n    },\n    taxId: [\n      \"911144442\",\n      \"us_ein\",\n    ],\n    oauthAccounts: {\n      \"key\": {\n        accountId: \"<id>\",\n        accountUsername: \"<value>\",\n      },\n    },\n  },\n  benefit: {\n    id: \"<value>\",\n    createdAt: new Date(\"2025-04-10T22:10:21.420Z\"),\n    modifiedAt: new Date(\"2025-11-08T00:30:33.355Z\"),\n    description: \"mask diver a equally phew economise amid follower mmm\",\n    selectable: false,\n    deletable: false,\n    organizationId: \"<value>\",\n    metadata: {\n      \"key\": \"<value>\",\n    },\n    organization: {\n      createdAt: new Date(\"2025-01-18T07:52:57.073Z\"),\n      modifiedAt: new Date(\"2023-10-07T20:25:35.952Z\"),\n      id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      name: \"<value>\",\n      slug: \"<value>\",\n      avatarUrl: \"https://grim-sauerkraut.biz\",\n      email: \"Manuel76@yahoo.com\",\n      website: \"<value>\",\n      socials: [\n        {\n          platform: \"linkedin\",\n          url: \"https://glum-nightlife.info\",\n        },\n      ],\n      detailsSubmittedAt: new Date(\"2025-02-09T21:33:10.333Z\"),\n      featureSettings: {},\n      subscriptionSettings: {\n        allowMultipleSubscriptions: false,\n        allowCustomerUpdates: false,\n        prorationBehavior: \"prorate\",\n      },\n    },\n    properties: {\n      repositoryOwner: \"polarsource\",\n      repositoryName: \"private_repo\",\n    },\n  },\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Confirm Checkout Session with Polar.js SDK\nDESCRIPTION: Confirms a checkout session using the `clientConfirm` method of the Polar.js SDK. It requires a `clientSecret` and a `checkoutConfirmStripe` object with customer billing address details. The example demonstrates how to initialize the Polar SDK and call the `clientConfirm` method.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkouts/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.checkouts.clientConfirm({\n    clientSecret: \"<value>\",\n    checkoutConfirmStripe: {\n      customerBillingAddress: {\n        country: \"FR\",\n      },\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating a Select Custom Field in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a select custom field. It defines the required properties such as `slug`, `name`, `organizationId`, and `properties`. The `properties` object includes an `options` array, where each option has a `value` and a `label`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreate.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomFieldCreateSelect = {\n  slug: \"<value>\",\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {\n    options: [\n      {\n        value: \"<value>\",\n        label: \"<value>\",\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating a Meter using Polar SDK\nDESCRIPTION: This code snippet demonstrates how to update a meter using the `update` method of the Polar SDK. It initializes the Polar SDK with an access token and then calls the `update` method with the meter ID and update parameters. The result is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/meters/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.meters.update({\n    id: \"<value>\",\n    meterUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Confirm Checkout Session as Standalone Function\nDESCRIPTION: Confirms a checkout session using the standalone `checkoutsClientConfirm` function from the Polar.js SDK. This example uses `PolarCore` for improved tree-shaking. It requires a `clientSecret` and a `checkoutConfirmStripe` object, similar to the main SDK method.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkouts/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { checkoutsClientConfirm } from \"@polar-sh/sdk/funcs/checkoutsClientConfirm.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await checkoutsClientConfirm(polar, {\n    clientSecret: \"<value>\",\n    checkoutConfirmStripe: {\n      customerBillingAddress: {\n        country: \"FR\",\n      },\n    },\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Orders with Standalone Function\nDESCRIPTION: This code snippet demonstrates how to list orders using the standalone function `ordersList` from the Polar SDK. It initializes the `PolarCore` client, which is optimized for tree-shaking, and then calls the `ordersList` function with the `PolarCore` instance and an object containing the organization ID. Error handling is implemented to catch potential API errors.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/orders/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { ordersList } from \"@polar-sh/sdk/funcs/ordersList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await ordersList(polar, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating Refund with Standalone Function (Typescript)\nDESCRIPTION: This code snippet shows how to create a refund using the standalone function version. It initializes `PolarCore`, calls `refundsCreate` with order ID, reason, and amount. It also demonstrates error handling and result extraction from the response.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/refunds/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { refundsCreate } from \"@polar-sh/sdk/funcs/refundsCreate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await refundsCreate(polar, {\n    orderId: \"<value>\",\n    reason: \"customer_request\",\n    amount: 638424,\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Deleting a File using Standalone Function in Polar JS SDK\nDESCRIPTION: This snippet demonstrates how to delete a file using the standalone function version of the Polar JS SDK.  It initializes `PolarCore` with an access token and then calls the `filesDelete` function, passing the `PolarCore` instance and the file ID as parameters. The code includes error handling to check if the request was successful.  Using `PolarCore` provides better tree-shaking performance. The file requires `files:write` scope.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/files/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { filesDelete } from \"@polar-sh/sdk/funcs/filesDelete.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await filesDelete(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  \n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating a Discount using Polar SDK in Typescript\nDESCRIPTION: This code snippet demonstrates how to update a discount using the Polar SDK. It initializes a Polar instance with an access token, then calls the `discounts.update` method with an ID and discount update object. The result is then logged to the console.  It relies on the `@polar-sh/sdk` dependency and environment variable `POLAR_ACCESS_TOKEN`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/discounts/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.discounts.update({\n    id: \"<value>\",\n    discountUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Deleting a Benefit Using Polar SDK\nDESCRIPTION: This snippet demonstrates how to delete a benefit using the main Polar SDK client. It initializes the client with an access token and then calls the `delete` method on the `benefits` resource. The `id` parameter specifies the benefit to be deleted.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/benefits/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.benefits.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitMeterCredit in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `BenefitMeterCredit` model with sample data. It imports the model from `@polar-sh/sdk/models/components/benefitmetercredit.js` and assigns values to its properties, including the `id`, `createdAt`, `modifiedAt`, `description`, `selectable`, `deletable`, `organizationId`, `metadata`, and `properties`. This example shows how to define a benefit that grants units on a specific meter.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercredit.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitMeterCredit } from \"@polar-sh/sdk/models/components/benefitmetercredit.js\";\n\nlet value: BenefitMeterCredit = {\n  id: \"<value>\",\n  createdAt: new Date(\"2023-08-25T12:13:00.837Z\"),\n  modifiedAt: new Date(\"2024-07-31T23:01:40.559Z\"),\n  description: \"drat failing or numeracy\",\n  selectable: false,\n  deletable: false,\n  organizationId: \"<value>\",\n  metadata: {\n    \"key\": 1663.34,\n  },\n  properties: {\n    units: 41510,\n    meterId: \"<value>\",\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: SubscriptionsRevokeRequest Example Usage (TypeScript)\nDESCRIPTION: Demonstrates how to import and use the SubscriptionsRevokeRequest model to create a request object. The `id` field is required and represents the subscription ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/subscriptionsrevokerequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubscriptionsRevokeRequest } from \"@polar-sh/sdk/models/operations/subscriptionsrevoke.js\";\n\nlet value: SubscriptionsRevokeRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Organization ID Filter: String Array Type - TypeScript\nDESCRIPTION: Demonstrates filtering benefit grants by an array of organization ID strings.  The `value` variable is assigned an array of strings, where each string represents an organization ID. This allows filtering for multiple organizations simultaneously.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalbenefitgrantslistqueryparamorganizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: Get Customer by External ID using Standalone Function\nDESCRIPTION: This example shows how to retrieve a customer by their external ID using the standalone `customersGetExternal` function from the Polar SDK.  It initializes `PolarCore`, then calls the function with the `PolarCore` instance and the external ID. Error handling is included, and the result is logged to the console if successful.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customers/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customersGetExternal } from \"@polar-sh/sdk/funcs/customersGetExternal.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await customersGetExternal(polar, {\n    externalId: \"<id>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing OAuth2 Clients with Polar SDK\nDESCRIPTION: This code snippet demonstrates how to list OAuth2 clients using the Polar SDK. It initializes a Polar instance with an access token and then iterates through the pages of results obtained from the `oauth2.clients.list` method. The accessToken is retrieved from the environment variable `POLAR_ACCESS_TOKEN`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/clients/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.clients.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating a Number Custom Field in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a number custom field. It defines the required properties such as `slug`, `name`, `organizationId`, and `properties`. The properties are defined as an empty object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreate.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomFieldCreateNumber = {\n  slug: \"<value>\",\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Benefits with Standalone Function\nDESCRIPTION: This snippet demonstrates how to list benefits using a standalone function from the Polar SDK. It initializes the PolarCore client and then calls the `benefitsList` function, providing an organization ID. The result is checked for errors and then iterated over to handle each page of benefits.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/benefits/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { benefitsList } from \"@polar-sh/sdk/funcs/benefitsList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await benefitsList(polar, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Defining OrganizationAvatarFileRead Type in TypeScript\nDESCRIPTION: This code snippet defines the structure of an `OrganizationAvatarFileRead` object using TypeScript. It encompasses properties like `id`, `organizationId`, `name`, `path`, `mimeType`, `size`, checksums (`checksumEtag`, `checksumSha256Base64`, `checksumSha256Hex`), timestamps (`lastModifiedAt`, `createdAt`), `version`, `isUploaded`, `sizeReadable`, and `publicUrl`. An example shows how to create an object of this type with placeholder data.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/filesupdateresponsefilesupdate.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.OrganizationAvatarFileRead = {\n  id: \"<value>\",\n  organizationId: \"<value>\",\n  name: \"<value>\",\n  path: \"/Applications\",\n  mimeType: \"<value>\",\n  size: 524459,\n  storageVersion: \"<value>\",\n  checksumEtag: \"<value>\",\n  checksumSha256Base64: \"<value>\",\n  checksumSha256Hex: \"<value>\",\n  lastModifiedAt: new Date(\"2023-02-25T08:33:28.298Z\"),\n  version: \"<value>\",\n  isUploaded: false,\n  createdAt: new Date(\"2025-07-07T06:37:40.079Z\"),\n  sizeReadable: \"<value>\",\n  publicUrl: \"https://winding-glider.info\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LicenseKeyWithActivations Object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize a `LicenseKeyWithActivations` object in TypeScript using the `@polar-sh/sdk` library. It sets various properties such as `id`, `organizationId`, `customerId`, `customer` details, `benefitId`, `key`, `displayKey`, `status`, limits, usage, validations, dates, and an array of `activations`. The customer object includes nested properties such as billing address and metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/licensekeywithactivations.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LicenseKeyWithActivations } from \"@polar-sh/sdk/models/components/licensekeywithactivations.js\";\n\nlet value: LicenseKeyWithActivations = {\n  id: \"<value>\",\n  organizationId: \"<value>\",\n  customerId: \"<value>\",\n  customer: {\n    id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n    createdAt: new Date(\"2024-03-04T01:52:57.363Z\"),\n    modifiedAt: new Date(\"2025-01-22T07:01:44.087Z\"),\n    metadata: {\n      \"key\": 553146,\n    },\n    externalId: \"usr_1337\",\n    email: \"customer@example.com\",\n    emailVerified: true,\n    name: \"John Doe\",\n    billingAddress: {\n      country: \"FR\",\n    },\n    taxId: [\n      \"FR61954506077\",\n      \"eu_vat\",\n    ],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    deletedAt: new Date(\"2023-12-18T20:33:01.481Z\"),\n    avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n  },\n  benefitId: \"<value>\",\n  key: \"<key>\",\n  displayKey: \"<value>\",\n  status: \"granted\",\n  limitActivations: 989112,\n  usage: 940432,\n  limitUsage: 952623,\n  validations: 216281,\n  lastValidatedAt: new Date(\"2023-10-29T20:18:57.531Z\"),\n  expiresAt: new Date(\"2024-01-22T05:58:10.014Z\"),\n  activations: [\n    {\n      id: \"<value>\",\n      licenseKeyId: \"<value>\",\n      label: \"<value>\",\n      meta: {},\n      createdAt: new Date(\"2024-04-23T21:45:56.168Z\"),\n      modifiedAt: new Date(\"2024-08-31T18:13:07.759Z\"),\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Customer Portal License Keys Get Security Example - TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of `CustomerPortalLicenseKeysGetSecurity` in TypeScript. It imports the necessary type from the `@polar-sh/sdk/models/operations/customerportallicensekeysget.js` module and initializes it with a sample customer session value. The `customerSession` field is required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportallicensekeysgetsecurity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalLicenseKeysGetSecurity } from \"@polar-sh/sdk/models/operations/customerportallicensekeysget.js\";\n\nlet value: CustomerPortalLicenseKeysGetSecurity = {\n  customerSession: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Updating a Product using Polar SDK in Typescript\nDESCRIPTION: This code snippet demonstrates how to update a product using the `products.update` method of the Polar JS SDK. It initializes the SDK with an access token and then calls `products.update` with the product ID and update data. It handles the result by logging it to the console.\n\nDependencies: `@polar-sh/sdk`\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/products/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.products.update({\n    id: \"<value>\",\n    productUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Revoking Token with Standalone Function\nDESCRIPTION: This snippet shows how to revoke an OAuth2 token using the standalone `oauth2Revoke` function from the Polar.js SDK. This approach is useful for better tree-shaking performance. The function requires a `PolarCore` instance and an object containing the token, client ID, and client secret.  Error handling is also included.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/oauth2/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { oauth2Revoke } from \"@polar-sh/sdk/funcs/oauth2Revoke.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await oauth2Revoke(polar, {\n    token: \"<value>\",\n    clientId: \"<id>\",\n    clientSecret: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: WebhookSubscriptionCreatedPayload Example in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to create an example `WebhookSubscriptionCreatedPayload` object. It imports the type definition and assigns a sample payload with various fields populated with example data, including dates, IDs, and metadata. This payload represents the data structure expected when a new subscription is created and sent as a webhook event.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhooksubscriptioncreatedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookSubscriptionCreatedPayload } from \"@polar-sh/sdk/models/components/webhooksubscriptioncreatedpayload.js\";\n\nlet value: WebhookSubscriptionCreatedPayload = {\n  data: {\n    createdAt: new Date(\"2025-05-26T03:04:18.633Z\"),\n    modifiedAt: new Date(\"2025-08-17T08:38:12.962Z\"),\n    id: \"<value>\",\n    amount: 763138,\n    currency: \"Rufiyaa\",\n    recurringInterval: \"month\",\n    status: \"unpaid\",\n    currentPeriodStart: new Date(\"2025-04-10T06:28:48.544Z\"),\n    currentPeriodEnd: new Date(\"2024-07-08T14:40:56.923Z\"),\n    cancelAtPeriodEnd: false,\n    canceledAt: new Date(\"2023-12-12T07:39:41.542Z\"),\n    startedAt: new Date(\"2024-08-05T00:54:37.375Z\"),\n    endsAt: new Date(\"2023-03-07T01:03:04.491Z\"),\n    endedAt: new Date(\"2023-07-20T18:35:29.433Z\"),\n    customerId: \"<value>\",\n    productId: \"<value>\",\n    discountId: \"<value>\",\n    checkoutId: \"<value>\",\n    customerCancellationReason: \"unused\",\n    customerCancellationComment: \"<value>\",\n    metadata: {\n      \"key\": \"<value>\",\n    },\n    customer: {\n      id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n      createdAt: new Date(\"2025-01-20T17:41:07.841Z\"),\n      modifiedAt: new Date(\"2023-02-17T00:31:21.328Z\"),\n      metadata: {\n        \"key\": \"<value>\",\n      },\n      externalId: \"usr_1337\",\n      email: \"customer@example.com\",\n      emailVerified: true,\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"SE\",\n      },\n      taxId: [\n        \"911144442\",\n        \"us_ein\",\n      ],\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      deletedAt: new Date(\"2024-12-16T10:26:19.141Z\"),\n      avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n    },\n    product: {\n      createdAt: new Date(\"2023-02-19T12:41:57.376Z\"),\n      modifiedAt: new Date(\"2025-02-09T06:42:45.214Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description:\n        \"moor unwelcome supposing huzzah austere hoof idolized ouch righteously\",\n      recurringInterval: \"year\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n      metadata: {\n        \"key\": 651458,\n      },\n      prices: [\n        {\n          createdAt: new Date(\"2024-08-30T00:59:04.800Z\"),\n          modifiedAt: new Date(\"2023-12-06T03:10:40.880Z\"),\n          id: \"<value>\",\n          isArchived: false,\n          productId: \"<value>\",\n          recurringInterval: \"month\",\n        },\n      ],\n      benefits: [\n        {\n          id: \"<value>\",\n          createdAt: new Date(\"2024-01-20T11:57:59.883Z\"),\n          modifiedAt: new Date(\"2023-09-12T19:25:13.898Z\"),\n          description: \"clearly government splay\",\n          selectable: false,\n          deletable: false,\n          organizationId: \"<value>\",\n          metadata: {\n            \"key\": 572089,\n          },\n          properties: {\n            repositoryOwner: \"polarsource\",\n            repositoryName: \"private_repo\",\n            permission: \"triage\",\n          },\n        },\n      ],\n      medias: [\n        {\n          id: \"<value>\",\n          organizationId: \"<value>\",\n          name: \"<value>\",\n          path: \"/sys\",\n          mimeType: \"<value>\",\n          size: 468105,\n          storageVersion: \"<value>\",\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n          checksumSha256Hex: \"<value>\",\n          lastModifiedAt: new Date(\"2024-06-09T17:37:57.976Z\"),\n          version: \"<value>\",\n          isUploaded: false,\n          createdAt: new Date(\"2023-04-30T10:26:58.812Z\"),\n          sizeReadable: \"<value>\",\n          publicUrl: \"https://scary-secret.biz\",\n        },\n      ],\n      attachedCustomFields: [\n        {\n          customFieldId: \"<value>\",\n          customField: {\n            createdAt: new Date(\"2025-04-11T11:08:20.926Z\"),\n            modifiedAt: new Date(\"2024-11-10T05:55:39.748Z\"),\n            id: \"<value>\",\n            metadata: {\n              \"key\": false,\n            },\n            slug: \"<value>\",\n            name: \"<value>\",\n            organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n            properties: {},\n          },\n          order: 529929,\n          required: false,\n        },\n      ],\n    },\n    discount: {\n      duration: \"once\",\n      durationInMonths: 32211,\n      type: \"percentage\",\n      basisPoints: 56931,\n      createdAt: new Date(\"2024-08-07T22:10:14.113Z\"),\n      modifiedAt: new Date(\"2023-07-12T13:41:20.569Z\"),\n      id: \"<value>\",\n      metadata: {\n        \"key\": false,\n      },\n      name: \"<value>\",\n      code: \"<value>\",\n      startsAt: new Date(\"2025-04-10T01:44:05.499Z\"),\n      endsAt: new Date(\"2025-09-25T17:06:51.116Z\"),\n      maxRedemptions: 702937,\n      redemptionsCount: 934924,\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    },\n    prices: [\n      {\n        createdAt: new Date(\"2025-07-28T05:12:23.569Z\"),\n        modifiedAt: new Date(\"2023-01-30T20:38:09.922Z\"),\n        id: \"<value>\",\n        isArchived: false,\n        productId: \"<value>\",\n        type: \"one_time\",\n        recurringInterval: \"year\",\n      },\n    ],\n    meters: [\n      {\n        createdAt: new Date(\"2023-03-04T06:35:43.451Z\"),\n        modifiedAt: new Date(\"2025-07-10T00:00:38.572Z\"),\n        id: \"<value>\",\n        consumedUnits: 25,\n        creditedUnits: 100,\n        amount: 0,\n        meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n        meter: {\n          metadata: {\n            \"key\": false,\n          },\n          createdAt: new Date(\"2024-06-26T03:23:33.136Z\"),\n          modifiedAt: new Date(\"2023-03-25T06:21:58.346Z\"),\n          id: \"<value>\",\n          name: \"<value>\",\n          filter: {\n            conjunction: \"and\",\n            clauses: [],\n          },\n          aggregation: {},\n          organizationId: \"<value>\",\n        },\n      },\n    ],\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: ListResourceBenefit Example Usage in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `ListResourceBenefit` type from the `@polar-sh/sdk/models/components/listresourcebenefit.js` module. It creates an instance of `ListResourceBenefit`, populating it with sample data for `items` (an array of benefits) and `pagination` details. The `items` array contains a single benefit object with properties such as `id`, `createdAt`, `modifiedAt`, `description`, `selectable`, `deletable`, `organizationId`, `metadata`, and `properties`. The `properties` field includes details about the benefit such as `prefix`, `expires`, `activations`, and `limitUsage`. The `pagination` field includes `totalCount` and `maxPage` properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourcebenefit.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceBenefit } from \"@polar-sh/sdk/models/components/listresourcebenefit.js\";\n\nlet value: ListResourceBenefit = {\n  items: [\n    {\n      id: \"<value>\",\n      createdAt: new Date(\"2023-09-27T12:36:24.812Z\"),\n      modifiedAt: new Date(\"2024-11-08T01:17:28.121Z\"),\n      description: \"yippee license annual\",\n      selectable: false,\n      deletable: false,\n      organizationId: \"<value>\",\n      metadata: {\n        \"key\": false,\n      },\n      properties: {\n        prefix: \"<value>\",\n        expires: {\n          ttl: 390938,\n          timeframe: \"month\",\n        },\n        activations: {\n          limit: 66465,\n          enableCustomerAdmin: false,\n        },\n        limitUsage: 116937,\n      },\n    },\n  ],\n  pagination: {\n    totalCount: 737180,\n    maxPage: 91241,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Files with Polar SDK in Typescript\nDESCRIPTION: This code snippet demonstrates how to list files using the Polar SDK. It initializes the Polar SDK with an access token and calls the `files.list` method with an organization ID. The result is an asynchronous iterator, which is iterated to handle each page of results. The code relies on the `@polar-sh/sdk` package and expects a valid `POLAR_ACCESS_TOKEN` environment variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/files/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.files.list({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting a License Key Standalone Function in TypeScript\nDESCRIPTION: This snippet illustrates retrieving a license key using the standalone function `customerPortalLicenseKeysGet` from `@polar-sh/sdk/funcs/customerPortalLicenseKeysGet.js`. It utilizes `PolarCore` for better tree-shaking performance. It requires an `id` to identify the specific license key.  Error handling is included.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarlicensekeys/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalLicenseKeysGet } from \"@polar-sh/sdk/funcs/customerPortalLicenseKeysGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalLicenseKeysGet(polar, {\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Defining LegacyRecurringProductPrice in TypeScript\nDESCRIPTION: This snippet defines a `LegacyRecurringProductPrice` object with various properties such as creation and modification timestamps, IDs, product association, recurring interval, currency, and minimum/maximum/preset amounts. It demonstrates how to instantiate this type using a TypeScript object literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customersubscriptionprices.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.LegacyRecurringProductPrice = {\n  createdAt: new Date(\"2025-03-28T17:53:12.899Z\"),\n  modifiedAt: new Date(\"2024-08-10T00:40:01.700Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  recurringInterval: \"year\",\n  priceCurrency: \"<value>\",\n  minimumAmount: 981878,\n  maximumAmount: 962753,\n  presetAmount: 690635,\n};\n```\n\n----------------------------------------\n\nTITLE: Customer Portal Subscriptions List Response Example in TypeScript\nDESCRIPTION: This code demonstrates how to create and populate a `CustomerPortalSubscriptionsListResponse` object in TypeScript.  It imports the necessary type definition and shows how to instantiate the object with sample data, including nested structures such as subscriptions, products, prices, and meters. This snippet illustrates the data structure returned when listing customer portal subscriptions. Dependencies: @polar-sh/sdk/models/operations/customerportalsubscriptionslist.js\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalsubscriptionslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalSubscriptionsListResponse } from \"@polar-sh/sdk/models/operations/customerportalsubscriptionslist.js\";\n\nlet value: CustomerPortalSubscriptionsListResponse = {\n  result: {\n    items: [\n      {\n        createdAt: new Date(\"2024-10-10T11:08:28.622Z\"),\n        modifiedAt: new Date(\"2025-08-01T11:31:35.018Z\"),\n        id: \"<value>\",\n        amount: 435964,\n        currency: \"Namibia Dollar\",\n        recurringInterval: \"month\",\n        status: \"unpaid\",\n        currentPeriodStart: new Date(\"2024-02-23T17:53:28.293Z\"),\n        currentPeriodEnd: new Date(\"2024-06-04T23:43:59.093Z\"),\n        cancelAtPeriodEnd: false,\n        canceledAt: new Date(\"2023-07-26T13:42:22.696Z\"),\n        startedAt: new Date(\"2025-12-12T06:24:34.907Z\"),\n        endsAt: new Date(\"2024-04-26T18:30:27.337Z\"),\n        endedAt: new Date(\"2023-07-16T18:10:41.850Z\"),\n        customerId: \"<value>\",\n        productId: \"<value>\",\n        discountId: \"<value>\",\n        checkoutId: \"<value>\",\n        customerCancellationReason: \"too_complex\",\n        customerCancellationComment: \"<value>\",\n        product: {\n          createdAt: new Date(\"2023-05-10T15:41:14.073Z\"),\n          modifiedAt: new Date(\"2023-04-17T09:47:01.324Z\"),\n          id: \"<value>\",\n          name: \"<value>\",\n          description: \"ack hmph while majestically antelope laughter\",\n          recurringInterval: \"month\",\n          isRecurring: false,\n          isArchived: false,\n          organizationId: \"<value>\",\n          prices: [\n            {\n              createdAt: new Date(\"2025-08-09T00:56:14.811Z\"),\n              modifiedAt: new Date(\"2023-10-31T13:15:27.208Z\"),\n              id: \"<value>\",\n              isArchived: false,\n              productId: \"<value>\",\n              recurringInterval: \"year\",\n              priceCurrency: \"<value>\",\n              minimumAmount: 665561,\n              maximumAmount: 392247,\n              presetAmount: 822840,\n            },\n          ],\n          benefits: [\n            {\n              id: \"<value>\",\n              createdAt: new Date(\"2025-11-26T04:36:45.032Z\"),\n              modifiedAt: new Date(\"2025-12-07T00:57:57.571Z\"),\n              type: \"meter_credit\",\n              description: \"ugh whose bah regularly which as gah\",\n              selectable: false,\n              deletable: false,\n              organizationId: \"<value>\",\n            },\n          ],\n          medias: [\n            {\n              id: \"<value>\",\n              organizationId: \"<value>\",\n              name: \"<value>\",\n              path: \"/etc/ppp\",\n              mimeType: \"<value>\",\n              size: 890652,\n              storageVersion: \"<value>\",\n              checksumEtag: \"<value>\",\n              checksumSha256Base64: \"<value>\",\n              checksumSha256Hex: \"<value>\",\n              lastModifiedAt: new Date(\"2023-08-26T06:18:23.587Z\"),\n              version: \"<value>\",\n              isUploaded: false,\n              createdAt: new Date(\"2025-04-22T18:47:28.341Z\"),\n              sizeReadable: \"<value>\",\n              publicUrl: \"https://muddy-swath.biz/\",\n            },\n          ],\n          organization: {\n            createdAt: new Date(\"2025-06-03T22:50:44.302Z\"),\n            modifiedAt: new Date(\"2025-11-06T19:28:38.303Z\"),\n            id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n            name: \"<value>\",\n            slug: \"<value>\",\n            avatarUrl: \"https://ambitious-bar.info\",\n            email: \"Herman31@gmail.com\",\n            website: \"<value>\",\n            socials: [\n              {\n                platform: \"linkedin\",\n                url: \"https://lumbering-tapioca.info/\",\n              },\n            ],\n            detailsSubmittedAt: new Date(\"2023-07-20T17:39:40.181Z\"),\n            featureSettings: {},\n            subscriptionSettings: {\n              allowMultipleSubscriptions: false,\n              allowCustomerUpdates: false,\n              prorationBehavior: \"prorate\",\n            },\n          },\n        },\n        prices: [\n          {\n            createdAt: new Date(\"2023-08-25T15:54:44.248Z\"),\n            modifiedAt: new Date(\"2023-02-14T12:39:48.692Z\"),\n            id: \"<value>\",\n            isArchived: false,\n            productId: \"<value>\",\n            recurringInterval: \"month\",\n          },\n        ],\n        meters: [\n          {\n            createdAt: new Date(\"2023-07-09T19:49:26.901Z\"),\n            modifiedAt: new Date(\"2024-07-08T08:41:47.324Z\"),\n            id: \"<value>\",\n            consumedUnits: 25,\n            creditedUnits: 100,\n            amount: 0,\n            meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n            meter: {\n              createdAt: new Date(\"2023-05-10T18:55:29.918Z\"),\n              modifiedAt: new Date(\"2025-09-17T09:33:40.140Z\"),\n              id: \"<value>\",\n              name: \"<value>\",\n            },\n          },\n        ],\n      },\n    ],\n    pagination: {\n      totalCount: 805685,\n      maxPage: 375207,\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating Checkouts with Standalone Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a checkout session using the standalone function version of the Polar SDK in TypeScript. It initializes the PolarCore and calls the `checkoutsCreate` function with customer billing address and product details. It handles potential errors and logs the result to the console.\n\nDependencies: @polar-sh/sdk/core.js, @polar-sh/sdk/funcs/checkoutsCreate.js\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkouts/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { checkoutsCreate } from \"@polar-sh/sdk/funcs/checkoutsCreate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await checkoutsCreate(polar, {\n    customerBillingAddress: {\n      country: \"SE\",\n    },\n    products: [\n      \"<value>\",\n      \"<value>\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Deleting Payment Method with Standalone Function in TypeScript\nDESCRIPTION: This snippet shows how to delete a payment method using the standalone `customerPortalCustomersDeletePaymentMethod` function from `@polar-sh/sdk/funcs/customerPortalCustomersDeletePaymentMethod.js`. It imports both `PolarCore` and the standalone function. This approach provides better tree-shaking performance.  It requires the `POLAR_CUSTOMER_SESSION` environment variable to be set. The `id` parameter represents the payment method ID to be deleted. Error handling is included to check if the request was successful.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarcustomers/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalCustomersDeletePaymentMethod } from \"@polar-sh/sdk/funcs/customerPortalCustomersDeletePaymentMethod.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalCustomersDeletePaymentMethod(polar, {\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<id>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  \n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Orders with Polar SDK in Typescript\nDESCRIPTION: This snippet demonstrates how to list orders for the authenticated customer using the Polar SDK. It imports the Polar SDK, initializes a Polar instance, and calls the `customerPortal.orders.list` method with necessary parameters like `customerSession` and `organizationId`. The code iterates through the resulting pages and logs each page.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarorders/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.orders.list({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Defining CheckoutDiscountPercentageRepeatDuration Type (TypeScript)\nDESCRIPTION: This snippet defines the structure for a percentage-based discount applied with a 'once' duration that repeats for a specified number of months. It includes properties for duration, durationInMonths, type (fixed), basisPoints, ID, name, and discount code. The type is `components.CheckoutDiscountPercentageRepeatDuration`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpublicdiscount.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CheckoutDiscountPercentageRepeatDuration = {\n  duration: \"once\",\n  durationInMonths: 606755,\n  type: \"fixed\",\n  basisPoints: 513076,\n  id: \"<value>\",\n  name: \"<value>\",\n  code: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Revoking a Subscription using Standalone Function in Typescript\nDESCRIPTION: This code snippet shows how to revoke a subscription using the standalone `subscriptionsRevoke` function from the Polar SDK's `core.js` and `funcs` modules. It initializes `PolarCore` for optimized tree-shaking and then calls the `subscriptionsRevoke` function with the `PolarCore` instance and the subscription ID. Error handling and result processing are included.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/subscriptions/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { subscriptionsRevoke } from \"@polar-sh/sdk/funcs/subscriptionsRevoke.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await subscriptionsRevoke(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Benefit Grants with Polar SDK in TypeScript\nDESCRIPTION: This code snippet demonstrates how to list benefit grants of the authenticated customer using the Polar SDK. It initializes the Polar SDK and then calls the `customerPortal.benefitGrants.list` method with necessary authentication and organization ID. The result is then iterated over and handled.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/benefitgrants/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.benefitGrants.list({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating File Example Usage - Standalone Function - Typescript\nDESCRIPTION: This code snippet demonstrates how to update a file using the standalone `filesUpdate` function. It initializes `PolarCore` with an access token, then calls the `filesUpdate` function, passing the PolarCore instance and file update parameters. It also includes error handling to check the `ok` status and throw an error if the request fails.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/files/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { filesUpdate } from \"@polar-sh/sdk/funcs/filesUpdate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await filesUpdate(polar, {\n    id: \"<value>\",\n    filePatch: {},\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Using standalone functions for Organizations List in TypeScript\nDESCRIPTION: This code demonstrates how to use the standalone `organizationsList` function from the Polar.js SDK. It initializes a `PolarCore` instance, calls `organizationsList` to fetch organization data, and handles potential errors such as `SDKValidationError`. It iterates through the pages of the result and logs each page to the console. It requires the `@polar-sh/sdk` package and accesses the `POLAR_ACCESS_TOKEN` environment variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/FUNCTIONS.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { organizationsList } from \"@polar-sh/sdk/funcs/organizationsList.js\";\nimport { SDKValidationError } from \"@polar-sh/sdk/models/errors/sdkvalidationerror.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await organizationsList(polar, {});\n\n  switch (true) {\n    case res.ok:\n      // The success case will be handled outside of the switch block\n      break;\n    case res.error instanceof SDKValidationError:\n      // Pretty-print validation errors.\n      return console.log(res.error.pretty());\n    case res.error instanceof Error:\n      return console.log(res.error);\n    default:\n      // TypeScript's type checking will fail on the following line if the above\n      // cases were not exhaustive.\n      res.error satisfies never;\n      throw new Error(\"Assertion failed: expected error checks to be exhaustive: \" + res.error);\n  }\n\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating a Customer with standalone function\nDESCRIPTION: This snippet shows how to update a customer using the standalone `customersUpdate` function from the Polar SDK, designed for improved tree-shaking. It initializes `PolarCore` with an access token and calls the `customersUpdate` function with the `PolarCore` instance and the customer ID and update data. Error handling is included to catch potential issues during the update process.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customers/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customersUpdate } from \"@polar-sh/sdk/funcs/customersUpdate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await customersUpdate(polar, {\n    id: \"<value>\",\n    customerUpdate: {\n      externalId: \"usr_1337\",\n      email: \"customer@example.com\",\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"FR\",\n      },\n      taxId: [\n        \"FR61954506077\",\n        \"eu_vat\",\n      ],\n    },\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating a Meter using Standalone Function\nDESCRIPTION: This code snippet demonstrates how to update a meter using the standalone function `metersUpdate` from the Polar SDK. It initializes the PolarCore, then calls the `metersUpdate` function passing the PolarCore instance and the necessary parameters. It also handles potential errors by checking the `ok` property of the response.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/meters/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { metersUpdate } from \"@polar-sh/sdk/funcs/metersUpdate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await metersUpdate(polar, {\n    id: \"<value>\",\n    meterUpdate: {},\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Initializing Polar SDK and Retrieving Event by ID (Client)\nDESCRIPTION: This snippet demonstrates how to initialize the Polar SDK with an access token and then use the `events.get` method to retrieve an event by its ID. It handles the asynchronous call and logs the result to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/events/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.events.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating Fixed Once Forever Discount TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a fixed amount discount that applies once and lasts forever. It defines a `DiscountFixedOnceForeverDurationCreate` object with properties such as duration set to \"forever\", type set to \"percentage\", an amount, a name, and an organizationId.  The `components` namespace needs to be imported or defined.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DiscountFixedOnceForeverDurationCreate = {\n  duration: \"forever\",\n  type: \"percentage\",\n  amount: 83830,\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting Payment Method with Polar SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to delete a payment method using the `Polar` class from the `@polar-sh/sdk` library. It imports the Polar class, initializes it, and then calls the `deletePaymentMethod` method on the `customerPortal.customers` object.  It requires the `POLAR_CUSTOMER_SESSION` environment variable to be set. The `id` parameter represents the payment method ID to be deleted.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarcustomers/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  await polar.customerPortal.customers.deletePaymentMethod({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<id>\",\n  });\n\n\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Custom Fields with Standalone Function\nDESCRIPTION: Demonstrates how to list custom fields using the standalone function `customFieldsList` from the Polar SDK. It initializes a PolarCore instance with an access token and passes it to the function along with an organization ID. The example iterates through the pages of results and logs each page to the console. It also includes error handling for unsuccessful responses.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customfields/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customFieldsList } from \"@polar-sh/sdk/funcs/customFieldsList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await customFieldsList(polar, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Select Field in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to create a `CustomFieldCreateSelect` object. It includes the necessary properties such as `slug`, `name`, `organizationId`, and `properties` which defines the select options. The `organizationId` is a UUID. The `properties` object contains an array of `options`, each with a `value` and a `label`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreateselect.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldCreateSelect } from \"@polar-sh/sdk/models/components/customfieldcreateselect.js\";\n\nlet value: CustomFieldCreateSelect = {\n  slug: \"<value>\",\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {\n    options: [\n      {\n        value: \"<value>\",\n        label: \"<value>\",\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a MeterCreate Object in TypeScript\nDESCRIPTION: This code snippet shows how to create a MeterCreate object using the Polar SDK in TypeScript.  It sets the name, filter (with a conjunction and empty clauses), aggregation (with function and property), and organization ID properties. It requires importing the `MeterCreate` class from `@polar-sh/sdk/models/components/metercreate.js`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metercreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MeterCreate } from \"@polar-sh/sdk/models/components/metercreate.js\";\n\nlet value: MeterCreate = {\n  name: \"<value>\",\n  filter: {\n    conjunction: \"and\",\n    clauses: [],\n  },\n  aggregation: {\n    func: \"avg\",\n    property: \"<value>\",\n  },\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Discount ID Filter - TypeScript\nDESCRIPTION: Demonstrates how to use a string array as a value to filter by discount ID.  Each element in the array should be a string representing a discount ID to filter by.  No dependencies are required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparamdiscountidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Listing Custom Fields with Polar SDK\nDESCRIPTION: Demonstrates how to list custom fields using the Polar SDK. It initializes a Polar instance with an access token and calls the `customFields.list` method with an organization ID. The example iterates through the pages of results and logs each page to the console. The function requires the 'custom_fields:read' and 'custom_fields:write' scopes.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customfields/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customFields.list({\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Using CheckoutsListResponse in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the CheckoutsListResponse type from the @polar-sh/sdk/models/operations/checkoutslist.js module. It creates an instance of the CheckoutsListResponse object with example data to illustrate its structure and usage.  The data includes details such as checkout information, products, pricing, discounts, and customer details.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutsListResponse } from \"@polar-sh/sdk/models/operations/checkoutslist.js\";\n\nlet value: CheckoutsListResponse = {\n  result: {\n    items: [\n      {\n        createdAt: new Date(\"2023-03-31T01:46:14.710Z\"),\n        modifiedAt: new Date(\"2024-12-06T02:31:04.951Z\"),\n        id: \"<value>\",\n        paymentProcessor: \"stripe\",\n        status: \"open\",\n        clientSecret: \"<value>\",\n        url: \"https://portly-affect.info/\",\n        expiresAt: new Date(\"2025-11-24T04:19:48.691Z\"),\n        successUrl: \"https://perky-hutch.biz/\",\n        embedOrigin: \"<value>\",\n        amount: 134654,\n        discountAmount: 921634,\n        netAmount: 742402,\n        taxAmount: 919171,\n        totalAmount: 551976,\n        currency: \"Iceland Krona\",\n        productId: \"<value>\",\n        productPriceId: \"<value>\",\n        discountId: \"<value>\",\n        allowDiscountCodes: false,\n        requireBillingAddress: false,\n        isDiscountApplicable: false,\n        isFreeProductPrice: false,\n        isPaymentRequired: false,\n        isPaymentSetupRequired: false,\n        isPaymentFormRequired: false,\n        customerId: \"<value>\",\n        customerName: \"<value>\",\n        customerEmail: \"<value>\",\n        customerIpAddress: \"<value>\",\n        customerBillingAddress: {\n          country: \"FR\",\n        },\n        customerTaxId: \"<id>\",\n        paymentProcessorMetadata: {\n          \"key\": \"<value>\",\n        },\n        metadata: {\n          \"key\": \"<value>\",\n        },\n        customerExternalId: \"<id>\",\n        products: [\n          {\n            createdAt: new Date(\"2025-04-10T15:23:13.921Z\"),\n            modifiedAt: new Date(\"2024-08-23T06:07:28.083Z\"),\n            id: \"<value>\",\n            name: \"<value>\",\n            description: \"finally beside bathrobe once settle reassuringly\",\n            recurringInterval: \"month\",\n            isRecurring: false,\n            isArchived: false,\n            organizationId: \"<value>\",\n            prices: [\n              {\n                createdAt: new Date(\"2024-05-23T13:49:30.228Z\"),\n                modifiedAt: new Date(\"2024-01-20T09:01:47.372Z\"),\n                id: \"<value>\",\n                isArchived: false,\n                productId: \"<value>\",\n                recurringInterval: \"year\",\n                priceCurrency: \"<value>\",\n                priceAmount: 678086,\n              },\n            ],\n            benefits: [\n              {\n                id: \"<value>\",\n                createdAt: new Date(\"2023-05-27T04:54:02.497Z\"),\n                modifiedAt: new Date(\"2023-06-25T14:06:47.693Z\"),\n                type: \"meter_credit\",\n                description:\n                  \"cleverly psst smoothly eek misspend as zowie planula emphasise\",\n                selectable: false,\n                deletable: false,\n                organizationId: \"<value>\",\n              },\n            ],\n            medias: [\n              {\n                id: \"<value>\",\n                organizationId: \"<value>\",\n                name: \"<value>\",\n                path: \"/Users\",\n                mimeType: \"<value>\",\n                size: 34474,\n                storageVersion: \"<value>\",\n                checksumEtag: \"<value>\",\n                checksumSha256Base64: \"<value>\",\n                checksumSha256Hex: \"<value>\",\n                lastModifiedAt: new Date(\"2025-09-28T23:26:19.273Z\"),\n                version: \"<value>\",\n                isUploaded: false,\n                createdAt: new Date(\"2025-06-04T15:02:20.132Z\"),\n                sizeReadable: \"<value>\",\n                publicUrl: \"https://tepid-ownership.biz/\",\n              },\n            ],\n          },\n        ],\n        product: {\n          createdAt: new Date(\"2023-02-13T10:18:04.915Z\"),\n          modifiedAt: new Date(\"2024-04-28T01:51:56.765Z\"),\n          id: \"<value>\",\n          name: \"<value>\",\n          description: \"when aha present pigsty meh indelible over yowza\",\n          recurringInterval: \"year\",\n          isRecurring: false,\n          isArchived: false,\n          organizationId: \"<value>\",\n          prices: [\n            {\n              createdAt: new Date(\"2023-04-03T02:36:27.059Z\"),\n              modifiedAt: new Date(\"2024-10-11T10:27:29.716Z\"),\n              id: \"<value>\",\n              isArchived: false,\n              productId: \"<value>\",\n              type: \"recurring\",\n              recurringInterval: \"month\",\n              priceCurrency: \"<value>\",\n              minimumAmount: 135129,\n              maximumAmount: 846341,\n              presetAmount: 408057,\n            },\n          ],\n          benefits: [\n            {\n              id: \"<value>\",\n              createdAt: new Date(\"2025-04-08T11:18:04.018Z\"),\n              modifiedAt: new Date(\"2025-01-09T00:34:01.316Z\"),\n              type: \"discord\",\n              description: \"forage into remand\",\n              selectable: false,\n              deletable: false,\n              organizationId: \"<value>\",\n            },\n          ],\n          medias: [\n            {\n              id: \"<value>\",\n              organizationId: \"<value>\",\n              name: \"<value>\",\n              path: \"/usr/bin\",\n              mimeType: \"<value>\",\n              size: 901138,\n              storageVersion: \"<value>\",\n              checksumEtag: \"<value>\",\n              checksumSha256Base64: \"<value>\",\n              checksumSha256Hex: \"<value>\",\n              lastModifiedAt: new Date(\"2023-09-24T20:01:23.023Z\"),\n              version: \"<value>\",\n              isUploaded: false,\n              createdAt: new Date(\"2025-01-27T22:25:06.963Z\"),\n              sizeReadable: \"<value>\",\n              publicUrl: \"https://adolescent-birdcage.com\",\n            },\n          ],\n        },\n        productPrice: {\n          createdAt: new Date(\"2025-09-22T00:07:08.718Z\"),\n          modifiedAt: new Date(\"2025-01-21T07:28:24.888Z\"),\n          id: \"<value>\",\n          isArchived: false,\n          productId: \"<value>\",\n          recurringInterval: \"year\",\n          priceCurrency: \"<value>\",\n          minimumAmount: 189951,\n          maximumAmount: 24334,\n          presetAmount: 825816,\n        },\n        discount: {\n          duration: \"repeating\",\n          type: \"fixed\",\n          amount: 771010,\n          currency: \"CFA Franc BEAC\",\n          id: \"<value>\",\n          name: \"<value>\",\n          code: \"<value>\",\n        },\n        subscriptionId: \"<value>\",\n        attachedCustomFields: [\n          {\n            customFieldId: \"<value>\",\n            customField: {\n              createdAt: new Date(\"2024-02-07T16:07:20.953Z\"),\n              modifiedAt: new Date(\"2024-07-02T05:39:01.574Z\"),\n              id: \"<value>\",\n              metadata: {\n                \"key\": \"<value>\",\n              },\n              slug: \"<value>\",\n              name: \"<value>\",\n              organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n              properties: {},\n            },\n            order: 551822,\n            required: false,\n          },\n        ],\n        customerMetadata: {\n          \"key\": 510898,\n        },\n        customerBillingAddressFields: {\n          country: false,\n          state: false,\n          city: false,\n          postalCode: false,\n          line1: false,\n          line2: false,\n        },\n      },\n    ],\n    pagination: {\n      totalCount: 51297,\n      maxPage: 765532,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: BenefitsUpdateRequest Example Initialization in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the `BenefitsUpdateRequest` object from the `@polar-sh/sdk/models/operations/benefitsupdate.js` library.  It shows how to create an instance of the object, including the `id` (string) and `requestBody` (object) properties. The `id` field is populated with a placeholder value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/benefitsupdaterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitsUpdateRequest } from \"@polar-sh/sdk/models/operations/benefitsupdate.js\";\n\nlet value: BenefitsUpdateRequest = {\n  id: \"<value>\",\n  requestBody: {},\n};\n```\n\n----------------------------------------\n\nTITLE: PaymentMethodGeneric Example in TypeScript\nDESCRIPTION: This code snippet shows how to import the PaymentMethodGeneric type and create an instance of it with sample values for id, type, createdAt, and default properties. It requires the @polar-sh/sdk package to be installed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/paymentmethodgeneric.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentMethodGeneric } from \"@polar-sh/sdk/models/components/paymentmethodgeneric.js\";\n\nlet value: PaymentMethodGeneric = {\n  id: \"<id>\",\n  type: \"<value>\",\n  createdAt: new Date(\"2025-02-26T06:47:53.587Z\"),\n  default: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a CustomersUpdateRequest Object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a CustomersUpdateRequest object in TypeScript using data from the @polar-sh/sdk. It imports the CustomersUpdateRequest class and initializes it with example data, including a customer ID, external ID, email, name, billing address and tax ID. It requires the @polar-sh/sdk package to be installed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customersupdaterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomersUpdateRequest } from \"@polar-sh/sdk/models/operations/customersupdate.js\";\n\nlet value: CustomersUpdateRequest = {\n  id: \"<value>\",\n  customerUpdate: {\n    externalId: \"usr_1337\",\n    email: \"customer@example.com\",\n    name: \"John Doe\",\n    billingAddress: {\n      country: \"FR\",\n    },\n    taxId: [\n      \"FR61954506077\",\n      \"eu_vat\",\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Listing OAuth2 Clients (Standalone Function)\nDESCRIPTION: This snippet showcases listing OAuth2 clients using the standalone function version provided by the Polar SDK. It imports `PolarCore` and `oauth2ClientsList`, initializes `PolarCore` with an access token and calls `oauth2ClientsList` with the core instance and empty request params. The accessToken is retrieved from the environment variable `POLAR_ACCESS_TOKEN`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/clients/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { oauth2ClientsList } from \"@polar-sh/sdk/funcs/oauth2ClientsList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await oauth2ClientsList(polar, {});\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Cancelling Subscription with Polar Client (Typescript)\nDESCRIPTION: This code demonstrates how to cancel a customer's subscription using the `polar.customerPortal.subscriptions.cancel` method. It imports the Polar class and calls the cancel function with the required customer session and subscription ID.  Ensure that the `POLAR_CUSTOMER_SESSION` environment variable is set and a valid subscription ID is provided.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarsubscriptions/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.subscriptions.cancel({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: MetricsGetRequest Usage Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create and populate a `MetricsGetRequest` object in TypeScript. It imports necessary modules from the `@polar-sh/sdk` and initializes the request with `startDate`, `endDate`, `interval`, and `organizationId`. The `RFCDate` type is used for date values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/metricsgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MetricsGetRequest } from \"@polar-sh/sdk/models/operations/metricsget.js\";\nimport { RFCDate } from \"@polar-sh/sdk/types/rfcdate.js\";\n\nlet value: MetricsGetRequest = {\n  startDate: new RFCDate(\"2025-11-18\"),\n  endDate: new RFCDate(\"2025-09-30\"),\n  interval: \"day\",\n  organizationId: [\n    \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: OAuth2Client Initialization in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and instantiate the OAuth2Client object in TypeScript. It imports the OAuth2Client from the specified path and then creates an instance of it, populating the fields with example values, including redirect URIs, client names, and timestamps.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/oauth2client.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OAuth2Client } from \"@polar-sh/sdk/models/components/oauth2client.js\";\n\nlet value: OAuth2Client = {\n  redirectUris: [\n    \"https://familiar-celsius.org\",\n  ],\n  clientName: \"<value>\",\n  createdAt: new Date(\"2025-10-09T07:54:57.874Z\"),\n  modifiedAt: new Date(\"2024-03-22T13:05:00.238Z\"),\n  clientId: \"<id>\",\n  clientSecret: \"<value>\",\n  clientIdIssuedAt: 973644,\n  clientSecretExpiresAt: 814727,\n};\n```\n\n----------------------------------------\n\nTITLE: Authorize using Polar SDK\nDESCRIPTION: This snippet demonstrates how to authorize using the Polar JS SDK. It initializes the Polar SDK with an access token and calls the `authorize` method on the `oauth2` namespace. The result is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/oauth2/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.authorize();\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth2 Clients with Polar SDK\nDESCRIPTION: This code snippet demonstrates how to create an OAuth2 client using the Polar SDK. It initializes a Polar instance with an access token and then calls the `oauth2.clients.create` method with the required parameters: `redirectUris` and `clientName`. The accessToken is retrieved from the environment variable `POLAR_ACCESS_TOKEN`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/clients/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.oauth2.clients.create({\n    redirectUris: [\n      \"https://inferior-chainstay.com\",\n    ],\n    clientName: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating DiscountPercentageOnceForeverDurationCreate Object in Typescript\nDESCRIPTION: This code snippet demonstrates how to create a `DiscountPercentageOnceForeverDurationCreate` object using the Polar SDK.  It sets the duration to \"forever\", the type to \"percentage\", specifies the basis points, name, and organization ID. Requires the `@polar-sh/sdk` package to be installed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentageonceforeverdurationcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountPercentageOnceForeverDurationCreate } from \"@polar-sh/sdk/models/components/discountpercentageonceforeverdurationcreate.js\";\n\nlet value: DiscountPercentageOnceForeverDurationCreate = {\n  duration: \"forever\",\n  type: \"percentage\",\n  basisPoints: 393436,\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Benefit Grants with Polar SDK Client (TypeScript)\nDESCRIPTION: This snippet demonstrates how to list individual grants for a benefit using the `polar.benefits.grants` method from the Polar SDK. It initializes the SDK with an access token and iterates through the pages of results. Requires the `@polar-sh/sdk` package and a valid `POLAR_ACCESS_TOKEN` environment variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/benefits/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.benefits.grants({\n    id: \"<value>\",\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Validating License Key using Polar SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to validate a license key using the `polar.customerPortal.licenseKeys.validate` method. It initializes a Polar instance, calls the `validate` method with a license key and organization ID, and logs the result.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarlicensekeys/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.licenseKeys.validate({\n    key: \"<key>\",\n    organizationId: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing License Keys using Polar SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to list license keys using the Polar SDK. It initializes the `Polar` client, retrieves the license keys using `customerPortal.licenseKeys.list`, and iterates through the results. It requires the `@polar-sh/sdk` dependency and utilizes the `POLAR_CUSTOMER_SESSION` environment variable for authentication. The `organizationId` is passed as a parameter.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarlicensekeys/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.licenseKeys.list({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting Order by ID with Standalone Function in Typescript\nDESCRIPTION: This snippet gets an order by ID using the standalone function `customerPortalOrdersGet` from the Polar SDK. It imports `PolarCore` and `customerPortalOrdersGet`, initializes a `PolarCore` instance, and then calls the function with `customerSession` and the `id` of the order. It includes error handling and logs the result.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarorders/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalOrdersGet } from \"@polar-sh/sdk/funcs/customerPortalOrdersGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalOrdersGet(polar, {\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Defining Property Aggregation in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a `PropertyAggregation` object in TypeScript. It specifies the aggregation function (`func`) and the property (`property`) to apply the function to. The example uses 'max' as the function.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metercreateaggregation.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.PropertyAggregation = {\n  func: \"max\",\n  property: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Update Product Benefits with Polar SDK (TypeScript)\nDESCRIPTION: This snippet demonstrates how to update the benefits associated with a product using the `updateBenefits` method of the Polar SDK. It initializes the SDK with an access token and then calls the method with a product ID and an object containing the updated benefits. The result is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/products/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.products.updateBenefits({\n    id: \"<value>\",\n    productBenefitsUpdate: {\n      benefits: [\n        \"<value>\",\n      ],\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Add Payment Method using Polar SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to add a payment method to a customer's account using the `Polar` SDK.  It requires a customer session and confirmation token ID, and allows setting the new payment method as default. It imports the Polar SDK, initializes it, and then calls the `addPaymentMethod` function on the `customerPortal.customers` object. The result of the operation is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarcustomers/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.customers.addPaymentMethod({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    confirmationTokenId: \"<id>\",\n    setDefault: false,\n    returnUrl: \"https://slight-digestive.info\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating a RefundCreate Object in TypeScript\nDESCRIPTION: This code snippet shows how to create a `RefundCreate` object with required properties such as `orderId`, `reason`, and `amount`.  It imports the `RefundCreate` class from the `@polar-sh/sdk/models/components/refundcreate.js` module and instantiates an object with sample values. The `reason` field specifies the reason for the refund, using a pre-defined enum or string value. The `amount` is the refund amount.  \nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/refundcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RefundCreate } from \"@polar-sh/sdk/models/components/refundcreate.js\";\n\nlet value: RefundCreate = {\n  orderId: \"<value>\",\n  reason: \"service_disruption\",\n  amount: 979221,\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Product ID Filter - TypeScript\nDESCRIPTION: This code snippet demonstrates how to filter subscriptions by multiple product IDs using a string array in TypeScript. The `value` variable is an array of strings, where each string represents a product ID. This enables filtering for subscriptions associated with any of the specified product IDs, providing flexibility in querying the data.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalsubscriptionslistqueryparamproductidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Updating License Key using Polar SDK\nDESCRIPTION: This snippet demonstrates how to update a license key using the `update` method of the `licenseKeys` module in the Polar SDK. It requires the `@polar-sh/sdk` dependency and a valid Polar access token. The `id` parameter specifies the license key to update, and `licenseKeyUpdate` contains the updated information. The result is logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/licensekeys/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.licenseKeys.update({\n    id: \"<value>\",\n    licenseKeyUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Listing Downloadables with Polar SDK (TypeScript)\nDESCRIPTION: This snippet demonstrates how to list customer portal downloadables using the Polar SDK. It initializes the Polar SDK, calls the `list` method, and iterates through the results. It requires the `@polar-sh/sdk` package and the `POLAR_CUSTOMER_SESSION` environment variable to be set.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/downloadables/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.downloadables.list({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating DiscountFixedOnceForeverDurationCreate Object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `DiscountFixedOnceForeverDurationCreate` object. It imports the necessary class from the `@polar-sh/sdk/models/components/discountfixedonceforeverdurationcreate.js` module and assigns values to the required properties such as `duration`, `type`, `amount`, `name`, and `organizationId`. The `organizationId` is a UUID that identifies the organization to which the discount applies.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedonceforeverdurationcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountFixedOnceForeverDurationCreate } from \"@polar-sh/sdk/models/components/discountfixedonceforeverdurationcreate.js\";\n\nlet value: DiscountFixedOnceForeverDurationCreate = {\n  duration: \"repeating\",\n  type: \"fixed\",\n  amount: 792338,\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Configure TypeScript Compiler Options for Polar.js\nDESCRIPTION: This code snippet provides the recommended `tsconfig.json` configuration for projects using the Polar.js SDK. It sets the `target` to `es2020` (or higher) and includes the necessary libraries (`es2020`, `dom`, `dom.iterable`) to enable static type support for features like async iterables, streams, and fetch-related APIs. This configuration ensures compatibility and type safety when using the SDK.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/RUNTIMES.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es2020\", // or higher\n    \"lib\": [\"es2020\", \"dom\", \"dom.iterable\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Meter Quantities with Standalone Function\nDESCRIPTION: This snippet demonstrates how to use the standalone `metersQuantities` function to retrieve meter quantities. It initializes `PolarCore`, which is more suitable for tree-shaking. The function is then called with a `PolarCore` instance and the necessary parameters.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/meters/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { metersQuantities } from \"@polar-sh/sdk/funcs/metersQuantities.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await metersQuantities(polar, {\n    id: \"<value>\",\n    startTimestamp: new Date(\"2023-09-17T00:45:34.608Z\"),\n    endTimestamp: new Date(\"2023-07-21T18:11:39.069Z\"),\n    interval: \"hour\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Defining ProductPrice type in TypeScript\nDESCRIPTION: This snippet defines an example of the `ProductPrice` type, showcasing its properties such as `createdAt`, `modifiedAt`, `id`, `isArchived`, `productId`, `type`, and `recurringInterval`.  It demonstrates the structure of a general product price object, which is used for recurring subscriptions.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptionprices.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPrice = {\n  createdAt: new Date(\"2023-11-12T09:36:50.641Z\"),\n  modifiedAt: new Date(\"2023-02-28T09:49:59.454Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  type: \"recurring\",\n  recurringInterval: \"month\",\n};\n```\n\n----------------------------------------\n\nTITLE: Using LicenseKeysUpdateRequest in Typescript\nDESCRIPTION: This code snippet demonstrates how to import and use the LicenseKeysUpdateRequest object from the @polar-sh/sdk/models/operations/licensekeysupdate.js module. It creates an instance of the LicenseKeysUpdateRequest and assigns values to its properties, including the id and licenseKeyUpdate fields.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/licensekeysupdaterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LicenseKeysUpdateRequest } from \"@polar-sh/sdk/models/operations/licensekeysupdate.js\";\n\nlet value: LicenseKeysUpdateRequest = {\n  id: \"<value>\",\n  licenseKeyUpdate: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Downloadable (Standalone Function, TypeScript)\nDESCRIPTION: This snippet shows the standalone function version for getting a specific downloadable. It uses `PolarCore` for tree-shaking and calls `customerPortalDownloadablesGet` with the required `token`.  The `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/customerPortalDownloadablesGet.js` modules are required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/downloadables/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalDownloadablesGet } from \"@polar-sh/sdk/funcs/customerPortalDownloadablesGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalDownloadablesGet(polar, {\n    token: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting Order Invoice with Polar SDK (Typescript)\nDESCRIPTION: This snippet demonstrates how to use the Polar SDK to retrieve an order's invoice data. It initializes the Polar SDK with an access token and calls the `orders.invoice` method with the order ID. The result is then logged to the console. Requires `@polar-sh/sdk` dependency.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/orders/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.orders.invoice({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Checkout Model Example in TypeScript\nDESCRIPTION: This code snippet shows how to create an instance of the Checkout model in TypeScript, populating it with sample data.  It imports the Checkout type from the @polar-sh/sdk/models/components/checkout.js module. The example includes properties such as creation and modification dates, IDs, payment processor information, URLs, amounts, currency, product details, discount information, customer details, and metadata. Dates are created using the `new Date()` constructor with ISO 8601 date strings.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkout.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Checkout } from \"@polar-sh/sdk/models/components/checkout.js\";\n\nlet value: Checkout = {\n  createdAt: new Date(\"2024-05-25T00:29:55.609Z\"),\n  modifiedAt: new Date(\"2023-05-16T16:15:25.827Z\"),\n  id: \"<value>\",\n  paymentProcessor: \"stripe\",\n  status: \"failed\",\n  clientSecret: \"<value>\",\n  url: \"https://stable-reasoning.org/\",\n  expiresAt: new Date(\"2023-09-14T20:53:35.894Z\"),\n  successUrl: \"https://dead-elevator.com\",\n  embedOrigin: \"<value>\",\n  amount: 958327,\n  discountAmount: 192709,\n  netAmount: 260987,\n  taxAmount: 992510,\n  totalAmount: 108220,\n  currency: \"Euro\",\n  productId: \"<value>\",\n  productPriceId: \"<value>\",\n  discountId: \"<value>\",\n  allowDiscountCodes: false,\n  requireBillingAddress: false,\n  isDiscountApplicable: false,\n  isFreeProductPrice: false,\n  isPaymentRequired: false,\n  isPaymentSetupRequired: false,\n  isPaymentFormRequired: false,\n  customerId: \"<value>\",\n  customerName: \"<value>\",\n  customerEmail: \"<value>\",\n  customerIpAddress: \"<value>\",\n  customerBillingAddress: {\n    country: \"FR\",\n  },\n  customerTaxId: \"<id>\",\n  paymentProcessorMetadata: {\n    \"key\": \"<value>\",\n  },\n  metadata: {\n    \"key\": 203527,\n  },\n  customerExternalId: \"<id>\",\n  products: [\n    {\n      createdAt: new Date(\"2023-10-14T17:26:12.576Z\"),\n      modifiedAt: new Date(\"2024-08-28T16:04:25.184Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description:\n        \"volleyball following effector lest boo upbeat through brood wicked\",\n      recurringInterval: \"month\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n      prices: [\n        {\n          createdAt: new Date(\"2023-04-20T23:51:13.817Z\"),\n          modifiedAt: new Date(\"2023-02-19T11:30:39.403Z\"),\n          id: \"<value>\",\n          isArchived: false,\n          productId: \"<value>\",\n          recurringInterval: \"year\",\n          priceCurrency: \"<value>\",\n          priceAmount: 943698,\n        },\n      ],\n      benefits: [\n        {\n          id: \"<value>\",\n          createdAt: new Date(\"2024-03-22T03:20:49.000Z\"),\n          modifiedAt: new Date(\"2024-12-25T15:57:55.764Z\"),\n          type: \"meter_credit\",\n          description:\n            \"except hence warmhearted pish testimonial sans plus barring\",\n          selectable: false,\n          deletable: false,\n          organizationId: \"<value>\",\n        },\n      ],\n      medias: [\n        {\n          id: \"<value>\",\n          organizationId: \"<value>\",\n          name: \"<value>\",\n          path: \"/etc/periodic\",\n          mimeType: \"<value>\",\n          size: 874522,\n          storageVersion: \"<value>\",\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n          checksumSha256Hex: \"<value>\",\n          lastModifiedAt: new Date(\"2025-12-10T05:32:38.930Z\"),\n          version: \"<value>\",\n          isUploaded: false,\n          createdAt: new Date(\"2024-11-12T02:39:14.875Z\"),\n          sizeReadable: \"<value>\",\n          publicUrl: \"https://agreeable-tapioca.com\",\n        },\n      ],\n    },\n  ],\n  product: {\n    createdAt: new Date(\"2023-10-12T23:38:36.231Z\"),\n    modifiedAt: new Date(\"2025-06-11T00:45:29.907Z\"),\n    id: \"<value>\",\n    name: \"<value>\",\n    description: \"easily woot drat thread steeple elegantly despite\",\n    recurringInterval: \"month\",\n    isRecurring: false,\n    isArchived: false,\n    organizationId: \"<value>\",\n    prices: [\n      {\n        createdAt: new Date(\"2024-11-17T09:34:19.412Z\"),\n        modifiedAt: new Date(\"2025-01-25T11:23:02.506Z\"),\n        id: \"<value>\",\n        isArchived: false,\n        productId: \"<value>\",\n        type: \"recurring\",\n        recurringInterval: \"year\",\n      },\n    ],\n    benefits: [\n      {\n        id: \"<value>\",\n        createdAt: new Date(\"2025-05-28T09:52:56.113Z\"),\n        modifiedAt: new Date(\"2025-02-15T03:28:19.536Z\"),\n        type: \"discord\",\n        description: \"rust butter frugal while rarely\",\n        selectable: false,\n        deletable: false,\n        organizationId: \"<value>\",\n      },\n    ],\n    medias: [\n      {\n        id: \"<value>\",\n        organizationId: \"<value>\",\n        name: \"<value>\",\n        path: \"/opt/lib\",\n        mimeType: \"<value>\",\n        size: 507535,\n        storageVersion: \"<value>\",\n        checksumEtag: \"<value>\",\n        checksumSha256Base64: \"<value>\",\n        checksumSha256Hex: \"<value>\",\n        lastModifiedAt: new Date(\"2025-01-09T16:19:45.407Z\"),\n        version: \"<value>\",\n        isUploaded: false,\n        createdAt: new Date(\"2024-01-07T19:27:21.981Z\"),\n        sizeReadable: \"<value>\",\n        publicUrl: \"https://acidic-intervention.info/\",\n      },\n    ],\n  },\n  productPrice: {\n    createdAt: new Date(\"2024-04-30T18:08:45.945Z\"),\n    modifiedAt: new Date(\"2024-09-28T01:50:41.642Z\"),\n    id: \"<value>\",\n    isArchived: false,\n    productId: \"<value>\",\n    type: \"one_time\",\n    recurringInterval: \"month\",\n  },\n  discount: {\n    duration: \"forever\",\n    durationInMonths: 517230,\n    type: \"fixed\",\n    amount: 81826,\n    currency: \"Swiss Franc\",\n    id: \"<value>\",\n    name: \"<value>\",\n    code: \"<value>\",\n  },\n  subscriptionId: \"<value>\",\n  attachedCustomFields: [\n    {\n      customFieldId: \"<value>\",\n      customField: {\n        createdAt: new Date(\"2024-04-16T20:04:18.915Z\"),\n        modifiedAt: new Date(\"2025-05-07T03:39:07.632Z\"),\n        id: \"<value>\",\n        metadata: {\n          \"key\": 759657,\n        },\n        slug: \"<value>\",\n        name: \"<value>\",\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        properties: {},\n      },\n      order: 881256,\n      required: false,\n    },\n  ],\n  customerMetadata: {\n    \"key\": 255554,\n  },\n  customerBillingAddressFields: {\n    country: false,\n    state: false,\n    city: false,\n    postalCode: false,\n    line1: false,\n    line2: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Downloadable File with components.DownloadableFileCreate in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a `DownloadableFileCreate` object, specifying the organization ID, file name, MIME type, file size, and upload parts, including chunk numbers, start, and end positions. The parts array contains the chunk information necessary for uploading the file in segments.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/filecreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DownloadableFileCreate = {\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  name: \"<value>\",\n  mimeType: \"<value>\",\n  size: 290858,\n  upload: {\n    parts: [\n      {\n        number: 949598,\n        chunkStart: 963617,\n        chunkEnd: 986190,\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerBenefitGrantGitHubRepository Type in TypeScript\nDESCRIPTION: This code defines the `CustomerBenefitGrantGitHubRepository` type, including properties like createdAt, modifiedAt, id, grantedAt, revokedAt, customerId, benefitId, subscriptionId, orderId, isGranted, isRevoked, customer, benefit, and properties. It showcases how to represent data related to GitHub repositories as a customer benefit. The provided code snippet is an example value demonstrating the `components.CustomerBenefitGrantGitHubRepository` type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrant.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomerBenefitGrantGitHubRepository = {\n  createdAt: new Date(\"2024-09-05T14:33:30.256Z\"),\n  modifiedAt: new Date(\"2024-08-11T14:24:07.378Z\"),\n  id: \"<value>\",\n  grantedAt: new Date(\"2024-12-26T09:09:05.844Z\"),\n  revokedAt: new Date(\"2025-04-27T11:36:49.473Z\"),\n  customerId: \"<value>\",\n  benefitId: \"<value>\",\n  subscriptionId: \"<value>\",\n  orderId: \"<value>\",\n  isGranted: false,\n  isRevoked: false,\n  customer: {\n    createdAt: new Date(\"2023-10-09T03:13:42.047Z\"),\n    modifiedAt: new Date(\"2024-10-29T15:11:50.667Z\"),\n    id: \"<value>\",\n    email: \"Dangelo.Beatty@yahoo.com\",\n    emailVerified: false,\n    name: \"<value>\",\n    billingAddress: {\n      country: \"US\",\n    },\n    taxId: [\n      \"911144442\",\n      \"us_ein\",\n    ],\n    oauthAccounts: {\n      \"key\": {\n        accountId: \"<id>\",\n        accountUsername: \"<value>\",\n      },\n    },\n  },\n  benefit: {\n    id: \"<value>\",\n    createdAt: new Date(\"2023-08-19T16:06:34.657Z\"),\n    modifiedAt: new Date(\"2023-08-21T19:07:23.145Z\"),\n    description: \"fooey yuck resource\",\n    selectable: false,\n    deletable: false,\n    organizationId: \"<value>\",\n    metadata: {\n      \"key\": 955840,\n    },\n    organization: {\n      createdAt: new Date(\"2025-05-27T10:17:20.491Z\"),\n      modifiedAt: new Date(\"2023-10-22T13:12:48.156Z\"),\n      id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      name: \"<value>\",\n      slug: \"<value>\",\n      avatarUrl: \"https://acclaimed-tuber.name\",\n      email: \"Lela26@hotmail.com\",\n      website: \"<value>\",\n      socials: [\n        {\n          platform: \"youtube\",\n          url: \"https://willing-hospitalization.info\",\n        },\n      ],\n      detailsSubmittedAt: new Date(\"2025-01-08T04:11:06.770Z\"),\n      featureSettings: {},\n      subscriptionSettings: {\n        allowMultipleSubscriptions: false,\n        allowCustomerUpdates: false,\n        prorationBehavior: \"prorate\",\n      },\n    },\n    properties: {\n      repositoryOwner: \"polarsource\",\n      repositoryName: \"private_repo\",\n    },\n  },\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Event Names Standalone Function in TypeScript\nDESCRIPTION: This code snippet demonstrates how to list event names using the standalone function `eventsListNames` from the Polar SDK in TypeScript. It initializes the PolarCore client with an access token and calls the `eventsListNames` function, passing the PolarCore instance and organization ID as parameters. The results are then iterated over and logged to the console. Error handling is included to throw the error if the request is not successful.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/events/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { eventsListNames } from \"@polar-sh/sdk/funcs/eventsListNames.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await eventsListNames(polar, {\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalSubscriptionsListRequest in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize a `CustomerPortalSubscriptionsListRequest` object in TypeScript. It sets the `organizationId` field to a specific UUID.  The object is part of the `@polar-sh/sdk/models/operations/customerportalsubscriptionslist.js` module. No dependencies beyond the SDK are required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalsubscriptionslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalSubscriptionsListRequest } from \"@polar-sh/sdk/models/operations/customerportalsubscriptionslist.js\";\n\nlet value: CustomerPortalSubscriptionsListRequest = {\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalCustomerMetersGetRequest in Typescript\nDESCRIPTION: This snippet shows how to initialize a `CustomerPortalCustomerMetersGetRequest` object in Typescript.  It imports the object from the specified module and creates an instance with a required `id` field, which is a string. The `id` field represents the customer meter ID and must be provided.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalcustomermetersgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalCustomerMetersGetRequest } from \"@polar-sh/sdk/models/operations/customerportalcustomermetersget.js\";\n\nlet value: CustomerPortalCustomerMetersGetRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Product by ID with Standalone Function\nDESCRIPTION: This example demonstrates how to retrieve a product by ID using the standalone `productsGet` function from the Polar SDK.  This approach is useful for tree-shaking. It initializes `PolarCore` and calls `productsGet` function with the core instance and product ID. The result is handled including checking for errors and extracting the value. The result is then logged to the console.\n\nDependencies: @polar-sh/sdk/core.js, @polar-sh/sdk/funcs/productsGet.js\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/products/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { productsGet } from \"@polar-sh/sdk/funcs/productsGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await productsGet(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting a Checkout Session by ID with Standalone Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve a checkout session using a standalone function from the Polar SDK. It initializes `PolarCore` with an access token, then calls the `checkoutsGet` function with the `PolarCore` instance and a checkout ID. The result is checked for errors, and if successful, the checkout session is logged to the console. The use of `PolarCore` aims to provide better tree-shaking.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkouts/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { checkoutsGet } from \"@polar-sh/sdk/funcs/checkoutsGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await checkoutsGet(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: ProductBenefitsUpdate Example in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an instance of the `ProductBenefitsUpdate` schema in TypeScript. It imports the necessary class from `@polar-sh/sdk/models/components/productbenefitsupdate.js` and initializes an object with a `benefits` array, which should contain string IDs of benefits associated with the product. These benefit IDs must belong to the same organization as the product.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productbenefitsupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductBenefitsUpdate } from \"@polar-sh/sdk/models/components/productbenefitsupdate.js\";\n\nlet value: ProductBenefitsUpdate = {\n  benefits: [\n    \"<value>\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Customer Model Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the Customer model in TypeScript. It defines a sample Customer object with various properties, including ID, creation and modification timestamps, metadata, external ID, email, name, billing address, tax IDs, organization ID, deletion timestamp, and avatar URL. The metadata property is a key-value object with a number as value. TaxId is an array of strings. The timestamps are Date objects.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Customer } from \"@polar-sh/sdk/models/components/customer.js\";\n\nlet value: Customer = {\n  id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n  createdAt: new Date(\"2025-07-08T03:18:52.668Z\"),\n  modifiedAt: new Date(\"2023-01-07T07:33:47.635Z\"),\n  metadata: {\n    \"key\": 7161.85,\n  },\n  externalId: \"usr_1337\",\n  email: \"customer@example.com\",\n  emailVerified: true,\n  name: \"John Doe\",\n  billingAddress: {\n    country: \"SE\",\n  },\n  taxId: [\n    \"FR61954506077\",\n    \"eu_vat\",\n  ],\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  deletedAt: new Date(\"2025-04-20T03:44:40.362Z\"),\n  avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerBenefitGrantLicenseKeys Type in TypeScript\nDESCRIPTION: This code defines the `CustomerBenefitGrantLicenseKeys` type, with properties like createdAt, modifiedAt, id, grantedAt, revokedAt, customerId, benefitId, subscriptionId, orderId, isGranted, isRevoked, customer, benefit, and properties.  It exemplifies representing license keys as a customer benefit, including details like prefix, expiration, and activation limits. The provided code snippet is an example value demonstrating the `components.CustomerBenefitGrantLicenseKeys` type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrant.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomerBenefitGrantLicenseKeys = {\n  createdAt: new Date(\"2023-12-29T05:36:27.136Z\"),\n  modifiedAt: new Date(\"2025-10-06T16:43:38.916Z\"),\n  id: \"<value>\",\n  grantedAt: new Date(\"2025-08-05T20:48:50.717Z\"),\n  revokedAt: new Date(\"2024-02-08T00:57:15.026Z\"),\n  customerId: \"<value>\",\n  benefitId: \"<value>\",\n  subscriptionId: \"<value>\",\n  orderId: \"<value>\",\n  isGranted: false,\n  isRevoked: false,\n  customer: {\n    createdAt: new Date(\"2024-08-17T04:16:46.889Z\"),\n    modifiedAt: new Date(\"2023-11-03T16:52:10.538Z\"),\n    id: \"<value>\",\n    email: \"Solon_Quigley75@yahoo.com\",\n    emailVerified: false,\n    name: \"<value>\",\n    billingAddress: {\n      country: \"FR\",\n    },\n    taxId: [\n      \"911144442\",\n      \"us_ein\",\n    ],\n    oauthAccounts: {\n      \"key\": {\n        accountId: \"<id>\",\n        accountUsername: \"<value>\",\n      },\n    },\n  },\n  benefit: {\n    id: \"<value>\",\n    createdAt: new Date(\"2025-03-16T09:24:03.055Z\"),\n    modifiedAt: new Date(\"2025-05-21T10:38:18.755Z\"),\n    description: \"pace wildly sadly triangular innocently\",\n    selectable: false,\n    deletable: false,\n    organizationId: \"<value>\",\n    metadata: {\n      \"key\": false,\n    },\n    organization: {\n      createdAt: new Date(\"2024-05-14T21:38:47.126Z\"),\n      modifiedAt: new Date(\"2024-09-14T18:57:27.510Z\"),\n      id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      name: \"<value>\",\n      slug: \"<value>\",\n      avatarUrl: \"https://ethical-larva.biz/\",\n      email: \"Donnell.Prohaska85@hotmail.com\",\n      website: \"<value>\",\n      socials: [\n        {\n          platform: \"x\",\n          url: \"https://merry-litter.name/\",\n        },\n      ],\n      detailsSubmittedAt: new Date(\"2023-06-27T11:20:30.399Z\"),\n      featureSettings: {},\n      subscriptionSettings: {\n        allowMultipleSubscriptions: false,\n        allowCustomerUpdates: false,\n        prorationBehavior: \"prorate\",\n      },\n    },\n    properties: {\n      prefix: \"<value>\",\n      expires: {\n        ttl: 262926,\n        timeframe: \"month\",\n      },\n      activations: {\n        limit: 64991,\n        enableCustomerAdmin: false,\n      },\n      limitUsage: 229058,\n    },\n  },\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a CheckoutLinkCreateProducts object in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a `CheckoutLinkCreateProducts` object in TypeScript, which is used to define the products to be included in a checkout link. It requires importing the `CheckoutLinkCreateProducts` type from the `@polar-sh/sdk/models/components/checkoutlinkcreateproducts.js` module. The `products` field is an array of product identifiers.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkcreateproducts.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutLinkCreateProducts } from \"@polar-sh/sdk/models/components/checkoutlinkcreateproducts.js\";\n\nlet value: CheckoutLinkCreateProducts = {\n  products: [\n    \"<value>\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Customer Information with Polar SDK (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to retrieve authenticated customer information using the Polar SDK. It initializes a Polar object and calls the `get` method on the `customerPortal.customers` service, providing a customer session ID. The result is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarcustomers/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.customers.get({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Deleting OAuth2 Client as Standalone Function\nDESCRIPTION: This code snippet demonstrates how to delete an OAuth2 client using the standalone function `oauth2ClientsDelete` from the Polar SDK. It initializes the `PolarCore` object with an access token. It then calls the `oauth2ClientsDelete` function, passing the `PolarCore` instance and the `clientId`. Error handling checks if the result is not ok and throws the error if needed.  The successful result is logged.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/clients/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { oauth2ClientsDelete } from \"@polar-sh/sdk/funcs/oauth2ClientsDelete.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await oauth2ClientsDelete(polar, {\n    clientId: \"<id>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Defining BenefitMeterCredit Component Type in TypeScript\nDESCRIPTION: This code snippet demonstrates the structure of the `components.BenefitMeterCredit` type, defining properties such as `id`, `createdAt`, `modifiedAt`, `description`, `selectable`, `deletable`, `organizationId`, `metadata`, and `properties`. The metadata object contains a numeric value associated with a string key. The properties object includes fields for `units` (number) and `meterId` (string).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefit.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitMeterCredit = {\n  id: \"<value>\",\n  createdAt: new Date(\"2025-07-13T02:35:52.595Z\"),\n  modifiedAt: new Date(\"2023-09-17T11:24:42.238Z\"),\n  description:\n    \"grouper alongside till strategy generally deserted solidly camouflage via er\",\n  selectable: false,\n  deletable: false,\n  organizationId: \"<value>\",\n  metadata: {\n    \"key\": 226679,\n  },\n  properties: {\n    units: 41872,\n    meterId: \"<value>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Endpoint with Polar SDK (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a checkout endpoint using the Polar SDK. It initializes a Polar instance and calls the `endpointcheckoutCreatedPost` method with sample data. The `data` parameter is a complex object representing the checkout details. The result of the API call is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.endpointcheckoutCreatedPost({\n    data: {\n      createdAt: new Date(\"2025-11-12T14:26:42.882Z\"),\n      modifiedAt: new Date(\"2024-05-27T05:08:06.235Z\"),\n      id: \"<value>\",\n      paymentProcessor: \"stripe\",\n      status: \"failed\",\n      clientSecret: \"<value>\",\n      url: \"https://heavy-beret.com/\",\n      expiresAt: new Date(\"2023-02-25T02:26:48.460Z\"),\n      successUrl: \"https://sardonic-final.info/\",\n      embedOrigin: \"<value>\",\n      amount: 962818,\n      discountAmount: 6400,\n      netAmount: 426090,\n      taxAmount: 648726,\n      totalAmount: 210702,\n      currency: \"Riel\",\n      productId: \"<value>\",\n      productPriceId: \"<value>\",\n      discountId: \"<value>\",\n      allowDiscountCodes: false,\n      requireBillingAddress: false,\n      isDiscountApplicable: false,\n      isFreeProductPrice: false,\n      isPaymentRequired: false,\n      isPaymentSetupRequired: false,\n      isPaymentFormRequired: false,\n      customerId: \"<value>\",\n      customerName: \"<value>\",\n      customerEmail: \"<value>\",\n      customerIpAddress: \"<value>\",\n      customerBillingAddress: {\n        country: \"SE\",\n      },\n      customerTaxId: \"<id>\",\n      paymentProcessorMetadata: {\n        \"key\": \"<value>\",\n      },\n      metadata: {\n        \"key\": 366960,\n        \"key1\": 961375,\n      },\n      customerExternalId: \"<id>\",\n      products: [\n        {\n          createdAt: new Date(\"2023-01-21T11:17:02.173Z\"),\n          modifiedAt: new Date(\"2024-08-14T19:11:10.463Z\"),\n          id: \"<value>\",\n          name: \"<value>\",\n          description: \"accessorise ack pave\",\n          recurringInterval: \"month\",\n          isRecurring: false,\n          isArchived: false,\n          organizationId: \"<value>\",\n          prices: [\n            {\n              createdAt: new Date(\"2025-11-19T15:59:15.588Z\"),\n              modifiedAt: new Date(\"2023-11-17T00:11:23.972Z\"),\n              id: \"<value>\",\n              isArchived: false,\n              productId: \"<value>\",\n              type: \"one_time\",\n              recurringInterval: \"month\",\n              priceCurrency: \"<value>\",\n              minimumAmount: 82334,\n              maximumAmount: 50275,\n              presetAmount: 473871,\n            },\n            {\n              createdAt: new Date(\"2024-04-03T00:20:23.805Z\"),\n              modifiedAt: new Date(\"2025-11-21T05:56:48.487Z\"),\n              id: \"<value>\",\n              isArchived: false,\n              productId: \"<value>\",\n              type: \"one_time\",\n              recurringInterval: \"month\",\n              priceCurrency: \"<value>\",\n              minimumAmount: 648726,\n              maximumAmount: 210702,\n              presetAmount: 441593,\n            },\n          ],\n          benefits: [],\n          medias: [\n            {\n              id: \"<value>\",\n              organizationId: \"<value>\",\n              name: \"<value>\",\n              path: \"/media\",\n              mimeType: \"<value>\",\n              size: 757308,\n              storageVersion: \"<value>\",\n              checksumEtag: \"<value>\",\n              checksumSha256Base64: \"<value>\",\n              checksumSha256Hex: \"<value>\",\n              lastModifiedAt: new Date(\"2024-07-16T16:32:06.101Z\"),\n              version: \"<value>\",\n              isUploaded: false,\n              createdAt: new Date(\"2025-12-08T10:05:37.208Z\"),\n              sizeReadable: \"<value>\",\n              publicUrl: \"https://separate-pinstripe.com\",\n            },\n          ],\n        },\n      ],\n      product: {\n        createdAt: new Date(\"2025-08-22T02:17:20.661Z\"),\n        modifiedAt: new Date(\"2025-09-12T19:41:14.261Z\"),\n        id: \"<value>\",\n        name: \"<value>\",\n        description: \"darling lined nephew crank\",\n        recurringInterval: \"month\",\n        isRecurring: true,\n        isArchived: false,\n        organizationId: \"<value>\",\n        prices: [],\n        benefits: [\n          {\n            id: \"<value>\",\n            createdAt: new Date(\"2025-11-18T07:12:26.749Z\"),\n            modifiedAt: new Date(\"2024-08-14T14:29:29.201Z\"),\n            type: \"github_repository\",\n            description: \"phew empty flawed worth radiant anti of blissfully\",\n            selectable: false,\n            deletable: false,\n            organizationId: \"<value>\",\n          },\n          {\n            id: \"<value>\",\n            createdAt: new Date(\"2024-03-12T06:20:21.161Z\"),\n            modifiedAt: new Date(\"2024-06-27T20:20:27.400Z\"),\n            type: \"license_keys\",\n            description: \"ack neatly jagged as weekly drat nor why\",\n            selectable: true,\n            deletable: false,\n            organizationId: \"<value>\",\n          },\n          {\n            id: \"<value>\",\n            createdAt: new Date(\"2024-03-31T07:42:35.077Z\"),\n            modifiedAt: new Date(\"2025-04-30T13:13:01.707Z\"),\n            type: \"github_repository\",\n            description:\n              \"ironclad chilly seriously finger unbearably and bourgeoisie deplore unless\",\n            selectable: false,\n            deletable: true,\n            organizationId: \"<value>\",\n          },\n        ],\n        medias: [\n          {\n            id: \"<value>\",\n            organizationId: \"<value>\",\n            name: \"<value>\",\n            path: \"/usr/share\",\n            mimeType: \"<value>\",\n            size: 366209,\n            storageVersion: \"<value>\",\n            checksumEtag: \"<value>\",\n            checksumSha256Base64: \"<value>\",\n            checksumSha256Hex: \"<value>\",\n            lastModifiedAt: new Date(\"2024-09-08T17:09:22.377Z\"),\n            version: \"<value>\",\n            isUploaded: false,\n            createdAt: new Date(\"2025-01-15T08:45:21.256Z\"),\n            sizeReadable: \"<value>\",\n            publicUrl: \"https://cumbersome-seafood.net\",\n          },\n        ],\n      },\n      productPrice: {\n        createdAt: new Date(\"2024-07-02T09:46:29.338Z\"),\n        modifiedAt: new Date(\"2025-01-24T18:08:49.597Z\"),\n        id: \"<value>\",\n        isArchived: false,\n        productId: \"<value>\",\n        type: \"recurring\",\n        recurringInterval: \"year\",\n      },\n      discount: {\n        duration: \"forever\",\n        durationInMonths: 928294,\n        type: \"fixed\",\n        basisPoints: 887018,\n        id: \"<value>\",\n        name: \"<value>\",\n        code: \"<value>\",\n      },\n      subscriptionId: \"<value>\",\n      attachedCustomFields: [\n        {\n          customFieldId: \"<value>\",\n          customField: {\n            createdAt: new Date(\"2023-11-12T09:40:10.044Z\"),\n            modifiedAt: new Date(\"2023-08-29T09:50:00.241Z\"),\n            id: \"<value>\",\n            metadata: {\n              \"key\": 3852.18,\n            },\n            slug: \"<value>\",\n            name: \"<value>\",\n            organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n            properties: {},\n          },\n          order: 192934,\n          required: true,\n        },\n        {\n          customFieldId: \"<value>\",\n          customField: {\n            createdAt: new Date(\"2025-06-25T22:47:14.264Z\"),\n            modifiedAt: new Date(\"2025-01-27T19:10:37.564Z\"),\n            id: \"<value>\",\n            metadata: {\n              \"key\": 18677,\n            },\n            slug: \"<value>\",\n            name: \"<value>\",\n            organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n            properties: {},\n          },\n          order: 597839,\n          required: false,\n        },\n        {\n          customFieldId: \"<value>\",\n          customField: {\n            createdAt: new Date(\"2023-04-15T12:36:50.681Z\"),\n            modifiedAt: new Date(\"2023-04-02T00:05:42.586Z\"),\n            id: \"<value>\",\n            metadata: {\n              \"key\": 7402.96,\n            },\n            slug: \"<value>\",\n            name: \"<value>\",\n            organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n            properties: {},\n          },\n          order: 660585,\n          required: false,\n        },\n      ],\n      customerMetadata: {\n        \"key\": true,\n      },\n      customerBillingAddressFields: {\n        country: true,\n        state: false,\n        city: true,\n        postalCode: false,\n        line1: false,\n        line2: false,\n      },\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n\n```\n\n----------------------------------------\n\nTITLE: Creating a FilterClause object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a FilterClause object using TypeScript. It imports the FilterClause class from the `@polar-sh/sdk/models/components/filterclause.js` module and initializes an object with sample values for `property`, `operator`, and `value`. The `operator` field uses the 'ne' (not equal) operator, and the `value` field is set to a numeric value. This example requires the Polar SDK to be installed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/filterclause.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FilterClause } from \"@polar-sh/sdk/models/components/filterclause.js\";\n\nlet value: FilterClause = {\n  property: \"<value>\",\n  operator: \"ne\",\n  value: 667534,\n};\n```\n\n----------------------------------------\n\nTITLE: Using WebhookSubscriptionUncanceledPayload in TypeScript\nDESCRIPTION: This example shows how to import and use the WebhookSubscriptionUncanceledPayload type from the @polar-sh/sdk.  It initializes a variable of this type with sample data, including nested objects and arrays, representing a subscription that has been uncanceled.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhooksubscriptionuncanceledpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookSubscriptionUncanceledPayload } from \"@polar-sh/sdk/models/components/webhooksubscriptionuncanceledpayload.js\";\n\nlet value: WebhookSubscriptionUncanceledPayload = {\n  data: {\n    createdAt: new Date(\"2024-03-28T06:34:59.076Z\"),\n    modifiedAt: new Date(\"2025-07-18T01:35:08.724Z\"),\n    id: \"<value>\",\n    amount: 466736,\n    currency: \"Vatu\",\n    recurringInterval: \"year\",\n    status: \"unpaid\",\n    currentPeriodStart: new Date(\"2025-07-31T07:06:53.500Z\"),\n    currentPeriodEnd: new Date(\"2024-07-27T06:53:18.285Z\"),\n    cancelAtPeriodEnd: false,\n    canceledAt: new Date(\"2023-02-13T22:22:38.828Z\"),\n    startedAt: new Date(\"2024-11-02T06:58:48.343Z\"),\n    endsAt: new Date(\"2025-02-25T16:35:10.400Z\"),\n    endedAt: new Date(\"2024-08-21T21:07:38.998Z\"),\n    customerId: \"<value>\",\n    productId: \"<value>\",\n    discountId: \"<value>\",\n    checkoutId: \"<value>\",\n    customerCancellationReason: \"too_expensive\",\n    customerCancellationComment: \"<value>\",\n    metadata: {\n      \"key\": 4856.58,\n    },\n    customer: {\n      id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n      createdAt: new Date(\"2025-04-24T02:28:11.133Z\"),\n      modifiedAt: new Date(\"2024-06-08T11:38:30.288Z\"),\n      metadata: {\n        \"key\": \"<value>\",\n      },\n      externalId: \"usr_1337\",\n      email: \"customer@example.com\",\n      emailVerified: true,\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"US\",\n      },\n      taxId: [\n        \"FR61954506077\",\n        \"eu_vat\",\n      ],\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      deletedAt: new Date(\"2024-12-30T06:44:16.769Z\"),\n      avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n    },\n    product: {\n      createdAt: new Date(\"2025-09-02T21:13:52.814Z\"),\n      modifiedAt: new Date(\"2025-08-11T16:30:44.897Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description:\n        \"phrase spectacles viciously likewise apropos till rule milestone quiet\",\n      recurringInterval: \"month\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n      metadata: {\n        \"key\": 742.56,\n      },\n      prices: [\n        {\n          createdAt: new Date(\"2025-02-12T23:17:39.099Z\"),\n          modifiedAt: new Date(\"2024-03-28T16:30:45.101Z\"),\n          id: \"<value>\",\n          isArchived: false,\n          productId: \"<value>\",\n          type: \"one_time\",\n          recurringInterval: \"year\",\n          priceCurrency: \"<value>\",\n          minimumAmount: 146219,\n          maximumAmount: 349107,\n          presetAmount: 289961,\n        },\n      ],\n      benefits: [\n        {\n          id: \"<value>\",\n          createdAt: new Date(\"2025-02-12T11:57:45.695Z\"),\n          modifiedAt: new Date(\"2023-04-17T00:15:12.855Z\"),\n          description:\n            \"rapidly or whereas favorable er obnoxiously mysteriously veto\",\n          selectable: false,\n          deletable: false,\n          organizationId: \"<value>\",\n          metadata: {\n            \"key\": \"<value>\",\n          },\n          properties: {\n            repositoryOwner: \"polarsource\",\n            repositoryName: \"private_repo\",\n            permission: \"push\",\n          },\n        },\n      ],\n      medias: [\n        {\n          id: \"<value>\",\n          organizationId: \"<value>\",\n          name: \"<value>\",\n          path: \"/var\",\n          mimeType: \"<value>\",\n          size: 273482,\n          storageVersion: \"<value>\",\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n          checksumSha256Hex: \"<value>\",\n          lastModifiedAt: new Date(\"2025-01-22T15:37:42.374Z\"),\n          version: \"<value>\",\n          isUploaded: false,\n          createdAt: new Date(\"2023-09-17T18:29:38.657Z\"),\n          sizeReadable: \"<value>\",\n          publicUrl: \"https://peppery-polyester.biz\",\n        },\n      ],\n      attachedCustomFields: [\n        {\n          customFieldId: \"<value>\",\n          customField: {\n            createdAt: new Date(\"2023-07-16T23:42:30.104Z\"),\n            modifiedAt: new Date(\"2023-02-17T17:51:22.192Z\"),\n            id: \"<value>\",\n            metadata: {\n              \"key\": 8360.89,\n            },\n            slug: \"<value>\",\n            name: \"<value>\",\n            organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n            properties: {},\n          },\n          order: 702826,\n          required: false,\n        },\n      ],\n    },\n    discount: {\n      duration: \"repeating\",\n      type: \"percentage\",\n      amount: 985050,\n      currency: \"Gibraltar Pound\",\n      createdAt: new Date(\"2024-08-18T02:09:13.506Z\"),\n      modifiedAt: new Date(\"2023-12-16T04:29:17.569Z\"),\n      id: \"<value>\",\n      metadata: {\n        \"key\": false,\n      },\n      name: \"<value>\",\n      code: \"<value>\",\n      startsAt: new Date(\"2023-01-19T03:26:04.709Z\"),\n      endsAt: new Date(\"2023-06-13T03:13:59.075Z\"),\n      maxRedemptions: 349874,\n      redemptionsCount: 457069,\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    },\n    prices: [\n      {\n        createdAt: new Date(\"2025-12-08T22:41:42.196Z\"),\n        modifiedAt: new Date(\"2023-03-16T09:35:25.407Z\"),\n        id: \"<value>\",\n        isArchived: false,\n        productId: \"<value>\",\n        recurringInterval: \"year\",\n        priceCurrency: \"<value>\",\n        minimumAmount: 311260,\n        maximumAmount: 781653,\n        presetAmount: 781050,\n      },\n    ],\n    meters: [\n      {\n        createdAt: new Date(\"2024-09-16T03:43:45.976Z\"),\n        modifiedAt: new Date(\"2024-06-21T23:38:35.374Z\"),\n        id: \"<value>\",\n        consumedUnits: 25,\n        creditedUnits: 100,\n        amount: 0,\n        meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n        meter: {\n          metadata: {\n            \"key\": \"<value>\",\n          },\n          createdAt: new Date(\"2025-03-12T11:48:00.561Z\"),\n          modifiedAt: new Date(\"2024-01-10T14:51:41.133Z\"),\n          id: \"<value>\",\n          name: \"<value>\",\n          filter: {\n            conjunction: \"and\",\n            clauses: [],\n          },\n          aggregation: {},\n          organizationId: \"<value>\",\n        },\n      },\n    ],\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscountFixedOnceForeverDuration in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize an object conforming to the `DiscountFixedOnceForeverDuration` type. It showcases the structure of the object, including properties like `duration`, `type`, `amount`, `currency`, dates, IDs, metadata, and associated products.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discount.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DiscountFixedOnceForeverDuration = {\n  duration: \"forever\",\n  type: \"fixed\",\n  amount: 685312,\n  currency: \"Bhutanese Ngultrum\",\n  createdAt: new Date(\"2025-08-26T23:24:22.141Z\"),\n  modifiedAt: new Date(\"2025-04-16T07:07:45.158Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 5247.88,\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2023-01-11T09:12:37.496Z\"),\n  endsAt: new Date(\"2023-09-11T16:54:16.251Z\"),\n  maxRedemptions: 508105,\n  redemptionsCount: 375661,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  products: [\n    {\n      metadata: {\n        \"key\": \"<value>\",\n      },\n      createdAt: new Date(\"2024-06-16T05:41:15.397Z\"),\n      modifiedAt: new Date(\"2023-03-06T00:25:28.008Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description:\n        \"after jubilant gad recklessly extra-large yahoo spectacles unless off if\",\n      recurringInterval: \"year\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating BenefitMeterCreditCreate Object in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an instance of the `BenefitMeterCreditCreate` object in TypeScript. It imports the necessary class from the `@polar-sh/sdk/models/components/benefitmetercreditcreate.js` module and provides example values for the `description`, `organizationId`, and `properties` fields. The `properties` field includes the `units` (number) and `meterId` (string) fields, representing the credit amount and the meter to credit, respectively.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitMeterCreditCreate } from \"@polar-sh/sdk/models/components/benefitmetercreditcreate.js\";\n\nlet value: BenefitMeterCreditCreate = {\n  description: \"yummy and outset whenever concerning blissfully\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {\n    units: 569858,\n    meterId: \"<value>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating BenefitDiscordCreateProperties in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a BenefitDiscordCreateProperties object in TypeScript using the polar-js SDK. It imports the necessary component and provides an example of how to populate the properties. The required properties are guildToken and roleId.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordcreateproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitDiscordCreateProperties } from \"@polar-sh/sdk/models/components/benefitdiscordcreateproperties.js\";\n\nlet value: BenefitDiscordCreateProperties = {\n  guildToken: \"<value>\",\n  roleId: \"<id>\",\n};\n```\n\n----------------------------------------\n\nTITLE: OrdersGetRequest Usage Example TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `OrdersGetRequest` model from the `@polar-sh/sdk/models/operations/ordersget.js` module. It initializes an object with the `id` property set to a placeholder value.  The model requires a string `id` representing the order ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/ordersgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrdersGetRequest } from \"@polar-sh/sdk/models/operations/ordersget.js\";\n\nlet value: OrdersGetRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Payment Methods with Polar SDK\nDESCRIPTION: This code snippet demonstrates how to use the Polar SDK to retrieve the saved payment methods of the authenticated customer. It imports the Polar class, initializes it, and then calls the getPaymentMethods method on the customerPortal.customers object.  It requires a customer session token. It iterates through the pages of results and logs them to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarcustomers/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.customers.getPaymentMethods({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating License Key using Standalone Function\nDESCRIPTION: This snippet demonstrates how to update a license key using the standalone `licenseKeysUpdate` function from the Polar SDK. It requires `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/licenseKeysUpdate.js`. It creates a `PolarCore` instance and calls `licenseKeysUpdate` with the Polar instance, the license key ID, and the update data. The result is handled, and any errors are thrown.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/licensekeys/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { licenseKeysUpdate } from \"@polar-sh/sdk/funcs/licenseKeysUpdate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await licenseKeysUpdate(polar, {\n    id: \"<value>\",\n    licenseKeyUpdate: {},\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: WebhookBenefitCreatedPayload Example Usage in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the WebhookBenefitCreatedPayload model from the @polar-sh/sdk/models/components/webhookbenefitcreatedpayload.js module. It creates an instance of the WebhookBenefitCreatedPayload object with sample data, showing how to populate its fields, including nested properties like expires and activations.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookbenefitcreatedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookBenefitCreatedPayload } from \"@polar-sh/sdk/models/components/webhookbenefitcreatedpayload.js\";\n\nlet value: WebhookBenefitCreatedPayload = {\n  data: {\n    id: \"<value>\",\n    createdAt: new Date(\"2025-01-07T07:50:46.923Z\"),\n    modifiedAt: new Date(\"2025-01-16T07:13:19.224Z\"),\n    description: \"whoa interesting as violent broadside\",\n    selectable: false,\n    deletable: false,\n    organizationId: \"<value>\",\n    metadata: {\n      \"key\": 3239.61,\n    },\n    properties: {\n      prefix: \"<value>\",\n      expires: {\n        ttl: 672181,\n        timeframe: \"month\",\n      },\n      activations: {\n        limit: 497257,\n        enableCustomerAdmin: false,\n      },\n      limitUsage: 722432,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Percentage Once Forever Discount TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a percentage discount that applies once and lasts forever. It defines a `DiscountPercentageOnceForeverDurationCreate` object with properties such as duration set to \"repeating\", type set to \"fixed\", basisPoints, a name, and an organizationId. The `components` namespace needs to be imported or defined.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountcreate.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DiscountPercentageOnceForeverDurationCreate = {\n  duration: \"repeating\",\n  type: \"fixed\",\n  basisPoints: 623636,\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Listing License Keys with Polar SDK (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to list license keys associated with a specific organization using the Polar SDK. It initializes the Polar client with an access token and calls the `licenseKeys.list` method with the organization ID. The results are then iterated over and printed to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/licensekeys/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.licenseKeys.list({\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: CustomerPortalOrdersListRequest Example\nDESCRIPTION: This TypeScript code demonstrates how to create an instance of the CustomerPortalOrdersListRequest object. It imports the necessary class from the Polar SDK and initializes an object with an organization ID filter. The example shows how to structure the request for filtering customer portal orders by a specific organization.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalorderslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalOrdersListRequest } from \"@polar-sh/sdk/models/operations/customerportalorderslist.js\";\n\nlet value: CustomerPortalOrdersListRequest = {\n  organizationId: [\n    \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: OrderSubscription Model Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the OrderSubscription model from the @polar-sh/sdk. It shows how to instantiate the model and populate its properties with example values, including dates, strings, numbers, and boolean values.  The snippet highlights the structure and expected data types of the OrderSubscription model's fields.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordersubscription.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrderSubscription } from \"@polar-sh/sdk/models/components/ordersubscription.js\";\n\nlet value: OrderSubscription = {\n  metadata: {\n    \"key\": false,\n  },\n  createdAt: new Date(\"2025-04-20T08:54:47.616Z\"),\n  modifiedAt: new Date(\"2024-05-11T17:42:20.998Z\"),\n  id: \"<value>\",\n  amount: 943657,\n  currency: \"Singapore Dollar\",\n  recurringInterval: \"year\",\n  status: \"canceled\",\n  currentPeriodStart: new Date(\"2024-09-08T13:20:56.574Z\"),\n  currentPeriodEnd: new Date(\"2024-10-04T01:35:43.769Z\"),\n  cancelAtPeriodEnd: false,\n  canceledAt: new Date(\"2024-11-12T12:33:25.249Z\"),\n  startedAt: new Date(\"2025-01-12T21:23:56.904Z\"),\n  endsAt: new Date(\"2023-04-05T18:06:17.605Z\"),\n  endedAt: new Date(\"2025-05-25T00:48:37.912Z\"),\n  customerId: \"<value>\",\n  productId: \"<value>\",\n  discountId: \"<value>\",\n  checkoutId: \"<value>\",\n  customerCancellationReason: \"unused\",\n  customerCancellationComment: \"<value>\",\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating CustomerPaymentMethodCreate object in TypeScript\nDESCRIPTION: This code demonstrates how to create a `CustomerPaymentMethodCreate` object, setting properties such as `confirmationTokenId`, `setDefault`, and `returnUrl`. It imports the necessary class from the `@polar-sh/sdk/models/components/customerpaymentmethodcreate.js` module. The `confirmationTokenId` is a string representing the payment confirmation token, `setDefault` is a boolean indicating if this should be the default payment method, and `returnUrl` is a string URL to redirect to after payment.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerpaymentmethodcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPaymentMethodCreate } from \"@polar-sh/sdk/models/components/customerpaymentmethodcreate.js\";\n\nlet value: CustomerPaymentMethodCreate = {\n  confirmationTokenId: \"<id>\",\n  setDefault: false,\n  returnUrl: \"https://multicolored-monocle.net\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Refund Object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a `Refund` object using TypeScript within the Polar.js SDK. It imports the `Refund` type from the `@polar-sh/sdk/models/components/refund.js` module and provides an example of instantiating a `Refund` object with sample data for various fields, including dates, strings, numbers, and a metadata record.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/refund.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Refund } from \"@polar-sh/sdk/models/components/refund.js\";\n\nlet value: Refund = {\n  createdAt: new Date(\"2025-12-04T20:21:23.175Z\"),\n  modifiedAt: new Date(\"2024-05-23T22:39:09.157Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 113756,\n  },\n  status: \"pending\",\n  reason: \"satisfaction_guarantee\",\n  amount: 300741,\n  taxAmount: 880681,\n  currency: \"Comoro Franc\",\n  organizationId: \"<value>\",\n  orderId: \"<value>\",\n  subscriptionId: \"<value>\",\n  customerId: \"<value>\",\n  revokeBenefits: false,\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscountFixedRepeatDuration in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize an object conforming to the `DiscountFixedRepeatDuration` type. Key properties include `duration` set to 'repeating', `durationInMonths`, and others similar to the 'FixedOnceForever' type like amount, currency, dates, and product associations.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discount.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DiscountFixedRepeatDuration = {\n  duration: \"repeating\",\n  durationInMonths: 311967,\n  type: \"fixed\",\n  amount: 563161,\n  currency: \"Tala\",\n  createdAt: new Date(\"2023-02-15T15:13:22.827Z\"),\n  modifiedAt: new Date(\"2025-07-30T12:54:39.314Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": false,\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2024-09-09T01:33:21.712Z\"),\n  endsAt: new Date(\"2024-02-24T09:51:50.083Z\"),\n  maxRedemptions: 101203,\n  redemptionsCount: 344588,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  products: [\n    {\n      metadata: {\n        \"key\": 299429,\n      },\n      createdAt: new Date(\"2023-03-21T08:33:52.495Z\"),\n      modifiedAt: new Date(\"2024-06-28T00:01:42.776Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description: \"astride gape muffled psst\",\n      recurringInterval: \"month\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Filter in TypeScript\nDESCRIPTION: This code defines a `Filter` object that combines multiple `FilterClause` objects using a conjunction (e.g., 'or', 'and').  The `clauses` property is an array intended to hold `FilterClause` objects. The conjunction determines how the filter clauses are logically combined. This snippet demonstrates constructing a filter that could contain multiple conditions.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/clauses.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.Filter = {\n  conjunction: \"or\",\n  clauses: [],\n};\n```\n\n----------------------------------------\n\nTITLE: ProductsUpdateBenefitsRequest Example - TypeScript\nDESCRIPTION: This snippet demonstrates how to import and create an instance of the `ProductsUpdateBenefitsRequest` object from the `@polar-sh/sdk/models/operations/productsupdatebenefits.js` module. It sets the `id` and `productBenefitsUpdate` properties with example values, showcasing the expected structure and usage of the object. The `productBenefitsUpdate` includes an array of strings representing the benefits.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/productsupdatebenefitsrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductsUpdateBenefitsRequest } from \"@polar-sh/sdk/models/operations/productsupdatebenefits.js\";\n\nlet value: ProductsUpdateBenefitsRequest = {\n  id: \"<value>\",\n  productBenefitsUpdate: {\n    benefits: [\n      \"<value>\",\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating LicenseKeyRead instance in TypeScript\nDESCRIPTION: This snippet shows how to import and instantiate a `LicenseKeyRead` object from the `@polar-sh/sdk/models/components/licensekeyread.js` module. It demonstrates setting values for various properties of the object, including strings, numbers, dates, and nested objects like `customer` with its own properties, showcasing the expected data structure.  The snippet assumes that `@polar-sh/sdk` is installed as a dependency.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/licensekeyread.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LicenseKeyRead } from \"@polar-sh/sdk/models/components/licensekeyread.js\";\n\nlet value: LicenseKeyRead = {\n  id: \"<value>\",\n  organizationId: \"<value>\",\n  customerId: \"<value>\",\n  customer: {\n    id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n    createdAt: new Date(\"2023-01-03T22:46:45.258Z\"),\n    modifiedAt: new Date(\"2025-02-23T00:36:32.100Z\"),\n    metadata: {\n      \"key\": \"<value>\",\n    },\n    externalId: \"usr_1337\",\n    email: \"customer@example.com\",\n    emailVerified: true,\n    name: \"John Doe\",\n    billingAddress: {\n      country: \"FR\",\n    },\n    taxId: [\n      \"911144442\",\n      \"us_ein\",\n    ],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    deletedAt: new Date(\"2025-10-31T14:54:05.686Z\"),\n    avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n  },\n  benefitId: \"<value>\",\n  key: \"<key>\",\n  displayKey: \"<value>\",\n  status: \"granted\",\n  limitActivations: 856930,\n  usage: 993604,\n  limitUsage: 533519,\n  validations: 120252,\n  lastValidatedAt: new Date(\"2025-12-19T22:26:18.159Z\"),\n  expiresAt: new Date(\"2024-09-23T16:59:27.865Z\"),\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a CustomersUpdateExternalRequest Object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the CustomersUpdateExternalRequest object in TypeScript, populating it with the externalId and customerUpdate data. It imports the necessary class from the Polar SDK and initializes the object with sample data, including externalId, email, name, billingAddress and taxId.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customersupdateexternalrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomersUpdateExternalRequest } from \"@polar-sh/sdk/models/operations/customersupdateexternal.js\";\n\nlet value: CustomersUpdateExternalRequest = {\n  externalId: \"<id>\",\n  customerUpdate: {\n    externalId: \"usr_1337\",\n    email: \"customer@example.com\",\n    name: \"John Doe\",\n    billingAddress: {\n      country: \"FR\",\n    },\n    taxId: [\n      \"FR61954506077\",\n      \"eu_vat\",\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Product Model in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create and initialize a Product object in TypeScript using the @polar-sh/sdk library. It shows the structure of the Product model, including various properties with sample values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/product.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Product } from \"@polar-sh/sdk/models/components/product.js\";\n\nlet value: Product = {\n  createdAt: new Date(\"2023-06-21T18:41:01.992Z\"),\n  modifiedAt: new Date(\"2025-01-24T01:11:05.530Z\"),\n  id: \"<value>\",\n  name: \"<value>\",\n  description: \"toward keenly owlishly\",\n  recurringInterval: \"month\",\n  isRecurring: false,\n  isArchived: false,\n  organizationId: \"<value>\",\n  metadata: {\n    \"key\": 941105,\n  },\n  prices: [\n    {\n      createdAt: new Date(\"2024-10-15T16:33:45.672Z\"),\n      modifiedAt: new Date(\"2024-03-09T15:15:05.513Z\"),\n      id: \"<value>\",\n      isArchived: false,\n      productId: \"<value>\",\n      type: \"one_time\",\n      recurringInterval: \"year\",\n      priceCurrency: \"<value>\",\n      priceAmount: 17273,\n    },\n  ],\n  benefits: [\n    {\n      id: \"<value>\",\n      createdAt: new Date(\"2023-09-09T23:12:26.225Z\"),\n      modifiedAt: new Date(\"2025-10-16T19:42:00.745Z\"),\n      description: \"dwell direct entire whitewash extremely\",\n      selectable: false,\n      deletable: false,\n      organizationId: \"<value>\",\n      metadata: {\n        \"key\": 8565.88,\n      },\n      properties: {\n        archived: {\n          \"key\": false,\n        },\n        files: [\n          \"<value>\",\n        ],\n      },\n    },\n  ],\n  medias: [\n    {\n      id: \"<value>\",\n      organizationId: \"<value>\",\n      name: \"<value>\",\n      path: \"/bin\",\n      mimeType: \"<value>\",\n      size: 931698,\n      storageVersion: \"<value>\",\n      checksumEtag: \"<value>\",\n      checksumSha256Base64: \"<value>\",\n      checksumSha256Hex: \"<value>\",\n      lastModifiedAt: new Date(\"2025-08-31T06:53:38.655Z\"),\n      version: \"<value>\",\n      isUploaded: false,\n      createdAt: new Date(\"2025-11-05T07:46:18.597Z\"),\n      sizeReadable: \"<value>\",\n      publicUrl: \"https://aching-perp.net\",\n    },\n  ],\n  attachedCustomFields: [\n    {\n      customFieldId: \"<value>\",\n      customField: {\n        createdAt: new Date(\"2025-02-17T09:28:43.135Z\"),\n        modifiedAt: new Date(\"2024-05-23T23:35:39.028Z\"),\n        id: \"<value>\",\n        metadata: {\n          \"key\": 7288.63,\n        },\n        slug: \"<value>\",\n        name: \"<value>\",\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        properties: {},\n      },\n      order: 544136,\n      required: false,\n    },\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating a CustomFieldsUpdateRequest instance\nDESCRIPTION: This code snippet demonstrates how to create an instance of the CustomFieldsUpdateRequest model in TypeScript. It imports the model from the `@polar-sh/sdk/models/operations/customfieldsupdate.js` module and initializes it with a custom field ID and an empty customFieldUpdate object. The `id` field is required and represents the custom field identifier. The `customFieldUpdate` object holds the data to be updated, which can be provided in the `CustomFieldUpdate` component format.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customfieldsupdaterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldsUpdateRequest } from \"@polar-sh/sdk/models/operations/customfieldsupdate.js\";\n\nlet value: CustomFieldsUpdateRequest = {\n  id: \"<value>\",\n  customFieldUpdate: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CheckoutsGetRequest in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the CheckoutsGetRequest object in TypeScript. It imports the CheckoutsGetRequest class from the '@polar-sh/sdk/models/operations/checkoutsget.js' module and initializes it with a string value for the required 'id' field. The 'id' field represents the checkout session ID that will be used to retrieve checkout information.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutsgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutsGetRequest } from \"@polar-sh/sdk/models/operations/checkoutsget.js\";\n\nlet value: CheckoutsGetRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: MetricsResponse Usage Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the MetricsResponse type. It creates a MetricsResponse object with sample data, showing how to populate the periods and metrics properties.  It requires the @polar-sh/sdk dependency.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metricsresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MetricsResponse } from \"@polar-sh/sdk/models/components/metricsresponse.js\";\n\nlet value: MetricsResponse = {\n  periods: [\n    {\n      timestamp: new Date(\"2023-10-15T16:25:17.974Z\"),\n      orders: 739998,\n      revenue: 100276,\n      cumulativeRevenue: 717562,\n      averageOrderValue: 807635,\n      oneTimeProducts: 242757,\n      oneTimeProductsRevenue: 711919,\n      newSubscriptions: 627843,\n      newSubscriptionsRevenue: 96389,\n      renewedSubscriptions: 241207,\n      renewedSubscriptionsRevenue: 690503,\n      activeSubscriptions: 976045,\n      monthlyRecurringRevenue: 23124,\n    },\n  ],\n  metrics: {\n    orders: {\n      slug: \"<value>\",\n      displayName: \"Nellie.Ratke\",\n      type: \"scalar\",\n    },\n    revenue: {\n      slug: \"<value>\",\n      displayName: \"Moshe27\",\n      type: \"currency\",\n    },\n    cumulativeRevenue: {\n      slug: \"<value>\",\n      displayName: \"Freeda_Volkman\",\n      type: \"currency\",\n    },\n    averageOrderValue: {\n      slug: \"<value>\",\n      displayName: \"Horace_Walter\",\n      type: \"scalar\",\n    },\n    oneTimeProducts: {\n      slug: \"<value>\",\n      displayName: \"Tatum_Konopelski57\",\n      type: \"scalar\",\n    },\n    oneTimeProductsRevenue: {\n      slug: \"<value>\",\n      displayName: \"Myrna.Goyette41\",\n      type: \"currency\",\n    },\n    newSubscriptions: {\n      slug: \"<value>\",\n      displayName: \"Osborne.Terry91\",\n      type: \"scalar\",\n    },\n    newSubscriptionsRevenue: {\n      slug: \"<value>\",\n      displayName: \"Koby57\",\n      type: \"scalar\",\n    },\n    renewedSubscriptions: {\n      slug: \"<value>\",\n      displayName: \"Fernando.Langosh\",\n      type: \"currency\",\n    },\n    renewedSubscriptionsRevenue: {\n      slug: \"<value>\",\n      displayName: \"Olin78\",\n      type: \"scalar\",\n    },\n    activeSubscriptions: {\n      slug: \"<value>\",\n      displayName: \"Cierra72\",\n      type: \"scalar\",\n    },\n    monthlyRecurringRevenue: {\n      slug: \"<value>\",\n      displayName: \"Mallie16\",\n      type: \"scalar\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Metrics Object Initialization in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize and populate a `Metrics` object in TypeScript using the `@polar-sh/sdk`. It imports the `Metrics` type and then creates an instance, assigning values to its various properties, such as `orders`, `revenue`, `cumulativeRevenue`, etc. Each property is a nested object containing `slug`, `displayName`, and `type` fields, defining characteristics of the metric.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metrics.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Metrics } from \"@polar-sh/sdk/models/components/metrics.js\";\n\nlet value: Metrics = {\n  orders: {\n    slug: \"<value>\",\n    displayName: \"Laverna_Gottlieb\",\n    type: \"currency\",\n  },\n  revenue: {\n    slug: \"<value>\",\n    displayName: \"Katelin_Simonis43\",\n    type: \"currency\",\n  },\n  cumulativeRevenue: {\n    slug: \"<value>\",\n    displayName: \"Aron61\",\n    type: \"scalar\",\n  },\n  averageOrderValue: {\n    slug: \"<value>\",\n    displayName: \"Pearlie.Padberg\",\n    type: \"currency\",\n  },\n  oneTimeProducts: {\n    slug: \"<value>\",\n    displayName: \"Sylvia.OKeefe48\",\n    type: \"currency\",\n  },\n  oneTimeProductsRevenue: {\n    slug: \"<value>\",\n    displayName: \"Hayden43\",\n    type: \"currency\",\n  },\n  newSubscriptions: {\n    slug: \"<value>\",\n    displayName: \"Dorothy14\",\n    type: \"scalar\",\n  },\n  newSubscriptionsRevenue: {\n    slug: \"<value>\",\n    displayName: \"Ludie95\",\n    type: \"currency\",\n  },\n  renewedSubscriptions: {\n    slug: \"<value>\",\n    displayName: \"Esteban67\",\n    type: \"scalar\",\n  },\n  renewedSubscriptionsRevenue: {\n    slug: \"<value>\",\n    displayName: \"Carlotta.Kirlin83\",\n    type: \"scalar\",\n  },\n  activeSubscriptions: {\n    slug: \"<value>\",\n    displayName: \"Camden7\",\n    type: \"scalar\",\n  },\n  monthlyRecurringRevenue: {\n    slug: \"<value>\",\n    displayName: \"Justen.Metz\",\n    type: \"scalar\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Product Media File with components.ProductMediaFileCreate in TypeScript\nDESCRIPTION: This example demonstrates creating a `ProductMediaFileCreate` object. The object includes the organization ID, file name, MIME type, file size, and upload parts, which specify the chunk number, start, and end positions necessary for uploading product media files in segments.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/filecreate.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductMediaFileCreate = {\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  name: \"<value>\",\n  mimeType: \"<value>\",\n  size: 80610,\n  upload: {\n    parts: [\n      {\n        number: 556456,\n        chunkStart: 994750,\n        chunkEnd: 488616,\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitLicenseKeysSubscriberProperties in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a `BenefitLicenseKeysSubscriberProperties` object with sample values.  It imports the necessary class from the `@polar-sh/sdk/models/components/benefitlicensekeyssubscriberproperties.js` module. The object defines properties such as prefix, expires (with ttl and timeframe), activations (with limit and enableCustomerAdmin), and limitUsage. This example showcases the expected structure and types of these properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeyssubscriberproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitLicenseKeysSubscriberProperties } from \"@polar-sh/sdk/models/components/benefitlicensekeyssubscriberproperties.js\";\n\nlet value: BenefitLicenseKeysSubscriberProperties = {\n  prefix: \"<value>\",\n  expires: {\n    ttl: 139501,\n    timeframe: \"year\",\n  },\n  activations: {\n    limit: 826143,\n    enableCustomerAdmin: false,\n  },\n  limitUsage: 222682,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating CheckoutsClientGetRequest Instance TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `CheckoutsClientGetRequest` model in TypeScript. It imports the model definition from the `@polar-sh/sdk` and initializes an object with the required `clientSecret` field. The `clientSecret` is a string that is required to retrieve the checkout session.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutsclientgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutsClientGetRequest } from \"@polar-sh/sdk/models/operations/checkoutsclientget.js\";\n\nlet value: CheckoutsClientGetRequest = {\n  clientSecret: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: OrdersListResponse Usage Example in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and instantiate the OrdersListResponse type from the @polar-sh/sdk library. It initializes a variable 'value' with a sample OrdersListResponse object, showcasing the nested structure and data types expected in the response. The code provides a complete example of the data structure, including date objects, strings, numbers, and nested objects. This is useful for understanding the expected data format when working with the Polar API.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/orderslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrdersListResponse } from \"@polar-sh/sdk/models/operations/orderslist.js\";\n\nlet value: OrdersListResponse = {\n  result: {\n    items: [\n      {\n        createdAt: new Date(\"2025-06-18T02:56:08.754Z\"),\n        modifiedAt: new Date(\"2025-07-07T12:47:13.276Z\"),\n        id: \"<value>\",\n        metadata: {\n          \"key\": 151415,\n        },\n        status: \"paid\",\n        paid: true,\n        subtotalAmount: 635381,\n        discountAmount: 714409,\n        netAmount: 515356,\n        amount: 431945,\n        taxAmount: 881695,\n        totalAmount: 759912,\n        refundedAmount: 562703,\n        refundedTaxAmount: 534015,\n        currency: \"Belize Dollar\",\n        billingReason: \"subscription_create\",\n        billingAddress: {\n          country: \"SE\",\n        },\n        customerId: \"<value>\",\n        productId: \"<value>\",\n        discountId: \"<value>\",\n        subscriptionId: \"<value>\",\n        checkoutId: \"<value>\",\n        customer: {\n          id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n          createdAt: new Date(\"2025-06-03T00:19:30.299Z\"),\n          modifiedAt: new Date(\"2025-10-03T16:05:36.713Z\"),\n          metadata: {\n            \"key\": \"<value>\",\n          },\n          externalId: \"usr_1337\",\n          email: \"customer@example.com\",\n          emailVerified: true,\n          name: \"John Doe\",\n          billingAddress: {\n            country: \"FR\",\n          },\n          taxId: [\n            \"FR61954506077\",\n            \"eu_vat\",\n          ],\n          organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n          deletedAt: new Date(\"2025-10-31T02:47:18.612Z\"),\n          avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n        },\n        userId: \"<value>\",\n        product: {\n          metadata: {\n            \"key\": 6072.74,\n          },\n          createdAt: new Date(\"2025-02-26T09:15:51.040Z\"),\n          modifiedAt: new Date(\"2023-04-14T23:09:22.753Z\"),\n          id: \"<value>\",\n          name: \"<value>\",\n          description:\n            \"programme gadzooks wiggly unfortunately fooey drive bah\",\n          recurringInterval: \"month\",\n          isRecurring: false,\n          isArchived: false,\n          organizationId: \"<value>\",\n        },\n        discount: {\n          duration: \"once\",\n          type: \"percentage\",\n          basisPoints: 497145,\n          createdAt: new Date(\"2023-02-18T07:41:25.454Z\"),\n          modifiedAt: new Date(\"2023-02-22T20:45:46.812Z\"),\n          id: \"<value>\",\n          metadata: {\n            \"key\": 2837.15,\n          },\n          name: \"<value>\",\n          code: \"<value>\",\n          startsAt: new Date(\"2023-08-17T14:11:18.065Z\"),\n          endsAt: new Date(\"2025-06-20T09:54:03.220Z\"),\n          maxRedemptions: 774227,\n          redemptionsCount: 214740,\n          organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        },\n        subscription: {\n          metadata: {\n            \"key\": false,\n          },\n          createdAt: new Date(\"2025-02-24T20:20:29.546Z\"),\n          modifiedAt: new Date(\"2023-05-24T11:40:33.238Z\"),\n          id: \"<value>\",\n          amount: 876881,\n          currency: \"Congolese Franc\",\n          recurringInterval: \"year\",\n          status: \"unpaid\",\n          currentPeriodStart: new Date(\"2025-05-01T12:49:50.437Z\"),\n          currentPeriodEnd: new Date(\"2023-12-06T02:57:13.562Z\"),\n          cancelAtPeriodEnd: false,\n          canceledAt: new Date(\"2023-08-08T04:03:19.582Z\"),\n          startedAt: new Date(\"2025-01-30T05:47:34.515Z\"),\n          endsAt: new Date(\"2025-05-30T04:39:36.747Z\"),\n          endedAt: new Date(\"2024-04-08T09:15:27.816Z\"),\n          customerId: \"<value>\",\n          productId: \"<value>\",\n          discountId: \"<value>\",\n          checkoutId: \"<value>\",\n          customerCancellationReason: \"switched_service\",\n          customerCancellationComment: \"<value>\",\n        },\n        items: [\n          {\n            createdAt: new Date(\"2025-10-02T19:46:14.425Z\"),\n            modifiedAt: new Date(\"2025-08-17T04:59:53.663Z\"),\n            id: \"<value>\",\n            label: \"<value>\",\n            amount: 723796,\n            taxAmount: 217306,\n            proration: false,\n            productPriceId: \"<value>\",\n          },\n        ],\n      },\n    ],\n    pagination: {\n      totalCount: 430488,\n      maxPage: 991210,\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Customer with Polar SDK (TypeScript)\nDESCRIPTION: Deletes a customer using the Polar SDK. This action cancels active subscriptions, revokes benefits, and clears the `external_id`.  Requires the `customers:write` scope. Replace `<value>` with the actual customer ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customers/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.customers.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: DiscountFixedOnceForeverDuration Usage in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to define and instantiate a `DiscountFixedOnceForeverDuration` object, showcasing the required properties and their expected types. It includes setting values for properties such as duration, type, amount, currency, timestamps (createdAt, modifiedAt, startsAt, endsAt), IDs, metadata, names, codes, redemption counts, organization ID, and associated product details. This example requires the `@polar-sh/sdk` package.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedonceforeverduration.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountFixedOnceForeverDuration } from \"@polar-sh/sdk/models/components/discountfixedonceforeverduration.js\";\n\nlet value: DiscountFixedOnceForeverDuration = {\n  duration: \"once\",\n  type: \"fixed\",\n  amount: 513203,\n  currency: \"Afghani\",\n  createdAt: new Date(\"2025-08-31T19:58:01.557Z\"),\n  modifiedAt: new Date(\"2024-10-01T03:17:36.020Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": false,\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2023-12-14T16:39:21.946Z\"),\n  endsAt: new Date(\"2024-08-19T16:11:21.339Z\"),\n  maxRedemptions: 147229,\n  redemptionsCount: 148851,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  products: [\n    {\n      metadata: {\n        \"key\": 1753.58,\n      },\n      createdAt: new Date(\"2024-02-23T14:27:05.286Z\"),\n      modifiedAt: new Date(\"2025-08-16T21:57:49.726Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description:\n        \"aha rejigger repentant generously diligently mmm sparkling even unless\",\n      recurringInterval: \"month\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: EventsIngest Example in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an EventsIngest object in TypeScript, which contains a list of events with properties like name, organizationId, and customerId.  It requires the @polar-sh/sdk and uses the EventsIngest and Events types defined in its components.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventsingest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventsIngest } from \"@polar-sh/sdk/models/components/eventsingest.js\";\n\nlet value: EventsIngest = {\n  events: [\n    {\n      name: \"<value>\",\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      customerId: \"<value>\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating ProductsListRequest Instance in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `ProductsListRequest` object in TypeScript, setting the `organizationId` property. It requires importing the `ProductsListRequest` class from the `@polar-sh/sdk/models/operations/productslist.js` module. The `organizationId` is a required parameter for filtering products by organization.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/productslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductsListRequest } from \"@polar-sh/sdk/models/operations/productslist.js\";\n\nlet value: ProductsListRequest = {\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitLicenseKeys in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the BenefitLicenseKeys object with various properties. It imports the BenefitLicenseKeys class from the @polar-sh/sdk and initializes the object with sample data, including strings, Dates, and nested objects for metadata and properties. The properties include configurations for prefix, expires, activations, and limitUsage.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeys.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitLicenseKeys } from \"@polar-sh/sdk/models/components/benefitlicensekeys.js\";\n\nlet value: BenefitLicenseKeys = {\n  id: \"<value>\",\n  createdAt: new Date(\"2025-04-26T16:27:43.785Z\"),\n  modifiedAt: new Date(\"2025-02-20T15:12:20.985Z\"),\n  description: \"yuck annually gripper supposing\",\n  selectable: false,\n  deletable: false,\n  organizationId: \"<value>\",\n  metadata: {\n    \"key\": 1160.55,\n  },\n  properties: {\n    prefix: \"<value>\",\n    expires: {\n      ttl: 91977,\n      timeframe: \"year\",\n    },\n    activations: {\n      limit: 579245,\n      enableCustomerAdmin: false,\n    },\n    limitUsage: 730645,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscountPercentageOnceForeverDurationBase TypeScript\nDESCRIPTION: This code snippet shows how to create an instance of the DiscountPercentageOnceForeverDurationBase object in TypeScript. It imports the necessary class from the @polar-sh/sdk and then initializes an object with various properties, including dates, numbers, and strings. The properties represent the characteristics of a discount, such as its duration, type, redemption limits, and associated organization.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentageonceforeverdurationbase.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountPercentageOnceForeverDurationBase } from \"@polar-sh/sdk/models/components/discountpercentageonceforeverdurationbase.js\";\n\nlet value: DiscountPercentageOnceForeverDurationBase = {\n  duration: \"forever\",\n  type: \"percentage\",\n  basisPoints: 272361,\n  createdAt: new Date(\"2023-11-11T05:10:11.694Z\"),\n  modifiedAt: new Date(\"2023-03-18T00:10:49.850Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 703457,\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2024-07-17T21:00:43.321Z\"),\n  endsAt: new Date(\"2023-07-08T12:49:55.786Z\"),\n  maxRedemptions: 225362,\n  redemptionsCount: 238846,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an Organization with Polar SDK\nDESCRIPTION: Demonstrates how to create an organization using the Polar SDK. It initializes the Polar SDK with an access token and creates an organization using the `organizations.create` method, providing a name and slug for the new organization.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/organizations/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.create({\n    name: \"<value>\",\n    slug: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Cancelling Subscription with Standalone Function (Typescript)\nDESCRIPTION: This code demonstrates how to cancel a customer's subscription using the standalone `customerPortalSubscriptionsCancel` function from `@polar-sh/sdk/funcs/customerPortalSubscriptionsCancel.js`. It utilizes `PolarCore` for better tree-shaking performance. Ensure that the `POLAR_CUSTOMER_SESSION` environment variable is set and a valid subscription ID is provided. The function returns a result object that needs to be checked for errors.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarsubscriptions/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalSubscriptionsCancel } from \"@polar-sh/sdk/funcs/customerPortalSubscriptionsCancel.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalSubscriptionsCancel(polar, {\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating SubscriptionsExportRequest in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and create an instance of the `SubscriptionsExportRequest` object from the `@polar-sh/sdk/models/operations/subscriptionsexport.js` module. The object is initialized with an `organizationId` array containing a UUID string. This request can be used to filter exported subscriptions based on the provided organization ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/subscriptionsexportrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubscriptionsExportRequest } from \"@polar-sh/sdk/models/operations/subscriptionsexport.js\";\n\nlet value: SubscriptionsExportRequest = {\n  organizationId: [\n    \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Get Organization using Polar object in TypeScript\nDESCRIPTION: This snippet demonstrates how to get a customer portal's organization by slug using the main Polar object. It initializes the Polar SDK with an access token, calls the `get` method on the `customerPortal.organizations` property, and logs the result to the console. Requires the `@polar-sh/sdk` package.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarorganizations/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerPortal.organizations.get({\n    slug: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Updating Checkout Session with Standalone Function in Typescript\nDESCRIPTION: This code snippet shows how to update a checkout session using the standalone `checkoutsUpdate` function from the Polar SDK in TypeScript. It imports `PolarCore` and `checkoutsUpdate`, initializes `PolarCore` with an access token, and then calls `checkoutsUpdate` to update a checkout session.  It includes error handling and extracts the result from the response object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkouts/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { checkoutsUpdate } from \"@polar-sh/sdk/funcs/checkoutsUpdate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await checkoutsUpdate(polar, {\n    id: \"<value>\",\n    checkoutUpdate: {\n      customerBillingAddress: {\n        country: \"FR\",\n      },\n    },\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization by ID using Polar SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve an organization by its ID using the Polar SDK. It initializes the Polar SDK with an access token and then calls the `organizations.get` method with the organization ID. The result is then printed to the console. Requires the `@polar-sh/sdk` package and a valid `POLAR_ACCESS_TOKEN` environment variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/organizations/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.get({\n    id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Request Token using Polar SDK\nDESCRIPTION: This snippet shows how to request an access token using the Polar JS SDK. It initializes the SDK and calls the `token` method on the `oauth2` namespace, passing in the necessary parameters such as `clientId`, `clientSecret`, `code`, and `redirectUri`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/oauth2/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.oauth2.token({\n    clientId: \"<id>\",\n    clientSecret: \"<value>\",\n    code: \"<value>\",\n    redirectUri: \"https://old-fort.name\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: CustomerPortalCustomersDeletePaymentMethodRequest Example\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `CustomerPortalCustomersDeletePaymentMethodRequest` object. It imports the necessary class from the `@polar-sh/sdk/models/operations/customerportalcustomersdeletepaymentmethod.js` module and initializes an object with the required `id` field. The `id` field is a string representing the payment method ID to be deleted.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalcustomersdeletepaymentmethodrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalCustomersDeletePaymentMethodRequest } from \"@polar-sh/sdk/models/operations/customerportalcustomersdeletepaymentmethod.js\";\n\nlet value: CustomerPortalCustomersDeletePaymentMethodRequest = {\n  id: \"<id>\",\n};\n```\n\n----------------------------------------\n\nTITLE: EventsListNamesResponse Example in TypeScript\nDESCRIPTION: This snippet demonstrates the creation and population of an `EventsListNamesResponse` object. It imports the type from the `@polar-sh/sdk/models/operations/eventslistnames.js` module and assigns a sample object to a variable. The sample object includes fields like `items` (an array of event name objects), and `pagination` details. The snippet requires the `@polar-sh/sdk` library to be installed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/eventslistnamesresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventsListNamesResponse } from \"@polar-sh/sdk/models/operations/eventslistnames.js\";\n\nlet value: EventsListNamesResponse = {\n  result: {\n    items: [\n      {\n        name: \"<value>\",\n        source: \"system\",\n        occurrences: 903596,\n        firstSeen: new Date(\"2024-03-07T21:28:00.890Z\"),\n        lastSeen: new Date(\"2023-11-08T23:40:18.040Z\"),\n      },\n    ],\n    pagination: {\n      totalCount: 504809,\n      maxPage: 238080,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing OrganizationSubscriptionSettings TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of `OrganizationSubscriptionSettings` in TypeScript using the `@polar-sh/sdk` library. It sets the `allowMultipleSubscriptions`, `allowCustomerUpdates`, and `prorationBehavior` properties. The prorationBehavior property determines how proration is handled during subscription changes.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/organizationsubscriptionsettings.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrganizationSubscriptionSettings } from \"@polar-sh/sdk/models/components/organizationsubscriptionsettings.js\";\n\nlet value: OrganizationSubscriptionSettings = {\n  allowMultipleSubscriptions: false,\n  allowCustomerUpdates: false,\n  prorationBehavior: \"invoice\",\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Organizations with Polar SDK in TypeScript\nDESCRIPTION: This snippet initializes the Polar SDK, retrieves a list of organizations, and iterates through the results. It requires the `@polar-sh/sdk` package and an access token set in the environment variable `POLAR_ACCESS_TOKEN`. The code logs each page of organizations to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/USAGE.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.list({});\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscountFixedOnceForeverDurationBase in Typescript\nDESCRIPTION: This code snippet demonstrates how to import and initialize a DiscountFixedOnceForeverDurationBase object in TypeScript. It showcases the structure of the object and the types of data each field can hold, including dates, numbers, and strings.  The example sets default values for required fields.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedonceforeverdurationbase.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountFixedOnceForeverDurationBase } from \"@polar-sh/sdk/models/components/discountfixedonceforeverdurationbase.js\";\n\nlet value: DiscountFixedOnceForeverDurationBase = {\n  duration: \"forever\",\n  type: \"fixed\",\n  amount: 186390,\n  currency: \"Congolese Franc\",\n  createdAt: new Date(\"2025-10-12T10:13:58.216Z\"),\n  modifiedAt: new Date(\"2024-08-13T22:55:22.127Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": \"<value>\",\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2023-05-31T23:50:47.257Z\"),\n  endsAt: new Date(\"2023-06-11T11:22:54.255Z\"),\n  maxRedemptions: 516396,\n  redemptionsCount: 842198,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Checkouts with Standalone Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to list checkout sessions using the standalone function version of the Polar SDK in TypeScript. It initializes the PolarCore and calls the `checkoutsList` function with the core instance and the organization ID. It handles potential errors and iterates through the pages of results, logging each page to the console.\n\nDependencies: @polar-sh/sdk/core.js, @polar-sh/sdk/funcs/checkoutsList.js\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkouts/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { checkoutsList } from \"@polar-sh/sdk/funcs/checkoutsList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await checkoutsList(polar, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: ProductsUpdateRequest Usage Example (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to import and instantiate the ProductsUpdateRequest class from the '@polar-sh/sdk/models/operations/productsupdate.js' module. It shows how to create an instance of the class and assign values to its properties, 'id' and 'productUpdate'. The 'productUpdate' is initialized as an empty object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/productsupdaterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductsUpdateRequest } from \"@polar-sh/sdk/models/operations/productsupdate.js\";\n\nlet value: ProductsUpdateRequest = {\n  id: \"<value>\",\n  productUpdate: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Creating OrganizationsUpdateRequest Instance in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and create an instance of the OrganizationsUpdateRequest object from the @polar-sh/sdk library.  It sets the 'id' and initializes the 'organizationUpdate' field. The organizationUpdate field is initialized as an empty object in this example.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/organizationsupdaterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrganizationsUpdateRequest } from \"@polar-sh/sdk/models/operations/organizationsupdate.js\";\n\nlet value: OrganizationsUpdateRequest = {\n  id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  organizationUpdate: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Defining LegacyRecurringProductPrice TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a `LegacyRecurringProductPrice` object using TypeScript. It showcases the required properties such as `createdAt`, `modifiedAt`, `id`, `isArchived`, `productId`, `recurringInterval`, `priceCurrency`, `minimumAmount`, `maximumAmount`, and `presetAmount`.  It includes sample data and type annotations from the `components` module.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/prices.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.LegacyRecurringProductPrice = {\n  createdAt: new Date(\"2025-03-28T17:53:12.899Z\"),\n  modifiedAt: new Date(\"2024-08-10T00:40:01.700Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  recurringInterval: \"year\",\n  priceCurrency: \"<value>\",\n  minimumAmount: 981878,\n  maximumAmount: 962753,\n  presetAmount: 690635,\n};\n```\n\n----------------------------------------\n\nTITLE: Using WebhookSubscriptionCanceledPayload in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the WebhookSubscriptionCanceledPayload type from the `@polar-sh/sdk/models/components/webhooksubscriptioncanceledpayload.js` module. It creates an example payload object with various fields populated with sample data, including dates, strings, numbers, and nested objects like customer and product details. The example showcases the data structure expected in a WebhookSubscriptionCanceledPayload when a subscription is canceled.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhooksubscriptioncanceledpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookSubscriptionCanceledPayload } from \"@polar-sh/sdk/models/components/webhooksubscriptioncanceledpayload.js\";\n\nlet value: WebhookSubscriptionCanceledPayload = {\n  data: {\n    createdAt: new Date(\"2025-09-27T23:56:42.701Z\"),\n    modifiedAt: new Date(\"2024-06-12T06:12:03.827Z\"),\n    id: \"<value>\",\n    amount: 464666,\n    currency: \"Cayman Islands Dollar\",\n    recurringInterval: \"year\",\n    status: \"past_due\",\n    currentPeriodStart: new Date(\"2024-01-15T06:32:33.080Z\"),\n    currentPeriodEnd: new Date(\"2023-05-13T07:51:49.721Z\"),\n    cancelAtPeriodEnd: false,\n    canceledAt: new Date(\"2024-11-26T03:26:40.472Z\"),\n    startedAt: new Date(\"2025-10-06T00:05:35.506Z\"),\n    endsAt: new Date(\"2024-05-11T15:17:03.037Z\"),\n    endedAt: new Date(\"2024-09-03T18:44:50.693Z\"),\n    customerId: \"<value>\",\n    productId: \"<value>\",\n    discountId: \"<value>\",\n    checkoutId: \"<value>\",\n    customerCancellationReason: \"too_expensive\",\n    customerCancellationComment: \"<value>\",\n    metadata: {\n      \"key\": 79.61,\n    },\n    customer: {\n      id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n      createdAt: new Date(\"2024-11-16T09:41:40.537Z\"),\n      modifiedAt: new Date(\"2025-10-19T03:23:28.853Z\"),\n      metadata: {\n        \"key\": false,\n      },\n      externalId: \"usr_1337\",\n      email: \"customer@example.com\",\n      emailVerified: true,\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"FR\",\n      },\n      taxId: [\n        \"911144442\",\n        \"us_ein\",\n      ],\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      deletedAt: new Date(\"2024-07-25T08:36:28.134Z\"),\n      avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n    },\n    product: {\n      createdAt: new Date(\"2025-07-15T12:02:09.606Z\"),\n      modifiedAt: new Date(\"2025-05-29T13:12:24.760Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description: \"boohoo vivaciously lava bah biodegradable alongside guzzle\",\n      recurringInterval: \"year\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n      metadata: {\n        \"key\": 107037,\n      },\n      prices: [\n        {\n          createdAt: new Date(\"2023-05-23T06:52:21.647Z\"),\n          modifiedAt: new Date(\"2023-07-28T17:19:49.492Z\"),\n          id: \"<value>\",\n          isArchived: false,\n          productId: \"<value>\",\n          type: \"one_time\",\n          recurringInterval: \"month\",\n        },\n      ],\n      benefits: [\n        {\n          id: \"<value>\",\n          createdAt: new Date(\"2025-04-19T16:01:22.989Z\"),\n          modifiedAt: new Date(\"2023-01-08T01:57:59.331Z\"),\n          description:\n            \"supposing pro inside sediment apropos captain wretched knottily\",\n          selectable: false,\n          deletable: false,\n          organizationId: \"<value>\",\n          metadata: {\n            \"key\": 260674,\n          },\n          properties: {\n            repositoryOwner: \"polarsource\",\n            repositoryName: \"private_repo\",\n            permission: \"push\",\n          },\n        },\n      ],\n      medias: [\n        {\n          id: \"<value>\",\n          organizationId: \"<value>\",\n          name: \"<value>\",\n          path: \"/tmp\",\n          mimeType: \"<value>\",\n          size: 239966,\n          storageVersion: \"<value>\",\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n          checksumSha256Hex: \"<value>\",\n          lastModifiedAt: new Date(\"2024-05-12T07:44:30.875Z\"),\n          version: \"<value>\",\n          isUploaded: false,\n          createdAt: new Date(\"2025-11-05T13:17:34.342Z\"),\n          sizeReadable: \"<value>\",\n          publicUrl: \"https://self-reliant-knight.name\",\n        },\n      ],\n      attachedCustomFields: [\n        {\n          customFieldId: \"<value>\",\n          customField: {\n            createdAt: new Date(\"2024-05-11T05:12:00.674Z\"),\n            modifiedAt: new Date(\"2023-11-06T10:30:39.503Z\"),\n            id: \"<value>\",\n            metadata: {\n              \"key\": false,\n            },\n            slug: \"<value>\",\n            name: \"<value>\",\n            organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n            properties: {},\n          },\n          order: 792473,\n          required: false,\n        },\n      ],\n    },\n    discount: {\n      duration: \"repeating\",\n      type: \"fixed\",\n      basisPoints: 903279,\n      createdAt: new Date(\"2025-09-28T22:19:22.542Z\"),\n      modifiedAt: new Date(\"2024-08-20T12:51:43.987Z\"),\n      id: \"<value>\",\n      metadata: {\n        \"key\": \"<value>\",\n      },\n      name: \"<value>\",\n      code: \"<value>\",\n      startsAt: new Date(\"2024-01-12T23:35:55.519Z\"),\n      endsAt: new Date(\"2025-06-03T00:56:43.066Z\"),\n      maxRedemptions: 582250,\n      redemptionsCount: 484716,\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    },\n    prices: [\n      {\n        createdAt: new Date(\"2023-07-22T23:36:21.423Z\"),\n        modifiedAt: new Date(\"2023-04-28T06:52:35.145Z\"),\n        id: \"<value>\",\n        isArchived: false,\n        productId: \"<value>\",\n        type: \"one_time\",\n        recurringInterval: \"year\",\n      },\n    ],\n    meters: [\n      {\n        createdAt: new Date(\"2025-12-04T07:57:32.567Z\"),\n        modifiedAt: new Date(\"2023-04-24T02:01:35.965Z\"),\n        id: \"<value>\",\n        consumedUnits: 25,\n        creditedUnits: 100,\n        amount: 0,\n        meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n        meter: {\n          metadata: {\n            \"key\": 2725.72,\n          },\n          createdAt: new Date(\"2023-03-28T19:34:48.931Z\"),\n          modifiedAt: new Date(\"2024-12-09T23:31:57.716Z\"),\n          id: \"<value>\",\n          name: \"<value>\",\n          filter: {\n            conjunction: \"and\",\n            clauses: [],\n          },\n          aggregation: {\n            func: \"avg\",\n            property: \"<value>\",\n          },\n          organizationId: \"<value>\",\n        },\n      },\n    ],\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: SubscriptionsListResponse Usage Example in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `SubscriptionsListResponse` type from the `@polar-sh/sdk/models/operations/subscriptionslist.js` module. It initializes an object of this type with sample data, showcasing the structure of the expected response, including nested objects and arrays, dates, and various subscription-related properties. The data includes customer, product, discount, prices, and meters information. This example requires the `@polar-sh/sdk` package to be installed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/subscriptionslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubscriptionsListResponse } from \"@polar-sh/sdk/models/operations/subscriptionslist.js\";\n\nlet value: SubscriptionsListResponse = {\n  result: {\n    items: [\n      {\n        createdAt: new Date(\"2023-07-02T12:44:40.752Z\"),\n        modifiedAt: new Date(\"2023-06-08T23:38:57.617Z\"),\n        id: \"<value>\",\n        amount: 949183,\n        currency: \"New Taiwan Dollar\",\n        recurringInterval: \"month\",\n        status: \"past_due\",\n        currentPeriodStart: new Date(\"2024-07-20T11:55:36.744Z\"),\n        currentPeriodEnd: new Date(\"2024-06-07T20:08:56.081Z\"),\n        cancelAtPeriodEnd: false,\n        canceledAt: new Date(\"2024-10-26T11:44:16.609Z\"),\n        startedAt: new Date(\"2023-10-07T22:09:10.335Z\"),\n        endsAt: new Date(\"2024-08-18T02:05:31.549Z\"),\n        endedAt: new Date(\"2025-06-17T10:24:35.511Z\"),\n        customerId: \"<value>\",\n        productId: \"<value>\",\n        discountId: \"<value>\",\n        checkoutId: \"<value>\",\n        customerCancellationReason: \"too_expensive\",\n        customerCancellationComment: \"<value>\",\n        metadata: {\n          \"key\": \"<value>\",\n        },\n        customer: {\n          id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n          createdAt: new Date(\"2024-03-25T05:52:34.723Z\"),\n          modifiedAt: new Date(\"2025-03-19T15:00:07.500Z\"),\n          metadata: {\n            \"key\": 1621.41,\n          },\n          externalId: \"usr_1337\",\n          email: \"customer@example.com\",\n          emailVerified: true,\n          name: \"John Doe\",\n          billingAddress: {\n            country: \"SE\",\n          },\n          taxId: [\n            \"911144442\",\n            \"us_ein\",\n          ],\n          organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n          deletedAt: new Date(\"2024-12-24T06:45:52.511Z\"),\n          avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n        },\n        product: {\n          createdAt: new Date(\"2023-03-12T22:35:46.828Z\"),\n          modifiedAt: new Date(\"2024-12-15T11:15:25.213Z\"),\n          id: \"<value>\",\n          name: \"<value>\",\n          description: \"though concerning splay ugh boo\",\n          recurringInterval: \"year\",\n          isRecurring: false,\n          isArchived: false,\n          organizationId: \"<value>\",\n          metadata: {\n            \"key\": \"<value>\",\n          },\n          prices: [\n            {\n              createdAt: new Date(\"2024-11-03T00:30:05.931Z\"),\n              modifiedAt: new Date(\"2025-06-04T14:27:42.879Z\"),\n              id: \"<value>\",\n              isArchived: false,\n              productId: \"<value>\",\n              type: \"one_time\",\n              recurringInterval: \"month\",\n              priceCurrency: \"<value>\",\n              minimumAmount: 526629,\n              maximumAmount: 392186,\n              presetAmount: 685649,\n            },\n          ],\n          benefits: [\n            {\n              id: \"<value>\",\n              createdAt: new Date(\"2024-04-20T13:57:40.434Z\"),\n              modifiedAt: new Date(\"2024-02-12T02:14:40.759Z\"),\n              description: \"owlishly quarrel beret doing comestible huzzah\",\n              selectable: false,\n              deletable: false,\n              organizationId: \"<value>\",\n              metadata: {\n                \"key\": 7061.91,\n              },\n              properties: {\n                archived: {\n                  \"key\": false,\n                },\n                files: [\n                  \"<value>\",\n                ],\n              },\n            },\n          ],\n          medias: [\n            {\n              id: \"<value>\",\n              organizationId: \"<value>\",\n              name: \"<value>\",\n              path: \"/proc\",\n              mimeType: \"<value>\",\n              size: 942797,\n              storageVersion: \"<value>\",\n              checksumEtag: \"<value>\",\n              checksumSha256Base64: \"<value>\",\n              checksumSha256Hex: \"<value>\",\n              lastModifiedAt: new Date(\"2024-09-13T10:14:31.711Z\"),\n              version: \"<value>\",\n              isUploaded: false,\n              createdAt: new Date(\"2023-07-30T18:25:16.917Z\"),\n              sizeReadable: \"<value>\",\n              publicUrl: \"https://uncommon-operating.biz\",\n            },\n          ],\n          attachedCustomFields: [\n            {\n              customFieldId: \"<value>\",\n              customField: {\n                createdAt: new Date(\"2025-01-20T12:30:15.601Z\"),\n                modifiedAt: new Date(\"2024-01-17T10:51:44.396Z\"),\n                id: \"<value>\",\n                metadata: {\n                  \"key\": 175458,\n                },\n                slug: \"<value>\",\n                name: \"<value>\",\n                organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n                properties: {},\n              },\n              order: 169689,\n              required: false,\n            },\n          ],\n        },\n        discount: {\n          duration: \"once\",\n          durationInMonths: 814531,\n          type: \"percentage\",\n          amount: 503222,\n          currency: \"Kyat\",\n          createdAt: new Date(\"2025-10-11T13:56:21.251Z\"),\n          modifiedAt: new Date(\"2024-08-17T14:59:50.690Z\"),\n          id: \"<value>\",\n          metadata: {\n            \"key\": false,\n          },\n          name: \"<value>\",\n          code: \"<value>\",\n          startsAt: new Date(\"2025-10-26T13:10:24.499Z\"),\n          endsAt: new Date(\"2023-03-14T14:07:32.344Z\"),\n          maxRedemptions: 799657,\n          redemptionsCount: 176285,\n          organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        },\n        prices: [\n          {\n            createdAt: new Date(\"2024-12-25T14:36:13.087Z\"),\n            modifiedAt: new Date(\"2023-01-04T21:39:11.375Z\"),\n            id: \"<value>\",\n            isArchived: false,\n            productId: \"<value>\",\n            recurringInterval: \"month\",\n            priceCurrency: \"<value>\",\n            priceAmount: 443568,\n          },\n        ],\n        meters: [\n          {\n            createdAt: new Date(\"2024-03-14T00:32:49.114Z\"),\n            modifiedAt: new Date(\"2024-02-15T00:43:10.633Z\"),\n            id: \"<value>\",\n            consumedUnits: 25,\n            creditedUnits: 100,\n            amount: 0,\n            meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n            meter: {\n              metadata: {\n                \"key\": 748798,\n              },\n              createdAt: new Date(\"2023-02-22T09:29:16.495Z\"),\n              modifiedAt: new Date(\"2023-12-07T19:19:58.717Z\"),\n              id: \"<value>\",\n              name: \"<value>\",\n              filter: {\n                conjunction: \"and\",\n                clauses: [],\n              },\n              aggregation: {},\n              organizationId: \"<value>\",\n            },\n          },\n        ],\n      },\n    ],\n    pagination: {\n      totalCount: 993668,\n      maxPage: 58850,\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: OrderCustomer Model Usage in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the OrderCustomer model from the @polar-sh/sdk library. It creates an instance of the OrderCustomer object and populates it with example data, including properties like id, createdAt, modifiedAt, metadata, externalId, email, emailVerified, name, billingAddress, taxId, organizationId, deletedAt, and avatarUrl. The example includes various data types and nested objects to illustrate the model's structure.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordercustomer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrderCustomer } from \"@polar-sh/sdk/models/components/ordercustomer.js\";\n\nlet value: OrderCustomer = {\n  id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n  createdAt: new Date(\"2025-01-13T06:13:19.969Z\"),\n  modifiedAt: new Date(\"2024-04-07T22:14:54.562Z\"),\n  metadata: {\n    \"key\": 8692.37,\n  },\n  externalId: \"usr_1337\",\n  email: \"customer@example.com\",\n  emailVerified: true,\n  name: \"John Doe\",\n  billingAddress: {\n    country: \"SE\",\n  },\n  taxId: [\n    \"FR61954506077\",\n    \"eu_vat\",\n  ],\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  deletedAt: new Date(\"2023-09-09T19:36:40.952Z\"),\n  avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalBenefitGrantsGetRequest in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and initialize a `CustomerPortalBenefitGrantsGetRequest` object in TypeScript.  It requires the `@polar-sh/sdk` package to be installed. The `id` field is a required string representing the benefit grant ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalbenefitgrantsgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalBenefitGrantsGetRequest } from \"@polar-sh/sdk/models/operations/customerportalbenefitgrantsget.js\";\n\nlet value: CustomerPortalBenefitGrantsGetRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a CheckoutLinksGetRequest Instance in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to create an instance of the `CheckoutLinksGetRequest` model. It imports the model from the `@polar-sh/sdk/models/operations/checkoutlinksget.js` module and initializes it with a checkout link ID. The `id` field is required and represents the unique identifier of the checkout link.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutlinksgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutLinksGetRequest } from \"@polar-sh/sdk/models/operations/checkoutlinksget.js\";\n\nlet value: CheckoutLinksGetRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: ProductPriceMeteredUnit Usage Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create and initialize a `ProductPriceMeteredUnit` object in TypeScript. It imports the necessary class from the `@polar-sh/sdk` library and sets the values for the object's properties. Note that dates are initialized using `new Date()`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productpricemeteredunit.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductPriceMeteredUnit } from \"@polar-sh/sdk/models/components/productpricemeteredunit.js\";\n\nlet value: ProductPriceMeteredUnit = {\n  createdAt: new Date(\"2025-04-25T18:42:41.309Z\"),\n  modifiedAt: new Date(\"2025-04-21T06:35:32.464Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  type: \"one_time\",\n  recurringInterval: \"year\",\n  priceCurrency: \"<value>\",\n  unitAmount: \"<value>\",\n  capAmount: 198847,\n  meterId: \"<value>\",\n  meter: {\n    id: \"<value>\",\n    name: \"<value>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: OrderInvoice Example Usage in TypeScript\nDESCRIPTION: Demonstrates how to import and instantiate the OrderInvoice model in TypeScript. The example shows how to create an OrderInvoice object with a sample URL.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/orderinvoice.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrderInvoice } from \"@polar-sh/sdk/models/components/orderinvoice.js\";\n\nlet value: OrderInvoice = {\n  url: \"https://heartfelt-contrail.name/\",\n};\n```\n\n----------------------------------------\n\nTITLE: Instantiate ProductPriceFixed in TypeScript\nDESCRIPTION: This code snippet demonstrates how to instantiate a ProductPriceFixed object in TypeScript. It imports the ProductPriceFixed type from the `@polar-sh/sdk` library and provides an example of setting its properties, including dates, IDs, boolean flags, product association, type, recurring interval, currency, and price amount. Note that recurringInterval is marked as deprecated.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productpricefixed.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductPriceFixed } from \"@polar-sh/sdk/models/components/productpricefixed.js\";\n\nlet value: ProductPriceFixed = {\n  createdAt: new Date(\"2024-08-11T00:41:34.708Z\"),\n  modifiedAt: new Date(\"2025-06-13T04:09:56.608Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  type: \"recurring\",\n  recurringInterval: \"month\",\n  priceCurrency: \"<value>\",\n  priceAmount: 247063,\n};\n```\n\n----------------------------------------\n\nTITLE: MeterQuantity Model Initialization in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize a MeterQuantity object in TypeScript. It shows setting the timestamp to a specific date and quantity to a numeric value. The MeterQuantity object is used to represent a measured quantity at a specific point in time.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/meterquantity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MeterQuantity } from \"@polar-sh/sdk/models/components/meterquantity.js\";\n\nlet value: MeterQuantity = {\n  timestamp: new Date(\"2025-09-09T11:00:36.714Z\"),\n  quantity: 10,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ProductPrice in TypeScript\nDESCRIPTION: This code snippet defines an example object of type `components.ProductPrice` with specified properties. It showcases fields like `createdAt`, `modifiedAt`, `id`, `isArchived`, `productId`, `type`, and `recurringInterval`. This example demonstrates how to define a product price object, specifically for recurring payments.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkproductprices.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPrice = {\n  createdAt: new Date(\"2023-11-12T09:36:50.641Z\"),\n  modifiedAt: new Date(\"2023-02-28T09:49:59.454Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  type: \"recurring\",\n  recurringInterval: \"month\",\n};\n```\n\n----------------------------------------\n\nTITLE: EventsListResponse Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `EventsListResponse` type from the `@polar-sh/sdk/models/operations/eventslist.js` module.  It creates an instance of `EventsListResponse` and populates it with sample data, including metadata, event details (ID, timestamp, name, source, organizationId, customerId, customer data), and pagination information. The example showcases the nested structure of the `EventsListResponse` object and the data types of its various properties. It is a demonstration of the expected structure of the response.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/eventslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventsListResponse } from \"@polar-sh/sdk/models/operations/eventslist.js\";\n\nlet value: EventsListResponse = {\n  result: {\n    items: [\n      {\n        metadata: {\n          \"key\": false,\n        },\n        id: \"<value>\",\n        timestamp: new Date(\"2025-12-15T19:16:18.260Z\"),\n        name: \"<value>\",\n        source: \"user\",\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        customerId: \"<value>\",\n        customer: {\n          id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n          createdAt: new Date(\"2023-08-14T08:34:45.247Z\"),\n          modifiedAt: new Date(\"2025-03-10T07:46:20.739Z\"),\n          metadata: {\n            \"key\": 227988,\n          },\n          externalId: \"usr_1337\",\n          email: \"customer@example.com\",\n          emailVerified: true,\n          name: \"John Doe\",\n          billingAddress: {\n            country: \"SE\",\n          },\n          taxId: [\n            \"911144442\",\n            \"us_ein\",\n          ],\n          organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n          deletedAt: new Date(\"2023-07-04T20:16:29.002Z\"),\n          avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n        },\n        externalCustomerId: \"<id>\",\n      },\n    ],\n    pagination: {\n      totalCount: 721389,\n      maxPage: 566141,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: ListResourceSubscription Usage Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create and populate a ListResourceSubscription object in TypeScript. It imports the ListResourceSubscription type, creates an instance, and populates its properties with example data, including arrays of subscriptions, and pagination information.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourcesubscription.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceSubscription } from \"@polar-sh/sdk/models/components/listresourcesubscription.js\";\n\nlet value: ListResourceSubscription = {\n  items: [\n    {\n      createdAt: new Date(\"2025-08-03T20:11:13.463Z\"),\n      modifiedAt: new Date(\"2025-12-20T05:17:36.698Z\"),\n      id: \"<value>\",\n      amount: 570759,\n      currency: \"Denar\",\n      recurringInterval: \"month\",\n      status: \"incomplete\",\n      currentPeriodStart: new Date(\"2023-02-03T16:09:01.508Z\"),\n      currentPeriodEnd: new Date(\"2023-06-22T05:37:36.578Z\"),\n      cancelAtPeriodEnd: false,\n      canceledAt: new Date(\"2025-05-12T09:48:05.553Z\"),\n      startedAt: new Date(\"2025-05-04T08:08:19.321Z\"),\n      endsAt: new Date(\"2023-03-22T09:05:03.177Z\"),\n      endedAt: new Date(\"2025-10-03T02:11:14.654Z\"),\n      customerId: \"<value>\",\n      productId: \"<value>\",\n      discountId: \"<value>\",\n      checkoutId: \"<value>\",\n      customerCancellationReason: \"too_complex\",\n      customerCancellationComment: \"<value>\",\n      metadata: {\n        \"key\": 803214,\n      },\n      customer: {\n        id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n        createdAt: new Date(\"2024-11-19T01:45:47.615Z\"),\n        modifiedAt: new Date(\"2023-03-27T20:08:54.216Z\"),\n        metadata: {\n          \"key\": 2073.05,\n        },\n        externalId: \"usr_1337\",\n        email: \"customer@example.com\",\n        emailVerified: true,\n        name: \"John Doe\",\n        billingAddress: {\n          country: \"SE\",\n        },\n        taxId: [\n          \"911144442\",\n          \"us_ein\",\n        ],\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        deletedAt: new Date(\"2024-02-10T00:54:32.146Z\"),\n        avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n      },\n      product: {\n        createdAt: new Date(\"2023-03-07T10:05:14.304Z\"),\n        modifiedAt: new Date(\"2025-11-15T15:17:20.320Z\"),\n        id: \"<value>\",\n        name: \"<value>\",\n        description:\n          \"frenetically circa nimble excitedly trouser once terraform flickering upwardly\",\n        recurringInterval: \"month\",\n        isRecurring: false,\n        isArchived: false,\n        organizationId: \"<value>\",\n        metadata: {\n          \"key\": \"<value>\",\n        },\n        prices: [\n          {\n            createdAt: new Date(\"2023-01-08T07:16:11.048Z\"),\n            modifiedAt: new Date(\"2025-04-18T07:32:22.812Z\"),\n            id: \"<value>\",\n            isArchived: false,\n            productId: \"<value>\",\n            recurringInterval: \"month\",\n          },\n        ],\n        benefits: [\n          {\n            id: \"<value>\",\n            createdAt: new Date(\"2025-03-15T12:44:12.271Z\"),\n            modifiedAt: new Date(\"2025-11-07T00:46:07.643Z\"),\n            description: \"grok till repeatedly venture willfully gadzooks\",\n            selectable: false,\n            deletable: false,\n            organizationId: \"<value>\",\n            metadata: {\n              \"key\": \"<value>\",\n            },\n            properties: {\n              prefix: \"<value>\",\n              expires: {\n                ttl: 885424,\n                timeframe: \"day\",\n              },\n              activations: {\n                limit: 919834,\n                enableCustomerAdmin: false,\n              },\n              limitUsage: 457039,\n            },\n          },\n        ],\n        medias: [\n          {\n            id: \"<value>\",\n            organizationId: \"<value>\",\n            name: \"<value>\",\n            path: \"/etc\",\n            mimeType: \"<value>\",\n            size: 492922,\n            storageVersion: \"<value>\",\n            checksumEtag: \"<value>\",\n            checksumSha256Base64: \"<value>\",\n            checksumSha256Hex: \"<value>\",\n            lastModifiedAt: new Date(\"2024-08-12T05:12:13.472Z\"),\n            version: \"<value>\",\n            isUploaded: false,\n            createdAt: new Date(\"2025-03-20T02:25:31.650Z\"),\n            sizeReadable: \"<value>\",\n            publicUrl: \"https://little-taxicab.biz/\",\n          },\n        ],\n        attachedCustomFields: [\n          {\n            customFieldId: \"<value>\",\n            customField: {\n              createdAt: new Date(\"2024-08-10T01:22:04.827Z\"),\n              modifiedAt: new Date(\"2023-09-29T01:26:28.000Z\"),\n              id: \"<value>\",\n              metadata: {\n                \"key\": \"<value>\",\n              },\n              slug: \"<value>\",\n              name: \"<value>\",\n              organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n              properties: {\n                options: [\n                  {\n                    value: \"<value>\",\n                    label: \"<value>\",\n                  },\n                ],\n              },\n            },\n            order: 238665,\n            required: false,\n          },\n        ],\n      },\n      discount: {\n        duration: \"repeating\",\n        type: \"percentage\",\n        amount: 291450,\n        currency: \"Balboa\",\n        createdAt: new Date(\"2023-06-30T13:36:44.690Z\"),\n        modifiedAt: new Date(\"2023-06-17T04:12:06.307Z\"),\n        id: \"<value>\",\n        metadata: {\n          \"key\": 3118.5,\n        },\n        name: \"<value>\",\n        code: \"<value>\",\n        startsAt: new Date(\"2025-06-11T23:02:44.049Z\"),\n        endsAt: new Date(\"2025-03-20T19:43:53.594Z\"),\n        maxRedemptions: 134142,\n        redemptionsCount: 26048,\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      },\n      prices: [\n        {\n          createdAt: new Date(\"2023-10-18T22:08:53.982Z\"),\n          modifiedAt: new Date(\"2024-05-26T00:52:37.759Z\"),\n          id: \"<value>\",\n          isArchived: false,\n          productId: \"<value>\",\n          recurringInterval: \"year\",\n          priceCurrency: \"<value>\",\n          priceAmount: 856369,\n        },\n      ],\n      meters: [\n        {\n          createdAt: new Date(\"2024-03-21T09:01:04.142Z\"),\n          modifiedAt: new Date(\"2025-02-11T11:20:23.848Z\"),\n          id: \"<value>\",\n          consumedUnits: 25,\n          creditedUnits: 100,\n          amount: 0,\n          meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n          meter: {\n            metadata: {\n              \"key\": 411783,\n            },\n            createdAt: new Date(\"2025-11-19T22:38:15.458Z\"),\n            modifiedAt: new Date(\"2025-01-23T10:46:43.284Z\"),\n            id: \"<value>\",\n            name: \"<value>\",\n            filter: {\n              conjunction: \"or\",\n              clauses: [],\n            },\n            aggregation: {\n              func: \"sum\",\n              property: \"<value>\",\n            },\n            organizationId: \"<value>\",\n          },\n        },\n      ],\n    },\n  ],\n  pagination: {\n    totalCount: 650511,\n    maxPage: 184038,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ProductPrice in TypeScript\nDESCRIPTION: Demonstrates how to define and instantiate a `ProductPrice` object in TypeScript, including setting properties such as createdAt, modifiedAt, id, productId, type, and recurringInterval.  This example provides a template for creating instances of this type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutproductprice.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPrice = {\n  createdAt: new Date(\"2023-11-12T09:36:50.641Z\"),\n  modifiedAt: new Date(\"2023-02-28T09:49:59.454Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  type: \"recurring\",\n  recurringInterval: \"month\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Event Object in Typescript\nDESCRIPTION: This snippet demonstrates how to import and initialize an `Event` object in TypeScript using the `@polar-sh/sdk/models/components/event.js` module. It shows how to populate the `Event` object with various properties, including metadata, IDs, timestamps, and nested objects like `customer` with its own properties. The snippet provides a concrete example of how to construct a valid `Event` object, highlighting the expected data types and formats for each field.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/event.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Event } from \"@polar-sh/sdk/models/components/event.js\";\n\nlet value: Event = {\n  metadata: {\n    \"key\": \"<value>\",\n  },\n  id: \"<value>\",\n  timestamp: new Date(\"2024-09-26T17:50:29.536Z\"),\n  name: \"<value>\",\n  source: \"system\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  customerId: \"<value>\",\n  customer: {\n    id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n    createdAt: new Date(\"2025-05-10T04:29:20.882Z\"),\n    modifiedAt: new Date(\"2024-10-21T14:57:43.528Z\"),\n    metadata: {\n      \"key\": 534176,\n    },\n    externalId: \"usr_1337\",\n    email: \"customer@example.com\",\n    emailVerified: true,\n    name: \"John Doe\",\n    billingAddress: {\n      country: \"US\",\n    },\n    taxId: [\n      \"FR61954506077\",\n      \"eu_vat\",\n    ],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    deletedAt: new Date(\"2023-08-01T00:23:09.141Z\"),\n    avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n  },\n  externalCustomerId: \"<id>\",\n};\n```\n\n----------------------------------------\n\nTITLE: OrganizationsGetRequest Example Usage TypeScript\nDESCRIPTION: Demonstrates how to import and instantiate the OrganizationsGetRequest model with a specific organization ID. This request object is used to fetch the details of an organization using the polar-js SDK.  The `id` field is a string that uniquely identifies the organization.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/organizationsgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrganizationsGetRequest } from \"@polar-sh/sdk/models/operations/organizationsget.js\";\n\nlet value: OrganizationsGetRequest = {\n  id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Using CustomersListResponse in TypeScript\nDESCRIPTION: This example demonstrates how to import and use the `CustomersListResponse` type from the `@polar-sh/sdk/models/operations/customerslist.js` module. It shows how to create an instance of `CustomersListResponse` and populate it with sample data, including customer details and pagination information. This object encapsulates the response format for listing customers.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomersListResponse } from \"@polar-sh/sdk/models/operations/customerslist.js\";\n\nlet value: CustomersListResponse = {\n  result: {\n    items: [\n      {\n        id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n        createdAt: new Date(\"2023-10-01T13:07:01.348Z\"),\n        modifiedAt: new Date(\"2025-07-12T09:52:19.357Z\"),\n        metadata: {\n          \"key\": false,\n        },\n        externalId: \"usr_1337\",\n        email: \"customer@example.com\",\n        emailVerified: true,\n        name: \"John Doe\",\n        billingAddress: {\n          country: \"FR\",\n        },\n        taxId: [\n          \"FR61954506077\",\n          \"eu_vat\",\n        ],\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        deletedAt: new Date(\"2025-02-27T07:44:33.641Z\"),\n        avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n      },\n    ],\n    pagination: {\n      totalCount: 282423,\n      maxPage: 468694,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerBenefitGrantCustom in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create and initialize a CustomerBenefitGrantCustom object with sample data in TypeScript.  It showcases the instantiation of the object with various properties like createdAt, modifiedAt, id, customerId, benefitId, subscriptionId, orderId, isGranted, isRevoked, customer, benefit, and properties. It utilizes the Date object and nested objects to populate the properties. It imports CustomerBenefitGrantCustom from the '@polar-sh/sdk/models/components/customerbenefitgrantcustom.js' module.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantcustom.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerBenefitGrantCustom } from \"@polar-sh/sdk/models/components/customerbenefitgrantcustom.js\";\n\nlet value: CustomerBenefitGrantCustom = {\n  createdAt: new Date(\"2025-08-01T02:53:08.451Z\"),\n  modifiedAt: new Date(\"2024-12-07T17:02:17.112Z\"),\n  id: \"<value>\",\n  grantedAt: new Date(\"2023-12-15T06:35:28.244Z\"),\n  revokedAt: new Date(\"2023-04-25T01:28:08.798Z\"),\n  customerId: \"<value>\",\n  benefitId: \"<value>\",\n  subscriptionId: \"<value>\",\n  orderId: \"<value>\",\n  isGranted: false,\n  isRevoked: false,\n  customer: {\n    createdAt: new Date(\"2024-05-14T07:25:20.920Z\"),\n    modifiedAt: new Date(\"2024-05-31T16:31:01.712Z\"),\n    id: \"<value>\",\n    email: \"Gladyce_Cormier75@yahoo.com\",\n    emailVerified: false,\n    name: \"<value>\",\n    billingAddress: {\n      country: \"US\",\n    },\n    taxId: [\n      \"911144442\",\n      \"us_ein\",\n    ],\n    oauthAccounts: {\n      \"key\": {\n        accountId: \"<id>\",\n        accountUsername: \"<value>\",\n      },\n    },\n  },\n  benefit: {\n    id: \"<value>\",\n    createdAt: new Date(\"2023-01-05T08:30:12.690Z\"),\n    modifiedAt: new Date(\"2023-02-11T06:42:23.973Z\"),\n    description: \"hmph including what zowie sonar that plus likewise finally\",\n    selectable: false,\n    deletable: false,\n    organizationId: \"<value>\",\n    metadata: {\n      \"key\": \"<value>\",\n    },\n    organization: {\n      createdAt: new Date(\"2025-06-20T02:49:07.375Z\"),\n      modifiedAt: new Date(\"2025-10-11T07:43:32.684Z\"),\n      id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      name: \"<value>\",\n      slug: \"<value>\",\n      avatarUrl: \"https://suburban-tuba.biz\",\n      email: \"Marjorie.MacGyver81@hotmail.com\",\n      website: \"<value>\",\n      socials: [\n        {\n          platform: \"other\",\n          url: \"https://immediate-nougat.com\",\n        },\n      ],\n      detailsSubmittedAt: new Date(\"2024-01-21T08:36:27.810Z\"),\n      featureSettings: {},\n      subscriptionSettings: {\n        allowMultipleSubscriptions: false,\n        allowCustomerUpdates: false,\n        prorationBehavior: \"invoice\",\n      },\n    },\n    properties: {\n      note: \"<value>\",\n    },\n  },\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ValidatedLicenseKey in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to create and populate a `ValidatedLicenseKey` object using data.  It imports the `ValidatedLicenseKey` type from the `@polar-sh/sdk/models/components/validatedlicensekey.js` module. The example shows how to assign values to various properties of the `ValidatedLicenseKey`, including primitive types (string, number, boolean), Date objects, and nested objects.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/validatedlicensekey.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ValidatedLicenseKey } from \"@polar-sh/sdk/models/components/validatedlicensekey.js\";\n\nlet value: ValidatedLicenseKey = {\n  id: \"<value>\",\n  organizationId: \"<value>\",\n  customerId: \"<value>\",\n  customer: {\n    id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n    createdAt: new Date(\"2024-08-17T02:59:17.361Z\"),\n    modifiedAt: new Date(\"2025-01-27T15:02:56.977Z\"),\n    metadata: {\n      \"key\": 358677,\n    },\n    externalId: \"usr_1337\",\n    email: \"customer@example.com\",\n    emailVerified: true,\n    name: \"John Doe\",\n    billingAddress: {\n      country: \"US\",\n    },\n    taxId: [\n      \"911144442\",\n      \"us_ein\",\n    ],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    deletedAt: new Date(\"2023-10-06T15:13:44.969Z\"),\n    avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n  },\n  benefitId: \"<value>\",\n  key: \"<key>\",\n  displayKey: \"<value>\",\n  status: \"revoked\",\n  limitActivations: 570776,\n  usage: 718020,\n  limitUsage: 583768,\n  validations: 885534,\n  lastValidatedAt: new Date(\"2025-06-12T09:40:53.789Z\"),\n  expiresAt: new Date(\"2025-12-31T07:21:14.827Z\"),\n};\n```\n\n----------------------------------------\n\nTITLE: CustomerPortalCustomerUpdate Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `CustomerPortalCustomerUpdate` component from the `@polar-sh/sdk/models/components/customerportalcustomerupdate.js` module. It creates an instance of the `CustomerPortalCustomerUpdate` object and sets the `billingAddress` field, including the `country` property within the billing address. It showcases a basic example of how to initialize and populate the object for customer updates.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerportalcustomerupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalCustomerUpdate } from \"@polar-sh/sdk/models/components/customerportalcustomerupdate.js\";\n\nlet value: CustomerPortalCustomerUpdate = {\n  billingAddress: {\n    country: \"SE\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a CustomersListRequest Instance in Typescript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the CustomersListRequest object in TypeScript. It imports the CustomersListRequest class from the '@polar-sh/sdk/models/operations/customerslist.js' module and initializes an object with a sample organizationId.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomersListRequest } from \"@polar-sh/sdk/models/operations/customerslist.js\";\n\nlet value: CustomersListRequest = {\n  organizationId: [\n    \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a ProductMediaFileCreate Object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a `ProductMediaFileCreate` object in TypeScript.  It imports the necessary class from the `@polar-sh/sdk` library and then initializes an object with the required properties, including organization ID, name, MIME type, size, and upload details containing parts.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productmediafilecreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductMediaFileCreate } from \"@polar-sh/sdk/models/components/productmediafilecreate.js\";\n\nlet value: ProductMediaFileCreate = {\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  name: \"<value>\",\n  mimeType: \"<value>\",\n  size: 379911,\n  upload: {\n    parts: [\n      {\n        number: 351529,\n        chunkStart: 398579,\n        chunkEnd: 386968,\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting a Benefit Using Standalone Function\nDESCRIPTION: This snippet shows how to delete a benefit using the standalone function `benefitsDelete`.  This approach allows for better tree-shaking. It initializes a `PolarCore` instance and then calls the `benefitsDelete` function. Error handling is implemented to catch potential errors during the deletion process.  The function returns a result object that needs to be checked for success.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/benefits/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { benefitsDelete } from \"@polar-sh/sdk/funcs/benefitsDelete.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await benefitsDelete(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  \n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Defining BenefitLicenseKeys Component Type in TypeScript\nDESCRIPTION: This code snippet showcases the structure of the `components.BenefitLicenseKeys` type, outlining properties such as `id`, `createdAt`, `modifiedAt`, `description`, `selectable`, `deletable`, `organizationId`, `metadata`, and `properties`. The metadata object contains a numeric value associated with a string key. The properties object includes fields like `prefix` (string), `expires` (object with `ttl` and `timeframe`), `activations` (object with `limit` and `enableCustomerAdmin`), and `limitUsage` (number).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefit.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitLicenseKeys = {\n  id: \"<value>\",\n  createdAt: new Date(\"2025-09-22T06:32:51.347Z\"),\n  modifiedAt: new Date(\"2024-09-20T21:32:20.766Z\"),\n  description: \"greedily whereas tightly brood hence\",\n  selectable: false,\n  deletable: false,\n  organizationId: \"<value>\",\n  metadata: {\n    \"key\": 219.12,\n  },\n  properties: {\n    prefix: \"<value>\",\n    expires: {\n      ttl: 916452,\n      timeframe: \"year\",\n    },\n    activations: {\n      limit: 639612,\n      enableCustomerAdmin: false,\n    },\n    limitUsage: 129142,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Get Meter by ID using Standalone Function - Typescript\nDESCRIPTION: This snippet shows how to retrieve a meter by its ID using a standalone function from the Polar SDK. It initializes the PolarCore with an access token and then calls the `metersGet` function. The result, including error handling, is logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/meters/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { metersGet } from \"@polar-sh/sdk/funcs/metersGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await metersGet(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating a Checkout Session in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a new checkout session using the `CheckoutCreate` component from the `@polar-sh/sdk`. It sets the customer's billing address country and includes a list of products (represented by the placeholder `<value>`).  The metadata set on the checkout session will be copied to the resulting order or subscription.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutCreate } from \"@polar-sh/sdk/models/components/checkoutcreate.js\";\n\nlet value: CheckoutCreate = {\n  customerBillingAddress: {\n    country: \"FR\",\n  },\n  products: [\n    \"<value>\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Define CustomerSessionCustomerExternalIDCreate Type (TypeScript)\nDESCRIPTION: This code snippet defines a TypeScript type `CustomerSessionCustomerExternalIDCreate` within the `components` namespace.  It enables creating a customer session using an external customer ID via the `customerExternalId` field. The value is a placeholder for a string representing the customer's external ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customersessionscreatecustomersessioncreate.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomerSessionCustomerExternalIDCreate = {\n  customerExternalId: \"<id>\",\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating BenefitsGrantsRequest Instance in Typescript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `BenefitsGrantsRequest` model in TypeScript. It imports the model from the `@polar-sh/sdk/models/operations/benefitsgrants.js` module and initializes an object with the required `id` property. The `id` property is a string used to filter benefits grants.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/benefitsgrantsrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitsGrantsRequest } from \"@polar-sh/sdk/models/operations/benefitsgrants.js\";\n\nlet value: BenefitsGrantsRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodGeneric in TypeScript\nDESCRIPTION: This code snippet demonstrates the structure and required fields for the `components.PaymentMethodGeneric` type in TypeScript. It shows how to create an object of this type, including properties like `id`, `type`, `createdAt`, and `default`. The `createdAt` property is initialized with a Date object. This PaymentMethod is meant to be a generic way to describe payment methods.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/items.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.PaymentMethodGeneric = {\n  id: \"<id>\",\n  type: \"<value>\",\n  createdAt: new Date(\"2025-04-30T09:20:24.064Z\"),\n  default: false,\n};\n```\n\n----------------------------------------\n\nTITLE: CustomerBenefitGrantDiscordUpdate Example - TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `CustomerBenefitGrantDiscordUpdate` component from the `@polar-sh/sdk`. It creates an instance of the component and sets the `accountId` property within the `properties` object.  The sdk `@polar-sh/sdk` must be installed to use this component.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantdiscordupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerBenefitGrantDiscordUpdate } from \"@polar-sh/sdk/models/components/customerbenefitgrantdiscordupdate.js\";\n\nlet value: CustomerBenefitGrantDiscordUpdate = {\n  properties: {\n    accountId: \"<id>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining LegacyRecurringProductPrice Type\nDESCRIPTION: This snippet defines the LegacyRecurringProductPrice type, demonstrating its structure and providing example values for its properties. It showcases properties like createdAt, modifiedAt, id, productId, recurringInterval, priceCurrency, minimumAmount, maximumAmount and presetAmount.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpublicproductprice.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.LegacyRecurringProductPrice = {\n  createdAt: new Date(\"2025-03-28T17:53:12.899Z\"),\n  modifiedAt: new Date(\"2024-08-10T00:40:01.700Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  recurringInterval: \"year\",\n  priceCurrency: \"<value>\",\n  minimumAmount: 981878,\n  maximumAmount: 962753,\n  presetAmount: 690635,\n};\n```\n\n----------------------------------------\n\nTITLE: Using CustomerPortalCustomersGetPaymentMethodsResponse in TypeScript\nDESCRIPTION: Demonstrates how to import and instantiate the CustomerPortalCustomersGetPaymentMethodsResponse object in TypeScript. The example shows populating the object with sample data including payment method items and pagination details. It requires importing the class from \"@polar-sh/sdk/models/operations/customerportalcustomersgetpaymentmethods.js\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalcustomersgetpaymentmethodsresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalCustomersGetPaymentMethodsResponse } from \"@polar-sh/sdk/models/operations/customerportalcustomersgetpaymentmethods.js\";\n\nlet value: CustomerPortalCustomersGetPaymentMethodsResponse = {\n  result: {\n    items: [\n      {\n        id: \"<id>\",\n        type: \"<value>\",\n        createdAt: new Date(\"2024-01-02T16:37:24.927Z\"),\n        default: false,\n      },\n    ],\n    pagination: {\n      totalCount: 374098,\n      maxPage: 472137,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: FilesUploadedRequest Example\nDESCRIPTION: This TypeScript code snippet demonstrates how to import the FilesUploadedRequest type from the @polar-sh/sdk/models/operations/filesuploaded.js module and create an instance of it. The example includes setting the 'id' property and providing a 'fileUploadCompleted' object with nested 'parts'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/filesuploadedrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FilesUploadedRequest } from \"@polar-sh/sdk/models/operations/filesuploaded.js\";\n\nlet value: FilesUploadedRequest = {\n  id: \"<value>\",\n  fileUploadCompleted: {\n    id: \"<id>\",\n    path: \"/etc/ppp\",\n    parts: [\n      {\n        number: 76501,\n        checksumEtag: \"<value>\",\n        checksumSha256Base64: \"<value>\",\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: ListResourceLicenseKeyRead Usage in TypeScript\nDESCRIPTION: This snippet shows how to import and use the ListResourceLicenseKeyRead type from the @polar-sh/sdk library. It initializes an instance of ListResourceLicenseKeyRead with sample data for items, including nested customer details and license key information, as well as pagination data. The example includes various fields like IDs, dates, email, addresses, and usage limits to simulate a real-world scenario.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourcelicensekeyread.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceLicenseKeyRead } from \"@polar-sh/sdk/models/components/listresourcelicensekeyread.js\";\n\nlet value: ListResourceLicenseKeyRead = {\n  items: [\n    {\n      id: \"<value>\",\n      organizationId: \"<value>\",\n      customerId: \"<value>\",\n      customer: {\n        id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n        createdAt: new Date(\"2024-12-20T06:39:15.874Z\"),\n        modifiedAt: new Date(\"2023-11-09T14:38:45.121Z\"),\n        metadata: {\n          \"key\": false,\n        },\n        externalId: \"usr_1337\",\n        email: \"customer@example.com\",\n        emailVerified: true,\n        name: \"John Doe\",\n        billingAddress: {\n          country: \"SE\",\n        },\n        taxId: [\n          \"FR61954506077\",\n          \"eu_vat\",\n        ],\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        deletedAt: new Date(\"2025-03-23T20:32:28.411Z\"),\n        avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n      },\n      benefitId: \"<value>\",\n      key: \"<key>\",\n      displayKey: \"<value>\",\n      status: \"revoked\",\n      limitActivations: 942998,\n      usage: 655411,\n      limitUsage: 185767,\n      validations: 829086,\n      lastValidatedAt: new Date(\"2023-10-16T07:46:42.445Z\"),\n      expiresAt: new Date(\"2025-05-27T20:24:19.765Z\"),\n    },\n  ],\n  pagination: {\n    totalCount: 378681,\n    maxPage: 432866,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerBenefitGrantDiscord in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a CustomerBenefitGrantDiscord object in TypeScript. It imports the CustomerBenefitGrantDiscord type and creates an instance with various properties, including nested objects like customer and benefit, using Date objects and string literals.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantdiscord.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerBenefitGrantDiscord } from \"@polar-sh/sdk/models/components/customerbenefitgrantdiscord.js\";\n\nlet value: CustomerBenefitGrantDiscord = {\n  createdAt: new Date(\"2023-11-07T19:12:06.912Z\"),\n  modifiedAt: new Date(\"2024-12-05T20:44:49.492Z\"),\n  id: \"<value>\",\n  grantedAt: new Date(\"2023-07-05T23:32:55.898Z\"),\n  revokedAt: new Date(\"2024-09-24T13:20:57.951Z\"),\n  customerId: \"<value>\",\n  benefitId: \"<value>\",\n  subscriptionId: \"<value>\",\n  orderId: \"<value>\",\n  isGranted: false,\n  isRevoked: false,\n  customer: {\n    createdAt: new Date(\"2025-05-31T01:15:54.765Z\"),\n    modifiedAt: new Date(\"2025-06-13T19:15:58.097Z\"),\n    id: \"<value>\",\n    email: \"Cordie_Kshlerin73@hotmail.com\",\n    emailVerified: false,\n    name: \"<value>\",\n    billingAddress: {\n      country: \"FR\",\n    },\n    taxId: [\n      \"911144442\",\n      \"us_ein\",\n    ],\n    oauthAccounts: {\n      \"key\": {\n        accountId: \"<id>\",\n        accountUsername: \"<value>\",\n      },\n    },\n  },\n  benefit: {\n    id: \"<value>\",\n    createdAt: new Date(\"2024-11-27T02:21:26.409Z\"),\n    modifiedAt: new Date(\"2025-08-29T18:45:47.041Z\"),\n    description: \"untrue duh who gradient achieve marvelous\",\n    selectable: false,\n    deletable: false,\n    organizationId: \"<value>\",\n    metadata: {\n      \"key\": \"<value>\",\n    },\n    organization: {\n      createdAt: new Date(\"2024-12-08T13:41:28.788Z\"),\n      modifiedAt: new Date(\"2025-09-26T22:11:25.025Z\"),\n      id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      name: \"<value>\",\n      slug: \"<value>\",\n      avatarUrl: \"https://grim-order.org\",\n      email: \"Dianna_Leuschke@yahoo.com\",\n      website: \"<value>\",\n      socials: [\n        {\n          platform: \"tiktok\",\n          url: \"https://live-sweatshop.name\",\n        },\n      ],\n      detailsSubmittedAt: new Date(\"2025-05-04T21:18:25.961Z\"),\n      featureSettings: {},\n      subscriptionSettings: {\n        allowMultipleSubscriptions: false,\n        allowCustomerUpdates: false,\n        prorationBehavior: \"prorate\",\n      },\n    },\n    properties: {\n      guildId: \"<id>\",\n    },\n  },\n  properties: {},\n};\n\n```\n\n----------------------------------------\n\nTITLE: Listing Downloadables (Standalone Function, TypeScript)\nDESCRIPTION: This snippet showcases the standalone function version for listing customer portal downloadables. It utilizes `PolarCore` for improved tree-shaking and calls `customerPortalDownloadablesList` directly. The `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/customerPortalDownloadablesList.js` modules are required, along with the `POLAR_CUSTOMER_SESSION` environment variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/downloadables/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalDownloadablesList } from \"@polar-sh/sdk/funcs/customerPortalDownloadablesList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalDownloadablesList(polar, {\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Number Field in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a custom field of type number using the `CustomFieldCreateNumber` schema from the `@polar-sh/sdk`. It shows how to define the required properties such as slug, name, organizationId, and properties to create an instance of the `CustomFieldCreateNumber` object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreatenumber.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldCreateNumber } from \"@polar-sh/sdk/models/components/customfieldcreatenumber.js\";\n\nlet value: CustomFieldCreateNumber = {\n  slug: \"<value>\",\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscountPercentageRepeatDuration in TypeScript\nDESCRIPTION: This code snippet initializes an object of type `DiscountPercentageRepeatDuration`. It demonstrates the use of `durationInMonths` for repeating discounts and `basisPoints` for specifying the discount percentage. The snippet includes example values for various properties such as dates, IDs, metadata, and a list of associated products.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discount.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DiscountPercentageRepeatDuration = {\n  duration: \"once\",\n  durationInMonths: 546953,\n  type: \"percentage\",\n  basisPoints: 67431,\n  createdAt: new Date(\"2024-05-30T14:20:06.139Z\"),\n  modifiedAt: new Date(\"2025-06-10T06:05:11.023Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 184333,\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2024-12-07T00:59:54.854Z\"),\n  endsAt: new Date(\"2025-01-22T14:00:25.247Z\"),\n  maxRedemptions: 156956,\n  redemptionsCount: 857023,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  products: [\n    {\n      metadata: {\n        \"key\": false,\n      },\n      createdAt: new Date(\"2025-07-17T16:19:05.848Z\"),\n      modifiedAt: new Date(\"2023-05-25T19:41:34.353Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description: \"gifted diligently standard diligently\",\n      recurringInterval: \"year\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Checkout Links with Standalone Function in Typescript\nDESCRIPTION: This code snippet demonstrates how to list checkout links using the standalone function `checkoutLinksList`. It initializes the PolarCore, sets the access token, calls the `checkoutLinksList` function, handles errors, and iterates through the results to log each page.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkoutlinks/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { checkoutLinksList } from \"@polar-sh/sdk/funcs/checkoutLinksList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await checkoutLinksList(polar, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting Subscription using Standalone Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve a subscription using the standalone function `subscriptionsGet` from the `@polar-sh/sdk/funcs/subscriptionsGet.js` package. It uses `PolarCore` for improved tree-shaking.  It initializes `PolarCore` with an access token and calls the `subscriptionsGet` function. Error handling is included. The input is the subscription ID and the output is the subscription data, or an error if not found.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/subscriptions/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { subscriptionsGet } from \"@polar-sh/sdk/funcs/subscriptionsGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await subscriptionsGet(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: S3FileUploadCompletedPart Usage Example TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the S3FileUploadCompletedPart model in TypeScript.  It imports the model from the specified path, creates an instance of the model, and assigns example values to the number, checksumEtag and checksumSha256Base64 properties.  This shows the expected structure and properties of the S3FileUploadCompletedPart object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/s3fileuploadcompletedpart.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { S3FileUploadCompletedPart } from \"@polar-sh/sdk/models/components/s3fileuploadcompletedpart.js\";\n\nlet value: S3FileUploadCompletedPart = {\n  number: 832730,\n  checksumEtag: \"<value>\",\n  checksumSha256Base64: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Client Configuration Update Example (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to create an `OAuth2ClientConfigurationUpdate` object and set its properties. It imports the `OAuth2ClientConfigurationUpdate` class from the `@polar-sh/sdk/models/components/oauth2clientconfigurationupdate.js` module.  The `redirectUris`, `clientName`, and `clientId` are set as part of the example.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/oauth2clientconfigurationupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OAuth2ClientConfigurationUpdate } from \"@polar-sh/sdk/models/components/oauth2clientconfigurationupdate.js\";\n\nlet value: OAuth2ClientConfigurationUpdate = {\n  redirectUris: [\n    \"https://well-worn-diver.net\",\n  ],\n  clientName: \"<value>\",\n  clientId: \"<id>\",\n};\n```\n\n----------------------------------------\n\nTITLE: CustomerMeter Model Instantiation in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and instantiate a `CustomerMeter` object in TypeScript. It shows how to populate the object's properties, including dates, strings, numbers, and nested objects like `customer` and `meter`. This example requires the `@polar-sh/sdk` package to be installed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customermeter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerMeter } from \"@polar-sh/sdk/models/components/customermeter.js\";\n\nlet value: CustomerMeter = {\n  id: \"<value>\",\n  createdAt: new Date(\"2024-07-26T23:24:52.777Z\"),\n  modifiedAt: new Date(\"2023-05-30T21:26:30.191Z\"),\n  customerId: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n  meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n  consumedUnits: 25,\n  creditedUnits: 100,\n  balance: 75,\n  customer: {\n    id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n    createdAt: new Date(\"2023-06-27T00:19:50.084Z\"),\n    modifiedAt: new Date(\"2023-04-04T08:43:09.673Z\"),\n    metadata: {\n      \"key\": 430755,\n    },\n    externalId: \"usr_1337\",\n    email: \"customer@example.com\",\n    emailVerified: true,\n    name: \"John Doe\",\n    billingAddress: {\n      country: \"SE\",\n    },\n    taxId: [\n      \"FR61954506077\",\n      \"eu_vat\",\n    ],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    deletedAt: new Date(\"2023-01-14T22:12:31.952Z\"),\n    avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n  },\n  meter: {\n    metadata: {\n      \"key\": 4078.83,\n    },\n    createdAt: new Date(\"2024-04-01T21:44:43.705Z\"),\n    modifiedAt: new Date(\"2024-08-01T20:01:49.531Z\"),\n    id: \"<value>\",\n    name: \"<value>\",\n    filter: {\n      conjunction: \"or\",\n      clauses: [],\n    },\n    aggregation: {\n      func: \"min\",\n      property: \"<value>\",\n    },\n    organizationId: \"<value>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a BenefitCustomCreate Instance in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `BenefitCustomCreate` type in TypeScript. It imports the type from the `@polar-sh/sdk/models/components/benefitcustomcreate.js` module and initializes it with sample values for `description`, `organizationId`, and `properties`. The `organizationId` should be a valid UUID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustomcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitCustomCreate } from \"@polar-sh/sdk/models/components/benefitcustomcreate.js\";\n\nlet value: BenefitCustomCreate = {\n  description: \"than while regularly hmph boastfully regarding\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: CheckoutLinkProduct Usage Example\nDESCRIPTION: Demonstrates how to import and define a `CheckoutLinkProduct` object in TypeScript. It showcases the structure and possible values for the object, including metadata, timestamps, IDs, descriptions, recurring intervals, boolean flags (isRecurring, isArchived), organization ID, prices, benefits, and medias. The example is intended to illustrate the expected format and types for the data.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkproduct.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutLinkProduct } from \"@polar-sh/sdk/models/components/checkoutlinkproduct.js\";\n\nlet value: CheckoutLinkProduct = {\n  metadata: {\n    \"key\": \"<value>\",\n  },\n  createdAt: new Date(\"2024-01-20T21:47:18.016Z\"),\n  modifiedAt: new Date(\"2024-04-23T10:43:58.737Z\"),\n  id: \"<value>\",\n  name: \"<value>\",\n  description: \"per indeed decriminalize pear cripple\",\n  recurringInterval: \"month\",\n  isRecurring: false,\n  isArchived: false,\n  organizationId: \"<value>\",\n  prices: [\n    {\n      createdAt: new Date(\"2025-06-17T08:38:56.438Z\"),\n      modifiedAt: new Date(\"2025-02-19T13:31:02.663Z\"),\n      id: \"<value>\",\n      isArchived: false,\n      productId: \"<value>\",\n      type: \"recurring\",\n      recurringInterval: \"month\",\n      priceCurrency: \"<value>\",\n      unitAmount: \"<value>\",\n      capAmount: 959351,\n      meterId: \"<value>\",\n      meter: {\n        id: \"<value>\",\n        name: \"<value>\",\n      },\n    },\n  ],\n  benefits: [\n    {\n      id: \"<value>\",\n      createdAt: new Date(\"2025-01-21T17:16:14.204Z\"),\n      modifiedAt: new Date(\"2024-08-02T10:59:24.245Z\"),\n      type: \"discord\",\n      description: \"case tusk aha\",\n      selectable: false,\n      deletable: false,\n      organizationId: \"<value>\",\n    },\n  ],\n  medias: [\n    {\n      id: \"<value>\",\n      organizationId: \"<value>\",\n      name: \"<value>\",\n      path: \"/System\",\n      mimeType: \"<value>\",\n      size: 612213,\n      storageVersion: \"<value>\",\n      checksumEtag: \"<value>\",\n      checksumSha256Base64: \"<value>\",\n      checksumSha256Hex: \"<value>\",\n      lastModifiedAt: new Date(\"2024-05-18T15:42:28.847Z\"),\n      version: \"<value>\",\n      isUploaded: false,\n      createdAt: new Date(\"2025-07-12T13:28:45.115Z\"),\n      sizeReadable: \"<value>\",\n      publicUrl: \"https://vengeful-collectivization.com\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Order Invoice with Standalone Function (Typescript)\nDESCRIPTION: This snippet shows how to use the standalone function `ordersInvoice` to retrieve an order's invoice data. It initializes `PolarCore` with an access token and calls the `ordersInvoice` function with the `PolarCore` instance and the order ID. It includes error handling for unsuccessful requests. Requires `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/ordersInvoice.js` dependencies.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/orders/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { ordersInvoice } from \"@polar-sh/sdk/funcs/ordersInvoice.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await ordersInvoice(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: WebhookOrderCreatedPayload Usage Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the WebhookOrderCreatedPayload type in TypeScript. It showcases the structure of the payload and provides example values for its properties, including nested objects and arrays, demonstrating how to construct and interact with this data structure.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookordercreatedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookOrderCreatedPayload } from \"@polar-sh/sdk/models/components/webhookordercreatedpayload.js\";\n\nlet value: WebhookOrderCreatedPayload = {\n  data: {\n    createdAt: new Date(\"2023-10-06T17:04:58.025Z\"),\n    modifiedAt: new Date(\"2024-12-27T21:37:16.242Z\"),\n    id: \"<value>\",\n    metadata: {\n      \"key\": \"<value>\",\n    },\n    status: \"refunded\",\n    paid: true,\n    subtotalAmount: 467357,\n    discountAmount: 1812,\n    netAmount: 693089,\n    amount: 893426,\n    taxAmount: 334746,\n    totalAmount: 866654,\n    refundedAmount: 493644,\n    refundedTaxAmount: 460641,\n    currency: \"Tanzanian Shilling\",\n    billingReason: \"subscription_update\",\n    billingAddress: {\n      country: \"SE\",\n    },\n    customerId: \"<value>\",\n    productId: \"<value>\",\n    discountId: \"<value>\",\n    subscriptionId: \"<value>\",\n    checkoutId: \"<value>\",\n    customer: {\n      id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n      createdAt: new Date(\"2025-03-15T16:51:44.459Z\"),\n      modifiedAt: new Date(\"2023-10-23T16:50:39.580Z\"),\n      metadata: {\n        \"key\": 314817,\n      },\n      externalId: \"usr_1337\",\n      email: \"customer@example.com\",\n      emailVerified: true,\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"FR\",\n      },\n      taxId: [\n        \"911144442\",\n        \"us_ein\",\n      ],\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      deletedAt: new Date(\"2023-07-02T05:54:26.991Z\"),\n      avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n    },\n    userId: \"<value>\",\n    product: {\n      metadata: {\n        \"key\": false,\n      },\n      createdAt: new Date(\"2023-12-03T03:44:13.678Z\"),\n      modifiedAt: new Date(\"2025-04-19T04:57:52.293Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description:\n        \"afraid pro and maroon insolence pause ah devastation yahoo yum\",\n      recurringInterval: \"year\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n    },\n    discount: {\n      duration: \"forever\",\n      type: \"percentage\",\n      basisPoints: 296011,\n      createdAt: new Date(\"2023-05-23T02:58:36.665Z\"),\n      modifiedAt: new Date(\"2024-05-14T04:35:11.944Z\"),\n      id: \"<value>\",\n      metadata: {\n        \"key\": \"<value>\",\n      },\n      name: \"<value>\",\n      code: \"<value>\",\n      startsAt: new Date(\"2024-02-05T14:53:34.516Z\"),\n      endsAt: new Date(\"2024-11-11T13:37:40.112Z\"),\n      maxRedemptions: 785414,\n      redemptionsCount: 94841,\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    },\n    subscription: {\n      metadata: {\n        \"key\": \"<value>\",\n      },\n      createdAt: new Date(\"2025-05-31T04:26:49.388Z\"),\n      modifiedAt: new Date(\"2023-06-30T21:23:01.391Z\"),\n      id: \"<value>\",\n      amount: 993291,\n      currency: \"Balboa\",\n      recurringInterval: \"month\",\n      status: \"incomplete\",\n      currentPeriodStart: new Date(\"2025-10-23T09:15:08.886Z\"),\n      currentPeriodEnd: new Date(\"2023-02-15T03:03:57.233Z\"),\n      cancelAtPeriodEnd: false,\n      canceledAt: new Date(\"2024-08-19T11:28:23.762Z\"),\n      startedAt: new Date(\"2023-12-16T11:47:17.463Z\"),\n      endsAt: new Date(\"2025-01-07T07:56:21.338Z\"),\n      endedAt: new Date(\"2023-04-21T10:31:24.947Z\"),\n      customerId: \"<value>\",\n      productId: \"<value>\",\n      discountId: \"<value>\",\n      checkoutId: \"<value>\",\n      customerCancellationReason: \"unused\",\n      customerCancellationComment: \"<value>\",\n    },\n    items: [\n      {\n        createdAt: new Date(\"2025-01-09T12:56:54.240Z\"),\n        modifiedAt: new Date(\"2023-05-31T11:36:17.716Z\"),\n        id: \"<value>\",\n        label: \"<value>\",\n        amount: 629238,\n        taxAmount: 823215,\n        proration: false,\n        productPriceId: \"<value>\",\n      },\n    ],\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: String Array Customer ID Filter - TypeScript\nDESCRIPTION: This snippet demonstrates how to filter customer meters by multiple customer IDs using a string array in TypeScript.  The `value` constant represents an array of customer IDs that will be used as a filter. No specific dependencies are required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customermeterslistqueryparamcustomeridfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Deleting Custom Field using Standalone Function (TypeScript)\nDESCRIPTION: This code snippet shows how to delete a custom field using the standalone function `customFieldsDelete` from the Polar JS SDK. It initializes `PolarCore` with an access token and then calls the `customFieldsDelete` function with the `PolarCore` instance and the ID of the custom field to be deleted. It includes error handling to check for unsuccessful responses and throws an error if the deletion fails. The example also assumes the access token is stored in the environment variable `POLAR_ACCESS_TOKEN`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customfields/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customFieldsDelete } from \"@polar-sh/sdk/funcs/customFieldsDelete.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await customFieldsDelete(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  \n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Defining Count Aggregation in TypeScript\nDESCRIPTION: This TypeScript snippet shows the structure of a `CountAggregation` object. In this example, the `CountAggregation` has no specific properties, implying it simply counts the number of filtered events. This aggregation type is useful when the meter calculation is based on the total number of occurrences.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/meteraggregation.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CountAggregation = {};\n```\n\n----------------------------------------\n\nTITLE: Filtering by Organization ID - String Array - Typescript\nDESCRIPTION: This code snippet demonstrates how to filter orders by multiple organization IDs using a string array in TypeScript. The `value` constant represents an array of strings, where each string is an organization ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/orderslistqueryparamorganizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: Creating WebhookRefundUpdatedPayload Object in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an instance of the WebhookRefundUpdatedPayload object in TypeScript. It imports the WebhookRefundUpdatedPayload type and then initializes a variable with a sample object that conforms to the structure of the payload. The data includes fields such as createdAt, modifiedAt, id, metadata, status, reason, amount, taxAmount, currency, organizationId, orderId, subscriptionId, customerId and revokeBenefits.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookrefundupdatedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookRefundUpdatedPayload } from \"@polar-sh/sdk/models/components/webhookrefundupdatedpayload.js\";\n\nlet value: WebhookRefundUpdatedPayload = {\n  data: {\n    createdAt: new Date(\"2024-02-09T00:15:20.778Z\"),\n    modifiedAt: new Date(\"2024-10-04T03:15:53.832Z\"),\n    id: \"<value>\",\n    metadata: {\n      \"key\": false,\n    },\n    status: \"pending\",\n    reason: \"other\",\n    amount: 171151,\n    taxAmount: 164949,\n    currency: \"Cordoba Oro\",\n    organizationId: \"<value>\",\n    orderId: \"<value>\",\n    subscriptionId: \"<value>\",\n    customerId: \"<value>\",\n    revokeBenefits: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: CustomerPortalBenefitGrantsListSecurity Usage - TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `CustomerPortalBenefitGrantsListSecurity` model from the `@polar-sh/sdk/models/operations/customerportalbenefitgrantslist.js` module. It creates an instance of the model, initializing the `customerSession` field with a sample string value. The `customerSession` field is required and is expected to be a string representing a customer session.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalbenefitgrantslistsecurity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalBenefitGrantsListSecurity } from \"@polar-sh/sdk/models/operations/customerportalbenefitgrantslist.js\";\n\nlet value: CustomerPortalBenefitGrantsListSecurity = {\n  customerSession: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Using ListResourceUnionPaymentMethodCardPaymentMethodGeneric in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `ListResourceUnionPaymentMethodCardPaymentMethodGeneric` type from the `@polar-sh/sdk/models/components/listresourceunionpaymentmethodcardpaymentmethodgeneric.js` module. It creates a sample object with `items` (an array of payment methods with card details) and `pagination` information.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourceunionpaymentmethodcardpaymentmethodgeneric.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceUnionPaymentMethodCardPaymentMethodGeneric } from \"@polar-sh/sdk/models/components/listresourceunionpaymentmethodcardpaymentmethodgeneric.js\";\n\nlet value: ListResourceUnionPaymentMethodCardPaymentMethodGeneric = {\n  items: [\n    {\n      id: \"<id>\",\n      createdAt: new Date(\"2023-12-24T08:15:36.580Z\"),\n      default: false,\n      card: {\n        brand: \"<value>\",\n        last4: \"<value>\",\n        expMonth: 228824,\n        expYear: 604303,\n      },\n    },\n  ],\n  pagination: {\n    totalCount: 10975,\n    maxPage: 609533,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: IntrospectTokenResponse Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the IntrospectTokenResponse type from the '@polar-sh/sdk' library. It creates an instance of IntrospectTokenResponse with example values for each field. This helps understand the structure and expected data types for creating valid IntrospectTokenResponse objects. It showcases the initialization of various properties like active, clientId, tokenType, scope, subType, sub, aud, iss, exp, and iat.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/introspecttokenresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IntrospectTokenResponse } from \"@polar-sh/sdk/models/components/introspecttokenresponse.js\";\n\nlet value: IntrospectTokenResponse = {\n  active: false,\n  clientId: \"<id>\",\n  tokenType: \"access_token\",\n  scope: \"<value>\",\n  subType: \"organization\",\n  sub: \"<value>\",\n  aud: \"<value>\",\n  iss: \"<value>\",\n  exp: 592665,\n  iat: 646198,\n};\n```\n\n----------------------------------------\n\nTITLE: SubscriptionCustomer Example\nDESCRIPTION: This code snippet demonstrates how to import and use the SubscriptionCustomer type from the '@polar-sh/sdk' library. It creates an instance of SubscriptionCustomer with various properties populated with sample data, including dates, strings, booleans, and nested objects. It shows how to create a SubscriptionCustomer object with all optional fields.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptioncustomer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubscriptionCustomer } from \"@polar-sh/sdk/models/components/subscriptioncustomer.js\";\n\nlet value: SubscriptionCustomer = {\n  id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n  createdAt: new Date(\"2025-11-11T19:45:03.999Z\"),\n  modifiedAt: new Date(\"2023-06-20T07:04:04.333Z\"),\n  metadata: {\n    \"key\": 7793.11,\n  },\n  externalId: \"usr_1337\",\n  email: \"customer@example.com\",\n  emailVerified: true,\n  name: \"John Doe\",\n  billingAddress: {\n    country: \"SE\",\n  },\n  taxId: [\n    \"911144442\",\n    \"us_ein\",\n  ],\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  deletedAt: new Date(\"2025-06-02T10:57:01.288Z\"),\n  avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n};\n```\n\n----------------------------------------\n\nTITLE: Listing License Keys Standalone Function in TypeScript\nDESCRIPTION: This snippet shows how to list license keys using the standalone function `customerPortalLicenseKeysList` from `@polar-sh/sdk/funcs/customerPortalLicenseKeysList.js`. It uses `PolarCore` for improved tree-shaking.  It retrieves license keys and handles potential errors. The `POLAR_CUSTOMER_SESSION` environment variable is used for authentication, and `organizationId` is passed as a parameter.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarlicensekeys/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalLicenseKeysList } from \"@polar-sh/sdk/funcs/customerPortalLicenseKeysList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalLicenseKeysList(polar, {\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Defining BenefitDownloadables Component Type in TypeScript\nDESCRIPTION: This code snippet demonstrates the structure of the `components.BenefitDownloadables` type, defining its properties such as `id`, `createdAt`, `modifiedAt`, `description`, `selectable`, `deletable`, `organizationId`, `metadata`, and `properties`. The metadata object holds a boolean value associated with a string key. The properties object contains an `archived` object, which contains a key-value pair with a boolean value, and a `files` array containing string values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefit.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitDownloadables = {\n  id: \"<value>\",\n  createdAt: new Date(\"2023-10-19T18:24:22.763Z\"),\n  modifiedAt: new Date(\"2025-04-23T14:51:34.166Z\"),\n  description: \"colorful er spectacles after worriedly testify times\",\n  selectable: false,\n  deletable: false,\n  organizationId: \"<value>\",\n  metadata: {\n    \"key\": false,\n  },\n  properties: {\n    archived: {\n      \"key\": false,\n    },\n    files: [\n      \"<value>\",\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Product with ProductCreate Schema - TypeScript\nDESCRIPTION: Demonstrates how to create a product using the ProductCreate schema from the Polar SDK. It defines the structure for product creation, including required fields like name, recurring interval, prices (with currency), and organization ID. Requires the `@polar-sh/sdk/models/components/productcreate.js` module.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductCreate } from \"@polar-sh/sdk/models/components/productcreate.js\";\n\nlet value: ProductCreate = {\n  name: \"<value>\",\n  recurringInterval: \"month\",\n  prices: [\n    {\n      priceCurrency: \"usd\",\n    },\n  ],\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: CustomerOrderInvoice Example in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the CustomerOrderInvoice model from the `@polar-sh/sdk/models/components/customerorderinvoice.js` module. It initializes an instance of the model with a sample URL, showing the expected structure and data types.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerorderinvoice.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerOrderInvoice } from \"@polar-sh/sdk/models/components/customerorderinvoice.js\";\n\nlet value: CustomerOrderInvoice = {\n  url: \"https://esteemed-tuber.info/\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining LegacyRecurringProductPrice Type - TypeScript\nDESCRIPTION: This code snippet demonstrates the structure of `LegacyRecurringProductPrice` with example values. It defines a product price that recurs, with specific fields like `createdAt`, `modifiedAt`, `productId`, `recurringInterval`, `priceCurrency`, `minimumAmount`, `maximumAmount`, and `presetAmount`.  It also includes an `isArchived` flag. Requires the `components` namespace to be defined.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customersubscriptionproductprices.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.LegacyRecurringProductPrice = {\n  createdAt: new Date(\"2025-03-28T17:53:12.899Z\"),\n  modifiedAt: new Date(\"2024-08-10T00:40:01.700Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  recurringInterval: \"year\",\n  priceCurrency: \"<value>\",\n  minimumAmount: 981878,\n  maximumAmount: 962753,\n  presetAmount: 690635,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Filter Object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the Filter object from the Polar.js SDK and initialize it with a conjunction property set to \"or\" and an empty array for the clauses property.  This Filter object is used for building complex filter expressions within the Polar platform.  No external dependencies beyond the Polar.js SDK are needed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/filter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Filter } from \"@polar-sh/sdk/models/components/filter.js\";\n\nlet value: Filter = {\n  conjunction: \"or\",\n  clauses: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ProductMediaFileRead Type in TypeScript\nDESCRIPTION: This code defines the structure for the `ProductMediaFileRead` type, which represents file information for product media. It contains properties such as `id`, `organizationId`, `name`, `path`, `mimeType`, `size`, `storageVersion`, various checksums, `lastModifiedAt`, `version`, `isUploaded`, `createdAt`, `sizeReadable`, and `publicUrl`. The timestamps `lastModifiedAt` and `createdAt` are represented using `Date` objects. The presence of `publicUrl` indicates that this file might be publicly accessible. The code demonstrates the structure for representing a product media file.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/fileread.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductMediaFileRead = {\n  id: \"<value>\",\n  organizationId: \"<value>\",\n  name: \"<value>\",\n  path: \"/usr/bin\",\n  mimeType: \"<value>\",\n  size: 176908,\n  storageVersion: \"<value>\",\n  checksumEtag: \"<value>\",\n  checksumSha256Base64: \"<value>\",\n  checksumSha256Hex: \"<value>\",\n  lastModifiedAt: new Date(\"2024-04-30T09:42:31.237Z\"),\n  version: \"<value>\",\n  isUploaded: false,\n  createdAt: new Date(\"2024-02-27T09:24:35.992Z\"),\n  sizeReadable: \"<value>\",\n  publicUrl: \"https://nippy-beret.org\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Customer ID Filter - TypeScript\nDESCRIPTION: This snippet demonstrates how to filter customer meters by a single customer ID using a string value in TypeScript.  The `value` constant represents a single customer ID that will be used as a filter. No specific dependencies are required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customermeterslistqueryparamcustomeridfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Creating a BenefitDiscord Instance in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `BenefitDiscord` model. It shows how to import the model from the `@polar-sh/sdk` library and populate its properties, including setting date values and string identifiers. It showcases the required fields for constructing a `BenefitDiscord` object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscord.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitDiscord } from \"@polar-sh/sdk/models/components/benefitdiscord.js\";\n\nlet value: BenefitDiscord = {\n  id: \"<value>\",\n  createdAt: new Date(\"2024-08-26T18:05:27.237Z\"),\n  modifiedAt: new Date(\"2024-03-07T01:32:52.206Z\"),\n  description:\n    \"justly innocently qua broadcast vestment amongst scholarship sleepily partridge\",\n  selectable: false,\n  deletable: false,\n  organizationId: \"<value>\",\n  metadata: {\n    \"key\": 545672,\n  },\n  properties: {\n    guildId: \"<id>\",\n    roleId: \"<id>\",\n    guildToken: \"<value>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: MetricsLimits Usage Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `MetricsLimits` model from the `@polar-sh/sdk` to define date limits for retrieving metrics. It includes setting a minimum date using `RFCDate` and configuring limits for different time intervals such as hour, day, week, month, and year. The `maxDays` field in each interval specifies the maximum number of days allowed for fetching metrics within that interval.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metricslimits.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MetricsLimits } from \"@polar-sh/sdk/models/components/metricslimits.js\";\nimport { RFCDate } from \"@polar-sh/sdk/types/rfcdate.js\";\n\nlet value: MetricsLimits = {\n  minDate: new RFCDate(\"2025-11-10\"),\n  intervals: {\n    hour: {\n      maxDays: 771853,\n    },\n    day: {\n      maxDays: 42115,\n    },\n    week: {\n      maxDays: 503939,\n    },\n    month: {\n      maxDays: 25026,\n    },\n    year: {\n      maxDays: 252923,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: CustomerPortalCustomerMetersListResponse Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the CustomerPortalCustomerMetersListResponse type from the @polar-sh/sdk/models/operations/customerportalcustomermeterslist.js module.  It shows how to create an instance of the object and populate its fields with sample data including customer meter information like id, dates, customerId, meterId, consumedUnits, creditedUnits, balance, and meter details, along with pagination details. Dependencies: @polar-sh/sdk.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalcustomermeterslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalCustomerMetersListResponse } from \"@polar-sh/sdk/models/operations/customerportalcustomermeterslist.js\";\n\nlet value: CustomerPortalCustomerMetersListResponse = {\n  result: {\n    items: [\n      {\n        id: \"<value>\",\n        createdAt: new Date(\"2024-12-18T19:03:05.416Z\"),\n        modifiedAt: new Date(\"2023-12-07T07:26:26.021Z\"),\n        customerId: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n        meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n        consumedUnits: 25,\n        creditedUnits: 100,\n        balance: 75,\n        meter: {\n          createdAt: new Date(\"2025-11-30T13:18:20.135Z\"),\n          modifiedAt: new Date(\"2025-11-26T21:40:33.194Z\"),\n          id: \"<value>\",\n          name: \"<value>\",\n        },\n      },\n    ],\n    pagination: {\n      totalCount: 506939,\n      maxPage: 196566,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using CustomerPortalBenefitGrantsListResponse in Typescript\nDESCRIPTION: This code snippet demonstrates how to import and use the CustomerPortalBenefitGrantsListResponse type from the '@polar-sh/sdk/models/operations/customerportalbenefitgrantslist.js' module. It creates an example object, populating it with sample data for various fields, including dates, strings, booleans, and nested objects. The purpose is to illustrate the expected structure and data types of the CustomerPortalBenefitGrantsListResponse object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalbenefitgrantslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalBenefitGrantsListResponse } from \"@polar-sh/sdk/models/operations/customerportalbenefitgrantslist.js\";\n\nlet value: CustomerPortalBenefitGrantsListResponse = {\n  result: {\n    items: [\n      {\n        createdAt: new Date(\"2025-08-15T03:00:35.833Z\"),\n        modifiedAt: new Date(\"2024-07-13T01:18:49.376Z\"),\n        id: \"<value>\",\n        grantedAt: new Date(\"2024-02-22T19:01:58.026Z\"),\n        revokedAt: new Date(\"2025-02-20T09:36:47.164Z\"),\n        customerId: \"<value>\",\n        benefitId: \"<value>\",\n        subscriptionId: \"<value>\",\n        orderId: \"<value>\",\n        isGranted: false,\n        isRevoked: false,\n        customer: {\n          createdAt: new Date(\"2025-08-21T04:13:05.787Z\"),\n          modifiedAt: new Date(\"2023-01-28T00:16:43.776Z\"),\n          id: \"<value>\",\n          email: \"Maxine.Rath65@gmail.com\",\n          emailVerified: false,\n          name: \"<value>\",\n          billingAddress: {\n            country: \"FR\",\n          },\n          taxId: [\n            \"911144442\",\n            \"us_ein\",\n          ],\n          oauthAccounts: {\n            \"key\": {\n              accountId: \"<id>\",\n              accountUsername: \"<value>\",\n            },\n          },\n        },\n        benefit: {\n          id: \"<value>\",\n          createdAt: new Date(\"2025-10-01T18:09:27.214Z\"),\n          modifiedAt: new Date(\"2024-03-13T17:16:29.953Z\"),\n          description: \"angrily expert considering kiddingly direct or\",\n          selectable: false,\n          deletable: false,\n          organizationId: \"<value>\",\n          metadata: {\n            \"key\": false,\n          },\n          organization: {\n            createdAt: new Date(\"2023-02-10T16:41:06.919Z\"),\n            modifiedAt: new Date(\"2025-11-05T01:09:17.832Z\"),\n            id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n            name: \"<value>\",\n            slug: \"<value>\",\n            avatarUrl: \"https://innocent-analogy.org\",\n            email: \"Major_Schaefer@yahoo.com\",\n            website: \"<value>\",\n            socials: [\n              {\n                platform: \"x\",\n                url: \"https://worldly-alligator.info/\",\n              },\n            ],\n            detailsSubmittedAt: new Date(\"2023-06-24T22:10:51.085Z\"),\n            featureSettings: {\n              issueFundingEnabled: false,\n              usageBasedBillingEnabled: false,\n            },\n            subscriptionSettings: {\n              allowMultipleSubscriptions: false,\n              allowCustomerUpdates: false,\n              prorationBehavior: \"prorate\",\n            },\n          },\n          properties: {\n            note: \"<value>\",\n          },\n        },\n        properties: {},\n      },\n    ],\n    pagination: {\n      totalCount: 37493,\n      maxPage: 274273,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using SubscriptionUpdateProduct in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `SubscriptionUpdateProduct` model from the `@polar-sh/sdk/models/components/subscriptionupdateproduct.js` module and create an instance of it.  The `productId` is a required field representing the ID of the new product. It shows a basic usage example, initializing the `productId` property.  The `prorationBehavior` is an optional parameter.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptionupdateproduct.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubscriptionUpdateProduct } from \"@polar-sh/sdk/models/components/subscriptionupdateproduct.js\";\n\nlet value: SubscriptionUpdateProduct = {\n  productId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: LicenseKeyActivationRead Example Initialization TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the LicenseKeyActivationRead model from the Polar JS SDK. It creates a sample object with properties like id, licenseKeyId, label, meta, createdAt, modifiedAt, and a nested licenseKey object, showcasing the structure and data types of the LicenseKeyActivationRead model. It also includes nested objects to represent the customer and billing address.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/licensekeyactivationread.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LicenseKeyActivationRead } from \"@polar-sh/sdk/models/components/licensekeyactivationread.js\";\n\nlet value: LicenseKeyActivationRead = {\n  id: \"<value>\",\n  licenseKeyId: \"<value>\",\n  label: \"<value>\",\n  meta: {},\n  createdAt: new Date(\"2023-03-28T22:29:03.085Z\"),\n  modifiedAt: new Date(\"2024-11-11T21:41:22.916Z\"),\n  licenseKey: {\n    id: \"<value>\",\n    organizationId: \"<value>\",\n    customerId: \"<value>\",\n    customer: {\n      id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n      createdAt: new Date(\"2025-04-10T22:51:31.196Z\"),\n      modifiedAt: new Date(\"2025-04-30T22:32:57.891Z\"),\n      metadata: {\n        \"key\": false,\n      },\n      externalId: \"usr_1337\",\n      email: \"customer@example.com\",\n      emailVerified: true,\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"FR\",\n      },\n      taxId: [\n        \"FR61954506077\",\n        \"eu_vat\",\n      ],\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      deletedAt: new Date(\"2023-07-05T04:04:30.477Z\"),\n      avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n    },\n    benefitId: \"<value>\",\n    key: \"<key>\",\n    displayKey: \"<value>\",\n    status: \"granted\",\n    limitActivations: 130388,\n    usage: 828619,\n    limitUsage: 516286,\n    validations: 736079,\n    lastValidatedAt: new Date(\"2023-10-18T03:09:23.414Z\"),\n    expiresAt: new Date(\"2025-03-29T11:53:32.986Z\"),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating BenefitGitHubRepository Instance in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `BenefitGitHubRepositoryCreate` object from the `@polar-sh/sdk`. It sets the description, organization ID, and repository properties, including the owner, name, and permission level. The created object can be used to create or update a GitHub repository benefit within the Polar system.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositorycreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitGitHubRepositoryCreate } from \"@polar-sh/sdk/models/components/benefitgithubrepositorycreate.js\";\n\nlet value: BenefitGitHubRepositoryCreate = {\n  description: \"obnoxiously about amidst likewise appertain muddy outside\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {\n    repositoryOwner: \"polarsource\",\n    repositoryName: \"private_repo\",\n    permission: \"maintain\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining BenefitCustom Component Type in TypeScript\nDESCRIPTION: This code snippet demonstrates the structure of the `components.BenefitCustom` type, defining its properties such as `id`, `createdAt`, `modifiedAt`, `description`, `selectable`, `deletable`, `organizationId`, `metadata`, and `properties`. The metadata object holds a boolean value associated with a string key, while the properties object contains a string value for the 'note' field. All new Date() objects are created with a specific timestamp.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefit.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitCustom = {\n  id: \"<value>\",\n  createdAt: new Date(\"2023-08-26T14:42:37.044Z\"),\n  modifiedAt: new Date(\"2023-08-21T09:17:20.239Z\"),\n  description: \"across atop whenever than until supposing\",\n  selectable: false,\n  deletable: false,\n  organizationId: \"<value>\",\n  metadata: {\n    \"key\": false,\n  },\n  properties: {\n    note: \"<value>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ProductPriceMeteredUnitCreate Type in TypeScript\nDESCRIPTION: Defines an object of type `components.ProductPriceMeteredUnitCreate`. This type is used when creating a metered unit price for a product. It requires the `meterId` (a string identifying the meter) and `unitAmount` (a string representing the cost per unit).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productupdateprices.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPriceMeteredUnitCreate = {\n  meterId: \"<value>\",\n  unitAmount: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Oauth2ClientsOauth2GetClientRequest Instance in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and instantiate the Oauth2ClientsOauth2GetClientRequest model in TypeScript. It showcases the creation of an object with the required 'clientId' property.  The 'clientId' is a string representing the unique identifier of the OAuth2 client.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/oauth2clientsoauth2getclientrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Oauth2ClientsOauth2GetClientRequest } from \"@polar-sh/sdk/models/operations/oauth2clientsoauth2getclient.js\";\n\nlet value: Oauth2ClientsOauth2GetClientRequest = {\n  clientId: \"<id>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing MeterUpdate Model in TypeScript\nDESCRIPTION: This code snippet shows how to import and initialize the MeterUpdate model from the polar-sh SDK in TypeScript.  The MeterUpdate model is used for updating meter configurations and contains fields like metadata, name, filter, and aggregation.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/meterupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MeterUpdate } from \"@polar-sh/sdk/models/components/meterupdate.js\";\n\nlet value: MeterUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: Creating Organization Avatar File in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an `OrganizationAvatarFileCreate` object with the required fields to upload an organization avatar using the Polar SDK.  It defines the structure including organizationId, name, mimeType, size, and upload parts. Requires importing the `OrganizationAvatarFileCreate` class from the `@polar-sh/sdk/models/components/organizationavatarfilecreate.js` module.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/organizationavatarfilecreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrganizationAvatarFileCreate } from \"@polar-sh/sdk/models/components/organizationavatarfilecreate.js\";\n\nlet value: OrganizationAvatarFileCreate = {\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  name: \"<value>\",\n  mimeType: \"<value>\",\n  size: 268104,\n  upload: {\n    parts: [\n      {\n        number: 510433,\n        chunkStart: 784114,\n        chunkEnd: 716140,\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: CustomerSubscriptionProduct Usage Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the CustomerSubscriptionProduct model in TypeScript. It creates a CustomerSubscriptionProduct object, populating its fields with example data. The example includes nested objects and arrays, showcasing the structure of the CustomerSubscriptionProduct model.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customersubscriptionproduct.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerSubscriptionProduct } from \"@polar-sh/sdk/models/components/customersubscriptionproduct.js\";\n\nlet value: CustomerSubscriptionProduct = {\n  createdAt: new Date(\"2025-10-21T05:59:03.909Z\"),\n  modifiedAt: new Date(\"2024-01-17T23:18:58.404Z\"),\n  id: \"<value>\",\n  name: \"<value>\",\n  description: \"slap phooey contrast cow bookend\",\n  recurringInterval: \"year\",\n  isRecurring: false,\n  isArchived: false,\n  organizationId: \"<value>\",\n  prices: [\n    {\n      createdAt: new Date(\"2024-02-29T06:40:54.155Z\"),\n      modifiedAt: new Date(\"2023-09-03T02:43:33.807Z\"),\n      id: \"<value>\",\n      isArchived: false,\n      productId: \"<value>\",\n      type: \"recurring\",\n      recurringInterval: \"month\",\n      priceCurrency: \"<value>\",\n      unitAmount: \"<value>\",\n      capAmount: 166490,\n      meterId: \"<value>\",\n      meter: {\n        id: \"<value>\",\n        name: \"<value>\",\n      },\n    },\n  ],\n  benefits: [\n    {\n      id: \"<value>\",\n      createdAt: new Date(\"2024-01-24T10:59:07.931Z\"),\n      modifiedAt: new Date(\"2023-04-28T04:00:20.719Z\"),\n      type: \"meter_credit\",\n      description: \"downchange that swill and square boohoo assail unlearn a\",\n      selectable: false,\n      deletable: false,\n      organizationId: \"<value>\",\n    },\n  ],\n  medias: [\n    {\n      id: \"<value>\",\n      organizationId: \"<value>\",\n      name: \"<value>\",\n      path: \"/usr/include\",\n      mimeType: \"<value>\",\n      size: 858807,\n      storageVersion: \"<value>\",\n      checksumEtag: \"<value>\",\n      checksumSha256Base64: \"<value>\",\n      checksumSha256Hex: \"<value>\",\n      lastModifiedAt: new Date(\"2024-05-21T10:07:32.776Z\"),\n      version: \"<value>\",\n      isUploaded: false,\n      createdAt: new Date(\"2025-05-29T04:30:51.881Z\"),\n      sizeReadable: \"<value>\",\n      publicUrl: \"https://selfish-markup.org/\",\n    },\n  ],\n  organization: {\n    createdAt: new Date(\"2025-03-12T15:31:40.057Z\"),\n    modifiedAt: new Date(\"2025-06-27T16:41:21.358Z\"),\n    id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    name: \"<value>\",\n    slug: \"<value>\",\n    avatarUrl: \"https://insecure-rationale.org\",\n    email: \"Maribel.Reinger28@hotmail.com\",\n    website: \"<value>\",\n    socials: [\n      {\n        platform: \"tiktok\",\n        url: \"https://frightened-jump.name/\",\n      },\n    ],\n    detailsSubmittedAt: new Date(\"2024-06-26T18:47:54.734Z\"),\n    featureSettings: {},\n    subscriptionSettings: {\n      allowMultipleSubscriptions: false,\n      allowCustomerUpdates: false,\n      prorationBehavior: \"prorate\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ListResourceCustomerSubscription in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and instantiate the `ListResourceCustomerSubscription` type from the `@polar-sh/sdk/models/components/listresourcecustomersubscription.js` module in TypeScript.  It creates a sample object with populated fields including dates, strings, numbers, and nested objects like products, prices, meters and organization. This example showcases the complex structure of the `ListResourceCustomerSubscription` object and its various nested properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourcecustomersubscription.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceCustomerSubscription } from \"@polar-sh/sdk/models/components/listresourcecustomersubscription.js\";\n\nlet value: ListResourceCustomerSubscription = {\n  items: [\n    {\n      createdAt: new Date(\"2024-03-11T02:59:33.614Z\"),\n      modifiedAt: new Date(\"2024-03-29T23:14:03.744Z\"),\n      id: \"<value>\",\n      amount: 451500,\n      currency: \"Surinam Dollar\",\n      recurringInterval: \"year\",\n      status: \"incomplete_expired\",\n      currentPeriodStart: new Date(\"2024-08-10T18:13:26.660Z\"),\n      currentPeriodEnd: new Date(\"2023-04-12T06:47:40.524Z\"),\n      cancelAtPeriodEnd: false,\n      canceledAt: new Date(\"2024-12-23T10:43:11.589Z\"),\n      startedAt: new Date(\"2025-06-14T17:06:06.978Z\"),\n      endsAt: new Date(\"2023-12-26T14:12:43.086Z\"),\n      endedAt: new Date(\"2023-02-12T19:10:30.424Z\"),\n      customerId: \"<value>\",\n      productId: \"<value>\",\n      discountId: \"<value>\",\n      checkoutId: \"<value>\",\n      customerCancellationReason: \"missing_features\",\n      customerCancellationComment: \"<value>\",\n      product: {\n        createdAt: new Date(\"2024-08-26T10:45:27.151Z\"),\n        modifiedAt: new Date(\"2023-04-22T21:32:32.069Z\"),\n        id: \"<value>\",\n        name: \"<value>\",\n        description:\n          \"structure in low runway enfold suburban phony lest unknown insignificant\",\n        recurringInterval: \"month\",\n        isRecurring: false,\n        isArchived: false,\n        organizationId: \"<value>\",\n        prices: [\n          {\n            createdAt: new Date(\"2025-05-08T05:59:03.649Z\"),\n            modifiedAt: new Date(\"2025-06-05T00:32:47.556Z\"),\n            id: \"<value>\",\n            isArchived: false,\n            productId: \"<value>\",\n            recurringInterval: \"year\",\n            priceCurrency: \"<value>\",\n            priceAmount: 250192,\n          },\n        ],\n        benefits: [\n          {\n            id: \"<value>\",\n            createdAt: new Date(\"2024-07-04T14:44:38.499Z\"),\n            modifiedAt: new Date(\"2025-06-20T00:53:11.661Z\"),\n            type: \"discord\",\n            description:\n              \"boo coil anti unknown brr pleased fortunately mid impressionable\",\n            selectable: false,\n            deletable: false,\n            organizationId: \"<value>\",\n          },\n        ],\n        medias: [\n          {\n            id: \"<value>\",\n            organizationId: \"<value>\",\n            name: \"<value>\",\n            path: \"/usr/sbin\",\n            mimeType: \"<value>\",\n            size: 593429,\n            storageVersion: \"<value>\",\n            checksumEtag: \"<value>\",\n            checksumSha256Base64: \"<value>\",\n            checksumSha256Hex: \"<value>\",\n            lastModifiedAt: new Date(\"2025-11-26T11:28:59.050Z\"),\n            version: \"<value>\",\n            isUploaded: false,\n            createdAt: new Date(\"2025-09-01T11:43:31.742Z\"),\n            sizeReadable: \"<value>\",\n            publicUrl: \"https://exhausted-import.net\",\n          },\n        ],\n        organization: {\n          createdAt: new Date(\"2023-06-05T14:22:16.192Z\"),\n          modifiedAt: new Date(\"2024-02-12T00:01:30.244Z\"),\n          id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n          name: \"<value>\",\n          slug: \"<value>\",\n          avatarUrl: \"https://small-fraudster.info/\",\n          email: \"Jaron2@yahoo.com\",\n          website: \"<value>\",\n          socials: [\n            {\n              platform: \"x\",\n              url: \"https://comfortable-bar.name\",\n            },\n          ],\n          detailsSubmittedAt: new Date(\"2023-09-27T02:24:48.308Z\"),\n          featureSettings: {},\n          subscriptionSettings: {\n            allowMultipleSubscriptions: false,\n            allowCustomerUpdates: false,\n            prorationBehavior: \"invoice\",\n          },\n        },\n      },\n      prices: [\n        {\n          createdAt: new Date(\"2025-09-11T17:51:40.735Z\"),\n          modifiedAt: new Date(\"2025-04-18T01:23:11.576Z\"),\n          id: \"<value>\",\n          isArchived: false,\n          productId: \"<value>\",\n          type: \"one_time\",\n          recurringInterval: \"month\",\n          priceCurrency: \"<value>\",\n          minimumAmount: 5730,\n          maximumAmount: 626389,\n          presetAmount: 241367,\n        },\n      ],\n      meters: [\n        {\n          createdAt: new Date(\"2025-03-22T15:54:14.387Z\"),\n          modifiedAt: new Date(\"2024-09-05T08:53:23.453Z\"),\n          id: \"<value>\",\n          consumedUnits: 25,\n          creditedUnits: 100,\n          amount: 0,\n          meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n          meter: {\n            createdAt: new Date(\"2025-01-13T01:23:29.478Z\"),\n            modifiedAt: new Date(\"2024-02-29T13:35:40.295Z\"),\n            id: \"<value>\",\n            name: \"<value>\",\n          },\n        },\n      ],\n    },\n  ],\n  pagination: {\n    totalCount: 660386,\n    maxPage: 57171,\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: PaymentMethodCardData Initialization in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a PaymentMethodCardData object in TypeScript using the @polar-sh/sdk.  It imports the necessary type and provides example values for the required fields: brand (string), last4 (string), expMonth (number), and expYear (number).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/paymentmethodcarddata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentMethodCardData } from \"@polar-sh/sdk/models/components/paymentmethodcarddata.js\";\n\nlet value: PaymentMethodCardData = {\n  brand: \"<value>\",\n  last4: \"<value>\",\n  expMonth: 540837,\n  expYear: 817945,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating EventsListNamesRequest Object in Typescript\nDESCRIPTION: This snippet demonstrates how to create and initialize an `EventsListNamesRequest` object with the `organizationId` field. It showcases the import statement and the assignment of a sample UUID to the field. The `EventsListNamesRequest` is from `@polar-sh/sdk/models/operations/eventslistnames.js`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/eventslistnamesrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventsListNamesRequest } from \"@polar-sh/sdk/models/operations/eventslistnames.js\";\n\nlet value: EventsListNamesRequest = {\n  organizationId: [\n    \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: WebhookCustomerCreatedPayload Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the WebhookCustomerCreatedPayload using TypeScript. It imports the necessary module and then creates an object with sample data for all the required and optional fields of the payload, like id, createdAt, modifiedAt, metadata, externalId, email, emailVerified, name, billingAddress, taxId, organizationId, deletedAt, and avatarUrl.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookcustomercreatedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookCustomerCreatedPayload } from \"@polar-sh/sdk/models/components/webhookcustomercreatedpayload.js\";\n\nlet value: WebhookCustomerCreatedPayload = {\n  data: {\n    id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n    createdAt: new Date(\"2024-07-14T00:49:20.816Z\"),\n    modifiedAt: new Date(\"2025-01-09T10:52:27.442Z\"),\n    metadata: {\n      \"key\": 234015,\n    },\n    externalId: \"usr_1337\",\n    email: \"customer@example.com\",\n    emailVerified: true,\n    name: \"John Doe\",\n    billingAddress: {\n      country: \"FR\",\n    },\n    taxId: [\n      \"911144442\",\n      \"us_ein\",\n    ],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    deletedAt: new Date(\"2024-01-10T21:34:54.851Z\"),\n    avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: BenefitGitHubRepositoryUpdate Example in TypeScript\nDESCRIPTION: This code snippet shows how to import the `BenefitGitHubRepositoryUpdate` component and create an instance of it with specific properties. It sets the `repositoryOwner` to \"polarsource\", `repositoryName` to \"private_repo\", and `permission` to \"push\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositoryupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitGitHubRepositoryUpdate } from \"@polar-sh/sdk/models/components/benefitgithubrepositoryupdate.js\";\n\nlet value: BenefitGitHubRepositoryUpdate = {\n  properties: {\n    repositoryOwner: \"polarsource\",\n    repositoryName: \"private_repo\",\n    permission: \"push\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Type Declaration\nDESCRIPTION: This code snippet demonstrates the use of a string array to filter by organization ID. The `value` is declared as an array of strings, with each string being a UUID representing an organization ID. This allows filtering by multiple organization IDs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/licensekeyslistqueryparamorganizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: Get Subscription using Standalone Function\nDESCRIPTION: This code snippet demonstrates how to retrieve a subscription using the standalone function `customerPortalSubscriptionsGet` from `@polar-sh/sdk/funcs/customerPortalSubscriptionsGet.js`. It utilizes `PolarCore` for tree-shaking. It requires the `customerSession` environment variable and a subscription `id`. Error handling is included to catch any failures during the request.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarsubscriptions/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalSubscriptionsGet } from \"@polar-sh/sdk/funcs/customerPortalSubscriptionsGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalSubscriptionsGet(polar, {\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: S3FileCreateMultipart Example\nDESCRIPTION: This TypeScript code snippet demonstrates how to create an instance of the `S3FileCreateMultipart` type from the `@polar-sh/sdk` library. It defines an object named `value` that conforms to the `S3FileCreateMultipart` type, populating its `parts` property with an array containing a single object representing a file part.  The `parts` array contains an object with `number`, `chunkStart`, and `chunkEnd` properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/s3filecreatemultipart.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { S3FileCreateMultipart } from \"@polar-sh/sdk/models/components/s3filecreatemultipart.js\";\n\nlet value: S3FileCreateMultipart = {\n  parts: [\n    {\n      number: 420928,\n      chunkStart: 106471,\n      chunkEnd: 8097,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: BenefitsListRequest Example Usage - TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `BenefitsListRequest` object in TypeScript. It imports the `BenefitsListRequest` class from the `@polar-sh/sdk/models/operations/benefitslist.js` module and initializes it with an `organizationId`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/benefitslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitsListRequest } from \"@polar-sh/sdk/models/operations/benefitslist.js\";\n\nlet value: BenefitsListRequest = {\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Using WebhookBenefitUpdatedPayload Model (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import and use the WebhookBenefitUpdatedPayload model in TypeScript.  It creates an instance of the model with example data for its properties, including timestamps and nested properties. The model is imported from the `@polar-sh/sdk/models/components/webhookbenefitupdatedpayload.js` module.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookbenefitupdatedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookBenefitUpdatedPayload } from \"@polar-sh/sdk/models/components/webhookbenefitupdatedpayload.js\";\n\nlet value: WebhookBenefitUpdatedPayload = {\n  data: {\n    id: \"<value>\",\n    createdAt: new Date(\"2024-05-19T01:49:21.918Z\"),\n    modifiedAt: new Date(\"2024-08-16T12:57:27.941Z\"),\n    description: \"cripple across impure dishonor\",\n    selectable: false,\n    deletable: false,\n    organizationId: \"<value>\",\n    metadata: {\n      \"key\": false,\n    },\n    properties: {\n      repositoryOwner: \"polarsource\",\n      repositoryName: \"private_repo\",\n      permission: \"maintain\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer State with Standalone Function\nDESCRIPTION: This snippet illustrates how to fetch customer state data using the standalone function from the Polar SDK, offering better tree-shaking. It shows initializing PolarCore and calling the specific customer state retrieval function.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customers/README.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customersGetStateExternal } from \"@polar-sh/sdk/funcs/customersGetStateExternal.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await customersGetStateExternal(polar, {\n    externalId: \"<id>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Request Token using Standalone Function\nDESCRIPTION: This snippet demonstrates how to request a token using the standalone `oauth2Token` function from the Polar JS SDK. It initializes a `PolarCore` instance, then calls the function with the core instance and an object containing the necessary parameters, such as `clientId`, `clientSecret`, `code`, and `redirectUri`. Error handling is also included.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/oauth2/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { oauth2Token } from \"@polar-sh/sdk/funcs/oauth2Token.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await oauth2Token(polar, {\n    clientId: \"<id>\",\n    clientSecret: \"<value>\",\n    code: \"<value>\",\n    redirectUri: \"https://ajar-comparison.name\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth2 Clients (Standalone Function)\nDESCRIPTION: This snippet showcases creating OAuth2 clients using the standalone function version provided by the Polar SDK. It imports `PolarCore` and `oauth2ClientsCreate`, initializes `PolarCore` with an access token and calls `oauth2ClientsCreate` with the core instance and the request params which include `redirectUris` and `clientName`. The accessToken is retrieved from the environment variable `POLAR_ACCESS_TOKEN`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/clients/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { oauth2ClientsCreate } from \"@polar-sh/sdk/funcs/oauth2ClientsCreate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await oauth2ClientsCreate(polar, {\n    redirectUris: [\n      \"https://inferior-chainstay.com\",\n    ],\n    clientName: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerSubscriptionMeter in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize a CustomerSubscriptionMeter object in TypeScript. It sets values for properties such as createdAt, modifiedAt, id, consumedUnits, creditedUnits, amount, meterId, and meter, showcasing the object's structure and data types.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customersubscriptionmeter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerSubscriptionMeter } from \"@polar-sh/sdk/models/components/customersubscriptionmeter.js\";\n\nlet value: CustomerSubscriptionMeter = {\n  createdAt: new Date(\"2023-05-31T13:00:37.766Z\"),\n  modifiedAt: new Date(\"2025-07-17T10:41:42.657Z\"),\n  id: \"<value>\",\n  consumedUnits: 25,\n  creditedUnits: 100,\n  amount: 0,\n  meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n  meter: {\n    createdAt: new Date(\"2025-05-29T17:54:25.258Z\"),\n    modifiedAt: new Date(\"2023-05-13T23:55:31.561Z\"),\n    id: \"<value>\",\n    name: \"<value>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: MetersListRequest Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the MetersListRequest object in TypeScript. It imports the MetersListRequest class from the `@polar-sh/sdk/models/operations/meterslist.js` module and initializes it with an organizationId filter.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/meterslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MetersListRequest } from \"@polar-sh/sdk/models/operations/meterslist.js\";\n\nlet value: MetersListRequest = {\n  organizationId: [\n    \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Import and Initialize Conditions Type in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `Conditions` type from the `@polar-sh/sdk/models/components/licensekeyvalidate.js` module and initialize an empty object of that type. This is typically used as part of license key validation processes.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/conditions.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Conditions } from \"@polar-sh/sdk/models/components/licensekeyvalidate.js\";\n\nlet value: Conditions = {};\n```\n\n----------------------------------------\n\nTITLE: Using BenefitGitHubRepositoryProperties TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `BenefitGitHubRepositoryProperties` type from the `@polar-sh/sdk/models/components/benefitgithubrepositoryproperties.js` module in TypeScript. It creates an object with the repository owner, repository name, and permission.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositoryproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitGitHubRepositoryProperties } from \"@polar-sh/sdk/models/components/benefitgithubrepositoryproperties.js\";\n\nlet value: BenefitGitHubRepositoryProperties = {\n  repositoryOwner: \"polarsource\",\n  repositoryName: \"private_repo\",\n  permission: \"push\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating CheckoutLinksDeleteRequest in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a CheckoutLinksDeleteRequest object in TypeScript using the @polar-sh/sdk. It imports the necessary class and shows how to instantiate it with the required 'id' parameter. The 'id' parameter is a string representing the checkout link ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutlinksdeleterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutLinksDeleteRequest } from \"@polar-sh/sdk/models/operations/checkoutlinksdelete.js\";\n\nlet value: CheckoutLinksDeleteRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerPortalOrganizationsGetRequest in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import and define an object of type `CustomerPortalOrganizationsGetRequest` from the `@polar-sh/sdk` library. The `slug` field is set to a placeholder value. This request is likely used to retrieve organization-specific information from a customer portal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalorganizationsgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalOrganizationsGetRequest } from \"@polar-sh/sdk/models/operations/customerportalorganizationsget.js\";\n\nlet value: CustomerPortalOrganizationsGetRequest = {\n  slug: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: S3FileCreatePart Example Usage TypeScript\nDESCRIPTION: Demonstrates how to import and instantiate the `S3FileCreatePart` model from the `@polar-sh/sdk` library. This example shows how to create an object with the required properties: `number`, `chunkStart`, and `chunkEnd`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/s3filecreatepart.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { S3FileCreatePart } from \"@polar-sh/sdk/models/components/s3filecreatepart.js\";\n\nlet value: S3FileCreatePart = {\n  number: 566480,\n  chunkStart: 276665,\n  chunkEnd: 862816,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a BenefitGitHubRepository Instance in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an instance of the `BenefitGitHubRepository` object with various properties, including the repository owner, repository name, and permission level. It imports the `BenefitGitHubRepository` type from the `@polar-sh/sdk/models/components/benefitgithubrepository.js` module.  The object includes metadata and other required properties such as selectable and deletable flags. Note that dates are represented as Date objects, which need to be properly initialized.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepository.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitGitHubRepository } from \"@polar-sh/sdk/models/components/benefitgithubrepository.js\";\n\nlet value: BenefitGitHubRepository = {\n  id: \"<value>\",\n  createdAt: new Date(\"2025-05-21T23:00:10.312Z\"),\n  modifiedAt: new Date(\"2025-03-02T20:10:49.911Z\"),\n  description: \"apud runway as among\",\n  selectable: false,\n  deletable: false,\n  organizationId: \"<value>\",\n  metadata: {\n    \"key\": false,\n  },\n  properties: {\n    repositoryOwner: \"polarsource\",\n    repositoryName: \"private_repo\",\n    permission: \"pull\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating OrganizationAvatarFileRead Instance in Typescript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `OrganizationAvatarFileRead` object in TypeScript. It imports the necessary class and then instantiates it with example values for each of its properties. The dates are initialized as specific date objects using the `Date` constructor.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/organizationavatarfileread.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrganizationAvatarFileRead } from \"@polar-sh/sdk/models/components/organizationavatarfileread.js\";\n\nlet value: OrganizationAvatarFileRead = {\n  id: \"<value>\",\n  organizationId: \"<value>\",\n  name: \"<value>\",\n  path: \"/private/var\",\n  mimeType: \"<value>\",\n  size: 465926,\n  storageVersion: \"<value>\",\n  checksumEtag: \"<value>\",\n  checksumSha256Base64: \"<value>\",\n  checksumSha256Hex: \"<value>\",\n  lastModifiedAt: new Date(\"2025-05-14T00:34:28.077Z\"),\n  version: \"<value>\",\n  isUploaded: false,\n  createdAt: new Date(\"2025-03-08T06:38:22.109Z\"),\n  sizeReadable: \"<value>\",\n  publicUrl: \"https://winding-haversack.name/\",\n};\n```\n\n----------------------------------------\n\nTITLE: BenefitGitHubRepositorySubscriber Example in TypeScript\nDESCRIPTION: This code demonstrates how to create a BenefitGitHubRepositorySubscriber object in TypeScript using the polar-js SDK. It shows how to initialize the object with various properties, including dates, strings, booleans, and nested objects like organization and properties. This example can be used as a template to create instances of this model in a Polar application.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositorysubscriber.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitGitHubRepositorySubscriber } from \"@polar-sh/sdk/models/components/benefitgithubrepositorysubscriber.js\";\n\nlet value: BenefitGitHubRepositorySubscriber = {\n  id: \"<value>\",\n  createdAt: new Date(\"2025-04-15T22:53:38.434Z\"),\n  modifiedAt: new Date(\"2025-12-06T21:44:01.922Z\"),\n  description: \"aside soupy instead whether\",\n  selectable: false,\n  deletable: false,\n  organizationId: \"<value>\",\n  metadata: {\n    \"key\": 424862,\n  },\n  organization: {\n    createdAt: new Date(\"2024-12-30T12:17:44.228Z\"),\n    modifiedAt: new Date(\"2023-03-02T04:55:59.069Z\"),\n    id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    name: \"<value>\",\n    slug: \"<value>\",\n    avatarUrl: \"https://indolent-knight.info\",\n    email: \"Bernita42@gmail.com\",\n    website: \"<value>\",\n    socials: [\n      {\n        platform: \"github\",\n        url: \"https://hard-to-find-futon.org/\",\n      },\n    ],\n    detailsSubmittedAt: new Date(\"2025-09-05T13:19:21.876Z\"),\n    featureSettings: {},\n    subscriptionSettings: {\n      allowMultipleSubscriptions: false,\n      allowCustomerUpdates: false,\n      prorationBehavior: \"prorate\",\n    },\n  },\n  properties: {\n    repositoryOwner: \"polarsource\",\n    repositoryName: \"private_repo\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Get Customer Meter by ID with Polar SDK\nDESCRIPTION: Shows how to retrieve a customer meter by its ID using the Polar SDK.  The SDK is initialized with an access token, and the `customerMeters.get` method is called with the ID of the desired customer meter. The retrieved customer meter data is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customermeters/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerMeters.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: BenefitsDeleteRequest Usage Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `BenefitsDeleteRequest` model from the `@polar-sh/sdk/models/operations/benefitsdelete.js` module.  It initializes an object of type `BenefitsDeleteRequest` with a string value for the `id` property.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/benefitsdeleterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitsDeleteRequest } from \"@polar-sh/sdk/models/operations/benefitsdelete.js\";\n\nlet value: BenefitsDeleteRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ProductPriceFixedCreate in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a `ProductPriceFixedCreate` object in TypeScript using the `@polar-sh/sdk` library. It imports the schema and creates an instance with a specified `priceAmount`. The `amountType` field is automatically set by the API, and `priceCurrency` is optional.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productpricefixedcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductPriceFixedCreate } from \"@polar-sh/sdk/models/components/productpricefixedcreate.js\";\n\nlet value: ProductPriceFixedCreate = {\n  priceAmount: 887970,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating WebhookSubscriptionUpdatedPayload in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create and populate a `WebhookSubscriptionUpdatedPayload` object in TypeScript. It imports the `WebhookSubscriptionUpdatedPayload` type from the `@polar-sh/sdk/models/components/webhooksubscriptionupdatedpayload.js` module and assigns a sample object with various fields, including dates, IDs, amounts, and nested objects for customer, product, discount, prices and meters.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhooksubscriptionupdatedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookSubscriptionUpdatedPayload } from \"@polar-sh/sdk/models/components/webhooksubscriptionupdatedpayload.js\";\n\nlet value: WebhookSubscriptionUpdatedPayload = {\n  data: {\n    createdAt: new Date(\"2024-09-20T20:10:21.776Z\"),\n    modifiedAt: new Date(\"2024-05-30T19:17:05.187Z\"),\n    id: \"<value>\",\n    amount: 260850,\n    currency: \"Iranian Rial\",\n    recurringInterval: \"year\",\n    status: \"unpaid\",\n    currentPeriodStart: new Date(\"2025-01-16T02:08:01.537Z\"),\n    currentPeriodEnd: new Date(\"2024-11-27T03:44:13.940Z\"),\n    cancelAtPeriodEnd: false,\n    canceledAt: new Date(\"2024-09-09T05:19:56.213Z\"),\n    startedAt: new Date(\"2023-02-20T01:26:56.034Z\"),\n    endsAt: new Date(\"2025-11-23T16:59:17.145Z\"),\n    endedAt: new Date(\"2025-01-03T00:40:49.320Z\"),\n    customerId: \"<value>\",\n    productId: \"<value>\",\n    discountId: \"<value>\",\n    checkoutId: \"<value>\",\n    customerCancellationReason: \"unused\",\n    customerCancellationComment: \"<value>\",\n    metadata: {\n      \"key\": false,\n    },\n    customer: {\n      id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n      createdAt: new Date(\"2024-08-12T20:01:22.287Z\"),\n      modifiedAt: new Date(\"2024-07-23T06:36:50.439Z\"),\n      metadata: {\n        \"key\": 5354.74,\n      },\n      externalId: \"usr_1337\",\n      email: \"customer@example.com\",\n      emailVerified: true,\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"US\",\n      },\n      taxId: [\n        \"FR61954506077\",\n        \"eu_vat\",\n      ],\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      deletedAt: new Date(\"2023-06-09T04:21:37.227Z\"),\n      avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n    },\n    product: {\n      createdAt: new Date(\"2024-02-17T10:00:08.680Z\"),\n      modifiedAt: new Date(\"2025-12-29T11:36:05.589Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description: \"brr tricky zowie anesthetize annex\",\n      recurringInterval: \"year\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n      metadata: {\n        \"key\": false,\n      },\n      prices: [\n        {\n          createdAt: new Date(\"2025-02-26T01:11:26.566Z\"),\n          modifiedAt: new Date(\"2024-02-18T01:49:21.003Z\"),\n          id: \"<value>\",\n          isArchived: false,\n          productId: \"<value>\",\n          recurringInterval: \"year\",\n        },\n      ],\n      benefits: [\n        {\n          id: \"<value>\",\n          createdAt: new Date(\"2023-12-09T05:14:07.293Z\"),\n          modifiedAt: new Date(\"2024-11-04T04:04:30.317Z\"),\n          description:\n            \"quaintly gratefully yum tremendously lazily vivacious sesame yet bewail\",\n          selectable: false,\n          deletable: false,\n          organizationId: \"<value>\",\n          metadata: {\n            \"key\": 210451,\n          },\n          properties: {\n            units: 807621,\n            meterId: \"<value>\",\n          },\n        },\n      ],\n      medias: [\n        {\n          id: \"<value>\",\n          organizationId: \"<value>\",\n          name: \"<value>\",\n          path: \"/srv\",\n          mimeType: \"<value>\",\n          size: 558056,\n          storageVersion: \"<value>\",\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n          checksumSha256Hex: \"<value>\",\n          lastModifiedAt: new Date(\"2025-02-05T12:45:04.304Z\"),\n          version: \"<value>\",\n          isUploaded: false,\n          createdAt: new Date(\"2025-04-15T16:46:37.097Z\"),\n          sizeReadable: \"<value>\",\n          publicUrl: \"https://blond-signature.biz/\",\n        },\n      ],\n      attachedCustomFields: [\n        {\n          customFieldId: \"<value>\",\n          customField: {\n            createdAt: new Date(\"2023-10-08T08:36:56.779Z\"),\n            modifiedAt: new Date(\"2024-12-15T16:28:15.952Z\"),\n            id: \"<value>\",\n            metadata: {\n              \"key\": \"<value>\",\n            },\n            slug: \"<value>\",\n            name: \"<value>\",\n            organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n            properties: {},\n          },\n          order: 850928,\n          required: false,\n        },\n      ],\n    },\n    discount: {\n      duration: \"forever\",\n      type: \"percentage\",\n      amount: 596610,\n      currency: \"Jamaican Dollar\",\n      createdAt: new Date(\"2024-12-01T12:57:56.793Z\"),\n      modifiedAt: new Date(\"2023-08-28T23:54:27.461Z\"),\n      id: \"<value>\",\n      metadata: {\n        \"key\": 1805.21,\n      },\n      name: \"<value>\",\n      code: \"<value>\",\n      startsAt: new Date(\"2025-11-14T14:40:13.024Z\"),\n      endsAt: new Date(\"2025-07-07T15:51:16.470Z\"),\n      maxRedemptions: 955414,\n      redemptionsCount: 105262,\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    },\n    prices: [\n      {\n        createdAt: new Date(\"2023-01-18T21:48:10.883Z\"),\n        modifiedAt: new Date(\"2025-10-08T13:23:38.203Z\"),\n        id: \"<value>\",\n        isArchived: false,\n        productId: \"<value>\",\n        type: \"recurring\",\n        recurringInterval: \"year\",\n        priceCurrency: \"<value>\",\n        unitAmount: \"<value>\",\n        capAmount: 843146,\n        meterId: \"<value>\",\n        meter: {\n          id: \"<value>\",\n          name: \"<value>\",\n        },\n      },\n    ],\n    meters: [\n      {\n        createdAt: new Date(\"2025-10-16T00:45:41.650Z\"),\n        modifiedAt: new Date(\"2025-05-23T00:35:37.316Z\"),\n        id: \"<value>\",\n        consumedUnits: 25,\n        creditedUnits: 100,\n        amount: 0,\n        meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n        meter: {\n          metadata: {\n            \"key\": 973.17,\n          },\n          createdAt: new Date(\"2024-06-11T03:24:15.349Z\"),\n          modifiedAt: new Date(\"2023-04-02T01:28:32.139Z\"),\n          id: \"<value>\",\n          name: \"<value>\",\n          filter: {\n            conjunction: \"or\",\n            clauses: [],\n          },\n          aggregation: {\n            func: \"max\",\n            property: \"<value>\",\n          },\n          organizationId: \"<value>\",\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CustomFieldDate type in TypeScript\nDESCRIPTION: This code snippet defines the structure for `CustomFieldDate` using TypeScript. It shows how to define the properties like createdAt, modifiedAt, id, metadata, slug, name, organizationId, and properties, including setting default or example values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfield.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomFieldDate = {\n  createdAt: new Date(\"2023-02-13T09:39:00.718Z\"),\n  modifiedAt: new Date(\"2025-03-16T00:30:11.499Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 6178.91,\n  },\n  slug: \"<value>\",\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerBenefitGrantDownloadables Type in TypeScript\nDESCRIPTION: This code defines the `CustomerBenefitGrantDownloadables` type, outlining properties like createdAt, modifiedAt, id, grantedAt, revokedAt, customerId, benefitId, subscriptionId, orderId, isGranted, isRevoked, customer, benefit, and properties. It illustrates how to represent downloadable content as a customer benefit. The provided code snippet is an example value demonstrating the `components.CustomerBenefitGrantDownloadables` type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrant.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomerBenefitGrantDownloadables = {\n  createdAt: new Date(\"2023-08-19T04:17:07.651Z\"),\n  modifiedAt: new Date(\"2023-02-23T09:07:32.780Z\"),\n  id: \"<value>\",\n  grantedAt: new Date(\"2024-04-25T08:23:06.923Z\"),\n  revokedAt: new Date(\"2024-07-02T19:26:03.934Z\"),\n  customerId: \"<value>\",\n  benefitId: \"<value>\",\n  subscriptionId: \"<value>\",\n  orderId: \"<value>\",\n  isGranted: false,\n  isRevoked: false,\n  customer: {\n    createdAt: new Date(\"2023-02-14T17:54:10.949Z\"),\n    modifiedAt: new Date(\"2025-12-15T20:19:47.380Z\"),\n    id: \"<value>\",\n    email: \"Kayley33@yahoo.com\",\n    emailVerified: false,\n    name: \"<value>\",\n    billingAddress: {\n      country: \"FR\",\n    },\n    taxId: [\n      \"FR61954506077\",\n      \"eu_vat\",\n    ],\n    oauthAccounts: {\n      \"key\": {\n        accountId: \"<id>\",\n        accountUsername: \"<value>\",\n      },\n    },\n  },\n  benefit: {\n    id: \"<value>\",\n    createdAt: new Date(\"2023-07-24T15:43:06.407Z\"),\n    modifiedAt: new Date(\"2023-01-09T18:48:17.764Z\"),\n    description:\n      \"blah by markup wilted although sticker tremendously terrible task\",\n    selectable: false,\n    deletable: false,\n    organizationId: \"<value>\",\n    metadata: {\n      \"key\": 376872,\n    },\n    organization: {\n      createdAt: new Date(\"2024-06-13T16:15:37.745Z\"),\n      modifiedAt: new Date(\"2024-07-19T20:52:02.915Z\"),\n      id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      name: \"<value>\",\n      slug: \"<value>\",\n      avatarUrl: \"https://compassionate-gray.com/\",\n      email: \"Dedrick.Quigley93@gmail.com\",\n      website: \"<value>\",\n      socials: [\n        {\n          platform: \"x\",\n          url: \"https://unfit-underpants.org/\",\n        },\n      ],\n      detailsSubmittedAt: new Date(\"2025-02-20T08:58:21.867Z\"),\n      featureSettings: {},\n      subscriptionSettings: {\n        allowMultipleSubscriptions: false,\n        allowCustomerUpdates: false,\n        prorationBehavior: \"invoice\",\n      },\n    },\n    properties: {\n      activeFiles: [\n        \"<value>\",\n      ],\n    },\n  },\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Refresh Token Request Example TypeScript\nDESCRIPTION: Demonstrates how to define and populate a RefreshTokenRequest object in TypeScript. It shows the required properties such as clientId, clientSecret, and refreshToken. The example uses string literals as placeholders for the actual values. This snippet provides a concrete example of the expected structure for this type of OAuth2 request.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/oauth2requesttokenrequestbody.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.RefreshTokenRequest = {\n  clientId: \"<id>\",\n  clientSecret: \"<value>\",\n  refreshToken: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: CustomFieldDate Example Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create and populate a CustomFieldDate object in TypeScript, importing the CustomFieldDate type from the @polar-sh/sdk library. It showcases the structure of the CustomFieldDate object, including properties such as createdAt, modifiedAt, id, metadata, slug, name, organizationId, and properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfielddate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldDate } from \"@polar-sh/sdk/models/components/customfielddate.js\";\n\nlet value: CustomFieldDate = {\n  createdAt: new Date(\"2025-09-05T19:00:10.762Z\"),\n  modifiedAt: new Date(\"2023-12-05T19:45:28.030Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 7250.27,\n  },\n  slug: \"<value>\",\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Customer Portal Subscription Update Request Example - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to create and populate a `CustomerPortalSubscriptionsUpdateRequest` object. It imports the necessary class from the `@polar-sh/sdk/models/operations/customerportalsubscriptionsupdate.js` module and initializes the object with a subscription ID and a `customerSubscriptionUpdate` object containing the product ID. The `id` and `productId` fields are placeholders, and their values should be replaced with actual data.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalsubscriptionsupdaterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalSubscriptionsUpdateRequest } from \"@polar-sh/sdk/models/operations/customerportalsubscriptionsupdate.js\";\n\nlet value: CustomerPortalSubscriptionsUpdateRequest = {\n  id: \"<value>\",\n  customerSubscriptionUpdate: {\n    productId: \"<value>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating an Organization with Polar SDK\nDESCRIPTION: This code snippet demonstrates how to update an organization using the `organizations.update` method from the Polar SDK.  It initializes the Polar SDK with an access token and calls the `update` method with an organization ID and an `organizationUpdate` object. The access token is retrieved from an environment variable.  The result of the update operation is then logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/organizations/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.update({\n    id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    organizationUpdate: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: DiscountsListResponse Example in TypeScript\nDESCRIPTION: Demonstrates the usage of `DiscountsListResponse` from `@polar-sh/sdk/models/operations/discountslist.js`. It shows how to instantiate the object and populate its fields with sample data, including nested objects for items (discounts) and pagination. This includes setting properties like duration, durationInMonths, type, amount, currency, and associated dates.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/discountslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountsListResponse } from \"@polar-sh/sdk/models/operations/discountslist.js\";\n\nlet value: DiscountsListResponse = {\n  result: {\n    items: [\n      {\n        duration: \"once\",\n        durationInMonths: 528108,\n        type: \"fixed\",\n        amount: 367298,\n        currency: \"Riel\",\n        createdAt: new Date(\"2025-06-13T11:58:48.863Z\"),\n        modifiedAt: new Date(\"2024-08-23T04:03:13.198Z\"),\n        id: \"<value>\",\n        metadata: {\n          \"key\": 299340,\n        },\n        name: \"<value>\",\n        code: \"<value>\",\n        startsAt: new Date(\"2025-01-05T02:33:00.885Z\"),\n        endsAt: new Date(\"2024-12-10T09:55:11.143Z\"),\n        maxRedemptions: 331733,\n        redemptionsCount: 197517,\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        products: [\n          {\n            metadata: {\n              \"key\": 97928,\n            },\n            createdAt: new Date(\"2025-03-23T20:22:01.205Z\"),\n            modifiedAt: new Date(\"2023-04-10T11:34:38.771Z\"),\n            id: \"<value>\",\n            name: \"<value>\",\n            description: \"kit opposite simplistic wisely\",\n            recurringInterval: \"month\",\n            isRecurring: false,\n            isArchived: false,\n            organizationId: \"<value>\",\n          },\n        ],\n      },\n    ],\n    pagination: {\n      totalCount: 657387,\n      maxPage: 168983,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: ProductPriceMeter Model Example in TypeScript\nDESCRIPTION: Demonstrates how to import and instantiate the ProductPriceMeter model in TypeScript. It shows how to create an object of this type with placeholder values for its properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productpricemeter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductPriceMeter } from \"@polar-sh/sdk/models/components/productpricemeter.js\";\n\nlet value: ProductPriceMeter = {\n  id: \"<value>\",\n  name: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating ProductPriceMeteredUnit Object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `ProductPriceMeteredUnitCreate` type from the `@polar-sh/sdk` to create an object. It requires the `@polar-sh/sdk` as a dependency. The `meterId` and `unitAmount` properties are initialized with placeholder string values. The object is intended to represent a metered price with a fixed unit price.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productpricemeteredunitcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductPriceMeteredUnitCreate } from \"@polar-sh/sdk/models/components/productpricemeteredunitcreate.js\";\n\nlet value: ProductPriceMeteredUnitCreate = {\n  meterId: \"<value>\",\n  unitAmount: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Filter Value in TypeScript\nDESCRIPTION: Demonstrates how to create a string filter value for benefit ID using TypeScript. This involves assigning a string value to the `value` constant, which can then be used as a filter.  No dependencies are explicitly required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportaldownloadableslistqueryparambenefitidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: CustomerPortalBenefitGrantsUpdateRequest Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create and populate a CustomerPortalBenefitGrantsUpdateRequest object in TypeScript. It imports the necessary class from the @polar-sh/sdk and shows an example of setting the id and customerBenefitGrantUpdate properties. The customerBenefitGrantUpdate.properties.accountId is also set to an example ID string.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalbenefitgrantsupdaterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalBenefitGrantsUpdateRequest } from \"@polar-sh/sdk/models/operations/customerportalbenefitgrantsupdate.js\";\n\nlet value: CustomerPortalBenefitGrantsUpdateRequest = {\n  id: \"<value>\",\n  customerBenefitGrantUpdate: {\n    properties: {\n      accountId: \"<id>\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CheckoutDiscountFixedRepeatDuration Type (TypeScript)\nDESCRIPTION: This snippet defines the structure for a fixed discount applied with a 'once' duration that repeats for a specified number of months. It includes properties for duration, durationInMonths, type (fixed), amount, currency, ID, name, and discount code. The type is `components.CheckoutDiscountFixedRepeatDuration`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpublicdiscount.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CheckoutDiscountFixedRepeatDuration = {\n  duration: \"once\",\n  durationInMonths: 856949,\n  type: \"fixed\",\n  amount: 177391,\n  currency: \"Uzbekistan Sum\",\n  id: \"<value>\",\n  name: \"<value>\",\n  code: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Get Organization using standalone function in TypeScript\nDESCRIPTION: This snippet demonstrates how to get a customer portal's organization by slug using a standalone function for better tree-shaking. It initializes a PolarCore instance, calls the `customerPortalOrganizationsGet` function, and handles the result. It includes error handling and logs the result. Requires the `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/customerPortalOrganizationsGet.js` packages.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarorganizations/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalOrganizationsGet } from \"@polar-sh/sdk/funcs/customerPortalOrganizationsGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await customerPortalOrganizationsGet(polar, {\n    slug: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Authorization Code Token Request Example TypeScript\nDESCRIPTION: Demonstrates how to define and populate an AuthorizationCodeTokenRequest object in TypeScript.  It shows the required properties such as clientId, clientSecret, code, and redirectUri. The example uses string literals as placeholders for the actual values. This snippet provides a concrete example of the expected structure for this type of OAuth2 request.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/oauth2requesttokenrequestbody.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.AuthorizationCodeTokenRequest = {\n  clientId: \"<id>\",\n  clientSecret: \"<value>\",\n  code: \"<value>\",\n  redirectUri: \"https://bleak-makeover.biz/\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ListResourceProduct in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the ListResourceProduct component in TypeScript. It shows how to create an object with sample data, including items (an array of products) and pagination information. The code assumes that the @polar-sh/sdk is installed as a dependency. Each item in the `items` array contains details about a product, such as its ID, name, description, pricing, benefits, media, and attached custom fields. The pagination object provides total count and max page information.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourceproduct.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceProduct } from \"@polar-sh/sdk/models/components/listresourceproduct.js\";\n\nlet value: ListResourceProduct = {\n  items: [\n    {\n      createdAt: new Date(\"2023-01-08T19:39:39.118Z\"),\n      modifiedAt: new Date(\"2024-01-19T09:15:19.424Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description:\n        \"lady stranger governance underneath polarisation often seldom gosh immaculate bah\",\n      recurringInterval: \"year\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n      metadata: {\n        \"key\": 4239.75,\n      },\n      prices: [\n        {\n          createdAt: new Date(\"2024-11-15T10:01:13.158Z\"),\n          modifiedAt: new Date(\"2025-04-24T08:13:15.944Z\"),\n          id: \"<value>\",\n          isArchived: false,\n          productId: \"<value>\",\n          recurringInterval: \"month\",\n        },\n      ],\n      benefits: [\n        {\n          id: \"<value>\",\n          createdAt: new Date(\"2024-11-15T02:23:34.961Z\"),\n          modifiedAt: new Date(\"2025-03-02T04:20:16.572Z\"),\n          description: \"ack zowie ugh supposing gee fat synthesise yet atop\",\n          selectable: false,\n          deletable: false,\n          organizationId: \"<value>\",\n          metadata: {\n            \"key\": false,\n          },\n          properties: {\n            prefix: \"<value>\",\n            expires: {\n              ttl: 510586,\n              timeframe: \"month\",\n            },\n            activations: {\n              limit: 693563,\n              enableCustomerAdmin: false,\n            },\n            limitUsage: 569280,\n          },\n        },\n      ],\n      medias: [\n        {\n          id: \"<value>\",\n          organizationId: \"<value>\",\n          name: \"<value>\",\n          path: \"/home/user\",\n          mimeType: \"<value>\",\n          size: 394915,\n          storageVersion: \"<value>\",\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n          checksumSha256Hex: \"<value>\",\n          lastModifiedAt: new Date(\"2025-10-15T07:03:48.321Z\"),\n          version: \"<value>\",\n          isUploaded: false,\n          createdAt: new Date(\"2024-08-23T01:25:49.240Z\"),\n          sizeReadable: \"<value>\",\n          publicUrl: \"https://old-fashioned-pine.name\",\n        },\n      ],\n      attachedCustomFields: [\n        {\n          customFieldId: \"<value>\",\n          customField: {\n            createdAt: new Date(\"2023-09-27T01:46:27.660Z\"),\n            modifiedAt: new Date(\"2025-09-12T04:55:49.478Z\"),\n            id: \"<value>\",\n            metadata: {\n              \"key\": \"<value>\",\n            },\n            slug: \"<value>\",\n            name: \"<value>\",\n            organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n            properties: {},\n          },\n          order: 361504,\n          required: false,\n        },\n      ],\n    },\n  ],\n  pagination: {\n    totalCount: 804914,\n    maxPage: 686507,\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: String Array Subscription ID Filter - TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a subscription ID filter using a string array in TypeScript. It shows how to initialize an array of strings, each representing a subscription ID. This is typically used to filter for multiple subscription IDs in a single query.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparamsubscriptionidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Token Introspection with Standalone Function\nDESCRIPTION: This snippet shows how to introspect an OAuth2 token using the standalone `oauth2Introspect` function from the Polar SDK. It initializes a PolarCore instance and calls the `oauth2Introspect` function with the instance and the token details. The result is then handled, with error checking.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/oauth2/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { oauth2Introspect } from \"@polar-sh/sdk/funcs/oauth2Introspect.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await oauth2Introspect(polar, {\n    token: \"<value>\",\n    clientId: \"<id>\",\n    clientSecret: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Defining AuthorizeResponseUser Type in TypeScript\nDESCRIPTION: This snippet demonstrates the structure of the `components.AuthorizeResponseUser` type. It defines an object with properties representing client details, user details (id, email, avatar URL), and a list of scopes granted to the client. The `createdAt` and `modifiedAt` properties are represented using the `Date` object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/oauth2authorizeresponseoauth2authorize.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.AuthorizeResponseUser = {\n  client: {\n    createdAt: new Date(\"2025-11-06T09:00:45.294Z\"),\n    modifiedAt: new Date(\"2024-02-13T01:48:54.322Z\"),\n    clientId: \"<id>\",\n    clientName: \"<value>\",\n    clientUri: \"https://awful-synergy.name\",\n    logoUri: \"https://hard-to-find-chapel.com/\",\n    tosUri: \"https://experienced-address.biz\",\n    policyUri: \"https://tiny-glider.name\",\n  },\n  sub: {\n    id: \"<value>\",\n    email: \"Beau67@gmail.com\",\n    avatarUrl: \"https://forceful-fledgling.com/\",\n  },\n  scopes: [\n    \"subscriptions:write\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing WebhookSubscriptionRevokedPayload TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a WebhookSubscriptionRevokedPayload object in TypeScript. It imports the necessary type definition and creates an instance with sample data. The example includes nested objects like customer, product, discount, prices and meters.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhooksubscriptionrevokedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookSubscriptionRevokedPayload } from \"@polar-sh/sdk/models/components/webhooksubscriptionrevokedpayload.js\";\n\nlet value: WebhookSubscriptionRevokedPayload = {\n  data: {\n    createdAt: new Date(\"2024-02-05T04:48:33.398Z\"),\n    modifiedAt: new Date(\"2023-09-04T15:41:09.328Z\"),\n    id: \"<value>\",\n    amount: 247395,\n    currency: \"Turkish Lira\",\n    recurringInterval: \"year\",\n    status: \"unpaid\",\n    currentPeriodStart: new Date(\"2024-05-20T22:06:23.650Z\"),\n    currentPeriodEnd: new Date(\"2024-04-22T12:07:17.975Z\"),\n    cancelAtPeriodEnd: false,\n    canceledAt: new Date(\"2025-02-07T21:24:40.307Z\"),\n    startedAt: new Date(\"2025-06-13T08:43:41.276Z\"),\n    endsAt: new Date(\"2024-09-18T13:27:37.485Z\"),\n    endedAt: new Date(\"2024-07-21T01:01:03.969Z\"),\n    customerId: \"<value>\",\n    productId: \"<value>\",\n    discountId: \"<value>\",\n    checkoutId: \"<value>\",\n    customerCancellationReason: \"customer_service\",\n    customerCancellationComment: \"<value>\",\n    metadata: {\n      \"key\": false,\n    },\n    customer: {\n      id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n      createdAt: new Date(\"2025-09-14T09:50:37.468Z\"),\n      modifiedAt: new Date(\"2025-07-27T11:08:54.033Z\"),\n      metadata: {\n        \"key\": \"<value>\",\n      },\n      externalId: \"usr_1337\",\n      email: \"customer@example.com\",\n      emailVerified: true,\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"FR\",\n      },\n      taxId: [\n        \"FR61954506077\",\n        \"eu_vat\",\n      ],\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      deletedAt: new Date(\"2023-01-17T12:02:49.326Z\"),\n      avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n    },\n    product: {\n      createdAt: new Date(\"2023-01-14T18:38:50.327Z\"),\n      modifiedAt: new Date(\"2025-06-26T14:36:50.648Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description: \"drat ugh strictly now plump merrily until\",\n      recurringInterval: \"month\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n      metadata: {\n        \"key\": 6959.19,\n      },\n      prices: [\n        {\n          createdAt: new Date(\"2023-10-16T16:05:50.889Z\"),\n          modifiedAt: new Date(\"2024-01-01T16:45:56.034Z\"),\n          id: \"<value>\",\n          isArchived: false,\n          productId: \"<value>\",\n          type: \"recurring\",\n          recurringInterval: \"year\",\n          priceCurrency: \"<value>\",\n          unitAmount: \"<value>\",\n          capAmount: 368763,\n          meterId: \"<value>\",\n          meter: {\n            id: \"<value>\",\n            name: \"<value>\",\n          },\n        },\n      ],\n      benefits: [\n        {\n          id: \"<value>\",\n          createdAt: new Date(\"2025-08-04T05:27:35.532Z\"),\n          modifiedAt: new Date(\"2023-11-25T00:39:20.443Z\"),\n          description: \"an toward which oh ad aw\",\n          selectable: false,\n          deletable: false,\n          organizationId: \"<value>\",\n          metadata: {\n            \"key\": 107.01,\n          },\n          properties: {\n            prefix: \"<value>\",\n            expires: {\n              ttl: 965688,\n              timeframe: \"month\",\n            },\n            activations: {\n              limit: 345946,\n              enableCustomerAdmin: false,\n            },\n            limitUsage: 920761,\n          },\n        },\n      ],\n      medias: [\n        {\n          id: \"<value>\",\n          organizationId: \"<value>\",\n          name: \"<value>\",\n          path: \"/usr/include\",\n          mimeType: \"<value>\",\n          size: 101276,\n          storageVersion: \"<value>\",\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n          checksumSha256Hex: \"<value>\",\n          lastModifiedAt: new Date(\"2025-03-29T11:46:55.248Z\"),\n          version: \"<value>\",\n          isUploaded: false,\n          createdAt: new Date(\"2023-06-25T21:09:11.954Z\"),\n          sizeReadable: \"<value>\",\n          publicUrl: \"https://spanish-mathematics.name\",\n        },\n      ],\n      attachedCustomFields: [\n        {\n          customFieldId: \"<value>\",\n          customField: {\n            createdAt: new Date(\"2024-11-18T17:09:26.535Z\"),\n            modifiedAt: new Date(\"2024-06-07T18:43:33.711Z\"),\n            id: \"<value>\",\n            metadata: {\n              \"key\": false,\n            },\n            slug: \"<value>\",\n            name: \"<value>\",\n            organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n            properties: {},\n          },\n          order: 748204,\n          required: false,\n        },\n      ],\n    },\n    discount: {\n      duration: \"forever\",\n      durationInMonths: 322549,\n      type: \"percentage\",\n      basisPoints: 633397,\n      createdAt: new Date(\"2025-05-24T06:00:43.127Z\"),\n      modifiedAt: new Date(\"2024-03-07T19:03:58.176Z\"),\n      id: \"<value>\",\n      metadata: {\n        \"key\": 625.91,\n      },\n      name: \"<value>\",\n      code: \"<value>\",\n      startsAt: new Date(\"2024-07-15T13:32:18.528Z\"),\n      endsAt: new Date(\"2025-01-28T10:55:04.515Z\"),\n      maxRedemptions: 672383,\n      redemptionsCount: 37266,\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    },\n    prices: [\n      {\n        createdAt: new Date(\"2024-05-04T15:17:07.378Z\"),\n        modifiedAt: new Date(\"2024-12-27T19:04:22.309Z\"),\n        id: \"<value>\",\n        isArchived: false,\n        productId: \"<value>\",\n        type: \"recurring\",\n        recurringInterval: \"month\",\n      },\n    ],\n    meters: [\n      {\n        createdAt: new Date(\"2024-11-22T07:06:20.439Z\"),\n        modifiedAt: new Date(\"2025-02-17T17:48:06.743Z\"),\n        id: \"<value>\",\n        consumedUnits: 25,\n        creditedUnits: 100,\n        amount: 0,\n        meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n        meter: {\n          metadata: {\n            \"key\": false,\n          },\n          createdAt: new Date(\"2024-10-29T00:52:06.091Z\"),\n          modifiedAt: new Date(\"2025-02-10T13:23:40.560Z\"),\n          id: \"<value>\",\n          name: \"<value>\",\n          filter: {\n            conjunction: \"or\",\n            clauses: [],\n          },\n          aggregation: {},\n          organizationId: \"<value>\",\n        },\n      },\n    ],\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: ProductsListResponse Usage Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `ProductsListResponse` type from the `@polar-sh/sdk/models/operations/productslist.js` module and create an instance of it.  It initializes the `ProductsListResponse` object with a sample `result` containing mocked data for `items`, including nested objects like `prices`, `benefits`, `medias`, and `attachedCustomFields`. It is meant to illustrate the structure and required fields of the `ProductsListResponse` type for use with the Polar SDK.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/productslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductsListResponse } from \"@polar-sh/sdk/models/operations/productslist.js\";\n\nlet value: ProductsListResponse = {\n  result: {\n    items: [\n      {\n        createdAt: new Date(\"2025-09-19T17:41:08.939Z\"),\n        modifiedAt: new Date(\"2024-04-08T02:10:23.808Z\"),\n        id: \"<value>\",\n        name: \"<value>\",\n        description:\n          \"hearten unlined why alongside beyond sandy softly classic disrespect inside\",\n        recurringInterval: \"year\",\n        isRecurring: false,\n        isArchived: false,\n        organizationId: \"<value>\",\n        metadata: {\n          \"key\": \"<value>\",\n        },\n        prices: [\n          {\n            createdAt: new Date(\"2024-06-28T06:21:21.363Z\"),\n            modifiedAt: new Date(\"2025-01-12T14:19:43.376Z\"),\n            id: \"<value>\",\n            isArchived: false,\n            productId: \"<value>\",\n            type: \"recurring\",\n            recurringInterval: \"year\",\n            priceCurrency: \"<value>\",\n            minimumAmount: 833109,\n            maximumAmount: 232432,\n            presetAmount: 822781,\n          },\n        ],\n        benefits: [\n          {\n            id: \"<value>\",\n            createdAt: new Date(\"2025-04-26T03:20:59.765Z\"),\n            modifiedAt: new Date(\"2023-01-20T00:33:54.779Z\"),\n            description: \"short-term gah intervention round fake\",\n            selectable: false,\n            deletable: false,\n            organizationId: \"<value>\",\n            metadata: {\n              \"key\": \"<value>\",\n            },\n            properties: {\n              units: 366833,\n              meterId: \"<value>\",\n            },\n          },\n        ],\n        medias: [\n          {\n            id: \"<value>\",\n            organizationId: \"<value>\",\n            name: \"<value>\",\n            path: \"/usr/include\",\n            mimeType: \"<value>\",\n            size: 952818,\n            storageVersion: \"<value>\",\n            checksumEtag: \"<value>\",\n            checksumSha256Base64: \"<value>\",\n            checksumSha256Hex: \"<value>\",\n            lastModifiedAt: new Date(\"2025-12-11T14:43:29.865Z\"),\n            version: \"<value>\",\n            isUploaded: false,\n            createdAt: new Date(\"2025-07-02T01:06:35.042Z\"),\n            sizeReadable: \"<value>\",\n            publicUrl: \"https://finished-jogging.net\",\n          },\n        ],\n        attachedCustomFields: [\n          {\n            customFieldId: \"<value>\",\n            customField: {\n              createdAt: new Date(\"2023-09-02T20:36:17.413Z\"),\n              modifiedAt: new Date(\"2023-03-17T16:11:49.831Z\"),\n              id: \"<value>\",\n              metadata: {\n                \"key\": \"<value>\",\n              },\n              slug: \"<value>\",\n              name: \"<value>\",\n              organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n              properties: {\n                options: [\n                  {\n                    value: \"<value>\",\n                    label: \"<value>\",\n                  },\n                ],\n              },\n            },\n            order: 730609,\n            required: false,\n          },\n        ],\n      },\n    ],\n    pagination: {\n      totalCount: 664714,\n      maxPage: 859918,\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining ProductPrice TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a `ProductPrice` object using TypeScript.  It showcases the required properties such as `createdAt`, `modifiedAt`, `id`, `isArchived`, `productId`, `type`, and `recurringInterval`. It includes sample data and type annotations from the `components` module.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/prices.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPrice = {\n  createdAt: new Date(\"2023-11-12T09:36:50.641Z\"),\n  modifiedAt: new Date(\"2023-02-28T09:49:59.454Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  type: \"recurring\",\n  recurringInterval: \"month\",\n};\n```\n\n----------------------------------------\n\nTITLE: PropertyAggregation Usage Example TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the PropertyAggregation type from the @polar-sh/sdk/models/components/propertyaggregation.js module. It creates an instance of PropertyAggregation with the 'func' set to 'min' and 'property' set to '<value>'. This shows how to initialize a PropertyAggregation object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/propertyaggregation.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PropertyAggregation } from \"@polar-sh/sdk/models/components/propertyaggregation.js\";\n\nlet value: PropertyAggregation = {\n  func: \"min\",\n  property: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CheckoutDiscountPercentageRepeatDuration TypeScript Type\nDESCRIPTION: This snippet defines the structure for a percentage-based checkout discount that can be applied repeatedly. It specifies the discount type as 'fixed', the basisPoints, the duration as 'once', and duration in months. It also includes properties like id, name, and code.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutdiscount.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CheckoutDiscountPercentageRepeatDuration = {\n  duration: \"once\",\n  durationInMonths: 606755,\n  type: \"fixed\",\n  basisPoints: 513076,\n  id: \"<value>\",\n  name: \"<value>\",\n  code: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining BenefitGitHubRepository Component Type in TypeScript\nDESCRIPTION: This code snippet illustrates the structure of the `components.BenefitGitHubRepository` type, defining properties such as `id`, `createdAt`, `modifiedAt`, `description`, `selectable`, `deletable`, `organizationId`, `metadata`, and `properties`. The metadata object holds a boolean value associated with a string key. The properties object contains fields for `repositoryOwner`, `repositoryName`, and `permission`, each represented as strings.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefit.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGitHubRepository = {\n  id: \"<value>\",\n  createdAt: new Date(\"2025-09-20T17:50:31.812Z\"),\n  modifiedAt: new Date(\"2024-03-20T03:15:07.982Z\"),\n  description: \"versus spirit than splosh\",\n  selectable: false,\n  deletable: false,\n  organizationId: \"<value>\",\n  metadata: {\n    \"key\": false,\n  },\n  properties: {\n    repositoryOwner: \"polarsource\",\n    repositoryName: \"private_repo\",\n    permission: \"maintain\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: RefreshTokenRequest Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and instantiate the RefreshTokenRequest object from the @polar-sh/sdk/models/components/refreshtokenrequest.js module. It shows how to initialize the required fields: clientId, clientSecret, and refreshToken, setting them with placeholder values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/refreshtokenrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RefreshTokenRequest } from \"@polar-sh/sdk/models/components/refreshtokenrequest.js\";\n\nlet value: RefreshTokenRequest = {\n  clientId: \"<id>\",\n  clientSecret: \"<value>\",\n  refreshToken: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: PaymentProcessor Value Definition in TypeScript\nDESCRIPTION: This code snippet defines a possible value for the `PaymentProcessor` type. It shows the string literal `\"stripe\"` as a valid assignment.  This is likely a type alias or enum with a limited set of allowed string values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/paymentprocessor.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"stripe\"\n```\n\n----------------------------------------\n\nTITLE: AuthorizeResponseUser Example\nDESCRIPTION: This code snippet demonstrates how to import and use the AuthorizeResponseUser type from the @polar-sh/sdk to create an instance with sample data. It shows how to populate the client, sub, and scopes properties. Required dependency: @polar-sh/sdk.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/authorizeresponseuser.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthorizeResponseUser } from \"@polar-sh/sdk/models/components/authorizeresponseuser.js\";\n\nlet value: AuthorizeResponseUser = {\n  client: {\n    createdAt: new Date(\"2024-01-29T12:13:57.857Z\"),\n    modifiedAt: new Date(\"2025-10-08T01:47:29.585Z\"),\n    clientId: \"<id>\",\n    clientName: \"<value>\",\n    clientUri: \"https://svelte-cinema.com\",\n    logoUri: \"https://marvelous-pantyhose.net\",\n    tosUri: \"https://gifted-celsius.org\",\n    policyUri: \"https://lone-polyester.net/\",\n  },\n  sub: {\n    id: \"<value>\",\n    email: \"Verda17@hotmail.com\",\n    avatarUrl: \"https://handy-vibraphone.com/\",\n  },\n  scopes: [\n    \"subscriptions:read\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ProductPrice in TypeScript\nDESCRIPTION: This snippet defines a `ProductPrice` object with properties such as creation and modification timestamps, IDs, product association, type (recurring), and recurring interval. The example shows how to create an instance using a TypeScript object literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customersubscriptionprices.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPrice = {\n  createdAt: new Date(\"2023-11-12T09:36:50.641Z\"),\n  modifiedAt: new Date(\"2023-02-28T09:49:59.454Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  type: \"recurring\",\n  recurringInterval: \"month\",\n};\n```\n\n----------------------------------------\n\nTITLE: CustomFieldNumber Usage Example (TypeScript)\nDESCRIPTION: Demonstrates how to create a CustomFieldNumber object in TypeScript. It imports the CustomFieldNumber type from the `@polar-sh/sdk/models/components/customfieldnumber.js` module and initializes an object with sample values for its properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldnumber.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldNumber } from \"@polar-sh/sdk/models/components/customfieldnumber.js\";\n\nlet value: CustomFieldNumber = {\n  createdAt: new Date(\"2023-10-30T01:59:04.976Z\"),\n  modifiedAt: new Date(\"2023-02-04T07:27:49.776Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 221313,\n  },\n  slug: \"<value>\",\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: SubscriptionStatus Values TypeScript\nDESCRIPTION: This code snippet defines the possible string values for the `SubscriptionStatus` type. These values represent different states of a subscription, including 'incomplete', 'trialing', 'active', 'past_due', 'canceled', and 'unpaid'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptionstatus.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"incomplete\" | \"incomplete_expired\" | \"trialing\" | \"active\" | \"past_due\" | \"canceled\" | \"unpaid\"\n```\n\n----------------------------------------\n\nTITLE: Creating a License Keys Benefit in TypeScript\nDESCRIPTION: This snippet shows how to create a license keys benefit using `components.BenefitLicenseKeysCreate`. It includes a description, organization ID, and empty properties. The `properties` can be extended to store license key related information.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcreate.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitLicenseKeysCreate = {\n  description:\n    \"what vein basic soap scarcely indeed petty censor airline cautiously\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Using WebhookCheckoutCreatedPayload in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `WebhookCheckoutCreatedPayload` type from the `@polar-sh/sdk/models/components/webhookcheckoutcreatedpayload.js` library. It shows how to create an instance of the payload with sample data. Note that many of the values are placeholder strings denoted by \"<value>\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookcheckoutcreatedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookCheckoutCreatedPayload } from \"@polar-sh/sdk/models/components/webhookcheckoutcreatedpayload.js\";\n\nlet value: WebhookCheckoutCreatedPayload = {\n  data: {\n    createdAt: new Date(\"2024-06-17T23:01:40.328Z\"),\n    modifiedAt: new Date(\"2023-08-20T15:49:44.498Z\"),\n    id: \"<value>\",\n    paymentProcessor: \"stripe\",\n    status: \"failed\",\n    clientSecret: \"<value>\",\n    url: \"https://unhealthy-noon.info/\",\n    expiresAt: new Date(\"2025-11-23T17:32:24.813Z\"),\n    successUrl: \"https://sophisticated-slipper.info\",\n    embedOrigin: \"<value>\",\n    amount: 968219,\n    discountAmount: 557270,\n    netAmount: 112135,\n    taxAmount: 449681,\n    totalAmount: 564684,\n    currency: \"Egyptian Pound\",\n    productId: \"<value>\",\n    productPriceId: \"<value>\",\n    discountId: \"<value>\",\n    allowDiscountCodes: false,\n    requireBillingAddress: false,\n    isDiscountApplicable: false,\n    isFreeProductPrice: false,\n    isPaymentRequired: false,\n    isPaymentSetupRequired: false,\n    isPaymentFormRequired: false,\n    customerId: \"<value>\",\n    customerName: \"<value>\",\n    customerEmail: \"<value>\",\n    customerIpAddress: \"<value>\",\n    customerBillingAddress: {\n      country: \"FR\",\n    },\n    customerTaxId: \"<id>\",\n    paymentProcessorMetadata: {\n      \"key\": \"<value>\",\n    },\n    metadata: {\n      \"key\": false,\n    },\n    customerExternalId: \"<id>\",\n    products: [\n      {\n        createdAt: new Date(\"2023-10-02T22:13:13.009Z\"),\n        modifiedAt: new Date(\"2024-05-23T09:50:42.659Z\"),\n        id: \"<value>\",\n        name: \"<value>\",\n        description: \"savour railway tomorrow behest\",\n        recurringInterval: \"month\",\n        isRecurring: false,\n        isArchived: false,\n        organizationId: \"<value>\",\n        prices: [\n          {\n            createdAt: new Date(\"2024-06-08T10:56:27.163Z\"),\n            modifiedAt: new Date(\"2023-03-23T07:26:26.518Z\"),\n            id: \"<value>\",\n            isArchived: false,\n            productId: \"<value>\",\n            type: \"recurring\",\n            recurringInterval: \"month\",\n            priceCurrency: \"<value>\",\n            priceAmount: 408625,\n          },\n        ],\n        benefits: [\n          {\n            id: \"<value>\",\n            createdAt: new Date(\"2024-12-09T21:48:18.520Z\"),\n            modifiedAt: new Date(\"2024-09-12T11:02:22.469Z\"),\n            type: \"discord\",\n            description: \"properly unwieldy stupendous drat gummy\",\n            selectable: false,\n            deletable: false,\n            organizationId: \"<value>\",\n          },\n        ],\n        medias: [\n          {\n            id: \"<value>\",\n            organizationId: \"<value>\",\n            name: \"<value>\",\n            path: \"/usr/local/src\",\n            mimeType: \"<value>\",\n            size: 52686,\n            storageVersion: \"<value>\",\n            checksumEtag: \"<value>\",\n            checksumSha256Base64: \"<value>\",\n            checksumSha256Hex: \"<value>\",\n            lastModifiedAt: new Date(\"2025-09-08T17:18:21.648Z\"),\n            version: \"<value>\",\n            isUploaded: false,\n            createdAt: new Date(\"2024-09-27T21:04:47.211Z\"),\n            sizeReadable: \"<value>\",\n            publicUrl: \"https://supportive-rationale.biz/\",\n          },\n        ],\n      },\n    ],\n    product: {\n      createdAt: new Date(\"2024-11-29T22:09:49.609Z\"),\n      modifiedAt: new Date(\"2024-08-10T17:25:39.360Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description: \"um yippee afore aboard\",\n      recurringInterval: \"year\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n      prices: [\n        {\n          createdAt: new Date(\"2025-05-21T23:21:06.675Z\"),\n          modifiedAt: new Date(\"2025-09-12T21:51:12.650Z\"),\n          id: \"<value>\",\n          isArchived: false,\n          productId: \"<value>\",\n          type: \"one_time\",\n          recurringInterval: \"year\",\n          priceCurrency: \"<value>\",\n          minimumAmount: 717174,\n          maximumAmount: 171608,\n          presetAmount: 6080,\n        },\n      ],\n      benefits: [\n        {\n          id: \"<value>\",\n          createdAt: new Date(\"2024-06-16T21:30:45.429Z\"),\n          modifiedAt: new Date(\"2023-05-21T12:07:36.569Z\"),\n          type: \"custom\",\n          description:\n            \"below blend watery flight fellow solidly regularly where\",\n          selectable: false,\n          deletable: false,\n          organizationId: \"<value>\",\n        },\n      ],\n      medias: [\n        {\n          id: \"<value>\",\n          organizationId: \"<value>\",\n          name: \"<value>\",\n          path: \"/home/user\",\n          mimeType: \"<value>\",\n          size: 715587,\n          storageVersion: \"<value>\",\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n          checksumSha256Hex: \"<value>\",\n          lastModifiedAt: new Date(\"2024-02-26T03:31:00.440Z\"),\n          version: \"<value>\",\n          isUploaded: false,\n          createdAt: new Date(\"2024-09-15T14:54:15.011Z\"),\n          sizeReadable: \"<value>\",\n          publicUrl: \"https://gray-bowling.biz/\",\n        },\n      ],\n    },\n    productPrice: {\n      createdAt: new Date(\"2024-11-07T22:24:38.614Z\"),\n      modifiedAt: new Date(\"2023-12-07T09:01:09.070Z\"),\n      id: \"<value>\",\n      isArchived: false,\n      productId: \"<value>\",\n      type: \"recurring\",\n      recurringInterval: \"year\",\n      priceCurrency: \"<value>\",\n      unitAmount: \"<value>\",\n      capAmount: 256463,\n      meterId: \"<value>\",\n      meter: {\n        id: \"<value>\",\n        name: \"<value>\",\n      },\n    },\n    discount: {\n      duration: \"repeating\",\n      durationInMonths: 413658,\n      type: \"percentage\",\n      amount: 922916,\n      currency: \"Kyat\",\n      id: \"<value>\",\n      name: \"<value>\",\n      code: \"<value>\",\n    },\n    subscriptionId: \"<value>\",\n    attachedCustomFields: [\n      {\n        customFieldId: \"<value>\",\n        customField: {\n          createdAt: new Date(\"2024-03-22T11:22:24.006Z\"),\n          modifiedAt: new Date(\"2023-02-16T00:22:02.887Z\"),\n          id: \"<value>\",\n          metadata: {\n            \"key\": \"<value>\",\n          },\n          slug: \"<value>\",\n          name: \"<value>\",\n          organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n          properties: {},\n        },\n        order: 498829,\n        required: false,\n      },\n    ],\n    customerMetadata: {\n      \"key\": \"<value>\",\n    },\n    customerBillingAddressFields: {\n      country: false,\n      state: false,\n      city: false,\n      postalCode: false,\n      line1: false,\n      line2: false,\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Define DiscountPercentageRepeatDurationBase Type - TypeScript\nDESCRIPTION: This snippet defines a TypeScript object representing a percentage discount that can be applied repeatedly. It includes properties such as duration, duration in months, type, basis points, timestamps, IDs, metadata, name, code, start and end dates, maximum redemptions, redemption count, and organization ID. The `duration` is set to 'repeating'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkdiscount.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DiscountPercentageRepeatDurationBase = {\n  duration: \"repeating\",\n  durationInMonths: 695395,\n  type: \"fixed\",\n  basisPoints: 489532,\n  createdAt: new Date(\"2023-03-12T10:58:50.277Z\"),\n  modifiedAt: new Date(\"2024-09-14T19:15:52.642Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 399573,\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2023-08-16T10:20:17.618Z\"),\n  endsAt: new Date(\"2024-09-04T23:43:02.503Z\"),\n  maxRedemptions: 863337,\n  redemptionsCount: 383593,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating BenefitMeterCreditCreateProperties in TypeScript\nDESCRIPTION: Demonstrates how to create an instance of `BenefitMeterCreditCreateProperties` with the required fields `units` and `meterId`. This object is used when creating a benefit of type `meter_unit` using the Polar.js SDK. The `units` property specifies the number of units to credit, and `meterId` specifies the ID of the meter to apply the credit to.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditcreateproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitMeterCreditCreateProperties } from \"@polar-sh/sdk/models/components/benefitmetercreditcreateproperties.js\";\n\nlet value: BenefitMeterCreditCreateProperties = {\n  units: 311092,\n  meterId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Instantiating CustomerBenefitGrantDownloadables in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and instantiate the CustomerBenefitGrantDownloadables object in TypeScript. It sets values for various properties, including dates, IDs, and nested objects like customer and benefit.  The code requires the `@polar-sh/sdk` package to be installed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantdownloadables.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerBenefitGrantDownloadables } from \"@polar-sh/sdk/models/components/customerbenefitgrantdownloadables.js\";\n\nlet value: CustomerBenefitGrantDownloadables = {\n  createdAt: new Date(\"2023-04-19T19:15:46.553Z\"),\n  modifiedAt: new Date(\"2025-06-26T07:47:19.499Z\"),\n  id: \"<value>\",\n  grantedAt: new Date(\"2025-01-29T21:20:55.289Z\"),\n  revokedAt: new Date(\"2024-12-16T09:41:00.797Z\"),\n  customerId: \"<value>\",\n  benefitId: \"<value>\",\n  subscriptionId: \"<value>\",\n  orderId: \"<value>\",\n  isGranted: false,\n  isRevoked: false,\n  customer: {\n    createdAt: new Date(\"2024-02-03T12:12:04.150Z\"),\n    modifiedAt: new Date(\"2025-03-02T16:31:49.690Z\"),\n    id: \"<value>\",\n    email: \"Berta1@hotmail.com\",\n    emailVerified: false,\n    name: \"<value>\",\n    billingAddress: {\n      country: \"FR\",\n    },\n    taxId: [\n      \"911144442\",\n      \"us_ein\",\n    ],\n    oauthAccounts: {\n      \"key\": {\n        accountId: \"<id>\",\n        accountUsername: \"<value>\",\n      },\n    },\n  },\n  benefit: {\n    id: \"<value>\",\n    createdAt: new Date(\"2025-02-05T02:32:49.878Z\"),\n    modifiedAt: new Date(\"2023-05-10T15:51:19.391Z\"),\n    description: \"finally blah depend\",\n    selectable: false,\n    deletable: false,\n    organizationId: \"<value>\",\n    metadata: {\n      \"key\": \"<value>\",\n    },\n    organization: {\n      createdAt: new Date(\"2024-12-16T08:26:05.981Z\"),\n      modifiedAt: new Date(\"2025-07-15T04:46:57.293Z\"),\n      id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      name: \"<value>\",\n      slug: \"<value>\",\n      avatarUrl: \"https://unwelcome-muscat.name/\",\n      email: \"Brielle.Lockman40@gmail.com\",\n      website: \"<value>\",\n      socials: [\n        {\n          platform: \"instagram\",\n          url: \"https://deadly-video.name\",\n        },\n      ],\n      detailsSubmittedAt: new Date(\"2023-02-09T22:13:46.799Z\"),\n      featureSettings: {},\n      subscriptionSettings: {\n        allowMultipleSubscriptions: false,\n        allowCustomerUpdates: false,\n        prorationBehavior: \"invoice\",\n      },\n    },\n    properties: {\n      activeFiles: [\n        \"<value>\",\n      ],\n    },\n  },\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Meter Credit Benefit in TypeScript\nDESCRIPTION: This snippet demonstrates creating a meter credit benefit using `components.BenefitMeterCreditCreate`. It includes a description, organization ID, and properties specifying the number of units and the meter ID. Replace `<value>` with the actual meter ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcreate.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitMeterCreditCreate = {\n  description:\n    \"revere swiftly epic incidentally minion noisily internalise while braid\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {\n    units: 697633,\n    meterId: \"<value>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: OrganizationDetails Model Usage Example (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to import and create an instance of the OrganizationDetails model using TypeScript. It initializes the required fields (about, productDescription, intendedUse, customerAcquisition, and futureAnnualRevenue) with example values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/organizationdetails.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrganizationDetails } from \"@polar-sh/sdk/models/components/organizationdetails.js\";\n\nlet value: OrganizationDetails = {\n  about: \"<value>\",\n  productDescription: \"<value>\",\n  intendedUse: \"<value>\",\n  customerAcquisition: [\n    \"<value>\",\n  ],\n  futureAnnualRevenue: 330907,\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Meter ID Filter in TypeScript\nDESCRIPTION: Demonstrates how to define a meter ID filter using an array of string values in TypeScript. The `value` constant is assigned an array of strings, each representing a meter ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/meteridfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Defining EventCreateCustomer Object in TypeScript\nDESCRIPTION: This snippet shows how to define an `EventCreateCustomer` object in TypeScript. It requires importing the `components` namespace and providing values for the `name`, `organizationId`, and `customerId` properties. The `organizationId` is a fixed UUID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/events.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.EventCreateCustomer = {\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  customerId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerStateBenefitGrant TypeScript\nDESCRIPTION: This code demonstrates how to create an instance of the CustomerStateBenefitGrant object in TypeScript. It imports the CustomerStateBenefitGrant class from the '@polar-sh/sdk/models/components/customerstatebenefitgrant.js' module and assigns values to its properties, including ID, creation/modification/grant timestamps, benefit ID, benefit type, and properties. This example is useful for understanding the structure and usage of the CustomerStateBenefitGrant object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatebenefitgrant.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerStateBenefitGrant } from \"@polar-sh/sdk/models/components/customerstatebenefitgrant.js\";\n\nlet value: CustomerStateBenefitGrant = {\n  id: \"d322132c-a9d0-4e0d-b8d3-d81ad021a3a9\",\n  createdAt: new Date(\"2023-03-10T02:21:45.420Z\"),\n  modifiedAt: new Date(\"2023-12-22T06:13:55.313Z\"),\n  grantedAt: new Date(\"2025-01-03T13:37:00Z\"),\n  benefitId: \"397a17aa-15cf-4cb4-9333-18040203cf98\",\n  benefitType: \"discord\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Filter for External Customer ID - TypeScript\nDESCRIPTION: Illustrates how to filter by multiple external customer IDs using an array of string values.  The array should contain strings, each representing an external customer ID to match.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customermeterslistqueryparamexternalcustomeridfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Downloadables Benefit in TypeScript\nDESCRIPTION: This snippet illustrates creating a downloadables benefit using `components.BenefitDownloadablesCreate`. It includes a description, organization ID, and a `files` array within the properties. Replace `<value>` with the path or identifier of a downloadable file.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcreate.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitDownloadablesCreate = {\n  description: \"mortally violent horst puff role toward\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {\n    files: [\n      \"<value>\",\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalOrdersInvoiceRequest in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an instance of the CustomerPortalOrdersInvoiceRequest model in TypeScript. It imports the necessary class from the polar-sh SDK and initializes an object with the required 'id' property.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalordersinvoicerequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalOrdersInvoiceRequest } from \"@polar-sh/sdk/models/operations/customerportalordersinvoice.js\";\n\nlet value: CustomerPortalOrdersInvoiceRequest = {\n  id: \"<value>\",\n};\n\n```\n\n----------------------------------------\n\nTITLE: Import NotPermitted Model in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `NotPermitted` model from the `@polar-sh/sdk/models/errors/notpermitted.js` module in a TypeScript project. The `NotPermitted` model represents an error indicating that the requested action is not permitted. There are no specific examples for using this model provided, as it's primarily used for error handling.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/errors/notpermitted.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NotPermitted } from \"@polar-sh/sdk/models/errors/notpermitted.js\";\n\n// No examples available for this model\n```\n\n----------------------------------------\n\nTITLE: Initializing LicenseKeyActivationBase in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a LicenseKeyActivationBase object in TypeScript. It imports the LicenseKeyActivationBase class from the '@polar-sh/sdk/models/components/licensekeyactivationbase.js' module and creates an instance of the object with sample data. It showcases how to set the values for the properties like id, licenseKeyId, label, meta, createdAt, and modifiedAt.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/licensekeyactivationbase.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LicenseKeyActivationBase } from \"@polar-sh/sdk/models/components/licensekeyactivationbase.js\";\n\nlet value: LicenseKeyActivationBase = {\n  id: \"<value>\",\n  licenseKeyId: \"<value>\",\n  label: \"<value>\",\n  meta: {},\n  createdAt: new Date(\"2023-05-10T19:07:53.092Z\"),\n  modifiedAt: new Date(\"2025-08-05T02:43:45.281Z\"),\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Customer Meter by ID with Polar SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific customer meter by its ID using the Polar SDK. It authenticates using a customer session and then calls the `get` method with the meter's ID.  It requires the `@polar-sh/sdk` package and a valid `POLAR_CUSTOMER_SESSION` environment variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarcustomermeters/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.customerMeters.get({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating an Organization Avatar File with components.OrganizationAvatarFileCreate in TypeScript\nDESCRIPTION: This snippet shows how to create an `OrganizationAvatarFileCreate` object, including the organization ID, file name, MIME type, file size, and upload parts. The upload parts contain the chunk number, start, and end positions, which are necessary for uploading the avatar file in segments.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/filecreate.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.OrganizationAvatarFileCreate = {\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  name: \"<value>\",\n  mimeType: \"<value>\",\n  size: 156352,\n  upload: {\n    parts: [\n      {\n        number: 648354,\n        chunkStart: 149204,\n        chunkEnd: 864751,\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: SubscriptionsUpdateRequest Example TypeScript\nDESCRIPTION: This code snippet shows how to import and use the SubscriptionsUpdateRequest class from the '@polar-sh/sdk/models/operations/subscriptionsupdate.js' module. It initializes an object of type SubscriptionsUpdateRequest, setting the 'id' to a placeholder string and 'subscriptionUpdate' to an object with 'cancelAtPeriodEnd' set to false. This update request is intended to modify a subscription's cancellation settings.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/subscriptionsupdaterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubscriptionsUpdateRequest } from \"@polar-sh/sdk/models/operations/subscriptionsupdate.js\";\n\nlet value: SubscriptionsUpdateRequest = {\n  id: \"<value>\",\n  subscriptionUpdate: {\n    cancelAtPeriodEnd: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: WebhookOrderPaidPayload Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and instantiate a `WebhookOrderPaidPayload` object in TypeScript, populating it with example data. The `WebhookOrderPaidPayload` is part of the `@polar-sh/sdk/models/components/webhookorderpaidpayload.js` module. The example includes nested objects with Date and string values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookorderpaidpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookOrderPaidPayload } from \"@polar-sh/sdk/models/components/webhookorderpaidpayload.js\";\n\nlet value: WebhookOrderPaidPayload = {\n  data: {\n    createdAt: new Date(\"2024-02-23T07:46:28.441Z\"),\n    modifiedAt: new Date(\"2023-01-22T20:00:27.076Z\"),\n    id: \"<value>\",\n    metadata: {\n      \"key\": 3741,\n    },\n    status: \"partially_refunded\",\n    paid: true,\n    subtotalAmount: 77223,\n    discountAmount: 484286,\n    netAmount: 655121,\n    amount: 346420,\n    taxAmount: 908161,\n    totalAmount: 816520,\n    refundedAmount: 402450,\n    refundedTaxAmount: 311886,\n    currency: \"Kip\",\n    billingReason: \"subscription_cycle\",\n    billingAddress: {\n      country: \"US\",\n    },\n    customerId: \"<value>\",\n    productId: \"<value>\",\n    discountId: \"<value>\",\n    subscriptionId: \"<value>\",\n    checkoutId: \"<value>\",\n    customer: {\n      id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n      createdAt: new Date(\"2024-04-04T17:18:47.144Z\"),\n      modifiedAt: new Date(\"2023-01-30T03:47:49.583Z\"),\n      metadata: {\n        \"key\": 180004,\n      },\n      externalId: \"usr_1337\",\n      email: \"customer@example.com\",\n      emailVerified: true,\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"SE\",\n      },\n      taxId: [\n        \"911144442\",\n        \"us_ein\",\n      ],\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      deletedAt: new Date(\"2023-01-03T11:51:10.381Z\"),\n      avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n    },\n    userId: \"<value>\",\n    product: {\n      metadata: {\n        \"key\": false,\n      },\n      createdAt: new Date(\"2023-07-05T14:22:19.889Z\"),\n      modifiedAt: new Date(\"2025-08-28T14:11:32.620Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description:\n        \"slowly gadzooks of blah bulky pace quickly successfully down\",\n      recurringInterval: \"month\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n    },\n    discount: {\n      duration: \"once\",\n      type: \"percentage\",\n      basisPoints: 203923,\n      createdAt: new Date(\"2023-08-04T19:53:41.037Z\"),\n      modifiedAt: new Date(\"2025-02-17T08:11:49.014Z\"),\n      id: \"<value>\",\n      metadata: {\n        \"key\": \"<value>\",\n      },\n      name: \"<value>\",\n      code: \"<value>\",\n      startsAt: new Date(\"2024-03-21T07:24:08.898Z\"),\n      endsAt: new Date(\"2023-03-25T11:11:13.715Z\"),\n      maxRedemptions: 704940,\n      redemptionsCount: 431575,\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    },\n    subscription: {\n      metadata: {\n        \"key\": 443998,\n      },\n      createdAt: new Date(\"2025-10-16T06:56:41.439Z\"),\n      modifiedAt: new Date(\"2023-11-12T16:00:39.109Z\"),\n      id: \"<value>\",\n      amount: 531447,\n      currency: \"Tugrik\",\n      recurringInterval: \"year\",\n      status: \"incomplete_expired\",\n      currentPeriodStart: new Date(\"2023-03-15T04:31:40.969Z\"),\n      currentPeriodEnd: new Date(\"2024-07-04T20:01:06.232Z\"),\n      cancelAtPeriodEnd: false,\n      canceledAt: new Date(\"2025-02-08T20:00:20.071Z\"),\n      startedAt: new Date(\"2025-10-09T02:31:41.815Z\"),\n      endsAt: new Date(\"2024-04-18T03:33:40.234Z\"),\n      endedAt: new Date(\"2025-04-30T12:18:04.253Z\"),\n      customerId: \"<value>\",\n      productId: \"<value>\",\n      discountId: \"<value>\",\n      checkoutId: \"<value>\",\n      customerCancellationReason: \"low_quality\",\n      customerCancellationComment: \"<value>\",\n    },\n    items: [\n      {\n        createdAt: new Date(\"2025-10-25T14:30:26.971Z\"),\n        modifiedAt: new Date(\"2023-07-18T20:30:09.480Z\"),\n        id: \"<value>\",\n        label: \"<value>\",\n        amount: 832715,\n        taxAmount: 82488,\n        proration: false,\n        productPriceId: \"<value>\",\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalBenefitGrantsUpdateSecurity TypeScript\nDESCRIPTION: This code snippet shows how to import and initialize the `CustomerPortalBenefitGrantsUpdateSecurity` model in TypeScript. It demonstrates assigning a string value to the `customerSession` property. This model likely represents the security context required to update customer portal benefit grants.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalbenefitgrantsupdatesecurity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalBenefitGrantsUpdateSecurity } from \"@polar-sh/sdk/models/operations/customerportalbenefitgrantsupdate.js\";\n\nlet value: CustomerPortalBenefitGrantsUpdateSecurity = {\n  customerSession: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Scope Values\nDESCRIPTION: This snippet defines the valid string literals for the Scope type. These literals represent different permissions and access levels within the Polar platform, spanning from user data to organization management and other features.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/scope.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"openid\" | \"profile\" | \"email\" | \"user:read\" | \"admin\" | \"web_default\" | \"organizations:read\" | \"organizations:write\" | \"custom_fields:read\" | \"custom_fields:write\" | \"discounts:read\" | \"discounts:write\" | \"checkout_links:read\" | \"checkout_links:write\" | \"checkouts:read\" | \"checkouts:write\" | \"products:read\" | \"products:write\" | \"benefits:read\" | \"benefits:write\" | \"events:read\" | \"events:write\" | \"meters:read\" | \"meters:write\" | \"files:read\" | \"files:write\" | \"subscriptions:read\" | \"subscriptions:write\" | \"customers:read\" | \"customers:write\" | \"customer_meters:read\" | \"customer_sessions:write\" | \"orders:read\" | \"refunds:read\" | \"refunds:write\" | \"metrics:read\" | \"webhooks:read\" | \"webhooks:write\" | \"external_organizations:read\" | \"license_keys:read\" | \"license_keys:write\" | \"repositories:read\" | \"repositories:write\" | \"issues:read\" | \"issues:write\" | \"customer_portal:read\" | \"customer_portal:write\" | \"notification_recipients:read\" | \"notification_recipients:write\"\n```\n\n----------------------------------------\n\nTITLE: CustomerMetersListResponse Usage Example in Typescript\nDESCRIPTION: This code snippet demonstrates how to import and use the `CustomerMetersListResponse` type from the `@polar-sh/sdk/models/operations/customermeterslist.js` module. It initializes a variable of this type with a complex object containing nested properties, dates, and arrays, representing a sample response for listing customer meters. The code shows how to create nested objects like `customer`, `meter` and how to set their properties, including dates using `new Date()`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customermeterslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerMetersListResponse } from \"@polar-sh/sdk/models/operations/customermeterslist.js\";\n\nlet value: CustomerMetersListResponse = {\n  result: {\n    items: [\n      {\n        id: \"<value>\",\n        createdAt: new Date(\"2025-10-30T01:14:46.675Z\"),\n        modifiedAt: new Date(\"2024-03-26T17:04:15.059Z\"),\n        customerId: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n        meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n        consumedUnits: 25,\n        creditedUnits: 100,\n        balance: 75,\n        customer: {\n          id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n          createdAt: new Date(\"2023-04-10T10:19:51.334Z\"),\n          modifiedAt: new Date(\"2023-03-03T06:46:05.549Z\"),\n          metadata: {\n            \"key\": 2245.8,\n          },\n          externalId: \"usr_1337\",\n          email: \"customer@example.com\",\n          emailVerified: true,\n          name: \"John Doe\",\n          billingAddress: {\n            country: \"FR\",\n          },\n          taxId: [\n            \"FR61954506077\",\n            \"eu_vat\",\n          ],\n          organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n          deletedAt: new Date(\"2023-09-04T06:51:34.545Z\"),\n          avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n        },\n        meter: {\n          metadata: {\n            \"key\": false,\n          },\n          createdAt: new Date(\"2025-01-23T09:02:41.952Z\"),\n          modifiedAt: new Date(\"2025-07-26T09:42:30.311Z\"),\n          id: \"<value>\",\n          name: \"<value>\",\n          filter: {\n            conjunction: \"or\",\n            clauses: [],\n          },\n          aggregation: {\n            func: \"sum\",\n            property: \"<value>\",\n          },\n          organizationId: \"<value>\",\n        },\n      },\n    ],\n    pagination: {\n      totalCount: 541703,\n      maxPage: 14629,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: AuthorizationCodeTokenRequest Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the AuthorizationCodeTokenRequest type from the '@polar-sh/sdk/models/components/authorizationcodetokenrequest.js' module. It creates a sample AuthorizationCodeTokenRequest object with dummy values for clientId, clientSecret, code, and a redirectUri. This is useful for initializing requests for authorization tokens.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/authorizationcodetokenrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthorizationCodeTokenRequest } from \"@polar-sh/sdk/models/components/authorizationcodetokenrequest.js\";\n\nlet value: AuthorizationCodeTokenRequest = {\n  clientId: \"<id>\",\n  clientSecret: \"<value>\",\n  code: \"<value>\",\n  redirectUri: \"https://well-to-do-cellar.biz\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LicenseKeyUpdate Model in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the LicenseKeyUpdate model in a TypeScript environment. It requires the @polar-sh/sdk dependency.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/licensekeyupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LicenseKeyUpdate } from \"@polar-sh/sdk/models/components/licensekeyupdate.js\";\n\nlet value: LicenseKeyUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: Creating CustomerPortalLicenseKeysGetRequest object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and create a `CustomerPortalLicenseKeysGetRequest` object in TypeScript. It requires the `@polar-sh/sdk/models/operations/customerportallicensekeysget.js` module. The object includes an `id` property which is a string.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportallicensekeysgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalLicenseKeysGetRequest } from \"@polar-sh/sdk/models/operations/customerportallicensekeysget.js\";\n\nlet value: CustomerPortalLicenseKeysGetRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitCustomUpdate Type - TypeScript\nDESCRIPTION: Initializes an empty `BenefitCustomUpdate` object. This snippet demonstrates how to define a custom benefit update type, requiring the `components` module. It serves as a placeholder for custom benefit logic within the Polar platform.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/benefitsupdatebenefitupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitCustomUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: CustomerPortalCustomersGetPaymentMethodsSecurity Usage TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the CustomerPortalCustomersGetPaymentMethodsSecurity model in TypeScript. It shows how to assign a value to the `customerSession` field.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalcustomersgetpaymentmethodssecurity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalCustomersGetPaymentMethodsSecurity } from \"@polar-sh/sdk/models/operations/customerportalcustomersgetpaymentmethods.js\";\n\nlet value: CustomerPortalCustomersGetPaymentMethodsSecurity = {\n  customerSession: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscountPercentageRepeatDurationBase in TypeScript\nDESCRIPTION: This code snippet demonstrates the initialization of a `DiscountPercentageRepeatDurationBase` object.  It specifies the duration as 'repeating', a duration in months, a fixed type, a percentage represented by `basisPoints`, creation and modification timestamps, an ID, metadata, name, code, start and end times, maximum redemptions, redemption count, and an organization ID. This showcases a repeating percentage-based discount with configurable duration.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/orderdiscount.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DiscountPercentageRepeatDurationBase = {\n  duration: \"repeating\",\n  durationInMonths: 695395,\n  type: \"fixed\",\n  basisPoints: 489532,\n  createdAt: new Date(\"2023-03-12T10:58:50.277Z\"),\n  modifiedAt: new Date(\"2024-09-14T19:15:52.642Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 399573,\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2023-08-16T10:20:17.618Z\"),\n  endsAt: new Date(\"2024-09-04T23:43:02.503Z\"),\n  maxRedemptions: 863337,\n  redemptionsCount: 383593,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Define DiscountFixedRepeatDurationBase Type - TypeScript\nDESCRIPTION: This snippet defines a TypeScript object representing a fixed discount that can be applied repeatedly. It includes properties such as duration, duration in months, type, amount, currency, timestamps, IDs, metadata, name, code, start and end dates, maximum redemptions, redemption count, and organization ID. The `duration` is set to 'once'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkdiscount.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DiscountFixedRepeatDurationBase = {\n  duration: \"once\",\n  durationInMonths: 619926,\n  type: \"fixed\",\n  amount: 441641,\n  currency: \"Namibia Dollar\",\n  createdAt: new Date(\"2025-11-25T04:43:58.974Z\"),\n  modifiedAt: new Date(\"2025-06-10T15:39:22.400Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": \"<value>\",\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2023-06-02T15:02:54.697Z\"),\n  endsAt: new Date(\"2025-05-26T12:41:24.659Z\"),\n  maxRedemptions: 76274,\n  redemptionsCount: 21686,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: CheckoutLink Model Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `CheckoutLink` model from the `@polar-sh/sdk/models/components/checkoutlink.js` module in TypeScript. It showcases the structure and properties of a `CheckoutLink` object, including nested objects like `products`, `discount`, and their associated metadata and configurations. The example provides a blueprint for creating and manipulating checkout link data within the application.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlink.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutLink } from \"@polar-sh/sdk/models/components/checkoutlink.js\";\n\nlet value: CheckoutLink = {\n  createdAt: new Date(\"2025-09-22T20:17:02.127Z\"),\n  modifiedAt: new Date(\"2025-06-15T14:45:41.089Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": \"<value>\",\n  },\n  paymentProcessor: \"stripe\",\n  clientSecret: \"<value>\",\n  successUrl: \"https://tight-flint.com\",\n  label: \"<value>\",\n  allowDiscountCodes: false,\n  requireBillingAddress: false,\n  discountId: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  products: [\n    {\n      metadata: {\n        \"key\": false,\n      },\n      createdAt: new Date(\"2025-07-28T12:33:37.944Z\"),\n      modifiedAt: new Date(\"2023-01-31T11:26:23.487Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description: \"delight quaff rich whether\",\n      recurringInterval: \"year\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n      prices: [\n        {\n          createdAt: new Date(\"2024-05-05T19:13:16.573Z\"),\n          modifiedAt: new Date(\"2024-04-04T07:11:33.399Z\"),\n          id: \"<value>\",\n          isArchived: false,\n          productId: \"<value>\",\n          type: \"one_time\",\n          recurringInterval: \"year\",\n          priceCurrency: \"<value>\",\n          minimumAmount: 802874,\n          maximumAmount: 267046,\n          presetAmount: 363199,\n        },\n      ],\n      benefits: [\n        {\n          id: \"<value>\",\n          createdAt: new Date(\"2025-10-25T13:23:48.159Z\"),\n          modifiedAt: new Date(\"2023-07-31T19:33:10.922Z\"),\n          type: \"downloadables\",\n          description:\n            \"repossess uselessly beneath immaculate bah verve boo atop sway lazy\",\n          selectable: false,\n          deletable: false,\n          organizationId: \"<value>\",\n        },\n      ],\n      medias: [\n        {\n          id: \"<value>\",\n          organizationId: \"<value>\",\n          name: \"<value>\",\n          path: \"/etc/ppp\",\n          mimeType: \"<value>\",\n          size: 415391,\n          storageVersion: \"<value>\",\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n          checksumSha256Hex: \"<value>\",\n          lastModifiedAt: new Date(\"2023-02-20T13:49:01.260Z\"),\n          version: \"<value>\",\n          isUploaded: false,\n          createdAt: new Date(\"2024-09-10T22:54:43.877Z\"),\n          sizeReadable: \"<value>\",\n          publicUrl: \"https://remorseful-disk.com\",\n        },\n      ],\n    },\n  ],\n  discount: {\n    duration: \"repeating\",\n    type: \"fixed\",\n    amount: 762875,\n    currency: \"Zambian Kwacha\",\n    createdAt: new Date(\"2023-09-29T07:09:12.270Z\"),\n    modifiedAt: new Date(\"2025-07-21T01:26:11.210Z\"),\n    id: \"<value>\",\n    metadata: {\n      \"key\": false,\n    },\n    name: \"<value>\",\n    code: \"<value>\",\n    startsAt: new Date(\"2025-08-28T21:24:01.892Z\"),\n    endsAt: new Date(\"2025-10-05T13:26:22.129Z\"),\n    maxRedemptions: 173452,\n    redemptionsCount: 933673,\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  },\n  url: \"https://everlasting-teammate.info\",\n};\n```\n\n----------------------------------------\n\nTITLE: TaxIDFormat Type Declaration TypeScript\nDESCRIPTION: Defines a variable `value` of type `components.TaxIDFormat` and assigns it the string literal \"ua_vat\". This demonstrates how to declare and initialize a variable with a specific string literal type that is part of components TaxIDFormat in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/licensekeycustomertaxid.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.TaxIDFormat = \"ua_vat\";\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerSubscriptionUpdateProduct in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define and instantiate a `CustomerSubscriptionUpdateProduct` object in TypeScript using the `@polar-sh/sdk` library. It imports the necessary type definition and creates an instance with a sample product ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customersubscriptionupdateproduct.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerSubscriptionUpdateProduct } from \"@polar-sh/sdk/models/components/customersubscriptionupdateproduct.js\";\n\nlet value: CustomerSubscriptionUpdateProduct = {\n  productId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: CheckoutPublic Model Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the CheckoutPublic model from the @polar-sh/sdk in a TypeScript environment. It creates an instance of the CheckoutPublic object and populates its properties with sample data. The example includes various fields such as IDs, dates, amounts, strings, and nested objects like products, discounts, and organization details.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpublic.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutPublic } from \"@polar-sh/sdk/models/components/checkoutpublic.js\";\n\nlet value: CheckoutPublic = {\n  createdAt: new Date(\"2024-12-14T20:36:57.037Z\"),\n  modifiedAt: new Date(\"2024-03-31T13:03:44.610Z\"),\n  id: \"<value>\",\n  paymentProcessor: \"stripe\",\n  status: \"succeeded\",\n  clientSecret: \"<value>\",\n  url: \"https://annual-begonia.biz/\",\n  expiresAt: new Date(\"2023-09-30T09:44:04.147Z\"),\n  successUrl: \"https://simple-castanet.name/\",\n  embedOrigin: \"<value>\",\n  amount: 57291,\n  discountAmount: 326222,\n  netAmount: 736132,\n  taxAmount: 449851,\n  totalAmount: 58955,\n  currency: \"Yemeni Rial\",\n  productId: \"<value>\",\n  productPriceId: \"<value>\",\n  discountId: \"<value>\",\n  allowDiscountCodes: false,\n  requireBillingAddress: false,\n  isDiscountApplicable: false,\n  isFreeProductPrice: false,\n  isPaymentRequired: false,\n  isPaymentSetupRequired: false,\n  isPaymentFormRequired: false,\n  customerId: \"<value>\",\n  customerName: \"<value>\",\n  customerEmail: \"<value>\",\n  customerIpAddress: \"<value>\",\n  customerBillingAddress: {\n    country: \"US\",\n  },\n  customerTaxId: \"<id>\",\n  paymentProcessorMetadata: {\n    \"key\": \"<value>\",\n  },\n  products: [\n    {\n      createdAt: new Date(\"2024-09-28T01:01:14.588Z\"),\n      modifiedAt: new Date(\"2024-11-02T12:15:27.373Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description: \"catalog gladly focalise coolly plump anti giant actually\",\n      recurringInterval: \"year\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n      prices: [\n        {\n          createdAt: new Date(\"2024-03-21T18:20:59.508Z\"),\n          modifiedAt: new Date(\"2023-04-11T19:27:26.832Z\"),\n          id: \"<value>\",\n          isArchived: false,\n          productId: \"<value>\",\n          recurringInterval: \"year\",\n          priceCurrency: \"<value>\",\n          minimumAmount: 489669,\n          maximumAmount: 380551,\n          presetAmount: 915457,\n        },\n      ],\n      benefits: [\n        {\n          id: \"<value>\",\n          createdAt: new Date(\"2023-06-02T11:26:30.723Z\"),\n          modifiedAt: new Date(\"2024-06-08T18:26:53.959Z\"),\n          type: \"meter_credit\",\n          description: \"sans alongside off off crumble ick lay what liberalize\",\n          selectable: false,\n          deletable: false,\n          organizationId: \"<value>\",\n        },\n      ],\n      medias: [\n        {\n          id: \"<value>\",\n          organizationId: \"<value>\",\n          name: \"<value>\",\n          path: \"/opt/lib\",\n          mimeType: \"<value>\",\n          size: 75913,\n          storageVersion: \"<value>\",\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n          checksumSha256Hex: \"<value>\",\n          lastModifiedAt: new Date(\"2024-11-30T10:46:19.815Z\"),\n          version: \"<value>\",\n          isUploaded: false,\n          createdAt: new Date(\"2025-01-14T14:29:55.809Z\"),\n          sizeReadable: \"<value>\",\n          publicUrl: \"https://appropriate-effector.org\",\n        },\n      ],\n    },\n  ],\n  product: {\n    createdAt: new Date(\"2024-03-06T14:28:43.848Z\"),\n    modifiedAt: new Date(\"2024-01-18T20:31:44.092Z\"),\n    id: \"<value>\",\n    name: \"<value>\",\n    description: \"arrogantly urban against certify vivaciously whenever\",\n    recurringInterval: \"year\",\n    isRecurring: false,\n    isArchived: false,\n    organizationId: \"<value>\",\n    prices: [\n      {\n        createdAt: new Date(\"2024-01-16T18:35:35.980Z\"),\n        modifiedAt: new Date(\"2023-02-15T02:05:49.004Z\"),\n        id: \"<value>\",\n        isArchived: false,\n        productId: \"<value>\",\n        recurringInterval: \"year\",\n        priceCurrency: \"<value>\",\n        priceAmount: 951824,\n      },\n    ],\n    benefits: [\n      {\n        id: \"<value>\",\n        createdAt: new Date(\"2023-04-06T03:35:34.534Z\"),\n        modifiedAt: new Date(\"2023-02-12T09:24:20.701Z\"),\n        type: \"meter_credit\",\n        description: \"certainly thoughtfully ah aw gah criminal\",\n        selectable: false,\n        deletable: false,\n        organizationId: \"<value>\",\n      },\n    ],\n    medias: [\n      {\n        id: \"<value>\",\n        organizationId: \"<value>\",\n        name: \"<value>\",\n        path: \"/var/tmp\",\n        mimeType: \"<value>\",\n        size: 395808,\n        storageVersion: \"<value>\",\n        checksumEtag: \"<value>\",\n        checksumSha256Base64: \"<value>\",\n        checksumSha256Hex: \"<value>\",\n        lastModifiedAt: new Date(\"2023-01-19T11:13:39.153Z\"),\n        version: \"<value>\",\n        isUploaded: false,\n        createdAt: new Date(\"2025-02-14T20:17:30.008Z\"),\n        sizeReadable: \"<value>\",\n        publicUrl: \"https://these-bonfire.biz\",\n      },\n    ],\n  },\n  productPrice: {\n    createdAt: new Date(\"2024-08-28T18:58:45.377Z\"),\n    modifiedAt: new Date(\"2023-03-18T13:28:21.576Z\"),\n    id: \"<value>\",\n    isArchived: false,\n    productId: \"<value>\",\n    recurringInterval: \"year\",\n  },\n  discount: {\n    duration: \"once\",\n    durationInMonths: 490433,\n    type: \"percentage\",\n    basisPoints: 926654,\n    id: \"<value>\",\n    name: \"<value>\",\n    code: \"<value>\",\n  },\n  organization: {\n    createdAt: new Date(\"2023-03-23T06:02:14.541Z\"),\n    modifiedAt: new Date(\"2025-09-09T12:28:03.182Z\"),\n    id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    name: \"<value>\",\n    slug: \"<value>\",\n    avatarUrl: \"https://deafening-department.org/\",\n    email: \"Tavares.Emard@hotmail.com\",\n    website: \"<value>\",\n    socials: [\n      {\n        platform: \"other\",\n        url: \"https://empty-courtroom.name\",\n      },\n    ],\n    detailsSubmittedAt: new Date(\"2023-02-20T20:22:31.771Z\"),\n    featureSettings: {},\n    subscriptionSettings: {\n      allowMultipleSubscriptions: false,\n      allowCustomerUpdates: false,\n      prorationBehavior: \"invoice\",\n    },\n  },\n  attachedCustomFields: [\n    {\n      customFieldId: \"<value>\",\n      customField: {\n        createdAt: new Date(\"2024-06-23T15:07:12.704Z\"),\n        modifiedAt: new Date(\"2023-11-14T00:56:05.309Z\"),\n        id: \"<value>\",\n        metadata: {\n          \"key\": 8425.01,\n        },\n        slug: \"<value>\",\n        name: \"<value>\",\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        properties: {},\n      },\n      order: 617792,\n      required: false,\n    },\n  ],\n  customerBillingAddressFields: {\n    country: false,\n    state: false,\n    city: false,\n    postalCode: false,\n    line1: false,\n    line2: false,\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining BenefitDiscord Component Type in TypeScript\nDESCRIPTION: This code snippet shows the structure of the `components.BenefitDiscord` type, outlining properties such as `id`, `createdAt`, `modifiedAt`, `description`, `selectable`, `deletable`, `organizationId`, `metadata`, and `properties`. The metadata object contains a numeric value associated with a string key. The properties object includes fields for `guildId`, `roleId`, and `guildToken`, each represented as strings.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefit.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitDiscord = {\n  id: \"<value>\",\n  createdAt: new Date(\"2025-05-26T06:25:53.245Z\"),\n  modifiedAt: new Date(\"2024-07-04T12:48:33.795Z\"),\n  description: \"utterly antelope famously whose because folklore fatal a\",\n  selectable: false,\n  deletable: false,\n  organizationId: \"<value>\",\n  metadata: {\n    \"key\": 107005,\n  },\n  properties: {\n    guildId: \"<id>\",\n    roleId: \"<id>\",\n    guildToken: \"<value>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: WebhookProductUpdatedPayload Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and utilize the WebhookProductUpdatedPayload model from the @polar-sh/sdk library. It creates a sample object with various fields populated with example data to represent a webhook payload for a product update event. The snippet showcases the structure and properties of the WebhookProductUpdatedPayload model.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookproductupdatedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookProductUpdatedPayload } from \"@polar-sh/sdk/models/components/webhookproductupdatedpayload.js\";\n\nlet value: WebhookProductUpdatedPayload = {\n  data: {\n    createdAt: new Date(\"2024-07-10T16:47:33.947Z\"),\n    modifiedAt: new Date(\"2023-10-05T00:02:08.987Z\"),\n    id: \"<value>\",\n    name: \"<value>\",\n    description: \"indeed times whether meh for ugh nor snappy\",\n    recurringInterval: \"year\",\n    isRecurring: false,\n    isArchived: false,\n    organizationId: \"<value>\",\n    metadata: {\n      \"key\": false,\n    },\n    prices: [\n      {\n        createdAt: new Date(\"2023-12-26T11:06:12.833Z\"),\n        modifiedAt: new Date(\"2024-02-19T23:14:40.767Z\"),\n        id: \"<value>\",\n        isArchived: false,\n        productId: \"<value>\",\n        recurringInterval: \"month\",\n        priceCurrency: \"<value>\",\n        minimumAmount: 313221,\n        maximumAmount: 741035,\n        presetAmount: 498756,\n      },\n    ],\n    benefits: [\n      {\n        id: \"<value>\",\n        createdAt: new Date(\"2023-01-22T08:43:31.668Z\"),\n        modifiedAt: new Date(\"2024-06-19T14:06:17.535Z\"),\n        description:\n          \"tentacle fair needily vaguely triangular ugh that accept who agreeable\",\n        selectable: false,\n        deletable: false,\n        organizationId: \"<value>\",\n        metadata: {\n          \"key\": false,\n        },\n        properties: {\n          guildId: \"<id>\",\n          roleId: \"<id>\",\n          guildToken: \"<value>\",\n        },\n      },\n    ],\n    medias: [\n      {\n        id: \"<value>\",\n        organizationId: \"<value>\",\n        name: \"<value>\",\n        path: \"/usr/local/src\",\n        mimeType: \"<value>\",\n        size: 209578,\n        storageVersion: \"<value>\",\n        checksumEtag: \"<value>\",\n        checksumSha256Base64: \"<value>\",\n        checksumSha256Hex: \"<value>\",\n        lastModifiedAt: new Date(\"2025-11-12T08:17:41.246Z\"),\n        version: \"<value>\",\n        isUploaded: false,\n        createdAt: new Date(\"2023-06-13T13:46:21.644Z\"),\n        sizeReadable: \"<value>\",\n        publicUrl: \"https://negative-mouser.com/\",\n      },\n    ],\n    attachedCustomFields: [\n      {\n        customFieldId: \"<value>\",\n        customField: {\n          createdAt: new Date(\"2023-12-19T20:04:23.977Z\"),\n          modifiedAt: new Date(\"2024-04-11T11:01:02.896Z\"),\n          id: \"<value>\",\n          metadata: {\n            \"key\": false,\n          },\n          slug: \"<value>\",\n          name: \"<value>\",\n          organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n          properties: {},\n        },\n        order: 665335,\n        required: false,\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using RefundsListResponse in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import and use the `RefundsListResponse` object. It initializes an object with sample data, including dates, IDs, metadata, and other refund-related information. This example showcases the structure of the `RefundsListResponse` and the data it can contain.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/refundslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RefundsListResponse } from \"@polar-sh/sdk/models/operations/refundslist.js\";\n\nlet value: RefundsListResponse = {\n  result: {\n    items: [\n      {\n        createdAt: new Date(\"2025-04-19T13:54:12.716Z\"),\n        modifiedAt: new Date(\"2024-10-30T22:59:40.030Z\"),\n        id: \"<value>\",\n        metadata: {\n          \"key\": 872378,\n        },\n        status: \"failed\",\n        reason: \"customer_request\",\n        amount: 933688,\n        taxAmount: 597241,\n        currency: \"Rwanda Franc\",\n        organizationId: \"<value>\",\n        orderId: \"<value>\",\n        subscriptionId: \"<value>\",\n        customerId: \"<value>\",\n        revokeBenefits: false,\n      },\n    ],\n    pagination: {\n      totalCount: 930324,\n      maxPage: 181026,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating BenefitLicenseKeysCreate object in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an instance of the `BenefitLicenseKeysCreate` object. It imports the necessary type from the `@polar-sh/sdk` library and then initializes an object with sample values for the `description`, `organizationId`, and `properties` fields. The `organizationId` is a UUID and `properties` is an empty object, and `description` is a string. This is useful for creating new benefit license keys using the Polar SDK.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeyscreate.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { BenefitLicenseKeysCreate } from \"@polar-sh/sdk/models/components/benefitlicensekeyscreate.js\";\n\nlet value: BenefitLicenseKeysCreate = {\n  description: \"optimal angrily when excluding gah meh blah pave outside\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerProduct with TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to create an instance of the `CustomerProduct` object using the `@polar-sh/sdk`. It imports the necessary class and assigns values to each of the product's properties, including dates, strings, booleans, and arrays of `prices`, `benefits`, and `medias`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerproduct.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerProduct } from \"@polar-sh/sdk/models/components/customerproduct.js\";\n\nlet value: CustomerProduct = {\n  createdAt: new Date(\"2023-08-02T14:57:17.701Z\"),\n  modifiedAt: new Date(\"2023-01-27T08:34:14.408Z\"),\n  id: \"<value>\",\n  name: \"<value>\",\n  description: \"geez nougat around decryption wherever council\",\n  recurringInterval: \"month\",\n  isRecurring: false,\n  isArchived: false,\n  organizationId: \"<value>\",\n  prices: [\n    {\n      createdAt: new Date(\"2025-12-18T13:12:35.966Z\"),\n      modifiedAt: new Date(\"2023-06-08T12:42:20.813Z\"),\n      id: \"<value>\",\n      isArchived: false,\n      productId: \"<value>\",\n      type: \"recurring\",\n      recurringInterval: \"month\",\n      priceCurrency: \"<value>\",\n      priceAmount: 197283,\n    },\n  ],\n  benefits: [\n    {\n      id: \"<value>\",\n      createdAt: new Date(\"2023-06-09T17:45:59.840Z\"),\n      modifiedAt: new Date(\"2023-05-12T03:22:19.560Z\"),\n      type: \"downloadables\",\n      description: \"aware but tributary oh even hearten\",\n      selectable: false,\n      deletable: false,\n      organizationId: \"<value>\",\n    },\n  ],\n  medias: [\n    {\n      id: \"<value>\",\n      organizationId: \"<value>\",\n      name: \"<value>\",\n      path: \"/Network\",\n      mimeType: \"<value>\",\n      size: 914138,\n      storageVersion: \"<value>\",\n      checksumEtag: \"<value>\",\n      checksumSha256Base64: \"<value>\",\n      checksumSha256Hex: \"<value>\",\n      lastModifiedAt: new Date(\"2023-01-24T22:04:36.931Z\"),\n      version: \"<value>\",\n      isUploaded: false,\n      createdAt: new Date(\"2023-12-18T20:32:27.163Z\"),\n      sizeReadable: \"<value>\",\n      publicUrl: \"https://untried-fort.org\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Customer Meters with Standalone Function\nDESCRIPTION: This snippet illustrates how to list customer meters using the standalone function approach from the Polar SDK.  It leverages `PolarCore` for improved tree-shaking. It requires `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/customerPortalCustomerMetersList.js` packages, as well as a valid `POLAR_CUSTOMER_SESSION` environment variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarcustomermeters/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalCustomerMetersList } from \"@polar-sh/sdk/funcs/customerPortalCustomerMetersList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalCustomerMetersList(polar, {\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {});\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: CustomerState Model Usage in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and instantiate the CustomerState model in TypeScript. It shows how to populate the model with sample data, including nested objects and arrays for active subscriptions, granted benefits, and active meters. The purpose is to provide a concrete example of how to use the CustomerState model in a polar-js application. The code depends on the `@polar-sh/sdk/models/components/customerstate.js` module.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerState } from \"@polar-sh/sdk/models/components/customerstate.js\";\n\nlet value: CustomerState = {\n  id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n  createdAt: new Date(\"2023-04-12T13:06:03.685Z\"),\n  modifiedAt: new Date(\"2025-09-17T07:27:55.357Z\"),\n  metadata: {\n    \"key\": 4275.05,\n  },\n  externalId: \"usr_1337\",\n  email: \"customer@example.com\",\n  emailVerified: true,\n  name: \"John Doe\",\n  billingAddress: {\n    country: \"US\",\n  },\n  taxId: [\n    \"FR61954506077\",\n    \"eu_vat\",\n  ],\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  deletedAt: new Date(\"2025-01-12T15:44:32.793Z\"),\n  activeSubscriptions: [\n    {\n      id: \"e5149aae-e521-42b9-b24c-abb3d71eea2e\",\n      createdAt: new Date(\"2025-09-13T05:36:28.332Z\"),\n      modifiedAt: new Date(\"2023-06-29T21:29:51.503Z\"),\n      metadata: {\n        \"key\": 737479,\n      },\n      amount: 1000,\n      currency: \"usd\",\n      recurringInterval: \"month\",\n      currentPeriodStart: new Date(\"2025-02-03T13:37:00Z\"),\n      currentPeriodEnd: new Date(\"2025-03-03T13:37:00Z\"),\n      cancelAtPeriodEnd: false,\n      canceledAt: null,\n      startedAt: new Date(\"2025-01-03T13:37:00Z\"),\n      endsAt: null,\n      productId: \"d8dd2de1-21b7-4a41-8bc3-ce909c0cfe23\",\n      discountId: null,\n      meters: [\n        {\n          createdAt: new Date(\"2023-10-27T09:57:20.709Z\"),\n          modifiedAt: new Date(\"2025-12-13T14:51:07.575Z\"),\n          id: \"<value>\",\n          consumedUnits: 25,\n          creditedUnits: 100,\n          amount: 0,\n          meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n        },\n      ],\n    },\n  ],\n  grantedBenefits: [\n    {\n      id: \"d322132c-a9d0-4e0d-b8d3-d81ad021a3a9\",\n      createdAt: new Date(\"2023-02-21T03:07:24.293Z\"),\n      modifiedAt: new Date(\"2024-08-06T03:48:52.242Z\"),\n      grantedAt: new Date(\"2025-01-03T13:37:00Z\"),\n      benefitId: \"397a17aa-15cf-4cb4-9333-18040203cf98\",\n      benefitType: \"discord\",\n      properties: {},\n    },\n  ],\n  activeMeters: [\n    {\n      createdAt: new Date(\"2025-07-13T15:26:30.510Z\"),\n      modifiedAt: new Date(\"2025-04-30T07:02:55.261Z\"),\n      meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n      consumedUnits: 25,\n      creditedUnits: 100,\n      balance: 75,\n    },\n  ],\n  avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n};\n```\n\n----------------------------------------\n\nTITLE: SubscriptionStatus Usage Example TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `SubscriptionStatus` type from the `@polar-sh/sdk/models/components/subscriptionstatus.js` module. It initializes a variable named `value` of type `SubscriptionStatus` to the string 'canceled'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptionstatus.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubscriptionStatus } from \"@polar-sh/sdk/models/components/subscriptionstatus.js\";\n\nlet value: SubscriptionStatus = \"canceled\";\n```\n\n----------------------------------------\n\nTITLE: Creating S3DownloadURL Object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an S3DownloadURL object using TypeScript. It imports the S3DownloadURL type from the '@polar-sh/sdk/models/components/s3downloadurl.js' module and creates an instance of it with a URL and expiration date. This example assumes the @polar-sh/sdk package is installed as a dependency.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/s3downloadurl.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { S3DownloadURL } from \"@polar-sh/sdk/models/components/s3downloadurl.js\";\n\nlet value: S3DownloadURL = {\n  url: \"https://best-lay.org/\",\n  expiresAt: new Date(\"2023-12-05T22:14:20.034Z\"),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CustomFieldText type in TypeScript\nDESCRIPTION: This code snippet defines the structure for `CustomFieldText` using TypeScript. It shows how to define the properties like createdAt, modifiedAt, id, metadata, slug, name, organizationId, and properties, including setting default or example values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfield.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomFieldText = {\n  createdAt: new Date(\"2025-11-19T01:45:51.741Z\"),\n  modifiedAt: new Date(\"2023-01-30T08:04:14.705Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": false,\n  },\n  slug: \"<value>\",\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Organization ID Filter in TypeScript\nDESCRIPTION: This snippet demonstrates how to filter customer meters by multiple organization IDs using a string array. The array contains the organization IDs as strings.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customermeterslistqueryparamorganizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: Creating CheckoutLinksUpdateRequest Object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a `CheckoutLinksUpdateRequest` object in TypeScript. It imports the necessary class from the `@polar-sh/sdk/models/operations/checkoutlinksupdate.js` module and initializes an instance of the class with a sample ID and an empty `checkoutLinkUpdate` object. The `id` field is required and represents the checkout link ID, and `checkoutLinkUpdate` which is of type `components.CheckoutLinkUpdate` is also required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutlinksupdaterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutLinksUpdateRequest } from \"@polar-sh/sdk/models/operations/checkoutlinksupdate.js\";\n\nlet value: CheckoutLinksUpdateRequest = {\n  id: \"<value>\",\n  checkoutLinkUpdate: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Definition\nDESCRIPTION: Defines a constant `value` of type `boolean` and assigns it the boolean value `false`. This shows how to define a boolean type for BenefitMeterCreditCreateMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditcreatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Defining CheckoutLinkCreateProducts Type - TypeScript\nDESCRIPTION: This snippet demonstrates how to define an object of type `CheckoutLinkCreateProducts`. It includes a `products` property, which is an array of product IDs. This type might be used when you need to create a checkout link that includes multiple products.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutlinkscreatecheckoutlinkcreate.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CheckoutLinkCreateProducts = {\n  products: [\n    \"<value>\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LegacyRecurringProductPrice in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a `components.LegacyRecurringProductPrice` object in TypeScript. It shows the structure of the object and the data types of its properties, including dates, strings, numbers, and booleans. The `createdAt` and `modifiedAt` properties are initialized with `Date` objects, and other properties like `id`, `productId`, `recurringInterval`, and `priceCurrency` are initialized with string values. `minimumAmount`, `maximumAmount`, and `presetAmount` are number values and `isArchived` is boolean.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerproductprices.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.LegacyRecurringProductPrice = {\n  createdAt: new Date(\"2025-03-28T17:53:12.899Z\"),\n  modifiedAt: new Date(\"2024-08-10T00:40:01.700Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  recurringInterval: \"year\",\n  priceCurrency: \"<value>\",\n  minimumAmount: 981878,\n  maximumAmount: 962753,\n  presetAmount: 690635,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing MetersListResponse in Typescript\nDESCRIPTION: This code snippet demonstrates how to initialize a MetersListResponse object in TypeScript. It imports the MetersListResponse type from the @polar-sh/sdk library and creates an example object with sample data, including a list of meter items and pagination details. The 'result' field is populated with mock values for its nested properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/meterslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MetersListResponse } from \"@polar-sh/sdk/models/operations/meterslist.js\";\n\nlet value: MetersListResponse = {\n  result: {\n    items: [\n      {\n        metadata: {\n          \"key\": \"<value>\",\n        },\n        createdAt: new Date(\"2025-04-21T05:25:19.258Z\"),\n        modifiedAt: new Date(\"2023-01-31T09:16:39.900Z\"),\n        id: \"<value>\",\n        name: \"<value>\",\n        filter: {\n          conjunction: \"or\",\n          clauses: [],\n        },\n        aggregation: {\n          func: \"max\",\n          property: \"<value>\",\n        },\n        organizationId: \"<value>\",\n      },\n    ],\n    pagination: {\n      totalCount: 255858,\n      maxPage: 729316,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: CheckoutLinksListResponse Usage Example in TypeScript\nDESCRIPTION: This code demonstrates how to import the CheckoutLinksListResponse type from the @polar-sh/sdk/models/operations/checkoutlinkslist.js module and create an instance of it with sample data. The sample data includes nested objects and arrays representing checkout link details, products, prices, benefits, discounts, and metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutlinkslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutLinksListResponse } from \"@polar-sh/sdk/models/operations/checkoutlinkslist.js\";\n\nlet value: CheckoutLinksListResponse = {\n  result: {\n    items: [\n      {\n        createdAt: new Date(\"2023-02-06T22:09:25.531Z\"),\n        modifiedAt: new Date(\"2025-11-26T01:34:54.964Z\"),\n        id: \"<value>\",\n        metadata: {\n          \"key\": 7755.87,\n        },\n        paymentProcessor: \"stripe\",\n        clientSecret: \"<value>\",\n        successUrl: \"https://super-effector.info\",\n        label: \"<value>\",\n        allowDiscountCodes: false,\n        requireBillingAddress: false,\n        discountId: \"<value>\",\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        products: [\n          {\n            metadata: {\n              \"key\": 946577,\n            },\n            createdAt: new Date(\"2025-11-14T00:45:33.755Z\"),\n            modifiedAt: new Date(\"2023-08-10T04:49:11.109Z\"),\n            id: \"<value>\",\n            name: \"<value>\",\n            description:\n              \"editor airport ack tuber acclaimed hm cultivated round exploration\",\n            recurringInterval: \"month\",\n            isRecurring: false,\n            isArchived: false,\n            organizationId: \"<value>\",\n            prices: [\n              {\n                createdAt: new Date(\"2023-05-30T06:04:04.812Z\"),\n                modifiedAt: new Date(\"2023-02-17T18:17:50.207Z\"),\n                id: \"<value>\",\n                isArchived: false,\n                productId: \"<value>\",\n                type: \"recurring\",\n                recurringInterval: \"month\",\n                priceCurrency: \"<value>\",\n                priceAmount: 889429,\n              },\n            ],\n            benefits: [\n              {\n                id: \"<value>\",\n                createdAt: new Date(\"2025-03-10T19:45:47.510Z\"),\n                modifiedAt: new Date(\"2023-12-05T12:06:08.343Z\"),\n                type: \"meter_credit\",\n                description:\n                  \"seafood upliftingly juicy yellowish joyfully bah indelible doubtfully\",\n                selectable: false,\n                deletable: false,\n                organizationId: \"<value>\",\n              },\n            ],\n            medias: [\n              {\n                id: \"<value>\",\n                organizationId: \"<value>\",\n                name: \"<value>\",\n                path: \"/opt/bin\",\n                mimeType: \"<value>\",\n                size: 469920,\n                storageVersion: \"<value>\",\n                checksumEtag: \"<value>\",\n                checksumSha256Base64: \"<value>\",\n                checksumSha256Hex: \"<value>\",\n                lastModifiedAt: new Date(\"2025-06-05T23:42:21.333Z\"),\n                version: \"<value>\",\n                isUploaded: false,\n                createdAt: new Date(\"2025-06-06T21:07:20.168Z\"),\n                sizeReadable: \"<value>\",\n                publicUrl: \"https://good-natured-climb.com/\",\n              },\n            ],\n          },\n        ],\n        discount: {\n          duration: \"once\",\n          type: \"percentage\",\n          basisPoints: 489905,\n          createdAt: new Date(\"2023-09-30T05:12:41.329Z\"),\n          modifiedAt: new Date(\"2023-08-27T20:13:42.327Z\"),\n          id: \"<value>\",\n          metadata: {\n            \"key\": 983.55,\n          },\n          name: \"<value>\",\n          code: \"<value>\",\n          startsAt: new Date(\"2024-12-01T16:09:04.896Z\"),\n          endsAt: new Date(\"2025-09-17T01:03:34.671Z\"),\n          maxRedemptions: 385134,\n          redemptionsCount: 975713,\n          organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        },\n        url: \"https://thin-amendment.com\",\n      },\n    ],\n    pagination: {\n      totalCount: 29780,\n      maxPage: 671239,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating OrdersInvoiceRequest Instance Typescript\nDESCRIPTION: This snippet demonstrates how to create an instance of the `OrdersInvoiceRequest` model in TypeScript. It imports the model from the `@polar-sh/sdk/models/operations/ordersinvoice.js` module and initializes an object with the required `id` field. The `id` field is a string that represents the order ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/ordersinvoicerequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrdersInvoiceRequest } from \"@polar-sh/sdk/models/operations/ordersinvoice.js\";\n\nlet value: OrdersInvoiceRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: WebhookProductCreatedPayload Example\nDESCRIPTION: This snippet demonstrates how to import and use the WebhookProductCreatedPayload type in TypeScript. It creates an example payload object with sample data for various fields, including dates, strings, numbers, and nested objects and arrays. The example includes data for product details like creation and modification timestamps, ID, name, description, recurring information, organization ID, metadata, prices, benefits, media, and attached custom fields.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookproductcreatedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookProductCreatedPayload } from \"@polar-sh/sdk/models/components/webhookproductcreatedpayload.js\";\n\nlet value: WebhookProductCreatedPayload = {\n  data: {\n    createdAt: new Date(\"2023-05-19T12:16:27.570Z\"),\n    modifiedAt: new Date(\"2025-09-03T21:58:48.594Z\"),\n    id: \"<value>\",\n    name: \"<value>\",\n    description: \"athwart degenerate before gadzooks pluck\",\n    recurringInterval: \"month\",\n    isRecurring: false,\n    isArchived: false,\n    organizationId: \"<value>\",\n    metadata: {\n      \"key\": 427510,\n    },\n    prices: [\n      {\n        createdAt: new Date(\"2025-09-02T05:35:28.168Z\"),\n        modifiedAt: new Date(\"2024-12-07T16:14:18.422Z\"),\n        id: \"<value>\",\n        isArchived: false,\n        productId: \"<value>\",\n        recurringInterval: \"month\",\n        priceCurrency: \"<value>\",\n        minimumAmount: 855106,\n        maximumAmount: 836675,\n        presetAmount: 352882,\n      },\n    ],\n    benefits: [\n      {\n        id: \"<value>\",\n        createdAt: new Date(\"2023-10-31T19:57:37.073Z\"),\n        modifiedAt: new Date(\"2023-02-03T22:58:09.301Z\"),\n        description:\n          \"aside immediately tightly that regularly traduce chunder gosh\",\n        selectable: false,\n        deletable: false,\n        organizationId: \"<value>\",\n        metadata: {\n          \"key\": 5293.12,\n        },\n        properties: {\n          note: \"<value>\",\n        },\n      },\n    ],\n    medias: [\n      {\n        id: \"<value>\",\n        organizationId: \"<value>\",\n        name: \"<value>\",\n        path: \"/sys\",\n        mimeType: \"<value>\",\n        size: 233631,\n        storageVersion: \"<value>\",\n        checksumEtag: \"<value>\",\n        checksumSha256Base64: \"<value>\",\n        checksumSha256Hex: \"<value>\",\n        lastModifiedAt: new Date(\"2023-01-28T13:08:13.837Z\"),\n        version: \"<value>\",\n        isUploaded: false,\n        createdAt: new Date(\"2023-02-09T11:37:52.504Z\"),\n        sizeReadable: \"<value>\",\n        publicUrl: \"https://angelic-porter.name\",\n      },\n    ],\n    attachedCustomFields: [\n      {\n        customFieldId: \"<value>\",\n        customField: {\n          createdAt: new Date(\"2024-12-10T02:15:58.855Z\"),\n          modifiedAt: new Date(\"2023-08-28T20:06:43.256Z\"),\n          id: \"<value>\",\n          metadata: {\n            \"key\": \"<value>\",\n          },\n          slug: \"<value>\",\n          name: \"<value>\",\n          organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n          properties: {},\n        },\n        order: 493850,\n        required: false,\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerBenefitGrantMeterCredit in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a `CustomerBenefitGrantMeterCredit` object in TypeScript. It imports the class and creates an instance with various properties, including dates, IDs, booleans, and nested objects for customer, benefit, and properties. This example uses hardcoded values for demonstration purposes and shows how to structure the data.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantmetercredit.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerBenefitGrantMeterCredit } from \"@polar-sh/sdk/models/components/customerbenefitgrantmetercredit.js\";\n\nlet value: CustomerBenefitGrantMeterCredit = {\n  createdAt: new Date(\"2025-05-03T01:40:46.344Z\"),\n  modifiedAt: new Date(\"2025-12-06T01:26:55.407Z\"),\n  id: \"<value>\",\n  grantedAt: new Date(\"2024-08-19T02:38:27.858Z\"),\n  revokedAt: new Date(\"2025-02-04T14:22:46.766Z\"),\n  customerId: \"<value>\",\n  benefitId: \"<value>\",\n  subscriptionId: \"<value>\",\n  orderId: \"<value>\",\n  isGranted: false,\n  isRevoked: false,\n  customer: {\n    createdAt: new Date(\"2023-05-21T14:56:07.287Z\"),\n    modifiedAt: new Date(\"2023-07-14T06:34:38.265Z\"),\n    id: \"<value>\",\n    email: \"Sonia.Blanda84@hotmail.com\",\n    emailVerified: false,\n    name: \"<value>\",\n    billingAddress: {\n      country: \"FR\",\n    },\n    taxId: [\n      \"FR61954506077\",\n      \"eu_vat\",\n    ],\n    oauthAccounts: {\n      \"key\": {\n        accountId: \"<id>\",\n        accountUsername: \"<value>\",\n      },\n    },\n  },\n  benefit: {\n    id: \"<value>\",\n    createdAt: new Date(\"2025-01-01T07:06:15.468Z\"),\n    modifiedAt: new Date(\"2025-10-06T19:40:41.293Z\"),\n    description:\n      \"vaguely quarrelsomely rarely for make playfully bobble tightly\",\n    selectable: false,\n    deletable: false,\n    organizationId: \"<value>\",\n    metadata: {\n      \"key\": false,\n    },\n    organization: {\n      createdAt: new Date(\"2024-06-28T19:25:45.361Z\"),\n      modifiedAt: new Date(\"2025-03-23T09:19:48.253Z\"),\n      id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      name: \"<value>\",\n      slug: \"<value>\",\n      avatarUrl: \"https://cruel-sermon.com/\",\n      email: \"Carlotta_Von11@hotmail.com\",\n      website: \"<value>\",\n      socials: [\n        {\n          platform: \"linkedin\",\n          url: \"https://lanky-trolley.biz\",\n        },\n      ],\n      detailsSubmittedAt: new Date(\"2025-12-12T16:49:55.391Z\"),\n      featureSettings: {},\n      subscriptionSettings: {\n        allowMultipleSubscriptions: false,\n        allowCustomerUpdates: false,\n        prorationBehavior: \"invoice\",\n      },\n    },\n    properties: {\n      units: 903336,\n      meterId: \"<value>\",\n    },\n  },\n  properties: {\n    lastCreditedMeterId: \"<id>\",\n    lastCreditedUnits: 530974,\n    lastCreditedAt: \"<value>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using SwitchingFrom in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `SwitchingFrom` type from the `@polar-sh/sdk/models/components/organizationdetails.js` module. It assigns the string value \"paddle\" to a variable of type `SwitchingFrom`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/switchingfrom.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SwitchingFrom } from \"@polar-sh/sdk/models/components/organizationdetails.js\";\n\nlet value: SwitchingFrom = \"paddle\";\n```\n\n----------------------------------------\n\nTITLE: Defining ProductPriceFixedCreate Type in TypeScript\nDESCRIPTION: Defines an object of type `components.ProductPriceFixedCreate`.  This type is used when creating a fixed price for a product. The `priceAmount` field is a number representing the fixed price amount.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productupdateprices.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPriceFixedCreate = {\n  priceAmount: 578074,\n};\n```\n\n----------------------------------------\n\nTITLE: String Organization ID Filter - TypeScript\nDESCRIPTION: Demonstrates how to filter by a single organization ID using a string.  The string should be a valid UUID representing the organization's ID.  This is a TypeScript implementation.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/discountslistqueryparamorganizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: Creating BenefitDownloadablesCreateProperties in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `BenefitDownloadablesCreateProperties` type from the `@polar-sh/sdk` to create a value object. It initializes the `files` property with a string array.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablescreateproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitDownloadablesCreateProperties } from \"@polar-sh/sdk/models/components/benefitdownloadablescreateproperties.js\";\n\nlet value: BenefitDownloadablesCreateProperties = {\n  files: [\n    \"<value>\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating BenefitDiscordCreate Object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the BenefitDiscordCreate object using the @polar-sh/sdk. It imports the BenefitDiscordCreate class and initializes it with sample values for properties like description, organizationId, guildToken, and roleId. This object is then used to create a Discord benefit linked to a specific organization.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitDiscordCreate } from \"@polar-sh/sdk/models/components/benefitdiscordcreate.js\";\n\nlet value: BenefitDiscordCreate = {\n  description: \"vivacious because bah provided briefly\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {\n    guildToken: \"<value>\",\n    roleId: \"<id>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: CustomerOrder Model Instantiation in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and instantiate the CustomerOrder model from the @polar-sh/sdk. It shows how to create a CustomerOrder object and populate its properties with example data, including nested objects and arrays.  The model includes fields such as dates, IDs, monetary values, and references to related entities like products and subscriptions.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerorder.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerOrder } from \"@polar-sh/sdk/models/components/customerorder.js\";\n\nlet value: CustomerOrder = {\n  createdAt: new Date(\"2025-10-27T00:07:49.997Z\"),\n  modifiedAt: new Date(\"2023-11-25T14:57:51.552Z\"),\n  id: \"<value>\",\n  status: \"refunded\",\n  paid: true,\n  subtotalAmount: 175785,\n  discountAmount: 3721,\n  netAmount: 86176,\n  taxAmount: 961655,\n  totalAmount: 882330,\n  refundedAmount: 991943,\n  refundedTaxAmount: 816554,\n  currency: \"Azerbaijanian Manat\",\n  customerId: \"<value>\",\n  productId: \"<value>\",\n  subscriptionId: \"<value>\",\n  userId: \"<value>\",\n  product: {\n    createdAt: new Date(\"2023-09-08T14:32:11.975Z\"),\n    modifiedAt: new Date(\"2024-06-29T02:21:41.206Z\"),\n    id: \"<value>\",\n    name: \"<value>\",\n    description: \"so sedately through corny consequently\",\n    recurringInterval: \"month\",\n    isRecurring: false,\n    isArchived: false,\n    organizationId: \"<value>\",\n    prices: [\n      {\n        createdAt: new Date(\"2024-10-14T02:58:02.790Z\"),\n        modifiedAt: new Date(\"2023-06-04T11:45:58.378Z\"),\n        id: \"<value>\",\n        isArchived: false,\n        productId: \"<value>\",\n        type: \"recurring\",\n        recurringInterval: \"month\",\n        priceCurrency: \"<value>\",\n        minimumAmount: 367452,\n        maximumAmount: 63036,\n        presetAmount: 754305,\n      },\n    ],\n    benefits: [\n      {\n        id: \"<value>\",\n        createdAt: new Date(\"2025-09-28T06:14:22.747Z\"),\n        modifiedAt: new Date(\"2024-08-08T09:16:37.102Z\"),\n        type: \"github_repository\",\n        description:\n          \"while via innovation indeed however excepting before improbable whether quizzically\",\n        selectable: false,\n        deletable: false,\n        organizationId: \"<value>\",\n      },\n    ],\n    medias: [\n      {\n        id: \"<value>\",\n        organizationId: \"<value>\",\n        name: \"<value>\",\n        path: \"/usr/share\",\n        mimeType: \"<value>\",\n        size: 348068,\n        storageVersion: \"<value>\",\n        checksumEtag: \"<value>\",\n        checksumSha256Base64: \"<value>\",\n        checksumSha256Hex: \"<value>\",\n        lastModifiedAt: new Date(\"2023-09-12T04:02:12.390Z\"),\n        version: \"<value>\",\n        isUploaded: false,\n        createdAt: new Date(\"2023-02-19T15:01:05.733Z\"),\n        sizeReadable: \"<value>\",\n        publicUrl: \"https://sugary-license.net\",\n      },\n    ],\n    organization: {\n      createdAt: new Date(\"2024-12-29T02:23:28.044Z\"),\n      modifiedAt: new Date(\"2023-10-22T01:38:00.841Z\"),\n      id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      name: \"<value>\",\n      slug: \"<value>\",\n      avatarUrl: \"https://known-produce.name/\",\n      email: \"Ottis_Davis@gmail.com\",\n      website: \"<value>\",\n      socials: [\n        {\n          platform: \"linkedin\",\n          url: \"https://ample-instruction.info/\",\n        },\n      ],\n      detailsSubmittedAt: new Date(\"2024-06-09T17:00:52.619Z\"),\n      featureSettings: {},\n      subscriptionSettings: {\n        allowMultipleSubscriptions: false,\n        allowCustomerUpdates: false,\n        prorationBehavior: \"invoice\",\n      },\n    },\n  },\n  subscription: {\n    createdAt: new Date(\"2024-08-28T18:48:57.342Z\"),\n    modifiedAt: new Date(\"2023-11-11T03:07:03.537Z\"),\n    id: \"<value>\",\n    amount: 929799,\n    currency: \"Balboa\",\n    recurringInterval: \"month\",\n    status: \"active\",\n    currentPeriodStart: new Date(\"2023-03-02T02:27:24.406Z\"),\n    currentPeriodEnd: new Date(\"2023-06-04T23:19:40.379Z\"),\n    cancelAtPeriodEnd: false,\n    canceledAt: new Date(\"2024-10-31T11:44:03.904Z\"),\n    startedAt: new Date(\"2023-03-13T05:18:32.374Z\"),\n    endsAt: new Date(\"2023-01-15T00:21:31.316Z\"),\n    endedAt: new Date(\"2023-08-06T07:45:53.263Z\"),\n    customerId: \"<value>\",\n    productId: \"<value>\",\n    discountId: \"<value>\",\n    checkoutId: \"<value>\",\n    customerCancellationReason: \"too_complex\",\n    customerCancellationComment: \"<value>\",\n  },\n  items: [\n    {\n      createdAt: new Date(\"2024-06-03T23:13:33.176Z\"),\n      modifiedAt: new Date(\"2023-01-16T15:27:23.363Z\"),\n      id: \"<value>\",\n      label: \"<value>\",\n      amount: 838516,\n      taxAmount: 140846,\n      proration: false,\n      productPriceId: \"<value>\",\n    },\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing CheckoutCustomerBillingAddressFields in Typescript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the `CheckoutCustomerBillingAddressFields` object in TypeScript. It sets the boolean flags for country, state, city, postalCode, line1, and line2 to `false`.  This indicates that none of these fields are required during checkout.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutcustomerbillingaddressfields.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutCustomerBillingAddressFields } from \"@polar-sh/sdk/models/components/checkoutcustomerbillingaddressfields.js\";\n\nlet value: CheckoutCustomerBillingAddressFields = {\n  country: false,\n  state: false,\n  city: false,\n  postalCode: false,\n  line1: false,\n  line2: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining BenefitDiscordProperties in TypeScript\nDESCRIPTION: This snippet shows how to define and initialize a `BenefitDiscordProperties` object in TypeScript. It imports the `BenefitDiscordProperties` type from the `@polar-sh/sdk/models/components/benefitdiscordproperties.js` module and creates an instance with placeholder values for `guildId`, `roleId`, and `guildToken`.  This example illustrates the expected structure for configuring a Discord benefit within the Polar platform.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitDiscordProperties } from \"@polar-sh/sdk/models/components/benefitdiscordproperties.js\";\n\nlet value: BenefitDiscordProperties = {\n  guildId: \"<id>\",\n  roleId: \"<id>\",\n  guildToken: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Filter Value in TypeScript\nDESCRIPTION: Shows how to create a string array filter value for benefit ID in TypeScript.  An array of string values is assigned to the `value` constant, allowing for multiple benefit IDs to be used in the filter. No dependencies are explicitly required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportaldownloadableslistqueryparambenefitidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Creating DiscountPercentageRepeatDurationCreate in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a `DiscountPercentageRepeatDurationCreate` object with specified properties, including duration, durationInMonths, type, basisPoints, name, and organizationId. It imports the necessary class from `@polar-sh/sdk/models/components/discountpercentagerepeatdurationcreate.js` and initializes an object with example values. The `organizationId` is a UUID representing the organization to which the discount applies, and `basisPoints` represents the percentage as a fraction of 10000.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentagerepeatdurationcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountPercentageRepeatDurationCreate } from \"@polar-sh/sdk/models/components/discountpercentagerepeatdurationcreate.js\";\n\nlet value: DiscountPercentageRepeatDurationCreate = {\n  duration: \"once\",\n  durationInMonths: 894129,\n  type: \"percentage\",\n  basisPoints: 898457,\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LegacyRecurringProductPriceFixed TypeScript\nDESCRIPTION: This snippet demonstrates the initialization of a `LegacyRecurringProductPriceFixed` object in TypeScript. It configures the properties `createdAt`, `modifiedAt`, `id`, `isArchived`, `productId`, `recurringInterval`, `priceCurrency`, and `priceAmount` with sample data. Requires the `components` namespace to be defined.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/legacyrecurringproductprice.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.LegacyRecurringProductPriceFixed = {\n  createdAt: new Date(\"2025-09-21T09:37:21.640Z\"),\n  modifiedAt: new Date(\"2023-10-02T21:57:47.268Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  recurringInterval: \"month\",\n  priceCurrency: \"<value>\",\n  priceAmount: 780643,\n};\n```\n\n----------------------------------------\n\nTITLE: BenefitsGrantsResponse Example\nDESCRIPTION: This snippet demonstrates creating a BenefitsGrantsResponse object in TypeScript with sample data. It showcases the structure of the response, including a list of benefit grants with customer information and pagination details.\nDependencies: Requires the `BenefitsGrantsResponse` type definition from `@polar-sh/sdk/models/operations/benefitsgrants.js`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/benefitsgrantsresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitsGrantsResponse } from \"@polar-sh/sdk/models/operations/benefitsgrants.js\";\n\nlet value: BenefitsGrantsResponse = {\n  result: {\n    items: [\n      {\n        createdAt: new Date(\"2024-05-28T04:26:46.586Z\"),\n        modifiedAt: new Date(\"2023-09-01T18:18:39.178Z\"),\n        id: \"<value>\",\n        isGranted: false,\n        isRevoked: false,\n        subscriptionId: \"<value>\",\n        orderId: \"<value>\",\n        customerId: \"<value>\",\n        benefitId: \"<value>\",\n        customer: {\n          id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n          createdAt: new Date(\"2024-06-30T20:15:12.526Z\"),\n          modifiedAt: new Date(\"2023-11-18T21:53:45.126Z\"),\n          metadata: {\n            \"key\": 9188.77,\n          },\n          externalId: \"usr_1337\",\n          email: \"customer@example.com\",\n          emailVerified: true,\n          name: \"John Doe\",\n          billingAddress: {\n            country: \"SE\",\n          },\n          taxId: [\n            \"FR61954506077\",\n            \"eu_vat\",\n          ],\n          organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n          deletedAt: new Date(\"2024-09-20T16:43:52.277Z\"),\n          avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n        },\n        properties: {},\n      },\n    ],\n    pagination: {\n      totalCount: 763672,\n      maxPage: 311663,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing WebhookSubscriptionActivePayload with TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize a WebhookSubscriptionActivePayload object in TypeScript using the @polar-sh/sdk. It creates an instance of the WebhookSubscriptionActivePayload model with sample data to represent a subscription becoming active, including details about the customer, product, discount, and pricing.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhooksubscriptionactivepayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookSubscriptionActivePayload } from \"@polar-sh/sdk/models/components/webhooksubscriptionactivepayload.js\";\n\nlet value: WebhookSubscriptionActivePayload = {\n  data: {\n    createdAt: new Date(\"2023-01-04T02:09:35.584Z\"),\n    modifiedAt: new Date(\"2024-02-17T07:58:05.914Z\"),\n    id: \"<value>\",\n    amount: 468834,\n    currency: \"Tunisian Dinar\",\n    recurringInterval: \"year\",\n    status: \"past_due\",\n    currentPeriodStart: new Date(\"2024-04-02T21:35:12.738Z\"),\n    currentPeriodEnd: new Date(\"2023-01-14T19:06:02.832Z\"),\n    cancelAtPeriodEnd: false,\n    canceledAt: new Date(\"2025-08-16T23:25:09.940Z\"),\n    startedAt: new Date(\"2024-10-26T01:10:41.598Z\"),\n    endsAt: new Date(\"2024-02-09T01:46:30.865Z\"),\n    endedAt: new Date(\"2025-04-09T09:40:32.922Z\"),\n    customerId: \"<value>\",\n    productId: \"<value>\",\n    discountId: \"<value>\",\n    checkoutId: \"<value>\",\n    customerCancellationReason: \"other\",\n    customerCancellationComment: \"<value>\",\n    metadata: {\n      \"key\": false,\n    },\n    customer: {\n      id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n      createdAt: new Date(\"2025-04-05T07:42:47.950Z\"),\n      modifiedAt: new Date(\"2023-08-07T20:37:12.416Z\"),\n      metadata: {\n        \"key\": 512800,\n      },\n      externalId: \"usr_1337\",\n      email: \"customer@example.com\",\n      emailVerified: true,\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"US\",\n      },\n      taxId: [\n        \"911144442\",\n        \"us_ein\",\n      ],\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      deletedAt: new Date(\"2023-12-12T05:57:43.171Z\"),\n      avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n    },\n    product: {\n      createdAt: new Date(\"2025-10-21T06:03:48.648Z\"),\n      modifiedAt: new Date(\"2024-10-21T22:25:27.704Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description: \"readies putrefy hungrily\",\n      recurringInterval: \"year\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n      metadata: {\n        \"key\": \"<value>\",\n      },\n      prices: [\n        {\n          createdAt: new Date(\"2024-09-03T18:24:35.557Z\"),\n          modifiedAt: new Date(\"2024-10-18T02:13:21.293Z\"),\n          id: \"<value>\",\n          isArchived: false,\n          productId: \"<value>\",\n          recurringInterval: \"month\",\n          priceCurrency: \"<value>\",\n          priceAmount: 359078,\n        },\n      ],\n      benefits: [\n        {\n          id: \"<value>\",\n          createdAt: new Date(\"2023-07-11T11:58:21.963Z\"),\n          modifiedAt: new Date(\"2024-10-28T18:01:24.729Z\"),\n          description: \"cork vice er gah hepatitis where garage\",\n          selectable: false,\n          deletable: false,\n          organizationId: \"<value>\",\n          metadata: {\n            \"key\": 575961,\n          },\n          properties: {\n            archived: {\n              \"key\": false,\n            },\n            files: [\n              \"<value>\",\n            ],\n          },\n        },\n      ],\n      medias: [\n        {\n          id: \"<value>\",\n          organizationId: \"<value>\",\n          name: \"<value>\",\n          path: \"/lost+found\",\n          mimeType: \"<value>\",\n          size: 337646,\n          storageVersion: \"<value>\",\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n          checksumSha256Hex: \"<value>\",\n          lastModifiedAt: new Date(\"2023-07-26T05:04:33.718Z\"),\n          version: \"<value>\",\n          isUploaded: false,\n          createdAt: new Date(\"2024-03-15T07:58:32.950Z\"),\n          sizeReadable: \"<value>\",\n          publicUrl: \"https://robust-forager.info/\",\n        },\n      ],\n      attachedCustomFields: [\n        {\n          customFieldId: \"<value>\",\n          customField: {\n            createdAt: new Date(\"2025-07-19T09:46:45.424Z\"),\n            modifiedAt: new Date(\"2024-07-08T03:01:31.971Z\"),\n            id: \"<value>\",\n            metadata: {\n              \"key\": 1589.03,\n            },\n            slug: \"<value>\",\n            name: \"<value>\",\n            organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n            properties: {\n              options: [\n                {\n                  value: \"<value>\",\n                  label: \"<value>\",\n                },\n              ],\n            },\n          },\n          order: 254427,\n          required: false,\n        },\n      ],\n    },\n    discount: {\n      duration: \"once\",\n      type: \"fixed\",\n      amount: 990521,\n      currency: \"Pound Sterling\",\n      createdAt: new Date(\"2025-09-09T09:02:13.175Z\"),\n      modifiedAt: new Date(\"2023-03-06T14:54:44.471Z\"),\n      id: \"<value>\",\n      metadata: {\n        \"key\": 254060,\n      },\n      name: \"<value>\",\n      code: \"<value>\",\n      startsAt: new Date(\"2023-02-06T17:05:21.709Z\"),\n      endsAt: new Date(\"2025-03-17T00:27:48.593Z\"),\n      maxRedemptions: 520978,\n      redemptionsCount: 341922,\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    },\n    prices: [\n      {\n        createdAt: new Date(\"2024-04-25T10:25:40.856Z\"),\n        modifiedAt: new Date(\"2025-09-08T05:28:12.977Z\"),\n        id: \"<value>\",\n        isArchived: false,\n        productId: \"<value>\",\n        recurringInterval: \"year\",\n        priceCurrency: \"<value>\",\n        minimumAmount: 537741,\n        maximumAmount: 396131,\n        presetAmount: 614349,\n      },\n    ],\n    meters: [\n      {\n        createdAt: new Date(\"2023-05-17T02:04:21.933Z\"),\n        modifiedAt: new Date(\"2024-06-09T21:04:54.918Z\"),\n        id: \"<value>\",\n        consumedUnits: 25,\n        creditedUnits: 100,\n        amount: 0,\n        meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n        meter: {\n          metadata: {\n            \"key\": 288924,\n          },\n          createdAt: new Date(\"2025-09-10T14:15:51.514Z\"),\n          modifiedAt: new Date(\"2024-07-17T22:10:20.173Z\"),\n          id: \"<value>\",\n          name: \"<value>\",\n          filter: {\n            conjunction: \"or\",\n            clauses: [],\n          },\n          aggregation: {\n            func: \"min\",\n            property: \"<value>\",\n          },\n          organizationId: \"<value>\",\n        },\n      },\n    ],\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TimeInterval in Typescript\nDESCRIPTION: This code snippet demonstrates how to import the TimeInterval type from the @polar-sh/sdk/models/components/timeinterval.js module and assign a valid value to a variable of that type. The TimeInterval type is expected to be a string.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/timeinterval.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TimeInterval } from \"@polar-sh/sdk/models/components/timeinterval.js\";\n\nlet value: TimeInterval = \"month\";\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscountFixedRepeatDurationBase TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a `DiscountFixedRepeatDurationBase` object in TypeScript. It imports the class, sets values for its properties, including dates, numbers, and strings, and assigns a metadata object. This shows a complete example for creating this discount type within the Polar SDK.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedrepeatdurationbase.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountFixedRepeatDurationBase } from \"@polar-sh/sdk/models/components/discountfixedrepeatdurationbase.js\";\n\nlet value: DiscountFixedRepeatDurationBase = {\n  duration: \"forever\",\n  durationInMonths: 129769,\n  type: \"percentage\",\n  amount: 145500,\n  currency: \"New Taiwan Dollar\",\n  createdAt: new Date(\"2025-06-27T02:38:06.018Z\"),\n  modifiedAt: new Date(\"2024-03-12T12:09:42.936Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 643773,\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2025-10-14T22:17:00.163Z\"),\n  endsAt: new Date(\"2025-02-14T17:03:01.766Z\"),\n  maxRedemptions: 499481,\n  redemptionsCount: 259404,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Event Names with Polar SDK in TypeScript\nDESCRIPTION: This code snippet demonstrates how to list event names using the Polar SDK in TypeScript. It initializes the Polar client with an access token and calls the `events.listNames` method, passing the organization ID as a parameter. The results are then iterated over and logged to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/events/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.events.listNames({\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Initializing ListResourceCustomerOrder in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the `ListResourceCustomerOrder` object from the `@polar-sh/sdk/models/components/listresourcecustomerorder.js` module in TypeScript. It populates the object with sample data, including customer order details and pagination information.  The dates and string values are placeholders and should be replaced with actual data.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourcecustomerorder.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceCustomerOrder } from \"@polar-sh/sdk/models/components/listresourcecustomerorder.js\";\n\nlet value: ListResourceCustomerOrder = {\n  items: [\n    {\n      createdAt: new Date(\"2025-12-22T20:46:15.878Z\"),\n      modifiedAt: new Date(\"2023-05-20T15:53:22.635Z\"),\n      id: \"<value>\",\n      status: \"refunded\",\n      paid: true,\n      subtotalAmount: 17662,\n      discountAmount: 142890,\n      netAmount: 95401,\n      taxAmount: 172160,\n      totalAmount: 590618,\n      refundedAmount: 614593,\n      refundedTaxAmount: 710994,\n      currency: \"Guyana Dollar\",\n      customerId: \"<value>\",\n      productId: \"<value>\",\n      subscriptionId: \"<value>\",\n      userId: \"<value>\",\n      product: {\n        createdAt: new Date(\"2025-09-22T05:05:14.004Z\"),\n        modifiedAt: new Date(\"2023-10-04T14:18:57.229Z\"),\n        id: \"<value>\",\n        name: \"<value>\",\n        description:\n          \"knowingly besides upon wholly blah brochure sonnet atop experience junior\",\n        recurringInterval: \"month\",\n        isRecurring: false,\n        isArchived: false,\n        organizationId: \"<value>\",\n        prices: [\n          {\n            createdAt: new Date(\"2024-05-29T21:01:39.779Z\"),\n            modifiedAt: new Date(\"2024-02-20T16:51:58.506Z\"),\n            id: \"<value>\",\n            isArchived: false,\n            productId: \"<value>\",\n            recurringInterval: \"month\",\n            priceCurrency: \"<value>\",\n            minimumAmount: 180235,\n            maximumAmount: 134396,\n            presetAmount: 478876,\n          },\n        ],\n        benefits: [\n          {\n            id: \"<value>\",\n            createdAt: new Date(\"2023-07-22T15:34:49.381Z\"),\n            modifiedAt: new Date(\"2025-12-01T22:22:56.239Z\"),\n            type: \"downloadables\",\n            description: \"ick some ignorant hence tribe\",\n            selectable: false,\n            deletable: false,\n            organizationId: \"<value>\",\n          },\n        ],\n        medias: [\n          {\n            id: \"<value>\",\n            organizationId: \"<value>\",\n            name: \"<value>\",\n            path: \"/usr/include\",\n            mimeType: \"<value>\",\n            size: 610021,\n            storageVersion: \"<value>\",\n            checksumEtag: \"<value>\",\n            checksumSha256Base64: \"<value>\",\n            checksumSha256Hex: \"<value>\",\n            lastModifiedAt: new Date(\"2025-01-04T00:38:22.506Z\"),\n            version: \"<value>\",\n            isUploaded: false,\n            createdAt: new Date(\"2025-12-09T19:00:25.744Z\"),\n            sizeReadable: \"<value>\",\n            publicUrl: \"https://graceful-puritan.net/\",\n          },\n        ],\n        organization: {\n          createdAt: new Date(\"2023-04-02T23:51:17.739Z\"),\n          modifiedAt: new Date(\"2025-10-19T10:03:42.913Z\"),\n          id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n          name: \"<value>\",\n          slug: \"<value>\",\n          avatarUrl: \"https://neat-sushi.net/\",\n          email: \"Lorine.Bednar-Christiansen2@hotmail.com\",\n          website: \"<value>\",\n          socials: [\n            {\n              platform: \"instagram\",\n              url: \"https://tricky-word.net/\",\n            },\n          ],\n          detailsSubmittedAt: new Date(\"2023-11-07T20:31:03.355Z\"),\n          featureSettings: {},\n          subscriptionSettings: {\n            allowMultipleSubscriptions: false,\n            allowCustomerUpdates: false,\n            prorationBehavior: \"invoice\",\n          },\n        },\n      },\n      subscription: {\n        createdAt: new Date(\"2023-11-15T04:31:41.346Z\"),\n        modifiedAt: new Date(\"2024-12-12T11:43:37.707Z\"),\n        id: \"<value>\",\n        amount: 12557,\n        currency: \"Sri Lanka Rupee\",\n        recurringInterval: \"year\",\n        status: \"trialing\",\n        currentPeriodStart: new Date(\"2024-12-27T08:38:42.442Z\"),\n        currentPeriodEnd: new Date(\"2025-09-03T08:24:05.377Z\"),\n        cancelAtPeriodEnd: false,\n        canceledAt: new Date(\"2025-05-11T11:46:56.022Z\"),\n        startedAt: new Date(\"2025-12-04T23:05:53.851Z\"),\n        endsAt: new Date(\"2023-04-01T04:55:02.266Z\"),\n        endedAt: new Date(\"2025-02-10T14:16:43.016Z\"),\n        customerId: \"<value>\",\n        productId: \"<value>\",\n        discountId: \"<value>\",\n        checkoutId: \"<value>\",\n        customerCancellationReason: \"customer_service\",\n        customerCancellationComment: \"<value>\",\n      },\n      items: [\n        {\n          createdAt: new Date(\"2025-11-22T14:16:45.492Z\"),\n          modifiedAt: new Date(\"2023-06-12T14:39:19.476Z\"),\n          id: \"<value>\",\n          label: \"<value>\",\n          amount: 44829,\n          taxAmount: 165093,\n          proration: false,\n          productPriceId: \"<value>\",\n        },\n      ],\n    },\n  ],\n  pagination: {\n    totalCount: 749224,\n    maxPage: 757922,\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalOrdersGetRequest TypeScript\nDESCRIPTION: Demonstrates how to create an instance of the `CustomerPortalOrdersGetRequest` model in TypeScript. It imports the necessary class and initializes an object with a sample ID.  The model requires the `@polar-sh/sdk` package to be installed. The id field represents the order ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalordersgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalOrdersGetRequest } from \"@polar-sh/sdk/models/operations/customerportalordersget.js\";\n\nlet value: CustomerPortalOrdersGetRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: WebhookBenefitGrantUpdatedPayload Example Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the WebhookBenefitGrantUpdatedPayload model from the @polar-sh/sdk.  It creates an example object with populated fields, showcasing the expected data structure of the webhook payload. The code requires the @polar-sh/sdk package to be installed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookbenefitgrantupdatedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookBenefitGrantUpdatedPayload } from \"@polar-sh/sdk/models/components/webhookbenefitgrantupdatedpayload.js\";\n\nlet value: WebhookBenefitGrantUpdatedPayload = {\n  data: {\n    createdAt: new Date(\"2023-04-18T13:08:43.650Z\"),\n    modifiedAt: new Date(\"2023-09-16T13:34:50.547Z\"),\n    id: \"<value>\",\n    isGranted: false,\n    isRevoked: false,\n    subscriptionId: \"<value>\",\n    orderId: \"<value>\",\n    customerId: \"<value>\",\n    benefitId: \"<value>\",\n    customer: {\n      id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n      createdAt: new Date(\"2025-10-11T19:34:50.666Z\"),\n      modifiedAt: new Date(\"2025-12-04T18:11:54.423Z\"),\n      metadata: {\n        \"key\": \"<value>\",\n      },\n      externalId: \"usr_1337\",\n      email: \"customer@example.com\",\n      emailVerified: true,\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"US\",\n      },\n      taxId: [\n        \"911144442\",\n        \"us_ein\",\n      ],\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      deletedAt: new Date(\"2025-08-13T19:24:27.975Z\"),\n      avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n    },\n    properties: {},\n    benefit: {\n      id: \"<value>\",\n      createdAt: new Date(\"2024-03-22T06:24:13.619Z\"),\n      modifiedAt: new Date(\"2024-11-29T00:34:44.806Z\"),\n      description:\n        \"with regarding but poor unique furthermore milky yippee warmhearted hopeful\",\n      selectable: false,\n      deletable: false,\n      organizationId: \"<value>\",\n      metadata: {\n        \"key\": false,\n      },\n      properties: {\n        prefix: \"<value>\",\n        expires: {\n          ttl: 623160,\n          timeframe: \"month\",\n        },\n        activations: {\n          limit: 229034,\n          enableCustomerAdmin: false,\n        },\n        limitUsage: 252619,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Discount ID Filter with string in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a discount ID filter using a string value in TypeScript. The `value` variable is assigned a string representing the discount ID. This is used to filter results based on a single discount ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/discountidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Define DiscountFixedOnceForeverDurationBase Type - TypeScript\nDESCRIPTION: Defines a TypeScript type `DiscountFixedOnceForeverDurationBase` representing a fixed amount discount that can be applied once, forever or repeatedly.  It includes properties for discount amount, currency, duration type, start and end dates, redemption counts, metadata and organization ID.  This snippet shows how to assign sample data to the declared type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptiondiscount.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DiscountFixedOnceForeverDurationBase = {\n  duration: \"repeating\",\n  type: \"fixed\",\n  amount: 978120,\n  currency: \"Lebanese Pound\",\n  createdAt: new Date(\"2023-11-29T22:19:07.374Z\"),\n  modifiedAt: new Date(\"2025-08-26T08:06:28.501Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 2343.43,\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2025-06-09T06:38:20.565Z\"),\n  endsAt: new Date(\"2023-12-05T14:26:35.432Z\"),\n  maxRedemptions: 132138,\n  redemptionsCount: 728287,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomFieldSelectProperties in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and initialize the CustomFieldSelectProperties interface from the @polar-sh/sdk. It defines a sample object with options, each containing a value and a label. This is used to create custom select fields in the Polar SDK.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldselectproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldSelectProperties } from \"@polar-sh/sdk/models/components/customfieldselectproperties.js\";\n\nlet value: CustomFieldSelectProperties = {\n  options: [\n    {\n      value: \"<value>\",\n      label: \"<value>\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Product ID Filter in TypeScript\nDESCRIPTION: Defines a product ID filter as an array of strings in TypeScript. This allows filtering orders based on multiple product IDs.  The string array type represents a list of product ID values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/orderslistqueryparamproductidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing ProductPriceFixed Type - TypeScript\nDESCRIPTION: This code snippet demonstrates the initialization of the `ProductPriceFixed` type. It includes fields such as `createdAt`, `modifiedAt`, `id`, `isArchived`, `productId`, `type`, `recurringInterval`, `priceCurrency`, and `priceAmount`. The snippet showcases the structure and required properties of a fixed-price product configuration.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productprice.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPriceFixed = {\n  createdAt: new Date(\"2025-12-26T12:23:44.317Z\"),\n  modifiedAt: new Date(\"2025-07-03T15:28:37.002Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  type: \"recurring\",\n  recurringInterval: \"month\",\n  priceCurrency: \"<value>\",\n  priceAmount: 593331,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscountsDeleteRequest in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `DiscountsDeleteRequest` object in TypeScript. It imports the model from the `@polar-sh/sdk/models/operations/discountsdelete.js` module and assigns a value to the `id` field. The `id` field is a string representing the unique identifier of the discount to be deleted.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/discountsdeleterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountsDeleteRequest } from \"@polar-sh/sdk/models/operations/discountsdelete.js\";\n\nlet value: DiscountsDeleteRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerSubscriptionUpdateProduct Type (TypeScript)\nDESCRIPTION: This snippet defines the TypeScript type `CustomerSubscriptionUpdateProduct` which is used to update the product associated with a customer's subscription. It requires a `productId` string.  This allows changing the subscribed product.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customersubscriptionupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomerSubscriptionUpdateProduct = {\n  productId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a DiscountsUpdateRequest instance in Typescript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the DiscountsUpdateRequest model in TypeScript. It imports the model and initializes it with a discount ID and an empty discount update object.  The discountUpdate object can then be populated with specific update parameters. Requires `@polar-sh/sdk` to be installed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/discountsupdaterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountsUpdateRequest } from \"@polar-sh/sdk/models/operations/discountsupdate.js\";\n\nlet value: DiscountsUpdateRequest = {\n  id: \"<value>\",\n  discountUpdate: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitMeterCreditSubscriber in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the BenefitMeterCreditSubscriber object in TypeScript. It includes example values for all the required fields, including nested objects like organization and properties. The snippet also includes the import statement for the BenefitMeterCreditSubscriber class.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditsubscriber.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitMeterCreditSubscriber } from \"@polar-sh/sdk/models/components/benefitmetercreditsubscriber.js\";\n\nlet value: BenefitMeterCreditSubscriber = {\n  id: \"<value>\",\n  createdAt: new Date(\"2025-02-05T19:56:46.266Z\"),\n  modifiedAt: new Date(\"2024-03-24T19:43:32.313Z\"),\n  description: \"trash valiantly boohoo zowie\",\n  selectable: false,\n  deletable: false,\n  organizationId: \"<value>\",\n  metadata: {\n    \"key\": 878423,\n  },\n  organization: {\n    createdAt: new Date(\"2025-04-25T13:08:18.422Z\"),\n    modifiedAt: new Date(\"2024-11-14T19:58:44.206Z\"),\n    id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    name: \"<value>\",\n    slug: \"<value>\",\n    avatarUrl: \"https://expensive-giggle.net/\",\n    email: \"Lola.Friesen@yahoo.com\",\n    website: \"<value>\",\n    socials: [\n      {\n        platform: \"instagram\",\n        url: \"https://stupendous-toaster.biz/\",\n      },\n    ],\n    detailsSubmittedAt: new Date(\"2025-04-25T09:59:29.489Z\"),\n    featureSettings: {},\n    subscriptionSettings: {\n      allowMultipleSubscriptions: false,\n      allowCustomerUpdates: false,\n      prorationBehavior: \"prorate\",\n    },\n  },\n  properties: {\n    units: 882770,\n    meterId: \"<value>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using CheckoutsClientUpdateRequest in TypeScript\nDESCRIPTION: This snippet showcases how to import and use the CheckoutsClientUpdateRequest type from the @polar-sh/sdk/models/operations/checkoutsclientupdate.js module. It demonstrates creating an instance of the type, setting the required clientSecret, and defining the nested checkoutUpdatePublic object including a customerBillingAddress.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutsclientupdaterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutsClientUpdateRequest } from \"@polar-sh/sdk/models/operations/checkoutsclientupdate.js\";\n\nlet value: CheckoutsClientUpdateRequest = {\n  clientSecret: \"<value>\",\n  checkoutUpdatePublic: {\n    customerBillingAddress: {\n      country: \"US\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Percentage Repeat Discount TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a percentage discount that repeats for a specified duration. It defines a `DiscountPercentageRepeatDurationCreate` object with properties such as duration set to \"repeating\", durationInMonths, type set to \"fixed\", basisPoints, a name, and an organizationId. The `components` namespace needs to be imported or defined.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountcreate.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DiscountPercentageRepeatDurationCreate = {\n  duration: \"repeating\",\n  durationInMonths: 225144,\n  type: \"fixed\",\n  basisPoints: 99998,\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: BenefitLicenseKeysProperties Example in TypeScript\nDESCRIPTION: Shows how to import and use the BenefitLicenseKeysProperties type in TypeScript. It demonstrates how to create an instance of the type and populate its fields, including prefix, expires (BenefitLicenseKeyExpirationProperties), activations (BenefitLicenseKeyActivationProperties), and limitUsage.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeysproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitLicenseKeysProperties } from \"@polar-sh/sdk/models/components/benefitlicensekeysproperties.js\";\n\nlet value: BenefitLicenseKeysProperties = {\n  prefix: \"<value>\",\n  expires: {\n    ttl: 783935,\n    timeframe: \"year\",\n  },\n  activations: {\n    limit: 708691,\n    enableCustomerAdmin: false,\n  },\n  limitUsage: 774650,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ProductPriceMeteredUnitCreate in TypeScript\nDESCRIPTION: This snippet shows how to initialize a `ProductPriceMeteredUnitCreate` object in TypeScript. It sets `meterId` and `unitAmount` properties to placeholder values, indicating that these would be replaced with actual meter and unit amounts. It relies on the `components` namespace for type definition.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productcreateprices.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPriceMeteredUnitCreate = {\n  meterId: \"<value>\",\n  unitAmount: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerBenefitGrantDownloadablesUpdate TypeScript\nDESCRIPTION: This snippet shows how to import and initialize an empty `CustomerBenefitGrantDownloadablesUpdate` object in TypeScript. It requires the `@polar-sh/sdk` package to be installed as a dependency. The initialized object `value` can then be populated with data related to downloadable benefits.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantdownloadablesupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerBenefitGrantDownloadablesUpdate } from \"@polar-sh/sdk/models/components/customerbenefitgrantdownloadablesupdate.js\";\n\nlet value: CustomerBenefitGrantDownloadablesUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: Boolean Metadata Value in TypeScript\nDESCRIPTION: This snippet shows how to define a boolean value for external customer metadata. The `value` constant is assigned a boolean literal (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventcreateexternalcustomermetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Using GrantTypes in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `GrantTypes` enumeration in TypeScript. It shows how to assign a valid value to a variable of type `GrantTypes`. The enumeration is imported from `@polar-sh/sdk/models/components/oauth2client.js`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/granttypes.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GrantTypes } from \"@polar-sh/sdk/models/components/oauth2client.js\";\n\nlet value: GrantTypes = \"refresh_token\";\n```\n\n----------------------------------------\n\nTITLE: Creating a FilesListRequest object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a `FilesListRequest` object in TypeScript using the `@polar-sh/sdk` library. It initializes the object with the `organizationId` property. This object is used to request a list of files from a specific organization. Dependencies include the `@polar-sh/sdk/models/operations/fileslist.js` module.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/fileslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FilesListRequest } from \"@polar-sh/sdk/models/operations/fileslist.js\";\n\nlet value: FilesListRequest = {\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitCustomSubscriber in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize a `BenefitCustomSubscriber` object in TypeScript. It shows how to assign values to various properties, including nested objects like `organization` and `metadata`, and how to use the `Date` object for date-related fields. The snippet provides a concrete example of creating a `BenefitCustomSubscriber` instance with sample data.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustomsubscriber.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitCustomSubscriber } from \"@polar-sh/sdk/models/components/benefitcustomsubscriber.js\";\n\nlet value: BenefitCustomSubscriber = {\n  id: \"<value>\",\n  createdAt: new Date(\"2025-11-30T04:35:35.570Z\"),\n  modifiedAt: new Date(\"2024-02-26T07:33:16.529Z\"),\n  description:\n    \"woot self-assured lovingly midst come however norm gee legitimize bah\",\n  selectable: false,\n  deletable: false,\n  organizationId: \"<value>\",\n  metadata: {\n    \"key\": \"<value>\",\n  },\n  organization: {\n    createdAt: new Date(\"2025-10-18T09:14:25.735Z\"),\n    modifiedAt: new Date(\"2023-05-18T17:21:37.773Z\"),\n    id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    name: \"<value>\",\n    slug: \"<value>\",\n    avatarUrl: \"https://whimsical-onset.name/\",\n    email: \"Arianna_Kulas13@gmail.com\",\n    website: \"<value>\",\n    socials: [\n      {\n        platform: \"tiktok\",\n        url: \"https://fragrant-bar.name\",\n      },\n    ],\n    detailsSubmittedAt: new Date(\"2024-06-25T05:00:31.676Z\"),\n    featureSettings: {},\n    subscriptionSettings: {\n      allowMultipleSubscriptions: false,\n      allowCustomerUpdates: false,\n      prorationBehavior: \"prorate\",\n    },\n  },\n  properties: {\n    note: \"<value>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating EventsListRequest in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and create an instance of the EventsListRequest object from the @polar-sh/sdk library. It sets the organizationId property to a list containing a UUID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/eventslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventsListRequest } from \"@polar-sh/sdk/models/operations/eventslist.js\";\n\nlet value: EventsListRequest = {\n  organizationId: [\n    \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Benefit ID Filter in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a `QueryParamBenefitIDFilter` using an array of strings. The `value` constant is assigned an array of strings, where each string represents a benefit ID. This allows filtering by multiple benefit IDs simultaneously, using TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparambenefitidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: CustomerPortalLicenseKeysListResponse Example\nDESCRIPTION: This example shows how to create and populate a `CustomerPortalLicenseKeysListResponse` object in TypeScript. It imports the necessary type definition from the `@polar-sh/sdk/models/operations/customerportallicensekeyslist.js` module. The example demonstrates the structure of the `result` property, including `items` (an array of license key objects) and `pagination` information. It includes sample data for customer details, license key properties, and dates.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportallicensekeyslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalLicenseKeysListResponse } from \"@polar-sh/sdk/models/operations/customerportallicensekeyslist.js\";\n\nlet value: CustomerPortalLicenseKeysListResponse = {\n  result: {\n    items: [\n      {\n        id: \"<value>\",\n        organizationId: \"<value>\",\n        customerId: \"<value>\",\n        customer: {\n          id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n          createdAt: new Date(\"2024-07-28T14:38:17.381Z\"),\n          modifiedAt: new Date(\"2024-08-12T05:26:30.373Z\"),\n          metadata: {\n            \"key\": 9805.22,\n          },\n          externalId: \"usr_1337\",\n          email: \"customer@example.com\",\n          emailVerified: true,\n          name: \"John Doe\",\n          billingAddress: {\n            country: \"US\",\n          },\n          taxId: [\n            \"911144442\",\n            \"us_ein\",\n          ],\n          organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n          deletedAt: new Date(\"2025-12-18T08:53:43.984Z\"),\n          avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n        },\n        benefitId: \"<value>\",\n        key: \"<key>\",\n        displayKey: \"<value>\",\n        status: \"revoked\",\n        limitActivations: 70683,\n        usage: 786397,\n        limitUsage: 143855,\n        validations: 324776,\n        lastValidatedAt: new Date(\"2024-02-17T19:28:27.103Z\"),\n        expiresAt: new Date(\"2023-11-17T13:18:45.100Z\"),\n      },\n    ],\n    pagination: {\n      totalCount: 287155,\n      maxPage: 211880,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating File Example Usage - Polar SDK - Typescript\nDESCRIPTION: This code snippet demonstrates how to update a file using the `files.update` method of the Polar SDK. It initializes the SDK with an access token, calls the `update` method with the file ID and patch data, and then logs the result.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/files/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.files.update({\n    id: \"<value>\",\n    filePatch: {},\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Declaring an integer variable in TypeScript\nDESCRIPTION: This snippet shows how to declare a number variable in TypeScript and assign it an integer value. It is used for defining integer type metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/orderproductmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Initializing ProductPriceFree in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a `ProductPriceFree` object in TypeScript. It imports the `ProductPriceFree` class from the `@polar-sh/sdk` package and creates an instance of it, setting various properties such as `createdAt`, `modifiedAt`, `id`, `isArchived`, `productId`, `type`, and `recurringInterval`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productpricefree.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductPriceFree } from \"@polar-sh/sdk/models/components/productpricefree.js\";\n\nlet value: ProductPriceFree = {\n  createdAt: new Date(\"2023-10-13T21:05:43.693Z\"),\n  modifiedAt: new Date(\"2025-09-24T19:21:04.401Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  type: \"one_time\",\n  recurringInterval: \"month\",\n};\n```\n\n----------------------------------------\n\nTITLE: OrganizationsListResponse Example\nDESCRIPTION: This code snippet demonstrates how to create an instance of the OrganizationsListResponse type in TypeScript. It imports the type from the @polar-sh/sdk/models/operations/organizationslist.js module and populates it with sample data, including dates, strings, and nested objects representing organization details, socials, feature settings, and subscription settings.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/organizationslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrganizationsListResponse } from \"@polar-sh/sdk/models/operations/organizationslist.js\";\n\nlet value: OrganizationsListResponse = {\n  result: {\n    items: [\n      {\n        createdAt: new Date(\"2023-11-09T05:23:52.543Z\"),\n        modifiedAt: new Date(\"2023-11-21T16:59:04.853Z\"),\n        id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        name: \"<value>\",\n        slug: \"<value>\",\n        avatarUrl: \"https://wasteful-finger.com\",\n        email: \"Aiden.Fritsch61@hotmail.com\",\n        website: \"<value>\",\n        socials: [\n          {\n            platform: \"github\",\n            url: \"https://frozen-someplace.biz/\",\n          },\n        ],\n        detailsSubmittedAt: new Date(\"2023-08-24T00:17:11.589Z\"),\n        featureSettings: {},\n        subscriptionSettings: {\n          allowMultipleSubscriptions: false,\n          allowCustomerUpdates: false,\n          prorationBehavior: \"prorate\",\n        },\n      },\n    ],\n    pagination: {\n      totalCount: 935270,\n      maxPage: 766562,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Import and Use CustomFieldSortProperty TypeScript\nDESCRIPTION: This snippet demonstrates how to import the CustomFieldSortProperty from the PolarJS SDK and assign a value to it. It requires the `@polar-sh/sdk` package to be installed. The value assigned must be one of the allowed strings.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldsortproperty.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldSortProperty } from \"@polar-sh/sdk/models/components/customfieldsortproperty.js\";\n\nlet value: CustomFieldSortProperty = \"name\";\n```\n\n----------------------------------------\n\nTITLE: Creating DiscountsListRequest Instance (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to create an instance of the `DiscountsListRequest` object. It imports the `DiscountsListRequest` class from the `@polar-sh/sdk/models/operations/discountslist.js` module and initializes it with a sample `organizationId`. The `organizationId` is a required field for filtering discounts by a specific organization.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/discountslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountsListRequest } from \"@polar-sh/sdk/models/operations/discountslist.js\";\n\nlet value: DiscountsListRequest = {\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: BenefitGrantMeterCreditProperties Example\nDESCRIPTION: This code snippet demonstrates how to import and use the `BenefitGrantMeterCreditProperties` type from the `@polar-sh/sdk/models/components/benefitgrantmetercreditproperties.js` module. It initializes an object with sample string and number values for `lastCreditedMeterId`, `lastCreditedUnits`, and `lastCreditedAt` properties. These properties represent the last credited meter ID, the number of units credited, and the timestamp of the last credit, respectively.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgrantmetercreditproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitGrantMeterCreditProperties } from \"@polar-sh/sdk/models/components/benefitgrantmetercreditproperties.js\";\n\nlet value: BenefitGrantMeterCreditProperties = {\n  lastCreditedMeterId: \"<id>\",\n  lastCreditedUnits: 451151,\n  lastCreditedAt: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Order Model Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the Order model from the @polar-sh/sdk.  It creates an instance of the Order object with sample data, including dates, strings, numbers, and nested objects, to represent a typical order from the Polar platform. The code relies on the @polar-sh/sdk package.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/order.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Order } from \"@polar-sh/sdk/models/components/order.js\";\n\nlet value: Order = {\n  createdAt: new Date(\"2024-11-19T18:15:00.201Z\"),\n  modifiedAt: new Date(\"2024-01-17T08:33:48.573Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 792.52,\n  },\n  status: \"paid\",\n  paid: true,\n  subtotalAmount: 870722,\n  discountAmount: 795990,\n  netAmount: 390856,\n  amount: 863634,\n  taxAmount: 250136,\n  totalAmount: 782415,\n  refundedAmount: 65687,\n  refundedTaxAmount: 623249,\n  currency: \"Australian Dollar\",\n  billingReason: \"subscription_create\",\n  billingAddress: {\n    country: \"SE\",\n  },\n  customerId: \"<value>\",\n  productId: \"<value>\",\n  discountId: \"<value>\",\n  subscriptionId: \"<value>\",\n  checkoutId: \"<value>\",\n  customer: {\n    id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n    createdAt: new Date(\"2024-02-16T11:18:39.347Z\"),\n    modifiedAt: new Date(\"2024-04-19T13:47:00.983Z\"),\n    metadata: {\n      \"key\": 43704,\n    },\n    externalId: \"usr_1337\",\n    email: \"customer@example.com\",\n    emailVerified: true,\n    name: \"John Doe\",\n    billingAddress: {\n      country: \"US\",\n    },\n    taxId: [\n      \"911144442\",\n      \"us_ein\",\n    ],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    deletedAt: new Date(\"2023-10-24T00:55:41.034Z\"),\n    avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n  },\n  userId: \"<value>\",\n  product: {\n    metadata: {\n      \"key\": 9124,\n    },\n    createdAt: new Date(\"2023-01-13T13:43:10.078Z\"),\n    modifiedAt: new Date(\"2024-06-05T12:35:26.540Z\"),\n    id: \"<value>\",\n    name: \"<value>\",\n    description: \"consequently furthermore before chainstay off phooey before\",\n    recurringInterval: \"year\",\n    isRecurring: false,\n    isArchived: false,\n    organizationId: \"<value>\",\n  },\n  discount: {\n    duration: \"repeating\",\n    durationInMonths: 567102,\n    type: \"percentage\",\n    amount: 170479,\n    currency: \"Kwacha\",\n    createdAt: new Date(\"2025-03-07T17:41:56.803Z\"),\n    modifiedAt: new Date(\"2024-03-31T15:17:02.238Z\"),\n    id: \"<value>\",\n    metadata: {\n      \"key\": \"<value>\",\n    },\n    name: \"<value>\",\n    code: \"<value>\",\n    startsAt: new Date(\"2025-01-22T20:25:45.755Z\"),\n    endsAt: new Date(\"2024-02-24T01:13:32.926Z\"),\n    maxRedemptions: 678034,\n    redemptionsCount: 402817,\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  },\n  subscription: {\n    metadata: {\n      \"key\": false,\n    },\n    createdAt: new Date(\"2025-04-04T00:20:39.118Z\"),\n    modifiedAt: new Date(\"2025-12-06T06:47:38.470Z\"),\n    id: \"<value>\",\n    amount: 980863,\n    currency: \"Costa Rican Colon\",\n    recurringInterval: \"month\",\n    status: \"active\",\n    currentPeriodStart: new Date(\"2024-08-19T17:11:32.963Z\"),\n    currentPeriodEnd: new Date(\"2023-01-17T11:39:33.089Z\"),\n    cancelAtPeriodEnd: false,\n    canceledAt: new Date(\"2025-09-21T10:41:01.762Z\"),\n    startedAt: new Date(\"2023-07-22T04:56:50.823Z\"),\n    endsAt: new Date(\"2025-10-13T19:59:53.672Z\"),\n    endedAt: new Date(\"2025-08-18T16:58:00.098Z\"),\n    customerId: \"<value>\",\n    productId: \"<value>\",\n    discountId: \"<value>\",\n    checkoutId: \"<value>\",\n    customerCancellationReason: \"missing_features\",\n    customerCancellationComment: \"<value>\",\n  },\n  items: [\n    {\n      createdAt: new Date(\"2023-03-26T21:16:28.829Z\"),\n      modifiedAt: new Date(\"2023-04-27T01:18:14.041Z\"),\n      id: \"<value>\",\n      label: \"<value>\",\n      amount: 591271,\n      taxAmount: 632907,\n      proration: false,\n      productPriceId: \"<value>\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Using ListResourceRefund in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `ListResourceRefund` type from the `@polar-sh/sdk` library. It initializes a variable of type `ListResourceRefund` with sample data, including an array of refund items and pagination information.  It shows how the refund data is structured with fields like createdAt, modifiedAt, id, metadata, status, reason, amount, etc.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourcerefund.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceRefund } from \"@polar-sh/sdk/models/components/listresourcerefund.js\";\n\nlet value: ListResourceRefund = {\n  items: [\n    {\n      createdAt: new Date(\"2023-09-24T05:07:15.062Z\"),\n      modifiedAt: new Date(\"2025-09-08T17:29:42.903Z\"),\n      id: \"<value>\",\n      metadata: {\n        \"key\": \"<value>\",\n      },\n      status: \"canceled\",\n      reason: \"fraudulent\",\n      amount: 299744,\n      taxAmount: 368337,\n      currency: \"Pa'anga\",\n      organizationId: \"<value>\",\n      orderId: \"<value>\",\n      subscriptionId: \"<value>\",\n      customerId: \"<value>\",\n      revokeBenefits: false,\n    },\n  ],\n  pagination: {\n    totalCount: 949677,\n    maxPage: 352874,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting Checkout Link using Polar Client in Typescript\nDESCRIPTION: This snippet demonstrates how to delete a checkout link using the `delete` method of the `checkoutLinks` service within the Polar SDK.  It initializes the Polar client with an access token and calls the `delete` method, passing the ID of the checkout link to be deleted. Requires the `@polar-sh/sdk` dependency.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/checkoutlinks/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  await polar.checkoutLinks.delete({\n    id: \"<value>\",\n  });\n\n\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: BenefitPublic Usage Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `BenefitPublic` class from the `@polar-sh/sdk/models/components/benefitpublic.js` module and create an instance of it with example values. It showcases the structure and required fields of the `BenefitPublic` object, including setting the `createdAt` and `modifiedAt` properties using the `Date` object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitpublic.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitPublic } from \"@polar-sh/sdk/models/components/benefitpublic.js\";\n\nlet value: BenefitPublic = {\n  id: \"<value>\",\n  createdAt: new Date(\"2023-09-22T15:44:06.701Z\"),\n  modifiedAt: new Date(\"2024-07-03T19:58:12.825Z\"),\n  type: \"github_repository\",\n  description: \"orchid lest next before through hunger for abaft plumber\",\n  selectable: false,\n  deletable: false,\n  organizationId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Import and Instantiate BenefitGrantGitHubRepositoryProperties in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the BenefitGrantGitHubRepositoryProperties type from the @polar-sh/sdk library and instantiate an empty object of that type. This shows the basic usage pattern for this type. The library @polar-sh/sdk must be installed as a prerequisite.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgrantgithubrepositoryproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitGrantGitHubRepositoryProperties } from \"@polar-sh/sdk/models/components/benefitgrantgithubrepositoryproperties.js\";\n\nlet value: BenefitGrantGitHubRepositoryProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Defining ProductPrice Type - TypeScript\nDESCRIPTION: This code snippet illustrates the structure of a `ProductPrice` with sample values. It defines common properties such as `createdAt`, `modifiedAt`, `id`, `isArchived`, `productId`, `type` and `recurringInterval`. This snippet shows an example of a recurring subscription product. Requires the `components` namespace to be defined.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customersubscriptionproductprices.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPrice = {\n  createdAt: new Date(\"2023-11-12T09:36:50.641Z\"),\n  modifiedAt: new Date(\"2023-02-28T09:49:59.454Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  type: \"recurring\",\n  recurringInterval: \"month\",\n};\n```\n\n----------------------------------------\n\nTITLE: EventsIngestResponse Example in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the EventsIngestResponse type from the '@polar-sh/sdk/models/components/eventsingestresponse.js' module. It creates a new object of this type and sets the 'inserted' field to a sample value.  This indicates the number of events that have been successfully inserted.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventsingestresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventsIngestResponse } from \"@polar-sh/sdk/models/components/eventsingestresponse.js\";\n\nlet value: EventsIngestResponse = {\n  inserted: 61041,\n};\n```\n\n----------------------------------------\n\nTITLE: String Organization ID Filter in TypeScript\nDESCRIPTION: This snippet demonstrates how to filter customer meters by a single organization ID using a string value. The organization ID is provided as a string.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customermeterslistqueryparamorganizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: Initializing ProductPrice TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a `ProductPrice` object. It defines a constant `value` of type `components.ProductPrice` and assigns it an object with sample data for properties like `createdAt`, `modifiedAt`, `id`, `productId`, `type`, and `recurringInterval`. The `createdAt` and `modifiedAt` properties are initialized with `Date` objects. The `type` property is set to \"recurring\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerorderproductprices.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPrice = {\n  createdAt: new Date(\"2023-11-12T09:36:50.641Z\"),\n  modifiedAt: new Date(\"2023-02-28T09:49:59.454Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  type: \"recurring\",\n  recurringInterval: \"month\",\n};\n```\n\n----------------------------------------\n\nTITLE: Import and Use PaymentProcessor in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `PaymentProcessor` type from the `@polar-sh/sdk/models/components/paymentprocessor.js` module and use it by assigning a string literal value to a variable of that type.  The expected values would be of the type `PaymentProcessor`, enabling stronger type checking.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/paymentprocessor.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentProcessor } from \"@polar-sh/sdk/models/components/paymentprocessor.js\";\n\nlet value: PaymentProcessor = \"stripe\";\n```\n\n----------------------------------------\n\nTITLE: BenefitType Usage Example TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the BenefitType enumeration from the @polar-sh/sdk/models/components/benefittype.js module. It initializes a variable named 'value' with a BenefitType value of 'meter_credit'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefittype.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitType } from \"@polar-sh/sdk/models/components/benefittype.js\";\n\nlet value: BenefitType = \"meter_credit\";\n```\n\n----------------------------------------\n\nTITLE: Defining CheckoutDiscountPercentageOnceForeverDuration Type (TypeScript)\nDESCRIPTION: This snippet defines the structure for a percentage-based discount applied once with a 'forever' duration. It includes properties for duration, type (percentage), basisPoints, ID, name, and discount code. The type is `components.CheckoutDiscountPercentageOnceForeverDuration`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpublicdiscount.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CheckoutDiscountPercentageOnceForeverDuration = {\n  duration: \"forever\",\n  type: \"percentage\",\n  basisPoints: 364509,\n  id: \"<value>\",\n  name: \"<value>\",\n  code: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CustomFieldSelect type in TypeScript\nDESCRIPTION: This code snippet defines the structure for `CustomFieldSelect` using TypeScript. It shows how to define the properties like createdAt, modifiedAt, id, metadata, slug, name, organizationId, and properties, including setting default or example values, and an array of options.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfield.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomFieldSelect = {\n  createdAt: new Date(\"2024-07-07T06:15:52.159Z\"),\n  modifiedAt: new Date(\"2025-12-12T23:38:43.148Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 8796.21,\n  },\n  slug: \"<value>\",\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {\n    options: [\n      {\n        value: \"<value>\",\n        label: \"<value>\",\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: ListResourceCustomField Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create and populate a `ListResourceCustomField` object in TypeScript. It imports the `ListResourceCustomField` type from the `@polar-sh/sdk/models/components/listresourcecustomfield.js` module. The example shows how to instantiate the object with sample data, including a list of custom field `items` and `pagination` information. The `items` array contains objects with properties such as `createdAt`, `modifiedAt`, `id`, `metadata`, `slug`, `name`, `organizationId`, and `properties`. The `pagination` object includes `totalCount` and `maxPage` properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourcecustomfield.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceCustomField } from \"@polar-sh/sdk/models/components/listresourcecustomfield.js\";\n\nlet value: ListResourceCustomField = {\n  items: [\n    {\n      createdAt: new Date(\"2024-12-06T15:20:26.826Z\"),\n      modifiedAt: new Date(\"2023-05-13T14:55:52.669Z\"),\n      id: \"<value>\",\n      metadata: {\n        \"key\": 492770,\n      },\n      slug: \"<value>\",\n      name: \"<value>\",\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      properties: {},\n    },\n  ],\n  pagination: {\n    totalCount: 551891,\n    maxPage: 244010,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: BenefitDownloadablesProperties Example Initialization TypeScript\nDESCRIPTION: This snippet shows how to import and initialize the BenefitDownloadablesProperties type in TypeScript. It demonstrates setting values for the 'archived' and 'files' properties.  The 'archived' property is a record of string to boolean, and 'files' is a string array. The polar-sh/sdk is a prerequisite dependency.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablesproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitDownloadablesProperties } from \"@polar-sh/sdk/models/components/benefitdownloadablesproperties.js\";\n\nlet value: BenefitDownloadablesProperties = {\n  archived: {\n    \"key\": false,\n  },\n  files: [\n    \"<value>\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: FileDownload Model Example\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `FileDownload` model in TypeScript. It imports the `FileDownload` type from the `@polar-sh/sdk` and initializes an object with sample data for each field, including nested objects like `download` and Date objects for `lastModifiedAt` and `expiresAt`. The `path` field is explicitly set to `/var/mail`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/filedownload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FileDownload } from \"@polar-sh/sdk/models/components/filedownload.js\";\n\nlet value: FileDownload = {\n  id: \"<value>\",\n  organizationId: \"<value>\",\n  name: \"<value>\",\n  path: \"/var/mail\",\n  mimeType: \"<value>\",\n  size: 892960,\n  storageVersion: \"<value>\",\n  checksumEtag: \"<value>\",\n  checksumSha256Base64: \"<value>\",\n  checksumSha256Hex: \"<value>\",\n  lastModifiedAt: new Date(\"2025-11-22T15:32:29.588Z\"),\n  download: {\n    url: \"https://antique-valley.info\",\n    expiresAt: new Date(\"2025-08-23T11:29:28.133Z\"),\n  },\n  version: \"<value>\",\n  isUploaded: false,\n  service: \"downloadable\",\n  sizeReadable: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerSubscriptionMeterMeter in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and instantiate the CustomerSubscriptionMeterMeter object in TypeScript. It shows how to set the values for the createdAt, modifiedAt, id, and name properties of the object. Note: <value> are placeholders.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customersubscriptionmetermeter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerSubscriptionMeterMeter } from \"@polar-sh/sdk/models/components/customersubscriptionmetermeter.js\";\n\nlet value: CustomerSubscriptionMeterMeter = {\n  createdAt: new Date(\"2023-02-04T20:45:21.880Z\"),\n  modifiedAt: new Date(\"2023-01-07T12:25:47.080Z\"),\n  id: \"<value>\",\n  name: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Product ID Filter in Typescript\nDESCRIPTION: This snippet demonstrates how to filter by multiple product IDs using a string array. It defines a constant variable 'value' of type string array and initializes it with a single placeholder string '<value>'. This array can be expanded to include multiple product IDs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutlinkslistqueryparamproductidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: String Array Product ID Filter in TypeScript\nDESCRIPTION: Defines a string array variable to represent multiple product ID values for filtering. This allows filtering products by a set of specified IDs using a query parameter.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparamproductidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Defining String Custom Metadata Value in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a string value for custom metadata associated with a benefit. The `value` variable is explicitly typed as a string and assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustommetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Import and Use SubType Enum in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the SubType enum from the '@polar-sh/sdk/models/components/subtype.js' module and assign it a value. The SubType enum is used to specify a type, in this case, 'organization'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subtype.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubType } from \"@polar-sh/sdk/models/components/subtype.js\";\n\nlet value: SubType = \"organization\";\n```\n\n----------------------------------------\n\nTITLE: Initializing ListResourceCheckout in Typescript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the `ListResourceCheckout` component from the `@polar-sh/sdk/models/components/listresourcecheckout.js` module. It creates an instance of `ListResourceCheckout` and populates it with sample data, including nested objects and arrays with various properties such as dates, strings, numbers, and booleans.  The purpose is to illustrate the structure and data types expected by the `ListResourceCheckout` component. No external dependencies beyond the specified import are needed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourcecheckout.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceCheckout } from \"@polar-sh/sdk/models/components/listresourcecheckout.js\";\n\nlet value: ListResourceCheckout = {\n  items: [\n    {\n      createdAt: new Date(\"2023-10-19T20:54:38.500Z\"),\n      modifiedAt: new Date(\"2025-11-10T21:53:44.732Z\"),\n      id: \"<value>\",\n      paymentProcessor: \"stripe\",\n      status: \"expired\",\n      clientSecret: \"<value>\",\n      url: \"https://busy-fowl.net\",\n      expiresAt: new Date(\"2024-01-26T08:10:24.945Z\"),\n      successUrl: \"https://made-up-hierarchy.net\",\n      embedOrigin: \"<value>\",\n      amount: 275495,\n      discountAmount: 715146,\n      netAmount: 210725,\n      taxAmount: 887156,\n      totalAmount: 913544,\n      currency: \"Cape Verde Escudo\",\n      productId: \"<value>\",\n      productPriceId: \"<value>\",\n      discountId: \"<value>\",\n      allowDiscountCodes: false,\n      requireBillingAddress: false,\n      isDiscountApplicable: false,\n      isFreeProductPrice: false,\n      isPaymentRequired: false,\n      isPaymentSetupRequired: false,\n      isPaymentFormRequired: false,\n      customerId: \"<value>\",\n      customerName: \"<value>\",\n      customerEmail: \"<value>\",\n      customerIpAddress: \"<value>\",\n      customerBillingAddress: {\n        country: \"SE\",\n      },\n      customerTaxId: \"<id>\",\n      paymentProcessorMetadata: {\n        \"key\": \"<value>\",\n      },\n      metadata: {\n        \"key\": 5363.46,\n      },\n      customerExternalId: \"<id>\",\n      products: [\n        {\n          createdAt: new Date(\"2024-01-02T17:36:14.350Z\"),\n          modifiedAt: new Date(\"2024-09-04T04:47:52.343Z\"),\n          id: \"<value>\",\n          name: \"<value>\",\n          description: \"indeed barring concrete um\",\n          recurringInterval: \"month\",\n          isRecurring: false,\n          isArchived: false,\n          organizationId: \"<value>\",\n          prices: [\n            {\n              createdAt: new Date(\"2024-09-08T08:57:23.761Z\"),\n              modifiedAt: new Date(\"2023-01-17T15:50:29.162Z\"),\n              id: \"<value>\",\n              isArchived: false,\n              productId: \"<value>\",\n              type: \"recurring\",\n              recurringInterval: \"month\",\n              priceCurrency: \"<value>\",\n              minimumAmount: 882654,\n              maximumAmount: 486763,\n              presetAmount: 632408,\n            },\n          ],\n          benefits: [\n            {\n              id: \"<value>\",\n              createdAt: new Date(\"2025-05-10T06:32:16.376Z\"),\n              modifiedAt: new Date(\"2024-05-10T04:40:56.406Z\"),\n              type: \"discord\",\n              description:\n                \"huzzah upright roundabout rudely among millet elastic\",\n              selectable: false,\n              deletable: false,\n              organizationId: \"<value>\",\n            },\n          ],\n          medias: [\n            {\n              id: \"<value>\",\n              organizationId: \"<value>\",\n              name: \"<value>\",\n              path: \"/private/tmp\",\n              mimeType: \"<value>\",\n              size: 760121,\n              storageVersion: \"<value>\",\n              checksumEtag: \"<value>\",\n              checksumSha256Base64: \"<value>\",\n              checksumSha256Hex: \"<value>\",\n              lastModifiedAt: new Date(\"2025-07-12T05:47:29.863Z\"),\n              version: \"<value>\",\n              isUploaded: false,\n              createdAt: new Date(\"2024-12-14T06:22:35.975Z\"),\n              sizeReadable: \"<value>\",\n              publicUrl: \"https://wealthy-divine.org/\",\n            },\n          ],\n        },\n      ],\n      product: {\n        createdAt: new Date(\"2023-01-05T19:03:35.199Z\"),\n        modifiedAt: new Date(\"2025-01-28T09:28:09.661Z\"),\n        id: \"<value>\",\n        name: \"<value>\",\n        description: \"tinted however overplay fake\",\n        recurringInterval: \"month\",\n        isRecurring: false,\n        isArchived: false,\n        organizationId: \"<value>\",\n        prices: [\n          {\n            createdAt: new Date(\"2023-11-26T22:05:55.921Z\"),\n            modifiedAt: new Date(\"2023-01-06T10:52:34.643Z\"),\n            id: \"<value>\",\n            isArchived: false,\n            productId: \"<value>\",\n            type: \"recurring\",\n            recurringInterval: \"year\",\n          },\n        ],\n        benefits: [\n          {\n            id: \"<value>\",\n            createdAt: new Date(\"2023-03-09T11:02:40.163Z\"),\n            modifiedAt: new Date(\"2025-01-04T12:38:45.703Z\"),\n            type: \"custom\",\n            description: \"midst regularly celebrate\",\n            selectable: false,\n            deletable: false,\n            organizationId: \"<value>\",\n          },\n        ],\n        medias: [\n          {\n            id: \"<value>\",\n            organizationId: \"<value>\",\n            name: \"<value>\",\n            path: \"/home/user\",\n            mimeType: \"<value>\",\n            size: 646308,\n            storageVersion: \"<value>\",\n            checksumEtag: \"<value>\",\n            checksumSha256Base64: \"<value>\",\n            checksumSha256Hex: \"<value>\",\n            lastModifiedAt: new Date(\"2025-07-01T14:06:08.451Z\"),\n            version: \"<value>\",\n            isUploaded: false,\n            createdAt: new Date(\"2024-07-21T20:20:00.329Z\"),\n            sizeReadable: \"<value>\",\n            publicUrl: \"https://little-bench.net/\",\n          },\n        ],\n      },\n      productPrice: {\n        createdAt: new Date(\"2025-10-23T18:30:39.059Z\"),\n        modifiedAt: new Date(\"2025-06-13T22:25:10.289Z\"),\n        id: \"<value>\",\n        isArchived: false,\n        productId: \"<value>\",\n        type: \"one_time\",\n        recurringInterval: \"year\",\n      },\n      discount: {\n        duration: \"repeating\",\n        durationInMonths: 940122,\n        type: \"fixed\",\n        basisPoints: 534981,\n        id: \"<value>\",\n        name: \"<value>\",\n        code: \"<value>\",\n      },\n      subscriptionId: \"<value>\",\n      attachedCustomFields: [\n        {\n          customFieldId: \"<value>\",\n          customField: {\n            createdAt: new Date(\"2024-05-30T17:34:30.834Z\"),\n            modifiedAt: new Date(\"2023-07-21T14:44:50.643Z\"),\n            id: \"<value>\",\n            metadata: {\n              \"key\": 2811.21,\n            },\n            slug: \"<value>\",\n            name: \"<value>\",\n            organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n            properties: {\n              options: [\n                {\n                  value: \"<value>\",\n                  label: \"<value>\",\n                },\n              ],\n            },\n          },\n          order: 595851,\n          required: false,\n        },\n      ],\n      customerMetadata: {\n        \"key\": \"<value>\",\n      },\n      customerBillingAddressFields: {\n        country: false,\n        state: false,\n        city: false,\n        postalCode: false,\n        line1: false,\n        line2: false,\n      },\n    },\n  ],\n  pagination: {\n    totalCount: 314491,\n    maxPage: 982317,\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Define DiscountFixedOnceForeverDurationBase Type - TypeScript\nDESCRIPTION: This snippet defines a TypeScript object representing a fixed discount that can be applied once or forever. It includes properties such as duration, type, amount, currency, timestamps, IDs, metadata, name, code, start and end dates, maximum redemptions, redemption count, and organization ID. The `duration` is set to 'repeating'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkdiscount.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DiscountFixedOnceForeverDurationBase = {\n  duration: \"repeating\",\n  type: \"fixed\",\n  amount: 978120,\n  currency: \"Lebanese Pound\",\n  createdAt: new Date(\"2023-11-29T22:19:07.374Z\"),\n  modifiedAt: new Date(\"2025-08-26T08:06:28.501Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 2343.43,\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2025-06-09T06:38:20.565Z\"),\n  endsAt: new Date(\"2023-12-05T14:26:35.432Z\"),\n  maxRedemptions: 132138,\n  redemptionsCount: 728287,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ProductMediaFileRead Type in TypeScript\nDESCRIPTION: This code snippet defines the structure of the `ProductMediaFileRead` type, representing a product media file. It encompasses attributes such as `id`, `organizationId`, `name`, `path`, `mimeType`, `size`, checksums (`checksumEtag`, `checksumSha256Base64`, `checksumSha256Hex`), timestamps (`lastModifiedAt`, `createdAt`), `version`, `isUploaded`, `sizeReadable`, and `publicUrl`. It demonstrates a TypeScript representation of a product media file object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/filesuploadedresponsefilesuploaded.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductMediaFileRead = {\n  id: \"<value>\",\n  organizationId: \"<value>\",\n  name: \"<value>\",\n  path: \"/usr/bin\",\n  mimeType: \"<value>\",\n  size: 176908,\n  storageVersion: \"<value>\",\n  checksumEtag: \"<value>\",\n  checksumSha256Base64: \"<value>\",\n  checksumSha256Hex: \"<value>\",\n  lastModifiedAt: new Date(\"2024-04-30T09:42:31.237Z\"),\n  version: \"<value>\",\n  isUploaded: false,\n  createdAt: new Date(\"2024-02-27T09:24:35.992Z\"),\n  sizeReadable: \"<value>\",\n  publicUrl: \"https://nippy-beret.org\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Product ID Filter - TypeScript\nDESCRIPTION: This snippet demonstrates how to filter by product ID using an array of string values in TypeScript. The `value` constant is assigned an array of strings, where each string represents a product ID to be filtered.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutslistqueryparamproductidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Import and Initialize CustomFieldUpdateNumber in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `CustomFieldUpdateNumber` class from the `@polar-sh/sdk/models/components/customfieldupdatenumber.js` module and initializes an empty object of that type.  It shows the basic setup required to use the schema.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdatenumber.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldUpdateNumber } from \"@polar-sh/sdk/models/components/customfieldupdatenumber.js\";\n\nlet value: CustomFieldUpdateNumber = {};\n```\n\n----------------------------------------\n\nTITLE: Initializing ProductPriceFree Type - TypeScript\nDESCRIPTION: This code snippet shows how to initialize the `ProductPriceFree` type. It includes fields such as `createdAt`, `modifiedAt`, `id`, `isArchived`, `productId`, `type`, and `recurringInterval`. This type represents a free product offering.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productprice.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPriceFree = {\n  createdAt: new Date(\"2023-09-10T01:59:19.952Z\"),\n  modifiedAt: new Date(\"2024-10-07T22:48:38.896Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  type: \"one_time\",\n  recurringInterval: \"year\",\n};\n```\n\n----------------------------------------\n\nTITLE: MetersUpdateRequest Usage Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the MetersUpdateRequest object in TypeScript. It imports the class from the specified path and creates an instance with the required properties, id (string) and meterUpdate (object).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/metersupdaterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MetersUpdateRequest } from \"@polar-sh/sdk/models/operations/metersupdate.js\";\n\nlet value: MetersUpdateRequest = {\n  id: \"<value>\",\n  meterUpdate: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Get Metrics with Standalone Function (TypeScript)\nDESCRIPTION: Retrieves metrics using the standalone `metricsGet` function from the Polar SDK. This example demonstrates tree-shaking optimization by using `PolarCore`. It initializes `PolarCore` with an access token, calls `metricsGet` with parameters, and handles potential errors before logging the result.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/metrics/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { metricsGet } from \"@polar-sh/sdk/funcs/metricsGet.js\";\nimport { RFCDate } from \"@polar-sh/sdk/types/rfcdate.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await metricsGet(polar, {\n    startDate: new RFCDate(\"2025-02-06\"),\n    endDate: new RFCDate(\"2024-09-04\"),\n    interval: \"week\",\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: String Name Filter TypeScript\nDESCRIPTION: Defines a string variable to represent a single event name to filter by. The value should be replaced with the actual event name string. This is used as a single filter value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/namefilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Initializing LegacyRecurringProductPriceCustom TypeScript\nDESCRIPTION: This snippet shows how to initialize a `LegacyRecurringProductPriceCustom` object in TypeScript. It sets properties such as `createdAt`, `modifiedAt`, `id`, `isArchived`, `productId`, `recurringInterval`, `priceCurrency`, `minimumAmount`, `maximumAmount`, and `presetAmount` with example values. Requires the `components` namespace to be defined.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/legacyrecurringproductprice.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.LegacyRecurringProductPriceCustom = {\n  createdAt: new Date(\"2024-12-07T03:04:39.121Z\"),\n  modifiedAt: new Date(\"2024-07-30T18:42:46.723Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  recurringInterval: \"month\",\n  priceCurrency: \"<value>\",\n  minimumAmount: 157808,\n  maximumAmount: 92405,\n  presetAmount: 126446,\n};\n```\n\n----------------------------------------\n\nTITLE: Instantiating ListResourceCustomer in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and instantiate the `ListResourceCustomer` type from the `@polar-sh/sdk/models/components/listresourcecustomer.js` module. It then populates the `items` array with sample `Customer` objects, including date objects and metadata, and the `pagination` object with sample data. It includes details such as IDs, timestamps, email addresses, and billing information within the `Customer` objects, and total count and max page within the pagination object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourcecustomer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceCustomer } from \"@polar-sh/sdk/models/components/listresourcecustomer.js\";\n\nlet value: ListResourceCustomer = {\n  items: [\n    {\n      id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n      createdAt: new Date(\"2024-10-27T04:04:55.546Z\"),\n      modifiedAt: new Date(\"2025-04-03T17:39:07.468Z\"),\n      metadata: {\n        \"key\": false,\n      },\n      externalId: \"usr_1337\",\n      email: \"customer@example.com\",\n      emailVerified: true,\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"SE\",\n      },\n      taxId: [\n        \"911144442\",\n        \"us_ein\",\n      ],\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      deletedAt: new Date(\"2023-01-03T20:01:47.295Z\"),\n      avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n    },\n  ],\n  pagination: {\n    totalCount: 924454,\n    maxPage: 684148,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Example in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a floating-point number type variable in TypeScript. It shows the basic syntax for assigning a floating-point literal to a variable declared with the `number` type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutcreatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Update Checkout Session - TypeScript\nDESCRIPTION: This code snippet demonstrates how to update an existing checkout session using the `CheckoutUpdatePublic` model. It imports the necessary module and creates an object to specify the customer's billing address. The customer's billing address is set with the country set to \"US\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutupdatepublic.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutUpdatePublic } from \"@polar-sh/sdk/models/components/checkoutupdatepublic.js\";\n\nlet value: CheckoutUpdatePublic = {\n  customerBillingAddress: {\n    country: \"US\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: BenefitsGetRequest Example\nDESCRIPTION: This code snippet shows how to import the BenefitsGetRequest class from the @polar-sh/sdk/models/operations/benefitsget.js module and instantiate it with a specific 'id' value.  The 'id' field is a string and is marked as required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/benefitsgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitsGetRequest } from \"@polar-sh/sdk/models/operations/benefitsget.js\";\n\nlet value: BenefitsGetRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Meter Object in TypeScript\nDESCRIPTION: This code snippet shows how to import and initialize a `Meter` object with sample data using TypeScript. It includes metadata, timestamps, IDs, names, filter, aggregation, and organization ID. It relies on the `@polar-sh/sdk/models/components/meter.js` module. The createdAt and modifiedAt fields are initialized with Date objects.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/meter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meter } from \"@polar-sh/sdk/models/components/meter.js\";\n\nlet value: Meter = {\n  metadata: {\n    \"key\": \"<value>\",\n  },\n  createdAt: new Date(\"2023-07-18T04:53:21.925Z\"),\n  modifiedAt: new Date(\"2023-01-23T13:42:10.358Z\"),\n  id: \"<value>\",\n  name: \"<value>\",\n  filter: {\n    conjunction: \"and\",\n    clauses: [],\n  },\n  aggregation: {\n    func: \"avg\",\n    property: \"<value>\",\n  },\n  organizationId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Organization Model Example Usage in Typescript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the Organization model in TypeScript. It imports the Organization type from the specified module and then defines a variable 'value' of that type, initializing it with sample data for all required fields, including dates, strings, and nested objects like socials and settings.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/organization.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Organization } from \"@polar-sh/sdk/models/components/organization.js\";\n\nlet value: Organization = {\n  createdAt: new Date(\"2025-08-18T16:08:36.319Z\"),\n  modifiedAt: new Date(\"2023-06-29T18:21:41.585Z\"),\n  id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  name: \"<value>\",\n  slug: \"<value>\",\n  avatarUrl: \"https://medium-formula.org\",\n  email: \"Waino.Paucek35@yahoo.com\",\n  website: \"<value>\",\n  socials: [\n    {\n      platform: \"youtube\",\n      url: \"https://torn-bob.net\",\n    },\n  ],\n  detailsSubmittedAt: new Date(\"2024-10-03T20:10:35.957Z\"),\n  featureSettings: {},\n  subscriptionSettings: {\n    allowMultipleSubscriptions: false,\n    allowCustomerUpdates: false,\n    prorationBehavior: \"prorate\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: OrderProduct Model Usage in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the OrderProduct model from the `@polar-sh/sdk` library in TypeScript. It initializes an `OrderProduct` object with sample values for its properties, including metadata, timestamps, IDs, names, descriptions, and recurring information. It imports OrderProduct from `@polar-sh/sdk/models/components/orderproduct.js`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/orderproduct.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrderProduct } from \"@polar-sh/sdk/models/components/orderproduct.js\";\n\nlet value: OrderProduct = {\n  metadata: {\n    \"key\": 100550,\n  },\n  createdAt: new Date(\"2023-06-01T03:16:51.095Z\"),\n  modifiedAt: new Date(\"2024-08-23T10:14:02.533Z\"),\n  id: \"<value>\",\n  name: \"<value>\",\n  description: \"amongst parallel microblog though but\",\n  recurringInterval: \"year\",\n  isRecurring: false,\n  isArchived: false,\n  organizationId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining LegacyRecurringProductPrice in TypeScript\nDESCRIPTION: Defines a constant `value` with the type `components.LegacyRecurringProductPrice` and populates it with example data. The properties include timestamps, IDs, product ID, recurring interval, price currency, and minimum/maximum/preset amounts.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpublicconfirmedproductprice.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.LegacyRecurringProductPrice = {\n  createdAt: new Date(\"2025-03-28T17:53:12.899Z\"),\n  modifiedAt: new Date(\"2024-08-10T00:40:01.700Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  recurringInterval: \"year\",\n  priceCurrency: \"<value>\",\n  minimumAmount: 981878,\n  maximumAmount: 962753,\n  presetAmount: 690635,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Custom Metadata Value in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a boolean value for custom metadata associated with a benefit. The `value` variable is explicitly typed as a boolean and assigned a boolean literal (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustommetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalCustomerMetersListRequest in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize an empty `CustomerPortalCustomerMetersListRequest` object in TypeScript. This request object is used to configure the parameters for retrieving customer meter data from the Polar API. It imports the necessary type definition from the `@polar-sh/sdk` library.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalcustomermeterslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalCustomerMetersListRequest } from \"@polar-sh/sdk/models/operations/customerportalcustomermeterslist.js\";\n\nlet value: CustomerPortalCustomerMetersListRequest = {};\n```\n\n----------------------------------------\n\nTITLE: Creating a DownloadableFileRead Instance in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `DownloadableFileRead` object in TypeScript using the `@polar-sh/sdk` library. It imports the necessary type and then initializes an object with sample data for each of the required fields. The Date objects represent the last modified and created timestamps.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/downloadablefileread.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DownloadableFileRead } from \"@polar-sh/sdk/models/components/downloadablefileread.js\";\n\nlet value: DownloadableFileRead = {\n  id: \"<value>\",\n  organizationId: \"<value>\",\n  name: \"<value>\",\n  path: \"/net\",\n  mimeType: \"<value>\",\n  size: 815953,\n  storageVersion: \"<value>\",\n  checksumEtag: \"<value>\",\n  checksumSha256Base64: \"<value>\",\n  checksumSha256Hex: \"<value>\",\n  lastModifiedAt: new Date(\"2024-05-07T11:26:55.114Z\"),\n  version: \"<value>\",\n  isUploaded: false,\n  createdAt: new Date(\"2024-08-19T08:06:23.676Z\"),\n  sizeReadable: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Checkout ID Filter (TypeScript)\nDESCRIPTION: Defines a string array type for the checkout ID filter. This enables filtering based on multiple checkout ID strings.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparamcheckoutidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: CheckoutStatus Values in TypeScript\nDESCRIPTION: This snippet defines the possible string literal values that the `CheckoutStatus` type can hold. These values represent the different states of a checkout process.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutstatus.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"open\" | \"expired\" | \"confirmed\" | \"succeeded\" | \"failed\"\n```\n\n----------------------------------------\n\nTITLE: Initializing LicenseKeyActivateConditions in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and initialize the `LicenseKeyActivateConditions` type from the `@polar-sh/sdk/models/components/licensekeyactivate.js` module.  The `value` variable is initialized as an empty object of type `LicenseKeyActivateConditions`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/licensekeyactivateconditions.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LicenseKeyActivateConditions } from \"@polar-sh/sdk/models/components/licensekeyactivate.js\";\n\nlet value: LicenseKeyActivateConditions = {};\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Custom Field in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a text custom field. It defines the required properties such as `slug`, `name`, `organizationId`, and `properties`. The properties are defined as an empty object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreate.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomFieldCreateText = {\n  slug: \"<value>\",\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Creating DiscountFixedRepeatDuration in TypeScript\nDESCRIPTION: This code snippet shows how to create an instance of `DiscountFixedRepeatDuration` object in TypeScript, populating it with sample data. It imports the class from the `@polar-sh/sdk/models/components/discountfixedrepeatduration.js` module and assigns values to its properties. It demonstrates the data structure and its usage.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedrepeatduration.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountFixedRepeatDuration } from \"@polar-sh/sdk/models/components/discountfixedrepeatduration.js\";\n\nlet value: DiscountFixedRepeatDuration = {\n  duration: \"repeating\",\n  durationInMonths: 232372,\n  type: \"percentage\",\n  amount: 588120,\n  currency: \"Baht\",\n  createdAt: new Date(\"2025-06-28T14:15:22.778Z\"),\n  modifiedAt: new Date(\"2024-05-15T16:32:52.980Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 8402.18,\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2025-06-11T05:57:30.853Z\"),\n  endsAt: new Date(\"2024-09-27T10:25:26.956Z\"),\n  maxRedemptions: 551487,\n  redemptionsCount: 756936,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  products: [\n    {\n      metadata: {\n        \"key\": 1757.78,\n      },\n      createdAt: new Date(\"2023-04-14T05:16:00.085Z\"),\n      modifiedAt: new Date(\"2025-08-20T16:46:06.231Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description:\n        \"what broadside whose even negative cinema whoa since smooth pants\",\n      recurringInterval: \"year\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n    },\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: LicenseKeysListResponse Usage Example (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to import and use the `LicenseKeysListResponse` class from the `@polar-sh/sdk/models/operations/licensekeyslist.js` module. It creates an instance of the class and populates it with sample data, including nested objects like `customer` and `pagination`, and arrays like `taxId` and the `items` array within the `result` object. The example shows how to construct `Date` objects and assign values to various fields of the `LicenseKeysListResponse` object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/licensekeyslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LicenseKeysListResponse } from \"@polar-sh/sdk/models/operations/licensekeyslist.js\";\n\nlet value: LicenseKeysListResponse = {\n  result: {\n    items: [\n      {\n        id: \"<value>\",\n        organizationId: \"<value>\",\n        customerId: \"<value>\",\n        customer: {\n          id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n          createdAt: new Date(\"2023-01-21T20:02:35.336Z\"),\n          modifiedAt: new Date(\"2024-03-25T17:22:02.193Z\"),\n          metadata: {\n            \"key\": \"<value>\",\n          },\n          externalId: \"usr_1337\",\n          email: \"customer@example.com\",\n          emailVerified: true,\n          name: \"John Doe\",\n          billingAddress: {\n            country: \"FR\",\n          },\n          taxId: [\n            \"FR61954506077\",\n            \"eu_vat\",\n          ],\n          organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n          deletedAt: new Date(\"2023-02-20T23:15:09.190Z\"),\n          avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n        },\n        benefitId: \"<value>\",\n        key: \"<key>\",\n        displayKey: \"<value>\",\n        status: \"disabled\",\n        limitActivations: 785788,\n        usage: 112198,\n        limitUsage: 677780,\n        validations: 104327,\n        lastValidatedAt: new Date(\"2023-05-02T05:48:35.208Z\"),\n        expiresAt: new Date(\"2023-09-15T06:06:53.902Z\"),\n      },\n    ],\n    pagination: {\n      totalCount: 330749,\n      maxPage: 612777,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a ListResourceMeter instance in TypeScript\nDESCRIPTION: This code snippet imports the ListResourceMeter component and demonstrates how to create an instance of it.  It populates the `items` array with an example meter object that includes metadata, timestamps, an ID, name, filter, aggregation, and organization ID. It also shows how to populate the `pagination` object with a total count and max page number.  It requires the `@polar-sh/sdk` package to be installed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourcemeter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceMeter } from \"@polar-sh/sdk/models/components/listresourcemeter.js\";\n\nlet value: ListResourceMeter = {\n  items: [\n    {\n      metadata: {\n        \"key\": false,\n      },\n      createdAt: new Date(\"2023-12-11T01:36:24.954Z\"),\n      modifiedAt: new Date(\"2023-01-09T16:18:53.335Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      filter: {\n        conjunction: \"or\",\n        clauses: [],\n      },\n      aggregation: {},\n      organizationId: \"<value>\",\n    },\n  ],\n  pagination: {\n    totalCount: 386895,\n    maxPage: 909416,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerMetersListRequest TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the CustomerMetersListRequest object in TypeScript.  It sets the organizationId property to a specific UUID.  Dependencies include the @polar-sh/sdk library.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customermeterslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerMetersListRequest } from \"@polar-sh/sdk/models/operations/customermeterslist.js\";\n\nlet value: CustomerMetersListRequest = {\n  organizationId: [\n    \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: ListResourceDownloadableRead Usage Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create and populate a `ListResourceDownloadableRead` object in TypeScript. It includes the necessary import statement and initializes the object with sample data for the `items` and `pagination` properties. The `items` property is an array of downloadable resources, each containing file metadata and a download URL. The `pagination` property provides information about the total number of items and the maximum page number. The code utilizes the `@polar-sh/sdk/models/components/listresourcedownloadableread.js` module. All newlines have been properly escaped.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourcedownloadableread.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceDownloadableRead } from \"@polar-sh/sdk/models/components/listresourcedownloadableread.js\";\n\nlet value: ListResourceDownloadableRead = {\n  items: [\n    {\n      id: \"<value>\",\n      benefitId: \"<value>\",\n      file: {\n        id: \"<value>\",\n        organizationId: \"<value>\",\n        name: \"<value>\",\n        path: \"/boot\",\n        mimeType: \"<value>\",\n        size: 156565,\n        storageVersion: \"<value>\",\n        checksumEtag: \"<value>\",\n        checksumSha256Base64: \"<value>\",\n        checksumSha256Hex: \"<value>\",\n        lastModifiedAt: new Date(\"2023-02-19T20:41:25.338Z\"),\n        download: {\n          url: \"https://empty-bookcase.com\",\n          expiresAt: new Date(\"2024-06-10T02:33:32.817Z\"),\n        },\n        version: \"<value>\",\n        isUploaded: false,\n        service: \"product_media\",\n        sizeReadable: \"<value>\",\n      },\n    },\n  ],\n  pagination: {\n    totalCount: 603128,\n    maxPage: 545995,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerBenefitGrantLicenseKeys in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a CustomerBenefitGrantLicenseKeys object with various properties. It imports the CustomerBenefitGrantLicenseKeys type from the @polar-sh/sdk/models/components/customerbenefitgrantlicensekeys.js module and creates an instance with sample data, including nested objects for customer and benefit details.  Dates are created using the Date constructor.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantlicensekeys.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerBenefitGrantLicenseKeys } from \"@polar-sh/sdk/models/components/customerbenefitgrantlicensekeys.js\";\n\nlet value: CustomerBenefitGrantLicenseKeys = {\n  createdAt: new Date(\"2025-10-10T06:58:13.908Z\"),\n  modifiedAt: new Date(\"2025-02-14T14:19:07.648Z\"),\n  id: \"<value>\",\n  grantedAt: new Date(\"2025-10-20T23:41:09.991Z\"),\n  revokedAt: new Date(\"2024-10-25T21:19:58.791Z\"),\n  customerId: \"<value>\",\n  benefitId: \"<value>\",\n  subscriptionId: \"<value>\",\n  orderId: \"<value>\",\n  isGranted: false,\n  isRevoked: false,\n  customer: {\n    createdAt: new Date(\"2025-10-01T12:37:37.852Z\"),\n    modifiedAt: new Date(\"2024-10-16T11:04:13.172Z\"),\n    id: \"<value>\",\n    email: \"Donny.Baumbach29@gmail.com\",\n    emailVerified: false,\n    name: \"<value>\",\n    billingAddress: {\n      country: \"US\",\n    },\n    taxId: [\n      \"911144442\",\n      \"us_ein\",\n    ],\n    oauthAccounts: {\n      \"key\": {\n        accountId: \"<id>\",\n        accountUsername: \"<value>\",\n      },\n    },\n  },\n  benefit: {\n    id: \"<value>\",\n    createdAt: new Date(\"2024-07-27T19:34:20.478Z\"),\n    modifiedAt: new Date(\"2023-11-29T22:53:15.659Z\"),\n    description: \"appreciate put individual whether case towards iterate\",\n    selectable: false,\n    deletable: false,\n    organizationId: \"<value>\",\n    metadata: {\n      \"key\": false,\n    },\n    organization: {\n      createdAt: new Date(\"2023-10-01T11:13:38.229Z\"),\n      modifiedAt: new Date(\"2025-10-09T01:31:17.247Z\"),\n      id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      name: \"<value>\",\n      slug: \"<value>\",\n      avatarUrl: \"https://wicked-contractor.biz/\",\n      email: \"Jayce_Upton@yahoo.com\",\n      website: \"<value>\",\n      socials: [\n        {\n          platform: \"youtube\",\n          url: \"https://outrageous-tabletop.biz/\",\n        },\n      ],\n      detailsSubmittedAt: new Date(\"2024-06-26T00:02:14.675Z\"),\n      featureSettings: {},\n      subscriptionSettings: {\n        allowMultipleSubscriptions: false,\n        allowCustomerUpdates: false,\n        prorationBehavior: \"prorate\",\n      },\n    },\n    properties: {\n      prefix: \"<value>\",\n      expires: {\n        ttl: 962631,\n        timeframe: \"year\",\n      },\n      activations: {\n        limit: 753681,\n        enableCustomerAdmin: false,\n      },\n      limitUsage: 800709,\n    },\n  },\n  properties: {},\n};\n\n```\n\n----------------------------------------\n\nTITLE: CheckoutUpdate Example Usage Typescript\nDESCRIPTION: This snippet demonstrates how to import and use the CheckoutUpdate component from the @polar-sh/sdk/models/components/checkoutupdate.js module. It creates an instance of CheckoutUpdate and sets the customerBillingAddress, including the country code to 'FR'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutUpdate } from \"@polar-sh/sdk/models/components/checkoutupdate.js\";\n\nlet value: CheckoutUpdate = {\n  customerBillingAddress: {\n    country: \"FR\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Benefit Grants with Standalone Function in TypeScript\nDESCRIPTION: This snippet shows how to list benefit grants using the standalone function `customerPortalBenefitGrantsList` from the Polar SDK core. It initializes `PolarCore`, calls the standalone function with customer session and organization ID, and handles the response. Errors are thrown if the response is not successful, and the result is iterated over if the response is successful.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/benefitgrants/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalBenefitGrantsList } from \"@polar-sh/sdk/funcs/customerPortalBenefitGrantsList.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalBenefitGrantsList(polar, {\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Organization ID Filter with String in Typescript\nDESCRIPTION: Demonstrates filtering events using a single organization ID represented as a string. The `value` constant is assigned a string representing the organization's UUID. This snippet showcases the basic usage of filtering with a single organization ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/eventslistnamesqueryparamorganizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: String Array Order ID Filter TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a string array for filtering by multiple order IDs. The array contains a list of order IDs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparamorderidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Declaration in TypeScript\nDESCRIPTION: Shows how to declare a number type variable named 'value' and assign an integer literal to it. This example illustrates defining an integer value for discount product metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountproductmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Webhook Checkout Updated Payload Example in Typescript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the WebhookCheckoutUpdatedPayload model in TypeScript. It imports the necessary module and assigns a sample data structure to the model's properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookcheckoutupdatedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookCheckoutUpdatedPayload } from \"@polar-sh/sdk/models/components/webhookcheckoutupdatedpayload.js\";\n\nlet value: WebhookCheckoutUpdatedPayload = {\n  data: {\n    createdAt: new Date(\"2024-10-28T04:36:13.190Z\"),\n    modifiedAt: new Date(\"2024-11-28T22:37:10.254Z\"),\n    id: \"<value>\",\n    paymentProcessor: \"stripe\",\n    status: \"expired\",\n    clientSecret: \"<value>\",\n    url: \"https://posh-community.info/\",\n    expiresAt: new Date(\"2025-11-15T13:36:19.686Z\"),\n    successUrl: \"https://incomplete-skyscraper.net\",\n    embedOrigin: \"<value>\",\n    amount: 695971,\n    discountAmount: 338469,\n    netAmount: 166510,\n    taxAmount: 556902,\n    totalAmount: 656558,\n    currency: \"Serbian Dinar\",\n    productId: \"<value>\",\n    productPriceId: \"<value>\",\n    discountId: \"<value>\",\n    allowDiscountCodes: false,\n    requireBillingAddress: false,\n    isDiscountApplicable: false,\n    isFreeProductPrice: false,\n    isPaymentRequired: false,\n    isPaymentSetupRequired: false,\n    isPaymentFormRequired: false,\n    customerId: \"<value>\",\n    customerName: \"<value>\",\n    customerEmail: \"<value>\",\n    customerIpAddress: \"<value>\",\n    customerBillingAddress: {\n      country: \"SE\",\n    },\n    customerTaxId: \"<id>\",\n    paymentProcessorMetadata: {\n      \"key\": \"<value>\",\n    },\n    metadata: {\n      \"key\": 372.38,\n    },\n    customerExternalId: \"<id>\",\n    products: [\n      {\n        createdAt: new Date(\"2024-08-19T23:36:13.978Z\"),\n        modifiedAt: new Date(\"2024-12-21T10:55:54.892Z\"),\n        id: \"<value>\",\n        name: \"<value>\",\n        description:\n          \"below however faint but talkative swim stunt tenant or plump\",\n        recurringInterval: \"year\",\n        isRecurring: false,\n        isArchived: false,\n        organizationId: \"<value>\",\n        prices: [\n          {\n            createdAt: new Date(\"2024-05-05T15:08:17.778Z\"),\n            modifiedAt: new Date(\"2025-08-09T12:34:03.537Z\"),\n            id: \"<value>\",\n            isArchived: false,\n            productId: \"<value>\",\n            type: \"one_time\",\n            recurringInterval: \"year\",\n          },\n        ],\n        benefits: [\n          {\n            id: \"<value>\",\n            createdAt: new Date(\"2025-09-26T20:54:23.897Z\"),\n            modifiedAt: new Date(\"2025-06-08T15:30:07.568Z\"),\n            type: \"discord\",\n            description:\n              \"aha obtrude scramble convection front baseboard ah outlaw reflate angrily\",\n            selectable: false,\n            deletable: false,\n            organizationId: \"<value>\",\n          },\n        ],\n        medias: [\n          {\n            id: \"<value>\",\n            organizationId: \"<value>\",\n            name: \"<value>\",\n            path: \"/opt/sbin\",\n            mimeType: \"<value>\",\n            size: 542127,\n            storageVersion: \"<value>\",\n            checksumEtag: \"<value>\",\n            checksumSha256Base64: \"<value>\",\n            checksumSha256Hex: \"<value>\",\n            lastModifiedAt: new Date(\"2024-10-09T04:51:58.960Z\"),\n            version: \"<value>\",\n            isUploaded: false,\n            createdAt: new Date(\"2023-09-01T19:35:25.198Z\"),\n            sizeReadable: \"<value>\",\n            publicUrl: \"https://fantastic-bog.info\",\n          },\n        ],\n      },\n    ],\n    product: {\n      createdAt: new Date(\"2024-06-07T10:22:36.589Z\"),\n      modifiedAt: new Date(\"2023-06-15T04:46:10.315Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description: \"outside definitive aha shallow shell blah after yum anti\",\n      recurringInterval: \"month\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n      prices: [\n        {\n          createdAt: new Date(\"2024-01-29T01:43:38.112Z\"),\n          modifiedAt: new Date(\"2025-11-11T20:38:28.438Z\"),\n          id: \"<value>\",\n          isArchived: false,\n          productId: \"<value>\",\n          recurringInterval: \"year\",\n          priceCurrency: \"<value>\",\n          priceAmount: 677515,\n        },\n      ],\n      benefits: [\n        {\n          id: \"<value>\",\n          createdAt: new Date(\"2024-12-18T18:57:38.159Z\"),\n          modifiedAt: new Date(\"2025-02-14T06:16:41.220Z\"),\n          type: \"downloadables\",\n          description: \"freely than brr contractor meaningfully preregister\",\n          selectable: false,\n          deletable: false,\n          organizationId: \"<value>\",\n        },\n      ],\n      medias: [\n        {\n          id: \"<value>\",\n          organizationId: \"<value>\",\n          name: \"<value>\",\n          path: \"/dev\",\n          mimeType: \"<value>\",\n          size: 862949,\n          storageVersion: \"<value>\",\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n          checksumSha256Hex: \"<value>\",\n          lastModifiedAt: new Date(\"2023-06-15T07:38:48.356Z\"),\n          version: \"<value>\",\n          isUploaded: false,\n          createdAt: new Date(\"2024-02-01T18:42:55.805Z\"),\n          sizeReadable: \"<value>\",\n          publicUrl: \"https://rectangular-zen.name\",\n        },\n      ],\n    },\n    productPrice: {\n      createdAt: new Date(\"2025-12-30T08:11:26.825Z\"),\n      modifiedAt: new Date(\"2024-04-05T15:48:42.330Z\"),\n      id: \"<value>\",\n      isArchived: false,\n      productId: \"<value>\",\n      type: \"one_time\",\n      recurringInterval: \"year\",\n      priceCurrency: \"<value>\",\n      priceAmount: 890860,\n    },\n    discount: {\n      duration: \"repeating\",\n      durationInMonths: 525927,\n      type: \"fixed\",\n      amount: 430589,\n      currency: \"Convertible Marks\",\n      id: \"<value>\",\n      name: \"<value>\",\n      code: \"<value>\",\n    },\n    subscriptionId: \"<value>\",\n    attachedCustomFields: [\n      {\n        customFieldId: \"<value>\",\n        customField: {\n          createdAt: new Date(\"2024-08-02T00:31:31.876Z\"),\n          modifiedAt: new Date(\"2023-07-28T08:41:18.051Z\"),\n          id: \"<value>\",\n          metadata: {\n            \"key\": 53139,\n          },\n          slug: \"<value>\",\n          name: \"<value>\",\n          organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n          properties: {},\n        },\n        order: 710506,\n        required: false,\n      },\n    ],\n    customerMetadata: {\n      \"key\": \"<value>\",\n    },\n    customerBillingAddressFields: {\n      country: false,\n      state: false,\n      city: false,\n      postalCode: false,\n      line1: false,\n      line2: false,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Timeframe Type Definition - TypeScript\nDESCRIPTION: This snippet defines the valid string values for the Timeframe type in TypeScript. It shows the available options: 'year', 'month', and 'day'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/timeframe.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"year\" | \"month\" | \"day\"\n```\n\n----------------------------------------\n\nTITLE: Create AttachedCustomFieldCreate Instance TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to create an instance of the `AttachedCustomFieldCreate` schema. It imports the necessary type from the `@polar-sh/sdk/models/components/attachedcustomfieldcreate.js` module and creates an object with the `customFieldId` and `required` properties. The `customFieldId` is a string representing the ID of the custom field, and `required` is a boolean indicating whether the field is required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/attachedcustomfieldcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AttachedCustomFieldCreate } from \"@polar-sh/sdk/models/components/attachedcustomfieldcreate.js\";\n\nlet value: AttachedCustomFieldCreate = {\n  customFieldId: \"<value>\",\n  required: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Date Custom Field in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a date custom field. It defines the required properties such as `slug`, `name`, `organizationId`, and `properties`. The properties are defined as an empty object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreate.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomFieldCreateDate = {\n  slug: \"<value>\",\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering by Customer ID (String Array) - TypeScript\nDESCRIPTION: This snippet demonstrates how to filter orders by multiple customer IDs using an array of strings.  The `value` variable is assigned an array of strings, where each string represents a customer ID. This array is used as a filter parameter when retrieving a list of orders, returning all orders associated with any of the specified customer IDs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/orderslistqueryparamcustomeridfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: String Array Benefit ID Filter - TypeScript\nDESCRIPTION: This snippet shows how to filter benefit grants by multiple benefit IDs using an array of string values in TypeScript. It demonstrates the declaration of a string array and its initialization with a placeholder value. This allows filtering of benefits using multiple IDs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalbenefitgrantslistqueryparambenefitidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitGrantGitHubRepositoryProperties TypeScript\nDESCRIPTION: This snippet initializes a TypeScript object of type `components.BenefitGrantGitHubRepositoryProperties`. This type likely defines properties for granting access to a GitHub repository as a benefit, such as repository names or permissions.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatebenefitgrantproperties.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGrantGitHubRepositoryProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Completing File Upload using Standalone Function\nDESCRIPTION: This code snippet demonstrates how to complete a file upload using the standalone function provided by the Polar SDK. It imports `PolarCore` and `filesUploaded`, instantiates `PolarCore`, and then calls `filesUploaded` with the `PolarCore` instance and file details. Error handling is included to manage potential failures.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/files/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { filesUploaded } from \"@polar-sh/sdk/funcs/filesUploaded.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await filesUploaded(polar, {\n    id: \"<value>\",\n    fileUploadCompleted: {\n      id: \"<id>\",\n      path: \"/sys\",\n      parts: [\n        {\n          number: 173116,\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n        },\n        {\n          number: 894030,\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n        },\n        {\n          number: 673715,\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n        },\n      ],\n    },\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub Repository Benefit in TypeScript\nDESCRIPTION: This snippet demonstrates creating a GitHub repository benefit with `components.BenefitGitHubRepositoryCreate`. It specifies the repository owner, name, and the required permission level. Ensure that the correct repository details are provided.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcreate.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGitHubRepositoryCreate = {\n  description:\n    \"amidst psst broadcast huzzah consequently tentacle idealistic ack hard-to-find boohoo\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {\n    repositoryOwner: \"polarsource\",\n    repositoryName: \"private_repo\",\n    permission: \"admin\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Organization ID Filter - TypeScript\nDESCRIPTION: Demonstrates how to filter by multiple organization IDs using an array of strings. Each string in the array should be a valid UUID representing an organization's ID. This is a TypeScript implementation.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/discountslistqueryparamorganizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: Using WebhookOrderRefundedPayload in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the WebhookOrderRefundedPayload type from the `@polar-sh/sdk/models/components/webhookorderrefundedpayload.js` module and create an instance of it with example data. The payload contains information about a refunded order, including timestamps, IDs, amounts, customer details, product details, discount information, subscription details, and order items.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookorderrefundedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookOrderRefundedPayload } from \"@polar-sh/sdk/models/components/webhookorderrefundedpayload.js\";\n\nlet value: WebhookOrderRefundedPayload = {\n  data: {\n    createdAt: new Date(\"2025-12-02T13:09:55.292Z\"),\n    modifiedAt: new Date(\"2024-06-08T06:31:37.268Z\"),\n    id: \"<value>\",\n    metadata: {\n      \"key\": \"<value>\",\n    },\n    status: \"partially_refunded\",\n    paid: true,\n    subtotalAmount: 691867,\n    discountAmount: 813163,\n    netAmount: 80093,\n    amount: 124836,\n    taxAmount: 870409,\n    totalAmount: 607202,\n    refundedAmount: 274984,\n    refundedTaxAmount: 925178,\n    currency: \"Tenge\",\n    billingReason: \"subscription_update\",\n    billingAddress: {\n      country: \"US\",\n    },\n    customerId: \"<value>\",\n    productId: \"<value>\",\n    discountId: \"<value>\",\n    subscriptionId: \"<value>\",\n    checkoutId: \"<value>\",\n    customer: {\n      id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n      createdAt: new Date(\"2024-02-07T05:22:03.794Z\"),\n      modifiedAt: new Date(\"2023-03-02T08:02:47.952Z\"),\n      metadata: {\n        \"key\": \"<value>\",\n      },\n      externalId: \"usr_1337\",\n      email: \"customer@example.com\",\n      emailVerified: true,\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"FR\",\n      },\n      taxId: [\n        \"911144442\",\n        \"us_ein\",\n      ],\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      deletedAt: new Date(\"2025-01-04T13:12:40.817Z\"),\n      avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n    },\n    userId: \"<value>\",\n    product: {\n      metadata: {\n        \"key\": 213172,\n      },\n      createdAt: new Date(\"2025-07-12T01:10:54.918Z\"),\n      modifiedAt: new Date(\"2024-09-12T22:40:16.807Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description:\n        \"that less dereference enormously turbulent ick polished account\",\n      recurringInterval: \"month\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n    },\n    discount: {\n      duration: \"repeating\",\n      type: \"percentage\",\n      basisPoints: 39421,\n      createdAt: new Date(\"2024-10-04T00:09:28.667Z\"),\n      modifiedAt: new Date(\"2024-06-15T13:59:38.373Z\"),\n      id: \"<value>\",\n      metadata: {\n        \"key\": 3628.79,\n      },\n      name: \"<value>\",\n      code: \"<value>\",\n      startsAt: new Date(\"2025-12-29T13:48:23.726Z\"),\n      endsAt: new Date(\"2025-03-31T04:42:37.083Z\"),\n      maxRedemptions: 897848,\n      redemptionsCount: 527115,\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    },\n    subscription: {\n      metadata: {\n        \"key\": \"<value>\",\n      },\n      createdAt: new Date(\"2023-02-09T06:03:41.396Z\"),\n      modifiedAt: new Date(\"2024-07-07T11:57:21.325Z\"),\n      id: \"<value>\",\n      amount: 161995,\n      currency: \"Belarusian Ruble\",\n      recurringInterval: \"month\",\n      status: \"incomplete_expired\",\n      currentPeriodStart: new Date(\"2024-10-28T11:07:53.631Z\"),\n      currentPeriodEnd: new Date(\"2024-12-15T14:19:46.440Z\"),\n      cancelAtPeriodEnd: false,\n      canceledAt: new Date(\"2024-04-03T00:13:39.249Z\"),\n      startedAt: new Date(\"2024-12-06T03:02:48.494Z\"),\n      endsAt: new Date(\"2025-07-19T18:42:44.445Z\"),\n      endedAt: new Date(\"2024-08-22T02:30:26.195Z\"),\n      customerId: \"<value>\",\n      productId: \"<value>\",\n      discountId: \"<value>\",\n      checkoutId: \"<value>\",\n      customerCancellationReason: \"too_expensive\",\n      customerCancellationComment: \"<value>\",\n    },\n    items: [\n      {\n        createdAt: new Date(\"2025-09-06T09:48:15.576Z\"),\n        modifiedAt: new Date(\"2025-11-09T02:28:42.839Z\"),\n        id: \"<value>\",\n        label: \"<value>\",\n        amount: 721201,\n        taxAmount: 478490,\n        proration: false,\n        productPriceId: \"<value>\",\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using WebhookCustomerStateChangedPayload in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the WebhookCustomerStateChangedPayload type in TypeScript. It creates a sample payload with data representing a customer's state, including their ID, timestamps, metadata, subscriptions, benefits, and active meters. This is used to show the structure of the payload.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookcustomerstatechangedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookCustomerStateChangedPayload } from \"@polar-sh/sdk/models/components/webhookcustomerstatechangedpayload.js\";\n\nlet value: WebhookCustomerStateChangedPayload = {\n  data: {\n    id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n    createdAt: new Date(\"2023-09-08T09:42:52.953Z\"),\n    modifiedAt: new Date(\"2024-01-02T01:29:12.545Z\"),\n    metadata: {\n      \"key\": false,\n    },\n    externalId: \"usr_1337\",\n    email: \"customer@example.com\",\n    emailVerified: true,\n    name: \"John Doe\",\n    billingAddress: {\n      country: \"US\",\n    },\n    taxId: [\n      \"911144442\",\n      \"us_ein\",\n    ],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    deletedAt: new Date(\"2025-10-09T10:42:19.731Z\"),\n    activeSubscriptions: [\n      {\n        id: \"e5149aae-e521-42b9-b24c-abb3d71eea2e\",\n        createdAt: new Date(\"2025-12-23T04:41:58.036Z\"),\n        modifiedAt: new Date(\"2024-05-10T12:26:13.692Z\"),\n        metadata: {\n          \"key\": \"<value>\",\n        },\n        amount: 1000,\n        currency: \"usd\",\n        recurringInterval: \"year\",\n        currentPeriodStart: new Date(\"2025-02-03T13:37:00Z\"),\n        currentPeriodEnd: new Date(\"2025-03-03T13:37:00Z\"),\n        cancelAtPeriodEnd: false,\n        canceledAt: null,\n        startedAt: new Date(\"2025-01-03T13:37:00Z\"),\n        endsAt: null,\n        productId: \"d8dd2de1-21b7-4a41-8bc3-ce909c0cfe23\",\n        discountId: null,\n        meters: [\n          {\n            createdAt: new Date(\"2023-03-22T19:19:39.234Z\"),\n            modifiedAt: new Date(\"2025-04-22T10:13:21.181Z\"),\n            id: \"<value>\",\n            consumedUnits: 25,\n            creditedUnits: 100,\n            amount: 0,\n            meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n          },\n        ],\n      },\n    ],\n    grantedBenefits: [\n      {\n        id: \"d322132c-a9d0-4e0d-b8d3-d81ad021a3a9\",\n        createdAt: new Date(\"2023-03-24T14:16:16.143Z\"),\n        modifiedAt: new Date(\"2024-12-10T01:12:28.755Z\"),\n        grantedAt: new Date(\"2025-01-03T13:37:00Z\"),\n        benefitId: \"397a17aa-15cf-4cb4-9333-18040203cf98\",\n        benefitType: \"discord\",\n        properties: {},\n      },\n    ],\n    activeMeters: [\n      {\n        createdAt: new Date(\"2024-12-08T11:33:48.224Z\"),\n        modifiedAt: new Date(\"2023-11-11T06:48:37.139Z\"),\n        meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n        consumedUnits: 25,\n        creditedUnits: 100,\n        balance: 75,\n      },\n    ],\n    avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining EventSource Array Type\nDESCRIPTION: This snippet shows how to define an array of event sources using the `components.EventSource[]` type. The array is initialized with the string \"system\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/sourcefilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.EventSource[] = [\n  \"system\",\n];\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth2ClientPublic Instance in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the OAuth2ClientPublic model in TypeScript. It imports the model definition and initializes an object with sample data for each required field, including Date objects and string values. This example shows how to populate the OAuth2ClientPublic object with the properties like clientId, clientName, URIs, and timestamps.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/oauth2clientpublic.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OAuth2ClientPublic } from \"@polar-sh/sdk/models/components/oauth2clientpublic.js\";\n\nlet value: OAuth2ClientPublic = {\n  createdAt: new Date(\"2024-07-21T06:12:06.220Z\"),\n  modifiedAt: new Date(\"2025-01-17T04:51:16.426Z\"),\n  clientId: \"<id>\",\n  clientName: \"<value>\",\n  clientUri: \"https://winding-information.net/\",\n  logoUri: \"https://flawed-partridge.org/\",\n  tosUri: \"https://magnificent-disconnection.info/\",\n  policyUri: \"https://colossal-pantyhose.com\",\n};\n```\n\n----------------------------------------\n\nTITLE: Importing RefundedAlready Error Model in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `RefundedAlready` error model from the `@polar-sh/sdk/models/errors/refundedalready.js` module. This import statement allows you to use the `RefundedAlready` class in your TypeScript code to handle specific error conditions related to refunds.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/errors/refundedalready.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RefundedAlready } from \"@polar-sh/sdk/models/errors/refundedalready.js\";\n\n// No examples available for this model\n```\n\n----------------------------------------\n\nTITLE: Creating a CheckoutsUpdateRequest Instance in TypeScript\nDESCRIPTION: This code snippet shows how to create an instance of the `CheckoutsUpdateRequest` object in TypeScript. It imports the class from `@polar-sh/sdk/models/operations/checkoutsupdate.js` and initializes it with an ID and a `checkoutUpdate` object containing customer billing address information. The `id` field is required and represents the checkout session ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutsupdaterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutsUpdateRequest } from \"@polar-sh/sdk/models/operations/checkoutsupdate.js\";\n\nlet value: CheckoutsUpdateRequest = {\n  id: \"<value>\",\n  checkoutUpdate: {\n    customerBillingAddress: {\n      country: \"SE\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating EventCreateCustomer Object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an `EventCreateCustomer` object in TypeScript using the `@polar-sh/sdk`. It imports the `EventCreateCustomer` class and initializes it with example values for `name`, `organizationId`, and `customerId`. This object is likely used to represent a customer creation event within the Polar system.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventcreatecustomer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventCreateCustomer } from \"@polar-sh/sdk/models/components/eventcreatecustomer.js\";\n\nlet value: EventCreateCustomer = {\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  customerId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a CheckoutsClientConfirmRequest Instance in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the CheckoutsClientConfirmRequest object in TypeScript. It imports the necessary class from the `@polar-sh/sdk/models/operations/checkoutsclientconfirm.js` module and initializes an object with sample values for the `clientSecret` and `checkoutConfirmStripe` properties. The `checkoutConfirmStripe` property includes a `customerBillingAddress` with the `country` set to \"FR\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutsclientconfirmrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutsClientConfirmRequest } from \"@polar-sh/sdk/models/operations/checkoutsclientconfirm.js\";\n\nlet value: CheckoutsClientConfirmRequest = {\n  clientSecret: \"<value>\",\n  checkoutConfirmStripe: {\n    customerBillingAddress: {\n      country: \"FR\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitGrantDownloadablesProperties TypeScript\nDESCRIPTION: Defines an empty object of type `components.BenefitGrantDownloadablesProperties` using TypeScript. This is intended to represent properties linked to benefit grants involving downloadable resources. It initializes a constant `value` with an empty object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgrantwebhookproperties.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGrantDownloadablesProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalSubscriptionsCancelSecurity in Typescript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the `CustomerPortalSubscriptionsCancelSecurity` object from the `@polar-sh/sdk/models/operations/customerportalsubscriptionscancel.js` module. It shows how to create an instance of the object and assign a value to the required `customerSession` field. This object is used for authentication purposes when cancelling customer subscriptions.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalsubscriptionscancelsecurity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalSubscriptionsCancelSecurity } from \"@polar-sh/sdk/models/operations/customerportalsubscriptionscancel.js\";\n\nlet value: CustomerPortalSubscriptionsCancelSecurity = {\n  customerSession: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining LegacyRecurringProductPrice type in TypeScript\nDESCRIPTION: This snippet defines an example of the `LegacyRecurringProductPrice` type, showcasing its properties such as `createdAt`, `modifiedAt`, `id`, `isArchived`, `productId`, `recurringInterval`, `priceCurrency`, `minimumAmount`, `maximumAmount`, and `presetAmount`. This provides a concrete example for understanding the structure of a legacy recurring product price object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptionprices.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.LegacyRecurringProductPrice = {\n  createdAt: new Date(\"2025-03-28T17:53:12.899Z\"),\n  modifiedAt: new Date(\"2024-08-10T00:40:01.700Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  recurringInterval: \"year\",\n  priceCurrency: \"<value>\",\n  minimumAmount: 981878,\n  maximumAmount: 962753,\n  presetAmount: 690635,\n};\n```\n\n----------------------------------------\n\nTITLE: LicenseKeyValidate Usage Example in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `LicenseKeyValidate` model from the `@polar-sh/sdk` library. It creates an instance of the `LicenseKeyValidate` object with sample values for the required `key` and `organizationId` fields.  Other fields like `activationId`, `benefitId`, `customerId`, `incrementUsage` and `conditions` are optional.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/licensekeyvalidate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LicenseKeyValidate } from \"@polar-sh/sdk/models/components/licensekeyvalidate.js\";\n\nlet value: LicenseKeyValidate = {\n  key: \"<key>\",\n  organizationId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: MeterSortProperty Values in TypeScript\nDESCRIPTION: This code snippet shows the possible values for the `MeterSortProperty` type. It can be either `\"created_at\"`, `\"-created_at\"`, `\"name\"`, or `\"-name\"`. The negative sign likely indicates descending order sorting.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metersortproperty.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"created_at\" | \"-created_at\" | \"name\" | \"-name\"\n```\n\n----------------------------------------\n\nTITLE: String Array SubscriptionIDFilter in TypeScript\nDESCRIPTION: This code snippet demonstrates how to filter by multiple subscription IDs using a string array in TypeScript. The `value` constant is assigned an array of strings, where each string represents a subscription ID to filter.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/subscriptionidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: CustomerOrderProduct Model Usage in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an instance of the CustomerOrderProduct model in TypeScript. It imports the necessary module and then initializes an object with example values for all the required properties, including nested objects like organization and arrays like prices, benefits and medias. Dates are initialized using the Date constructor.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerorderproduct.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerOrderProduct } from \"@polar-sh/sdk/models/components/customerorderproduct.js\";\n\nlet value: CustomerOrderProduct = {\n  createdAt: new Date(\"2024-01-01T00:23:40.160Z\"),\n  modifiedAt: new Date(\"2025-10-22T15:33:21.925Z\"),\n  id: \"<value>\",\n  name: \"<value>\",\n  description: \"unless outrageous surprise tomography different ha furthermore\",\n  recurringInterval: \"year\",\n  isRecurring: false,\n  isArchived: false,\n  organizationId: \"<value>\",\n  prices: [\n    {\n      createdAt: new Date(\"2023-11-22T10:10:48.873Z\"),\n      modifiedAt: new Date(\"2024-09-24T06:29:45.141Z\"),\n      id: \"<value>\",\n      isArchived: false,\n      productId: \"<value>\",\n      recurringInterval: \"month\",\n      priceCurrency: \"<value>\",\n      priceAmount: 316747,\n    },\n  ],\n  benefits: [\n    {\n      id: \"<value>\",\n      createdAt: new Date(\"2023-08-11T14:38:39.231Z\"),\n      modifiedAt: new Date(\"2024-10-25T13:48:48.198Z\"),\n      type: \"license_keys\",\n      description:\n        \"gadzooks whoa an reluctantly wherever hence phooey factorize courteous\",\n      selectable: false,\n      deletable: false,\n      organizationId: \"<value>\",\n    },\n  ],\n  medias: [\n    {\n      id: \"<value>\",\n      organizationId: \"<value>\",\n      name: \"<value>\",\n      path: \"/opt/sbin\",\n      mimeType: \"<value>\",\n      size: 66023,\n      storageVersion: \"<value>\",\n      checksumEtag: \"<value>\",\n      checksumSha256Base64: \"<value>\",\n      checksumSha256Hex: \"<value>\",\n      lastModifiedAt: new Date(\"2023-09-28T22:40:10.265Z\"),\n      version: \"<value>\",\n      isUploaded: false,\n      createdAt: new Date(\"2025-07-14T02:16:38.326Z\"),\n      sizeReadable: \"<value>\",\n      publicUrl: \"https://vain-publicity.org/\",\n    },\n  ],\n  organization: {\n    createdAt: new Date(\"2025-12-28T19:59:01.239Z\"),\n    modifiedAt: new Date(\"2025-09-14T01:48:46.016Z\"),\n    id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    name: \"<value>\",\n    slug: \"<value>\",\n    avatarUrl: \"https://monumental-address.name/\",\n    email: \"Enoch73@hotmail.com\",\n    website: \"<value>\",\n    socials: [\n      {\n        platform: \"youtube\",\n        url: \"https://triangular-tomography.name/\",\n      },\n    ],\n    detailsSubmittedAt: new Date(\"2025-09-14T22:12:04.712Z\"),\n    featureSettings: {},\n    subscriptionSettings: {\n      allowMultipleSubscriptions: false,\n      allowCustomerUpdates: false,\n      prorationBehavior: \"prorate\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing MetersQuantitiesRequest in TypeScript\nDESCRIPTION: This snippet shows how to import and initialize a MetersQuantitiesRequest object in TypeScript.  It sets the `id`, `startTimestamp`, `endTimestamp`, and `interval` properties. It requires the `@polar-sh/sdk` package to be installed as a dependency.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/metersquantitiesrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MetersQuantitiesRequest } from \"@polar-sh/sdk/models/operations/metersquantities.js\";\n\nlet value: MetersQuantitiesRequest = {\n  id: \"<value>\",\n  startTimestamp: new Date(\"2024-03-29T12:29:41.786Z\"),\n  endTimestamp: new Date(\"2023-07-21T00:46:29.841Z\"),\n  interval: \"year\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating OrdersListRequest Instance Typescript\nDESCRIPTION: This snippet demonstrates how to create an instance of the `OrdersListRequest` object in TypeScript. It imports the `OrdersListRequest` class and assigns an object with a sample `organizationId` to a variable of that type. This shows how to instantiate the request object with specific filter parameters.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/orderslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrdersListRequest } from \"@polar-sh/sdk/models/operations/orderslist.js\";\n\nlet value: OrdersListRequest = {\n  organizationId: [\n    \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: WebhookCustomerDeletedPayload Usage Example (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create and populate a `WebhookCustomerDeletedPayload` object with sample data.  It imports the necessary type definition and assigns example values to the data field, illustrating the structure of a deleted customer payload. The example includes various fields such as id, createdAt, modifiedAt, metadata, externalId, email, billingAddress, taxId, organizationId, deletedAt, and avatarUrl.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookcustomerdeletedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookCustomerDeletedPayload } from \"@polar-sh/sdk/models/components/webhookcustomerdeletedpayload.js\";\n\nlet value: WebhookCustomerDeletedPayload = {\n  data: {\n    id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n    createdAt: new Date(\"2024-11-08T15:29:39.211Z\"),\n    modifiedAt: new Date(\"2025-06-08T12:18:34.908Z\"),\n    metadata: {\n      \"key\": 874263,\n    },\n    externalId: \"usr_1337\",\n    email: \"customer@example.com\",\n    emailVerified: true,\n    name: \"John Doe\",\n    billingAddress: {\n      country: \"SE\",\n    },\n    taxId: [\n      \"911144442\",\n      \"us_ein\",\n    ],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    deletedAt: new Date(\"2024-04-24T17:40:23.949Z\"),\n    avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating IntrospectTokenRequest Object in TypeScript\nDESCRIPTION: This code snippet shows how to import the IntrospectTokenRequest object from the @polar-sh/sdk and create an instance of it.  The `token`, `clientId`, and `clientSecret` properties are set with example values.  The `IntrospectTokenRequest` object requires a `token`, `clientId`, and `clientSecret`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/introspecttokenrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IntrospectTokenRequest } from \"@polar-sh/sdk/models/components/introspecttokenrequest.js\";\n\nlet value: IntrospectTokenRequest = {\n  token: \"<value>\",\n  clientId: \"<id>\",\n  clientSecret: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalBenefitGrantsListRequest TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the `CustomerPortalBenefitGrantsListRequest` in TypeScript. It sets the `organizationId` property.  The `CustomerPortalBenefitGrantsListRequest` type and related types must be available from the `@polar-sh/sdk` package.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalbenefitgrantslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalBenefitGrantsListRequest } from \"@polar-sh/sdk/models/operations/customerportalbenefitgrantslist.js\";\n\nlet value: CustomerPortalBenefitGrantsListRequest = {\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Define DiscountPercentageOnceForeverDurationBase Type - TypeScript\nDESCRIPTION: Defines a TypeScript type `DiscountPercentageOnceForeverDurationBase` representing a percentage-based discount applicable once, forever or repeatedly. It specifies properties like basis points for the percentage, duration type, start/end dates, redemption counts/limits, associated metadata, and organization ID. The snippet demonstrates sample data assignment to the defined type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptiondiscount.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DiscountPercentageOnceForeverDurationBase = {\n  duration: \"once\",\n  type: \"fixed\",\n  basisPoints: 599069,\n  createdAt: new Date(\"2024-01-10T18:51:26.386Z\"),\n  modifiedAt: new Date(\"2024-04-08T21:26:27.882Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": false,\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2025-04-12T16:04:59.265Z\"),\n  endsAt: new Date(\"2024-11-17T00:52:34.763Z\"),\n  maxRedemptions: 992406,\n  redemptionsCount: 293950,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Discount ID Filter with string array in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a discount ID filter using an array of strings in TypeScript. The `value` variable is assigned an array of strings, each representing a discount ID. This allows filtering results based on multiple discount IDs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/discountidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: CustomerID Filter with String Array - TypeScript\nDESCRIPTION: Demonstrates filtering by customer ID using an array of string values. The `value` constant represents an array of customer IDs to filter by. This allows for filtering based on multiple customer IDs simultaneously.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/eventslistnamesqueryparamcustomeridfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitGrantLicenseKeysProperties TypeScript\nDESCRIPTION: This snippet demonstrates how to import and initialize the `BenefitGrantLicenseKeysProperties` type from the `@polar-sh/sdk` package. It shows a basic example of creating an empty object of this type in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgrantlicensekeysproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitGrantLicenseKeysProperties } from \"@polar-sh/sdk/models/components/benefitgrantlicensekeysproperties.js\";\n\nlet value: BenefitGrantLicenseKeysProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Define BenefitGrantGitHubRepositoryProperties Type (TypeScript)\nDESCRIPTION: Defines a TypeScript type alias for `BenefitGrantGitHubRepositoryProperties`. This type represents properties associated with benefit grants related to GitHub repositories. The empty object `{}` is used as an initial value or example for the type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/properties.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGrantGitHubRepositoryProperties = {};\n```\n\n----------------------------------------\n\nTITLE: String Organization ID Filter TypeScript\nDESCRIPTION: This code snippet shows how to define the `ProductsListQueryParamOrganizationIDFilter` value as a single string. It represents a single organization ID used for filtering.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/productslistqueryparamorganizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: Get Discount by ID using Standalone Function\nDESCRIPTION: This snippet shows how to retrieve a discount by ID using the standalone function `discountsGet` from the Polar SDK. It initializes `PolarCore`, calls `discountsGet` with the client and discount ID, and handles the result, including error checking. This approach is optimized for tree-shaking.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/discounts/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { discountsGet } from \"@polar-sh/sdk/funcs/discountsGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await discountsGet(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Creating LicenseKeysListRequest Object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the LicenseKeysListRequest object in TypeScript, setting the organizationId property. It imports the necessary class from the Polar SDK and initializes the object with a specific organization ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/licensekeyslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LicenseKeysListRequest } from \"@polar-sh/sdk/models/operations/licensekeyslist.js\";\n\nlet value: LicenseKeysListRequest = {\n  organizationId: [\n    \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: String Filter for External Customer ID - TypeScript\nDESCRIPTION: Illustrates how to filter by a single external customer ID using a string value. The value should be a string representing the external customer ID to match.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customermeterslistqueryparamexternalcustomeridfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: OrderIDFilter with String Array Type in TypeScript\nDESCRIPTION: This snippet shows how to define the 'value' constant as an array of strings, to be used with the OrderIDFilter. Each string in the array represents an order ID, and the filter will match any order with one of these IDs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/orderidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerCustomerMeterMeter Model in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the CustomerCustomerMeterMeter model from the @polar-sh/sdk. It creates an instance of the model, setting the createdAt and modifiedAt fields to specific Date objects, and the id and name fields to string values. This example illustrates the structure of the CustomerCustomerMeterMeter object and how to populate it with data.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customercustomermetermeter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerCustomerMeterMeter } from \"@polar-sh/sdk/models/components/customercustomermetermeter.js\";\n\nlet value: CustomerCustomerMeterMeter = {\n  createdAt: new Date(\"2025-02-28T01:11:23.278Z\"),\n  modifiedAt: new Date(\"2024-01-09T01:22:53.996Z\"),\n  id: \"<value>\",\n  name: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerStateSubscriptionMeter with TypeScript\nDESCRIPTION: This snippet demonstrates how to import and initialize a `CustomerStateSubscriptionMeter` object in TypeScript. It sets the `createdAt`, `modifiedAt`, `id`, `consumedUnits`, `creditedUnits`, `amount`, and `meterId` properties. Requires the `@polar-sh/sdk` package as a dependency.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatesubscriptionmeter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerStateSubscriptionMeter } from \"@polar-sh/sdk/models/components/customerstatesubscriptionmeter.js\";\n\nlet value: CustomerStateSubscriptionMeter = {\n  createdAt: new Date(\"2024-11-14T21:59:47.289Z\"),\n  modifiedAt: new Date(\"2023-06-15T17:31:59.615Z\"),\n  id: \"<value>\",\n  consumedUnits: 25,\n  creditedUnits: 100,\n  amount: 0,\n  meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n};\n```\n\n----------------------------------------\n\nTITLE: WebhookBenefitGrantCreatedPayload Usage Example - TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the WebhookBenefitGrantCreatedPayload type from the @polar-sh/sdk/models/components/webhookbenefitgrantcreatedpayload.js module. It creates an example payload object with various fields populated, including nested objects like customer and benefit, showcasing the data structure of the webhook event. The example uses hardcoded values and dates for demonstration purposes.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookbenefitgrantcreatedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookBenefitGrantCreatedPayload } from \"@polar-sh/sdk/models/components/webhookbenefitgrantcreatedpayload.js\";\n\nlet value: WebhookBenefitGrantCreatedPayload = {\n  data: {\n    createdAt: new Date(\"2025-10-02T04:38:09.243Z\"),\n    modifiedAt: new Date(\"2025-01-26T22:42:29.259Z\"),\n    id: \"<value>\",\n    isGranted: false,\n    isRevoked: false,\n    subscriptionId: \"<value>\",\n    orderId: \"<value>\",\n    customerId: \"<value>\",\n    benefitId: \"<value>\",\n    customer: {\n      id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n      createdAt: new Date(\"2023-10-21T01:27:19.889Z\"),\n      modifiedAt: new Date(\"2023-07-02T18:46:10.563Z\"),\n      metadata: {\n        \"key\": 9516.3,\n      },\n      externalId: \"usr_1337\",\n      email: \"customer@example.com\",\n      emailVerified: true,\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"US\",\n      },\n      taxId: [\n        \"911144442\",\n        \"us_ein\",\n      ],\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      deletedAt: new Date(\"2024-02-18T11:58:26.695Z\"),\n      avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n    },\n    properties: {},\n    benefit: {\n      id: \"<value>\",\n      createdAt: new Date(\"2025-02-01T06:50:40.155Z\"),\n      modifiedAt: new Date(\"2024-10-14T07:36:23.610Z\"),\n      description: \"artistic monasticism when that\",\n      selectable: false,\n      deletable: false,\n      organizationId: \"<value>\",\n      metadata: {\n        \"key\": \"<value>\",\n      },\n      properties: {\n        archived: {\n          \"key\": false,\n        },\n        files: [\n          \"<value>\",\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: FileUpload Model Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create and populate a FileUpload object using the @polar-sh/sdk library. It imports the FileUpload type and then initializes an instance of it with various properties, including strings, numbers, dates, and nested objects. This provides a concrete example of how to use the FileUpload model in a TypeScript application.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/fileupload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FileUpload } from \"@polar-sh/sdk/models/components/fileupload.js\";\n\nlet value: FileUpload = {\n  id: \"<value>\",\n  organizationId: \"<value>\",\n  name: \"<value>\",\n  path: \"/usr/ports\",\n  mimeType: \"<value>\",\n  size: 270255,\n  storageVersion: \"<value>\",\n  checksumEtag: \"<value>\",\n  checksumSha256Base64: \"<value>\",\n  checksumSha256Hex: \"<value>\",\n  lastModifiedAt: new Date(\"2025-02-26T02:55:31.254Z\"),\n  upload: {\n    id: \"<id>\",\n    path: \"/usr/local/src\",\n    parts: [\n      {\n        number: 945174,\n        chunkStart: 21083,\n        chunkEnd: 602576,\n        url: \"https://dark-tusk.info/\",\n        expiresAt: new Date(\"2024-10-10T12:43:57.564Z\"),\n      },\n    ],\n  },\n  version: \"<value>\",\n  service: \"organization_avatar\",\n  sizeReadable: \"<value>\",\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing CheckoutProduct in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a CheckoutProduct object in TypeScript, showcasing the structure and data types of its properties. It includes examples of setting values for various fields like createdAt, modifiedAt, id, name, description, recurringInterval, isRecurring, isArchived, organizationId, prices, benefits, and medias. The example uses placeholder values for string fields and Date objects for timestamp fields.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutproduct.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutProduct } from \"@polar-sh/sdk/models/components/checkoutproduct.js\";\n\nlet value: CheckoutProduct = {\n  createdAt: new Date(\"2023-07-11T03:33:42.639Z\"),\n  modifiedAt: new Date(\"2023-06-27T21:42:50.186Z\"),\n  id: \"<value>\",\n  name: \"<value>\",\n  description:\n    \"yippee afore as jacket woefully stupendous or embody pish furthermore\",\n  recurringInterval: \"month\",\n  isRecurring: false,\n  isArchived: false,\n  organizationId: \"<value>\",\n  prices: [\n    {\n      createdAt: new Date(\"2023-02-17T11:51:37.189Z\"),\n      modifiedAt: new Date(\"2024-02-02T06:39:25.110Z\"),\n      id: \"<value>\",\n      isArchived: false,\n      productId: \"<value>\",\n      type: \"one_time\",\n      recurringInterval: \"year\",\n      priceCurrency: \"<value>\",\n      minimumAmount: 767501,\n      maximumAmount: 55836,\n      presetAmount: 99942,\n    },\n  ],\n  benefits: [\n    {\n      id: \"<value>\",\n      createdAt: new Date(\"2025-05-05T03:36:07.701Z\"),\n      modifiedAt: new Date(\"2023-04-03T08:59:52.381Z\"),\n      type: \"downloadables\",\n      description:\n        \"suburban indeed mealy vainly since split drat restfully char\",\n      selectable: false,\n      deletable: false,\n      organizationId: \"<value>\",\n    },\n  ],\n  medias: [\n    {\n      id: \"<value>\",\n      organizationId: \"<value>\",\n      name: \"<value>\",\n      path: \"/Users\",\n      mimeType: \"<value>\",\n      size: 456422,\n      storageVersion: \"<value>\",\n      checksumEtag: \"<value>\",\n      checksumSha256Base64: \"<value>\",\n      checksumSha256Hex: \"<value>\",\n      lastModifiedAt: new Date(\"2025-12-06T08:10:56.135Z\"),\n      version: \"<value>\",\n      isUploaded: false,\n      createdAt: new Date(\"2023-01-19T13:19:06.839Z\"),\n      sizeReadable: \"<value>\",\n      publicUrl: \"https://soulful-jury.org/\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitGrantLicenseKeysProperties TypeScript\nDESCRIPTION: This snippet initializes an empty object of type `components.BenefitGrantLicenseKeysProperties`. It demonstrates the creation of an empty object that adheres to the interface for license key-related properties in a BenefitGrant. This relies on the `components` module for type definition.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/previousproperties.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGrantLicenseKeysProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Session with External ID in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a `CustomerSessionCustomerExternalIDCreate` object in TypeScript. It imports the necessary class from the `@polar-sh/sdk` library and initializes an object with the `customerExternalId` field. The `customerExternalId` is a required string representing the external ID of the customer for whom the session is being created.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customersessioncustomerexternalidcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerSessionCustomerExternalIDCreate } from \"@polar-sh/sdk/models/components/customersessioncustomerexternalidcreate.js\";\n\nlet value: CustomerSessionCustomerExternalIDCreate = {\n  customerExternalId: \"<id>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating DiscountsGetRequest Object in Typescript\nDESCRIPTION: This code snippet shows how to create an instance of the DiscountsGetRequest object in Typescript.  It imports the DiscountsGetRequest class from the '@polar-sh/sdk/models/operations/discountsget.js' module and then initializes an object with the required 'id' property.  The 'id' property represents the unique identifier of the requested discount.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/discountsgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountsGetRequest } from \"@polar-sh/sdk/models/operations/discountsget.js\";\n\nlet value: DiscountsGetRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ListResourceCustomerMeter in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the ListResourceCustomerMeter component in TypeScript. It includes setting properties such as items (an array of CustomerMeter objects) and pagination data. The CustomerMeter items contain nested Customer and Meter objects with sample data for various fields.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourcecustomermeter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceCustomerMeter } from \"@polar-sh/sdk/models/components/listresourcecustomermeter.js\";\n\nlet value: ListResourceCustomerMeter = {\n  items: [\n    {\n      id: \"<value>\",\n      createdAt: new Date(\"2023-05-05T19:48:48.802Z\"),\n      modifiedAt: new Date(\"2023-01-08T03:03:24.785Z\"),\n      customerId: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n      meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n      consumedUnits: 25,\n      creditedUnits: 100,\n      balance: 75,\n      customer: {\n        id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n        createdAt: new Date(\"2024-02-18T23:48:33.732Z\"),\n        modifiedAt: new Date(\"2025-02-20T23:29:16.896Z\"),\n        metadata: {\n          \"key\": 4919.14,\n        },\n        externalId: \"usr_1337\",\n        email: \"customer@example.com\",\n        emailVerified: true,\n        name: \"John Doe\",\n        billingAddress: {\n          country: \"FR\",\n        },\n        taxId: [\n          \"911144442\",\n          \"us_ein\",\n        ],\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        deletedAt: new Date(\"2023-09-24T15:24:00.779Z\"),\n        avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n      },\n      meter: {\n        metadata: {\n          \"key\": 75584,\n        },\n        createdAt: new Date(\"2023-01-03T12:42:19.655Z\"),\n        modifiedAt: new Date(\"2023-01-19T23:37:20.832Z\"),\n        id: \"<value>\",\n        name: \"<value>\",\n        filter: {\n          conjunction: \"or\",\n          clauses: [],\n        },\n        aggregation: {\n          func: \"max\",\n          property: \"<value>\",\n        },\n        organizationId: \"<value>\",\n      },\n    },\n  ],\n  pagination: {\n    totalCount: 74516,\n    maxPage: 498144,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: CustomerPortalLicenseKeysListSecurity instantiation in TypeScript\nDESCRIPTION: This snippet shows how to import and instantiate the `CustomerPortalLicenseKeysListSecurity` type from the `@polar-sh/sdk/models/operations/customerportallicensekeyslist.js` module. The `customerSession` field, which is a string, is required for instantiation. It is used to define the security requirements for listing customer portal license keys.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportallicensekeyslistsecurity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalLicenseKeysListSecurity } from \"@polar-sh/sdk/models/operations/customerportallicensekeyslist.js\";\n\nlet value: CustomerPortalLicenseKeysListSecurity = {\n  customerSession: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: ListResourceDiscount Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create and populate a `ListResourceDiscount` object in TypeScript. It imports the `ListResourceDiscount` type from the `@polar-sh/sdk/models/components/listresourcediscount.js` module. The example populates fields like `items` (an array of discount objects with properties like `duration`, `amount`, `currency`, `createdAt`, `modifiedAt`, `id`, `metadata`, `name`, `code`, `startsAt`, `endsAt`, `maxRedemptions`, `redemptionsCount`, `organizationId`, and `products`), and `pagination` (with `totalCount` and `maxPage`).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourcediscount.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceDiscount } from \"@polar-sh/sdk/models/components/listresourcediscount.js\";\n\nlet value: ListResourceDiscount = {\n  items: [\n    {\n      duration: \"repeating\",\n      durationInMonths: 35453,\n      type: \"percentage\",\n      amount: 718704,\n      currency: \"Iraqi Dinar\",\n      createdAt: new Date(\"2024-02-16T02:45:40.769Z\"),\n      modifiedAt: new Date(\"2024-10-28T04:42:36.139Z\"),\n      id: \"<value>\",\n      metadata: {\n        \"key\": 587397,\n      },\n      name: \"<value>\",\n      code: \"<value>\",\n      startsAt: new Date(\"2025-09-04T21:50:43.396Z\"),\n      endsAt: new Date(\"2024-09-30T00:34:11.283Z\"),\n      maxRedemptions: 189863,\n      redemptionsCount: 1712,\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      products: [\n        {\n          metadata: {\n            \"key\": false,\n          },\n          createdAt: new Date(\"2024-08-19T06:24:57.447Z\"),\n          modifiedAt: new Date(\"2024-06-24T18:51:27.061Z\"),\n          id: \"<value>\",\n          name: \"<value>\",\n          description:\n            \"grouchy ah weekly scarification never however rightfully er\",\n          recurringInterval: \"year\",\n          isRecurring: false,\n          isArchived: false,\n          organizationId: \"<value>\",\n        },\n      ],\n    },\n  ],\n  pagination: {\n    totalCount: 317739,\n    maxPage: 225659,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SubscriptionCancel Type in TypeScript\nDESCRIPTION: This code snippet defines the structure for a `SubscriptionCancel` object.  It includes a boolean property `cancelAtPeriodEnd` indicating whether the subscription should be cancelled at the end of the current billing period. The example shows the property set to `false`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptionupdate.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.SubscriptionCancel = {\n  cancelAtPeriodEnd: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Organization ID as String in Typescript\nDESCRIPTION: This snippet demonstrates how to define a single organization ID as a string for filtering purposes. It assigns a string value representing the organization ID to the `value` constant. This is a direct assignment, assuming the filter accepts a single string value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparamorganizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: FileUploadCompleted Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the FileUploadCompleted object using TypeScript. It imports the FileUploadCompleted class from the '@polar-sh/sdk/models/components/fileuploadcompleted.js' module and initializes its properties (id, path, parts) with sample values. The 'parts' array contains objects with number, checksumEtag and checksumSha256Base64 fields.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/fileuploadcompleted.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FileUploadCompleted } from \"@polar-sh/sdk/models/components/fileuploadcompleted.js\";\n\nlet value: FileUploadCompleted = {\n  id: \"<id>\",\n  path: \"/Network\",\n  parts: [\n    {\n      number: 483410,\n      checksumEtag: \"<value>\",\n      checksumSha256Base64: \"<value>\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: AuthorizeOrganization Model Usage in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the AuthorizeOrganization model from the `@polar-sh/sdk` library. It shows the creation of an instance of the `AuthorizeOrganization` type and assignment of sample values to its `id`, `slug`, and `avatarUrl` properties. This model is likely used for representing organization authorization data within the Polar application.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/authorizeorganization.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthorizeOrganization } from \"@polar-sh/sdk/models/components/authorizeorganization.js\";\n\nlet value: AuthorizeOrganization = {\n  id: \"<value>\",\n  slug: \"<value>\",\n  avatarUrl: \"https://leading-flint.name\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalOrdersGetSecurity Model in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the CustomerPortalOrdersGetSecurity model from the @polar-sh/sdk and initialize it with a customerSession string. The customerSession field is required and represents the customer's session identifier.  The imported model is defined in customerportalordersget.js.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalordersgetsecurity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalOrdersGetSecurity } from \"@polar-sh/sdk/models/operations/customerportalordersget.js\";\n\nlet value: CustomerPortalOrdersGetSecurity = {\n  customerSession: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: String External Customer ID Filter (TypeScript)\nDESCRIPTION: Demonstrates how to filter by a single external customer ID using a string value.  The `value` variable represents the external customer ID to filter for.  This assumes usage within the `polar-js` project's meters/quantities querying functionality.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/metersquantitiesqueryparamexternalcustomeridfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: AttachedCustomField Example Usage TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and instantiate an `AttachedCustomField` object from the `@polar-sh/sdk/models/components/attachedcustomfield.js` module. It sets properties such as `customFieldId`, `customField` (with nested properties), `order`, and `required`. The `customField` object includes properties like `createdAt`, `modifiedAt`, `id`, `metadata`, `slug`, `name`, `organizationId`, and `properties`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/attachedcustomfield.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AttachedCustomField } from \"@polar-sh/sdk/models/components/attachedcustomfield.js\";\n\nlet value: AttachedCustomField = {\n  customFieldId: \"<value>\",\n  customField: {\n    createdAt: new Date(\"2024-10-12T09:35:12.807Z\"),\n    modifiedAt: new Date(\"2025-01-25T21:47:47.062Z\"),\n    id: \"<value>\",\n    metadata: {\n      \"key\": 5948.26,\n    },\n    slug: \"<value>\",\n    name: \"<value>\",\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    properties: {},\n  },\n  order: 819777,\n  required: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Oauth2ClientsOauth2UpdateClientRequest Example (TypeScript)\nDESCRIPTION: This example demonstrates how to create and initialize an instance of the Oauth2ClientsOauth2UpdateClientRequest type in TypeScript. It requires importing the type from the '@polar-sh/sdk/models/operations/oauth2clientsoauth2updateclient.js' module. The example shows how to set the clientId and oAuth2ClientConfigurationUpdate properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/oauth2clientsoauth2updateclientrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Oauth2ClientsOauth2UpdateClientRequest } from \"@polar-sh/sdk/models/operations/oauth2clientsoauth2updateclient.js\";\n\nlet value: Oauth2ClientsOauth2UpdateClientRequest = {\n  clientId: \"<id>\",\n  oAuth2ClientConfigurationUpdate: {\n    redirectUris: [\n      \"https://abandoned-mobility.info\",\n    ],\n    clientName: \"<value>\",\n    clientId: \"<id>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: CustomerSubscription Example\nDESCRIPTION: This code snippet demonstrates how to create and populate a `CustomerSubscription` object with sample data. It imports the `CustomerSubscription` model from the `@polar-sh/sdk/models/components/customersubscription.js` module and initializes an object with various properties, including nested objects and arrays.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customersubscription.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerSubscription } from \"@polar-sh/sdk/models/components/customersubscription.js\";\n\nlet value: CustomerSubscription = {\n  createdAt: new Date(\"2024-12-27T19:31:25.752Z\"),\n  modifiedAt: new Date(\"2025-06-24T21:11:51.746Z\"),\n  id: \"<value>\",\n  amount: 505501,\n  currency: \"Uganda Shilling\",\n  recurringInterval: \"month\",\n  status: \"active\",\n  currentPeriodStart: new Date(\"2024-09-05T20:42:48.893Z\"),\n  currentPeriodEnd: new Date(\"2023-03-10T15:25:48.651Z\"),\n  cancelAtPeriodEnd: false,\n  canceledAt: new Date(\"2025-06-15T16:33:22.796Z\"),\n  startedAt: new Date(\"2025-09-11T13:49:33.195Z\"),\n  endsAt: new Date(\"2023-01-23T06:52:39.776Z\"),\n  endedAt: new Date(\"2025-02-15T18:01:25.134Z\"),\n  customerId: \"<value>\",\n  productId: \"<value>\",\n  discountId: \"<value>\",\n  checkoutId: \"<value>\",\n  customerCancellationReason: \"too_expensive\",\n  customerCancellationComment: \"<value>\",\n  product: {\n    createdAt: new Date(\"2023-05-05T19:36:14.043Z\"),\n    modifiedAt: new Date(\"2023-09-02T14:51:23.839Z\"),\n    id: \"<value>\",\n    name: \"<value>\",\n    description: \"rebuff halt ick handful astride delightfully blah\",\n    recurringInterval: \"year\",\n    isRecurring: false,\n    isArchived: false,\n    organizationId: \"<value>\",\n    prices: [\n      {\n        createdAt: new Date(\"2024-03-08T13:08:56.742Z\"),\n        modifiedAt: new Date(\"2023-04-22T04:47:32.707Z\"),\n        id: \"<value>\",\n        isArchived: false,\n        productId: \"<value>\",\n        recurringInterval: \"month\",\n        priceCurrency: \"<value>\",\n        minimumAmount: 367154,\n        maximumAmount: 896239,\n        presetAmount: 834860,\n      },\n    ],\n    benefits: [\n      {\n        id: \"<value>\",\n        createdAt: new Date(\"2023-05-03T11:42:13.951Z\"),\n        modifiedAt: new Date(\"2023-06-28T04:37:45.918Z\"),\n        type: \"downloadables\",\n        description: \"distinct until yahoo meh alert unless swing\",\n        selectable: false,\n        deletable: false,\n        organizationId: \"<value>\",\n      },\n    ],\n    medias: [\n      {\n        id: \"<value>\",\n        organizationId: \"<value>\",\n        name: \"<value>\",\n        path: \"/home/user/dir\",\n        mimeType: \"<value>\",\n        size: 19904,\n        storageVersion: \"<value>\",\n        checksumEtag: \"<value>\",\n        checksumSha256Base64: \"<value>\",\n        checksumSha256Hex: \"<value>\",\n        lastModifiedAt: new Date(\"2023-02-20T17:16:24.937Z\"),\n        version: \"<value>\",\n        isUploaded: false,\n        createdAt: new Date(\"2023-01-23T08:06:58.238Z\"),\n        sizeReadable: \"<value>\",\n        publicUrl: \"https://physical-impostor.com\",\n      },\n    ],\n    organization: {\n      createdAt: new Date(\"2024-09-24T20:10:23.246Z\"),\n      modifiedAt: new Date(\"2024-03-18T21:42:16.614Z\"),\n      id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      name: \"<value>\",\n      slug: \"<value>\",\n      avatarUrl: \"https://made-up-fat.com/\",\n      email: \"Ozella33@gmail.com\",\n      website: \"<value>\",\n      socials: [\n        {\n          platform: \"instagram\",\n          url: \"https://ashamed-cleaner.org\",\n        },\n      ],\n      detailsSubmittedAt: new Date(\"2025-07-28T04:05:51.068Z\"),\n      featureSettings: {},\n      subscriptionSettings: {\n        allowMultipleSubscriptions: false,\n        allowCustomerUpdates: false,\n        prorationBehavior: \"invoice\",\n      },\n    },\n  },\n  prices: [\n    {\n      createdAt: new Date(\"2025-10-24T09:22:55.592Z\"),\n      modifiedAt: new Date(\"2025-01-19T06:52:40.723Z\"),\n      id: \"<value>\",\n      isArchived: false,\n      productId: \"<value>\",\n      type: \"one_time\",\n      recurringInterval: \"month\",\n      priceCurrency: \"<value>\",\n      minimumAmount: 333869,\n      maximumAmount: 573677,\n      presetAmount: 510127,\n    },\n  ],\n  meters: [\n    {\n      createdAt: new Date(\"2024-01-19T13:23:53.796Z\"),\n      modifiedAt: new Date(\"2025-01-11T03:27:53.050Z\"),\n      id: \"<value>\",\n      consumedUnits: 25,\n      creditedUnits: 100,\n      amount: 0,\n      meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n      meter: {\n        createdAt: new Date(\"2025-03-06T20:20:40.637Z\"),\n        modifiedAt: new Date(\"2023-06-06T08:03:21.211Z\"),\n        id: \"<value>\",\n        name: \"<value>\",\n      },\n    },\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: CustomerOrganization Example Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the CustomerOrganization type from the `@polar-sh/sdk/models/components/customerorganization.js` module. It shows the structure of the CustomerOrganization object, which includes organization details and a list of products. The example initializes a CustomerOrganization object with sample data.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerorganization.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerOrganization } from \"@polar-sh/sdk/models/components/customerorganization.js\";\n\nlet value: CustomerOrganization = {\n  organization: {\n    createdAt: new Date(\"2025-04-15T05:48:03.283Z\"),\n    modifiedAt: new Date(\"2023-01-12T08:10:46.211Z\"),\n    id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    name: \"<value>\",\n    slug: \"<value>\",\n    avatarUrl: \"https://bony-arcade.info/\",\n    email: \"Antoinette48@gmail.com\",\n    website: \"<value>\",\n    socials: [\n      {\n        platform: \"facebook\",\n        url: \"https://alert-version.org\",\n      },\n    ],\n    detailsSubmittedAt: new Date(\"2025-11-16T11:40:38.402Z\"),\n    featureSettings: {},\n    subscriptionSettings: {\n      allowMultipleSubscriptions: false,\n      allowCustomerUpdates: false,\n      prorationBehavior: \"prorate\",\n    },\n  },\n  products: [\n    {\n      createdAt: new Date(\"2023-06-30T22:41:56.321Z\"),\n      modifiedAt: new Date(\"2025-06-29T00:00:03.852Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description: \"total beneath fatally after couch brr\",\n      recurringInterval: \"month\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n      prices: [\n        {\n          createdAt: new Date(\"2024-10-01T07:47:51.681Z\"),\n          modifiedAt: new Date(\"2025-01-02T06:07:27.570Z\"),\n          id: \"<value>\",\n          isArchived: false,\n          productId: \"<value>\",\n          type: \"one_time\",\n          recurringInterval: \"year\",\n          priceCurrency: \"<value>\",\n          unitAmount: \"<value>\",\n          capAmount: 120123,\n          meterId: \"<value>\",\n          meter: {\n            id: \"<value>\",\n            name: \"<value>\",\n          },\n        },\n      ],\n      benefits: [\n        {\n          id: \"<value>\",\n          createdAt: new Date(\"2023-11-01T19:01:21.082Z\"),\n          modifiedAt: new Date(\"2023-09-12T10:07:57.606Z\"),\n          type: \"custom\",\n          description: \"gnaw upright overproduce oh uh-huh categorise shameful\",\n          selectable: false,\n          deletable: false,\n          organizationId: \"<value>\",\n        },\n      ],\n      medias: [\n        {\n          id: \"<value>\",\n          organizationId: \"<value>\",\n          name: \"<value>\",\n          path: \"/opt/include\",\n          mimeType: \"<value>\",\n          size: 888796,\n          storageVersion: \"<value>\",\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n          checksumSha256Hex: \"<value>\",\n          lastModifiedAt: new Date(\"2024-01-06T17:24:41.128Z\"),\n          version: \"<value>\",\n          isUploaded: false,\n          createdAt: new Date(\"2025-11-11T07:48:38.254Z\"),\n          sizeReadable: \"<value>\",\n          publicUrl: \"https://dependable-restaurant.com\",\n        },\n      ],\n    },\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating MetersGetRequest Instance TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `MetersGetRequest` object in TypeScript. It imports the `MetersGetRequest` class from the `@polar-sh/sdk/models/operations/metersget.js` module and initializes an object with the required `id` property.  The `id` is a string that specifies the meter's unique identifier.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/metersgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MetersGetRequest } from \"@polar-sh/sdk/models/operations/metersget.js\";\n\nlet value: MetersGetRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating WebhookOrganizationUpdatedPayload (TypeScript)\nDESCRIPTION: This code demonstrates how to create a `WebhookOrganizationUpdatedPayload` object in TypeScript. It imports the necessary type definition and initializes an object with sample data, including dates, strings, and nested objects. The `data` field includes various properties of the organization such as name, slug, avatar URL, email, website, socials and settings.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookorganizationupdatedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookOrganizationUpdatedPayload } from \"@polar-sh/sdk/models/components/webhookorganizationupdatedpayload.js\";\n\nlet value: WebhookOrganizationUpdatedPayload = {\n  data: {\n    createdAt: new Date(\"2023-07-16T02:28:27.582Z\"),\n    modifiedAt: new Date(\"2025-03-30T11:56:13.023Z\"),\n    id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    name: \"<value>\",\n    slug: \"<value>\",\n    avatarUrl: \"https://fake-eternity.org/\",\n    email: \"Murl_Jacobson@yahoo.com\",\n    website: \"<value>\",\n    socials: [\n      {\n        platform: \"instagram\",\n        url: \"https://which-freezing.com/\",\n      },\n    ],\n    detailsSubmittedAt: new Date(\"2025-06-03T13:51:02.753Z\"),\n    featureSettings: {},\n    subscriptionSettings: {\n      allowMultipleSubscriptions: false,\n      allowCustomerUpdates: false,\n      prorationBehavior: \"invoice\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using BenefitGitHubRepositorySubscriberProperties in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `BenefitGitHubRepositorySubscriberProperties` type from the `@polar-sh/sdk/models/components/benefitgithubrepositorysubscriberproperties.js` module. It shows how to create an instance of the object with sample values for `repositoryOwner` and `repositoryName`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositorysubscriberproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitGitHubRepositorySubscriberProperties } from \"@polar-sh/sdk/models/components/benefitgithubrepositorysubscriberproperties.js\";\n\nlet value: BenefitGitHubRepositorySubscriberProperties = {\n  repositoryOwner: \"polarsource\",\n  repositoryName: \"private_repo\",\n};\n```\n\n----------------------------------------\n\nTITLE: CustomerPortalCustomersDeletePaymentMethodSecurity Example\nDESCRIPTION: This code snippet demonstrates how to import and use the CustomerPortalCustomersDeletePaymentMethodSecurity type from the @polar-sh/sdk. It shows how to create an object of this type, initializing the required `customerSession` field with a string value.  This security configuration is needed to authorize the payment method deletion.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalcustomersdeletepaymentmethodsecurity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalCustomersDeletePaymentMethodSecurity } from \"@polar-sh/sdk/models/operations/customerportalcustomersdeletepaymentmethod.js\";\n\nlet value: CustomerPortalCustomersDeletePaymentMethodSecurity = {\n  customerSession: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Customer ID Filter (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define a customer ID filter using a string value in TypeScript. The value should be replaced with the actual customer ID string.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparamcustomeridfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration and Assignment in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a string variable and assign it a string value in TypeScript. The variable 'value' is explicitly typed as a string and assigned the string \"<value>\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentageonceforeverdurationmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration TypeScript\nDESCRIPTION: Demonstrates the declaration and assignment of a string value in TypeScript. The variable 'value' is explicitly typed as a string and assigned the string literal '<value>'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositorymetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: MetricType Enum Values in TypeScript\nDESCRIPTION: This snippet defines the possible values for the MetricType enum, which are \"scalar\" and \"currency\". It represents the possible types of metrics that can be used within the Polar SDK.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metrictype.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"scalar\" | \"currency\"\n```\n\n----------------------------------------\n\nTITLE: String Array Organization ID Filter - TypeScript\nDESCRIPTION: This code snippet shows how to filter by organization ID using an array of strings in TypeScript.  It assigns an array containing a single UUID string to the 'value' constant.  This permits filtering downloadables to multiple organizations based on their IDs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportaldownloadableslistqueryparamorganizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: Defining CheckoutLinkCreateProductPrice Type - TypeScript\nDESCRIPTION: This snippet demonstrates how to define an object of type `CheckoutLinkCreateProductPrice`. It shows the structure with a `productPriceId` property, which should be set to a specific product price ID. This type might be used when creating a checkout link for a specific price point of a product.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutlinkscreatecheckoutlinkcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CheckoutLinkCreateProductPrice = {\n  productPriceId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Import and Instantiate ProductPriceCustomCreate in TypeScript\nDESCRIPTION: This code snippet shows how to import the ProductPriceCustomCreate class from the @polar-sh/sdk/models/components/productpricecustomcreate.js module and create an empty object of that type. This demonstrates the basic usage of the model in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productpricecustomcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductPriceCustomCreate } from \"@polar-sh/sdk/models/components/productpricecustomcreate.js\";\n\nlet value: ProductPriceCustomCreate = {};\n```\n\n----------------------------------------\n\nTITLE: WebhookBenefitGrantRevokedPayload Example in Typescript\nDESCRIPTION: This code snippet demonstrates how to import and use the WebhookBenefitGrantRevokedPayload type from the @polar-sh/sdk. It shows how to create an object of this type with sample data including dates, ids and booleans. It is intended to be used for demonstration purposes.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookbenefitgrantrevokedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookBenefitGrantRevokedPayload } from \"@polar-sh/sdk/models/components/webhookbenefitgrantrevokedpayload.js\";\n\nlet value: WebhookBenefitGrantRevokedPayload = {\n  data: {\n    createdAt: new Date(\"2025-12-18T19:40:40.081Z\"),\n    modifiedAt: new Date(\"2025-04-15T04:11:09.163Z\"),\n    id: \"<value>\",\n    isGranted: false,\n    isRevoked: false,\n    subscriptionId: \"<value>\",\n    orderId: \"<value>\",\n    customerId: \"<value>\",\n    benefitId: \"<value>\",\n    customer: {\n      id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n      createdAt: new Date(\"2023-11-27T09:29:34.234Z\"),\n      modifiedAt: new Date(\"2025-06-17T23:02:39.442Z\"),\n      metadata: {\n        \"key\": 9447.18,\n      },\n      externalId: \"usr_1337\",\n      email: \"customer@example.com\",\n      emailVerified: true,\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"US\",\n      },\n      taxId: [\n        \"FR61954506077\",\n        \"eu_vat\",\n      ],\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      deletedAt: new Date(\"2023-10-19T01:21:41.378Z\"),\n      avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n    },\n    properties: {},\n    benefit: {\n      id: \"<value>\",\n      createdAt: new Date(\"2023-11-03T12:13:38.868Z\"),\n      modifiedAt: new Date(\"2023-06-20T18:06:09.405Z\"),\n      description: \"impressive and past reassemble behind\",\n      selectable: false,\n      deletable: false,\n      organizationId: \"<value>\",\n      metadata: {\n        \"key\": 8025.3,\n      },\n      properties: {\n        units: 973892,\n        meterId: \"<value>\",\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: String Product ID Filter TypeScript\nDESCRIPTION: This snippet demonstrates how to filter by a single product ID using a string value in TypeScript. The 'value' variable is assigned a string representing the product ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalorderslistqueryparamproductidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Defining Property Aggregation in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a `PropertyAggregation` object in TypeScript. It specifies the aggregation function (`func`) and the property (`property`) to apply the function to. The example uses 'max' as the function.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metercreateaggregation.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.PropertyAggregation = {\n  func: \"max\",\n  property: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: CustomerSession Example Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a CustomerSession object in TypeScript using the polar-js SDK. It showcases the structure of the CustomerSession model and provides example values for each field, including nested objects like customer and billingAddress. The code includes date objects, strings, and a boolean value to exemplify the different types of data the CustomerSession can contain.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customersession.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerSession } from \"@polar-sh/sdk/models/components/customersession.js\";\n\nlet value: CustomerSession = {\n  createdAt: new Date(\"2023-07-02T22:27:37.876Z\"),\n  modifiedAt: new Date(\"2024-05-21T11:23:34.323Z\"),\n  id: \"<value>\",\n  token: \"<value>\",\n  expiresAt: new Date(\"2024-04-12T10:21:55.865Z\"),\n  customerPortalUrl: \"https://frequent-festival.name\",\n  customerId: \"<value>\",\n  customer: {\n    id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n    createdAt: new Date(\"2023-12-12T10:38:57.042Z\"),\n    modifiedAt: new Date(\"2025-07-21T20:47:36.754Z\"),\n    metadata: {\n      \"key\": \"<value>\",\n    },\n    externalId: \"usr_1337\",\n    email: \"customer@example.com\",\n    emailVerified: true,\n    name: \"John Doe\",\n    billingAddress: {\n      country: \"FR\",\n    },\n    taxId: [\n      \"911144442\",\n      \"us_ein\",\n    ],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    deletedAt: new Date(\"2025-11-09T20:02:22.939Z\"),\n    avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Definition in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a boolean variable in TypeScript. It assigns a boolean literal (false) to the variable 'value', indicating that it can store true/false values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerupdatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Initializing EventsGetRequest in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the EventsGetRequest model from the '@polar-sh/sdk/models/operations/eventsget.js' module and initialize an instance of the model. The 'id' field is required and must be a string value.  The imported object `EventsGetRequest` is used to type `value`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/eventsgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventsGetRequest } from \"@polar-sh/sdk/models/operations/eventsget.js\";\n\nlet value: EventsGetRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ListResourceBenefitGrant in TypeScript\nDESCRIPTION: This snippet shows how to import and instantiate a `ListResourceBenefitGrant` object with example data, including items (an array of benefit grants with customer details) and pagination information.  It demonstrates creating instances of `Date` objects and nesting object literals. The example uses data types defined in `@polar-sh/sdk/models/components/listresourcebenefitgrant.js`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourcebenefitgrant.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceBenefitGrant } from \"@polar-sh/sdk/models/components/listresourcebenefitgrant.js\";\n\nlet value: ListResourceBenefitGrant = {\n  items: [\n    {\n      createdAt: new Date(\"2023-10-27T03:42:35.418Z\"),\n      modifiedAt: new Date(\"2024-07-19T12:22:35.582Z\"),\n      id: \"<value>\",\n      isGranted: false,\n      isRevoked: false,\n      subscriptionId: \"<value>\",\n      orderId: \"<value>\",\n      customerId: \"<value>\",\n      benefitId: \"<value>\",\n      customer: {\n        id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n        createdAt: new Date(\"2025-02-28T13:56:52.936Z\"),\n        modifiedAt: new Date(\"2024-07-11T09:41:53.882Z\"),\n        metadata: {\n          \"key\": 810560,\n        },\n        externalId: \"usr_1337\",\n        email: \"customer@example.com\",\n        emailVerified: true,\n        name: \"John Doe\",\n        billingAddress: {\n          country: \"FR\",\n        },\n        taxId: [\n          \"FR61954506077\",\n          \"eu_vat\",\n        ],\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        deletedAt: new Date(\"2024-02-25T19:31:31.778Z\"),\n        avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n      },\n      properties: {},\n    },\n  ],\n  pagination: {\n    totalCount: 871642,\n    maxPage: 957341,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Number Custom Field in TypeScript\nDESCRIPTION: Declares and initializes a number variable representing a custom field's numeric value. The variable `value` is assigned a numeric literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordercustomfielddata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitCustomUpdate in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and initialize a BenefitCustomUpdate object in TypeScript.  It imports the BenefitCustomUpdate class from the `@polar-sh/sdk/models/components/benefitcustomupdate.js` module and creates an empty object of that type. This object can then be populated with data for benefit updates.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustomupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitCustomUpdate } from \"@polar-sh/sdk/models/components/benefitcustomupdate.js\";\n\nlet value: BenefitCustomUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitCustom Object TypeScript\nDESCRIPTION: Demonstrates how to create and initialize a `BenefitCustom` object using the Polar-JS SDK. It imports the `BenefitCustom` class and creates an instance with sample data. The `createdAt` and `modifiedAt` properties are initialized with `Date` objects.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustom.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitCustom } from \"@polar-sh/sdk/models/components/benefitcustom.js\";\n\nlet value: BenefitCustom = {\n  id: \"<value>\",\n  createdAt: new Date(\"2024-11-04T05:40:36.718Z\"),\n  modifiedAt: new Date(\"2025-01-01T00:20:21.826Z\"),\n  description: \"yet solemnly cleave until\",\n  selectable: false,\n  deletable: false,\n  organizationId: \"<value>\",\n  metadata: {\n    \"key\": 397373,\n  },\n  properties: {\n    note: \"<value>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: CustomerPortalOAuthAccount Example in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the CustomerPortalOAuthAccount type from the @polar-sh/sdk to define a customer portal OAuth account.  It shows how to define the required fields accountId and accountUsername.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerportaloauthaccount.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalOAuthAccount } from \"@polar-sh/sdk/models/components/customerportaloauthaccount.js\";\n\nlet value: CustomerPortalOAuthAccount = {\n  accountId: \"<id>\",\n  accountUsername: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerCustomerMeter in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize a CustomerCustomerMeter object in TypeScript. It sets values for various properties, including IDs, dates, and unit counts, demonstrating a typical usage scenario.  The snippet assumes the @polar-sh/sdk is installed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customercustomermeter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerCustomerMeter } from \"@polar-sh/sdk/models/components/customercustomermeter.js\";\n\nlet value: CustomerCustomerMeter = {\n  id: \"<value>\",\n  createdAt: new Date(\"2025-12-16T23:18:15.511Z\"),\n  modifiedAt: new Date(\"2024-03-14T17:45:38.506Z\"),\n  customerId: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n  meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n  consumedUnits: 25,\n  creditedUnits: 100,\n  balance: 75,\n  meter: {\n    createdAt: new Date(\"2023-06-10T08:09:24.344Z\"),\n    modifiedAt: new Date(\"2023-08-24T19:08:34.581Z\"),\n    id: \"<value>\",\n    name: \"<value>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerSubscriptionCancel Type (TypeScript)\nDESCRIPTION: This snippet defines the TypeScript type `CustomerSubscriptionCancel`, representing a customer's subscription cancellation. It is an empty object, signifying that no additional parameters are required for cancellation.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customersubscriptionupdate.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomerSubscriptionCancel = {};\n```\n\n----------------------------------------\n\nTITLE: Float Value Assignment TypeScript\nDESCRIPTION: This code snippet demonstrates assigning a floating-point number to a constant variable in TypeScript. It illustrates the syntax for declaring a number constant and initializing it with a floating-point literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldselectmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscountUpdate in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the DiscountUpdate type from the `@polar-sh/sdk/models/components/discountupdate.js` module and initialize an empty object of that type. This is often the first step in preparing to update a discount's information. No specific dependencies are required beyond the `@polar-sh/sdk` package.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountUpdate } from \"@polar-sh/sdk/models/components/discountupdate.js\";\n\nlet value: DiscountUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: AuthorizeUser Model Instantiation in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and instantiate the `AuthorizeUser` model from the `@polar-sh/sdk/models/components/authorizeuser.js` module. It shows the structure of the object with the `id`, `email`, and `avatarUrl` fields. All fields are required and of type string.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/authorizeuser.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthorizeUser } from \"@polar-sh/sdk/models/components/authorizeuser.js\";\n\nlet value: AuthorizeUser = {\n  id: \"<value>\",\n  email: \"Destiney37@yahoo.com\",\n  avatarUrl: \"https://distorted-accompanist.com/\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomersGetRequest in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create and initialize a `CustomersGetRequest` object in TypeScript. It imports the `CustomersGetRequest` class from the `@polar-sh/sdk/models/operations/customersget.js` module and assigns a value to the `id` property.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customersgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomersGetRequest } from \"@polar-sh/sdk/models/operations/customersget.js\";\n\nlet value: CustomersGetRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: EventSource Usage Example TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the EventSource type from the '@polar-sh/sdk/models/components/eventsource.js' module.  It assigns the string literal \"system\" to a variable of type EventSource.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventsource.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventSource } from \"@polar-sh/sdk/models/components/eventsource.js\";\n\nlet value: EventSource = \"system\";\n```\n\n----------------------------------------\n\nTITLE: Initializing LegacyRecurringProductPriceCustom in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a LegacyRecurringProductPriceCustom object with sample data.  It imports the model from the `@polar-sh/sdk` and sets the properties such as createdAt, modifiedAt, id, productId, recurringInterval, priceCurrency, minimumAmount, maximumAmount and presetAmount. It serves as an example of how to create an instance of the `LegacyRecurringProductPriceCustom` object in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/legacyrecurringproductpricecustom.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LegacyRecurringProductPriceCustom } from \"@polar-sh/sdk/models/components/legacyrecurringproductpricecustom.js\";\n\nlet value: LegacyRecurringProductPriceCustom = {\n  createdAt: new Date(\"2024-07-11T21:04:54.594Z\"),\n  modifiedAt: new Date(\"2025-10-24T15:19:53.478Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  recurringInterval: \"month\",\n  priceCurrency: \"<value>\",\n  minimumAmount: 389953,\n  maximumAmount: 865786,\n  presetAmount: 205048,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating BenefitGitHubRepositoryCreateProperties in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of `BenefitGitHubRepositoryCreateProperties` in TypeScript. It initializes the `repositoryOwner`, `repositoryName`, and `permission` properties to configure the GitHub repository benefit.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositorycreateproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitGitHubRepositoryCreateProperties } from \"@polar-sh/sdk/models/components/benefitgithubrepositorycreateproperties.js\";\n\nlet value: BenefitGitHubRepositoryCreateProperties = {\n  repositoryOwner: \"polarsource\",\n  repositoryName: \"private_repo\",\n  permission: \"triage\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CheckoutLinksListRequest in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the CheckoutLinksListRequest object in TypeScript. It imports the necessary class from the @polar-sh/sdk/models/operations/checkoutlinkslist.js module and initializes it with a sample organizationId. Other optional fields, such as productId, page, limit, and sorting, can also be set.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutlinkslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutLinksListRequest } from \"@polar-sh/sdk/models/operations/checkoutlinkslist.js\";\n\nlet value: CheckoutLinksListRequest = {\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: CustomersGetStateRequest Usage in Typescript\nDESCRIPTION: This code snippet demonstrates how to import and instantiate the `CustomersGetStateRequest` model in Typescript. It shows how to create an object of type `CustomersGetStateRequest` with the required `id` field populated.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customersgetstaterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomersGetStateRequest } from \"@polar-sh/sdk/models/operations/customersgetstate.js\";\n\nlet value: CustomersGetStateRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: DownloadableFileCreate Example Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a `DownloadableFileCreate` object using the `@polar-sh/sdk` library. It showcases the required fields such as `organizationId`, `name`, `mimeType`, `size`, and `upload` which contains an array of parts with `number`, `chunkStart`, and `chunkEnd`. This example helps users understand how to instantiate the object and provide the necessary data for file creation.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/downloadablefilecreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DownloadableFileCreate } from \"@polar-sh/sdk/models/components/downloadablefilecreate.js\";\n\nlet value: DownloadableFileCreate = {\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  name: \"<value>\",\n  mimeType: \"<value>\",\n  size: 726480,\n  upload: {\n    parts: [\n      {\n        number: 370306,\n        chunkStart: 793719,\n        chunkEnd: 744216,\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Import and Usage Example - TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `BenefitGrantGitHubRepositoryPropertiesPermission` type from the `@polar-sh/sdk/models/components/benefitgrantgithubrepositoryproperties.js` module. It assigns the value \"push\" to a variable of this type, indicating write access to the repository.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgrantgithubrepositorypropertiespermission.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitGrantGitHubRepositoryPropertiesPermission } from \"@polar-sh/sdk/models/components/benefitgrantgithubrepositoryproperties.js\";\n\nlet value: BenefitGrantGitHubRepositoryPropertiesPermission = \"push\";\n```\n\n----------------------------------------\n\nTITLE: Import and Initialize CustomerBenefitGrantMeterCreditUpdate in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `CustomerBenefitGrantMeterCreditUpdate` class from the `@polar-sh/sdk/models/components/customerbenefitgrantmetercreditupdate.js` module and initialize an empty object of that type. This allows developers to create and work with `CustomerBenefitGrantMeterCreditUpdate` instances in their TypeScript code. The snippet relies on the `@polar-sh/sdk` package being installed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantmetercreditupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerBenefitGrantMeterCreditUpdate } from \"@polar-sh/sdk/models/components/customerbenefitgrantmetercreditupdate.js\";\n\nlet value: CustomerBenefitGrantMeterCreditUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: Getting Customer Meter by ID with Standalone Function\nDESCRIPTION: This snippet showcases how to retrieve a customer meter by ID using the standalone function approach from the Polar SDK. It uses `PolarCore` for better tree-shaking. It requires `@polar-sh/sdk/core.js` and `@polar-sh/sdk/funcs/customerPortalCustomerMetersGet.js` packages, and a `POLAR_CUSTOMER_SESSION` environment variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/polarcustomermeters/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalCustomerMetersGet } from \"@polar-sh/sdk/funcs/customerPortalCustomerMetersGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalCustomerMetersGet(polar, {\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: RefundReason Example Usage TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the RefundReason type from the @polar-sh/sdk/models/components/refundreason.js module in TypeScript. It shows how to assign a string value to a variable of type RefundReason.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/refundreason.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RefundReason } from \"@polar-sh/sdk/models/components/refundreason.js\";\n\nlet value: RefundReason = \"service_disruption\";\n```\n\n----------------------------------------\n\nTITLE: Boolean Metadata Value - TypeScript\nDESCRIPTION: Defines a boolean value for CheckoutLinkCreateProductsMetadata. This example demonstrates how to declare a boolean variable and assign it a boolean literal value (false) in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkcreateproductsmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: RefundSortProperty Values in TypeScript\nDESCRIPTION: This code snippet shows the possible values for the `RefundSortProperty` type in TypeScript.  It can be either `\"created_at\"`, `\"-created_at\"`, `\"amount\"`, or `\"-amount\"`. These values are used for sorting refunds.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/refundsortproperty.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"created_at\" | \"-created_at\" | \"amount\" | \"-amount\"\n```\n\n----------------------------------------\n\nTITLE: Boolean Declaration and Initialization in TypeScript\nDESCRIPTION: This snippet illustrates how to declare a boolean variable named 'value' and set it to 'false' in TypeScript. The 'const' keyword makes the variable immutable. Booleans are fundamental for representing true/false conditions in TypeScript applications.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablessubscribermetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitGrantCustomProperties TypeScript\nDESCRIPTION: This snippet initializes a TypeScript object of type `components.BenefitGrantCustomProperties`. This is a generic type for defining custom properties for a benefit grant, providing flexibility to add specific properties based on the use case.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatebenefitgrantproperties.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGrantCustomProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Defining DownloadableFileRead Type in TypeScript\nDESCRIPTION: This code defines the structure for the `DownloadableFileRead` type. It includes properties such as `id`, `organizationId`, `name`, `path`, `mimeType`, `size`, `storageVersion`, various checksums (`checksumEtag`, `checksumSha256Base64`, `checksumSha256Hex`), timestamps (`lastModifiedAt`, `createdAt`), `version`, `isUploaded`, and `sizeReadable`. The `lastModifiedAt` and `createdAt` properties are instances of the `Date` object. The code illustrates the properties and data types for a downloadable file.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/fileread.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DownloadableFileRead = {\n  id: \"<value>\",\n  organizationId: \"<value>\",\n  name: \"<value>\",\n  path: \"/sbin\",\n  mimeType: \"<value>\",\n  size: 822101,\n  storageVersion: \"<value>\",\n  checksumEtag: \"<value>\",\n  checksumSha256Base64: \"<value>\",\n  checksumSha256Hex: \"<value>\",\n  lastModifiedAt: new Date(\"2023-12-23T00:34:21.292Z\"),\n  version: \"<value>\",\n  isUploaded: false,\n  createdAt: new Date(\"2025-08-22T04:02:51.257Z\"),\n  sizeReadable: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ProductPrice in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a `components.ProductPrice` object in TypeScript.  It highlights the structure and data types, including `createdAt`, `modifiedAt` as `Date` objects, `id` and `productId` as strings, `isArchived` as a boolean, `type` as a string indicating the pricing model (recurring), and `recurringInterval` as a string representing the billing cycle (month).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerproductprices.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPrice = {\n  createdAt: new Date(\"2023-11-12T09:36:50.641Z\"),\n  modifiedAt: new Date(\"2023-02-28T09:49:59.454Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  type: \"recurring\",\n  recurringInterval: \"month\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Customer ID Filter - TypeScript\nDESCRIPTION: Demonstrates how to define a CustomerIDFilter with an array of strings in TypeScript. The `value` variable is assigned an array of strings representing customer IDs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customeridfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: RefundReason Values TypeScript\nDESCRIPTION: This snippet lists the possible string values that the RefundReason type can accept. These values represent different reasons for issuing a refund.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/refundreason.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"duplicate\" | \"fraudulent\" | \"customer_request\" | \"service_disruption\" | \"satisfaction_guarantee\" | \"other\"\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodCard Type in TypeScript\nDESCRIPTION: This code snippet defines the structure of the `PaymentMethodCard` type, which represents a payment method using a credit card. It includes properties like `id`, `createdAt`, `default`, and a nested `card` object with details like `brand`, `last4`, `expMonth`, and `expYear`.  This snippet demonstrates how to create an object of `components.PaymentMethodCard` type with example values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalcustomersaddpaymentmethodresponsecustomerportalcustomersaddpaymentmethod.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.PaymentMethodCard = {\n  id: \"<id>\",\n  createdAt: new Date(\"2024-02-24T15:23:31.500Z\"),\n  default: false,\n  card: {\n    brand: \"<value>\",\n    last4: \"<value>\",\n    expMonth: 668136,\n    expYear: 637348,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Define DiscountPercentageOnceForeverDurationBase Type - TypeScript\nDESCRIPTION: This snippet defines a TypeScript object representing a percentage discount that can be applied once or forever. It includes properties such as duration, type, basis points, timestamps, IDs, metadata, name, code, start and end dates, maximum redemptions, redemption count, and organization ID. The `duration` is set to 'once'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkdiscount.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DiscountPercentageOnceForeverDurationBase = {\n  duration: \"once\",\n  type: \"fixed\",\n  basisPoints: 599069,\n  createdAt: new Date(\"2024-01-10T18:51:26.386Z\"),\n  modifiedAt: new Date(\"2024-04-08T21:26:27.882Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": false,\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2025-04-12T16:04:59.265Z\"),\n  endsAt: new Date(\"2024-11-17T00:52:34.763Z\"),\n  maxRedemptions: 992406,\n  redemptionsCount: 293950,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: OrganizationSortProperty Values - TypeScript\nDESCRIPTION: Defines the possible string values for the `OrganizationSortProperty` type. These values represent different fields that can be used to sort organizations, along with the option to sort in descending order by prepending a hyphen.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/organizationsortproperty.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"created_at\" | \"-created_at\" | \"slug\" | \"-slug\" | \"name\" | \"-name\"\n```\n\n----------------------------------------\n\nTITLE: LicenseKeysGetActivationRequest Example (TypeScript)\nDESCRIPTION: This snippet shows how to import and use the `LicenseKeysGetActivationRequest` class from the `@polar-sh/sdk/models/operations/licensekeysgetactivation.js` module.  It creates an instance of the class, initializing the `id` and `activationId` properties with placeholder string values. These properties are required to be strings.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/licensekeysgetactivationrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LicenseKeysGetActivationRequest } from \"@polar-sh/sdk/models/operations/licensekeysgetactivation.js\";\n\nlet value: LicenseKeysGetActivationRequest = {\n  id: \"<value>\",\n  activationId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CheckoutLinkCreateProduct Type - TypeScript\nDESCRIPTION: This snippet shows how to define an object of type `CheckoutLinkCreateProduct`. It includes a `productId` property, which represents the ID of the product to be included in the checkout link. This type might be used to create a checkout link for a single, specific product.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutlinkscreatecheckoutlinkcreate.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CheckoutLinkCreateProduct = {\n  productId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Definition in TypeScript\nDESCRIPTION: Defines a boolean variable named 'value' and initializes it with a boolean literal (false). This illustrates how to define a boolean type for custom field data in polar-js.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutconfirmstripecustomfielddata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Getting Benefit Grant by ID with Standalone Function in TypeScript\nDESCRIPTION: This snippet retrieves a benefit grant by ID using the standalone function `customerPortalBenefitGrantsGet` from the Polar SDK core.  It initializes `PolarCore`, calls the function with the necessary parameters (customer session and grant ID), and then processes the result or throws an error based on the response status.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/benefitgrants/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customerPortalBenefitGrantsGet } from \"@polar-sh/sdk/funcs/customerPortalBenefitGrantsGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore();\n\nasync function run() {\n  const res = await customerPortalBenefitGrantsGet(polar, {\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Initializing CheckoutDiscountFixedRepeatDuration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize the CheckoutDiscountFixedRepeatDuration object with sample values. It imports the necessary class from the polar-sh SDK and assigns values to its properties, showcasing its structure and expected data types. The snippet requires the `@polar-sh/sdk` package.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutdiscountfixedrepeatduration.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutDiscountFixedRepeatDuration } from \"@polar-sh/sdk/models/components/checkoutdiscountfixedrepeatduration.js\";\n\nlet value: CheckoutDiscountFixedRepeatDuration = {\n  duration: \"repeating\",\n  durationInMonths: 401211,\n  type: \"percentage\",\n  amount: 640586,\n  currency: \"Bulgarian Lev\",\n  id: \"<value>\",\n  name: \"<value>\",\n  code: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: ProductMediaFileRead Usage Example in Typescript\nDESCRIPTION: This snippet demonstrates how to import and instantiate the ProductMediaFileRead model in Typescript. It shows how to populate the model's properties with example values, including strings, numbers, booleans and Date objects.  It requires the @polar-sh/sdk package.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productmediafileread.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductMediaFileRead } from \"@polar-sh/sdk/models/components/productmediafileread.js\";\n\nlet value: ProductMediaFileRead = {\n  id: \"<value>\",\n  organizationId: \"<value>\",\n  name: \"<value>\",\n  path: \"/var/spool\",\n  mimeType: \"<value>\",\n  size: 450045,\n  storageVersion: \"<value>\",\n  checksumEtag: \"<value>\",\n  checksumSha256Base64: \"<value>\",\n  checksumSha256Hex: \"<value>\",\n  lastModifiedAt: new Date(\"2023-03-26T10:50:20.114Z\"),\n  version: \"<value>\",\n  isUploaded: false,\n  createdAt: new Date(\"2023-04-24T18:25:32.554Z\"),\n  sizeReadable: \"<value>\",\n  publicUrl: \"https://tiny-teriyaki.info/\",\n};\n```\n\n----------------------------------------\n\nTITLE: Filter by Organization ID (String Array)\nDESCRIPTION: This code snippet demonstrates how to filter by multiple organization IDs using an array of strings in TypeScript. The `value` variable is assigned an array of strings, where each string represents a unique organization identifier. This allows filtering data for multiple organizations simultaneously.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/organizationid.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Count Aggregation Type\nDESCRIPTION: This snippet demonstrates the definition of a `CountAggregation` type in TypeScript. The `CountAggregation` interface, in this case, is represented as an empty object, implying it might be used for simple counting aggregations without needing specific properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/aggregation.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CountAggregation = {};\n```\n\n----------------------------------------\n\nTITLE: Initializing Oauth2ClientsListRequest Typescript\nDESCRIPTION: This code snippet demonstrates how to import and initialize an `Oauth2ClientsListRequest` object from the `@polar-sh/sdk/models/operations/oauth2clientslist.js` module. The object is initialized as an empty object. This request is used to list OAuth2 clients.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/oauth2clientslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Oauth2ClientsListRequest } from \"@polar-sh/sdk/models/operations/oauth2clientslist.js\";\n\nlet value: Oauth2ClientsListRequest = {};\n```\n\n----------------------------------------\n\nTITLE: Defining CheckoutDiscountPercentageOnceForeverDuration in TypeScript\nDESCRIPTION: This snippet defines a `CheckoutDiscountPercentageOnceForeverDuration` object in TypeScript. It includes properties like `duration`, `type`, `basisPoints`, `id`, `name`, and `code`. The `duration` is set to \"forever\", and the code showcases the `basisPoints` property.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpublicconfirmeddiscount.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CheckoutDiscountPercentageOnceForeverDuration = {\n  duration: \"forever\",\n  type: \"percentage\",\n  basisPoints: 364509,\n  id: \"<value>\",\n  name: \"<value>\",\n  code: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Import and Initialize ProductUpdate in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `ProductUpdate` component from the `@polar-sh/sdk/models/components/productupdate.js` module and initialize an empty `ProductUpdate` object in TypeScript. This object can then be populated with the desired update values for a product.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductUpdate } from \"@polar-sh/sdk/models/components/productupdate.js\";\n\nlet value: ProductUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: BenefitDiscordSubscriberProperties Usage in TypeScript\nDESCRIPTION: This code snippet shows how to import and use the `BenefitDiscordSubscriberProperties` type from the `@polar-sh/sdk` package to define properties for a Discord benefit subscriber. The `guildId` field is set to a placeholder value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordsubscriberproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitDiscordSubscriberProperties } from \"@polar-sh/sdk/models/components/benefitdiscordsubscriberproperties.js\";\n\nlet value: BenefitDiscordSubscriberProperties = {\n  guildId: \"<id>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ProductPriceFixedCreate in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a `ProductPriceFixedCreate` object in TypeScript. It sets the `priceAmount` property to a specific value, representing a fixed price. No dependencies are explicitly listed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productcreateprices.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPriceFixedCreate = {\n  priceAmount: 578074,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating CustomerPortalOrdersListResponse Instance in Typescript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `CustomerPortalOrdersListResponse` object, which represents the response when listing customer portal orders.  It imports the necessary type from the `@polar-sh/sdk` and populates the object with sample data including nested structures like `product`, `subscription`, and `items`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalorderslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalOrdersListResponse } from \"@polar-sh/sdk/models/operations/customerportalorderslist.js\";\n\nlet value: CustomerPortalOrdersListResponse = {\n  result: {\n    items: [\n      {\n        createdAt: new Date(\"2023-10-09T07:17:06.745Z\"),\n        modifiedAt: new Date(\"2025-11-24T17:01:47.390Z\"),\n        id: \"<value>\",\n        status: \"pending\",\n        paid: true,\n        subtotalAmount: 821688,\n        discountAmount: 145302,\n        netAmount: 54212,\n        taxAmount: 86342,\n        totalAmount: 358052,\n        refundedAmount: 677875,\n        refundedTaxAmount: 884503,\n        currency: \"Costa Rican Colon\",\n        customerId: \"<value>\",\n        productId: \"<value>\",\n        subscriptionId: \"<value>\",\n        userId: \"<value>\",\n        product: {\n          createdAt: new Date(\"2023-07-23T11:46:21.084Z\"),\n          modifiedAt: new Date(\"2024-01-20T06:11:11.809Z\"),\n          id: \"<value>\",\n          name: \"<value>\",\n          description:\n            \"trim heartache er hence sadly into phooey uh-huh wildly swear\",\n          recurringInterval: \"month\",\n          isRecurring: false,\n          isArchived: false,\n          organizationId: \"<value>\",\n          prices: [\n            {\n              createdAt: new Date(\"2023-05-16T05:36:01.128Z\"),\n              modifiedAt: new Date(\"2025-07-25T10:24:56.356Z\"),\n              id: \"<value>\",\n              isArchived: false,\n              productId: \"<value>\",\n              recurringInterval: \"year\",\n              priceCurrency: \"<value>\",\n              priceAmount: 212609,\n            },\n          ],\n          benefits: [\n            {\n              id: \"<value>\",\n              createdAt: new Date(\"2023-02-21T19:56:39.166Z\"),\n              modifiedAt: new Date(\"2024-08-11T16:44:12.313Z\"),\n              type: \"custom\",\n              description: \"sans athwart than\",\n              selectable: false,\n              deletable: false,\n              organizationId: \"<value>\",\n            },\n          ],\n          medias: [\n            {\n              id: \"<value>\",\n              organizationId: \"<value>\",\n              name: \"<value>\",\n              path: \"/lib\",\n              mimeType: \"<value>\",\n              size: 809025,\n              storageVersion: \"<value>\",\n              checksumEtag: \"<value>\",\n              checksumSha256Base64: \"<value>\",\n              checksumSha256Hex: \"<value>\",\n              lastModifiedAt: new Date(\"2025-03-24T01:34:56.771Z\"),\n              version: \"<value>\",\n              isUploaded: false,\n              createdAt: new Date(\"2024-11-12T18:58:26.773Z\"),\n              sizeReadable: \"<value>\",\n              publicUrl: \"https://haunting-step-mother.biz/\",\n            },\n          ],\n          organization: {\n            createdAt: new Date(\"2023-01-28T01:43:20.163Z\"),\n            modifiedAt: new Date(\"2025-12-22T09:07:53.332Z\"),\n            id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n            name: \"<value>\",\n            slug: \"<value>\",\n            avatarUrl: \"https://alert-hepatitis.name\",\n            email: \"Cale57@gmail.com\",\n            website: \"<value>\",\n            socials: [\n              {\n                platform: \"x\",\n                url: \"https://uniform-casement.com\",\n              },\n            ],\n            detailsSubmittedAt: new Date(\"2023-03-25T23:37:24.261Z\"),\n            featureSettings: {},\n            subscriptionSettings: {\n              allowMultipleSubscriptions: false,\n              allowCustomerUpdates: false,\n              prorationBehavior: \"prorate\",\n            },\n          },\n        },\n        subscription: {\n          createdAt: new Date(\"2025-01-22T10:18:14.275Z\"),\n          modifiedAt: new Date(\"2025-06-14T22:50:01.018Z\"),\n          id: \"<value>\",\n          amount: 214030,\n          currency: \"Lempira\",\n          recurringInterval: \"year\",\n          status: \"incomplete_expired\",\n          currentPeriodStart: new Date(\"2025-11-28T05:46:31.105Z\"),\n          currentPeriodEnd: new Date(\"2023-01-15T03:02:24.661Z\"),\n          cancelAtPeriodEnd: false,\n          canceledAt: new Date(\"2025-06-19T10:31:21.199Z\"),\n          startedAt: new Date(\"2024-02-14T01:49:13.911Z\"),\n          endsAt: new Date(\"2023-12-28T16:09:38.079Z\"),\n          endedAt: new Date(\"2025-12-13T10:04:33.802Z\"),\n          customerId: \"<value>\",\n          productId: \"<value>\",\n          discountId: \"<value>\",\n          checkoutId: \"<value>\",\n          customerCancellationReason: \"switched_service\",\n          customerCancellationComment: \"<value>\",\n        },\n        items: [\n          {\n            createdAt: new Date(\"2024-03-07T01:14:02.645Z\"),\n            modifiedAt: new Date(\"2025-12-18T11:20:47.371Z\"),\n            id: \"<value>\",\n            label: \"<value>\",\n            amount: 218962,\n            taxAmount: 595143,\n            proration: false,\n            productPriceId: \"<value>\",\n          },\n        ],\n      },\n    ],\n    pagination: {\n      totalCount: 938868,\n      maxPage: 741011,\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing LicenseKeyDeactivate Model - TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the `LicenseKeyDeactivate` model in TypeScript. It shows the required fields: `key`, `organizationId`, and `activationId`, which are all strings. The model is imported from `@polar-sh/sdk/models/components/licensekeydeactivate.js`.  The placeholder values `<key>` and `<value>` need to be replaced with actual values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/licensekeydeactivate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LicenseKeyDeactivate } from \"@polar-sh/sdk/models/components/licensekeydeactivate.js\";\n\nlet value: LicenseKeyDeactivate = {\n  key: \"<key>\",\n  organizationId: \"<value>\",\n  activationId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Benefit in TypeScript\nDESCRIPTION: This snippet demonstrates creating a custom benefit using `components.BenefitCustomCreate`. It sets a description, organization ID, and empty properties object. The `organizationId` is a placeholder and should be replaced with a valid UUID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitCustomCreate = {\n  description: \"for furthermore careless provided readjust\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Creating RFCDate instances in TypeScript\nDESCRIPTION: Demonstrates how to create `RFCDate` instances using either a timestamp (Date.now()) or a date string formatted as 'YYYY-MM-DD'. This class is designed to handle date serialization for JSON.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/types/rfcdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst d1 = new RFCDate(Date.now());\n\nconst d2 = new RFCDate(\"2019-01-01\");\n```\n\n----------------------------------------\n\nTITLE: Initialize CustomerBenefitGrantDiscordPropertiesUpdate TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the CustomerBenefitGrantDiscordPropertiesUpdate object from the @polar-sh/sdk library in TypeScript.  It sets the accountId property with a placeholder value.  The accountId is required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantdiscordpropertiesupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerBenefitGrantDiscordPropertiesUpdate } from \"@polar-sh/sdk/models/components/customerbenefitgrantdiscordpropertiesupdate.js\";\n\nlet value: CustomerBenefitGrantDiscordPropertiesUpdate = {\n  accountId: \"<id>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining LegacyRecurringProductPrice in TypeScript\nDESCRIPTION: This code snippet defines an example object of type `components.LegacyRecurringProductPrice` with specific values for its properties.  It includes fields such as `createdAt`, `modifiedAt`, `id`, `isArchived`, `productId`, `recurringInterval`, `priceCurrency`, `minimumAmount`, `maximumAmount`, and `presetAmount`. This example showcases the structure of a legacy recurring product price object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkproductprices.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.LegacyRecurringProductPrice = {\n  createdAt: new Date(\"2025-03-28T17:53:12.899Z\"),\n  modifiedAt: new Date(\"2024-08-10T00:40:01.700Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  recurringInterval: \"year\",\n  priceCurrency: \"<value>\",\n  minimumAmount: 981878,\n  maximumAmount: 962753,\n  presetAmount: 690635,\n};\n```\n\n----------------------------------------\n\nTITLE: TaxIDFormat Usage Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the TaxIDFormat enum from the polar-sh SDK. It assigns the value \"eu_vat\" to a variable of type TaxIDFormat.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/taxidformat.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TaxIDFormat } from \"@polar-sh/sdk/models/components/taxidformat.js\";\n\nlet value: TaxIDFormat = \"eu_vat\";\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration TypeScript\nDESCRIPTION: Declares a constant variable 'value' of type boolean and assigns it the boolean value 'false'. This example shows the inclusion of boolean types in DiscountPercentageOnceForeverDurationCreateMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentageonceforeverdurationcreatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration in TypeScript\nDESCRIPTION: This snippet shows how to declare a boolean variable in TypeScript. The variable `value` is explicitly typed as `boolean` and assigned a boolean value (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordsubscribermetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Declaring Number (Integer) Type in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a variable of type `number` and assign it an integer value in TypeScript. This is used to set numeric metadata within BenefitDiscordUpdateMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordupdatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: PaymentMethodCard Example Usage TypeScript\nDESCRIPTION: Demonstrates how to import and instantiate the `PaymentMethodCard` object from the `@polar-sh/sdk` library in TypeScript. Includes example data for initializing the object's properties like `id`, `createdAt`, `default`, and `card` details. It requires the `@polar-sh/sdk` package as a dependency. The `createdAt` property requires a Date object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/paymentmethodcard.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentMethodCard } from \"@polar-sh/sdk/models/components/paymentmethodcard.js\";\n\nlet value: PaymentMethodCard = {\n  id: \"<id>\",\n  createdAt: new Date(\"2023-11-19T21:23:57.146Z\"),\n  default: false,\n  card: {\n    brand: \"<value>\",\n    last4: \"<value>\",\n    expMonth: 497809,\n    expYear: 715588,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Getting a Customer by ID using Standalone Function\nDESCRIPTION: This snippet shows how to retrieve a customer by their ID using the standalone `customersGet` function from the Polar SDK. It initializes `PolarCore` (for better tree-shaking), calls the function, handles potential errors, and logs the result. Requires the Polar SDK, PolarCore, and an access token.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/customers/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { customersGet } from \"@polar-sh/sdk/funcs/customersGet.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await customersGet(polar, {\n    id: \"<value>\",\n  });\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomFieldCheckboxProperties TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize an empty `CustomFieldCheckboxProperties` object in TypeScript. It imports the type from the `@polar-sh/sdk/models/components/customfieldcheckboxproperties.js` module. No specific dependencies are required other than the `@polar-sh/sdk` package. The initialized object `value` will be of type `CustomFieldCheckboxProperties`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcheckboxproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldCheckboxProperties } from \"@polar-sh/sdk/models/components/customfieldcheckboxproperties.js\";\n\nlet value: CustomFieldCheckboxProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Import and Initialize ProductPriceFreeCreate in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the ProductPriceFreeCreate class from the @polar-sh/sdk/models/components/productpricefreecreate.js module and initialize an empty object of that type. The empty object can then be populated with relevant data according to the schema.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productpricefreecreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductPriceFreeCreate } from \"@polar-sh/sdk/models/components/productpricefreecreate.js\";\n\nlet value: ProductPriceFreeCreate = {};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalSubscriptionsUpdateSecurity in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and initialize the `CustomerPortalSubscriptionsUpdateSecurity` model from the `@polar-sh/sdk/models/operations/customerportalsubscriptionsupdate.js` module. It shows the structure of the object and the required `customerSession` field as a string.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalsubscriptionsupdatesecurity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalSubscriptionsUpdateSecurity } from \"@polar-sh/sdk/models/operations/customerportalsubscriptionsupdate.js\";\n\nlet value: CustomerPortalSubscriptionsUpdateSecurity = {\n  customerSession: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Definition\nDESCRIPTION: Defines a number type variable with a floating-point value.  It shows how to define a float value within CustomFieldCheckboxMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcheckboxmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Initializing SubscriptionCancel Model with TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the `SubscriptionCancel` model from the `@polar-sh/sdk/models/components/subscriptioncancel.js` module. The `cancelAtPeriodEnd` property is set to `false`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptioncancel.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubscriptionCancel } from \"@polar-sh/sdk/models/components/subscriptioncancel.js\";\n\nlet value: SubscriptionCancel = {\n  cancelAtPeriodEnd: false,\n};\n```\n\n----------------------------------------\n\nTITLE: WebhookRefundCreatedPayload Example Usage (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to import and instantiate the WebhookRefundCreatedPayload type from the @polar-sh/sdk library. It initializes the data field with sample values, including dates, IDs, metadata, and refund details. The purpose is to show how to create a valid payload object for testing or usage in a webhook handler.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookrefundcreatedpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookRefundCreatedPayload } from \"@polar-sh/sdk/models/components/webhookrefundcreatedpayload.js\";\n\nlet value: WebhookRefundCreatedPayload = {\n  data: {\n    createdAt: new Date(\"2023-10-16T07:53:56.637Z\"),\n    modifiedAt: new Date(\"2024-04-22T04:31:36.394Z\"),\n    id: \"<value>\",\n    metadata: {\n      \"key\": \"<value>\",\n    },\n    status: \"failed\",\n    reason: \"customer_request\",\n    amount: 997648,\n    taxAmount: 873398,\n    currency: \"CFP Franc\",\n    organizationId: \"<value>\",\n    orderId: \"<value>\",\n    subscriptionId: \"<value>\",\n    customerId: \"<value>\",\n    revokeBenefits: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring an Integer Variable in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare an integer variable in TypeScript. It initializes a constant variable named 'value' with an integer literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Initializing ProductPriceMeteredUnit Type - TypeScript\nDESCRIPTION: This code snippet shows the initialization of the `ProductPriceMeteredUnit` type, representing a metered unit product. It includes fields like `createdAt`, `modifiedAt`, `id`, `isArchived`, `productId`, `type`, `recurringInterval`, `priceCurrency`, `unitAmount`, `capAmount`, `meterId`, and `meter`. The `meter` field is an object with `id` and `name` properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productprice.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPriceMeteredUnit = {\n  createdAt: new Date(\"2023-10-22T15:18:33.510Z\"),\n  modifiedAt: new Date(\"2023-02-10T09:49:20.536Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  type: \"recurring\",\n  recurringInterval: \"year\",\n  priceCurrency: \"<value>\",\n  unitAmount: \"<value>\",\n  capAmount: 912776,\n  meterId: \"<value>\",\n  meter: {\n    id: \"<value>\",\n    name: \"<value>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitLicenseKeyActivationCreateProperties in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a `BenefitLicenseKeyActivationCreateProperties` object with sample values. It imports the type from the `@polar-sh/sdk` library and creates an object with `limit` and `enableCustomerAdmin` properties set to example values. The `limit` property is a number, and `enableCustomerAdmin` is a boolean.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeyactivationcreateproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitLicenseKeyActivationCreateProperties } from \"@polar-sh/sdk/models/components/benefitlicensekeyactivationcreateproperties.js\";\n\nlet value: BenefitLicenseKeyActivationCreateProperties = {\n  limit: 557787,\n  enableCustomerAdmin: false,\n};\n```\n\n----------------------------------------\n\nTITLE: RefundStatus Value Options in TypeScript\nDESCRIPTION: This snippet defines the possible string values that the `RefundStatus` type can hold: 'pending', 'succeeded', 'failed', and 'canceled'. These represent the different states a refund can be in.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/refundstatus.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"pending\" | \"succeeded\" | \"failed\" | \"canceled\"\n```\n\n----------------------------------------\n\nTITLE: BenefitGrantWebhook Example Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `BenefitGrantWebhook` type from the `@polar-sh/sdk/models/components/benefitgrantwebhook.js` module. It creates an instance of `BenefitGrantWebhook`, populating its properties with sample data. The properties include date values using the `Date` constructor, string IDs, boolean flags (`isGranted`, `isRevoked`), nested customer and benefit objects with their own specific fields, and properties objects. It illustrates the structure and expected types for creating a `BenefitGrantWebhook` object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgrantwebhook.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitGrantWebhook } from \"@polar-sh/sdk/models/components/benefitgrantwebhook.js\";\n\nlet value: BenefitGrantWebhook = {\n  createdAt: new Date(\"2025-05-20T06:29:58.394Z\"),\n  modifiedAt: new Date(\"2025-04-20T07:46:05.447Z\"),\n  id: \"<value>\",\n  isGranted: false,\n  isRevoked: false,\n  subscriptionId: \"<value>\",\n  orderId: \"<value>\",\n  customerId: \"<value>\",\n  benefitId: \"<value>\",\n  customer: {\n    id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n    createdAt: new Date(\"2024-08-03T22:31:58.796Z\"),\n    modifiedAt: new Date(\"2025-03-23T10:27:37.150Z\"),\n    metadata: {\n      \"key\": false,\n    },\n    externalId: \"usr_1337\",\n    email: \"customer@example.com\",\n    emailVerified: true,\n    name: \"John Doe\",\n    billingAddress: {\n      country: \"SE\",\n    },\n    taxId: [\n      \"911144442\",\n      \"us_ein\",\n    ],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    deletedAt: new Date(\"2023-07-03T18:19:30.365Z\"),\n    avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n  },\n  properties: {},\n  benefit: {\n    id: \"<value>\",\n    createdAt: new Date(\"2023-12-27T22:17:00.210Z\"),\n    modifiedAt: new Date(\"2024-02-10T10:41:30.057Z\"),\n    description: \"toward while fooey democratize or er um twin elver\",\n    selectable: false,\n    deletable: false,\n    organizationId: \"<value>\",\n    metadata: {\n      \"key\": false,\n    },\n    properties: {\n      repositoryOwner: \"polarsource\",\n      repositoryName: \"private_repo\",\n      permission: \"maintain\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating TokenResponse Instance with TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `TokenResponse` object using TypeScript, importing it from the `@polar-sh/sdk/models/components/tokenresponse.js` module. It shows how to initialize the object with sample values for its properties: `accessToken`, `expiresIn`, `refreshToken`, `scope`, and `idToken`. The properties `accessToken`, `refreshToken`, `scope`, and `idToken` are strings while `expiresIn` is a number.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/tokenresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TokenResponse } from \"@polar-sh/sdk/models/components/tokenresponse.js\";\n\nlet value: TokenResponse = {\n  accessToken: \"<value>\",\n  expiresIn: 903836,\n  refreshToken: \"<value>\",\n  scope: \"<value>\",\n  idToken: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Organization ID Filter with String Array in TypeScript\nDESCRIPTION: This code snippet illustrates how to define an array of organization IDs for filtering. The `value` variable is assigned an array of strings, each representing an organization ID. This enables filtering based on multiple organizations simultaneously.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/organizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: String Metadata Value in Typescript\nDESCRIPTION: Defines a string variable named 'value' and assigns it a placeholder string value. This shows how string metadata can be defined.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablescreatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Creating CustomersDeleteExternalRequest Object Typescript\nDESCRIPTION: This code snippet shows how to create an instance of the `CustomersDeleteExternalRequest` object in Typescript. It imports the class and then creates a new object instance, initializing the `externalId` field with a sample value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customersdeleteexternalrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomersDeleteExternalRequest } from \"@polar-sh/sdk/models/operations/customersdeleteexternal.js\";\n\nlet value: CustomersDeleteExternalRequest = {\n  externalId: \"<id>\",\n};\n```\n\n----------------------------------------\n\nTITLE: LegacyRecurringProductPriceFixed Usage Example (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to create an instance of the `LegacyRecurringProductPriceFixed` model from the `@polar-sh/sdk`. It imports the model and initializes an object with sample data for each required field. Note the model is marked as deprecated, indicating potential future removal or changes.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/legacyrecurringproductpricefixed.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LegacyRecurringProductPriceFixed } from \"@polar-sh/sdk/models/components/legacyrecurringproductpricefixed.js\";\n\nlet value: LegacyRecurringProductPriceFixed = {\n  createdAt: new Date(\"2024-03-31T12:50:04.708Z\"),\n  modifiedAt: new Date(\"2025-06-02T14:36:24.595Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  recurringInterval: \"year\",\n  priceCurrency: \"<value>\",\n  priceAmount: 590551,\n};\n```\n\n----------------------------------------\n\nTITLE: ProductsGetRequest Usage Example in TypeScript\nDESCRIPTION: Demonstrates how to import and create an instance of the ProductsGetRequest model in TypeScript. It shows the required 'id' field and its usage.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/productsgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductsGetRequest } from \"@polar-sh/sdk/models/operations/productsget.js\";\n\nlet value: ProductsGetRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: MetricsIntervalsLimits Example Usage (TypeScript)\nDESCRIPTION: Demonstrates how to import and instantiate the `MetricsIntervalsLimits` type in TypeScript, setting `maxDays` for each interval (hour, day, week, month, year). This example shows how to configure the maximum number of days to retrieve metrics for each specified time interval.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metricsintervalslimits.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MetricsIntervalsLimits } from \"@polar-sh/sdk/models/components/metricsintervalslimits.js\";\n\nlet value: MetricsIntervalsLimits = {\n  hour: {\n    maxDays: 410040,\n  },\n  day: {\n    maxDays: 237091,\n  },\n  week: {\n    maxDays: 9822,\n  },\n  month: {\n    maxDays: 818088,\n  },\n  year: {\n    maxDays: 447898,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating FilesUpdateRequest object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `FilesUpdateRequest` class from the `@polar-sh/sdk/models/operations/filesupdate.js` module and create an instance of it. The example shows initializing the `id` field with a placeholder string value and the `filePatch` field with an empty object. This object is used to update a file.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/filesupdaterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FilesUpdateRequest } from \"@polar-sh/sdk/models/operations/filesupdate.js\";\n\nlet value: FilesUpdateRequest = {\n  id: \"<value>\",\n  filePatch: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing EventName Model in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and initialize the EventName model from the @polar-sh/sdk. It showcases the structure and required fields for an EventName object, including properties like name, source, occurrences, firstSeen, and lastSeen. The dates are initialized using the JavaScript Date object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventname.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventName } from \"@polar-sh/sdk/models/components/eventname.js\";\n\nlet value: EventName = {\n  name: \"<value>\",\n  source: \"user\",\n  occurrences: 195850,\n  firstSeen: new Date(\"2024-12-21T07:07:24.710Z\"),\n  lastSeen: new Date(\"2025-02-05T23:11:22.498Z\"),\n};\n```\n\n----------------------------------------\n\nTITLE: Using CustomFieldsListResponse in TypeScript\nDESCRIPTION: This snippet showcases how to import and use the `CustomFieldsListResponse` type from the `@polar-sh/sdk/models/operations/customfieldslist.js` module. It creates a sample object representing a list of custom fields with associated metadata, properties and pagination information. The code demonstrates the structure of a response when fetching a list of custom fields, including fields like `createdAt`, `modifiedAt`, `id`, `metadata`, `slug`, `name`, `organizationId`, and `properties`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customfieldslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldsListResponse } from \"@polar-sh/sdk/models/operations/customfieldslist.js\";\n\nlet value: CustomFieldsListResponse = {\n  result: {\n    items: [\n      {\n        createdAt: new Date(\"2023-11-02T08:28:39.301Z\"),\n        modifiedAt: new Date(\"2024-07-19T07:06:39.603Z\"),\n        id: \"<value>\",\n        metadata: {\n          \"key\": false,\n        },\n        slug: \"<value>\",\n        name: \"<value>\",\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        properties: {\n          options: [\n            {\n              value: \"<value>\",\n              label: \"<value>\",\n            },\n          ],\n        },\n      },\n    ],\n    pagination: {\n      totalCount: 429332,\n      maxPage: 791063,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: S3FileUploadMultipart Example\nDESCRIPTION: This code snippet shows how to import and initialize an S3FileUploadMultipart object in TypeScript. It demonstrates the structure of the object and the types of its properties (id, path, and parts). The 'parts' property is an array of objects with 'number', 'chunkStart', 'chunkEnd', 'url', and 'expiresAt' properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/s3fileuploadmultipart.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { S3FileUploadMultipart } from \"@polar-sh/sdk/models/components/s3fileuploadmultipart.js\";\n\nlet value: S3FileUploadMultipart = {\n  id: \"<id>\",\n  path: \"/var/log\",\n  parts: [\n    {\n      number: 176416,\n      chunkStart: 907120,\n      chunkEnd: 196272,\n      url: \"https://total-apparatus.net/\",\n      expiresAt: new Date(\"2024-02-22T23:29:14.285Z\"),\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: CheckoutDiscountPercentageRepeatDuration Example\nDESCRIPTION: This snippet demonstrates how to import and use the CheckoutDiscountPercentageRepeatDuration type from the @polar-sh/sdk to create an object representing a percentage discount applied repeatedly.  It sets values for required properties like duration, durationInMonths, type, basisPoints, id, name, and code. This example defines a fixed percentage discount that could be 'once' or 'repeating'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutdiscountpercentagerepeatduration.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutDiscountPercentageRepeatDuration } from \"@polar-sh/sdk/models/components/checkoutdiscountpercentagerepeatduration.js\";\n\nlet value: CheckoutDiscountPercentageRepeatDuration = {\n  duration: \"once\",\n  durationInMonths: 798409,\n  type: \"fixed\",\n  basisPoints: 811785,\n  id: \"<value>\",\n  name: \"<value>\",\n  code: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating BenefitDownloadablesCreate object in TypeScript\nDESCRIPTION: This code snippet shows how to import and create an instance of the BenefitDownloadablesCreate class from the @polar-sh/sdk. The object is initialized with sample values for description, organizationId, and a properties object containing an array of file names.  Dependencies include the @polar-sh/sdk package.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablescreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitDownloadablesCreate } from \"@polar-sh/sdk/models/components/benefitdownloadablescreate.js\";\n\nlet value: BenefitDownloadablesCreate = {\n  description: \"anti questionable yippee unlike\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {\n    files: [\n      \"<value>\",\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a CheckoutDiscountFixedOnceForeverDuration Object (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create an object that adheres to the CheckoutDiscountFixedOnceForeverDuration schema. It imports the schema from the specified path and initializes an object with example values for all required fields, showcasing the structure of the object and its properties such as duration, type, amount, currency, id, name, and code. It requires the `@polar-sh/sdk` package.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutdiscountfixedonceforeverduration.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutDiscountFixedOnceForeverDuration } from \"@polar-sh/sdk/models/components/checkoutdiscountfixedonceforeverduration.js\";\n\nlet value: CheckoutDiscountFixedOnceForeverDuration = {\n  duration: \"repeating\",\n  type: \"fixed\",\n  amount: 585667,\n  currency: \"Iraqi Dinar\",\n  id: \"<value>\",\n  name: \"<value>\",\n  code: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: SubscriptionRecurringInterval Example Usage TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `SubscriptionRecurringInterval` type from the `@polar-sh/sdk/models/components/subscriptionrecurringinterval.js` module. It shows how to declare a variable of this type and assign it a valid value, such as 'year'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptionrecurringinterval.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubscriptionRecurringInterval } from \"@polar-sh/sdk/models/components/subscriptionrecurringinterval.js\";\n\nlet value: SubscriptionRecurringInterval = \"year\";\n```\n\n----------------------------------------\n\nTITLE: Float Type Declaration TypeScript\nDESCRIPTION: Demonstrates the declaration and assignment of a floating-point number value in TypeScript. The variable 'value' is explicitly typed as a number and assigned the floating-point literal 1284.03.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositorymetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Float Number Type Declaration in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a floating-point number variable in TypeScript. The variable `value` is explicitly typed as `number` and assigned a floating-point value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatesubscriptionmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Boolean type assignment\nDESCRIPTION: Demonstrates how to assign a boolean value to a variable in TypeScript. The variable 'value' is declared as a boolean and assigned a boolean literal (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdatenumbermetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a string variable in TypeScript. The variable `value` is assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustomupdatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Get Metrics Limits with Standalone Function (TypeScript)\nDESCRIPTION: Retrieves the interval limits for the metrics endpoint using the standalone `metricsLimits` function. This example uses `PolarCore` for tree-shaking benefits. It initializes `PolarCore` with an access token, calls `metricsLimits`, and handles any errors before logging the result.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/metrics/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PolarCore } from \"@polar-sh/sdk/core.js\";\nimport { metricsLimits } from \"@polar-sh/sdk/funcs/metricsLimits.js\";\n\n// Use `PolarCore` for best tree-shaking performance.\n// You can create one instance of it to use across an application.\nconst polar = new PolarCore({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const res = await metricsLimits(polar);\n\n  if (!res.ok) {\n    throw res.error;\n  }\n\n  const { value: result } = res;\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 Token Endpoint Auth Method Values\nDESCRIPTION: This snippet defines the allowed string literal values for the `OAuth2ClientConfigurationTokenEndpointAuthMethod` type. The possible values are \"client_secret_basic\", \"client_secret_post\", and \"none\". These values dictate the authentication method used when communicating with the OAuth2 token endpoint.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/oauth2clientconfigurationtokenendpointauthmethod.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"client_secret_basic\" | \"client_secret_post\" | \"none\"\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalLicenseKeysListRequest in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a CustomerPortalLicenseKeysListRequest object in TypeScript. It imports the necessary class from the `@polar-sh/sdk/models/operations/customerportallicensekeyslist.js` module and creates an instance with a sample organizationId.  The snippet showcases how to define the 'organizationId' property as an array of strings. The other fields like 'benefitId', 'page' and 'limit' can be similarly added.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportallicensekeyslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalLicenseKeysListRequest } from \"@polar-sh/sdk/models/operations/customerportallicensekeyslist.js\";\n\nlet value: CustomerPortalLicenseKeysListRequest = {\n  organizationId: [\n    \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Float Value Declaration TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a number variable named 'value' and assign a floating-point literal to it in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedrepeatdurationcreatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox Custom Field Update Type\nDESCRIPTION: This code snippet defines the TypeScript type for updating a checkbox custom field, using the `components.CustomFieldUpdateCheckbox` interface. It initializes a variable `value` of this type as an empty object. This type is intended to represent the data required to update a checkbox field.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomFieldUpdateCheckbox = {};\n```\n\n----------------------------------------\n\nTITLE: Creating CustomFieldsListRequest Instance in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an instance of the `CustomFieldsListRequest` object in TypeScript. It imports the necessary class and initializes an object with an `organizationId`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customfieldslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldsListRequest } from \"@polar-sh/sdk/models/operations/customfieldslist.js\";\n\nlet value: CustomFieldsListRequest = {\n  organizationId: [\n    \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration\nDESCRIPTION: Defines a string type for DiscountFixedOnceForeverDurationBaseMetadata. The 'value' variable is assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedonceforeverdurationbasemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: ExternalCustomerIDFilter with string array in TypeScript\nDESCRIPTION: Defines a string array named 'value' and initializes it with a single placeholder string element. This demonstrates how to use the ExternalCustomerIDFilter with an array of string values, allowing filtering by multiple external customer IDs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/externalcustomeridfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Address Model Instantiation in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and instantiate the Address model from the @polar-sh/sdk/models/components/address.js module. The example shows setting the 'country' field to \"US\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/address.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Address } from \"@polar-sh/sdk/models/components/address.js\";\n\nlet value: Address = {\n  country: \"US\",\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering by a Single Custom Field Type (TypeScript)\nDESCRIPTION: This snippet demonstrates how to filter data by a single custom field type using the `components.CustomFieldType` enum in TypeScript. The variable `value` is assigned the string literal \"date\", representing a specific custom field type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customfieldtypefilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomFieldType = \"date\";\n```\n\n----------------------------------------\n\nTITLE: String Array External Customer ID Filter (TypeScript)\nDESCRIPTION: Demonstrates how to filter by multiple external customer IDs using an array of strings. Each string in the `value` array represents an external customer ID to filter for. This is suitable when querying for meters/quantities associated with multiple external customer IDs in the `polar-js` project.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/metersquantitiesqueryparamexternalcustomeridfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: ExistingProductPrice Model Example Usage in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `ExistingProductPrice` model from the `@polar-sh/sdk/models/components/existingproductprice.js` module. It creates an instance of the model with an `id` field.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/existingproductprice.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExistingProductPrice } from \"@polar-sh/sdk/models/components/existingproductprice.js\";\n\nlet value: ExistingProductPrice = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating CustomFieldsGetRequest Instance TypeScript\nDESCRIPTION: This example demonstrates how to create an instance of the CustomFieldsGetRequest type with a required 'id' field. The CustomFieldsGetRequest is used to fetch a particular custom field from the Polar API. The id parameter is the unique identifier of the custom field being requested.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customfieldsgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldsGetRequest } from \"@polar-sh/sdk/models/operations/customfieldsget.js\";\n\nlet value: CustomFieldsGetRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: CustomerStateSubscription Usage in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the CustomerStateSubscription object from the @polar-sh/sdk library. It initializes a CustomerStateSubscription object with example values for its properties, including dates, IDs, metadata, amounts, currencies, intervals, and meter data. The snippet showcases the structure of the object and the types of data it can hold. It depends on the @polar-sh/sdk package being installed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatesubscription.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerStateSubscription } from \"@polar-sh/sdk/models/components/customerstatesubscription.js\";\n\nlet value: CustomerStateSubscription = {\n  id: \"e5149aae-e521-42b9-b24c-abb3d71eea2e\",\n  createdAt: new Date(\"2024-12-31T22:39:03.650Z\"),\n  modifiedAt: new Date(\"2025-01-04T13:00:17.295Z\"),\n  metadata: {\n    \"key\": 823316,\n  },\n  amount: 1000,\n  currency: \"usd\",\n  recurringInterval: \"month\",\n  currentPeriodStart: new Date(\"2025-02-03T13:37:00Z\"),\n  currentPeriodEnd: new Date(\"2025-03-03T13:37:00Z\"),\n  cancelAtPeriodEnd: false,\n  canceledAt: null,\n  startedAt: new Date(\"2025-01-03T13:37:00Z\"),\n  endsAt: null,\n  productId: \"d8dd2de1-21b7-4a41-8bc3-ce909c0cfe23\",\n  discountId: null,\n  meters: [\n    {\n      createdAt: new Date(\"2024-03-12T23:23:32.259Z\"),\n      modifiedAt: new Date(\"2024-04-27T13:02:09.387Z\"),\n      id: \"<value>\",\n      consumedUnits: 25,\n      creditedUnits: 100,\n      amount: 0,\n      meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n    },\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: DiscountProduct Example Usage in TypeScript\nDESCRIPTION: Demonstrates how to import and use the DiscountProduct model from the `@polar-sh/sdk/models/components/discountproduct.js` module.  It shows how to instantiate a DiscountProduct object with example data for its properties such as metadata, creation and modification dates, identifiers, descriptions, recurring settings, and organization ID. This example illustrates the structure and data types of the DiscountProduct object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountproduct.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountProduct } from \"@polar-sh/sdk/models/components/discountproduct.js\";\n\nlet value: DiscountProduct = {\n  metadata: {\n    \"key\": false,\n  },\n  createdAt: new Date(\"2023-01-15T11:39:37.097Z\"),\n  modifiedAt: new Date(\"2023-10-14T18:44:12.681Z\"),\n  id: \"<value>\",\n  name: \"<value>\",\n  description: \"siege subtle sharply\",\n  recurringInterval: \"month\",\n  isRecurring: false,\n  isArchived: false,\n  organizationId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering by Organization ID String Array in TypeScript\nDESCRIPTION: This snippet demonstrates how to filter by organization ID using an array of string values in TypeScript. It defines a string array named `value` and assigns a UUID to it. This array of organization IDs can then be used to filter a list of meters based on multiple organizations.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/meterslistqueryparamorganizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: Standalone MCP Server Installation\nDESCRIPTION: Downloads and configures the MCP server as a standalone binary. Includes downloading the appropriate binary for your architecture, making it executable, and configuring the command to run it.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -o mcp-server \\\n    https://github.com/{org}/{repo}/releases/download/{tag}/mcp-server-bun-darwin-arm64 && \\\nchmod +x mcp-server\n```\n\n----------------------------------------\n\nTITLE: Using OAuth2 Token Endpoint Auth Method\nDESCRIPTION: This snippet demonstrates how to import and use the `OAuth2ClientConfigurationTokenEndpointAuthMethod` type from the `@polar-sh/sdk` library. It shows an example of assigning the string value \"client_secret_post\" to a variable of this type. This method is used for specifying how the client authenticates with the token endpoint.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/oauth2clientconfigurationtokenendpointauthmethod.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OAuth2ClientConfigurationTokenEndpointAuthMethod } from \"@polar-sh/sdk/models/components/oauth2clientconfiguration.js\";\n\nlet value: OAuth2ClientConfigurationTokenEndpointAuthMethod =\n  \"client_secret_post\";\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth2ClientConfiguration in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an OAuth2ClientConfiguration object in TypeScript. It imports the necessary class and provides example values for the redirectUris and clientName fields. This configuration is used for setting up OAuth2 clients with specific redirect URIs and a client name.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/oauth2clientconfiguration.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OAuth2ClientConfiguration } from \"@polar-sh/sdk/models/components/oauth2clientconfiguration.js\";\n\nlet value: OAuth2ClientConfiguration = {\n  redirectUris: [\n    \"https://old-venom.com\",\n  ],\n  clientName: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerBenefitGrantGitHubRepositoryPropertiesUpdate - TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the `CustomerBenefitGrantGitHubRepositoryPropertiesUpdate` object from the `@polar-sh/sdk/models/components/customerbenefitgrantgithubrepositorypropertiesupdate.js` module. It initializes an object with a required `accountId` property.  The `accountId` parameter is a string representing the ID of the account.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantgithubrepositorypropertiesupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerBenefitGrantGitHubRepositoryPropertiesUpdate } from \"@polar-sh/sdk/models/components/customerbenefitgrantgithubrepositorypropertiesupdate.js\";\n\nlet value: CustomerBenefitGrantGitHubRepositoryPropertiesUpdate = {\n  accountId: \"<id>\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Customer ID Filter (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define a customer ID filter using a string array in TypeScript. The array can contain multiple customer ID strings. The values should be replaced with the actual customer ID strings.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparamcustomeridfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing LegacyRecurringProductPrice TypeScript\nDESCRIPTION: This snippet shows how to initialize a `LegacyRecurringProductPrice` object. It defines a constant `value` with the type `components.LegacyRecurringProductPrice` and assigns it an object with sample data for properties like `createdAt`, `modifiedAt`, `id`, `productId`, `recurringInterval`, `priceCurrency`, `minimumAmount`, `maximumAmount`, and `presetAmount`. The `createdAt` and `modifiedAt` properties are initialized with `Date` objects.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerorderproductprices.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.LegacyRecurringProductPrice = {\n  createdAt: new Date(\"2025-03-28T17:53:12.899Z\"),\n  modifiedAt: new Date(\"2024-08-10T00:40:01.700Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  recurringInterval: \"year\",\n  priceCurrency: \"<value>\",\n  minimumAmount: 981878,\n  maximumAmount: 962753,\n  presetAmount: 690635,\n};\n```\n\n----------------------------------------\n\nTITLE: ListResourceCheckoutLink Usage Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the ListResourceCheckoutLink type from the @polar-sh/sdk/models/components/listresourcecheckoutlink.js module. It creates a sample ListResourceCheckoutLink object, populating its fields with example values, including nested objects and arrays. The dates are initialized using the Date constructor.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourcecheckoutlink.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceCheckoutLink } from \"@polar-sh/sdk/models/components/listresourcecheckoutlink.js\";\n\nlet value: ListResourceCheckoutLink = {\n  items: [\n    {\n      createdAt: new Date(\"2024-09-09T21:26:26.151Z\"),\n      modifiedAt: new Date(\"2023-07-06T14:44:50.101Z\"),\n      id: \"<value>\",\n      metadata: {\n        \"key\": 3644.82,\n      },\n      paymentProcessor: \"stripe\",\n      clientSecret: \"<value>\",\n      successUrl: \"https://sociable-blight.name\",\n      label: \"<value>\",\n      allowDiscountCodes: false,\n      requireBillingAddress: false,\n      discountId: \"<value>\",\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      products: [\n        {\n          metadata: {\n            \"key\": \"<value>\",\n          },\n          createdAt: new Date(\"2023-07-30T01:48:46.245Z\"),\n          modifiedAt: new Date(\"2025-03-13T23:22:16.769Z\"),\n          id: \"<value>\",\n          name: \"<value>\",\n          description: \"unto genuine only thongs furlough over hmph or\",\n          recurringInterval: \"month\",\n          isRecurring: false,\n          isArchived: false,\n          organizationId: \"<value>\",\n          prices: [\n            {\n              createdAt: new Date(\"2025-02-08T10:57:40.553Z\"),\n              modifiedAt: new Date(\"2023-09-30T08:58:22.924Z\"),\n              id: \"<value>\",\n              isArchived: false,\n              productId: \"<value>\",\n              type: \"recurring\",\n              recurringInterval: \"year\",\n              priceCurrency: \"<value>\",\n              priceAmount: 355160,\n            },\n          ],\n          benefits: [\n            {\n              id: \"<value>\",\n              createdAt: new Date(\"2025-11-15T17:04:11.501Z\"),\n              modifiedAt: new Date(\"2023-11-12T17:47:04.748Z\"),\n              type: \"meter_credit\",\n              description:\n                \"lasting wee spherical rewrite superficial shoulder graffiti rag adult retract\",\n              selectable: false,\n              deletable: false,\n              organizationId: \"<value>\",\n            },\n          ],\n          medias: [\n            {\n              id: \"<value>\",\n              organizationId: \"<value>\",\n              name: \"<value>\",\n              path: \"/usr/src\",\n              mimeType: \"<value>\",\n              size: 67477,\n              storageVersion: \"<value>\",\n              checksumEtag: \"<value>\",\n              checksumSha256Base64: \"<value>\",\n              checksumSha256Hex: \"<value>\",\n              lastModifiedAt: new Date(\"2024-01-23T01:28:32.431Z\"),\n              version: \"<value>\",\n              isUploaded: false,\n              createdAt: new Date(\"2025-03-02T05:41:12.613Z\"),\n              sizeReadable: \"<value>\",\n              publicUrl: \"https://worldly-captain.biz\",\n            },\n          ],\n        },\n      ],\n      discount: {\n        duration: \"forever\",\n        type: \"percentage\",\n        amount: 796004,\n        currency: \"Guarani\",\n        createdAt: new Date(\"2023-09-19T19:25:20.184Z\"),\n        modifiedAt: new Date(\"2024-11-06T13:44:36.687Z\"),\n        id: \"<value>\",\n        metadata: {\n          \"key\": \"<value>\",\n        },\n        name: \"<value>\",\n        code: \"<value>\",\n        startsAt: new Date(\"2023-04-01T19:27:46.945Z\"),\n        endsAt: new Date(\"2025-06-29T15:53:41.746Z\"),\n        maxRedemptions: 686205,\n        redemptionsCount: 371816,\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      },\n      url: \"https://knotty-bookend.name\",\n    },\n  ],\n  pagination: {\n    totalCount: 461590,\n    maxPage: 761926,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Fixed Repeat Discount TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a fixed amount discount that repeats for a specified duration. It defines a `DiscountFixedRepeatDurationCreate` object with properties such as duration set to \"forever\", durationInMonths, type set to \"percentage\", an amount, a name, and an organizationId. The `components` namespace needs to be imported or defined.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountcreate.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DiscountFixedRepeatDurationCreate = {\n  duration: \"forever\",\n  durationInMonths: 446914,\n  type: \"percentage\",\n  amount: 720369,\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Array External Customer ID Filter in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a string array value for filtering by external customer ID. The array should contain a list of external customer IDs to be used for filtering.  This example is implemented in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparamexternalcustomeridfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Using Per-Operation Security with Customer Session in TypeScript\nDESCRIPTION: This code demonstrates how to use per-operation security schemes by passing a customer session ID from an environment variable when calling a specific SDK method.  It initializes the SDK without any global authentication and then uses the customerSession parameter within the customerPortal.benefitGrants.list method.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar();\n\nasync function run() {\n  const result = await polar.customerPortal.benefitGrants.list({\n    customerSession: process.env[\"POLAR_CUSTOMER_SESSION\"] ?? \"\",\n  }, {\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Customer Meter Sort Property Values in TypeScript\nDESCRIPTION: This code lists the possible values for the `CustomerCustomerMeterSortProperty` enum. These values are used to specify the sorting criteria when querying customer meters. The values allow sorting by fields such as 'created_at', 'modified_at', 'meter_id', 'meter_name', 'consumed_units', 'credited_units', and 'balance', in both ascending and descending order.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customercustomermetersortproperty.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"created_at\" | \"-created_at\" | \"modified_at\" | \"-modified_at\" | \"meter_id\" | \"-meter_id\" | \"meter_name\" | \"-meter_name\" | \"consumed_units\" | \"-consumed_units\" | \"credited_units\" | \"-credited_units\" | \"balance\" | \"-balance\"\n```\n\n----------------------------------------\n\nTITLE: Integer Number Metadata Creation\nDESCRIPTION: Demonstrates how to create an integer number metadata value in TypeScript. This snippet defines a constant variable named 'value' and assigns it an integer value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metercreatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Float Number Type Declaration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a float number variable with a sample value in TypeScript. It showcases the syntax for defining a numeric variable representing a floating-point number.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditupdatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Boolean Metadata Value Declaration TypeScript\nDESCRIPTION: This code snippet shows how to declare a boolean value for customer metadata within the PolarJS context. The `value` constant is assigned a boolean literal (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutupdatecustomermetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Initializing SubscriptionRevoke Model TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the SubscriptionRevoke model from the @polar-sh/sdk library and initialize an empty object of type SubscriptionRevoke using TypeScript. The SubscriptionRevoke model is part of the components module.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptionrevoke.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubscriptionRevoke } from \"@polar-sh/sdk/models/components/subscriptionrevoke.js\";\n\nlet value: SubscriptionRevoke = {};\n```\n\n----------------------------------------\n\nTITLE: Import and Usage of BenefitGitHubRepositoryCreatePropertiesPermission\nDESCRIPTION: This snippet demonstrates how to import and use the BenefitGitHubRepositoryCreatePropertiesPermission type from the @polar-sh/sdk/models/components/benefitgithubrepositorycreateproperties.js module. It shows how to assign a value to a variable of this type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositorycreatepropertiespermission.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitGitHubRepositoryCreatePropertiesPermission } from \"@polar-sh/sdk/models/components/benefitgithubrepositorycreateproperties.js\";\n\nlet value: BenefitGitHubRepositoryCreatePropertiesPermission = \"admin\";\n```\n\n----------------------------------------\n\nTITLE: Date Type Declaration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a Date variable for a custom field in TypeScript. The variable `value` is assigned a new Date object, initialized with a specific date string.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutcreatecustomfielddata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: Date = new Date(\"2023-12-07T03:31:58.587Z\");\n```\n\n----------------------------------------\n\nTITLE: CustomerPortalBenefitGrantsGetSecurity Usage - TypeScript\nDESCRIPTION: This code snippet illustrates how to import and utilize the `CustomerPortalBenefitGrantsGetSecurity` type from the `@polar-sh/sdk/models/operations/customerportalbenefitgrantsget.js` module. It creates an object of this type, assigning a string value to the `customerSession` property. This object is likely used to configure the security context for an API call to retrieve customer portal benefit grants.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalbenefitgrantsgetsecurity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalBenefitGrantsGetSecurity } from \"@polar-sh/sdk/models/operations/customerportalbenefitgrantsget.js\";\n\nlet value: CustomerPortalBenefitGrantsGetSecurity = {\n  customerSession: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Number Value Assignment TypeScript\nDESCRIPTION: Defines a number variable named 'value' and assigns it a numerical value (128403). This illustrates how to represent numerical data when updating public custom fields. The variable is explicitly typed as 'number'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutupdatepubliccustomfielddata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: BenefitCustomProperties Usage Example (TypeScript)\nDESCRIPTION: Demonstrates how to import and instantiate the BenefitCustomProperties model in TypeScript. The model contains a required string field named 'note'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustomproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitCustomProperties } from \"@polar-sh/sdk/models/components/benefitcustomproperties.js\";\n\nlet value: BenefitCustomProperties = {\n  note: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: OrderItemSchema Example Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create and use an instance of the OrderItemSchema in TypeScript. It shows how to import the schema and initialize its fields with example values, including dates and strings. The `OrderItemSchema` represents a line item in an order and includes fields for timestamps, IDs, labels, amounts, and other properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/orderitemschema.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrderItemSchema } from \"@polar-sh/sdk/models/components/orderitemschema.js\";\n\nlet value: OrderItemSchema = {\n  createdAt: new Date(\"2024-07-10T10:44:08.434Z\"),\n  modifiedAt: new Date(\"2025-07-08T04:25:44.133Z\"),\n  id: \"<value>\",\n  label: \"<value>\",\n  amount: 557925,\n  taxAmount: 844213,\n  proration: false,\n  productPriceId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Text Field\nDESCRIPTION: This snippet demonstrates how to create a custom text field using the CustomFieldCreateText schema from the @polar-sh/sdk. It sets properties such as slug, name, and organizationId. The properties object is initialized as empty.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreatetext.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldCreateText } from \"@polar-sh/sdk/models/components/customfieldcreatetext.js\";\n\nlet value: CustomFieldCreateText = {\n  slug: \"<value>\",\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Customer ID Filter - TypeScript\nDESCRIPTION: Demonstrates how to define a string array representing a list of customer IDs for filtering. This allows filtering meters quantities based on multiple customer IDs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/metersquantitiesqueryparamcustomeridfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Creating EventCreateExternalCustomer object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the EventCreateExternalCustomer object using TypeScript. It imports the EventCreateExternalCustomer class from the '@polar-sh/sdk/models/components/eventcreateexternalcustomer.js' module and initializes it with sample values for name, organizationId, and externalCustomerId properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventcreateexternalcustomer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventCreateExternalCustomer } from \"@polar-sh/sdk/models/components/eventcreateexternalcustomer.js\";\n\nlet value: EventCreateExternalCustomer = {\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  externalCustomerId: \"<id>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining LegacyRecurringProductPrice Type - Typescript\nDESCRIPTION: This code snippet defines an example of the `LegacyRecurringProductPrice` type. It showcases how to instantiate this type with sample data, including dates, IDs, and various price-related properties such as minimum, maximum, and preset amounts. It also specifies recurring intervals and currency.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutproductprices.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.LegacyRecurringProductPrice = {\n  createdAt: new Date(\"2025-03-28T17:53:12.899Z\"),\n  modifiedAt: new Date(\"2024-08-10T00:40:01.700Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  recurringInterval: \"year\",\n  priceCurrency: \"<value>\",\n  minimumAmount: 981878,\n  maximumAmount: 962753,\n  presetAmount: 690635,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CheckoutDiscountFixedOnceForeverDuration in TypeScript\nDESCRIPTION: This snippet shows how to define a `CheckoutDiscountFixedOnceForeverDuration` object in TypeScript. It includes properties like `duration`, `type`, `amount`, `currency`, `id`, `name`, and `code`. The `duration` is set to \"forever\", and the `type` is set to \"percentage\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpublicconfirmeddiscount.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CheckoutDiscountFixedOnceForeverDuration = {\n  duration: \"forever\",\n  type: \"percentage\",\n  amount: 700624,\n  currency: \"Nuevo Sol\",\n  id: \"<value>\",\n  name: \"<value>\",\n  code: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Import and Instantiate BenefitCustomCreateProperties in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the BenefitCustomCreateProperties interface from the specified module and instantiate an empty object of that type. This interface is used for defining the properties required to create a custom benefit.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustomcreateproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitCustomCreateProperties } from \"@polar-sh/sdk/models/components/benefitcustomcreateproperties.js\";\n\nlet value: BenefitCustomCreateProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscountPercentageOnceForeverDurationBase in TypeScript\nDESCRIPTION: This code snippet initializes a `DiscountPercentageOnceForeverDurationBase` object, setting the duration to 'once' and the type to 'fixed'. It includes properties like `basisPoints` for the percentage amount, creation and modification dates, an ID, metadata, a name, a code, start and end dates, max redemptions, redemption count, and organization ID. This represents a percentage-based discount that is applied once.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/orderdiscount.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DiscountPercentageOnceForeverDurationBase = {\n  duration: \"once\",\n  type: \"fixed\",\n  basisPoints: 599069,\n  createdAt: new Date(\"2024-01-10T18:51:26.386Z\"),\n  modifiedAt: new Date(\"2024-04-08T21:26:27.882Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": false,\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2025-04-12T16:04:59.265Z\"),\n  endsAt: new Date(\"2024-11-17T00:52:34.763Z\"),\n  maxRedemptions: 992406,\n  redemptionsCount: 293950,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Benefits with Polar SDK\nDESCRIPTION: This snippet demonstrates how to list benefits using the Polar SDK. It initializes the Polar client with an access token and then calls the `benefits.list` method, providing an organization ID. The result is then iterated over to handle each page of benefits.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/benefits/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.benefits.list({\n    organizationId: [\n      \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    ],\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Organization ID Filter with String Array in Typescript\nDESCRIPTION: Demonstrates filtering events using an array of organization IDs represented as strings. The `value` constant is assigned an array of strings, each representing an organization's UUID. This snippet shows how to filter using multiple organization IDs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/eventslistnamesqueryparamorganizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: Import ExpiredCheckoutError in TypeScript\nDESCRIPTION: Imports the `ExpiredCheckoutError` class from the `@polar-sh/sdk/models/errors/expiredcheckouterror.js` module. This allows the developer to use the `ExpiredCheckoutError` model in their TypeScript code.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/errors/expiredcheckouterror.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpiredCheckoutError } from \"@polar-sh/sdk/models/errors/expiredcheckouterror.js\";\n\n// No examples available for this model\n```\n\n----------------------------------------\n\nTITLE: Initializing CheckoutDiscountPercentageOnceForeverDuration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a `CheckoutDiscountPercentageOnceForeverDuration` object in TypeScript. It imports the necessary class from the `@polar-sh/sdk` and assigns values to the object's properties. The `duration`, `type`, `basisPoints`, `id`, `name`, and `code` properties are set to example values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutdiscountpercentageonceforeverduration.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutDiscountPercentageOnceForeverDuration } from \"@polar-sh/sdk/models/components/checkoutdiscountpercentageonceforeverduration.js\";\n\nlet value: CheckoutDiscountPercentageOnceForeverDuration = {\n  duration: \"repeating\",\n  type: \"fixed\",\n  basisPoints: 234298,\n  id: \"<value>\",\n  name: \"<value>\",\n  code: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: ProductIDFilter with string array in TypeScript\nDESCRIPTION: This snippet demonstrates how to use ProductIDFilter with an array of string values. The array is assigned to a constant `value` of type `string[]`. This would typically be used as input to a filtering function or component, allowing for filtering against multiple product IDs at once.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/productidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: ListResourceOrder Example Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and instantiate a `ListResourceOrder` object with sample data in TypeScript. It showcases the structure of the object, including nested properties like `items` (an array of order objects) and `pagination`. It uses placeholder values and example dates for demonstration purposes.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourceorder.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceOrder } from \"@polar-sh/sdk/models/components/listresourceorder.js\";\n\nlet value: ListResourceOrder = {\n  items: [\n    {\n      createdAt: new Date(\"2023-10-09T14:30:26.451Z\"),\n      modifiedAt: new Date(\"2024-08-26T12:56:04.119Z\"),\n      id: \"<value>\",\n      metadata: {\n        \"key\": 6430.92,\n      },\n      status: \"refunded\",\n      paid: true,\n      subtotalAmount: 781506,\n      discountAmount: 260528,\n      netAmount: 406538,\n      amount: 241123,\n      taxAmount: 226489,\n      totalAmount: 541848,\n      refundedAmount: 15913,\n      refundedTaxAmount: 538708,\n      currency: \"Pataca\",\n      billingReason: \"subscription_create\",\n      billingAddress: {\n        country: \"US\",\n      },\n      customerId: \"<value>\",\n      productId: \"<value>\",\n      discountId: \"<value>\",\n      subscriptionId: \"<value>\",\n      checkoutId: \"<value>\",\n      customer: {\n        id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n        createdAt: new Date(\"2024-02-17T21:15:58.875Z\"),\n        modifiedAt: new Date(\"2024-08-09T10:54:47.875Z\"),\n        metadata: {\n          \"key\": 2074,\n        },\n        externalId: \"usr_1337\",\n        email: \"customer@example.com\",\n        emailVerified: true,\n        name: \"John Doe\",\n        billingAddress: {\n          country: \"SE\",\n        },\n        taxId: [\n          \"911144442\",\n          \"us_ein\",\n        ],\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        deletedAt: new Date(\"2025-02-07T12:58:43.718Z\"),\n        avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n      },\n      userId: \"<value>\",\n      product: {\n        metadata: {\n          \"key\": 7457.81,\n        },\n        createdAt: new Date(\"2023-05-16T22:14:53.689Z\"),\n        modifiedAt: new Date(\"2024-09-25T16:39:47.501Z\"),\n        id: \"<value>\",\n        name: \"<value>\",\n        description:\n          \"yowza phew terribly boss bouncy strong needily fooey oxidise famously\",\n        recurringInterval: \"month\",\n        isRecurring: false,\n        isArchived: false,\n        organizationId: \"<value>\",\n      },\n      discount: {\n        duration: \"repeating\",\n        durationInMonths: 563597,\n        type: \"fixed\",\n        amount: 831995,\n        currency: \"CFA Franc BEAC\",\n        createdAt: new Date(\"2023-05-09T17:14:55.049Z\"),\n        modifiedAt: new Date(\"2024-04-17T17:06:08.126Z\"),\n        id: \"<value>\",\n        metadata: {\n          \"key\": false,\n        },\n        name: \"<value>\",\n        code: \"<value>\",\n        startsAt: new Date(\"2025-11-27T10:24:06.343Z\"),\n        endsAt: new Date(\"2025-04-11T01:42:11.892Z\"),\n        maxRedemptions: 263405,\n        redemptionsCount: 33006,\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      },\n      subscription: {\n        metadata: {\n          \"key\": false,\n        },\n        createdAt: new Date(\"2025-09-28T22:58:26.788Z\"),\n        modifiedAt: new Date(\"2025-03-07T10:56:16.549Z\"),\n        id: \"<value>\",\n        amount: 393618,\n        currency: \"Belize Dollar\",\n        recurringInterval: \"year\",\n        status: \"incomplete_expired\",\n        currentPeriodStart: new Date(\"2024-05-01T09:13:40.896Z\"),\n        currentPeriodEnd: new Date(\"2025-04-13T10:13:06.820Z\"),\n        cancelAtPeriodEnd: false,\n        canceledAt: new Date(\"2024-03-12T12:51:44.220Z\"),\n        startedAt: new Date(\"2024-01-22T19:47:26.156Z\"),\n        endsAt: new Date(\"2024-12-19T01:15:01.022Z\"),\n        endedAt: new Date(\"2025-11-28T21:35:19.114Z\"),\n        customerId: \"<value>\",\n        productId: \"<value>\",\n        discountId: \"<value>\",\n        checkoutId: \"<value>\",\n        customerCancellationReason: \"missing_features\",\n        customerCancellationComment: \"<value>\",\n      },\n      items: [\n        {\n          createdAt: new Date(\"2024-01-24T00:21:31.535Z\"),\n          modifiedAt: new Date(\"2023-06-26T21:04:57.109Z\"),\n          id: \"<value>\",\n          label: \"<value>\",\n          amount: 307758,\n          taxAmount: 530031,\n          proration: false,\n          productPriceId: \"<value>\",\n        },\n      ],\n    },\n  ],\n  pagination: {\n    totalCount: 294448,\n    maxPage: 721884,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DownloadableFileRead Type in TypeScript\nDESCRIPTION: This code snippet defines the structure of a `DownloadableFileRead` object using TypeScript. It specifies properties such as `id`, `organizationId`, `name`, `path`, `mimeType`, `size`, checksums (`checksumEtag`, `checksumSha256Base64`, `checksumSha256Hex`), timestamps (`lastModifiedAt`, `createdAt`), `version`, `isUploaded`, and `sizeReadable`. The example demonstrates how to create an object of this type with placeholder values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/filesupdateresponsefilesupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DownloadableFileRead = {\n  id: \"<value>\",\n  organizationId: \"<value>\",\n  name: \"<value>\",\n  path: \"/sbin\",\n  mimeType: \"<value>\",\n  size: 822101,\n  storageVersion: \"<value>\",\n  checksumEtag: \"<value>\",\n  checksumSha256Base64: \"<value>\",\n  checksumSha256Hex: \"<value>\",\n  lastModifiedAt: new Date(\"2023-12-23T00:34:21.292Z\"),\n  version: \"<value>\",\n  isUploaded: false,\n  createdAt: new Date(\"2025-08-22T04:02:51.257Z\"),\n  sizeReadable: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Import and Assign Customer Meter Sort Property in TypeScript\nDESCRIPTION: This code snippet shows how to import the `CustomerCustomerMeterSortProperty` enum from the `@polar-sh/sdk/models/components/customercustomermetersortproperty.js` module and assign it to a variable. The possible values include sorting by created_at, modified_at, meter_id, meter_name, consumed_units, credited_units, and balance in ascending or descending order.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customercustomermetersortproperty.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerCustomerMeterSortProperty } from \"@polar-sh/sdk/models/components/customercustomermetersortproperty.js\";\n\nlet value: CustomerCustomerMeterSortProperty = \"credited_units\";\n```\n\n----------------------------------------\n\nTITLE: String Customer ID Filter - TypeScript\nDESCRIPTION: Defines a string type for filtering refunds by a single customer ID. This is useful when you want to retrieve refunds associated with a specific customer.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/refundslistqueryparamcustomeridfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: ListResourceOrganization Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create and populate a `ListResourceOrganization` object with sample data in TypeScript. It imports the `ListResourceOrganization` component from the `@polar-sh/sdk/models/components/listresourceorganization.js` module, creates sample data for organization items (including dates, IDs, names, and other fields), and configures pagination settings. The purpose is to provide a concrete example of how to use the `ListResourceOrganization` type and its nested structures.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourceorganization.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceOrganization } from \"@polar-sh/sdk/models/components/listresourceorganization.js\";\n\nlet value: ListResourceOrganization = {\n  items: [\n    {\n      createdAt: new Date(\"2025-02-09T09:35:20.555Z\"),\n      modifiedAt: new Date(\"2024-10-31T04:26:04.861Z\"),\n      id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      name: \"<value>\",\n      slug: \"<value>\",\n      avatarUrl: \"https://key-incandescence.net/\",\n      email: \"Alison_Carter@hotmail.com\",\n      website: \"<value>\",\n      socials: [\n        {\n          platform: \"other\",\n          url: \"https://frightened-sundae.com\",\n        },\n      ],\n      detailsSubmittedAt: new Date(\"2025-05-28T00:41:39.380Z\"),\n      featureSettings: {},\n      subscriptionSettings: {\n        allowMultipleSubscriptions: false,\n        allowCustomerUpdates: false,\n        prorationBehavior: \"invoice\",\n      },\n    },\n  ],\n  pagination: {\n    totalCount: 53217,\n    maxPage: 47105,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining OrganizationAvatarFileRead Type in TypeScript\nDESCRIPTION: This code snippet defines the structure of the `OrganizationAvatarFileRead` type, representing an organization avatar file. It includes fields like `id`, `organizationId`, `name`, `path`, `mimeType`, `size`, checksums (`checksumEtag`, `checksumSha256Base64`, `checksumSha256Hex`), timestamps (`lastModifiedAt`, `createdAt`), `version`, `isUploaded`, `sizeReadable`, and `publicUrl`.  The example provides a template using TypeScript for defining the expected organization avatar file data.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/filesuploadedresponsefilesuploaded.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.OrganizationAvatarFileRead = {\n  id: \"<value>\",\n  organizationId: \"<value>\",\n  name: \"<value>\",\n  path: \"/Applications\",\n  mimeType: \"<value>\",\n  size: 524459,\n  storageVersion: \"<value>\",\n  checksumEtag: \"<value>\",\n  checksumSha256Base64: \"<value>\",\n  checksumSha256Hex: \"<value>\",\n  lastModifiedAt: new Date(\"2023-02-25T08:33:28.298Z\"),\n  version: \"<value>\",\n  isUploaded: false,\n  createdAt: new Date(\"2025-07-07T06:37:40.079Z\"),\n  sizeReadable: \"<value>\",\n  publicUrl: \"https://winding-glider.info\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing OrganizationCreate in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize an `OrganizationCreate` object with required fields `name` and `slug` using the `@polar-sh/sdk` library. It showcases the basic structure for creating an organization object. Other optional fields are also available, as described in the accompanying documentation.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/organizationcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrganizationCreate } from \"@polar-sh/sdk/models/components/organizationcreate.js\";\n\nlet value: OrganizationCreate = {\n  name: \"<value>\",\n  slug: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Example Usage of BenefitMeterCreditSubscriberProperties in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and instantiate the `BenefitMeterCreditSubscriberProperties` interface from the `@polar-sh/sdk` library. It shows how to define the `units` (number) and `meterId` (string) properties for a subscriber's benefit.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditsubscriberproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitMeterCreditSubscriberProperties } from \"@polar-sh/sdk/models/components/benefitmetercreditsubscriberproperties.js\";\n\nlet value: BenefitMeterCreditSubscriberProperties = {\n  units: 179462,\n  meterId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Organization ID Filter with string in TypeScript\nDESCRIPTION: This code snippet demonstrates how to filter by a single organization ID using a string value in TypeScript.  It defines a constant `value` of type `string` assigned to a specific organization ID.  This filter can be used to retrieve refunds associated with that specific organization.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/refundslistqueryparamorganizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodGeneric Type in TypeScript\nDESCRIPTION: This code snippet defines the structure of the `PaymentMethodGeneric` type, which represents a generic payment method. It includes properties like `id`, `type`, `createdAt`, and `default`. The `type` property specifies the type of the generic payment method. This snippet demonstrates creating an object of `components.PaymentMethodGeneric` type with example values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalcustomersaddpaymentmethodresponsecustomerportalcustomersaddpaymentmethod.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.PaymentMethodGeneric = {\n  id: \"<id>\",\n  type: \"<value>\",\n  createdAt: new Date(\"2025-04-30T09:20:24.064Z\"),\n  default: false,\n};\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a string variable in TypeScript and assign it a string value. The variable 'value' is explicitly typed as 'string' and assigned a sample string value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutcustomfielddata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitDownloadablesUpdate Type - TypeScript\nDESCRIPTION: Initializes an empty `BenefitDownloadablesUpdate` object. This snippet defines a downloadables benefit update type, requiring the `components` module. This type would be used to control access to downloadable resources within Polar.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/benefitsupdatebenefitupdate.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitDownloadablesUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: Import PaymentError Model in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import the `PaymentError` model from the `@polar-sh/sdk/models/errors/paymenterror.js` module.  It sets the stage for using the `PaymentError` model in TypeScript code. No examples of actual instantiation or usage are provided within the source.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/errors/paymenterror.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { PaymentError } from \"@polar-sh/sdk/models/errors/paymenterror.js\";\n\n// No examples available for this model\n```\n\n----------------------------------------\n\nTITLE: Func Enum Usage Example - TypeScript\nDESCRIPTION: Demonstrates how to import and use the Func enum from the @polar-sh/sdk/models/components/propertyaggregation.js module. It shows assigning a value from the enum to a variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/func.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Func } from \"@polar-sh/sdk/models/components/propertyaggregation.js\";\n\nlet value: Func = \"avg\";\n```\n\n----------------------------------------\n\nTITLE: Date Type Declaration in TypeScript\nDESCRIPTION: This snippet shows how to declare a Date variable in TypeScript and assign it a Date object. The variable 'value' is explicitly typed as 'Date' and assigned a new Date object created with a specific date string.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutcustomfielddata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: Date = new Date(\"2023-12-07T03:31:58.587Z\");\n```\n\n----------------------------------------\n\nTITLE: Integer Value Assignment in TypeScript\nDESCRIPTION: This snippet demonstrates how to assign an integer value to a variable in TypeScript. It declares a constant variable named 'value' of type number and assigns it the value 128403. This is used as an example for a checkbox custom field metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreatecheckboxmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Organization ID Filter: String Type - TypeScript\nDESCRIPTION: Demonstrates filtering benefit grants by a single organization ID string. The `value` variable is assigned a string representing an organization ID. This is a direct method of filtering for a specific organization.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalbenefitgrantslistqueryparamorganizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: String Value Assignment TypeScript\nDESCRIPTION: This snippet demonstrates how to assign a string value to a variable in TypeScript. The variable `value` is declared as a string and initialized with the string \"<value>\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productupdatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Benefit ID Filter - TypeScript\nDESCRIPTION: This snippet shows how to filter benefit grants by a single benefit ID using a string value in TypeScript. It demonstrates the declaration of a string variable and its assignment with a placeholder value. This is used as a filter for identifying the specific benefit ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalbenefitgrantslistqueryparambenefitidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: CheckoutsListRequest Example - Typescript\nDESCRIPTION: Illustrates how to create a CheckoutsListRequest object in Typescript, including importing the necessary class and setting the organizationId property.  This example demonstrates setting the organizationId filter using a UUID. No external dependencies are explicitly listed beyond the polar-sh SDK models.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutsListRequest } from \"@polar-sh/sdk/models/operations/checkoutslist.js\";\n\nlet value: CheckoutsListRequest = {\n  organizationId: [\n    \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Customer ID Filter - TypeScript\nDESCRIPTION: Defines a string array type for filtering refunds by multiple customer IDs. This allows you to retrieve refunds associated with a list of specific customers.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/refundslistqueryparamcustomeridfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitDiscordUpdate Type - TypeScript\nDESCRIPTION: Initializes an empty `BenefitDiscordUpdate` object. This snippet illustrates the definition of a Discord benefit update type, relying on the `components` module. This type is used for managing Discord-related benefits within the Polar ecosystem.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/benefitsupdatebenefitupdate.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitDiscordUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerSessionCustomerIDCreate in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `CustomerSessionCustomerIDCreate` object in TypeScript. It imports the necessary type definition from the `@polar-sh/sdk` package and initializes an object with the `customerId` field.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customersessioncustomeridcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerSessionCustomerIDCreate } from \"@polar-sh/sdk/models/components/customersessioncustomeridcreate.js\";\n\nlet value: CustomerSessionCustomerIDCreate = {\n  customerId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating CustomFieldText Instance in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to create an instance of the CustomFieldText schema. It imports the CustomFieldText type and then assigns a value to a variable of that type, initializing its properties with example data. This includes setting date values for createdAt and modifiedAt, string values for id, slug, name, and organizationId, and an empty object for properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldtext.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldText } from \"@polar-sh/sdk/models/components/customfieldtext.js\";\n\nlet value: CustomFieldText = {\n  createdAt: new Date(\"2024-03-27T18:15:57.451Z\"),\n  modifiedAt: new Date(\"2025-11-25T02:24:45.002Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": \"<value>\",\n  },\n  slug: \"<value>\",\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: BenefitType Assignment - Array - TypeScript\nDESCRIPTION: Demonstrates assigning an array of values to the `components.BenefitType`. This example shows how to create an array containing the string \"github_repository\" and assign it to a variable of type `components.BenefitType[]`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparambenefittypefilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitType[] = [\n  \"github_repository\",\n];\n```\n\n----------------------------------------\n\nTITLE: FilesDeleteRequest Model Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `FilesDeleteRequest` model from the `@polar-sh/sdk/models/operations/filesdelete.js` module. The `id` field is required when creating an instance of the `FilesDeleteRequest` object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/filesdeleterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FilesDeleteRequest } from \"@polar-sh/sdk/models/operations/filesdelete.js\";\n\nlet value: FilesDeleteRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: String External Customer ID Filter in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a string value for filtering by external customer ID.  The value should represent the external customer ID to be used for filtering. This example utilizes TypeScript syntax.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparamexternalcustomeridfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Defining CheckoutDiscountFixedRepeatDuration in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a `CheckoutDiscountFixedRepeatDuration` object in TypeScript. Properties include `duration`, `durationInMonths`, `type`, `amount`, `currency`, `id`, `name`, and `code`.  The `duration` is set to \"once\" and `type` to \"fixed\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpublicconfirmeddiscount.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CheckoutDiscountFixedRepeatDuration = {\n  duration: \"once\",\n  durationInMonths: 856949,\n  type: \"fixed\",\n  amount: 177391,\n  currency: \"Uzbekistan Sum\",\n  id: \"<value>\",\n  name: \"<value>\",\n  code: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: ExternalCustomerIDFilter with string in TypeScript\nDESCRIPTION: Defines a string variable named 'value' and assigns it a placeholder string value.  This snippet illustrates the usage of the ExternalCustomerIDFilter with a single string value for the external customer ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/externalcustomeridfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Import and Use MetricType in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the MetricType enum from the `@polar-sh/sdk/models/components/metrictype.js` module and assign a value to a variable of that type. The example shows assigning the value \"currency\" to the variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metrictype.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MetricType } from \"@polar-sh/sdk/models/components/metrictype.js\";\n\nlet value: MetricType = \"currency\";\n```\n\n----------------------------------------\n\nTITLE: Creating CustomersGetExternalRequest Instance in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and instantiate the `CustomersGetExternalRequest` model in TypeScript.  It sets the `externalId` property with a sample value. This example requires the `@polar-sh/sdk` package to be installed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customersgetexternalrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomersGetExternalRequest } from \"@polar-sh/sdk/models/operations/customersgetexternal.js\";\n\nlet value: CustomersGetExternalRequest = {\n  externalId: \"<id>\",\n};\n```\n\n----------------------------------------\n\nTITLE: CheckoutLinkUpdate Example Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize an empty CheckoutLinkUpdate object in TypeScript. It shows the basic setup for using the CheckoutLinkUpdate schema from the @polar-sh/sdk/models/components/checkoutlinkupdate.js module.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutLinkUpdate } from \"@polar-sh/sdk/models/components/checkoutlinkupdate.js\";\n\nlet value: CheckoutLinkUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating UserInfoUser in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `UserInfoUser` model from the `@polar-sh/sdk/models/components/userinfouser.js` module and create an instance of it with the `sub` property populated. The `sub` property is a required field.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/userinfouser.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserInfoUser } from \"@polar-sh/sdk/models/components/userinfouser.js\";\n\nlet value: UserInfoUser = {\n  sub: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Organization ID with String in TypeScript\nDESCRIPTION: This code snippet shows how to define a filter for organization ID using a single string value in TypeScript.  It declares a constant `value` of type `string` and assigns it a UUID. This is used for filtering subscriptions based on a single organization ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalsubscriptionslistqueryparamorganizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Definition TypeScript\nDESCRIPTION: Defines a boolean variable named 'value' and assigns it a boolean literal (false). This snippet demonstrates how to define boolean values for event metadata in polar-js using TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Filtering by Array of Product Billing Types - TypeScript\nDESCRIPTION: This code snippet shows how to filter orders by an array of product billing types. It creates an array of `components.ProductBillingType` and assigns the value 'one_time' to the first element of the array.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalorderslistqueryparamproductbillingtypefilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductBillingType[] = [\n  \"one_time\",\n];\n```\n\n----------------------------------------\n\nTITLE: Creating MetricsIntervalLimit Instance in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and create an instance of the `MetricsIntervalLimit` component from the `@polar-sh/sdk/models/components/metricsintervallimit.js` module.  It initializes the `maxDays` property with a numeric value. The component is intended for use within the polar-js SDK to limit the time range when fetching metrics.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metricsintervallimit.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MetricsIntervalLimit } from \"@polar-sh/sdk/models/components/metricsintervallimit.js\";\n\nlet value: MetricsIntervalLimit = {\n  maxDays: 962322,\n};\n```\n\n----------------------------------------\n\nTITLE: Integer Number Type Declaration TypeScript\nDESCRIPTION: Declares a number variable named 'value' and assigns it an integer value.  This shows the syntax for defining an integer number in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositorysubscribermetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Oauth2 Delete Client Request Initialization in Typescript\nDESCRIPTION: This code snippet demonstrates how to import and initialize an `Oauth2ClientsOauth2DeleteClientRequest` object in TypeScript. It sets the `clientId` property, which is a required parameter for deleting an OAuth2 client.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/oauth2clientsoauth2deleteclientrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Oauth2ClientsOauth2DeleteClientRequest } from \"@polar-sh/sdk/models/operations/oauth2clientsoauth2deleteclient.js\";\n\nlet value: Oauth2ClientsOauth2DeleteClientRequest = {\n  clientId: \"<id>\",\n};\n```\n\n----------------------------------------\n\nTITLE: BenefitType Values TypeScript\nDESCRIPTION: This code snippet defines the possible values of the BenefitType enumeration. These values represent the different types of benefits that can be associated with a product or service.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefittype.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"custom\" | \"discord\" | \"github_repository\" | \"downloadables\" | \"license_keys\" | \"meter_credit\"\n```\n\n----------------------------------------\n\nTITLE: ProductPriceCustom Example Initialization in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and initialize a `ProductPriceCustom` object using the `@polar-sh/sdk`. It sets various properties such as `createdAt`, `modifiedAt`, `id`, `productId`, `type`, `recurringInterval`, `priceCurrency`, `minimumAmount`, `maximumAmount`, and `presetAmount`. Note the import statement from `@polar-sh/sdk/models/components/productpricecustom.js`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productpricecustom.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductPriceCustom } from \"@polar-sh/sdk/models/components/productpricecustom.js\";\n\nlet value: ProductPriceCustom = {\n  createdAt: new Date(\"2023-06-13T10:32:41.434Z\"),\n  modifiedAt: new Date(\"2025-05-23T09:58:04.118Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  type: \"one_time\",\n  recurringInterval: \"year\",\n  priceCurrency: \"<value>\",\n  minimumAmount: 851910,\n  maximumAmount: 768715,\n  presetAmount: 2538,\n};\n```\n\n----------------------------------------\n\nTITLE: CustomerStateMeter Example Usage in TypeScript\nDESCRIPTION: Demonstrates how to import and instantiate a CustomerStateMeter object with sample data.  It shows the required fields and their expected data types. It imports CustomerStateMeter from the polar-sh SDK and defines a sample CustomerStateMeter object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatemeter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerStateMeter } from \"@polar-sh/sdk/models/components/customerstatemeter.js\";\n\nlet value: CustomerStateMeter = {\n  createdAt: new Date(\"2024-11-22T20:57:08.686Z\"),\n  modifiedAt: new Date(\"2023-12-02T03:33:13.373Z\"),\n  meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n  consumedUnits: 25,\n  creditedUnits: 100,\n  balance: 75,\n};\n```\n\n----------------------------------------\n\nTITLE: ProductPriceType Usage Example Typescript\nDESCRIPTION: Demonstrates how to import and use the `ProductPriceType` from the `@polar-sh/sdk/models/components/productpricetype.js` module.  It shows how to declare a variable of this type and assign it a value of 'one_time'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productpricetype.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductPriceType } from \"@polar-sh/sdk/models/components/productpricetype.js\";\n\nlet value: ProductPriceType = \"one_time\";\n```\n\n----------------------------------------\n\nTITLE: Defining CheckoutDiscountPercentageOnceForeverDuration TypeScript Type\nDESCRIPTION: This snippet defines the structure for a percentage-based checkout discount that can be applied once or forever. It specifies the discount type as 'percentage', the basisPoints, and the duration as 'forever'. It also includes properties like id, name, and code.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutdiscount.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CheckoutDiscountPercentageOnceForeverDuration = {\n  duration: \"forever\",\n  type: \"percentage\",\n  basisPoints: 364509,\n  id: \"<value>\",\n  name: \"<value>\",\n  code: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Product ID Filter in TypeScript\nDESCRIPTION: Defines a product ID filter as a string in TypeScript.  This allows filtering orders based on a single product ID. The string type represents the product ID value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/orderslistqueryparamproductidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Defining ProductBillingType as a string in Typescript\nDESCRIPTION: This snippet demonstrates how to define a variable of type `components.ProductBillingType` and assign it the value \"recurring\". It indicates that the billing type is a recurring subscription.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/productbillingtypefilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductBillingType = \"recurring\";\n```\n\n----------------------------------------\n\nTITLE: Defining Property Aggregation Type\nDESCRIPTION: This snippet shows how to define a `PropertyAggregation` type using TypeScript. The `PropertyAggregation` interface requires a `func` property representing the aggregation function (e.g., \"max\") and a `property` property specifying the field to aggregate.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/aggregation.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.PropertyAggregation = {\n  func: \"max\",\n  property: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscountPercentageRepeatDuration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a DiscountPercentageRepeatDuration object in TypeScript using the polar-js SDK. It imports the necessary type and provides an example object with all required fields populated with sample data, showcasing the structure and usage of the schema. Dependencies include the `@polar-sh/sdk` package.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentagerepeatduration.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountPercentageRepeatDuration } from \"@polar-sh/sdk/models/components/discountpercentagerepeatduration.js\";\n\nlet value: DiscountPercentageRepeatDuration = {\n  duration: \"forever\",\n  durationInMonths: 50080,\n  type: \"percentage\",\n  basisPoints: 916853,\n  createdAt: new Date(\"2024-11-18T01:38:39.503Z\"),\n  modifiedAt: new Date(\"2024-10-11T07:55:51.554Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": \"<value>\",\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2025-03-11T05:30:19.793Z\"),\n  endsAt: new Date(\"2024-06-13T05:08:39.326Z\"),\n  maxRedemptions: 128021,\n  redemptionsCount: 115401,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  products: [\n    {\n      metadata: {\n        \"key\": false,\n      },\n      createdAt: new Date(\"2025-04-11T21:22:55.527Z\"),\n      modifiedAt: new Date(\"2023-04-18T01:06:23.222Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description: \"forenenst whenever cycle yuck messy oof\",\n      recurringInterval: \"year\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CheckoutLinkCreateProduct in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to import and initialize the `CheckoutLinkCreateProduct` object from the `@polar-sh/sdk/models/components/checkoutlinkcreateproduct.js` module. It shows how to create an instance of the object and set the `productId` property.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkcreateproduct.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutLinkCreateProduct } from \"@polar-sh/sdk/models/components/checkoutlinkcreateproduct.js\";\n\nlet value: CheckoutLinkCreateProduct = {\n  productId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Organization ID Filter - TypeScript\nDESCRIPTION: Demonstrates how to use an array of strings as the value for filtering organization IDs. The `value` constant is assigned an array containing a single string, which is the organization ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerslistqueryparamorganizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: Using OrderBillingReason in TypeScript\nDESCRIPTION: This code snippet shows how to import and use the OrderBillingReason type from the @polar-sh/sdk. It initializes a variable of type OrderBillingReason with a valid value 'subscription_update'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/orderbillingreason.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrderBillingReason } from \"@polar-sh/sdk/models/components/orderbillingreason.js\";\n\nlet value: OrderBillingReason = \"subscription_update\";\n```\n\n----------------------------------------\n\nTITLE: Import and Initialize CustomerBenefitGrantCustomUpdate in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `CustomerBenefitGrantCustomUpdate` component from the `@polar-sh/sdk/models/components/customerbenefitgrantcustomupdate.js` module and initialize an empty object of that type in TypeScript.\nDependencies: @polar-sh/sdk.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantcustomupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerBenefitGrantCustomUpdate } from \"@polar-sh/sdk/models/components/customerbenefitgrantcustomupdate.js\";\n\nlet value: CustomerBenefitGrantCustomUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: String Array Organization ID Filter TypeScript\nDESCRIPTION: This code snippet shows how to define the `ProductsListQueryParamOrganizationIDFilter` value as an array of strings.  This allows for filtering by multiple organization IDs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/productslistqueryparamorganizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: Defining UserInfoOrganization Type in TypeScript\nDESCRIPTION: This code snippet defines the `UserInfoOrganization` type, representing organization information with a `sub` property. The `sub` field in this context typically represents the unique identifier of the organization.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/oauth2userinforesponseoauth2userinfo.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.UserInfoOrganization = {\n  sub: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: SubscriptionMeter Initialization in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a SubscriptionMeter object in TypeScript. It imports the SubscriptionMeter type from the `@polar-sh/sdk/models/components/subscriptionmeter.js` module and creates an instance with sample data for various fields like `createdAt`, `modifiedAt`, `id`, `consumedUnits`, `creditedUnits`, `amount`, `meterId`, and `meter`. The `meter` field is populated with its properties like `metadata`, `filter`, `aggregation` and other metadata related to the meter.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptionmeter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubscriptionMeter } from \"@polar-sh/sdk/models/components/subscriptionmeter.js\";\n\nlet value: SubscriptionMeter = {\n  createdAt: new Date(\"2024-12-11T10:04:45.653Z\"),\n  modifiedAt: new Date(\"2023-09-01T23:39:35.995Z\"),\n  id: \"<value>\",\n  consumedUnits: 25,\n  creditedUnits: 100,\n  amount: 0,\n  meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n  meter: {\n    metadata: {\n      \"key\": false,\n    },\n    createdAt: new Date(\"2023-09-27T12:45:23.148Z\"),\n    modifiedAt: new Date(\"2023-09-28T00:55:30.553Z\"),\n    id: \"<value>\",\n    name: \"<value>\",\n    filter: {\n      conjunction: \"and\",\n      clauses: [],\n    },\n    aggregation: {\n      func: \"sum\",\n      property: \"<value>\",\n    },\n    organizationId: \"<value>\",\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Install Polar SDK with Yarn\nDESCRIPTION: Installs the @polar-sh/sdk and zod packages using the yarn package manager. Zod is installed since Yarn does not install peer dependencies automatically.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @polar-sh/sdk zod\n\n# Note that Yarn does not install peer dependencies automatically. You will need\n# to install zod as shown above.\n```\n\n----------------------------------------\n\nTITLE: Defining ProductBillingType Array in Typescript\nDESCRIPTION: This snippet demonstrates how to define an array of `components.ProductBillingType` and initialize it with the value \"one_time\".  This shows how to filter for data corresponding to one-time product purchases.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/productbillingtypefilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductBillingType[] = [\n  \"one_time\",\n];\n```\n\n----------------------------------------\n\nTITLE: Organization ID Filter with String Array in TypeScript\nDESCRIPTION: This snippet illustrates how to filter events by multiple organization IDs using a string array in TypeScript. The 'value' constant is assigned an array of strings, each representing a UUID. These UUIDs are used to filter events associated with the specified organizations.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/eventslistqueryparamorganizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: Integer Number Type Definition TypeScript\nDESCRIPTION: Defines a number variable 'value' and assigns it an integer literal. This shows how to declare a number type for integers and assign a value to it in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkproductmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: ListResourceCustomerBenefitGrant Example in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the ListResourceCustomerBenefitGrant type from the @polar-sh/sdk library to create an instance with sample data. It includes example values for the nested objects and arrays, such as dates, strings, booleans, and numbers. The sample includes data for granted and revoked customer benefit grants.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourcecustomerbenefitgrant.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceCustomerBenefitGrant } from \"@polar-sh/sdk/models/components/listresourcecustomerbenefitgrant.js\";\n\nlet value: ListResourceCustomerBenefitGrant = {\n  items: [\n    {\n      createdAt: new Date(\"2024-07-02T15:02:56.189Z\"),\n      modifiedAt: new Date(\"2023-10-02T12:22:46.823Z\"),\n      id: \"<value>\",\n      grantedAt: new Date(\"2024-04-14T08:26:37.572Z\"),\n      revokedAt: new Date(\"2025-05-28T07:05:09.153Z\"),\n      customerId: \"<value>\",\n      benefitId: \"<value>\",\n      subscriptionId: \"<value>\",\n      orderId: \"<value>\",\n      isGranted: false,\n      isRevoked: false,\n      customer: {\n        createdAt: new Date(\"2024-09-03T02:15:05.150Z\"),\n        modifiedAt: new Date(\"2025-03-02T17:39:16.099Z\"),\n        id: \"<value>\",\n        email: \"Jay_Roob@gmail.com\",\n        emailVerified: false,\n        name: \"<value>\",\n        billingAddress: {\n          country: \"FR\",\n        },\n        taxId: [\n          \"FR61954506077\",\n          \"eu_vat\",\n        ],\n        oauthAccounts: {\n          \"key\": {\n            accountId: \"<id>\",\n            accountUsername: \"<value>\",\n          },\n        },\n      },\n      benefit: {\n        id: \"<value>\",\n        createdAt: new Date(\"2025-08-17T14:14:57.975Z\"),\n        modifiedAt: new Date(\"2025-05-22T01:38:35.771Z\"),\n        description:\n          \"hmph substantiate unknown definite sarcastic though and comfortable\",\n        selectable: false,\n        deletable: false,\n        organizationId: \"<value>\",\n        metadata: {\n          \"key\": 3532.2,\n        },\n        organization: {\n          createdAt: new Date(\"2024-05-13T18:15:58.060Z\"),\n          modifiedAt: new Date(\"2025-02-03T11:54:30.799Z\"),\n          id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n          name: \"<value>\",\n          slug: \"<value>\",\n          avatarUrl: \"https://courteous-heroine.info\",\n          email: \"Tevin.Rowe@hotmail.com\",\n          website: \"<value>\",\n          socials: [\n            {\n              platform: \"tiktok\",\n              url: \"https://prime-dandelion.biz\",\n            },\n          ],\n          detailsSubmittedAt: new Date(\"2023-10-01T13:40:51.922Z\"),\n          featureSettings: {\n            issueFundingEnabled: false,\n            usageBasedBillingEnabled: false,\n          },\n          subscriptionSettings: {\n            allowMultipleSubscriptions: false,\n            allowCustomerUpdates: false,\n            prorationBehavior: \"invoice\",\n          },\n        },\n        properties: {\n          prefix: \"<value>\",\n          expires: {\n            ttl: 102251,\n            timeframe: \"day\",\n          },\n          activations: {\n            limit: 303901,\n            enableCustomerAdmin: false,\n          },\n          limitUsage: 146200,\n        },\n      },\n      properties: {},\n    },\n  ],\n  pagination: {\n    totalCount: 443619,\n    maxPage: 572004,\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalCustomersAddPaymentMethodSecurity TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `CustomerPortalCustomersAddPaymentMethodSecurity` object in TypeScript. It imports the necessary class from the `@polar-sh/sdk/models/operations/customerportalcustomersaddpaymentmethod.js` module and then initializes an object with a `customerSession` property, which is a string representing the customer's session.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalcustomersaddpaymentmethodsecurity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalCustomersAddPaymentMethodSecurity } from \"@polar-sh/sdk/models/operations/customerportalcustomersaddpaymentmethod.js\";\n\nlet value: CustomerPortalCustomersAddPaymentMethodSecurity = {\n  customerSession: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CheckoutDiscountPercentageRepeatDuration in TypeScript\nDESCRIPTION: This snippet shows the definition of a `CheckoutDiscountPercentageRepeatDuration` object in TypeScript. The example includes `duration`, `durationInMonths`, `type`, `basisPoints`, `id`, `name`, and `code` properties. The `duration` is set to \"once\" and `type` to \"fixed\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpublicconfirmeddiscount.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CheckoutDiscountPercentageRepeatDuration = {\n  duration: \"once\",\n  durationInMonths: 606755,\n  type: \"fixed\",\n  basisPoints: 513076,\n  id: \"<value>\",\n  name: \"<value>\",\n  code: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Number Type Declaration (Float) TypeScript\nDESCRIPTION: This snippet demonstrates how to declare and initialize a number variable (float) in TypeScript. The variable 'value' is assigned a floating-point number value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreatenumbermetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Import CustomerBenefitGrantSortProperty TypeScript\nDESCRIPTION: Imports the CustomerBenefitGrantSortProperty type from the polar-sh SDK. This type is likely used as an enum or a string union to specify the sorting criteria for customer benefit grants. The example then declares a variable of this type and assigns it a sample value, indicating sorting by 'granted_at' in descending order.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantsortproperty.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerBenefitGrantSortProperty } from \"@polar-sh/sdk/models/components/customerbenefitgrantsortproperty.js\";\n\nlet value: CustomerBenefitGrantSortProperty = \"-granted_at\";\n```\n\n----------------------------------------\n\nTITLE: Creating CustomerPortalDownloadablesGetRequest in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and create an instance of the CustomerPortalDownloadablesCustomerPortalDownloadablesGetRequest object from the @polar-sh/sdk. It shows how to set the required 'token' field. A string value is expected for the token parameter.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportaldownloadablescustomerportaldownloadablesgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalDownloadablesCustomerPortalDownloadablesGetRequest } from \"@polar-sh/sdk/models/operations/customerportaldownloadablescustomerportaldownloadablesget.js\";\n\nlet value: CustomerPortalDownloadablesCustomerPortalDownloadablesGetRequest = {\n  token: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: AuthorizeResponseOrganization Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the AuthorizeResponseOrganization component from the @polar-sh/sdk library. It initializes an instance of the object and populates it with sample data, including dates, strings, and arrays. The snippet requires the @polar-sh/sdk package to be installed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/authorizeresponseorganization.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthorizeResponseOrganization } from \"@polar-sh/sdk/models/components/authorizeresponseorganization.js\";\n\nlet value: AuthorizeResponseOrganization = {\n  client: {\n    createdAt: new Date(\"2024-12-19T17:10:48.005Z\"),\n    modifiedAt: new Date(\"2025-04-10T07:52:40.287Z\"),\n    clientId: \"<id>\",\n    clientName: \"<value>\",\n    clientUri: \"https://obvious-simple.name/\",\n    logoUri: \"https://glaring-plumber.org/\",\n    tosUri: \"https://quarrelsome-yin.org/\",\n    policyUri: \"https://windy-lace.org\",\n  },\n  sub: {\n    id: \"<value>\",\n    slug: \"<value>\",\n    avatarUrl: \"https://excitable-eternity.info/\",\n  },\n  scopes: [\n    \"events:read\",\n  ],\n  organizations: [\n    {\n      id: \"<value>\",\n      slug: \"<value>\",\n      avatarUrl: \"https://left-ravioli.net\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalSubscriptionsGetRequest in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the CustomerPortalSubscriptionsGetRequest object from the '@polar-sh/sdk/models/operations/customerportalsubscriptionsget.js' module and initialize it with a subscription ID. The 'id' field is a required string representing the subscription's unique identifier.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalsubscriptionsgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalSubscriptionsGetRequest } from \"@polar-sh/sdk/models/operations/customerportalsubscriptionsget.js\";\n\nlet value: CustomerPortalSubscriptionsGetRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: ListResourceEventName Usage Example in Typescript\nDESCRIPTION: This snippet demonstrates how to import and use the `ListResourceEventName` type from the `@polar-sh/sdk` library. It creates an instance of `ListResourceEventName` and populates its `items` and `pagination` properties with sample data, including a date object. The `ListResourceEventName` type represents a list of resource event names with pagination.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourceeventname.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceEventName } from \"@polar-sh/sdk/models/components/listresourceeventname.js\";\n\nlet value: ListResourceEventName = {\n  items: [\n    {\n      name: \"<value>\",\n      source: \"user\",\n      occurrences: 227328,\n      firstSeen: new Date(\"2023-06-19T21:11:21.999Z\"),\n      lastSeen: new Date(\"2025-04-29T10:50:42.537Z\"),\n    },\n  ],\n  pagination: {\n    totalCount: 627909,\n    maxPage: 4335,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CheckoutDiscountFixedOnceForeverDuration TypeScript Type\nDESCRIPTION: This snippet defines the structure for a fixed amount checkout discount that can be applied once or forever. It specifies the discount type as 'percentage', the amount, the currency, and duration as 'forever'. It also includes properties like id, name, and code.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutdiscount.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CheckoutDiscountFixedOnceForeverDuration = {\n  duration: \"forever\",\n  type: \"percentage\",\n  amount: 700624,\n  currency: \"Nuevo Sol\",\n  id: \"<value>\",\n  name: \"<value>\",\n  code: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering by Organization ID String in TypeScript\nDESCRIPTION: This snippet demonstrates how to filter by organization ID using a single string value in TypeScript. It defines a string variable named `value` and assigns a UUID to it. This organization ID can then be used to filter a list of meters.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/meterslistqueryparamorganizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: Defining a ProductBillingType constant\nDESCRIPTION: This snippet demonstrates how to define a constant of type `components.ProductBillingType` and assign it the value \"recurring\". This represents filtering products to only show recurring billing types.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparamproductbillingtypefilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductBillingType = \"recurring\";\n```\n\n----------------------------------------\n\nTITLE: Integer Number Type Declaration in TypeScript\nDESCRIPTION: This code snippet illustrates how to declare an integer number variable with a sample value in TypeScript. It demonstrates the syntax for defining a numeric variable representing an integer.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditupdatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Defining Property Aggregation in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a `PropertyAggregation` object in TypeScript. It specifies the aggregation function (`func`) and the property (`property`) to apply the function to. The example uses 'max' as the function.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metercreateaggregation.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.PropertyAggregation = {\n  func: \"max\",\n  property: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Define DiscountFixedRepeatDurationBase Type - TypeScript\nDESCRIPTION: Defines a TypeScript type `DiscountFixedRepeatDurationBase` representing a fixed amount discount that is repeatedly applicable over a defined duration.  The type includes fields for specifying the duration in months, discount amount, currency, start/end dates, redemption constraints, associated metadata and organization ID. This snippet demonstrates sample data assignment to the type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptiondiscount.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DiscountFixedRepeatDurationBase = {\n  duration: \"once\",\n  durationInMonths: 619926,\n  type: \"fixed\",\n  amount: 441641,\n  currency: \"Namibia Dollar\",\n  createdAt: new Date(\"2025-11-25T04:43:58.974Z\"),\n  modifiedAt: new Date(\"2025-06-10T15:39:22.400Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": \"<value>\",\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2023-06-02T15:02:54.697Z\"),\n  endsAt: new Date(\"2025-05-26T12:41:24.659Z\"),\n  maxRedemptions: 76274,\n  redemptionsCount: 21686,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CustomFieldCheckbox type in TypeScript\nDESCRIPTION: This code snippet defines the structure for `CustomFieldCheckbox` using TypeScript. It shows how to define the properties like createdAt, modifiedAt, id, metadata, slug, name, organizationId, and properties, including setting default or example values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfield.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomFieldCheckbox = {\n  createdAt: new Date(\"2024-12-15T08:54:31.599Z\"),\n  modifiedAt: new Date(\"2023-07-17T23:18:22.207Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 5428.8,\n  },\n  slug: \"<value>\",\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a CustomFieldSelectOption in TypeScript\nDESCRIPTION: This code snippet shows how to import the CustomFieldSelectOption type from the @polar-sh/sdk/models/components/customfieldselectoption.js module and create an instance of it. It initializes the 'value' and 'label' properties with placeholder string values. The SDK must be installed to use this code.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldselectoption.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldSelectOption } from \"@polar-sh/sdk/models/components/customfieldselectoption.js\";\n\nlet value: CustomFieldSelectOption = {\n  value: \"<value>\",\n  label: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Import and Assign CustomFieldType (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the `CustomFieldType` type from the `@polar-sh/sdk/models/components/customfieldtype.js` module and assign a value to a variable of that type.  It showcases the basic usage of the CustomFieldType.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldtype.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldType } from \"@polar-sh/sdk/models/components/customfieldtype.js\";\n\nlet value: CustomFieldType = \"text\";\n```\n\n----------------------------------------\n\nTITLE: OrderSortProperty Values (TypeScript)\nDESCRIPTION: This code snippet lists the possible string values that can be assigned to the `OrderSortProperty` type, which correspond to different order properties that can be used for sorting (e.g., created_at, amount, product). The '-' prefix indicates descending order.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordersortproperty.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"created_at\" | \"-created_at\" | \"amount\" | \"-amount\" | \"net_amount\" | \"-net_amount\" | \"customer\" | \"-customer\" | \"product\" | \"-product\" | \"discount\" | \"-discount\" | \"subscription\" | \"-subscription\"\n```\n\n----------------------------------------\n\nTITLE: Defining Count Aggregation in TypeScript\nDESCRIPTION: This snippet shows how to define a `CountAggregation` object in TypeScript. This aggregation type does not require any parameters and simply counts the number of events. It is defined as an empty object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metercreateaggregation.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CountAggregation = {};\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Declaration in TypeScript\nDESCRIPTION: Demonstrates declaring a number type variable named 'value' and assigning a floating-point number literal to it. This snippet provides an example of defining a decimal number for discount product metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountproductmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Defining Property Aggregation in TypeScript (Duplicate)\nDESCRIPTION: This TypeScript snippet demonstrates the structure of a `PropertyAggregation` object.  It specifies the aggregation function (`func`) to be applied (e.g., \"max\") and the `property` on which to perform the aggregation.  This is a crucial component for defining how specific properties of filtered events are aggregated to calculate a meter.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/meteraggregation.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.PropertyAggregation = {\n  func: \"max\",\n  property: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalDownloadablesListSecurity TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the `CustomerPortalDownloadablesListSecurity` object in TypeScript. It requires the `@polar-sh/sdk` package to be installed. The `customerSession` field is initialized with a placeholder string. It is used for authentication and authorization purposes when accessing customer portal downloadables.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportaldownloadableslistsecurity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalDownloadablesListSecurity } from \"@polar-sh/sdk/models/operations/customerportaldownloadableslist.js\";\n\nlet value: CustomerPortalDownloadablesListSecurity = {\n  customerSession: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: CustomerPortalDownloadablesListResponse Usage Example (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to create and populate a CustomerPortalDownloadablesListResponse object. It imports the type from the @polar-sh/sdk/models/operations/customerportaldownloadableslist.js module and assigns sample values to its properties, including a nested 'result' object with 'items' (an array of downloadable resources) and 'pagination' details. The example shows how to instantiate Date objects for time-sensitive fields like lastModifiedAt and expiresAt.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportaldownloadableslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalDownloadablesListResponse } from \"@polar-sh/sdk/models/operations/customerportaldownloadableslist.js\";\n\nlet value: CustomerPortalDownloadablesListResponse = {\n  result: {\n    items: [\n      {\n        id: \"<value>\",\n        benefitId: \"<value>\",\n        file: {\n          id: \"<value>\",\n          organizationId: \"<value>\",\n          name: \"<value>\",\n          path: \"/opt/lib\",\n          mimeType: \"<value>\",\n          size: 27934,\n          storageVersion: \"<value>\",\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n          checksumSha256Hex: \"<value>\",\n          lastModifiedAt: new Date(\"2025-07-12T15:52:01.522Z\"),\n          download: {\n            url: \"https://hungry-descent.org\",\n            expiresAt: new Date(\"2025-11-12T03:32:53.866Z\"),\n          },\n          version: \"<value>\",\n          isUploaded: false,\n          service: \"organization_avatar\",\n          sizeReadable: \"<value>\",\n        },\n      },\n    ],\n    pagination: {\n      totalCount: 329277,\n      maxPage: 846639,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing SubscriptionsGetRequest Model Typescript\nDESCRIPTION: This code snippet demonstrates how to initialize the SubscriptionsGetRequest model with the required 'id' parameter.  It imports the necessary type definition from the Polar-JS SDK and assigns a string value to the 'id' property.  The 'id' field is mandatory and represents the unique identifier of the subscription to be retrieved.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/subscriptionsgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubscriptionsGetRequest } from \"@polar-sh/sdk/models/operations/subscriptionsget.js\";\n\nlet value: SubscriptionsGetRequest = {\n  id: \"<value>\",\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining Pagination Model in TypeScript\nDESCRIPTION: This code snippet defines the Pagination model using TypeScript and imports it from the polar-sh SDK. It shows how to create an instance of the Pagination object and assign values to its totalCount and maxPage properties, both of which are required numbers representing the total number of items and the maximum page number, respectively. This model helps in managing and displaying paginated data effectively.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/pagination.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pagination } from \"@polar-sh/sdk/models/components/pagination.js\";\n\nlet value: Pagination = {\n  totalCount: 271635,\n  maxPage: 56105,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerOrderSubscription TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the `CustomerOrderSubscription` type from the `@polar-sh/sdk` library. It creates an instance of the type with sample values for its properties, including dates, amounts, and IDs. The dates are initialized using the `Date` constructor, and other properties are assigned string or numeric literals.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerordersubscription.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerOrderSubscription } from \"@polar-sh/sdk/models/components/customerordersubscription.js\";\n\nlet value: CustomerOrderSubscription = {\n  createdAt: new Date(\"2024-05-31T14:46:46.348Z\"),\n  modifiedAt: new Date(\"2025-06-28T13:20:45.180Z\"),\n  id: \"<value>\",\n  amount: 561894,\n  currency: \"Cape Verde Escudo\",\n  recurringInterval: \"month\",\n  status: \"active\",\n  currentPeriodStart: new Date(\"2023-05-06T08:21:28.803Z\"),\n  currentPeriodEnd: new Date(\"2023-04-07T23:21:33.368Z\"),\n  cancelAtPeriodEnd: false,\n  canceledAt: new Date(\"2024-08-19T00:29:19.344Z\"),\n  startedAt: new Date(\"2024-11-21T15:31:03.002Z\"),\n  endsAt: new Date(\"2025-02-20T15:16:12.215Z\"),\n  endedAt: new Date(\"2024-11-07T21:48:28.573Z\"),\n  customerId: \"<value>\",\n  productId: \"<value>\",\n  discountId: \"<value>\",\n  checkoutId: \"<value>\",\n  customerCancellationReason: \"customer_service\",\n  customerCancellationComment: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Discount ID Filter - TypeScript\nDESCRIPTION: Demonstrates how to use a string as a value to filter by discount ID.  The value should be a string representing the discount ID to filter by.  No dependencies are required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparamdiscountidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Organization ID Filter with string in TypeScript\nDESCRIPTION: This code snippet demonstrates how to filter metrics by a single organization ID represented as a string. The 'value' variable is assigned a string that represents the organization ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/metricsgetqueryparamorganizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: Organization ID Filter String Array Type TypeScript\nDESCRIPTION: Demonstrates filtering CustomFieldsListQueryParamOrganizationID using an array of organization ID strings in TypeScript. This requires an array of strings, where each string represents a valid organization ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customfieldslistqueryparamorganizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing CheckoutLinkCreateProductPrice - TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize the `CheckoutLinkCreateProductPrice` object in TypeScript using the `@polar-sh/sdk`. It sets the `productPriceId` to a placeholder value. Note that this method is deprecated; `CheckoutLinkCreateProducts` should be preferred.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkcreateproductprice.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutLinkCreateProductPrice } from \"@polar-sh/sdk/models/components/checkoutlinkcreateproductprice.js\";\n\nlet value: CheckoutLinkCreateProductPrice = {\n  productPriceId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Float Number Type Definition TypeScript\nDESCRIPTION: Defines a number variable named 'value' and assigns it a floating-point number value. This snippet demonstrates how to declare a float number type in TypeScript and initialize it with an example value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customercreatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: DownloadableRead Object Instantiation in TypeScript\nDESCRIPTION: This snippet shows how to create an instance of the `DownloadableRead` object with nested properties such as `file` and `download`.  It requires the `@polar-sh/sdk` package.  The code assigns example values to each property of the `DownloadableRead` object, including nested objects.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/downloadableread.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DownloadableRead } from \"@polar-sh/sdk/models/components/downloadableread.js\";\n\nlet value: DownloadableRead = {\n  id: \"<value>\",\n  benefitId: \"<value>\",\n  file: {\n    id: \"<value>\",\n    organizationId: \"<value>\",\n    name: \"<value>\",\n    path: \"/Applications\",\n    mimeType: \"<value>\",\n    size: 883456,\n    storageVersion: \"<value>\",\n    checksumEtag: \"<value>\",\n    checksumSha256Base64: \"<value>\",\n    checksumSha256Hex: \"<value>\",\n    lastModifiedAt: new Date(\"2023-02-08T20:33:24.594Z\"),\n    download: {\n      url: \"https://majestic-shark.biz/\",\n      expiresAt: new Date(\"2025-01-20T00:04:35.382Z\"),\n    },\n    version: \"<value>\",\n    isUploaded: false,\n    service: \"product_media\",\n    sizeReadable: \"<value>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: String Product ID Filter in Typescript\nDESCRIPTION: This snippet demonstrates how to filter by a single product ID using a string value. It defines a constant variable 'value' of type string and assigns a placeholder '<value>' to it. This value represents the product ID used for filtering.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutlinkslistqueryparamproductidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Definition\nDESCRIPTION: Defines an integer number type for CustomFieldCreateSelectMetadata. It demonstrates how to declare a constant named 'value' of type number and assign an integer value to it.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreateselectmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Integer Value Assignment in TypeScript\nDESCRIPTION: This snippet demonstrates assigning an integer value to a custom field. The value is defined as a TypeScript number.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreatetextmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Defining SubscriptionProrationBehavior Values in TypeScript\nDESCRIPTION: This code snippet defines the possible values for the `SubscriptionProrationBehavior` type as a union of string literals: \"invoice\" and \"prorate\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptionprorationbehavior.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"invoice\" | \"prorate\"\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitDownloadables Object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a `BenefitDownloadables` object in TypeScript. It imports the `BenefitDownloadables` type from the `@polar-sh/sdk/models/components/benefitdownloadables.js` module and creates an instance with sample data for various properties, including dates, strings, booleans, and nested objects. The sample shows how to define a `metadata` object and a `properties` object, which includes an `archived` boolean and a list of `files`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadables.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitDownloadables } from \"@polar-sh/sdk/models/components/benefitdownloadables.js\";\n\nlet value: BenefitDownloadables = {\n  id: \"<value>\",\n  createdAt: new Date(\"2023-09-07T23:34:47.523Z\"),\n  modifiedAt: new Date(\"2025-12-18T07:04:31.810Z\"),\n  description: \"duh woefully for crooked arid\",\n  selectable: false,\n  deletable: false,\n  organizationId: \"<value>\",\n  metadata: {\n    \"key\": 424777,\n  },\n  properties: {\n    archived: {\n      \"key\": false,\n    },\n    files: [\n      \"<value>\",\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Import and Initialize RefundStatus TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `RefundStatus` type from the `@polar-sh/sdk/models/components/refundstatus.js` module and assign it a value. This is the basic setup for working with RefundStatus enums.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/refundstatus.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RefundStatus } from \"@polar-sh/sdk/models/components/refundstatus.js\";\n\nlet value: RefundStatus = \"pending\";\n```\n\n----------------------------------------\n\nTITLE: Create Custom Field Checkbox - TypeScript\nDESCRIPTION: This example demonstrates how to create a `CustomFieldCreateCheckbox` object in TypeScript. It initializes the object with sample values for `slug`, `name`, `organizationId`, and `properties`. The `organizationId` is a UUID identifying the organization to which the custom field belongs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreatecheckbox.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldCreateCheckbox } from \"@polar-sh/sdk/models/components/customfieldcreatecheckbox.js\";\n\nlet value: CustomFieldCreateCheckbox = {\n  slug: \"<value>\",\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering by Customer ID (String) - TypeScript\nDESCRIPTION: This snippet demonstrates how to filter orders by a single customer ID using a string value.  The `value` variable is assigned a string representing the customer ID. This is used as a filter parameter when retrieving a list of orders.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/orderslistqueryparamcustomeridfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Defining a ProductBillingType array\nDESCRIPTION: This snippet demonstrates defining a constant array of type `components.ProductBillingType[]` and initializing it with the value \"one_time\". This represents filtering for products that are one-time purchases.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparamproductbillingtypefilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductBillingType[] = [\n  \"one_time\",\n];\n```\n\n----------------------------------------\n\nTITLE: Number Metadata in TypeScript\nDESCRIPTION: Defines a number type metadata value in TypeScript. This snippet demonstrates how to declare a customer metadata entry with a numeric value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customermetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Defining CustomFieldNumber type in TypeScript\nDESCRIPTION: This code snippet defines the structure for `CustomFieldNumber` using TypeScript. It shows how to define the properties like createdAt, modifiedAt, id, metadata, slug, name, organizationId, and properties, including setting default or example values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfield.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomFieldNumber = {\n  createdAt: new Date(\"2024-09-14T18:42:51.369Z\"),\n  modifiedAt: new Date(\"2024-08-23T20:36:51.735Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 507927,\n  },\n  slug: \"<value>\",\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscountPercentageRepeatDurationBase in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the DiscountPercentageRepeatDurationBase component from the @polar-sh/sdk library. It sets values for all required fields, including dates, strings, and numbers, providing a complete example of how to instantiate the object. The purpose is to show a concrete example of how to construct a DiscountPercentageRepeatDurationBase object with the appropriate properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentagerepeatdurationbase.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountPercentageRepeatDurationBase } from \"@polar-sh/sdk/models/components/discountpercentagerepeatdurationbase.js\";\n\nlet value: DiscountPercentageRepeatDurationBase = {\n  duration: \"once\",\n  durationInMonths: 585936,\n  type: \"percentage\",\n  basisPoints: 667413,\n  createdAt: new Date(\"2023-06-02T04:56:01.708Z\"),\n  modifiedAt: new Date(\"2025-06-19T19:29:41.371Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 525858,\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2024-07-17T16:02:43.496Z\"),\n  endsAt: new Date(\"2024-02-10T13:50:11.933Z\"),\n  maxRedemptions: 866307,\n  redemptionsCount: 707361,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Checkbox Custom Field in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a checkbox custom field. It defines the required properties such as `slug`, `name`, `organizationId`, and `properties`. The properties are defined as an empty object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomFieldCreateCheckbox = {\n  slug: \"<value>\",\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalCustomersUpdateSecurity Typescript\nDESCRIPTION: Initializes an object of type `CustomerPortalCustomersUpdateSecurity` from the `@polar-sh/sdk/models/operations/customerportalcustomersupdate.js` module.  It sets the `customerSession` property to a placeholder value. This object is likely used for authenticating or authorizing an update operation.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalcustomersupdatesecurity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalCustomersUpdateSecurity } from \"@polar-sh/sdk/models/operations/customerportalcustomersupdate.js\";\n\nlet value: CustomerPortalCustomersUpdateSecurity = {\n  customerSession: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Import and Initialize CustomFieldUpdateCheckbox in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the CustomFieldUpdateCheckbox class from the `@polar-sh/sdk/models/components/customfieldupdatecheckbox.js` module and create an empty object of this type.  It serves as a basic example of using the CustomFieldUpdateCheckbox schema in a TypeScript project. The `value` variable represents an instance of the `CustomFieldUpdateCheckbox` schema, which can then be populated with the necessary data for updating a custom field of type checkbox.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdatecheckbox.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldUpdateCheckbox } from \"@polar-sh/sdk/models/components/customfieldupdatecheckbox.js\";\n\nlet value: CustomFieldUpdateCheckbox = {};\n```\n\n----------------------------------------\n\nTITLE: Func Enum Values - TypeScript\nDESCRIPTION: Defines the possible string values for the Func enum, which represents aggregation functions.  The allowed values are 'sum', 'max', 'min', and 'avg'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/func.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"sum\" | \"max\" | \"min\" | \"avg\"\n```\n\n----------------------------------------\n\nTITLE: BenefitType Assignment - Single Value - TypeScript\nDESCRIPTION: Demonstrates assigning a single value to the `components.BenefitType`. This example shows how to assign the string \"custom\" to a variable of type `components.BenefitType`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparambenefittypefilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitType = \"custom\";\n```\n\n----------------------------------------\n\nTITLE: Number Type Declaration (Integer) in TypeScript\nDESCRIPTION: This snippet illustrates how to declare a number variable in TypeScript and assign it an integer value. It defines a constant variable named 'value' of type number and initializes it with the integer 128403.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedrepeatdurationmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalSubscriptionsCancelRequest TypeScript\nDESCRIPTION: This code snippet demonstrates how to create and initialize a `CustomerPortalSubscriptionsCancelRequest` object in TypeScript.  It imports the class from `@polar-sh/sdk/models/operations/customerportalsubscriptionscancel.js` and assigns a string value to the `id` property, representing the subscription ID.  The `id` field is required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalsubscriptionscancelrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalSubscriptionsCancelRequest } from \"@polar-sh/sdk/models/operations/customerportalsubscriptionscancel.js\";\n\nlet value: CustomerPortalSubscriptionsCancelRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Declaration TypeScript\nDESCRIPTION: Demonstrates the declaration of a boolean variable in TypeScript. The variable `value` is assigned a boolean literal (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/value.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Creating a Metric Object in TypeScript\nDESCRIPTION: Demonstrates how to import the Metric type from the @polar-sh/sdk/models/components/metric.js module and create an instance of a Metric object with specific properties such as slug, displayName, and type. The slug should be a unique identifier, displayName is a human-readable name, and type refers to the MetricType. This showcases the basic structure and initialization of a Metric object within the polar-js project.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metric.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Metric } from \"@polar-sh/sdk/models/components/metric.js\";\n\nlet value: Metric = {\n  slug: \"<value>\",\n  displayName: \"Providenci_OHara\",\n  type: \"currency\",\n};\n```\n\n----------------------------------------\n\nTITLE: BenefitIDFilter String Array Value - TypeScript\nDESCRIPTION: Defines a BenefitIDFilter with an array of string values.  This snippet demonstrates how to declare an array of strings, each representing a benefit ID, which can be used to filter for products that grant any of the specified benefits. No dependencies are required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/benefitidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: String Array Product ID Filter TypeScript\nDESCRIPTION: This snippet demonstrates how to filter by multiple product IDs using a string array in TypeScript. The 'value' variable is assigned an array of strings, each representing a product ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalorderslistqueryparamproductidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: String Meter ID Filter in TypeScript\nDESCRIPTION: Demonstrates how to define a meter ID filter using a single string value in TypeScript. The `value` constant is assigned a string representing the meter ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/meteridfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: CustomersDeleteRequest Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and instantiate the `CustomersDeleteRequest` object from the `@polar-sh/sdk/models/operations/customersdelete.js` module.  The `id` field is assigned a string value, representing the ID of the customer to be deleted. The `id` field is mandatory.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customersdeleterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomersDeleteRequest } from \"@polar-sh/sdk/models/operations/customersdelete.js\";\n\nlet value: CustomersDeleteRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Example (TypeScript)\nDESCRIPTION: Shows how to define an integer number value for CheckoutLinkUpdateMetadata in TypeScript. The `value` constant is assigned an integer literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkupdatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Import and Use FileServiceTypes in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `FileServiceTypes` enum from the `@polar-sh/sdk/models/components/fileservicetypes.js` module and assign a value to a variable of that type.  The possible values are defined as a union of string literals.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/fileservicetypes.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FileServiceTypes } from \"@polar-sh/sdk/models/components/fileservicetypes.js\";\n\nlet value: FileServiceTypes = \"product_media\";\n```\n\n----------------------------------------\n\nTITLE: String Organization ID Filter - TypeScript\nDESCRIPTION: Demonstrates how to use a single string as the value for filtering organization IDs.  The `value` constant is assigned a string representing the organization ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerslistqueryparamorganizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: Declaring Date Custom Field Value TypeScript\nDESCRIPTION: This code snippet shows how to declare and assign a Date object to a custom field using TypeScript. It initializes a constant variable named `value` with a new Date object, set to a specific ISO 8601 date string.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpubliccustomfielddata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: Date = new Date(\"2023-12-07T03:31:58.587Z\");\n```\n\n----------------------------------------\n\nTITLE: CustomerSortProperty Value Definition TypeScript\nDESCRIPTION: This snippet defines the possible values for the CustomerSortProperty type. It is a union of string literals, representing different fields that can be used for sorting, with ascending and descending options. The possible values are used for sorting customer data.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customersortproperty.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"created_at\" | \"-created_at\" | \"email\" | \"-email\" | \"name\" | \"-name\"\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerBenefitGrantLicenseKeysUpdate TypeScript\nDESCRIPTION: This snippet initializes an empty CustomerBenefitGrantLicenseKeysUpdate object using TypeScript.  It defines a constant variable `value` with the type `components.CustomerBenefitGrantLicenseKeysUpdate` and assigns an empty object to it.  This represents an update for license keys with no predefined properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantupdate.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomerBenefitGrantLicenseKeysUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: String Value Assignment in TypeScript\nDESCRIPTION: This snippet shows how to assign a string value to a custom field. The value is represented as a TypeScript string.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreatetextmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Defining Property Aggregation in TypeScript (Duplicate)\nDESCRIPTION: This TypeScript snippet demonstrates the structure of a `PropertyAggregation` object.  It specifies the aggregation function (`func`) to be applied (e.g., \"max\") and the `property` on which to perform the aggregation.  This is a crucial component for defining how specific properties of filtered events are aggregated to calculate a meter.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/meteraggregation.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.PropertyAggregation = {\n  func: \"max\",\n  property: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Import and Instantiate OrganizationFeatureSettings in Typescript\nDESCRIPTION: This code snippet demonstrates how to import the `OrganizationFeatureSettings` class from the `@polar-sh/sdk/models/components/organizationfeaturesettings.js` module and create an empty instance of it. The `OrganizationFeatureSettings` object is intended to represent the feature settings associated with an organization within the Polar system. No specific parameters are required for initialization, resulting in an empty object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/organizationfeaturesettings.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrganizationFeatureSettings } from \"@polar-sh/sdk/models/components/organizationfeaturesettings.js\";\n\nlet value: OrganizationFeatureSettings = {};\n```\n\n----------------------------------------\n\nTITLE: Using WebhookBenefitGrantCycledPayload in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the WebhookBenefitGrantCycledPayload type from the @polar-sh/sdk library. It shows how to create a sample object with the structure expected for this payload, including nested objects and date values. The example provides a comprehensive view of the expected data structure for benefit grant cycled events.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/webhookbenefitgrantcycledpayload.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebhookBenefitGrantCycledPayload } from \"@polar-sh/sdk/models/components/webhookbenefitgrantcycledpayload.js\";\n\nlet value: WebhookBenefitGrantCycledPayload = {\n  data: {\n    createdAt: new Date(\"2023-11-18T20:31:19.582Z\"),\n    modifiedAt: new Date(\"2024-03-08T01:20:16.494Z\"),\n    id: \"<value>\",\n    isGranted: false,\n    isRevoked: false,\n    subscriptionId: \"<value>\",\n    orderId: \"<value>\",\n    customerId: \"<value>\",\n    benefitId: \"<value>\",\n    customer: {\n      id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n      createdAt: new Date(\"2024-12-12T14:18:47.000Z\"),\n      modifiedAt: new Date(\"2023-08-07T21:00:38.885Z\"),\n      metadata: {\n        \"key\": 8445.1,\n      },\n      externalId: \"usr_1337\",\n      email: \"customer@example.com\",\n      emailVerified: true,\n      name: \"John Doe\",\n      billingAddress: {\n        country: \"SE\",\n      },\n      taxId: [\n        \"FR61954506077\",\n        \"eu_vat\",\n      ],\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      deletedAt: new Date(\"2023-05-28T21:14:49.720Z\"),\n      avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n    },\n    properties: {},\n    benefit: {\n      id: \"<value>\",\n      createdAt: new Date(\"2023-07-06T08:58:45.482Z\"),\n      modifiedAt: new Date(\"2024-02-17T18:00:50.194Z\"),\n      description: \"accidentally pulp veg blink hence\",\n      selectable: false,\n      deletable: false,\n      organizationId: \"<value>\",\n      metadata: {\n        \"key\": 503454,\n      },\n      properties: {\n        units: 336600,\n        meterId: \"<value>\",\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using SubscriptionProrationBehavior in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `SubscriptionProrationBehavior` type from the `@polar-sh/sdk/models/components/subscriptionprorationbehavior.js` module. It assigns the value \"invoice\" to a variable of type `SubscriptionProrationBehavior`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptionprorationbehavior.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubscriptionProrationBehavior } from \"@polar-sh/sdk/models/components/subscriptionprorationbehavior.js\";\n\nlet value: SubscriptionProrationBehavior = \"invoice\";\n```\n\n----------------------------------------\n\nTITLE: Defining Date Custom Field Update Type\nDESCRIPTION: This code snippet defines the TypeScript type for updating a date custom field, using the `components.CustomFieldUpdateDate` interface. It initializes a variable `value` of this type as an empty object. This type represents the data required to update a date field.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdate.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomFieldUpdateDate = {};\n```\n\n----------------------------------------\n\nTITLE: Defining SubscriptionUpdateProduct Type in TypeScript\nDESCRIPTION: This code snippet defines the structure for a `SubscriptionUpdateProduct` object. It requires a `productId` string to identify the product to be updated. The type definition ensures that the `productId` property is provided during the object creation.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptionupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.SubscriptionUpdateProduct = {\n  productId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating CustomFieldsDeleteRequest Object in TypeScript\nDESCRIPTION: This snippet shows how to create an instance of the `CustomFieldsDeleteRequest` object in TypeScript. It imports the necessary class from the `@polar-sh/sdk/models/operations/customfieldsdelete.js` module and initializes it with a sample value for the `id` field. The `id` field is a string representing the custom field ID to be deleted.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customfieldsdeleterequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldsDeleteRequest } from \"@polar-sh/sdk/models/operations/customfieldsdelete.js\";\n\nlet value: CustomFieldsDeleteRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: ValidationError Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the ValidationError model from the Polar-JS SDK.  It initializes an example ValidationError object with dummy values for its properties.  The loc property is an array of numbers, while msg and type are strings.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/validationerror.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ValidationError } from \"@polar-sh/sdk/models/components/validationerror.js\";\n\nlet value: ValidationError = {\n  loc: [\n    598752,\n  ],\n  msg: \"<value>\",\n  type: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitLicenseKeysCreateProperties in TypeScript\nDESCRIPTION: Demonstrates how to import and initialize an empty BenefitLicenseKeysCreateProperties object in TypeScript. This object is used to define properties for creating benefit license keys such as prefix, expiration details, activation configurations, and usage limits.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeyscreateproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitLicenseKeysCreateProperties } from \"@polar-sh/sdk/models/components/benefitlicensekeyscreateproperties.js\";\n\nlet value: BenefitLicenseKeysCreateProperties = {};\n```\n\n----------------------------------------\n\nTITLE: String Customer ID Filter - TypeScript\nDESCRIPTION: Demonstrates how to define a CustomerIDFilter with a single string value in TypeScript. The `value` variable is assigned a string representing the customer ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customeridfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CustomFieldUpdateDate in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `CustomFieldUpdateDate` class from the `@polar-sh/sdk/models/components/customfieldupdatedate.js` module and create an empty object of that type. It illustrates the basic usage of the class.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdatedate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldUpdateDate } from \"@polar-sh/sdk/models/components/customfieldupdatedate.js\";\n\nlet value: CustomFieldUpdateDate = {};\n```\n\n----------------------------------------\n\nTITLE: EventSource Value Definition TypeScript\nDESCRIPTION: This code defines the possible values for the EventSource type, indicating that it can be either the string literal 'system' or the string literal 'user'. This is effectively defining a string-based enum.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventsource.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"system\" | \"user\"\n```\n\n----------------------------------------\n\nTITLE: Floating-Point Type Declaration TypeScript\nDESCRIPTION: Declares a constant variable 'value' of type number and assigns a floating-point literal to it. This demonstrates how to define a floating-point number value for meter metadata in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metermetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Float Value Assignment in TypeScript\nDESCRIPTION: This snippet demonstrates assigning a float value to a constant variable named `value` in TypeScript. It showcases the syntax for number literals with decimal points.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: String Type Definition\nDESCRIPTION: Defines a string type for CustomFieldCreateSelectMetadata. It shows how to declare a constant named 'value' of type string and initialize it with a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreateselectmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Oauth2ClientsListResponse Usage Example in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `Oauth2ClientsListResponse` type from the `@polar-sh/sdk/models/operations/oauth2clientslist.js` module. It creates an instance of the `Oauth2ClientsListResponse` object, populating its `result` field with sample data for OAuth2 clients, including redirect URIs, client details (name, IDs, secrets), timestamps, and pagination information.  The example utilizes `new Date()` to create sample dates.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/oauth2clientslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Oauth2ClientsListResponse } from \"@polar-sh/sdk/models/operations/oauth2clientslist.js\";\n\nlet value: Oauth2ClientsListResponse = {\n  result: {\n    items: [\n      {\n        redirectUris: [\n          \"https://authentic-status.info/\",\n        ],\n        clientName: \"<value>\",\n        createdAt: new Date(\"2023-02-07T00:32:11.404Z\"),\n        modifiedAt: new Date(\"2024-10-02T10:27:02.030Z\"),\n        clientId: \"<id>\",\n        clientSecret: \"<value>\",\n        clientIdIssuedAt: 614836,\n        clientSecretExpiresAt: 180315,\n      },\n    ],\n    pagination: {\n      totalCount: 294636,\n      maxPage: 289623,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: LicenseKeyCustomer Model Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `LicenseKeyCustomer` model from the `@polar-sh/sdk` library. It initializes a `LicenseKeyCustomer` object with sample data for its various properties, including ID, timestamps, metadata, external ID, email, name, billing address, tax IDs, organization ID, deletion timestamp and avatar URL.  The code requires the `@polar-sh/sdk` package to be installed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/licensekeycustomer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LicenseKeyCustomer } from \"@polar-sh/sdk/models/components/licensekeycustomer.js\";\n\nlet value: LicenseKeyCustomer = {\n  id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n  createdAt: new Date(\"2025-06-08T05:37:03.701Z\"),\n  modifiedAt: new Date(\"2023-02-01T02:41:03.887Z\"),\n  metadata: {\n    \"key\": false,\n  },\n  externalId: \"usr_1337\",\n  email: \"customer@example.com\",\n  emailVerified: true,\n  name: \"John Doe\",\n  billingAddress: {\n    country: \"FR\",\n  },\n  taxId: [\n    \"911144442\",\n    \"us_ein\",\n  ],\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  deletedAt: new Date(\"2023-08-27T10:41:52.791Z\"),\n  avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n};\n```\n\n----------------------------------------\n\nTITLE: Float Value Assignment in TypeScript\nDESCRIPTION: This snippet illustrates assigning a floating-point number value to a custom field. The value is represented as a TypeScript number.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreatetextmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: BenefitLicenseKeysSubscriber Example\nDESCRIPTION: This code snippet shows how to create an instance of the BenefitLicenseKeysSubscriber object in TypeScript. It demonstrates how to set the values for various fields such as id, createdAt, modifiedAt, description, selectable, deletable, organizationId, metadata, organization and properties. The 'organization' and 'properties' are nested objects with their own properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeyssubscriber.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitLicenseKeysSubscriber } from \"@polar-sh/sdk/models/components/benefitlicensekeyssubscriber.js\";\n\nlet value: BenefitLicenseKeysSubscriber = {\n  id: \"<value>\",\n  createdAt: new Date(\"2024-07-17T05:09:36.262Z\"),\n  modifiedAt: new Date(\"2023-03-17T14:59:08.856Z\"),\n  description: \"allegation properly editor quinoa mortally\",\n  selectable: false,\n  deletable: false,\n  organizationId: \"<value>\",\n  metadata: {\n    \"key\": false,\n  },\n  organization: {\n    createdAt: new Date(\"2024-12-14T04:00:15.350Z\"),\n    modifiedAt: new Date(\"2025-06-27T01:00:05.095Z\"),\n    id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    name: \"<value>\",\n    slug: \"<value>\",\n    avatarUrl: \"https://strong-mechanic.org\",\n    email: \"Destany.Predovic27@hotmail.com\",\n    website: \"<value>\",\n    socials: [\n      {\n        platform: \"facebook\",\n        url: \"https://rusty-innovation.name\",\n      },\n    ],\n    detailsSubmittedAt: new Date(\"2023-04-29T16:26:46.499Z\"),\n    featureSettings: {},\n    subscriptionSettings: {\n      allowMultipleSubscriptions: false,\n      allowCustomerUpdates: false,\n      prorationBehavior: \"invoice\",\n    },\n  },\n  properties: {\n    prefix: \"<value>\",\n    expires: {\n      ttl: 470269,\n      timeframe: \"year\",\n    },\n    activations: {\n      limit: 376968,\n      enableCustomerAdmin: false,\n    },\n    limitUsage: 568855,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating CustomFieldCheckbox Instance in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `CustomFieldCheckbox` object in TypeScript, importing it from the `@polar-sh/sdk/models/components/customfieldcheckbox.js` module. It initializes the object with sample values for its properties, including dates, IDs, metadata, a slug, a name, and an organization ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcheckbox.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldCheckbox } from \"@polar-sh/sdk/models/components/customfieldcheckbox.js\";\n\nlet value: CustomFieldCheckbox = {\n  createdAt: new Date(\"2023-02-23T23:35:16.243Z\"),\n  modifiedAt: new Date(\"2024-08-30T09:20:28.936Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": \"<value>\",\n  },\n  slug: \"<value>\",\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: CheckoutLinkSortProperty Values TypeScript\nDESCRIPTION: This snippet lists all possible string values for the CheckoutLinkSortProperty enum. These values are used to specify how checkout links should be sorted.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinksortproperty.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"created_at\" | \"-created_at\" | \"label\" | \"-label\" | \"success_url\" | \"-success_url\" | \"allow_discount_codes\" | \"-allow_discount_codes\"\n```\n\n----------------------------------------\n\nTITLE: CustomerID Filter with String Value (TypeScript)\nDESCRIPTION: Defines a customer ID filter using a single string value. This allows filtering events associated with a specific customer ID provided as a string.  The value should be a valid customer ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/eventslistqueryparamcustomeridfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalOrdersInvoiceSecurity Typescript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the CustomerPortalOrdersInvoiceSecurity model in TypeScript. It shows how to create an instance of the model and assign a string value to the customerSession property.  The model is part of the @polar-sh/sdk/models/operations/customerportalordersinvoice.js module.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalordersinvoicesecurity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalOrdersInvoiceSecurity } from \"@polar-sh/sdk/models/operations/customerportalordersinvoice.js\";\n\nlet value: CustomerPortalOrdersInvoiceSecurity = {\n  customerSession: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: CustomerSubscriptionSortProperty Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `CustomerSubscriptionSortProperty` enum from the `@polar-sh/sdk/models/components/customersubscriptionsortproperty.js` module. It showcases assigning a string value (e.g., \"-amount\") to a variable of type `CustomerSubscriptionSortProperty`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customersubscriptionsortproperty.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerSubscriptionSortProperty } from \"@polar-sh/sdk/models/components/customersubscriptionsortproperty.js\";\n\nlet value: CustomerSubscriptionSortProperty = \"-amount\";\n```\n\n----------------------------------------\n\nTITLE: Import and Instantiate CustomerPortalCustomersGetPaymentMethodsRequest in TypeScript\nDESCRIPTION: This code snippet imports the CustomerPortalCustomersGetPaymentMethodsRequest class from the @polar-sh/sdk/models/operations/customerportalcustomersgetpaymentmethods.js module and instantiates an empty object of that type. It shows the basic usage for creating a request object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalcustomersgetpaymentmethodsrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalCustomersGetPaymentMethodsRequest } from \"@polar-sh/sdk/models/operations/customerportalcustomersgetpaymentmethods.js\";\n\nlet value: CustomerPortalCustomersGetPaymentMethodsRequest = {};\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Assignment in TypeScript\nDESCRIPTION: This snippet demonstrates assigning a boolean value (false) to a constant variable named `value` in TypeScript. It showcases the syntax for boolean literals.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalDownloadablesListRequest in TypeScript\nDESCRIPTION: This code snippet shows how to import and initialize the CustomerPortalDownloadablesListRequest class from the @polar-sh/sdk. The organizationId is set as a filter within the request object, demonstrating its usage. No dependencies beyond @polar-sh/sdk and its types are needed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportaldownloadableslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalDownloadablesListRequest } from \"@polar-sh/sdk/models/operations/customerportaldownloadableslist.js\";\n\nlet value: CustomerPortalDownloadablesListRequest = {\n  organizationId: [\n    \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: ProductSortProperty Usage in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the ProductSortProperty type from the @polar-sh/sdk/models/components/productsortproperty.js module.  It shows assigning a valid string value to a variable of type ProductSortProperty. Dependencies include the specified module.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productsortproperty.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductSortProperty } from \"@polar-sh/sdk/models/components/productsortproperty.js\";\n\nlet value: ProductSortProperty = \"created_at\";\n```\n\n----------------------------------------\n\nTITLE: Floating-Point Value Assignment in TypeScript\nDESCRIPTION: This snippet demonstrates how to assign a floating-point number value to a variable in TypeScript. It declares a constant variable named 'value' of type number and assigns it the value 1284.03. This is used as an example for a checkbox custom field metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreatecheckboxmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: GitHub Repository Permission Values - TypeScript\nDESCRIPTION: This code snippet enumerates the valid string literal types for the `Permission` type in the Polar JS SDK. These string literals represent the different permission levels that can be granted to a user or team for a GitHub repository.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/permission.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"pull\" | \"triage\" | \"push\" | \"maintain\" | \"admin\"\n```\n\n----------------------------------------\n\nTITLE: Instantiating CustomerPortalCustomerMetersListSecurity in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and create an instance of the `CustomerPortalCustomerMetersListSecurity` object. It requires importing the class from `@polar-sh/sdk/models/operations/customerportalcustomermeterslist.js`. The `customerSession` field is required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalcustomermeterslistsecurity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalCustomerMetersListSecurity } from \"@polar-sh/sdk/models/operations/customerportalcustomermeterslist.js\";\n\nlet value: CustomerPortalCustomerMetersListSecurity = {\n  customerSession: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Organization ID Filter - TypeScript\nDESCRIPTION: This code snippet demonstrates how to filter by organization ID using a single string value in TypeScript. It assigns a UUID string to the 'value' constant, representing the organization ID. This allows filtering downloadables to a specific organization.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportaldownloadableslistqueryparamorganizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: Cursor MCP Server Configuration\nDESCRIPTION: Example JSON configuration for setting up the Polar SDK as an MCP server within Cursor. It defines the command and arguments required to start the MCP server, including the access token.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"Polar\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\", \"--package\", \"@polar-sh/sdk\",\n        \"--\",\n        \"mcp\", \"start\",\n        \"--access-token\", \"...\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: String Array Organization ID Filter in TypeScript\nDESCRIPTION: Demonstrates filtering by multiple organization IDs using a string array in TypeScript.  This requires the `@types/node` dependency for TypeScript projects. It shows an example of assigning an array of UUIDs to a string array variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportallicensekeyslistqueryparamorganizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: String Metadata Value - TypeScript\nDESCRIPTION: Defines a string value for CheckoutLinkCreateProductsMetadata. This example demonstrates how to declare a string variable and assign it a string literal value in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkcreateproductsmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Creating CustomerMetersGetRequest Instance TypeScript\nDESCRIPTION: This code snippet shows how to import and create an instance of the `CustomerMetersGetRequest` object from the `@polar-sh/sdk/models/operations/customermetersget.js` module in TypeScript.  It sets the required `id` property to a placeholder string. This example demonstrates the basic structure for creating a request to get customer meters.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customermetersgetrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerMetersGetRequest } from \"@polar-sh/sdk/models/operations/customermetersget.js\";\n\nlet value: CustomerMetersGetRequest = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Select Custom Field Update Type\nDESCRIPTION: This code snippet defines the TypeScript type for updating a select custom field, using the `components.CustomFieldUpdateSelect` interface. It initializes a variable `value` of this type as an empty object. This type is intended to encapsulate the data necessary for updating a select field.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdate.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomFieldUpdateSelect = {};\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging in Polar SDK in TypeScript\nDESCRIPTION: This code shows how to enable debug logging in the Polar SDK by passing a logger object (e.g., `console`) to the SDK constructor. This will cause the SDK to emit debug logs for requests and responses.  It is recommended to use this only in development environments due to the risk of exposing sensitive information.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst sdk = new Polar({ debugLogger: console });\n```\n\n----------------------------------------\n\nTITLE: Define BenefitGrantLicenseKeysProperties Type (TypeScript)\nDESCRIPTION: Defines a TypeScript type alias for `BenefitGrantLicenseKeysProperties`. This type represents the properties related to benefit grants that are based on license keys. The empty object `{}` is an initial value or a placeholder example for the type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/properties.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGrantLicenseKeysProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Filtering by Organization IDs (string[]) - TypeScript\nDESCRIPTION: This code snippet demonstrates how to filter checkout links by multiple organization IDs represented as an array of strings. The 'value' variable is assigned an array containing a UUID string, which represents the organization identifier. This enables filtering based on a set of organization IDs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutlinkslistqueryparamorganizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: Filtering by an Array of Custom Field Types (TypeScript)\nDESCRIPTION: This snippet demonstrates how to filter data by an array of custom field types using the `components.CustomFieldType` enum in TypeScript. The variable `value` is assigned an array containing the string literal \"select\", allowing filtering by multiple field types.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customfieldtypefilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomFieldType[] = [\n  \"select\",\n];\n```\n\n----------------------------------------\n\nTITLE: CheckoutStatus Example Usage in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `CheckoutStatus` type from the `@polar-sh/sdk/models/components/checkoutstatus.js` module.  It initializes a variable named `value` of type `CheckoutStatus` with the value \"confirmed\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutstatus.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutStatus } from \"@polar-sh/sdk/models/components/checkoutstatus.js\";\n\nlet value: CheckoutStatus = \"confirmed\";\n```\n\n----------------------------------------\n\nTITLE: Define SubType Enum Values in TypeScript\nDESCRIPTION: This snippet showcases the possible values for the SubType enum. The SubType can be either 'user' or 'organization'. This is used to determine the specific type of entity being represented.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subtype.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"user\" | \"organization\"\n```\n\n----------------------------------------\n\nTITLE: OAuth2ClientConfiguration UpdateGrantTypes Usage TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the OAuth2ClientConfigurationUpdateGrantTypes enum from the @polar-sh/sdk. It initializes a variable with one of the allowed enum values, 'refresh_token'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/oauth2clientconfigurationupdategranttypes.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OAuth2ClientConfigurationUpdateGrantTypes } from \"@polar-sh/sdk/models/components/oauth2clientconfigurationupdate.js\";\n\nlet value: OAuth2ClientConfigurationUpdateGrantTypes = \"refresh_token\";\n```\n\n----------------------------------------\n\nTITLE: CheckoutConfirmStripe Example Usage TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the CheckoutConfirmStripe model from the polar-js SDK. It shows an example of initializing a CheckoutConfirmStripe object with a customer billing address.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutconfirmstripe.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutConfirmStripe } from \"@polar-sh/sdk/models/components/checkoutconfirmstripe.js\";\n\nlet value: CheckoutConfirmStripe = {\n  customerBillingAddress: {\n    country: \"SE\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitLicenseKeysUpdate in Typescript\nDESCRIPTION: This code snippet demonstrates how to import and initialize a `BenefitLicenseKeysUpdate` object in TypeScript. It imports the component from the `@polar-sh/sdk/models/components/benefitlicensekeysupdate.js` module and creates an empty object of that type. This shows the basic setup for working with the `BenefitLicenseKeysUpdate` model.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeysupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitLicenseKeysUpdate } from \"@polar-sh/sdk/models/components/benefitlicensekeysupdate.js\";\n\nlet value: BenefitLicenseKeysUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: Defining string array meter ID filter in TypeScript\nDESCRIPTION: This snippet shows how to define a meter ID filter using an array of string values in TypeScript. The `value` variable is assigned an array of strings, representing multiple meter IDs. This is useful when querying for a set of meters.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparammeteridfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomFieldUpdateSelect in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the CustomFieldUpdateSelect schema from the `@polar-sh/sdk/models/components/customfieldupdateselect.js` module. It creates an empty object of type CustomFieldUpdateSelect.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdateselect.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldUpdateSelect } from \"@polar-sh/sdk/models/components/customfieldupdateselect.js\";\n\nlet value: CustomFieldUpdateSelect = {};\n```\n\n----------------------------------------\n\nTITLE: TokenEndpointAuthMethod Example Usage TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import and assign a value to a variable of type `TokenEndpointAuthMethod` from the `@polar-sh/sdk/models/components/oauth2client.js` module. The possible values are constrained by the type definition, ensuring type safety. The example shows assigning the value \"client_secret_basic\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/tokenendpointauthmethod.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TokenEndpointAuthMethod } from \"@polar-sh/sdk/models/components/oauth2client.js\";\n\nlet value: TokenEndpointAuthMethod = \"client_secret_basic\";\n```\n\n----------------------------------------\n\nTITLE: Declaring Number (Float) Type in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a variable of type `number` and assign it a floating-point value in TypeScript. This is used to set numeric (specifically float) metadata within BenefitDiscordUpdateMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordupdatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Float Number Type Declaration in TypeScript\nDESCRIPTION: This code snippet demonstrates the declaration of a number type variable with a floating-point value. It shows how to define a number variable and assign a floating-point literal to it. The type is explicitly defined as `number`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustomsubscribermetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Initializing OrganizationUpdate in Typescript\nDESCRIPTION: This code snippet demonstrates how to import and initialize an `OrganizationUpdate` object in TypeScript. The `OrganizationUpdate` type is imported from `@polar-sh/sdk/models/components/organizationupdate.js`. The example creates an empty object of type `OrganizationUpdate` named `value`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/organizationupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrganizationUpdate } from \"@polar-sh/sdk/models/components/organizationupdate.js\";\n\nlet value: OrganizationUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: Declaring a Number (Float) Value in TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a number variable named `value` and assign it a floating-point literal. It serves as an example of the number data type (specifically a float) supported in LicenseKeyCustomerMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/licensekeycustomermetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Defining Property Aggregation in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the structure of a `PropertyAggregation` object.  It specifies the aggregation function (`func`) to be applied (e.g., \"max\") and the `property` on which to perform the aggregation.  This is a crucial component for defining how specific properties of filtered events are aggregated to calculate a meter.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/meteraggregation.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.PropertyAggregation = {\n  func: \"max\",\n  property: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: RefundSortProperty Example Usage in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `RefundSortProperty` enum from the `@polar-sh/sdk/models/components/refundsortproperty.js` module in TypeScript. It initializes a variable of type `RefundSortProperty` with the value `\"-created_at\"`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/refundsortproperty.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RefundSortProperty } from \"@polar-sh/sdk/models/components/refundsortproperty.js\";\n\nlet value: RefundSortProperty = \"-created_at\";\n```\n\n----------------------------------------\n\nTITLE: TaxIDFormat Value in TypeScript\nDESCRIPTION: This snippet shows how to represent a tax ID format using a custom type 'components.TaxIDFormat' in TypeScript. The 'value' variable is assigned the string literal 'ua_vat' which corresponds to the Ukrainian VAT format.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerupdatetaxid.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.TaxIDFormat = \"ua_vat\";\n```\n\n----------------------------------------\n\nTITLE: Number Variable Declaration (Float)\nDESCRIPTION: This snippet shows how to declare a number variable in TypeScript and assign it a floating-point number value. This demonstrates a simple example for assigning a floating point number to a constant variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutupdatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Creating OrganizationSocialLink Instance in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `OrganizationSocialLink` object using TypeScript. It imports the `OrganizationSocialLink` class from the `@polar-sh/sdk/models/components/organizationsociallink.js` module and initializes it with a platform and a URL. The 'platform' property must conform to the type defined in 'components.OrganizationSocialPlatforms'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/organizationsociallink.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrganizationSocialLink } from \"@polar-sh/sdk/models/components/organizationsociallink.js\";\n\nlet value: OrganizationSocialLink = {\n  platform: \"facebook\",\n  url: \"https://homely-monasticism.org\",\n};\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Declaration TypeScript\nDESCRIPTION: Declares a number variable named 'value' and initializes it with a floating-point number. This example shows how floating-point numbers are supported as a data type in the BenefitMeterCreditSubscriberMetadata for the polar-js project.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditsubscribermetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Import and Use FilterConjunction in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `FilterConjunction` type from the `@polar-sh/sdk/models/components/filterconjunction.js` module and assign a value to it. The possible value is 'and' in the example.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/filterconjunction.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FilterConjunction } from \"@polar-sh/sdk/models/components/filterconjunction.js\";\n\nlet value: FilterConjunction = \"and\";\n```\n\n----------------------------------------\n\nTITLE: BenefitSortProperty Usage in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `BenefitSortProperty` type from the `@polar-sh/sdk/models/components/benefitsortproperty.js` module. It initializes a variable with one of the allowed string values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitsortproperty.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitSortProperty } from \"@polar-sh/sdk/models/components/benefitsortproperty.js\";\n\nlet value: BenefitSortProperty = \"description\";\n```\n\n----------------------------------------\n\nTITLE: String Array Name Filter TypeScript\nDESCRIPTION: Defines an array of strings to represent multiple event names to filter by. Each element in the array should be replaced with the actual event name string. This allows filtering for multiple event names in a single filter.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/namefilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Assignment in TypeScript\nDESCRIPTION: This snippet demonstrates assigning a boolean value (false) to a custom field. The value is defined as a TypeScript boolean.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreatetextmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Define FileServiceTypes Enum Values in TypeScript\nDESCRIPTION: This snippet lists the possible string literal values for the `FileServiceTypes` enum. These represent different types of files that can be handled by the file service, such as `downloadable`, `product_media`, and `organization_avatar`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/fileservicetypes.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"downloadable\" | \"product_media\" | \"organization_avatar\"\n```\n\n----------------------------------------\n\nTITLE: Initializing ProductPriceCustom Type - TypeScript\nDESCRIPTION: This code snippet demonstrates the initialization of the `ProductPriceCustom` type, representing a custom-priced product. It contains fields like `createdAt`, `modifiedAt`, `id`, `isArchived`, `productId`, `type`, `recurringInterval`, `priceCurrency`, `minimumAmount`, `maximumAmount`, and `presetAmount`. This example illustrates the structure of a product with a customizable price range.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productprice.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPriceCustom = {\n  createdAt: new Date(\"2023-06-12T19:38:31.503Z\"),\n  modifiedAt: new Date(\"2023-09-25T15:00:34.865Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  type: \"recurring\",\n  recurringInterval: \"year\",\n  priceCurrency: \"<value>\",\n  minimumAmount: 9926,\n  maximumAmount: 338033,\n  presetAmount: 867213,\n};\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Declaration TypeScript\nDESCRIPTION: Illustrates the declaration of a number variable named 'value' and its initialization with a floating-point literal. This example shows how to define a float type for metadata updates.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositoryupdatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Custom Metadata Value in TypeScript\nDESCRIPTION: This snippet demonstrates how to define an integer value for custom metadata associated with a benefit. The `value` variable is explicitly typed as a number and assigned an integer literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustommetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitGrantDiscordProperties TypeScript\nDESCRIPTION: Defines an empty object of type `components.BenefitGrantDiscordProperties` using TypeScript. This is likely used to represent the properties associated with a benefit grant related to Discord integration. It initializes a constant `value` with an empty object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgrantwebhookproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGrantDiscordProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Filtering by Organization ID (string) - TypeScript\nDESCRIPTION: This code snippet demonstrates how to filter checkout links by a single organization ID represented as a string. The 'value' variable is assigned a UUID string, which serves as the organization identifier. This is a typical use case for filtering results based on a specific organization.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutlinkslistqueryparamorganizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: ProductPriceType Values Typescript\nDESCRIPTION: Defines the possible string literal values for the `ProductPriceType`. It can be either 'one_time' or 'recurring'. This is essentially a type alias for a union of string literals.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productpricetype.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"one_time\" | \"recurring\"\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalCustomersGetSecurity TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the CustomerPortalCustomersGetSecurity model in TypeScript. The customerSession property is a required string.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalcustomersgetsecurity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalCustomersGetSecurity } from \"@polar-sh/sdk/models/operations/customerportalcustomersget.js\";\n\nlet value: CustomerPortalCustomersGetSecurity = {\n  customerSession: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Instantiating ListResourceOAuth2Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the ListResourceOAuth2Client model in TypeScript. It initializes the `items` array with sample OAuth2Client data and sets the pagination properties. The `items` array contains redirect URIs, client names, creation/modification timestamps, client IDs and secrets, and expiry information. The pagination object has total count and max page values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourceoauth2client.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceOAuth2Client } from \"@polar-sh/sdk/models/components/listresourceoauth2client.js\";\n\nlet value: ListResourceOAuth2Client = {\n  items: [\n    {\n      redirectUris: [\n        \"https://deficient-sock.info\",\n      ],\n      clientName: \"<value>\",\n      createdAt: new Date(\"2024-12-22T15:43:02.670Z\"),\n      modifiedAt: new Date(\"2024-04-03T03:09:37.954Z\"),\n      clientId: \"<id>\",\n      clientSecret: \"<value>\",\n      clientIdIssuedAt: 643766,\n      clientSecretExpiresAt: 384365,\n    },\n  ],\n  pagination: {\n    totalCount: 146552,\n    maxPage: 237437,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: CheckoutLinkSortProperty Example Usage TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the CheckoutLinkSortProperty enum from the polar-sh SDK. It shows how to assign a value from the enum to a variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinksortproperty.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutLinkSortProperty } from \"@polar-sh/sdk/models/components/checkoutlinksortproperty.js\";\n\nlet value: CheckoutLinkSortProperty = \"success_url\";\n```\n\n----------------------------------------\n\nTITLE: Importing HTTPValidationError Model in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `HTTPValidationError` model from the `@polar-sh/sdk/models/errors/httpvalidationerror.js` module in a TypeScript project.  The `HTTPValidationError` type is then available for use within the current file. There are no further usage examples provided in the original documentation.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/errors/httpvalidationerror.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HTTPValidationError } from \"@polar-sh/sdk/models/errors/httpvalidationerror.js\";\n\n// No examples available for this model\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitCustomSubscriberProperties in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a `BenefitCustomSubscriberProperties` object in TypeScript.  It imports the type definition and assigns a string value to the `note` property.  The `note` property is a required string field, and this snippet shows its basic usage.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustomsubscriberproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitCustomSubscriberProperties } from \"@polar-sh/sdk/models/components/benefitcustomsubscriberproperties.js\";\n\nlet value: BenefitCustomSubscriberProperties = {\n  note: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Organization IDs with String Array in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a filter for organization IDs using an array of strings in TypeScript.  It declares a constant `value` of type `string[]` and initializes it with an array containing a single UUID. This allows filtering subscriptions based on multiple organization IDs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalsubscriptionslistqueryparamorganizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: Declaring Boolean Type in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a variable of type boolean in TypeScript. It initializes the variable 'value' with a boolean literal (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metadataquery.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: SubscriptionSortProperty Values TypeScript\nDESCRIPTION: This code snippet defines the possible values for the `SubscriptionSortProperty` type in TypeScript. These values are used to specify the sorting criteria for subscriptions, allowing sorting by customer, status, start date, end date, amount, product, and discount, in ascending or descending order.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptionsortproperty.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"customer\" | \"-customer\" | \"status\" | \"-status\" | \"started_at\" | \"-started_at\" | \"current_period_end\" | \"-current_period_end\" | \"amount\" | \"-amount\" | \"product\" | \"-product\" | \"discount\" | \"-discount\"\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a string variable for a custom field in TypeScript. The variable `value` is assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutcreatecustomfielddata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Install Polar SDK with Bun\nDESCRIPTION: Installs the @polar-sh/sdk package using the bun package manager. This command adds the SDK as a dependency to your project.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun add @polar-sh/sdk\n```\n\n----------------------------------------\n\nTITLE: CustomerPortalSubscriptionsListSecurity Usage Example in Typescript\nDESCRIPTION: This code snippet demonstrates how to import and use the `CustomerPortalSubscriptionsListSecurity` model from the `@polar-sh/sdk/models/operations/customerportalsubscriptionslist.js` module. It initializes an object of this type, setting the `customerSession` property to a placeholder value. This model is likely used for authentication or authorization purposes when listing customer portal subscriptions.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalsubscriptionslistsecurity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalSubscriptionsListSecurity } from \"@polar-sh/sdk/models/operations/customerportalsubscriptionslist.js\";\n\nlet value: CustomerPortalSubscriptionsListSecurity = {\n  customerSession: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Property Aggregation in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a `PropertyAggregation` object in TypeScript. It specifies the aggregation function (`func`) and the property (`property`) to apply the function to. The example uses 'max' as the function.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metercreateaggregation.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.PropertyAggregation = {\n  func: \"max\",\n  property: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: TokenType Example Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `TokenType` enum from the `@polar-sh/sdk/models/components/introspecttokenresponse.js` module. It initializes a variable `value` of type `TokenType` to the string literal 'refresh_token'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/tokentype.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TokenType } from \"@polar-sh/sdk/models/components/introspecttokenresponse.js\";\n\nlet value: TokenType = \"refresh_token\";\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitGrantDownloadablesProperties Typescript\nDESCRIPTION: This snippet demonstrates how to import and initialize an empty `BenefitGrantDownloadablesProperties` object from the `@polar-sh/sdk/models/components/benefitgrantdownloadablesproperties.js` module. The `BenefitGrantDownloadablesProperties` type likely represents the properties associated with downloadable content related to benefit grants. No specific parameters are required, as it is initialized as an empty object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgrantdownloadablesproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitGrantDownloadablesProperties } from \"@polar-sh/sdk/models/components/benefitgrantdownloadablesproperties.js\";\n\nlet value: BenefitGrantDownloadablesProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Define BenefitGrantCustomProperties Type (TypeScript)\nDESCRIPTION: Defines a TypeScript type alias for `BenefitGrantCustomProperties`. This type is likely used for benefit grants that require custom or non-standard properties. The empty object `{}` serves as a placeholder or initial value for the defined type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/properties.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGrantCustomProperties = {};\n```\n\n----------------------------------------\n\nTITLE: BenefitType Assignment in TypeScript\nDESCRIPTION: Demonstrates assigning a string value to the `components.BenefitType` type.  This indicates the use of a specific benefit type within the polar-js project.  The expected value is a string from a predefined set of allowed benefit types.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/benefittypefilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitType = \"custom\";\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration\nDESCRIPTION: This code snippet demonstrates the use of a string to filter by organization ID. The `value` is declared as a string and assigned a UUID representing an organization ID. This is a valid type for the LicenseKeysListQueryParamOrganizationIDFilter.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/licensekeyslistqueryparamorganizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: CustomerPortalCustomerMetersGetSecurity Example\nDESCRIPTION: This example shows how to import and define the CustomerPortalCustomerMetersGetSecurity type, initializing it with a sample value for the customerSession field. The customerSession field is a required string.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalcustomermetersgetsecurity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalCustomerMetersGetSecurity } from \"@polar-sh/sdk/models/operations/customerportalcustomermetersget.js\";\n\nlet value: CustomerPortalCustomerMetersGetSecurity = {\n  customerSession: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Declaration TypeScript\nDESCRIPTION: Illustrates the declaration of a number type variable in TypeScript, assigning it an integer value. This is a basic example of how to create and assign an integer number to a variable. No dependencies are needed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeyscreatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration in TypeScript\nDESCRIPTION: This code snippet shows how to declare a variable of type string in TypeScript. The variable is named 'value' and initialized with a string literal. It is used to filter by a single subscription ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalorderslistqueryparamsubscriptionidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Declaring Number Custom Field Value TypeScript\nDESCRIPTION: This code snippet shows how to declare and assign a number value to a custom field using TypeScript. It initializes a constant variable named `value` with a numeric literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpubliccustomfielddata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Integer Metadata Value in Typescript\nDESCRIPTION: Defines a number variable named 'value' and assigns it an integer value. This demonstrates how integer metadata can be defined.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablescreatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: String Customer ID Filter - TypeScript\nDESCRIPTION: Demonstrates how to define a string variable representing a customer ID for filtering. This can be used as a parameter to filter meters quantities based on a single customer ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/metersquantitiesqueryparamcustomeridfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Declaration TypeScript\nDESCRIPTION: Declares a constant variable 'value' of type number and assigns it an integer value.  This shows how to represent integer numerical data for OrderCustomerMetadata using TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordercustomermetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: String Array Refund ID Filter - TypeScript\nDESCRIPTION: This snippet illustrates how to define a refund ID filter using an array of strings in TypeScript. It defines a constant 'value' of type string array and initializes it with a single placeholder string value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/refundidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Declaring String Value\nDESCRIPTION: This snippet shows how to declare a string variable named 'value' and assign it a string literal. It demonstrates the basic syntax for string type declaration in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedonceforeverdurationmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Integer Number Type Declaration in TypeScript\nDESCRIPTION: This code snippet demonstrates the declaration of a number type variable with an integer value. It shows how to define a number variable and assign an integer literal to it. The type is explicitly defined as `number`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustomsubscribermetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: String Value Definition TypeScript\nDESCRIPTION: Defines a constant variable named 'value' of type string and assigns it a string literal. This is an example of how a string value might be used within the CustomFieldUpdateSelectMetadata context in the polar-js project.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdateselectmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: DiscountSortProperty Usage TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the DiscountSortProperty type from the `@polar-sh/sdk/models/components/discountsortproperty.js` module. It initializes a variable of type DiscountSortProperty with the value \"name\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountsortproperty.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountSortProperty } from \"@polar-sh/sdk/models/components/discountsortproperty.js\";\n\nlet value: DiscountSortProperty = \"name\";\n```\n\n----------------------------------------\n\nTITLE: Import ResourceNotFound Error Class (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the ResourceNotFound class from the @polar-sh/sdk/models/errors/resourcenotfound.js module. This class represents a specific error type within the Polar SDK.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/errors/resourcenotfound.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ResourceNotFound } from \"@polar-sh/sdk/models/errors/resourcenotfound.js\";\n```\n\n----------------------------------------\n\nTITLE: Integer Metadata Value - TypeScript\nDESCRIPTION: Defines an integer number value for CheckoutLinkCreateProductsMetadata. This example demonstrates how to declare a number variable and assign it an integer literal value in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkcreateproductsmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Defining NotOpenCheckout Error in TypeScript\nDESCRIPTION: This snippet defines the structure of the `NotOpenCheckout` error object in TypeScript. It includes a `detail` property, which is a string.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/errors/checkoutforbiddenerror.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: errors.NotOpenCheckout = {\n  detail: \"<value>\",\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining ProductPrice Type\nDESCRIPTION: This snippet defines the ProductPrice type, illustrating its structure with example values. It features properties like createdAt, modifiedAt, id, productId, type, and recurringInterval. The example shows a recurring monthly price.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpublicproductprice.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPrice = {\n  createdAt: new Date(\"2023-11-12T09:36:50.641Z\"),\n  modifiedAt: new Date(\"2023-02-28T09:49:59.454Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  type: \"recurring\",\n  recurringInterval: \"month\",\n};\n```\n\n----------------------------------------\n\nTITLE: Import and Initialize Security Object (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to import the Security class from the `@polar-sh/sdk/models/components/security.js` module and initialize an empty Security object in TypeScript.  The Security object likely represents security credentials or authentication information within the Polar-JS SDK. No external dependencies are explicitly listed beyond the `@polar-sh/sdk` package.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/security.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Security } from \"@polar-sh/sdk/models/components/security.js\";\n\nlet value: Security = {};\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitGrantGitHubRepositoryProperties TypeScript\nDESCRIPTION: Defines an empty object of type `components.BenefitGrantGitHubRepositoryProperties` using TypeScript. This object probably represents properties for a benefit grant associated with a GitHub repository. It initializes a constant `value` with an empty object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgrantwebhookproperties.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGrantGitHubRepositoryProperties = {};\n```\n\n----------------------------------------\n\nTITLE: String Array Organization ID Filter in TypeScript\nDESCRIPTION: Demonstrates filtering by an array of organization ID strings. This snippet illustrates how to assign an array of string values, each representing an organization ID, to a constant.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutslistqueryparamorganizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: Define CustomerCancellationReason Possible Values\nDESCRIPTION: This code snippet defines the possible string values for the CustomerCancellationReason type. These values represent the different reasons a customer might cancel their subscription.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customercancellationreason.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"customer_service\" | \"low_quality\" | \"missing_features\" | \"switched_service\" | \"too_complex\" | \"too_expensive\" | \"unused\" | \"other\"\n```\n\n----------------------------------------\n\nTITLE: Import and Use TokenTypeHint in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the TokenTypeHint enum from the polar-js SDK and use it to define a variable with a specific token type. It showcases the usage of TokenTypeHint within the RevokeTokenRequest component.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/tokentypehint.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TokenTypeHint } from \"@polar-sh/sdk/models/components/revoketokenrequest.js\";\n\nlet value: TokenTypeHint = \"refresh_token\";\n```\n\n----------------------------------------\n\nTITLE: String SubscriptionIDFilter in TypeScript\nDESCRIPTION: This code snippet demonstrates how to filter by a single subscription ID using a string value in TypeScript. The `value` constant is assigned a string representing the subscription ID to filter.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/subscriptionidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscountFixedOnceForeverDurationBase in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a `DiscountFixedOnceForeverDurationBase` object. It specifies the duration as 'repeating', the type as 'fixed', an amount and currency, creation and modification dates, an ID, metadata, a name, a code, start and end dates, maximum redemptions, redemption count, and an organization ID. It showcases the structure of a fixed discount that can be applied repeatedly over a specified duration.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/orderdiscount.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DiscountFixedOnceForeverDurationBase = {\n  duration: \"repeating\",\n  type: \"fixed\",\n  amount: 978120,\n  currency: \"Lebanese Pound\",\n  createdAt: new Date(\"2023-11-29T22:19:07.374Z\"),\n  modifiedAt: new Date(\"2025-08-26T08:06:28.501Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 2343.43,\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2025-06-09T06:38:20.565Z\"),\n  endsAt: new Date(\"2023-12-05T14:26:35.432Z\"),\n  maxRedemptions: 132138,\n  redemptionsCount: 728287,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: OrganizationSocialPlatforms Values TypeScript\nDESCRIPTION: Defines the possible string values for the OrganizationSocialPlatforms type. These values represent different social media platforms like X, GitHub, Facebook, Instagram, YouTube, TikTok, LinkedIn, and Other. These are used to denote what platform an organization uses.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/organizationsocialplatforms.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"x\" | \"github\" | \"facebook\" | \"instagram\" | \"youtube\" | \"tiktok\" | \"linkedin\" | \"other\"\n```\n\n----------------------------------------\n\nTITLE: OrderBillingReason Values in TypeScript\nDESCRIPTION: This code snippet shows the possible values for the OrderBillingReason type, including 'purchase', 'subscription_create', 'subscription_cycle', and 'subscription_update'. These values are strings representing the different reasons an order is billed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/orderbillingreason.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"purchase\" | \"subscription_create\" | \"subscription_cycle\" | \"subscription_update\"\n```\n\n----------------------------------------\n\nTITLE: EventSortProperty Usage Example TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `EventSortProperty` type from the `@polar-sh/sdk/models/components/eventsortproperty.js` module. It showcases assigning the string value 'timestamp' to a variable of type `EventSortProperty`. This indicates sorting events by timestamp in ascending order.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventsortproperty.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventSortProperty } from \"@polar-sh/sdk/models/components/eventsortproperty.js\";\n\nlet value: EventSortProperty = \"timestamp\";\n```\n\n----------------------------------------\n\nTITLE: Filtering by Organization ID - String Type - Typescript\nDESCRIPTION: This code snippet demonstrates how to filter orders by a single organization ID using a string type in TypeScript. The `value` constant represents a string containing the organization ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/orderslistqueryparamorganizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: String Value Assignment TypeScript\nDESCRIPTION: Assigns a string value to a variable of type string. This is a basic example showing how to declare and initialize a string variable in TypeScript.  No dependencies are required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatetaxid.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Import AlreadyActiveSubscriptionError - TypeScript\nDESCRIPTION: Imports the AlreadyActiveSubscriptionError class from the `@polar-sh/sdk/models/errors/alreadyactivesubscriptionerror.js` module. This allows the application to utilize the AlreadyActiveSubscriptionError for error handling related to active subscriptions.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/errors/alreadyactivesubscriptionerror.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlreadyActiveSubscriptionError } from \"@polar-sh/sdk/models/errors/alreadyactivesubscriptionerror.js\";\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitDiscordUpdate TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize an instance of the BenefitDiscordUpdate class from the @polar-sh/sdk/models/components/benefitdiscordupdate.js module.  An empty object is assigned to the 'value' variable, representing an unconfigured BenefitDiscordUpdate instance.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitDiscordUpdate } from \"@polar-sh/sdk/models/components/benefitdiscordupdate.js\";\n\nlet value: BenefitDiscordUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration TypeScript\nDESCRIPTION: Declares a constant variable 'value' of type string and assigns a string literal to it. This demonstrates how to define a string value for meter metadata in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metermetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Import Unauthorized Model in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `Unauthorized` error model from the `@polar-sh/sdk/models/errors/unauthorized.js` module in a TypeScript project. This import allows you to use the `Unauthorized` class to handle unauthorized access scenarios.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/errors/unauthorized.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Unauthorized } from \"@polar-sh/sdk/models/errors/unauthorized.js\";\n\n// No examples available for this model\n```\n\n----------------------------------------\n\nTITLE: Creating CustomerBenefitGrantGitHubRepositoryUpdate in TypeScript\nDESCRIPTION: This snippet shows how to import and instantiate the `CustomerBenefitGrantGitHubRepositoryUpdate` object from the `@polar-sh/sdk` library.  It initializes the object with a `properties` field containing an `accountId`. Requires the `@polar-sh/sdk` package to be installed. The `accountId` is a placeholder and should be replaced with a valid account ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantgithubrepositoryupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerBenefitGrantGitHubRepositoryUpdate } from \"@polar-sh/sdk/models/components/customerbenefitgrantgithubrepositoryupdate.js\";\n\nlet value: CustomerBenefitGrantGitHubRepositoryUpdate = {\n  properties: {\n    accountId: \"<id>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CheckoutDiscountFixedOnceForeverDuration Type (TypeScript)\nDESCRIPTION: This snippet defines the structure for a fixed discount applied once with a 'forever' duration.  It includes properties for duration, type (percentage), amount, currency, ID, name, and discount code. The type is `components.CheckoutDiscountFixedOnceForeverDuration`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpublicdiscount.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CheckoutDiscountFixedOnceForeverDuration = {\n  duration: \"forever\",\n  type: \"percentage\",\n  amount: 700624,\n  currency: \"Nuevo Sol\",\n  id: \"<value>\",\n  name: \"<value>\",\n  code: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a boolean variable in TypeScript. The variable `value` is assigned a boolean literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptioncustomermetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitGrant Object in TypeScript\nDESCRIPTION: This snippet shows how to create and initialize a BenefitGrant object with sample data using TypeScript.  It imports the BenefitGrant class from the @polar-sh/sdk and then populates the object with example values for each of the BenefitGrant's properties, including the nested 'customer' object. Dates are initialized using the Date constructor.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgrant.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitGrant } from \"@polar-sh/sdk/models/components/benefitgrant.js\";\n\nlet value: BenefitGrant = {\n  createdAt: new Date(\"2024-02-23T09:47:56.049Z\"),\n  modifiedAt: new Date(\"2025-09-13T22:07:14.068Z\"),\n  id: \"<value>\",\n  isGranted: false,\n  isRevoked: false,\n  subscriptionId: \"<value>\",\n  orderId: \"<value>\",\n  customerId: \"<value>\",\n  benefitId: \"<value>\",\n  customer: {\n    id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n    createdAt: new Date(\"2024-05-23T17:55:06.576Z\"),\n    modifiedAt: new Date(\"2025-04-01T01:42:54.310Z\"),\n    metadata: {\n      \"key\": \"<value>\",\n    },\n    externalId: \"usr_1337\",\n    email: \"customer@example.com\",\n    emailVerified: true,\n    name: \"John Doe\",\n    billingAddress: {\n      country: \"FR\",\n    },\n    taxId: [\n      \"911144442\",\n      \"us_ein\",\n    ],\n    organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    deletedAt: new Date(\"2023-03-15T17:48:12.709Z\"),\n    avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n  },\n  properties: {},\n};\n\n```\n\n----------------------------------------\n\nTITLE: Importing RefundAmountTooHigh from polar-js SDK\nDESCRIPTION: This code snippet demonstrates how to import the `RefundAmountTooHigh` class from the `@polar-sh/sdk/models/errors/refundamounttoohigh.js` module. This import allows developers to use the `RefundAmountTooHigh` class in their TypeScript code to handle refund amount errors.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/errors/refundamounttoohigh.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RefundAmountTooHigh } from \"@polar-sh/sdk/models/errors/refundamounttoohigh.js\";\n```\n\n----------------------------------------\n\nTITLE: Float Number Metadata in TypeScript\nDESCRIPTION: Defines a number variable named 'value' and assigns it a floating-point number. This snippet shows how to use floating-point values for customer metadata in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customermetadata1.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Declaration\nDESCRIPTION: This code snippet demonstrates how to declare a floating-point number variable in TypeScript, another supported numerical type for OrderMetadata. It showcases assigning a float value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordermetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: String Customer ID Filter - TypeScript\nDESCRIPTION: Defines a string type variable for filtering customer IDs.  This snippet demonstrates how to declare and initialize a string variable to represent a single customer ID to be used as a filter in metrics queries.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/metricsgetqueryparamcustomeridfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Integer Value Assignment TypeScript\nDESCRIPTION: This code snippet demonstrates assigning an integer value to a constant variable in TypeScript. It shows the syntax for declaring a number constant and initializing it with an integer literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldselectmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: BenefitType Array Assignment in TypeScript\nDESCRIPTION: Illustrates assigning an array of strings to the `components.BenefitType[]` type. This demonstrates the ability to specify multiple benefit types. The array contains strings representing available benefit types.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/benefittypefilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitType[] = [\n  \"github_repository\",\n];\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a string variable in TypeScript. The variable `value` is explicitly typed as `string` and assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatesubscriptionmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Number Value Assignment (Float) in TypeScript\nDESCRIPTION: This code snippet shows how to assign a floating-point value to a number variable in TypeScript. The variable 'value' is declared as a number and assigned the floating-point value 1284.03.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentagerepeatdurationbasemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Import and Use EventNamesSortProperty - TypeScript\nDESCRIPTION: Demonstrates how to import and use the `EventNamesSortProperty` enum from the `@polar-sh/sdk` package. It shows how to assign a string value (in this case, \"-name\") to a variable of type `EventNamesSortProperty`. This example shows the usage in a TypeScript environment.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventnamessortproperty.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventNamesSortProperty } from \"@polar-sh/sdk/models/components/eventnamessortproperty.js\";\n\nlet value: EventNamesSortProperty = \"-name\";\n```\n\n----------------------------------------\n\nTITLE: BenefitGitHubRepositoryCreatePropertiesPermission Values\nDESCRIPTION: This snippet shows the possible string values for the BenefitGitHubRepositoryCreatePropertiesPermission type. These values represent different permission levels that can be granted to a GitHub repository.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositorycreatepropertiespermission.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"pull\" | \"triage\" | \"push\" | \"maintain\" | \"admin\"\n```\n\n----------------------------------------\n\nTITLE: String Refund ID Filter - TypeScript\nDESCRIPTION: This snippet demonstrates how to define a refund ID filter using a string value in TypeScript.  It defines a constant 'value' of type string and assigns it a placeholder string value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/refundidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Declaration\nDESCRIPTION: This code snippet shows how to declare an integer variable in TypeScript, a supported numerical type for OrderMetadata. It demonstrates assigning an integer value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordermetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Integer Metadata Example (TypeScript)\nDESCRIPTION: This snippet shows how to define an integer value for customer metadata using TypeScript. The `value` constant is assigned a numeric integer literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutcreatecustomermetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Boolean Metadata Example (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define a boolean value for customer metadata in TypeScript. The `value` constant is assigned a boolean literal (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutcreatecustomermetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: UserInfoOrganization Model Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the UserInfoOrganization model from the '@polar-sh/sdk/models/components/userinfoorganization.js' module. It initializes an instance of the UserInfoOrganization with the required 'sub' field. The 'sub' field represents a unique identifier, and is a string.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/userinfoorganization.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserInfoOrganization } from \"@polar-sh/sdk/models/components/userinfoorganization.js\";\n\nlet value: UserInfoOrganization = {\n  sub: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Standalone MCP Server Configuration (JSON)\nDESCRIPTION: Example JSON configuration for setting up the downloaded standalone MCP server. It defines the command and arguments required to start the server.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/README.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"Todos\": {\n      \"command\": \"./DOWNLOAD/PATH/mcp-server\",\n      \"args\": [\n        \"start\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ProductSortProperty Values in TypeScript\nDESCRIPTION: This snippet lists the valid string values that can be assigned to the ProductSortProperty type. These values represent different fields by which a product can be sorted, with a leading '-' indicating descending order. No external dependencies are required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productsortproperty.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"created_at\" | \"-created_at\" | \"name\" | \"-name\" | \"price_amount_type\" | \"-price_amount_type\" | \"price_amount\" | \"-price_amount\"\n```\n\n----------------------------------------\n\nTITLE: String Organization ID Filter in TypeScript\nDESCRIPTION: Demonstrates filtering by a single organization ID string. This snippet shows how to assign a string value representing an organization ID to a constant.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutslistqueryparamorganizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: OAuth2Client Configuration Update Token Endpoint Auth Method Values\nDESCRIPTION: This code snippet defines the possible string values for the `OAuth2ClientConfigurationUpdateTokenEndpointAuthMethod` type. These values represent the different methods for authenticating at the token endpoint during an OAuth2 client configuration update. The options are: \"client_secret_basic\", \"client_secret_post\", and \"none\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/oauth2clientconfigurationupdatetokenendpointauthmethod.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"client_secret_basic\" | \"client_secret_post\" | \"none\"\n```\n\n----------------------------------------\n\nTITLE: Importing CustomerMeterSortProperty - Typescript\nDESCRIPTION: Demonstrates how to import the CustomerMeterSortProperty enum from the polar-sh SDK and assign a value to a variable of that type.  The value assigned is \"-customer_id\", indicating sorting by customer ID in descending order.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customermetersortproperty.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerMeterSortProperty } from \"@polar-sh/sdk/models/components/customermetersortproperty.js\";\n\nlet value: CustomerMeterSortProperty = \"-customer_id\";\n```\n\n----------------------------------------\n\nTITLE: Import OrganizationSortProperty - TypeScript\nDESCRIPTION: Imports the `OrganizationSortProperty` type from the `@polar-sh/sdk/models/components/organizationsortproperty.js` module. This allows the type to be used for defining sort properties in TypeScript code.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/organizationsortproperty.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrganizationSortProperty } from \"@polar-sh/sdk/models/components/organizationsortproperty.js\";\n\nlet value: OrganizationSortProperty = \"name\";\n```\n\n----------------------------------------\n\nTITLE: Creating a BenefitDiscordSubscriber Instance in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `BenefitDiscordSubscriber` object in TypeScript, including nested objects like `organization` and `properties`.  It showcases the structure and data types required for each property. Note that some placeholder values (e.g., \"<value>\") are used.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordsubscriber.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitDiscordSubscriber } from \"@polar-sh/sdk/models/components/benefitdiscordsubscriber.js\";\n\nlet value: BenefitDiscordSubscriber = {\n  id: \"<value>\",\n  createdAt: new Date(\"2024-07-24T23:28:24.019Z\"),\n  modifiedAt: new Date(\"2024-10-25T18:28:09.309Z\"),\n  description: \"whenever uh-huh belabor gee blissfully pish ha\",\n  selectable: false,\n  deletable: false,\n  organizationId: \"<value>\",\n  metadata: {\n    \"key\": 102248,\n  },\n  organization: {\n    createdAt: new Date(\"2023-02-09T04:48:54.947Z\"),\n    modifiedAt: new Date(\"2023-09-11T13:41:18.452Z\"),\n    id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    name: \"<value>\",\n    slug: \"<value>\",\n    avatarUrl: \"https://recent-celsius.name/\",\n    email: \"Richmond81@gmail.com\",\n    website: \"<value>\",\n    socials: [\n      {\n        platform: \"youtube\",\n        url: \"https://sarcastic-duffel.info/\",\n      },\n    ],\n    detailsSubmittedAt: new Date(\"2024-02-17T01:43:32.206Z\"),\n    featureSettings: {},\n    subscriptionSettings: {\n      allowMultipleSubscriptions: false,\n      allowCustomerUpdates: false,\n      prorationBehavior: \"prorate\",\n    },\n  },\n  properties: {\n    guildId: \"<id>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a string variable with a placeholder value in TypeScript. It shows the basic syntax for defining a string variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditupdatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Import and Use DiscountDuration in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `DiscountDuration` type from the `@polar-sh/sdk/models/components/discountduration.js` module and assign it a value. It shows basic usage of the enum/type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountduration.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountDuration } from \"@polar-sh/sdk/models/components/discountduration.js\";\n\nlet value: DiscountDuration = \"once\";\n```\n\n----------------------------------------\n\nTITLE: CustomFieldSortProperty Possible Values TypeScript\nDESCRIPTION: This snippet lists the possible string values for the CustomFieldSortProperty type. These values represent different fields that can be used for sorting, including created_at, slug, name, and type. The '-' prefix indicates descending order.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldsortproperty.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"created_at\" | \"-created_at\" | \"slug\" | \"-slug\" | \"name\" | \"-name\" | \"type\" | \"-type\"\n```\n\n----------------------------------------\n\nTITLE: Defining string meter ID filter in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a meter ID filter using a single string value in TypeScript.  The `value` variable is assigned a string, representing a single meter ID. This would be used when querying for a specific meter.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparammeteridfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Float Metadata Example (TypeScript)\nDESCRIPTION: This snippet shows how to define a floating-point number value for customer metadata using TypeScript. The `value` constant is assigned a numeric floating-point literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutcreatecustomermetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Tax ID as String in TypeScript\nDESCRIPTION: This snippet demonstrates how to represent a customer tax ID as a string in TypeScript. It assigns a string value to the `value` variable, representing the tax ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customercreatetaxid.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Custom Field in TypeScript\nDESCRIPTION: Declares and initializes a string variable to represent a custom field value. The variable `value` is assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordercustomfielddata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: License Key Activation Example (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import and use the LicenseKeyActivate model from the @polar-sh/sdk/models/components/licensekeyactivate.js module in TypeScript. It creates an instance of the LicenseKeyActivate object, populating the required fields such as 'key', 'organizationId', and 'label' with placeholder values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/licensekeyactivate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LicenseKeyActivate } from \"@polar-sh/sdk/models/components/licensekeyactivate.js\";\n\nlet value: LicenseKeyActivate = {\n  key: \"<key>\",\n  organizationId: \"<value>\",\n  label: \"<value>\",\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining OrganizationAvatarFileRead Type in TypeScript\nDESCRIPTION: This code defines the structure for the `OrganizationAvatarFileRead` type, representing the file information for an organization's avatar. It includes similar properties to `DownloadableFileRead`, such as `id`, `organizationId`, `name`, `path`, `mimeType`, `size`, `storageVersion`, checksums, timestamps, `version`, `isUploaded`, and `sizeReadable`. Additionally, it includes a `publicUrl` property. The `lastModifiedAt` and `createdAt` properties use `Date` objects. This showcases the properties relevant to an organization's avatar file.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/fileread.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.OrganizationAvatarFileRead = {\n  id: \"<value>\",\n  organizationId: \"<value>\",\n  name: \"<value>\",\n  path: \"/Applications\",\n  mimeType: \"<value>\",\n  size: 524459,\n  storageVersion: \"<value>\",\n  checksumEtag: \"<value>\",\n  checksumSha256Base64: \"<value>\",\n  checksumSha256Hex: \"<value>\",\n  lastModifiedAt: new Date(\"2023-02-25T08:33:28.298Z\"),\n  version: \"<value>\",\n  isUploaded: false,\n  createdAt: new Date(\"2025-07-07T06:37:40.079Z\"),\n  sizeReadable: \"<value>\",\n  publicUrl: \"https://winding-glider.info\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ProductPriceCustomCreate in TypeScript\nDESCRIPTION: This snippet shows how to initialize a `ProductPriceCustomCreate` object in TypeScript. In this example, the object is initialized as an empty object, suggesting further customization would be applied. No external dependencies are shown.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productcreateprices.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPriceCustomCreate = {};\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration in TypeScript\nDESCRIPTION: Declares a constant variable `value` of type `string` and assigns it a string literal.  This snippet demonstrates the basic usage of string types in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/loc.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Integer Value Declaration in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare and initialize an integer number variable in TypeScript. The variable `value` is assigned an integer literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productcreatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Integer Type Declaration TypeScript\nDESCRIPTION: Demonstrates the declaration and assignment of an integer value in TypeScript. The variable 'value' is explicitly typed as a number and assigned the integer literal 128403.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositorymetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a boolean variable in TypeScript using the `boolean` type. The variable `value` is assigned a boolean literal (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: CheckoutIDFilter with string in Typescript\nDESCRIPTION: This snippet shows how to use a string value for the CheckoutIDFilter.  The string value represents a specific checkout ID that will be used for filtering.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Organization ID Filter in TypeScript\nDESCRIPTION: This snippet demonstrates how to filter by a single organization ID using a string value in TypeScript. The value represents a UUID of an organization.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalorderslistqueryparamorganizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: Organization ID Filter String Type TypeScript\nDESCRIPTION: Illustrates filtering CustomFieldsListQueryParamOrganizationID using a single organization ID string in TypeScript. This requires a string representing a valid organization ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customfieldslistqueryparamorganizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscountPercentageOnceForeverDuration in TypeScript\nDESCRIPTION: This snippet shows how to initialize `DiscountPercentageOnceForeverDuration`. The code highlights the `basisPoints` property, which is used for percentage-based discounts. It also includes properties for dates, IDs, metadata, and product associations.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discount.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DiscountPercentageOnceForeverDuration = {\n  duration: \"repeating\",\n  type: \"fixed\",\n  basisPoints: 282616,\n  createdAt: new Date(\"2023-09-27T01:14:07.480Z\"),\n  modifiedAt: new Date(\"2023-05-17T21:52:37.548Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 3026.86,\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2025-02-21T03:05:07.733Z\"),\n  endsAt: new Date(\"2023-05-15T18:45:28.098Z\"),\n  maxRedemptions: 25753,\n  redemptionsCount: 354994,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  products: [\n    {\n      metadata: {\n        \"key\": 861759,\n      },\n      createdAt: new Date(\"2023-08-03T03:34:06.894Z\"),\n      modifiedAt: new Date(\"2024-03-24T18:02:17.573Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description:\n        \"unaccountably sympathetically representation down next brr hornet unabashedly boo phew\",\n      recurringInterval: \"year\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration\nDESCRIPTION: This code snippet illustrates how to declare a boolean variable in TypeScript, a supported boolean type for OrderMetadata. It demonstrates assigning a false value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordermetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: OAuth2ClientConfigurationGrantTypes Definition TypeScript\nDESCRIPTION: This snippet defines the possible values for the OAuth2ClientConfigurationGrantTypes enum. It specifies that the enum can be either 'authorization_code' or 'refresh_token'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/oauth2clientconfigurationgranttypes.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"authorization_code\" | \"refresh_token\"\n```\n\n----------------------------------------\n\nTITLE: TaxId using components.TaxIDFormat in TypeScript\nDESCRIPTION: Defines a TaxId using a custom type components.TaxIDFormat, which is assigned the string value \"ua_vat\". This indicates that the TaxId should conform to the Ukrainian VAT format.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/taxid.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.TaxIDFormat = \"ua_vat\";\n```\n\n----------------------------------------\n\nTITLE: Defining AuthorizeResponseOrganization Type in TypeScript\nDESCRIPTION: This snippet defines the `components.AuthorizeResponseOrganization` type. It includes client details, organization subject details (id, slug, avatar URL), granted scopes, and an array of organizations the subject is affiliated with.  Similar to the user example, `createdAt` and `modifiedAt` are Date objects.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/oauth2authorizeresponseoauth2authorize.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.AuthorizeResponseOrganization = {\n  client: {\n    createdAt: new Date(\"2024-05-19T17:17:33.198Z\"),\n    modifiedAt: new Date(\"2023-03-20T13:31:10.189Z\"),\n    clientId: \"<id>\",\n    clientName: \"<value>\",\n    clientUri: \"https://limping-cafe.info/\",\n    logoUri: \"https://parallel-vibraphone.com/\",\n    tosUri: \"https://querulous-elevator.com/\",\n    policyUri: \"https://puzzled-equal.com/\",\n  },\n  sub: {\n    id: \"<value>\",\n    slug: \"<value>\",\n    avatarUrl: \"https://usable-premise.org\",\n  },\n  scopes: [\n    \"events:read\",\n  ],\n  organizations: [\n    {\n      id: \"<value>\",\n      slug: \"<value>\",\n      avatarUrl: \"https://innocent-league.com\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: String Order ID Filter TypeScript\nDESCRIPTION: This code snippet shows how to define a string type for filtering by order ID. The value represents a single order ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparamorderidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: CustomerSubscriptionSortProperty Values in TypeScript\nDESCRIPTION: This code snippet lists the possible string values for the `CustomerSubscriptionSortProperty` type. These values represent the fields by which a customer subscription can be sorted, with a leading hyphen indicating descending order.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customersubscriptionsortproperty.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"started_at\" | \"-started_at\" | \"amount\" | \"-amount\" | \"status\" | \"-status\" | \"organization\" | \"-organization\" | \"product\" | \"-product\"\n```\n\n----------------------------------------\n\nTITLE: Import and Assign Timeframe Value - TypeScript\nDESCRIPTION: This snippet demonstrates importing the Timeframe type from the Polar SDK and assigning it a string value ('year'). This example shows how to use the Timeframe enum or type in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/timeframe.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Timeframe } from \"@polar-sh/sdk/models/components/benefitlicensekeyexpirationproperties.js\";\n\nlet value: Timeframe = \"year\";\n```\n\n----------------------------------------\n\nTITLE: BenefitSortProperty Value Definition in TypeScript\nDESCRIPTION: This snippet defines the possible string values for the `BenefitSortProperty` type. These values are used to specify the sorting criteria for benefits, including the order (ascending or descending) of the `created_at` and `description` fields.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitsortproperty.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"created_at\" | \"-created_at\" | \"description\" | \"-description\"\n```\n\n----------------------------------------\n\nTITLE: Instantiate CountAggregation in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and instantiate the CountAggregation component from the `@polar-sh/sdk/models/components/countaggregation.js` module. It creates an empty `CountAggregation` object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/countaggregation.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CountAggregation } from \"@polar-sh/sdk/models/components/countaggregation.js\";\n\nlet value: CountAggregation = {};\n```\n\n----------------------------------------\n\nTITLE: CustomerPortalOrdersListSecurity Example\nDESCRIPTION: This example shows how to import and instantiate the CustomerPortalOrdersListSecurity object from the @polar-sh/sdk/models/operations/customerportalorderslist.js module. It also demonstrates how to assign a value to the `customerSession` property.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalorderslistsecurity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalOrdersListSecurity } from \"@polar-sh/sdk/models/operations/customerportalorderslist.js\";\n\nlet value: CustomerPortalOrdersListSecurity = {\n  customerSession: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Type Definition\nDESCRIPTION: Defines a string type variable with a placeholder value. It demonstrates the usage of string type for CustomFieldCheckboxMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcheckboxmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Install Polar SDK with NPM\nDESCRIPTION: Installs the @polar-sh/sdk package using the npm package manager. This command adds the SDK as a dependency to your project.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm add @polar-sh/sdk\n```\n\n----------------------------------------\n\nTITLE: EventNamesSortProperty Value Definition - TypeScript\nDESCRIPTION: Defines the possible string values for the `EventNamesSortProperty` type. These values represent different sorting criteria, including sorting by name, occurrences, first seen timestamp, and last seen timestamp, in both ascending and descending orders. The values are represented as a union of string literals.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventnamessortproperty.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"name\" | \"-name\" | \"occurrences\" | \"-occurrences\" | \"first_seen\" | \"-first_seen\" | \"last_seen\" | \"-last_seen\"\n```\n\n----------------------------------------\n\nTITLE: OrganizationSocialPlatforms Example Usage TypeScript\nDESCRIPTION: Demonstrates how to import and use the OrganizationSocialPlatforms type from the `@polar-sh/sdk/models/components/organizationsocialplatforms.js` module.  It initializes a variable `value` of type `OrganizationSocialPlatforms` with the string value \"tiktok\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/organizationsocialplatforms.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrganizationSocialPlatforms } from \"@polar-sh/sdk/models/components/organizationsocialplatforms.js\";\n\nlet value: OrganizationSocialPlatforms = \"tiktok\";\n```\n\n----------------------------------------\n\nTITLE: MetricPeriod Initialization and Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the MetricPeriod type from the @polar-sh/sdk and create an instance of it.  It initializes the MetricPeriod object with sample data for various fields related to revenue, orders, and subscriptions. The timestamp field is a Date object, and all other fields are numbers.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metricperiod.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MetricPeriod } from \"@polar-sh/sdk/models/components/metricperiod.js\";\n\nlet value: MetricPeriod = {\n  timestamp: new Date(\"2023-02-27T06:20:14.306Z\"),\n  orders: 872443,\n  revenue: 668369,\n  cumulativeRevenue: 871344,\n  averageOrderValue: 408141,\n  oneTimeProducts: 919392,\n  oneTimeProductsRevenue: 384682,\n  newSubscriptions: 180009,\n  newSubscriptionsRevenue: 244464,\n  renewedSubscriptions: 281705,\n  renewedSubscriptionsRevenue: 287128,\n  activeSubscriptions: 102273,\n  monthlyRecurringRevenue: 561829,\n};\n```\n\n----------------------------------------\n\nTITLE: String Metadata Creation\nDESCRIPTION: Demonstrates how to create a string metadata value in TypeScript. This snippet defines a constant variable named 'value' and assigns it a string value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metercreatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerBenefitGrantMeterCredit Component\nDESCRIPTION: Defines the structure of the CustomerBenefitGrantMeterCredit component using TypeScript. This component extends the base CustomerBenefitGrant with properties specific to meter credit benefits, such as `lastCreditedMeterId`, `lastCreditedUnits`, and `lastCreditedAt`. The `benefit.properties` include `units` and `meterId`, further specifying the meter-related aspects of the benefit. The properties are initialized with placeholder values and dates for demonstration or testing.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrant.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomerBenefitGrantMeterCredit = {\n  createdAt: new Date(\"2024-04-14T20:11:35.311Z\"),\n  modifiedAt: new Date(\"2023-11-30T16:09:14.574Z\"),\n  id: \"<value>\",\n  grantedAt: new Date(\"2025-05-18T14:47:11.111Z\"),\n  revokedAt: new Date(\"2024-10-24T22:48:58.081Z\"),\n  customerId: \"<value>\",\n  benefitId: \"<value>\",\n  subscriptionId: \"<value>\",\n  orderId: \"<value>\",\n  isGranted: false,\n  isRevoked: false,\n  customer: {\n    createdAt: new Date(\"2025-12-27T05:01:17.641Z\"),\n    modifiedAt: new Date(\"2024-07-04T12:59:46.364Z\"),\n    id: \"<value>\",\n    email: \"Willy_Veum@gmail.com\",\n    emailVerified: false,\n    name: \"<value>\",\n    billingAddress: {\n      country: \"US\",\n    },\n    taxId: [\n      \"FR61954506077\",\n      \"eu_vat\",\n    ],\n    oauthAccounts: {\n      \"key\": {\n        accountId: \"<id>\",\n        accountUsername: \"<value>\",\n      },\n    },\n  },\n  benefit: {\n    id: \"<value>\",\n    createdAt: new Date(\"2025-04-27T22:11:41.772Z\"),\n    modifiedAt: new Date(\"2024-02-05T12:21:21.967Z\"),\n    description:\n      \"while naturally knowledgeably platypus psst turbulent intend aha reorganisation cruelly\",\n    selectable: false,\n    deletable: false,\n    organizationId: \"<value>\",\n    metadata: {\n      \"key\": \"<value>\",\n    },\n    organization: {\n      createdAt: new Date(\"2024-10-15T07:40:45.158Z\"),\n      modifiedAt: new Date(\"2025-03-23T16:24:12.822Z\"),\n      id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      name: \"<value>\",\n      slug: \"<value>\",\n      avatarUrl: \"https://sugary-affect.com\",\n      email: \"Jordi62@gmail.com\",\n      website: \"<value>\",\n      socials: [\n        {\n          platform: \"facebook\",\n          url: \"https://amused-folklore.info\",\n        },\n      ],\n      detailsSubmittedAt: new Date(\"2024-08-17T03:44:48.952Z\"),\n      featureSettings: {},\n      subscriptionSettings: {\n        allowMultipleSubscriptions: false,\n        allowCustomerUpdates: false,\n        prorationBehavior: \"prorate\",\n      },\n    },\n    properties: {\n      units: 307527,\n      meterId: \"<value>\",\n    },\n  },\n  properties: {\n    lastCreditedMeterId: \"<id>\",\n    lastCreditedUnits: 36406,\n    lastCreditedAt: \"<value>\",\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: EventSortProperty Values TypeScript\nDESCRIPTION: This snippet defines the possible values for the `EventSortProperty` type. It specifies that the value can be either 'timestamp' for ascending order or '-timestamp' for descending order. This is used to control the sorting direction of events based on their timestamp.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventsortproperty.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"timestamp\" | \"-timestamp\"\n```\n\n----------------------------------------\n\nTITLE: FilterConjunction Value Definition in TypeScript\nDESCRIPTION: This code snippet showcases the possible values for the `FilterConjunction` type. It can be either 'and' or 'or', representing logical AND and OR operations respectively. These values are used to define how filters are combined.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/filterconjunction.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"and\" | \"or\"\n```\n\n----------------------------------------\n\nTITLE: ListResourceEvent Usage in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the ListResourceEvent type in TypeScript. It initializes a ListResourceEvent object with sample data, including items (containing metadata, IDs, timestamps, names, and customer information) and pagination details (total count and max page). The snippet shows how to create an instance of the ListResourceEvent with example data.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourceevent.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceEvent } from \"@polar-sh/sdk/models/components/listresourceevent.js\";\n\nlet value: ListResourceEvent = {\n  items: [\n    {\n      metadata: {\n        \"key\": 931177,\n      },\n      id: \"<value>\",\n      timestamp: new Date(\"2024-06-18T03:11:30.752Z\"),\n      name: \"<value>\",\n      source: \"user\",\n      organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      customerId: \"<value>\",\n      customer: {\n        id: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n        createdAt: new Date(\"2024-06-14T11:35:32.838Z\"),\n        modifiedAt: new Date(\"2024-12-21T04:51:31.301Z\"),\n        metadata: {\n          \"key\": false,\n        },\n        externalId: \"usr_1337\",\n        email: \"customer@example.com\",\n        emailVerified: true,\n        name: \"John Doe\",\n        billingAddress: {\n          country: \"FR\",\n        },\n        taxId: [\n          \"911144442\",\n          \"us_ein\",\n        ],\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        deletedAt: new Date(\"2024-07-07T22:03:46.538Z\"),\n        avatarUrl: \"https://www.gravatar.com/avatar/xxx?d=blank\",\n      },\n      externalCustomerId: \"<id>\",\n    },\n  ],\n  pagination: {\n    totalCount: 627577,\n    maxPage: 518943,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitLicenseKeyActivationProperties in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the BenefitLicenseKeyActivationProperties object in TypeScript. It sets the 'limit' to 490312 and 'enableCustomerAdmin' to false. The object is imported from the '@polar-sh/sdk/models/components/benefitlicensekeyactivationproperties.js' module.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeyactivationproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitLicenseKeyActivationProperties } from \"@polar-sh/sdk/models/components/benefitlicensekeyactivationproperties.js\";\n\nlet value: BenefitLicenseKeyActivationProperties = {\n  limit: 490312,\n  enableCustomerAdmin: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ProductPriceFreeCreate Type in TypeScript\nDESCRIPTION: Defines an object of type `components.ProductPriceFreeCreate`. This type is used when creating a free price for a product. The object is empty, indicating that there are no additional properties needed to define a free product price.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productupdateprices.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPriceFreeCreate = {};\n```\n\n----------------------------------------\n\nTITLE: String Metadata in TypeScript\nDESCRIPTION: Defines a string type metadata value in TypeScript. This snippet demonstrates how to declare a customer metadata entry with a string value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customermetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration in TypeScript\nDESCRIPTION: Declares a constant variable 'value' of type boolean and assigns it a boolean value (false).  This demonstrates a boolean type declaration in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeyssubscribermetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Boolean Metadata in TypeScript\nDESCRIPTION: Defines a boolean type metadata value in TypeScript. This snippet demonstrates how to declare a customer metadata entry with a boolean value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customermetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Creating CustomFieldSelect Instance in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an instance of the CustomFieldSelect object in TypeScript. It imports the CustomFieldSelect type and initializes it with sample data, including setting createdAt and modifiedAt dates, providing values for required fields like id, metadata, slug, name, organizationId, and properties with options. It showcases the structure and required fields of the CustomFieldSelect object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldselect.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldSelect } from \"@polar-sh/sdk/models/components/customfieldselect.js\";\n\nlet value: CustomFieldSelect = {\n  createdAt: new Date(\"2025-08-21T17:09:59.158Z\"),\n  modifiedAt: new Date(\"2023-06-20T14:55:16.113Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 2528.5,\n  },\n  slug: \"<value>\",\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {\n    options: [\n      {\n        value: \"<value>\",\n        label: \"<value>\",\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Float Metadata Value in TypeScript\nDESCRIPTION: Defines a number variable in TypeScript representing a floating-point metadata value. This is used to store decimal numbers as metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordcreatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: MCP Server Help Command\nDESCRIPTION: Displays help information for the MCP server, including available arguments and options.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/README.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y --package @polar-sh/sdk -- mcp start --help\n```\n\n----------------------------------------\n\nTITLE: Integer Number Type Example - TypeScript\nDESCRIPTION: Illustrates the declaration and assignment of an integer number value in TypeScript.\nThis example shows a basic integer assignment.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: String Array Organization ID Filter in TypeScript\nDESCRIPTION: This snippet demonstrates how to filter by multiple organization IDs using an array of strings in TypeScript. Each string in the array represents a UUID of an organization.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalorderslistqueryparamorganizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: Defining DownloadableFileRead Type in TypeScript\nDESCRIPTION: This code snippet defines the structure of the `DownloadableFileRead` type, representing a downloadable file. It includes properties like `id`, `organizationId`, `name`, `path`, `mimeType`, `size`, checksums (`checksumEtag`, `checksumSha256Base64`, `checksumSha256Hex`), timestamps (`lastModifiedAt`, `createdAt`), `version`, `isUploaded`, and `sizeReadable`. This is a TypeScript definition, illustrating the expected structure of the file object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/filesuploadedresponsefilesuploaded.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DownloadableFileRead = {\n  id: \"<value>\",\n  organizationId: \"<value>\",\n  name: \"<value>\",\n  path: \"/sbin\",\n  mimeType: \"<value>\",\n  size: 822101,\n  storageVersion: \"<value>\",\n  checksumEtag: \"<value>\",\n  checksumSha256Base64: \"<value>\",\n  checksumSha256Hex: \"<value>\",\n  lastModifiedAt: new Date(\"2023-12-23T00:34:21.292Z\"),\n  version: \"<value>\",\n  isUploaded: false,\n  createdAt: new Date(\"2025-08-22T04:02:51.257Z\"),\n  sizeReadable: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Product ID Filter - TypeScript\nDESCRIPTION: Defines a string array type for filtering metrics based on multiple product IDs in Polar-JS. Each element in the array represents a product ID to filter for. This is useful for filtering by a list of product IDs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/metricsgetqueryparamproductidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Defining TimeInterval Values in Typescript\nDESCRIPTION: This code snippet defines the allowed string literal values for the TimeInterval type. It shows that TimeInterval can be either \"year\", \"month\", \"week\", \"day\", or \"hour\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/timeinterval.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"year\" | \"month\" | \"week\" | \"day\" | \"hour\"\n```\n\n----------------------------------------\n\nTITLE: String Type Example\nDESCRIPTION: This snippet shows an example of assigning a string value to a variable. It demonstrates how a string can be used as a value within the DiscountPercentageOnceForeverDurationBaseMetadata context.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentageonceforeverdurationbasemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: MeterQuantities Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the MeterQuantities type from the @polar-sh/sdk/models/components/meterquantities.js module. It creates an object of type MeterQuantities, initializing the 'quantities' array with a timestamp and quantity, and setting the 'total' field.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/meterquantities.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MeterQuantities } from \"@polar-sh/sdk/models/components/meterquantities.js\";\n\nlet value: MeterQuantities = {\n  quantities: [\n    {\n      timestamp: new Date(\"2023-02-12T02:54:23.217Z\"),\n      quantity: 10,\n    },\n  ],\n  total: 100,\n};\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration in Typescript\nDESCRIPTION: Declares a string variable named 'value' and assigns it a placeholder string value. This snippet demonstrates how to declare a string type variable in TypeScript for use with DiscountPercentageRepeatDurationCreateMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentagerepeatdurationcreatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Install Polar SDK with PNPM\nDESCRIPTION: Installs the @polar-sh/sdk package using the pnpm package manager. This command adds the SDK as a dependency to your project.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @polar-sh/sdk\n```\n\n----------------------------------------\n\nTITLE: Defining FilterOperator Values in TypeScript\nDESCRIPTION: This code snippet showcases the possible string values that the `FilterOperator` type can hold. These strings represent different comparison operators.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/filteroperator.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"eq\" | \"ne\" | \"gt\" | \"gte\" | \"lt\" | \"lte\" | \"like\" | \"not_like\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Filter Clause in TypeScript\nDESCRIPTION: This code snippet defines a `FilterClause` object with properties for the filtered property name, the operator to use for comparison (e.g., 'eq' for equals), and the value to compare against. The `property` and `value` fields are placeholders for actual values that would be used at runtime. This demonstrates how to define the structure for an individual filter condition.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/clauses.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.FilterClause = {\n  property: \"<value>\",\n  operator: \"eq\",\n  value: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Declaration TypeScript\nDESCRIPTION: Defines a number variable named 'value' and initializes it with an integer literal. This illustrates how to declare an integer number type within TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedonceforeverdurationcreatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: String Type Definition TypeScript\nDESCRIPTION: Defines a string variable named 'value' and assigns it a string literal. This snippet demonstrates how to define string values for event metadata in polar-js using TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: CustomerID Filter with String Array (TypeScript)\nDESCRIPTION: Defines a customer ID filter using an array of string values. This allows filtering events associated with multiple customer IDs. The array should contain valid customer IDs as strings.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/eventslistqueryparamcustomeridfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: GrantTypes Values in TypeScript\nDESCRIPTION: This snippet defines the possible values for the `GrantTypes` enumeration in TypeScript. It indicates that a `GrantTypes` variable can be either `authorization_code` or `refresh_token`. This ensures that only valid grant types are used within the application.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/granttypes.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"authorization_code\" | \"refresh_token\"\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitMeterCreditUpdate in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and initialize an empty `BenefitMeterCreditUpdate` object in TypeScript.  It requires the `@polar-sh/sdk` package to be installed. The initialized object `value` can then be populated with the desired properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitMeterCreditUpdate } from \"@polar-sh/sdk/models/components/benefitmetercreditupdate.js\";\n\nlet value: BenefitMeterCreditUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: Float Metadata Value in TypeScript\nDESCRIPTION: This example showcases how to define a metadata value as a floating-point number. The 'value' variable is typed as a number and assigned a float literal. This is useful for setting metadata related to fractional values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkcreateproductpricemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Date Value Assignment TypeScript\nDESCRIPTION: Defines a Date variable named 'value' and assigns it a Date object initialized with a specific date string ('2023-12-07T03:31:58.587Z'). This shows how to represent date data when updating public custom fields. The variable is explicitly typed as 'Date'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutupdatepubliccustomfielddata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: Date = new Date(\"2023-12-07T03:31:58.587Z\");\n```\n\n----------------------------------------\n\nTITLE: Defining LegacyRecurringProductPrice in TypeScript\nDESCRIPTION: Demonstrates how to define and instantiate a `LegacyRecurringProductPrice` object in TypeScript, including setting properties such as createdAt, modifiedAt, id, productId, recurringInterval, priceCurrency, minimumAmount, maximumAmount, and presetAmount. This example provides a template for creating instances of this type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutproductprice.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.LegacyRecurringProductPrice = {\n  createdAt: new Date(\"2025-03-28T17:53:12.899Z\"),\n  modifiedAt: new Date(\"2024-08-10T00:40:01.700Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  recurringInterval: \"year\",\n  priceCurrency: \"<value>\",\n  minimumAmount: 981878,\n  maximumAmount: 962753,\n  presetAmount: 690635,\n};\n```\n\n----------------------------------------\n\nTITLE: Float Value Declaration in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare and initialize a floating-point number variable in TypeScript. The variable `value` is assigned a float literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productcreatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: String Organization ID Filter in TypeScript\nDESCRIPTION: Demonstrates filtering by a single organization ID using a string value in TypeScript. This requires the `@types/node` dependency for TypeScript projects. It shows an example of assigning a UUID to a string variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportallicensekeyslistqueryparamorganizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: Import and Assign LicenseKeyStatus TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the LicenseKeyStatus type from the `@polar-sh/sdk/models/components/licensekeystatus.js` module and assign a value to it. The type represents the status of a license key. It requires the `@polar-sh/sdk` package to be installed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/licensekeystatus.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LicenseKeyStatus } from \"@polar-sh/sdk/models/components/licensekeystatus.js\";\n\nlet value: LicenseKeyStatus = \"granted\";\n```\n\n----------------------------------------\n\nTITLE: String Product ID Filter - TypeScript\nDESCRIPTION: Defines a string type for filtering metrics based on a single product ID in Polar-JS. The value represents the product ID to filter for. This is a basic implementation for filtering by a single product ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/metricsgetqueryparamproductidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: CheckoutIDFilter with string array in Typescript\nDESCRIPTION: This snippet shows how to use a string array value for the CheckoutIDFilter. The string array allows filtering based on multiple checkout IDs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Defining ProductPriceCustomCreate Type in TypeScript\nDESCRIPTION: Defines an object of type `components.ProductPriceCustomCreate`. This type is used when creating a custom price for a product. In this specific example, it is an empty object, suggesting further customization is required elsewhere.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productupdateprices.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPriceCustomCreate = {};\n```\n\n----------------------------------------\n\nTITLE: S3FileUploadPart Initialization in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize an `S3FileUploadPart` object from the `@polar-sh/sdk` library. It sets the required properties such as `number`, `chunkStart`, `chunkEnd`, `url`, and `expiresAt`. It provides a basic example of how to create and populate an instance of the `S3FileUploadPart` for use with S3 file uploads.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/s3fileuploadpart.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { S3FileUploadPart } from \"@polar-sh/sdk/models/components/s3fileuploadpart.js\";\n\nlet value: S3FileUploadPart = {\n  number: 633912,\n  chunkStart: 514571,\n  chunkEnd: 490550,\n  url: \"https://wavy-porter.net\",\n  expiresAt: new Date(\"2024-11-30T16:50:46.248Z\"),\n};\n```\n\n----------------------------------------\n\nTITLE: String Type Example (TypeScript)\nDESCRIPTION: Demonstrates how to define a string value for CheckoutLinkUpdateMetadata using TypeScript. The `value` constant is assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkupdatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Metadata in TypeScript\nDESCRIPTION: Defines a string variable named 'value' and assigns it a string literal. This snippet shows how to represent string-based customer metadata in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customermetadata1.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: DiscountSortProperty Values TypeScript\nDESCRIPTION: This snippet defines the possible string literal values for the DiscountSortProperty type. These values represent the fields by which discounts can be sorted, including ascending and descending orders (indicated by the \"-\" prefix).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountsortproperty.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"created_at\" | \"-created_at\" | \"name\" | \"-name\" | \"code\" | \"-code\" | \"redemptions_count\" | \"-redemptions_count\"\n```\n\n----------------------------------------\n\nTITLE: Defining Text Custom Field Update Type\nDESCRIPTION: This code snippet defines the TypeScript type for updating a text custom field, using the `components.CustomFieldUpdateText` interface. It initializes a variable `value` of this type as an empty object. This type represents the data required to update a text field.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdate.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomFieldUpdateText = {};\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Number Value in TypeScript\nDESCRIPTION: This snippet demonstrates how to define an integer number value for CustomFieldUpdateTextMetadata. The `value` constant is assigned an integer literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdatetextmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration TypeScript\nDESCRIPTION: Declares a string variable named 'value' and initializes it with a placeholder string value. This demonstrates the usage of the string type within the BenefitDownloadablesUpdateMetadata context.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablesupdatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Import and use CheckoutSortProperty in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the CheckoutSortProperty enum from the @polar-sh/sdk/models/components/checkoutsortproperty.js module and assign a value to a variable of that type. The valid values are strings like \"-created_at\", \"created_at\", \"expires_at\", and \"-expires_at\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutsortproperty.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutSortProperty } from \"@polar-sh/sdk/models/components/checkoutsortproperty.js\";\n\nlet value: CheckoutSortProperty = \"-created_at\";\n```\n\n----------------------------------------\n\nTITLE: Import and Use Scope\nDESCRIPTION: This snippet demonstrates how to import the Scope type from the `@polar-sh/sdk/models/components/scope.js` module and assign a string value to a variable of that type. The Scope type represents authorization scopes within the Polar system.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/scope.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Scope } from \"@polar-sh/sdk/models/components/scope.js\";\n\nlet value: Scope = \"organizations:read\";\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Definition TypeScript\nDESCRIPTION: This snippet demonstrates the definition of a number (float) type variable in TypeScript. The variable 'value' is explicitly typed as a number and assigned a floating-point number literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Boolean Metadata in TypeScript\nDESCRIPTION: Defines a boolean variable named 'value' and assigns it a boolean literal (false). This snippet demonstrates how to represent boolean values for customer metadata in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customermetadata1.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Number Value Declaration TypeScript\nDESCRIPTION: Demonstrates the declaration of a number variable in TypeScript. The variable `value` is assigned a number literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/value.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: String Value Declaration TypeScript\nDESCRIPTION: Demonstrates the declaration of a string variable in TypeScript. The variable `value` is assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/value.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Number type assignment (Integer)\nDESCRIPTION: Demonstrates how to assign an integer value to a number variable in TypeScript. The variable 'value' is declared as a number and assigned an integer literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdatenumbermetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Value Assignment TypeScript\nDESCRIPTION: This snippet shows how to assign an integer value to a variable in TypeScript. The variable `value` is declared as a number and initialized with the integer value 128403.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productupdatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Boolean Custom Field Value TypeScript\nDESCRIPTION: Defines a custom field value as a boolean. The `value` variable is explicitly typed as `boolean` and assigned a boolean literal. This shows how to represent true/false values within the custom field.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfielddata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Values for CustomerMeterSortProperty - Typescript\nDESCRIPTION: Lists the possible string values that can be assigned to the CustomerMeterSortProperty enum. These values represent different fields that can be used for sorting, with a prefix of '-' indicating descending order.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customermetersortproperty.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"created_at\" | \"-created_at\" | \"modified_at\" | \"-modified_at\" | \"customer_id\" | \"-customer_id\" | \"customer_name\" | \"-customer_name\" | \"meter_id\" | \"-meter_id\" | \"meter_name\" | \"-meter_name\" | \"consumed_units\" | \"-consumed_units\" | \"credited_units\" | \"-credited_units\" | \"balance\" | \"-balance\"\n```\n\n----------------------------------------\n\nTITLE: Import and Initialize CustomFieldDateProperties in TypeScript\nDESCRIPTION: This snippet shows how to import the `CustomFieldDateProperties` type from the `@polar-sh/sdk/models/components/customfielddateproperties.js` module and initialize an empty object of that type. This demonstrates the basic usage of the type within a TypeScript context.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfielddateproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldDateProperties } from \"@polar-sh/sdk/models/components/customfielddateproperties.js\";\n\nlet value: CustomFieldDateProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Import and Use DiscountType (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import and use the `DiscountType` from the `@polar-sh/sdk/models/components/discounttype.js` module. It initializes a variable of type `DiscountType` with the value \"fixed\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discounttype.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountType } from \"@polar-sh/sdk/models/components/discounttype.js\";\n\nlet value: DiscountType = \"fixed\";\n```\n\n----------------------------------------\n\nTITLE: Organization ID Array in Typescript\nDESCRIPTION: This snippet shows how to define an array of organization IDs as strings for filtering. It declares a `value` constant as an array of strings and initializes it with a single organization ID string. This is useful when the filter supports multiple organization IDs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparamorganizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: Import AlreadyCanceledSubscription - TypeScript\nDESCRIPTION: Imports the AlreadyCanceledSubscription class from the @polar-sh/sdk/models/errors/alreadycanceledsubscription.js module. This allows the class to be used in TypeScript code to represent an already canceled subscription error. No further usage example is provided in the original documentation.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/errors/alreadycanceledsubscription.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlreadyCanceledSubscription } from \"@polar-sh/sdk/models/errors/alreadycanceledsubscription.js\";\n\n// No examples available for this model\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Definition TypeScript\nDESCRIPTION: Defines a boolean variable named 'value' and assigns it a boolean value (false). This snippet demonstrates how to declare a boolean type in TypeScript and initialize it with a boolean literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customercreatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Float Type Definition in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a floating-point number variable in TypeScript. It assigns a floating-point number literal to the variable 'value', indicating that it can store decimal number data.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerupdatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Define BenefitGrantDiscordProperties Type (TypeScript)\nDESCRIPTION: Defines a TypeScript type alias for `BenefitGrantDiscordProperties`. This type likely represents properties specific to benefit grants related to Discord integrations. The empty object `{}` serves as an initial value or example for the type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/properties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGrantDiscordProperties = {};\n```\n\n----------------------------------------\n\nTITLE: String Metadata Example (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define a string value for customer metadata in TypeScript. The `value` constant is assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutcreatecustomermetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: IntrospectTokenRequestTokenTypeHint Usage TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `IntrospectTokenRequestTokenTypeHint` type from the `@polar-sh/sdk/models/components/introspecttokenrequest.js` module. It initializes a variable of this type with the value \"access_token\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/introspecttokenrequesttokentypehint.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IntrospectTokenRequestTokenTypeHint } from \"@polar-sh/sdk/models/components/introspecttokenrequest.js\";\n\nlet value: IntrospectTokenRequestTokenTypeHint = \"access_token\";\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscountPercentageOnceForeverDuration in TypeScript\nDESCRIPTION: This code demonstrates how to initialize a `DiscountPercentageOnceForeverDuration` object with various properties, including dates, strings, numbers, and nested objects. It showcases the structure and expected data types for each field as defined in the schema. The code imports the necessary type definition from the `@polar-sh/sdk` library.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentageonceforeverduration.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountPercentageOnceForeverDuration } from \"@polar-sh/sdk/models/components/discountpercentageonceforeverduration.js\";\n\nlet value: DiscountPercentageOnceForeverDuration = {\n  duration: \"repeating\",\n  type: \"fixed\",\n  basisPoints: 166581,\n  createdAt: new Date(\"2023-12-08T16:49:56.309Z\"),\n  modifiedAt: new Date(\"2023-11-17T06:38:01.129Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": \"<value>\",\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2024-02-10T16:55:28.653Z\"),\n  endsAt: new Date(\"2023-05-15T12:33:14.007Z\"),\n  maxRedemptions: 937796,\n  redemptionsCount: 23382,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  products: [\n    {\n      metadata: {\n        \"key\": 45549,\n      },\n      createdAt: new Date(\"2023-04-19T08:33:24.969Z\"),\n      modifiedAt: new Date(\"2025-07-19T14:09:59.439Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description: \"amongst correctly against reflecting\",\n      recurringInterval: \"month\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: ProductBillingType Usage Example TypeScript\nDESCRIPTION: Demonstrates how to import and use the ProductBillingType enum from the @polar-sh/sdk/models/components/productbillingtype.js module. An example value 'recurring' is assigned to a variable of type ProductBillingType.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productbillingtype.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProductBillingType } from \"@polar-sh/sdk/models/components/productbillingtype.js\";\n\nlet value: ProductBillingType = \"recurring\";\n```\n\n----------------------------------------\n\nTITLE: Integer Number Type Definition TypeScript\nDESCRIPTION: Defines a number variable named 'value' and assigns it an integer value. This snippet demonstrates how to declare an integer number type in TypeScript and initialize it with an example value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customercreatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitDownloadablesSubscriber TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize a `BenefitDownloadablesSubscriber` object in TypeScript. It imports the necessary module from `@polar-sh/sdk/models/components/benefitdownloadablessubscriber.js` and assigns sample values to the object's properties, including nested objects and arrays. Dates are created using the `Date` constructor.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablessubscriber.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitDownloadablesSubscriber } from \"@polar-sh/sdk/models/components/benefitdownloadablessubscriber.js\";\n\nlet value: BenefitDownloadablesSubscriber = {\n  id: \"<value>\",\n  createdAt: new Date(\"2024-02-11T02:38:58.436Z\"),\n  modifiedAt: new Date(\"2025-09-10T10:17:52.189Z\"),\n  description: \"happy whisper sad woot out psst tousle\",\n  selectable: false,\n  deletable: false,\n  organizationId: \"<value>\",\n  metadata: {\n    \"key\": false,\n  },\n  organization: {\n    createdAt: new Date(\"2023-12-07T04:34:35.188Z\"),\n    modifiedAt: new Date(\"2024-03-20T12:40:24.940Z\"),\n    id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    name: \"<value>\",\n    slug: \"<value>\",\n    avatarUrl: \"https://lost-colonialism.com\",\n    email: \"Dean.Kertzmann@yahoo.com\",\n    website: \"<value>\",\n    socials: [\n      {\n        platform: \"instagram\",\n        url: \"https://whole-amendment.com/\",\n      },\n    ],\n    detailsSubmittedAt: new Date(\"2023-04-06T16:09:31.468Z\"),\n    featureSettings: {},\n    subscriptionSettings: {\n      allowMultipleSubscriptions: false,\n      allowCustomerUpdates: false,\n      prorationBehavior: \"invoice\",\n    },\n  },\n  properties: {\n    activeFiles: [\n      \"<value>\",\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ProductPrice Type - Typescript\nDESCRIPTION: This code snippet defines an example of the `ProductPrice` type. It shows how to create an instance of this type, setting properties such as creation and modification dates, IDs, product ID, type (recurring), and recurring interval. The example demonstrates the expected structure and data types for a `ProductPrice` object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutproductprices.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPrice = {\n  createdAt: new Date(\"2023-11-12T09:36:50.641Z\"),\n  modifiedAt: new Date(\"2023-02-28T09:49:59.454Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  type: \"recurring\",\n  recurringInterval: \"month\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining UserInfoUser Type in TypeScript\nDESCRIPTION: This code snippet defines the `UserInfoUser` type, a representation of user information including the `sub` (subject) property. The `sub` field typically represents the unique identifier of the user.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/oauth2userinforesponseoauth2userinfo.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.UserInfoUser = {\n  sub: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Boolean Metadata Creation\nDESCRIPTION: Demonstrates how to create a boolean metadata value in TypeScript. This snippet defines a constant variable named 'value' and assigns it a boolean value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metercreatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration in TypeScript\nDESCRIPTION: This code snippet illustrates how to declare a boolean variable for a custom field in TypeScript. The variable `value` is assigned a boolean literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutcreatecustomfielddata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Float RefundMetadata in TypeScript\nDESCRIPTION: This snippet shows how to define a RefundMetadata value as a floating-point number in TypeScript. The `value` constant is assigned a float literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/refundmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Definition TypeScript\nDESCRIPTION: Defines a number variable named 'value' and assigns it an integer literal. This snippet demonstrates how to define integer number values for event metadata in polar-js using TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Example (TypeScript)\nDESCRIPTION: Illustrates defining a floating-point number value for CheckoutLinkUpdateMetadata using TypeScript. The `value` constant is assigned a float literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkupdatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Number Type Declaration in TypeScript\nDESCRIPTION: This code snippet shows how to declare a number variable for a custom field in TypeScript. The variable `value` is assigned a numeric literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutcreatecustomfielddata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Integer Number Metadata in TypeScript\nDESCRIPTION: Defines a number variable named 'value' and assigns it an integer. This snippet illustrates how to use integer values for customer metadata in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customermetadata1.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: TokenTypeHint Values in TypeScript\nDESCRIPTION: This code snippet defines the possible values for the TokenTypeHint, which are 'access_token' and 'refresh_token'. This enumeration is used to constrain the allowed values for specifying the type of token to be revoked.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/tokentypehint.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"access_token\" | \"refresh_token\"\n```\n\n----------------------------------------\n\nTITLE: Defining Date Type in TypeScript\nDESCRIPTION: This snippet shows how to define a Date variable in TypeScript, representing a date value for a custom field.  It initializes the Date object with a specific ISO 8601 date string.  The const keyword ensures the variable cannot be reassigned.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpublicconfirmedcustomfielddata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: Date = new Date(\"2023-12-07T03:31:58.587Z\");\n```\n\n----------------------------------------\n\nTITLE: String Type Definition TypeScript\nDESCRIPTION: Defines a string variable named 'value' and assigns it a string literal. This snippet demonstrates how to declare a string type in TypeScript and initialize it with a placeholder value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customercreatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Tax ID using TaxIDFormat Enum in TypeScript\nDESCRIPTION: This snippet shows how to represent a customer tax ID using the `components.TaxIDFormat` enum in TypeScript. This enum likely defines a set of supported tax ID formats. The example assigns the value 'ua_vat' to a variable typed as `components.TaxIDFormat`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customercreatetaxid.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.TaxIDFormat = \"ua_vat\";\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Declaration in TypeScript\nDESCRIPTION: This snippet illustrates the declaration of a floating-point number variable in TypeScript. It declares a constant variable named 'value' and assigns a floating-point literal to it. This snippet provides an example of declaring a number type variable with a float value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerSubscriptionCancel Model in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and initialize the `CustomerSubscriptionCancel` model from the `@polar-sh/sdk` library. The model is used to represent and manage customer subscription cancellation options. An empty object is assigned to the `value` variable as a starting point.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customersubscriptioncancel.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerSubscriptionCancel } from \"@polar-sh/sdk/models/components/customersubscriptioncancel.js\";\n\nlet value: CustomerSubscriptionCancel = {};\n```\n\n----------------------------------------\n\nTITLE: String Metadata Value Declaration TypeScript\nDESCRIPTION: This code snippet shows how to declare a string value for customer metadata within the PolarJS context. The `value` constant is assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutupdatecustomermetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: LicenseKeyStatus Values in TypeScript\nDESCRIPTION: This code snippet shows the possible string literal values for the LicenseKeyStatus type. These values represent the different states a license key can be in: granted, revoked, or disabled. This defines the possible states of a LicenseKeyStatus.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/licensekeystatus.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"granted\" | \"revoked\" | \"disabled\"\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Value Assignment TypeScript\nDESCRIPTION: This snippet demonstrates how to assign a floating-point number value to a constant variable 'value' using TypeScript. It illustrates the syntax for floating-point number assignment.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/meterupdatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a variable of type string in TypeScript. The variable `value` is explicitly typed as a string and assigned a string literal. This showcases basic string assignment.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositorycreatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: OAuth2Client Configuration Update Token Endpoint Auth Method Usage\nDESCRIPTION: This code snippet demonstrates how to import and use the `OAuth2ClientConfigurationUpdateTokenEndpointAuthMethod` type from the `@polar-sh/sdk/models/components/oauth2clientconfigurationupdate.js` module. It shows how to assign one of the available string values to a variable of this type. This type is used to define the authentication method for the token endpoint when updating OAuth2 client configurations. Possible values are \"client_secret_basic\", \"client_secret_post\", and \"none\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/oauth2clientconfigurationupdatetokenendpointauthmethod.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OAuth2ClientConfigurationUpdateTokenEndpointAuthMethod } from \"@polar-sh/sdk/models/components/oauth2clientconfigurationupdate.js\";\n\nlet value: OAuth2ClientConfigurationUpdateTokenEndpointAuthMethod =\n  \"client_secret_basic\";\n```\n\n----------------------------------------\n\nTITLE: Initializing OrganizationsListRequest in Typescript\nDESCRIPTION: This code snippet demonstrates how to import and initialize an empty `OrganizationsListRequest` object in TypeScript. The request object is likely used as input for an API call to retrieve a list of organizations. The `OrganizationsListRequest` object is imported from `@polar-sh/sdk/models/operations/organizationslist.js`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/organizationslistrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrganizationsListRequest } from \"@polar-sh/sdk/models/operations/organizationslist.js\";\n\nlet value: OrganizationsListRequest = {};\n```\n\n----------------------------------------\n\nTITLE: Creating a DiscountFixedRepeatDurationCreate Object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a `DiscountFixedRepeatDurationCreate` object with specific properties such as `duration`, `durationInMonths`, `type`, `amount`, `name`, and `organizationId`. It imports the necessary module from `@polar-sh/sdk/models/components/discountfixedrepeatdurationcreate.js`. The resulting object can be used to define a fixed amount discount applied repeatedly for a certain duration.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedrepeatdurationcreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscountFixedRepeatDurationCreate } from \"@polar-sh/sdk/models/components/discountfixedrepeatdurationcreate.js\";\n\nlet value: DiscountFixedRepeatDurationCreate = {\n  duration: \"once\",\n  durationInMonths: 981489,\n  type: \"fixed\",\n  amount: 24515,\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration\nDESCRIPTION: Defines a boolean type for DiscountFixedOnceForeverDurationBaseMetadata. The 'value' variable is assigned a boolean literal (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedonceforeverdurationbasemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Value Assignment TypeScript\nDESCRIPTION: This snippet demonstrates how to assign a floating-point number value to a variable in TypeScript. The variable `value` is declared as a number and initialized with the floating-point value 1284.03.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productupdatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Values for CustomerBenefitGrantSortProperty TypeScript\nDESCRIPTION: Defines the possible values for the CustomerBenefitGrantSortProperty type. These values represent the fields that can be used to sort customer benefit grants, along with the direction of the sort (ascending or descending).  The values are likely used in a function to retrieve and display the data.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantsortproperty.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"granted_at\" | \"-granted_at\" | \"type\" | \"-type\" | \"organization\" | \"-organization\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Float Number Value in TypeScript\nDESCRIPTION: This snippet shows how to define a float number value in TypeScript. It is intended to illustrate the supported type when creating product metadata for a CheckoutLink. There are no external dependencies.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkcreateproductmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: String RefundMetadata in TypeScript\nDESCRIPTION: This snippet shows how to define a RefundMetadata value as a string in TypeScript. The `value` constant is assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/refundmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: TokenType Values in TypeScript\nDESCRIPTION: This code snippet defines the possible string literal values for the `TokenType` enum. These include 'access_token' and 'refresh_token', representing the two supported token types.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/tokentype.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"access_token\" | \"refresh_token\"\n```\n\n----------------------------------------\n\nTITLE: ProductBillingType Values TypeScript\nDESCRIPTION: Defines the possible string values for the ProductBillingType enum, which are 'one_time' and 'recurring'. These values represent the billing frequency of a product.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productbillingtype.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"one_time\" | \"recurring\"\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration\nDESCRIPTION: Declares a boolean variable named `value` and initializes it with a boolean literal (false). This snippet shows the declaration of boolean type variables for custom fields using TypeScript in the polar-js project.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldtextmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Defining ProductPrice in TypeScript\nDESCRIPTION: Defines a constant `value` with the type `components.ProductPrice` and assigns example data. This object includes timestamps, ID, product ID, type (recurring), and the recurring interval.  It represents a different structure for product pricing.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpublicconfirmedproductprice.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPrice = {\n  createdAt: new Date(\"2023-11-12T09:36:50.641Z\"),\n  modifiedAt: new Date(\"2023-02-28T09:49:59.454Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  type: \"recurring\",\n  recurringInterval: \"month\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Type Definition TypeScript\nDESCRIPTION: This snippet demonstrates the definition of a string type variable in TypeScript. The variable 'value' is explicitly typed as a string and assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Definition\nDESCRIPTION: Defines a boolean variable named 'value' and assigns it a boolean literal (false). This illustrates how to define a boolean type for customer metadata events in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventcreatecustomermetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Boolean Metadata Value in TypeScript\nDESCRIPTION: This snippet illustrates defining a metadata value as a boolean. The 'value' variable is typed as a boolean and assigned a boolean literal (false). This is applicable for boolean flags in metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkcreateproductpricemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Example\nDESCRIPTION: This code snippet demonstrates how to assign a boolean value to a variable within DiscountPercentageRepeatDurationMetadata. The variable `value` is explicitly typed as `boolean` and assigned the boolean value `false`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentagerepeatdurationmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a string variable in TypeScript.  The variable `value` is assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptioncustomermetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Initializing LegacyRecurringProductPriceFree in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `LegacyRecurringProductPriceFree` model in TypeScript. It showcases the required fields and their expected types. Note that `recurringInterval` should ideally be set on the product itself, as this model is deprecated.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/legacyrecurringproductpricefree.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LegacyRecurringProductPriceFree } from \"@polar-sh/sdk/models/components/legacyrecurringproductpricefree.js\";\n\nlet value: LegacyRecurringProductPriceFree = {\n  createdAt: new Date(\"2023-05-24T07:15:15.317Z\"),\n  modifiedAt: new Date(\"2025-09-19T22:00:41.278Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  recurringInterval: \"month\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Type Declaration in TypeScript\nDESCRIPTION: This code snippet shows how to declare a variable of type string array in TypeScript. The variable is named 'value' and initialized with an array of string literals. It is used to filter by multiple subscription IDs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalorderslistqueryparamsubscriptionidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Definition\nDESCRIPTION: Defines a boolean type variable with a false value. It demonstrates how to declare and initialize a boolean value for CustomFieldCheckboxMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcheckboxmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration TypeScript\nDESCRIPTION: Declares a constant variable 'value' of type string and assigns it a string literal.  This demonstrates how to represent string data within the OrderCustomerMetadata context using TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordercustomermetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitLicenseKeyExpirationProperties in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize a `BenefitLicenseKeyExpirationProperties` object from the `@polar-sh/sdk` library. It sets the `ttl` property to 214678 and the `timeframe` property to \"day\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeyexpirationproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitLicenseKeyExpirationProperties } from \"@polar-sh/sdk/models/components/benefitlicensekeyexpirationproperties.js\";\n\nlet value: BenefitLicenseKeyExpirationProperties = {\n  ttl: 214678,\n  timeframe: \"day\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerBenefitGrantCustomUpdate TypeScript\nDESCRIPTION: This snippet initializes an empty CustomerBenefitGrantCustomUpdate object using TypeScript.  It defines a constant variable `value` with the type `components.CustomerBenefitGrantCustomUpdate` and assigns an empty object to it.  This represents a custom update with no predefined properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomerBenefitGrantCustomUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: RevokeTokenResponse Example Usage TypeScript\nDESCRIPTION: This snippet demonstrates how to import and instantiate the `RevokeTokenResponse` model in TypeScript.  It requires the `@polar-sh/sdk` package to be installed. The `RevokeTokenResponse` is imported from `@polar-sh/sdk/models/components/revoketokenresponse.js` and an empty object is assigned to a variable of this type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/revoketokenresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RevokeTokenResponse } from \"@polar-sh/sdk/models/components/revoketokenresponse.js\";\n\nlet value: RevokeTokenResponse = {};\n```\n\n----------------------------------------\n\nTITLE: Creating a RevokeTokenRequest object in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the RevokeTokenRequest type and create an instance of it with the required fields (token, clientId, and clientSecret) populated with placeholder values. The token type hint is optional.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/revoketokenrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RevokeTokenRequest } from \"@polar-sh/sdk/models/components/revoketokenrequest.js\";\n\nlet value: RevokeTokenRequest = {\n  token: \"<value>\",\n  clientId: \"<id>\",\n  clientSecret: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration in TypeScript\nDESCRIPTION: This snippet demonstrates the declaration of a string variable in TypeScript. It initializes a constant variable named 'value' with a string literal. This example shows how to define a string type variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Float Type Declaration in TypeScript\nDESCRIPTION: This snippet illustrates how to declare a floating-point number variable in TypeScript. It assigns a float literal to the variable 'value'. No dependencies are required. The expected output is a floating-point number.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/refundcreatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Declaration TypeScript\nDESCRIPTION: This snippet illustrates how to declare a number variable with a floating-point value in TypeScript. The `value` variable is assigned a floating-point number. This demonstrates the representation of decimal numbers in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdatedatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitMeterCreditProperties in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a `BenefitMeterCreditProperties` object in TypeScript. It imports the necessary class from the `@polar-sh/sdk/models/components/benefitmetercreditproperties.js` module and creates an instance with sample values for the `units` (number) and `meterId` (string) properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitMeterCreditProperties } from \"@polar-sh/sdk/models/components/benefitmetercreditproperties.js\";\n\nlet value: BenefitMeterCreditProperties = {\n  units: 739520,\n  meterId: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: components.TaxIDFormat Tax ID Value in TypeScript\nDESCRIPTION: This snippet demonstrates representing a customer tax ID using the `components.TaxIDFormat` type in TypeScript. The `value` variable is assigned the string literal \"ua_vat\", likely representing a specific tax ID format from a components library.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customertaxid.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.TaxIDFormat = \"ua_vat\";\n```\n\n----------------------------------------\n\nTITLE: Declaring Number Array Type in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a variable of type number array in TypeScript. It initializes the variable 'value' with an array containing a numeric literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metadataquery.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number[] = [\n  986366,\n];\n```\n\n----------------------------------------\n\nTITLE: Values Definition - TypeScript\nDESCRIPTION: This snippet lists the possible string literal values for the `BenefitGrantGitHubRepositoryPropertiesPermission` type. These values correspond to GitHub repository permissions.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgrantgithubrepositorypropertiespermission.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"pull\" | \"triage\" | \"push\" | \"maintain\" | \"admin\"\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Assignment TypeScript\nDESCRIPTION: This snippet illustrates how to assign a boolean value to a variable in TypeScript. The variable `value` is declared as a boolean and initialized with the boolean value `false`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productupdatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: String Type Definition in TypeScript\nDESCRIPTION: Defines a string variable named 'value' and initializes it with a string literal. This demonstrates how to define a string type for custom field data in polar-js.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutconfirmstripecustomfielddata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Declaring a string variable in TypeScript\nDESCRIPTION: This snippet shows how to declare a string variable in TypeScript and assign it a string value. It is used for defining string type metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/orderproductmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Defining ExistingProductPrice Type in TypeScript\nDESCRIPTION: Defines an object of type `components.ExistingProductPrice`. This type is used when referencing an existing product price by its ID. The `id` field is a string representing the unique identifier of the product price.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productupdateprices.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ExistingProductPrice = {\n  id: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration in TypeScript\nDESCRIPTION: This snippet demonstrates the declaration of a boolean variable in TypeScript. It initializes a constant variable named 'value' with the boolean value 'false'. This is a simple example of defining a boolean type variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Example (TypeScript)\nDESCRIPTION: Explains how to define a boolean value for CheckoutLinkUpdateMetadata with TypeScript. The `value` constant is assigned a boolean literal (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkupdatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a string variable in TypeScript using the `string` type. The variable `value` is assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Integer Value Definition in TypeScript\nDESCRIPTION: This snippet shows how to define an integer value using TypeScript for CustomFieldNumberMetadata. The value is assigned directly as an integer literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldnumbermetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: OAuth2ClientConfigurationGrantTypes Usage TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the OAuth2ClientConfigurationGrantTypes enum from the @polar-sh/sdk/models/components/oauth2clientconfiguration.js module. It shows an example of assigning the 'refresh_token' value to a variable of this type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/oauth2clientconfigurationgranttypes.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OAuth2ClientConfigurationGrantTypes } from \"@polar-sh/sdk/models/components/oauth2clientconfiguration.js\";\n\nlet value: OAuth2ClientConfigurationGrantTypes = \"refresh_token\";\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Assignment TypeScript\nDESCRIPTION: This snippet demonstrates how to assign a boolean value (false) to a constant variable 'value' using TypeScript. It shows the basic syntax for boolean assignment.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/meterupdatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Number Type Definition in TypeScript\nDESCRIPTION: Defines a number variable named 'value' and initializes it with a numeric literal. This shows how to define a number type for custom field data within the polar-js project.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutconfirmstripecustomfielddata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Declaring String Type in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a variable of type `string` and assign it a string value in TypeScript. This is used to set string metadata within BenefitDiscordUpdateMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordupdatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Value Declaration TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a string variable named 'value' and assign a string literal to it in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedrepeatdurationcreatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Date Custom Field Value TypeScript\nDESCRIPTION: Defines a custom field value as a Date object.  The `value` variable is typed as `Date` and initialized with a new Date object using an ISO string representation.  This example demonstrates how to represent date and time data within a custom field.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfielddata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: Date = new Date(\"2023-12-07T03:31:58.587Z\");\n```\n\n----------------------------------------\n\nTITLE: String Subscription ID Filter - TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a subscription ID filter using a string value in TypeScript.  It shows the basic syntax for initializing a string variable with a placeholder value for the subscription ID. This is used in query parameters for filtering subscriptions.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparamsubscriptionidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Organization ID Filter with string array in TypeScript\nDESCRIPTION: This code snippet demonstrates how to filter by multiple organization IDs using an array of strings in TypeScript. It defines a constant `value` of type `string[]` assigned to an array containing a single organization ID. This filter can be extended to include multiple organization IDs for retrieving refunds associated with any of those organizations.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/refundslistqueryparamorganizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: Integer Number Value Definition TypeScript\nDESCRIPTION: Defines a number variable named 'value' and assigns it an integer value. This snippet illustrates how to declare a number type variable with an integer value in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustomcreatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Declaring Number Type in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a variable of type number in TypeScript. It initializes the variable 'value' with a numeric literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metadataquery.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Integer Number Type Declaration TypeScript\nDESCRIPTION: Demonstrates the declaration of an integer number variable in TypeScript. It showcases how to assign an integer value to a variable using the `number` type annotation.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablesmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration TypeScript\nDESCRIPTION: Demonstrates the declaration of a boolean type variable in TypeScript, assigning it a boolean value (false). This is a fundamental example showcasing the creation and assignment of a boolean value to a variable.  No external dependencies are needed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeyscreatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Initializing ListResourceFileRead in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a `ListResourceFileRead` object with sample data. It imports the `ListResourceFileRead` component and constructs an object with sample file information and pagination details. The `items` array contains file metadata, and the `pagination` object provides total count and max page information.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourcefileread.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceFileRead } from \"@polar-sh/sdk/models/components/listresourcefileread.js\";\n\nlet value: ListResourceFileRead = {\n  items: [\n    {\n      id: \"<value>\",\n      organizationId: \"<value>\",\n      name: \"<value>\",\n      path: \"/selinux\",\n      mimeType: \"<value>\",\n      size: 370412,\n      storageVersion: \"<value>\",\n      checksumEtag: \"<value>\",\n      checksumSha256Base64: \"<value>\",\n      checksumSha256Hex: \"<value>\",\n      lastModifiedAt: new Date(\"2025-04-21T21:26:30.509Z\"),\n      version: \"<value>\",\n      isUploaded: false,\n      createdAt: new Date(\"2024-02-23T13:32:53.778Z\"),\n      sizeReadable: \"<value>\",\n      publicUrl: \"https://next-parsnip.net\",\n    },\n  ],\n  pagination: {\n    totalCount: 560177,\n    maxPage: 694044,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Boolean Array Type in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a variable of type boolean array in TypeScript. It initializes the variable 'value' with an array containing a boolean literal (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metadataquery.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean[] = [\n  false,\n];\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Definition in TypeScript\nDESCRIPTION: This snippet shows how to define a boolean value using TypeScript for CustomFieldNumberMetadata. The value is assigned directly as a boolean literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldnumbermetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: String TaxId Value in TypeScript\nDESCRIPTION: This snippet demonstrates how to represent a tax ID value as a string in TypeScript. The 'value' variable is assigned a string literal which should correspond to the tax ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerupdatetaxid.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Value Assignment TypeScript\nDESCRIPTION: This snippet demonstrates how to assign a string value to a constant variable 'value' using TypeScript. It shows the basic syntax for string assignment.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/meterupdatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Declaration\nDESCRIPTION: Demonstrates how to declare and assign a floating-point number value to a constant variable in TypeScript. The variable 'value' is explicitly typed as 'number' and assigned the float literal '1284.03'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountupdatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Integer Number Type Declaration in TypeScript\nDESCRIPTION: This snippet shows how to declare an integer number variable in TypeScript. The variable `value` is explicitly typed as `number` and assigned an integer value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatesubscriptionmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Float Number Type Declaration in Typescript\nDESCRIPTION: Declares a number variable named 'value' and assigns it a floating-point value. This demonstrates how to declare a float number type variable in TypeScript for use with DiscountPercentageRepeatDurationCreateMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentagerepeatdurationcreatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Declaring a String Value in TypeScript\nDESCRIPTION: This snippet shows how to declare a string value for DiscountFixedRepeatDurationBaseMetadata using TypeScript. The variable `value` is assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedrepeatdurationbasemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Number (Float) type for CustomFieldDateMetadata\nDESCRIPTION: Demonstrates the usage of a float number type value for CustomFieldDateMetadata. The value is assigned to a constant 'value' of type number.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfielddatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Import and Use MeterSortProperty in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `MeterSortProperty` type from the `@polar-sh/sdk/models/components/metersortproperty.js` module. It initializes a variable `value` of type `MeterSortProperty` with the value `\"created_at\"`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metersortproperty.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MeterSortProperty } from \"@polar-sh/sdk/models/components/metersortproperty.js\";\n\nlet value: MeterSortProperty = \"created_at\";\n```\n\n----------------------------------------\n\nTITLE: Number Type Declaration (Integer) TypeScript\nDESCRIPTION: This snippet demonstrates how to declare and initialize a number variable (integer) in TypeScript. The variable 'value' is assigned an integer value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreatenumbermetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Float Metadata Value Declaration TypeScript\nDESCRIPTION: This code snippet shows how to declare a floating-point number value for customer metadata within the PolarJS context. The `value` constant is assigned a floating-point number literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutupdatecustomermetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration TypeScript\nDESCRIPTION: Declares a constant variable 'value' of type boolean and assigns a boolean literal (false) to it. This shows how to define a boolean value for meter metadata in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metermetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: String Product ID Filter - TypeScript\nDESCRIPTION: This code snippet demonstrates how to filter subscriptions by a single product ID using a string value in TypeScript.  The variable `value` is assigned a string representing the product ID.  This is one of the supported types for the `CustomerPortalSubscriptionsListQueryParamProductIDFilter`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalsubscriptionslistqueryparamproductidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration TypeScript\nDESCRIPTION: Demonstrates the declaration of a string variable named 'value' and its initialization with a string literal. This shows how to define a string type for updating metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositoryupdatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Declaring a Number Value (Float) in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a floating-point number value for DiscountFixedRepeatDurationBaseMetadata using TypeScript. The variable `value` is assigned a float literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedrepeatdurationbasemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a boolean variable in TypeScript and assign it a boolean value. It defines a constant variable named 'value' of type boolean and initializes it with the value false.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedrepeatdurationmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Integer Metadata Value Declaration TypeScript\nDESCRIPTION: This code snippet shows how to declare an integer number value for customer metadata within the PolarJS context. The `value` constant is assigned an integer literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutupdatecustomermetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Float Value Assignment TypeScript\nDESCRIPTION: Demonstrates how to assign a floating-point number value to a variable using TypeScript. The variable is declared using the `const` keyword and assigned a floating-point literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdatecheckboxmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Declaration TypeScript\nDESCRIPTION: Declares a number variable named 'value' and initializes it with an integer. This snippet illustrates the usage of integers as a valid data type for the BenefitMeterCreditSubscriberMetadata in polar-js.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditsubscribermetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Declaring a Boolean Value in TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a boolean variable named `value` and assign it the boolean value `false`. It serves as an example of the boolean data type supported in LicenseKeyCustomerMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/licensekeycustomermetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Number Value Assignment (Integer) in TypeScript\nDESCRIPTION: This code snippet illustrates how to assign an integer value to a number variable in TypeScript. The variable 'value' is declared as a number and is assigned the integer value 128403.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentagerepeatdurationbasemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Defining CheckoutDiscountFixedRepeatDuration TypeScript Type\nDESCRIPTION: This snippet defines the structure for a fixed amount checkout discount that can be applied repeatedly. It specifies the discount type as 'fixed', the amount, the currency, the duration as 'once', and duration in months.  It also includes properties like id, name, and code.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutdiscount.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CheckoutDiscountFixedRepeatDuration = {\n  duration: \"once\",\n  durationInMonths: 856949,\n  type: \"fixed\",\n  amount: 177391,\n  currency: \"Uzbekistan Sum\",\n  id: \"<value>\",\n  name: \"<value>\",\n  code: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration TypeScript\nDESCRIPTION: Shows the declaration of a boolean variable named 'value' and its initialization with a boolean literal (false).  This demonstrates how to define a boolean type for metadata updates.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositoryupdatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: String Custom Field Value TypeScript\nDESCRIPTION: Defines a custom field value as a string. The `value` variable is explicitly typed as `string` and assigned a string literal. This demonstrates how to represent string data within the custom field.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfielddata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Defining Float Number Value in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a floating-point number value for CustomFieldUpdateTextMetadata. The `value` constant is assigned a float literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdatetextmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Declaring Float Value\nDESCRIPTION: This snippet shows how to declare a number variable named 'value' and assign it a floating-point literal. It demonstrates the basic syntax for number (float) type declaration in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedonceforeverdurationmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Declaration TypeScript\nDESCRIPTION: Demonstrates the declaration of a number variable with an integer value in TypeScript. The variable `value` is assigned an integer literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Definition\nDESCRIPTION: Defines a constant `value` of type `number` and assigns it an integer value. This shows how to define an integer type for BenefitMeterCreditCreateMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditcreatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Declaring a Float Variable in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a floating-point number variable in TypeScript. It initializes a constant variable named 'value' with a floating-point number literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration\nDESCRIPTION: Demonstrates how to declare and assign a boolean value to a constant variable in TypeScript. The variable 'value' is explicitly typed as 'boolean' and assigned the boolean literal 'false'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountupdatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Declaration TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a boolean variable named 'value' and assign a boolean literal (false) to it in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedrepeatdurationcreatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Float Number Type Declaration in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a floating-point number variable in TypeScript. The variable `value` is explicitly typed as `number` and assigned a float value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordsubscribermetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration in TypeScript\nDESCRIPTION: This code snippet shows how to declare a boolean variable with a false value in TypeScript. It presents the syntax for defining a boolean variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditupdatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration TypeScript\nDESCRIPTION: Demonstrates the declaration of a boolean variable in TypeScript. It showcases how to assign a boolean value to a variable using the `boolean` type annotation.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablesmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Float Number Value Definition TypeScript\nDESCRIPTION: Defines a number variable named 'value' and assigns it a floating-point number value. This snippet demonstrates how to declare a number type variable with a float value in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustomcreatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitLicenseKeysUpdate Type - TypeScript\nDESCRIPTION: Initializes an empty `BenefitLicenseKeysUpdate` object. This snippet demonstrates how to define a license key benefit update type, utilizing the `components` module. This type is designed to manage license keys associated with benefits within the Polar platform.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/benefitsupdatebenefitupdate.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitLicenseKeysUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: Decimal Number Metadata Creation\nDESCRIPTION: Demonstrates how to create a decimal number metadata value in TypeScript. This snippet defines a constant variable named 'value' and assigns it a floating-point number value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metercreatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: DiscountType Values (TypeScript)\nDESCRIPTION: This snippet shows the possible values for the `DiscountType` enum or union. It can be either \"fixed\" or \"percentage\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discounttype.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"fixed\" | \"percentage\"\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitGitHubRepositoryUpdate Type - TypeScript\nDESCRIPTION: Initializes a `BenefitGitHubRepositoryUpdate` object with repository details. This snippet defines a GitHub repository benefit update type using the `components` module. It specifies the repository owner, name, and desired permission level (admin) for the benefit.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/benefitsupdatebenefitupdate.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGitHubRepositoryUpdate = {\n  properties: {\n    repositoryOwner: \"polarsource\",\n    repositoryName: \"private_repo\",\n    permission: \"admin\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Example\nDESCRIPTION: This code snippet demonstrates how to assign a floating-point number to a variable within DiscountPercentageRepeatDurationMetadata. The variable `value` is explicitly typed as `number` and assigned the floating-point value 1284.03.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentagerepeatdurationmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitGrantLicenseKeysProperties TypeScript\nDESCRIPTION: Defines an empty object of type `components.BenefitGrantLicenseKeysProperties` using TypeScript. This likely represents the properties related to benefit grants associated with license keys. It initializes a constant `value` with an empty object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgrantwebhookproperties.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGrantLicenseKeysProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Declaration in TypeScript\nDESCRIPTION: Declares a constant variable 'value' of type number and assigns it an integer value. This illustrates the definition of an integer number type in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeyssubscribermetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Type in TypeScript\nDESCRIPTION: This snippet illustrates how to define a boolean variable in TypeScript, representing a true/false value for a custom field. The const keyword ensures the variable cannot be reassigned.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpublicconfirmedcustomfielddata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration TypeScript\nDESCRIPTION: Declares a constant variable 'value' of type boolean and assigns it a boolean value (false). This shows how to represent true/false values for OrderCustomerMetadata using TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordercustomermetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Integer RefundMetadata in TypeScript\nDESCRIPTION: This snippet shows how to define a RefundMetadata value as an integer in TypeScript. The `value` constant is assigned an integer literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/refundmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Float Declaration and Initialization in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a number variable (specifically, a floating-point number) named 'value' and initialize it with a floating-point value in TypeScript. The 'const' keyword is used to declare a constant variable. This is useful for representing decimal values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablessubscribermetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration TypeScript\nDESCRIPTION: This snippet demonstrates how to declare and initialize a boolean variable in TypeScript. The variable 'value' is assigned a boolean value (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreatenumbermetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration TypeScript\nDESCRIPTION: Demonstrates the declaration of a string type variable in TypeScript, assigning it a placeholder string value.  This shows how to define a string variable and assign it a string literal. No dependencies are required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeyscreatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Integer Number Type Declaration TypeScript\nDESCRIPTION: This snippet demonstrates how to declare an integer number variable in TypeScript using the `number` type. The variable `value` is assigned an integer literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Number Value Declaration in TypeScript\nDESCRIPTION: Declares a number variable named `value` and assigns it a numeric literal. This demonstrates how to represent numeric data as a custom field value. No external dependencies are required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatesubscriptioncustomfielddata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Declaration TypeScript\nDESCRIPTION: Shows the declaration of a number type variable in TypeScript, assigning it a floating-point value. This example demonstrates how to create and assign a floating-point number to a variable. No dependencies are required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeyscreatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Importing NotOpenCheckout Error Model - TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `NotOpenCheckout` error model from the `@polar-sh/sdk/models/errors/notopencheckout.js` module in a TypeScript project. This allows you to use the `NotOpenCheckout` class in your code to handle specific error scenarios related to checkout processes. There are no instantiation examples provided, indicating it may be a base error class.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/errors/notopencheckout.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NotOpenCheckout } from \"@polar-sh/sdk/models/errors/notopencheckout.js\";\n\n// No examples available for this model\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Declaration and Assignment in TypeScript\nDESCRIPTION: This snippet illustrates how to declare a number variable and assign it an integer value in TypeScript. The variable 'value' is explicitly typed as a number and assigned the integer value 128403.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentageonceforeverdurationmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Initializing ProductPriceFreeCreate in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a `ProductPriceFreeCreate` object in TypeScript. The object is initialized as empty, signifying a free product.  No dependencies are explicitly mentioned.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productcreateprices.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductPriceFreeCreate = {};\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration in TypeScript\nDESCRIPTION: This snippet shows how to declare a boolean variable in TypeScript. It assigns a boolean literal (false) to the variable 'value'. No dependencies are required. The expected output is a boolean value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/refundcreatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Integer Metadata Value in TypeScript\nDESCRIPTION: This snippet demonstrates defining a metadata value as an integer. The 'value' variable is explicitly typed as a number and is assigned an integer literal, suitable for numerical metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkcreateproductpricemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Date Custom Field in TypeScript\nDESCRIPTION: Demonstrates how to create a Date object in TypeScript for use in custom fields. A new Date object is instantiated with a specific date and time string.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordercustomfielddata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: Date = new Date(\"2023-12-07T03:31:58.587Z\");\n```\n\n----------------------------------------\n\nTITLE: Float Declaration in TypeScript\nDESCRIPTION: This code snippet demonstrates the declaration of a floating-point number variable in TypeScript. A constant variable 'value' is initialized with a floating-point number literal. This illustrates the usage of floating-point numbers within the order subscription metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordersubscriptionmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration TypeScript\nDESCRIPTION: Demonstrates the declaration of a string variable in TypeScript. It showcases how to assign a string value to a variable using the `string` type annotation.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablesmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: CustomerID Filter with String - TypeScript\nDESCRIPTION: Demonstrates filtering by customer ID using a single string value.  The `value` constant represents the customer ID to filter by.  This is one of the supported types for filtering events list names.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/eventslistnamesqueryparamcustomeridfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Benefit ID Filter in TypeScript\nDESCRIPTION: This code snippet shows how to define a `QueryParamBenefitIDFilter` using a single string value. The `value` constant is assigned a string that represents the benefit ID to filter by. This example uses TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparambenefitidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Declaring a Number Value (Integer) in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare an integer number value for DiscountFixedRepeatDurationBaseMetadata using TypeScript. The variable `value` is assigned an integer literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedrepeatdurationbasemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: String type for CustomFieldDateMetadata\nDESCRIPTION: Demonstrates the usage of a string type value for CustomFieldDateMetadata.  The value is assigned to a constant 'value' of type string.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfielddatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Integer Number Declaration in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare an integer number variable in TypeScript and assign it an integer value. The `const` keyword indicates that the variable is a constant.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeysmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Declaration in TypeScript\nDESCRIPTION: Declares a constant variable 'value' of type number and assigns it a floating-point value.  This shows how to declare and assign a floating-point number type in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeyssubscribermetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration in TypeScript\nDESCRIPTION: This snippet shows how to declare a string variable in TypeScript.  It assigns a string literal to the variable 'value'. No dependencies are required. The expected output is a string value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/refundcreatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Floating Point Number Type Declaration TypeScript\nDESCRIPTION: Declares a number variable named 'value' and assigns it a floating-point value. This illustrates the syntax for defining a floating-point number in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositorysubscribermetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: BenefitDownloadablesSubscriberProperties Usage TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and utilize the `BenefitDownloadablesSubscriberProperties` model from the `@polar-sh/sdk` library. It initializes an object with a list of `activeFiles`, showcasing the structure and required fields of the model. The `activeFiles` property expects an array of strings.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablessubscriberproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitDownloadablesSubscriberProperties } from \"@polar-sh/sdk/models/components/benefitdownloadablessubscriberproperties.js\";\n\nlet value: BenefitDownloadablesSubscriberProperties = {\n  activeFiles: [\n    \"<value>\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomFieldNumberProperties in TypeScript\nDESCRIPTION: This snippet shows how to import and initialize an empty `CustomFieldNumberProperties` object using TypeScript. It imports the `CustomFieldNumberProperties` class from the `@polar-sh/sdk/models/components/customfieldnumberproperties.js` module. This is typically used when constructing or manipulating objects that require these properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldnumberproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldNumberProperties } from \"@polar-sh/sdk/models/components/customfieldnumberproperties.js\";\n\nlet value: CustomFieldNumberProperties = {};\n```\n\n----------------------------------------\n\nTITLE: String type assignment\nDESCRIPTION: Demonstrates how to assign a string value to a variable in TypeScript.  The variable 'value' is declared as a string and assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdatenumbermetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Declaring a String Variable in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a string variable in TypeScript. It initializes a constant variable named 'value' with a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Boolean Custom Field in TypeScript\nDESCRIPTION: Declares and initializes a boolean variable representing a custom field with a boolean value. The variable `value` is assigned a boolean literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordercustomfielddata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: String Declaration in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a string variable in TypeScript and assign it a string value. The `const` keyword indicates that the variable is a constant and cannot be reassigned after initialization.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeysmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a variable of type boolean in TypeScript. The variable `value` is explicitly typed as a boolean and assigned the boolean value `false`. This shows how to represent truthy/falsy values.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositorycreatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Declaring Integer Value\nDESCRIPTION: This snippet shows how to declare a number variable named 'value' and assign it an integer literal. It demonstrates the basic syntax for number (integer) type declaration in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedonceforeverdurationmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: String Value Assignment in TypeScript\nDESCRIPTION: This snippet demonstrates assigning a string value to a constant variable named `value` in TypeScript. It showcases the syntax for string literals.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Declaring Boolean Type in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a variable of type `boolean` and assign it a boolean value in TypeScript. This is used to set boolean metadata within BenefitDiscordUpdateMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordupdatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: OrderIDFilter with String Type in TypeScript\nDESCRIPTION: This snippet demonstrates how to define the 'value' constant as a string for use with the OrderIDFilter. The string represents a single order ID that will be used for filtering.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/orderidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Creating CheckoutPublicConfirmed Instance in Typescript\nDESCRIPTION: This code snippet demonstrates how to import the CheckoutPublicConfirmed model from the @polar-sh/sdk and create an instance of it. The example initializes the object with various properties, showcasing the structure and expected data types. The dates are initialized using `new Date()`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpublicconfirmed.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CheckoutPublicConfirmed } from \"@polar-sh/sdk/models/components/checkoutpublicconfirmed.js\";\n\nlet value: CheckoutPublicConfirmed = {\n  createdAt: new Date(\"2024-10-16T08:53:32.833Z\"),\n  modifiedAt: new Date(\"2023-07-15T17:52:40.466Z\"),\n  id: \"<value>\",\n  paymentProcessor: \"stripe\",\n  clientSecret: \"<value>\",\n  url: \"https://quick-witted-saw.net\",\n  expiresAt: new Date(\"2023-02-22T09:59:05.552Z\"),\n  successUrl: \"https://extra-large-tooth.net\",\n  embedOrigin: \"<value>\",\n  amount: 910542,\n  discountAmount: 161082,\n  netAmount: 81294,\n  taxAmount: 879261,\n  totalAmount: 678454,\n  currency: \"Russian Ruble\",\n  productId: \"<value>\",\n  productPriceId: \"<value>\",\n  discountId: \"<value>\",\n  allowDiscountCodes: false,\n  requireBillingAddress: false,\n  isDiscountApplicable: false,\n  isFreeProductPrice: false,\n  isPaymentRequired: false,\n  isPaymentSetupRequired: false,\n  isPaymentFormRequired: false,\n  customerId: \"<value>\",\n  customerName: \"<value>\",\n  customerEmail: \"<value>\",\n  customerIpAddress: \"<value>\",\n  customerBillingAddress: {\n    country: \"SE\",\n  },\n  customerTaxId: \"<id>\",\n  paymentProcessorMetadata: {\n    \"key\": \"<value>\",\n  },\n  products: [\n    {\n      createdAt: new Date(\"2023-09-05T11:26:36.285Z\"),\n      modifiedAt: new Date(\"2024-07-29T10:16:49.727Z\"),\n      id: \"<value>\",\n      name: \"<value>\",\n      description: \"grandpa that retention\",\n      recurringInterval: \"month\",\n      isRecurring: false,\n      isArchived: false,\n      organizationId: \"<value>\",\n      prices: [\n        {\n          createdAt: new Date(\"2024-06-22T17:52:31.158Z\"),\n          modifiedAt: new Date(\"2024-05-24T04:59:06.651Z\"),\n          id: \"<value>\",\n          isArchived: false,\n          productId: \"<value>\",\n          recurringInterval: \"year\",\n          priceCurrency: \"<value>\",\n          priceAmount: 876738,\n        },\n      ],\n      benefits: [\n        {\n          id: \"<value>\",\n          createdAt: new Date(\"2023-02-11T09:30:15.450Z\"),\n          modifiedAt: new Date(\"2025-03-19T15:22:19.026Z\"),\n          type: \"license_keys\",\n          description:\n            \"round likewise characterization ugh ascertain follower inasmuch construe\",\n          selectable: false,\n          deletable: false,\n          organizationId: \"<value>\",\n        },\n      ],\n      medias: [\n        {\n          id: \"<value>\",\n          organizationId: \"<value>\",\n          name: \"<value>\",\n          path: \"/opt/lib\",\n          mimeType: \"<value>\",\n          size: 38653,\n          storageVersion: \"<value>\",\n          checksumEtag: \"<value>\",\n          checksumSha256Base64: \"<value>\",\n          checksumSha256Hex: \"<value>\",\n          lastModifiedAt: new Date(\"2023-02-17T16:51:02.118Z\"),\n          version: \"<value>\",\n          isUploaded: false,\n          createdAt: new Date(\"2025-09-30T00:51:43.895Z\"),\n          sizeReadable: \"<value>\",\n          publicUrl: \"https://utter-hierarchy.com\",\n        },\n      ],\n    },\n  ],\n  product: {\n    createdAt: new Date(\"2023-02-12T11:13:02.082Z\"),\n    modifiedAt: new Date(\"2025-02-08T14:26:10.085Z\"),\n    id: \"<value>\",\n    name: \"<value>\",\n    description:\n      \"harvest yum outside fall yahoo resource towards freezing absent primary\",\n    recurringInterval: \"month\",\n    isRecurring: false,\n    isArchived: false,\n    organizationId: \"<value>\",\n    prices: [\n      {\n        createdAt: new Date(\"2024-08-03T01:43:36.138Z\"),\n        modifiedAt: new Date(\"2025-03-22T13:02:00.251Z\"),\n        id: \"<value>\",\n        isArchived: false,\n        productId: \"<value>\",\n        recurringInterval: \"month\",\n      },\n    ],\n    benefits: [\n      {\n        id: \"<value>\",\n        createdAt: new Date(\"2024-01-19T13:03:14.943Z\"),\n        modifiedAt: new Date(\"2023-06-03T15:16:46.127Z\"),\n        type: \"custom\",\n        description: \"even slow iterate shrill ick vibrant\",\n        selectable: false,\n        deletable: false,\n        organizationId: \"<value>\",\n      },\n    ],\n    medias: [\n      {\n        id: \"<value>\",\n        organizationId: \"<value>\",\n        name: \"<value>\",\n        path: \"/usr/X11R6\",\n        mimeType: \"<value>\",\n        size: 787634,\n        storageVersion: \"<value>\",\n        checksumEtag: \"<value>\",\n        checksumSha256Base64: \"<value>\",\n        checksumSha256Hex: \"<value>\",\n        lastModifiedAt: new Date(\"2023-11-28T16:10:18.109Z\"),\n        version: \"<value>\",\n        isUploaded: false,\n        createdAt: new Date(\"2023-08-22T21:22:37.381Z\"),\n        sizeReadable: \"<value>\",\n        publicUrl: \"https://lazy-cuckoo.name/\",\n      },\n    ],\n  },\n  productPrice: {\n    createdAt: new Date(\"2025-10-30T15:19:36.242Z\"),\n    modifiedAt: new Date(\"2024-05-30T01:49:17.169Z\"),\n    id: \"<value>\",\n    isArchived: false,\n    productId: \"<value>\",\n    type: \"recurring\",\n    recurringInterval: \"year\",\n    priceCurrency: \"<value>\",\n    minimumAmount: 47635,\n    maximumAmount: 216912,\n    presetAmount: 637902,\n  },\n  discount: {\n    duration: \"once\",\n    durationInMonths: 214551,\n    type: \"fixed\",\n    basisPoints: 406753,\n    id: \"<value>\",\n    name: \"<value>\",\n    code: \"<value>\",\n  },\n  organization: {\n    createdAt: new Date(\"2025-12-12T16:27:36.101Z\"),\n    modifiedAt: new Date(\"2023-04-11T18:23:45.749Z\"),\n    id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n    name: \"<value>\",\n    slug: \"<value>\",\n    avatarUrl: \"https://unsung-legislature.biz\",\n    email: \"Josefa.Hauck-Renner45@hotmail.com\",\n    website: \"<value>\",\n    socials: [\n      {\n        platform: \"x\",\n        url: \"https://wrathful-calculus.net\",\n      },\n    ],\n    detailsSubmittedAt: new Date(\"2023-04-24T00:06:56.848Z\"),\n    featureSettings: {},\n    subscriptionSettings: {\n      allowMultipleSubscriptions: false,\n      allowCustomerUpdates: false,\n      prorationBehavior: \"invoice\",\n    },\n  },\n  attachedCustomFields: [\n    {\n      customFieldId: \"<value>\",\n      customField: {\n        createdAt: new Date(\"2023-11-30T15:40:30.154Z\"),\n        modifiedAt: new Date(\"2023-11-26T06:47:26.707Z\"),\n        id: \"<value>\",\n        metadata: {\n          \"key\": 6544.03,\n        },\n        slug: \"<value>\",\n        name: \"<value>\",\n        organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n        properties: {},\n      },\n      order: 315026,\n      required: false,\n    },\n  ],\n  customerSessionToken: \"<value>\",\n  customerBillingAddressFields: {\n    country: false,\n    state: false,\n    city: false,\n    postalCode: false,\n    line1: false,\n    line2: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Declaration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a number (float) variable in TypeScript. The variable `value` is assigned a floating-point literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustomupdatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Import and Assign CustomerCancellationReason\nDESCRIPTION: This snippet demonstrates how to import the CustomerCancellationReason type from the polar-sh SDK and assign a value to a variable of that type. The example uses the 'low_quality' value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customercancellationreason.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerCancellationReason } from \"@polar-sh/sdk/models/components/customercancellationreason.js\";\n\nlet value: CustomerCancellationReason = \"low_quality\";\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Definition TypeScript\nDESCRIPTION: This snippet demonstrates the definition of a number (integer) type variable in TypeScript. The variable 'value' is explicitly typed as a number and assigned an integer literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Organization ID Filter with String in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a single organization ID as a string for filtering purposes. The variable `value` is assigned a string representing the organization ID. This is used to specify a single organization to include or exclude from a set of results.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/organizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: CustomFieldType Values (TypeScript)\nDESCRIPTION: This code snippet shows the possible string literal values for the `CustomFieldType` type.  These represent the different types of custom fields that can be defined within the Polar system.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldtype.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"text\" | \"number\" | \"date\" | \"checkbox\" | \"select\"\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration TypeScript\nDESCRIPTION: Defines a string variable named 'value' and initializes it with a string literal. This demonstrates how to declare a string type within TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedonceforeverdurationcreatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: TaxIDFormat Value TypeScript\nDESCRIPTION: Defines a tax ID value using the `components.TaxIDFormat` type. This snippet illustrates how to declare a constant variable `value` and assign it a value from the `components.TaxIDFormat` enum (in this case, \"ua_vat\").\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordercustomertaxid.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.TaxIDFormat = \"ua_vat\";\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration in TypeScript\nDESCRIPTION: Declares a constant variable 'value' of type string and assigns it a string literal. This demonstrates how to define a string type in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeyssubscribermetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: ProductIDFilter with string in TypeScript\nDESCRIPTION: This snippet demonstrates how to use ProductIDFilter with a single string value.  The value is assigned to a constant `value` of type `string`. This would typically be used as input to a filtering function or component.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/productidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Value Definition TypeScript\nDESCRIPTION: Defines a string variable named 'value' and assigns it a placeholder string value. This snippet shows how to declare a string type variable in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustomcreatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Organization ID Filter with string array in TypeScript\nDESCRIPTION: This code snippet shows how to filter metrics by multiple organization IDs using a string array. The 'value' variable is an array of strings, each representing an organization ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/metricsgetqueryparamorganizationidfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitGrantDownloadablesProperties TypeScript\nDESCRIPTION: This snippet initializes an empty object of type `components.BenefitGrantDownloadablesProperties`. The purpose is to create an empty object based on the defined interface for downloadable benefit properties. It requires the `components` module and represents the initial state of downloadable benefit configurations.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/previousproperties.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGrantDownloadablesProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Filter by Organization ID (String)\nDESCRIPTION: This code snippet demonstrates how to filter by a single organization ID using a string value in TypeScript. The `value` variable is assigned a string representing the organization's unique identifier. This can be used to retrieve data associated with a specific organization.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/organizationid.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: Declaring String Type in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a variable of type string in TypeScript. It initializes the variable 'value' with a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metadataquery.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration TypeScript\nDESCRIPTION: Defines a boolean variable named 'value' and initializes it with a boolean literal (false). This shows how to declare a boolean type within TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedonceforeverdurationcreatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitGrantCustomProperties TypeScript\nDESCRIPTION: This snippet initializes an empty object of type `components.BenefitGrantCustomProperties`. It demonstrates how to create an empty object that conforms to the interface defined for custom properties within a BenefitGrant context. It requires the `components` module for type definition.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/previousproperties.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGrantCustomProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Declaration in TypeScript\nDESCRIPTION: Declares a boolean variable named `value` and assigns it a boolean literal (false). This demonstrates how to represent boolean data as a custom field value. No external dependencies are required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatesubscriptioncustomfielddata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Float Number Declaration in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a floating-point number variable in TypeScript and assign it a float value. The `const` keyword is used.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeysmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration TypeScript\nDESCRIPTION: Declares a boolean variable named 'value' and assigns it the value 'false'.  This demonstrates the basic syntax for defining a boolean type in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositorysubscribermetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Initializing Meta Object in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and initialize the Meta object from the `@polar-sh/sdk/models/components/licensekeyactivationbase.js` module in TypeScript. It creates an empty `Meta` object named `value`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/meta.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta } from \"@polar-sh/sdk/models/components/licensekeyactivationbase.js\";\n\nlet value: Meta = {};\n```\n\n----------------------------------------\n\nTITLE: String Type Definition in TypeScript\nDESCRIPTION: Defines a constant variable named 'value' of type string and assigns it a sample string value. This demonstrates the usage of the string type within the BenefitLicenseKeysUpdateMetadata context.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeysupdatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration TypeScript\nDESCRIPTION: This snippet demonstrates how to declare and initialize a string variable in TypeScript. The variable 'value' is assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreatenumbermetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Integer Number Type Declaration in Typescript\nDESCRIPTION: Declares a number variable named 'value' and assigns it an integer value. This shows how to declare an integer number type variable in TypeScript for use with DiscountPercentageRepeatDurationCreateMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentagerepeatdurationcreatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Definition in TypeScript\nDESCRIPTION: Defines a constant variable named 'value' of type number and assigns it a floating-point value. This shows the usage of the number type with a float value within the BenefitLicenseKeysUpdateMetadata context.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeysupdatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Integer Declaration in TypeScript\nDESCRIPTION: This code snippet shows how to declare an integer variable in TypeScript. It initializes a constant variable named 'value' with an integer literal. This example demonstrates representing an integer value within the order subscription metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordersubscriptionmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Declaring a Boolean Variable in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a boolean variable in TypeScript. It initializes a constant variable named 'value' with a boolean literal (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a string variable in TypeScript and assign it a string value. It defines a constant variable named 'value' of type string.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedrepeatdurationmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: SubscriptionSortProperty Example Usage TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `SubscriptionSortProperty` type from the `@polar-sh/sdk/models/components/subscriptionsortproperty.js` module. It initializes a variable of type `SubscriptionSortProperty` with the value \"customer\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptionsortproperty.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubscriptionSortProperty } from \"@polar-sh/sdk/models/components/subscriptionsortproperty.js\";\n\nlet value: SubscriptionSortProperty = \"customer\";\n```\n\n----------------------------------------\n\nTITLE: Number Type Declaration (Float) TypeScript\nDESCRIPTION: Declares a constant variable 'value' of type number and assigns it a floating-point number. It demonstrates the usage of floating-point numbers for DiscountPercentageOnceForeverDurationCreateMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentageonceforeverdurationcreatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: String Checkout ID Filter (TypeScript)\nDESCRIPTION: Defines a string type for the checkout ID filter. This allows filtering based on a single checkout ID string.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparamcheckoutidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Value Declaration in TypeScript\nDESCRIPTION: Declares a string variable named `value` and assigns it a string literal. This demonstrates how to represent string data as a custom field value. No external dependencies are required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatesubscriptioncustomfielddata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Metadata Value in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a string value for external customer metadata. The `value` constant is assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventcreateexternalcustomermetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Integer Number Type Definition\nDESCRIPTION: Defines a number variable named 'value' and assigns it an integer literal. This illustrates how to define an integer number type for customer metadata events in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventcreatecustomermetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Import and Initialize BenefitGrantDiscordProperties in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the BenefitGrantDiscordProperties type from the @polar-sh/sdk/models/components/benefitgrantdiscordproperties.js module and initialize an empty object of that type. The BenefitGrantDiscordProperties type likely represents configuration for Discord related benefits.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgrantdiscordproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitGrantDiscordProperties } from \"@polar-sh/sdk/models/components/benefitgrantdiscordproperties.js\";\n\nlet value: BenefitGrantDiscordProperties = {};\n```\n\n----------------------------------------\n\nTITLE: String Product ID Filter in TypeScript\nDESCRIPTION: Defines a string variable to represent a single product ID value for filtering. This value can then be used as a query parameter to filter products by a specific ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparamproductidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Integer Value Definition TypeScript\nDESCRIPTION: Defines a constant variable named 'value' of type number and assigns it an integer literal. This showcases how an integer number might be represented as a value for CustomFieldUpdateSelectMetadata in polar-js.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdateselectmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Declaration TypeScript\nDESCRIPTION: Demonstrates the declaration of a number variable with a floating-point value in TypeScript. The variable `value` is assigned a float literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Defining a Boolean Value in TypeScript\nDESCRIPTION: This snippet shows how to define a boolean value in TypeScript. It is intended to illustrate the supported type when creating product metadata for a CheckoutLink. There are no external dependencies.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkcreateproductmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration TypeScript\nDESCRIPTION: Declares a boolean variable named 'value' and initializes it to false. This snippet demonstrates the use of boolean values within the BenefitMeterCreditSubscriberMetadata in polar-js, allowing for true/false flags.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditsubscribermetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Defining EventSource Type (Array)\nDESCRIPTION: This code snippet shows how to define an array of event sources using the `components.EventSource[]` type. The `value` constant is assigned an array containing the string \"system\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparamsourcefilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.EventSource[] = [\n  \"system\",\n];\n```\n\n----------------------------------------\n\nTITLE: Boolean Declaration in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a boolean variable in TypeScript and assign it a boolean value (false). The `const` keyword signifies a constant variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeysmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration TypeScript\nDESCRIPTION: Declares a boolean variable named 'value' and initializes it with a boolean value (false).  This shows the usage of boolean values within the BenefitDownloadablesUpdateMetadata context.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablesupdatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Declaration TypeScript\nDESCRIPTION: This snippet shows how to declare a number variable with an integer value in TypeScript. The `value` variable is explicitly declared as a number and assigned an integer literal. This is a standard way to represent integers in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdatedatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Definition in TypeScript\nDESCRIPTION: Defines a constant variable named 'value' of type number and assigns it an integer value. This illustrates the usage of the number type with an integer value within the BenefitLicenseKeysUpdateMetadata context.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeysupdatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: String Value Assignment in TypeScript\nDESCRIPTION: This snippet shows how to assign a string value to a variable in TypeScript.  It declares a constant variable named 'value' of type string and assigns it the value '<value>'. This is used as an example for a checkbox custom field metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreatecheckboxmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Defining SubscriptionRevoke Type in TypeScript\nDESCRIPTION: This code snippet defines the structure for a `SubscriptionRevoke` object. This object does not contain any properties, indicating a simple revocation request. The code demonstrates how to instantiate a `SubscriptionRevoke` object with no specific configuration.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptionupdate.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.SubscriptionRevoke = {};\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Declaration TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a variable of type number (specifically an integer) in TypeScript. The variable `value` is explicitly typed as a number and assigned an integer literal. This is a basic numerical type example.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositorycreatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Boolean Variable Declaration\nDESCRIPTION: This snippet demonstrates how to declare a boolean variable in TypeScript and assign it a boolean value (false). This represents a simple example for assigning a boolean to a constant variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutupdatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Number Declaration TypeScript\nDESCRIPTION: Declares a constant variable `value` of type `number` and initializes it with a numeric literal. This example demonstrates how to assign a numerical value to a variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutupdatecustomfielddata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Defining EventSource Type (Single)\nDESCRIPTION: This code snippet demonstrates how to define a single event source using the `components.EventSource` type. The value is assigned to the `value` constant, which is then set to \"user\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/queryparamsourcefilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.EventSource = \"user\";\n```\n\n----------------------------------------\n\nTITLE: Number Variable Declaration (Integer)\nDESCRIPTION: This snippet demonstrates how to declare a number variable in TypeScript and assign it an integer value. This represents a simple example for assigning an integer to a constant variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutupdatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Defining Property Aggregation in TypeScript (Duplicate)\nDESCRIPTION: This TypeScript snippet demonstrates the structure of a `PropertyAggregation` object.  It specifies the aggregation function (`func`) to be applied (e.g., \"max\") and the `property` on which to perform the aggregation.  This is a crucial component for defining how specific properties of filtered events are aggregated to calculate a meter.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/meteraggregation.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.PropertyAggregation = {\n  func: \"max\",\n  property: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Declaration in TypeScript\nDESCRIPTION: This snippet shows how to declare an integer number variable in TypeScript. It defines a constant variable named 'value' and assigns an integer literal to it. This is an example of defining a number type variable with an integer value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Claude MCP Server Configuration\nDESCRIPTION: Example JSON configuration for setting up the Polar SDK as an MCP server within Claude.  It defines the command and arguments required to start the MCP server, including the access token.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"Polar\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\", \"--package\", \"@polar-sh/sdk\",\n        \"--\",\n        \"mcp\", \"start\",\n        \"--access-token\", \"...\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: String Tax ID Definition TypeScript\nDESCRIPTION: Defines a TypeScript constant `value` of type `string` representing a customer tax ID.  This snippet demonstrates how a tax ID can be a simple string value. No specific dependencies are required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerportalcustomertaxid.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerBenefitGrantGitHubRepositoryUpdate TypeScript\nDESCRIPTION: This snippet initializes a CustomerBenefitGrantGitHubRepositoryUpdate object using TypeScript. It defines a constant variable `value` with the type `components.CustomerBenefitGrantGitHubRepositoryUpdate` and sets its `properties.accountId` to a placeholder value. The `accountId` is likely used to associate the grant with a specific GitHub user.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantupdate.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomerBenefitGrantGitHubRepositoryUpdate = {\n  properties: {\n    accountId: \"<id>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Integer Declaration and Initialization in TypeScript\nDESCRIPTION: This snippet shows how to declare a number variable (specifically, an integer) named 'value' and assign it an integer value in TypeScript. The 'const' keyword ensures immutability after initialization. This showcases a common use case for representing integer values in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablessubscribermetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Floating Point Number Type Example\nDESCRIPTION: This snippet shows an example of assigning a floating point number value to a variable. It demonstrates how a floating point number can be used as a value within the DiscountPercentageOnceForeverDurationBaseMetadata context.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentageonceforeverdurationbasemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: String Type Example in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a string type variable in TypeScript. It shows the basic syntax for assigning a string literal to a variable declared with the `string` type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutcreatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Definition in TypeScript\nDESCRIPTION: This snippet illustrates how to define a number (float) variable in TypeScript. The variable `value` is declared as a number and assigned a floating-point literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreatedatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration in TypeScript\nDESCRIPTION: This code snippet demonstrates the declaration of a string type variable with an example value. It shows how to define a string variable and assign a string literal to it. The type is explicitly defined as `string`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustomsubscribermetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration in Typescript\nDESCRIPTION: Declares a boolean variable named 'value' and assigns it a boolean value (false). This snippet illustrates how to declare a boolean type variable in TypeScript for DiscountPercentageRepeatDurationCreateMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentagerepeatdurationcreatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Assignment TypeScript\nDESCRIPTION: Defines a boolean variable named 'value' and assigns it a boolean value (false). This demonstrates how to represent boolean data for updating public custom fields. The variable is explicitly typed as 'boolean'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutupdatepubliccustomfielddata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: String Type Definition in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a string variable in TypeScript. The variable `value` is declared as a string and assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreatedatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Value Assignment TypeScript\nDESCRIPTION: This code snippet demonstrates assigning a string value to a constant variable in TypeScript. It showcases the syntax for declaring a string constant and initializing it with a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldselectmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Declaration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a number (integer) variable in TypeScript. The variable `value` is assigned an integer literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustomupdatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Declaration\nDESCRIPTION: Defines a number type (integer) for DiscountFixedOnceForeverDurationBaseMetadata. The 'value' variable is assigned an integer literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedonceforeverdurationbasemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitGrantDiscordProperties TypeScript\nDESCRIPTION: This snippet initializes a TypeScript object of type `components.BenefitGrantDiscordProperties`. This type is likely used to define the properties associated with a Discord benefit grant, such as roles or server access.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatebenefitgrantproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGrantDiscordProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Boolean RefundMetadata in TypeScript\nDESCRIPTION: This snippet shows how to define a RefundMetadata value as a boolean in TypeScript. The `value` constant is assigned a boolean literal (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/refundmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: TaxIDFormat Values in TypeScript\nDESCRIPTION: This code snippet lists all possible values for the TaxIDFormat enumeration. These values represent different tax ID formats from various countries, as supported by the Stripe API.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/taxidformat.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"ad_nrt\" | \"ae_trn\" | \"ar_cuit\" | \"au_abn\" | \"au_arn\" | \"bg_uic\" | \"bh_vat\" | \"bo_tin\" | \"br_cnpj\" | \"br_cpf\" | \"ca_bn\" | \"ca_gst_hst\" | \"ca_pst_bc\" | \"ca_pst_mb\" | \"ca_pst_sk\" | \"ca_qst\" | \"ch_uid\" | \"ch_vat\" | \"cl_tin\" | \"cn_tin\" | \"co_nit\" | \"cr_tin\" | \"de_stn\" | \"do_rcn\" | \"ec_ruc\" | \"eg_tin\" | \"es_cif\" | \"eu_oss_vat\" | \"eu_vat\" | \"gb_vat\" | \"ge_vat\" | \"hk_br\" | \"hr_oib\" | \"hu_tin\" | \"id_npwp\" | \"il_vat\" | \"in_gst\" | \"is_vat\" | \"jp_cn\" | \"jp_rn\" | \"jp_trn\" | \"ke_pin\" | \"kr_brn\" | \"kz_bin\" | \"li_uid\" | \"mx_rfc\" | \"my_frp\" | \"my_itn\" | \"my_sst\" | \"ng_tin\" | \"no_vat\" | \"no_voec\" | \"nz_gst\" | \"om_vat\" | \"pe_ruc\" | \"ph_tin\" | \"ro_tin\" | \"rs_pib\" | \"ru_inn\" | \"ru_kpp\" | \"sa_vat\" | \"sg_gst\" | \"sg_uen\" | \"si_tin\" | \"sv_nit\" | \"th_vat\" | \"tr_tin\" | \"tw_vat\" | \"ua_vat\" | \"us_ein\" | \"uy_ruc\" | \"ve_rif\" | \"vn_tin\" | \"za_vat\"\n```\n\n----------------------------------------\n\nTITLE: Integer Metadata Value in TypeScript\nDESCRIPTION: Defines a number variable in TypeScript representing an integer metadata value. This is used to store integer numbers as metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordcreatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Initializing ListResourceCustomerCustomerMeter in TypeScript\nDESCRIPTION: This code snippet shows how to import and initialize the `ListResourceCustomerCustomerMeter` component from the `@polar-sh/sdk` library. It demonstrates the creation of a `ListResourceCustomerCustomerMeter` object, populating it with sample data including an array of customer-customer meter objects and pagination details. The snippet requires the `@polar-sh/sdk` package to be installed and available in the project.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/listresourcecustomercustomermeter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListResourceCustomerCustomerMeter } from \"@polar-sh/sdk/models/components/listresourcecustomercustomermeter.js\";\n\nlet value: ListResourceCustomerCustomerMeter = {\n  items: [\n    {\n      id: \"<value>\",\n      createdAt: new Date(\"2024-07-28T02:18:32.798Z\"),\n      modifiedAt: new Date(\"2025-12-14T17:21:36.219Z\"),\n      customerId: \"992fae2a-2a17-4b7a-8d9e-e287cf90131b\",\n      meterId: \"d498a884-e2cd-4d3e-8002-f536468a8b22\",\n      consumedUnits: 25,\n      creditedUnits: 100,\n      balance: 75,\n      meter: {\n        createdAt: new Date(\"2025-01-05T10:33:28.821Z\"),\n        modifiedAt: new Date(\"2024-02-04T03:35:20.238Z\"),\n        id: \"<value>\",\n        name: \"<value>\",\n      },\n    },\n  ],\n  pagination: {\n    totalCount: 935537,\n    maxPage: 425077,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Integer Type Declaration in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare an integer number variable in TypeScript. It assigns an integer literal to the variable 'value'. No dependencies are required. The expected output is an integer number.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/refundcreatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration in TypeScript\nDESCRIPTION: This snippet shows how to declare a boolean variable in TypeScript. The variable `value` is explicitly typed as `boolean` and assigned the boolean value `false`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatesubscriptionmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: CustomerSortProperty Usage Example TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the CustomerSortProperty type from the @polar-sh/sdk. It shows how to assign a string literal value to a variable of type CustomerSortProperty.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customersortproperty.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerSortProperty } from \"@polar-sh/sdk/models/components/customersortproperty.js\";\n\nlet value: CustomerSortProperty = \"name\";\n```\n\n----------------------------------------\n\nTITLE: BenefitIDFilter String Value - TypeScript\nDESCRIPTION: Defines a BenefitIDFilter with a single string value.  This snippet shows how to declare a string variable that represents a single benefit ID to be used for filtering.  No dependencies are required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/benefitidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Declaration and Initialization in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a string variable named 'value' and initialize it with a string literal in TypeScript. The 'const' keyword ensures that the variable cannot be reassigned after initialization. This is a basic example of string usage in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablessubscribermetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Definition\nDESCRIPTION: Defines a number type variable with an integer value. It illustrates how to define an integer value when using CustomFieldCheckboxMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcheckboxmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Boolean Metadata Value in TypeScript\nDESCRIPTION: Defines a boolean variable in TypeScript representing a boolean metadata value.  This allows storage of true/false values as metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordcreatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) type for CustomFieldDateMetadata\nDESCRIPTION: Demonstrates the usage of an integer number type value for CustomFieldDateMetadata.  The value is assigned to a constant 'value' of type number.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfielddatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: String Value Declaration in TypeScript\nDESCRIPTION: This snippet shows how to declare and initialize a string variable in TypeScript. The variable `value` is assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productcreatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Import and Initialize CustomersGetStateExternalRequest\nDESCRIPTION: This code snippet demonstrates how to import and initialize the `CustomersGetStateExternalRequest` model in TypeScript. It imports the model from the specified module path and creates a sample instance with a placeholder value for the `externalId` property. This example showcases the basic usage of the model within the polar-js project.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customersgetstateexternalrequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomersGetStateExternalRequest } from \"@polar-sh/sdk/models/operations/customersgetstateexternal.js\";\n\nlet value: CustomersGetStateExternalRequest = {\n  externalId: \"<id>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration TypeScript\nDESCRIPTION: Demonstrates the declaration and assignment of a boolean value in TypeScript. The variable 'value' is explicitly typed as a boolean and assigned the boolean literal false.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositorymetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: TokenEndpointAuthMethod Values TypeScript\nDESCRIPTION: This TypeScript snippet defines the possible string literal values that `TokenEndpointAuthMethod` can hold. These values represent different authentication methods used when interacting with a token endpoint during an OAuth 2.0 flow. The possible values are \"client_secret_basic\", \"client_secret_post\", and \"none\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/tokenendpointauthmethod.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"client_secret_basic\" | \"client_secret_post\" | \"none\"\n```\n\n----------------------------------------\n\nTITLE: Import and Assign GitHub Repository Permission - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `Permission` type from the Polar JS SDK and assign a value to it. The purpose is to illustrate the usage of the `Permission` type for specifying the access level to a GitHub repository.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/permission.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Permission } from \"@polar-sh/sdk/models/components/benefitgithubrepositoryproperties.js\";\n\nlet value: Permission = \"admin\";\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Assignment TypeScript\nDESCRIPTION: This code snippet demonstrates assigning a boolean value to a constant variable in TypeScript. It shows the syntax for declaring a boolean constant and initializing it with a boolean literal (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldselectmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Declaring Boolean Custom Field Value TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare and assign a boolean value to a custom field using TypeScript. It initializes a constant variable named `value` with a boolean literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpubliccustomfielddata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Integer Type Definition in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define an integer number variable in TypeScript. It assigns an integer literal to the variable 'value', indicating that it can store whole number data.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerupdatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Organization ID Filter with String in TypeScript\nDESCRIPTION: This snippet demonstrates how to filter events by a single organization ID using a string value in TypeScript. The 'value' constant is assigned a string representing a UUID. This UUID is intended for filtering events associated with a specific organization.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/eventslistqueryparamorganizationidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\";\n```\n\n----------------------------------------\n\nTITLE: Declaring a Number (Integer) Value in TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a number variable named `value` and assign it an integer literal. It serves as an example of the number data type (specifically an integer) supported in LicenseKeyCustomerMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/licensekeycustomermetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitMeterCreditUpdate Type - TypeScript\nDESCRIPTION: Initializes an empty `BenefitMeterCreditUpdate` object. This snippet shows the definition of a meter credit benefit update type, dependent on the `components` module. It's used to manage meter credit allocations as part of Polar benefits.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/benefitsupdatebenefitupdate.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitMeterCreditUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: String Type Definition\nDESCRIPTION: Defines a constant `value` of type `string` and assigns it a placeholder string value. This snippet demonstrates how to define a string type for BenefitMeterCreditCreateMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditcreatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitDownloadablesUpdate Model TypeScript\nDESCRIPTION: This snippet shows how to import and initialize an empty BenefitDownloadablesUpdate object using TypeScript. It imports the BenefitDownloadablesUpdate class from the @polar-sh/sdk and creates an empty object instance of it.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablesupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitDownloadablesUpdate } from \"@polar-sh/sdk/models/components/benefitdownloadablesupdate.js\";\n\nlet value: BenefitDownloadablesUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Example in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a boolean type variable in TypeScript. It shows the basic syntax for assigning a boolean literal (false) to a variable declared with the `boolean` type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutcreatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Float Number Type Declaration TypeScript\nDESCRIPTION: Declares a number variable named 'value' and initializes it with a floating-point number.  This example illustrates the usage of floating-point numbers in BenefitDownloadablesUpdateMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablesupdatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration TypeScript\nDESCRIPTION: Defines a variable `value` of type string and assigns it a placeholder value. This demonstrates how to declare and initialize a string variable in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/licensekeycustomertaxid.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Float Value Definition in TypeScript\nDESCRIPTION: This snippet shows how to define a float value using TypeScript for CustomFieldNumberMetadata. The value is assigned directly as a float literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldnumbermetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Integer Type Declaration TypeScript\nDESCRIPTION: Declares a constant variable 'value' of type number and assigns an integer literal to it. This shows how to define an integer value for meter metadata in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metermetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Declaration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a number variable and assign it a floating-point value in TypeScript. The variable `value` is explicitly typed as `number`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptioncustomermetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: String TaxId Value TypeScript\nDESCRIPTION: Defines a tax ID value as a string. This snippet shows how to declare a variable `value` of type `string` and assign a string literal to it. The string represents the tax ID value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordercustomertaxid.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerBenefitGrantDownloadablesUpdate TypeScript\nDESCRIPTION: This snippet initializes an empty CustomerBenefitGrantDownloadablesUpdate object using TypeScript. It defines a constant variable `value` with the type `components.CustomerBenefitGrantDownloadablesUpdate` and assigns an empty object to it. This represents an update for downloadable content with no specific properties initially set.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantupdate.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomerBenefitGrantDownloadablesUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Declaration TypeScript\nDESCRIPTION: Illustrates the declaration of a number variable named 'value' and its initialization with an integer literal. This example shows how to define an integer type for metadata updates.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositoryupdatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Get Metrics Limits with Polar SDK (TypeScript)\nDESCRIPTION: Retrieves the interval limits for the metrics endpoint using the Polar SDK. It initializes the Polar SDK with an access token, calls the `metrics.limits` method, and logs the result to the console.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/sdks/metrics/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.metrics.limits();\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Assignment TypeScript\nDESCRIPTION: Shows how to assign a boolean value to a variable using TypeScript. The variable is declared using the `const` keyword and assigned a boolean literal (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdatecheckboxmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Definition\nDESCRIPTION: Defines a floating-point number type for CustomFieldCreateSelectMetadata. It shows how to declare a constant named 'value' of type number and assign a floating-point value to it.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreateselectmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: String Type Definition in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a string variable in TypeScript. It assigns a string literal to the variable 'value', indicating that it can store text-based data.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerupdatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Declaration TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a variable of type number (specifically a float) in TypeScript. The variable `value` is explicitly typed as a number and assigned a floating-point literal. This illustrates the use of floating-point numbers.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositorycreatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerPortalSubscriptionsGetSecurity in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and initialize the `CustomerPortalSubscriptionsGetSecurity` object in TypeScript. It sets the `customerSession` field with a placeholder value. The `customerSession` is a required field for authenticating the request.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalsubscriptionsgetsecurity.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerPortalSubscriptionsGetSecurity } from \"@polar-sh/sdk/models/operations/customerportalsubscriptionsget.js\";\n\nlet value: CustomerPortalSubscriptionsGetSecurity = {\n  customerSession: \"<value>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Definition TypeScript\nDESCRIPTION: Defines a boolean variable 'value' and assigns it a boolean literal (false). This shows how to declare a boolean type and assign a value to it in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkproductmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Initializing LegacyRecurringProductPriceFree TypeScript\nDESCRIPTION: This snippet shows how to initialize a `LegacyRecurringProductPriceFree` object in TypeScript.  It sets the `createdAt`, `modifiedAt`, `id`, `isArchived`, `productId`, and `recurringInterval` properties. Requires the `components` namespace to be defined.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/legacyrecurringproductprice.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.LegacyRecurringProductPriceFree = {\n  createdAt: new Date(\"2024-05-26T22:02:46.951Z\"),\n  modifiedAt: new Date(\"2024-04-11T20:46:19.130Z\"),\n  id: \"<value>\",\n  isArchived: false,\n  productId: \"<value>\",\n  recurringInterval: \"year\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining an Integer Number Value in TypeScript\nDESCRIPTION: This snippet shows how to define an integer number value in TypeScript. It is intended to illustrate the supported type when creating product metadata for a CheckoutLink. There are no external dependencies.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkcreateproductmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration TypeScript\nDESCRIPTION: Declares a string variable named 'value' and initializes it with a placeholder string. This example demonstrates how to define a string type within the BenefitMeterCreditSubscriberMetadata context in polar-js.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditsubscribermetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Example in TypeScript\nDESCRIPTION: This snippet demonstrates how to define an integer number type variable in TypeScript. It shows the basic syntax for assigning an integer literal to a variable declared with the `number` type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutcreatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Number Custom Field Value TypeScript\nDESCRIPTION: Defines a custom field value as a number. The `value` variable is explicitly typed as `number` and assigned a numeric literal. This example showcases how to represent numerical data in a custom field.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfielddata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Integer Number Type Declaration\nDESCRIPTION: Declares a number variable named `value` and initializes it with an integer literal. This demonstrates the use of the number type for integer values in custom fields within polar-js.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldtextmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Integer Value Assignment in TypeScript\nDESCRIPTION: This snippet demonstrates assigning an integer value to a constant variable named `value` in TypeScript. It showcases the syntax for number literals.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerBenefitGrantMeterCreditUpdate TypeScript\nDESCRIPTION: This snippet initializes an empty CustomerBenefitGrantMeterCreditUpdate object using TypeScript. It defines a constant variable `value` with the type `components.CustomerBenefitGrantMeterCreditUpdate` and assigns an empty object to it. This represents an update for meter credits with no predefined properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantupdate.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomerBenefitGrantMeterCreditUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: Float Number Type Definition TypeScript\nDESCRIPTION: Defines a number variable 'value' and assigns it a floating point number literal. This shows how to declare a number type for floating point numbers and assign a value to it in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkproductmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration in TypeScript\nDESCRIPTION: Demonstrates declaring a string type variable named 'value' and assigning a string literal to it. This snippet shows how to define a string value for discount product metadata in polar-js.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountproductmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Number type assignment (Float)\nDESCRIPTION: Demonstrates how to assign a floating point number value to a number variable in TypeScript. The variable 'value' is declared as a number and assigned a floating point literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdatenumbermetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Defining AlreadyActiveSubscriptionError in TypeScript\nDESCRIPTION: This snippet defines the structure of the `AlreadyActiveSubscriptionError` object in TypeScript. It includes a `detail` property, which is a string.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/errors/checkoutforbiddenerror.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: errors.AlreadyActiveSubscriptionError = {\n  detail: \"<value>\",\n};\n\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Definition in TypeScript\nDESCRIPTION: This snippet shows how to define a number (integer) variable in TypeScript. The variable `value` is declared as a number and assigned an integer literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreatedatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration\nDESCRIPTION: Declares a string variable named `value` and initializes it with a string literal. This snippet demonstrates the use of the string type for custom fields in polar-js.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldtextmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Integer Number Type Example\nDESCRIPTION: This snippet shows an example of assigning an integer number value to a variable. It demonstrates how an integer number can be used as a value within the DiscountPercentageOnceForeverDurationBaseMetadata context.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentageonceforeverdurationbasemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: String Value Definition in TypeScript\nDESCRIPTION: This snippet shows how to define a string value using TypeScript for CustomFieldNumberMetadata. The value is assigned directly as a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldnumbermetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Declaration TypeScript\nDESCRIPTION: Declares a constant variable `value` of type `string` and initializes it with a string literal. This example demonstrates how to assign a string value to a variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutupdatecustomfielddata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration\nDESCRIPTION: This code snippet illustrates how to declare a string variable in TypeScript, which is a supported type for OrderMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordermetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: IntrospectTokenRequestTokenTypeHint Values TypeScript\nDESCRIPTION: This snippet defines the possible string values for the `IntrospectTokenRequestTokenTypeHint` type. It can be either \"access_token\" or \"refresh_token\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/introspecttokenrequesttokentypehint.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"access_token\" | \"refresh_token\"\n```\n\n----------------------------------------\n\nTITLE: Creating CustomFieldCreateDate Instance in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `CustomFieldCreateDate` schema from the `@polar-sh/sdk` library.  It imports the `CustomFieldCreateDate` type and shows how to populate its properties such as `slug`, `name`, `organizationId`, and `properties`. The `organizationId` is a UUID that identifies the organization to which the custom field belongs.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreatedate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldCreateDate } from \"@polar-sh/sdk/models/components/customfieldcreatedate.js\";\n\nlet value: CustomFieldCreateDate = {\n  slug: \"<value>\",\n  name: \"<value>\",\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Number Custom Field Update Type\nDESCRIPTION: This code snippet defines the TypeScript type for updating a number custom field, using the `components.CustomFieldUpdateNumber` interface. It initializes a variable `value` of this type as an empty object. This type represents the data required to update a numeric field.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdate.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomFieldUpdateNumber = {};\n```\n\n----------------------------------------\n\nTITLE: Integer Number Type Declaration in TypeScript\nDESCRIPTION: This snippet shows how to declare an integer number variable in TypeScript. The variable `value` is explicitly typed as `number` and assigned an integer value.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordsubscribermetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration in TypeScript\nDESCRIPTION: Illustrates how to declare a boolean type variable named 'value' and assign a boolean literal (false) to it. This example showcases defining a boolean value for discount product metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountproductmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Declaration and Assignment in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a number variable and assign it a floating-point number value in TypeScript. The variable 'value' is explicitly typed as a number and assigned the float value 1284.03.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentageonceforeverdurationmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a boolean variable in TypeScript and assign it a boolean value. The variable 'value' is explicitly typed as 'boolean' and assigned the boolean value 'false'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutcustomfielddata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration in TypeScript\nDESCRIPTION: This code snippet demonstrates the declaration of a boolean type variable with a false value. It shows how to define a boolean variable and assign a boolean literal to it. The type is explicitly defined as `boolean`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustomsubscribermetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: String Variable Declaration\nDESCRIPTION: This snippet shows how to declare a string variable in TypeScript and assign it a string value. This is a basic example of assigning a string to a constant variable.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutupdatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Declaration\nDESCRIPTION: Defines a number type (float) for DiscountFixedOnceForeverDurationBaseMetadata. The 'value' variable is assigned a floating-point literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedonceforeverdurationbasemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Import and Initialize LicenseKeyActivateMeta in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the LicenseKeyActivateMeta type from the '@polar-sh/sdk/models/components/licensekeyactivate.js' module and create an empty object of that type. This allows developers to use the LicenseKeyActivateMeta interface within their TypeScript code.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/licensekeyactivatemeta.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LicenseKeyActivateMeta } from \"@polar-sh/sdk/models/components/licensekeyactivate.js\";\n\nlet value: LicenseKeyActivateMeta = {};\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerBenefitGrantDiscord Type in TypeScript\nDESCRIPTION: This code defines the `CustomerBenefitGrantDiscord` type, showcasing properties like createdAt, modifiedAt, id, grantedAt, revokedAt, customerId, benefitId, subscriptionId, orderId, isGranted, isRevoked, customer, benefit, and properties.  It uses explicit `Date` objects and nested objects to represent the structure of the type. The provided code snippet is an example value demonstrating the `components.CustomerBenefitGrantDiscord` type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrant.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomerBenefitGrantDiscord = {\n  createdAt: new Date(\"2023-04-02T19:52:21.245Z\"),\n  modifiedAt: new Date(\"2025-07-02T18:24:37.178Z\"),\n  id: \"<value>\",\n  grantedAt: new Date(\"2023-11-02T07:46:05.555Z\"),\n  revokedAt: new Date(\"2024-12-17T14:02:02.593Z\"),\n  customerId: \"<value>\",\n  benefitId: \"<value>\",\n  subscriptionId: \"<value>\",\n  orderId: \"<value>\",\n  isGranted: false,\n  isRevoked: false,\n  customer: {\n    createdAt: new Date(\"2024-06-14T15:29:42.558Z\"),\n    modifiedAt: new Date(\"2024-12-11T01:50:17.539Z\"),\n    id: \"<value>\",\n    email: \"Camylle.Daniel-Nolan@yahoo.com\",\n    emailVerified: false,\n    name: \"<value>\",\n    billingAddress: {\n      country: \"FR\",\n    },\n    taxId: [\n      \"911144442\",\n      \"us_ein\",\n    ],\n    oauthAccounts: {\n      \"key\": {\n        accountId: \"<id>\",\n        accountUsername: \"<value>\",\n      },\n    },\n  },\n  benefit: {\n    id: \"<value>\",\n    createdAt: new Date(\"2024-04-20T06:26:31.212Z\"),\n    modifiedAt: new Date(\"2025-01-06T12:00:33.712Z\"),\n    description: \"perfectly questioningly soon delight um energetic\",\n    selectable: false,\n    deletable: false,\n    organizationId: \"<value>\",\n    metadata: {\n      \"key\": 3970.02,\n    },\n    organization: {\n      createdAt: new Date(\"2023-09-12T02:16:09.290Z\"),\n      modifiedAt: new Date(\"2024-07-15T08:43:09.657Z\"),\n      id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      name: \"<value>\",\n      slug: \"<value>\",\n      avatarUrl: \"https://overcooked-brace.biz/\",\n      email: \"Peter_Beier25@gmail.com\",\n      website: \"<value>\",\n      socials: [\n        {\n          platform: \"tiktok\",\n          url: \"https://quixotic-molasses.info/\",\n        },\n      ],\n      detailsSubmittedAt: new Date(\"2023-05-09T21:03:51.638Z\"),\n      featureSettings: {},\n      subscriptionSettings: {\n        allowMultipleSubscriptions: false,\n        allowCustomerUpdates: false,\n        prorationBehavior: \"invoice\",\n      },\n    },\n    properties: {\n      guildId: \"<id>\",\n    },\n  },\n  properties: {},\n};\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration TypeScript\nDESCRIPTION: Declares a string variable named 'value' and assigns it a placeholder string value. This demonstrates the basic syntax for defining a string type in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgithubrepositorysubscribermetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitGrantCustomProperties in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and instantiate an empty `BenefitGrantCustomProperties` object in TypeScript. The `BenefitGrantCustomProperties` type is imported from the `@polar-sh/sdk/models/components/benefitgrantcustomproperties.js` module. An empty object is created and assigned to the variable `value`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgrantcustomproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BenefitGrantCustomProperties } from \"@polar-sh/sdk/models/components/benefitgrantcustomproperties.js\";\n\nlet value: BenefitGrantCustomProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Defining a String Value in TypeScript\nDESCRIPTION: This snippet shows how to define a string value in TypeScript. It is intended to illustrate the supported type when creating product metadata for a CheckoutLink. There are no external dependencies.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkcreateproductmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Date Value Declaration in TypeScript\nDESCRIPTION: Declares a Date variable named `value` and initializes it with a new Date object using an ISO 8601 formatted string. This demonstrates how to represent date and time data as a custom field value. Requires the built-in Date object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatesubscriptioncustomfielddata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: Date = new Date(\"2023-12-07T03:31:58.587Z\");\n```\n\n----------------------------------------\n\nTITLE: Number Type Declaration (Float) in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a number variable in TypeScript and assign it a floating-point number value. It defines a constant variable named 'value' of type number and initializes it with the float 1284.03.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedrepeatdurationmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Date Declaration TypeScript\nDESCRIPTION: Declares a constant variable `value` of type `Date` and initializes it with a new Date object, initialized with a specific date string. This demonstrates the initialization of date objects.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutupdatecustomfielddata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: Date = new Date(\"2023-12-07T03:31:58.587Z\");\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration and Assignment in TypeScript\nDESCRIPTION: This snippet shows how to declare a boolean variable and assign it a boolean value in TypeScript. The variable 'value' is explicitly typed as a boolean and assigned the boolean value 'false'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentageonceforeverdurationmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: CustomerOrderSortProperty Usage in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `CustomerOrderSortProperty` type from the `@polar-sh/sdk/models/components/customerordersortproperty.js` module.  It assigns the string \"-product\" to a variable of type `CustomerOrderSortProperty`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerordersortproperty.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerOrderSortProperty } from \"@polar-sh/sdk/models/components/customerordersortproperty.js\";\n\nlet value: CustomerOrderSortProperty = \"-product\";\n```\n\n----------------------------------------\n\nTITLE: Integer Value Assignment TypeScript\nDESCRIPTION: Demonstrates how to assign an integer value to a variable using TypeScript. The variable is declared using the `const` keyword and assigned an integer literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdatecheckboxmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: String Value Assignment TypeScript\nDESCRIPTION: Defines a string variable named 'value' and assigns it a placeholder string value. This demonstrates how to represent string data for updating public custom fields. The variable is explicitly typed as 'string'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutupdatepubliccustomfielddata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Float Number Type Declaration TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a floating-point number variable in TypeScript using the `number` type. The variable `value` is assigned a floating-point literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: String Type Definition\nDESCRIPTION: Defines a string variable named 'value' and assigns it a string literal. This demonstrates how to define a string type for customer metadata events in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventcreatecustomermetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitGrantDownloadablesProperties TypeScript\nDESCRIPTION: This snippet initializes a TypeScript object of type `components.BenefitGrantDownloadablesProperties`. It's intended to represent properties associated with providing downloadable content as a benefit, like file URLs or access keys.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatebenefitgrantproperties.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGrantDownloadablesProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration TypeScript\nDESCRIPTION: This snippet shows how to declare a boolean variable in TypeScript. The `value` variable is explicitly declared as a boolean and assigned the value `false`. This demonstrates how to represent boolean values in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdatedatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration TypeScript\nDESCRIPTION: Declares a constant variable 'value' of type string and assigns it a placeholder string value. This showcases how a string can be used within the DiscountPercentageOnceForeverDurationCreateMetadata context.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentageonceforeverdurationcreatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Declaration in TypeScript\nDESCRIPTION: This snippet shows how to declare and initialize a boolean variable in TypeScript. The variable `value` is assigned a boolean literal (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/productcreatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Example - TypeScript\nDESCRIPTION: Illustrates the declaration and assignment of a boolean value in TypeScript.\nThis example shows a basic boolean assignment.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: String Value Assignment in TypeScript\nDESCRIPTION: This code snippet demonstrates how to assign a string value to a variable in TypeScript. The variable 'value' is declared as a string and assigned the string literal '<value>'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentagerepeatdurationbasemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Float Number Type Declaration TypeScript\nDESCRIPTION: Demonstrates the declaration of a floating-point number variable in TypeScript. It showcases how to assign a float value to a variable using the `number` type annotation.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablesmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Declaring a Boolean Value in TypeScript\nDESCRIPTION: This snippet illustrates how to declare a boolean value for DiscountFixedRepeatDurationBaseMetadata using TypeScript. The variable `value` is assigned a boolean literal (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedrepeatdurationbasemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomFieldUpdateText in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and initialize the `CustomFieldUpdateText` type from the `@polar-sh/sdk/models/components/customfieldupdatetext.js` module.  It creates an empty object of type `CustomFieldUpdateText`.  This requires the `@polar-sh/sdk` package.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdatetext.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldUpdateText } from \"@polar-sh/sdk/models/components/customfieldupdatetext.js\";\n\nlet value: CustomFieldUpdateText = {};\n```\n\n----------------------------------------\n\nTITLE: Number Type Declaration (Integer) TypeScript\nDESCRIPTION: Declares a constant variable 'value' of type number and assigns it an integer value. This illustrates the use of integer numbers within DiscountPercentageOnceForeverDurationCreateMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentageonceforeverdurationcreatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Number Type Declaration in TypeScript\nDESCRIPTION: Declares a constant variable `value` of type `number` and assigns it an integer literal. This snippet demonstrates the basic usage of number types in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/loc.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Defining EventSource Type\nDESCRIPTION: This snippet shows how to define a single event source using the `components.EventSource` type. The value is assigned the string \"user\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/sourcefilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.EventSource = \"user\";\n```\n\n----------------------------------------\n\nTITLE: Defining Number Type in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a number variable in TypeScript, representing a numeric value for a custom field. The const keyword ensures the variable cannot be reassigned.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpublicconfirmedcustomfielddata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Declaring a float variable in TypeScript\nDESCRIPTION: This snippet shows how to declare a number variable in TypeScript and assign it a float value. It is used for defining float type metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/orderproductmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Definition in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a boolean variable in TypeScript. The variable `value` is declared as a boolean and assigned a boolean literal (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreatedatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: SwitchingFrom Type Values in TypeScript\nDESCRIPTION: This snippet illustrates the possible string literal values that the `SwitchingFrom` type can hold. These values represent different platforms a user might be switching from.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/switchingfrom.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"paddle\" | \"lemon_squeezy\" | \"gumroad\" | \"stripe\" | \"other\"\n```\n\n----------------------------------------\n\nTITLE: String Type Example\nDESCRIPTION: This code snippet demonstrates how to assign a string value to a variable, presumably within the context of DiscountPercentageRepeatDurationMetadata. The variable `value` is explicitly typed as `string` and assigned the string \"<value>\".\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentagerepeatdurationmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Declaration in TypeScript\nDESCRIPTION: This code snippet shows how to declare a number variable and assign it an integer value in TypeScript. The variable `value` is explicitly typed as `number`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptioncustomermetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Definition TypeScript\nDESCRIPTION: This snippet demonstrates the definition of a boolean type variable in TypeScript. The variable 'value' is explicitly typed as a boolean and assigned the boolean value 'false'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Declaration TypeScript\nDESCRIPTION: Defines a number variable named 'value' and initializes it with a floating-point number literal. This showcases how to declare a floating-point number type within TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedonceforeverdurationcreatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Float Metadata Value - TypeScript\nDESCRIPTION: Defines a floating-point number value for CheckoutLinkCreateProductsMetadata. This example demonstrates how to declare a number variable and assign it a floating-point literal value in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkcreateproductsmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: SubscriptionRecurringInterval Values TypeScript\nDESCRIPTION: This code snippet defines the possible values for the `SubscriptionRecurringInterval` type. It shows that the interval can be either 'month' or 'year', representing monthly or yearly subscription recurrence.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptionrecurringinterval.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"month\" | \"year\"\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Example\nDESCRIPTION: This snippet shows an example of assigning a boolean value to a variable. It demonstrates how a boolean can be used as a value within the DiscountPercentageOnceForeverDurationBaseMetadata context.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentageonceforeverdurationbasemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Define BenefitGrantDownloadablesProperties Type (TypeScript)\nDESCRIPTION: Defines a TypeScript type alias for `BenefitGrantDownloadablesProperties`. This type is used for properties related to benefit grants that involve downloadable content. The empty object `{}` acts as an initial value or example for the defined type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/properties.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGrantDownloadablesProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Floating-Point Number Type Declaration\nDESCRIPTION: Declares a number variable named `value` and initializes it with a floating-point literal. This snippet illustrates how to use the number type for representing decimal numbers in polar-js custom fields.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldtextmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitGrantCustomProperties TypeScript\nDESCRIPTION: Defines an empty object of type `components.BenefitGrantCustomProperties` using TypeScript. It is likely used to represent properties specific to a custom benefit grant configuration. Initializes a constant `value` with an empty object.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitgrantwebhookproperties.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGrantCustomProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Assignment in TypeScript\nDESCRIPTION: This code snippet demonstrates assigning a boolean value to a variable in TypeScript. The variable 'value' is declared as a boolean and assigned the boolean value 'false'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentagerepeatdurationbasemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Float Number Type Definition\nDESCRIPTION: Defines a number variable named 'value' and assigns it a floating-point literal. This demonstrates how to define a floating-point number type for customer metadata events in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventcreatecustomermetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: OrderSortProperty Usage Example (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to import and use the `OrderSortProperty` type from the `@polar-sh/sdk` to assign a value representing the property by which to sort orders.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordersortproperty.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrderSortProperty } from \"@polar-sh/sdk/models/components/ordersortproperty.js\";\n\nlet value: OrderSortProperty = \"product\";\n```\n\n----------------------------------------\n\nTITLE: Boolean Declaration TypeScript\nDESCRIPTION: Declares a constant variable `value` of type `boolean` and initializes it with a boolean literal (false). This demonstrates how to assign boolean values to variables.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutupdatecustomfielddata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: String Value Assignment TypeScript\nDESCRIPTION: Shows how to assign a string value to a variable using TypeScript. The variable is declared using the `const` keyword and assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdatecheckboxmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Declaration\nDESCRIPTION: Demonstrates how to declare and assign an integer number value to a constant variable in TypeScript. The variable 'value' is explicitly typed as 'number' and assigned the integer literal '128403'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountupdatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Declaring UnitAmount as Number in TypeScript\nDESCRIPTION: Demonstrates how to declare a UnitAmount as a number in TypeScript.  The number can have up to 12 decimal places and represents the price per unit in cents.  No dependencies are required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/unitamount.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: TaxIDFormat Value Assignment TypeScript\nDESCRIPTION: Assigns a TaxIDFormat value ('ua_vat') to a variable of type components.TaxIDFormat. This shows a specific usage of a predefined type, likely from a components library. It assumes the existence of a `components` object with a type `TaxIDFormat`.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatetaxid.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.TaxIDFormat = \"ua_vat\";\n```\n\n----------------------------------------\n\nTITLE: Number Type Declaration in TypeScript\nDESCRIPTION: This snippet shows how to declare a number variable in TypeScript and assign it a numerical value. The variable 'value' is explicitly typed as 'number' and assigned a sample number.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutcustomfielddata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Value Assignment TypeScript\nDESCRIPTION: This snippet demonstrates how to assign an integer number value to a constant variable 'value' using TypeScript. It illustrates the basic syntax for number assignment.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/meterupdatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: CustomerOrderSortProperty Values in TypeScript\nDESCRIPTION: This snippet shows the possible string values for the `CustomerOrderSortProperty` type. These values represent different fields of a customer order that can be used for sorting, with a leading hyphen indicating descending order.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerordersortproperty.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"created_at\" | \"-created_at\" | \"amount\" | \"-amount\" | \"net_amount\" | \"-net_amount\" | \"product\" | \"-product\" | \"subscription\" | \"-subscription\"\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Definition TypeScript\nDESCRIPTION: Defines a boolean variable named 'value' and assigns it a boolean value (false). This snippet shows how to declare a boolean type variable in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustomcreatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Declaring String Array Type in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a variable of type string array in TypeScript. It initializes the variable 'value' with an array containing a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/metadataquery.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Filtering by Single Product Billing Type - TypeScript\nDESCRIPTION: This code snippet demonstrates how to filter orders by a single product billing type. It uses the `components.ProductBillingType` enum and assigns the value 'recurring' to a variable of that type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customerportalorderslistqueryparamproductbillingtypefilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.ProductBillingType = \"recurring\";\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Definition TypeScript\nDESCRIPTION: Defines a constant variable named 'value' of type boolean and assigns it a boolean literal (false). This shows how a boolean value might be used in CustomFieldUpdateSelectMetadata in polar-js.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdateselectmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Defining String Type in TypeScript\nDESCRIPTION: This snippet shows how to define a string variable in TypeScript, representing a string value for a custom field. The const keyword ensures the variable cannot be reassigned.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpublicconfirmedcustomfielddata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Type Example - TypeScript\nDESCRIPTION: Illustrates the declaration and assignment of a string value in TypeScript.\nThis shows a basic string assignment.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Float Metadata Value in Typescript\nDESCRIPTION: Defines a number variable named 'value' and assigns it a floating point value. This shows how float metadata can be defined.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablescreatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Boolean type for CustomFieldDateMetadata\nDESCRIPTION: Demonstrates the usage of a boolean type value for CustomFieldDateMetadata.  The value is assigned to a constant 'value' of type boolean.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfielddatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Value in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a boolean value for CustomFieldUpdateTextMetadata. The `value` constant is assigned a boolean literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdatetextmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Declaring String Custom Field Value TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare and assign a string value to a custom field in TypeScript. It initializes a constant variable named `value` with a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutpubliccustomfielddata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitGrantGitHubRepositoryProperties TypeScript\nDESCRIPTION: This snippet initializes an empty object of type `components.BenefitGrantGitHubRepositoryProperties`. It showcases the instantiation of a default GitHub Repository properties object, conforming to the `components` module's interface. This object can be used to hold data related to GitHub repository benefits.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/previousproperties.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGrantGitHubRepositoryProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Boolean Metadata Value in Typescript\nDESCRIPTION: Defines a boolean variable named 'value' and assigns it a boolean value (false). This illustrates how boolean metadata can be defined.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablescreatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Float Value Definition TypeScript\nDESCRIPTION: Defines a constant variable named 'value' of type number and assigns it a floating-point literal. This demonstrates how a float number might be used as a value for CustomFieldUpdateSelectMetadata within the polar-js project.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdateselectmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Import and Initialize FilePatch in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the FilePatch class from the polar-sh/sdk and initialize an empty FilePatch object. The FilePatch model is part of the components module. It showcases the basic usage of the FilePatch model.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/filepatch.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FilePatch } from \"@polar-sh/sdk/models/components/filepatch.js\";\n\nlet value: FilePatch = {};\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitGrantDiscordProperties TypeScript\nDESCRIPTION: This snippet initializes an empty object of type `components.BenefitGrantDiscordProperties`. It demonstrates how to create a default object adhering to the interface definition of Discord properties within a BenefitGrant context. No dependencies are explicitly required beyond the `components` module.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/previousproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGrantDiscordProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Import and Instantiate CustomFieldTextProperties Typescript\nDESCRIPTION: This snippet demonstrates how to import the CustomFieldTextProperties type from the `@polar-sh/sdk/models/components/customfieldtextproperties.js` module and instantiate an empty object of that type. It requires the `@polar-sh/sdk` package to be installed.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldtextproperties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomFieldTextProperties } from \"@polar-sh/sdk/models/components/customfieldtextproperties.js\";\n\nlet value: CustomFieldTextProperties = {};\n```\n\n----------------------------------------\n\nTITLE: Defining DiscountDuration Values in TypeScript\nDESCRIPTION: This snippet defines the possible values for the `DiscountDuration` type.  These values represent different duration options for a discount. They are used to set a discount to apply 'once', 'forever', or 'repeating'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountduration.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"once\" | \"forever\" | \"repeating\"\n```\n\n----------------------------------------\n\nTITLE: Boolean Declaration in TypeScript\nDESCRIPTION: This snippet illustrates how to declare a boolean variable in TypeScript. A constant named 'value' is initialized with the boolean value 'false'. It demonstrates representing boolean values, such as a flag, within order subscription metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordersubscriptionmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Assignment in TypeScript\nDESCRIPTION: This snippet shows how to assign a boolean value to a variable in TypeScript. It declares a constant variable named 'value' of type boolean and assigns it the value false. This is used as an example for a checkbox custom field metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreatecheckboxmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscountFixedRepeatDurationBase in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a `DiscountFixedRepeatDurationBase` object.  It defines a discount with a 'once' duration, a specific duration in months, a fixed amount and currency, creation and modification dates, an ID, metadata, name, code, start and end dates, maximum redemptions, redemption count, and organization ID. This configures a fixed discount that can be applied only once for a specified number of months.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/orderdiscount.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DiscountFixedRepeatDurationBase = {\n  duration: \"once\",\n  durationInMonths: 619926,\n  type: \"fixed\",\n  amount: 441641,\n  currency: \"Namibia Dollar\",\n  createdAt: new Date(\"2025-11-25T04:43:58.974Z\"),\n  modifiedAt: new Date(\"2025-06-10T15:39:22.400Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": \"<value>\",\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2023-06-02T15:02:54.697Z\"),\n  endsAt: new Date(\"2025-05-26T12:41:24.659Z\"),\n  maxRedemptions: 76274,\n  redemptionsCount: 21686,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Boolean Value\nDESCRIPTION: This snippet shows how to declare a boolean variable named 'value' and assign it a boolean literal (false). It demonstrates the basic syntax for boolean type declaration in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedonceforeverdurationmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration\nDESCRIPTION: Demonstrates how to declare and assign a string value to a constant variable in TypeScript. The variable 'value' is explicitly typed as 'string' and assigned the string literal '<value>'.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountupdatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Type Definition TypeScript\nDESCRIPTION: Defines a string variable 'value' and assigns it a string literal. This shows how to declare a string type and assign a value to it in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkproductmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: OAuth2ClientConfiguration UpdateGrantTypes Values TypeScript\nDESCRIPTION: This snippet shows the possible values for the OAuth2ClientConfigurationUpdateGrantTypes enum: 'authorization_code' and 'refresh_token'. These values are strings representing different grant types in OAuth2.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/oauth2clientconfigurationupdategranttypes.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"authorization_code\" | \"refresh_token\"\n```\n\n----------------------------------------\n\nTITLE: Date Type Definition in TypeScript\nDESCRIPTION: Defines a Date variable named 'value' and initializes it with a new Date object created from a string representation. This demonstrates how to define a Date type for custom field data when working with polar-js.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutconfirmstripecustomfielddata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: Date = new Date(\"2023-12-07T03:31:58.587Z\");\n```\n\n----------------------------------------\n\nTITLE: String Metadata Value in TypeScript\nDESCRIPTION: This snippet shows how to define a metadata value as a string when creating a checkout link product price. The 'value' variable is assigned a string literal. It is used for setting a string-based property in metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutlinkcreateproductpricemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Integer Metadata Value in TypeScript\nDESCRIPTION: This snippet shows how to define an integer number value for external customer metadata. The `value` constant is assigned an integer literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventcreateexternalcustomermetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Declaration TypeScript\nDESCRIPTION: Declares a constant variable 'value' of type number and assigns it a floating-point value. This illustrates representing decimal numerical data within the OrderCustomerMetadata context using TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordercustomermetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: String Tax ID Value in TypeScript\nDESCRIPTION: This snippet shows how to represent a customer tax ID as a string in TypeScript. The `value` variable is assigned a string literal representing the tax ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customertaxid.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Float Metadata Value in TypeScript\nDESCRIPTION: This snippet illustrates how to define a floating-point number value for external customer metadata. The `value` constant is assigned a floating-point literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventcreateexternalcustomermetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: Floating Point Number Type Example - TypeScript\nDESCRIPTION: Illustrates the declaration and assignment of a floating-point number value in TypeScript.\nThis demonstrates a basic float assignment.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: String Declaration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a string variable in TypeScript. It initializes a constant variable named 'value' with a string literal. This is used to represent string-based order subscription metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/ordersubscriptionmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Definition TypeScript\nDESCRIPTION: Defines a number variable named 'value' and assigns it a floating-point number literal. This snippet demonstrates how to define floating-point number values for event metadata in polar-js using TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/eventmetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: String Product ID Filter - TypeScript\nDESCRIPTION: This snippet demonstrates how to filter by product ID using a single string value in TypeScript. The `value` constant is assigned a string representing the product ID to be filtered.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/checkoutslistqueryparamproductidfilter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Number (Float) Type Definition\nDESCRIPTION: Defines a constant `value` of type `number` and assigns it a floating-point value. This demonstrates how to define a float type for BenefitMeterCreditCreateMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitmetercreditcreatemetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: TaxIDFormat Definition TypeScript\nDESCRIPTION: Defines a TypeScript constant `value` of type `components.TaxIDFormat` representing a customer tax ID format. This snippet showcases usage of a predefined enum for specifying tax ID formats, requiring the `components` module to be available. The example uses \"ua_vat\" as the format.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerportalcustomertaxid.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.TaxIDFormat = \"ua_vat\";\n```\n\n----------------------------------------\n\nTITLE: Define DiscountPercentageRepeatDurationBase Type - TypeScript\nDESCRIPTION: Defines a TypeScript type `DiscountPercentageRepeatDurationBase` representing a percentage-based discount applicable repeatedly over a set duration. It includes fields like duration in months, basis points for the percentage amount, start and end dates, redemption constraints, metadata, and organization ID. The snippet showcases how to assign example data to the type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/subscriptiondiscount.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.DiscountPercentageRepeatDurationBase = {\n  duration: \"repeating\",\n  durationInMonths: 695395,\n  type: \"fixed\",\n  basisPoints: 489532,\n  createdAt: new Date(\"2023-03-12T10:58:50.277Z\"),\n  modifiedAt: new Date(\"2024-09-14T19:15:52.642Z\"),\n  id: \"<value>\",\n  metadata: {\n    \"key\": 399573,\n  },\n  name: \"<value>\",\n  code: \"<value>\",\n  startsAt: new Date(\"2023-08-16T10:20:17.618Z\"),\n  endsAt: new Date(\"2024-09-04T23:43:02.503Z\"),\n  maxRedemptions: 863337,\n  redemptionsCount: 383593,\n  organizationId: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n};\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a string variable in TypeScript. The variable `value` is explicitly assigned a string literal. It showcases the basic syntax for string type declaration.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdatedatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Integer Number Type Declaration TypeScript\nDESCRIPTION: Declares a number variable named 'value' and initializes it with an integer value.  This showcases how integer numbers can be used with BenefitDownloadablesUpdateMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdownloadablesupdatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: TaxId as string in TypeScript\nDESCRIPTION: Defines a TaxId as a string variable in TypeScript. The value should be a string representing the TaxId.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/taxid.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration TypeScript\nDESCRIPTION: Demonstrates the declaration of a boolean variable in TypeScript. The variable `value` is assigned a boolean literal (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomerBenefitGrantDiscordUpdate TypeScript\nDESCRIPTION: This snippet initializes a CustomerBenefitGrantDiscordUpdate object using TypeScript. It defines a constant variable `value` with the type `components.CustomerBenefitGrantDiscordUpdate` and sets its `properties.accountId` to a placeholder value. The `accountId` is likely used to identify the Discord user receiving the benefit.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantupdate.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomerBenefitGrantDiscordUpdate = {\n  properties: {\n    accountId: \"<id>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Definition in TypeScript\nDESCRIPTION: Defines a constant variable named 'value' of type boolean and assigns it the value 'false'. This demonstrates the usage of the boolean type within the BenefitLicenseKeysUpdateMetadata context.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitlicensekeysupdatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Using FilesListResponse in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the FilesListResponse type in TypeScript. It creates a sample object with mock data including an array of file objects and pagination information. The sample code shows how to instantiate the object and populate its properties.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/fileslistresponse.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FilesListResponse } from \"@polar-sh/sdk/models/operations/fileslist.js\";\n\nlet value: FilesListResponse = {\n  result: {\n    items: [\n      {\n        id: \"<value>\",\n        organizationId: \"<value>\",\n        name: \"<value>\",\n        path: \"/usr/ports\",\n        mimeType: \"<value>\",\n        size: 168995,\n        storageVersion: \"<value>\",\n        checksumEtag: \"<value>\",\n        checksumSha256Base64: \"<value>\",\n        checksumSha256Hex: \"<value>\",\n        lastModifiedAt: new Date(\"2025-09-09T09:08:03.126Z\"),\n        version: \"<value>\",\n        isUploaded: false,\n        createdAt: new Date(\"2023-12-18T20:42:03.732Z\"),\n        sizeReadable: \"<value>\",\n      },\n    ],\n    pagination: {\n      totalCount: 436441,\n      maxPage: 16555,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: String Array Customer ID Filter - TypeScript\nDESCRIPTION: Defines a string array type variable for filtering customer IDs. This snippet shows how to declare and initialize a string array to represent multiple customer IDs to be used as a filter in metrics queries.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/metricsgetqueryparamcustomeridfilter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string[] = [\n  \"<value>\",\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing LicenseKeyActivationReadMeta in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and initialize an empty LicenseKeyActivationReadMeta object in TypeScript. It requires the @polar-sh/sdk dependency to be installed. The initialized object 'value' is of type LicenseKeyActivationReadMeta.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/licensekeyactivationreadmeta.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LicenseKeyActivationReadMeta } from \"@polar-sh/sdk/models/components/licensekeyactivationread.js\";\n\nlet value: LicenseKeyActivationReadMeta = {};\n```\n\n----------------------------------------\n\nTITLE: Declaring UnitAmount as String in TypeScript\nDESCRIPTION: Illustrates declaring a UnitAmount as a string in TypeScript. The string represents the price per unit in cents. The string should contain a numeric value. No dependencies are required.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/unitamount.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Import and Initialize CustomerBenefitGrantLicenseKeysUpdate TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the CustomerBenefitGrantLicenseKeysUpdate class from the specified module and create an empty instance of it.  This is the minimal initialization for the type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrantlicensekeysupdate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomerBenefitGrantLicenseKeysUpdate } from \"@polar-sh/sdk/models/components/customerbenefitgrantlicensekeysupdate.js\";\n\nlet value: CustomerBenefitGrantLicenseKeysUpdate = {};\n```\n\n----------------------------------------\n\nTITLE: CheckoutSortProperty Valid Values\nDESCRIPTION: This snippet lists the allowed string values for the CheckoutSortProperty enum. These values are used to specify the sorting order for checkout data, with a leading hyphen indicating descending order.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutsortproperty.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"created_at\" | \"-created_at\" | \"expires_at\" | \"-expires_at\"\n```\n\n----------------------------------------\n\nTITLE: Define CustomerSessionCustomerIDCreate Type (TypeScript)\nDESCRIPTION: This code snippet defines a TypeScript type `CustomerSessionCustomerIDCreate` within the `components` namespace. This type allows for creating a customer session using the internal `customerId`. The value is a placeholder for a string representing the customer's ID.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/operations/customersessionscreatecustomersessioncreate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomerSessionCustomerIDCreate = {\n  customerId: \"<value>\",\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining Floating-Point Custom Metadata Value in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a floating-point value for custom metadata associated with a benefit. The `value` variable is explicitly typed as a number and assigned a floating-point literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustommetadata.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 1284.03;\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare a string variable in TypeScript. The variable `value` is explicitly typed as `string` and assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordsubscribermetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Using FilterOperator in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `FilterOperator` type from the `@polar-sh/sdk/models/components/filteroperator.js` module and assign a value to it. This shows basic usage of the FilterOperator type.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/filteroperator.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FilterOperator } from \"@polar-sh/sdk/models/components/filteroperator.js\";\n\nlet value: FilterOperator = \"gte\";\n```\n\n----------------------------------------\n\nTITLE: Defining String Value in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a string value for CustomFieldUpdateTextMetadata. The `value` constant is assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldupdatetextmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Declaring a String Value in TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a string variable named `value` and assign it a string literal. It serves as an example of the string data type supported in LicenseKeyCustomerMetadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/licensekeycustomermetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerBenefitGrantCustom Component\nDESCRIPTION: Defines the structure of the CustomerBenefitGrantCustom component using TypeScript. This component includes properties such as creation and modification dates, IDs, customer and benefit details, and various boolean flags related to the grant's status. The properties are initialized with placeholder values and dates for demonstration or testing.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerbenefitgrant.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.CustomerBenefitGrantCustom = {\n  createdAt: new Date(\"2023-11-18T01:23:25.583Z\"),\n  modifiedAt: new Date(\"2024-04-11T22:41:26.880Z\"),\n  id: \"<value>\",\n  grantedAt: new Date(\"2024-12-10T17:33:07.669Z\"),\n  revokedAt: new Date(\"2025-06-07T12:55:35.057Z\"),\n  customerId: \"<value>\",\n  benefitId: \"<value>\",\n  subscriptionId: \"<value>\",\n  orderId: \"<value>\",\n  isGranted: false,\n  isRevoked: false,\n  customer: {\n    createdAt: new Date(\"2023-12-17T07:56:31.600Z\"),\n    modifiedAt: new Date(\"2023-08-24T13:54:59.760Z\"),\n    id: \"<value>\",\n    email: \"Rhianna48@gmail.com\",\n    emailVerified: false,\n    name: \"<value>\",\n    billingAddress: {\n      country: \"FR\",\n    },\n    taxId: [\n      \"FR61954506077\",\n      \"eu_vat\",\n    ],\n    oauthAccounts: {\n      \"key\": {\n        accountId: \"<id>\",\n        accountUsername: \"<value>\",\n      },\n    },\n  },\n  benefit: {\n    id: \"<value>\",\n    createdAt: new Date(\"2025-03-19T07:14:31.670Z\"),\n    modifiedAt: new Date(\"2024-11-28T11:35:41.959Z\"),\n    description: \"vacation that really rudely enfold\",\n    selectable: false,\n    deletable: false,\n    organizationId: \"<value>\",\n    metadata: {\n      \"key\": \"<value>\",\n    },\n    organization: {\n      createdAt: new Date(\"2024-05-01T17:17:17.155Z\"),\n      modifiedAt: new Date(\"2024-08-13T08:26:11.618Z\"),\n      id: \"1dbfc517-0bbf-4301-9ba8-555ca42b9737\",\n      name: \"<value>\",\n      slug: \"<value>\",\n      avatarUrl: \"https://superb-summer.info\",\n      email: \"Judy79@gmail.com\",\n      website: \"<value>\",\n      socials: [\n        {\n          platform: \"other\",\n          url: \"https://jaunty-outlaw.info\",\n        },\n      ],\n      detailsSubmittedAt: new Date(\"2024-04-23T20:48:03.974Z\"),\n      featureSettings: {},\n      subscriptionSettings: {\n        allowMultipleSubscriptions: false,\n        allowCustomerUpdates: false,\n        prorationBehavior: \"prorate\",\n      },\n    },\n    properties: {\n      note: \"<value>\",\n    },\n  },\n  properties: {},\n};\n\n```\n\n----------------------------------------\n\nTITLE: Number (Integer) Type Example\nDESCRIPTION: This code snippet demonstrates how to assign an integer number to a variable within DiscountPercentageRepeatDurationMetadata. The variable `value` is explicitly typed as `number` and assigned the integer value 128403.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountpercentagerepeatdurationmetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Integer Value Declaration TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a number variable named 'value' and assign an integer literal to it in TypeScript.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/discountfixedrepeatdurationcreatemetadata.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: number = 128403;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Declaration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a boolean variable in TypeScript. The variable `value` is assigned a boolean literal (false).\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitcustomupdatemetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Declaring a boolean variable in TypeScript\nDESCRIPTION: This snippet shows how to declare a boolean variable in TypeScript and assign it a boolean value. It is used for defining boolean type metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/orderproductmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Definition\nDESCRIPTION: Defines a boolean type for CustomFieldCreateSelectMetadata. It shows how to declare a constant named 'value' of type boolean and initialize it with a boolean literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customfieldcreateselectmetadata.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: String Metadata Value in TypeScript\nDESCRIPTION: Defines a string variable in TypeScript representing a string metadata value. This can be used to store textual information as metadata.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/benefitdiscordcreatemetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: String Type Declaration TypeScript\nDESCRIPTION: Demonstrates the declaration of a string variable in TypeScript. The variable `value` is assigned a string literal.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/checkoutmetadata.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: string = \"<value>\";\n```\n\n----------------------------------------\n\nTITLE: Initializing BenefitGrantLicenseKeysProperties TypeScript\nDESCRIPTION: This snippet initializes a TypeScript object of type `components.BenefitGrantLicenseKeysProperties`. This type is designed to define properties for managing license keys granted as a benefit.\nSOURCE: https://github.com/polarsource/polar-js/blob/main/docs/models/components/customerstatebenefitgrantproperties.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: components.BenefitGrantLicenseKeysProperties = {};\n```"
  }
]