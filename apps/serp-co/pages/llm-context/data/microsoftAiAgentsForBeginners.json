[
  {
    "owner": "microsoft",
    "repo": "ai-agents-for-beginners",
    "content": "TITLE: Creating a Meta System Message Template for AI Agents\nDESCRIPTION: A template prompt that instructs an LLM how to generate system prompts for AI agents. This meta prompt establishes guidelines for creating structured and descriptive system messages based on company information and agent roles.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/06-building-trustworthy-agents/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nYou are an expert at creating AI agent assistants. \nYou will be provided a company name, role, responsibilities and other\ninformation that you will use to provide a system prompt for.\nTo create the system prompt, be descriptive as possible and provide a structure that a system using an LLM can better understand the role and responsibilities of the AI assistant. \n```\n\n----------------------------------------\n\nTITLE: Travel Agent Class Implementation\nDESCRIPTION: Complete Travel Agent class implementation with methods for gathering preferences, retrieving information, generating recommendations, and adjusting based on feedback. Includes core functionality for managing travel planning.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        itinerary = create_itinerary(flights, hotels, attractions)\n        return itinerary\n\n    def adjust_based_on_feedback(self, feedback):\n        self.experience_data.append(feedback)\n        self.user_preferences = adjust_preferences(self.user_preferences, feedback)\n```\n\n----------------------------------------\n\nTITLE: Implementing Travel Agent Class with Metacognition\nDESCRIPTION: A Python class implementation of a travel agent that demonstrates metacognitive capabilities including preference gathering, information retrieval, recommendation generation, and feedback-based adjustments.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ko/09-metacognition/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        # Search for flights, hotels, and attractions based on preferences\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        itinerary = create_itinerary(flights, hotels, attractions)\n        return itinerary\n\n    def adjust_based_on_feedback(self, feedback):\n        self.experience_data.append(feedback)\n        # Analyze feedback and adjust future recommendations\n        self.user_preferences = adjust_preferences(self.user_preferences, feedback)\n\n# Example usage\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\ntravel_agent.adjust_based_on_feedback(feedback)\n```\n\n----------------------------------------\n\nTITLE: Creating a Planning Agent with Structured Output in Python using Autogen\nDESCRIPTION: This code snippet demonstrates a planning agent that breaks down a travel-related goal into subtasks using Pydantic models for structured output. It defines agent types through enums, creates subtask models, and uses Azure AI services to generate a structured plan in JSON format.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/07-planning-design/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\nfrom enum import Enum\nfrom typing import List, Optional, Union\nimport json\nimport os\nfrom typing import Optional\nfrom pprint import pprint\nfrom autogen_core.models import UserMessage, SystemMessage, AssistantMessage\nfrom autogen_ext.models.azure import AzureAIChatCompletionClient\nfrom azure.core.credentials import AzureKeyCredential\n\nclass AgentEnum(str, Enum):\n    FlightBooking = \"flight_booking\"\n    HotelBooking = \"hotel_booking\"\n    CarRental = \"car_rental\"\n    ActivitiesBooking = \"activities_booking\"\n    DestinationInfo = \"destination_info\"\n    DefaultAgent = \"default_agent\"\n    GroupChatManager = \"group_chat_manager\"\n\n# Travel SubTask Model\nclass TravelSubTask(BaseModel):\n    task_details: str\n    assigned_agent: AgentEnum  # we want to assign the task to the agent\n\nclass TravelPlan(BaseModel):\n    main_task: str\n    subtasks: List[TravelSubTask]\n    is_greeting: bool\n\nclient = AzureAIChatCompletionClient(\n    model=\"gpt-4o-mini\",\n    endpoint=\"https://models.inference.ai.azure.com\",\n    # To authenticate with the model you will need to generate a personal access token (PAT) in your GitHub settings.\n    # Create your PAT token by following instructions here: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens\n    credential=AzureKeyCredential(os.environ[\"GITHUB_TOKEN\"]),\n    model_info={\n        \"json_output\": False,\n        \"function_calling\": True,\n        \"vision\": True,\n        \"family\": \"unknown\",\n    },\n)\n\n# Define the user message\nmessages = [\n    SystemMessage(content=\"\"\"You are an planner agent.\n    Your job is to decide which agents to run based on the user's request.\n                      Provide your response in JSON format with the following structure:\n{'main_task': 'Plan a family trip from Singapore to Melbourne.',\n 'subtasks': [{'assigned_agent': 'flight_booking',\n               'task_details': 'Book round-trip flights from Singapore to '\n                               'Melbourne.'}]\n    Below are the available agents specialised in different tasks:\n    - FlightBooking: For booking flights and providing flight information\n    - HotelBooking: For booking hotels and providing hotel information\n    - CarRental: For booking cars and providing car rental information\n    - ActivitiesBooking: For booking activities and providing activity information\n    - DestinationInfo: For providing information about destinations\n    - DefaultAgent: For handling general requests\"\"\", source=\"system\"),\n    UserMessage(\n        content=\"Create a travel plan for a family of 2 kids from Singapore to Melboune\", source=\"user\"),\n]\n\nresponse = await client.create(messages=messages, extra_create_args={\"response_format\": 'json_object'})\n\nresponse_content: Optional[str] = response.content if isinstance(\n    response.content, str) else None\nif response_content is None:\n    raise ValueError(\"Response content is not a valid JSON string\" )\n\npprint(json.loads(response_content))\n\n# # Ensure the response content is a valid JSON string before loading it\n# response_content: Optional[str] = response.content if isinstance(\n#     response.content, str) else None\n# if response_content is None:\n#     raise ValueError(\"Response content is not a valid JSON string\")\n\n# # Print the response content after loading it as JSON\n# pprint(json.loads(response_content))\n\n# Validate the response content with the MathReasoning model\n# TravelPlan.model_validate(json.loads(response_content))\n```\n\n----------------------------------------\n\nTITLE: Defining Base Prompt for Travel Agent AI\nDESCRIPTION: Example base prompt defining the role and responsibilities of a travel agent AI assistant for Contoso Travel, including specific tasks and capabilities.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/de/06-building-trustworthy-agents/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nYou are a travel agent for Contoso Travel that is great at booking flights for customers. To help customers you can perform the following tasks: lookup available flights, book flights, ask for preferences in seating and times for flights, cancel any previously booked flights and alert customers on any delays or cancellations of flights.  \n```\n\n----------------------------------------\n\nTITLE: Travel Agent Class with Relevance Scoring in Python\nDESCRIPTION: This Python code defines a `Travel_Agent` class that gathers user preferences, retrieves travel information (flights, hotels, attractions), and generates personalized itineraries. It includes methods for calculating relevance scores based on user interests, budget, and destination, and for adjusting recommendations based on user feedback.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ja/09-metacognition/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        ranked_hotels = self.filter_and_rank(hotels, self.user_preferences)\n        itinerary = create_itinerary(flights, ranked_hotels, attractions)\n        return itinerary\n\n    def filter_and_rank(self, items, query):\n        ranked_items = sorted(items, key=lambda item: self.relevance_score(item, query), reverse=True)\n        return ranked_items[:10]  # Return top 10 relevant items\n\n    def relevance_score(self, item, query):\n        score = 0\n        if item['category'] in query['interests']:\n            score += 1\n        if item['price'] <= query['budget']:\n            score += 1\n        if item['location'] == query['destination']:\n            score += 1\n        return score\n\n    def adjust_based_on_feedback(self, feedback, items):\n        for item in items:\n            if item['name'] in feedback['liked']:\n                item['relevance'] += 1\n            if item['name'] in feedback['disliked']:\n                item['relevance'] -= 1\n        return items\n\n# Example usage\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\nupdated_items = travel_agent.adjust_based_on_feedback(feedback, itinerary['hotels'])\nprint(\"Updated Itinerary with Feedback:\", updated_items)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Agent Orchestration with Pydantic Models in Python\nDESCRIPTION: This code snippet shows the data model setup for a multi-agent orchestration system that handles travel planning tasks. It defines enumerations for agent types and Pydantic models for structured task representation and validation.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/de/07-planning-design/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\n\nfrom enum import Enum\nfrom typing import List, Optional, Union\n\nclass AgentEnum(str, Enum):\n    FlightBooking = \"flight_booking\"\n    HotelBooking = \"hotel_booking\"\n    CarRental = \"car_rental\"\n    ActivitiesBooking = \"activities_booking\"\n    DestinationInfo = \"destination_info\"\n    DefaultAgent = \"default_agent\"\n    GroupChatManager = \"group_chat_manager\"\n\n# Travel SubTask Model\n\nclass TravelSubTask(BaseModel):\n    task_details: str\n    assigned_agent: AgentEnum # we want to assign the task to the agent\n\nclass TravelPlan(BaseModel):\n    main_task: str\n    subtasks: List[TravelSubTask]\n    is_greeting: bool\nimport json\nimport os\nfrom typing import Optional\n\nfrom autogen_core.models import UserMessage, SystemMessage, AssistantMessage\nfrom autogen_ext.models.openai import AzureOpenAIChatCompletionClient\n\n# Create the client with type-checked environment variables\n\nclient = AzureOpenAIChatCompletionClient(\n    azure_deployment=os.getenv(\"AZURE_OPENAI_DEPLOYMENT_NAME\"),\n    model=os.getenv(\"AZURE_OPENAI_DEPLOYMENT_NAME\"),\n    api_version=os.getenv(\"AZURE_OPENAI_API_VERSION\"),\n    azure_endpoint=os.getenv(\"AZURE_OPENAI_ENDPOINT\"),\n    api_key=os.getenv(\"AZURE_OPENAI_API_KEY\"),\n)\n\nfrom pprint import pprint\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function for Travel Planning Demo\nDESCRIPTION: Defines an asynchronous main function that processes user inputs, generates travel plans, and displays the results using IPython's HTML display.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/07-planning-design/code_samples/07-semantic-kernel.ipynb#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\n\nasync def main():\n    # Create a thread for the agent\n    # If no thread is provided, a new thread will be\n    # created and returned with the initial response\n    thread: ChatHistoryAgentThread | None = None\n\n    # Respond to user input\n    user_inputs = [\n        \"Create a travel plan for a family of 4, with 2 kids, from Singapore to Melboune\",\n    ]\n\n    for user_input in user_inputs:\n        \n        # Start building HTML output\n        html_output = \"<div style='margin-bottom:10px'>\"\n        html_output += \"<div style='font-weight:bold'>User:</div>\"\n        html_output += f\"<div style='margin-left:20px'>{user_input}</div>\"\n        html_output += \"</div>\"\n\n        # Collect the agent's response\n        response = await agent.get_response(messages=user_input, thread=thread)\n        thread = response.thread\n\n        try:\n            # Try to validate the response as a TravelPlan\n            travel_plan = TravelPlan.model_validate(json.loads(response.message.content))\n\n            # Display the validated model as formatted JSON\n            formatted_json = travel_plan.model_dump_json(indent=4)\n            html_output += \"<div style='margin-bottom:20px'>\"\n            html_output += \"<div style='font-weight:bold'>Validated Travel Plan:</div>\"\n            html_output += f\"<pre style='margin-left:20px; padding:10px; border-radius:5px;'>{formatted_json}</pre>\"\n            html_output += \"</div>\"\n        except ValidationError as e:\n            # Handle validation errors\n            html_output += \"<div style='margin-bottom:20px; color:red;'>\"\n            html_output += \"<div style='font-weight:bold'>Validation Error:</div>\"\n            html_output += f\"<pre style='margin-left:20px;'>{str(e)}</pre>\"\n            html_output += \"</div>\"\n            # Add this to see what the response contains for debugging\n            html_output += \"<div style='margin-bottom:20px;'>\"\n            html_output += \"<div style='font-weight:bold'>Raw Response:</div>\"\n            html_output += f\"<div style='margin-left:20px; white-space:pre-wrap'>{response.content}</div>\"\n            html_output += \"</div>\"\n\n        html_output += \"<hr>\"\n\n        # Display formatted HTML\n        display(HTML(html_output))\n\nawait main()\n```\n\n----------------------------------------\n\nTITLE: Implementing Metacognitive Travel Agent in Python\nDESCRIPTION: A Python class implementation of a travel agent with metacognitive capabilities, including preference gathering, information retrieval, recommendation generation, and feedback-based learning. The agent can store user preferences, search for travel options, create itineraries, and adjust recommendations based on feedback.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        # Search for flights, hotels, and attractions based on preferences\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        itinerary = create_itinerary(flights, hotels, attractions)\n        return itinerary\n\n    def adjust_based_on_feedback(self, feedback):\n        self.experience_data.append(feedback)\n        # Analyze feedback and adjust future recommendations\n        self.user_preferences = adjust_preferences(self.user_preferences, feedback)\n\n# Example usage\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\ntravel_agent.adjust_based_on_feedback(feedback)\n```\n\n----------------------------------------\n\nTITLE: Complete Travel Agent Class with Corrective RAG\nDESCRIPTION: Comprehensive implementation of a travel agent class with methods for preference gathering, recommendation generation, and feedback-based adjustments\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        itinerary = create_itinerary(flights, hotels, attractions)\n        return itinerary\n\n    def adjust_based_on_feedback(self, feedback):\n        self.experience_data.append(feedback)\n        self.user_preferences = adjust_preferences(self.user_preferences, feedback)\n        new_itinerary = self.generate_recommendations()\n        return new_itinerary\n```\n\n----------------------------------------\n\nTITLE: Implementing a Metacognitive Hotel Recommendation Agent in Python\nDESCRIPTION: This class implements a hotel recommendation agent with metacognitive capabilities. It can make recommendations based on different strategies, reflect on its choices using simulated user feedback, and adjust its strategy based on the outcomes of previous recommendations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nclass HotelRecommendationAgent:\n    def __init__(self):\n        self.previous_choices = []  # Stores the hotels chosen previously\n        self.corrected_choices = []  # Stores the corrected choices\n        self.recommendation_strategies = ['cheapest', 'highest_quality']  # Available strategies\n\n    def recommend_hotel(self, hotels, strategy):\n        \"\"\"\n        Recommend a hotel based on the chosen strategy.\n        The strategy can either be 'cheapest' or 'highest_quality'.\n        \"\"\"\n        if strategy == 'cheapest':\n            recommended = min(hotels, key=lambda x: x['price'])\n        elif strategy == 'highest_quality':\n            recommended = max(hotels, key=lambda x: x['quality'])\n        else:\n            recommended = None\n        self.previous_choices.append((strategy, recommended))\n        return recommended\n\n    def reflect_on_choice(self):\n        \"\"\"\n        Reflect on the last choice made and decide if the agent should adjust its strategy.\n        The agent considers if the previous choice led to a poor outcome.\n        \"\"\"\n        if not self.previous_choices:\n            return \"No choices made yet.\"\n\n        last_choice_strategy, last_choice = self.previous_choices[-1]\n        # Let's assume we have some user feedback that tells us whether the last choice was good or not\n        user_feedback = self.get_user_feedback(last_choice)\n\n        if user_feedback == \"bad\":\n            # Adjust strategy if the previous choice was unsatisfactory\n            new_strategy = 'highest_quality' if last_choice_strategy == 'cheapest' else 'cheapest'\n            self.corrected_choices.append((new_strategy, last_choice))\n            return f\"Reflecting on choice. Adjusting strategy to {new_strategy}.\"\n        else:\n            return \"The choice was good. No need to adjust.\"\n\n    def get_user_feedback(self, hotel):\n        \"\"\"\n        Simulate user feedback based on hotel attributes.\n        For simplicity, assume if the hotel is too cheap, the feedback is \"bad\".\n        If the hotel has quality less than 7, feedback is \"bad\".\n        \"\"\"\n        if hotel['price'] < 100 or hotel['quality'] < 7:\n            return \"bad\"\n        return \"good\"\n\n# Simulate a list of hotels (price and quality)\nhotels = [\n    {'name': 'Budget Inn', 'price': 80, 'quality': 6},\n    {'name': 'Comfort Suites', 'price': 120, 'quality': 8},\n    {'name': 'Luxury Stay', 'price': 200, 'quality': 9}\n]\n\n# Create an agent\nagent = HotelRecommendationAgent()\n\n# Step 1: The agent recommends a hotel using the \"cheapest\" strategy\nrecommended_hotel = agent.recommend_hotel(hotels, 'cheapest')\nprint(f\"Recommended hotel (cheapest): {recommended_hotel['name']}\")\n\n# Step 2: The agent reflects on the choice and adjusts strategy if necessary\nreflection_result = agent.reflect_on_choice()\nprint(reflection_result)\n```\n\n----------------------------------------\n\nTITLE: Continuing Conversation with AI Agent in Python\nDESCRIPTION: The function 'continue_chat' uses an existing thread to continue interaction with an AI agent using provided user inputs. It processes streaming responses to gather function call information and results, then formats the output into an HTML block for visual display. Dependencies include the AI agent's interface and required libraries like asyncio for asynchronous operations. Key parameters include 'messages' for user inputs and 'thread' to maintain conversation context. Expected outputs are HTML-formatted dialogue and function result details. Ensure agent interface supports streaming responses.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/code_samples/09-semantic-kernel.ipynb#2025-04-18_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n# This will use the same thread that was defined earlier\nasync def continue_chat():\n    global thread\n    \n    # Continue the conversation with new user inputs\n    user_inputs = [\n        \"Book me a flight to Paris\",\n    ]\n\n    for user_input in user_inputs:\n        # Start building HTML output\n        html_output = \"<div style='margin-bottom:10px'>\"\n        html_output += \"<div style='font-weight:bold'>User:</div>\"\n        html_output += f\"<div style='margin-left:20px'>{user_input}</div>\"\n        html_output += \"</div>\"\n\n        agent_name = None\n        full_response: list[str] = []\n        function_calls: list[str] = []\n\n        # Buffer to reconstruct streaming function call\n        current_function_name = None\n        argument_buffer = \"\"\n\n        async for response in agent.invoke_stream(\n            messages=user_input,\n            thread=thread,\n        ):\n            thread = response.thread\n            agent_name = response.name\n            content_items = list(response.items)\n\n            for item in content_items:\n                if isinstance(item, FunctionCallContent):\n                    if item.function_name:\n                        current_function_name = item.function_name\n\n                    # Accumulate arguments (streamed in chunks)\n                    if isinstance(item.arguments, str):\n                        argument_buffer += item.arguments\n                elif isinstance(item, FunctionResultContent):\n                    # Finalize any pending function call before showing result\n                    if current_function_name:\n                        formatted_args = argument_buffer.strip()\n                        try:\n                            parsed_args = json.loads(formatted_args)\n                            formatted_args = json.dumps(parsed_args)\n                        except Exception:\n                            pass  # leave as raw string\n\n                        function_calls.append(f\"Calling function: {current_function_name}({formatted_args})\")\n                        current_function_name = None\n                        argument_buffer = \"\"\n\n                    function_calls.append(f\"\\nFunction Result:\\n\\n{item.result}\")\n                elif isinstance(item, StreamingTextContent) and item.text:\n                    full_response.append(item.text)\n\n        if function_calls:\n            html_output += (\n                \"<div style='margin-bottom:10px'>\"\n                \"<details>\"\n                \"<summary style='cursor:pointer; font-weight:bold; color:#0066cc;'>Function Calls (click to expand)</summary>\"\n                \"<div style='margin:10px; padding:10px; background-color:#f8f8f8; \"\n                \"border:1px solid #ddd; border-radius:4px; white-space:pre-wrap; font-size:14px; color:#333;'>\"\n                f\"{chr(10).join(function_calls)}\"\n                \"</div></details></div>\"\n            )\n\n        html_output += (\n            \"<div style='margin-bottom:20px'>\"\n            f\"<div style='font-weight:bold'>{agent_name or 'Assistant'}:</div>\"\n            f\"<div style='margin-left:20px; white-space:pre-wrap'>{''.join(full_response)}</div></div><hr>\"\n        )\n\n        display(HTML(html_output))\n\nawait continue_chat()\n```\n\n----------------------------------------\n\nTITLE: Implementing TravelAgent Class with Azure OpenAI Integration\nDESCRIPTION: A Python class that provides travel recommendations using Azure OpenAI API. The class takes destinations and user preferences as input, generates prompts, and returns ranked travel recommendations based on API responses.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nclass TravelAgent:\n    def __init__(self, destinations):\n        self.destinations = destinations\n\n    def get_recommendations(self, preferences, api_key, endpoint):\n        # Generate a prompt for the Azure OpenAI\n        prompt = self.generate_prompt(preferences)\n        \n        # Define headers and payload for the request\n        headers = {\n            'Content-Type': 'application/json',\n            'Authorization': f'Bearer {api_key}'\n        }\n        payload = {\n            \"prompt\": prompt,\n            \"max_tokens\": 150,\n            \"temperature\": 0.7\n        }\n        \n        # Call the Azure OpenAI API to get the re-ranked and scored destinations\n        response = requests.post(endpoint, headers=headers, json=payload)\n        response_data = response.json()\n        \n        # Extract and return the recommendations\n        recommendations = response_data['choices'][0]['text'].strip().split('\\n')\n        return recommendations\n\n    def generate_prompt(self, preferences):\n        prompt = \"Here are the travel destinations ranked and scored based on the following user preferences:\\n\"\n        for key, value in preferences.items():\n            prompt += f\"{key}: {value}\\n\"\n        prompt += \"\\nDestinations:\\n\"\n        for destination in self.destinations:\n            prompt += f\"- {destination['name']}: {destination['description']}\\n\"\n        return prompt\n```\n\n----------------------------------------\n\nTITLE: Implementing Travel Agent Class with Metacognitive Capabilities in Python\nDESCRIPTION: Demonstrates a Python class implementation for a travel agent with metacognitive features including user preference gathering, information retrieval, recommendation generation, and feedback-based adjustments. The class maintains state for user preferences and experience data to enable learning from past interactions.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/de/09-metacognition/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        # Search for flights, hotels, and attractions based on preferences\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        itinerary = create_itinerary(flights, hotels, attractions)\n        return itinerary\n\n    def adjust_based_on_feedback(self, feedback):\n        self.experience_data.append(feedback)\n        # Analyze feedback and adjust future recommendations\n        self.user_preferences = adjust_preferences(self.user_preferences, feedback)\n```\n\n----------------------------------------\n\nTITLE: Hotel Recommendation Agent with Metacognition in Python\nDESCRIPTION: This class implements a hotel recommendation agent with metacognitive abilities. It can reflect on its decision-making process, evaluate the quality of its recommendations based on user feedback, and adjust its recommendation strategy accordingly.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nclass HotelRecommendationAgent:\n    def __init__(self):\n        self.previous_choices = []  # Stores the hotels chosen previously\n        self.corrected_choices = []  # Stores the corrected choices\n        self.recommendation_strategies = ['cheapest', 'highest_quality']  # Available strategies\n\n    def recommend_hotel(self, hotels, strategy):\n        \"\"\"\n        Recommend a hotel based on the chosen strategy.\n        The strategy can either be 'cheapest' or 'highest_quality'.\n        \"\"\"\n        if strategy == 'cheapest':\n            recommended = min(hotels, key=lambda x: x['price'])\n        elif strategy == 'highest_quality':\n            recommended = max(hotels, key=lambda x: x['quality'])\n        else:\n            recommended = None\n        self.previous_choices.append((strategy, recommended))\n        return recommended\n\n    def reflect_on_choice(self):\n        \"\"\"\n        Reflect on the last choice made and decide if the agent should adjust its strategy.\n        The agent considers if the previous choice led to a poor outcome.\n        \"\"\"\n        if not self.previous_choices:\n            return \"No choices made yet.\"\n\n        last_choice_strategy, last_choice = self.previous_choices[-1]\n        # Let's assume we have some user feedback that tells us whether the last choice was good or not\n        user_feedback = self.get_user_feedback(last_choice)\n\n        if user_feedback == \"bad\":\n            # Adjust strategy if the previous choice was unsatisfactory\n            new_strategy = 'highest_quality' if last_choice_strategy == 'cheapest' else 'cheapest'\n            self.corrected_choices.append((new_strategy, last_choice))\n            return f\"Reflecting on choice. Adjusting strategy to {new_strategy}.\"\n        else:\n            return \"The choice was good. No need to adjust.\"\n\n    def get_user_feedback(self, hotel):\n        \"\"\"\n        Simulate user feedback based on hotel attributes.\n        For simplicity, assume if the hotel is too cheap, the feedback is \"bad\".\n        If the hotel has quality less than 7, feedback is \"bad\".\n        \"\"\"\n        if hotel['price'] < 100 or hotel['quality'] < 7:\n            return \"bad\"\n        return \"good\"\n\n# Simulate a list of hotels (price and quality)\nhotels = [\n    {'name': 'Budget Inn', 'price': 80, 'quality': 6},\n    {'name': 'Comfort Suites', 'price': 120, 'quality': 8},\n    {'name': 'Luxury Stay', 'price': 200, 'quality': 9}\n]\n\n# Create an agent\nagent = HotelRecommendationAgent()\n\n# Step 1: The agent recommends a hotel using the \"cheapest\" strategy\nrecommended_hotel = agent.recommend_hotel(hotels, 'cheapest')\nprint(f\"Recommended hotel (cheapest): {recommended_hotel['name']}\")\n\n# Step 2: The agent reflects on the choice and adjusts strategy if necessary\nreflection_result = agent.reflect_on_choice()\nprint(reflection_result)\n```\n\n----------------------------------------\n\nTITLE: Initializing Travel Agent Class in Python\nDESCRIPTION: This snippet defines a Travel_Agent class with initialization and a method to gather user preferences. It establishes the basic structure for the travel recommendation system.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n```\n\n----------------------------------------\n\nTITLE: Creating AI Agents with Semantic Kernel in Python\nDESCRIPTION: This code demonstrates how to create an AI agent using Microsoft's Semantic Kernel Python SDK. It shows how to define a chat history, create a plugin with a function that books travel, and set up a Kernel with an Azure OpenAI connector to enable function calling capabilities.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Semantic Kernel Python Example\n\nimport asyncio\nfrom typing import Annotated\n\nfrom semantic_kernel.connectors.ai import FunctionChoiceBehavior\nfrom semantic_kernel.connectors.ai.open_ai import AzureChatCompletion, AzureChatPromptExecutionSettings\nfrom semantic_kernel.contents import ChatHistory\nfrom semantic_kernel.functions import kernel_function\nfrom semantic_kernel.kernel import Kernel\n\n# Define a ChatHistory object to hold the conversation's context\nchat_history = ChatHistory()\nchat_history.add_user_message(\"I'd like to go to New York on January 1, 2025\")\n\n\n# Define a sample plugin that contains the function to book travel\nclass BookTravelPlugin:\n    \"\"\"A Sample Book Travel Plugin\"\"\"\n\n    @kernel_function(name=\"book_flight\", description=\"Book travel given location and date\")\n    async def book_flight(\n        self, date: Annotated[str, \"The date of travel\"], location: Annotated[str, \"The location to travel to\"]\n    ) -> str:\n        return f\"Travel was booked to {location} on {date}\"\n\n# Create the Kernel\nkernel = Kernel()\n\n# Add the sample plugin to the Kernel object\nkernel.add_plugin(BookTravelPlugin(), plugin_name=\"book_travel\")\n\n# Define the Azure OpenAI AI Connector\nchat_service = AzureChatCompletion(\n    deployment_name=\"YOUR_DEPLOYMENT_NAME\", \n    api_key=\"YOUR_API_KEY\", \n    endpoint=\"https://<your-resource>.azure.openai.com/\",\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Travel Planning Models and Agent Client - Python\nDESCRIPTION: Defines core data models for travel planning including agent types and task structures, and implements Azure AI client integration for processing travel requests.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fa/07-planning-design/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\nfrom enum import Enum\nfrom typing import List, Optional, Union\nimport json\nimport os\nfrom typing import Optional\nfrom pprint import pprint\nfrom autogen_core.models import UserMessage, SystemMessage, AssistantMessage\nfrom autogen_ext.models.azure import AzureAIChatCompletionClient\nfrom azure.core.credentials import AzureKeyCredential\n\nclass AgentEnum(str, Enum):\n    FlightBooking = \"flight_booking\"\n    HotelBooking = \"hotel_booking\"\n    CarRental = \"car_rental\"\n    ActivitiesBooking = \"activities_booking\"\n    DestinationInfo = \"destination_info\"\n    DefaultAgent = \"default_agent\"\n    GroupChatManager = \"group_chat_manager\"\n\nclass TravelSubTask(BaseModel):\n    task_details: str\n    assigned_agent: AgentEnum\n\nclass TravelPlan(BaseModel):\n    main_task: str\n    subtasks: List[TravelSubTask]\n    is_greeting: bool\n\nclient = AzureAIChatCompletionClient(\n    model=\"gpt-4o-mini\",\n    endpoint=\"https://models.inference.ai.azure.com\",\n    credential=AzureKeyCredential(os.environ[\"GITHUB_TOKEN\"]),\n    model_info={\n        \"json_output\": False,\n        \"function_calling\": True,\n        \"vision\": True,\n        \"family\": \"unknown\",\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating ChatCompletionAgent for Travel Recommendations\nDESCRIPTION: This code creates a ChatCompletionAgent for travel recommendations. It initializes the agent with the chat completion service, SearchPlugin, and WeatherInfoPlugin. The agent is configured with specific instructions for handling travel queries.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-semantic-kernel-azuresearch.ipynb#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nagent = ChatCompletionAgent(\n    service=chat_completion_service,\n    plugins=[SearchPlugin(search_client=search_client), WeatherInfoPlugin()],\n    name=\"TravelAgent\",\n    instructions=\"Answer travel queries using the provided tools and context. If context is provided, do not say 'I have no context for that.'\",\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing AI Travel Agent with Metacognition in Python\nDESCRIPTION: A Python class implementation demonstrating how to build an AI travel agent with metacognitive capabilities. The agent can gather user preferences, retrieve travel information, generate recommendations, and adjust behavior based on feedback. It includes basic methods for self-reflection and learning from experience.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        # Search for flights, hotels, and attractions based on preferences\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        itinerary = create_itinerary(flights, hotels, attractions)\n        return itinerary\n\n    def adjust_based_on_feedback(self, feedback):\n        self.experience_data.append(feedback)\n        # Analyze feedback and adjust future recommendations\n        self.user_preferences = adjust_preferences(self.user_preferences, feedback)\n```\n\n----------------------------------------\n\nTITLE: Implementing Metacognition in a Travel Agent AI (Python)\nDESCRIPTION: This code snippet demonstrates how to implement metacognition in a travel agent AI. The Travel_Agent class includes methods for gathering user preferences, retrieving information, generating recommendations, and adjusting based on feedback. The agent learns from past experiences and adapts its recommendations accordingly.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/09-metacognition/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        # Search for flights, hotels, and attractions based on preferences\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        itinerary = create_itinerary(flights, hotels, attractions)\n        return itinerary\n\n    def adjust_based_on_feedback(self, feedback):\n        self.experience_data.append(feedback)\n        # Analyze feedback and adjust future recommendations\n        self.user_preferences = adjust_preferences(self.user_preferences, feedback)\n\n# Example usage\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\ntravel_agent.adjust_based_on_feedback(feedback)\n```\n\n----------------------------------------\n\nTITLE: Multi-Agent Orchestration with Planning Agent in Python\nDESCRIPTION: This code implements a multi-agent orchestration system for travel planning. It defines agent types using Pydantic models and enums, creates a structure for travel subtasks, and uses Azure OpenAI services to process travel planning requests and route them to specialized agents.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/07-planning-design/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\n\nfrom enum import Enum\nfrom typing import List, Optional, Union\n\nclass AgentEnum(str, Enum):\n    FlightBooking = \"flight_booking\"\n    HotelBooking = \"hotel_booking\"\n    CarRental = \"car_rental\"\n    ActivitiesBooking = \"activities_booking\"\n    DestinationInfo = \"destination_info\"\n    DefaultAgent = \"default_agent\"\n    GroupChatManager = \"group_chat_manager\"\n\n# Travel SubTask Model\n\nclass TravelSubTask(BaseModel):\n    task_details: str\n    assigned_agent: AgentEnum # we want to assign the task to the agent\n\nclass TravelPlan(BaseModel):\n    main_task: str\n    subtasks: List[TravelSubTask]\n    is_greeting: bool\nimport json\nimport os\nfrom typing import Optional\n\nfrom autogen_core.models import UserMessage, SystemMessage, AssistantMessage\nfrom autogen_ext.models.openai import AzureOpenAIChatCompletionClient\n\n# Create the client with type-checked environment variables\n\nclient = AzureOpenAIChatCompletionClient(\n    azure_deployment=os.getenv(\"AZURE_OPENAI_DEPLOYMENT_NAME\"),\n    model=os.getenv(\"AZURE_OPENAI_DEPLOYMENT_NAME\"),\n    api_version=os.getenv(\"AZURE_OPENAI_API_VERSION\"),\n    azure_endpoint=os.getenv(\"AZURE_OPENAI_ENDPOINT\"),\n    api_key=os.getenv(\"AZURE_OPENAI_API_KEY\"),\n)\n\nfrom pprint import pprint\n\n# Define the user message\n\nmessages = [\n    SystemMessage(content=\"\"\"You are an planner agent.\n    Your job is to decide which agents to run based on the user's request.\n    Below are the available agents specialized in different tasks:\n    - FlightBooking: For booking flights and providing flight information\n    - HotelBooking: For booking hotels and providing hotel information\n    - CarRental: For booking cars and providing car rental information\n    - ActivitiesBooking: For booking activities and providing activity information\n    - DestinationInfo: For providing information about destinations\n    - DefaultAgent: For handling general requests\"\"\", source=\"system\"),\n    UserMessage(content=\"Create a travel plan for a family of 2 kids from Singapore to Melbourne\", source=\"user\"),\n]\n\nresponse = await client.create(messages=messages, extra_create_args={\"response_format\": TravelPlan})\n\n# Ensure the response content is a valid JSON string before loading it\n\nresponse_content: Optional[str] = response.content if isinstance(response.content, str) else None\nif response_content is None:\n    raise ValueError(\"Response content is not a valid JSON string\")\n```\n\n----------------------------------------\n\nTITLE: Generating Travel Recommendations with SQL Queries in Python\nDESCRIPTION: This function generates travel recommendations by creating and executing SQL queries for flights, hotels, and attractions based on user preferences. It combines the results into a comprehensive itinerary object containing all relevant travel options.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ndef generate_recommendations(preferences):\n    flight_query = generate_sql_query(\"flights\", preferences)\n    hotel_query = generate_sql_query(\"hotels\", preferences)\n    attraction_query = generate_sql_query(\"attractions\", preferences)\n    \n    flights = execute_sql_query(flight_query)\n    hotels = execute_sql_query(hotel_query)\n    attractions = execute_sql_query(attraction_query)\n    \n    itinerary = {\n        \"flights\": flights,\n        \"hotels\": hotels,\n        \"attractions\": attractions\n    }\n    return itinerary\n\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = generate_recommendations(preferences)\nprint(\"Suggested Itinerary:\", itinerary)\n```\n\n----------------------------------------\n\nTITLE: Implementing AI Agent with Azure AI Agent Service in Python\nDESCRIPTION: This code snippet demonstrates how to create an AI agent using Azure AI Agent Service. It initializes a client, defines a toolset with a custom function for fetching sales data and a code interpreter tool, and creates an agent with specified model and instructions.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ja/04-tool-use/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.ai.projects import AIProjectClient\nfrom azure.identity import DefaultAzureCredential\nfrom fecth_sales_data_functions import fetch_sales_data_using_sqlite_query # fetch_sales_data_using_sqlite_query function which can be found in a fetch_sales_data_functions.py file.\nfrom azure.ai.projects.models import ToolSet, FunctionTool, CodeInterpreterTool\n\nproject_client = AIProjectClient.from_connection_string(\n    credential=DefaultAzureCredential(),\n    conn_str=os.environ[\"PROJECT_CONNECTION_STRING\"],\n)\n\n# Initialize function calling agent with the fetch_sales_data_using_sqlite_query function and adding it to the toolset\nfetch_data_function = FunctionTool(fetch_sales_data_using_sqlite_query)\ntoolset = ToolSet()\ntoolset.add(fetch_data_function)\n\n# Initialize Code Interpreter tool and adding it to the toolset. \ncode_interpreter = code_interpreter = CodeInterpreterTool()\ntoolset = ToolSet()\ntoolset.add(code_interpreter)\n\nagent = project_client.agents.create_agent(\n    model=\"gpt-4o-mini\", name=\"my-agent\", instructions=\"You are helpful agent\", \n    toolset=toolset\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic SQL Queries Based on User Preferences in Python\nDESCRIPTION: This function generates SQL queries dynamically based on user preferences. It creates WHERE clauses from dictionary key-value pairs, allowing for flexible querying of travel databases with different filtering criteria.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndef generate_sql_query(table, preferences):\n    query = f\"SELECT * FROM {table} WHERE \"\n    conditions = []\n    for key, value in preferences.items():\n        conditions.append(f\"{key}='{value}'\")\n    query += \" AND \".join(conditions)\n    return query\n```\n\n----------------------------------------\n\nTITLE: Running the Travel Agent with Streaming Responses\nDESCRIPTION: Implements an asynchronous main function that creates a chat thread, processes user input, and streams agent responses in chunks. The example shows how to invoke the agent, handle the streaming response, and clean up the thread when finished.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/01-intro-to-ai-agents/code_samples/01-semantic-kernel.ipynb#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    # Create a new thread for the agent\n    # If no thread is provided, a new thread will be\n    # created and returned with the initial response\n    thread: ChatHistoryAgentThread | None = None\n\n    user_inputs = [\n        \"Plan me a day trip.\",\n    ]\n\n    for user_input in user_inputs:\n        print(f\"# User: {user_input}\\n\")\n        first_chunk = True\n        async for response in agent.invoke_stream(\n            messages=user_input, thread=thread,\n        ):\n            # 5. Print the response\n            if first_chunk:\n                print(f\"# {response.name}: \", end=\"\", flush=True)\n                first_chunk = False\n            print(f\"{response}\", end=\"\", flush=True)\n            thread = response.thread\n        print()\n\n    # Clean up the thread\n    await thread.delete() if thread else None\n\nawait main()\n```\n\n----------------------------------------\n\nTITLE: Generating Travel Recommendations Based on SQL Query Results\nDESCRIPTION: This function creates a complete travel itinerary by generating and executing SQL queries for flights, hotels, and attractions based on user preferences. It demonstrates the full travel recommendation workflow from user input to final output.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndef generate_recommendations(preferences):\n    flight_query = generate_sql_query(\"flights\", preferences)\n    hotel_query = generate_sql_query(\"hotels\", preferences)\n    attraction_query = generate_sql_query(\"attractions\", preferences)\n    \n    flights = execute_sql_query(flight_query)\n    hotels = execute_sql_query(hotel_query)\n    attractions = execute_sql_query(attraction_query)\n    \n    itinerary = {\n        \"flights\": flights,\n        \"hotels\": hotels,\n        \"attractions\": attractions\n    }\n    return itinerary\n\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = generate_recommendations(preferences)\nprint(\"Suggested Itinerary:\", itinerary)\n```\n\n----------------------------------------\n\nTITLE: Complete Travel Agent Class Implementation\nDESCRIPTION: Full implementation of the Travel Agent class with initialization, preference gathering, information retrieval, and feedback processing methods.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/hi/09-metacognition/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        itinerary = create_itinerary(flights, hotels, attractions)\n        return itinerary\n\n    def adjust_based_on_feedback(self, feedback):\n        self.experience_data.append(feedback)\n        self.user_preferences = adjust_preferences(self.user_preferences, feedback)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Travel Recommendation Relevance Using Python\nDESCRIPTION: This comprehensive Python code defines the Travel_Agent class and demonstrates methods for gathering user preferences, retrieving travel information, generating recommendations, and integrating user feedback. Key functions include filter_and_rank for relevance filtering and relevance_score for scoring. The class outputs a suggested itinerary and an updated version post-feedback. Dependencies on search functions for flight, hotel, and attraction data are assumed.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ko/09-metacognition/README.md#2025-04-18_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        ranked_hotels = self.filter_and_rank(hotels, self.user_preferences)\n        itinerary = create_itinerary(flights, ranked_hotels, attractions)\n        return itinerary\n\n    def filter_and_rank(self, items, query):\n        ranked_items = sorted(items, key=lambda item: self.relevance_score(item, query), reverse=True)\n        return ranked_items[:10]  # Return top 10 relevant items\n\n    def relevance_score(self, item, query):\n        score = 0\n        if item['category'] in query['interests']:\n            score += 1\n        if item['price'] <= query['budget']:\n            score += 1\n        if item['location'] == query['destination']:\n            score += 1\n        return score\n\n    def adjust_based_on_feedback(self, feedback, items):\n        for item in items:\n            if item['name'] in feedback['liked']:\n                item['relevance'] += 1\n            if item['name'] in feedback['disliked']:\n                item['relevance'] -= 1\n        return items\n\n# Example usage\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\nupdated_items = travel_agent.adjust_based_on_feedback(feedback, itinerary['hotels'])\nprint(\"Updated Itinerary with Feedback:\", updated_items)\n```\n\n----------------------------------------\n\nTITLE: Running the Travel Chat Agent with Async Streaming\nDESCRIPTION: This Python asynchronous function sets up and runs a streaming chat agent that handles user inputs by integrating them into an interactive chat history. It processes user messages, retrieves relevant contextual information, and utilizes a streaming mechanism to provide real-time responses. Key features include message formatting, function call handling, and streaming response display. Required imports include async/await capabilities and classes such as ChatHistoryAgentThread.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-semantic-kernel-chromadb.ipynb#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    thread: ChatHistoryAgentThread | None = None\n\n    user_inputs = [\n        \"Can you explain Contoso's travel insurance coverage?\",\n        \"What is the average temperature of the Maldives?\",\n        \"What is a good cold destination offered by Contoso and what is it average temperature?\",\n    ]\n\n    for user_input in user_inputs:\n        html_output = (\n            f\"<div style='margin-bottom:10px'>\"\n            f\"<div style='font-weight:bold'>User:</div>\"\n            f\"<div style='margin-left:20px'>{user_input}</div></div>\"\n        )\n\n        agent_name = None\n        full_response: list[str] = []\n        function_calls: list[str] = []\n\n        # Buffer to reconstruct streaming function call\n        current_function_name = None\n        argument_buffer = \"\"\n\n        async for response in agent.invoke_stream(\n            messages=user_input,\n            thread=thread,\n        ):\n            thread = response.thread\n            agent_name = response.name\n            content_items = list(response.items)\n\n            for item in content_items:\n                if isinstance(item, FunctionCallContent):\n                    if item.function_name:\n                        current_function_name = item.function_name\n\n                    # Accumulate arguments (streamed in chunks)\n                    if isinstance(item.arguments, str):\n                        argument_buffer += item.arguments\n                elif isinstance(item, FunctionResultContent):\n                    # Finalize any pending function call before showing result\n                    if current_function_name:\n                        formatted_args = argument_buffer.strip()\n                        try:\n                            parsed_args = json.loads(formatted_args)\n                            formatted_args = json.dumps(parsed_args)\n                        except Exception:\n                            pass  # leave as raw string\n\n                        function_calls.append(f\"Calling function: {current_function_name}({formatted_args})\")\n                        current_function_name = None\n                        argument_buffer = \"\"\n\n                    function_calls.append(f\"\\nFunction Result:\\n\\n{item.result}\")\n                elif isinstance(item, StreamingTextContent) and item.text:\n                    full_response.append(item.text)\n\n        if function_calls:\n            html_output += (\n                \"<div style='margin-bottom:10px'>\"\n                \"<details>\"\n                \"<summary style='cursor:pointer; font-weight:bold; color:#0066cc;'>Function Calls (click to expand)</summary>\"\n                \"<div style='margin:10px; padding:10px; background-color:#f8f8f8; \"\n                \"border:1px solid #ddd; border-radius:4px; white-space:pre-wrap; font-size:14px; color:#333;'>\"\n                f\"{chr(10).join(function_calls)}\"\n                \"</div></details></div>\"\n            )\n\n        html_output += (\n            \"<div style='margin-bottom:20px'>\"\n            f\"<div style='font-weight:bold'>{agent_name or 'Assistant'}:</div>\"\n            f\"<div style='margin-left:20px; white-space:pre-wrap'>{''.join(full_response)}</div></div><hr>\"\n        )\n\n        display(HTML(html_output))\n\nawait main()\n\n```\n\n----------------------------------------\n\nTITLE: Adjusting Travel Preferences Based on User Feedback in Python\nDESCRIPTION: Function that updates user preferences based on feedback about liked and disliked options. Includes code to regenerate and execute updated queries for flights and hotels, creating a refined itinerary.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef adjust_based_on_feedback(feedback, preferences):\n    # Adjust preferences based on user feedback\n    if \"liked\" in feedback:\n        preferences[\"favorites\"] = feedback[\"liked\"]\n    if \"disliked\" in feedback:\n        preferences[\"avoid\"] = feedback[\"disliked\"]\n    return preferences\n\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\nupdated_preferences = adjust_based_on_feedback(feedback, preferences)\n\n# Regenerate and execute code with updated preferences\nupdated_flight_code = generate_code_to_fetch_data(updated_preferences)\nupdated_hotel_code = generate_code_to_fetch_hotels(updated_preferences)\n\nupdated_flights = execute_code(updated_flight_code)\nupdated_hotels = execute_code(updated_hotel_code)\n\nupdated_itinerary = generate_itinerary(updated_flights, updated_hotels, attractions)\nprint(\"Updated Itinerary:\", updated_itinerary)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Chat Agent in Python with AutoGen\nDESCRIPTION: Demonstrates how to create a custom assistant agent with chat capabilities by extending the RoutedAgent class. The agent uses OpenAI's GPT-4 model for chat completions and includes message handling functionality.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom autogen_agentchat.agents import AssistantAgent\nfrom autogen_agentchat.messages import TextMessage\nfrom autogen_ext.models.openai import OpenAIChatCompletionClient\n\n\nclass MyAssistant(RoutedAgent):\n    def __init__(self, name: str) -> None:\n        super().__init__(name)\n        model_client = OpenAIChatCompletionClient(model=\"gpt-4o\")\n        self._delegate = AssistantAgent(name, model_client=model_client)\n\n    @message_handler\n    async def handle_my_message_type(self, message: MyMessageType, ctx: MessageContext) -> None:\n        print(f\"{self.id.type} received message: {message.content}\")\n        response = await self._delegate.on_messages(\n            [TextMessage(content=message.content, source=\"user\")], ctx.cancellation_token\n        )\n        print(f\"{self.id.type} responded: {response.chat_message.content}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Streaming Agent Handler in Python\nDESCRIPTION: Asynchronous implementation of a conversation agent that processes user queries, makes function calls for retrieving travel information, and streams responses. Includes HTML formatting for output display and handles function calls with argument streaming.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-semantic-kernel-azuresearch.ipynb#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    thread: ChatHistoryAgentThread | None = None\n\n    user_inputs = [\n        \"Can you explain Contoso's travel insurance coverage?\",\n        \"What is the average temperature of the Maldives?\",\n        \"What is a good cold destination offered by Contoso and what is it average temperature?\",\n    ]\n\n    for user_input in user_inputs:\n        html_output = (\n            f\"<div style='margin-bottom:10px'>\"\n            f\"<div style='font-weight:bold'>User:</div>\"\n            f\"<div style='margin-left:20px'>{user_input}</div></div>\"\n        )\n\n        agent_name = None\n        full_response: list[str] = []\n        function_calls: list[str] = []\n\n        # Buffer to reconstruct streaming function call\n        current_function_name = None\n        argument_buffer = \"\"\n\n        async for response in agent.invoke_stream(\n            messages=user_input,\n            thread=thread,\n        ):\n            thread = response.thread\n            agent_name = response.name\n            content_items = list(response.items)\n\n            for item in content_items:\n                if isinstance(item, FunctionCallContent):\n                    if item.function_name:\n                        current_function_name = item.function_name\n\n                    # Accumulate arguments (streamed in chunks)\n                    if isinstance(item.arguments, str):\n                        argument_buffer += item.arguments\n                elif isinstance(item, FunctionResultContent):\n                    # Finalize any pending function call before showing result\n                    if current_function_name:\n                        formatted_args = argument_buffer.strip()\n                        try:\n                            parsed_args = json.loads(formatted_args)\n                            formatted_args = json.dumps(parsed_args)\n                        except Exception:\n                            pass  # leave as raw string\n\n                        function_calls.append(f\"Calling function: {current_function_name}({formatted_args})\")\n                        current_function_name = None\n                        argument_buffer = \"\"\n\n                    function_calls.append(f\"\\nFunction Result:\\n\\n{item.result}\")\n                elif isinstance(item, StreamingTextContent) and item.text:\n                    full_response.append(item.text)\n\n        if function_calls:\n            html_output += (\n                \"<div style='margin-bottom:10px'>\"\n                \"<details>\"\n                \"<summary style='cursor:pointer; font-weight:bold; color:#0066cc;'>Function Calls (click to expand)</summary>\"\n                \"<div style='margin:10px; padding:10px; background-color:#f8f8f8; \"\n                \"border:1px solid #ddd; border-radius:4px; white-space:pre-wrap; font-size:14px; color:#333;'>\"\n                f\"{chr(10).join(function_calls)}\"\n                \"</div></details></div>\"\n            )\n\n        html_output += (\n            \"<div style='margin-bottom:20px'>\"\n            f\"<div style='font-weight:bold'>{agent_name or 'Assistant'}:</div>\"\n            f\"<div style='margin-left:20px; white-space:pre-wrap'>{''.join(full_response)}</div></div><hr>\"\n        )\n\n        display(HTML(html_output))\n\nawait main()\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Agent Travel Planning Orchestration in Python\nDESCRIPTION: Defines the core structure for a travel planning system using Pydantic models and Azure OpenAI integration. Includes agent type definitions and task models for organizing travel-related activities.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/07-planning-design/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\nfrom enum import Enum\nfrom typing import List, Optional, Union\n\nclass AgentEnum(str, Enum):\n    FlightBooking = \"flight_booking\"\n    HotelBooking = \"hotel_booking\"\n    CarRental = \"car_rental\"\n    ActivitiesBooking = \"activities_booking\"\n    DestinationInfo = \"destination_info\"\n    DefaultAgent = \"default_agent\"\n    GroupChatManager = \"group_chat_manager\"\n\nclass TravelSubTask(BaseModel):\n    task_details: str\n    assigned_agent: AgentEnum\n\nclass TravelPlan(BaseModel):\n    main_task: str\n    subtasks: List[TravelSubTask]\n    is_greeting: bool\n\nimport json\nimport os\nfrom typing import Optional\nfrom autogen_core.models import UserMessage, SystemMessage, AssistantMessage\nfrom autogen_ext.models.openai import AzureOpenAIChatCompletionClient\n\nclient = AzureOpenAIChatCompletionClient(\n    azure_deployment=os.getenv(\"AZURE_OPENAI_DEPLOYMENT_NAME\"),\n    model=os.getenv(\"AZURE_OPENAI_DEPLOYMENT_NAME\"),\n    api_version=os.getenv(\"AZURE_OPENAI_API_VERSION\"),\n    azure_endpoint=os.getenv(\"AZURE_OPENAI_ENDPOINT\"),\n    api_key=os.getenv(\"AZURE_OPENAI_API_KEY\"),\n)\n\nfrom pprint import pprint\n```\n\n----------------------------------------\n\nTITLE: Defining Agent and Task Models for Travel Planning\nDESCRIPTION: Basic model definitions for travel planning system including agent types and task structures using Pydantic for validation.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/07-planning-design/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\nfrom enum import Enum\nfrom typing import List, Optional, Union\n\nclass AgentEnum(str, Enum):\n    FlightBooking = \"flight_booking\"\n    HotelBooking = \"hotel_booking\"\n    CarRental = \"car_rental\"\n    ActivitiesBooking = \"activities_booking\"\n    DestinationInfo = \"destination_info\"\n    DefaultAgent = \"default_agent\"\n    GroupChatManager = \"group_chat_manager\"\n\nclass TravelSubTask(BaseModel):\n    task_details: str\n    assigned_agent: AgentEnum\n\nclass TravelPlan(BaseModel):\n    main_task: str\n    subtasks: List[TravelSubTask]\n    is_greeting: bool\n```\n\n----------------------------------------\n\nTITLE: Creating a Travel Agent with Semantic Kernel\nDESCRIPTION: Defines and initializes a ChatCompletionAgent for travel planning. Sets up the agent with a name, detailed instructions on behavior, and registers the DestinationsPlugin for access to travel information functions.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/code_samples/09-semantic-kernel.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAGENT_NAME = \"TravelAgent\"\nAGENT_INSTRUCTIONS = \"\"\" \\\n\"You are Flight Booking Agent that provides information about available flights and gives travel activity suggestiosn when asked.\nTravel activity suggestions should be specific to customer, location and amount of time at location.\n\nYou have access to the following tools to help users plan their trips:\n1. get_destinations: Returns a list of available vacation destinations that users can choose from.\n2. get_flight_times: Provides available flight times for specific destinations.\n\n\nYour process for assisting users:\n- When users first inquire about flight booking with no prior history, ask for their preferred flight time ONCE.\n- MAINTAIN a customer_preferences object throughout the conversation to track preferred flight times.\n- When a user books a flight to any destination, RECORD their chosen flight time in the customer_preferences object.\n- For ALL subsequent flight inquiries to ANY destination, AUTOMATICALLY apply their existing preferred flight time without asking.\n- NEVER ask about time preferences again after they've been established for any destination.\n- When suggesting flights for a new destination, explicitly say: \"Based on your previous preference for [time] flights, I recommend...\"\n- Only after showing options matching their preferred time, ask if they want to see alternative times.\n- After each booking, UPDATE the customer_preferences object with any new information.\n- ALWAYS mention which specific preference you used when making a suggestion.\n\nGuidelines:\n- Use the exact destination names when using tools (Barcelona, Paris, Berlin, Tokyo, New York)\n- Respond in a helpful and enthusiastic manner about travel possibilities\n- Always seek feedback to ensure your suggestions meet the user's expectations\n- Acknowledge when a request falls outside your capabilities\n- For better formatting, always display flight times in a list format\n- When giving any timed suggestions, reflect if the time frames are reasonable. Respond again if not.\n\nYour goal is to help users explore vacation options efficiently and make informed travel decisions by understanding their preferences and providing tailored recommendations.\n\"\"\"\n# Create the agent\nagent = ChatCompletionAgent(\n    service=chat_completion_service,\n    plugins=[DestinationsPlugin()],\n    name=AGENT_NAME,\n    instructions=AGENT_INSTRUCTIONS,\n)\n```\n\n----------------------------------------\n\nTITLE: Regenerating Itineraries Based on User Feedback in Python\nDESCRIPTION: This code snippet demonstrates how to regenerate travel itineraries based on updated user preferences. It generates new code to fetch flight and hotel data, executes these code snippets, and creates an updated itinerary incorporating liked elements from previous feedback.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n# Regenerate and execute code with updated preferences\nupdated_flight_code = generate_code_to_fetch_data(updated_preferences)\nupdated_hotel_code = generate_code_to_fetch_hotels(updated_preferences)\n\nupdated_flights = execute_code(updated_flight_code)\nupdated_hotels = execute_code(updated_hotel_code)\n\nupdated_itinerary = generate_itinerary(updated_flights, updated_hotels, feedback[\"liked\"])\nprint(\"Updated Itinerary:\", updated_itinerary)\n```\n\n----------------------------------------\n\nTITLE: Generating Travel Itinerary in Python\nDESCRIPTION: Function that compiles flight, hotel, and attraction data into a comprehensive travel itinerary. Demonstrates how to search for attractions and generate a complete itinerary object.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef generate_itinerary(flights, hotels, attractions):\n    itinerary = {\n        \"flights\": flights,\n        \"hotels\": hotels,\n        \"attractions\": attractions\n    }\n    return itinerary\n\nattractions = search_attractions(preferences)\nitinerary = generate_itinerary(flights, hotels, attractions)\nprint(\"Suggested Itinerary:\", itinerary)\n```\n\n----------------------------------------\n\nTITLE: Travel Agent Class Implementation\nDESCRIPTION: Core implementation of the Travel Agent class containing methods for gathering preferences, retrieving information, generating recommendations, and adjusting based on user feedback. Includes initialization of user preferences and experience data storage.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        itinerary = create_itinerary(flights, hotels, attractions)\n        return itinerary\n\n    def adjust_based_on_feedback(self, feedback):\n        self.experience_data.append(feedback)\n        self.user_preferences = adjust_preferences(self.user_preferences, feedback)\n```\n\n----------------------------------------\n\nTITLE: Initializing Travel Planning Models with Pydantic and Azure AI\nDESCRIPTION: Sets up core data models and Azure AI client for a travel planning system, including task decomposition and agent assignment using Pydantic models. Implements agent communication using Azure's AI completion client with structured outputs.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fr/07-planning-design/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\nfrom enum import Enum\nfrom typing import List, Optional, Union\nimport json\nimport os\nfrom typing import Optional\nfrom pprint import pprint\nfrom autogen_core.models import UserMessage, SystemMessage, AssistantMessage\nfrom autogen_ext.models.azure import AzureAIChatCompletionClient\nfrom azure.core.credentials import AzureKeyCredential\n\nclass AgentEnum(str, Enum):\n    FlightBooking = \"flight_booking\"\n    HotelBooking = \"hotel_booking\"\n    CarRental = \"car_rental\"\n    ActivitiesBooking = \"activities_booking\"\n    DestinationInfo = \"destination_info\"\n    DefaultAgent = \"default_agent\"\n    GroupChatManager = \"group_chat_manager\"\n\nclass TravelSubTask(BaseModel):\n    task_details: str\n    assigned_agent: AgentEnum\n\nclass TravelPlan(BaseModel):\n    main_task: str\n    subtasks: List[TravelSubTask]\n    is_greeting: bool\n\nclient = AzureAIChatCompletionClient(\n    model=\"gpt-4o-mini\",\n    endpoint=\"https://models.inference.ai.azure.com\",\n    credential=AzureKeyCredential(os.environ[\"GITHUB_TOKEN\"]),\n    model_info={\n        \"json_output\": False,\n        \"function_calling\": True,\n        \"vision\": True,\n        \"family\": \"unknown\",\n    },\n)\n\nmessages = [\n    SystemMessage(content=\"\"\"You are an planner agent.\n    Your job is to decide which agents to run based on the user's request.\n                      Provide your response in JSON format with the following structure:\n{'main_task': 'Plan a family trip from Singapore to Melbourne.',\n 'subtasks': [{'assigned_agent': 'flight_booking',\n               'task_details': 'Book round-trip flights from Singapore to '\n                               'Melbourne.'}]\"\"\", source=\"system\"),\n    UserMessage(\n        content=\"Create a travel plan for a family of 2 kids from Singapore to Melboune\", source=\"user\"),\n]\n\nresponse = await client.create(messages=messages, extra_create_args={\"response_format\": 'json_object'})\n\nresponse_content: Optional[str] = response.content if isinstance(\n    response.content, str) else None\nif response_content is None:\n    raise ValueError(\"Response content is not a valid JSON string\" )\n\npprint(json.loads(response_content))\n```\n\n----------------------------------------\n\nTITLE: Generating Code to Fetch Travel Data in Python\nDESCRIPTION: Functions that dynamically generate Python code for fetching flight and hotel data based on user preferences. These functions return code strings that can be executed at runtime.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef generate_code_to_fetch_data(preferences):\n    # Example: Generate code to search for flights based on user preferences\n    code = f\"\"\"\n    def search_flights():\n        import requests\n        response = requests.get('https://api.example.com/flights', params={preferences})\n        return response.json()\n    \"\"\"\n    return code\n\ndef generate_code_to_fetch_hotels(preferences):\n    # Example: Generate code to search for hotels\n    code = f\"\"\"\n    def search_hotels():\n        import requests\n        response = requests.get('https://api.example.com/hotels', params={preferences})\n        return response.json()\n    \"\"\"\n    return code\n```\n\n----------------------------------------\n\nTITLE: Running the Assistant Agent with a Vacation Planning Query\nDESCRIPTION: Defines and executes an async function that sends a user query about vacation planning to the agent and displays the formatted response using IPython HTML. The function demonstrates how to update an agent's state with a new message.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/code_samples/02-autogen.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\n\nasync def assistant_run():\n    # Define the query\n    user_query = \"Plan me a great sunny vacation\"\n\n    # Start building HTML output\n    html_output = \"<div style='margin-bottom:10px'>\"\n    html_output += \"<div style='font-weight:bold'>User:</div>\"\n    html_output += f\"<div style='margin-left:20px'>{user_query}</div>\"\n    html_output += \"</div>\"\n\n    # Execute the agent response\n    response = await agent.on_messages(\n        [TextMessage(content=user_query, source=\"user\")],\n        cancellation_token=CancellationToken(),\n    )\n\n    # Add agent response to HTML\n    html_output += \"<div style='margin-bottom:20px'>\"\n    html_output += \"<div style='font-weight:bold'>Assistant:</div>\"\n    html_output += f\"<div style='margin-left:20px; white-space:pre-wrap'>{response.chat_message.content}</div>\"\n    html_output += \"</div>\"\n\n    # Display formatted HTML\n    display(HTML(html_output))\n\n# Run the function\nawait assistant_run()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Travel Agent Class in Python\nDESCRIPTION: This code defines a Travel_Agent class that handles gathering user preferences, retrieving travel information, generating recommendations, and adjusting based on feedback. The example demonstrates how to use the class with specific travel preferences for Paris.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        itinerary = create_itinerary(flights, hotels, attractions)\n        return itinerary\n\n    def adjust_based_on_feedback(self, feedback):\n        self.experience_data.append(feedback)\n        self.user_preferences = adjust_preferences(self.user_preferences, feedback)\n\n# Example usage within a booing request\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\ntravel_agent.adjust_based_on_feedback(feedback)\n```\n\n----------------------------------------\n\nTITLE: Implementing Corrective RAG in a Travel Agent\nDESCRIPTION: This code extends the Travel_Agent class with a Corrective RAG (Retrieval-Augmented Generation) approach. It adds functionality to adjust preferences based on user feedback and generate updated recommendations accordingly.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        itinerary = create_itinerary(flights, hotels, attractions)\n        return itinerary\n\n    def adjust_based_on_feedback(self, feedback):\n        self.experience_data.append(feedback)\n        self.user_preferences = adjust_preferences(self.user_preferences, feedback)\n        new_itinerary = self.generate_recommendations()\n        return new_itinerary\n```\n\n----------------------------------------\n\nTITLE: Configuring Chat Completion Agent in Python\nDESCRIPTION: This Python snippet demonstrates the configuration of a chat completion agent using several plugins, including DestinationsPlugin, WeatherInfoPlugin, and a PromptPlugin that utilizes the created collection. The agent is named 'TravelAgent' and is instructed to handle travel-related queries using contextual data from the collection. Dependencies include ChatCompletionAgent and plugin implementations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-semantic-kernel-chromadb.ipynb#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nagent = ChatCompletionAgent(\n    service=chat_completion_service,\n    plugins=[DestinationsPlugin(), WeatherInfoPlugin(), PromptPlugin(collection)],\n    name=\"TravelAgent\",\n    instructions=\"Answer travel queries using the provided context. If context is provided, do not say 'I have no context for that.'\",\n)\n```\n\n----------------------------------------\n\nTITLE: Iterative Planning Implementation in Python\nDESCRIPTION: Shows how to implement iterative planning capability by incorporating user feedback and previous travel plans into the agent system for replanning.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/07-planning-design/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom autogen_core.models import UserMessage, SystemMessage, AssistantMessage\n#.. same as previous code and pass on the user history, current plan\nmessages = [\n    SystemMessage(content=\"\"\"You are a planner agent to optimize the\n    Your job is to decide which agents to run based on the user's request.\n    Below are the available agents specialized in different tasks:\n    - FlightBooking: For booking flights and providing flight information\n    - HotelBooking: For booking hotels and providing hotel information\n    - CarRental: For booking cars and providing car rental information\n    - ActivitiesBooking: For booking activities and providing activity information\n    - DestinationInfo: For providing information about destinations\n    - DefaultAgent: For handling general requests\"\"\", source=\"system\"),\n    UserMessage(content=\"Create a travel plan for a family of 2 kids from Singapore to Melbourne\", source=\"user\"),\n    AssistantMessage(content=f\"Previous travel plan - {TravelPlan}\", source=\"assistant\")\n]\n# .. re-plan and send the tasks to respective agents\n```\n\n----------------------------------------\n\nTITLE: Travel Agent Class Implementation\nDESCRIPTION: Defines the Travel_Agent class with methods for handling user preferences, retrieving travel information, generating recommendations and processing feedback.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fr/09-metacognition/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        itinerary = create_itinerary(flights, hotels, attractions)\n        return itinerary\n\n    def adjust_based_on_feedback(self, feedback):\n        self.experience_data.append(feedback)\n        self.user_preferences = adjust_preferences(self.user_preferences, feedback)\n```\n\n----------------------------------------\n\nTITLE: Initializing Travel Agent and Gathering Preferences in Python\nDESCRIPTION: This snippet demonstrates the initialization of a Travel_Agent class and the gathering of user preferences. It includes setting up the agent, defining user preferences, and generating initial recommendations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fr/09-metacognition/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Example usage within a booing request\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\ntravel_agent.adjust_based_on_feedback(feedback)\n```\n\n----------------------------------------\n\nTITLE: Travel Agent Class Implementation in Python\nDESCRIPTION: Defines a Travel Agent class with methods for gathering preferences, retrieving travel information, generating recommendations and adjusting based on feedback.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/de/09-metacognition/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        itinerary = create_itinerary(flights, hotels, attractions)\n        return itinerary\n\n    def adjust_based_on_feedback(self, feedback):\n        self.experience_data.append(feedback)\n        self.user_preferences = adjust_preferences(self.user_preferences, feedback)\n```\n\n----------------------------------------\n\nTITLE: Adjusting Recommendations Based on User Feedback in Python\nDESCRIPTION: This snippet showcases how the travel agent adjusts the generated itinerary based on user feedback. The feedback, which indicates what the user liked and disliked, is processed to refine future recommendations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\ntravel_agent.adjust_based_on_feedback(feedback)\n```\n\n----------------------------------------\n\nTITLE: Using Azure OpenAI for Travel Destination Recommendations in Python\nDESCRIPTION: This snippet extends the TravelAgent class to include a method for retrieving recommendations based on user preferences using the Azure OpenAI API. It involves generating a prompt for the API and processing the response to extract ranked and scored recommendations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nimport requests\nimport json\n\nclass TravelAgent:\n    def __init__(self, destinations):\n        self.destinations = destinations\n\n    def get_recommendations(self, preferences, api_key, endpoint):\n        # Generate a prompt for the Azure OpenAI\n        prompt = self.generate_prompt(preferences)\n        \n        # Define headers and payload for the request\n        headers = {\n            'Content-Type': 'application/json',\n            'Authorization': f'Bearer {api_key}'\n        }\n        payload = {\n            \"prompt\": prompt,\n            \"max_tokens\": 150,\n            \"temperature\": 0.7\n        }\n        \n        # Call the Azure OpenAI API to get the re-ranked and scored destinations\n        response = requests.post(endpoint, headers=headers, json=payload)\n        response_data = response.json()\n        \n        # Extract and return the recommendations\n        recommendations = response_data['choices'][0]['text'].strip().split('\\n')\n        return recommendations\n\n    def generate_prompt(self, preferences):\n        prompt = \"Here are the travel destinations ranked and scored based on the following user preferences:\\n\"\n        for key, value in preferences.items():\n            prompt += f\"{key}: {value}\\n\"\n        prompt += \"\\nDestinations:\\n\"\n        for destination in self.destinations:\n            prompt += f\"- {destination['name']}: {destination['description']}\\n\"\n        return prompt\n```\n\n----------------------------------------\n\nTITLE: Defining Travel Planning Data Models\nDESCRIPTION: Implements the core data models for travel planning using Pydantic, including agent enumeration and task structures. These models define the structure for travel subtasks and overall travel plans.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fr/07-planning-design/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\nfrom enum import Enum\nfrom typing import List, Optional, Union\n\nclass AgentEnum(str, Enum):\n    FlightBooking = \"flight_booking\"\n    HotelBooking = \"hotel_booking\"\n    CarRental = \"car_rental\"\n    ActivitiesBooking = \"activities_booking\"\n    DestinationInfo = \"destination_info\"\n    DefaultAgent = \"default_agent\"\n    GroupChatManager = \"group_chat_manager\"\n\nclass TravelSubTask(BaseModel):\n    task_details: str\n    assigned_agent: AgentEnum\n\nclass TravelPlan(BaseModel):\n    main_task: str\n    subtasks: List[TravelSubTask]\n    is_greeting: bool\n```\n\n----------------------------------------\n\nTITLE: Multi-Agent Travel Planning Coordinator - Python\nDESCRIPTION: Implements a travel planning coordinator that processes user requests, assigns tasks to specialized agents, and manages inter-agent communication.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fa/07-planning-design/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\nfrom enum import Enum\nfrom typing import List, Optional, Union\n\nclass AgentEnum(str, Enum):\n    FlightBooking = \"flight_booking\"\n    HotelBooking = \"hotel_booking\"\n    CarRental = \"car_rental\"\n    ActivitiesBooking = \"activities_booking\"\n    DestinationInfo = \"destination_info\"\n    DefaultAgent = \"default_agent\"\n    GroupChatManager = \"group_chat_manager\"\n\nclass TravelSubTask(BaseModel):\n    task_details: str\n    assigned_agent: AgentEnum\n\nclass TravelPlan(BaseModel):\n    main_task: str\n    subtasks: List[TravelSubTask]\n    is_greeting: bool\n\nclient = AzureOpenAIChatCompletionClient(\n    azure_deployment=os.getenv(\"AZURE_OPENAI_DEPLOYMENT_NAME\"),\n    model=os.getenv(\"AZURE_OPENAI_DEPLOYMENT_NAME\"),\n    api_version=os.getenv(\"AZURE_OPENAI_API_VERSION\"),\n    azure_endpoint=os.getenv(\"AZURE_OPENAI_ENDPOINT\"),\n    api_key=os.getenv(\"AZURE_OPENAI_API_KEY\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Iterative Planning with AutoGen\nDESCRIPTION: Example code showing how to implement iterative planning using AutoGen's messaging system, including system, user and assistant messages for dynamic task replanning.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/07-planning-design/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom autogen_core.models import UserMessage, SystemMessage, AssistantMessage\n#.. same as previous code and pass on the user history, current plan\nmessages = [\n    SystemMessage(content=\"\"\"You are a planner agent to optimize the\n    Your job is to decide which agents to run based on the user's request.\n    Below are the available agents specialized in different tasks:\n    - FlightBooking: For booking flights and providing flight information\n    - HotelBooking: For booking hotels and providing hotel information\n    - CarRental: For booking cars and providing car rental information\n    - ActivitiesBooking: For booking activities and providing activity information\n    - DestinationInfo: For providing information about destinations\n    - DefaultAgent: For handling general requests\"\"\", source=\"system\"),\n    UserMessage(content=\"Create a travel plan for a family of 2 kids from Singapore to Melbourne\", source=\"user\"),\n    AssistantMessage(content=f\"Previous travel plan - {TravelPlan}\", source=\"assistant\")\n]\n# .. re-plan and send the tasks to respective agents\n```\n\n----------------------------------------\n\nTITLE: Travel Plan Bootstrapping with Goal-Oriented Iteration\nDESCRIPTION: Implements a travel agent that creates and refines travel plans based on user preferences, budget, and goals\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass TravelAgent:\n    def __init__(self, destinations):\n        self.destinations = destinations\n\n    def bootstrap_plan(self, preferences, budget):\n        plan = []\n        total_cost = 0\n\n        for destination in self.destinations:\n            if total_cost + destination['cost'] <= budget and self.match_preferences(destination, preferences):\n                plan.append(destination)\n                total_cost += destination['cost']\n\n        return plan\n```\n\n----------------------------------------\n\nTITLE: Implementing Travel Agent Class in Python\nDESCRIPTION: Defines a Travel_Agent class with methods for gathering preferences, generating recommendations, and adjusting based on feedback. The class uses pre-defined methods for searching flights, hotels, and attractions.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/hk/09-metacognition/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Example usage\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\nnew_itinerary = travel_agent.adjust_based_on_feedback(feedback)\nprint(\"Updated Itinerary:\", new_itinerary)\n```\n\n----------------------------------------\n\nTITLE: Implementing TravelAgent with Azure OpenAI Integration in Python\nDESCRIPTION: This snippet shows an advanced TravelAgent class that uses Azure OpenAI Services for re-ranking and scoring travel destinations based on user preferences. It includes methods for generating prompts and making API calls to Azure OpenAI.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/09-metacognition/README.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nclass TravelAgent:\n    def __init__(self, destinations):\n        self.destinations = destinations\n\n    def get_recommendations(self, preferences, api_key, endpoint):\n        # Generate a prompt for the Azure OpenAI\n        prompt = self.generate_prompt(preferences)\n        \n        # Define headers and payload for the request\n        headers = {\n            'Content-Type': 'application/json',\n            'Authorization': f'Bearer {api_key}'\n        }\n        payload = {\n            \"prompt\": prompt,\n            \"max_tokens\": 150,\n            \"temperature\": 0.7\n        }\n        \n        # Call the Azure OpenAI API to get the re-ranked and scored destinations\n        response = requests.post(endpoint, headers=headers, json=payload)\n        response_data = response.json()\n        \n        # Extract and return the recommendations\n        recommendations = response_data['choices'][0]['text'].strip().split('\\n')\n        return recommendations\n\n    def generate_prompt(self, preferences):\n        prompt = \"Here are the travel destinations ranked and scored based on the following user preferences:\\n\"\n        for key, value in preferences.items():\n            prompt += f\"{key}: {value}\\n\"\n        prompt += \"\\nDestinations:\\n\"\n        for destination in self.destinations:\n            prompt += f\"- {destination['name']}: {destination['description']}\\n\"\n        return prompt\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG as a Tool for Museum Search in Python\nDESCRIPTION: This snippet shows RAG (Retrieval Augmented Generation) implemented as a tool within a Travel_Agent class. It uses a RAGTool component to automatically handle the retrieval and generation process for museum information in Paris.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.rag_tool = RAGTool()\n\n    def get_museums_in_paris(self):\n        user_input = \"I want to visit museums in Paris.\"\n        response = self.rag_tool.retrieve_and_generate(user_input)\n        return response\n\ntravel_agent = Travel_Agent()\nmuseums = travel_agent.get_museums_in_paris()\nprint(\"Top Museums in Paris:\", museums)\n```\n\n----------------------------------------\n\nTITLE: Implementing TravelAgent Class with Preference Matching in Python\nDESCRIPTION: This snippet defines a TravelAgent class with methods for bootstrapping a travel plan, matching preferences, and iterating to refine the plan based on client preferences and budget constraints.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/09-metacognition/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass TravelAgent:\n    def __init__(self, destinations):\n        self.destinations = destinations\n\n    def bootstrap_plan(self, preferences, budget):\n        plan = []\n        total_cost = 0\n\n        for destination in self.destinations:\n            if total_cost + destination['cost'] <= budget and self.match_preferences(destination, preferences):\n                plan.append(destination)\n                total_cost += destination['cost']\n\n        return plan\n\n    def match_preferences(self, destination, preferences):\n        for key, value in preferences.items():\n            if destination.get(key) != value:\n                return False\n        return True\n\n    def iterate_plan(self, plan, preferences, budget):\n        for i in range(len(plan)):\n            for destination in self.destinations:\n                if destination not in plan and self.match_preferences(destination, preferences) and self.calculate_cost(plan, destination) <= budget:\n                    plan[i] = destination\n                    break\n        return plan\n\n    def calculate_cost(self, plan, new_destination):\n        return sum(destination['cost'] for destination in plan) + new_destination['cost']\n\n# Example usage\ndestinations = [\n    {\"name\": \"Paris\", \"cost\": 1000, \"activity\": \"sightseeing\"},\n    {\"name\": \"Tokyo\", \"cost\": 1200, \"activity\": \"shopping\"},\n    {\"name\": \"New York\", \"cost\": 900, \"activity\": \"sightseeing\"},\n    {\"name\": \"Sydney\", \"cost\": 1100, \"activity\": \"beach\"},\n]\n\npreferences = {\"activity\": \"sightseeing\"}\nbudget = 2000\n\ntravel_agent = TravelAgent(destinations)\ninitial_plan = travel_agent.bootstrap_plan(preferences, budget)\nprint(\"Initial Plan:\", initial_plan)\n\nrefined_plan = travel_agent.iterate_plan(initial_plan, preferences, budget)\nprint(\"Refined Plan:\", refined_plan)\n```\n\n----------------------------------------\n\nTITLE: Generating Travel Recommendations in Python\nDESCRIPTION: This method generates travel recommendations by retrieving information, filtering and ranking hotels, and creating an itinerary. It uses helper methods to process the data and return a final itinerary.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\ndef generate_recommendations(self):\n    flights, hotels, attractions = self.retrieve_information()\n    ranked_hotels = self.filter_and_rank(hotels, self.user_preferences)\n    itinerary = create_itinerary(flights, ranked_hotels, attractions)\n    return itinerary\n```\n\n----------------------------------------\n\nTITLE: Implementing a Metacognitive Hotel Recommendation Agent in Python\nDESCRIPTION: A class that demonstrates metacognition in AI by recommending hotels and then reflecting on its own choices. The agent can adjust its strategy based on feedback, switching between prioritizing price and quality to improve recommendations over time.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fr/09-metacognition/README.md#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass HotelRecommendationAgent:\n    def __init__(self):\n        self.previous_choices = []  # Stores the hotels chosen previously\n        self.corrected_choices = []  # Stores the corrected choices\n        self.recommendation_strategies = ['cheapest', 'highest_quality']  # Available strategies\n\n    def recommend_hotel(self, hotels, strategy):\n        \"\"\"\n        Recommend a hotel based on the chosen strategy.\n        The strategy can either be 'cheapest' or 'highest_quality'.\n        \"\"\"\n        if strategy == 'cheapest':\n            recommended = min(hotels, key=lambda x: x['price'])\n        elif strategy == 'highest_quality':\n            recommended = max(hotels, key=lambda x: x['quality'])\n        else:\n            recommended = None\n        self.previous_choices.append((strategy, recommended))\n        return recommended\n\n    def reflect_on_choice(self):\n        \"\"\"\n        Reflect on the last choice made and decide if the agent should adjust its strategy.\n        The agent considers if the previous choice led to a poor outcome.\n        \"\"\"\n        if not self.previous_choices:\n            return \"No choices made yet.\"\n\n        last_choice_strategy, last_choice = self.previous_choices[-1]\n        # Let's assume we have some user feedback that tells us whether the last choice was good or not\n        user_feedback = self.get_user_feedback(last_choice)\n\n        if user_feedback == \"bad\":\n            # Adjust strategy if the previous choice was unsatisfactory\n            new_strategy = 'highest_quality' if last_choice_strategy == 'cheapest' else 'cheapest'\n            self.corrected_choices.append((new_strategy, last_choice))\n            return f\"Reflecting on choice. Adjusting strategy to {new_strategy}.\"\n        else:\n            return \"The choice was good. No need to adjust.\"\n\n    def get_user_feedback(self, hotel):\n        \"\"\"\n        Simulate user feedback based on hotel attributes.\n        For simplicity, assume if the hotel is too cheap, the feedback is \"bad\".\n        If the hotel has quality less than 7, feedback is \"bad\".\n        \"\"\"\n        if hotel['price'] < 100 or hotel['quality'] < 7:\n            return \"bad\"\n        return \"good\"\n\n# Simulate a list of hotels (price and quality)\nhotels = [\n    {'name': 'Budget Inn', 'price': 80, 'quality': 6},\n    {'name': 'Comfort Suites', 'price': 120, 'quality': 8},\n    {'name': 'Luxury Stay', 'price': 200, 'quality': 9}\n]\n\n# Create an agent\nagent = HotelRecommendationAgent()\n\n# Step 1: The agent recommends a hotel using the \"cheapest\" strategy\nrecommended_hotel = agent.recommend_hotel(hotels, 'cheapest')\nprint(f\"Recommended hotel (cheapest): {recommended_hotel['name']}\")\n```\n\n----------------------------------------\n\nTITLE: Generating and Refining Travel Itineraries with Python\nDESCRIPTION: This snippet demonstrates the basic usage of a Travel_Agent class to generate travel recommendations based on user preferences and adjust the itinerary based on feedback. It showcases how to interact with the travel agent system to create personalized travel plans.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Example usage\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\nnew_itinerary = travel_agent.adjust_based_on_feedback(feedback)\nprint(\"Updated Itinerary:\", new_itinerary)\n```\n\n----------------------------------------\n\nTITLE: Generating Travel Recommendations with SQL Queries in Python\nDESCRIPTION: This function generates travel recommendations by creating and executing SQL queries for flights, hotels, and attractions based on user preferences. It demonstrates how SQL can be used as part of a Retrieval-Augmented Generation (RAG) approach in a travel agent context.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndef generate_recommendations(preferences):\n    flight_query = generate_sql_query(\"flights\", preferences)\n    hotel_query = generate_sql_query(\"hotels\", preferences)\n    attraction_query = generate_sql_query(\"attractions\", preferences)\n    \n    flights = execute_sql_query(flight_query)\n    hotels = execute_sql_query(hotel_query)\n    attractions = execute_sql_query(attraction_query)\n    \n    itinerary = {\n        \"flights\": flights,\n        \"hotels\": hotels,\n        \"attractions\": attractions\n    }\n    return itinerary\n\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = generate_recommendations(preferences)\nprint(\"Suggested Itinerary:\", itinerary)\n```\n\n----------------------------------------\n\nTITLE: Initializing Travel Agent and Processing User Preferences in Python\nDESCRIPTION: This code demonstrates how to initialize a Travel Agent object, gather user preferences, generate travel recommendations, and adjust the itinerary based on user feedback. It showcases the basic workflow of a travel planning system.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\nupdated_items = travel_agent.adjust_based_on_feedback(feedback, itinerary['hotels'])\nprint(\"Updated Itinerary with Feedback:\", updated_items)\n```\n\n----------------------------------------\n\nTITLE: Creating a Semantic Kernel with Chat Completion Services\nDESCRIPTION: Creates a Semantic Kernel instance and adds OpenAI chat completion services with different model configurations. The function configures both gpt-4o-mini and gpt-4o models for agent usage.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/10-ai-agents-production/code_samples/10-expense_claim-demo.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef _create_kernel_with_chat_completion(service_id: str) -> Kernel:\n    kernel = Kernel()\n   \n    client = AsyncOpenAI(\n    api_key=os.environ[\"GITHUB_TOKEN\"], base_url=\"https://models.inference.ai.azure.com/\")\n    kernel.add_service(\n        OpenAIChatCompletion(\n            ai_model_id=\"gpt-4o-mini\",\n            async_client=client,\n            service_id=\"open_ai\"\n        )\n    )\n\n    kernel.add_service(\n        OpenAIChatCompletion(\n            ai_model_id=\"gpt-4o\",\n            async_client=client,\n            service_id=\"gpt-4o\"\n        )\n    )\n\n    return kernel\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Function Calling with Azure Chat in C#\nDESCRIPTION: Sets up the Semantic Kernel environment in C# with Azure OpenAI integration and BookTravelPlugin. The example configures auto-function calling to allow the model to automatically determine when to call functions based on user requests.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Semantic Kernel C# example\n\nusing Microsoft.SemanticKernel;\nusing Microsoft.SemanticKernel.ChatCompletion;\nusing System.ComponentModel;\nusing Microsoft.SemanticKernel.Connectors.AzureOpenAI;\n\nChatHistory chatHistory = [];\nchatHistory.AddUserMessage(\"I'd like to go to New York on January 1, 2025\");\n\nvar kernelBuilder = Kernel.CreateBuilder();\nkernelBuilder.AddAzureOpenAIChatCompletion(\n    deploymentName: \"NAME_OF_YOUR_DEPLOYMENT\",\n    apiKey: \"YOUR_API_KEY\",\n    endpoint: \"YOUR_AZURE_ENDPOINT\"\n);\nkernelBuilder.Plugins.AddFromType<BookTravelPlugin>(\"BookTravel\"); \nvar kernel = kernelBuilder.Build();\n\nvar settings = new AzureOpenAIPromptExecutionSettings()\n{\n    FunctionChoiceBehavior = FunctionChoiceBehavior.Auto()\n};\n\nvar chatCompletion = kernel.GetRequiredService<IChatCompletionService>();\n\nvar response = await chatCompletion.GetChatMessageContentAsync(chatHistory, settings, kernel);\n\n/*\nBehind the scenes, the model recognizes the tool to call, what arguments it already has (location) and (date)\n{\n\n\"tool_calls\": [\n    {\n        \"id\": \"call_abc123\",\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"BookTravelPlugin-book_flight\",\n            \"arguments\": \"{'location': 'New York', 'date': '2025-01-01'}\"\n        }\n    }\n]\n*/\n\nConsole.WriteLine(response.Content);\nchatHistory.AddMessage(response!.Role, response!.Content!);\n\n// Example AI Model Response: Your flight to New York on January 1, 2025, has been successfully booked. Safe travels! ✈️🗽\n```\n\n----------------------------------------\n\nTITLE: Adjusting Preferences and Regenerating Recommendations in Python\nDESCRIPTION: This snippet demonstrates how to update user preferences based on feedback (liked and disliked items), then regenerate and execute code to fetch new flight and hotel data, and finally create an updated itinerary.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# Adjust preferences based on user feedback\nif \"liked\" in feedback:\n    preferences[\"favorites\"] = feedback[\"liked\"]\nif \"disliked\" in feedback:\n    preferences[\"avoid\"] = feedback[\"disliked\"]\nreturn preferences\n\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\nupdated_preferences = adjust_based_on_feedback(feedback, preferences)\n\n# Regenerate and execute code with updated preferences\nupdated_flight_code = generate_code_to_fetch_data(updated_preferences)\nupdated_hotel_code = generate_code_to_fetch_hotels(updated_preferences)\n\nupdated_flights = execute_code(updated_flight_code)\nupdated_hotels = execute_code(updated_hotel_code)\n\nupdated_itinerary = generate_itinerary(updated_flights, updated_hotels, attractions)\nprint(\"Updated Itinerary:\", updated_itinerary)\n```\n\n----------------------------------------\n\nTITLE: Regenerating Travel Itinerary with Updated Preferences\nDESCRIPTION: A code snippet demonstrating dynamic regeneration of travel recommendations based on user feedback and updated preferences\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/de/09-metacognition/README.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nupdated_flight_code = generate_code_to_fetch_data(updated_preferences)\nupdated_hotel_code = generate_code_to_fetch_hotels(updated_preferences)\n\nupdated_flights = execute_code(updated_flight_code)\nupdated_hotels = execute_code(updated_hotel_code)\n\nupdated_itinerary = generate_itinerary(updated_flights, updated_hotels, feedback[\"liked\"])\nprint(\"Updated Itinerary:\", updated_itinerary)\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping and Iterating Travel Plans with Python\nDESCRIPTION: This snippet shows how to bootstrap a travel plan with a goal and then iterate to refine it. It demonstrates creating an initial plan based on user preferences and budget, then optimizing it through iterations to better match the client's requirements.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass TravelAgent:\n    def __init__(self, destinations):\n        self.destinations = destinations\n\n    def bootstrap_plan(self, preferences, budget):\n        plan = []\n        total_cost = 0\n\n        for destination in self.destinations:\n            if total_cost + destination['cost'] <= budget and self.match_preferences(destination, preferences):\n                plan.append(destination)\n                total_cost += destination['cost']\n\n        return plan\n\n    def match_preferences(self, destination, preferences):\n        for key, value in preferences.items():\n            if destination.get(key) != value:\n                return False\n        return True\n\n    def iterate_plan(self, plan, preferences, budget):\n        for i in range(len(plan)):\n            for destination in self.destinations:\n                if destination not in plan and self.match_preferences(destination, preferences) and self.calculate_cost(plan, destination) <= budget:\n                    plan[i] = destination\n                    break\n        return plan\n\n    def calculate_cost(self, plan, new_destination):\n        return sum(destination['cost'] for destination in plan) + new_destination['cost']\n\n# Example usage\ndestinations = [\n    {\"name\": \"Paris\", \"cost\": 1000, \"activity\": \"sightseeing\"},\n    {\"name\": \"Tokyo\", \"cost\": 1200, \"activity\": \"shopping\"},\n    {\"name\": \"New York\", \"cost\": 900, \"activity\": \"sightseeing\"},\n    {\"name\": \"Sydney\", \"cost\": 1100, \"activity\": \"beach\"},\n]\n\npreferences = {\"activity\": \"sightseeing\"}\nbudget = 2000\n\ntravel_agent = TravelAgent(destinations)\ninitial_plan = travel_agent.bootstrap_plan(preferences, budget)\nprint(\"Initial Plan:\", initial_plan)\n\nrefined_plan = travel_agent.iterate_plan(initial_plan, preferences, budget)\nprint(\"Refined Plan:\", refined_plan)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Travel Agent Class in Python\nDESCRIPTION: Defines a basic Travel_Agent class with initialization and preference gathering capabilities. The class serves as the foundation for a travel recommendation system that will store user preferences for later use in generating SQL queries.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fr/09-metacognition/README.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running Group Chat for Travel Planning in Python\nDESCRIPTION: This code sets up a RoundRobinGroupChat with the front desk and concierge agents, using a termination condition based on the word 'APPROVE'. It then runs the chat to plan a trip to Paris, printing messages and the stop reason.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/08-multi-agent/code_samples/08-autogen.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntermination = TextMentionTermination(\"APPROVE\")\nteam = RoundRobinGroupChat(\n    [frontdesk_agent, concierge_agent], termination_condition=termination\n)\n\nasync for message in team.run_stream(task=\"I would like to plan a trip to Paris.\"):\n    if isinstance(message, TaskResult):\n        print(\"Stop Reason:\", message.stop_reason)\n    else:\n        print(message)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Travel Agent Class in Python\nDESCRIPTION: This snippet defines a Travel_Agent class that initializes and stores user preferences. It provides a simple structure for collecting and storing travel requirements from users that will be used for generating recommendations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure AI Chat Completion Client in Python\nDESCRIPTION: This code snippet sets up the Azure AI Chat Completion client with specific model parameters. It uses environment variables for authentication and configures model settings such as JSON output, function calling, and vision capabilities.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/07-planning-design/code_samples/07-autogen.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = AzureAIChatCompletionClient(\n    model=\"gpt-4o-mini\",\n    endpoint=\"https://models.inference.ai.azure.com\",\n    # To authenticate with the model you will need to generate a personal access token (PAT) in your GitHub settings.\n    # Create your PAT token by following instructions here: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens\n    credential=AzureKeyCredential(os.getenv(\"GITHUB_TOKEN\")),\n    model_info={\n        \"json_output\": False,\n        \"function_calling\": True,\n        \"vision\": True,\n        \"family\": \"unknown\",\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Enhanced Environmental Awareness for Travel Agent in Python\nDESCRIPTION: Advanced implementation that leverages schema awareness to make more intelligent adjustments to user preferences. Includes functions for environment-based adjustments and code execution simulation for fetching travel data.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef adjust_based_on_feedback(feedback, preferences, schema):\n    # Adjust preferences based on user feedback\n    if \"liked\" in feedback:\n        preferences[\"favorites\"] = feedback[\"liked\"]\n    if \"disliked\" in feedback:\n        preferences[\"avoid\"] = feedback[\"disliked\"]\n    # Reasoning based on schema to adjust other related preferences\n    for field in schema:\n        if field in preferences:\n            preferences[field] = adjust_based_on_environment(feedback, field, schema)\n    return preferences\n\ndef adjust_based_on_environment(feedback, field, schema):\n    # Custom logic to adjust preferences based on schema and feedback\n    if field in feedback[\"liked\"]:\n        return schema[field][\"positive_adjustment\"]\n    elif field in feedback[\"disliked\"]:\n        return schema[field][\"negative_adjustment\"]\n    return schema[field][\"default\"]\n\ndef generate_code_to_fetch_data(preferences):\n    # Generate code to fetch flight data based on updated preferences\n    return f\"fetch_flights(preferences={preferences})\"\n\ndef generate_code_to_fetch_hotels(preferences):\n    # Generate code to fetch hotel data based on updated preferences\n    return f\"fetch_hotels(preferences={preferences})\"\n\ndef execute_code(code):\n    # Simulate execution of code and return mock data\n    return {\"data\": f\"Executed: {code}\"}\n\ndef generate_itinerary(flights, hotels, attractions):\n    # Generate itinerary based on flights, hotels, and attractions\n    return {\"flights\": flights, \"hotels\": hotels, \"attractions\": attractions}\n\n# Example schema\nschema = {\n    \"favorites\": {\"positive_adjustment\": \"increase\", \"negative_adjustment\": \"decrease\", \"default\": \"neutral\"},\n    \"avoid\": {\"positive_adjustment\": \"decrease\", \"negative_adjustment\": \"increase\", \"default\": \"neutral\"}\n}\n\n# Example usage\npreferences = {\"favorites\": \"sightseeing\", \"avoid\": \"crowded places\"}\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\nupdated_preferences = adjust_based_on_feedback(feedback, preferences, schema)\n\n# Regenerate and execute code with updated preferences\nupdated_flight_code = generate_code_to_fetch_data(updated_preferences)\nupdated_hotel_code = generate_code_to_fetch_hotels(updated_preferences)\n\nupdated_flights = execute_code(updated_flight_code)\nupdated_hotels = execute_code(updated_hotel_code)\n\nupdated_itinerary = generate_itinerary(updated_flights, updated_hotels, feedback[\"liked\"])\nprint(\"Updated Itinerary:\", updated_itinerary)\n```\n\n----------------------------------------\n\nTITLE: Filtering and Ranking Travel Recommendations in Python\nDESCRIPTION: A method to sort and rank items based on their relevance scores, returning the top 10 most relevant recommendations\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef filter_and_rank(items, query):\n    ranked_items = sorted(items, key=lambda item: relevance_score(item, query), reverse=True)\n    return ranked_items[:10]  # Return top 10 relevant items\n```\n\n----------------------------------------\n\nTITLE: Intent-Based Search Function in Python\nDESCRIPTION: This Python code defines a function `search_with_intent` that performs different search actions based on the identified user intent. It utilizes the `identify_intent` and `analyze_context` functions. It then calls specific search functions (`search_information`, `search_navigation`, `search_transaction`) and personalizes the results based on user history.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ja/09-metacognition/README.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef search_with_intent(query, preferences, user_history):\n    intent = identify_intent(query)\n    context = analyze_context(query, user_history)\n    if intent == \"informational\":\n        search_results = search_information(query, preferences)\n    elif intent == \"navigational\":\n        search_results = search_navigation(query)\n    elif intent == \"transactional\":\n        search_results = search_transaction(query, preferences)\n    personalized_results = personalize_results(search_results, user_history)\n    return personalized_results\n\ndef search_information(query, preferences):\n    # Example search logic for informational intent\n    results = search_web(f\"best {preferences['interests']} in {preferences['destination']}\")\n    return results\n\ndef search_navigation(query):\n    # Example search logic for navigational intent\n    results = search_web(query)\n    return results\n\ndef search_transaction(query, preferences):\n    # Example search logic for transactional intent\n    results = search_web(f\"book {query} to {preferences['destination']}\")\n    return results\n\ndef personalize_results(results, user_history):\n    # Example personalization logic\n    personalized = [result for result in results if result not in user_history]\n    return personalized[:10]  # Return top 10 personalized results\n\n```\n\n----------------------------------------\n\nTITLE: Hotel Recommendation Agent with Metacognition in Python\nDESCRIPTION: This class implements a hotel recommendation system with metacognitive capabilities. The agent can recommend hotels based on different strategies, reflect on its choices using simulated user feedback, and adjust its strategy accordingly to improve future recommendations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nclass HotelRecommendationAgent:\n    def __init__(self):\n        self.previous_choices = []  # Stores the hotels chosen previously\n        self.corrected_choices = []  # Stores the corrected choices\n        self.recommendation_strategies = ['cheapest', 'highest_quality']  # Available strategies\n\n    def recommend_hotel(self, hotels, strategy):\n        \"\"\"\n        Recommend a hotel based on the chosen strategy.\n        The strategy can either be 'cheapest' or 'highest_quality'.\n        \"\"\"\n        if strategy == 'cheapest':\n            recommended = min(hotels, key=lambda x: x['price'])\n        elif strategy == 'highest_quality':\n            recommended = max(hotels, key=lambda x: x['quality'])\n        else:\n            recommended = None\n        self.previous_choices.append((strategy, recommended))\n        return recommended\n\n    def reflect_on_choice(self):\n        \"\"\"\n        Reflect on the last choice made and decide if the agent should adjust its strategy.\n        The agent considers if the previous choice led to a poor outcome.\n        \"\"\"\n        if not self.previous_choices:\n            return \"No choices made yet.\"\n\n        last_choice_strategy, last_choice = self.previous_choices[-1]\n        # Let's assume we have some user feedback that tells us whether the last choice was good or not\n        user_feedback = self.get_user_feedback(last_choice)\n\n        if user_feedback == \"bad\":\n            # Adjust strategy if the previous choice was unsatisfactory\n            new_strategy = 'highest_quality' if last_choice_strategy == 'cheapest' else 'cheapest'\n            self.corrected_choices.append((new_strategy, last_choice))\n            return f\"Reflecting on choice. Adjusting strategy to {new_strategy}.\"\n        else:\n            return \"The choice was good. No need to adjust.\"\n\n    def get_user_feedback(self, hotel):\n        \"\"\"\n        Simulate user feedback based on hotel attributes.\n        For simplicity, assume if the hotel is too cheap, the feedback is \"bad\".\n        If the hotel has quality less than 7, feedback is \"bad\".\n        \"\"\"\n        if hotel['price'] < 100 or hotel['quality'] < 7:\n            return \"bad\"\n        return \"good\"\n\n# Simulate a list of hotels (price and quality)\nhotels = [\n    {'name': 'Budget Inn', 'price': 80, 'quality': 6},\n    {'name': 'Comfort Suites', 'price': 120, 'quality': 8},\n    {'name': 'Luxury Stay', 'price': 200, 'quality': 9}\n]\n\n# Create an agent\nagent = HotelRecommendationAgent()\n\n# Step 1: The agent recommends a hotel using the \"cheapest\" strategy\nrecommended_hotel = agent.recommend_hotel(hotels, 'cheapest')\nprint(f\"Recommended hotel (cheapest): {recommended_hotel['name']}\")\n\n# Step 2: The agent reflects on the choice and adjusts strategy if necessary\nreflection_result = agent.reflect_on_choice()\nprint(reflection_result)\n\n# Step 3: The agent recommends again, this time using the adjusted strategy\nadjusted_recommendation = agent.recommend_hotel(hotels, 'highest_quality')\nprint(f\"Adjusted hotel recommendation (highest_quality): {adjusted_recommendation['name']}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Travel Recommendations System with Azure OpenAI\nDESCRIPTION: Example usage of TravelAgent class to get destination recommendations using Azure OpenAI API. Includes initialization of destinations list and calling the recommendation system with user preferences.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/09-metacognition/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndestinations = [\n    {\"name\": \"Paris\", \"description\": \"City of lights, known for its art, fashion, and culture.\"}, \n    {\"name\": \"Tokyo\", \"description\": \"Vibrant city, famous for its modernity and traditional temples.\"}, \n    {\"name\": \"New York\", \"description\": \"The city that never sleeps, with iconic landmarks and diverse culture.\"}, \n    {\"name\": \"Sydney\", \"description\": \"Beautiful harbour city, known for its opera house and stunning beaches.\"}, \n]\n\npreferences = {\"activity\": \"sightseeing\", \"culture\": \"diverse\"}\napi_key = 'your_azure_openai_api_key'\nendpoint = 'https://your-endpoint.com/openai/deployments/your-deployment-name/completions?api-version=2022-12-01'\n\ntravel_agent = TravelAgent(destinations)\nrecommendations = travel_agent.get_recommendations(preferences, api_key, endpoint)\nprint(\"Recommended Destinations:\")\nfor rec in recommendations:\n    print(rec)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure AI Agent Settings\nDESCRIPTION: Initializes an AzureAIAgentSettings object with default or predefined settings to configure an AzureAIAgent instance.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/08-multi-agent/code_samples/08-python_multi_aiagent_bookinghotel.ipynb#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nai_agent_settings = AzureAIAgentSettings.create()\n```\n\n----------------------------------------\n\nTITLE: Hotel Recommendation Agent Implementation in Python\nDESCRIPTION: This code defines a `HotelRecommendationAgent` class with methods for recommending hotels based on different strategies ('cheapest', 'highest_quality'), reflecting on previous choices, and simulating user feedback. It includes a simulation of hotels and demonstrates the agent's process of recommending, reflecting, and adjusting its strategy.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/tw/09-metacognition/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass HotelRecommendationAgent:\n    def __init__(self):\n        self.previous_choices = []  # Stores the hotels chosen previously\n        self.corrected_choices = []  # Stores the corrected choices\n        self.recommendation_strategies = ['cheapest', 'highest_quality']  # Available strategies\n\n    def recommend_hotel(self, hotels, strategy):\n        \"\"\"\n        Recommend a hotel based on the chosen strategy.\n        The strategy can either be 'cheapest' or 'highest_quality'.\n        \"\"\"\n        if strategy == 'cheapest':\n            recommended = min(hotels, key=lambda x: x['price'])\n        elif strategy == 'highest_quality':\n            recommended = max(hotels, key=lambda x: x['quality'])\n        else:\n            recommended = None\n        self.previous_choices.append((strategy, recommended))\n        return recommended\n\n    def reflect_on_choice(self):\n        \"\"\"\n        Reflect on the last choice made and decide if the agent should adjust its strategy.\n        The agent considers if the previous choice led to a poor outcome.\n        \"\"\"\n        if not self.previous_choices:\n            return \"No choices made yet.\"\n\n        last_choice_strategy, last_choice = self.previous_choices[-1]\n        # Let's assume we have some user feedback that tells us whether the last choice was good or not\n        user_feedback = self.get_user_feedback(last_choice)\n\n        if user_feedback == \"bad\":\n            # Adjust strategy if the previous choice was unsatisfactory\n            new_strategy = 'highest_quality' if last_choice_strategy == 'cheapest' else 'cheapest'\n            self.corrected_choices.append((new_strategy, last_choice))\n            return f\"Reflecting on choice. Adjusting strategy to {new_strategy}.\"\n        else:\n            return \"The choice was good. No need to adjust.\"\n\n    def get_user_feedback(self, hotel):\n        \"\"\"\n        Simulate user feedback based on hotel attributes.\n        For simplicity, assume if the hotel is too cheap, the feedback is \"bad\".\n        If the hotel has quality less than 7, feedback is \"bad\".\n        \"\"\"\n        if hotel['price'] < 100 or hotel['quality'] < 7:\n            return \"bad\"\n        return \"good\"\n\n# Simulate a list of hotels (price and quality)\nhotels = [\n    {'name': 'Budget Inn', 'price': 80, 'quality': 6},\n    {'name': 'Comfort Suites', 'price': 120, 'quality': 8},\n    {'name': 'Luxury Stay', 'price': 200, 'quality': 9}\n]\n\n# Create an agent\nagent = HotelRecommendationAgent()\n\n# Step 1: The agent recommends a hotel using the \"cheapest\" strategy\nrecommended_hotel = agent.recommend_hotel(hotels, 'cheapest')\nprint(f\"Recommended hotel (cheapest): {recommended_hotel['name']}\")\n\n# Step 2: The agent reflects on the choice and adjusts strategy if necessary\nreflection_result = agent.reflect_on_choice()\nprint(reflection_result)\n\n# Step 3: The agent recommends again, this time using the adjusted strategy\nadjusted_recommendation = agent.recommend_hotel(hotels, 'highest_quality')\nprint(f\"Adjusted hotel recommendation (highest_quality): {adjusted_recommendation['name']}\")\n```\n\n----------------------------------------\n\nTITLE: Processing Expenses with OpenAI and OCR Agents\nDESCRIPTION: Asynchronous function that processes expenses by creating OCR and email agents, setting up a kernel with plugins, and orchestrating their interaction. It loads environment variables, configures agent settings, and processes receipt images to generate expense claim emails.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/10-ai-agents-production/code_samples/10-expense_claim-demo.ipynb#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def process_expenses():\n    load_dotenv()\n    settings_slm = OpenAIChatPromptExecutionSettings(service_id=\"gpt-4o\")\n    settings_llm = OpenAIChatPromptExecutionSettings(service_id=\"open_ai\")  # Fixed typo in service_id\n    \n    ocr_agent = ChatCompletionAgent(\n        kernel=_create_kernel_with_chat_completion(\"ocrAgent\"),\n        name=\"ocr_agent\",\n        instructions=\"Extract travel expense data from the receipt image in the prompt using the 'extract_text' function from the 'ocrAgent' plugin. Return the data in the format 'date|description|amount|category' separated by semicolons.\",\n        arguments=KernelArguments(settings=settings_slm)\n    )\n    \n       \n    email_agent = ChatCompletionAgent(\n            kernel=_create_kernel_with_chat_completion(\"expenseEmailAgent\"),\n            name=\"email_agent\",\n            instructions=\"Take the travel expense data from the previous agent and generate a professional expense claim email using the 'generate_expense_email' function from the 'expenseEmailAgent' plugin, then pass the data forward.\",\n            arguments=KernelArguments(\n                settings=settings_llm)\n        )\n\n\n    kernel = Kernel()\n\n    # Use fixed path to receipt.jpg in the same folder\n    image_path = \"./receipt.jpg\"\n    \n    # Create a structured message with text and image content for OCR processing\n    image_url_str = f\"file://{image_path}\"\n    \n    # Using the correct format for multi-modal content\n    user_message = ChatMessageContent(\n        role=AuthorRole.USER,\n        items=[\n            TextContent(text=\"\"\"\n            Please extract the raw text from this receipt image, focusing on travel expenses like dates, descriptions, amounts, and categories (e.g., Transportation, Accommodation, Meals, Miscellaneous).\n            Then generate a professional expense claim email.\n                        \"\"\"),\n            ImageContent.from_image_file(path=image_path)\n        ]\n    )\n\n    # Register plugins with the kernel\n    kernel.add_plugin(OCRAgentPlugin(), plugin_name=\"ocrAgent\")\n    kernel.add_plugin(ExpenseEmailAgent(), plugin_name=\"expenseEmailAgent\")\n\n    # Create group chat\n    chat = AgentGroupChat(\n        agents=[ocr_agent, email_agent],\n        selection_strategy=SequentialSelectionStrategy(initial_agent=ocr_agent),\n        termination_strategy=DefaultTerminationStrategy(maximum_iterations=1)\n    )\n\n    # Add user message with prompt\n    await chat.add_chat_message(user_message)\n    print(f\"# User message added to chat with receipt image\")\n\n    async for content in chat.invoke():\n        print(f\"# Agent - {content.name or '*'}: '{content.content}'\")\n```\n\n----------------------------------------\n\nTITLE: Initializing TravelAgent Class and Plan Management in Python\nDESCRIPTION: The TravelAgent class is initialized with a list of potential destinations. It includes methods to bootstrap a travel plan based on client preferences and budget, match preferences against destinations, iterate through plans for refinement, and calculate the cost of plans while considering new destinations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nclass TravelAgent:\n    def __init__(self, destinations):\n        self.destinations = destinations\n\n    def bootstrap_plan(self, preferences, budget):\n        plan = []\n        total_cost = 0\n\n        for destination in self.destinations:\n            if total_cost + destination['cost'] <= budget and self.match_preferences(destination, preferences):\n                plan.append(destination)\n                total_cost += destination['cost']\n\n        return plan\n\n    def match_preferences(self, destination, preferences):\n        for key, value in preferences.items():\n            if destination.get(key) != value:\n                return False\n        return True\n\n    def iterate_plan(self, plan, preferences, budget):\n        for i in range(len(plan)):\n            for destination in self.destinations:\n                if destination not in plan and self.match_preferences(destination, preferences) and self.calculate_cost(plan, destination) <= budget:\n                    plan[i] = destination\n                    break\n        return plan\n\n    def calculate_cost(self, plan, new_destination):\n        return sum(destination['cost'] for destination in plan) + new_destination['cost']\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using a TravelAgent Class with Azure OpenAI for Travel Recommendations in Python\nDESCRIPTION: This snippet shows the initialization of a TravelAgent object with a list of destinations and demonstrates how to get AI-powered recommendations based on user preferences by using Azure OpenAI API. It requires an Azure OpenAI API key and endpoint to function correctly.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Example usage\ndestinations = [\n    {\"name\": \"Paris\", \"description\": \"City of lights, known for its art, fashion, and culture.\"},\n    {\"name\": \"Tokyo\", \"description\": \"Vibrant city, famous for its modernity and traditional temples.\"},\n    {\"name\": \"New York\", \"description\": \"The city that never sleeps, with iconic landmarks and diverse culture.\"},\n    {\"name\": \"Sydney\", \"description\": \"Beautiful harbour city, known for its opera house and stunning beaches.\"},\n]\n\npreferences = {\"activity\": \"sightseeing\", \"culture\": \"diverse\"}\napi_key = 'your_azure_openai_api_key'\nendpoint = 'https://your-endpoint.com/openai/deployments/your-deployment-name/completions?api-version=2022-12-01'\n\ntravel_agent = TravelAgent(destinations)\nrecommendations = travel_agent.get_recommendations(preferences, api_key, endpoint)\nprint(\"Recommended Destinations:\")\nfor rec in recommendations:\n    print(rec)\n```\n\n----------------------------------------\n\nTITLE: Calculating Relevance Score for Travel Items in Python\nDESCRIPTION: This method calculates a relevance score for a travel item based on user preferences. It considers factors such as category, price, and location to determine the item's relevance.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\ndef relevance_score(self, item, query):\n    score = 0\n    if item['category'] in query['interests']:\n        score += 1\n    if item['price'] <= query['budget']:\n        score += 1\n    if item['location'] == query['destination']:\n        score += 1\n    return score\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AI Booking and Saving Agents with Python\nDESCRIPTION: This code snippet initializes Azure AI agents to manage and save travel-related inquiries. It requires the Azure SDK for Python and access to Azure credentials. Key parameters include user inputs for travel details and agent instructions for carrying out flight and hotel bookings. The snippet processes inputs via an agent group chat and outputs structured results including flight and hotel details. Constraints include the need for valid Azure credentials and correctly formatted user requests.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/08-multi-agent/code_samples/08-python_multi_aiagent_bookinghotel.ipynb#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nasync with (\n    DefaultAzureCredential() as creds,\n    AzureAIAgent.create_client(\n        credential=creds,\n        conn_str=ai_agent_settings.project_connection_string.get_secret_value(),\n    ) as client,\n):\n    BOOKING_AGENT_NAME = \"BookingAgent\"\n    BOOKING_AGENT_INSTRUCTIONS = \"\"\"\n    You are a booking agent. Help me book flights or hotels.\n\n    Thought: Please understand the user's intention and confirm whether to use the reservation system to complete the task.\n\n    Actions:\n    - For flight bookings, convert the departure and destination names into airport codes.\n    - Use the appropriate API for hotel or flight bookings. Verify that all necessary parameters are available. If any parameters are missing, ask the user to provide them. If all parameters are complete, call the corresponding function.\n    - If the task is not related to hotel or flight booking, respond with the final answer only.\n    - Output the results using a markdown table:\n      - For flight bookings, output separate outbound and return contents in the order of:\n        Departure Airport | Airline | Flight Number | Departure Time | Arrival Airport | Arrival Time | Duration | Airplane | Travel Class | Price (USD) | Legroom | Extensions | Carbon Emissions (kg).\n      - For hotel bookings, output in the order of:\n        Property Name | Property Description | Check-in Time | Check-out Time | Prices | Nearby Places | Hotel Class | GPS Coordinates.\n    \"\"\"\n\n    SAVE_AGENT_NAME = \"SaveAgent\"\n    SAVE_AGENT_INSTRUCTIONS = \"\"\"\n    You are a save tool agent. Help me to save the trip plan.\n    \"\"\"\n\n    # Create agent definition\n    booking_agent_definition = await client.agents.create_agent(\n        model=ai_agent_settings.model_deployment_name,\n        name=BOOKING_AGENT_NAME,\n        instructions=BOOKING_AGENT_INSTRUCTIONS,\n    )\n\n    # Create the AzureAI Agent\n    booking_agent = AzureAIAgent(\n        client=client,\n        definition=booking_agent_definition,\n        # Optionally configure polling options\n        # polling_options=RunPollingOptions(run_polling_interval=timedelta(seconds=1)),\n    )\n\n    # Add the sample plugin to the kernel\n    booking_agent.kernel.add_plugin(BookingPlugin(), plugin_name=\"booking\")\n\n    # Create agent definition\n    save_agent_definition = await client.agents.create_agent(\n        model=ai_agent_settings.model_deployment_name,\n        name=SAVE_AGENT_NAME,\n        instructions=SAVE_AGENT_INSTRUCTIONS\n    )\n\n    # Create the AzureAI Agent\n    save_agent = AzureAIAgent(\n        client=client,\n        definition=save_agent_definition,\n    )\n\n    save_agent.kernel.add_plugin(SavePlugin(), plugin_name=\"saving\")\n\n    user_inputs = [\n        \"I have a business trip from London to New York in Feb 20 2025 to Feb 27 2025 ,help me to book a hotel and fight tickets and save it\"\n    ]\n\n    chat = AgentGroupChat(\n        agents=[booking_agent, save_agent],\n        termination_strategy=ApprovalTerminationStrategy(agents=[save_agent], maximum_iterations=10),\n    )\n\n    try:\n        for user_input in user_inputs:\n            # Add the user input as a chat message\n            await chat.add_chat_message(\n                ChatMessageContent(role=AuthorRole.USER, content=user_input)\n            )\n            print(f\"# User: '{user_input}'\")\n\n            async for content in chat.invoke():\n                print(f\"# {content.role} - {content.name or '*'}: '{content.content}'\")\n\n            print(f\"# IS COMPLETE: {chat.is_complete}\")\n\n            print(\"*\" * 60)\n            print(\"Chat History (In Descending Order):\\n\")\n            async for message in chat.get_chat_messages(agent=save_agent):\n                print(f\"# {message.role} - {message.name or '*'}: '{message.content}'\")\n    finally:\n        await chat.reset()\n        await client.agents.delete_agent(save_agent.id)\n        await client.agents.delete_agent(booking_agent.id)\n\n```\n\n----------------------------------------\n\nTITLE: Adjusting Recommendations Based on Feedback in Python\nDESCRIPTION: The `adjust_based_on_feedback` method adjusts the relevance of items based on user feedback (liked/disliked). It iterates through the items and increases the 'relevance' score for liked items and decreases it for disliked items. It returns the adjusted list of items. The method modifies the 'relevance' key within each item dictionary.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/09-metacognition/README.md#2025-04-18_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n    def adjust_based_on_feedback(self, feedback, items):\n        for item in items:\n            if item['name'] in feedback['liked']:\n                item['relevance'] += 1\n            if item['name'] in feedback['disliked']:\n                item['relevance'] -= 1\n        return items\n```\n\n----------------------------------------\n\nTITLE: Executing Generated Code for Travel Data Retrieval in Python\nDESCRIPTION: Demonstrates how to execute dynamically generated code using Python's exec function and gather the results. Includes a complete workflow from preference gathering to code execution for flight and hotel searches.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef execute_code(code):\n    # Execute the generated code using exec\n    exec(code)\n    result = locals()\n    return result\n\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\n\nflight_code = generate_code_to_fetch_data(preferences)\nhotel_code = generate_code_to_fetch_hotels(preferences)\n\nflights = execute_code(flight_code)\nhotels = execute_code(hotel_code)\n\nprint(\"Flight Options:\", flights)\nprint(\"Hotel Options:\", hotels)\n```\n\n----------------------------------------\n\nTITLE: Generating Travel Recommendations in Python\nDESCRIPTION: This snippet demonstrates how the travel agent generates recommendations based on user preferences by creating an itinerary after gathering necessary information, such as flights, hotels, and attractions. The itinerary is printed to the console.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\n```\n\n----------------------------------------\n\nTITLE: Setting up Azure AI Search Vector Database\nDESCRIPTION: Initializes Azure AI Search with index configuration and uploads sample travel documents for vector storage and retrieval.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-autogen-azuresearch.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Initialize Azure AI Search with persistent storage\nsearch_service_endpoint = os.getenv(\"AZURE_SEARCH_SERVICE_ENDPOINT\")\nsearch_api_key = os.getenv(\"AZURE_SEARCH_API_KEY\")\nindex_name = \"travel-documents\"\n\nsearch_client = SearchClient(\n    endpoint=search_service_endpoint,\n    index_name=index_name,\n    credential=AzureKeyCredential(search_api_key)\n)\n\nindex_client = SearchIndexClient(\n    endpoint=search_service_endpoint,\n    credential=AzureKeyCredential(search_api_key)\n)\n\n# Define the index schema\nfields = [\n    SimpleField(name=\"id\", type=SearchFieldDataType.String, key=True),\n    SearchableField(name=\"content\", type=SearchFieldDataType.String)\n]\n\nindex = SearchIndex(name=index_name, fields=fields)\n\n# Create the index\nindex_client.create_index(index)\n\n# Enhanced sample documents\ndocuments = [\n    {\"id\": \"1\", \"content\": \"Contoso Travel offers luxury vacation packages to exotic destinations worldwide.\"},\n    {\"id\": \"2\", \"content\": \"Our premium travel services include personalized itinerary planning and 24/7 concierge support.\"},\n    {\"id\": \"3\", \"content\": \"Contoso's travel insurance covers medical emergencies, trip cancellations, and lost baggage.\"},\n    {\"id\": \"4\", \"content\": \"Popular destinations include the Maldives, Swiss Alps, and African safaris.\"},\n    {\"id\": \"5\", \"content\": \"Contoso Travel provides exclusive access to boutique hotels and private guided tours.\"}\n]\n\n# Add documents to the index\nsearch_client.upload_documents(documents)\n```\n\n----------------------------------------\n\nTITLE: Base Message Template for Travel Agent AI\nDESCRIPTION: A base message template that describes the core functionality and responsibilities of a travel agent AI system. Includes specific tasks and capabilities the agent can perform.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fa/06-building-trustworthy-agents/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nYou are a travel agent for Contoso Travel that is great at booking flights for customers. To help customers you can perform the following tasks: lookup available flights, book flights, ask for preferences in seating and times for flights, cancel any previously booked flights and alert customers on any delays or cancellations of flights.\n```\n\n----------------------------------------\n\nTITLE: Implementing a DestinationsPlugin for Travel Information\nDESCRIPTION: Defines a plugin class with kernel functions that provide travel information. The plugin includes methods to retrieve vacation destinations and flight times for specific cities, returning formatted string responses that can be used by the agent.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/code_samples/09-semantic-kernel.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Define a sample plugin for the sample\nclass DestinationsPlugin:\n    \"\"\"A List of Destinations for vacation.\"\"\"\n\n    @kernel_function(description=\"Provides a list of vacation destinations.\")\n    def get_destinations(self) -> Annotated[str, \"Returns the specials from the menu.\"]:\n        return \"\"\"\n        Barcelona, Spain\n        Paris, France\n        Berlin, Germany\n        Tokyo, Japan\n        New York, USA\n        \"\"\"\n\n    @kernel_function(description=\"Provides available flight times for a destination.\")\n    def get_flight_times(\n        self, destination: Annotated[str, \"The destination to check flight times for.\"]\n    ) -> Annotated[str, \"Returns flight times for the specified destination.\"]:\n        flight_times = {\n            \"Barcelona\": [\"08:30 AM\", \"02:15 PM\", \"10:45 PM\"],\n            \"Paris\": [\"06:45 AM\", \"12:30 PM\", \"07:15 PM\"],\n            \"Berlin\": [\"07:20 AM\", \"01:45 PM\", \"09:30 PM\"],\n            \"Tokyo\": [\"11:00 AM\", \"05:30 PM\", \"11:55 PM\"],\n            \"New York\": [\"05:15 AM\", \"03:00 PM\", \"08:45 PM\"]\n        }\n\n        # Extract just the city name from input that might contain country\n        city = destination.split(',')[0].strip()\n\n        if city in flight_times:\n            times = \", \".join(flight_times[city])\n            return f\"Flight times for {city}: {times}\"\n        else:\n            return f\"No flight information available for {city}.\"\n```\n\n----------------------------------------\n\nTITLE: Context Analysis Function in Python\nDESCRIPTION: This Python code defines a function `analyze_context` that combines the current user query with the user's history to understand the context of the query.  It creates a dictionary containing both the current query and the user's history, which can be used for more informed search and personalization.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ja/09-metacognition/README.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef analyze_context(query, user_history):\n    # Combine current query with user history to understand context\n    context = {\n        \"current_query\": query,\n        \"user_history\": user_history\n    }\n    return context\n\n```\n\n----------------------------------------\n\nTITLE: Running the Travel Agent with Semantic Kernel\nDESCRIPTION: Implements the interaction loop to process multiple user inputs through the agent. Handles streaming responses, function calls, and manages conversation history. Formats responses with HTML for display in a Jupyter notebook environment.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/03-agentic-design-patterns/code_samples/03-semantic-kernel.ipynb#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nuser_inputs = [\n    \"Plan me a day trip.\",\n    \"I don't like that destination. Plan me another vacation.\",\n]\n\nasync def main():\n    thread: ChatHistoryAgentThread | None = None\n\n    for user_input in user_inputs:\n        html_output = (\n            f\"<div style='margin-bottom:10px'>\"\n            f\"<div style='font-weight:bold'>User:</div>\"\n            f\"<div style='margin-left:20px'>{user_input}</div></div>\"\n        )\n\n        agent_name = None\n        full_response: list[str] = []\n        function_calls: list[str] = []\n\n        # Buffer to reconstruct streaming function call\n        current_function_name = None\n        argument_buffer = \"\"\n\n        async for response in agent.invoke_stream(\n            messages=user_input,\n            thread=thread,\n        ):\n            thread = response.thread\n            agent_name = response.name\n            content_items = list(response.items)\n\n            for item in content_items:\n                if isinstance(item, FunctionCallContent):\n                    if item.function_name:\n                        current_function_name = item.function_name\n\n                    # Accumulate arguments (streamed in chunks)\n                    if isinstance(item.arguments, str):\n                        argument_buffer += item.arguments\n                elif isinstance(item, FunctionResultContent):\n                    # Finalize any pending function call before showing result\n                    if current_function_name:\n                        formatted_args = argument_buffer.strip()\n                        try:\n                            parsed_args = json.loads(formatted_args)\n                            formatted_args = json.dumps(parsed_args)\n                        except Exception:\n                            pass  # leave as raw string\n\n                        function_calls.append(f\"Calling function: {current_function_name}({formatted_args})\")\n                        current_function_name = None\n                        argument_buffer = \"\"\n\n                    function_calls.append(f\"\\nFunction Result:\\n\\n{item.result}\")\n                elif isinstance(item, StreamingTextContent) and item.text:\n                    full_response.append(item.text)\n\n        if function_calls:\n            html_output += (\n                \"<div style='margin-bottom:10px'>\"\n                \"<details>\"\n                \"<summary style='cursor:pointer; font-weight:bold; color:#0066cc;'>Function Calls (click to expand)</summary>\"\n                \"<div style='margin:10px; padding:10px; background-color:#f8f8f8; \"\n                \"border:1px solid #ddd; border-radius:4px; white-space:pre-wrap; font-size:14px; color:#333;'>\"\n                f\"{chr(10).join(function_calls)}\"\n                \"</div></details></div>\"\n            )\n\n        html_output += (\n            \"<div style='margin-bottom:20px'>\"\n            f\"<div style='font-weight:bold'>{agent_name or 'Assistant'}:</div>\"\n            f\"<div style='margin-left:20px; white-space:pre-wrap'>{''.join(full_response)}</div></div><hr>\"\n        )\n\n        display(HTML(html_output))\n\nawait main()\n```\n\n----------------------------------------\n\nTITLE: Adjusting Recommendation Relevance Based on User Feedback in Python\nDESCRIPTION: This Python code snippet collects user feedback to adjust the relevance scores of items based on likes and dislikes. The adjust_based_on_feedback method updates item relevance by increasing scores for liked items and decreasing for disliked ones. It inputs a feedback dictionary and a list of item dictionaries, returning the adjusted list with updated relevance scores.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ko/09-metacognition/README.md#2025-04-18_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef adjust_based_on_feedback(feedback, items):\n    for item in items:\n        if item['name'] in feedback['liked']:\n            item['relevance'] += 1\n        if item['name'] in feedback['disliked']:\n            item['relevance'] -= 1\n    return items\n```\n\n----------------------------------------\n\nTITLE: Generating Travel Itinerary from Search Results in Python\nDESCRIPTION: This function compiles flight, hotel, and attraction information into a comprehensive travel itinerary. It creates a structured dictionary of all travel components and displays the suggested itinerary.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef generate_itinerary(flights, hotels, attractions):\n    itinerary = {\n        \"flights\": flights,\n        \"hotels\": hotels,\n        \"attractions\": attractions\n    }\n    return itinerary\n\nattractions = search_attractions(preferences)\nitinerary = generate_itinerary(flights, hotels, attractions)\nprint(\"Suggested Itinerary:\", itinerary)\n```\n\n----------------------------------------\n\nTITLE: Generating Recommendations in Python\nDESCRIPTION: The `generate_recommendations` method orchestrates the recommendation process. It retrieves information using `retrieve_information`, ranks hotels using `filter_and_rank`, and creates an itinerary using `create_itinerary` (assumed to be defined elsewhere). It returns the generated itinerary. Dependencies are `retrieve_information`, `filter_and_rank`, and `create_itinerary`.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/09-metacognition/README.md#2025-04-18_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        ranked_hotels = self.filter_and_rank(hotels, self.user_preferences)\n        itinerary = create_itinerary(flights, ranked_hotels, attractions)\n        return itinerary\n```\n\n----------------------------------------\n\nTITLE: Generating Travel Recommendations Using SQL Queries in Python\nDESCRIPTION: Function that creates and executes SQL queries for flights, hotels, and attractions based on user preferences. It retrieves data from a travel database and compiles the results into an itinerary, with a demonstration of how to use the Travel_Agent class.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fr/09-metacognition/README.md#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef generate_recommendations(preferences):\n    flight_query = generate_sql_query(\"flights\", preferences)\n    hotel_query = generate_sql_query(\"hotels\", preferences)\n    attraction_query = generate_sql_query(\"attractions\", preferences)\n    \n    flights = execute_sql_query(flight_query)\n    hotels = execute_sql_query(hotel_query)\n    attractions = execute_sql_query(attraction_query)\n    \n    itinerary = {\n        \"flights\": flights,\n        \"hotels\": hotels,\n        \"attractions\": attractions\n    }\n    return itinerary\n\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = generate_recommendations(preferences)\nprint(\"Suggested Itinerary:\", itinerary)\n```\n\n----------------------------------------\n\nTITLE: Enhanced Travel Preference Adjustment with Schema-based Reasoning\nDESCRIPTION: This snippet implements an enhanced feedback processing system that incorporates schema-based reasoning to adjust user preferences. It uses environmental awareness to make intelligent adjustments to related preferences based on the feedback and predefined schema rules.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ndef adjust_based_on_feedback(feedback, preferences, schema):\n    # Adjust preferences based on user feedback\n    if \"liked\" in feedback:\n        preferences[\"favorites\"] = feedback[\"liked\"]\n    if \"disliked\" in feedback:\n        preferences[\"avoid\"] = feedback[\"disliked\"]\n    # Reasoning based on schema to adjust other related preferences\n    for field in schema:\n        if field in preferences:\n            preferences[field] = adjust_based_on_environment(feedback, field, schema)\n    return preferences\n\ndef adjust_based_on_environment(feedback, field, schema):\n    # Custom logic to adjust preferences based on schema and feedback\n    if field in feedback[\"liked\"]:\n        return schema[field][\"positive_adjustment\"]\n    elif field in feedback[\"disliked\"]:\n        return schema[field][\"negative_adjustment\"]\n    return schema[field][\"default\"]\n\ndef generate_code_to_fetch_data(preferences):\n    # Generate code to fetch flight data based on updated preferences\n    return f\"fetch_flights(preferences={preferences})\"\n\ndef generate_code_to_fetch_hotels(preferences):\n    # Generate code to fetch hotel data based on updated preferences\n    return f\"fetch_hotels(preferences={preferences})\"\n\ndef execute_code(code):\n    # Simulate execution of code and return mock data\n    return {\"data\": f\"Executed: {code}\"}\n\ndef generate_itinerary(flights, hotels, attractions):\n    # Generate itinerary based on flights, hotels, and attractions\n    return {\"flights\": flights, \"hotels\": hotels, \"attractions\": attractions}\n\n# Example schema\nschema = {\n    \"favorites\": {\"positive_adjustment\": \"increase\", \"negative_adjustment\": \"decrease\", \"default\": \"neutral\"},\n    \"avoid\": {\"positive_adjustment\": \"decrease\", \"negative_adjustment\": \"increase\", \"default\": \"neutral\"}\n}\n\n# Example usage\npreferences = {\"favorites\": \"sightseeing\", \"avoid\": \"crowded places\"}\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\nupdated_preferences = adjust_based_on_feedback(feedback, preferences, schema)\n```\n\n----------------------------------------\n\nTITLE: Creating a Travel Agent with Semantic Kernel\nDESCRIPTION: Defines the travel agent's instructions and creates a ChatCompletionAgent instance. The instructions specify how the agent should introduce itself, what capabilities it has, and how it should handle user preferences for travel destinations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/03-agentic-design-patterns/code_samples/03-semantic-kernel.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAGENT_INSTRUCTIONS = \"\"\"You are a helpful AI Agent that can help plan vacations for customers.\n\nImportant: When users specify a destination, always plan for that location. Only suggest random destinations when the user hasn't specified a preference.\n\nWhen the conversation begins, introduce yourself with this message:\n\"Hello! I'm your TravelAgent assistant. I can help plan vacations and suggest interesting destinations for you. Here are some things you can ask me:\n1. Plan a day trip to a specific location\n2. Suggest a random vacation destination\n3. Find destinations with specific features (beaches, mountains, historical sites, etc.)\n4. Plan an alternative trip if you don't like my first suggestion\n\nWhat kind of trip would you like me to help you plan today?\"\n\nAlways prioritize user preferences. If they mention a specific destination like \"Bali\" or \"Paris,\" focus your planning on that location rather than suggesting alternatives.\n\"\"\"\n\nagent = ChatCompletionAgent(\n    service=chat_completion_service, \n    plugins=[DestinationsPlugin()],\n    name=\"TravelAgent\",\n    instructions=AGENT_INSTRUCTIONS,\n)\n```\n\n----------------------------------------\n\nTITLE: Enhanced Travel Agent System Message\nDESCRIPTION: A comprehensive system message for a travel agent AI assistant, automatically generated by providing the meta system message with the basic prompt. It includes detailed responsibilities, interaction guidelines, and tone instructions.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/06-building-trustworthy-agents/README.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n**Company Name:** Contoso Travel  \n**Role:** Travel Agent Assistant\n\n**Objective:**  \nYou are an AI-powered travel agent assistant for Contoso Travel, specializing in booking flights and providing exceptional customer service. Your main goal is to assist customers in finding, booking, and managing their flights, all while ensuring that their preferences and needs are met efficiently.\n\n**Key Responsibilities:**\n\n1. **Flight Lookup:**\n    \n    - Assist customers in searching for available flights based on their specified destination, dates, and any other relevant preferences.\n    - Provide a list of options, including flight times, airlines, layovers, and pricing.\n2. **Flight Booking:**\n    \n    - Facilitate the booking of flights for customers, ensuring that all details are correctly entered into the system.\n    - Confirm bookings and provide customers with their itinerary, including confirmation numbers and any other pertinent information.\n3. **Customer Preference Inquiry:**\n    \n    - Actively ask customers for their preferences regarding seating (e.g., aisle, window, extra legroom) and preferred times for flights (e.g., morning, afternoon, evening).\n    - Record these preferences for future reference and tailor suggestions accordingly.\n4. **Flight Cancellation:**\n    \n    - Assist customers in canceling previously booked flights if needed, following company policies and procedures.\n    - Notify customers of any necessary refunds or additional steps that may be required for cancellations.\n5. **Flight Monitoring:**\n    \n    - Monitor the status of booked flights and alert customers in real-time about any delays, cancellations, or changes to their flight schedule.\n    - Provide updates through preferred communication channels (e.g., email, SMS) as needed.\n\n**Tone and Style:**\n\n- Maintain a friendly, professional, and approachable demeanor in all interactions with customers.\n- Ensure that all communication is clear, informative, and tailored to the customer's specific needs and inquiries.\n\n**User Interaction Instructions:**\n\n- Respond to customer queries promptly and accurately.\n- Use a conversational style while ensuring professionalism.\n- Prioritize customer satisfaction by being attentive, empathetic, and proactive in all assistance provided.\n\n**Additional Notes:**\n\n- Stay updated on any changes to airline policies, travel restrictions, and other relevant information that could impact flight bookings and customer experience.\n- Use clear and concise language to explain options and processes, avoiding jargon where possible for better customer understanding.\n\nThis AI assistant is designed to streamline the flight booking process for customers of Contoso Travel, ensuring that all their travel needs are met efficiently and effectively.\n```\n\n----------------------------------------\n\nTITLE: Executing Generated Code for Travel Information in Python\nDESCRIPTION: This code demonstrates the execution of dynamically generated code for retrieving flight and hotel information. It uses the exec() function to run the generated code snippets and collect the results.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef execute_code(code):\n    # Execute the generated code using exec\n    exec(code)\n    result = locals()\n    return result\n\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\n\nflight_code = generate_code_to_fetch_data(preferences)\nhotel_code = generate_code_to_fetch_hotels(preferences)\n\nflights = execute_code(flight_code)\nhotels = execute_code(hotel_code)\n\nprint(\"Flight Options:\", flights)\nprint(\"Hotel Options:\", hotels)\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Planning and Agent Assignment Structure in Python\nDESCRIPTION: Sets up the core data models and client configuration for a travel planning system using Pydantic models and Azure AI services. Includes agent type definitions and task structure models for organizing travel-related subtasks.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/07-planning-design/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\nfrom enum import Enum\nfrom typing import List, Optional, Union\nimport json\nimport os\nfrom typing import Optional\nfrom pprint import pprint\nfrom autogen_core.models import UserMessage, SystemMessage, AssistantMessage\nfrom autogen_ext.models.azure import AzureAIChatCompletionClient\nfrom azure.core.credentials import AzureKeyCredential\n\nclass AgentEnum(str, Enum):\n    FlightBooking = \"flight_booking\"\n    HotelBooking = \"hotel_booking\"\n    CarRental = \"car_rental\"\n    ActivitiesBooking = \"activities_booking\"\n    DestinationInfo = \"destination_info\"\n    DefaultAgent = \"default_agent\"\n    GroupChatManager = \"group_chat_manager\"\n\nclass TravelSubTask(BaseModel):\n    task_details: str\n    assigned_agent: AgentEnum\n\nclass TravelPlan(BaseModel):\n    main_task: str\n    subtasks: List[TravelSubTask]\n    is_greeting: bool\n\nclient = AzureAIChatCompletionClient(\n    model=\"gpt-4o-mini\",\n    endpoint=\"https://models.inference.ai.azure.com\",\n    credential=AzureKeyCredential(os.environ[\"GITHUB_TOKEN\"]),\n    model_info={\n        \"json_output\": False,\n        \"function_calling\": True,\n        \"vision\": True,\n        \"family\": \"unknown\",\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Destinations Plugin with Semantic Kernel Functions\nDESCRIPTION: This code defines a DestinationsPlugin class with two kernel_functions: get_destinations that provides a list of vacation locations, and get_availability that checks if specific destinations are available. These functions will be used as tools by the agent.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/code_samples/04-semantic-kernel-tool.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Define a sample plugin for the sample\nclass DestinationsPlugin:\n    \"\"\"A List of Destinations for vacation.\"\"\"\n\n    @kernel_function(description=\"Provides a list of vacation destinations.\")\n    def get_destinations(self) -> Annotated[str, \"Returns the vacation destinations.\"]:\n        return \"\"\"\n        Barcelona, Spain\n        Paris, France\n        Berlin, Germany\n        Tokyo, Japan\n        New York, USA\n        \"\"\"\n\n    @kernel_function(description=\"Provides the availability of a destination.\")\n    def get_availability(\n        self, destination: Annotated[str, \"The destination to check availability for.\"]\n    ) -> Annotated[str, \"Returns the availability of the destination.\"]:\n        return \"\"\"\n        Barcelona - Unavailable\n        Paris - Available\n        Berlin - Available\n        Tokyo - Unavailable\n        New York - Available\n        \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Travel Agent Class with RAG Tool Integration\nDESCRIPTION: Implementation of Travel_Agent class using RAG (Retrieval Augmented Generation) tool for museum recommendations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/09-metacognition/README.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.rag_tool = RAGTool()\n\n    def get_museums_in_paris(self):\n        user_input = \"I want to visit museums in Paris.\"\n        response = self.rag_tool.retrieve_and_generate(user_input)\n        return response\n\ntravel_agent = Travel_Agent()\nmuseums = travel_agent.get_museums_in_paris()\nprint(\"Top Museums in Paris:\", museums)\n```\n\n----------------------------------------\n\nTITLE: Initializing Travel Agent with Pre-loaded Context - Python\nDESCRIPTION: This Python snippet demonstrates how to initialize a `TravelAgent` class with pre-loaded context. The context is a dictionary containing information about popular destinations. The class then retrieves and formats the information upon request.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/zh/09-metacognition/README.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass TravelAgent:\n    def __init__(self):\n        # Pre-load popular destinations and their information\n        self.context = {\n            \"Paris\": {\"country\": \"France\", \"currency\": \"Euro\", \"language\": \"French\", \"attractions\": [\"Eiffel Tower\", \"Louvre Museum\"]},\n            \"Tokyo\": {\"country\": \"Japan\", \"currency\": \"Yen\", \"language\": \"Japanese\", \"attractions\": [\"Tokyo Tower\", \"Shibuya Crossing\"]},\n            \"New York\": {\"country\": \"USA\", \"currency\": \"Dollar\", \"language\": \"English\", \"attractions\": [\"Statue of Liberty\", \"Times Square\"]},\n            \"Sydney\": {\"country\": \"Australia\", \"currency\": \"Dollar\", \"language\": \"English\", \"attractions\": [\"Sydney Opera House\", \"Bondi Beach\"]}\n        }\n\n    def get_destination_info(self, destination):\n        # Fetch destination information from pre-loaded context\n        info = self.context.get(destination)\n        if info:\n            return f\"{destination}:\\nCountry: {info['country']}\\nCurrency: {info['currency']}\\nLanguage: {info['language']}\\nAttractions: {', '.join(info['attractions'])}\"\n        else:\n            return f\"Sorry, we don't have information on {destination}.\"\n\n# Example usage\ntravel_agent = TravelAgent()\nprint(travel_agent.get_destination_info(\"Paris\"))\nprint(travel_agent.get_destination_info(\"Tokyo\"))\n```\n\n----------------------------------------\n\nTITLE: Travel Agent Booking Implementation\nDESCRIPTION: Example implementation showing how to use the Travel Agent class in a booking context with preference handling and feedback processing.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ko/09-metacognition/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        itinerary = create_itinerary(flights, hotels, attractions)\n        return itinerary\n\n    def adjust_based_on_feedback(self, feedback):\n        self.experience_data.append(feedback)\n        self.user_preferences = adjust_preferences(self.user_preferences, feedback)\n\n# Example usage within a booing request\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\ntravel_agent.adjust_based_on_feedback(feedback)\n```\n\n----------------------------------------\n\nTITLE: Gathering Preferences for Travel Agent in Python\nDESCRIPTION: This snippet initializes a Travel_Agent object and gathers user preferences for a trip to Paris, including destination, travel dates, budget, and interests. The preferences are collected in a dictionary format before being passed to the travel agent for processing.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG with Azure AI Agent Service and Semantic Kernel\nDESCRIPTION: Complete implementation of a RAG system using Azure AI Agent Service. The function authenticates, uploads a document, creates a vector store, configures an agent with specific instructions, and processes user queries with appropriate responses based on document content.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-semantic-kernel-azure-ai-agent.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    async with (\n        DefaultAzureCredential() as creds,\n        AzureAIAgent.create_client(credential=creds) as client,\n    ):\n        file: OpenAIFile = await client.agents.upload_file_and_poll(file_path=\"document.md\", purpose=\"assistants\")\n        vector_store: VectorStore = await client.agents.create_vector_store_and_poll(\n            file_ids=[file.id], name=\"my_vectorstore\"\n        )\n\n        # Define agent name and instructions tailored for RAG.\n        AGENT_NAME = \"RAGAgent\"\n        AGENT_INSTRUCTIONS = \"\"\"\n        You are an AI assistant designed to answer user questions using only the information retrieved from the provided document(s).\n\n        - If a user's question cannot be answered using the retrieved context, **you must clearly respond**: \n        \"I'm sorry, but the uploaded document does not contain the necessary information to answer that question.\"\n        - Do not answer from general knowledge or reasoning. Do not make assumptions or generate hypothetical explanations.\n        - Do not provide definitions, tutorials, or commentary that is not explicitly grounded in the content of the uploaded file(s).\n        - If a user asks a question like \"What is a Neural Network?\", and this is not discussed in the uploaded document, respond as instructed above.\n        - For questions that do have relevant content in the document (e.g., Contoso's travel insurance coverage), respond accurately, and cite the document explicitly.\n\n        You must behave as if you have no external knowledge beyond what is retrieved from the uploaded document.\n        \"\"\"\n\n        \n        # Create file search tool with uploaded resources\n        file_search = FileSearchTool(vector_store_ids=[vector_store.id])\n\n        # 3. Create an agent on the Azure AI agent service with the file search tool\n        agent_definition = await client.agents.create_agent(\n            model=\"gpt-4o\",  # This model should match your Azure OpenAI deployment.\n            name=AGENT_NAME,\n            instructions=AGENT_INSTRUCTIONS,\n            tools=file_search.definitions,\n            tool_resources=file_search.resources,\n        )\n        \n        # Create the Azure AI Agent using the client and definition.\n        agent = AzureAIAgent(\n            client=client,\n            definition=agent_definition,\n        )\n        \n        # Create a thread to hold the conversation\n        # If no thread is provided, a new thread will be\n        # created and returned with the initial response\n        thread: AzureAIAgentThread | None = None\n        \n        # Example user queries.\n        user_inputs = [\n            \"Can you explain Contoso's travel insurance coverage?\",  # Relevant context.\n            \"What is a Neural Network?\"  # No relevant context from the document. Will not contain a source annotation.\n        ]\n        \n        try:\n            for user_input in user_inputs:\n                print(f\"# User: '{user_input}'\")\n                # Invoke the agent for the specified thread for response\n                async for response in agent.invoke(messages=user_input, thread=thread):\n                    print(f\"# {response.name}: {response}\")\n                    thread = response.thread\n        finally:\n            # Clean up resources.\n            await thread.delete() if thread else None\n            await client.agents.delete_vector_store(vector_store.id)\n            await client.agents.delete_file(file.id)\n            await client.agents.delete_agent(agent.id)\n            print(\"\\nCleaned up agent, thread, file, and vector store.\")\n\nawait main()\n```\n\n----------------------------------------\n\nTITLE: Generating Travel Recommendations with Azure OpenAI in Python\nDESCRIPTION: This Python code defines a TravelAgent class that generates travel recommendations using Azure OpenAI API. Dependencies include 'requests' and 'json' libraries. The class takes user preferences and destination data to generate prompts, which are sent to the Azure OpenAI API. The API's response is processed to extract travel recommendations. Key parameters include 'api_key' for authentication and 'endpoint' for the API URL. The code returns a list of recommended destinations. Limitations include dependency on API access and handling errors from the API responses.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ko/09-metacognition/README.md#2025-04-18_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport requests\nimport json\n\nclass TravelAgent:\n    def __init__(self, destinations):\n        self.destinations = destinations\n\n    def get_recommendations(self, preferences, api_key, endpoint):\n        # Generate a prompt for the Azure OpenAI\n        prompt = self.generate_prompt(preferences)\n        \n        # Define headers and payload for the request\n        headers = {\n            'Content-Type': 'application/json',\n            'Authorization': f'Bearer {api_key}'\n        }\n        payload = {\n            \"prompt\": prompt,\n            \"max_tokens\": 150,\n            \"temperature\": 0.7\n        }\n        \n        # Call the Azure OpenAI API to get the re-ranked and scored destinations\n        response = requests.post(endpoint, headers=headers, json=payload)\n        response_data = response.json()\n        \n        # Extract and return the recommendations\n        recommendations = response_data['choices'][0]['text'].strip().split('\\n')\n        return recommendations\n\n    def generate_prompt(self, preferences):\n        prompt = \"Here are the travel destinations ranked and scored based on the following user preferences:\\n\"\n        for key, value in preferences.items():\n            prompt += f\"{key}: {value}\\n\"\n        prompt += \"\\nDestinations:\\n\"\n        for destination in self.destinations:\n            prompt += f\"- {destination['name']}: {destination['description']}\\n\"\n        return prompt\n\n# Example usage\ndestinations = [\n    {\"name\": \"Paris\", \"description\": \"City of lights, known for its art, fashion, and culture.\"},\n    {\"name\": \"Tokyo\", \"description\": \"Vibrant city, famous for its modernity and traditional temples.\"},\n    {\"name\": \"New York\", \"description\": \"The city that never sleeps, with iconic landmarks and diverse culture.\"},\n    {\"name\": \"Sydney\", \"description\": \"Beautiful harbour city, known for its opera house and stunning beaches.\"},\n]\n\npreferences = {\"activity\": \"sightseeing\", \"culture\": \"diverse\"}\napi_key = 'your_azure_openai_api_key'\nendpoint = 'https://your-endpoint.com/openai/deployments/your-deployment-name/completions?api-version=2022-12-01'\n\ntravel_agent = TravelAgent(destinations)\nrecommendations = travel_agent.get_recommendations(preferences, api_key, endpoint)\nprint(\"Recommended Destinations:\")\nfor rec in recommendations:\n    print(rec)\n```\n\n----------------------------------------\n\nTITLE: Creating a Team of Collaborative Agents with AutoGen in Python\nDESCRIPTION: Demonstrates how to create a team of specialized agents using AutoGen. The code sets up data retrieval and analysis agents that work together in a round-robin pattern to solve tasks collaboratively, with termination based on user approval.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# creating agents, then create a round robin schedule where they can work together, in this case in order\n\n# Data Retrieval Agent\n# Data Analysis Agent\n# Decision Making Agent\n\nagent_retrieve = AssistantAgent(\n    name=\"dataretrieval\",\n    model_client=model_client,\n    tools=[retrieve_tool],\n    system_message=\"Use tools to solve tasks.\"\n)\n\nagent_analyze = AssistantAgent(\n    name=\"dataanalysis\",\n    model_client=model_client,\n    tools=[analyze_tool],\n    system_message=\"Use tools to solve tasks.\"\n)\n\n# conversation ends when user says \"APPROVE\"\ntermination = TextMentionTermination(\"APPROVE\")\n\nuser_proxy = UserProxyAgent(\"user_proxy\", input_func=input)\n\nteam = RoundRobinGroupChat([agent_retrieve, agent_analyze, user_proxy], termination_condition=termination)\n\nstream = team.run_stream(task=\"Analyze data\", max_turns=10)\n# Use asyncio.run(...) when running in a script.\nawait Console(stream)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Chat Agent in Python with AutoGen\nDESCRIPTION: This snippet demonstrates how to create a custom assistant agent with chat capabilities using AutoGen. It includes the agent class definition, message handling, and integration with OpenAI's chat completion model.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom autogen_agentchat.agents import AssistantAgent\nfrom autogen_agentchat.messages import TextMessage\nfrom autogen_ext.models.openai import OpenAIChatCompletionClient\n\n\nclass MyAssistant(RoutedAgent):\n    def __init__(self, name: str) -> None:\n        super().__init__(name)\n        model_client = OpenAIChatCompletionClient(model=\"gpt-4o\")\n        self._delegate = AssistantAgent(name, model_client=model_client)\n\n    @message_handler\n    async def handle_my_message_type(self, message: MyMessageType, ctx: MessageContext) -> None:\n        print(f\"{self.id.type} received message: {message.content}\")\n        response = await self._delegate.on_messages(\n            [TextMessage(content=message.content, source=\"user\")], ctx.cancellation_token\n        )\n        print(f\"{self.id.type} responded: {response.chat_message.content}\")\n```\n\n----------------------------------------\n\nTITLE: Code Generation for Travel Data Retrieval\nDESCRIPTION: Implementation of code generation functionality for fetching travel-related data including flights and hotels. Includes code execution capabilities.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/de/09-metacognition/README.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef generate_code_to_fetch_data(preferences):\n    code = f\"\"\"\n    def search_flights():\n        import requests\n        response = requests.get('https://api.example.com/flights', params={preferences})\n        return response.json()\n    \"\"\"\n    return code\n\ndef generate_code_to_fetch_hotels(preferences):\n    code = f\"\"\"\n    def search_hotels():\n        import requests\n        response = requests.get('https://api.example.com/hotels', params={preferences})\n        return response.json()\n    \"\"\"\n    return code\n\ndef execute_code(code):\n    exec(code)\n    result = locals()\n    return result\n```\n\n----------------------------------------\n\nTITLE: Travel Agent Recommendation Generation in Python\nDESCRIPTION: Creates an initial travel itinerary using retrieved flight, hotel, and attraction information\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nitinerary = create_itinerary(flights, hotels, attractions)\nprint(\"Suggested Itinerary:\", itinerary)\n```\n\n----------------------------------------\n\nTITLE: Re-ranking and Scoring with Azure OpenAI - Python\nDESCRIPTION: This Python snippet demonstrates how to use Azure OpenAI to re-rank and score travel destinations based on user preferences. It generates a prompt, calls the Azure OpenAI API, and extracts the recommendations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/zh/09-metacognition/README.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nclass TravelAgent:\n    def __init__(self, destinations):\n        self.destinations = destinations\n\n    def get_recommendations(self, preferences, api_key, endpoint):\n        # Generate a prompt for the Azure OpenAI\n        prompt = self.generate_prompt(preferences)\n        \n        # Define headers and payload for the request\n        headers = {\n            'Content-Type': 'application/json',\n            'Authorization': f'Bearer {api_key}'\n        }\n        payload = {\n            \"prompt\": prompt,\n            \"max_tokens\": 150,\n            \"temperature\": 0.7\n        }\n        \n        # Call the Azure OpenAI API to get the re-ranked and scored destinations\n        response = requests.post(endpoint, headers=headers, json=payload)\n        response_data = response.json()\n        \n        # Extract and return the recommendations\n        recommendations = response_data['choices'][0]['text'].strip().split('\\n')\n        return recommendations\n\n    def generate_prompt(self, preferences):\n        prompt = \"Here are the travel destinations ranked and scored based on the following user preferences:\\n\"\n        for key, value in preferences.items():\n            prompt += f\"{key}: {value}\\n\"\n        prompt += \"\\nDestinations:\\n\"\n        for destination in self.destinations:\n            prompt += f\"- {destination['name']}: {destination['description']}\\n\"\n        return prompt\n\n# Example usage\ndestinations = [\n    {\"name\": \"Paris\", \"description\": \"City of lights, known for its art, fashion, and culture.\"},\n    {\"name\": \"Tokyo\", \"description\": \"Vibrant city, famous for its modernity and traditional temples.\"},\n    {\"name\": \"New York\", \"description\": \"The city that never sleeps, with iconic landmarks and diverse culture.\"},\n    {\"name\": \"Sydney\", \"description\": \"Beautiful harbour city, known for its opera house and stunning beaches.\"},\n]\n\npreferences = {\"activity\": \"sightseeing\", \"culture\": \"diverse\"}\napi_key = 'your_azure_openai_api_key'\nendpoint = 'https://your-endpoint.com/openai/deployments/your-deployment-name/completions?api-version=2022-12-01'\n\ntravel_agent = TravelAgent(destinations)\nrecommendations = travel_agent.get_recommendations(preferences, api_key, endpoint)\nprint(\"Recommended Destinations:\")\nfor rec in recommendations:\n    print(rec)\n```\n\n----------------------------------------\n\nTITLE: Implementing Unified RAG Query Processing\nDESCRIPTION: Defines an async function that processes queries using both document retrieval and weather data, with integrated evaluation metrics.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-autogen-azuresearch.ipynb#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def ask_unified_rag(query: str, evaluator: RAGEvaluator, location: str = None):\n    \"\"\"\n    A unified RAG function that combines both document retrieval and weather data\n    based on the query and optional location parameter.\n    \n    Args:\n        query: The user's question\n        evaluator: The RAG evaluator to measure response quality\n        location: Optional location for weather queries\n    \"\"\"\n    try:\n        # Get context from both sources\n        retrieval_context = get_retrieval_context(query)\n        \n        # If location is provided, add weather data\n        weather_context = \"\"\n        if location:\n            weather_context = get_weather_data(location)\n            weather_intro = f\"\\nWeather Information for {location}:\\n\"\n        else:\n            weather_intro = \"\"\n        \n        # Augment the query with both contexts if available\n        augmented_query = (\n            f\"Retrieved Context:\\n{retrieval_context}\\n\\n\"\n            f\"{weather_intro}{weather_context}\\n\\n\"\n            f\"User Query: {query}\\n\\n\"\n            \"Based ONLY on the above context, please provide the answer.\"\n        )\n\n        # Send the augmented query as a user message\n        start_time = time.time()\n        response = await assistant.on_messages(\n            [TextMessage(content=augmented_query, source=\"user\")],\n            cancellation_token=CancellationToken(),\n        )\n        processing_time = time.time() - start_time\n\n        # Create combined context for evaluation\n        combined_context = documents.copy()  # Start with travel documents\n        \n        # Add weather as a document if it exists\n        if location and weather_context:\n            combined_context.append({\"id\": f\"weather-{location}\", \"content\": weather_context})\n        \n        # Evaluate the response\n        metrics = evaluator.evaluate_response(\n            query=query,\n            response=response.chat_message.content,\n            context=combined_context\n        )\n        \n        result = {\n            'response': response.chat_message.content,\n            'processing_time': processing_time,\n            'metrics': metrics,\n        }\n        \n        # Add location to result if provided\n        if location:\n            result['location'] = location\n            \n        return result\n    except Exception as e:\n        print(f\"Error processing unified query: {e}\")\n        return None\n```\n\n----------------------------------------\n\nTITLE: Enhanced Preference Adjustment with Environmental Awareness in Python\nDESCRIPTION: This snippet shows an improved version of the preference adjustment system that incorporates environmental awareness and reasoning based on a schema. It includes functions for adjusting preferences, generating code, executing it, and creating an itinerary.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndef adjust_based_on_feedback(feedback, preferences, schema):\n    # Adjust preferences based on user feedback\n    if \"liked\" in feedback:\n        preferences[\"favorites\"] = feedback[\"liked\"]\n    if \"disliked\" in feedback:\n        preferences[\"avoid\"] = feedback[\"disliked\"]\n    # Reasoning based on schema to adjust other related preferences\n    for field in schema:\n        if field in preferences:\n            preferences[field] = adjust_based_on_environment(feedback, field, schema)\n    return preferences\n\ndef adjust_based_on_environment(feedback, field, schema):\n    # Custom logic to adjust preferences based on schema and feedback\n    if field in feedback[\"liked\"]:\n        return schema[field][\"positive_adjustment\"]\n    elif field in feedback[\"disliked\"]:\n        return schema[field][\"negative_adjustment\"]\n    return schema[field][\"default\"]\n\ndef generate_code_to_fetch_data(preferences):\n    # Generate code to fetch flight data based on updated preferences\n    return f\"fetch_flights(preferences={preferences})\"\n\ndef generate_code_to_fetch_hotels(preferences):\n    # Generate code to fetch hotel data based on updated preferences\n    return f\"fetch_hotels(preferences={preferences})\"\n\ndef execute_code(code):\n    # Simulate execution of code and return mock data\n    return {\"data\": f\"Executed: {code}\"}\n\ndef generate_itinerary(flights, hotels, attractions):\n    # Generate itinerary based on flights, hotels, and attractions\n    return {\"flights\": flights, \"hotels\": hotels, \"attractions\": attractions}\n\n# Example schema\nschema = {\n    \"favorites\": {\"positive_adjustment\": \"increase\", \"negative_adjustment\": \"decrease\", \"default\": \"neutral\"},\n    \"avoid\": {\"positive_adjustment\": \"decrease\", \"negative_adjustment\": \"increase\", \"default\": \"neutral\"}\n}\n\n# Example usage\npreferences = {\"favorites\": \"sightseeing\", \"avoid\": \"crowded places\"}\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\nupdated_preferences = adjust_based_on_feedback(feedback, preferences, schema)\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Provider Class\nDESCRIPTION: Class implementation for managing context retrieval from vector database and weather information, combining both for enhanced responses\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-autogen-chromadb.ipynb#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass ContextProvider:\n    def __init__(self, collection):\n        self.collection = collection\n        # Simulated weather database\n        self.weather_database = {\n            \"new york\": {\"temperature\": 72, \"condition\": \"Partly Cloudy\", \"humidity\": 65, \"wind\": \"10 mph\"},\n            \"london\": {\"temperature\": 60, \"condition\": \"Rainy\", \"humidity\": 80, \"wind\": \"15 mph\"},\n            \"tokyo\": {\"temperature\": 75, \"condition\": \"Sunny\", \"humidity\": 50, \"wind\": \"5 mph\"},\n            \"sydney\": {\"temperature\": 80, \"condition\": \"Clear\", \"humidity\": 45, \"wind\": \"12 mph\"},\n            \"paris\": {\"temperature\": 68, \"condition\": \"Cloudy\", \"humidity\": 70, \"wind\": \"8 mph\"},\n        }\n    \n    def get_retrieval_context(self, query: str) -> str:\n        \"\"\"Retrieves relevant documents from vector database based on query.\"\"\"\n        results = self.collection.query(\n            query_texts=[query],\n            include=[\"documents\", \"metadatas\"],\n            n_results=2\n        )\n        context_strings = []\n        if results and results.get(\"documents\") and len(results[\"documents\"][0]) > 0:\n            for doc, meta in zip(results[\"documents\"][0], results[\"metadatas\"][0]):\n                context_strings.append(f\"Document: {doc}\\nMetadata: {meta}\")\n        return \"\\n\\n\".join(context_strings) if context_strings else \"No relevant documents found\"\n    \n    def get_weather_data(self, location: str) -> str:\n        \"\"\"Simulates retrieving weather data for a given location.\"\"\"\n        if not location:\n            return \"\"\n            \n        location_key = location.lower()\n        if location_key in self.weather_database:\n            data = self.weather_database[location_key]\n            return f\"Weather for {location.title()}:\\n\" \\\n                   f\"Temperature: {data['temperature']}°F\\n\" \\\n                   f\"Condition: {data['condition']}\\n\" \\\n                   f\"Humidity: {data['humidity']}%\\n\" \\\n                   f\"Wind: {data['wind']}\"\n        else:\n            return f\"No weather data available for {location}.\"\n    \n    def get_unified_context(self, query: str, location: str = None) -> str:\n        \"\"\"Returns a unified context combining both document retrieval and weather data.\"\"\"\n        retrieval_context = self.get_retrieval_context(query)\n        \n        weather_context = \"\"\n        if location:\n            weather_context = self.get_weather_data(location)\n            weather_intro = f\"\\nWeather Information for {location}:\\n\"\n        else:\n            weather_intro = \"\"\n        \n        return f\"Retrieved Context:\\n{retrieval_context}\\n\\n{weather_intro}{weather_context}\"\n```\n\n----------------------------------------\n\nTITLE: Regenerating and Executing Code with Updated Preferences in Python\nDESCRIPTION: This code snippet demonstrates how to regenerate and execute code based on updated user preferences for flight and hotel data, then generate a new travel itinerary. It focuses on the process of taking feedback-adjusted preferences and using them to create updated travel recommendations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# Regenerate and execute code with updated preferences\nupdated_flight_code = generate_code_to_fetch_data(updated_preferences)\nupdated_hotel_code = generate_code_to_fetch_hotels(updated_preferences)\n\nupdated_flights = execute_code(updated_flight_code)\nupdated_hotels = execute_code(updated_hotel_code)\n\nupdated_itinerary = generate_itinerary(updated_flights, updated_hotels, feedback[\"liked\"])\nprint(\"Updated Itinerary:\", updated_itinerary)\n```\n\n----------------------------------------\n\nTITLE: Creating Itinerary in Python\nDESCRIPTION: This snippet shows the process of creating an itinerary by utilizing the retrieved flight, hotel, and attraction information. It compiles these elements into a structured plan for the user.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nitinerary = create_itinerary(flights, hotels, attractions)\nprint(\"Suggested Itinerary:\", itinerary)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Planning Agent with Azure AI in Python\nDESCRIPTION: This snippet shows how to use the Azure AI client to create a planning agent. It defines system and user messages, sends them to the AI model, and processes the JSON response to generate a travel plan.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/hi/07-planning-design/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = AzureAIChatCompletionClient(\n    model=\"gpt-4o-mini\",\n    endpoint=\"https://models.inference.ai.azure.com\",\n    credential=AzureKeyCredential(os.environ[\"GITHUB_TOKEN\"]),\n    model_info={\n        \"json_output\": False,\n        \"function_calling\": True,\n        \"vision\": True,\n        \"family\": \"unknown\",\n    },\n)\n\nmessages = [\n    SystemMessage(content=\"\"\"You are an planner agent.\n    Your job is to decide which agents to run based on the user's request.\n                      Provide your response in JSON format with the following structure:\n{'main_task': 'Plan a family trip from Singapore to Melbourne.',\n 'subtasks': [{'assigned_agent': 'flight_booking',\n               'task_details': 'Book round-trip flights from Singapore to '\n                               'Melbourne.'}]\n    Below are the available agents specialised in different tasks:\n    - FlightBooking: For booking flights and providing flight information\n    - HotelBooking: For booking hotels and providing hotel information\n    - CarRental: For booking cars and providing car rental information\n    - ActivitiesBooking: For booking activities and providing activity information\n    - DestinationInfo: For providing information about destinations\n    - DefaultAgent: For handling general requests\"\"\", source=\"system\"),\n    UserMessage(\n        content=\"Create a travel plan for a family of 2 kids from Singapore to Melboune\", source=\"user\"),\n]\n\nresponse = await client.create(messages=messages, extra_create_args={\"response_format\": 'json_object'})\n\nresponse_content: Optional[str] = response.content if isinstance(\n    response.content, str) else None\nif response_content is None:\n    raise ValueError(\"Response content is not a valid JSON string\" )\n\npprint(json.loads(response_content))\n```\n\n----------------------------------------\n\nTITLE: Intent-Based Search and Result Personalization in Python\nDESCRIPTION: This collection of functions implements intent-based search functionality. It determines the user intent, applies context, performs specialized searches based on intent type, and personalizes results based on user history.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef search_with_intent(query, preferences, user_history):\n    intent = identify_intent(query)\n    context = analyze_context(query, user_history)\n    if intent == \"informational\":\n        search_results = search_information(query, preferences)\n    elif intent == \"navigational\":\n        search_results = search_navigation(query)\n    elif intent == \"transactional\":\n        search_results = search_transaction(query, preferences)\n    personalized_results = personalize_results(search_results, user_history)\n    return personalized_results\n\ndef search_information(query, preferences):\n    # Example search logic for informational intent\n    results = search_web(f\"best {preferences['interests']} in {preferences['destination']}\")\n    return results\n\ndef search_navigation(query):\n    # Example search logic for navigational intent\n    results = search_web(query)\n    return results\n\ndef search_transaction(query, preferences):\n    # Example search logic for transactional intent\n    results = search_web(f\"book {query} to {preferences['destination']}\")\n    return results\n\ndef personalize_results(results, user_history):\n    # Example personalization logic\n    personalized = [result for result in results if result not in user_history]\n    return personalized[:10]  # Return top 10 personalized results\n```\n\n----------------------------------------\n\nTITLE: Adjusting Preferences Based on Feedback in Python\nDESCRIPTION: This code defines a function `adjust_based_on_feedback` that updates user preferences based on feedback (liked and disliked items). The function modifies the input preferences dictionary based on the user's likes and dislikes, creating or updating the 'favorites' and 'avoid' keys. It demonstrates how to incorporate user feedback to refine recommendations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ja/09-metacognition/README.md#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef adjust_based_on_feedback(feedback, preferences):\n    # Adjust preferences based on user feedback\n    if \"liked\" in feedback:\n        preferences[\"favorites\"] = feedback[\"liked\"]\n    if \"disliked\" in feedback:\n        preferences[\"avoid\"] = feedback[\"disliked\"]\n    return preferences\n\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\nupdated_preferences = adjust_based_on_feedback(feedback, preferences)\n\n# Regenerate and execute code with updated preferences\nupdated_flight_code = generate_code_to_fetch_data(updated_preferences)\nupdated_hotel_code = generate_code_to_fetch_hotels(updated_preferences)\n\nupdated_flights = execute_code(updated_flight_code)\nupdated_hotels = execute_code(updated_hotel_code)\n\nupdated_itinerary = generate_itinerary(updated_flights, updated_hotels, attractions)\nprint(\"Updated Itinerary:\", updated_itinerary)\n\n```\n\n----------------------------------------\n\nTITLE: Implementing PromptPlugin for RAG with ChromaDB Integration\nDESCRIPTION: Defines a PromptPlugin class that connects to ChromaDB for retrieving context and building augmented prompts. This plugin handles the retrieval-augmentation functionality of the RAG pattern.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-semantic-kernel-chromadb.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass PromptPlugin:\n\n    def __init__(self, collection: \"Collection\"):\n        self.collection = collection\n\n    @kernel_function(\n        name=\"build_augmented_prompt\",\n        description=\"Build an augmented prompt using retrieval context.\"\n    )\n    def build_augmented_prompt(self, query: str, retrieval_context: str) -> str:\n        return (\n            f\"Retrieved Context:\\n{retrieval_context}\\n\\n\"\n            f\"User Query: {query}\\n\\n\"\n            \"Based ONLY on the above context, please provide your answer.\"\n        )\n    \n    @kernel_function(name=\"retrieve_context\", description=\"Retrieve context from the database.\")\n    def get_retrieval_context(self, query: str) -> str:\n        results = self.collection.query(\n            query_texts=[query],\n            include=[\"documents\", \"metadatas\"],\n            n_results=2\n        )\n        context_entries = []\n        if results and results.get(\"documents\") and results[\"documents\"][0]:\n            for doc, meta in zip(results[\"documents\"][0], results[\"metadatas\"][0]):\n                context_entries.append(f\"Document: {doc}\\nMetadata: {meta}\")\n        return \"\\n\\n\".join(context_entries) if context_entries else \"No retrieval context found.\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a Travel Agent Class in Python\nDESCRIPTION: This snippet defines a basic Travel Agent class with initialization and a method to gather user preferences. It serves as the foundation for a travel recommendation system that will later use SQL queries to retrieve relevant travel data.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n```\n\n----------------------------------------\n\nTITLE: Retrieving Travel Information Search Functions\nDESCRIPTION: Functions to search for flights, hotels, and attractions based on user preferences\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nflights = search_flights(preferences)\nhotels = search_hotels(preferences)\nattractions = search_attractions(preferences)\n```\n\n----------------------------------------\n\nTITLE: Adjust Preferences Based on Feedback - Initial Version\nDESCRIPTION: This function adjusts user preferences based on feedback, specifically \"liked\" and \"disliked\" items. It directly updates the 'favorites' and 'avoid' lists in the preferences dictionary. The updated preferences are then used to regenerate and execute code for fetching data.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/09-metacognition/README.md#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n```python\ndef adjust_based_on_feedback(feedback, preferences):\n    # Adjust preferences based on user feedback\n    if \"liked\" in feedback:\n        preferences[\"favorites\"] = feedback[\"liked\"]\n    if \"disliked\" in feedback:\n        preferences[\"avoid\"] = feedback[\"disliked\"]\n    return preferences\n\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\nupdated_preferences = adjust_based_on_feedback(feedback, preferences)\n\n# Regenerate and execute code with updated preferences\nupdated_flight_code = generate_code_to_fetch_data(updated_preferences)\nupdated_hotel_code = generate_code_to_fetch_hotels(updated_preferences)\n\nupdated_flights = execute_code(updated_flight_code)\nupdated_hotels = execute_code(updated_hotel_code)\n\nupdated_itinerary = generate_itinerary(updated_flights, updated_hotels, attractions)\nprint(\"Updated Itinerary:\", updated_itinerary)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining SearchPlugin for Azure AI Search Integration\nDESCRIPTION: This class defines a SearchPlugin that interacts with Azure AI Search. It includes methods for building augmented prompts and retrieving documents from the search service. The plugin is designed to be used with Semantic Kernel.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-semantic-kernel-azuresearch.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass SearchPlugin:\n\n    def __init__(self, search_client: SearchClient):\n        self.search_client = search_client\n\n    @kernel_function(\n        name=\"build_augmented_prompt\",\n        description=\"Build an augmented prompt using retrieval context or function results.\",\n    )\n    def build_augmented_prompt(self, query: str, retrieval_context: str) -> str:\n        return (\n            f\"Retrieved Context:\\n{retrieval_context}\\n\\n\"\n            f\"User Query: {query}\\n\\n\"\n            \"First review the retrieved context, if this does not answer the query, try calling an available plugin functions that might give you an answer. If no context is available, say so.\"\n        )\n    \n    @kernel_function(\n        name=\"retrieve_documents\",\n        description=\"Retrieve documents from the Azure Search service.\",\n    )\n    def get_retrieval_context(self, query: str) -> str:\n        results = self.search_client.search(query)\n        context_strings = []\n        for result in results:\n            context_strings.append(f\"Document: {result['content']}\")\n        return \"\\n\\n\".join(context_strings) if context_strings else \"No results found\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Relevance Scores for Travel Recommendations in Python\nDESCRIPTION: This code snippet provides a method for calculating relevance scores of travel items based on user queries in Python. The relevance_score function awards points according to how well an item matches the user's interests, budget, and destination. It requires input of item details and user query and returns a numerical score representing the match quality. The function assumes items are dictionaries containing category, price, and location fields.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ko/09-metacognition/README.md#2025-04-18_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef relevance_score(item, query):\n    score = 0\n    if item['category'] in query['interests']:\n        score += 1\n    if item['price'] <= query['budget']:\n        score += 1\n    if item['location'] == query['destination']:\n        score += 1\n    return score\n```\n\n----------------------------------------\n\nTITLE: Analyzing Query Context with User History in Python\nDESCRIPTION: This function combines the current query with user history to understand context. It creates a context object containing both the current query and history information for improved search relevance.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef analyze_context(query, user_history):\n    # Combine current query with user history to understand context\n    context = {\n        \"current_query\": query,\n        \"user_history\": user_history\n    }\n    return context\n```\n\n----------------------------------------\n\nTITLE: Adjusting User Preferences Based on Feedback in Python\nDESCRIPTION: This snippet provides a function to adjust user preferences by incorporating feedback about liked and disliked attractions. It modifies the existing preferences to help the agent generate more suited recommendations subsequently.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef adjust_preferences(preferences, feedback):\n    if \"liked\" in feedback:\n        preferences[\"favorites\"] = feedback[\"liked\"]\n    if \"disliked\" in feedback:\n        preferences[\"avoid\"] = feedback[\"disliked\"]\n    return preferences\n\npreferences = adjust_preferences(preferences, feedback)\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG as a Prompt Technique for Museum Search in Python\nDESCRIPTION: This snippet demonstrates RAG (Retrieval Augmented Generation) as a prompt technique by manually creating a search function for museums in Paris. The function creates a specific prompt and uses a web search to retrieve the results.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef search_museums_in_paris():\n    prompt = \"Find top museums in Paris\"\n    search_results = search_web(prompt)\n    return search_results\n\nmuseums = search_museums_in_paris()\nprint(\"Top Museums in Paris:\", museums)\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Queries with SQLite in Python\nDESCRIPTION: This function connects to an SQLite database, executes a provided SQL query, and returns the results. It handles the database connection, cursor creation, query execution, and proper connection closure.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport sqlite3\n\ndef execute_sql_query(query, database=\"travel.db\"):\n    connection = sqlite3.connect(database)\n    cursor = connection.cursor()\n    cursor.execute(query)\n    results = cursor.fetchall()\n    connection.close()\n    return results\n```\n\n----------------------------------------\n\nTITLE: Processing User Travel Feedback to Update Preferences\nDESCRIPTION: This snippet shows a feedback processing system that updates user preferences based on liked and disliked attractions. It then regenerates travel recommendations including flights, hotels, and attractions based on these updated preferences.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\nupdated_preferences = adjust_based_on_feedback(feedback, preferences)\n\n# Regenerate and execute code with updated preferences\nupdated_flight_code = generate_code_to_fetch_data(updated_preferences)\nupdated_hotel_code = generate_code_to_fetch_hotels(updated_preferences)\n\nupdated_flights = execute_code(updated_flight_code)\nupdated_hotels = execute_code(updated_hotel_code)\n\nupdated_itinerary = generate_itinerary(updated_flights, updated_hotels, attractions)\nprint(\"Updated Itinerary:\", updated_itinerary)\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG-Based Travel Agent Class in Python\nDESCRIPTION: This snippet shows the implementation of a Travel_Agent class using the RAG approach. It includes methods for gathering preferences, retrieving information, generating recommendations, and adjusting based on feedback.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fr/09-metacognition/README.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        itinerary = create_itinerary(flights, hotels, attractions)\n        return itinerary\n\n    def adjust_based_on_feedback(self, feedback):\n        self.experience_data.append(feedback)\n        self.user_preferences = adjust_preferences(self.user_preferences, feedback)\n        new_itinerary = self.generate_recommendations()\n        return new_itinerary\n\n# Example usage\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\nnew_itinerary = travel_agent.adjust_based_on_feedback(feedback)\nprint(\"Updated Itinerary:\", new_itinerary)\n```\n\n----------------------------------------\n\nTITLE: Booking Plugin Implementation\nDESCRIPTION: Implements the core booking functionality including imports and class structure for hotel and flight booking methods using Semantic Kernel decorators.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/code_samples/04-semantic-kernel-python-aiagent-bookinghotel.ipynb#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nfrom typing import Annotated\n\nfrom semantic_kernel.functions import kernel_function\n```\n\n----------------------------------------\n\nTITLE: Implementing BookingPlugin Class for Hotel and Flight Bookings\nDESCRIPTION: Class implementation for booking hotels and flights using the SerpAPI Google Search API. Includes methods for hotel booking and flight booking with parameters for dates, locations, and search criteria.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/08-multi-agent/code_samples/08-python_multi_aiagent_bookinghotel.ipynb#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Define Booking Plugin\nclass BookingPlugin:\n    \"\"\"Booking Plugin for customers\"\"\"\n    @kernel_function(description=\"booking hotel\")\n    def booking_hotel(self,query: Annotated[str, \"The name of the city\"], check_in_date: Annotated[str, \"Hotel Check-in Time\"], check_out_date: Annotated[str, \"Hotel Check-in Time\"])-> Annotated[str, \"Return the result of booking hotel infomation\"]:\n\n        params = {\n            \"engine\": \"google_hotels\",\n            \"q\": query,\n            \"check_in_date\": check_in_date,\n            \"check_out_date\": check_out_date,\n            \"adults\": \"2\",\n            \"currency\": \"USD\",\n            \"gl\": \"us\",\n            \"hl\": \"en\",\n            \"api_key\": SERPAPI_SEARCH_API_KEY\n        }\n\n        response = requests.get(SERPAPI_SEARCH_ENDPOINT, params=params)\n        if response.status_code == 200:\n            response = response.json()\n            return response[\"properties\"]\n        else:\n            return None\n\n    \n    @kernel_function(description=\"booking fight\")\n    def  booking_fight(self,origin: Annotated[str, \"The name of Departure\"], destination: Annotated[str, \"The name of Destination\"], outbound_date: Annotated[str, \"The date of outbound\"], return_date: Annotated[str, \"The date of Return_date\"])-> Annotated[str, \"Return the result of booking fight infomation\"]:\n        \n        go_params = {\n            \"engine\": \"google_flights\",   \n            \"departure_id\": origin,\n            \"arrival_id\": destination,\n            \"outbound_date\": outbound_date,\n            \"return_date\": return_date,  \n            \"currency\": \"USD\",\n            \"hl\": \"en\",\n            \"api_key\": SERPAPI_SEARCH_API_KEY  \n        }\n\n        print(go_params)\n\n        go_response = requests.get(SERPAPI_SEARCH_ENDPOINT, params=go_params)\n\n\n        result = ''\n\n        if go_response.status_code == 200:\n            response = go_response.json()\n\n            result += \"# outbound \\n \" + str(response)\n        else:\n            print('error!!!')\n            # return None\n\n        \n        back_params = {\n            \"engine\": \"google_flights\",   \n            \"departure_id\": destination,\n            \"arrival_id\": origin,\n            \"outbound_date\": return_date,\n            \"return_date\": return_date,  \n            \"currency\": \"USD\",\n            \"hl\": \"en\",\n            \"api_key\": SERPAPI_SEARCH_API_KEY  \n        }\n\n\n        print(back_params)\n\n\n        back_response = requests.get(SERPAPI_SEARCH_ENDPOINT, params=back_params)\n\n\n\n        if back_response.status_code == 200:\n            response = back_response.json()\n\n            result += \"\\n # return \\n\"  + str(response)\n\n        else:\n            print('error!!!')\n            # return None\n        \n        print(result)\n\n        return result\n```\n\n----------------------------------------\n\nTITLE: Adjust Preferences Based on Feedback and Schema\nDESCRIPTION: This function refines user preferences based on feedback and incorporates schema awareness. It adjusts preferences related to 'favorites' and 'avoid' based on liked and disliked items from feedback, using a schema that defines positive and negative adjustments for each field. This schema-driven approach allows for more nuanced preference adjustments.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/09-metacognition/README.md#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n```python\ndef adjust_based_on_feedback(feedback, preferences, schema):\n    # Adjust preferences based on user feedback\n    if \"liked\" in feedback:\n        preferences[\"favorites\"] = feedback[\"liked\"]\n    if \"disliked\" in feedback:\n        preferences[\"avoid\"] = feedback[\"disliked\"]\n    # Reasoning based on schema to adjust other related preferences\n    for field in schema:\n        if field in preferences:\n            preferences[field] = adjust_based_on_environment(feedback, field, schema)\n    return preferences\n\ndef adjust_based_on_environment(feedback, field, schema):\n    # Custom logic to adjust preferences based on schema and feedback\n    if field in feedback[\"liked\"]:\n        return schema[field][\"positive_adjustment\"]\n    elif field in feedback[\"disliked\"]:\n        return schema[field][\"negative_adjustment\"]\n    return schema[field][\"default\"]\n\ndef generate_code_to_fetch_data(preferences):\n    # Generate code to fetch flight data based on updated preferences\n    return f\"fetch_flights(preferences={preferences})\"\n\ndef generate_code_to_fetch_hotels(preferences):\n    # Generate code to fetch hotel data based on updated preferences\n    return f\"fetch_hotels(preferences={preferences})\"\n\ndef execute_code(code):\n    # Simulate execution of code and return mock data\n    return {\"data\": f\"Executed: {code}\"}\n\ndef generate_itinerary(flights, hotels, attractions):\n    # Generate itinerary based on flights, hotels, and attractions\n    return {\"flights\": flights, \"hotels\": hotels, \"attractions\": attractions}\n\n# Example schema\nschema = {\n    \"favorites\": {\"positive_adjustment\": \"increase\", \"negative_adjustment\": \"decrease\", \"default\": \"neutral\"},\n    \"avoid\": {\"positive_adjustment\": \"decrease\", \"negative_adjustment\": \"increase\", \"default\": \"neutral\"}\n}\n\n# Example usage\npreferences = {\"favorites\": \"sightseeing\", \"avoid\": \"crowded places\"}\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\nupdated_preferences = adjust_based_on_feedback(feedback, preferences, schema)\n```\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Queries Based on User Preferences in Python\nDESCRIPTION: This function dynamically creates SQL queries based on user preferences. It takes a table name and a dictionary of preferences, then constructs a WHERE clause that filters records matching all the specified criteria.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_33\n\nLANGUAGE: python\nCODE:\n```\ndef generate_sql_query(table, preferences):\n    query = f\"SELECT * FROM {table} WHERE \"\n    conditions = []\n    for key, value in preferences.items():\n        conditions.append(f\"{key}='{value}'\")\n    query += \" AND \".join(conditions)\n    return query\n```\n\n----------------------------------------\n\nTITLE: Intent Identification Function in Python\nDESCRIPTION: A function to classify user queries into transactional, navigational, or informational intents based on keyword analysis\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef identify_intent(query):\n    if \"book\" in query or \"purchase\" in query:\n        return \"transactional\"\n    elif \"website\" in query or \"official\" in query:\n        return \"navigational\"\n    else:\n        return \"informational\"\n```\n\n----------------------------------------\n\nTITLE: Reflecting on Agent Choice and Adjusting Strategy\nDESCRIPTION: Demonstrates an AI agent's ability to reflect on its previous decision and recommend a new strategy based on internal evaluation. The process involves two key steps: reflection and strategy adjustment.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/09-metacognition/README.md#2025-04-18_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nreflection_result = agent.reflect_on_choice()\nprint(reflection_result)\n```\n\nLANGUAGE: python\nCODE:\n```\nadjusted_recommendation = agent.recommend_hotel(hotels, 'highest_quality')\nprint(f\"Adjusted hotel recommendation (highest_quality): {adjusted_recommendation['name']}\")\n```\n\n----------------------------------------\n\nTITLE: Running the AI Agent and Handling Responses with Semantic Kernel\nDESCRIPTION: This complex function demonstrates how to run the AI agent, handle user inputs, process streaming responses, and display the results. It includes function call handling and HTML formatting for output display.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/code_samples/02-semantic-kernel.ipynb#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nuser_inputs = [\n    \"Plan me a day trip.\",\n    \"I don't like that destination. Plan me another vacation.\",\n]\n\nasync def main():\n    thread: ChatHistoryAgentThread | None = None\n\n    for user_input in user_inputs:\n        html_output = (\n            f\"<div style='margin-bottom:10px'>\"\n            f\"<div style='font-weight:bold'>User:</div>\"\n            f\"<div style='margin-left:20px'>{user_input}</div></div>\"\n        )\n\n        agent_name = None\n        full_response: list[str] = []\n        function_calls: list[str] = []\n\n        # Buffer to reconstruct streaming function call\n        current_function_name = None\n        argument_buffer = \"\"\n\n        async for response in agent.invoke_stream(\n            messages=user_input,\n            thread=thread,\n        ):\n            thread = response.thread\n            agent_name = response.name\n            content_items = list(response.items)\n\n            for item in content_items:\n                if isinstance(item, FunctionCallContent):\n                    if item.function_name:\n                        current_function_name = item.function_name\n\n                    # Accumulate arguments (streamed in chunks)\n                    if isinstance(item.arguments, str):\n                        argument_buffer += item.arguments\n                elif isinstance(item, FunctionResultContent):\n                    # Finalize any pending function call before showing result\n                    if current_function_name:\n                        formatted_args = argument_buffer.strip()\n                        try:\n                            parsed_args = json.loads(formatted_args)\n                            formatted_args = json.dumps(parsed_args)\n                        except Exception:\n                            pass  # leave as raw string\n\n                        function_calls.append(f\"Calling function: {current_function_name}({formatted_args})\")\n                        current_function_name = None\n                        argument_buffer = \"\"\n\n                    function_calls.append(f\"\\nFunction Result:\\n\\n{item.result}\")\n                elif isinstance(item, StreamingTextContent) and item.text:\n                    full_response.append(item.text)\n\n        if function_calls:\n            html_output += (\n                \"<div style='margin-bottom:10px'>\"\n                \"<details>\"\n                \"<summary style='cursor:pointer; font-weight:bold; color:#0066cc;'>Function Calls (click to expand)</summary>\"\n                \"<div style='margin:10px; padding:10px; background-color:#f8f8f8; \"\n                \"border:1px solid #ddd; border-radius:4px; white-space:pre-wrap; font-size:14px; color:#333;'>\"\n                f\"{chr(10).join(function_calls)}\"\n                \"</div></details></div>\"\n            )\n\n        html_output += (\n            \"<div style='margin-bottom:20px'>\"\n            f\"<div style='font-weight:bold'>{agent_name or 'Assistant'}:</div>\"\n            f\"<div style='margin-left:20px; white-space:pre-wrap'>{''.join(full_response)}</div></div><hr>\"\n        )\n\n        display(HTML(html_output))\n\nawait main()\n```\n\n----------------------------------------\n\nTITLE: Generating Travel Recommendations Using TravelAgent\nDESCRIPTION: Initializes the TravelAgent with destinations and retrieves personalized recommendations using Azure OpenAI\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fr/09-metacognition/README.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntravel_agent = TravelAgent(destinations)\nrecommendations = travel_agent.get_recommendations(preferences, api_key, endpoint)\nprint(\"Recommended Destinations:\")\nfor rec in recommendations:\n    print(rec)\n```\n\n----------------------------------------\n\nTITLE: 校正型RAG旅行代理示例代码\nDESCRIPTION: 展示旅行代理如何使用检索增强生成方法根据用户反馈调整推荐\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/zh/09-metacognition/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        itinerary = create_itinerary(flights, hotels, attractions)\n        return itinerary\n\n    def adjust_based_on_feedback(self, feedback):\n        self.experience_data.append(feedback)\n        self.user_preferences = adjust_preferences(self.user_preferences, feedback)\n        new_itinerary = self.generate_recommendations()\n        return new_itinerary\n```\n\n----------------------------------------\n\nTITLE: Retrieving Information in Python\nDESCRIPTION: This method, `retrieve_information`, retrieves flights, hotels, and attractions based on the user's preferences. It calls `search_flights`, `search_hotels`, and `search_attractions` functions (assumed to be defined elsewhere) using the stored `user_preferences` and returns the results as a tuple. The functions `search_flights`, `search_hotels`, and `search_attractions` are dependencies.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/09-metacognition/README.md#2025-04-18_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n    def retrieve_information(self):\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Azure Services and GitHub MCP Server\nDESCRIPTION: Sets up the necessary environment variables for Azure OpenAI Service, Semantic Kernel, GitHub MCP Server, and Azure AI Search. These variables are crucial for the demo to function properly.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/11-mcp/code_samples/github-mcp/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nAZURE_OPENAI_CHAT_DEPLOYMENT_NAME=\"\"\nAZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME=\"\"\nAZURE_OPENAI_ENDPOINT=\"\"\nAZURE_OPENAI_API_KEY=\"\"\nAZURE_OPENAI_API_VERSION=\"\"\nAZURE_SEARCH_SERVICE_ENDPOINT=\"\"\nAZURE_SEARCH_API_KEY=\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flight Booking Agent Instructions in Azure AI Foundry\nDESCRIPTION: Detailed prompt instructions for configuring a flight booking AI agent, including task recognition, request processing, and response generation guidelines.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/azure-ai-foundry-agent-creation.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nYou are FlightAgent, a virtual assistant specialized in handling flight-related queries. Your role includes assisting users with searching for flights, retrieving flight details, checking seat availability, and providing real-time flight status. Follow the instructions below to ensure clarity and effectiveness in your responses:\n\n### Task Instructions:\n1. **Recognizing Intent**:\n   - Identify the user's intent based on their request, focusing on one of the following categories:\n     - Searching for flights\n     - Retrieving flight details using a flight ID\n     - Checking seat availability for a specified flight\n     - Providing real-time flight status using a flight number\n   - If the intent is unclear, politely ask users to clarify or provide more details.\n    \n2. **Processing Requests**:\n    - Depending on the identified intent, perform the required task:\n    - For flight searches: Request details such as origin, destination, departure date, and optionally return date.\n    - For flight details: Request a valid flight ID.\n    - For seat availability: Request the flight ID and date and validate inputs.\n    - For flight status: Request a valid flight number.\n    - Perform validations on provided data (e.g., formats of dates, flight numbers, or IDs). If the information is incomplete or invalid, return a friendly request for clarification.\n\n3. **Generating Responses**:\n- Use a tone that is friendly, concise, and supportive.\n- Provide clear and actionable suggestions based on the output of each task.\n- If no data is found or an error occurs, explain it to the user gently and offer alternative actions (e.g., refine search, try another query).\n```\n\n----------------------------------------\n\nTITLE: Intent-Based Search Implementation\nDESCRIPTION: Implementation of search functionality with intent recognition and context awareness. Includes methods for identifying user intent and personalizing search results.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/de/09-metacognition/README.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef identify_intent(query):\n    if \"book\" in query or \"purchase\" in query:\n        return \"transactional\"\n    elif \"website\" in query or \"official\" in query:\n        return \"navigational\"\n    else:\n        return \"informational\"\n\ndef analyze_context(query, user_history):\n    context = {\n        \"current_query\": query,\n        \"user_history\": user_history\n    }\n    return context\n\ndef search_with_intent(query, preferences, user_history):\n    intent = identify_intent(query)\n    context = analyze_context(query, user_history)\n    if intent == \"informational\":\n        search_results = search_information(query, preferences)\n    elif intent == \"navigational\":\n        search_results = search_navigation(query)\n    elif intent == \"transactional\":\n        search_results = search_transaction(query, preferences)\n    personalized_results = personalize_results(search_results, user_history)\n    return personalized_results\n```\n\n----------------------------------------\n\nTITLE: RAG Implementation as a Tool\nDESCRIPTION: Example of implementing RAG as an integrated tool within a Travel Agent class for automated museum searches.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.rag_tool = RAGTool()\n\n    def get_museums_in_paris(self):\n        user_input = \"I want to visit museums in Paris.\"\n        response = self.rag_tool.retrieve_and_generate(user_input)\n        return response\n\ntravel_agent = Travel_Agent()\nmuseums = travel_agent.get_museums_in_paris()\nprint(\"Top Museums in Paris:\", museums)\n```\n\n----------------------------------------\n\nTITLE: Calculating Relevance Score in Python\nDESCRIPTION: The `relevance_score` method calculates a relevance score for an item based on a query. It checks if the item's category is in the query's interests, if the item's price is within the query's budget, and if the item's location matches the query's destination. It returns a numerical score based on these criteria.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/09-metacognition/README.md#2025-04-18_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n    def relevance_score(self, item, query):\n        score = 0\n        if item['category'] in query['interests']:\n            score += 1\n        if item['price'] <= query['budget']:\n            score += 1\n        if item['location'] == query['destination']:\n            score += 1\n        return score\n```\n\n----------------------------------------\n\nTITLE: 初始化旅行代理类的Python实现\nDESCRIPTION: 定义Travel_Agent类，包含收集用户偏好、检索信息、生成推荐和基于反馈调整的方法\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/zh/09-metacognition/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        itinerary = create_itinerary(flights, hotels, attractions)\n        return itinerary\n\n    def adjust_based_on_feedback(self, feedback):\n        self.experience_data.append(feedback)\n        self.user_preferences = adjust_preferences(self.user_preferences, feedback)\n```\n\n----------------------------------------\n\nTITLE: Making Function Call API Request in Python\nDESCRIPTION: Sends a message to the LLM with the function schema, prompting the model to select the appropriate function for the user's query. The model returns a tool call with the function name and arguments rather than the actual answer.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Initial user message\nmessages = [{\"role\": \"user\", \"content\": \"What's the current time in San Francisco\"}] \n\n# First API call: Ask the model to use the function\nresponse = client.chat.completions.create(\n    model=deployment_name,\n    messages=messages,\n    tools=tools,\n    tool_choice=\"auto\",\n)\n\n# Process the model's response\nresponse_message = response.choices[0].message\nmessages.append(response_message)\n\nprint(\"Model's response:\")  \n\nprint(response_message)\n```\n\n----------------------------------------\n\nTITLE: Defining DestinationsPlugin for Travel Information in Python\nDESCRIPTION: This snippet defines a DestinationsPlugin class with kernel functions for retrieving vacation destinations and flight times. It includes a primary and backup method for flight times to handle potential service unavailability.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/10-ai-agents-production/code_samples/10-semantic-kernel.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Define a sample plugin for the sample\nclass DestinationsPlugin:\n    \"\"\"A List of Destinations for vacation.\"\"\"\n\n    @kernel_function(description=\"Provides a list of vacation destinations.\")\n    def get_destinations(self) -> Annotated[str, \"Returns the specials from the menu.\"]:\n        return \"\"\"\n        Barcelona, Spain\n        Paris, France\n        Berlin, Germany\n        Tokyo, Japan\n        New York, USA\n        \"\"\"\n\n    @kernel_function(description=\"Provides available flight times for a destination.\")\n    def get_flight_times(\n        self, destination: Annotated[str, \"The destination to check flight times for.\"]\n    ) -> Annotated[str, \"Returns flight times for the specified destination.\"]:\n        # Return HTTP ERROR 404\n        return \"HTTP ERROR 404: Flight times service is currently unavailable.\"\n\n    @kernel_function(description=\"Backup function that provides available flight times for a destination.\")\n    def get_flight_times_backup(\n        self, destination: Annotated[str, \"The destination to check flight times for.\"]\n    ) -> Annotated[str, \"Returns flight times for the specified destination.\"]:\n        flight_times = {\n            \"Barcelona\": [\"08:30 AM\", \"02:15 PM\", \"10:45 PM\"],\n            \"Paris\": [\"06:45 AM\", \"12:30 PM\", \"07:15 PM\"],\n            \"Berlin\": [\"07:20 AM\", \"01:45 PM\", \"09:30 PM\"],\n            \"Tokyo\": [\"11:00 AM\", \"05:30 PM\", \"11:55 PM\"],\n            \"New York\": [\"05:15 AM\", \"03:00 PM\", \"08:45 PM\"]\n        }\n\n        # Extract just the city name from input that might contain country\n        city = destination.split(',')[0].strip()\n\n        if city in flight_times:\n            times = \", \".join(flight_times[city])\n            return f\"Flight times for {city}: {times}\"\n        else:\n            return f\"No flight information available for {city}.\"\n```\n\n----------------------------------------\n\nTITLE: Creating Travel Agent Class with Relevance Evaluation\nDESCRIPTION: A comprehensive Python class for gathering preferences, retrieving travel information, and generating personalized recommendations\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        ranked_hotels = self.filter_and_rank(hotels, self.user_preferences)\n        itinerary = create_itinerary(flights, ranked_hotels, attractions)\n        return itinerary\n```\n\n----------------------------------------\n\nTITLE: Retrieving Travel Information in Python\nDESCRIPTION: This method retrieves flight, hotel, and attraction information based on user preferences. It uses separate search functions for each category and returns the results.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nattractions = search_attractions(self.user_preferences)\nreturn flights, hotels, attractions\n```\n\n----------------------------------------\n\nTITLE: Creating a Function Schema (Python)\nDESCRIPTION: This code snippet defines a JSON schema that describes a function called `get_current_time`. The schema includes the function's name, a description of its purpose (to get the current time in a given location), and the parameters it accepts (specifically, a 'location' parameter representing the city name). This schema is crucial for the LLM to understand how to use the function.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/zh/04-tool-use/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    # Function description for the model to read\n    tools = [\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"get_current_time\",\n                \"description\": \"Get the current time in a given location\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"location\": {\n                            \"type\": \"string\",\n                            \"description\": \"The city name, e.g. San Francisco\",\n                        },\n                    },\n                    \"required\": [\"location\"],\n                },\n            }\n        }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Defining and Invoking Plugin Functions in Python\nDESCRIPTION: This Python snippet provides an example of how to define semantic functions through plugins. It illustrates creating a \"SummarizeText\" function using a prompt, which is subsequently invoked by the kernel to process user input. Dependencies include semantic_kernel library and asyncio for asynchronous execution.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_kernel.connectors.ai.open_ai.services.azure_chat_completion import AzureChatCompletion\n\n\nasync def main():\n    from semantic_kernel.functions import KernelFunctionFromPrompt\n    from semantic_kernel.kernel import Kernel\n\n    kernel = Kernel()\n    kernel.add_service(AzureChatCompletion())\n\n    user_input = input(\"User Input:> \")\n\n    kernel_function = KernelFunctionFromPrompt(\n        function_name=\"SummarizeText\",\n        prompt=\"\"\"\n        Summarize the provided unstructured text in a sentence that is easy to understand.\n        Text to summarize: {{$user_input}}\n        \"\"\",\n    )\n\n    response = await kernel_function.invoke(kernel=kernel, user_input=user_input)\n    print(f\"Model Response: {response}\")\n\n    \"\"\"\n    Sample Console Output:\n\n    User Input:> I like dogs\n    Model Response: The text expresses a preference for dogs.\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n  import asyncio\n  asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Implementing Azure OpenAI-based Travel Agent in Python\nDESCRIPTION: Python class that uses Azure OpenAI services to provide travel recommendations based on user preferences. The implementation includes methods for generating prompts, making API calls, and processing recommendations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/de/09-metacognition/README.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nclass TravelAgent:\n    def __init__(self, destinations):\n        self.destinations = destinations\n\n    def get_recommendations(self, preferences, api_key, endpoint):\n        # Generate a prompt for the Azure OpenAI\n        prompt = self.generate_prompt(preferences)\n        \n        # Define headers and payload for the request\n        headers = {\n            'Content-Type': 'application/json',\n            'Authorization': f'Bearer {api_key}'\n        }\n        payload = {\n            \"prompt\": prompt,\n            \"max_tokens\": 150,\n            \"temperature\": 0.7\n        }\n        \n        # Call the Azure OpenAI API to get the re-ranked and scored destinations\n        response = requests.post(endpoint, headers=headers, json=payload)\n        response_data = response.json()\n        \n        # Extract and return the recommendations\n        recommendations = response_data['choices'][0]['text'].strip().split('\\n')\n        return recommendations\n\n    def generate_prompt(self, preferences):\n        prompt = \"Here are the travel destinations ranked and scored based on the following user preferences:\\n\"\n        for key, value in preferences.items():\n            prompt += f\"{key}: {value}\\n\"\n        prompt += \"\\nDestinations:\\n\"\n        for destination in self.destinations:\n            prompt += f\"- {destination['name']}: {destination['description']}\\n\"\n        return prompt\n\n# Example usage\ndestinations = [\n    {\"name\": \"Paris\", \"description\": \"City of lights, known for its art, fashion, and culture.\"},\n    {\"name\": \"Tokyo\", \"description\": \"Vibrant city, famous for its modernity and traditional temples.\"},\n    {\"name\": \"New York\", \"description\": \"The city that never sleeps, with iconic landmarks and diverse culture.\"},\n    {\"name\": \"Sydney\", \"description\": \"Beautiful harbour city, known for its opera house and stunning beaches.\"}\n]\n\npreferences = {\"activity\": \"sightseeing\", \"culture\": \"diverse\"}\napi_key = 'your_azure_openai_api_key'\nendpoint = 'https://your-endpoint.com/openai/deployments/your-deployment-name/completions?api-version=2022-12-01'\n\ntravel_agent = TravelAgent(destinations)\nrecommendations = travel_agent.get_recommendations(preferences, api_key, endpoint)\nprint(\"Recommended Destinations:\")\nfor rec in recommendations:\n    print(rec)\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Finding Flights Based on Destination, Dates, and Budget\nDESCRIPTION: SQL query that filters the flights table based on destination, date range, and budget constraints. This demonstrates how to construct a simple query for retrieving matching flight records.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fr/09-metacognition/README.md#2025-04-18_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM flights WHERE destination='Paris' AND dates='2025-04-01 to 2025-04-10' AND budget='moderate';\n```\n\n----------------------------------------\n\nTITLE: Implementing NLP Query Processing in Python\nDESCRIPTION: A function to process user queries using natural language processing techniques to extract key information\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef process_query(query):\n    # Use NLP to extract key information from the user's query\n    processed_query = nlp(query)\n    return processed_query\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Attractions Filtering\nDESCRIPTION: This SQL query retrieves attractions based on destination and user interests. It helps identify relevant activities and points of interest for travel itineraries.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM attractions WHERE destination='Paris' AND interests='museums, cuisine';\n```\n\n----------------------------------------\n\nTITLE: Implementing the Function Code (Python)\nDESCRIPTION: This code snippet defines the `get_current_time` function, which retrieves the current time for a given location. It utilizes a `TIMEZONE_DATA` dictionary to map city names to timezones. If a timezone is found, it formats the current time according to the timezone and returns it as a JSON string. If no timezone is found, it returns an 'unknown' time.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/zh/04-tool-use/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n  def get_current_time(location):\n        \"\"\"Get the current time for a given location\"\"\"\n        print(f\"get_current_time called with location: {location}\")  \n        location_lower = location.lower()\n        \n        for key, timezone in TIMEZONE_DATA.items():\n            if key in location_lower:\n                print(f\"Timezone found for {key}\")  \n                current_time = datetime.now(ZoneInfo(timezone)).strftime(\"%I:%M %p\")\n                return json.dumps({\n                    \"location\": location,\n                    \"current_time\": current_time\n                })\n      \n        print(f\"No timezone data found for {location_lower}\")  \n        return json.dumps({\"location\": location, \"current_time\": \"unknown\"})\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Hotels Filtering\nDESCRIPTION: This SQL query filters hotels based on destination and budget criteria. It's used as part of the travel recommendation system to retrieve relevant hotel options for users.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM hotels WHERE destination='Paris' AND budget='moderate';\n```\n\n----------------------------------------\n\nTITLE: Creating a Plugin using Semantic Kernel in Python\nDESCRIPTION: This code snippet demonstrates how to create a plugin in Semantic Kernel using Python. It defines a `GetCurrentTimePlugin` class with a `get_current_time` method decorated with `@kernel_function`. This allows the kernel to automatically serialize the function and its parameters for use with LLMs. The `@kernel_function` decorator is used to add a description of the function.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ko/04-tool-use/README.md#2025-04-18_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom semantic_kernel.functions import kernel_function\n\nclass GetCurrentTimePlugin:\n    async def __init__(self, location):\n        self.location = location\n\n    @kernel_function(\n        description=\"Get the current time for a given location\"\n    )\n    def get_current_time(location: str = \"\"):\n        ...\n\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Queries with SQLite in Python\nDESCRIPTION: This function connects to an SQLite database, executes a provided SQL query, and returns the results. It handles the database connection lifecycle and provides a clean interface for retrieving data based on dynamically generated queries.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport sqlite3\n\ndef execute_sql_query(query, database=\"travel.db\"):\n    connection = sqlite3.connect(database)\n    cursor = connection.cursor()\n    cursor.execute(query)\n    results = cursor.fetchall()\n    connection.close()\n    return results\n```\n\n----------------------------------------\n\nTITLE: Initializing Agent with Azure AI Agent Service in Python\nDESCRIPTION: This code snippet demonstrates how to initialize and configure an agent with Azure AI Agent Service using Python. It creates an `AIProjectClient` to interact with the service, defines a function tool (`fetch_sales_data_using_sqlite_query`) and a Code Interpreter tool, adds them to a toolset, and then creates an agent with that toolset. It leverages `azure.ai.projects` library.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ko/04-tool-use/README.md#2025-04-18_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport os\nfrom azure.ai.projects import AIProjectClient\nfrom azure.identity import DefaultAzureCredential\nfrom fecth_sales_data_functions import fetch_sales_data_using_sqlite_query # fetch_sales_data_using_sqlite_query function which can be found in a fetch_sales_data_functions.py file.\nfrom azure.ai.projects.models import ToolSet, FunctionTool, CodeInterpreterTool\n\nproject_client = AIProjectClient.from_connection_string(\n    credential=DefaultAzureCredential(),\n    conn_str=os.environ[\"PROJECT_CONNECTION_STRING\"],\n)\n\n# Initialize function calling agent with the fetch_sales_data_using_sqlite_query function and adding it to the toolset\nfetch_data_function = FunctionTool(fetch_sales_data_using_sqlite_query)\ntoolset = ToolSet()\ntoolset.add(fetch_data_function)\n\n# Initialize Code Interpreter tool and adding it to the toolset. \ncode_interpreter = code_interpreter = CodeInterpreterTool()\ntoolset = ToolSet()\ntoolset.add(code_interpreter)\n\nagent = project_client.agents.create_agent(\n    model=\"gpt-4o-mini\", name=\"my-agent\", instructions=\"You are helpful agent\", \n    toolset=toolset\n)\n\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Query in Python\nDESCRIPTION: This function generates a SQL query string based on the provided table name and user preferences. It constructs a `SELECT` query with `WHERE` clause to filter data based on the preferences. This illustrates dynamic SQL query generation for data retrieval.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ja/09-metacognition/README.md#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef generate_sql_query(table, preferences):\n    query = f\"SELECT * FROM {table} WHERE \"\n    conditions = []\n    for key, value in preferences.items():\n        conditions.append(f\"{key}='{value}'\")\n    query += \" AND \".join(conditions)\n    return query\n\n```\n\n----------------------------------------\n\nTITLE: Using Travel Agent Class for Trip Planning\nDESCRIPTION: Example usage of the Travel Agent class showing how to set preferences, generate recommendations, and provide feedback for a trip to Paris. Demonstrates basic interaction flow with the travel agent system.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\ntravel_agent.adjust_based_on_feedback(feedback)\n```\n\n----------------------------------------\n\nTITLE: Travel Agent with Relevance Scoring System\nDESCRIPTION: Implementation of a Travel_Agent class with relevance scoring functionality and user feedback integration.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/09-metacognition/README.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Functions in C#\nDESCRIPTION: This C# snippet shows how to define a native function called `RetrieveLocalFile` to read file content. It fetches text data from local files, constrained by a maximum size parameter. Important dependencies include System.IO for file operations and Microsoft.SemanticKernel for function attributes.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic class NativeFunctions {\n\n    [SKFunction, Description(\"Retrieve content from local file\")]\n    public async Task<string> RetrieveLocalFile(string fileName, int maxSize = 5000)\n    {\n        string content = await File.ReadAllTextAsync(fileName);\n        if (content.Length <= maxSize) return content;\n        return content.Substring(0, maxSize);\n    }\n}\n\n//Import native function\nstring plugInName = \"NativeFunction\";\nstring functionName = \"RetrieveLocalFile\";\n\n//To add the functions to a kernel use the following function\nkernel.ImportPluginFromType<NativeFunctions>();\n```\n\n----------------------------------------\n\nTITLE: Adjusting Relevance Based on User Feedback in Python\nDESCRIPTION: This function incorporates user feedback to adjust the relevance scores of items. It increases relevance for items the user liked and decreases relevance for disliked items, enabling continuous improvement of recommendations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef adjust_based_on_feedback(feedback, items):\n    for item in items:\n        if item['name'] in feedback['liked']:\n            item['relevance'] += 1\n        if item['name'] in feedback['disliked']:\n            item['relevance'] -= 1\n    return items\n```\n\n----------------------------------------\n\nTITLE: Generating Travel Plan with Azure AI in Python\nDESCRIPTION: This snippet demonstrates how to use the Azure AI client to generate a travel plan. It sets up system and user messages, makes an API call, and processes the JSON response. The code includes error handling and commented-out validation steps.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/07-planning-design/code_samples/07-autogen.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Define the user message\nmessages = [\n    SystemMessage(content=\"\"\"You are an planner agent.\n    Your job is to decide which agents to run based on the user's request.\n                      Provide your response in JSON format with the following structure:\n{'main_task': 'Plan a family trip from Singapore to Melbourne.',\n 'subtasks': [{'assigned_agent': 'flight_booking',\n               'task_details': 'Book round-trip flights from Singapore to '\n                               'Melbourne.'}]\n    Below are the available agents specialised in different tasks:\n    - FlightBooking: For booking flights and providing flight information\n    - HotelBooking: For booking hotels and providing hotel information\n    - CarRental: For booking cars and providing car rental information\n    - ActivitiesBooking: For booking activities and providing activity information\n    - DestinationInfo: For providing information about destinations\n    - DefaultAgent: For handling general requests\"\"\", source=\"system\"),\n    UserMessage(\n        content=\"Create a travel plan for a family of 2 kids from Singapore to Melboune\", source=\"user\"),\n]\n\nresponse = await client.create(messages=messages, extra_create_args={\"response_format\": 'json_object'})\n\n\nresponse_content: Optional[str] = response.content if isinstance(\n    response.content, str) else None\nif response_content is None:\n    raise ValueError(\"Response content is not a valid JSON string\" )\n\npprint(json.loads(response_content))\n\n# # Ensure the response content is a valid JSON string before loading it\n# response_content: Optional[str] = response.content if isinstance(\n#     response.content, str) else None\n# if response_content is None:\n#     raise ValueError(\"Response content is not a valid JSON string\")\n\n# # Print the response content after loading it as JSON\n# pprint(json.loads(response_content))\n\n# Validate the response content with the MathReasoning model\n# TravelPlan.model_validate(json.loads(response_content))\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Flights Filtering\nDESCRIPTION: This SQL query retrieves flights matching specific destination, date range, and budget criteria. It demonstrates how structured queries can be used to filter travel data in a database.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM flights WHERE destination='Paris' AND dates='2025-04-01 to 2025-04-10' AND budget='moderate';\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Azure AI Agents in Python\nDESCRIPTION: This Python snippet outlines the process of creating an AI agent using the Azure AI Agent Service. It demonstrates defining a plugin, setting up the agent with necessary credentials, and using it to handle a conversation through asynchronous execution. Required dependencies include semantic_kernel, azure-identity, and proper agent configuration settings.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom typing import Annotated\n\nfrom azure.identity.aio import DefaultAzureCredential\n\nfrom semantic_kernel.agents import AzureAIAgent, AzureAIAgentSettings, AzureAIAgentThread\nfrom semantic_kernel.contents import ChatMessageContent\nfrom semantic_kernel.contents import AuthorRole\nfrom semantic_kernel.functions import kernel_function\n\n\n# Define a sample plugin for the sample\nclass MenuPlugin:\n    \"\"\"A sample Menu Plugin used for the concept sample.\"\"\"\n\n    @kernel_function(description=\"Provides a list of specials from the menu.\")\n    def get_specials(self) -> Annotated[str, \"Returns the specials from the menu.\"]:\n        return \"\"\"\n        Special Soup: Clam Chowder\n        Special Salad: Cobb Salad\n        Special Drink: Chai Tea\n        \"\"\"\n\n    @kernel_function(description=\"Provides the price of the requested menu item.\")\n    def get_item_price(\n        self, menu_item: Annotated[str, \"The name of the menu item.\"]\n    ) -> Annotated[str, \"Returns the price of the menu item.\"]:\n        return \"$9.99\"\n\n\nasync def main() -> None:\n    ai_agent_settings = AzureAIAgentSettings.create()\n\n    async with (\n        DefaultAzureCredential() as creds,\n        AzureAIAgent.create_client(\n            credential=creds,\n            conn_str=ai_agent_settings.project_connection_string.get_secret_value(),\n        ) as client,\n    ):\n        # Create agent definition\n        agent_definition = await client.agents.create_agent(\n            model=ai_agent_settings.model_deployment_name,\n            name=\"Host\",\n            instructions=\"Answer questions about the menu.\",\n        )\n\n        # Create the AzureAI Agent using the defined client and agent definition\n        agent = AzureAIAgent(\n            client=client,\n            definition=agent_definition,\n            plugins=[MenuPlugin()],\n        )\n\n        # Create a thread to hold the conversation\n        # If no thread is provided, a new thread will be\n        # created and returned with the initial response\n        thread: AzureAIAgentThread | None = None\n\n        user_inputs = [\n            \"Hello\",\n            \"What is the special soup?\",\n            \"How much does that cost?\",\n            \"Thank you\",\n        ]\n\n        try:\n            for user_input in user_inputs:\n                print(f\"# User: '{user_input}'\")\n                # Invoke the agent for the specified thread\n                response = await agent.get_response(\n                    messages=user_input,\n                    thread_id=thread,\n                )\n                print(f\"# {response.name}: {response.content}\")\n                thread = response.thread\n        finally:\n            await thread.delete() if thread else None\n            await client.agents.delete_agent(agent.id)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Implementing SavePlugin Class for Trip Plans\nDESCRIPTION: Class implementation for saving trip plans using Azure AI services. Includes async method for processing and saving trip plan content with Azure authentication and AI agent interaction.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/08-multi-agent/code_samples/08-python_multi_aiagent_bookinghotel.ipynb#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass SavePlugin:\n    \"\"\"Save Plugin for customers\"\"\"\n    @kernel_function(description=\"saving plan\")\n    async def saving_plan(self,tripplan: Annotated[str, \"The content of trip plan\"])-> Annotated[str, \"Return status of save content\"]:\n\n        async with (\n            DefaultAzureCredential() as creds,\n            AzureAIAgent.create_client(\n                credential=creds,\n                conn_str=ai_agent_settings.project_connection_string.get_secret_value(),\n            ) as client,\n        ):\n\n            code_interpreter = CodeInterpreterTool()\n            \n            agent_definition = await client.agents.create_agent(\n                model=ai_agent_settings.model_deployment_name,\n                tools=code_interpreter.definitions,\n                tool_resources=code_interpreter.resources,\n            )\n\n\n            agent = AzureAIAgent(\n                client=client,\n                definition=agent_definition,\n            )\n\n            thread = await client.agents.create_thread()\n\n\n            user_inputs = [\n                \"\"\"\n            \n                        You are my Python programming assistant. Generate code,save \"\"\"+ tripplan +\n                        \n                    \"\"\"    \n                        and execute it according to the following requirements\n\n                        1. Save blog content to trip-{YYMMDDHHMMSS}.md\n\n                        2. give me the download this file link\n                    \"\"\"\n            ]\n\n\n\n            try:\n                for user_input in user_inputs:\n                    # Add the user input as a chat message\n                    await agent.add_chat_message(\n                        thread_id=thread.id, message=ChatMessageContent(role=AuthorRole.USER, content=user_input)\n                    )\n                    print(f\"# User: '{user_input}'\")\n                    # Invoke the agent for the specified thread\n                    async for content in agent.invoke(thread_id=thread.id):\n                        if content.role != AuthorRole.TOOL:\n                            print(f\"# Agent: {content.content}\")\n\n                    \n                    messages = await client.agents.list_messages(thread_id=thread.id)\n\n                    # OpenAIPageableListOfThreadMessage\n                    # OpenAIPageableListOfThreadMessage\n\n\n                    for file_path_annotation in messages.file_path_annotations:\n\n                            file_name = os.path.basename(file_path_annotation.text)\n\n                            await client.agents.save_file(file_id=file_path_annotation.file_path.file_id, file_name=file_name,target_dir=\"./trip\")\n\n                    \n            finally:\n                await client.agents.delete_thread(thread.id)\n                await client.agents.delete_agent(agent.id)\n\n\n        return \"Saved\"\n```\n\n----------------------------------------\n\nTITLE: Generating Code to Fetch Data in Python\nDESCRIPTION: These functions dynamically generate Python code to fetch flight and hotel data based on user preferences. The generated code uses the `requests` library to make API calls to hypothetical flight and hotel services.  The preferences are passed as parameters to the API endpoints, allowing for customized data retrieval.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ja/09-metacognition/README.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef generate_code_to_fetch_data(preferences):\n    # Example: Generate code to search for flights based on user preferences\n    code = f\"\"\"\n    def search_flights():\n        import requests\n        response = requests.get('https://api.example.com/flights', params={preferences})\n        return response.json()\n    \"\"\"\n    return code\n\ndef generate_code_to_fetch_hotels(preferences):\n    # Example: Generate code to search for hotels\n    code = f\"\"\"\n    def search_hotels():\n        import requests\n        response = requests.get('https://api.example.com/hotels', params={preferences})\n        return response.json()\n    \"\"\"\n    return code\n\n```\n\n----------------------------------------\n\nTITLE: Basic Travel Agent Usage Example\nDESCRIPTION: Demonstrates the basic usage of the Travel Agent class including preference gathering, recommendation generation, and feedback handling.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/de/09-metacognition/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\nupdated_items = travel_agent.adjust_based_on_feedback(feedback, itinerary['hotels'])\nprint(\"Updated Itinerary with Feedback:\", updated_items)\n```\n\n----------------------------------------\n\nTITLE: Detailed Travel Agent System Message\nDESCRIPTION: An expanded and structured system message that provides comprehensive guidance for an AI travel agent, including objectives, responsibilities, tone requirements, and interaction guidelines.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/06-building-trustworthy-agents/README.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n**Company Name:** Contoso Travel  \n**Role:** Travel Agent Assistant\n\n**Objective:**  \nYou are an AI-powered travel agent assistant for Contoso Travel, specializing in booking flights and providing exceptional customer service. Your main goal is to assist customers in finding, booking, and managing their flights, all while ensuring that their preferences and needs are met efficiently.\n\n**Key Responsibilities:**\n\n1. **Flight Lookup:**\n    \n    - Assist customers in searching for available flights based on their specified destination, dates, and any other relevant preferences.\n    - Provide a list of options, including flight times, airlines, layovers, and pricing.\n2. **Flight Booking:**\n    \n    - Facilitate the booking of flights for customers, ensuring that all details are correctly entered into the system.\n    - Confirm bookings and provide customers with their itinerary, including confirmation numbers and any other pertinent information.\n3. **Customer Preference Inquiry:**\n    \n    - Actively ask customers for their preferences regarding seating (e.g., aisle, window, extra legroom) and preferred times for flights (e.g., morning, afternoon, evening).\n    - Record these preferences for future reference and tailor suggestions accordingly.\n4. **Flight Cancellation:**\n    \n    - Assist customers in canceling previously booked flights if needed, following company policies and procedures.\n    - Notify customers of any necessary refunds or additional steps that may be required for cancellations.\n5. **Flight Monitoring:**\n    \n    - Monitor the status of booked flights and alert customers in real-time about any delays, cancellations, or changes to their flight schedule.\n    - Provide updates through preferred communication channels (e.g., email, SMS) as needed.\n\n**Tone and Style:**\n\n- Maintain a friendly, professional, and approachable demeanor in all interactions with customers.\n- Ensure that all communication is clear, informative, and tailored to the customer's specific needs and inquiries.\n\n**User Interaction Instructions:**\n\n- Respond to customer queries promptly and accurately.\n- Use a conversational style while ensuring professionalism.\n- Prioritize customer satisfaction by being attentive, empathetic, and proactive in all assistance provided.\n\n**Additional Notes:**\n\n- Stay updated on any changes to airline policies, travel restrictions, and other relevant information that could impact flight bookings and customer experience.\n- Use clear and concise language to explain options and processes, avoiding jargon where possible for better customer understanding.\n\nThis AI assistant is designed to streamline the flight booking process for customers of Contoso Travel, ensuring that all their travel needs are met efficiently and effectively.\n```\n\n----------------------------------------\n\nTITLE: Basic Travel Agent Usage Example in Python\nDESCRIPTION: Demonstrates basic usage of the Travel Agent class with example preferences and feedback handling. Shows how to initialize preferences, generate recommendations and process user feedback.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/de/09-metacognition/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\ntravel_agent.adjust_based_on_feedback(feedback)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure AI Chat Completion Client in Python\nDESCRIPTION: This snippet sets up an AzureAIChatCompletionClient using GitHub Models. It configures the model, endpoint, and credentials, then sends a test query to check the setup.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/code_samples/04-autogen.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = AzureAIChatCompletionClient(\n    model=\"gpt-4o-mini\",\n    endpoint=\"https://models.inference.ai.azure.com\",\n    # To authenticate with the model you will need to generate a personal access token (PAT) in your GitHub settings.\n    # Create your PAT token by following instructions here: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens\n    credential=AzureKeyCredential(os.environ[\"GITHUB_TOKEN\"]),\n    model_info={\n        \"json_output\": True,\n        \"function_calling\": True,\n        \"vision\": True,\n        \"family\": \"unknown\",\n    },\n)\n\nresult = await client.create([UserMessage(content=\"What is the capital of France?\", source=\"user\")])\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Processing User Queries with NLP in Python\nDESCRIPTION: This function uses Natural Language Processing to extract key information from a user's query. It applies NLP processing to the raw query to better understand the user's intent and extract structured information.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef process_query(query):\n    # Use NLP to extract key information from the user's query\n    processed_query = nlp(query)\n    return processed_query\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for AI Agent System\nDESCRIPTION: Imports required libraries and modules from OpenAI and Semantic Kernel for implementing the agent-based chat system.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/08-multi-agent/code_samples/08-semantic-kernel.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom openai import AsyncOpenAI\n\nfrom semantic_kernel.agents import ChatCompletionAgent, AgentGroupChat\nfrom semantic_kernel.agents.strategies import (\n    KernelFunctionSelectionStrategy,\n    KernelFunctionTerminationStrategy,\n)\nfrom semantic_kernel.kernel import Kernel\nfrom semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion\nfrom semantic_kernel.contents import AuthorRole, ChatMessageContent\nfrom semantic_kernel.functions import KernelFunctionFromPrompt\n```\n\n----------------------------------------\n\nTITLE: Creating a Thread and Processing Messages with an Agent in Azure AI Agent Service\nDESCRIPTION: This code shows how to create a thread, add a message to it, and have an agent process the thread. It demonstrates requesting a visualization task from an agent and retrieving the response messages to track the conversation progress.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nthread = project_client.agents.create_thread()\nmessage = project_client.agents.create_message(\n    thread_id=thread.id,\n    role=\"user\",\n    content=\"Could you please create a bar chart for the operating profit using the following data and provide the file to me? Company A: $1.2 million, Company B: $2.5 million, Company C: $3.0 million, Company D: $1.8 million\",\n)\n\n# Ask the agent to perform work on the thread\nrun = project_client.agents.create_and_process_run(thread_id=thread.id, agent_id=agent.id)\n\n# Fetch and log all messages to see the agent's response\nmessages = project_client.agents.list_messages(thread_id=thread.id)\nprint(f\"Messages: {messages}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Iterative Planning in Python\nDESCRIPTION: This code snippet demonstrates how to implement iterative planning by incorporating previous travel plans and user feedback into the planning process. It uses the same system message structure as the initial planning.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/de/07-planning-design/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom autogen_core.models import UserMessage, SystemMessage, AssistantMessage\n#.. same as previous code and pass on the user history, current plan\nmessages = [\n    SystemMessage(content=\"\"\"You are a planner agent to optimize the\n    Your job is to decide which agents to run based on the user's request.\n    Below are the available agents specialized in different tasks:\n    - FlightBooking: For booking flights and providing flight information\n    - HotelBooking: For booking hotels and providing hotel information\n    - CarRental: For booking cars and providing car rental information\n    - ActivitiesBooking: For booking activities and providing activity information\n    - DestinationInfo: For providing information about destinations\n    - DefaultAgent: For handling general requests\"\"\", source=\"system\"),\n    UserMessage(content=\"Create a travel plan for a family of 2 kids from Singapore to Melbourne\", source=\"user\"),\n    AssistantMessage(content=f\"Previous travel plan - {TravelPlan}\", source=\"assistant\")\n]\n# .. re-plan and send the tasks to respective agents\n```\n\n----------------------------------------\n\nTITLE: Creating a ChatCompletionAgent for Travel Planning with Semantic Kernel\nDESCRIPTION: This code creates a ChatCompletionAgent named 'TravelAgent' using the previously defined chat completion service and DestinationsPlugin. It sets up the agent with specific instructions for vacation planning.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/code_samples/02-semantic-kernel.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagent = ChatCompletionAgent(\n    service=chat_completion_service, \n    plugins=[DestinationsPlugin()],\n    name=\"TravelAgent\",\n    instructions=\"You are a helpful AI Agent that can help plan vacations for customers at random destinations\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Message System in Python\nDESCRIPTION: Sets up the initial message structure for a planner agent that coordinates between multiple specialized travel agents. Includes system definition of available agents and user request handling.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/07-planning-design/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmessages = [\n    SystemMessage(content=\"\"\"You are an planner agent.\n    Your job is to decide which agents to run based on the user's request.\n    Below are the available agents specialized in different tasks:\n    - FlightBooking: For booking flights and providing flight information\n    - HotelBooking: For booking hotels and providing hotel information\n    - CarRental: For booking cars and providing car rental information\n    - ActivitiesBooking: For booking activities and providing activity information\n    - DestinationInfo: For providing information about destinations\n    - DefaultAgent: For handling general requests\"\"\", source=\"system\"),\n    UserMessage(content=\"Create a travel plan for a family of 2 kids from Singapore to Melbourne\", source=\"user\"),\n]\n\nresponse = await client.create(messages=messages, extra_create_args={\"response_format\": TravelPlan})\n\nresponse_content: Optional[str] = response.content if isinstance(response.content, str) else None\nif response_content is None:\n    raise ValueError(\"Response content is not a valid JSON string\")\n\npprint(json.loads(response_content))\n```\n\n----------------------------------------\n\nTITLE: User Feedback Processing in Travel Recommendation\nDESCRIPTION: Capturing user feedback on initial travel recommendations, marking liked and disliked items\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfeedback = {\n    \"liked\": [\"Louvre Museum\"],\n    \"disliked\": [\"Eiffel Tower (too crowded)\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure AI Booking Agent with Credentials and Settings\nDESCRIPTION: Sets up an Azure AI agent client using default credentials and connection string. Creates an agent definition with specific instructions for handling flight and hotel bookings.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/code_samples/04-semantic-kernel-python-aiagent-bookinghotel.ipynb#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync with (\n     DefaultAzureCredential() as creds,\n    AzureAIAgent.create_client(\n        credential=creds,\n        conn_str=ai_agent_settings.project_connection_string.get_secret_value(),\n    ) as client,\n):    \n    \n    # Define the agent's name and instructions\n    AGENT_NAME = \"BookingAgent\"\n    AGENT_INSTRUCTIONS = \"\"\"\n    You are a booking agent, help me to book flights or hotels.\n\n    Thought: Understand the user's intention and confirm whether to use the reservation system to complete the task.\n\n    Action:\n    - If booking a flight, convert the departure name and destination name into airport codes.\n    - If booking a hotel or flight, use the corresponding API to call. Ensure that the necessary parameters are available. If any parameters are missing, use default values or assumptions to proceed.\n    - If it is not a hotel or flight booking, respond with the final answer only.\n    - Output the results using a markdown table:\n    - For flight bookings, separate the outbound and return contents and list them in the order of Departure_airport Name | Airline | Flight Number | Departure Time | Arrival_airport Name | Arrival Time | Duration | Airplane | Travel Class | Price (USD) | Legroom | Extensions | Carbon Emissions (kg).\n    - For hotel bookings, list them in the order of Properties Name | Properties description | check_in_time | check_out_time | prices | nearby_places | hotel_class | gps_coordinates.\n    \"\"\"\n\n    # Create agent definition with the specified model, name, and instructions\n    agent_definition = await client.agents.create_agent(\n        model=ai_agent_settings.model_deployment_name,\n        name=AGENT_NAME,\n        instructions=AGENT_INSTRUCTIONS,\n    )\n\n    # Create the AzureAI Agent using the client and agent definition\n    agent = AzureAIAgent(\n        client=client,\n        definition=agent_definition,\n        plugins=[BookingPlugin()]\n    )\n\n    # Create a new thread for the agent\n    # If no thread is provided, a new thread will be\n    # created and returned with the initial response\n    thread: AzureAIAgentThread | None = None\n\n    # This is your prompt for the activity or task you want to complete \n    # Define user inputs for the agent to process we have provided some example prompts to test and validate \n    user_inputs = [\n        # \"Can you tell me the round-trip air ticket from  London to New York JFK aiport, the departure time is February 17, 2025, and the return time is February 23, 2025\"\n        # \"Book a hotel in New York from Feb 20,2025 to Feb 24,2025\"\n        \"Help me book flight tickets and hotel for the following trip London Heathrow LHR Feb 20th 2025 to New York JFK returning Feb 27th 2025 flying economy with British Airways only. I want a stay in a Hilton hotel in New York please provide costs for the flight and hotel\"\n        # \"I have a business trip from London LHR to New York JFK on Feb 20th 2025 to Feb 27th 2025, can you help me to book a hotel and flight tickets\"\n    ]\n\n    try:\n        # Process each user input\n        for user_input in user_inputs:\n            print(f\"# User: '{user_input}'\")\n            # Get the agent's response for the specified thread\n            response = await agent.get_response(\n                messages=user_input,\n                thread=thread,\n            )\n            thread = response.thread\n            # Print the agent's response\n            print(f\"{response.name}: '{response.content}'\")\n    finally:\n        # Clean up by deleting the thread and agent\n        await thread.delete() if thread else None\n        await client.agents.delete_agent(agent.id)\n```\n\n----------------------------------------\n\nTITLE: Generating Recommendations Using SQL in Python\nDESCRIPTION: This code generates travel recommendations by querying flight, hotel, and attraction data from a database using SQL. It uses the `generate_sql_query` function to create SQL queries based on user preferences and then uses the `execute_sql_query` function to execute these queries against the database. The retrieved data is then combined into an itinerary dictionary, providing a comprehensive travel plan.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ja/09-metacognition/README.md#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef generate_recommendations(preferences):\n    flight_query = generate_sql_query(\"flights\", preferences)\n    hotel_query = generate_sql_query(\"hotels\", preferences)\n    attraction_query = generate_sql_query(\"attractions\", preferences)\n    \n    flights = execute_sql_query(flight_query)\n    hotels = execute_sql_query(hotel_query)\n    attractions = execute_sql_query(attraction_query)\n    \n    itinerary = {\n        \"flights\": flights,\n        \"hotels\": hotels,\n        \"attractions\": attractions\n    }\n    return itinerary\n\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = generate_recommendations(preferences)\nprint(\"Suggested Itinerary:\", itinerary)\n\n```\n\n----------------------------------------\n\nTITLE: Adjusting Preferences with Schema Awareness in Python\nDESCRIPTION: These functions demonstrate adjusting user preferences based on feedback and a predefined schema. The `adjust_based_on_feedback` function utilizes a schema to guide preference adjustments based on user likes and dislikes.  The `adjust_based_on_environment` function further customizes adjustments based on schema-defined logic.  This approach enables a more nuanced and context-aware refinement of user preferences.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ja/09-metacognition/README.md#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef adjust_based_on_feedback(feedback, preferences, schema):\n    # Adjust preferences based on user feedback\n    if \"liked\" in feedback:\n        preferences[\"favorites\"] = feedback[\"liked\"]\n    if \"disliked\" in feedback:\n        preferences[\"avoid\"] = feedback[\"disliked\"]\n    # Reasoning based on schema to adjust other related preferences\n    for field in schema:\n        if field in preferences:\n            preferences[field] = adjust_based_on_environment(feedback, field, schema)\n    return preferences\n\ndef adjust_based_on_environment(feedback, field, schema):\n    # Custom logic to adjust preferences based on schema and feedback\n    if field in feedback[\"liked\"]:\n        return schema[field][\"positive_adjustment\"]\n    elif field in feedback[\"disliked\"]:\n        return schema[field][\"negative_adjustment\"]\n    return schema[field][\"default\"]\n\ndef generate_code_to_fetch_data(preferences):\n    # Generate code to fetch flight data based on updated preferences\n    return f\"fetch_flights(preferences={preferences})\"\n\ndef generate_code_to_fetch_hotels(preferences):\n    # Generate code to fetch hotel data based on updated preferences\n    return f\"fetch_hotels(preferences={preferences})\"\n\ndef execute_code(code):\n    # Simulate execution of code and return mock data\n    return {\"data\": f\"Executed: {code}\"}\n\ndef generate_itinerary(flights, hotels, attractions):\n    # Generate itinerary based on flights, hotels, and attractions\n    return {\"flights\": flights, \"hotels\": hotels, \"attractions\": attractions}\n\n# Example schema\nschema = {\n    \"favorites\": {\"positive_adjustment\": \"increase\", \"negative_adjustment\": \"decrease\", \"default\": \"neutral\"},\n    \"avoid\": {\"positive_adjustment\": \"decrease\", \"negative_adjustment\": \"increase\", \"default\": \"neutral\"}\n}\n\n# Example usage\npreferences = {\"favorites\": \"sightseeing\", \"avoid\": \"crowded places\"}\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\nupdated_preferences = adjust_based_on_feedback(feedback, preferences, schema)\n\n# Regenerate and execute code with updated preferences\nupdated_flight_code = generate_code_to_fetch_data(updated_preferences)\nupdated_hotel_code = generate_code_to_fetch_hotels(updated_preferences)\n\nupdated_flights = execute_code(updated_flight_code)\nupdated_hotels = execute_code(updated_hotel_code)\n\nupdated_itinerary = generate_itinerary(updated_flights, updated_hotels, feedback[\"liked\"])\nprint(\"Updated Itinerary:\", updated_itinerary)\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Pre-emptive Context Load for Travel Agent in Python\nDESCRIPTION: This snippet demonstrates how to implement pre-emptive context loading for a travel agent application. It pre-loads information about popular destinations, allowing for quick retrieval of destination details without the need for real-time external data fetching.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass TravelAgent:\n    def __init__(self):\n        # Pre-load popular destinations and their information\n        self.context = {\n            \"Paris\": {\"country\": \"France\", \"currency\": \"Euro\", \"language\": \"French\", \"attractions\": [\"Eiffel Tower\", \"Louvre Museum\"]},\n            \"Tokyo\": {\"country\": \"Japan\", \"currency\": \"Yen\", \"language\": \"Japanese\", \"attractions\": [\"Tokyo Tower\", \"Shibuya Crossing\"]},\n            \"New York\": {\"country\": \"USA\", \"currency\": \"Dollar\", \"language\": \"English\", \"attractions\": [\"Statue of Liberty\", \"Times Square\"]},\n            \"Sydney\": {\"country\": \"Australia\", \"currency\": \"Dollar\", \"language\": \"English\", \"attractions\": [\"Sydney Opera House\", \"Bondi Beach\"]}\n        }\n\n    def get_destination_info(self, destination):\n        # Fetch destination information from pre-loaded context\n        info = self.context.get(destination)\n        if info:\n            return f\"{destination}:\\nCountry: {info['country']}\\nCurrency: {info['currency']}\\nLanguage: {info['language']}\\nAttractions: {', '.join(info['attractions'])}\"\n        else:\n            return f\"Sorry, we don't have information on {destination}.\"\n\n# Example usage\ntravel_agent = TravelAgent()\nprint(travel_agent.get_destination_info(\"Paris\"))\nprint(travel_agent.get_destination_info(\"Tokyo\"))\n```\n\n----------------------------------------\n\nTITLE: Sample Agent Response Output\nDESCRIPTION: Example output showing the formatted response from the agent including function calls and retrieved travel insurance information for Contoso\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-semantic-kernel-azuresearch.ipynb#2025-04-18_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nUser: \nCan you explain Contoso's travel insurance coverage?\n\nFunction Calls (click to expand)\n\nCalling function: retrieve_documents({\"query\": \"Contoso travel insurance coverage\"})\n\nFunction Result:\n\nDocument: Contoso's travel insurance covers medical emergencies, trip cancellations, and lost baggage.\n\nDocument: Contoso Travel offers luxury vacation packages to exotic destinations worldwide.\n\nDocument: Contoso Travel provides exclusive access to boutique hotels and private guided tours.\n\nDocument: Our premium travel services include personalized itinerary planning and 24/7 concierge support.\n\nTravelAgent:\n\nContoso's travel insurance coverage includes the following:\n\n1. **Medical Emergencies**: Coverage for unforeseen medical issues that may arise while traveling.\n2. **Trip Cancellations**: Protection in case you need to cancel your trip for covered reasons.\n3. **Lost Baggage**: Compensation for baggage that is lost during your trip.\n\nIf you need more specific details about the policy, it would be best to contact Contoso directly or refer to their official documentation.\n```\n\n----------------------------------------\n\nTITLE: Basic Travel Agent Prompt Template\nDESCRIPTION: Example prompt template for creating a travel agent AI assistant, specifying core responsibilities and capabilities.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/06-building-trustworthy-agents/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nYou are a travel agent for Contoso Travel that is great at booking flights for customers. To help customers you can perform the following tasks: lookup available flights, book flights, ask for preferences in seating and times for flights, cancel any previously booked flights and alert customers on any delays or cancellations of flights.\n```\n\n----------------------------------------\n\nTITLE: Instantiating Persistent ChromaDB Collection\nDESCRIPTION: This Python snippet demonstrates the instantiation of a persistent ChromaDB client, the creation of a collection named 'travel_documents', and the addition of document data with associated metadata. Dependencies include ChromaDB library and a properly configured local database path. The collection is populated with several travel-related documents which are later used for retrieving augmented information.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-semantic-kernel-chromadb.ipynb#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncollection = chromadb.PersistentClient(path=\"./chroma_db\").create_collection(\n    name=\"travel_documents\",\n    metadata={\"description\": \"travel_service\"},\n    get_or_create=True,\n)\n\ndocuments = [\n    \"Contoso Travel offers luxury vacation packages to exotic destinations worldwide.\",\n    \"Our premium travel services include personalized itinerary planning and 24/7 concierge support.\",\n    \"Contoso\\'s travel insurance covers medical emergencies, trip cancellations, and lost baggage.\",\n    \"Popular destinations include the Maldives, Swiss Alps, and African safaris.\",\n    \"Contoso Travel provides exclusive access to boutique hotels and private guided tours.\",\n]\n\ncollection.add(\n    documents=documents,\n    ids=[f\"doc_{i}\" for i in range(len(documents))],\n    metadatas=[{\"source\": \"training\", \"type\": \"explanation\"} for _ in documents]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining an AssistantAgent for Travel Planning\nDESCRIPTION: Creates an AssistantAgent with a specific name, model client, and system message defining it as a travel agent. The agent is configured without tools for this basic example.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/code_samples/02-autogen.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent = AssistantAgent(\n    name=\"assistant\",\n    model_client=client,\n    tools=[],\n    system_message=\"You are a travel agent that plans great vacations\",\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Travel Planning Agent with Semantic Kernel\nDESCRIPTION: Configures the travel planning agent with instructions, execution settings, and the chat completion service.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/07-planning-design/code_samples/07-semantic-kernel.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAGENT_NAME = \"TravelAgent\"\nAGENT_INSTRUCTIONS = \"\"\"You are an planner agent.\n    Your job is to decide which agents to run based on the user's request.\n    Below are the available agents specialised in different tasks:\n    - FlightBooking: For booking flights and providing flight information\n    - HotelBooking: For booking hotels and providing hotel information\n    - CarRental: For booking cars and providing car rental information\n    - ActivitiesBooking: For booking activities and providing activity information\n    - DestinationInfo: For providing information about destinations\n    - DefaultAgent: For handling general requests\"\"\"\n\n# Create the prompt execution settings and configure the Pydantic model response format\nsettings = OpenAIChatPromptExecutionSettings(response_format=TravelPlan)\n\nagent = ChatCompletionAgent(\n    service=chat_completion_service,\n    name=AGENT_NAME,\n    instructions=AGENT_INSTRUCTIONS,\n    arguments=KernelArguments(settings) \n)\n```\n\n----------------------------------------\n\nTITLE: Basic Travel Agent Usage Example\nDESCRIPTION: Demonstrates the basic usage of the Travel Agent class including preference setting and feedback handling. Shows how to initialize the agent, set travel preferences, and process user feedback about recommendations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\ntravel_agent.adjust_based_on_feedback(feedback)\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AI Dependencies\nDESCRIPTION: Sets up necessary imports for Azure AI projects, including authentication and core dependencies.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/code_samples/02-azureaiagent.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.ai.projects import AIProjectClient\nfrom azure.ai.projects.models import CodeInterpreterTool\nfrom azure.identity import DefaultAzureCredential\nfrom typing import Any\nfrom pathlib import Path\nfrom datetime import datetime\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Flight Booking Method in BookingPlugin Class in Python\nDESCRIPTION: This snippet adds a booking_flight method to the BookingPlugin class. It uses the SERP API to search for flight information based on the provided origin, destination, outbound date, and return date. The method returns the combined results for both outbound and return flights.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/code_samples/04-semantic-kernel-python-aiagent-bookinghotel.ipynb#2025-04-18_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n    @kernel_function(description=\"booking flight\")\n    def booking_flight(\n        self, \n        origin: Annotated[str, \"The name of Departure\"], \n        destination: Annotated[str, \"The name of Destination\"], \n        outbound_date: Annotated[str, \"The date of outbound\"], \n        return_date: Annotated[str, \"The date of Return_date\"],\n    ) -> Annotated[str, \"Return the result of booking flight information\"]:\n        \"\"\"\n        Function to book a flight.\n        Parameters:\n        - origin: The name of Departure\n        - destination: The name of Destination\n        - outbound_date: The date of outbound\n        - return_date: The date of Return_date\n        - airline: The preferred airline carrier\n        - hotel_brand: The preferred hotel brand\n        Returns:\n        - The result of booking flight information\n        \"\"\"\n        \n        # Define the parameters for the outbound flight request\n        go_params = {\n            \"engine\": \"google_flights\",\n            \"departure_id\": \"destination\",\n            \"arrival_id\": \"origin\",\n            \"outbound_date\": \"outbound_date\",\n            \"return_date\": \"return_date\",\n            \"currency\": \"GBP\",\n            \"hl\": \"en\",\n            \"airline\": \"airline\",\n            \"hotel_brand\": \"hotel_brand\",\n            \"api_key\": \"SERP_API_KEY\"\n        }\n \n        print(go_params)\n\n        # Send the GET request for the outbound flight\n        go_response = requests.get(BASE_URL, params=go_params)\n\n        # Initialize the result string\n        result = ''\n\n        # Check if the outbound flight request was successful\n        if go_response.status_code == 200:\n            # Parse the response content as JSON\n            response = go_response.json()\n            # Append the outbound flight information to the result\n            result += \"# outbound \\n \" + str(response)\n        else:\n            # Print an error message if the request failed\n            print('error!!!')\n\n        # Define the parameters for the return flight request\n        back_params = {\n            #\"engine\": \"google_flights\",\n            \"departure_id\": destination,\n            \"arrival_id\": origin,\n            \"outbound_date\": outbound_date,\n            \"return_date\": return_date,\n            \"currency\": \"GBP\",\n            \"hl\": \"en\",\n            \"api_key\": SERP_API_KEY\n        }\n\n        # Send the GET request for the return flight\n        back_response = requests.get(BASE_URL, params=back_params)\n\n        # Check if the return flight request was successful\n        if back_response.status_code == 200:\n            # Parse the response content as JSON\n            response = back_response.json()\n            # Append the return flight information to the result\n            result += \"\\n # return \\n\" + str(response)\n        else:\n            # Print an error message if the request failed\n            print('error!!!')\n\n        # Print the result\n        print(result)\n\n        # Return the result\n        return result\n```\n\n----------------------------------------\n\nTITLE: Defining Expense Data Models with Pydantic\nDESCRIPTION: Creates Pydantic models for representing expense data and formatting raw expense inputs. The Expense model defines the structure of individual expenses, while the ExpenseFormatter parses raw text into structured expense objects.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/10-ai-agents-production/code_samples/10-expense_claim-demo.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Expense(BaseModel):\n    date: str = Field(..., description=\"Date of expense in dd-MMM-yyyy format\")\n    description: str = Field(..., description=\"Expense description\")\n    amount: float = Field(..., description=\"Expense amount\")\n    category: str = Field(..., description=\"Expense category (e.g., Transportation, Meals, Accommodation, Miscellaneous)\")\n\nclass ExpenseFormatter(BaseModel):\n    raw_query: str = Field(..., description=\"Raw query input containing expense details\")\n    \n    def parse_expenses(self) -> List[Expense]:\n        \"\"\"\n        Parses the raw query into a list of Expense objects.\n        Expected format: \"date|description|amount|category\" separated by semicolons.\n        \"\"\"\n        expense_list = []\n        for expense_str in self.raw_query.split(\";\"):\n            if expense_str.strip():\n                parts = expense_str.strip().split(\"|\")\n                if len(parts) == 4:\n                    date, description, amount, category = parts\n                    try:\n                        expense = Expense(\n                            date=date.strip(),\n                            description=description.strip(),\n                            amount=float(amount.strip()),\n                            category=category.strip()\n                        )\n                        expense_list.append(expense)\n                    except ValueError as e:\n                        print(f\"[LOG] Parse Error: Invalid data in '{expense_str}': {e}\")\n        return expense_list\n```\n\n----------------------------------------\n\nTITLE: Filtering and Ranking Travel Items in Python\nDESCRIPTION: This method filters and ranks travel items based on user preferences. It uses a relevance score to sort items and returns the top 10 most relevant ones.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\ndef filter_and_rank(self, items, query):\n    ranked_items = sorted(items, key=lambda item: self.relevance_score(item, query), reverse=True)\n    return ranked_items[:10]  # Return top 10 relevant items\n```\n\n----------------------------------------\n\nTITLE: Using Travel Agent Class Example\nDESCRIPTION: Demonstrates basic usage of the Travel_Agent class including initialization, setting preferences, generating recommendations and providing feedback.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fr/09-metacognition/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\ntravel_agent.adjust_based_on_feedback(feedback)\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Agent System with AutoGen in Python\nDESCRIPTION: Demonstrates creation of multiple specialized agents working together in a round-robin fashion using AutoGen. Includes data retrieval and analysis agents with coordination logic.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_retrieve = AssistantAgent(\n    name=\"dataretrieval\",\n    model_client=model_client,\n    tools=[retrieve_tool],\n    system_message=\"Use tools to solve tasks.\"\n)\n\nagent_analyze = AssistantAgent(\n    name=\"dataanalysis\",\n    model_client=model_client,\n    tools=[analyze_tool],\n    system_message=\"Use tools to solve tasks.\"\n)\n\ntermination = TextMentionTermination(\"APPROVE\")\n\nuser_proxy = UserProxyAgent(\"user_proxy\", input_func=input)\n\nteam = RoundRobinGroupChat([agent_retrieve, agent_analyze, user_proxy], termination_condition=termination)\n\nstream = team.run_stream(task=\"Analyze data\", max_turns=10)\nawait Console(stream)\n```\n\n----------------------------------------\n\nTITLE: Generated System Message for Travel Agent AI Assistant\nDESCRIPTION: This code block shows a comprehensive system message generated for a travel agent AI assistant. It includes detailed responsibilities, interaction guidelines, and additional notes for effective customer service.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/hi/06-building-trustworthy-agents/README.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n**Company Name:** Contoso Travel  \n**Role:** Travel Agent Assistant\n\n**Objective:**  \nYou are an AI-powered travel agent assistant for Contoso Travel, specializing in booking flights and providing exceptional customer service. Your main goal is to assist customers in finding, booking, and managing their flights, all while ensuring that their preferences and needs are met efficiently.\n\n**Key Responsibilities:**\n\n1. **Flight Lookup:**\n    \n    - Assist customers in searching for available flights based on their specified destination, dates, and any other relevant preferences.\n    - Provide a list of options, including flight times, airlines, layovers, and pricing.\n2. **Flight Booking:**\n    \n    - Facilitate the booking of flights for customers, ensuring that all details are correctly entered into the system.\n    - Confirm bookings and provide customers with their itinerary, including confirmation numbers and any other pertinent information.\n3. **Customer Preference Inquiry:**\n    \n    - Actively ask customers for their preferences regarding seating (e.g., aisle, window, extra legroom) and preferred times for flights (e.g., morning, afternoon, evening).\n    - Record these preferences for future reference and tailor suggestions accordingly.\n4. **Flight Cancellation:**\n    \n    - Assist customers in canceling previously booked flights if needed, following company policies and procedures.\n    - Notify customers of any necessary refunds or additional steps that may be required for cancellations.\n5. **Flight Monitoring:**\n    \n    - Monitor the status of booked flights and alert customers in real-time about any delays, cancellations, or changes to their flight schedule.\n    - Provide updates through preferred communication channels (e.g., email, SMS) as needed.\n\n**Tone and Style:**\n\n- Maintain a friendly, professional, and approachable demeanor in all interactions with customers.\n- Ensure that all communication is clear, informative, and tailored to the customer's specific needs and inquiries.\n\n**User Interaction Instructions:**\n\n- Respond to customer queries promptly and accurately.\n- Use a conversational style while ensuring professionalism.\n- Prioritize customer satisfaction by being attentive, empathetic, and proactive in all assistance provided.\n\n**Additional Notes:**\n\n- Stay updated on any changes to airline policies, travel restrictions, and other relevant information that could impact flight bookings and customer experience.\n- Use clear and concise language to explain options and processes, avoiding jargon where possible for better customer understanding.\n\nThis AI assistant is designed to streamline the flight booking process for customers of Contoso Travel, ensuring that all their travel needs are met efficiently and effectively.\n\n```\n\n----------------------------------------\n\nTITLE: Identifying User Intent from Queries in Python\nDESCRIPTION: This function analyzes a user query to determine whether the intent is transactional, navigational, or informational. It scans for keywords like \"book\", \"purchase\", \"website\", or \"official\" to classify the intent type.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef identify_intent(query):\n    if \"book\" in query or \"purchase\" in query:\n        return \"transactional\"\n    elif \"website\" in query or \"official\" in query:\n        return \"navigational\"\n    else:\n        return \"informational\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Finding Attractions Based on Destination and Interests\nDESCRIPTION: SQL query that filters the attractions table based on destination and user interests. This query helps identify relevant tourist attractions that match the traveler's preferences.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fr/09-metacognition/README.md#2025-04-18_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM attractions WHERE destination='Paris' AND interests='museums, cuisine';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Intent-Based Search Usage in Python\nDESCRIPTION: This example demonstrates how to use intent-based search with the Travel Agent. It initializes the agent, sets preferences, defines user history, and performs a search for museums in Paris with intent recognition.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nuser_history = [\"Louvre Museum website\", \"Book flight to Paris\"]\nquery = \"best museums in Paris\"\nresults = search_with_intent(query, preferences, user_history)\nprint(\"Search Results:\", results)\n```\n\n----------------------------------------\n\nTITLE: Building OCR Agent for Receipt Image Analysis\nDESCRIPTION: Creates an OCR agent plugin that extracts structured expense data from receipt images. The agent uses Azure's AI inference services with GPT-4o to convert images to structured text data in the required format for expense processing.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/10-ai-agents-production/code_samples/10-expense_claim-demo.ipynb#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass OCRAgentPlugin:\n    def __init__(self):\n        self.client = ChatCompletionsClient(\n            endpoint=\"https://models.inference.ai.azure.com/\",\n            credential=AzureKeyCredential(os.environ.get(\"GITHUB_TOKEN\")),\n        )\n        self.model_name = \"gpt-4o\"\n\n    @kernel_function(description=\"Extract structured travel expense data from receipt.jpg using gpt-4o-model\")\n    def extract_text(self, image_path: str = \"receipt.jpg\") -> str:\n        try:\n            image_url_str = str(ImageUrl.load(image_file=image_path, image_format=\"jpg\", detail=ImageDetailLevel.HIGH))\n\n            prompt = (\n                \"You are an expert OCR assistant specialized in extracting structured data from receipt images. \"\n                \"Analyze the provided receipt image and extract travel-related expense details in the format: \"\n                \"'date|description|amount|category' separated by semicolons. \"\n                \"Follow these rules: \"\n                \"- Date: Convert dates (e.g., '4/4/22') to 'dd-MMM-yyyy' (e.g., '04-Apr-2022'). \"\n                \"- Description: Extract item names (e.g., 'Carlson's Drylawn', 'Peigs transaction Probiotics'). \"\n                \"- Amount: Use numeric values (e.g., '4.50' from '$4.50' or '4.50 dollars'). \"\n                \"- Category: Infer from context (e.g., 'Meals' for food, 'Transportation' for travel, 'Accommodation' for lodging, 'Miscellaneous' otherwise). \"\n                \"Ignore totals, subtotals, or service charges unless they are itemized expenses. \"\n                \"If no expenses are found, return 'No expenses detected'. \"\n                \"Return only the structured data, no additional text.\"\n            )\n            response = self.client.complete(\n                messages=[\n                    SystemMessage(content=prompt),\n                    UserMessage(content=[\n                        TextContentItem(text=\"Extract travel expenses from this receipt image.\"),\n                        ImageContentItem(image_url=ImageUrl(url=image_url_str))\n                    ])\n                ],\n                model=self.model_name,\n                temperature=0.1,\n                max_tokens=2048\n            )\n            extracted_text = response.choices[0].message.content\n            return extracted_text\n        except Exception as e:\n            error_msg = f\"[LOG] OCR Plugin: Error processing image: {str(e)}\"\n            print(error_msg)\n            return error_msg\n```\n\n----------------------------------------\n\nTITLE: Intent-based Search Implementation\nDESCRIPTION: Functions for identifying and handling different types of search intents in the travel agent system.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndef identify_intent(query):\n    if \"book\" in query or \"purchase\" in query:\n        return \"transactional\"\n    elif \"website\" in query or \"official\" in query:\n        return \"navigational\"\n    else:\n        return \"informational\"\n\ndef analyze_context(query, user_history):\n    context = {\n        \"current_query\": query,\n        \"user_history\": user_history\n    }\n    return context\n```\n\n----------------------------------------\n\nTITLE: SQL Query Execution Method\nDESCRIPTION: A function to execute SQL queries against a travel database and retrieve results\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/de/09-metacognition/README.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport sqlite3\n\ndef execute_sql_query(query, database=\"travel.db\"):\n    connection = sqlite3.connect(database)\n    cursor = connection.cursor()\n    cursor.execute(query)\n    results = cursor.fetchall()\n    connection.close()\n    return results\n```\n\n----------------------------------------\n\nTITLE: Implementing Human-in-the-Loop AI Agent Interaction with AutoGen\nDESCRIPTION: Demonstrates creating AI agents with user interaction and approval mechanism using AutoGen framework. Includes setting up agents, defining termination conditions, and running a conversational task with user input.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/06-building-trustworthy-agents/README.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Create the agents.\nmodel_client = OpenAIChatCompletionClient(model=\"gpt-4o-mini\")\nassistant = AssistantAgent(\"assistant\", model_client=model_client)\nuser_proxy = UserProxyAgent(\"user_proxy\", input_func=input)  # Use input() to get user input from console.\n\n# Create the termination condition which will end the conversation when the user says \"APPROVE\".\ntermination = TextMentionTermination(\"APPROVE\")\n\n# Create the team.\nteam = RoundRobinGroupChat([assistant, user_proxy], termination_condition=termination)\n\n# Run the conversation and stream to the console.\nstream = team.run_stream(task=\"Write a 4-line poem about the ocean.\")\n# Use asyncio.run(...) when running in a script.\nawait Console(stream)\n```\n\n----------------------------------------\n\nTITLE: Implementing Azure AI Agent with Visualization\nDESCRIPTION: Implements an async function that creates and runs an AI agent with visualization capabilities. Handles agent creation, thread management, message processing, and output visualization including charts and images.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/code_samples/02-azureaiagent.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML, Image\nfrom pathlib import Path\n\n\nasync def run_agent_with_visualization():\n    html_output = \"<h2>Azure AI Agent Execution</h2>\"\n\n    with project_client:\n        # Create an instance of the CodeInterpreterTool\n        code_interpreter = CodeInterpreterTool()\n\n        # The CodeInterpreterTool needs to be included in creation of the agent\n        # Ensure to set the correct model name as deployed in Azure AI Foundry for your use case\n        agent = project_client.agents.create_agent(\n            model=\"gpt-4o-mini\",\n            name=\"my-agent\",\n            instructions=\"You are helpful agent\",\n            tools=code_interpreter.definitions,\n            tool_resources=code_interpreter.resources,\n        )\n        html_output += f\"<div><strong>Created agent</strong> with ID: {agent.id}</div>\"\n\n        # Create a thread\n        thread = project_client.agents.create_thread()\n        html_output += f\"<div><strong>Created thread</strong> with ID: {thread.id}</div>\"\n\n        # User query - display nicely\n        user_query = \"Could you please create a bar chart for the operating profit using the following data and provide the file to me? Bali: 100 Travelers, Paris: 356 Travelers, London: 900 Travelers, Tokyo: 850 Travellers\"\n        html_output += \"<div style='margin:15px 0; padding:10px; background-color:#f5f5f5; border-left:4px solid #007bff; border-radius:4px;'>\"\n        html_output += \"<strong>User:</strong><br>\"\n        html_output += f\"<div style='margin-left:15px'>{user_query}</div>\"\n        html_output += \"</div>\"\n\n        # Create a message\n        message = project_client.agents.create_message(\n            thread_id=thread.id,\n            role=\"user\",\n            content=user_query,\n        )\n\n        # Run the agent - show a \"processing\" message\n        display(HTML(\n            html_output + \"<div style='color:#007bff'><i>Processing request...</i></div>\"))\n\n        # Execute the run\n        run = project_client.agents.create_and_process_run(\n            thread_id=thread.id, agent_id=agent.id)\n\n        # Update status\n        status_color = 'green' if run.status == 'completed' else 'red'\n        html_output += f\"<div><strong>Run finished</strong> with status: <span style='color:{status_color}'>{run.status}</span></div>\"\n\n        if run.status == \"failed\":\n            html_output += f\"<div style='color:red'><strong>Run failed:</strong> {run.last_error}</div>\"\n\n        # Get messages from the thread\n        messages = project_client.agents.list_messages(thread_id=thread.id)\n\n        # Format assistant response\n        html_output += \"<div style='margin:15px 0; padding:10px; background-color:#f0f7ff; border-left:4px solid #28a745; border-radius:4px;'>\"\n        html_output += \"<strong>Assistant:</strong><br>\"\n\n        # Handle messages based on the actual structure\n        # First, try to get the assistant's text responses\n        try:\n            # First approach - if messages is a list of objects with role attribute\n            assistant_msgs = [msg for msg in messages if hasattr(\n                msg, 'role') and msg.role == \"assistant\"]\n\n            if assistant_msgs:\n                last_msg = assistant_msgs[-1]\n                if hasattr(last_msg, 'content'):\n                    if isinstance(last_msg.content, list):\n                        for content_item in last_msg.content:\n                            if hasattr(content_item, 'type') and content_item.type == \"text\":\n                                html_output += f\"<div style='margin-left:15px; white-space:pre-wrap'>{content_item.text.value}</div>\"\n                    elif isinstance(last_msg.content, str):\n                        html_output += f\"<div style='margin-left:15px; white-space:pre-wrap'>{last_msg.content}</div>\"\n\n            # If no messages were found with the above approach, try a different structure\n            if not assistant_msgs:\n                # If messages is a class with attributes\n                if hasattr(messages, 'data'):\n                    for msg in messages.data:\n                        if hasattr(msg, 'role') and msg.role == \"assistant\":\n                            if hasattr(msg, 'content'):\n                                html_output += f\"<div style='margin-left:15px; white-space:pre-wrap'>{msg.content}</div>\"\n\n        except Exception as e:\n            html_output += f\"<div style='color:red'><strong>Error processing messages:</strong> {str(e)}</div>\"\n\n        html_output += \"</div>\"\n\n        # Handle image contents based on the actual structure\n        saved_images = []\n        try:\n            # Try to access image_contents as an attribute\n            if hasattr(messages, 'image_contents'):\n                for image_content in messages.image_contents:\n                    file_id = image_content.image_file.file_id\n                    file_name = f\"{file_id}_image_file.png\"\n                    project_client.agents.save_file(\n                        file_id=file_id, file_name=file_name)\n                    saved_images.append(file_name)\n                    html_output += f\"<div style='margin-top:10px'><strong>Generated Image:</strong> {file_name}</div>\"\n        except Exception as e:\n            html_output += f\"<div style='color:orange'><i>Note: No images found or error processing images</i></div>\"\n\n        # Handle file path annotations based on the actual structure\n        try:\n            # Try to access file_path_annotations as an attribute\n            if hasattr(messages, 'file_path_annotations'):\n                for file_path_annotation in messages.file_path_annotations:\n                    file_name = Path(file_path_annotation.text).name\n                    project_client.agents.save_file(\n                        file_id=file_path_annotation.file_path.file_id, file_name=file_name)\n                    html_output += \"<div style='margin:10px 0; padding:8px; background-color:#f8f9fa; border:1px solid #ddd; border-radius:4px;'>\"\n                    html_output += f\"<strong>Generated File:</strong> {file_name}<br>\"\n                    html_output += f\"<strong>Type:</strong> {file_path_annotation.type}<br>\"\n                    html_output += \"</div>\"\n        except Exception as e:\n            html_output += f\"<div style='color:orange'><i>Note: No file annotations found or error processing files</i></div>\"\n\n        # Delete the agent once done\n        project_client.agents.delete_agent(agent.id)\n        html_output += \"<div style='margin-top:10px'><i>Agent deleted after completion</i></div>\"\n\n        # Final display of all content\n        display(HTML(html_output))\n\n        # Display any saved images\n        for img_file in saved_images:\n            display(Image(img_file))\n\n# Execute the function\nawait run_agent_with_visualization()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Travel Agent Class with Preference-Based Information Retrieval in Python\nDESCRIPTION: This class implements a Travel_Agent that stores user preferences and retrieves travel information like flights and hotels based on those preferences. The initial example shows the structure for gathering preferences and retrieving relevant information.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n```\n\n----------------------------------------\n\nTITLE: Corrective RAG Preference Adjustment Method\nDESCRIPTION: Dynamic method to adjust travel preferences based on user feedback and experience\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef adjust_preferences(preferences, feedback):\n    if \"liked\" in feedback:\n        preferences[\"favorites\"] = feedback[\"liked\"]\n    if \"disliked\" in feedback:\n        preferences[\"avoid\"] = feedback[\"disliked\"]\n    return preferences\n```\n\n----------------------------------------\n\nTITLE: Implementing Travel Agent Class with Preference Management in Python\nDESCRIPTION: This code defines a Travel_Agent class with initialization and user preference gathering. It provides a foundation for storing and utilizing user travel preferences within the agent system.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n```\n\n----------------------------------------\n\nTITLE: Implementing Preemptive Context Loading for Travel Agent in Python\nDESCRIPTION: This snippet demonstrates the implementation of preemptive context loading for a travel agent application. It includes a TravelAgent class that pre-loads popular destinations and their information, and a method to retrieve destination information.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fr/09-metacognition/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass TravelAgent:\n    def __init__(self):\n        # Pre-load popular destinations and their information\n        self.context = {\n            \"Paris\": {\"country\": \"France\", \"currency\": \"Euro\", \"language\": \"French\", \"attractions\": [\"Eiffel Tower\", \"Louvre Museum\"]},\n            \"Tokyo\": {\"country\": \"Japan\", \"currency\": \"Yen\", \"language\": \"Japanese\", \"attractions\": [\"Tokyo Tower\", \"Shibuya Crossing\"]},\n            \"New York\": {\"country\": \"USA\", \"currency\": \"Dollar\", \"language\": \"English\", \"attractions\": [\"Statue of Liberty\", \"Times Square\"]},\n            \"Sydney\": {\"country\": \"Australia\", \"currency\": \"Dollar\", \"language\": \"English\", \"attractions\": [\"Sydney Opera House\", \"Bondi Beach\"]}\n        }\n\n    def get_destination_info(self, destination):\n        # Fetch destination information from pre-loaded context\n        info = self.context.get(destination)\n        if info:\n            return f\"{destination}:\\nCountry: {info['country']}\\nCurrency: {info['currency']}\\nLanguage: {info['language']}\\nAttractions: {', '.join(info['attractions'])}\"\n        else:\n            return f\"Sorry, we don't have information on {destination}.\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Agent in Azure AI Agent Service using Python\nDESCRIPTION: This code demonstrates how to create an agent in Azure AI Agent Service with a specified model, name, and instructions. The agent is equipped with code interpreter tools and resources to perform code interpretation tasks.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nagent = project_client.agents.create_agent(\n    model=\"gpt-4o-mini\",\n    name=\"my-agent\",\n    instructions=\"You are helpful agent\",\n    tools=code_interpreter.definitions,\n    tool_resources=code_interpreter.resources,\n)\n```\n\n----------------------------------------\n\nTITLE: Gathering User Preferences (SQL Example) in Python\nDESCRIPTION: This code defines a `Travel_Agent` class to gather user preferences, similar to the initial implementation. The `gather_preferences` method updates the `user_preferences` attribute of the class instance with the given preferences. This provides a structure for collecting and storing user-specific travel requirements.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ja/09-metacognition/README.md#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n```\n\n----------------------------------------\n\nTITLE: Search and Personalization Implementation\nDESCRIPTION: Comprehensive implementation of search functionality with intent recognition and result personalization.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ndef search_with_intent(query, preferences, user_history):\n    intent = identify_intent(query)\n    context = analyze_context(query, user_history)\n    if intent == \"informational\":\n        search_results = search_information(query, preferences)\n    elif intent == \"navigational\":\n        search_results = search_navigation(query)\n    elif intent == \"transactional\":\n        search_results = search_transaction(query, preferences)\n    personalized_results = personalize_results(search_results, user_history)\n    return personalized_results\n\ndef search_information(query, preferences):\n    results = search_web(f\"best {preferences['interests']} in {preferences['destination']}\")\n    return results\n\ndef search_navigation(query):\n    results = search_web(query)\n    return results\n\ndef search_transaction(query, preferences):\n    results = search_web(f\"book {query} to {preferences['destination']}\")\n    return results\n\ndef personalize_results(results, user_history):\n    personalized = [result for result in results if result not in user_history]\n    return personalized[:10]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Planning Agent with Task Decomposition in Python\nDESCRIPTION: This code snippet demonstrates how to create a planning agent that decomposes a complex task (travel planning) into subtasks and generates structured JSON output. It uses Pydantic models for data validation and Azure AI services for the language model backend.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/de/07-planning-design/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\nfrom enum import Enum\nfrom typing import List, Optional, Union\nimport json\nimport os\nfrom typing import Optional\nfrom pprint import pprint\nfrom autogen_core.models import UserMessage, SystemMessage, AssistantMessage\nfrom autogen_ext.models.azure import AzureAIChatCompletionClient\nfrom azure.core.credentials import AzureKeyCredential\n\nclass AgentEnum(str, Enum):\n    FlightBooking = \"flight_booking\"\n    HotelBooking = \"hotel_booking\"\n    CarRental = \"car_rental\"\n    ActivitiesBooking = \"activities_booking\"\n    DestinationInfo = \"destination_info\"\n    DefaultAgent = \"default_agent\"\n    GroupChatManager = \"group_chat_manager\"\n\n# Travel SubTask Model\nclass TravelSubTask(BaseModel):\n    task_details: str\n    assigned_agent: AgentEnum  # we want to assign the task to the agent\n\nclass TravelPlan(BaseModel):\n    main_task: str\n    subtasks: List[TravelSubTask]\n    is_greeting: bool\n\nclient = AzureAIChatCompletionClient(\n    model=\"gpt-4o-mini\",\n    endpoint=\"https://models.inference.ai.azure.com\",\n    # To authenticate with the model you will need to generate a personal access token (PAT) in your GitHub settings.\n    # Create your PAT token by following instructions here: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens\n    credential=AzureKeyCredential(os.environ[\"GITHUB_TOKEN\"]),\n    model_info={\n        \"json_output\": False,\n        \"function_calling\": True,\n        \"vision\": True,\n        \"family\": \"unknown\",\n    },\n)\n\n# Define the user message\nmessages = [\n    SystemMessage(content=\"\"\"You are an planner agent.\n    Your job is to decide which agents to run based on the user's request.\n                      Provide your response in JSON format with the following structure:\n{'main_task': 'Plan a family trip from Singapore to Melbourne.',\n 'subtasks': [{'assigned_agent': 'flight_booking',\n               'task_details': 'Book round-trip flights from Singapore to '\n                               'Melbourne.'}]\n    Below are the available agents specialised in different tasks:\n    - FlightBooking: For booking flights and providing flight information\n    - HotelBooking: For booking hotels and providing hotel information\n    - CarRental: For booking cars and providing car rental information\n    - ActivitiesBooking: For booking activities and providing activity information\n    - DestinationInfo: For providing information about destinations\n    - DefaultAgent: For handling general requests\"\"\", source=\"system\"),\n    UserMessage(\n        content=\"Create a travel plan for a family of 2 kids from Singapore to Melboune\", source=\"user\"),\n]\n\nresponse = await client.create(messages=messages, extra_create_args={\"response_format\": 'json_object'})\n\nresponse_content: Optional[str] = response.content if isinstance(\n    response.content, str) else None\nif response_content is None:\n    raise ValueError(\"Response content is not a valid JSON string\" )\n\npprint(json.loads(response_content))\n\n# # Ensure the response content is a valid JSON string before loading it\n# response_content: Optional[str] = response.content if isinstance(\n#     response.content, str) else None\n# if response_content is None:\n#     raise ValueError(\"Response content is not a valid JSON string\")\n\n# # Print the response content after loading it as JSON\n# pprint(json.loads(response_content))\n\n# Validate the response content with the MathReasoning model\n# TravelPlan.model_validate(json.loads(response_content))\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure AI Agent with Custom Tools and Code Interpreter\nDESCRIPTION: Creates an AI agent using Azure AI Project Client with a custom sales data function and code interpreter tool. The implementation demonstrates how to set up a toolset with multiple capabilities for handling sales data queries.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/README.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.ai.projects import AIProjectClient\nfrom azure.identity import DefaultAzureCredential\nfrom fecth_sales_data_functions import fetch_sales_data_using_sqlite_query # fetch_sales_data_using_sqlite_query function which can be found in a fetch_sales_data_functions.py file.\nfrom azure.ai.projects.models import ToolSet, FunctionTool, CodeInterpreterTool\n\nproject_client = AIProjectClient.from_connection_string(\n    credential=DefaultAzureCredential(),\n    conn_str=os.environ[\"PROJECT_CONNECTION_STRING\"],\n)\n\n# Initialize function calling agent with the fetch_sales_data_using_sqlite_query function and adding it to the toolset\nfetch_data_function = FunctionTool(fetch_sales_data_using_sqlite_query)\ntoolset = ToolSet()\ntoolset.add(fetch_data_function)\n\n# Initialize Code Interpreter tool and adding it to the toolset. \ncode_interpreter = code_interpreter = CodeInterpreterTool()\ntoolset = ToolSet()\ntoolset.add(code_interpreter)\n\nagent = project_client.agents.create_agent(\n    model=\"gpt-4o-mini\", name=\"my-agent\", instructions=\"You are helpful agent\", \n    toolset=toolset\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Front Desk and Concierge AI Agents in Python\nDESCRIPTION: This snippet creates two AssistantAgent instances: a front desk travel agent for planning trips and a concierge for providing local insights. Each agent is configured with specific roles and behaviors using system messages.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/08-multi-agent/code_samples/08-autogen.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrontdesk_agent = AssistantAgent(\n    \"planner_agent\",\n    model_client=client,\n    description=\"A helpful assistant that can plan trips.\",\n    system_message=\"\"\"\n    You are a Front Desk Travel Agent with ten years of experience and are known for brevity as you deal with many customers.\n    The goal is to provide the best activites and locations for a traveler to visit.\n    Only provide a single recomendation per response.\n    You're laser focused on the goal at hand.\n    Don't waste time with chit chat.\n    Consider suggestions when refining an idea.\"\"\",\n)\n\nconcierge_agent = AssistantAgent(\n    \"concierge_agent\",\n    model_client=client,\n    description=\"A local assistant that can suggest local activities or places to visit.\",\n    system_message=\"\"\"\n    You are an are hotel concierge who has opinions about providing the most local and authetic experiences for travelers.\n    The goal is to determine if the front desk travel agent has reccommended the best non-touristy experience for a traveler.\n    If so, respond with 'APPROVE'\n    If not, provide insight on how to refine the recommendation without using a specific example. \n    \"\"\",\n)\n```\n\n----------------------------------------\n\nTITLE: Detailed System Message Framework for Travel Agent AI\nDESCRIPTION: A comprehensive system message framework that defines the AI agent's role, responsibilities, communication style, and operational guidelines in detail.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fa/06-building-trustworthy-agents/README.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n**Company Name:** Contoso Travel  \n**Role:** Travel Agent Assistant\n\n**Objective:**  \nYou are an AI-powered travel agent assistant for Contoso Travel, specializing in booking flights and providing exceptional customer service. Your main goal is to assist customers in finding, booking, and managing their flights, all while ensuring that their preferences and needs are met efficiently.\n\n**Key Responsibilities:**\n\n1. **Flight Lookup:**\n    \n    - Assist customers in searching for available flights based on their specified destination, dates, and any other relevant preferences.\n    - Provide a list of options, including flight times, airlines, layovers, and pricing.\n2. **Flight Booking:**\n    \n    - Facilitate the booking of flights for customers, ensuring that all details are correctly entered into the system.\n    - Confirm bookings and provide customers with their itinerary, including confirmation numbers and any other pertinent information.\n3. **Customer Preference Inquiry:**\n    \n    - Actively ask customers for their preferences regarding seating (e.g., aisle, window, extra legroom) and preferred times for flights (e.g., morning, afternoon, evening).\n    - Record these preferences for future reference and tailor suggestions accordingly.\n4. **Flight Cancellation:**\n    \n    - Assist customers in canceling previously booked flights if needed, following company policies and procedures.\n    - Notify customers of any necessary refunds or additional steps that may be required for cancellations.\n5. **Flight Monitoring:**\n    \n    - Monitor the status of booked flights and alert customers in real-time about any delays, cancellations, or changes to their flight schedule.\n    - Provide updates through preferred communication channels (e.g., email, SMS) as needed.\n\n**Tone and Style:**\n\n- Maintain a friendly, professional, and approachable demeanor in all interactions with customers.\n- Ensure that all communication is clear, informative, and tailored to the customer's specific needs and inquiries.\n\n**User Interaction Instructions:**\n\n- Respond to customer queries promptly and accurately.\n- Use a conversational style while ensuring professionalism.\n- Prioritize customer satisfaction by being attentive, empathetic, and proactive in all assistance provided.\n\n**Additional Notes:**\n\n- Stay updated on any changes to airline policies, travel restrictions, and other relevant information that could impact flight bookings and customer experience.\n- Use clear and concise language to explain options and processes, avoiding jargon where possible for better customer understanding.\n\nThis AI assistant is designed to streamline the flight booking process for customers of Contoso Travel, ensuring that all their travel needs are met efficiently and effectively.\n```\n\n----------------------------------------\n\nTITLE: Defining Travel Agent Models and Enums in Python\nDESCRIPTION: This snippet defines the core data models for the travel planning system, including an enum for agent types and Pydantic models for travel subtasks and plans. It sets up the structure for handling different aspects of travel planning.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/07-planning-design/code_samples/07-autogen.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\nfrom enum import Enum\nfrom typing import List, Optional, Union\nimport json\nimport os\nfrom typing import Optional\nfrom pprint import pprint\nfrom autogen_core.models import UserMessage, SystemMessage, AssistantMessage\nfrom autogen_ext.models.azure import AzureAIChatCompletionClient\nfrom azure.core.credentials import AzureKeyCredential\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nclass AgentEnum(str, Enum):\n    FlightBooking = \"flight_booking\"\n    HotelBooking = \"hotel_booking\"\n    CarRental = \"car_rental\"\n    ActivitiesBooking = \"activities_booking\"\n    DestinationInfo = \"destination_info\"\n    DefaultAgent = \"default_agent\"\n    GroupChatManager = \"group_chat_manager\"\n\n# Travel SubTask Model\n\n\nclass TravelSubTask(BaseModel):\n    task_details: str\n    assigned_agent: AgentEnum  # we want to assign the task to the agent\n\n\nclass TravelPlan(BaseModel):\n    main_task: str\n    subtasks: List[TravelSubTask]\n    is_greeting: bool\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Client and Chat Completion Service\nDESCRIPTION: Creates and configures an asynchronous OpenAI client and a chat completion service using environment variables. This sets up the foundation for the AI agent's language model capabilities.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-semantic-kernel-chromadb.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Initialize the asynchronous OpenAI client\nclient = AsyncOpenAI(\n    api_key=os.environ[\"GITHUB_TOKEN\"],\n    base_url=\"https://models.inference.ai.azure.com/\"\n)\n\n\n# Create the OpenAI Chat Completion Service\nchat_completion_service = OpenAIChatCompletion(\n    ai_model_id=\"gpt-4o-mini\",\n    async_client=client,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure AI Agent with Tools\nDESCRIPTION: Creates an AI agent with specific model, name, instructions and tool configurations for code interpretation tasks.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nagent = project_client.agents.create_agent(\n    model=\"gpt-4o-mini\",\n    name=\"my-agent\",\n    instructions=\"You are helpful agent\",\n    tools=code_interpreter.definitions,\n    tool_resources=code_interpreter.resources,\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Travel Planning Agent\nDESCRIPTION: Imports necessary libraries and modules for the travel planning agent, including OpenAI, Semantic Kernel, and Pydantic for data validation.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/07-planning-design/code_samples/07-semantic-kernel.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport os\n\nfrom dotenv import load_dotenv\n\nfrom pydantic import BaseModel, ValidationError, Field\n\n\nfrom openai import AsyncOpenAI\n\nfrom semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion, OpenAIChatPromptExecutionSettings\nfrom semantic_kernel.agents import ChatCompletionAgent, ChatHistoryAgentThread\n\nfrom semantic_kernel.functions import KernelArguments\n```\n\n----------------------------------------\n\nTITLE: Running the Travel Agent with Tool Calling and Response Streaming\nDESCRIPTION: This comprehensive code demonstrates how to run the travel agent in an interactive session with multiple user inputs. It handles streaming responses, function calls, and results display. The implementation includes detailed HTML formatting for display in a notebook environment.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/code_samples/04-semantic-kernel-tool.ipynb#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nuser_inputs = [\n    \"What destinations are available?\",\n    \"Is Barcelona available?\",\n    \"Are there any vacation destinations available not in Europe?\",\n]\n\nasync def main():\n    thread: ChatHistoryAgentThread | None = None\n\n    for user_input in user_inputs:\n        html_output = (\n            f\"<div style='margin-bottom:10px'>\"\n            f\"<div style='font-weight:bold'>User:</div>\"\n            f\"<div style='margin-left:20px'>{user_input}</div></div>\"\n        )\n\n        agent_name = None\n        full_response: list[str] = []\n        function_calls: list[str] = []\n\n        # Buffer to reconstruct streaming function call\n        current_function_name = None\n        argument_buffer = \"\"\n\n        async for response in agent.invoke_stream(\n            messages=user_input,\n            thread=thread,\n        ):\n            thread = response.thread\n            agent_name = response.name\n            content_items = list(response.items)\n\n            for item in content_items:\n                if isinstance(item, FunctionCallContent):\n                    if item.function_name:\n                        current_function_name = item.function_name\n\n                    # Accumulate arguments (streamed in chunks)\n                    if isinstance(item.arguments, str):\n                        argument_buffer += item.arguments\n                elif isinstance(item, FunctionResultContent):\n                    # Finalize any pending function call before showing result\n                    if current_function_name:\n                        formatted_args = argument_buffer.strip()\n                        try:\n                            parsed_args = json.loads(formatted_args)\n                            formatted_args = json.dumps(parsed_args)\n                        except Exception:\n                            pass  # leave as raw string\n\n                        function_calls.append(f\"Calling function: {current_function_name}({formatted_args})\")\n                        current_function_name = None\n                        argument_buffer = \"\"\n\n                    function_calls.append(f\"\\nFunction Result:\\n\\n{item.result}\")\n                elif isinstance(item, StreamingTextContent) and item.text:\n                    full_response.append(item.text)\n\n        if function_calls:\n            html_output += (\n                \"<div style='margin-bottom:10px'>\"\n                \"<details>\"\n                \"<summary style='cursor:pointer; font-weight:bold; color:#0066cc;'>Function Calls (click to expand)</summary>\"\n                \"<div style='margin:10px; padding:10px; background-color:#f8f8f8; \"\n                \"border:1px solid #ddd; border-radius:4px; white-space:pre-wrap; font-size:14px; color:#333;'>\"\n                f\"{chr(10).join(function_calls)}\"\n                \"</div></details></div>\"\n            )\n\n        html_output += (\n            \"<div style='margin-bottom:20px'>\"\n            f\"<div style='font-weight:bold'>{agent_name or 'Assistant'}:</div>\"\n            f\"<div style='margin-left:20px; white-space:pre-wrap'>{''.join(full_response)}</div></div><hr>\"\n        )\n\n        display(HTML(html_output))\n\nawait main()\n```\n\n----------------------------------------\n\nTITLE: Metacognitive Hotel Recommendation Agent\nDESCRIPTION: An advanced AI agent that can reflect on and adjust its recommendation strategy based on past performance and user feedback\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/de/09-metacognition/README.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass HotelRecommendationAgent:\n    def __init__(self):\n        self.previous_choices = []\n        self.corrected_choices = []\n        self.recommendation_strategies = ['cheapest', 'highest_quality']\n\n    def recommend_hotel(self, hotels, strategy):\n        if strategy == 'cheapest':\n            recommended = min(hotels, key=lambda x: x['price'])\n        elif strategy == 'highest_quality':\n            recommended = max(hotels, key=lambda x: x['quality'])\n        else:\n            recommended = None\n        self.previous_choices.append((strategy, recommended))\n        return recommended\n\n    def reflect_on_choice(self):\n        if not self.previous_choices:\n            return \"No choices made yet.\"\n\n        last_choice_strategy, last_choice = self.previous_choices[-1]\n        user_feedback = self.get_user_feedback(last_choice)\n\n        if user_feedback == \"bad\":\n            new_strategy = 'highest_quality' if last_choice_strategy == 'cheapest' else 'cheapest'\n            self.corrected_choices.append((new_strategy, last_choice))\n            return f\"Reflecting on choice. Adjusting strategy to {new_strategy}.\"\n        else:\n            return \"The choice was good. No need to adjust.\"\n\n    def get_user_feedback(self, hotel):\n        if hotel['price'] < 100 or hotel['quality'] < 7:\n            return \"bad\"\n        return \"good\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Relevance Scoring for Travel Recommendations in Python\nDESCRIPTION: This function calculates a relevance score for an item based on how well it matches the user's query parameters. It assigns points when the item's category matches interests, price is within budget, and location matches the destination.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef relevance_score(item, query):\n    score = 0\n    if item['category'] in query['interests']:\n        score += 1\n    if item['price'] <= query['budget']:\n        score += 1\n    if item['location'] == query['destination']:\n        score += 1\n    return score\n```\n\n----------------------------------------\n\nTITLE: Implementing WeatherInfoPlugin for Travel Temperature Information\nDESCRIPTION: This class defines a WeatherInfoPlugin that provides average temperature information for specific travel destinations. It uses a predefined dictionary of destinations and their temperatures, and includes a method to retrieve this information.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-semantic-kernel-azuresearch.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass WeatherInfoPlugin:\n    \"\"\"A Plugin that provides the average temperature for a travel destination.\"\"\"\n\n    def __init__(self):\n        # Dictionary of destinations and their average temperatures\n        self.destination_temperatures = {\n            \"maldives\": \"82°F (28°C)\",\n            \"swiss alps\": \"45°F (7°C)\",\n            \"african safaris\": \"75°F (24°C)\"\n        }\n\n    @kernel_function(description=\"Get the average temperature for a specific travel destination.\")\n    def get_destination_temperature(self, destination: str) -> Annotated[str, \"Returns the average temperature for the destination.\"]:\n        \"\"\"Get the average temperature for a travel destination.\"\"\"\n        # Normalize the input destination (lowercase)\n        normalized_destination = destination.lower()\n\n        # Look up the temperature for the destination\n        if normalized_destination in self.destination_temperatures:\n            return f\"The average temperature in {destination} is {self.destination_temperatures[normalized_destination]}.\"\n        else:\n            return f\"Sorry, I don't have temperature information for {destination}. Available destinations are: Maldives, Swiss Alps, and African safaris.\"\n```\n\n----------------------------------------\n\nTITLE: Defining Travel Plan Data Models with Pydantic\nDESCRIPTION: Creates Pydantic data models for travel planning components including an agent enumeration, subtask model, and travel plan structure. These models define the structure for assigning specialized agents to specific travel-related tasks.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/07-planning-design/code_samples/07-azure-openai.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\nfrom enum import Enum\nfrom typing import List, Optional, Union\n\nclass AgentEnum(str, Enum):\n    FlightBooking = \"flight_booking\"\n    HotelBooking = \"hotel_booking\"\n    CarRental = \"car_rental\"\n    ActivitiesBooking = \"activities_booking\"\n    DestinationInfo = \"destination_info\"\n    DefaultAgent = \"default_agent\"\n    GroupChatManager = \"group_chat_manager\"\n\n# Travel SubTask Model\nclass TravelSubTask(BaseModel):\n    task_details: str\n    assigned_agent: AgentEnum # we want to assign the task to the agent\n\nclass TravelPlan(BaseModel):\n    main_task: str\n    subtasks: List[TravelSubTask]\n    is_greeting: bool\n```\n\n----------------------------------------\n\nTITLE: Implementing Travel Agent Conversation Loop in Python\nDESCRIPTION: This snippet sets up an asynchronous main function to handle user inputs and agent responses. It processes the agent's responses, including function calls and results, and displays them in an HTML format using IPython.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/10-ai-agents-production/code_samples/10-semantic-kernel.ipynb#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\nuser_inputs = [\n    \"Book me a flight to Barcelona\",\n]\n\n# Create a thread to hold the conversation\n# If no thread is provided, a new thread will be\n# created and returned with the initial response\nthread: ChatHistoryAgentThread | None = None\n\nasync def main():\n    global thread\n    \n    for user_input in user_inputs:\n        html_output = (\n            f\"<div style='margin-bottom:10px'>\"\n            f\"<div style='font-weight:bold'>User:</div>\"\n            f\"<div style='margin-left:20px'>{user_input}</div></div>\"\n        )\n\n        agent_name = None\n        full_response: list[str] = []\n        function_calls: list[str] = []\n\n        # Buffer to reconstruct streaming function call\n        current_function_name = None\n        argument_buffer = \"\"\n\n        async for response in agent.invoke_stream(\n            messages=user_input,\n            thread=thread,\n        ):\n            thread = response.thread\n            agent_name = response.name\n            content_items = list(response.items)\n\n            for item in content_items:\n                if isinstance(item, FunctionCallContent):\n                    if item.function_name:\n                        current_function_name = item.function_name\n\n                    # Accumulate arguments (streamed in chunks)\n                    if isinstance(item.arguments, str):\n                        argument_buffer += item.arguments\n                elif isinstance(item, FunctionResultContent):\n                    # Finalize any pending function call before showing result\n                    if current_function_name:\n                        formatted_args = argument_buffer.strip()\n                        try:\n                            parsed_args = json.loads(formatted_args)\n                            formatted_args = json.dumps(parsed_args)\n                        except Exception:\n                            pass  # leave as raw string\n\n                        function_calls.append(f\"Calling function: {current_function_name}({formatted_args})\")\n                        current_function_name = None\n                        argument_buffer = \"\"\n\n                    function_calls.append(f\"\\nFunction Result:\\n\\n{item.result}\")\n                elif isinstance(item, StreamingTextContent) and item.text:\n                    full_response.append(item.text)\n\n        if function_calls:\n            html_output += (\n                \"<div style='margin-bottom:10px'>\"\n                \"<details>\"\n                \"<summary style='cursor:pointer; font-weight:bold; color:#0066cc;'>Function Calls (click to expand)</summary>\"\n                \"<div style='margin:10px; padding:10px; background-color:#f8f8f8; \"\n                \"border:1px solid #ddd; border-radius:4px; white-space:pre-wrap; font-size:14px; color:#333;'>\"\n                f\"{chr(10).join(function_calls)}\"\n                \"</div></details></div>\"\n            )\n\n        html_output += (\n            \"<div style='margin-bottom:20px'>\"\n            f\"<div style='font-weight:bold'>{agent_name or 'Assistant'}:</div>\"\n            f\"<div style='margin-left:20px; white-space:pre-wrap'>{''.join(full_response)}</div></div><hr>\"\n        )\n\n        display(HTML(html_output))\n\nawait main()\n```\n\n----------------------------------------\n\nTITLE: Filtering and Ranking Travel Items by Relevance in Python\nDESCRIPTION: This Python code snippet demonstrates filtering and ranking travel items by relevance. The filter_and_rank function sorts items based on their relevance scores, calculated using the relevance_score function. The function returns the top 10 most relevant items. It requires a list of item dictionaries and a user query dictionary as input.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ko/09-metacognition/README.md#2025-04-18_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef filter_and_rank(items, query):\n    ranked_items = sorted(items, key=lambda item: relevance_score(item, query), reverse=True)\n    return ranked_items[:10]  # Return top 10 relevant items\n```\n\n----------------------------------------\n\nTITLE: Retrieving Information for Travel Agent in Python\nDESCRIPTION: This snippet retrieves various information relevant to the trip based on user preferences. It simulates searches for flights, hotels, and attractions to gather data necessary for generating travel recommendations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nflights = search_flights(preferences)\nhotels = search_hotels(preferences)\nattractions = search_attractions(preferences)\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure AI Search for Travel Document Storage\nDESCRIPTION: This code sets up Azure AI Search with persistent storage for travel documents. It initializes the search client, defines the index schema, creates the index if it doesn't exist, and uploads sample travel documents to the index.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-semantic-kernel-azuresearch.ipynb#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Initialize Azure AI Search with persistent storage\nsearch_service_endpoint = os.getenv(\"AZURE_SEARCH_SERVICE_ENDPOINT\")\nsearch_api_key = os.getenv(\"AZURE_SEARCH_API_KEY\")\nindex_name = \"travel-documents\"\n\nsearch_client = SearchClient(\n    endpoint=search_service_endpoint,\n    index_name=index_name,\n    credential=AzureKeyCredential(search_api_key)\n)\n\nindex_client = SearchIndexClient(\n    endpoint=search_service_endpoint,\n    credential=AzureKeyCredential(search_api_key)\n)\n\n# Define the index schema\nfields = [\n    SimpleField(name=\"id\", type=SearchFieldDataType.String, key=True),\n    SearchableField(name=\"content\", type=SearchFieldDataType.String)\n]\n\nindex = SearchIndex(name=index_name, fields=fields)\n\n# Check if index already exists if not, create it\ntry:\n    existing_index = index_client.get_index(index_name)\n    print(f\"Index '{index_name}' already exists, using the existing index.\")\nexcept Exception:\n    # Create the index if it doesn't exist\n    print(f\"Creating new index '{index_name}'...\")\n    index_client.create_index(index)\n\n\n# Enhanced sample documents\ndocuments = [\n    {\"id\": \"1\", \"content\": \"Contoso Travel offers luxury vacation packages to exotic destinations worldwide.\"},\n    {\"id\": \"2\", \"content\": \"Our premium travel services include personalized itinerary planning and 24/7 concierge support.\"},\n    {\"id\": \"3\", \"content\": \"Contoso's travel insurance covers medical emergencies, trip cancellations, and lost baggage.\"},\n    {\"id\": \"4\", \"content\": \"Popular destinations include the Maldives, Swiss Alps, and African safaris.\"},\n    {\"id\": \"5\", \"content\": \"Contoso Travel provides exclusive access to boutique hotels and private guided tours.\"}\n]\n\n# Add documents to the index\nsearch_client.upload_documents(documents)\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Agent System with AutoGen\nDESCRIPTION: Demonstrates how to set up a multi-agent system with different specialized agents (editor, writer, illustrator) and a group chat manager for coordination.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\neditor_description = \"Editor for planning and reviewing the content.\"\n\n# Example of declaring an Agent\neditor_agent_type = await EditorAgent.register(\nruntime,\neditor_topic_type,  # Using topic type as the agent type.\nlambda: EditorAgent(\n    description=editor_description,\n    group_chat_topic_type=group_chat_topic_type,\n    model_client=OpenAIChatCompletionClient(\n        model=\"gpt-4o-2024-08-06\",\n        # api_key=\"YOUR_API_KEY\",\n    ),\n    ),\n)\n\n# remaining declarations shortened for brevity\n\n# Group chat\ngroup_chat_manager_type = await GroupChatManager.register(\nruntime,\n\"group_chat_manager\",\nlambda: GroupChatManager(\n    participant_topic_types=[writer_topic_type, illustrator_topic_type, editor_topic_type, user_topic_type],\n    model_client=OpenAIChatCompletionClient(\n        model=\"gpt-4o-2024-08-06\",\n        # api_key=\"YOUR_API_KEY\",\n    ),\n    participant_descriptions=[\n        writer_description, \n        illustrator_description, \n        editor_description, \n        user_description\n    ],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Destinations Plugin for Semantic Kernel\nDESCRIPTION: This code defines a DestinationsPlugin class that provides a random vacation destination. It uses the @kernel_function decorator to make it compatible with Semantic Kernel.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/code_samples/02-semantic-kernel.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport random   \n\n# Define a sample plugin for the sample\n\nclass DestinationsPlugin:\n    \"\"\"A List of Random Destinations for a vacation.\"\"\"\n\n    def __init__(self):\n        # List of vacation destinations\n        self.destinations = [\n            \"Barcelona, Spain\",\n            \"Paris, France\",\n            \"Berlin, Germany\",\n            \"Tokyo, Japan\",\n            \"Sydney, Australia\",\n            \"New York, USA\",\n            \"Cairo, Egypt\",\n            \"Cape Town, South Africa\",\n            \"Rio de Janeiro, Brazil\",\n            \"Bali, Indonesia\"\n        ]\n        # Track last destination to avoid repeats\n        self.last_destination = None\n\n    @kernel_function(description=\"Provides a random vacation destination.\")\n    def get_random_destination(self) -> Annotated[str, \"Returns a random vacation destination.\"]:\n        # Get available destinations (excluding last one if possible)\n        available_destinations = self.destinations.copy()\n        if self.last_destination and len(available_destinations) > 1:\n            available_destinations.remove(self.last_destination)\n\n        # Select a random destination\n        destination = random.choice(available_destinations)\n\n        # Update the last destination\n        self.last_destination = destination\n\n        return destination\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Client and Chat Completion Service\nDESCRIPTION: Sets up the OpenAI client and Semantic Kernel's chat completion service. Loads environment variables, initializes the AsyncOpenAI client with API key and base URL, and configures the OpenAIChatCompletion service with a specific model.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/code_samples/09-semantic-kernel.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nclient = AsyncOpenAI(\n    api_key=os.getenv(\"GITHUB_TOKEN\"), \n    base_url=\"https://models.inference.ai.azure.com/\",\n)\n\nchat_completion_service = OpenAIChatCompletion(\n    ai_model_id=\"gpt-4o-mini\",\n    async_client=client,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Travel Agent with Semantic Kernel\nDESCRIPTION: Initializes a ChatCompletionAgent named 'TravelAgent' with the configured AI service and the custom DestinationsPlugin. The agent is given instructions to help plan vacations for customers at random destinations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/01-intro-to-ai-agents/code_samples/01-semantic-kernel.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagent = ChatCompletionAgent(\n    service=chat_completion_service, \n    plugins=[DestinationsPlugin()],\n    name=\"TravelAgent\",\n    instructions=\"You are a helpful AI Agent that can help plan vacations for customers at random destinations\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Travel Agent with ChatCompletionAgent in Python\nDESCRIPTION: This snippet defines the travel agent's instructions and creates a ChatCompletionAgent instance. It specifies the agent's name, instructions, and includes the DestinationsPlugin for handling travel-related queries.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/10-ai-agents-production/code_samples/10-semantic-kernel.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAGENT_NAME = \"TravelAgent\"\nAGENT_INSTRUCTIONS = \"\"\" \\\n\"You are Flight Booking Agent that provides information about available flights and gives travel activity suggestions when asked.\nTravel activity suggestions should be specific to customer, location and amount of time at location.\n\nYou have access to the following tools to help users plan their trips:\n1. get_destinations: Returns a list of available vacation destinations that users can choose from.\n2. get_flight_times: Provides available flight times for specific destinations.\n3. get_flight_times_backup: Backup function that provides available flight times when the primary service is down.\n\nYour process for assisting users:\n- When users inquire about flight booking, book the earliest flight available for the destination they choose using get_flight_times.\n- If get_flight_times returns an error message, immediately use get_flight_times_backup with the same destination parameter to retrieve flight information.\n- Since you do not have access to a booking system, DO NOT ask to proceed with booking, just assume you have booked the flight.\n- Use any past conversation history to understand user preferences and consider them when making suggestions on flights and activities. When making a suggestion, be very clear on why you are making this suggestion if based on a user preference.\n\nGuidelines:\n- Use the exact destination names when using tools (Barcelona, Paris, Berlin, Tokyo, New York)\n- Respond in a helpful and enthusiastic manner about travel possibilities\n- Always seek feedback to ensure your suggestions meet the user's expectations\n- Acknowledge when a request falls outside your capabilities\n- For better formatting, always display flight times in a list format\n- When giving any timed suggestions, reflect if the time frames are reasonable. Respond again if not.\n- If the flight times service is down, inform the user that you're using backup flight data while maintaining a positive tone.\n\nYour goal is to help users explore vacation options efficiently and make informed travel decisions by understanding their preferences and providing tailored recommendations.\n\"\"\"\n# Create the agent\nagent = ChatCompletionAgent(\n    service=chat_completion_service,\n    plugins=[DestinationsPlugin()],\n    name=AGENT_NAME,\n    instructions=AGENT_INSTRUCTIONS,\n)\n```\n\n----------------------------------------\n\nTITLE: Travel Agent Class Implementation\nDESCRIPTION: Basic implementation of the Travel Agent class with preference gathering functionality.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n```\n\n----------------------------------------\n\nTITLE: Script Execution Setup\nDESCRIPTION: Code to handle script execution in both interactive and standard environments\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-autogen-chromadb.ipynb#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    if asyncio.get_event_loop().is_running():\n        await main()\n    else:\n        asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Flight Selection\nDESCRIPTION: This SQL query selects flights matching specific destination, date range, and budget criteria. It retrieves all available flight records from the flights table that match the user's travel preferences.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_36\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM flights WHERE destination='Paris' AND dates='2025-04-01 to 2025-04-10' AND budget='moderate';\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenAI Client and Chat Completion Service for Semantic Kernel\nDESCRIPTION: This snippet sets up the OpenAI client using environment variables and creates a chat completion service using GitHub Models. It demonstrates how to configure the AI service for use with Semantic Kernel.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/code_samples/02-semantic-kernel.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nclient = AsyncOpenAI(\n    api_key=os.environ.get(\"GITHUB_TOKEN\"), \n    base_url=\"https://models.inference.ai.azure.com/\",\n)\n\n# Create an AI Service that will be used by the `ChatCompletionAgent`\nchat_completion_service = OpenAIChatCompletion(\n    ai_model_id=\"gpt-4o-mini\",\n    async_client=client,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multi-Agent System with AutoGen in Python\nDESCRIPTION: This snippet illustrates the creation of a multi-agent system using AutoGen. It includes the registration of different agent types and the setup of a GroupChatManager to coordinate interactions between various specialized agents.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\neditor_description = \"Editor for planning and reviewing the content.\"\n\n# Example of declaring an Agent\neditor_agent_type = await EditorAgent.register(\nruntime,\neditor_topic_type,  # Using topic type as the agent type.\nlambda: EditorAgent(\n    description=editor_description,\n    group_chat_topic_type=group_chat_topic_type,\n    model_client=OpenAIChatCompletionClient(\n        model=\"gpt-4o-2024-08-06\",\n        # api_key=\"YOUR_API_KEY\",\n    ),\n    ),\n)\n\n# remaining declarations shortened for brevity\n\n# Group chat\ngroup_chat_manager_type = await GroupChatManager.register(\nruntime,\n\"group_chat_manager\",\nlambda: GroupChatManager(\n    participant_topic_types=[writer_topic_type, illustrator_topic_type, editor_topic_type, user_topic_type],\n    model_client=OpenAIChatCompletionClient(\n        model=\"gpt-4o-2024-08-06\",\n        # api_key=\"YOUR_API_KEY\",\n    ),\n    participant_descriptions=[\n        writer_description, \n        illustrator_description, \n        editor_description, \n        user_description\n    ],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: RAG Implementation as Prompting Technique\nDESCRIPTION: Example of implementing RAG as a prompting technique for searching museums in Paris using a simple function call.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef search_museums_in_paris():\n    prompt = \"Find top museums in Paris\"\n    search_results = search_web(prompt)\n    return search_results\n\nmuseums = search_museums_in_paris()\nprint(\"Top Museums in Paris:\", museums)\n```\n\n----------------------------------------\n\nTITLE: Initializing TravelAgent and Getting Recommendations using Azure OpenAI in Python\nDESCRIPTION: This code snippet demonstrates how to set up a TravelAgent with predefined destinations, specify user preferences, and use Azure OpenAI to get personalized travel recommendations. It requires an Azure OpenAI API key and endpoint.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fa/09-metacognition/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Example usage\ndestinations = [\n    {\"name\": \"Paris\", \"description\": \"City of lights, known for its art, fashion, and culture.\"},\n    {\"name\": \"Tokyo\", \"description\": \"Vibrant city, famous for its modernity and traditional temples.\"},\n    {\"name\": \"New York\", \"description\": \"The city that never sleeps, with iconic landmarks and diverse culture.\"},\n    {\"name\": \"Sydney\", \"description\": \"Beautiful harbour city, known for its opera house and stunning beaches.\"},\n]\n\npreferences = {\"activity\": \"sightseeing\", \"culture\": \"diverse\"}\napi_key = 'your_azure_openai_api_key'\nendpoint = 'https://your-endpoint.com/openai/deployments/your-deployment-name/completions?api-version=2022-12-01'\n\ntravel_agent = TravelAgent(destinations)\nrecommendations = travel_agent.get_recommendations(preferences, api_key, endpoint)\nprint(\"Recommended Destinations:\")\nfor rec in recommendations:\n    print(rec)\n```\n\n----------------------------------------\n\nTITLE: Initializing Semantic Kernel with Azure OpenAI in Python\nDESCRIPTION: This code snippet demonstrates how to set up Semantic Kernel with Azure OpenAI, define a custom plugin for booking travel, and prepare for AI-assisted interactions. It showcases the use of modular components and function calling capabilities.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom typing import Annotated\n\nfrom semantic_kernel.connectors.ai import FunctionChoiceBehavior\nfrom semantic_kernel.connectors.ai.open_ai import AzureChatCompletion, AzureChatPromptExecutionSettings\nfrom semantic_kernel.contents import ChatHistory\nfrom semantic_kernel.functions import kernel_function\nfrom semantic_kernel.kernel import Kernel\n\n# Define a ChatHistory object to hold the conversation's context\nchat_history = ChatHistory()\nchat_history.add_user_message(\"I'd like to go to New York on January 1, 2025\")\n\n\n# Define a sample plugin that contains the function to book travel\nclass BookTravelPlugin:\n    \"\"\"A Sample Book Travel Plugin\"\"\"\n\n    @kernel_function(name=\"book_flight\", description=\"Book travel given location and date\")\n    async def book_flight(\n        self, date: Annotated[str, \"The date of travel\"], location: Annotated[str, \"The location to travel to\"]\n    ) -> str:\n        return f\"Travel was booked to {location} on {date}\"\n\n# Create the Kernel\nkernel = Kernel()\n\n# Add the sample plugin to the Kernel object\nkernel.add_plugin(BookTravelPlugin(), plugin_name=\"book_travel\")\n\n# Define the Azure OpenAI AI Connector\nchat_service = AzureChatCompletion(\n    deployment_name=\"YOUR_DEPLOYMENT_NAME\", \n    api_key=\"YOUR_API_KEY\", \n    endpoint=\"https://<your-resource>.azure.openai.com/\",\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin to Kernel in Semantic Kernel using Python\nDESCRIPTION: This code snippet demonstrates how to create a kernel, create a plugin instance (`GetCurrentTimePlugin`), and add the plugin to the kernel.  This allows the kernel to automatically serialize the function and its parameters for use with LLMs. The Kernel object manages the registration and execution of plugins.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ko/04-tool-use/README.md#2025-04-18_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom semantic_kernel import Kernel\n\n# Create the kernel\nkernel = Kernel()\n\n# Create the plugin\nget_current_time_plugin = GetCurrentTimePlugin(location)\n\n# Add the plugin to the kernel\nkernel.add_plugin(get_current_time_plugin)\n\n```\n\n----------------------------------------\n\nTITLE: Query Processing with Natural Language Processing in Python\nDESCRIPTION: This Python function, process_query, uses NLP to extract important information from a user's query, aiding in understanding user intent. It assumes the existence of an 'nlp' model capable of processing natural language text. The function inputs a query string and outputs a processed query object, essential for further processing steps. Specific NLP library dependencies need to be integrated for actual implementation.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ko/09-metacognition/README.md#2025-04-18_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef process_query(query):\n    # Use NLP to extract key information from the user's query\n    processed_query = nlp(query)\n    return processed_query\n```\n\n----------------------------------------\n\nTITLE: Creating WeatherInfoPlugin for Destination Temperature Data\nDESCRIPTION: Implements a WeatherInfoPlugin class that provides temperature data for specific travel destinations. This plugin offers a simple lookup service for average temperatures at popular destinations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-semantic-kernel-chromadb.ipynb#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass WeatherInfoPlugin:\n    \"\"\"A Plugin that provides the average temperature for a travel destination.\"\"\"\n\n    def __init__(self):\n        # Dictionary of destinations and their average temperatures\n        self.destination_temperatures = {\n            \"maldives\": \"82°F (28°C)\",\n            \"swiss alps\": \"45°F (7°C)\",\n            \"african safaris\": \"75°F (24°C)\"\n        }\n\n    @kernel_function(description=\"Get the average temperature for a specific travel destination.\")\n    def get_destination_temperature(self, destination: str) -> Annotated[str, \"Returns the average temperature for the destination.\"]:\n        \"\"\"Get the average temperature for a travel destination.\"\"\"\n        # Normalize the input destination (lowercase)\n        normalized_destination = destination.lower()\n\n        # Look up the temperature for the destination\n        if normalized_destination in self.destination_temperatures:\n            return f\"The average temperature in {destination} is {self.destination_temperatures[normalized_destination]}.\"\n        else:\n            return f\"Sorry, I don't have temperature information for {destination}. Available destinations are: Maldives, Swiss Alps, and African safaris.\"\n```\n\n----------------------------------------\n\nTITLE: Travel Plan JSON Response Structure\nDESCRIPTION: Example JSON response showing how tasks are broken down and assigned to specific agents for a travel planning request.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/07-planning-design/README.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"is_greeting\": \"False\",\n    \"main_task\": \"Plan a family trip from Singapore to Melbourne.\",\n    \"subtasks\": [\n        {\n            \"assigned_agent\": \"flight_booking\",\n            \"task_details\": \"Book round-trip flights from Singapore to Melbourne.\"\n        },\n        {\n            \"assigned_agent\": \"hotel_booking\",\n            \"task_details\": \"Find family-friendly hotels in Melbourne.\"\n        },\n        {\n            \"assigned_agent\": \"car_rental\",\n            \"task_details\": \"Arrange a car rental suitable for a family of four in Melbourne.\"\n        },\n        {\n            \"assigned_agent\": \"activities_booking\",\n            \"task_details\": \"List family-friendly activities in Melbourne.\"\n        },\n        {\n            \"assigned_agent\": \"destination_info\",\n            \"task_details\": \"Provide information about Melbourne as a travel destination.\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssistantAgent for Travel Recommendations in Python\nDESCRIPTION: This snippet creates an AssistantAgent with the vacation destinations tool. It sets up the agent's system message and enables reflection on tool use for natural language responses.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/code_samples/04-autogen.ipynb#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagent = AssistantAgent(\n    name=\"assistant\",\n    model_client=client,\n    tools=[get_vacations],\n    system_message=\"You are a travel agent that helps users find vacation destinations.\",\n    reflect_on_tool_use=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Running AssistantAgent for Travel Recommendations in Python\nDESCRIPTION: This snippet defines an asynchronous function to run the agent with a user query about a trip to Tokyo. It demonstrates how to interact with the agent and print its responses.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/code_samples/04-autogen.ipynb#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def assistant_run() -> None:\n    response = await agent.on_messages(\n        [TextMessage(content=\"I would like to take a trip to Tokyo\", source=\"user\")],\n        cancellation_token=CancellationToken(),\n    )\n    print(response.inner_messages)\n    print(response.chat_message)\n\n\n# Use asyncio.run(assistant_run()) when running in a script.\nawait assistant_run()\n```\n\n----------------------------------------\n\nTITLE: Main Function Implementation\nDESCRIPTION: Async main function to demonstrate RAG system usage with example queries\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-autogen-chromadb.ipynb#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    # Initialize context provider\n    context_provider = ContextProvider(collection)\n    \n    # Example queries\n    queries = [\n        {\"query\": \"What does Contoso's travel insurance cover?\"},\n        {\"query\": \"What's the weather like in London?\", \"location\": \"london\"},\n        {\"query\": \"What luxury destinations does Contoso offer and what's the weather in Paris?\", \"location\": \"paris\"},\n    ]\n    \n    print(\"=== Autogen RAG Demo ===\")\n    for query_data in queries:\n        query = query_data[\"query\"]\n        location = query_data.get(\"location\")\n        \n        print(f\"\\n\\nQuery: {query}\")\n        if location:\n            print(f\"Location: {location}\")\n        \n        # Show the context being used\n        context = context_provider.get_unified_context(query, location)\n        print(\"\\n--- Context Used ---\")\n        print(context)\n        print(\"-------------------\")\n        \n        # Get response from the agent\n        result = await ask_rag_agent(query, context_provider, location)\n        if result:\n            print(f\"\\nResponse: {result['response']}\")\n        print(\"\\n\" + \"=\"*50)\n```\n\n----------------------------------------\n\nTITLE: Pre-emptive Context Loading for Travel Destinations\nDESCRIPTION: Initializes a travel agent with pre-loaded destination information to enable faster, more efficient query responses\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass TravelAgent:\n    def __init__(self):\n        self.context = {\n            \"Paris\": {\"country\": \"France\", \"currency\": \"Euro\", \"language\": \"French\", \"attractions\": [\"Eiffel Tower\", \"Louvre Museum\"]},\n            \"Tokyo\": {\"country\": \"Japan\", \"currency\": \"Yen\", \"language\": \"Japanese\", \"attractions\": [\"Tokyo Tower\", \"Shibuya Crossing\"]}\n        }\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Client and Chat Completion Service\nDESCRIPTION: Sets up the OpenAI client with API key and base URL, and initializes the chat completion service with a specific model ID.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/07-planning-design/code_samples/07-semantic-kernel.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nclient = AsyncOpenAI(\n    api_key=os.environ.get(\"GITHUB_TOKEN\"), \n    base_url=\"https://models.inference.ai.azure.com/\",\n)\n\nchat_completion_service = OpenAIChatCompletion(\n    ai_model_id=\"gpt-4o-mini\",\n    async_client=client,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Travel Agent Class in Python\nDESCRIPTION: Defines a Travel_Agent class with initialization and method for gathering user preferences. This class serves as the foundation for the travel planning agent.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n```\n\n----------------------------------------\n\nTITLE: Implementing DestinationsPlugin for Detailed Travel Information\nDESCRIPTION: Defines a DestinationsPlugin class that provides comprehensive information about popular travel destinations including descriptions, best times to visit, activities, and costs. This plugin serves as a knowledge base for travel recommendations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-semantic-kernel-chromadb.ipynb#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass DestinationsPlugin:\n    # Destination data store with rich details about popular travel locations\n    DESTINATIONS = {\n        \"maldives\": {\n            \"name\": \"The Maldives\",\n            \"description\": \"An archipelago of 26 atolls in the Indian Ocean, known for pristine beaches and overwater bungalows.\",\n            \"best_time\": \"November to April (dry season)\",\n            \"activities\": [\"Snorkeling\", \"Diving\", \"Island hopping\", \"Spa retreats\", \"Underwater dining\"],\n            \"avg_cost\": \"$400-1200 per night for luxury resorts\"\n        },\n        \"swiss alps\": {\n            \"name\": \"The Swiss Alps\",\n            \"description\": \"Mountain range spanning across Switzerland with picturesque villages and world-class ski resorts.\",\n            \"best_time\": \"December to March for skiing, June to September for hiking\",\n            \"activities\": [\"Skiing\", \"Snowboarding\", \"Hiking\", \"Mountain biking\", \"Paragliding\"],\n            \"avg_cost\": \"$250-500 per night for alpine accommodations\"\n        },\n        \"safari\": {\n            \"name\": \"African Safari\",\n            \"description\": \"Wildlife viewing experiences across various African countries including Kenya, Tanzania, and South Africa.\",\n            \"best_time\": \"June to October (dry season) for optimal wildlife viewing\",\n            \"activities\": [\"Game drives\", \"Walking safaris\", \"Hot air balloon rides\", \"Cultural village visits\"],\n            \"avg_cost\": \"$400-800 per person per day for luxury safari packages\"\n        },\n        \"bali\": {\n            \"name\": \"Bali, Indonesia\",\n            \"description\": \"Island paradise known for lush rice terraces, beautiful temples, and vibrant culture.\",\n            \"best_time\": \"April to October (dry season)\",\n            \"activities\": [\"Surfing\", \"Temple visits\", \"Rice terrace trekking\", \"Yoga retreats\", \"Beach relaxation\"],\n            \"avg_cost\": \"$100-500 per night depending on accommodation type\"\n        },\n        \"santorini\": {\n            \"name\": \"Santorini, Greece\",\n            \"description\": \"Stunning volcanic island with white-washed buildings and blue domes overlooking the Aegean Sea.\",\n            \"best_time\": \"Late April to early November\",\n            \"activities\": [\"Sunset watching in Oia\", \"Wine tasting\", \"Boat tours\", \"Beach hopping\", \"Ancient ruins exploration\"],\n            \"avg_cost\": \"$200-600 per night for caldera view accommodations\"\n        }\n    }\n\n    @kernel_function(\n        name=\"get_destination_info\",\n        description=\"Provides detailed information about specific travel destinations.\"\n    )\n    def get_destination_info(self, query: str) -> str:\n        # Find which destination is being asked about\n        query_lower = query.lower()\n        matching_destinations = []\n\n        for key, details in DestinationsPlugin.DESTINATIONS.items():\n            if key in query_lower or details[\"name\"].lower() in query_lower:\n                matching_destinations.append(details)\n\n        if not matching_destinations:\n            return (f\"User Query: {query}\\n\\n\"\n                    f\"I couldn't find specific destination information in our database. \"\n                    f\"Please use the general retrieval system for this query.\")\n\n        # Format destination information\n        destination_info = \"\\n\\n\".join([\n            f\"Destination: {dest['name']}\\n\"\n            f\"Description: {dest['description']}\\n\"\n            f\"Best time to visit: {dest['best_time']}\\n\"\n            f\"Popular activities: {', '.join(dest['activities'])}\\n\"\n            f\"Average cost: {dest['avg_cost']}\" for dest in matching_destinations\n        ])\n\n        return (f\"Destination Information:\\n{destination_info}\\n\\n\"\n                f\"User Query: {query}\\n\\n\"\n                \"Based on the above destination details, provide a helpful response \"\n                \"that addresses the user's query about this location.\")\n```\n\n----------------------------------------\n\nTITLE: Executing Travel Planning Request with Azure OpenAI\nDESCRIPTION: Sends a travel planning request to the Azure OpenAI service using the configured client. The code defines a system prompt describing available specialized agents and processes a user's travel planning request, returning a structured TravelPlan response.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/07-planning-design/code_samples/07-azure-openai.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pprint import pprint\n# Define the user message\nmessages = [\n    SystemMessage(content=\"\"\"You are an planner agent.\n    Your job is to decide which agents to run based on the user's request.\n    Below are the available agents specialised in different tasks:\n    - FlightBooking: For booking flights and providing flight information\n    - HotelBooking: For booking hotels and providing hotel information\n    - CarRental: For booking cars and providing car rental information\n    - ActivitiesBooking: For booking activities and providing activity information\n    - DestinationInfo: For providing information about destinations\n    - DefaultAgent: For handling general requests\"\"\", source=\"system\"),\n    UserMessage(content=\"Create a travel plan for a family of 2 kids from Singapore to Melboune\", source=\"user\"),\n]\n\n\nresponse = await client.create(messages=messages, extra_create_args={\"response_format\": TravelPlan})\n\n# Ensure the response content is a valid JSON string before loading it\nresponse_content: Optional[str] = response.content if isinstance(response.content, str) else None\nif response_content is None:\n    raise ValueError(\"Response content is not a valid JSON string\")\n\n# Print the response content after loading it as JSON\npprint(json.loads(response_content))\n\n# Validate the response content with the MathReasoning model\n# TravelPlan.model_validate(json.loads(response_content))\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Destinations Plugin for Semantic Kernel\nDESCRIPTION: Creates a custom plugin that provides random vacation destinations. The plugin class includes a method decorated with @kernel_function that can be called by the AI agent when suggesting random vacation spots.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/03-agentic-design-patterns/code_samples/03-semantic-kernel.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport random   \n\n# Define a sample plugin for the sample\n\nclass DestinationsPlugin:\n    \"\"\"A List of Random Destinations for a vacation.\"\"\"\n\n    def __init__(self):\n        # List of vacation destinations\n        self.destinations = [\n            \"Barcelona, Spain\",\n            \"Paris, France\",\n            \"Berlin, Germany\",\n            \"Tokyo, Japan\",\n            \"Sydney, Australia\",\n            \"New York, USA\",\n            \"Cairo, Egypt\",\n            \"Cape Town, South Africa\",\n            \"Rio de Janeiro, Brazil\",\n            \"Bali, Indonesia\"\n        ]\n        # Track last destination to avoid repeats\n        self.last_destination = None\n\n    @kernel_function(description=\"Provides a random vacation destination.\")\n    def get_random_destination(self) -> Annotated[str, \"Returns a random vacation destination.\"]:\n        # Get available destinations (excluding last one if possible)\n        available_destinations = self.destinations.copy()\n        if self.last_destination and len(available_destinations) > 1:\n            available_destinations.remove(self.last_destination)\n\n        # Select a random destination\n        destination = random.choice(available_destinations)\n\n        # Update the last destination\n        self.last_destination = destination\n\n        return destination\n```\n\n----------------------------------------\n\nTITLE: Museum Search Function Implementation\nDESCRIPTION: Simple function to search for museums in Paris using web search functionality.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/09-metacognition/README.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef search_museums_in_paris():\n    prompt = \"Find top museums in Paris\"\n    search_results = search_web(prompt)\n    return search_results\n\nmuseums = search_museums_in_paris()\nprint(\"Top Museums in Paris:\", museums)\n```\n\n----------------------------------------\n\nTITLE: Generating AI Assistant System Prompt\nDESCRIPTION: Makes an API call to generate a system prompt using the configured parameters. Includes system and user messages with specific instructions for creating an AI assistant prompt.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/06-building-trustworthy-agents/code_samples/06-system-message-framework.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.complete(\n    messages=[\n        SystemMessage(content=\"\"\"You are an expert at creating AI agent assitants. \nYou will be provided a company name, role, responsibilites and other\ninformation that you will use to provide a system prompt for.\nTo create the system prompt, be descriptive as possible and provide a structure that a system using an LLM can better understand the role and responsibilites of the AI assistant.\"\"\"),\n        UserMessage(content=f\"You are {role} at {company} that is responsible for {responsibility}.\"),\n    ],\n    model=model_name,\n    # Optional parameters\n    temperature=1.,\n    max_tokens=1000,\n    top_p=1.\n)\n\nprint(response.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Generating Itinerary in Python\nDESCRIPTION: This code snippet defines a function `generate_itinerary` that takes flight, hotel, and attraction data as input and combines them into an itinerary dictionary. It then calls this function to create an itinerary and prints the suggested itinerary to the console.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ja/09-metacognition/README.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef generate_itinerary(flights, hotels, attractions):\n    itinerary = {\n        \"flights\": flights,\n        \"hotels\": hotels,\n        \"attractions\": attractions\n    }\n    return itinerary\n\nattractions = search_attractions(preferences)\nitinerary = generate_itinerary(flights, hotels, attractions)\nprint(\"Suggested Itinerary:\", itinerary)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Planner Agent Messages in Python\nDESCRIPTION: Sets up the initial message configuration for a planner agent system, defining available specialized agents and user request handling.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/07-planning-design/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmessages = [\n    SystemMessage(content=\"\"\"You are an planner agent.\n    Your job is to decide which agents to run based on the user's request.\n    Below are the available agents specialized in different tasks:\n    - FlightBooking: For booking flights and providing flight information\n    - HotelBooking: For booking hotels and providing hotel information\n    - CarRental: For booking cars and providing car rental information\n    - ActivitiesBooking: For booking activities and providing activity information\n    - DestinationInfo: For providing information about destinations\n    - DefaultAgent: For handling general requests\"\"\", source=\"system\"),\n    UserMessage(content=\"Create a travel plan for a family of 2 kids from Singapore to Melbourne\", source=\"user\"),\n]\n\nresponse = await client.create(messages=messages, extra_create_args={\"response_format\": TravelPlan})\n\nresponse_content: Optional[str] = response.content if isinstance(response.content, str) else None\nif response_content is None:\n    raise ValueError(\"Response content is not a valid JSON string\")\n\npprint(json.loads(response_content))\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Relevance Scoring Function\nDESCRIPTION: A function to calculate relevance score based on matching user query criteria such as category, price, and location\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef relevance_score(item, query):\n    score = 0\n    if item['category'] in query['interests']:\n        score += 1\n    if item['price'] <= query['budget']:\n        score += 1\n    if item['location'] == query['destination']:\n        score += 1\n    return score\n```\n\n----------------------------------------\n\nTITLE: Implementing a Destinations Plugin for Semantic Kernel\nDESCRIPTION: Creates a custom plugin that provides random vacation destinations to the AI agent. Uses the @kernel_function decorator to make the function available to the Semantic Kernel framework and implements logic to avoid repeating the last suggested destination.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/01-intro-to-ai-agents/code_samples/01-semantic-kernel.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport random   \n\n# Define a sample plugin for the sample\n\nclass DestinationsPlugin:\n    \"\"\"A List of Random Destinations for a vacation.\"\"\"\n\n    def __init__(self):\n        # List of vacation destinations\n        self.destinations = [\n            \"Barcelona, Spain\",\n            \"Paris, France\",\n            \"Berlin, Germany\",\n            \"Tokyo, Japan\",\n            \"Sydney, Australia\",\n            \"New York, USA\",\n            \"Cairo, Egypt\",\n            \"Cape Town, South Africa\",\n            \"Rio de Janeiro, Brazil\",\n            \"Bali, Indonesia\"\n        ]\n        # Track last destination to avoid repeats\n        self.last_destination = None\n\n    @kernel_function(description=\"Provides a random vacation destination.\")\n    def get_random_destination(self) -> Annotated[str, \"Returns a random vacation destination.\"]:\n        # Get available destinations (excluding last one if possible)\n        available_destinations = self.destinations.copy()\n        if self.last_destination and len(available_destinations) > 1:\n            available_destinations.remove(self.last_destination)\n\n        # Select a random destination\n        destination = random.choice(available_destinations)\n\n        # Update the last destination\n        self.last_destination = destination\n\n        return destination\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Settings for Auto Function Calling in Python\nDESCRIPTION: Sets up request settings to enable automatic function calling behavior in Azure Chat Service using AzureChatPromptExecutionSettings.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrequest_settings = AzureChatPromptExecutionSettings(function_choice_behavior=FunctionChoiceBehavior.Auto())\n```\n\n----------------------------------------\n\nTITLE: SQLite Version Fix for ChromaDB Compatibility in Python\nDESCRIPTION: Code to fix SQLite version issues when running ChromaDB by installing and substituting pysqlite3-binary. This should be uncommented at the start of a notebook if encountering the SQLite version error.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-semantic-kernel-chromadb.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# %pip install pysqlite3-binary\n# import sys\n# sys.modules['sqlite3'] = sys.modules.pop('pysqlite3')\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for AutoGen Agents in Python\nDESCRIPTION: This snippet imports necessary modules and classes from AutoGen and Azure libraries to set up AI agents and chat functionality.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/08-multi-agent/code_samples/08-autogen.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom autogen_agentchat.agents import AssistantAgent\nfrom autogen_core.models import UserMessage\nfrom autogen_ext.models.azure import AzureAIChatCompletionClient\nfrom azure.core.credentials import AzureKeyCredential\nfrom autogen_core import CancellationToken\nfrom autogen_agentchat.base import TaskResult\n\nfrom autogen_agentchat.messages import TextMessage\nfrom autogen_agentchat.ui import Console\n\n\nfrom autogen_agentchat.conditions import TextMentionTermination\nfrom autogen_agentchat.teams import RoundRobinGroupChat\n```\n\n----------------------------------------\n\nTITLE: Sample Planner Response in JSON Format\nDESCRIPTION: This JSON snippet represents a sample response from the planner agent, detailing the main task, subtasks, and assigned agents for a family trip from Singapore to Melbourne.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/de/07-planning-design/README.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"is_greeting\": \"False\",\n    \"main_task\": \"Plan a family trip from Singapore to Melbourne.\",\n    \"subtasks\": [\n        {\n            \"assigned_agent\": \"flight_booking\",\n            \"task_details\": \"Book round-trip flights from Singapore to Melbourne.\"\n        },\n        {\n            \"assigned_agent\": \"hotel_booking\",\n            \"task_details\": \"Find family-friendly hotels in Melbourne.\"\n        },\n        {\n            \"assigned_agent\": \"car_rental\",\n            \"task_details\": \"Arrange a car rental suitable for a family of four in Melbourne.\"\n        },\n        {\n            \"assigned_agent\": \"activities_booking\",\n            \"task_details\": \"List family-friendly activities in Melbourne.\"\n        },\n        {\n            \"assigned_agent\": \"destination_info\",\n            \"task_details\": \"Provide information about Melbourne as a travel destination.\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Attraction Selection\nDESCRIPTION: This SQL query finds attractions in a specified destination that match user interests. It searches the attractions table for options that correspond to the user's preferred activities and points of interest.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_38\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM attractions WHERE destination='Paris' AND interests='museums, cuisine';\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AI Chat Completion Client in Python\nDESCRIPTION: This code configures an AzureAIChatCompletionClient with specific model parameters and authentication using a GitHub token. It sets up the client to use the 'gpt-4o-mini' model with JSON output, function calling, and vision capabilities.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/08-multi-agent/code_samples/08-autogen.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = AzureAIChatCompletionClient(\n    model=\"gpt-4o-mini\",\n    endpoint=\"https://models.inference.ai.azure.com\",\n    # To authenticate with the model you will need to generate a personal access token (PAT) in your GitHub settings.\n    # Create your PAT token by following instructions here: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens\n    credential=AzureKeyCredential(os.environ[\"GITHUB_TOKEN\"]),\n    model_info={\n        \"json_output\": True,\n        \"function_calling\": True,\n        \"vision\": True,\n        \"family\": \"unknown\",\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic SQL Queries Based on User Preferences in Python\nDESCRIPTION: Function that constructs SQL queries dynamically by combining a table name with user preferences. It creates WHERE clauses from key-value pairs in the preferences dictionary, joining them with AND operators.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fr/09-metacognition/README.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef generate_sql_query(table, preferences):\n    query = f\"SELECT * FROM {table} WHERE \"\n    conditions = []\n    for key, value in preferences.items():\n        conditions.append(f\"{key}='{value}'\")\n    query += \" AND \".join(conditions)\n    return query\n```\n\n----------------------------------------\n\nTITLE: Filtering and Ranking Items Based on Relevance Score in Python\nDESCRIPTION: This function sorts a list of items based on their relevance score and returns the top 10 results. It uses the previously defined relevance_score function to determine the relevance of each item to the user's query.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef filter_and_rank(items, query):\n    ranked_items = sorted(items, key=lambda item: relevance_score(item, query), reverse=True)\n    return ranked_items[:10]  # Return top 10 relevant items\n```\n\n----------------------------------------\n\nTITLE: Initializing Semantic Kernel with Custom Plugin in Python\nDESCRIPTION: Shows how to create a Semantic Kernel instance, instantiate a plugin, and add it to the kernel. This approach simplifies function calling by handling the serialization of function descriptions and parameters automatically.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/README.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_kernel import Kernel\n\n# Create the kernel\nkernel = Kernel()\n\n# Create the plugin\nget_current_time_plugin = GetCurrentTimePlugin(location)\n\n# Add the plugin to the kernel\nkernel.add_plugin(get_current_time_plugin)\n```\n\n----------------------------------------\n\nTITLE: Configuring SerpAPI Environment Variables\nDESCRIPTION: Configuration setup for SerpAPI search API key and endpoint using environment variables.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/08-multi-agent/code_samples/08-python_multi_aiagent_bookinghotel.ipynb#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nSERPAPI_SEARCH_API_KEY=os.getenv('SERPAPI_SEARCH_API_KEY')\nSERPAPI_SEARCH_ENDPOINT = os.getenv('SERPAPI_SEARCH_ENDPOINT')\n```\n\n----------------------------------------\n\nTITLE: Implementing Travel Booking Agent in C# with Semantic Kernel\nDESCRIPTION: Creates a travel booking implementation using Semantic Kernel in C#. Sets up kernel configuration, chat history management and defines a BookTravelPlugin with flight booking functionality.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nChatHistory chatHistory = [];\nchatHistory.AddUserMessage(\"I'd like to go to New York on January 1, 2025\");\n\nvar kernelBuilder = Kernel.CreateBuilder();\nkernelBuilder.AddAzureOpenAIChatCompletion(\n    deploymentName: \"NAME_OF_YOUR_DEPLOYMENT\",\n    apiKey: \"YOUR_API_KEY\",\n    endpoint: \"YOUR_AZURE_ENDPOINT\"\n);\nkernelBuilder.Plugins.AddFromType<BookTravelPlugin>(\"BookTravel\"); \nvar kernel = kernelBuilder.Build();\n\nvar settings = new AzureOpenAIPromptExecutionSettings()\n{\n    FunctionChoiceBehavior = FunctionChoiceBehavior.Auto()\n};\n\nvar chatCompletion = kernel.GetRequiredService<IChatCompletionService>();\n\nvar response = await chatCompletion.GetChatMessageContentAsync(chatHistory, settings, kernel);\n\nConsole.WriteLine(response.Content);\nchatHistory.AddMessage(response!.Role, response!.Content!);\n\npublic class BookTravelPlugin\n{\n    [KernelFunction(\"book_flight\")]\n    [Description(\"Book travel given location and date\")]\n    public async Task<string> BookFlight(DateTime date, string location)\n    {\n        return await Task.FromResult( $\"Travel was booked to {location} on {date}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Travel Task Planning with Azure AI\nDESCRIPTION: Core implementation showing task decomposition, agent assignment, and Azure AI client integration. Uses Pydantic models for data validation and structured output handling.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/07-planning-design/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\nfrom enum import Enum\nfrom typing import List, Optional, Union\nimport json\nimport os\nfrom typing import Optional\nfrom pprint import pprint\nfrom autogen_core.models import UserMessage, SystemMessage, AssistantMessage\nfrom autogen_ext.models.azure import AzureAIChatCompletionClient\nfrom azure.core.credentials import AzureKeyCredential\n\nclass AgentEnum(str, Enum):\n    FlightBooking = \"flight_booking\"\n    HotelBooking = \"hotel_booking\"\n    CarRental = \"car_rental\"\n    ActivitiesBooking = \"activities_booking\"\n    DestinationInfo = \"destination_info\"\n    DefaultAgent = \"default_agent\"\n    GroupChatManager = \"group_chat_manager\"\n\nclass TravelSubTask(BaseModel):\n    task_details: str\n    assigned_agent: AgentEnum\n\nclass TravelPlan(BaseModel):\n    main_task: str\n    subtasks: List[TravelSubTask]\n    is_greeting: bool\n\nclient = AzureAIChatCompletionClient(\n    model=\"gpt-4o-mini\",\n    endpoint=\"https://models.inference.ai.azure.com\",\n    credential=AzureKeyCredential(os.environ[\"GITHUB_TOKEN\"]),\n    model_info={\n        \"json_output\": False,\n        \"function_calling\": True,\n        \"vision\": True,\n        \"family\": \"unknown\",\n    },\n)\n\nmessages = [\n    SystemMessage(content=\"\"\"You are an planner agent.\n    Your job is to decide which agents to run based on the user's request.\n                      Provide your response in JSON format with the following structure:\n{'main_task': 'Plan a family trip from Singapore to Melbourne.',\n 'subtasks': [{'assigned_agent': 'flight_booking',\n               'task_details': 'Book round-trip flights from Singapore to '\n                               'Melbourne.'}]\"\"\", source=\"system\"),\n    UserMessage(\n        content=\"Create a travel plan for a family of 2 kids from Singapore to Melboune\", source=\"user\"),\n]\n\nresponse = await client.create(messages=messages, extra_create_args={\"response_format\": 'json_object'})\n\nresponse_content: Optional[str] = response.content if isinstance(\n    response.content, str) else None\nif response_content is None:\n    raise ValueError(\"Response content is not a valid JSON string\" )\n\npprint(json.loads(response_content))\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Function Calling in Python with Semantic Kernel\nDESCRIPTION: Defines an async function that sends a chat request to an Azure AI model with auto-function calling enabled. The model analyzes the chat history and automatically invokes a BookTravelPlugin when it detects a travel booking request.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    # Make the request to the model for the given chat history and request settings\n    # The Kernel contains the sample that the model will request to invoke\n    response = await chat_service.get_chat_message_content(\n        chat_history=chat_history, settings=request_settings, kernel=kernel\n    )\n    assert response is not None\n\n    \"\"\"\n    Note: In the auto function calling process, the model determines it can invoke the \n    `BookTravelPlugin` using the `book_flight` function, supplying the necessary arguments. \n    \n    For example:\n\n    \"tool_calls\": [\n        {\n            \"id\": \"call_abc123\",\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"BookTravelPlugin-book_flight\",\n                \"arguments\": \"{'location': 'New York', 'date': '2025-01-01'}\"\n            }\n        }\n    ]\n\n    Since the location and date arguments are required (as defined by the kernel function), if the \n    model lacks either, it will prompt the user to provide them. For instance:\n\n    User: Book me a flight to New York.\n    Model: Sure, I'd love to help you book a flight. Could you please specify the date?\n    User: I want to travel on January 1, 2025.\n    Model: Your flight to New York on January 1, 2025, has been successfully booked. Safe travels!\n    \"\"\"\n\n    print(f\"`{response}`\")\n    # Example AI Model Response: `Your flight to New York on January 1, 2025, has been successfully booked. Safe travels! ✈️🗽`\n\n    # Add the model's response to our chat history context\n    chat_history.add_assistant_message(response.content)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AI Chat Completion Client\nDESCRIPTION: Initialize Azure OpenAI client with model configuration for GPT-4 including JSON output, function calling, and vision capabilities\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-autogen-chromadb.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = AzureAIChatCompletionClient(\n    model=\"gpt-4o-mini\",\n    endpoint=\"https://models.inference.ai.azure.com\",\n    credential=AzureKeyCredential(os.getenv(\"GITHUB_TOKEN\")),\n    model_info={\n        \"json_output\": True,\n        \"function_calling\": True,\n        \"vision\": True,\n        \"family\": \"unknown\",\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Storing Information in Memory Collections in C#\nDESCRIPTION: This C# snippet demonstrates the usage of memory collections in Semantic Kernel for storing and managing information. It involves adding references with descriptive texts to a collection, utilizing async operations. Memory storage requires kernel memory builder instances and proper initialization.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nvar facts = new Dictionary<string,string>();\nfacts.Add(\n    \"Azure Machine Learning; https://learn.microsoft.com/azure/machine-learning/\",\n    @\"Azure Machine Learning is a cloud service for accelerating and\n    managing the machine learning project lifecycle. Machine learning professionals,\n    data scientists, and engineers can use it in their day-to-day workflows\"\n);\n\nfacts.Add(\n    \"Azure SQL Service; https://learn.microsoft.com/azure/azure-sql/\",\n    @\"Azure SQL is a family of managed, secure, and intelligent products\n    that use the SQL Server database engine in the Azure cloud.\"\n);\n\nstring memoryCollectionName = \"SummarizedAzureDocs\";\n\nforeach (var fact in facts) {\n    await memoryBuilder.SaveReferenceAsync(\n        collection: memoryCollectionName,\n        description: fact.Key.Split(\";\")[1].Trim(),\n        text: fact.Value,\n        externalId: fact.Key.Split(\";\")[2].Trim(),\n        externalSourceName: \"Azure Documentation\"\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Azure Search Index with Python\nDESCRIPTION: Python code demonstrating how to create a search index, define fields, and upload documents using the Azure Search SDK.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/00-course-setup/AzureSearch.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.search.documents import SearchClient\nfrom azure.search.documents.indexes import SearchIndexClient\nfrom azure.search.documents.indexes.models import SearchIndex, SimpleField, edm\n\nservice_endpoint = \"https://<service-name>.search.windows.net\"\napi_key = \"<api-key>\"\n\nindex_client = SearchIndexClient(service_endpoint, AzureKeyCredential(api_key))\n\nfields = [\n    SimpleField(name=\"id\", type=edm.String, key=True),\n    SimpleField(name=\"content\", type=edm.String, searchable=True),\n]\n\nindex = SearchIndex(name=\"sample-index\", fields=fields)\n\nindex_client.create_index(index)\n\nsearch_client = SearchClient(service_endpoint, \"sample-index\", AzureKeyCredential(api_key))\n\ndocuments = [\n    {\"id\": \"1\", \"content\": \"Hello world\"},\n    {\"id\": \"2\", \"content\": \"Azure Cognitive Search\"}\n]\n\nsearch_client.upload_documents(documents)\n```\n\n----------------------------------------\n\nTITLE: メタ認知を組み込んだ旅行代理店AIエージェントの実装\nDESCRIPTION: Travel_Agentクラスを定義し、ユーザーの好みの収集、情報の取得、推奨の生成、フィードバックに基づく調整などの機能を実装しています。メタ認知能力により、エージェントは過去の経験から学び、パフォーマンスを向上させることができます。\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ja/09-metacognition/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        # Search for flights, hotels, and attractions based on preferences\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        itinerary = create_itinerary(flights, hotels, attractions)\n        return itinerary\n\n    def adjust_based_on_feedback(self, feedback):\n        self.experience_data.append(feedback)\n        # Analyze feedback and adjust future recommendations\n        self.user_preferences = adjust_preferences(self.user_preferences, feedback)\n\n# Example usage\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\ntravel_agent.adjust_based_on_feedback(feedback)\n```\n\n----------------------------------------\n\nTITLE: Main Agent Chat Implementation\nDESCRIPTION: Implements the main chat logic with two AI agents (Concierge and Front Desk) including their instructions, termination conditions, and selection strategy for turn-taking in the conversation.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/08-multi-agent/code_samples/08-semantic-kernel.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    REVIEWER_NAME = \"Concierge\"\n    REVIEWER_INSTRUCTIONS = \"\"\"\n    You are an are hotel concierge who has opinions about providing the most local and authetic experiences for travelers.\n    The goal is to determine if the front desk travel agent has reccommended the best non-touristy experience for a travler.\n    If so, state that it is approved.\n    If not, provide insight on how to refine the recommendation without using a specific example. \n    \"\"\"\n    agent_reviewer = ChatCompletionAgent(\n        kernel=_create_kernel_with_chat_completion(),\n        name=REVIEWER_NAME,\n        instructions=REVIEWER_INSTRUCTIONS,\n    )\n\n    FRONTDESK_NAME = \"FrontDesk\"\n    FRONTDESK_INSTRUCTIONS = \"\"\"\n    You are a Front Desk Travel Agent with ten years of experience and are known for brevity as you deal with many customers.\n    The goal is to provide the best activites and locations for a traveler to visit.\n    Only provide a single recomendation per response.\n    You're laser focused on the goal at hand.\n    Don't waste time with chit chat.\n    Consider suggestions when refining an idea.\n    \"\"\"\n    agent_writer = ChatCompletionAgent(\n        kernel=_create_kernel_with_chat_completion(),\n        name=FRONTDESK_NAME,\n        instructions=FRONTDESK_INSTRUCTIONS,\n    )\n\n    termination_function = KernelFunctionFromPrompt(\n        function_name=\"termination\",\n        prompt=\"\"\"\n        Determine if the recommendation process is complete.\n        \n        The process is complete when the Concierge provides approval for any recommendation made by the Front Desk.\n        Look for phrases like \"approved\", \"this recommendation is approved\", or any clear indication that the Concierge is satisfied with the suggestion.\n        \n        If the Concierge has given approval in their most recent response, respond with: yes\n        Otherwise, respond with: no\n        \n        History:\n        {{$history}}\n        \"\"\",\n    )\n\n    selection_function = KernelFunctionFromPrompt(\n        function_name=\"selection\",\n        prompt=f\"\"\"\n        Determine which participant takes the next turn in a conversation based on the the most recent participant.\n        State only the name of the participant to take the next turn.\n        No participant should take more than one turn in a row.\n        \n        Choose only from these participants:\n        - {REVIEWER_NAME}\n        - {FRONTDESK_NAME}\n        \n        Always follow these rules when selecting the next participant, each conversation should be at least 4 turns:\n        - After user input, it is {FRONTDESK_NAME}'s turn.\n        - After {FRONTDESK_NAME} replies, it is {REVIEWER_NAME}'s turn.\n        - After {REVIEWER_NAME} provides feedback, it is {FRONTDESK_NAME}'s turn.\n\n        History:\n        {{{{$history}}}}\n        \"\"\",\n    )\n\n    chat = AgentGroupChat(\n        agents=[agent_writer, agent_reviewer],\n        termination_strategy=KernelFunctionTerminationStrategy(\n            agents=[agent_reviewer],\n            function=termination_function,\n            kernel=_create_kernel_with_chat_completion(),\n            result_parser=lambda result: str(result.value[0]).lower() == \"yes\",\n            history_variable_name=\"history\",\n            maximum_iterations=10,\n        ),\n        selection_strategy=KernelFunctionSelectionStrategy(\n            function=selection_function,\n            kernel=_create_kernel_with_chat_completion(),\n            result_parser=lambda result: str(\n                result.value[0]) if result.value is not None else FRONTDESK_NAME,\n            agent_variable_name=\"agents\",\n            history_variable_name=\"history\",\n        ),\n    )\n\n    user_input = \"I would like to go to Paris.\"\n\n    await chat.add_chat_message(ChatMessageContent(role=AuthorRole.USER, content=user_input))\n    print(f\"# User: '{user_input}'\")\n\n    async for content in chat.invoke():\n        print(f\"# Agent - {content.name or '*'}: '{content.content}'\")\n\n    print(f\"# IS COMPLETE: {chat.is_complete}\")\n\nawait main()\n```\n\n----------------------------------------\n\nTITLE: Empty Code Block\nDESCRIPTION: An empty code block at the end of the file. This might be used for future additions or as a placeholder for user-added code.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/code_samples/09-semantic-kernel.ipynb#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Defining BookingPlugin Class with Hotel Booking Method in Python\nDESCRIPTION: This snippet defines the BookingPlugin class with a booking_hotel method. It uses the SERP API to search for hotel information based on the provided city, check-in, and check-out dates. The method returns the properties from the API response or None if the request fails.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/code_samples/04-semantic-kernel-python-aiagent-bookinghotel.ipynb#2025-04-18_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nclass BookingPlugin:\n    \"\"\"Booking Plugin for customers\"\"\"\n\n    @kernel_function(description=\"booking hotel\")\n    def booking_hotel(\n        self, \n        query: Annotated[str, \"The name of the city\"], \n        check_in_date: Annotated[str, \"Hotel Check-in Time\"], \n        check_out_date: Annotated[str, \"Hotel Check-out Time\"],\n    ) -> Annotated[str, \"Return the result of booking hotel information\"]:\n        \"\"\"\n        Function to book a hotel.\n        Parameters:\n        - query: The name of the city\n        - check_in_date: Hotel Check-in Time\n        - check_out_date: Hotel Check-out Time\n        Returns:\n        - The result of booking hotel information\n        \"\"\"\n\n        # Define the parameters for the hotel booking request\n        params = {\n            \"engine\": \"google_hotels\",\n            \"q\": query,\n            \"check_in_date\": check_in_date,\n            \"check_out_date\": check_out_date,\n            \"adults\": \"1\",\n            \"currency\": \"GBP\",\n            \"gl\": \"uk\",\n            \"hl\": \"en\",\n            \"api_key\": SERP_API_KEY\n        }\n\n        # Send the GET request to the SERP API\n        response = requests.get(BASE_URL, params=params)\n\n        # Check if the request was successful\n        if response.status_code == 200:\n            # Parse the response content as JSON\n            response = response.json()\n            # Return the properties from the response\n            return response[\"properties\"]\n        else:\n            # Return None if the request failed\n            return None\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Queries for Travel Data in Python\nDESCRIPTION: This function executes SQL queries against a travel database using the sqlite3 module. It establishes a connection, executes the provided query, fetches all results, and properly closes the connection to prevent resource leaks.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nimport sqlite3\n\ndef execute_sql_query(query, database=\"travel.db\"):\n    connection = sqlite3.connect(database)\n    cursor = connection.cursor()\n    cursor.execute(query)\n    results = cursor.fetchall()\n    connection.close()\n    return results\n```\n\n----------------------------------------\n\nTITLE: Defining User Message and Creating Planner Response in Python\nDESCRIPTION: This snippet defines the user message for a travel planning request and creates a response using a planner agent. It includes system instructions for available specialized agents and handles the response formatting.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/de/07-planning-design/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Define the user message\n\nmessages = [\n    SystemMessage(content=\"\"\"You are an planner agent.\n    Your job is to decide which agents to run based on the user's request.\n    Below are the available agents specialized in different tasks:\n    - FlightBooking: For booking flights and providing flight information\n    - HotelBooking: For booking hotels and providing hotel information\n    - CarRental: For booking cars and providing car rental information\n    - ActivitiesBooking: For booking activities and providing activity information\n    - DestinationInfo: For providing information about destinations\n    - DefaultAgent: For handling general requests\"\"\", source=\"system\"),\n    UserMessage(content=\"Create a travel plan for a family of 2 kids from Singapore to Melbourne\", source=\"user\"),\n]\n\nresponse = await client.create(messages=messages, extra_create_args={\"response_format\": TravelPlan})\n\n# Ensure the response content is a valid JSON string before loading it\n\nresponse_content: Optional[str] = response.content if isinstance(response.content, str) else None\nif response_content is None:\n    raise ValueError(\"Response content is not a valid JSON string\")\n\n# Print the response content after loading it as JSON\n\npprint(json.loads(response_content))\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running AutoGen Agent Runtime\nDESCRIPTION: Shows how to register and start an agent in the AutoGen runtime environment, including sending initial messages to the agent.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nruntime = SingleThreadedAgentRuntime()\nawait MyAgent.register(runtime, \"my_agent\", lambda: MyAgent())\n\nruntime.start()  # Start processing messages in the background.\nawait runtime.send_message(MyMessageType(\"Hello, World!\"), AgentId(\"my_agent\", \"default\"))\n```\n\n----------------------------------------\n\nTITLE: Executing Generated Code in Python\nDESCRIPTION: This code defines a function `execute_code` that takes a string containing Python code as input and executes it using the `exec` function. The `locals()` function captures the variables defined within the executed code's scope. This allows the results of the dynamically generated code to be accessed and used in subsequent steps.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ja/09-metacognition/README.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef execute_code(code):\n    # Execute the generated code using exec\n    exec(code)\n    result = locals()\n    return result\n\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\n\nflight_code = generate_code_to_fetch_data(preferences)\nhotel_code = generate_code_to_fetch_hotels(preferences)\n\nflights = execute_code(flight_code)\nhotels = execute_code(hotel_code)\n\nprint(\"Flight Options:\", flights)\nprint(\"Hotel Options:\", hotels)\n\n```\n\n----------------------------------------\n\nTITLE: Kernel Configuration with OpenAI Chat\nDESCRIPTION: Creates and configures a Semantic Kernel instance with OpenAI chat completion service using environment variables for authentication.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/08-multi-agent/code_samples/08-semantic-kernel.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef _create_kernel_with_chat_completion() -> Kernel:\n    kernel = Kernel()\n\n    client = AsyncOpenAI(\n        api_key=os.environ[\"GITHUB_TOKEN\"], \n        base_url=\"https://models.inference.ai.azure.com/\",\n    )\n\n    kernel.add_service(\n        OpenAIChatCompletion(\n            ai_model_id=\"gpt-4o-mini\",\n            async_client=client,\n        )\n    )\n\n    return kernel\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Travel Agent Implementation in Python\nDESCRIPTION: This snippet imports necessary modules and classes for the travel agent implementation, including JSON handling, environment variable loading, OpenAI integration, and Semantic Kernel components.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/10-ai-agents-production/code_samples/10-semantic-kernel.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport os\n\nfrom typing import Annotated\n\nfrom dotenv import load_dotenv\n\nfrom openai import AsyncOpenAI\n\nfrom semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion\nfrom semantic_kernel.contents import FunctionCallContent, FunctionResultContent, StreamingTextContent\nfrom semantic_kernel.agents import ChatCompletionAgent, ChatHistoryAgentThread\nfrom semantic_kernel.functions import kernel_function\n```\n\n----------------------------------------\n\nTITLE: SQLite Version Fix for ChromaDB\nDESCRIPTION: Code to fix SQLite version compatibility issues with ChromaDB by installing and using pysqlite3-binary\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-autogen-chromadb.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# %pip install pysqlite3-binary\n# __import__('pysqlite3')\n# import sys\n# sys.modules['sqlite3'] = sys.modules.pop('pysqlite3')\n```\n\n----------------------------------------\n\nTITLE: Creating a Travel Agent with Semantic Kernel\nDESCRIPTION: This code initializes a ChatCompletionAgent named 'TravelAgent' with specific instructions about answering travel-related questions. The agent is configured with the previously defined DestinationsPlugin to provide it with tools for retrieving destination information.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/code_samples/04-semantic-kernel-tool.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Create the agent\nagent = ChatCompletionAgent(\n    service=chat_completion_service,\n    name=\"TravelAgent\",\n    instructions=\"Answer questions about the travel destinations and their availability.\",\n    plugins=[DestinationsPlugin()],\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure OpenAI Client for AutoGen\nDESCRIPTION: Sets up an AzureOpenAIChatCompletionClient with proper environment variable validation. The client is configured to connect to Azure OpenAI service with error handling for missing environment variables.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/07-planning-design/code_samples/07-azure-openai.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport os\nfrom typing import Optional\n\nfrom autogen_core.models import UserMessage, SystemMessage, AssistantMessage\nfrom autogen_ext.models.openai import AzureOpenAIChatCompletionClient\n\n\n# Function to get environment variable and ensure it is not None\ndef get_env_variable(name: str) -> str:\n    value = os.getenv(name)\n    if value is None:\n        raise ValueError(f\"Environment variable {name} is not set\")\n    return value\n\n\n# Create the client with type-checked environment variables\nclient = AzureOpenAIChatCompletionClient(\n    azure_deployment=get_env_variable(\"AZURE_OPENAI_DEPLOYMENT_NAME\"),\n    model=get_env_variable(\"AZURE_OPENAI_DEPLOYMENT_NAME\"),\n    api_version=get_env_variable(\"AZURE_OPENAI_API_VERSION\"),\n    azure_endpoint=get_env_variable(\"AZURE_OPENAI_ENDPOINT\"),\n    api_key=get_env_variable(\"AZURE_OPENAI_API_KEY\"),\n)\n```\n\n----------------------------------------\n\nTITLE: SQL Query Generation for Travel Recommendations\nDESCRIPTION: A function to dynamically generate SQL queries based on user preferences for retrieving travel-related data\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/de/09-metacognition/README.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef generate_sql_query(table, preferences):\n    query = f\"SELECT * FROM {table} WHERE \"\n    conditions = []\n    for key, value in preferences.items():\n        conditions.append(f\"{key}='{value}'\")\n    query += \" AND \".join(conditions)\n    return query\n```\n\n----------------------------------------\n\nTITLE: Initializing TravelAgent Class in Python\nDESCRIPTION: This snippet shows the basic usage of the TravelAgent class, demonstrating how to create an instance and retrieve destination information for Paris and Tokyo.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/09-metacognition/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Example usage\ntravel_agent = TravelAgent()\nprint(travel_agent.get_destination_info(\"Paris\"))\nprint(travel_agent.get_destination_info(\"Tokyo\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing Expense Email Generation Agent\nDESCRIPTION: Creates an agent class that generates formatted email content for expense claim submissions. The agent calculates the total expense amount and formats the details into a professional email addressed to the finance team.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/10-ai-agents-production/code_samples/10-expense_claim-demo.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass ExpenseEmailAgent:\n\n    @kernel_function(description=\"Generate an email to submit an expense claim to the Finance Team\")\n    async def generate_expense_email(expenses):\n        total_amount = sum(expense['amount'] for expense in expenses)\n        email_body = \"Dear Finance Team,\\n\\n\"\n        email_body += \"Please find below the details of my expense claim:\\n\\n\"\n        for expense in expenses:\n            email_body += f\"- {expense['description']}: ${expense['amount']}\\n\"\n        email_body += f\"\\nTotal Amount: ${total_amount}\\n\\n\"\n        email_body += \"Receipts for all expenses are attached for your reference.\\n\\n\"\n        email_body += \"Thank you,\\n[Your Name]\"\n        return email_body\n```\n\n----------------------------------------\n\nTITLE: Creating a Function Schema for Time Lookup in Python\nDESCRIPTION: Defines a JSON schema that describes a function for getting the current time in a location. The schema includes the function name, description, and parameter information which will be passed to the LLM.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Function description for the model to read\ntools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"get_current_time\",\n            \"description\": \"Get the current time in a given location\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city name, e.g. San Francisco\",\n                    },\n                },\n                \"required\": [\"location\"],\n            },\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting up ChromaDB Vector Database\nDESCRIPTION: Initialize ChromaDB with persistent storage and populate it with sample travel documents and metadata\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-autogen-chromadb.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Initialize ChromaDB with persistent storage\nchroma_client = chromadb.PersistentClient(path=\"./chroma_db\")\ncollection = chroma_client.create_collection(\n    name=\"travel_documents\",\n    metadata={\"description\": \"travel_service\"},\n    get_or_create=True\n)\n\n# Enhanced sample documents\ndocuments = [\n    \"Contoso Travel offers luxury vacation packages to exotic destinations worldwide.\",\n    \"Our premium travel services include personalized itinerary planning and 24/7 concierge support.\",\n    \"Contoso's travel insurance covers medical emergencies, trip cancellations, and lost baggage.\",\n    \"Popular destinations include the Maldives, Swiss Alps, and African safaris.\",\n    \"Contoso Travel provides exclusive access to boutique hotels and private guided tours.\"\n]\n\n# Add documents with metadata\ncollection.add(\n    documents=documents,\n    ids=[f\"doc_{i}\" for i in range(len(documents))],\n    metadatas=[{\"source\": \"training\", \"type\": \"explanation\"} for _ in documents]\n)\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Flight Selection\nDESCRIPTION: This SQL query retrieves flight information filtered by destination, dates, and budget category. It demonstrates how structured data can be queried to match specific user travel preferences.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM flights WHERE destination='Paris' AND dates='2025-04-01 to 2025-04-10' AND budget='moderate';\n```\n\n----------------------------------------\n\nTITLE: Filtering and Ranking Items in Python\nDESCRIPTION: The `filter_and_rank` method filters and ranks items based on a relevance score. It sorts the input `items` using the `relevance_score` method as the key and returns the top 10 ranked items. The `relevance_score` method is a dependency. The method returns a list of the top 10 relevant items.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/09-metacognition/README.md#2025-04-18_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n    def filter_and_rank(self, items, query):\n        ranked_items = sorted(items, key=lambda item: self.relevance_score(item, query), reverse=True)\n        return ranked_items[:10]  # Return top 10 relevant items\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure OpenAI Client in Python\nDESCRIPTION: Code for initializing the Azure OpenAI client that supports function calling. This client will be used to communicate with the LLM for tool invocation.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/04-tool-use/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Initialize the Azure OpenAI client\nclient = AzureOpenAI(\n    azure_endpoint = os.getenv(\"AZURE_OPENAI_ENDPOINT\"), \n    api_key=os.getenv(\"AZURE_OPENAI_API_KEY\"),  \n    api_version=\"2024-05-01-preview\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Azure AI Chat Client\nDESCRIPTION: Initializes the ChatCompletionsClient with the configured endpoint and credentials.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/06-building-trustworthy-agents/code_samples/06-system-message-framework.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmodel_name = \"gpt-4o\"\n\nclient = ChatCompletionsClient(\n    endpoint=endpoint,\n    credential=AzureKeyCredential(token),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Prompt for Travel Agent AI Assistant\nDESCRIPTION: This snippet demonstrates how to create a basic prompt describing an AI agent's role, tasks, and responsibilities. It specifically outlines the capabilities of a travel agent assistant for Contoso Travel.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/hi/06-building-trustworthy-agents/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nYou are a travel agent for Contoso Travel that is great at booking flights for customers. To help customers you can perform the following tasks: lookup available flights, book flights, ask for preferences in seating and times for flights, cancel any previously booked flights and alert customers on any delays or cancellations of flights.  \n```\n\n----------------------------------------\n\nTITLE: Initializing and Processing Queries with RAG Evaluator in Python\nDESCRIPTION: Main function that initializes a RAG Evaluator and processes a set of predefined queries. It handles both travel-only and weather-related queries, retrieves relevant context, and evaluates the responses with metrics. The function demonstrates handling of different query types and context combinations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-autogen-azuresearch.ipynb#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    evaluator = RAGEvaluator()\n    \n    # Define user queries similar to the Semantic Kernel example\n    user_inputs = [\n        # Travel-only queries\n        {\"query\": \"Can you explain Contoso's travel insurance coverage?\"},\n        \n        # Weather-only queries \n        {\"query\": \"What's the current weather condition in London?\", \"location\": \"london\"},\n        \n        # Combined queries\n        {\"query\": \"What is a good cold destination offered by Contoso and what is its temperature?\", \"location\": \"london\"},\n    ]\n    \n    print(\"Processing Queries:\")\n    for query_data in user_inputs:\n        query = query_data[\"query\"]\n        location = query_data.get(\"location\")\n        \n        if location:\n            print(f\"\\nProcessing Query for {location}: {query}\")\n        else:\n            print(f\"\\nProcessing Query: {query}\")\n        \n        # Get the RAG context for printing (similar to the Semantic Kernel example)\n        retrieval_context = get_retrieval_context(query)\n        weather_context = get_weather_data(location) if location else \"\"\n        \n        # Print the RAG context for transparency\n        print(\"\\n--- RAG Context ---\")\n        print(retrieval_context)\n        if weather_context:\n            print(f\"\\n--- Weather Context for {location} ---\")\n            print(weather_context)\n        print(\"-------------------\\n\")\n            \n        result = await ask_unified_rag(query, evaluator, location)\n        if result:\n            print(\"Response:\", result['response'])\n            print(\"\\nMetrics:\", result['metrics'])\n        print(\"\\n\" + \"=\"*60 + \"\\n\")\n```\n\n----------------------------------------\n\nTITLE: Importing Required Packages for Semantic Kernel Agent Development\nDESCRIPTION: This snippet imports necessary Python packages for building a Semantic Kernel agent with tool-calling capabilities. It includes imports for JSON handling, environment variables, OpenAI integration, and Semantic Kernel's agent and function components.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/code_samples/04-semantic-kernel-tool.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport os\n\nfrom dotenv import load_dotenv\n\nfrom IPython.display import display, HTML\n\nfrom typing import Annotated\nfrom openai import AsyncOpenAI\n\nfrom semantic_kernel.agents import ChatCompletionAgent, ChatHistoryAgentThread\nfrom semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion\nfrom semantic_kernel.contents import FunctionCallContent, FunctionResultContent, StreamingTextContent\nfrom semantic_kernel.functions import kernel_function\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Client with GitHub Models for Semantic Kernel\nDESCRIPTION: Sets up the AsyncOpenAI client using GitHub Token and configures the OpenAIChatCompletion service with the gpt-4o-mini model. This establishes the connection to the AI service that will power the agent.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/01-intro-to-ai-agents/code_samples/01-semantic-kernel.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nclient = AsyncOpenAI(\n    api_key=os.environ.get(\"GITHUB_TOKEN\"), \n    base_url=\"https://models.inference.ai.azure.com/\",\n)\n\n# Create an AI Service that will be used by the `ChatCompletionAgent`\nchat_completion_service = OpenAIChatCompletion(\n    ai_model_id=\"gpt-4o-mini\",\n    async_client=client,\n)\n```\n\n----------------------------------------\n\nTITLE: Creando un Meta Mensaje del Sistema para Agentes de IA\nDESCRIPTION: Este fragmento define un meta mensaje del sistema que se usa para instruir a un LLM sobre cómo generar mensajes del sistema específicos para agentes de IA. Esta plantilla permite crear múltiples agentes de manera eficiente.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/06-building-trustworthy-agents/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nYou are an expert at creating AI agent assistants. \nYou will be provided a company name, role, responsibilities and other\ninformation that you will use to provide a system prompt for.\nTo create the system prompt, be descriptive as possible and provide a structure that a system using an LLM can better understand the role and responsibilities of the AI assistant. \n```\n\n----------------------------------------\n\nTITLE: Importing Required Packages for Semantic Kernel and ChromaDB\nDESCRIPTION: Imports all necessary packages and modules for implementing a Semantic Kernel agent with ChromaDB integration, including typing annotations, OpenAI clients, and Semantic Kernel components.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-semantic-kernel-chromadb.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport os\nimport chromadb\nfrom typing import Annotated, TYPE_CHECKING\n\nfrom IPython.display import display, HTML\n\nfrom openai import AsyncOpenAI\n\nfrom semantic_kernel.agents import ChatCompletionAgent, ChatHistoryAgentThread\nfrom semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion\nfrom semantic_kernel.contents import FunctionCallContent,FunctionResultContent, StreamingTextContent\nfrom semantic_kernel.functions import kernel_function\n\nif TYPE_CHECKING:\n    from chromadb.api.models.Collection import Collection\n```\n\n----------------------------------------\n\nTITLE: Creating Meta System Message for AI Agent Generation\nDESCRIPTION: Template for generating system messages that will be used to create AI agents. Defines the basic structure and requirements for AI assistant creation.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/06-building-trustworthy-agents/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nYou are an expert at creating AI agent assistants. \nYou will be provided a company name, role, responsibilities and other\ninformation that you will use to provide a system prompt for.\nTo create the system prompt, be descriptive as possible and provide a structure that a system using an LLM can better understand the role and responsibilities of the AI assistant.\n```\n\n----------------------------------------\n\nTITLE: Defining Vacation Destinations Function in Python\nDESCRIPTION: This snippet defines a function that checks the availability of vacation destinations. It returns a tuple containing the city name and its availability status.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/code_samples/04-autogen.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Dict, List, Optional\n\n\ndef vacation_destinations(city: str) -> tuple[str, str]:\n    \"\"\"\n    Checks if a specific vacation destination is available\n    \n    Args:\n        city (str): Name of the city to check\n        \n    Returns:\n        tuple: Contains city name and availability status ('Available' or 'Unavailable')\n    \"\"\"\n    destinations = {\n        \"Barcelona\": \"Available\",\n        \"Tokyo\": \"Unavailable\",\n        \"Cape Town\": \"Available\",\n        \"Vancouver\": \"Available\",\n        \"Dubai\": \"Unavailable\",\n    }\n\n    if city in destinations:\n        return city, destinations[city]\n    else:\n        return city, \"City not found\"\n\n# Example usage:\n# city, status = vacation_destinations(\"Barcelona\")\n# print(f\"How about visiting {city}? It's currently {status} there!\")\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin to the Semantic Kernel\nDESCRIPTION: This snippet shows how to create a Kernel instance, instantiate a plugin (GetCurrentTimePlugin), and add the plugin to the kernel.  Adding the plugin enables the kernel to automatically discover and serialize functions and their parameters for use with Large Language Models (LLMs). This example creates a `GetCurrentTimePlugin` and adds it to the kernel.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/zh/04-tool-use/README.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_kernel import Kernel\n\n    # Create the kernel\n    kernel = Kernel()\n\n    # Create the plugin\n    get_current_time_plugin = GetCurrentTimePlugin(location)\n\n    # Add the plugin to the kernel\n    kernel.add_plugin(get_current_time_plugin)\n```\n\n----------------------------------------\n\nTITLE: Setting up the OpenAI Client with GitHub Models for Semantic Kernel\nDESCRIPTION: This snippet configures the OpenAI client to use GitHub Models as the LLM provider by setting up an AsyncOpenAI client with the appropriate base URL and instantiating an OpenAIChatCompletion service with the gpt-4o-mini model.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/code_samples/04-semantic-kernel-tool.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nclient = AsyncOpenAI(\n    api_key=os.getenv(\"GITHUB_TOKEN\"), \n    base_url=\"https://models.inference.ai.azure.com/\",\n)\n\nchat_completion_service = OpenAIChatCompletion(\n    ai_model_id=\"gpt-4o-mini\",\n    async_client=client,\n)\n```\n\n----------------------------------------\n\nTITLE: 予約リクエスト内での旅行代理店AIエージェントの使用例\nDESCRIPTION: Travel_Agentクラスを使用して、ユーザーの好みに基づいて旅行の推奨を生成し、フィードバックに基づいて調整する例を示しています。このコードは、AIエージェントがメタ認知を活用して、ユーザーの好みや過去の経験に基づいて推奨を改善する方法を実演しています。\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ja/09-metacognition/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n        self.experience_data = []\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n    def retrieve_information(self):\n        flights = search_flights(self.user_preferences)\n        hotels = search_hotels(self.user_preferences)\n        attractions = search_attractions(self.user_preferences)\n        return flights, hotels, attractions\n\n    def generate_recommendations(self):\n        flights, hotels, attractions = self.retrieve_information()\n        itinerary = create_itinerary(flights, hotels, attractions)\n        return itinerary\n\n    def adjust_based_on_feedback(self, feedback):\n        self.experience_data.append(feedback)\n        self.user_preferences = adjust_preferences(self.user_preferences, feedback)\n\n# Example usage within a booking request\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\ntravel_agent.adjust_based_on_feedback(feedback)\n```\n\n----------------------------------------\n\nTITLE: Intent-Based Search Example Usage in Python\nDESCRIPTION: This Python code provides an example of how to use the `search_with_intent` function. It creates a `Travel_Agent` object, sets user preferences and history, defines a query, and then calls `search_with_intent` to get personalized search results, which are then printed.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ja/09-metacognition/README.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nuser_history = [\"Louvre Museum website\", \"Book flight to Paris\"]\nquery = \"best museums in Paris\"\nresults = search_with_intent(query, preferences, user_history)\nprint(\"Search Results:\", results)\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure AI Project Client\nDESCRIPTION: Creates an instance of AIProjectClient using DefaultAzureCredential and connection string from environment variables.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/code_samples/02-azureaiagent.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nproject_client = AIProjectClient.from_connection_string(\n    credential=DefaultAzureCredential(), conn_str=os.environ[\"PROJECT_CONNECTION_STRING\"]\n)\n```\n\n----------------------------------------\n\nTITLE: RAG Search Museum Example - Prompt-Based Technique\nDESCRIPTION: Demonstrates a manual RAG technique for searching museums using a search prompt\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fr/09-metacognition/README.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef search_museums_in_paris():\n    prompt = \"Find top museums in Paris\"\n    search_results = search_web(prompt)\n    return search_results\n\nmuseums = search_museums_in_paris()\nprint(\"Top Museums in Paris:\", museums)\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG Evaluation System\nDESCRIPTION: Defines the RAGEvaluator class for measuring response quality metrics including length, citations, processing time, and context relevance.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-autogen-azuresearch.ipynb#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass RAGEvaluator:\n    def __init__(self):\n        self.responses: List[Dict] = []\n\n    def evaluate_response(self, query: str, response: str, context: List[Dict]) -> Dict:\n        # Basic metrics: response length, citation count, and a simple relevance score.\n        start_time = time.time()\n        metrics = {\n            'response_length': len(response),\n            'source_citations': sum(1 for doc in context if doc[\"content\"] in response),\n            'evaluation_time': time.time() - start_time,\n            'context_relevance': self._calculate_relevance(query, context)\n        }\n        self.responses.append({\n            'query': query,\n            'response': response,\n            'metrics': metrics\n        })\n        return metrics\n\n    def _calculate_relevance(self, query: str, context: List[Dict]) -> float:\n        # Simple relevance score: fraction of the documents where the query appears.\n        return sum(1 for c in context if query.lower() in c[\"content\"].lower()) / len(context)\n```\n\n----------------------------------------\n\nTITLE: Importing Packages for AutoGen Tool Use in Python\nDESCRIPTION: This snippet imports various packages required for setting up an AutoGen agent with tool-use capabilities. It includes imports from autogen, Azure, and standard Python libraries.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/code_samples/04-autogen.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\n\nimport requests\nfrom autogen_agentchat.agents import AssistantAgent\nfrom autogen_core.models import UserMessage\nfrom autogen_ext.models.azure import AzureAIChatCompletionClient\nfrom azure.core.credentials import AzureKeyCredential\nfrom autogen_core import CancellationToken\nfrom autogen_core.tools import FunctionTool\nfrom autogen_agentchat.messages import TextMessage\nfrom autogen_agentchat.ui import Console\nfrom typing import Any, Callable, Set, Dict, List, Optional\n```\n\n----------------------------------------\n\nTITLE: Creating a Semantic Kernel Plugin for Current Time\nDESCRIPTION: This snippet demonstrates how to create a Semantic Kernel plugin to get the current time for a given location. It uses the `kernel_function` decorator to describe the function and its parameters, which allows the kernel to automatically serialize the function and its parameters for use with LLMs.  The plugin is structured as a class with the function as a method.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/zh/04-tool-use/README.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_kernel.functions import kernel_function\n\n    class GetCurrentTimePlugin:\n        async def __init__(self, location):\n            self.location = location\n\n        @kernel_function(\n            description=\"Get the current time for a given location\"\n        )\n        def get_current_time(location: str = \"\"):\n            ...\n```\n\n----------------------------------------\n\nTITLE: Importing Azure Authentication Credentials\nDESCRIPTION: Imports DefaultAzureCredential for asynchronous authentication with Azure services, which attempts multiple authentication methods in sequence.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/08-multi-agent/code_samples/08-python_multi_aiagent_bookinghotel.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity.aio import DefaultAzureCredential\n```\n\n----------------------------------------\n\nTITLE: Importing Python Packages for AutoGen\nDESCRIPTION: Imports necessary modules for creating an AutoGen agent, including components from autogen_agentchat, autogen_core, and autogen_ext for Azure integration.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/code_samples/02-autogen.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom dotenv import load_dotenv\n\nfrom autogen_agentchat.agents import AssistantAgent\nfrom autogen_core.models import UserMessage\nfrom autogen_ext.models.azure import AzureAIChatCompletionClient\nfrom azure.core.credentials import AzureKeyCredential\nfrom autogen_core import CancellationToken\n\nfrom autogen_agentchat.messages import TextMessage\nfrom autogen_agentchat.ui import Console\n```\n\n----------------------------------------\n\nTITLE: Configuring Assistant Agent\nDESCRIPTION: Creates an AssistantAgent with specific system message instructions for generating responses based only on provided context.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-autogen-azuresearch.ipynb#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Create agents with enhanced capabilities\nassistant = AssistantAgent(\n    name=\"assistant\",\n    model_client=client,\n    system_message=(\n        \"You are a helpful AI assistant that provides answers using ONLY the provided context. \"\n        \"Do NOT include any external information. Base your answer entirely on the context given below.\"\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Registering and Running an AutoGen Agent in Python\nDESCRIPTION: This code snippet shows how to register a custom agent with AutoGen's runtime and send a message to initiate interaction. It demonstrates the setup of a single-threaded agent runtime and basic message handling.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# main.py\nruntime = SingleThreadedAgentRuntime()\nawait MyAgent.register(runtime, \"my_agent\", lambda: MyAgent())\n\nruntime.start()  # Start processing messages in the background.\nawait runtime.send_message(MyMessageType(\"Hello, World!\"), AgentId(\"my_agent\", \"default\"))\n```\n\n----------------------------------------\n\nTITLE: Optimized Travel Agent System Message\nDESCRIPTION: Detailed system message for a travel agent AI assistant, including comprehensive role definition, responsibilities, and interaction guidelines.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/06-building-trustworthy-agents/README.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n**Company Name:** Contoso Travel  \n**Role:** Travel Agent Assistant\n\n**Objective:**  \nYou are an AI-powered travel agent assistant for Contoso Travel, specializing in booking flights and providing exceptional customer service. Your main goal is to assist customers in finding, booking, and managing their flights, all while ensuring that their preferences and needs are met efficiently.\n\n**Key Responsibilities:**\n\n1. **Flight Lookup:**\n    \n    - Assist customers in searching for available flights based on their specified destination, dates, and any other relevant preferences.\n    - Provide a list of options, including flight times, airlines, layovers, and pricing.\n2. **Flight Booking:**\n    \n    - Facilitate the booking of flights for customers, ensuring that all details are correctly entered into the system.\n    - Confirm bookings and provide customers with their itinerary, including confirmation numbers and any other pertinent information.\n3. **Customer Preference Inquiry:**\n    \n    - Actively ask customers for their preferences regarding seating (e.g., aisle, window, extra legroom) and preferred times for flights (e.g., morning, afternoon, evening).\n    - Record these preferences for future reference and tailor suggestions accordingly.\n4. **Flight Cancellation:**\n    \n    - Assist customers in canceling previously booked flights if needed, following company policies and procedures.\n    - Notify customers of any necessary refunds or additional steps that may be required for cancellations.\n5. **Flight Monitoring:**\n    \n    - Monitor the status of booked flights and alert customers in real-time about any delays, cancellations, or changes to their flight schedule.\n    - Provide updates through preferred communication channels (e.g., email, SMS) as needed.\n\n**Tone and Style:**\n\n- Maintain a friendly, professional, and approachable demeanor in all interactions with customers.\n- Ensure that all communication is clear, informative, and tailored to the customer's specific needs and inquiries.\n\n**User Interaction Instructions:**\n\n- Respond to customer queries promptly and accurately.\n- Use a conversational style while ensuring professionalism.\n- Prioritize customer satisfaction by being attentive, empathetic, and proactive in all assistance provided.\n\n**Additional Notes:**\n\n- Stay updated on any changes to airline policies, travel restrictions, and other relevant information that could impact flight bookings and customer experience.\n- Use clear and concise language to explain options and processes, avoiding jargon where possible for better customer understanding.\n\nThis AI assistant is designed to streamline the flight booking process for customers of Contoso Travel, ensuring that all their travel needs are met efficiently and effectively.\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure AI Chat Completion Client with GitHub Models\nDESCRIPTION: Sets up an Azure AI Chat Completion client using GitHub Models for LLM access, specifying the model as 'gpt-4o-mini' and performing a simple test query about the capital of France.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/code_samples/02-autogen.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nclient = AzureAIChatCompletionClient(\n    model=\"gpt-4o-mini\",\n    endpoint=\"https://models.inference.ai.azure.com\",\n    # To authenticate with the model you will need to generate a personal access token (PAT) in your GitHub settings.\n    # Create your PAT token by following instructions here: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens\n    credential=AzureKeyCredential(os.getenv(\"GITHUB_TOKEN\")),\n    model_info={\n        \"json_output\": True,\n        \"function_calling\": True,\n        \"vision\": True,\n        \"family\": \"unknown\",\n    },\n)\n\nresult = await client.create([UserMessage(content=\"What is the capital of France?\", source=\"user\")])\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG Query Processing\nDESCRIPTION: Async function to process queries using the RAG system, combining context and generating responses\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-autogen-chromadb.ipynb#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def ask_rag_agent(query: str, context_provider: ContextProvider, location: str = None):\n    \"\"\"\n    Sends a query to the assistant agent with context from the provider.\n    \n    Args:\n        query: The user's question\n        context_provider: The context provider instance\n        location: Optional location for weather queries\n    \"\"\"\n    try:\n        # Get unified context\n        context = context_provider.get_unified_context(query, location)\n        \n        # Augment the query with context\n        augmented_query = (\n            f\"{context}\\n\\n\"\n            f\"User Query: {query}\\n\\n\"\n            \"Based ONLY on the above context, please provide a helpful answer.\"\n        )\n\n        # Send the augmented query to the assistant\n        start_time = time.time()\n        response = await assistant.on_messages(\n            [TextMessage(content=augmented_query, source=\"user\")],\n            cancellation_token=CancellationToken(),\n        )\n        processing_time = time.time() - start_time\n        \n        return {\n            'query': query,\n            'response': response.chat_message.content,\n            'processing_time': processing_time,\n            'location': location\n        }\n    except Exception as e:\n        print(f\"Error processing query: {e}\")\n        return None\n```\n\n----------------------------------------\n\nTITLE: Implementing BookTravelPlugin for Semantic Kernel in C#\nDESCRIPTION: Defines a plugin class for the Semantic Kernel that contains a function to book flights. The class uses KernelFunction attribute to register the function and Description attribute to provide metadata for the AI model.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Define a plugin that contains the function to book travel\npublic class BookTravelPlugin\n{\n    [KernelFunction(\"book_flight\")]\n    [Description(\"Book travel given location and date\")]\n    public async Task<string> BookFlight(DateTime date, string location)\n    {\n        return await Task.FromResult( $\"Travel was booked to {location} on {date}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Queries in Python Based on User Preferences\nDESCRIPTION: This function dynamically creates SQL queries from user preferences. It builds a query string by converting each preference into a SQL condition and joining them with AND operators.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef generate_sql_query(table, preferences):\n    query = f\"SELECT * FROM {table} WHERE \"\n    conditions = []\n    for key, value in preferences.items():\n        conditions.append(f\"{key}='{value}'\")\n    query += \" AND \".join(conditions)\n    return query\n```\n\n----------------------------------------\n\nTITLE: Importing Semantic Kernel Dependencies for AI Agent Development\nDESCRIPTION: Imports necessary Python packages for creating an AI agent with Semantic Kernel, including OpenAI integration, dotenv for environment variables, and semantic kernel's agent and function modules.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/01-intro-to-ai-agents/code_samples/01-semantic-kernel.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os \nfrom typing import Annotated\nfrom openai import AsyncOpenAI\n\nfrom dotenv import load_dotenv\n\nfrom semantic_kernel.agents import ChatCompletionAgent, ChatHistoryAgentThread\nfrom semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion\nfrom semantic_kernel.functions import kernel_function\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Lookup Function in Python\nDESCRIPTION: Defines the actual function to get the current time for a given location. It uses a timezone database to look up the correct timezone for the location and returns the current time in a JSON format.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef get_current_time(location):\n  \"\"\"Get the current time for a given location\"\"\"\n  print(f\"get_current_time called with location: {location}\")  \n  location_lower = location.lower()\n  \n  for key, timezone in TIMEZONE_DATA.items():\n      if key in location_lower:\n          print(f\"Timezone found for {key}\")  \n          current_time = datetime.now(ZoneInfo(timezone)).strftime(\"%I:%M %p\")\n          return json.dumps({\n              \"location\": location,\n              \"current_time\": current_time\n          })\n\n  print(f\"No timezone data found for {location_lower}\")  \n  return json.dumps({\"location\": location, \"current_time\": \"unknown\"})\n```\n\n----------------------------------------\n\nTITLE: Creating Function Schema for LLM in Python\nDESCRIPTION: Code that defines a JSON schema containing function name, description, and parameters. This schema describes the get_current_time function that the LLM will use to determine the current time in a city.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/04-tool-use/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Function description for the model to read\ntools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"get_current_time\",\n            \"description\": \"Get the current time in a given location\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city name, e.g. San Francisco\",\n                    },\n                },\n                \"required\": [\"location\"],\n            },\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Travel Agent System Prompt Example\nDESCRIPTION: A basic system prompt example that defines the role and responsibilities of a travel agent AI assistant for Contoso Travel, including specific tasks the agent can perform.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/06-building-trustworthy-agents/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nYou are a travel agent for Contoso Travel that is great at booking flights for customers. To help customers you can perform the following tasks: lookup available flights, book flights, ask for preferences in seating and times for flights, cancel any previously booked flights and alert customers on any delays or cancellations of flights.  \n```\n\n----------------------------------------\n\nTITLE: Main Function for Expense Processing\nDESCRIPTION: Asynchronous main function that clears the console and executes the process_expenses function. It handles the initialization and execution of the expense processing workflow.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/10-ai-agents-production/code_samples/10-expense_claim-demo.ipynb#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    # Clear the console\n    os.system('cls' if os.name=='nt' else 'clear')\n\n    # Run the async agent code\n    await process_expenses()\n\nawait main()\n```\n\n----------------------------------------\n\nTITLE: Initializing Dependencies and Imports for RAG System\nDESCRIPTION: Sets up necessary imports for Autogen, Azure AI Services, and other required libraries for the RAG implementation.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-autogen-azuresearch.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport time\nimport asyncio\nfrom typing import List, Dict\n\nfrom autogen_agentchat.agents import AssistantAgent\nfrom autogen_core import CancellationToken\nfrom autogen_agentchat.messages import TextMessage\nfrom azure.core.credentials import AzureKeyCredential\nfrom autogen_ext.models.azure import AzureAIChatCompletionClient\n\nfrom azure.search.documents import SearchClient\nfrom azure.search.documents.indexes import SearchIndexClient\nfrom azure.search.documents.indexes.models import SearchIndex, SimpleField, SearchFieldDataType, SearchableField\n\nfrom dotenv import load_dotenv\n\nload_dotenv()\n```\n\n----------------------------------------\n\nTITLE: Importing Semantic Kernel Components for AI Agents\nDESCRIPTION: Imports various classes from semantic_kernel package needed for creating and managing AI agents in a group chat environment.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/08-multi-agent/code_samples/08-python_multi_aiagent_bookinghotel.ipynb#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_kernel.agents import AgentGroupChat\nfrom semantic_kernel.agents import AzureAIAgent, AzureAIAgentSettings\nfrom semantic_kernel.agents.strategies.termination.termination_strategy import TerminationStrategy\nfrom semantic_kernel.contents import ChatMessageContent\nfrom semantic_kernel.contents import AuthorRole\nfrom semantic_kernel.functions.kernel_function_decorator import kernel_function\n```\n\n----------------------------------------\n\nTITLE: Making Initial API Call to LLM for Tool Selection in Python\nDESCRIPTION: Code that makes the initial API call to the LLM with the user's query and function descriptions. The LLM determines which function to call and returns the chosen function with arguments.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/04-tool-use/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Initial user message\nmessages = [{\"role\": \"user\", \"content\": \"What's the current time in San Francisco\"}] \n\n# First API call: Ask the model to use the function\nresponse = client.chat.completions.create(\n    model=deployment_name,\n    messages=messages,\n    tools=tools,\n    tool_choice=\"auto\",\n)\n\n# Process the model's response\nresponse_message = response.choices[0].message\nmessages.append(response_message)\n\nprint(\"Model's response:\")  \n\nprint(response_message)\n```\n\n----------------------------------------\n\nTITLE: Initializing Travel Agent Preferences in Python\nDESCRIPTION: Defines initial user preferences for travel destination, dates, budget, and interests\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Definiendo un Mensaje Básico para Agente de Viajes\nDESCRIPTION: Este snippet muestra cómo crear un mensaje básico que describe el rol y las responsabilidades de un agente de IA para una agencia de viajes. Define las tareas específicas que el agente puede realizar para los clientes.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/06-building-trustworthy-agents/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nYou are a travel agent for Contoso Travel that is great at booking flights for customers. To help customers you can perform the following tasks: lookup available flights, book flights, ask for preferences in seating and times for flights, cancel any previously booked flights and alert customers on any delays or cancellations of flights.  \n```\n\n----------------------------------------\n\nTITLE: SQLite Version Fix for Chroma Compatibility in Python\nDESCRIPTION: Code snippet to fix SQLite version compatibility issues with Chroma. This should be uncommented if encountering a RuntimeError about an unsupported SQLite version.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-semantic-kernel-azure-ai-agent.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# %pip install pysqlite3-binary\n# __import__('pysqlite3')\n# import sys\n# sys.modules['sqlite3'] = sys.modules.pop('pysqlite3')\n```\n\n----------------------------------------\n\nTITLE: Initializing Required Dependencies\nDESCRIPTION: Import statements for required libraries including Autogen, Azure AI, ChromaDB, and utility modules\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-autogen-chromadb.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport time\nimport asyncio\nfrom typing import List, Dict\nfrom dotenv import load_dotenv\n\nfrom autogen_agentchat.agents import AssistantAgent\nfrom autogen_core import CancellationToken\nfrom autogen_agentchat.messages import TextMessage\nfrom azure.core.credentials import AzureKeyCredential\nfrom autogen_ext.models.azure import AzureAIChatCompletionClient\n\nimport chromadb\n\nload_dotenv()\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Finding Hotels Based on Destination and Budget\nDESCRIPTION: SQL query that filters the hotels table based on destination and budget constraints. This query would be used to find suitable accommodations for a travel itinerary.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fr/09-metacognition/README.md#2025-04-18_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM hotels WHERE destination='Paris' AND budget='moderate';\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Attraction Selection\nDESCRIPTION: This SQL query retrieves attraction information filtered by destination and user interests. It demonstrates how to find relevant tourism activities based on specific user preferences.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM attractions WHERE destination='Paris' AND interests='museums, cuisine';\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries for Azure AI Agent Service\nDESCRIPTION: Installs necessary Python libraries for the multi-agent system including Azure authentication, HTTP requests handling, and the semantic kernel framework.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/08-multi-agent/code_samples/08-python_multi_aiagent_bookinghotel.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install azure-identity\n!pip install requests\n!pip install semantic-kernel\n!pip install --upgrade semantic_kernel\n!pip install azure-cli\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Client for GitHub Models with Semantic Kernel\nDESCRIPTION: Sets up the AsyncOpenAI client with GitHub token authentication and configures it to use Azure Inference SDK. Creates an OpenAIChatCompletion service with the gpt-4o-mini model that will be used by the agent.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/03-agentic-design-patterns/code_samples/03-semantic-kernel.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nclient = AsyncOpenAI(\n    api_key=os.environ.get(\"GITHUB_TOKEN\"), \n    base_url=\"https://models.inference.ai.azure.com/\",\n)\n\n# Create an AI Service that will be used by the `ChatCompletionAgent`\nchat_completion_service = OpenAIChatCompletion(\n    ai_model_id=\"gpt-4o-mini\",\n    async_client=client,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Travel Destinations List in Python\nDESCRIPTION: Creates a list of destination dictionaries with name and description attributes for travel recommendations\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fr/09-metacognition/README.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndestinations = [\n    {\"name\": \"Paris\", \"description\": \"City of lights, known for its art, fashion, and culture.\"},\n    {\"name\": \"Tokyo\", \"description\": \"Vibrant city, famous for its modernity and traditional temples.\"},\n    {\"name\": \"New York\", \"description\": \"The city that never sleeps, with iconic landmarks and diverse culture.\"},\n    {\"name\": \"Sydney\", \"description\": \"Beautiful harbour city, known for its opera house and stunning beaches.\"},\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Meta System Message for AI Agent Generation\nDESCRIPTION: A template prompt used to instruct an LLM on how to generate system prompts for AI agents. This meta-prompt sets expectations for the LLM to create detailed and structured system prompts based on company and role information.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/06-building-trustworthy-agents/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nYou are an expert at creating AI agent assistants. \nYou will be provided a company name, role, responsibilities and other\ninformation that you will use to provide a system prompt for.\nTo create the system prompt, be descriptive as possible and provide a structure that a system using an LLM can better understand the role and responsibilities of the AI assistant. \n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables\nDESCRIPTION: Loads environment variables from a .env file containing API keys and configuration settings.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/code_samples/04-semantic-kernel-python-aiagent-bookinghotel.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for AI Agent Development\nDESCRIPTION: Imports necessary Python libraries for building AI agents, including Azure AI services, Semantic Kernel components, OpenAI integration, and environment variable handling.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/10-ai-agents-production/code_samples/10-expense_claim-demo.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom dotenv import load_dotenv\nfrom azure.ai.inference import ChatCompletionsClient\nfrom azure.core.credentials import AzureKeyCredential\nfrom semantic_kernel.kernel import Kernel\nfrom semantic_kernel.agents import AgentGroupChat\nfrom openai import AsyncOpenAI\nfrom semantic_kernel.agents import ChatCompletionAgent, AgentGroupChat\n\n\nfrom semantic_kernel.contents.utils.author_role import AuthorRole\nfrom semantic_kernel.agents.strategies import SequentialSelectionStrategy, DefaultTerminationStrategy\nfrom semantic_kernel.contents.chat_message_content import ChatMessageContent\nfrom semantic_kernel.contents import ImageContent, TextContent\nfrom semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion, OpenAIChatPromptExecutionSettings\n\nfrom semantic_kernel.functions import kernel_function, KernelArguments\nfrom pydantic import BaseModel, Field\nfrom typing import List\nfrom azure.ai.inference.models import SystemMessage, UserMessage, TextContentItem, ImageContentItem, ImageUrl, ImageDetailLevel\n\nload_dotenv()\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure AI Dependencies and Configuration\nDESCRIPTION: Sets up required imports from Azure AI libraries and configures basic environment variables for authentication and endpoint access.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/06-building-trustworthy-agents/code_samples/06-system-message-framework.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom azure.ai.inference import ChatCompletionsClient\nfrom azure.ai.inference.models import SystemMessage, UserMessage\nfrom azure.core.credentials import AzureKeyCredential\n\ntoken = os.environ[\"GITHUB_TOKEN\"]\nendpoint = \"https://models.inference.ai.azure.com\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Retrieval and Weather Data Functions\nDESCRIPTION: Defines utility functions for retrieving context from the search index and simulated weather data for different locations.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-autogen-azuresearch.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_retrieval_context(query: str) -> str:\n    results = search_client.search(query)\n    context_strings = []\n    for result in results:\n        context_strings.append(f\"Document: {result['content']}\")\n    return \"\\n\\n\".join(context_strings) if context_strings else \"No results found\"\n\ndef get_weather_data(location: str) -> str:\n    \"\"\"\n    Simulates retrieving weather data for a given location.\n    In a real-world scenario, this would call a weather API.\n    \"\"\"\n    # Simulated weather data for common locations\n    weather_database = {\n        \"new york\": {\"temperature\": 72, \"condition\": \"Partly Cloudy\", \"humidity\": 65, \"wind\": \"10 mph\"},\n        \"london\": {\"temperature\": 60, \"condition\": \"Rainy\", \"humidity\": 80, \"wind\": \"15 mph\"},\n        \"tokyo\": {\"temperature\": 75, \"condition\": \"Sunny\", \"humidity\": 50, \"wind\": \"5 mph\"},\n        \"sydney\": {\"temperature\": 80, \"condition\": \"Clear\", \"humidity\": 45, \"wind\": \"12 mph\"},\n        \"paris\": {\"temperature\": 68, \"condition\": \"Cloudy\", \"humidity\": 70, \"wind\": \"8 mph\"},\n    }\n    \n    # Normalize the location string\n    location_key = location.lower()\n    \n    # Check if we have data for this location\n    if location_key in weather_database:\n        data = weather_database[location_key]\n        return f\"Weather for {location.title()}:\\n\" \\\n               f\"Temperature: {data['temperature']}°F\\n\" \\\n               f\"Condition: {data['condition']}\\n\" \\\n               f\"Humidity: {data['humidity']}%\\n\" \\\n               f\"Wind: {data['wind']}\"\n    else:\n        return f\"No weather data available for {location}.\"\n```\n\n----------------------------------------\n\nTITLE: Task Assignment JSON Structure\nDESCRIPTION: Sample JSON output showing how tasks are decomposed and assigned to specialized agents for a travel planning scenario.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/07-planning-design/README.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"is_greeting\": \"False\",\n    \"main_task\": \"Plan a family trip from Singapore to Melbourne.\",\n    \"subtasks\": [\n        {\n            \"assigned_agent\": \"flight_booking\",\n            \"task_details\": \"Book round-trip flights from Singapore to Melbourne.\"\n        },\n        {\n            \"assigned_agent\": \"hotel_booking\",\n            \"task_details\": \"Find family-friendly hotels in Melbourne.\"\n        },\n        {\n            \"assigned_agent\": \"car_rental\",\n            \"task_details\": \"Arrange a car rental suitable for a family of four in Melbourne.\"\n        },\n        {\n            \"assigned_agent\": \"activities_booking\",\n            \"task_details\": \"List family-friendly activities in Melbourne.\"\n        },\n        {\n            \"assigned_agent\": \"destination_info\",\n            \"task_details\": \"Provide information about Melbourne as a travel destination.\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Meta System Message for AI Agent Prompts\nDESCRIPTION: This code snippet provides a template for generating system prompts for AI agents. It instructs the LLM to create descriptive and structured prompts based on given company and role information.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/hi/06-building-trustworthy-agents/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nYou are an expert at creating AI agent assistants. \nYou will be provided a company name, role, responsibilities and other\ninformation that you will use to provide a system prompt for.\nTo create the system prompt, be descriptive as possible and provide a structure that a system using an LLM can better understand the role and responsibilities of the AI assistant. \n```\n\n----------------------------------------\n\nTITLE: SQL Query for Hotel Selection\nDESCRIPTION: This SQL query retrieves hotel information filtered by destination and budget category. It shows how to query the hotels database table for accommodation options that match user preferences.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/README.md#2025-04-18_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM hotels WHERE destination='Paris' AND budget='moderate';\n```\n\n----------------------------------------\n\nTITLE: Creating Meta System Message for AI Agent Generation\nDESCRIPTION: Template for instructing an LLM how to create AI agent assistants. Defines the structure and requirements for generating system prompts based on company information and role specifications.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/de/06-building-trustworthy-agents/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nYou are an expert at creating AI agent assistants. \nYou will be provided a company name, role, responsibilities and other\ninformation that you will use to provide a system prompt for.\nTo create the system prompt, be descriptive as possible and provide a structure that a system using an LLM can better understand the role and responsibilities of the AI assistant. \n```\n\n----------------------------------------\n\nTITLE: Generando un Mensaje del Sistema Optimizado para Agente de Viajes\nDESCRIPTION: Este fragmento muestra el resultado optimizado producido por el LLM basado en el meta mensaje y el mensaje básico. Incluye objetivo, responsabilidades, tono y estilo e instrucciones detalladas para el agente de viajes.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/06-building-trustworthy-agents/README.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n**Company Name:** Contoso Travel  \n**Role:** Travel Agent Assistant\n\n**Objective:**  \nYou are an AI-powered travel agent assistant for Contoso Travel, specializing in booking flights and providing exceptional customer service. Your main goal is to assist customers in finding, booking, and managing their flights, all while ensuring that their preferences and needs are met efficiently.\n\n**Key Responsibilities:**\n\n1. **Flight Lookup:**\n    \n    - Assist customers in searching for available flights based on their specified destination, dates, and any other relevant preferences.\n    - Provide a list of options, including flight times, airlines, layovers, and pricing.\n2. **Flight Booking:**\n    \n    - Facilitate the booking of flights for customers, ensuring that all details are correctly entered into the system.\n    - Confirm bookings and provide customers with their itinerary, including confirmation numbers and any other pertinent information.\n3. **Customer Preference Inquiry:**\n    \n    - Actively ask customers for their preferences regarding seating (e.g., aisle, window, extra legroom) and preferred times for flights (e.g., morning, afternoon, evening).\n    - Record these preferences for future reference and tailor suggestions accordingly.\n4. **Flight Cancellation:**\n    \n    - Assist customers in canceling previously booked flights if needed, following company policies and procedures.\n    - Notify customers of any necessary refunds or additional steps that may be required for cancellations.\n5. **Flight Monitoring:**\n    \n    - Monitor the status of booked flights and alert customers in real-time about any delays, cancellations, or changes to their flight schedule.\n    - Provide updates through preferred communication channels (e.g., email, SMS) as needed.\n\n**Tone and Style:**\n\n- Maintain a friendly, professional, and approachable demeanor in all interactions with customers.\n- Ensure that all communication is clear, informative, and tailored to the customer's specific needs and inquiries.\n\n**User Interaction Instructions:**\n\n- Respond to customer queries promptly and accurately.\n- Use a conversational style while ensuring professionalism.\n- Prioritize customer satisfaction by being attentive, empathetic, and proactive in all assistance provided.\n\n**Additional Notes:**\n\n- Stay updated on any changes to airline policies, travel restrictions, and other relevant information that could impact flight bookings and customer experience.\n- Use clear and concise language to explain options and processes, avoiding jargon where possible for better customer understanding.\n\nThis AI assistant is designed to streamline the flight booking process for customers of Contoso Travel, ensuring that all their travel needs are met efficiently and effectively.\n```\n\n----------------------------------------\n\nTITLE: Code Generation for Data Fetching\nDESCRIPTION: Implementation of code generation functions for fetching flight and hotel data based on user preferences.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndef generate_code_to_fetch_data(preferences):\n    code = f\"\"\"\n    def search_flights():\n        import requests\n        response = requests.get('https://api.example.com/flights', params={preferences})\n        return response.json()\n    \"\"\"\n    return code\n\ndef generate_code_to_fetch_hotels(preferences):\n    code = f\"\"\"\n    def search_hotels():\n        import requests\n        response = requests.get('https://api.example.com/hotels', params={preferences})\n        return response.json()\n    \"\"\"\n    return code\n```\n\n----------------------------------------\n\nTITLE: Running Chainlit Server for Chat Interface\nDESCRIPTION: Launches the Chainlit server to provide a chat interface for interacting with the MCP server. This command also populates the Azure AI Search Index with event descriptions.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/11-mcp/code_samples/github-mcp/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchainlit run app.py -w\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Search Service via CLI\nDESCRIPTION: Azure CLI command to create a new search service with specified resource group, name and SKU.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/00-course-setup/AzureSearch.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz search service create --resource-group <resource-group> --name <service-name> --sku Free\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Termination Strategy for AI Agents\nDESCRIPTION: Defines a custom termination strategy that stops an agent's operation when the word 'saved' appears in the last message, indicating task completion.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/08-multi-agent/code_samples/08-python_multi_aiagent_bookinghotel.ipynb#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass ApprovalTerminationStrategy(TerminationStrategy):\n    \"\"\"A strategy for determining when an agent should terminate.\"\"\"\n\n    async def should_agent_terminate(self, agent, history):\n        \"\"\"Check if the agent should terminate.\"\"\"\n        return \"saved\" in history[-1].content.lower()\n```\n\n----------------------------------------\n\nTITLE: Creating a Semantic Kernel Plugin for Time Lookup in Python\nDESCRIPTION: Demonstrates how to convert a regular function into a Semantic Kernel plugin using the kernel_function decorator. The decorator automatically handles the function description and parameter documentation for the LLM.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/README.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_kernel.functions import kernel_function\n\nclass GetCurrentTimePlugin:\n    async def __init__(self, location):\n        self.location = location\n\n    @kernel_function(\n        description=\"Get the current time for a given location\"\n    )\n    def get_current_time(location: str = \"\"):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Defining AI Assistant Parameters\nDESCRIPTION: Sets up role-specific variables for the AI assistant configuration.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/06-building-trustworthy-agents/code_samples/06-system-message-framework.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrole = \"travel agent\"\ncompany = \"contoso travel\"\nresponsibility = \"booking flights\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Function Calling with Azure Chat in Python\nDESCRIPTION: Sets up request settings for the Azure AI model to automatically determine when to call functions. This enables the model to decide when to invoke functions based on user input.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Define the request settings to configure the model with auto-function calling\nrequest_settings = AzureChatPromptExecutionSettings(function_choice_behavior=FunctionChoiceBehavior.Auto())\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Response in Python\nDESCRIPTION: Shows how to parse and pretty print a JSON response containing task assignments for agents.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/07-planning-design/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npprint(json.loads(response_content))\n```\n\n----------------------------------------\n\nTITLE: Viewing Model's Tool Call Response in Bash\nDESCRIPTION: Shows the output of the first API call where the model identifies the need to use the get_current_time function and provides the location parameter. The response includes a tool call ID, function name, and arguments.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nModel's response:\nChatCompletionMessage(content=None, role='assistant', function_call=None, tool_calls=[ChatCompletionMessageToolCall(id='call_pOsKdUlqvdyttYB67MOj434b', function=Function(arguments='{\"location\":\"San Francisco\"}', name='get_current_time'), type='function')])\n```\n\n----------------------------------------\n\nTITLE: Function Execution Result Output in Bash\nDESCRIPTION: Terminal output showing the execution of the get_current_time function with San Francisco as the location, finding the timezone, and returning the current time.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/04-tool-use/README.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nget_current_time called with location: San Francisco\nTimezone found for san francisco\nThe current time in San Francisco is 09:24 AM.\n```\n\n----------------------------------------\n\nTITLE: Handling Function Calls and Getting Final Response in AI Agent\nDESCRIPTION: Processes the function call made by the model, executes the selected function, and retrieves the final response from the AI agent.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ko/04-tool-use/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Handle function calls\nif response_message.tool_calls:\n    for tool_call in response_message.tool_calls:\n        if tool_call.function.name == \"get_current_time\":\n\n            function_args = json.loads(tool_call.function.arguments)\n\n            time_response = get_current_time(\n                location=function_args.get(\"location\")\n            )\n\n            messages.append({\n                \"tool_call_id\": tool_call.id,\n                \"role\": \"tool\",\n                \"name\": \"get_current_time\",\n                \"content\": time_response,\n            })\nelse:\n    print(\"No tool calls were made by the model.\")  \n\n# Second API call: Get the final response from the model\nfinal_response = client.chat.completions.create(\n    model=deployment_name,\n    messages=messages,\n)\n\nreturn final_response.choices[0].message.content\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Search Python SDK\nDESCRIPTION: Command to install the Azure Cognitive Search client library for Python using pip.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/00-course-setup/AzureSearch.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install azure-search-documents\n```\n\n----------------------------------------\n\nTITLE: Making API Call for Function Selection in AI Agent\nDESCRIPTION: Sends a request to the Azure OpenAI model to select and call the appropriate function based on the user's input.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ko/04-tool-use/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Initial user message\nmessages = [{\"role\": \"user\", \"content\": \"What's the current time in San Francisco\"}] \n\n# First API call: Ask the model to use the function\nresponse = client.chat.completions.create(\n    model=deployment_name,\n    messages=messages,\n    tools=tools,\n    tool_choice=\"auto\",\n)\n\n# Process the model's response\nresponse_message = response.choices[0].message\nmessages.append(response_message)\n\nprint(\"Model's response:\")  \n\nprint(response_message)\n```\n\n----------------------------------------\n\nTITLE: RAG Travel Agent Tool Example\nDESCRIPTION: Implements a RAG tool within a Travel Agent class for automated retrieval and generation of travel recommendations\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fr/09-metacognition/README.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.rag_tool = RAGTool()\n\n    def get_museums_in_paris(self):\n        user_input = \"I want to visit museums in Paris.\"\n        response = self.rag_tool.retrieve_and_generate(user_input)\n        return response\n\ntravel_agent = Travel_Agent()\nmuseums = travel_agent.get_museums_in_paris()\nprint(\"Top Museums in Paris:\", museums)\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Hotel Selection\nDESCRIPTION: This SQL query retrieves hotel options based on destination and budget constraints. It returns all hotel records for a specific location that match the user's budget preferences for accommodation.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_37\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM hotels WHERE destination='Paris' AND budget='moderate';\n```\n\n----------------------------------------\n\nTITLE: Managing Thread and Message Interactions in Azure AI Agent\nDESCRIPTION: Creates and manages a thread for agent interactions, sends messages, processes runs, and retrieves responses. Demonstrates creation of data visualization request.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nthread = project_client.agents.create_thread()\nmessage = project_client.agents.create_message(\n    thread_id=thread.id,\n    role=\"user\",\n    content=\"Could you please create a bar chart for the operating profit using the following data and provide the file to me? Company A: $1.2 million, Company B: $2.5 million, Company C: $3.0 million, Company D: $1.8 million\",\n)\n\nrun = project_client.agents.create_and_process_run(thread_id=thread.id, agent_id=agent.id)\n\nmessages = project_client.agents.list_messages(thread_id=thread.id)\nprint(f\"Messages: {messages}\")\n```\n\n----------------------------------------\n\nTITLE: Example of Model's Response (Bash)\nDESCRIPTION: This code snippet shows the expected output from the LLM after calling the function. The output is not the final answer to the question, but includes the name of the function selected and its arguments.  This demonstrates the LLM has identified the need to call `get_current_time` with the location \"San Francisco\".\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/zh/04-tool-use/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nModel's response:\n    ChatCompletionMessage(content=None, role='assistant', function_call=None, tool_calls=[ChatCompletionMessageToolCall(id='call_pOsKdUlqvdyttYB67MOj434b', function=Function(arguments='{\"location\":\"San Francisco\"}', name='get_current_time'), type='function')])\n```\n\n----------------------------------------\n\nTITLE: Importing Core Asynchronous Programming Libraries\nDESCRIPTION: Imports asyncio for asynchronous programming support and Annotated type from typing module for adding metadata to type hints.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/08-multi-agent/code_samples/08-python_multi_aiagent_bookinghotel.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio,os\nfrom typing import Annotated\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure OpenAI Client for Function Calling (Python)\nDESCRIPTION: This code snippet initializes the Azure OpenAI client, which is a prerequisite for enabling function calling. It retrieves the Azure OpenAI endpoint and API key from environment variables and sets the API version. This client will be used to interact with the Azure OpenAI service and leverage function calling capabilities.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/zh/04-tool-use/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    # Initialize the Azure OpenAI client\n    client = AzureOpenAI(\n        azure_endpoint = os.getenv(\"AZURE_OPENAI_ENDPOINT\"), \n        api_key=os.getenv(\"AZURE_OPENAI_API_KEY\"),  \n        api_version=\"2024-05-01-preview\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Search Index via CLI\nDESCRIPTION: Azure CLI command to create a new search index with specified fields and their types.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/00-course-setup/AzureSearch.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz search index create --service-name <service-name> --name <index-name> --fields \"field1:type, field2:type\"\n```\n\n----------------------------------------\n\nTITLE: Defining Function Schema for Tool Use in AI Agent\nDESCRIPTION: Creates a JSON schema defining the function name, description, and parameters for the 'get_current_time' tool to be used by an AI agent.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ko/04-tool-use/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Function description for the model to read\ntools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"get_current_time\",\n            \"description\": \"Get the current time in a given location\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city name, e.g. San Francisco\",\n                    },\n                },\n                \"required\": [\"location\"],\n            },\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Travel Agent Usage Example\nDESCRIPTION: Demonstrates basic initialization and usage of the Travel Agent class including setting preferences and processing feedback.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/hi/09-metacognition/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\ntravel_agent.adjust_based_on_feedback(feedback)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AI Chat Completion Client\nDESCRIPTION: Initializes the Azure AI Chat Completion Client with GPT-4 model configuration and necessary credentials for API access.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-autogen-azuresearch.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = AzureAIChatCompletionClient(\n    model=\"gpt-4o-mini\",\n    endpoint=\"https://models.inference.ai.azure.com\",\n    credential=AzureKeyCredential(os.getenv(\"GITHUB_TOKEN\")),\n    model_info={\n        \"json_output\": True,\n        \"function_calling\": True,\n        \"vision\": True,\n        \"family\": \"unknown\",\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from .env File\nDESCRIPTION: Uses dotenv to load configuration settings and sensitive information from a .env file, keeping API keys and connection strings separate from source code.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/08-multi-agent/code_samples/08-python_multi_aiagent_bookinghotel.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n```\n\n----------------------------------------\n\nTITLE: Viewing Function Execution Results in Bash\nDESCRIPTION: Shows the output of the function execution process, including the function being called with the location parameter, timezone lookup confirmation, and the final response that will be shown to the user.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/README.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nget_current_time called with location: San Francisco\nTimezone found for san francisco\nThe current time in San Francisco is 09:24 AM.\n```\n\n----------------------------------------\n\nTITLE: SERP API Key Configuration\nDESCRIPTION: Defines the API key variable for accessing the Search Engine Results Page API service.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/code_samples/04-semantic-kernel-python-aiagent-bookinghotel.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nSERP_API_KEY='SERPAPI_SEARCH_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Defining Travel Plan Models in Python\nDESCRIPTION: This snippet defines Pydantic models for travel subtasks and plans, including an enum for different types of agents. It sets up the structure for organizing travel planning tasks.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/hi/07-planning-design/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\nfrom enum import Enum\nfrom typing import List, Optional, Union\n\nclass AgentEnum(str, Enum):\n    FlightBooking = \"flight_booking\"\n    HotelBooking = \"hotel_booking\"\n    CarRental = \"car_rental\"\n    ActivitiesBooking = \"activities_booking\"\n    DestinationInfo = \"destination_info\"\n    DefaultAgent = \"default_agent\"\n    GroupChatManager = \"group_chat_manager\"\n\nclass TravelSubTask(BaseModel):\n    task_details: str\n    assigned_agent: AgentEnum  # we want to assign the task to the agent\n\nclass TravelPlan(BaseModel):\n    main_task: str\n    subtasks: List[TravelSubTask]\n    is_greeting: bool\n```\n\n----------------------------------------\n\nTITLE: Creating Meta System Message for AI Agent Creation\nDESCRIPTION: A system message template used to instruct an LLM on how to create AI agent assistants. This message defines the basic parameters and expectations for generating system prompts.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fa/06-building-trustworthy-agents/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nYou are an expert at creating AI agent assistants. \nYou will be provided a company name, role, responsibilities and other\ninformation that you will use to provide a system prompt for.\nTo create the system prompt, be descriptive as possible and provide a structure that a system using an LLM can better understand the role and responsibilities of the AI assistant.\n```\n\n----------------------------------------\n\nTITLE: Basic Travel Agent Usage Example\nDESCRIPTION: Demonstrates the basic usage of the Travel Agent class including preference setting, recommendation generation, and feedback handling.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\nupdated_items = travel_agent.adjust_based_on_feedback(feedback, itinerary['hotels'])\nprint(\"Updated Itinerary with Feedback:\", updated_items)\n```\n\n----------------------------------------\n\nTITLE: AI Co-op Translator Metadata Configuration\nDESCRIPTION: HTML comment block containing metadata for AI translation tracking including original hash, translation date, source file path and language code.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/05-agentic-rag/README.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\nCO_OP_TRANSLATOR_METADATA:\n{\n  \"original_hash\": \"4d215d159f2f3b96644fd62657988d23\",\n  \"translation_date\": \"2025-03-28T11:54:32+00:00\",\n  \"source_file\": \"05-agentic-rag\\\\README.md\",\n  \"language_code\": \"pt\"\n}\n-->\n```\n\n----------------------------------------\n\nTITLE: Azure Login Command\nDESCRIPTION: Command to authenticate with Azure services using the Azure CLI.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/code_samples/04-semantic-kernel-python-aiagent-bookinghotel.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Defining and Importing Plugin Functions in C#\nDESCRIPTION: This C# snippet demonstrates how to define semantic functions using inline string prompts and import them as plugins. It involves creating a function to summarize text and integrating it into the kernel for processing semantic tasks. Dependencies include Microsoft.SemanticKernel library.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar userInput = Console.ReadLine();\n\n// Define semantic function inline.\nstring skPrompt = @\"Summarize the provided unstructured text in a sentence that is easy to understand.\n                    Text to summarize: {{$userInput}}\";\n\n// create the function from the prompt\nKernelFunction summarizeFunc = kernel.CreateFunctionFromPrompt(\n    promptTemplate: skPrompt,\n    functionName: \"SummarizeText\"\n);\n\n//then import into the current kernel\nkernel.ImportPluginFromFunctions(\"SemanticFunctions\", [summarizeFunc]);\n```\n\n----------------------------------------\n\nTITLE: Importing Azure Identity Credentials in Python\nDESCRIPTION: This Python code snippet imports the required Azure identity credentials for keyless authentication.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/00-course-setup/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential, InteractiveBrowserCredential\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables File in Bash\nDESCRIPTION: This command copies the example environment file to create a new .env file for storing configuration values.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/00-course-setup/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Checking Semantic Kernel Version\nDESCRIPTION: Imports and verifies the installed version of Semantic Kernel library which should be at least 1.27.2.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/code_samples/04-semantic-kernel-python-aiagent-bookinghotel.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_kernel import __version__\n\n__version__\n```\n\n----------------------------------------\n\nTITLE: Logging into Azure using Azure CLI\nDESCRIPTION: This command initiates the Azure login process using the device code authentication method.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/00-course-setup/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz login --use-device-code\n```\n\n----------------------------------------\n\nTITLE: Initializing AI Agents and Running Chat Stream in Python\nDESCRIPTION: Creates and configures an AI assistant using OpenAI GPT model along with a user proxy agent for console interaction. Sets up a round-robin group chat with a termination condition that ends when 'APPROVE' is mentioned. Includes streaming the conversation to console.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/06-building-trustworthy-agents/README.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Create the agents.\nmodel_client = OpenAIChatCompletionClient(model=\"gpt-4o-mini\")\nassistant = AssistantAgent(\"assistant\", model_client=model_client)\nuser_proxy = UserProxyAgent(\"user_proxy\", input_func=input)  # Use input() to get user input from console.\n\n# Create the termination condition which will end the conversation when the user says \"APPROVE\".\ntermination = TextMentionTermination(\"APPROVE\")\n\n# Create the team.\nteam = RoundRobinGroupChat([assistant, user_proxy], termination_condition=termination)\n\n# Run the conversation and stream to the console.\nstream = team.run_stream(task=\"Write a 4-line poem about the ocean.\")\n# Use asyncio.run(...) when running in a script.\nawait Console(stream)\n```\n\n----------------------------------------\n\nTITLE: Basic Travel Agent Prompt for AI Assistant\nDESCRIPTION: A simple prompt that describes the role, tasks, and responsibilities of an AI travel agent for Contoso Travel. This acts as the foundation that will be enhanced by the meta system message.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/06-building-trustworthy-agents/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nYou are a travel agent for Contoso Travel that is great at booking flights for customers. To help customers you can perform the following tasks: lookup available flights, book flights, ask for preferences in seating and times for flights, cancel any previously booked flights and alert customers on any delays or cancellations of flights.  \n```\n\n----------------------------------------\n\nTITLE: SERP API Base URL Configuration\nDESCRIPTION: Sets up the base URL for the SERP API endpoint using Bing search engine.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/code_samples/04-semantic-kernel-python-aiagent-bookinghotel.ipynb#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nBASE_URL = 'https://serpapi.com/search?engine=bing'\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Chat with Response Streaming\nDESCRIPTION: Creates an interactive chat implementation with predefined user inputs for testing the travel agent. Sets up a conversation thread, processes each user input, handles streaming responses, and formats the output with HTML for display, including function calls and results.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/code_samples/09-semantic-kernel.ipynb#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\nuser_inputs = [\n    \"Book me a flight to Barcelona\",\n    \"I prefer a later flight\",\n    \"That is too late, choose the earliest flight\",\n    \"I want to leave the same day, give me some suggestions of things to do in Barcelona during my layover if I take the last flight out\",\n    \"I am streesed this wont be enough time\"\n]\n\n# Create a thread to hold the conversation\n# If no thread is provided, a new thread will be\n# created and returned with the initial response\nthread: ChatHistoryAgentThread | None = None\n\nasync def main():\n    global thread\n    \n    for user_input in user_inputs:\n        html_output = (\n            f\"<div style='margin-bottom:10px'>\"\n            f\"<div style='font-weight:bold'>User:</div>\"\n            f\"<div style='margin-left:20px'>{user_input}</div></div>\"\n        )\n\n        agent_name = None\n        full_response: list[str] = []\n        function_calls: list[str] = []\n\n        # Buffer to reconstruct streaming function call\n        current_function_name = None\n        argument_buffer = \"\"\n\n        async for response in agent.invoke_stream(\n            messages=user_input,\n            thread=thread,\n        ):\n            thread = response.thread\n            agent_name = response.name\n            content_items = list(response.items)\n\n            for item in content_items:\n                if isinstance(item, FunctionCallContent):\n                    if item.function_name:\n                        current_function_name = item.function_name\n\n                    # Accumulate arguments (streamed in chunks)\n                    if isinstance(item.arguments, str):\n                        argument_buffer += item.arguments\n                elif isinstance(item, FunctionResultContent):\n                    # Finalize any pending function call before showing result\n                    if current_function_name:\n                        formatted_args = argument_buffer.strip()\n                        try:\n                            parsed_args = json.loads(formatted_args)\n                            formatted_args = json.dumps(parsed_args)\n                        except Exception:\n                            pass  # leave as raw string\n\n                        function_calls.append(f\"Calling function: {current_function_name}({formatted_args})\")\n                        current_function_name = None\n                        argument_buffer = \"\"\n\n                    function_calls.append(f\"\\nFunction Result:\\n\\n{item.result}\")\n                elif isinstance(item, StreamingTextContent) and item.text:\n                    full_response.append(item.text)\n\n        if function_calls:\n            html_output += (\n                \"<div style='margin-bottom:10px'>\"\n                \"<details>\"\n                \"<summary style='cursor:pointer; font-weight:bold; color:#0066cc;'>Function Calls (click to expand)</summary>\"\n                \"<div style='margin:10px; padding:10px; background-color:#f8f8f8; \"\n                \"border:1px solid #ddd; border-radius:4px; white-space:pre-wrap; font-size:14px; color:#333;'>\"\n                f\"{chr(10).join(function_calls)}\"\n                \"</div></details></div>\"\n            )\n\n        html_output += (\n            \"<div style='margin-bottom:20px'>\"\n            f\"<div style='font-weight:bold'>{agent_name or 'Assistant'}:</div>\"\n            f\"<div style='margin-left:20px; white-space:pre-wrap'>{''.join(full_response)}</div></div><hr>\"\n        )\n\n        display(HTML(html_output))\n\nawait main()\n```\n\n----------------------------------------\n\nTITLE: Configuring Travel Agent Preferences and API Credentials\nDESCRIPTION: Sets up user preferences and Azure OpenAI API configuration for generating travel recommendations\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fr/09-metacognition/README.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npreferences = {\"activity\": \"sightseeing\", \"culture\": \"diverse\"}\napi_key = 'your_azure_openai_api_key'\nendpoint = 'https://your-endpoint.com/openai/deployments/your-deployment-name/completions?api-version=2022-12-01'\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Queries Using SQLite in Python\nDESCRIPTION: Function that connects to an SQLite database, executes a given SQL query, and returns the results. It handles the database connection lifecycle, including proper closing of connections.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/fr/09-metacognition/README.md#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport sqlite3\n\ndef execute_sql_query(query, database=\"travel.db\"):\n    connection = sqlite3.connect(database)\n    cursor = connection.cursor()\n    cursor.execute(query)\n    results = cursor.fetchall()\n    connection.close()\n    return results\n```\n\n----------------------------------------\n\nTITLE: Complete System Message Structure for Travel Agent AI\nDESCRIPTION: Detailed system message template including company information, role definition, objectives, responsibilities, and interaction guidelines for a travel agent AI assistant.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/de/06-building-trustworthy-agents/README.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n**Company Name:** Contoso Travel  \n**Role:** Travel Agent Assistant\n\n**Objective:**  \nYou are an AI-powered travel agent assistant for Contoso Travel, specializing in booking flights and providing exceptional customer service. Your main goal is to assist customers in finding, booking, and managing their flights, all while ensuring that their preferences and needs are met efficiently.\n\n**Key Responsibilities:**\n\n1. **Flight Lookup:**\n    \n    - Assist customers in searching for available flights based on their specified destination, dates, and any other relevant preferences.\n    - Provide a list of options, including flight times, airlines, layovers, and pricing.\n2. **Flight Booking:**\n    \n    - Facilitate the booking of flights for customers, ensuring that all details are correctly entered into the system.\n    - Confirm bookings and provide customers with their itinerary, including confirmation numbers and any other pertinent information.\n3. **Customer Preference Inquiry:**\n    \n    - Actively ask customers for their preferences regarding seating (e.g., aisle, window, extra legroom) and preferred times for flights (e.g., morning, afternoon, evening).\n    - Record these preferences for future reference and tailor suggestions accordingly.\n4. **Flight Cancellation:**\n    \n    - Assist customers in canceling previously booked flights if needed, following company policies and procedures.\n    - Notify customers of any necessary refunds or additional steps that may be required for cancellations.\n5. **Flight Monitoring:**\n    \n    - Monitor the status of booked flights and alert customers in real-time about any delays, cancellations, or changes to their flight schedule.\n    - Provide updates through preferred communication channels (e.g., email, SMS) as needed.\n\n**Tone and Style:**\n\n- Maintain a friendly, professional, and approachable demeanor in all interactions with customers.\n- Ensure that all communication is clear, informative, and tailored to the customer's specific needs and inquiries.\n\n**User Interaction Instructions:**\n\n- Respond to customer queries promptly and accurately.\n- Use a conversational style while ensuring professionalism.\n- Prioritize customer satisfaction by being attentive, empathetic, and proactive in all assistance provided.\n\n**Additional Notes:**\n\n- Stay updated on any changes to airline policies, travel restrictions, and other relevant information that could impact flight bookings and customer experience.\n- Use clear and concise language to explain options and processes, avoiding jargon where possible for better customer understanding.\n\nThis AI assistant is designed to streamline the flight booking process for customers of Contoso Travel, ensuring that all their travel needs are met efficiently and effectively.\n```\n\n----------------------------------------\n\nTITLE: Travel Agent Preference Gathering Method\nDESCRIPTION: A method to initialize and collect user preferences for travel recommendations\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/de/09-metacognition/README.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure AI Agent Service with Function Tool\nDESCRIPTION: This snippet demonstrates how to initialize the Azure AI Agent Service with a custom function tool. It shows how to create a client, define a `FunctionTool` using a user-defined function `fetch_sales_data_using_sqlite_query`, add it to a `ToolSet`, and then create an agent with the toolset. The agent can then use the function to answer questions about sales data.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/zh/04-tool-use/README.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport os\n    from azure.ai.projects import AIProjectClient\n    from azure.identity import DefaultAzureCredential\n    from fecth_sales_data_functions import fetch_sales_data_using_sqlite_query # fetch_sales_data_using_sqlite_query function which can be found in a fecth_sales_data_functions.py file.\n    from azure.ai.projects.models import ToolSet, FunctionTool, CodeInterpreterTool\n\n    project_client = AIProjectClient.from_connection_string(\n        credential=DefaultAzureCredential(),\n        conn_str=os.environ[\"PROJECT_CONNECTION_STRING\"],\n    )\n\n    # Initialize function calling agent with the fetch_sales_data_using_sqlite_query function and adding it to the toolset\n    fetch_data_function = FunctionTool(fetch_sales_data_using_sqlite_query)\n    toolset = ToolSet()\n    toolset.add(fetch_data_function)\n\n    # Initialize Code Interpreter tool and adding it to the toolset. \n    code_interpreter = code_interpreter = CodeInterpreterTool()\n    toolset = ToolSet()\n    toolset.add(code_interpreter)\n\n    agent = project_client.agents.create_agent(\n        model=\"gpt-4o-mini\", name=\"my-agent\", instructions=\"You are helpful agent\", \n        toolset=toolset\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Pydantic Models for Travel Planning\nDESCRIPTION: Creates Pydantic models for SubTask and TravelPlan to structure and validate the agent's responses.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/07-planning-design/code_samples/07-semantic-kernel.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass SubTask(BaseModel):\n    assigned_agent: str = Field(\n        description=\"The specific agent assigned to handle this subtask\")\n    task_details: str = Field(\n        description=\"Detailed description of what needs to be done for this subtask\")\n\n\nclass TravelPlan(BaseModel):\n    main_task: str = Field(\n        description=\"The overall travel request from the user\")\n    subtasks: List[SubTask] = Field(\n        description=\"List of subtasks broken down from the main task, each assigned to a specialized agent\")\n```\n\n----------------------------------------\n\nTITLE: Processing Tool Calls and Getting Final Response in Python\nDESCRIPTION: Code that processes the LLM's tool selection, executes the chosen function with provided arguments, and makes a second API call to get the final response incorporating the function result.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/04-tool-use/README.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Handle function calls\nif response_message.tool_calls:\n    for tool_call in response_message.tool_calls:\n        if tool_call.function.name == \"get_current_time\":\n\n            function_args = json.loads(tool_call.function.arguments)\n\n            time_response = get_current_time(\n                location=function_args.get(\"location\")\n            )\n\n            messages.append({\n                \"tool_call_id\": tool_call.id,\n                \"role\": \"tool\",\n                \"name\": \"get_current_time\",\n                \"content\": time_response,\n            })\nelse:\n    print(\"No tool calls were made by the model.\")  \n\n# Second API call: Get the final response from the model\nfinal_response = client.chat.completions.create(\n    model=deployment_name,\n    messages=messages,\n)\n\nreturn final_response.choices[0].message.content\n```\n\n----------------------------------------\n\nTITLE: Initializing Travel Agent Class in Python\nDESCRIPTION: This code snippet defines a `Travel_Agent` class with an `__init__` method that initializes an empty dictionary to store user preferences.  The `gather_preferences` method assigns the given preferences to the `user_preferences` attribute of the class instance. This class serves as a base for managing user travel preferences.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ja/09-metacognition/README.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n```\n\n----------------------------------------\n\nTITLE: Processing Function Calls and Getting Final Response in Python\nDESCRIPTION: Handles the tool calls returned by the model, extracts function arguments, calls the appropriate function, and adds the function's response to the message history. Then makes a second API call to get the final response from the model.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/README.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Handle function calls\nif response_message.tool_calls:\n    for tool_call in response_message.tool_calls:\n        if tool_call.function.name == \"get_current_time\":\n\n            function_args = json.loads(tool_call.function.arguments)\n\n            time_response = get_current_time(\n                location=function_args.get(\"location\")\n            )\n\n            messages.append({\n                \"tool_call_id\": tool_call.id,\n                \"role\": \"tool\",\n                \"name\": \"get_current_time\",\n                \"content\": time_response,\n            })\nelse:\n    print(\"No tool calls were made by the model.\")  \n\n# Second API call: Get the final response from the model\nfinal_response = client.chat.completions.create(\n    model=deployment_name,\n    messages=messages,\n)\n\nreturn final_response.choices[0].message.content\n```\n\n----------------------------------------\n\nTITLE: Handling Function Calls and Getting the Final Response (Python)\nDESCRIPTION: This code snippet handles the function call response from the LLM, extracts the function name and arguments, and executes the corresponding function (in this case, `get_current_time`). The result is then appended to the message history, and a second API call is made to the LLM to obtain the final, user-friendly response. The code also includes handling for scenarios where no tool calls are made.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/zh/04-tool-use/README.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n     # Handle function calls\n      if response_message.tool_calls:\n          for tool_call in response_message.tool_calls:\n              if tool_call.function.name == \"get_current_time\":\n     \n                  function_args = json.loads(tool_call.function.arguments)\n     \n                  time_response = get_current_time(\n                      location=function_args.get(\"location\")\n                  )\n     \n                  messages.append({\n                      \"tool_call_id\": tool_call.id,\n                      \"role\": \"tool\",\n                      \"name\": \"get_current_time\",\n                      \"content\": time_response,\n                  })\n      else:\n          print(\"No tool calls were made by the model.\")  \n  \n      # Second API call: Get the final response from the model\n      final_response = client.chat.completions.create(\n          model=deployment_name,\n          messages=messages,\n      )\n  \n      return final_response.choices[0].message.content\n```\n\n----------------------------------------\n\nTITLE: Travel Agent - Gathering User Preferences in Python\nDESCRIPTION: This Python code snippet demonstrates the initial part of a `Travel_Agent` class, focusing on gathering user preferences. The `__init__` method initializes the `user_preferences` attribute as an empty dictionary. The `gather_preferences` method updates the `user_preferences` dictionary with the provided preferences.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ja/09-metacognition/README.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Travel_Agent:\n    def __init__(self):\n        self.user_preferences = {}\n\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Chat Completion Service in Python\nDESCRIPTION: This snippet sets up the OpenAI chat completion service using environment variables for API keys. It demonstrates how to configure the service for use with the Semantic Kernel framework.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/10-ai-agents-production/code_samples/10-semantic-kernel.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\n# client = AsyncOpenAI(\n#     api_key=os.getenv(\"GITHUB_TOKEN\"), \n#     base_url=\"https://models.inference.ai.azure.com/\",\n# )\n\nchat_completion_service = OpenAIChatCompletion(\n    ai_model_id=\"gpt-4o-mini\",\n    # async_client=client,\n    api_key=os.getenv(\"OPENAI_API_KEY\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Intent Identification Function in Python\nDESCRIPTION: This Python code defines a function `identify_intent` that classifies a user query into one of three categories: transactional, navigational, or informational. It checks for keywords like \"book\" or \"purchase\" for transactional intent, \"website\" or \"official\" for navigational intent, and defaults to informational intent if neither is found.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ja/09-metacognition/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef identify_intent(query):\n    if \"book\" in query or \"purchase\" in query:\n        return \"transactional\"\n    elif \"website\" in query or \"official\" in query:\n        return \"navigational\"\n    else:\n        return \"informational\"\n\n```\n\n----------------------------------------\n\nTITLE: Processing AI Agent Response and Handling JSON Content\nDESCRIPTION: Validates and processes the AI-generated travel plan response, ensuring the content is a valid JSON string and handling potential errors\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/07-planning-design/README.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponse_content: Optional[str] = response.content if isinstance(response.content, str) else None\nif response_content is None:\n    raise ValueError(\"Response content is not a valid JSON string\")\n\npprint(json.loads(response_content))\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query in Python\nDESCRIPTION: This function executes a given SQL query against an SQLite database. It establishes a connection to the specified database file, executes the query using a cursor, retrieves the results, and closes the connection. This function facilitates interaction with a database to fetch relevant data based on generated queries.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ja/09-metacognition/README.md#2025-04-18_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport sqlite3\n\ndef execute_sql_query(query, database=\"travel.db\"):\n    connection = sqlite3.connect(database)\n    cursor = connection.cursor()\n    cursor.execute(query)\n    results = cursor.fetchall()\n    connection.close()\n    return results\n\n```\n\n----------------------------------------\n\nTITLE: Setting up Azure AI Chat Completion Client in Python\nDESCRIPTION: This code sets up an Azure AI chat completion client using environment variables for authentication and configuration. It's used to interact with the AI model for generating travel plans.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/hi/07-planning-design/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport os\nfrom typing import Optional\n\nfrom autogen_core.models import UserMessage, SystemMessage, AssistantMessage\nfrom autogen_ext.models.openai import AzureOpenAIChatCompletionClient\n\nclient = AzureOpenAIChatCompletionClient(\n    azure_deployment=os.getenv(\"AZURE_OPENAI_DEPLOYMENT_NAME\"),\n    model=os.getenv(\"AZURE_OPENAI_DEPLOYMENT_NAME\"),\n    api_version=os.getenv(\"AZURE_OPENAI_API_VERSION\"),\n    azure_endpoint=os.getenv(\"AZURE_OPENAI_ENDPOINT\"),\n    api_key=os.getenv(\"AZURE_OPENAI_API_KEY\"),\n)\n\nfrom pprint import pprint\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Function Calling in Python with Azure AI\nDESCRIPTION: Sets up request settings and implements a main function to handle chat interactions with auto function calling capability. The code demonstrates booking flight functionality with required location and date parameters.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrequest_settings = AzureChatPromptExecutionSettings(function_choice_behavior=FunctionChoiceBehavior.Auto())\n\nasync def main():\n    response = await chat_service.get_chat_message_content(\n        chat_history=chat_history, settings=request_settings, kernel=kernel\n    )\n    assert response is not None\n\n    print(f\"`{response}`\")\n    chat_history.add_assistant_message(response.content)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Iterative Planning Agent Configuration in Python\nDESCRIPTION: Implementation of an iterative planning system that can optimize and adjust plans based on previous results and user feedback.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/07-planning-design/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom autogen_core.models import UserMessage, SystemMessage, AssistantMessage\n#.. same as previous code and pass on the user history, current plan\nmessages = [\n    SystemMessage(content=\"\"\"You are a planner agent to optimize the\n    Your job is to decide which agents to run based on the user's request.\n    Below are the available agents specialized in different tasks:\n    - FlightBooking: For booking flights and providing flight information\n    - HotelBooking: For booking hotels and providing hotel information\n    - CarRental: For booking cars and providing car rental information\n    - ActivitiesBooking: For booking activities and providing activity information\n    - DestinationInfo: For providing information about destinations\n    - DefaultAgent: For handling general requests\"\"\", source=\"system\"),\n    UserMessage(content=\"Create a travel plan for a family of 2 kids from Singapore to Melbourne\", source=\"user\"),\n    AssistantMessage(content=f\"Previous travel plan - {TravelPlan}\", source=\"assistant\")\n]\n# .. re-plan and send the tasks to respective agents\n```\n\n----------------------------------------\n\nTITLE: Connecting Azure OpenAI in Python\nDESCRIPTION: This snippet demonstrates how to create a Semantic Kernel instance and add an Azure Chat Completion service using Python. Required dependencies include semantic_kernel package and external Azure service credentials. It initializes the kernel and connects it to Azure AI for chat completion tasks.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Semantic Kernel Python\nfrom semantic_kernel.connectors.ai.open_ai import AzureChatCompletion\nfrom semantic_kernel.kernel import Kernel\n\nkernel = Kernel()\nkernel.add_service(\n    AzureChatCompletion(\n        deployment_name=\"your-deployment-name\",\n        api_key=\"your-api-key\",\n        endpoint=\"your-endpoint\",\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Iterating Travel Plan - Python\nDESCRIPTION: This Python code demonstrates how to bootstrap and iterate a travel plan based on user preferences and budget constraints. The `TravelAgent` class initializes with a list of destinations, then creates an initial plan and refines it to maximize customer satisfaction.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/zh/09-metacognition/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass TravelAgent:\n    def __init__(self, destinations):\n        self.destinations = destinations\n\n    def bootstrap_plan(self, preferences, budget):\n        plan = []\n        total_cost = 0\n\n        for destination in self.destinations:\n            if total_cost + destination['cost'] <= budget and self.match_preferences(destination, preferences):\n                plan.append(destination)\n                total_cost += destination['cost']\n\n        return plan\n\n    def match_preferences(self, destination, preferences):\n        for key, value in preferences.items():\n            if destination.get(key) != value:\n                return False\n        return True\n\n    def iterate_plan(self, plan, preferences, budget):\n        for i in range(len(plan)):\n            for destination in self.destinations:\n                if destination not in plan and self.match_preferences(destination, preferences) and self.calculate_cost(plan, destination) <= budget:\n                    plan[i] = destination\n                    break\n        return plan\n\n    def calculate_cost(self, plan, new_destination):\n        return sum(destination['cost'] for destination in plan) + new_destination['cost']\n\n# Example usage\ndestinations = [\n    {\"name\": \"Paris\", \"cost\": 1000, \"activity\": \"sightseeing\"},\n    {\"name\": \"Tokyo\", \"cost\": 1200, \"activity\": \"shopping\"},\n    {\"name\": \"New York\", \"cost\": 900, \"activity\": \"sightseeing\"},\n    {\"name\": \"Sydney\", \"cost\": 1100, \"activity\": \"beach\"},\n]\n\npreferences = {\"activity\": \"sightseeing\"}\nbudget = 2000\n\ntravel_agent = TravelAgent(destinations)\ninitial_plan = travel_agent.bootstrap_plan(preferences, budget)\nprint(\"Initial Plan:\", initial_plan)\n\nrefined_plan = travel_agent.iterate_plan(initial_plan, preferences, budget)\nprint(\"Refined Plan:\", refined_plan)\n```\n\n----------------------------------------\n\nTITLE: Travel Agent Example Usage\nDESCRIPTION: This code snippet demonstrates a basic usage of a Travel_Agent class. It gathers user preferences, generates recommendations, and adjusts the itinerary based on user feedback.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/zh/09-metacognition/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntravel_agent = Travel_Agent()\npreferences = {\n    \"destination\": \"Paris\",\n    \"dates\": \"2025-04-01 to 2025-04-10\",\n    \"budget\": \"moderate\",\n    \"interests\": [\"museums\", \"cuisine\"]\n}\ntravel_agent.gather_preferences(preferences)\nitinerary = travel_agent.generate_recommendations()\nprint(\"Suggested Itinerary:\", itinerary)\nfeedback = {\"liked\": [\"Louvre Museum\"], \"disliked\": [\"Eiffel Tower (too crowded)\"]}\nnew_itinerary = travel_agent.adjust_based_on_feedback(feedback)\nprint(\"Updated Itinerary:\", new_itinerary)\n```\n\n----------------------------------------\n\nTITLE: Creating a Time Plugin with Semantic Kernel in Python\nDESCRIPTION: Code demonstrating how to implement the get_current_time function as a plugin in Semantic Kernel using the kernel_function decorator to automatically handle serialization.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/04-tool-use/README.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_kernel.functions import kernel_function\n\nclass GetCurrentTimePlugin:\n    async def __init__(self, location):\n        self.location = location\n\n    @kernel_function(\n        description=\"Get the current time for a given location\"\n    )\n    def get_current_time(location: str = \"\"):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Travel Plan JSON Structure\nDESCRIPTION: Example JSON output showing the structured travel plan with assigned agents and subtasks for different aspects of the trip planning.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/07-planning-design/README.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"is_greeting\": \"False\",\n    \"main_task\": \"Plan a family trip from Singapore to Melbourne.\",\n    \"subtasks\": [\n        {\n            \"assigned_agent\": \"flight_booking\",\n            \"task_details\": \"Book round-trip flights from Singapore to Melbourne.\"\n        },\n        {\n            \"assigned_agent\": \"hotel_booking\",\n            \"task_details\": \"Find family-friendly hotels in Melbourne.\"\n        },\n        {\n            \"assigned_agent\": \"car_rental\",\n            \"task_details\": \"Arrange a car rental suitable for a family of four in Melbourne.\"\n        },\n        {\n            \"assigned_agent\": \"activities_booking\",\n            \"task_details\": \"List family-friendly activities in Melbourne.\"\n        },\n        {\n            \"assigned_agent\": \"destination_info\",\n            \"task_details\": \"Provide information about Melbourne as a travel destination.\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Travel Planning Agent with System Messages\nDESCRIPTION: Defines system and user messages for an AI agent responsible for creating a travel plan, specifying available specialized agents\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/07-planning-design/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmessages = [\n    SystemMessage(content=\"\"\"You are an planner agent.\n    Your job is to decide which agents to run based on the user's request.\n    Below are the available agents specialized in different tasks:\n    - FlightBooking: For booking flights and providing flight information\n    - HotelBooking: For booking hotels and providing hotel information\n    - CarRental: For booking cars and providing car rental information\n    - ActivitiesBooking: For booking activities and providing activity information\n    - DestinationInfo: For providing information about destinations\n    - DefaultAgent: For handling general requests\"\"\", source=\"system\"),\n    UserMessage(content=\"Create a travel plan for a family of 2 kids from Singapore to Melbourne\", source=\"user\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Semantic Kernel with the Time Plugin in Python\nDESCRIPTION: Code showing how to create a Semantic Kernel instance, create the time plugin, and add it to the kernel for use with LLMs.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/04-tool-use/README.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_kernel import Kernel\n\n# Create the kernel\nkernel = Kernel()\n\n# Create the plugin\nget_current_time_plugin = GetCurrentTimePlugin(location)\n\n# Add the plugin to the kernel\nkernel.add_plugin(get_current_time_plugin)\n```\n\n----------------------------------------\n\nTITLE: Iterative Travel Planning with AI Agents\nDESCRIPTION: Demonstrates an iterative planning approach where user feedback and unexpected data can trigger replanning of travel tasks\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/07-planning-design/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmessages = [\n    SystemMessage(content=\"\"\"You are a planner agent to optimize the\n    Your job is to decide which agents to run based on the user's request.\n    Below are the available agents specialized in different tasks:\n    - FlightBooking: For booking flights and providing flight information\n    - HotelBooking: For booking hotels and providing hotel information\n    - CarRental: For booking cars and providing car rental information\n    - ActivitiesBooking: For booking activities and providing activity information\n    - DestinationInfo: For providing information about destinations\n    - DefaultAgent: For handling general requests\"\"\", source=\"system\"),\n    UserMessage(content=\"Create a travel plan for a family of 2 kids from Singapore to Melbourne\", source=\"user\"),\n    AssistantMessage(content=f\"Previous travel plan - {TravelPlan}\", source=\"assistant\")\n]\n```\n\n----------------------------------------\n\nTITLE: Gathering User Preferences in Python\nDESCRIPTION: This method `gather_preferences` stores the user's preferences for later use in retrieving information and generating recommendations. It takes a `preferences` dictionary as input and assigns it to the `user_preferences` attribute of the class instance. There are no direct dependencies.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/09-metacognition/README.md#2025-04-18_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n    def gather_preferences(self, preferences):\n        self.user_preferences = preferences\n```\n\n----------------------------------------\n\nTITLE: Calling the LLM with User Message and Tools (Python)\nDESCRIPTION: This code snippet demonstrates how to make the first API call to the LLM, providing the user's message (e.g., \"What's the current time in San Francisco\") and the function schema.  The LLM processes the message and determines if a function call is appropriate. The response contains the selected function's name and arguments, but not the final answer.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/zh/04-tool-use/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n  \n    # Initial user message\n    messages = [{\"role\": \"user\", \"content\": \"What's the current time in San Francisco\"}] \n  \n    # First API call: Ask the model to use the function\n      response = client.chat.completions.create(\n          model=deployment_name,\n          messages=messages,\n          tools=tools,\n          tool_choice=\"auto\",\n      )\n  \n      # Process the model's response\n      response_message = response.choices[0].message\n      messages.append(response_message)\n  \n      print(\"Model's response:\")  \n\n      print(response_message)\n```\n\n----------------------------------------\n\nTITLE: Importing Packages for Semantic Kernel and Azure AI Search Integration\nDESCRIPTION: This snippet imports necessary Python packages for working with Semantic Kernel, Azure AI Search, and OpenAI. It includes imports for typing, environment variables, and various Azure and OpenAI services.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-semantic-kernel-azuresearch.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport os\n\nfrom typing import Annotated\n\nfrom IPython.display import display, HTML\n\nfrom dotenv import load_dotenv\n\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.search.documents import SearchClient\nfrom azure.search.documents.indexes import SearchIndexClient\nfrom azure.search.documents.indexes.models import SearchIndex, SimpleField, SearchFieldDataType, SearchableField\n\nfrom openai import AsyncOpenAI\n\nfrom semantic_kernel.agents import ChatCompletionAgent, ChatHistoryAgentThread\nfrom semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion\nfrom semantic_kernel.contents import FunctionCallContent,FunctionResultContent, StreamingTextContent\nfrom semantic_kernel.functions import kernel_function\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto Function Chat Service Handler in Python\nDESCRIPTION: Asynchronous implementation that processes chat messages with auto function calling, handles responses, and maintains chat history. Includes example of BookTravelPlugin function invocation.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    response = await chat_service.get_chat_message_content(\n        chat_history=chat_history, settings=request_settings, kernel=kernel\n    )\n    assert response is not None\n\n    print(f\"`{response}`\")\n    chat_history.add_assistant_message(response.content)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Implementing Get Current Time Function for AI Agent\nDESCRIPTION: Defines the 'get_current_time' function that retrieves the current time for a given location, to be used as a tool by the AI agent.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ko/04-tool-use/README.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_current_time(location):\n    \"\"\"Get the current time for a given location\"\"\"\n    print(f\"get_current_time called with location: {location}\")  \n    location_lower = location.lower()\n    \n    for key, timezone in TIMEZONE_DATA.items():\n        if key in location_lower:\n            print(f\"Timezone found for {key}\")  \n            current_time = datetime.now(ZoneInfo(timezone)).strftime(\"%I:%M %p\")\n            return json.dumps({\n                \"location\": location,\n                \"current_time\": current_time\n            })\n  \n    print(f\"No timezone data found for {location_lower}\")  \n    return json.dumps({\"location\": location, \"current_time\": \"unknown\"})\n```\n\n----------------------------------------\n\nTITLE: Generating Code for Flight and Hotel Data Retrieval in Python\nDESCRIPTION: These functions generate Python code snippets that can fetch flight and hotel data based on user preferences. The generated code includes API calls with the user's preferences as parameters.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pl/09-metacognition/README.md#2025-04-18_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef generate_code_to_fetch_data(preferences):\n    # Example: Generate code to search for flights based on user preferences\n    code = f\"\"\"\n    def search_flights():\n        import requests\n        response = requests.get('https://api.example.com/flights', params={preferences})\n        return response.json()\n    \"\"\"\n    return code\n\ndef generate_code_to_fetch_hotels(preferences):\n    # Example: Generate code to search for hotels\n    code = f\"\"\"\n    def search_hotels():\n        import requests\n        response = requests.get('https://api.example.com/hotels', params={preferences})\n        return response.json()\n    \"\"\"\n    return code\n```\n\n----------------------------------------\n\nTITLE: Adjusting Recommendations Based on User Feedback in Python\nDESCRIPTION: This method adjusts the relevance of travel items based on user feedback. It increases the relevance of liked items and decreases the relevance of disliked items.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/pt/09-metacognition/README.md#2025-04-18_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\ndef adjust_based_on_feedback(self, feedback, items):\n    for item in items:\n        if item['name'] in feedback['liked']:\n            item['relevance'] += 1\n        if item['name'] in feedback['disliked']:\n            item['relevance'] -= 1\n    return items\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Semantic Kernel Agent Implementation\nDESCRIPTION: Imports required libraries and modules for creating a Semantic Kernel agent with OpenAI integration. Includes imports for JSON handling, environment variables, typing annotations, OpenAI async client, and Semantic Kernel components for agent functionality.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/09-metacognition/code_samples/09-semantic-kernel.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport os\n\nfrom typing import Annotated\n\nfrom dotenv import load_dotenv\n\nfrom openai import AsyncOpenAI\n\nfrom semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion\nfrom semantic_kernel.contents import FunctionCallContent, FunctionResultContent, StreamingTextContent\nfrom semantic_kernel.agents import ChatCompletionAgent, ChatHistoryAgentThread\nfrom semantic_kernel.functions import kernel_function\n```\n\n----------------------------------------\n\nTITLE: Connecting Azure OpenAI in C#\nDESCRIPTION: This snippet demonstrates how to create a Semantic Kernel instance and add an Azure Chat Completion service using C#. Required dependencies include Microsoft.SemanticKernel library. The code sets up the kernel and attaches the Azure AI chat service by specifying relevant parameters like resource name and endpoint.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// Semantic Kernel C#\nusing Microsoft.SemanticKernel;\n\n// Create kernel\nvar builder = Kernel.CreateBuilder();\n\n// Add a chat completion service:\nbuilder.Services.AddAzureOpenAIChatCompletion(\n    \"your-resource-name\",\n    \"your-endpoint\",\n    \"your-resource-key\",\n    \"deployment-model\");\nvar kernel = builder.Build();\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Chat Completion Service for Semantic Kernel\nDESCRIPTION: This code initializes an asynchronous OpenAI client and creates an OpenAI Chat Completion Service. It uses environment variables for configuration and sets up the service with a specific AI model.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-semantic-kernel-azuresearch.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\n# Initialize the asynchronous OpenAI client\nclient = AsyncOpenAI(\n    api_key=os.environ[\"GITHUB_TOKEN\"],\n    base_url=\"https://models.inference.ai.azure.com/\"\n)\n\n# Create the OpenAI Chat Completion Service\nchat_completion_service = OpenAIChatCompletion(\n    ai_model_id=\"gpt-4o-mini\",\n    async_client=client,\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Python Packages for Semantic Kernel\nDESCRIPTION: This snippet imports the necessary Python packages to work with Semantic Kernel, including OpenAI, dotenv for environment variables, and various Semantic Kernel components.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/code_samples/02-semantic-kernel.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport os \n\nfrom typing import Annotated\n\nfrom dotenv import load_dotenv\n\nfrom IPython.display import display, HTML\n\nfrom openai import AsyncOpenAI\n\nfrom semantic_kernel.agents import ChatCompletionAgent, ChatHistoryAgentThread\nfrom semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion\nfrom semantic_kernel.contents import FunctionCallContent, FunctionResultContent, StreamingTextContent\nfrom semantic_kernel.functions import kernel_function\n```\n\n----------------------------------------\n\nTITLE: Configuring Assistant Agent\nDESCRIPTION: Create an Autogen assistant agent with specific system message for context-based responses\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-autogen-chromadb.ipynb#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create agents with enhanced capabilities\nassistant = AssistantAgent(\n    name=\"assistant\",\n    model_client=client,\n    system_message=(\n        \"You are a helpful AI assistant that provides answers using ONLY the provided context. \"\n        \"Do NOT include any external information. Base your answer entirely on the context given below.\"\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing the Current Time Function in Python\nDESCRIPTION: Implementation of the get_current_time function that retrieves the current time for a given location using timezone data.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/04-tool-use/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef get_current_time(location):\n  \"\"\"Get the current time for a given location\"\"\"\n  print(f\"get_current_time called with location: {location}\")  \n  location_lower = location.lower()\n  \n  for key, timezone in TIMEZONE_DATA.items():\n      if key in location_lower:\n          print(f\"Timezone found for {key}\")  \n          current_time = datetime.now(ZoneInfo(timezone)).strftime(\"%I:%M %p\")\n          return json.dumps({\n              \"location\": location,\n              \"current_time\": current_time\n          })\n\n  print(f\"No timezone data found for {location_lower}\")  \n  return json.dumps({\"location\": location, \"current_time\": \"unknown\"})\n```\n\n----------------------------------------\n\nTITLE: Importing Required Python Packages for Semantic Kernel\nDESCRIPTION: Imports necessary modules for building a Semantic Kernel agent, including OpenAI, dotenv for environment variables, and various Semantic Kernel components for agent functionality and content handling.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/03-agentic-design-patterns/code_samples/03-semantic-kernel.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport os\n\nfrom typing import Annotated\n\nfrom dotenv import load_dotenv\n\nfrom IPython.display import display, HTML\n\nfrom openai import AsyncOpenAI\n\nfrom semantic_kernel.agents import ChatCompletionAgent, ChatHistoryAgentThread\nfrom semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion\nfrom semantic_kernel.contents import FunctionCallContent, FunctionResultContent, StreamingTextContent\nfrom semantic_kernel.functions import kernel_function\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: This command installs the necessary Python packages listed in the requirements.txt file using pip.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/00-course-setup/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure OpenAI Client for Function Calling in Python\nDESCRIPTION: Sets up the Azure OpenAI client with the necessary endpoint and API key to access models that support function calling. Requires valid Azure OpenAI credentials stored in environment variables.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Initialize the Azure OpenAI client\nclient = AzureOpenAI(\n    azure_endpoint = os.getenv(\"AZURE_OPENAI_ENDPOINT\"), \n    api_key=os.getenv(\"AZURE_OPENAI_API_KEY\"),  \n    api_version=\"2024-05-01-preview\"\n)\n```\n\n----------------------------------------\n\nTITLE: LLM Tool Selection Response Output in Bash\nDESCRIPTION: Terminal output showing the LLM's response selecting the get_current_time function with San Francisco as the location argument.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/es/04-tool-use/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nModel's response:\nChatCompletionMessage(content=None, role='assistant', function_call=None, tool_calls=[ChatCompletionMessageToolCall(id='call_pOsKdUlqvdyttYB67MOj434b', function=Function(arguments='{\"location\":\"San Francisco\"}', name='get_current_time'), type='function')])\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure OpenAI Client for Function Calling\nDESCRIPTION: Initializes the Azure OpenAI client to support function calling capabilities in an AI agent.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/ko/04-tool-use/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Initialize the Azure OpenAI client\nclient = AzureOpenAI(\n    azure_endpoint = os.getenv(\"AZURE_OPENAI_ENDPOINT\"), \n    api_key=os.getenv(\"AZURE_OPENAI_API_KEY\"),  \n    api_version=\"2024-05-01-preview\"\n)\n```\n\n----------------------------------------\n\nTITLE: Example of Function Call Execution (Bash)\nDESCRIPTION: This bash code snippet illustrates the function execution and expected output from the `get_current_time` function, showing the log messages indicating that the function was called with the specified location, the corresponding timezone was found, and the current time was successfully retrieved.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/translations/zh/04-tool-use/README.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nget_current_time called with location: San Francisco\n      Timezone found for san francisco\n      The current time in San Francisco is 09:24 AM.\n```\n\n----------------------------------------\n\nTITLE: Console Output from AutoGen Agent Interaction\nDESCRIPTION: Example output showing the message flow between agents in the system.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/02-explore-agentic-frameworks/README.md#2025-04-18_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nmy_agent received message: Hello, World!\nmy_assistant received message: Hello, World!\nmy_assistant responded: Hello! How can I assist you today?\n```\n\n----------------------------------------\n\nTITLE: Script Execution Handler for RAG Evaluator in Python\nDESCRIPTION: Entry point code that handles the execution of the main function, supporting both interactive and standard script environments. It uses asyncio to manage asynchronous execution of the main function.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-autogen-azuresearch.ipynb#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    if asyncio.get_event_loop().is_running():\n        await main()\n    else:\n        asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Creating Function Tool for Vacation Destinations in Python\nDESCRIPTION: This snippet creates a FunctionTool using the previously defined vacation_destinations function. It includes a description of the tool's purpose for the agent to understand its use.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/04-tool-use/code_samples/04-autogen.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nget_vacations = FunctionTool(\n    vacation_destinations, description=\"Search for vacation destinations and if they are available or not.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Azure OpenAI Environment Variables\nDESCRIPTION: Configures environment variables required for Azure OpenAI API connection including endpoint, API key, deployment name, and API version. These variables are used to authenticate and connect to the Azure OpenAI service.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/07-planning-design/code_samples/07-azure-openai.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\n# Set the environment variable\nos.environ[\"AZURE_OPENAI_ENDPOINT\"] = \"https://AZURE_OPENAI_ENDPOINT.openai.azure.com/\"\nos.environ[\"AZURE_OPENAI_API_KEY\"] = \"AZURE_OPENAI_API_KEY\"\nos.environ[\"AZURE_OPENAI_DEPLOYMENT_NAME\"] = \"gpt-4o-2024-08-06\"\nos.environ[\"AZURE_OPENAI_API_VERSION\"] = \"2024-08-01-preview\"\n```\n\n----------------------------------------\n\nTITLE: Importing Code Interpreter Tool for Azure AI\nDESCRIPTION: Imports CodeInterpreterTool from Azure AI models to interpret and execute code dynamically within AI workflows.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/08-multi-agent/code_samples/08-python_multi_aiagent_bookinghotel.ipynb#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.ai.projects.models import CodeInterpreterTool\n```\n\n----------------------------------------\n\nTITLE: Importing HTTP Request Library\nDESCRIPTION: Imports the requests library to make HTTP requests and interact with web services in Python code.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/08-multi-agent/code_samples/08-python_multi_aiagent_bookinghotel.ipynb#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure CLI\nDESCRIPTION: Command to log in to Azure CLI for accessing Azure services.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/00-course-setup/AzureSearch.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Importing Required Packages for Azure AI Agent and Semantic Kernel\nDESCRIPTION: Imports the necessary modules from Azure AI Projects, Azure Identity, and Semantic Kernel for implementing a RAG agent.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/05-agentic-rag/code_samples/05-semantic-kernel-azure-ai-agent.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Azure imports for project client and credentials\nfrom azure.ai.projects.models import FileSearchTool, OpenAIFile, VectorStore\nfrom azure.identity.aio import DefaultAzureCredential\n\n# Semantic Kernel imports\nfrom semantic_kernel.agents import AzureAIAgent, AzureAIAgentThread\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables in Python\nDESCRIPTION: This Python code snippet imports the necessary modules and loads the environment variables from the .env file.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/00-course-setup/README.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n```\n\n----------------------------------------\n\nTITLE: Connecting to GitHub MCP Server via Chainlit\nDESCRIPTION: Provides the command to connect to the GitHub MCP Server using a personal access token. This connection is necessary for retrieving GitHub repository information.\nSOURCE: https://github.com/microsoft/ai-agents-for-beginners/blob/main/11-mcp/code_samples/github-mcp/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx -y @modelcontextprotocol/server-github --env GITHUB_PERSONAL_ACCESS_TOKEN=[YOUR PERSONAL ACCESS TOKEN]\n```"
  }
]