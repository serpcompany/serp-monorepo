[
  {
    "owner": "copilotkit",
    "repo": "copilotkit",
    "content": "TITLE: Setting Up CopilotKit Provider in Next.js Layout\nDESCRIPTION: Implementation of the CopilotKit Provider in the root layout component of a Next.js application. This provides chat context to all child components.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-form-filling/README.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({children}: Readonly<{children: React.ReactNode}>) {\n  return (\n    <html lang=\"en\">\n      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>\n        <CopilotKit publicApiKey={process.env.NEXT_PUBLIC_COPILOT_PUBLIC_API_KEY}>\n          {children}\n        </CopilotKit>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Rendering CrewAI Agent State with CopilotKit (React, TypeScript)\nDESCRIPTION: This TypeScript React (TSX) snippet demonstrates how to initialize a CrewAI agent with CopilotKit, rendering realtime step-by-step progress, handling text-based user inputs, and responding to agent feedback requests. It leverages CopilotKit's core agent and UI hooks, utilizes React state/effects for controlled UIs, and provides clear points for extension. Dependencies include CopilotKit React Core, CopilotKit Runtime Client GraphQL, and React. Inputs are the agent name and initial inputs array; outputs include real-time UI components reflecting agent state and user feedback. Constraints: the code assumes use with TypeScript and functional React components.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/crew-quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport {\n  CrewsAgentState,\n  CrewsResponseStatus,\n  CrewsStateItem,\n  CrewsTaskStateItem,\n  CrewsToolStateItem,\n  useCoAgent,\n  useCoAgentStateRender,\n  useCopilotAction,\n  useCopilotChat,\n  useCopilotAdditionalInstructions,\n} from \"@copilotkit/react-core\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\n\nimport { MessageRole, TextMessage } from \"@copilotkit/runtime-client-gql\";\n\ninterface CrewsFeedback extends CrewsStateItem {\n  /**\n   * Output of the task execution\n   */\n  task_output?: string;\n}\n\n/**\n * Renders your Crew's steps & tasks in real-time.\n */\nfunction CrewStateRenderer({\n  state,\n  status,\n}: {\n  state: CrewsAgentState;\n  status: CrewsResponseStatus;\n}) {\n  const [isCollapsed, setIsCollapsed] = useState(true);\n  const contentRef = useRef<HTMLDivElement>(null);\n  const prevItemsLengthRef = useRef<number>(0);\n  const [highlightId, setHighlightId] = useState<string | null>(null);\n\n  // Combine steps + tasks\n  const items = useMemo(() => {\n    if (!state) return [];\n    return [...(state.steps || []), ...(state.tasks || [])].sort(\n      (a, b) =>\n        new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\n    );\n  }, [state]);\n\n  // Highlight newly added item & auto-scroll\n  useEffect(() => {\n    if (!state) return;\n    if (items.length > prevItemsLengthRef.current) {\n      const newestItem = items[items.length - 1];\n      setHighlightId(newestItem.id);\n      setTimeout(() => setHighlightId(null), 1500);\n\n      if (contentRef.current && !isCollapsed) {\n        contentRef.current.scrollTop = contentRef.current.scrollHeight;\n      }\n    }\n    prevItemsLengthRef.current = items.length;\n  }, [items, isCollapsed, state]);\n\n  if (!state) {\n    return <div>Loading crew state...</div>;\n  }\n\n  // Hide entirely if collapsed & empty & not in progress\n  if (isCollapsed && items.length === 0 && status !== \"inProgress\") return null;\n\n  return (\n    <div style={{ marginTop: \"8px\", fontSize: \"0.9rem\" }}>\n      <div\n        style={{ cursor: \"pointer\", display: \"flex\", alignItems: \"center\" }}\n        onClick={() => setIsCollapsed(!isCollapsed)}\n      >\n        <span style={{ marginRight: 4 }}>{isCollapsed ? \"\\u25B6\" : \"\\u25BC\"}</span>\n        {status === \"inProgress\" ? \"Crew is analyzing...\" : \"Crew analysis\"}\n      </div>\n\n      {!isCollapsed && (\n        <div\n          ref={contentRef}\n          style={{\n            maxHeight: \"200px\",\n            overflow: \"auto\",\n            borderLeft: \"1px solid #ccc\",\n            paddingLeft: \"8px\",\n            marginLeft: \"4px\",\n            marginTop: \"4px\",\n          }}\n        >\n          {items.length > 0 ? (\n            items.map((item) => {\n              const isTool = (item as CrewsToolStateItem).tool !== undefined;\n              const isHighlighted = item.id === highlightId;\n              return (\n                <div\n                  key={item.id}\n                  style={{\n                    marginBottom: \"8px\",\n                    animation: isHighlighted ? \"fadeIn 0.5s\" : undefined,\n                  }}\n                >\n                  <div style={{ fontWeight: \"bold\" }}>\n                    {isTool\n                      ? (item as CrewsToolStateItem).tool\n                      : (item as CrewsTaskStateItem).name}\n                  </div>\n                  {\"thought\" in item && item.thought && (\n                    <div style={{ opacity: 0.8, marginTop: \"4px\" }}>\n                      Thought: {item.thought}\n                    </div>\n                  )}\n                  {\"result\" in item && item.result !== undefined && (\n                    <pre style={{ fontSize: \"0.85rem\", marginTop: \"4px\" }}>\n                      {JSON.stringify(item.result, null, 2)}\n                    </pre>\n                  )}\n                  {\"description\" in item && item.description && (\n                    <div style={{ marginTop: \"4px\" }}>{item.description}</div>\n                  )}\n                </div>\n              );\n            })\n          ) : (\n            <div style={{ opacity: 0.7 }}>No activity yet...</div>\n          )}\n        </div>\n      )}\n\n      {/* Simple fadeIn animation */}\n      <style>{`\n        @keyframes fadeIn {\n          0% { opacity: 0; transform: translateY(4px); }\n          100% { opacity: 1; transform: translateY(0); }\n        }\n      `}</style>\n    </div>\n  );\n}\n\n/**\n * Renders a simple UI for agent-requested user feedback (Approve / Reject).\n */\nfunction CrewHumanFeedbackRenderer({\n  feedback,\n  respond,\n  status,\n}: {\n  feedback: CrewsFeedback;\n  respond?: (input: string) => void;\n  status: CrewsResponseStatus;\n}) {\n  const [isExpanded, setIsExpanded] = useState(true);\n  const [userResponse, setUserResponse] = useState<string | null>(null);\n\n  if (status === \"complete\") {\n    return (\n      <div style={{ marginTop: 8, textAlign: \"right\" }}>\n        {userResponse || \"Feedback submitted.\"}\n      </div>\n    );\n  }\n\n  if (status === \"inProgress\" || status === \"executing\") {\n    return (\n      <div style={{ marginTop: 8 }}>\n        {isExpanded && (\n          <div\n            style={{\n              border: \"1px solid #ddd\",\n              padding: \"8px\",\n              marginBottom: \"8px\",\n            }}\n          >\n            {feedback.task_output}\n          </div>\n        )}\n        <div style={{ textAlign: \"right\" }}>\n          <button\n            style={{ marginRight: 8 }}\n            onClick={() => setIsExpanded(!isExpanded)}\n          >\n            {isExpanded ? \"Hide\" : \"Show\"} Feedback\n          </button>\n          <button\n            style={{\n              marginRight: 8,\n              backgroundColor: \"#222222\",\n              border: \"none\",\n              padding: \"8px 16px\",\n              color: \"white\",\n              cursor: \"pointer\",\n              borderRadius: \"4px\",\n            }}\n            onClick={() => {\n              setUserResponse(\"Approved\");\n              /**\n               * This string is arbitrary. It can be any serializable input that will be forwarded to your Crew as feedback.\n               */\n              respond?.(\"Approve\");\n            }}\n          >\n            Approve\n          </button>\n          <button\n            style={{\n              backgroundColor: \"#222222\",\n              border: \"none\",\n              padding: \"8px 16px\",\n              color: \"white\",\n              cursor: \"pointer\",\n              borderRadius: \"4px\",\n            }}\n            onClick={() => {\n              setUserResponse(\"Rejected\");\n              /**\n               * This string is arbitrary. It can be any serializable input that will be forwarded to your Crew as feedback.\n               */\n              respond?.(\"Reject\");\n            }}\n          >\n            Reject\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}\n\n/**\n * useCrewQuickstart\n * Minimal example that:\n * 1) Sets up a crew/agent\n * 2) Handles text-based user input (get_input)\n * 3) Renders real-time crew state\n * 4) Handles \"crew_requesting_feedback\"\n */\nexport const useCrewQuickstart = ({\n  crewName,\n  inputs,\n}: {\n  crewName: string;\n  inputs: Array<string>;\n}): {\n  output: string;\n} => {\n  const [initialMessageSent, setInitialMessageSent] = useState(false);\n\n  const { state, setState, run } = useCoAgent<\n    CrewsAgentState & {\n      result: string;\n      inputs: Record<string, string>;\n    }\n  >({\n    name: crewName,\n    initialState: {\n      inputs: {},\n      result: \"Crew result will appear here...\",\n    },\n  });\n\n  const { appendMessage, isLoading } = useCopilotChat();\n\n  const instructions =\n    \"INPUTS ARE ABSOLUTELY REQUIRED. Please call getInputs before proceeding with anything else.\";\n\n  // Render an initial message when the chat is first loaded\n  useEffect(() => {\n    if (initialMessageSent || isLoading) return;\n\n    setTimeout(async () => {\n      await appendMessage(\n        new TextMessage({\n          content: \"Hi, Please provide your inputs before we get started.\",\n          role: MessageRole.Developer,\n        })\n      );\n      setInitialMessageSent(true);\n    }, 0);\n  }, []);\n\n  useEffect(() => {\n    if (!initialMessageSent && Object.values(state?.inputs || {}).length > 0) {\n      appendMessage(\n        new TextMessage({\n          role: MessageRole.Developer,\n          content: \"My inputs are: \" + JSON.stringify(state?.inputs),\n        })\n      ).then(() => {\n        setInitialMessageSent(true);\n      });\n    }\n  }, [initialMessageSent, state?.inputs]);\n\n  useCopilotAdditionalInstructions({\n    instructions,\n    available:\n      Object.values(state?.inputs || {}).length > 0 ? \"enabled\" : \"disabled\",\n  });\n\n  useCopilotAction({\n    name: \"getInputs\",\n    followUp: false,\n    description:\n      \"This action allows Crew to get required inputs from the user before starting the Crew.\",\n    renderAndWaitForResponse({ status }) {\n      if (status === \"inProgress\" || status === \"executing\") {\n        return (\n          <form\n            style={{ display: \"flex\", flexDirection: \"column\", gap: \"16px\" }}\n            onSubmit={async (e: React.FormEvent<HTMLFormElement>) => {\n              e.preventDefault();\n              const form = e.currentTarget;\n              const input = form.elements.namedItem(\n                \"input\"\n              ) as HTMLTextAreaElement;\n              const inputValue = input.value;\n              const inputKey = input.id;\n\n              setState({\n                ...state,\n                inputs: {\n                  ...state.inputs,\n                  [inputKey]: inputValue,\n                },\n```\n\n----------------------------------------\n\nTITLE: Configuring CopilotKit Provider\nDESCRIPTION: Root layout configuration for CopilotKit provider setup with API key integration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./globals.css\";\nimport { ReactNode } from \"react\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <CopilotKit\n          publicApiKey=\"<your-copilot-cloud-public-api-key>\"\n          agent=\"sample_agent\"\n        >\n          {children}\n        </CopilotKit>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CopilotKit Provider in React App Layout\nDESCRIPTION: Set up the CopilotKit provider in a React application's root layout to connect the frontend with the Copilot Runtime endpoint. This enables all CopilotKit features throughout the application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./globals.css\";\nimport { ReactNode } from \"react\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Make sure to use the URL you configured in the previous step  */}\n        <CopilotKit runtimeUrl=\"/api/copilotkit\">\n          {children}\n        </CopilotKit>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Chat Interface with useCopilotChat Hook in React\nDESCRIPTION: This code snippet demonstrates how to use the useCopilotChat hook from @copilotkit/react-core to create a custom chat interface. It shows the available methods and properties provided by the hook, including message management and loading state.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/headless-ui.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotChat } from \"@copilotkit/react-core\";\nimport { Role, TextMessage } from \"@copilotkit/runtime-client-gql\";\n\nexport function CustomChatInterface() {\n  const {\n    visibleMessages,\n    appendMessage,\n    setMessages,\n    deleteMessage,\n    reloadMessages,\n    stopGeneration,\n    isLoading,\n  } = useCopilotChat();\n\n  const sendMessage = (content: string) => {\n    appendMessage(new TextMessage({ content, role: Role.User }));\n  };\n\n  return (\n    <div>\n      {/* Implement your custom chat UI here */}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CopilotKit Runtime Endpoint in Next.js App Router\nDESCRIPTION: Next.js API route implementation that sets up the CopilotKit runtime with OpenAI adapter. This creates the backend endpoint that powers the copilot functionality.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_120\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  CopilotRuntime,\n  OpenAIAdapter,\n  copilotRuntimeNextJSAppRouterEndpoint,\n} from '@copilotkit/runtime';\n\nimport { NextRequest } from 'next/server';\n\n\nconst serviceAdapter = new OpenAIAdapter();\nconst runtime = new CopilotRuntime();\n\nexport const POST = async (req: NextRequest) => {\n  const { handleRequest } = copilotRuntimeNextJSAppRouterEndpoint({\n    runtime,\n    serviceAdapter,\n    endpoint: '/api/copilotkit',\n  });\n\n  return handleRequest(req);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Copilot Runtime Endpoint in Next.js App Router\nDESCRIPTION: This snippet shows how to create a new route to handle the '/api/copilotkit' endpoint using the Next.js App Router. It uses the CopilotRuntime class and copilotRuntimeNextJSAppRouterEndpoint function from @copilotkit/runtime.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-starter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  CopilotRuntime,\n  ExperimentalEmptyAdapter,\n  copilotRuntimeNextJSAppRouterEndpoint,\n  langGraphPlatformEndpoint\n} from \"@copilotkit/runtime\";;\nimport { NextRequest } from \"next/server\";\n\n// You can use any service adapter here for multi-agent support.\nconst serviceAdapter = new ExperimentalEmptyAdapter();\n\nconst runtime = new CopilotRuntime({\n  remoteEndpoints: [\n    // added in next step...\n  ],\n});\n\nexport const POST = async (req: NextRequest) => {\n  const { handleRequest } = copilotRuntimeNextJSAppRouterEndpoint({\n    runtime,\n    serviceAdapter,\n    endpoint: \"/api/copilotkit\",\n  });\n\n  return handleRequest(req);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Endpoints with LangGraph Platform in CopilotRuntime\nDESCRIPTION: This code snippet demonstrates how to configure CopilotRuntime with LangGraph Platform as a remote endpoint. It shows how to specify the deployment URL, LangSmith API key, and agent configuration for connecting to a deployed LangGraph agent.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions/langgraph-platform-endpoint.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst runtime = new CopilotRuntime({\n    // ...existing configuration\n    remoteEndpoints: [ // [!code highlight:9]\n        langGraphPlatformEndpoint({\n            deploymentUrl: \"your-api-url\",\n            langsmithApiKey: \"your-langsmith-api-key\",\n            // List of all agents which are available under \"graphs\" list in your langgraph.json file.\n            agents: [{ name: 'my_agent', description: 'A helpful LLM agent', assistantId: 'ID-of-the-agent' }]\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Trips Node Handler for User Decisions\nDESCRIPTION: Updates the perform_trips_node to handle user approval/rejection decisions by checking the tool message content.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-6-human-in-the-loop.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def perform_trips_node(state: AgentState, config: RunnableConfig):\n    \"\"\"Execute trip operations\"\"\"\n    ai_message = cast(AIMessage, state[\"messages\"][-2])\n    tool_message = cast(ToolMessage, state[\"messages\"][-1])\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langchain import copilotkit_emit_message\n\nasync def perform_trips_node(state: AgentState, config: RunnableConfig):\n    \"\"\"Execute trip operations\"\"\"\n    ai_message = cast(AIMessage, state[\"messages\"][-2])\n    tool_message = cast(ToolMessage, state[\"messages\"][-1])\n\n    if tool_message.content == \"CANCEL\":\n      await copilotkit_emit_message(config, \"Cancelled operation of trip.\")\n      return state\n    \n    # handle the edge case where the AI message is not an AIMessage or does not have tool calls, should never happen.\n    if not isinstance(ai_message, AIMessage) or not ai_message.tool_calls:\n        return state\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Interrupt Types in LangGraph Agent Node (Python)\nDESCRIPTION: Shows how to trigger and track multiple kinds of interrupt events, such as approval and naming, within a LangGraph agent node. Relies on 'langgraph.types.interrupt', 'langchain_core.messages.SystemMessage', and 'langchain_openai.ChatOpenAI'. The snippet demonstrates how to differentiate interrupt types with a 'type' property and incorporates their responses in the agent state, invoking an LLM with the resultant messages and returning the aggregated outcome.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom langgraph.types import interrupt # [!code highlight]\nfrom langchain_core.messages import SystemMessage\nfrom langchain_openai import ChatOpenAI\n\n# ... your full state definition\n\ndef chat_node(state: AgentState, config: RunnableConfig):\n\n  state[\"approval\"] = interrupt({ \"type\": \"approval\", \"content\": \"please approve\" }) # [!code highlight]\n\n  if not state.get(\"agent_name\"):\n    # Interrupt and wait for the user to respond with a name\n    state[\"agent_name\"] = interrupt({ \"type\": \"ask\", \"content\": \"Before we start, what would you like to call me?\" }) # [!code highlight]\n\n  # Tell the agent its name\n  system_message = SystemMessage(\n    content=f\"You are a helpful assistant...\"\n  )\n\n  response = ChatOpenAI(model=\"gpt-4o\").invoke(\n    [system_message, *state[\"messages\"]],\n    config\n  )\n\n  return {\n    **state,\n    \"messages\": response,\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring CopilotKit Runtime with LangGraph Endpoint\nDESCRIPTION: Configuration for setting up a remote LangGraph Platform endpoint in the CopilotKit runtime, including deployment URL and agent specifications.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-4-integrate-the-agent.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst runtime = new CopilotRuntime({\n    remoteEndpoints: [\n      langGraphPlatformEndpoint({\n        deploymentUrl: \"http://localhost:<port_number>\",\n        langsmithApiKey: \"your-langsmith-api-key\",\n        agents: [{ \n          name: 'travel', \n          description: 'A travel assistant that can help with planning trips.' \n        }]\n      }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting threadId in CopilotKit Component (TSX)\nDESCRIPTION: This snippet demonstrates how to set the threadId property in the CopilotKit component to restore the complete state of a thread, including messages, from the database.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/persistence/loading-agent-state.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<CopilotKit threadId=\"2140b272-7180-410d-9526-f66210918b13\">\n  <YourApp />\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Detailed CopilotTextarea Usage with State Management\nDESCRIPTION: A more comprehensive example of using CopilotTextarea in a React component. It includes state management, custom styling, and configuration of autosuggestions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState } from \"react\";\nimport { CopilotTextarea } from \"@copilotkit/react-textarea\";\nimport \"@copilotkit/react-textarea/styles.css\";\n\nexport function ExampleComponent() {\n  const [text, setText] = useState(\"\");\n\n  return (\n    <CopilotTextarea\n      className=\"custom-textarea-class\"\n      value={text}\n      onValueChange={(value: string) => setText(value)}\n      placeholder=\"Enter your text here...\"\n      autosuggestionsConfig={{\n        textareaPurpose: \"Provide context or purpose of the textarea.\",\n        chatApiConfigs: {\n          suggestionsApiConfig: {\n            maxTokens: 20,\n            stop: [\".\", \"?\", \"!\"],\n          },\n        },\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useCopilotReadable Hook in React/Next.js\nDESCRIPTION: Demonstrates how to use the useCopilotReadable hook to provide colleague data to a Copilot component. The example shows state management with useState and proper integration with CopilotKit in a Next.js environment using the App Router.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/connect-your-data/frontend.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\" // only necessary if you are using Next.js with the App Router.\nimport { useCopilotReadable } from \"@copilotkit/react-core\";\nimport { useState } from 'react';\n\nexport function YourComponent() {\n  // Create colleagues state with some sample data\n  const [colleagues, setColleagues] = useState([\n    { id: 1, name: \"John Doe\", role: \"Developer\" },\n    { id: 2, name: \"Jane Smith\", role: \"Designer\" },\n    { id: 3, name: \"Bob Wilson\", role: \"Product Manager\" }\n  ]);\n\n  // Define Copilot readable state\n  useCopilotReadable({\n    description: \"The current user's colleagues\",\n    value: colleagues,\n  });\n  return (\n    // Your custom UI component\n    <>...</>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotSidebar Component\nDESCRIPTION: Demonstrates how to use the CopilotSidebar component to create a collapsible chat interface alongside the main content of the application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_46\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CopilotSidebar } from \"@copilotkit/react-ui\";\n\nexport function YourApp() {\n  return (\n    <CopilotSidebar\n      defaultOpen={true}\n      instructions={\"You are assisting the user as best as you can. Answer in the best way possible given the data you have.\"}\n      labels={{\n        title: \"Sidebar Assistant\",\n        initial: \"How can I help you today?\",\n      }}\n    >\n      <YourMainContent />\n    </CopilotSidebar>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Management Actions with useCopilotAction in React\nDESCRIPTION: This snippet shows the implementation of three copilot actions (addTask, deleteTask, and setTaskStatus) using the useCopilotAction hook from CopilotKit. Each action is defined with a name, description, appropriate parameters with types and descriptions, and a handler function that calls the corresponding task management function.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-todo-app/step-4-copilot-actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// ... the rest of the file\n\nimport { useCopilotReadable, useCopilotAction } from \"@copilotkit/react-core\"; // [!code highlight]\n\nexport const TasksProvider = ({ children }: { children: ReactNode }) => {\n  const [tasks, setTasks] = useState<Task[]>(defaultTasks);\n\n  // [!code highlight:16]\n  useCopilotAction({\n    name: \"addTask\",\n    description: \"Adds a task to the todo list\",\n    parameters: [\n      {\n        name: \"title\",\n        type: \"string\",\n        description: \"The title of the task\",\n        required: true,\n      },\n    ],\n    handler: ({ title }) => {\n      addTask(title);\n    },\n  });\n\n  // [!code highlight:16]\n  useCopilotAction({\n    name: \"deleteTask\",\n    description: \"Deletes a task from the todo list\",\n    parameters: [\n      {\n        name: \"id\",\n        type: \"number\",\n        description: \"The id of the task\",\n        required: true,\n      },\n    ],\n    handler: ({ id }) => {\n      deleteTask(id);\n    },\n  });\n\n  // [!code highlight:23]\n  useCopilotAction({\n    name: \"setTaskStatus\",\n    description: \"Sets the status of a task\",\n    parameters: [\n      {\n        name: \"id\",\n        type: \"number\",\n        description: \"The id of the task\",\n        required: true,\n      },\n      {\n        name: \"status\",\n        type: \"string\",\n        description: \"The status of the task\",\n        enum: Object.values(TaskStatus),\n        required: true,\n      },\n    ],\n    handler: ({ id, status }) => {\n      setTaskStatus(id, status);\n    },\n  });\n\n  // ... the rest of the file\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CopilotKit Provider in React\nDESCRIPTION: This snippet demonstrates how to use the CopilotKit provider component to wrap an application. It requires a runtime URL to be specified.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/CopilotKit.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\n<CopilotKit runtimeUrl=\"<your-runtime-url>\">\n  // ... your app ...\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Component with useCopilotAction in React\nDESCRIPTION: Implements a React component using CopilotKit's useCopilotAction hook to create an interactive name prompt interface. Defines an AskName action with message parameter and rendering logic.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\nimport { useCopilotAction } from \"@copilotkit/react-core\";\n\nexport function YourComponent() {\n  useCopilotAction({\n    name: \"AskName\",\n    description: \"Ask the user how they would like to call you\",\n    parameters: [\n      {\n        name: \"message\",\n        type: \"string\",\n        description: \"The message that asks for the name\",\n        required: true\n      },\n    ],\n    render: ({ status, args }) => {\n      const { message } = args;\n      return <div>{ message }</div>;\n    },\n  });\n\n  return (\n    <>...</>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of CopilotSidebar Component in React\nDESCRIPTION: Example of how to import and use the CopilotSidebar component in a React application, including custom labels and wrapping the main app component.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/chat/CopilotSidebar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotSidebar } from \"@copilotkit/react-ui\";\nimport \"@copilotkit/react-ui/styles.css\";\n\n<CopilotSidebar\n  labels={{\n    title: \"Your Assistant\",\n    initial: \"Hi! 👋 How can I assist you today?\",\n  }}\n>\n  <YourApp/>\n</CopilotSidebar>\n```\n\n----------------------------------------\n\nTITLE: Rendering Agent State in Chat using TypeScript and React\nDESCRIPTION: This TypeScript and React snippet demonstrates how to use the useCoAgentStateRender hook to render the state of an agent within a chat interface. It maps over the searches in the agent's state and displays their status.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/generative-ui/agentic.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\n\ntype AgentState = {\n  searches: {\n    query: string;\n    done: boolean;\n  }[];\n};\n\nfunction YourMainContent() {\n  useCoAgentStateRender<AgentState>({\n    name: \"sample_agent\", // the name the agent is served as\n    render: ({ state }) => (\n      <div>\n        {state.searches?.map((search, index) => (\n          <div key={index}>\n            {search.done ? \"✅\" : \"❌\"} {search.query}{search.done ? \"\" : \"...\"}\n          </div>\n        ))}\n      </div>\n    ),\n  });\n\n  return <div>...</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Compiling StateGraph for AI Agent in TypeScript\nDESCRIPTION: This code defines the state graph for the AI agent, adding nodes for chat, feedback collection, and feedback handling. It also sets up the edges between these nodes and compiles the graph with specific configurations.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/node-flow.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const graph = new StateGraph(AgentStateAnnotation)\n  .addNode(\"chatNode\", chatNode, { ends: [\"getFeedback\"] })\n  .addNode(\"getFeedback\", getFeedback)\n  .addNode(\"handleFeedback\", handleFeedback)\n  .addEdge(\"__start__\", \"chatNode\")\n  .addEdge(\"getFeedback\", \"handleFeedback\")\n  .addEdge(\"handleFeedback\", \"chatNode\")\n  .compile({\n    checkpointer: new MemorySaver(),\n    interruptAfter: [\"getFeedback\"],\n  });\n```\n\n----------------------------------------\n\nTITLE: Modifying Message History in CrewAI Flow\nDESCRIPTION: Demonstrates how to clear the message history in a CrewAI flow by modifying the messages key in the state object.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/concepts/message-management.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef a_flow_function():\n    # ...\n    self.state[\"messages\"] = []\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State Class in Python\nDESCRIPTION: Defines the AgentState class in Python, inheriting from CopilotKitState and including question, answer, and resources properties.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/state-inputs-outputs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitState\nfrom typing import Literal\n\nclass AgentState(CopilotKitState):\n    question: str\n    answer: str\n    resources: List[str]\n```\n\n----------------------------------------\n\nTITLE: Implementing useCopilotReadable Hook for Todo State in React\nDESCRIPTION: This code snippet demonstrates how to use the useCopilotReadable hook to expose the state of a todo list to a copilot. The hook takes a description of the data and the stringified tasks array, allowing the copilot to understand and respond to questions about the application state.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-todo-app/step-3-copilot-readable-state.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// ... the rest of the file\n\nimport { useCopilotReadable } from \"@copilotkit/react-core\"; // [!code highlight]\n\nexport const TasksProvider = ({ children }: { children: ReactNode }) => {\n  const [tasks, setTasks] = useState<Task[]>(defaultTasks);\n\n  // [!code highlight:5]\n  useCopilotReadable({\n    description: \"The state of the todo list\",\n    value: JSON.stringify(tasks)\n  });\n\n  // ... the rest of the file\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up CopilotKit Runtime in Node.js HTTP\nDESCRIPTION: TypeScript code for setting up a simple Node.js HTTP server and using the CopilotKit Runtime to handle requests.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-create-endpoint.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http';\nimport {\n  CopilotRuntime,\n  {{adapterImport}},\n  copilotRuntimeNodeHttpEndpoint,\n} from '@copilotkit/runtime';\n{{extraImports}}\n\n{{clientSetup}}\n{{adapterSetup}}\n\nconst server = createServer((req, res) => {\n  const runtime = new CopilotRuntime();\n  const handler = copilotRuntimeNodeHttpEndpoint({\n    endpoint: '/copilotkit',\n    runtime,\n    serviceAdapter,\n  });\n\n  return handler(req, res);\n});\n\nserver.listen(4000, () => {\n  console.log('Listening at http://localhost:4000/copilotkit');\n});\n```\n\n----------------------------------------\n\nTITLE: Complete FastAPI Server Implementation\nDESCRIPTION: Full implementation of a FastAPI server with CopilotKit integration, including action definition and endpoint configuration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions/remote-backend-endpoint.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom copilotkit.integrations.fastapi import add_fastapi_endpoint\nfrom copilotkit import CopilotKitRemoteEndpoint, Action as CopilotAction\n\napp = FastAPI()\n\nasync def fetch_name_for_user_id(userId: str):\n    return {\"name\": \"User_\" + userId}\n\naction = CopilotAction(\n    name=\"fetchNameForUserId\",\n    description=\"Fetches user name from the database for a given ID.\",\n    parameters=[\n        {\n            \"name\": \"userId\",\n            \"type\": \"string\",\n            \"description\": \"The ID of the user to fetch data for.\",\n            \"required\": True,\n        }\n    ],\n    handler=fetch_name_for_user_id\n)\n\nsdk = CopilotKitRemoteEndpoint(actions=[action])\n\nadd_fastapi_endpoint(app, sdk, \"/copilotkit_remote\")\n\ndef main():\n    import uvicorn\n    uvicorn.run(\"server:app\", host=\"0.0.0.0\", port=8000, reload=True)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Adding useCopilotAction for Essay Writing in React Frontend\nDESCRIPTION: This snippet shows how to implement a useCopilotAction hook in a React component to handle essay writing. It includes rendering the draft and waiting for user approval.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/node-flow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotAction } from \"@copilotkit/react-core\"\nimport { Markdown } from \"@copilotkit/react-ui\"\n\nfunction YourMainContent() {\n  // ...\n\n  useCopilotAction({ \n    name: \"writeEssay\",\n    available: \"remote\",\n    description: \"Writes an essay and takes the draft as an argument.\",\n    parameters: [\n      { name: \"draft\", type: \"string\", description: \"The draft of the essay\", required: true },\n    ],\n    renderAndWaitForResponse: ({ args, respond, status }) => {\n      return (\n        <div>\n          <Markdown content={args.draft || 'Preparing your draft...'} />\n          \n          <div className={`flex gap-4 pt-4 ${status !== \"executing\" ? \"hidden\" : \"\"}`}>\n            <button \n              onClick={() => respond?.(\"CANCEL\")}\n              disabled={status !== \"executing\"}\n              className=\"border p-2 rounded-xl w-full\"\n            >\n              Try Again\n            </button>\n            <button\n              onClick={() => respond?.(\"SEND\")}\n              disabled={status !== \"executing\"} \n              className=\"bg-blue-500 text-white p-2 rounded-xl w-full\"\n            >\n              Approve Draft\n            </button>\n          </div>\n        </div>\n      );\n    },\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Trip Node Handler\nDESCRIPTION: Updates the perform_trips_node function to handle user approval decisions. Checks for cancellation requests and emits appropriate messages.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-6-human-in-the-loop.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def perform_trips_node(state: AgentState, config: RunnableConfig):\n    \"\"\"Execute trip operations\"\"\"\n    ai_message = cast(AIMessage, state[\"messages\"][-2])\n    tool_message = cast(ToolMessage, state[\"messages\"][-1])\n```\n\nLANGUAGE: python\nCODE:\n```\nif tool_message.content == \"CANCEL\":\n    await copilotkit_emit_message(config, \"Cancelled operation of trip.\")\n    return state\n\n# handle the edge case where the AI message is not an AIMessage or does not have tool calls, should never happen.\nif not isinstance(ai_message, AIMessage) or not ai_message.tool_calls:\n    return state\n```\n\n----------------------------------------\n\nTITLE: Implementing Headless UI with useCopilotChat Hook\nDESCRIPTION: This snippet demonstrates how to create a custom chat interface using the useCopilotChat hook, which provides full control over the UI while maintaining core chatbot functionality like message management and generation control.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_131\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotChat } from \"@copilotkit/react-core\";\nimport { Role, TextMessage } from \"@copilotkit/runtime-client-gql\";\n\nexport function CustomChatInterface() {\n  const {\n    visibleMessages,\n    appendMessage,\n    setMessages,\n    deleteMessage,\n    reloadMessages,\n    stopGeneration,\n    isLoading,\n  } = useCopilotChat();\n\n  const sendMessage = (content: string) => {\n    appendMessage(new TextMessage({ content, role: Role.User }));\n  };\n\n  return (\n    <div>\n      {/* Implement your custom chat UI here */}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useLangGraphInterrupt Hook in React Frontend\nDESCRIPTION: Implementation of human-in-the-loop functionality using CopilotKit's useLangGraphInterrupt hook in a React component. The code shows how to render a ProposalViewer component when the LangGraph is interrupted and handle user decisions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-5-human-in-the-loop.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\nimport { useLangGraphInterrupt } from \"@copilotkit/react-core\"; // [!code ++]\n// ...\n\nexport default function HomePage() {\n    // ...\n    const { state: researchState, setResearchState } = useResearch()\n\n    const streamingSection = useStreamingContent(researchState);\n\n    useLangGraphInterrupt<Proposal>({\n      render: ({ resolve, event }) => {\n        return <ProposalViewer\n          proposal={event.value}\n          onSubmit={(approved, proposal) => resolve(\n            JSON.stringify({\n              ...proposal,\n              approved,\n            })\n          )}\n        />\n      }\n    })\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using useCoAgent Hook in React\nDESCRIPTION: Implementation of the useCoAgent hook to read and display agent state in a React component.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/in-app-agent-read.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\n\ntype AgentState = {\n  language: \"english\" | \"spanish\";\n}\n\nfunction YourMainContent() {\n  const { state } = useCoAgent<AgentState>({\n    name: \"sample_agent\",\n    initialState: { language: \"spanish\" }  // optionally provide an initial state\n  });\n\n  return (\n    <div>\n      <h1>Your main content</h1>\n      <p>Language: {state.language}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting from CopilotKitState in Python\nDESCRIPTION: Example of creating an agent state class that inherits from CopilotKitState to access frontend actions in a Python-based agent.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitState\n\nclass YourAgentState(CopilotKitState):\n    your_additional_properties: str\n```\n\n----------------------------------------\n\nTITLE: Creating Tunnel with CopilotKit CLI\nDESCRIPTION: Command to create a tunnel between locally running LangGraph agent and Copilot Cloud.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-4-integrate-the-agent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx copilotkit@latest dev --port <port_number>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Action with useCopilotAction in React\nDESCRIPTION: A simple example of using the useCopilotAction hook to create a 'sayHello' function that can be executed by the Copilot. This function takes a name parameter and displays an alert greeting.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nuseCopilotAction({\n  name: \"sayHello\",\n  description: \"Say hello to someone.\",\n  parameters: [\\\n    {\\\n      name: \"name\",\\\n      type: \"string\",\\\n      description: \"name of the person to say greet\",\\\n    },\\\n  ],\n  handler: async ({ name }) => {\n    alert(`Hello, ${name}!`);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Video Component in JSX\nDESCRIPTION: This snippet demonstrates how to embed a video component in a JSX-based React application. It includes autoplay, loop, and muted attributes for an enhanced user experience.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/human-in-the-loop/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<video\n  src=\"/images/coagents/human-in-the-loop-example.mp4\"\n  className=\"rounded-lg shadow-xl\"\n  loop\n  playsInline\n  controls\n  autoPlay\n  muted\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic useCopilotAction Implementation in React\nDESCRIPTION: Simple example showing how to create a basic action that displays a greeting alert when triggered by the Copilot.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotAction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nuseCopilotAction({\n  name: \"sayHello\",\n  description: \"Say hello to someone.\",\n  parameters: [\n    {\n      name: \"name\",\n      type: \"string\",\n      description: \"name of the person to say greet\",\n    },\n  ],\n  handler: async ({ name }) => {\n    alert(`Hello, ${name}!`);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Trip Deletion Confirmation UI with React in TypeScript\nDESCRIPTION: This snippet defines a DeleteTrips React component, enabling users to confirm which trips should be deleted within a human-in-the-loop workflow. It depends on Trip types, UI subcomponents (such as PlaceCard and ActionButtons), and a status enum from @copilotkit/react-core. Key inputs include an args object containing trip_ids to match, a list of Trip objects, a status indicating completion/in-progress, and a handler function for user decisions. The output is JSX displaying the relevant trips and their places, and approval/cancellation options; the component assumes proper status and trip data input, and expects the handler to process 'SEND' or 'CANCEL' actions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-6-human-in-the-loop.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Trip } from \"@/lib/types\";\nimport { PlaceCard } from \"@/components/PlaceCard\";\nimport { X, Trash } from \"lucide-react\";\nimport { ActionButtons } from \"./ActionButtons\"; // [!code highlight]\nimport { RenderFunctionStatus } from \"@copilotkit/react-core\";\n\nexport type DeleteTripsProps = {\n  args: any;\n  status: RenderFunctionStatus;\n  handler: any;\n  trips: Trip[];\n};\n\nexport const DeleteTrips = ({ args, status, handler, trips }: DeleteTripsProps) => {\n  const tripsToDelete = trips.filter((trip: Trip) => args?.trip_ids?.includes(trip.id));\n\n  return (\n    <div className=\"space-y-4 w-full bg-secondary p-6 rounded-lg\">\n    <h1 className=\"text-sm\">The following trips will be deleted:</h1>\n      {status !== \"complete\" && tripsToDelete?.map((trip: Trip) => (\n        <div key={trip.id} className=\"flex flex-col gap-4\">\n          <>\n            <hr className=\"my-2\" />\n            <div className=\"flex flex-col gap-4\">\n            <h2 className=\"text-lg font-bold\">{trip.name}</h2>\n            {trip.places?.map((place) => (\n              <PlaceCard key={place.id} place={place} />\n            ))}\n            </div>\n          </>\n        </div>\n      ))}\n      { status !== \"complete\" && (\n        /* [!code highlight:7] */\n        <ActionButtons\n          status={status} \n          handler={handler} \n          approve={<><Trash className=\"w-4 h-4 mr-2\" /> Delete</>} \n          reject={<><X className=\"w-4 h-4 mr-2\" /> Cancel</>} \n        />\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for OpenAI API\nDESCRIPTION: Example .env file configuration to set the OpenAI API key for use with CopilotKit.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_118\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Implementing useCopilotAction Hook for User Feedback in React JSX\nDESCRIPTION: This code defines a copilot action for requesting feedback from users. It renders a CrewHumanFeedbackRenderer component when the AI system needs human input and handles the response flow.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/crew-quickstart.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nuseCopilotAction({\n    name: \"crew_requesting_feedback\",\n    description: \"Request feedback from the user\",\n    renderAndWaitForResponse(props) {\n      const { status, args, respond } = props;\n      return (\n        <CrewHumanFeedbackRenderer\n          feedback={args as unknown as CrewsFeedback}\n          respond={respond}\n          status={status as CrewsResponseStatus}\n        />\n      );\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CopilotTextarea in React\nDESCRIPTION: Demonstrates how to import and use the CopilotTextarea component with basic configuration for AI-powered suggestions in a React application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/CopilotTextarea.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotTextarea } from '@copilotkit/react-textarea';\nimport \"@copilotkit/react-textarea/styles.css\";\n\n<CopilotTextarea\n  autosuggestionsConfig={{\n    textareaPurpose:\n     \"the body of an email message\",\n    chatApiConfigs: {},\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Frontend Actions with useCopilotAction in React\nDESCRIPTION: Demonstrates how to use the useCopilotAction hook to enable copilot-driven actions in a React component. Shows implementation of a todo list functionality where the copilot can add new items.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_50\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"use client\" // only necessary if you are using Next.js with the App Router.\nimport { useCopilotAction } from \"@copilotkit/react-core\";\n\nexport function MyComponent() {\n  const [todos, setTodos] = useState<string[]>([]);\n\n  // Define Copilot action\n  useCopilotAction({\n    name: \"addTodoItem\",\n    description: \"Add a new todo item to the list\",\n    parameters: [\\\n      {\\\n        name: \"todoText\",\\\n        type: \"string\",\\\n        description: \"The text of the todo item to add\",\\\n        required: true,\\\n      },\\\n    ],\n    handler: async ({ todoText }) => {\n      setTodos([...todos, todoText]);\n    },\n  });\n\n  return (\n    <ul>\n      {todos.map((todo, index) => (\n        <li key={index}>{todo}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotKit in React Root Layout\nDESCRIPTION: This code snippet shows how to set up the root layout of a React application with CopilotKit integration. It imports necessary components, defines the RootLayout function, and wraps the application content with the CopilotKit component. The CopilotKit component requires a public API key and an agent name to be specified.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/coagents/cloud-configure-copilotkit-provider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./globals.css\";\nimport { ReactNode } from \"react\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body> \n        <CopilotKit \n          publicApiKey=\"<your-copilot-cloud-public-api-key>\"\n          agent=\"sample_agent\"\n        > \n          {children}\n        </CopilotKit>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LangGraph Agent for Essay Writing in TypeScript\nDESCRIPTION: This snippet shows the TypeScript implementation of a LangGraph agent for essay writing using CopilotKit. It includes state definition, chat node implementation, and tool binding.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/node-flow.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from \"zod\";\nimport { RunnableConfig } from \"@langchain/core/runnables\";\nimport { tool } from \"@langchain/core/tools\";\nimport { ToolNode } from \"@langchain/langgraph/prebuilt\";\nimport { AIMessage, HumanMessage, SystemMessage, ToolMessage } from \"@langchain/core/messages\";\nimport { Command, END, MemorySaver, START, StateGraph } from \"@langchain/langgraph\";\nimport { Annotation } from \"@langchain/langgraph\";\nimport { ChatOpenAI } from \"@langchain/openai\";\n\nimport { convertActionsToDynamicStructuredTools } from \"@copilotkit/sdk-js/langgraph\";\nimport { CopilotKitStateAnnotation } from \"@copilotkit/sdk-js/langgraph\";\n\nexport const AgentStateAnnotation = Annotation.Root({\n    ...CopilotKitStateAnnotation.spec,\n});\nexport type AgentState = typeof AgentStateAnnotation.State;\n\nasync function chatNode(state: AgentState, config: RunnableConfig) {\n  const model = new ChatOpenAI({ temperature: 0, model: \"gpt-4o\" });\n\n  const modelWithTools = model.bindTools!(\n    [ ...convertActionsToDynamicStructuredTools(state.copilotkit?.actions || [])],\n  );\n\n  const systemMessage = new SystemMessage({\n    content: `You are a helpful assistant.`,\n  });\n\n  const response = await modelWithTools.invoke(\n    [systemMessage, ...state.messages],\n    config\n  );\n\n  if (response.tool_calls?.length) {\n    const toolCall = response.tool_calls[0];\n\n    if (toolCall.name === \"writeEssay\") {\n      return new Command({\n        goto: \"getFeedback\",\n        update: {\n          messages: [response],\n        }\n      });\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useCopilotAction Hook in React Component\nDESCRIPTION: This code snippet demonstrates how to use the useCopilotAction hook to define a 'addTodoItem' action in a React component. The action adds a new todo item to a list when triggered by the copilot.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/frontend-actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\" // only necessary if you are using Next.js with the App Router.\nimport { useCopilotAction } from \"@copilotkit/react-core\";\n\nexport function MyComponent() {\n  const [todos, setTodos] = useState<string[]>([]);\n\n  // Define Copilot action\n  useCopilotAction({\n    name: \"addTodoItem\",\n    description: \"Add a new todo item to the list\",\n    parameters: [\n      {\n        name: \"todoText\",\n        type: \"string\",\n        description: \"The text of the todo item to add\",\n        required: true,\n      },\n    ],\n    handler: async ({ todoText }) => {\n      setTodos([...todos, todoText]);\n    },\n  });\n\n  return (\n    <ul>\n      {todos.map((todo, index) => (\n        <li key={index}>{todo}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Component in React JSX\nDESCRIPTION: This snippet shows how to embed a video component in React JSX, including attributes for autoplay, controls, and styling.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/quickstart/crewai.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<video\n  src=\"/images/coagents/chat-example.mp4\"\n  className=\"rounded-lg shadow-xl\"\n  loop\n  playsInline\n  controls\n  autoPlay\n  muted\n/>\n```\n\n----------------------------------------\n\nTITLE: Conditional Instructions with useCopilotAdditionalInstructions in React\nDESCRIPTION: Shows how to conditionally add instructions to an AI assistant based on component state using the useCopilotAdditionalInstructions hook.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-ai-assistant-behavior.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Chat() {\n  const [showWeather, setShowWeather] = useState(false);\n\n  useCopilotAdditionalInstructions({\n    instructions: \"Do not answer questions about the weather.\",\n    available: showWeather ? \"enabled\" : \"disabled\"\n  }, showWeather);\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Management for Chat Suggestions\nDESCRIPTION: Example showing how to implement dependency management with the useCopilotChatSuggestions hook. The suggestions are updated whenever the relevantState dependency changes.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotChatSuggestions } from \"@copilotkit/react-ui\";\n\nexport function MyComponent() {\n  useCopilotChatSuggestions(\n    {\n      instructions: \"Suggest the most relevant next actions.\",\n      minSuggestions: 1,\n      maxSuggestions: 2,\n    },\n    [relevantState],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit React UI Dependencies\nDESCRIPTION: Command to install the required npm packages for using CopilotChat component\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/chat/CopilotChat.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @copilotkit/react-core @copilotkit/react-ui\n```\n\n----------------------------------------\n\nTITLE: Configuring Tool Call State Emission\nDESCRIPTION: Example demonstrating how to emit tool calls as streaming LangGraph state with specific state key and tool configurations.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/LangGraph.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_customize_config\n\nconfig = copilotkit_customize_config(\n    config,\n    emit_intermediate_state=[\n       {\n            \"state_key\": \"steps\",\n            \"tool\": \"SearchTool\",\n            \"tool_argument\": \"steps\"\n        },\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Frame Component in JSX\nDESCRIPTION: JSX component that renders a framed image demonstrating Generative UI functionality for a meeting scheduling agent.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/generative-ui/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Frame>\n  <img\n    src=\"/images/coagents/AgenticGenerativeUI.gif\"\n    className=\"my-0\"\n    alt=\"Demo of Generative UI showing a meeting scheduling agent\"\n  />\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Starting CopilotKit Runtime with Custom Port\nDESCRIPTION: This command starts the CopilotKit runtime on a specified port number. It's used to set up the connection between the FastAPI server and Copilot Cloud.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/copilot-cloud-configure-remote-endpoint.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx copilotkit@latest dev --port <port_number>\n```\n\n----------------------------------------\n\nTITLE: Running Next.js development server\nDESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the application locally for development and testing.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa-text/ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the project locally for development and testing.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa/ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Creating CopilotKit Runtime Endpoint with Next.js App Router\nDESCRIPTION: Setup a Copilot Runtime endpoint in Next.js App Router to handle API requests for CopilotKit. This creates the backend service with OpenAI integration that manages LLM interactions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  CopilotRuntime,\n  OpenAIAdapter,\n  copilotRuntimeNextJSAppRouterEndpoint,\n} from '@copilotkit/runtime';\n\nimport { NextRequest } from 'next/server';\n\n\nconst serviceAdapter = new OpenAIAdapter();\nconst runtime = new CopilotRuntime();\n\nexport const POST = async (req: NextRequest) => {\n  const { handleRequest } = copilotRuntimeNextJSAppRouterEndpoint({\n    runtime,\n    serviceAdapter,\n    endpoint: '/api/copilotkit',\n  });\n\n  return handleRequest(req);\n};\n```\n\n----------------------------------------\n\nTITLE: Adding CopilotKit Sidebar Component\nDESCRIPTION: Implementation of CopilotKit sidebar component with custom configuration and styling imports.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-3-setup-copilotkit.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { TasksList } from \"@/components/TasksList\";\nimport { TasksProvider } from \"@/lib/hooks/use-tasks\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\nimport { CopilotSidebar } from \"@copilotkit/react-ui\";\nimport \"@copilotkit/react-ui/styles.css\";\n\nexport default function Home() {\n  return (\n    <CopilotKit\n      publicApiKey={process.env.NEXT_PUBLIC_CPK_PUBLIC_API_KEY}\n    >\n      <CopilotSidebar\n        defaultOpen={true}\n        clickOutsideToClose={false}\n        labels={{\n          title: \"Travel Planner\",\n          initial: \"Hi! 👋 I'm here to plan your trips. I can help you manage your trips, add places to them, or just generally work with you to plan a new one.\",\n        }}\n      />\n      <TooltipProvider>\n        <TripsProvider>\n          <main className=\"h-screen w-screen\">\n            <MapCanvas />\n          </main>\n        </TripsProvider>\n      </TooltipProvider>\n    </CopilotKit>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Frontend Action with useCopilotAction in TypeScript/React\nDESCRIPTION: Demonstrates how to create a frontend action using the useCopilotAction hook. This example shows a simple action that displays an alert greeting to a user. The action includes parameter definitions and a handler function that executes when the action is triggered.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/frontend-actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotAction } from \"@copilotkit/react-core\"\n\nexport function Page() {\n  // ...\n\n  useCopilotAction({\n    name: \"sayHello\",\n    description: \"Say hello to the user\",\n    available: \"remote\", // optional, makes it so the action is *only* available to the agent\n    parameters: [\n      {\n        name: \"name\",\n        type: \"string\",\n        description: \"The name of the user to say hello to\",\n        required: true,\n      },\n    ],\n    handler: async ({ name }) => {\n      alert(`Hello, ${name}!`);\n    },\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using useCopilotAdditionalInstructions hook in React\nDESCRIPTION: Demonstrates how to add custom instructions to an AI assistant using the useCopilotAdditionalInstructions hook in a React component with CopilotKit and CopilotPopup.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-ai-assistant-behavior.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotKit, useCopilotAdditionalInstructions } from \"@copilotkit/react-core\";\nimport { CopilotPopup } from \"@copilotkit/react-ui\"\n \nfunction Chat() {\n  useCopilotAdditionalInstructions({\n    instructions: \"Do not answer questions about the weather.\",\n  });\n  return <CopilotPopup />\n}\n\nexport function Home() {\n  return (\n    <CopilotKit>\n      <Chat />\n    </CopilotKit>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using the useCopilotChat Hook in React Components\nDESCRIPTION: Example of how to use the useCopilotChat hook to interact with a Copilot instance in a React component, demonstrating how to append messages to the chat.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_169\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCopilotChat } from \"@copilotkit/react-core\";\nimport { Role, TextMessage } from \"@copilotkit/runtime-client-gql\";\n\nexport function YourComponent() {\n  const { appendMessage } = useCopilotChat();\n\n  appendMessage(\n    new TextMessage({\n      content: \"Hello World\",\n      role: Role.User,\n    }),\n  );\n\n  // optionally, you can append a message without running chat completion\n  appendMessage(yourMessage, { followUp: false });\n}\n```\n\n----------------------------------------\n\nTITLE: Using useCopilotReadable Hook for Basic State Management\nDESCRIPTION: Implementation of useCopilotReadable hook for providing application state to the copilot. This basic example shows how to make a list of employees available as context for the AI assistant.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCopilotReadable } from \"@copilotkit/react-core\";\n\nexport function MyComponent() {\n  const [employees, setEmployees] = useState([]);\n\n  useCopilotReadable({\n    description: \"The list of employees\",\n    value: employees,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generative UI with useCopilotAction in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the useCopilotAction hook to implement generative UI in a car sales demo. It shows a car to the user and handles their selection or rejection, updating the global state accordingly.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useStageBuildCar() {\n  const { setSelectedCar, stage, setStage } = useGlobalState();\n\n  // ...\n\n  useCopilotAction({\n    name: \"showCar\",\n    description: \"Show a single car that you have in mind. Do not call this more than once, call `showMultipleCars` if you have multiple cars to show.\",\n    available: stage === \"buildCar\" ? \"enabled\" : \"disabled\",\n    parameters: [\\\n      // excluded for brevity, see source code link above for more detail\\\n    ],\n    renderAndWaitForResponse: ({ args, status, respond }) => {\n      const { car } = args;\n      return (\n\n        <ShowCar\n          car={(car as Car) || ({} as Car)}\n          status={status}\n          onSelect={() => {\n            setSelectedCar((car as Car) || ({} as Car));\n            respond?.(\"User has selected a car you can see it in your readables, the system will now move to the next state, do not call call nextState.\");\n            setStage(\"sellFinancing\");\n          }}\n          onReject={() => respond?.(\"User wants to select a different car, please stay in this state and help them select a different car\")}\n        />\n      );\n    },\n  }, [stage]);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Frontend Action with useCopilotAction Hook\nDESCRIPTION: Demonstrates how to create a frontend action using the useCopilotAction hook to enable AI agents to interact with the user interface.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCopilotAction } from \"@copilotkit/react-core\"\n\nexport function Page() {\n  // ...\n\n\n  useCopilotAction({\n    name: \"sayHello\",\n    description: \"Say hello to the user\",\n    available: \"remote\", // optional, makes it so the action is *only* available to the agent\n    parameters: [\\\n      {\\\n        name: \"name\",\\\n        type: \"string\",\\\n        description: \"The name of the user to say hello to\",\\\n        required: true,\\\n      },\\\n    ],\n    handler: async ({ name }) => {\n      alert(`Hello, ${name}!`);\n    },\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Tool Calls in CrewAI\nDESCRIPTION: Demonstrates how to manually emit tool calls to CopilotKit by specifying the tool name and arguments dictionary.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/CrewAI.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.crewai import copilotkit_emit_tool_call\n\nawait copilotkit_emit_tool_call(name=\"SearchTool\", args={\"steps\": 10})\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotChat Component in React\nDESCRIPTION: Example of how to implement the CopilotChat UI component in a React application with custom instructions and labels.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\nexport function YourComponent() {\n  return (\n    <CopilotChat\n      instructions={\"You are assisting the user as best as you can. Answer in the best way possible given the data you have.\"}\n      labels={{\n        title: \"Your Assistant\",\n        initial: \"Hi! 👋 How can I assist you today?\",\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotChat Component in React\nDESCRIPTION: Example of how to use the CopilotChat component from CopilotKit to create a chat interface in a React application. This component is customized with specific instructions, labels, and styling.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-3-setup-copilotkit.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { CopilotChat } from \"@copilotkit/react-ui\";\nimport { INITIAL_MESSAGE, MAIN_CHAT_INSTRUCTIONS, MAIN_CHAT_TITLE } from \"@/lib/consts\";\n\nexport default function Chat({ onSubmitMessage }: { onSubmitMessage: () => void }) {\n  return (\n      <CopilotChat\n          instructions={MAIN_CHAT_INSTRUCTIONS}\n          labels={{\n              title: MAIN_CHAT_TITLE,\n              initial: INITIAL_MESSAGE,\n          }}\n          className=\"h-full w-full font-noto\"\n          onSubmitMessage={onSubmitMessage}\n      />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up CopilotKit provider in React\nDESCRIPTION: React code snippet demonstrating how to set up the CopilotKit provider in a layout component, wrapping the entire application and configuring it with a Copilot Cloud public API key.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./globals.css\";\nimport { ReactNode } from \"react\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Use the public api key you got from Copilot Cloud  */}\n        <CopilotKit\n          publicApiKey=\"<your-copilot-cloud-public-api-key>\"\n          agent=\"sample_agent\" // the name of the agent you want to use\n        >\n          {children}\n        </CopilotKit>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Human-in-the-Loop Interaction with renderAndWaitForResponse\nDESCRIPTION: Demonstrates how to use renderAndWaitForResponse to create interactive components that wait for user input before proceeding. This enables human-in-the-loop flows where users can make choices within the chat UI.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/generative-ui.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\" // only necessary if you are using Next.js with the App Router. \nimport { useCopilotAction } from \"@copilotkit/react-core\"; \n\nuseCopilotAction({ \n  name: \"handleMeeting\",\n  description: \"Handle a meeting by booking or canceling\",\n  parameters: [\n    {\n      name: \"meeting\",\n      type: \"string\",\n      description: \"The meeting to handle\",\n      required: true,\n    },\n    {\n      name: \"date\",\n      type: \"string\",\n      description: \"The date of the meeting\",\n      required: true,\n    },\n    {\n      name: \"title\",\n      type: \"string\",\n      description: \"The title of the meeting\",\n      required: true,\n    },\n  ],\n  renderAndWaitForResponse: ({ args, respond, status }) => {\n    const { meeting, date, title } = args;\n    return (\n      <MeetingConfirmationDialog\n        meeting={meeting}\n        date={date}\n        title={title}\n        onConfirm={() => respond?.('meeting confirmed')}\n        onCancel={() => respond?.('meeting canceled')}\n      />\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up CrewAI Agent with CopilotKit\nDESCRIPTION: This code snippet demonstrates how to set up a CrewAI agent using CopilotKit. It creates a CopilotKitRemoteEndpoint with a CrewAIAgent that uses a ResearchCrew.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/human-in-the-loop/flow.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsdk = CopilotKitRemoteEndpoint(\n    agents=[\n        CrewAIAgent(\n            name=\"research_crew\",\n            description=\"Research agent\",\n            crew=ResearchCrew(),\n        ),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CopilotKit Provider in React Layout\nDESCRIPTION: React component that sets up the CopilotKit provider at the root layout level, enabling copilot functionality throughout the application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_121\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./globals.css\";\nimport { ReactNode } from \"react\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Make sure to use the URL you configured in the previous step  */}\n        <CopilotKit runtimeUrl=\"/api/copilotkit\">\n          {children}\n        </CopilotKit>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Dependencies with pnpm\nDESCRIPTION: Command to install TypeScript dependencies for the CoAgents starter project using pnpm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/quickstart/langgraph.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Using Agent State in React Component\nDESCRIPTION: Demonstrates how to use the agent state in a React component using the useCoAgent hook from @copilotkit/react-core.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/state-inputs-outputs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\n\ntype AgentState = {\n  question: string;\n  answer: string;\n}\n\nconst { state } = useCoAgent<AgentState>({\n  name: \"sample_agent\",\n  initialState: {\n    question: \"How's is the weather in SF?\",\n  }\n});\n\nconsole.log(state) // You can expect seeing \"answer\" change, while the others are not returned from the agent\n```\n\n----------------------------------------\n\nTITLE: Initializing CopilotKit Provider in React\nDESCRIPTION: Code snippet showing how to set up the CopilotKit provider in the root layout component.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-chat-with-your-data/README.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({children}: Readonly<{children: React.ReactNode}>) {\n  return (\n    <html lang=\"en\">\n      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>\n        <CopilotKit runtimeUrl=\"/api/copilotkit\">\n          {children}\n        </CopilotKit>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Front-end Tool Call Handlers\nDESCRIPTION: Sets up front-end hooks using useCopilotAction to handle tool calls and render UI components for user interaction.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-6-human-in-the-loop.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nuseCopilotAction({ \n    name: \"add_trips\",\n    description: \"Add some trips\",\n    parameters: [\n      {\n        name: \"trips\",\n        type: \"object[]\",\n        description: \"The trips to add\",\n        required: true,\n      },\n    ],\n    renderAndWait: AddTrips,\n  });\n\n  useCopilotAction({\n    name: \"update_trips\",\n    description: \"Update some trips\",\n    parameters: [\n      {\n        name: \"trips\",\n        type: \"object[]\",\n        description: \"The trips to update\",\n        required: true,\n      },\n    ],\n    renderAndWait: EditTrips,\n  });\n\n  useCopilotAction({\n    name: \"delete_trips\",\n    description: \"Delete some trips\",\n    parameters: [\n      {\n        name: \"trip_ids\",\n        type: \"string[]\",\n        description: \"The ids of the trips to delete\",\n        required: true,\n      },\n    ],\n    renderAndWait: (props) => DeleteTrips({ ...props, trips: state.trips }),\n  });\n```\n\n----------------------------------------\n\nTITLE: Serving CopilotKit SDK with FastAPI in Python\nDESCRIPTION: Demonstrates how to integrate the CopilotKit SDK with a FastAPI application using the add_fastapi_endpoint function. This creates an endpoint that can serve actions and agents to the frontend.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_86\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.integrations.fastapi import add_fastapi_endpoint\nfrom fastapi import FastAPI\n\napp = FastAPI()\nsdk = CopilotKitRemoteEndpoint(...)\nadd_fastapi_endpoint(app, sdk, \"/copilotkit\")\n\ndef main():\n    uvicorn.run(\n        \"your_package:app\",\n        host=\"0.0.0.0\",\n        port=8000,\n        reload=True,\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring CopilotRuntime with TypeScript Actions in Next.js API Route\nDESCRIPTION: This snippet demonstrates how to modify the CopilotRuntime configuration to include custom TypeScript/Node.js actions. It shows how to define an action with parameters and a handler function that can interact with backend systems.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions/typescript-backend-actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst runtime = new CopilotRuntime({\n  // ... existing configuration\n  actions: ({properties, url}) => {\n    // Note that actions returns not an array, but an array **generator**.\n    // You can use the input parameters to the actions generator to expose different backend actions to the Copilot at different times: \n    // `url` is the current URL on the frontend application.\n    // `properties` contains custom properties you can pass from the frontend application.\n    \n    return [\n      {\n        name: \"fetchNameForUserId\",\n        description: \"Fetches user name from the database for a given ID.\",\n        parameters: [\n          {\n            name: \"userId\",\n            type: \"string\",\n            description: \"The ID of the user to fetch data for.\",\n            required: true,\n          },\n        ],\n        handler: async ({userId}: {userId: string}) => {\n          // do something with the userId\n          // return the user data\n          return {\n            name: \"Darth Doe\",\n          };\n        },\n      },\n    ]\n  }\n});\n\n// ... rest of your route definition\n```\n\n----------------------------------------\n\nTITLE: Rendering Backend Actions in React Frontend\nDESCRIPTION: Example of how to render backend actions safely in the frontend using useCopilotAction hook.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-chat-with-your-data/README.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nuseCopilotAction({\n  name: \"searchInternet\",\n  available: \"disabled\",\n  description: \"Searches the internet for information.\",\n  parameters: [\n    {\n      name: \"query\",\n      type: \"string\",\n      description: \"The query to search the internet for.\",\n      required: true,\n    }\n  ],\n  render: ({args, status}) => {\n    return <SearchResults query={args.query || 'No query provided'} status={status} />;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Chat Input with Reset Functionality in TypeScript/React\nDESCRIPTION: Implementation of a custom chat input component with message sending and chat reset functionality. Includes styling and integration with CopilotKit's chat system.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/headless-ui.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"; // only necessary if you are using Next.js with the App Router.\n\nimport { InputProps, CopilotSidebar } from \"@copilotkit/react-ui\";\nimport { useCopilotChat } from \"@copilotkit/react-core\";\nimport \"@copilotkit/react-ui/styles.css\";\n\nfunction CustomInput({ inProgress, onSend, isVisible }: InputProps) {\n  const { reset } = useCopilotChat(); // Get reset function\n\n  return (\n    <div style={{ display: isVisible ? \"flex\" : \"none\", alignItems: \"center\", gap: \"10px\", padding: \"10px\", borderTop: \"1px solid #eee\" }}>\n      {/* Text Input */}\n      <input\n        disabled={inProgress}\n        type=\"text\"\n        placeholder=\"Ask your question here...\"\n        style={{\n          flex: 1,\n          padding: \"8px\",\n          borderRadius: \"4px\",\n          border: \"1px solid #ccc\",\n          outline: \"none\",\n        }}\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\") {\n            onSend(e.currentTarget.value);\n            e.currentTarget.value = \"\";\n          }\n        }}\n      />\n\n      {/* Send Button */}\n      <button\n        disabled={inProgress}\n        style={{\n          padding: \"8px 12px\",\n          border: \"none\",\n          borderRadius: \"4px\",\n          background: \"#007bff\",\n          color: \"white\",\n          cursor: \"pointer\",\n        }}\n        onClick={(e) => {\n          const input = e.currentTarget.previousElementSibling as HTMLInputElement;\n          onSend(input.value);\n          input.value = \"\";\n        }}\n      >\n        Send\n      </button>\n\n      {/* Reset Chat Button */}\n      <button\n        style={{\n          padding: \"8px 12px\",\n          border: \"none\",\n          borderRadius: \"4px\",\n          background: \"#f44336\",\n          color: \"white\",\n          cursor: \"pointer\",\n        }}\n        onClick={() => reset()}\n      >\n        Reset\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotKit Provider in Next.js Layout\nDESCRIPTION: This code snippet shows how to wrap a Next.js application with the CopilotKit provider. It imports necessary components, sets up the HTML structure, and implements the CopilotKit provider with a public API key.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/copilot-cloud-configure-copilotkit-provider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./globals.css\";\n\nimport { ReactNode } from \"react\";\nimport { CopilotKit } from \"@copilotkit/react-core\"; // [!code highlight]\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n    return (\n      <html lang=\"en\">\n        <body> \n          {/* Use the public api key you got from Copilot Cloud  */} // [!code highlight:4]\n          <CopilotKit publicApiKey=\"<your-copilot-cloud-public-api-key>\"> \n            {children}\n          </CopilotKit>\n        </body>\n      </html>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Examples in JSX/MDX\nDESCRIPTION: This snippet shows how to render the ComponentExamples component, passing the 'components' prop from the parent props object. It's used to display various CopilotKit UI components.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/agentic-chat-ui.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentExamples components={props.components} />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useCopilotReadable Hook in React\nDESCRIPTION: Demonstrates the basic implementation of useCopilotReadable hook to provide a list of employees as context to the Copilot.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotReadable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotReadable } from \"@copilotkit/react-core\";\n\nexport function MyComponent() {\n  const [employees, setEmployees] = useState([]);\n\n  useCopilotReadable({\n    description: \"The list of employees\",\n    value: employees,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Existing Thread in CopilotKit\nDESCRIPTION: This snippet demonstrates how to load an existing thread in CopilotKit by setting the threadId property on the CopilotKit component. The threadId must be a UUID when using LangGraph platform.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/persistence/loading-message-history.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\n<CopilotKit threadId=\"37aa68d0-d15b-45ae-afc1-0ba6c3e11353\">\n  <YourApp />\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Example of Copilot Instructions Format\nDESCRIPTION: Illustrates the format in which additional instructions are added to the Copilot's base instructions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotAdditionalInstructions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nYou are a helpful assistant.\nAdditionally, follow these instructions:\n- Do not answer questions about the weather.\n- Do not answer questions about the stock market.\n```\n\n----------------------------------------\n\nTITLE: Using useCoAgent Hook to Display Agent State in React\nDESCRIPTION: This snippet demonstrates how to use the useCoAgent hook from CopilotKit to retrieve and display the state of a connected agent in a React component. It shows how to initialize the hook with an agent name and initial state, and then render the agent's output.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/shared-state/in-app-agent-read.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\n\nfunction YourMainContent() {\n  const { state } = useCoAgent({\n    name: \"research_crew\",\n    initialState: {\n      inputs: {\n        topic: \"\",\n        current_year: \"2025\",\n      },\n      outputs: \"Report will appear here\",\n    },\n  });\n\n  // ...\n\n  return (\n    // style excluded for brevity\n    <div>\n      <h1>Your report:</h1>\n      <p>{state.outputs}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Demonstration in JSX/MDX\nDESCRIPTION: This code snippet embeds a video demonstration of the agentic chat UI components. It uses HTML video tag with various attributes for autoplay, loop, and controls.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/agentic-chat-ui.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<video\n  src=\"/images/coagents/agentic-chat-ui.mp4\"\n  className=\"rounded-lg shadow-xl\"\n  loop\n  playsInline\n  controls\n  autoPlay\n  muted\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Input/Output Schema in TypeScript\nDESCRIPTION: Creates InputAnnotation, OutputAnnotation, and AgentStateAnnotation, and implements an answerNode function using these annotations in TypeScript.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/state-inputs-outputs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Annotation } from \"@langchain/langgraph\";\nimport { CopilotKitStateAnnotation } from \"@copilotkit/sdk-js/langgraph\";\n\n// Divide the state to 3 parts\n\n// An input schema for inputs you are willing to accept from the frontend\nconst InputAnnotation = Annotation.Root({\n  ...CopilotKitStateAnnotation.spec,\n  question: Annotation<string>,\n});\n\n// Output schema for output you are willing to pass to the frontend\nconst OutputAnnotation = Annotation.Root({\n  ...CopilotKitStateAnnotation.spec,\n  answer: Annotation<string>,\n});\n\n// The full schema, including the inputs, outputs and internal state (\"resources\" in our case)\nexport const AgentStateAnnotation = Annotation.Root({\n  ...CopilotKitStateAnnotation.spec,\n  ...OutputAnnotation.spec,\n  ...InputAnnotation.spec,\n  resources: Annotation<string[]>,\n});\n\n// Define a typed state that supports the entire\nexport type AgentState = typeof AgentStateAnnotation.State;\n\nasync function answerNode(state: AgentState, config: RunnableConfig) {\n  const model = new ChatOpenAI()\n\n  const systemMessage = new SystemMessage({\n    content: `You are a helpful assistant. Answer the question: ${state.question}.`,\n  });\n\n  const response = await modelWithTools.invoke(\n    [systemMessage, ...state.messages],\n    config\n  );\n\n  // ...add the rest of the agent implementation\n  // extract the answer, which will be assigned to the state soon\n  const answer = response.content\n\n  return {\n    messages: response,\n    // include the answer in the returned state\n    answer,\n  }\n}\n\n// finally, before compiling the graph, we define the 3 state components\nconst workflow = new StateGraph({\n  input: InputAnnotation,\n  output: OutputAnnotation,\n  // @ts-expect-error -- LangGraph does not expect a \"full schema with internal properties\".\n  stateSchema: AgentStateAnnotation,\n})\n  .addNode(\"answer_node\", answerNode) // add all the different nodes and edges and compile the graph\n  .addEdge(START, \"answer_node\")\n  .addEdge(\"answer_node\", END)\nexport const graph = workflow.compile()\n```\n\n----------------------------------------\n\nTITLE: Properties Returned by useCopilotChat Hook\nDESCRIPTION: A code example showing the object structure returned by the useCopilotChat hook, including methods for managing messages and checking the loading state of the chat.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_170\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  visibleMessages, // An array of messages that are currently visible in the chat.\n  appendMessage, // A function to append a message to the chat.\n  setMessages, // A function to set the messages in the chat.\n  deleteMessage, // A function to delete a message from the chat.\n  reloadMessages, // A function to reload the messages from the API.\n  stopGeneration, // A function to stop the generation of the next message.\n  reset, // A function to reset the chat.\n  isLoading, // A boolean indicating if the chat is loading.\n} = useCopilotChat();\n```\n\n----------------------------------------\n\nTITLE: Simulating State Updates in Python LangGraph Agent\nDESCRIPTION: This code snippet shows how to simulate state updates in a Python LangGraph agent, including initializing searches and updating their status over time.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/generative-ui/agentic.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom typing import TypedDict\nfrom langchain_core.runnables import RunnableConfig\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.messages import SystemMessage\nfrom copilotkit import CopilotKitState\nfrom copilotkit.langgraph import copilotkit_emit_state\n\nclass Searches(TypedDict):\n    query: str\n    done: bool\n\nclass AgentState(CopilotKitState):\n    searches: list[Searches] = []\n\nasync def chat_node(state: AgentState, config: RunnableConfig):\n    state[\"searches\"] = [\n        {\"query\": \"Initial research\", \"done\": False},\n        {\"query\": \"Retrieving sources\", \"done\": False},\n        {\"query\": \"Forming an answer\", \"done\": False},\n    ]\n    await copilotkit_emit_state(config, state)\n\n    # Simulate state updates\n    for search in state[\"searches\"]:\n        await asyncio.sleep(1)\n        search[\"done\"] = True\n        await copilotkit_emit_state(config, state)\n\n    # Run the model to generate a response\n    response = await ChatOpenAI(model=\"gpt-4o\").ainvoke([\n        SystemMessage(content=\"You are a helpful assistant.\"),\n        *state[\"messages\"],\n    ], config)\n```\n\n----------------------------------------\n\nTITLE: Implementing Copilot Runtime Endpoint in Next.js App Router\nDESCRIPTION: This snippet demonstrates how to create a route to handle the /api/copilotkit endpoint using Next.js App Router. It sets up a CopilotRuntime instance with a langGraphPlatformEndpoint and uses copilotRuntimeNextJSAppRouterEndpoint to handle requests.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-langgraph-endpoint.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  CopilotRuntime,\n  OpenAIAdapter,\n  copilotRuntimeNextJSAppRouterEndpoint,\n  langGraphPlatformEndpoint\n} from \"@copilotkit/runtime\";\nimport OpenAI from \"openai\";\nimport { NextRequest } from \"next/server\";\n\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\nconst serviceAdapter = new OpenAIAdapter({ openai } as any);\n\nconst runtime = new CopilotRuntime({\n  remoteEndpoints: [\n    langGraphPlatformEndpoint({\n      deploymentUrl: \"your-api-url\", // make sure to replace with your real deployment url,\n      langsmithApiKey: process.env.LANGSMITH_API_KEY, // only used in LangGraph Platform deployments\n      agents: [ // List any agents available under \"graphs\" list in your langgraph.json file; give each a description explaining when it should be called.\n        {\n          name: 'my_agent', \n          description: 'A helpful LLM agent.',\n          assistantId: 'your-assistant-ID' // optional, but recommended!\n        }\n      ]\n    }),\n  ],\n});\n\nexport const POST = async (req: NextRequest) => {\n  const { handleRequest } = copilotRuntimeNextJSAppRouterEndpoint({\n    runtime,\n    serviceAdapter,\n    endpoint: \"/api/copilotkit\",\n  });\n\n  return handleRequest(req);\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamically Configuring Agents in CopilotKit Backend\nDESCRIPTION: Python code demonstrating how to dynamically configure agents based on frontend properties in the CopilotKit backend.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_164\n\nLANGUAGE: python\nCODE:\n```\ndef build_agents(context):\n    return [\n        LangGraphAgent(\n            name=\"some_agent\",\n            description=\"This agent does something\",\n            graph=graph,\n            langgraph_config={\n                \"some_property\": context[\"properties\"][\"someProperty\"]\n            }\n        )\n    ]\n\n\napp = FastAPI()\nsdk = CopilotKitRemoteEndpoint(\n    agents=build_agents,\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Tool Calls with useCopilotAction in React\nDESCRIPTION: Implements a custom UI component using the useCopilotAction hook to render the agent's weather tool calls. The component shows different states based on whether the API call is in progress or complete.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/generative-ui/tool-based.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotAction } from \"@copilotkit/react-core\";\n// ...\n\nconst YourMainContent = () => {\n  // ...\n  useCopilotAction({\n    name: \"get_weather\",\n    available: \"disabled\", // Don't allow the agent or UI to call this tool as its only for rendering\n    render: ({status, args}) => {\n      return (\n        <p className=\"text-gray-500 mt-2\">\n          {status !== \"complete\" && \"Calling weather API...\"}\n          {status === \"complete\" && `Called the weather API for ${args.location}.`}\n        </p>\n      );\n    },\n  });\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CopilotRuntime Instance\nDESCRIPTION: Basic example of importing and instantiating the CopilotRuntime class.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/CopilotRuntime.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotRuntime } from \"@copilotkit/runtime\";\n\nconst copilotKit = new CopilotRuntime();\n```\n\n----------------------------------------\n\nTITLE: Rendering CrewAI Tool Calls with useCopilotAction in React\nDESCRIPTION: This code demonstrates how to use the useCopilotAction hook to render tool calls from a CrewAI crew in a React frontend. It shows how to match the tool name with the crew name and render the tool's arguments and status in a custom UI component.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_155\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCopilotAction } from \"@copilotkit/react-core\";\n// ...\n\nconst YourMainContent = () => {\n  // ...\n\n  useCopilotAction({\n    name: \"research_crew\",\n    parameters: [\\\n      {\\\n        name: \"topic\",\\\n      },\\\n      {\\\n        name: \"current_year\",\\\n      },\\\n    ],\n    render({ args, status }) {\n      return (\n        <div className=\"m-4 p-4 bg-gray-100 rounded shadow\">\n          <h1 className=\"text-center text-sm\">\n            Researching {args.topic} in {args.current_year}{\" \"}\n            {status == \"complete\" ? \"✅\" : \"⏳\"}\n          </h1>\n        </div>\n      );\n    },\n  });\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useCopilotAdditionalInstructions Hook in React\nDESCRIPTION: Demonstrates the simplest way to use the useCopilotAdditionalInstructions hook to provide additional instructions to the Copilot agent.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotAdditionalInstructions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotAdditionalInstructions } from \"@copilotkit/react-core\";\n\nexport function MyComponent() {\n  useCopilotAdditionalInstructions({\n    instructions: \"Do not answer questions about the weather.\",\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Interrupt Handling in Custom Chat UI (TSX)\nDESCRIPTION: Illustrates the use of the 'useLangGraphInterrupt' React hook from '@copilotkit/react-core' to register multiple conditional interrupt handlers in parallel within a React component. The code passively listens for interrupt events, rendering 'AskComponent' or 'ApproveComponent' UI elements only when the event type matches (e.g., 'ask' or 'approval'), and leverages the 'enabled' property for fine-grained control. Key dependencies: React, '@copilotkit/react-core'. Inputs include event metadata, and output is side effects via user UI interaction.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLangGraphInterrupt } from \"@copilotkit/react-core\"; // [!code highlight]\n// ...\n\nconst ApproveComponent = ({ content, onAnswer }: { content: string; onAnswer: (approved: boolean) => void }) => (\n    // styles omitted for brevity\n    <div>\n        <h1>Do you approve?</h1>\n        <button onClick={() => onAnswer(true)}>Approve</button>\n        <button onClick={() => onAnswer(false)}>Reject</button>\n    </div>\n)\n\nconst AskComponent = ({ question, onAnswer }: { question: string; onAnswer: (answer: string) => void }) => (\n// styles omitted for brevity\n    <div>\n        <p>{question}</p>\n        <form onSubmit={(e) => {\n            e.preventDefault();\n            onAnswer((e.target as HTMLFormElement).response.value);\n        }}>\n            <input type=\"text\" name=\"response\" placeholder=\"Enter your response\" />\n            <button type=\"submit\">Submit</button>\n        </form>\n    </div>\n)\n\nconst YourMainContent = () => {\n    // ...\n    // [!code highlight:14]\n    useLangGraphInterrupt({\n        enabled: ({ eventValue }) => eventValue.type === 'ask',\n        render: ({ event, resolve }) => (\n            <AskComponent question={event.value.content} onAnswer={answer => resolve(answer)} />\n        )\n    });\n\n    useLangGraphInterrupt({\n        enabled: ({ eventValue }) => eventValue.type === 'approval',\n        render: ({ event, resolve }) => (\n            <ApproveComponent content={event.value.content} onAnswer={answer => resolve(answer)} />\n        )\n    });\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useCoAgent Hook for State Management\nDESCRIPTION: Integration of useCoAgent hook to create bidirectional state connection between LangGraph agent and React application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-4-integrate-the-agent.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst { state, setState } = useCoAgent<AgentState>({\n    name: \"travel\",\n    initialState: {\n      trips: defaultTrips,\n      selected_trip_id: defaultTrips[0].id,\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useCopilotChatSuggestions Hook\nDESCRIPTION: Simple example showing how to use the useCopilotChatSuggestions hook with employee data state.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotChatSuggestions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotChatSuggestions } from \"@copilotkit/react-ui\";\n\nexport function MyComponent() {\n  const [employees, setEmployees] = useState([]);\n\n  useCopilotChatSuggestions({\n    instructions: `The following employees are on duty: ${JSON.stringify(employees)}`,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State in TypeScript\nDESCRIPTION: Creates AgentStateAnnotation and AgentState type in TypeScript using Annotation from LangGraph and CopilotKitStateAnnotation.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/in-app-agent-write.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Annotation } from \"@langchain/langgraph\";\nimport { CopilotKitStateAnnotation } from \"@copilotkit/sdk-js/langgraph\";\n\nexport const AgentStateAnnotation = Annotation.Root({\n    language: Annotation<\"english\" | \"spanish\">,\n    ...CopilotKitStateAnnotation.spec,\n});\nexport type AgentState = typeof AgentStateAnnotation.State;\n```\n\n----------------------------------------\n\nTITLE: Rendering Tool Call UI in React with CopilotKit\nDESCRIPTION: This snippet demonstrates how to use the useCopilotAction hook from CopilotKit to render a custom UI component for the 'get_weather' tool call. It displays different messages based on the call status and includes the location argument.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/generative-ui/tool-based.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotAction } from \"@copilotkit/react-core\";\n\nconst YourMainContent = () => {\n  useCopilotAction({\n    name: \"get_weather\",\n    available: \"disabled\", // Don't allow the agent or UI to call this tool as its only for rendering\n    render: ({ status, args }) => {\n      return (\n        <p className=\"text-gray-500 mt-2\">\n          {status !== \"complete\" && \"Calling weather API...\"}\n          {status === \"complete\" &&\n            `Called the weather API for ${args.location}.`}\n        </p>\n      );\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring LangServe in CopilotRuntime\nDESCRIPTION: This snippet demonstrates how to configure LangServe in CopilotRuntime. It shows how to connect to an existing LangChain chain hosted as a separate service, allowing integration of chains written in Python or JavaScript.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions_old.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst runtime = new CopilotRuntime({\n  langserve: [\n    {\n      chainUrl: \"http://my-langserve.chain\",\n      name: \"performResearch\",\n      description: \"Performs research on a given topic.\",\n    },\n  ],\n});\n\n// ... define the route using the CopilotRuntime.\n```\n\n----------------------------------------\n\nTITLE: Implementing LangGraph Agent with CopilotKit Integration\nDESCRIPTION: Python implementation of a LangGraph agent with CopilotKit integration, including state management, chat nodes, and user feedback handling.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_173\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import Literal\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.messages import SystemMessage, AIMessage\nfrom langchain_core.runnables import RunnableConfig\nfrom langgraph.graph import StateGraph, END\nfrom langgraph.checkpoint.memory import MemorySaver\nfrom langgraph.types import Command\nfrom copilotkit import CopilotKitState\n\n# 1. Define our agent's state and inherit from CopilotKitState, this brings in the CopilotKit actions\nclass AgentState(CopilotKitState):\n    # 1.1 Define any other state variables\n    pass\n\n# 2. Define the chat node, this will be where the agent will talk to user and\n#    decide if it needs to call the writeEssay tool\nasync def chat_node(state: AgentState, config: RunnableConfig) -> Command[Literal[\"user_feedback_node\", \"__end__\"]]:\n    # 2.1 Define the model and bind CopilotKit's actions as tools\n    model = ChatOpenAI(model=\"gpt-4o\")\n    model_with_tools = model.bind_tools([*state.get(\"copilotkit\", {}).get(\"actions\", [])])\n\n    # 2.2 Define the system message\n    system_message = SystemMessage(\n        content=\"You write essays. Use your tools to write an essay, don't just write it in plain text.\"\n    )\n\n    # 2.3 Run the model to generate a response\n    response = await model_with_tools.ainvoke([\\\n        system_message,\\\n        *state[\"messages\"],\\\n    ], config)\n\n\n    # 2.4 Check for the writeEssay tool call and, if found, go  to the\n    #     user_feedback_node to handle the user's response\n    if isinstance(response, AIMessage) and response.tool_calls:\n        if response.tool_calls[0].get(\"name\") == \"writeEssay\":\n            return Command(goto=\"interrupt_node\", update={\"messages\": response})\n\n    # 2.5 If no tool call is found, end the agent\n    return Command(goto=END, update={\"messages\": response})\n\n# 3. Define an empty interrupt node to act as buffer as we use the interrupt_after property\ndef interrupt_node(state: AgentState, config: RunnableConfig):\n  pass\n\n# 4. Define the user_feedback_node, this node will be interrupted before execution\n#    where CopilotKit's renderAndWaitForResponse provide the user's response.\ndef user_feedback_node(state: AgentState, config: RunnableConfig) -> Command[Literal[\"chat_node\"]]:\n\n    # 3.1 Get the last message from the state, this will be\n    #     what is returned by respond() in the frontend\n    last_message = state[\"messages\"][-1]\n\n    # 3.2 If the user declined the essay, ask them how they'd like to improve it\n    if last_message.content != \"SEND\":\n        return Command(goto=\"chat_node\", update={\n            \"messages\": [SystemMessage(content=\"The user declined they essay, please ask them how they'd like to improve it\")]\n        })\n\n    # 3.3 If the user approved the essay, ask them if they'd like anything else\n    return Command(goto=\"chat_node\", update={\n        \"messages\": [SystemMessage(content=\"The user approved the essay, ask them if they'd like anything else\")]\n    })\n\n# 5. Configure the workflow\nworkflow = StateGraph(AgentState)\nworkflow.add_node(\"chat_node\", chat_node)\nworkflow.add_node(\"interrupt_node\", interrupt_node)\nworkflow.add_node(\"user_feedback_node\", user_feedback_node)\nworkflow.add_edge(\"interrupt_node\", \"user_feedback_node\")\nworkflow.set_entry_point(\"chat_node\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CopilotKit with ThreadId\nDESCRIPTION: Demonstrates how to set up CopilotKit with a UUID threadId to restore thread state. When using LangGraph platform, the threadId must be a UUID format.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/persistence/loading-agent-state.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<CopilotKit threadId=\"2140b272-7180-410d-9526-f66210918b13\">\n  <YourApp />\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Implementing Copilot Runtime Endpoint in NestJS\nDESCRIPTION: This snippet shows how to set up a controller in NestJS to handle the Copilot Runtime endpoint. It uses the CopilotRuntime class and copilotRuntimeNestEndpoint function from @copilotkit/runtime to handle requests at the '/copilotkit' endpoint.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-starter.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { All, Controller, Req, Res } from '@nestjs/common';\nimport { \n  CopilotRuntime, \n  copilotRuntimeNestEndpoint, \n  ExperimentalEmptyAdapter,\n} from '@copilotkit/runtime';\nimport { Request, Response } from 'express';\n\n\n@Controller()\nexport class CopilotkitController {\n  @All('/copilotkit')\n  copilotkit(@Req() req: Request, @Res() res: Response) {\n    const serviceAdapter = new ExperimentalEmptyAdapter();\n    \n    const runtime = new CopilotRuntime({\n      remoteEndpoints: [\n        // added in next step...\n      ],\n    });\n\n    const handler = copilotRuntimeNestEndpoint({\n      runtime,\n      serviceAdapter,\n      endpoint: '/copilotkit',\n    });\n    return handler(req, res);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Frontend Action in React with CopilotKit\nDESCRIPTION: Demonstrates how to create a frontend action using the useCopilotAction hook to implement a simple hello greeting functionality. The action includes parameter definition and handler implementation.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/frontend-actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotAction } from \"@copilotkit/react-core\"\n\nexport function Page() {\n  // ...\n\n  useCopilotAction({\n    name: \"sayHello\",\n    description: \"Say hello to the user\",\n    available: \"remote\", // optional, makes it so the action is *only* available to the agent\n    parameters: [\n      {\n        name: \"name\",\n        type: \"string\",\n        description: \"The name of the user to say hello to\",\n        required: true,\n      },\n    ],\n    handler: async ({ name }) => {\n      alert(`Hello, ${name}!`);\n    },\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using CoAgent Hook for State Management\nDESCRIPTION: Implementation of state management using the useCoAgent hook in a React component.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_177\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\n\ntype AgentState = {\n  language: \"english\" | \"spanish\";\n}\n\nfunction YourMainContent() {\n  const { state, setState } = useCoAgent<AgentState>({\n    name: \"sample_agent\",\n    initialState: { language: \"spanish\" }  // optionally provide an initial state\n  });\n\n  const toggleLanguage = () => {\n    setState({ language: state.language === \"english\" ? \"spanish\" : \"english\" });\n  };\n\n  return (\n    <div>\n      <h1>Your main content</h1>\n      <p>Language: {state.language}</p>\n      <button onClick={toggleLanguage}>Toggle Language</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Intermediate State Updates in Python\nDESCRIPTION: Demonstrates how to manually emit intermediate state updates during a long-running task, with a simulation of steps that include delays between updates.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_148\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_emit_state\n# ...\nasync def chat_node(state: AgentState, config: RunnableConfig) -> Command[Literal[\"cpk_action_node\", \"tool_node\", \"__end__\"]]:\n    # ...\n\n    # Simulate executing steps one by one\n    steps = [\\\n        \"Analyzing input data...\",\\\n        \"Identifying key patterns...\",\\\n        \"Generating recommendations...\",\\\n        \"Formatting final output...\"\\\n    ]\n\n    for step in steps:\n        self.state[\"observed_steps\"] = self.state.get(\"observed_steps\", []) + [step]\n        await copilotkit_emit_state(config, state)\n        await asyncio.sleep(1)\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Installs all required dependencies for the todo list app using npm. This ensures all necessary packages are available before running the project.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-todo-app/step-1-checkout-repo.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Using useCopilotChat Hook in React Component\nDESCRIPTION: Demonstrates how to import and use the useCopilotChat hook in a React component. It shows appending a message to the chat and optionally appending without running chat completion.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotChat.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotChat } from \"@copilotkit/react-core\";\nimport { Role, TextMessage } from \"@copilotkit/runtime-client-gql\";\n\nexport function YourComponent() {\n  const { appendMessage } = useCopilotChat();\n\n  appendMessage(\n    new TextMessage({\n      content: \"Hello World\",\n      role: Role.User,\n    }),\n  );\n\n  // optionally, you can append a message without running chat completion\n  appendMessage(yourMessage, { followUp: false });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CopilotRuntime with TypeScript Backend Actions\nDESCRIPTION: This snippet demonstrates how to initialize a CopilotRuntime with custom backend actions in TypeScript. It includes a sample action to fetch a user's name based on their ID, showcasing how to define action parameters and handle the action execution.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions_old.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst runtime = new CopilotRuntime({\n  actions: ({properties, url}) => {\n    // You can use the input parameters to the actions generator to expose different backend actions to the Copilot at different times: \n    // `url` is the current URL on the frontend application.\n    // `properties` contains custom properties you can pass from the frontend application.\n    \n    return [\n      {\n        name: \"fetchNameForUserId\",\n        description: \"Fetches user name from the database for a given ID.\",\n        parameters: [\n          {\n            name: \"userId\",\n            type: \"string\",\n            description: \"The ID of the user to fetch data for.\",\n            required: true,\n          },\n        ],\n        handler: async ({userId}: {userId: string}) => {\n          // do something with the userId\n          // return the user data\n          return {\n            name: \"Darth Doe\",\n          };\n        },\n      },\n    ]\n  }\n});\n\n// ... define the route using the CopilotRuntime.\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of CopilotPopup Component in React\nDESCRIPTION: Example of how to import and use the CopilotPopup component in a React application, including setting custom labels for the title and initial message.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/chat/CopilotPopup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotPopup } from \"@copilotkit/react-ui\";\nimport \"@copilotkit/react-ui/styles.css\";\n\n<CopilotPopup\n  labels={{\n    title: \"Your Assistant\",\n    initial: \"Hi! 👋 How can I assist you today?\",\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing ActionButtons Component for User Decisions in React TSX\nDESCRIPTION: This component renders approve and reject buttons for user interaction. It handles user decisions by calling the provided handler function with 'SEND' or 'CANCEL' based on the user's choice.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-6-human-in-the-loop.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\nimport { RenderFunctionStatus } from \"@copilotkit/react-core\";\nimport { Button } from \"../ui/button\";\n\nexport type ActionButtonsProps = {\n    status: RenderFunctionStatus;\n    handler: any;\n    approve: React.ReactNode;\n    reject: React.ReactNode;\n}\n\nexport const ActionButtons = ({ status, handler, approve, reject }: ActionButtonsProps) => (\n  <div className=\"flex gap-4 justify-between\">\n    <Button \n      className=\"w-full\"\n      variant=\"outline\"\n      disabled={status === \"complete\" || status === \"inProgress\"} \n      onClick={() => handler?.(\"CANCEL\")} \n    >\n      {reject}\n    </Button>\n    <Button \n      className=\"w-full\"\n      disabled={status === \"complete\" || status === \"inProgress\"} \n      onClick={() => handler?.(\"SEND\")} \n    >\n      {approve}\n    </Button>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Backend Authentication Handling for CopilotKit\nDESCRIPTION: This snippet demonstrates how to handle authentication in a backend endpoint when using CopilotKit. It shows how to access and verify authentication headers that are automatically propagated from the frontend through CopilotKit Cloud.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/authenticated-actions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Example backend endpoint\nasync function handleCalendarRequest(req, res) {\n  // Auth headers from the frontend are automatically available\n  const authHeader = req.headers.authorization;\n  const userId = req.headers[\"x-user-id\"];\n\n  // Verify authentication as you normally would\n  if (!isValidAuth(authHeader)) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n\n  // Proceed with authenticated operation\n  const calendar = await getCalendarForUser(userId);\n  return res.json(calendar);\n}\n```\n\n----------------------------------------\n\nTITLE: Backend Calendar Request Handler with Authentication\nDESCRIPTION: Shows implementation of a backend endpoint that handles calendar requests with authentication. Demonstrates how to access and validate auth headers that are automatically propagated from the frontend.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_166\n\nLANGUAGE: javascript\nCODE:\n```\n// Example backend endpoint\nasync function handleCalendarRequest(req, res) {\n  // Auth headers from the frontend are automatically available\n  const authHeader = req.headers.authorization;\n  const userId = req.headers[\"x-user-id\"];\n\n  // Verify authentication as you normally would\n  if (!isValidAuth(authHeader)) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n\n  // Proceed with authenticated operation\n  const calendar = await getCalendarForUser(userId);\n  return res.json(calendar);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Usage of useCopilotAdditionalInstructions Hook in React\nDESCRIPTION: Shows how to conditionally add instructions to the Copilot agent based on the application state using the useCopilotAdditionalInstructions hook.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotAdditionalInstructions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotAdditionalInstructions } from \"@copilotkit/react-core\";\n\nexport function MyComponent() {\n  const [showInstructions, setShowInstructions] = useState(false);\n\n  useCopilotAdditionalInstructions({\n    available: showInstructions ? \"enabled\" : \"disabled\",\n    instructions: \"Do not answer questions about the weather.\",\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Stage-Specific Instructions with useCopilotAdditionalInstructions in TypeScript\nDESCRIPTION: This code snippet demonstrates how to add stage-specific instructions for an AI agent using the useCopilotAdditionalInstructions hook. It guides the AI to call a specific tool when entering the payment info stage.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useStageGetPaymentInfo() {\n  const { setCardInfo, stage, setStage } = useGlobalState();\n\n  // Conditionally add additional instructions for the agent's prompt.\n  useCopilotAdditionalInstructions({\n    available: stage === \"getPaymentInfo\" ? \"enabled\" : \"disabled\",\n\n    instructions: `\n        CURRENT STATE: You are now getting the payment information of the user.\n        Say, 'Great! Now I need to get your payment information.' and MAKE SURE\n        to then call the 'getPaymentInformation' action.\n    `,\n  }, [stage]);\n\n  // ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Interrupts in React Frontend\nDESCRIPTION: This TypeScript/JSX code snippet demonstrates how to handle interrupts in the frontend using the useLangGraphInterrupt hook from CopilotKit. It renders a form for user input when an interrupt occurs.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_186\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLangGraphInterrupt } from \"@copilotkit/react-core\";\n// ...\n\nconst YourMainContent = () => {\n// ...\n\n// styles omitted for brevity\nuseLangGraphInterrupt({\n    render: ({ event, resolve }) => (\n        <div>\n            <p>{event.value}</p>\n            <form onSubmit={(e) => {\n                e.preventDefault();\n                resolve((e.target as HTMLFormElement).response.value);\n            }}>\n                <input type=\"text\" name=\"response\" placeholder=\"Enter your response\" />\n                <button type=\"submit\">Submit</button>\n            </form>\n        </div>\n    )\n});\n// ...\n\nreturn <div>{/* ... */}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit Dependencies with NPM\nDESCRIPTION: Command to install the core CopilotKit React libraries needed for implementing AI capabilities in a web application. This installs both the core functionality and UI components.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-todo-app/step-2-setup-copilotkit.mdx#2025-04-23_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install @copilotkit/react-core @copilotkit/react-ui\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotChat Component in React\nDESCRIPTION: Demonstrates the usage of the flexible CopilotChat component that can be placed anywhere in the application with customizable size.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/component-examples.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\nexport function YourComponent() {\n  return (\n    <CopilotChat\n      instructions={\"You are assisting the user as best as you can. Answer in the best way possible given the data you have.\"}\n      labels={{\n        title: \"Your Assistant\",\n        initial: \"Hi! 👋 How can I assist you today?\",\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up CopilotKit Runtime in Node.js Express\nDESCRIPTION: TypeScript code for creating an Express.js app and setting up the CopilotKit Runtime handler.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-create-endpoint.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express';\nimport {\n  CopilotRuntime,\n  {{adapterImport}},\n  copilotRuntimeNodeHttpEndpoint,\n} from '@copilotkit/runtime';\n{{extraImports}}\n\nconst app = express();\n{{clientSetup}}\n{{adapterSetup}}\n\napp.use('/copilotkit', (req, res, next) => {\n  (async () => {\n    const runtime = new CopilotRuntime();\n    const handler = copilotRuntimeNodeHttpEndpoint({\n      endpoint: '/copilotkit',\n      runtime,\n      serviceAdapter,\n    });\n\n    return handler(req, res);\n  })().catch(next);\n});\n\napp.listen(4000, () => {\n  console.log('Listening at http://localhost:4000/copilotkit');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring useCoAgentStateRender Hook in React JSX\nDESCRIPTION: This code configures the useCoAgentStateRender hook to display the current state and status of a crew agent using a CrewStateRenderer component. It connects the crew's state management with the UI rendering system.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/crew-quickstart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nuseCoAgentStateRender({\n    name: crewName,\n    render: ({ state, status }) => (\n      <CrewStateRenderer state={state} status={status} />\n    ),\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring CopilotKit Provider in React Component\nDESCRIPTION: Example of how to set up the CopilotKit provider in a React component. This code imports necessary components, wraps the main content with the CopilotKit provider, and includes the required CSS styles.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-powered-textarea/step-2-setup-copilotkit.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { EmailThread } from \"@/components/EmailThread\";\nimport { EmailsProvider } from \"@/lib/hooks/use-emails\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\nimport \"@copilotkit/react-textarea/styles.css\";\n\nexport default function Home() {\n  return (\n    <CopilotKit runtimeUrl=\"/api/copilotkit\">\n      <EmailsProvider>\n        <EmailThread />\n      </EmailsProvider>\n    </CopilotKit>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: LLM-Driven Stage Transitions for Financing Options in CopilotKit\nDESCRIPTION: This snippet illustrates LLM-driven stage transitions where the AI decides which next stage to transition to based on user input. It provides multiple possible paths (financing or no financing) that the LLM can choose between using separate CopilotAction handlers.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction useStageSellFinancing() {\n  const { stage, setStage } = useGlobalState();\n  const isActive = stage === \"sellFinancing\";\n\n  // Provide context to the AI\n  useCopilotReadable({\n    description: \"Financing Information\",\n    value: \"Current promotion: 0% financing for 60 months...\",\n    available: isActive ? \"enabled\" : \"disabled\"\n  });\n\n  // Different paths based on financing choice by user, LLM will decide which path to take\n\n  useCopilotAction({\n    name: \"selectFinancing\",\n    description: \"Select the financing option\",\n    available: stage === \"sellFinancing\" ? \"enabled\" : \"disabled\",\n    handler: () => setStage(\"getFinancingInfo\"),\n  }, [stage]);\n\n  useCopilotAction({\n    name: \"selectNoFinancing\",\n    description: \"Select the no financing option\",\n    available: stage === \"sellFinancing\" ? \"enabled\" : \"disabled\",\n    handler: () => setStage(\"getPaymentInfo\"),\n  }, [stage]);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Copilot Runtime Endpoint in Node.js Express\nDESCRIPTION: This snippet demonstrates how to set up a Copilot Runtime handler in an Express.js app. It creates a CopilotRuntime instance with a langGraphPlatformEndpoint and uses copilotRuntimeNodeHttpEndpoint to handle requests on the /copilotkit route.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-langgraph-endpoint.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express';\nimport {\n  CopilotRuntime,\n  OpenAIAdapter,\n  copilotRuntimeNodeHttpEndpoint,\n  langGraphPlatformEndpoint\n} from '@copilotkit/runtime';\nimport OpenAI from \"openai\";\n\nconst app = express();\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\nconst serviceAdapter = new OpenAIAdapter({ openai } as any);\n\napp.use('/copilotkit', (req, res, next) => {\n  const runtime = new CopilotRuntime({\n    remoteEndpoints: [\n      langGraphPlatformEndpoint({\n        deploymentUrl: \"your-api-url\", // make sure to replace with your real deployment url\n        langsmithApiKey: process.env.LANGSMITH_API_KEY, // only used in LangGraph Platform deployments\n        agents: [ // List any agents available under \"graphs\" list in your langgraph.json file; give each a description explaining when it should be called.\n          {\n            name: 'my_agent',\n            description: 'A helpful LLM agent.',\n            assistantId: 'your-assistant-ID' // optional, but recommended!\n          }\n        ]\n      }),\n    ],\n  });\n\n  const handler = copilotRuntimeNodeHttpEndpoint({\n    endpoint: '/copilotkit',\n    runtime,\n    serviceAdapter,\n  });\n\n  return handler(req, res, next);\n});\n\napp.listen(4000, () => {\n  console.log('Listening at http://localhost:4000/copilotkit');\n});\n```\n\n----------------------------------------\n\nTITLE: Using useCoAgent Hook in React\nDESCRIPTION: This TypeScript snippet demonstrates how to use the useCoAgent hook to manage agent state in a React component. It includes state initialization, reading, and updating.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/shared-state/in-app-agent-write.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\n\n// Define the agent state type, should match the actual state of your agent\ntype AgentState = {\n  language: \"english\" | \"spanish\";\n}\n\n// Example usage in a pseudo React component\nfunction YourMainContent() {\n  const { state, setState } = useCoAgent<AgentState>({\n    name: \"sample_agent\",\n    initialState: { language: \"spanish\" }  // optionally provide an initial state\n  });\n\n  // ...\n\n  const toggleLanguage = () => {\n    setState({ language: state.language === \"english\" ? \"spanish\" : \"english\" });\n  };\n\n  // ...\n\n  return (\n    // style excluded for brevity\n    <div>\n      <h1>Your main content</h1>\n      <p>Language: {state.language}</p>\n      <button onClick={toggleLanguage}>Toggle Language</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting Streamed Messages in CopilotKit LangGraph Agent (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows how to persist streamed messages in a CopilotKit LangGraph agent. It demonstrates calling the model with a modified config and returning the new messages to ensure they are persisted at the end of the node.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/troubleshooting/common-issues.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { copilotkitCustomizeConfig } from '@copilotkit/sdk-js/langgraph';\n\nasync function chatNode(state: AgentState, config: RunnableConfig): Promise<AgentState> {\n    // 1) Call the model with CopilotKit's modified config\n    const model = new ChatOpenAI({ temperature: 0, model: \"gpt-4o\" });\n    const response = await model.invoke(state.messages, modifiedConfig);\n\n    // 2) Make sure to return the new messages\n    return {\n        messages: response,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Research ANA Page Layout with React Components\nDESCRIPTION: Next.js/React layout component that renders the Research ANA tutorial page with video, GitHub link, and live demo buttons. Uses various React components and icons for UI elements.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { YouTubeVideo } from \"@/components/react/youtube-video\";\nimport { FaGithub } from \"react-icons/fa\";\nimport { PiMonitor } from \"react-icons/pi\";\nimport { Button } from \"@/components/ui/button\";\nimport Link from \"next/link\";\n\n<div>\n  <div>**Time to complete:** 15 minutes</div>\n  <div>**Difficulty:** Medium</div>\n</div>\n\n<video src=\"/images/coagents/tutorials/research-ana/final-results.mp4\" className=\"rounded-lg shadow-xl\" loop playsInline controls autoPlay muted />\n\n<div className=\"flex flex-row gap-2\">\n  <Button size=\"lg\" asChild className=\"flex gap-2 items-center\">\n    <Link href=\"https://github.com/CopilotKit/open-research-ANA\" className=\"no-underline\" target=\"_blank\">\n      <FaGithub className=\"w-6 h-6 mr-2\" />\n      <span>View on GitHub</span>\n    </Link>\n  </Button>\n\n  <Button size=\"lg\" asChild className=\"flex gap-2 items-center\">\n    <Link href=\"https://open-research-ana.vercel.app/\" className=\"no-underline\" target=\"_blank\">\n      <PiMonitor className=\"w-6 h-6 mr-2\" />\n      <span>View live app</span>\n    </Link>\n  </Button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Switching Threads in CopilotKit (React/TypeScript)\nDESCRIPTION: This code shows how to implement dynamic thread switching using React state. It allows changing the threadId at runtime, which causes CopilotKit to load the corresponding conversation history.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/persistence/loading-message-history.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nconst Page = () => {\n  const [threadId, setThreadId] = useState(\n    \"af2fa5a4-36bd-4e02-9b55-2580ab584f89\"\n  );\n  return (\n    <CopilotKit threadId={threadId}>\n      <YourApp setThreadId={setThreadId} />\n    </CopilotKit>\n  );\n};\n\nconst YourApp = ({ setThreadId }) => {\n  return (\n    <Button onClick={() => setThreadId(\"679e8da5-ee9b-41b1-941b-80e0cc73a008\")}>\n      Change Thread\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAIAssistantAdapter with CopilotRuntime\nDESCRIPTION: Example showing how to initialize and configure the OpenAIAssistantAdapter with CopilotRuntime. It demonstrates setting up the OpenAI client and configuring the adapter with various options including assistant ID and feature flags.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/llm-adapters/OpenAIAssistantAdapter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopilotRuntime, OpenAIAssistantAdapter } from \"@copilotkit/runtime\";\nimport OpenAI from \"openai\";\n\nconst copilotKit = new CopilotRuntime();\n\nconst openai = new OpenAI({\n  organization: \"<your-organization-id>\",\n  apiKey: \"<your-api-key>\",\n});\n\nreturn new OpenAIAssistantAdapter({\n  openai,\n  assistantId: \"<your-assistant-id>\",\n  codeInterpreterEnabled: true,\n  fileSearchEnabled: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Chat Interface\nDESCRIPTION: Example implementation of a custom chat interface using the useCopilotChat hook, demonstrating core chat functionality like message management and user interactions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCopilotChat } from \"@copilotkit/react-core\";\nimport { Role, TextMessage } from \"@copilotkit/runtime-client-gql\";\n\nexport function CustomChatInterface() {\n  const {\n    visibleMessages,\n    appendMessage,\n    setMessages,\n    deleteMessage,\n    reloadMessages,\n    stopGeneration,\n    isLoading,\n  } = useCopilotChat();\n\n  const sendMessage = (content: string) => {\n    appendMessage(new TextMessage({ content, role: Role.User }));\n  };\n\n  return (\n    <div>\n      {/* Implement your custom chat UI here */}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Management with useCopilotChatSuggestions\nDESCRIPTION: Shows how to implement dependency tracking with useCopilotChatSuggestions. The hook monitors the relevantState dependency array and updates suggestions when dependencies change.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/copilot-suggestions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotChatSuggestions } from \"@copilotkit/react-ui\";\n\nexport function MyComponent() {\n  useCopilotChatSuggestions(\n    {\n      instructions: \"Suggest the most relevant next actions.\",\n      minSuggestions: 1,\n      maxSuggestions: 2,\n    },\n    [relevantState],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Instructions based on Application State\nDESCRIPTION: This example demonstrates how to conditionally add instructions to the AI assistant based on the application's state, allowing for dynamic behavior customization.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_133\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Chat() {\n  const [showWeather, setShowWeather] = useState(false);\n\n  useCopilotAdditionalInstructions({\n    instructions: \"Do not answer questions about the weather.\",\n    available: showWeather ? \"enabled\" : \"disabled\"\n  }, showWeather);\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Emitting Messages in CopilotKit with CrewAI in Python\nDESCRIPTION: This code snippet demonstrates how to manually emit messages in a CrewAI agent using CopilotKit. It includes importing the necessary function, emitting an intermediate message, simulating a long-running task, and using copilotkit_stream for the final response.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/advanced/emit-messages.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom litellm import completion\nfrom crewai.flow.flow import start\nfrom copilotkit.crewai import copilotkit_emit_message\n# ...\n\n@start()\nasync def start(self):\n    intermediate_message = \"Thinking really hard...\"\n    await copilotkit_emit_message(intermediate_message)\n\n    # simulate a long running task\n    await asyncio.sleep(2)\n\n    response = copilotkit_stream(\n        completion(\n            model=\"openai/gpt-4o\",\n            messages=[\n                {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                *self.state[\"messages\"]\n            ],\n            stream=True\n        )\n    )\n     message = response.choices[0][\"message\"]\n\n    self.state[\"messages\"].append(message)\n```\n\n----------------------------------------\n\nTITLE: Using useCoAgent Hook in React Component\nDESCRIPTION: Demonstrates how to use the useCoAgent hook to manage agent state in a React component, including toggling language and rendering state.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/in-app-agent-write.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\n\ntype AgentState = {\n  language: \"english\" | \"spanish\";\n}\n\nfunction YourMainContent() {\n  const { state, setState } = useCoAgent<AgentState>({\n    name: \"sample_agent\",\n    initialState: { language: \"spanish\" }\n  });\n\n  const toggleLanguage = () => {\n    setState({ language: state.language === \"english\" ? \"spanish\" : \"english\" });\n  };\n\n  return (\n    <div>\n      <h1>Your main content</h1>\n      <p>Language: {state.language}</p>\n      <button onClick={toggleLanguage}>Toggle Language</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage with Dependency Management\nDESCRIPTION: Example demonstrating how to use useCopilotChatSuggestions with dependency array for state monitoring.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotChatSuggestions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotChatSuggestions } from \"@copilotkit/react-ui\";\n\nexport function MyComponent() {\n  useCopilotChatSuggestions(\n    {\n      instructions: \"Suggest the most relevant next actions.\",\n    },\n    [appState],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotPopup UI in React\nDESCRIPTION: React code snippet showing how to implement the CopilotPopup UI component, which provides a floating chat interface for the Copilot agent.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopilotPopup } from \"@copilotkit/react-ui\";\n\nexport function YourApp() {\n  return (\n    <>\n      <YourMainContent />\n      <CopilotPopup\n        instructions={\"You are assisting the user as best as you can. Answer in the best way possible given the data you have.\"}\n        labels={{\n          title: \"Popup Assistant\",\n          initial: \"Need any help?\",\n        }}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LangGraph Interrupt with Custom UI\nDESCRIPTION: Example implementation of the useLangGraphInterrupt hook to display custom UI when a LangGraph interrupt event occurs, allowing for user input collection.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_40\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLangGraphInterrupt } from \"@copilotkit/react-core\";\n// ...\n\nconst YourMainContent = () => {\n  // ...\n\n  // styles omitted for brevity\n  useLangGraphInterrupt<string>({\n    render: ({ event, resolve }) => (\n      <div>\n        <p>{event.value}</p>\n        <form onSubmit={(e) => {\n          e.preventDefault();\n          resolve((e.target as HTMLFormElement).response.value);\n        }}>\n          <input type=\"text\" name=\"response\" placeholder=\"Enter your response\" />\n          <button type=\"submit\">Submit</button>\n        </form>\n      </div>\n    )\n  });\n  // ...\n\n  return <div>{/* ... */}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying 'use client' Directive in Next.js App Router Component\nDESCRIPTION: This code snippet demonstrates how to add the 'use client' directive at the top of a Next.js component file when using the App Router. This is necessary for client-side hooks like those in CopilotKit.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/use-client-callout.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotTextarea Dependencies\nDESCRIPTION: Shows the command to install the necessary npm packages for using the CopilotTextarea component in a project.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/CopilotTextarea.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @copilotkit/react-core @copilotkit/react-textarea\n```\n\n----------------------------------------\n\nTITLE: Importing Components for CopilotKit LLM Adapters Documentation\nDESCRIPTION: This code snippet imports various components and icons used in the documentation for CopilotKit LLM Adapters. It includes imports for UI components, custom React components, and icons from react-icons.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/llm-adapters.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from 'fumadocs-ui/components/callout';\nimport { TailoredContent, TailoredContentOption } from \"@/components/react/tailored-content.tsx\";\nimport SelfHostingCopilotRuntimeCreateEndpoint from \"@/snippets/self-hosting-copilot-runtime-create-endpoint.mdx\";\nimport { FaCloud, FaServer } from \"react-icons/fa\";\nimport FindYourCopilotRuntime from \"@/snippets/find-your-copilot-runtime.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotSidebar in React Component\nDESCRIPTION: This code snippet shows how to import and implement the CopilotSidebar component from the CopilotKit UI library, including custom labels and styling.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-3-setup-copilotkit.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { TasksList } from \"@/components/TasksList\";\nimport { TasksProvider } from \"@/lib/hooks/use-tasks\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\nimport { CopilotSidebar } from \"@copilotkit/react-ui\";\nimport \"@copilotkit/react-ui/styles.css\";\n\nexport default function Home() {\n  return (\n    <CopilotKit\n      publicApiKey={process.env.NEXT_PUBLIC_CPK_PUBLIC_API_KEY}\n    >\n      <CopilotSidebar\n        defaultOpen={true}\n        clickOutsideToClose={false}\n        labels={{\n          title: \"Travel Planner\",\n          initial: \"Hi! 👋 I'm here to plan your trips. I can help you manage your trips, add places to them, or just generally work with you to plan a new one.\",\n        }}\n      />\n      <TooltipProvider>\n        <TripsProvider>\n          <main className=\"h-screen w-screen\">\n            <MapCanvas />\n          </main>\n        </TripsProvider>\n      </TooltipProvider>\n    </CopilotKit>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Frontend Actions in Python Agent\nDESCRIPTION: Shows how to access and utilize frontend actions within a Python agent's logic using the copilotkit property.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/frontend-actions.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def agent_node(state: YourAgentState, config: RunnableConfig):\n    actions = state.get(\"copilotkit\", {}).get(\"actions\", [])\n    model = ChatOpenAI(model=\"gpt-4o\").bind_tools(actions)\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State Class in Python with CopilotKit\nDESCRIPTION: Creates a custom AgentState class that extends CopilotKitState to define the structure of your agent's state with type hints. This example defines a language property with literal type constraints.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_191\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitState\nfrom typing import Literal\n\nclass AgentState(CopilotKitState):\n    language: Literal[\"english\", \"spanish\"] = \"english\"\n```\n\n----------------------------------------\n\nTITLE: Importing UI Icons in React\nDESCRIPTION: Import statement for Lucide React icons used in the UI navigation cards\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MessageCircleIcon, BrushIcon, PuzzleIcon, SettingsIcon } from \"lucide-react\";\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Backend Actions in CopilotRuntime\nDESCRIPTION: Example of configuring backend actions in CopilotRuntime using TypeScript, showing how to define custom actions with parameters and handlers.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_154\n\nLANGUAGE: typescript\nCODE:\n```\nconst runtime = new CopilotRuntime({\n  // ... existing configuration\n  actions: ({properties, url}) => {\n    // Note that actions returns not an array, but an array **generator**.\n    // You can use the input parameters to the actions generator to expose different backend actions to the Copilot at different times:\n    // `url` is the current URL on the frontend application.\n    // `properties` contains custom properties you can pass from the frontend application.\n\n    return [\\\n      {\\\n        name: \"fetchNameForUserId\",\\\n        description: \"Fetches user name from the database for a given ID.\",\\\n        parameters: [\\\n          {\\\n            name: \"userId\",\\\n            type: \"string\",\\\n            description: \"The ID of the user to fetch data for.\",\\\n            required: true,\\\n          },\\\n        ],\\\n        handler: async ({userId}: {userId: string}) => {\\\n          // do something with the userId\\\n          // return the user data\\\n          return {\\\n            name: \"Darth Doe\",\\\n          };\\\n        },\\\n      },\\\n    ]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Instructions Programmatically with useCopilotContext\nDESCRIPTION: Shows how to programmatically set chat instructions using the useCopilotContext hook in a React functional component.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-ai-assistant-behavior.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { useCopilotContext } from \"@copilotkit/react-core\";\n\nconst Home: React.FC = () => {\n  // [!code highlight:6]\n  const { setChatInstructions } = useCopilotContext();\n\n  useEffect(() => {\n    setChatInstructions(\"You are assisting the user as best as you can. Answer in the best way possible given the data you have.\");\n  }, [setChatInstructions]);\n\n  return <>{/* Your components */}</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Chat Interface with React\nDESCRIPTION: Example of creating a custom chat interface using the useCopilotChat hook from CopilotKit's React core library.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_175\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCopilotChat } from \"@copilotkit/react-core\";\nimport { Role, TextMessage } from \"@copilotkit/runtime-client-gql\";\n\nexport function CustomChatInterface() {\n  const {\n    visibleMessages,\n    appendMessage,\n    setMessages,\n    deleteMessage,\n    reloadMessages,\n    stopGeneration,\n    isLoading,\n  } = useCopilotChat();\n\n  const sendMessage = (content: string) => {\n    appendMessage(new TextMessage({ content, role: Role.User }));\n  };\n\n  return (\n    <div>\n      {/* Implement your custom chat UI here */}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up MCP Backend Handler in Next.js\nDESCRIPTION: Backend implementation using Next.js App Router to handle MCP requests with OpenAI integration and runtime configuration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/model-context-protocol.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  CopilotRuntime,\n  OpenAIAdapter,\n  copilotRuntimeNextJSAppRouterEndpoint,\n} from \"@copilotkit/runtime\";\nimport { experimental_createMCPClient } from \"ai\";\n\nimport { NextRequest } from \"next/server\";\n\nconst serviceAdapter = new OpenAIAdapter();\n\nconst runtime = new CopilotRuntime({\n  // @ts-ignore\n  createMCPClient: async (config) => {\n    return await experimental_createMCPClient({\n      transport: {\n        type: \"sse\",\n        url: config.endpoint,\n        headers: config.apiKey\n          ? { Authorization: `Bearer ${config.apiKey}` }\n          : undefined,\n      },\n    });\n  },\n});\n\nexport const POST = async (req: NextRequest) => {\n  const { handleRequest } = copilotRuntimeNextJSAppRouterEndpoint({\n    runtime,\n    serviceAdapter,\n    endpoint: \"/api/copilotkit\",\n  });\n\n  return handleRequest(req);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing LangChain Stream Actions in CopilotRuntime\nDESCRIPTION: Demonstrates how to configure CopilotRuntime with LangChain.js integration to create a joke generator action. The implementation uses ChatOpenAI and ChatPromptTemplate to generate pirate-style jokes about given topics, showcasing how to return LangChain streams directly from action handlers.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions/langchain-js-backend-actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { ChatPromptTemplate } from \"@langchain/core/prompts\";\n\nconst runtime = new CopilotRuntime({\n  // ... existing configuration\n  actions: ({properties, url}) => {\n    // Note that actions returns not an array, but an array **generator**.\n    // You can use the input parameters to the actions generator to expose different backend actions to the Copilot at different times: \n    // `url` is the current URL on the frontend application.\n    // `properties` contains custom properties you can pass from the frontend application.\n\n    return [\n      {\n        name: \"generateJokeForTopic\",\n        description: \"Generates a joke for a given topic.\",\n        parameters: [\n          {\n            name: \"topic\",\n            type: \"string\",\n            description: \"The topic to generate a joke about.\",\n            required: true,\n          },\n        ],\n        handler: async ({topic}: {topic: string}) => {\n          const prompt = ChatPromptTemplate.fromMessages([\n            [\n              \"system\",\n              \"You are a witty comedian. Generate a short, funny joke about the given topic. But make it sound like a pirate joke!\",\n            ],\n            [\"user\", \"Topic: {topic}\"],\n          ]);\n          const chain = prompt.pipe(new ChatOpenAI());\n          return chain.stream({ // return directly chain.stream\n            topic: topic,\n          });\n        },\n      },\n    ]\n  }\n});\n\n// ... rest of your route definition\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotReadable for User Information\nDESCRIPTION: Usage of useCopilotReadable hook to provide current user information to the AI, enhancing its context awareness for form filling.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-form-filling/README.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nuseCopilotReadable({\n  description: \"The current user information\",\n  value: retrieveUserInfo(),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Copilot Runtime Endpoint in NestJS\nDESCRIPTION: This snippet demonstrates how to set up a controller in NestJS to handle the Copilot Runtime endpoint. It creates a CopilotRuntime instance with a langGraphPlatformEndpoint and uses copilotRuntimeNestEndpoint to handle requests on the /copilotkit route.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-langgraph-endpoint.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { All, Controller, Req, Res } from '@nestjs/common';\nimport { \n  CopilotRuntime, \n  copilotRuntimeNestEndpoint, \n  OpenAIAdapter,\n  langGraphPlatformEndpoint \n} from '@copilotkit/runtime';\nimport { Request, Response } from 'express';\nimport OpenAI from \"openai\";\n\n@Controller()\nexport class CopilotkitController {\n  @All('/copilotkit')\n  copilotkit(@Req() req: Request, @Res() res: Response) {\n    const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n    const serviceAdapter = new OpenAIAdapter({ openai } as any);\n    \n    const runtime = new CopilotRuntime({\n      remoteEndpoints: [\n        langGraphPlatformEndpoint({\n          deploymentUrl: \"your-api-url\", // make sure to replace with your real deployment url\n          langsmithApiKey: process.env.LANGSMITH_API_KEY, // only used in LangGraph Platform deployments\n          agents: [ // List any agents available under \"graphs\" list in your langgraph.json file; give each a description explaining when it should be called.\n            {\n              name: 'my_agent',\n              description: 'A helpful LLM agent.',\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Research Context with useCoAgent Hook\nDESCRIPTION: Implements a React context provider using CopilotKit's useCoAgent hook to manage research state and provide bidirectional state synchronization between the frontend and LangGraph agent.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-6-shared-state.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ResearchContextType {\n    state: ResearchState;\n    setResearchState: (newState: ResearchState | ((prevState: ResearchState) => ResearchState)) => void\n    sourcesModalOpen: boolean\n    setSourcesModalOpen: (open: boolean) => void\n    runAgent: () => void\n}\n\nconst ResearchContext = createContext<ResearchContextType | undefined>(undefined)\n\nexport function ResearchProvider({ children }: { children: ReactNode }) {\n    const [sourcesModalOpen, setSourcesModalOpen] = useState<boolean>(false)\n    const { state, setState, run } = useCoAgent<ResearchState>({\n        name: 'agent',\n        initialState: {},\n    });\n\n    return (\n        <ResearchContext.Provider \n            value={{ \n              state, \n              setResearchState: setState as ResearchContextType['setResearchState'], \n              setSourcesModalOpen, \n              sourcesModalOpen, \n              runAgent: run\n            }}>\n            {children}\n        </ResearchContext.Provider>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Stage Transition with Contact Information Form in CopilotKit\nDESCRIPTION: This code demonstrates a more complex stage transition that occurs when a user submits a contact information form. It uses the renderAndWaitForResponse feature in useCopilotAction to render a form component and transition stages when form data is submitted.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n// imports ...\n\nexport function useStageGetContactInfo() {\n  const { setContactInfo, stage, setStage } = useGlobalState();\n\n  // ...\n\n  // Render the ContactInfo component and wait for the user's response.\n  useCopilotAction(\n    {\n      name: \"getContactInformation\",\n      description: \"Get the contact information of the user\",\n      available: stage === \"getContactInfo\" ? \"enabled\" : \"disabled\",\n      renderAndWaitForResponse: ({ status, respond }) => {\n        return (\n          <ContactInfo\n            status={status}\n\n            onSubmit={(name, email, phone) => {\n              // Commit the contact information to the global state.\n              setContactInfo({ name, email, phone });\n\n              // Let the agent know that the user has submitted their contact information.\n              respond?.(\"User has submitted their contact information.\");\n\n              // This move the state machine to the next stage, buildCar deterministically.\n              setStage(\"buildCar\");\n            }}\n          />\n        );\n      },\n    },\n    [stage],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server - Bash\nDESCRIPTION: This snippet demonstrates several methods to start the Next.js development server using the package manager of your choice—npm, yarn, pnpm, or bun. The core command is 'npm run dev', which runs the project in development mode with hot-reloading enabled. There are no required parameters, but you must have an initialized Next.js project as well as the respective package manager installed. The expected output is the server becoming available on http://localhost:3000; ensure only one package manager is used at a time to avoid conflicts.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/langgraph-tutorial-quickstart/ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Headless UI with useCopilotChat Hook\nDESCRIPTION: Shows how to implement a custom chat interface using the useCopilotChat hook for full UI customization. Provides access to core chat functionality like message management and loading states.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/component-examples.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotChat } from \"@copilotkit/react-core\";\nimport { Role, TextMessage } from \"@copilotkit/runtime-client-gql\";\n\nexport function CustomChatInterface() {\n  const {\n    visibleMessages,\n    appendMessage,\n    setMessages,\n    deleteMessage,\n    reloadMessages,\n    stopGeneration,\n    isLoading,\n  } = useCopilotChat();\n\n  const sendMessage = (content: string) => {\n    appendMessage(new TextMessage({ content, role: Role.User }));\n  };\n\n  return (\n    <div>\n      {/* Implement your custom chat UI here */}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data and Rendering UI Components in Copilot Chat\nDESCRIPTION: Shows how to use both handler and render methods in useCopilotAction. The handler fetches meeting data asynchronously while the render function displays appropriate UI based on the operation status.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/generative-ui.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\" // only necessary if you are using Next.js with the App Router. \nimport { useCopilotAction } from \"@copilotkit/react-core\"; \n\nuseCopilotAction({ \n  name: \"showLastMeetingOfDay\",\n  description: \"Displays the last calendar meeting for a given day\",\n  parameters: [\n    {\n      name: \"date\",\n      type: \"string\",\n      description: \"Date to fetch the last meeting for (YYYY-MM-DD)\",\n      required: true\n    }\n  ],\n  handler: async ({ date }) => {\n    // some async operation which can return a result:\n    const lastMeeting = await fetchLastMeeting(new Date(date));\n    return lastMeeting;\n  },\n  render: ({ status, result }) => {\n    if (status === 'executing' || status === 'inProgress') {\n      // show a loading view while the action is executing, i.e. while the meeting is being fetched\n      return <LoadingView />;\n    } else if (status === 'complete') {\n      // show the meeting card once the action is complete\n      return <CalendarMeetingCardComponent {...result} />;\n    } else {\n      return <div className=\"text-red-500\">No meeting found</div>;\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing Azure OpenAI Import\nDESCRIPTION: Shows the correction for importing Azure OpenAI class in LangGraph implementations.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/troubleshooting/common-issues.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_openai import AzureOpenAI # [!code --]\nfrom langchain_openai import AzureChatOpenAI # [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Instructions with useCopilotAdditionalInstructions\nDESCRIPTION: This code shows how to customize the AI assistant's behavior by appending additional instructions to the prompt using the useCopilotAdditionalInstructions hook, which is the recommended approach for customization.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_132\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotKit, useCopilotAdditionalInstructions } from \"@copilotkit/react-core\";\nimport { CopilotPopup } from \"@copilotkit/react-ui\"\n\nfunction Chat() {\n  useCopilotAdditionalInstructions({\n    instructions: \"Do not answer questions about the weather.\",\n  });\n  return <CopilotPopup />\n}\n\nexport function Home() {\n  return (\n    <CopilotKit>\n      <Chat />\n    </CopilotKit>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Catch-All Action Rendering for Tool Calls in React\nDESCRIPTION: This code shows how to implement a catch-all action renderer to handle arbitrary tool calls that don't have specific UI components. It displays the tool name, arguments, and completion status for any unhandled tool calls from agents.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_156\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  useCopilotAction,\n  CatchAllActionRenderProps,\n} from \"@copilotkit/react-core\";\n\nuseCopilotAction({\n  name: \"*\",\n  followUp: false,\n  render: ({ name, args, status, result }: CatchAllActionRenderProps<[]>) => {\n    return (\n      <div className=\"m-4 p-4 bg-gray-100 rounded shadow\">\n        <h2 className=\"text-sm font-medium\">Tool: {name}</h2>\n        <pre className=\"mt-2 text-xs overflow-auto\">\n          {JSON.stringify(args, null, 2)}\n        </pre>\n        {status === \"complete\" && (\n          <div className=\"mt-2 text-xs text-green-600\">✓ Complete</div>\n        )}\n      </div>\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CopilotKit Provider with Agent Specification\nDESCRIPTION: React/TypeScript code showing how to specify the agent property in the CopilotKit provider component to route requests to a specific agent.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-4-agentic-chat-ui.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\n<CopilotKit\n  // ...\n  agent=\"agent\" // [!code ++]\n>\n  {...}\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Manually Emitting Tool Calls in CopilotKit\nDESCRIPTION: Example of using copilotkit_emit_tool_call to manually emit a tool call to CopilotKit.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_82\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_emit_tool_call\n\nawait copilotkit_emit_tool_call(config, name=\"SearchTool\", args={\"steps\": 10})\n```\n\n----------------------------------------\n\nTITLE: Implementing Copilot Runtime Endpoint in Next.js Pages Router\nDESCRIPTION: This snippet demonstrates how to create a new route to handle the '/api/copilotkit' endpoint using the Next.js Pages Router. It utilizes the CopilotRuntime class and copilotRuntimeNextJSPagesRouterEndpoint function from @copilotkit/runtime.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-starter.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  CopilotRuntime,\n  ExperimentalEmptyAdapter,\n  copilotRuntimeNextJSPagesRouterEndpoint,\n} from '@copilotkit/runtime';\nimport { NextApiRequest, NextApiResponse } from 'next';\n\nconst serviceAdapter = new ExperimentalEmptyAdapter();\n\nconst handler = async (req: NextApiRequest, res: NextApiResponse) => {\n  const runtime = new CopilotRuntime({\n    remoteEndpoints: [\n      // added in next step...\n    ],\n  });\n\n  const handleRequest = copilotRuntimeNextJSPagesRouterEndpoint({\n    endpoint: '/api/copilotkit',\n    runtime,\n    serviceAdapter,\n  });\n\n  return await handleRequest(req, res);\n};\n\nexport default handler;\n```\n\n----------------------------------------\n\nTITLE: Basic useCoAgent Hook Implementation in TypeScript React\nDESCRIPTION: Demonstrates the basic implementation of useCoAgent hook with a simple counter state example.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCoAgent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\n\ntype AgentState = {\n  count: number;\n}\n\nconst agent = useCoAgent<AgentState>({\n  name: \"my-agent\",\n  initialState: {\n    count: 0,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Message Persistence with FastAPI and LangGraph\nDESCRIPTION: Demonstrates how to set up asynchronous message persistence using AsyncPostgresSaver with PostgreSQL database. The code shows configuration within a FastAPI lifespan context manager, including database connection setup, checkpointer initialization, and CopilotKit endpoint creation.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/persistence/message-persistence.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom contextlib import asynccontextmanager\nfrom langgraph.checkpoint.postgres.aio import AsyncPostgresSaver\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    async with AsyncPostgresSaver.from_conn_string(\n        \"postgresql://postgres:postgres@127.0.0.1:5432/postgres\"\n    ) as checkpointer:\n        # NOTE: you need to call .setup() the first time you're using your checkpointer\n        await checkpointer.setup()\n        # Create an async graph\n        graph = workflow.compile(checkpointer=checkpointer)\n\n        # Create SDK with the graph\n        sdk = CopilotKitRemoteEndpoint(\n            agents=[\n                LangGraphAgent(\n                    name=\"research_agent\",\n                    description=\"Research agent.\",\n                    graph=graph,\n                ),\n            ],\n        )\n\n        # Add the CopilotKit FastAPI endpoint\n        add_fastapi_endpoint(app, sdk, \"/copilotkit\")\n        yield\n\napp = FastAPI(lifespan=lifespan)\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Icons\nDESCRIPTION: Import statements for TailoredContent components and various icons used in the documentation interface.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/concepts/agentic-copilots.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  TailoredContent,\n  TailoredContentOption,\n} from \"@/components/react/tailored-content\";\nimport { BsFillCloudHaze2Fill as CloudIcon } from \"react-icons/bs\";\nimport { FaServer as SelfHostIcon } from \"react-icons/fa6\";\nimport { SiLangchain } from \"react-icons/si\";\nimport { LinkIcon } from \"lucide-react\";\nimport {\n  RocketIcon,\n  GraduationCapIcon,\n  CodeIcon,\n  VideoIcon,\n} from \"lucide-react\";\n```\n\n----------------------------------------\n\nTITLE: Loading Agent State with useCoAgent\nDESCRIPTION: Shows how to access an agent's state using the useCoAgent hook within a thread context\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_137\n\nLANGUAGE: typescript\nCODE:\n```\nconst { state } = useCoAgent({name: \"research_agent\"});\n\n// state will now be the state of research_agent in the thread id given above\n```\n\n----------------------------------------\n\nTITLE: Implementing Agent Exit in Email Sending Workflow\nDESCRIPTION: Demonstrates how to implement the copilotkit_exit() method in a send_email function. The code handles email sending confirmation, updates the message state, and properly exits the agent loop. It includes error handling for cancelled operations and success confirmations.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/advanced/exit-agent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\nfrom litellm import completion\nfrom crewai.flow.flow import start\nfrom copilotkit.crewai import copilotkit_exit\n# ...\n@start()\nasync def send_email(self):\n    \"\"\"Send an email.\"\"\"\n\n\n    # get the last message and cast to ToolMessage\n    last_message = self.state[\"messages\"][-1]\n    if last_message[\"content\"] == \"CANCEL\":\n        text_message = \"❌ Cancelled sending email.\"\n    else:\n        text_message = \"✅ Sent email.\"\n    self.state[\"messages\"].append({\"role\": \"assistant\", \"content\": text_message, \"id\": str(uuid.uuid4())})\n    # Exit the agent loop after processing\n    await copilotkit_exit()\n```\n\n----------------------------------------\n\nTITLE: Importing CopilotKit Styles at Root Component\nDESCRIPTION: Example of importing CopilotKit's stylesheet at the root of a project to apply default styles to CopilotKit components. This is necessary since components don't have styles by default.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_97\n\nLANGUAGE: tsx\nCODE:\n```\n...\nimport \"@copilotkit/react-ui/styles.css\";\n\nexport function YourRootComponent() {\n  return (\n    <CopilotKit>\n      ...\n    </CopilotKit>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CopilotKit React UI Styles in TSX\nDESCRIPTION: This code snippet shows how to import the default styles for CopilotKit React UI components in the root component of a React application, typically in the layout.tsx file.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/copilot-ui.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"@copilotkit/react-ui/styles.css\";\n```\n\n----------------------------------------\n\nTITLE: Emitting Tool Calls\nDESCRIPTION: Example demonstrating how to manually emit tool calls with name and arguments to CopilotKit.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/LangGraph.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_emit_tool_call\n\nawait copilotkit_emit_tool_call(config, name=\"SearchTool\", args={\"steps\": 10})\n```\n\n----------------------------------------\n\nTITLE: Configuring Copilot Cloud API Key\nDESCRIPTION: Example of how to add the Copilot Cloud API key to the frontend .env file. This key is necessary for authenticating with Copilot Cloud services.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-3-setup-copilotkit.mdx#2025-04-23_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nNEXT_PUBLIC_CPK_PUBLIC_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Setting Up CopilotKit Provider in React\nDESCRIPTION: Code snippet demonstrating how to set up the CopilotKit provider component in a React application's layout.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"./globals.css\";\nimport { ReactNode } from \"react\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <CopilotKit\n          publicApiKey=\"<your-copilot-cloud-public-api-key>\"\n          agent=\"sample_agent\"\n        >\n          {children}\n        </CopilotKit>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State in Python\nDESCRIPTION: Defines the AgentState class in Python, extending CopilotKitState with a language attribute.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/in-app-agent-write.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitState\nfrom typing import Literal\n\nclass AgentState(CopilotKitState):\n    language: Literal[\"english\", \"spanish\"] = \"english\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CopilotRuntime Backend Action in TypeScript\nDESCRIPTION: Sets up a backend action to fetch user data using CopilotRuntime configuration. Defines a fetchUser action that takes a userId parameter and returns user data.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/front-backend-action-pairing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst runtime = new CopilotRuntime({\n// ... existing configuration\nactions: ({properties, url}) => {\nreturn [\n    {\n        name: \"fetchUser\",\n        description: \"Fetches user name from the database for a given ID.\",\n        parameters: [\n    {\n        name: \"userId\",\n        type: \"string\",\n        description: \"The ID of the user to fetch data for.\",\n        required: true,\n    },\n        ],\n        handler: async ({userId}: {userId: string}) => {\n        // do something with the userId\n        // return the user data\n        return {\n        name: \"Darth Doe\",\n    };\n    },\n    },\n        ]\n    }\n});\n\n// ... rest of your route definition\n```\n\n----------------------------------------\n\nTITLE: Configuring CopilotKit Frontend with MCP Support in React\nDESCRIPTION: Frontend setup showing how to configure the CopilotKit component with MCP endpoints and implement a chat interface in a React application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/model-context-protocol.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { CopilotKit } from \"@copilotkit/react-core\";\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\nexport default function PageLevelComponent() {\n  return (\n    <CopilotKit\n      runtimeUrl=\"/api/copilotkit\"\n      mcpEndpoints={[\n        {\n          endpoint: \"your_mcp_sse_url\",\n        },\n      ]}\n    >\n      <div className=\"flex h-screen p-4\">\n        <CopilotChat\n          instructions=\"You are a helpful assistant that can answer questions about the user's account. You have access to MCP servers if defined in the mcpEndpoints array.\"\n          className=\"flex-grow rounded-lg w-full\"\n        />\n      </div>\n    </CopilotKit>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic LangGraph Interrupt Handler in React\nDESCRIPTION: Example showing how to use useLangGraphInterrupt hook to create a form-based interrupt handler that captures user input. The hook renders a custom form component when an Interrupt event is triggered, allowing users to submit responses that resolve the interrupt.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useLangGraphInterrupt.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLangGraphInterrupt } from \"@copilotkit/react-core\";\n\nconst YourMainContent = () => {\n  useLangGraphInterrupt<string>({\n    render: ({ event, resolve }) => (\n      <div>\n        <p>{event.value}</p>\n        <form onSubmit={(e) => {\n          e.preventDefault();\n          resolve((e.target as HTMLFormElement).response.value);\n        }}>\n          <input type=\"text\" name=\"response\" placeholder=\"Enter your response\" />\n          <button type=\"submit\">Submit</button>\n        </form>\n      </div>\n    )\n  });\n\n  return <div>{/* ... */}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using useCoAgent Hook for CrewAI State Management in React TSX\nDESCRIPTION: Example implementation showing how to use the useCoAgent hook to manage CrewAI agent state in a React component. Demonstrates state initialization, type definition, and state updates through a form input.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/shared-state/in-app-agent-write.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\n\n// Define the agent state type, should match the actual state of your agent\ntype AgentState = {\n  language: \"english\" | \"spanish\";\n}\n\n// Example usage in a pseudo React component\nfunction YourMainContent() {\n  const { state, setState } = useCoAgent({\n    name: \"research_crew\",\n    initialState: {\n      inputs: {\n        topic: \"\",\n        current_year: \"2025\",\n      },\n      outputs: \"Report will appear here\",\n    },\n  });\n  // ...\n\n  return (\n    // style excluded for brevity\n    <div>\n      <label htmlFor=\"topic\">\n        Topic\n      </label>\n      <input\n        type=\"text\"\n        value={state.inputs.topic}\n        onChange={(e) =>\n          setState({\n            ...state,\n            inputs: { ...state.inputs, topic: e.target.value },\n          })\n        }\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useCoAgent Hook in React\nDESCRIPTION: Demonstrates how to use the useCoAgent hook to access and display agent state in a React component, including type definitions and initial state setup.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/shared-state/in-app-agent-read.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\n\ntype AgentState = {\n  language: \"english\" | \"spanish\";\n}\n\nfunction YourMainContent() {\n  const { state } = useCoAgent<AgentState>({\n    name: \"sample_agent\",\n    initialState: { language: \"spanish\" }\n  });\n\n  return (\n    <div>\n      <h1>Your main content</h1>\n      <p>Language: {state.language}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Re-running Agent with State Changes\nDESCRIPTION: Shows advanced usage of useCoAgent hook to re-run the agent with a hint about state changes, using the run function and providing a callback.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/in-app-agent-write.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\nimport { TextMessage, MessageRole } from \"@copilotkit/runtime-client-gql\";\n\nfunction YourMainContent() {\n  const { state, setState, run } = useCoAgent<AgentState>({\n    name: \"sample_agent\",\n    initialState: { language: \"spanish\" }\n  });\n\n  const toggleLanguage = () => {\n    const newLanguage = state.language === \"english\" ? \"spanish\" : \"english\";\n    setState({ language: newLanguage });\n\n    run(({ previousState, currentState }) => {\n      return new TextMessage({\n        role: MessageRole.User,\n        content: `the language has been updated to ${currentState.language}`,\n      });\n    });\n  };\n\n  return (\n    // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of useCopilotChatSuggestions Hook\nDESCRIPTION: Demonstrates the basic usage of useCopilotChatSuggestions hook to generate chat suggestions. The hook takes configuration options including instructions and suggestion count limits.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/copilot-suggestions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotChatSuggestions } from \"@copilotkit/react-ui\";\n\nexport function MyComponent() {\n  useCopilotChatSuggestions(\n    {\n      instructions: \"Suggest the most relevant next actions.\",\n      minSuggestions: 1,\n      maxSuggestions: 2,\n    },\n    [relevantState],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with Different Package Managers\nDESCRIPTION: Command-line instructions to start the development server for a Next.js application using npm, pnpm, or yarn package managers.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\npnpm dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Setting Up CopilotKit Provider in Next.js Layout\nDESCRIPTION: Implementation of the CopilotKit provider component in a Next.js layout file to enable Copilot functionality throughout the application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\nimport \"./globals.css\";\nimport { ReactNode } from \"react\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Use the public api key you got from Copilot Cloud  */}\n        <CopilotKit publicApiKey=\"<your-copilot-cloud-public-api-key>\">\n          {children}\n        </CopilotKit>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Python Backend\nDESCRIPTION: Contents of the .env file for the Python backend, specifying the OpenAI API key.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter-crewai-flows/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Implementing Tool Node State Emission in Python\nDESCRIPTION: Demonstrates how to emit agent state updates from a tool node using copilotkit_emit_state function. The code shows state management within a tool execution loop that tracks various aspects like title, outline, sections, and logs.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-7-generative-ui.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def tool_node(self, state: ResearchState, config: RunnableConfig) -> Command[Literal[\"process_feedback_node\", \"call_model_node\"]]:\n        # ...\n        for tool_call in state[\"messages\"][-1].tool_calls:\n            # ...\n\n            tool_state = {\n                \"title\": new_state.get(\"title\", \"\"),\n                \"outline\": new_state.get(\"outline\", {}),\n                \"sections\": new_state.get(\"sections\", []),\n                \"sources\": new_state.get(\"sources\", {}),\n                \"proposal\": new_state.get(\"proposal\", {}),\n                \"logs\": new_state.get(\"logs\", []),\n                \"tool\": new_state.get(\"tool\", {}),\n                \"messages\": msgs\n            }\n            await copilotkit_emit_state(config, tool_state)\n\n        return tool_state\n```\n\n----------------------------------------\n\nTITLE: Configuring Tool Call Emission in CoAgents with Python\nDESCRIPTION: This code shows how to enable tool call emission in CoAgents using the copilotkit_customize_config function. By default, tool call emission is disabled. It can be set to True for all tool calls or configured to emit specific tool calls by providing a list of tool names.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/concepts/copilotkit-config.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfig = copilotkit_customize_config(\n    config,\n    # Can set to True, False, or a list of tool call names to emit.\n    emit_tool_calls=[\"tool_name\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State in TypeScript for CopilotKit\nDESCRIPTION: This snippet demonstrates how to define the agent state annotation in TypeScript, extending CopilotKitStateAnnotation with custom properties.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/generative-ui/agentic.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Annotation } from \"@langchain/langgraph\";\nimport { CopilotKitStateAnnotation } from \"@copilotkit/sdk-js/langgraph\";\n\nexport const AgentStateAnnotation = Annotation.Root({\n  searches: Annotation<object[]>,\n  ...CopilotKitStateAnnotation.spec,\n});\nexport type AgentState = typeof AgentStateAnnotation.State;\n```\n\n----------------------------------------\n\nTITLE: Setting up Azure OpenAI Adapter\nDESCRIPTION: Configuration example for Azure OpenAI integration with CopilotKit, including instance setup and model deployment\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_139\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopilotRuntime, OpenAIAdapter } from \"@copilotkit/runtime\";\nimport OpenAI from \"openai\";\n\n// The name of your Azure OpenAI Instance.\n// https://learn.microsoft.com/en-us/azure/cognitive-services/openai/how-to/create-resource?pivots=web-portal#create-a-resource\nconst instance = \"<your instance name>\";\n\n// Corresponds to your Model deployment within your OpenAI resource, e.g. my-gpt35-16k-deployment\n// Navigate to the Azure OpenAI Studio to deploy a model.\nconst model = \"<your model>\";\n\nconst apiKey = process.env[\"AZURE_OPENAI_API_KEY\"];\nif (!apiKey) {\n  throw new Error(\"The AZURE_OPENAI_API_KEY environment variable is missing or empty.\");\n}\n\nconst copilotKit = new CopilotRuntime();\n\nconst openai = new OpenAI({\n  apiKey,\n  baseURL: `https://${instance}.openai.azure.com/openai/deployments/${model}`,\n  defaultQuery: { \"api-version\": \"2024-04-01-preview\" },\n  defaultHeaders: { \"api-key\": apiKey },\n});\n\nreturn new OpenAIAdapter({ openai });\n```\n\n----------------------------------------\n\nTITLE: Rendering an Image Frame in JSX\nDESCRIPTION: This snippet demonstrates how to render an image within a Frame component in JSX. It displays a GIF demonstrating Generative UI for a meeting scheduling agent.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/generative-ui/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Frame>\n  <img\n    src=\"/images/coagents/AgenticGenerativeUI.gif\"\n    className=\"my-0\"\n    alt=\"Demo of Generative UI showing a meeting scheduling agent\"\n  />\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotKit in Next.js Root Layout\nDESCRIPTION: This code snippet shows how to set up CopilotKit in a Next.js root layout component. It imports necessary dependencies, defines the layout structure, and wraps the children components with CopilotKit, using a public API key for authentication.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/cloud/cloud-copilotkit-provider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./globals.css\";\nimport { ReactNode } from \"react\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Use the public api key you got from Copilot Cloud  */}\n        <CopilotKit publicApiKey=\"<your-copilot-cloud-public-api-key>\">\n          {children}\n        </CopilotKit>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Agent State Rendering in React with CopilotKit\nDESCRIPTION: Example showing how to use useCoAgent hook to render CrewAI agent state in a React component. Demonstrates type definition for agent state and implementation of state rendering with markdown support.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/generative-ui/agentic.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\nimport { useCoAgent } from \"@copilotkit/react-core\";\n// ...\n\n// Define the state of the agent, should match the state of the agent.\ntype AgentState = {\n  inputs: {\n    topic: string,\n    current_year: string,\n  },\n  outputs: string,\n};\n\nfunction YourMainContent() {\n  // ...\n\n  // [!code highlight:14]\n  // styles omitted for brevity\n  const { state } = useCoAgent<AgentState>({\n    name: \"research_crew\",\n    initialState: {\n      outputs: \"Report will appear here\",\n    },\n  });\n\n  return (\n    <div\n        id=\"result\"\n      >\n        <MarkdownRenderer content={state.outputs} />\n      </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Agent State in React Chat Component\nDESCRIPTION: This snippet shows how to use the useCoAgentStateRender hook to render the state of an agent within a React chat component, displaying search progress.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/generative-ui/agentic.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCoAgentStateRender } from \"@copilotkit/react-core\";\n\ntype AgentState = {\n  searches: {\n    query: string;\n    done: boolean;\n  }[];\n};\n\nfunction YourMainContent() {\n  useCoAgentStateRender<AgentState>({\n    name: \"sample_agent\", // the name the agent is served as\n    render: ({ state }) => (\n      <div>\n        {state.searches?.map((search, index) => (\n          <div key={index}>\n            {search.done ? \"✅\" : \"❌\"} {search.query}{search.done ? \"\" : \"...\"}\n          </div>\n        ))}\n      </div>\n    ),\n  });\n\n  return <div>...</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Adapter\nDESCRIPTION: Example of setting up the OpenAI adapter with CopilotRuntime, including organization and API key configuration\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_138\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopilotRuntime, OpenAIAdapter } from \"@copilotkit/runtime\";\nimport OpenAI from \"openai\";\n\nconst copilotKit = new CopilotRuntime();\n\nconst openai = new OpenAI({\n  organization: \"<your-organization-id>\", // optional\n  apiKey: \"<your-api-key>\",\n});\n\nreturn new OpenAIAdapter({ openai });\n```\n\n----------------------------------------\n\nTITLE: Dynamically Building LangGraph Agents with Context in Python\nDESCRIPTION: Demonstrates how to dynamically create agents by providing a callable function that returns a list of agents based on context. This approach allows passing configuration parameters from the context.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_84\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitRemoteEndpoint, LangGraphAgent\nfrom my_agent.agent import graph\n\nsdk = CopilotKitRemoteEndpoint(\n    agents=lambda context: [\\\n        LangGraphAgent(\\\n            name=\"email_agent\",\\\n            description=\"This agent sends emails\",\\\n            graph=graph,\\\n            langgraph_config={\\\n                \"token\": context[\"properties\"][\"token\"]\\\n            }\\\n        )\\\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Contact Information Stage Handler with State Transitions\nDESCRIPTION: Implementation of a contact information gathering stage that uses CopilotKit's action hook. Handles form submission and automatic transition to the next stage.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport function useStageGetContactInfo() {\n  const { setContactInfo, stage, setStage } = useGlobalState();\n\n  // ...\n\n  // Render the ContactInfo component and wait for the user's response.\n  useCopilotAction(\n    {\n      name: \"getContactInformation\",\n      description: \"Get the contact information of the user\",\n      available: stage === \"getContactInfo\" ? \"enabled\" : \"disabled\",\n      renderAndWaitForResponse: ({ status, respond }) => {\n        return (\n          <ContactInfo\n            status={status}\n            onSubmit={(name, email, phone) => {\n              // Commit the contact information to the global state.\n              setContactInfo({ name, email, phone });\n\n              // Let the agent know that the user has submitted their contact information.\n              respond?.(\"User has submitted their contact information.\");\n\n              // This move the state machine to the next stage, buildCar deterministically.\n              setStage(\"buildCar\");\n            }}\n          />\n        );\n      },\n    },\n    [stage],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Headless Chat Interface Implementation in TypeScript/React\nDESCRIPTION: Demonstrates basic implementation of a custom chat interface using useCopilotChat hook. Shows core functionality including message management and loading states.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/headless-ui.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotChat } from \"@copilotkit/react-core\";\nimport { Role, TextMessage } from \"@copilotkit/runtime-client-gql\";\n\nexport function CustomChatInterface() {\n  const {\n    visibleMessages,\n    appendMessage,\n    setMessages,\n    deleteMessage,\n    reloadMessages,\n    stopGeneration,\n    isLoading,\n  } = useCopilotChat();\n\n  const sendMessage = (content: string) => {\n    appendMessage(new TextMessage({ content, role: Role.User }));\n  };\n\n  return (\n    <div>\n      {/* Implement your custom chat UI here */}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware Request Handler Implementation\nDESCRIPTION: Implementation of the onBeforeRequest middleware function that handles requests before they are processed.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/CopilotRuntime.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonBeforeRequest: (options: {\n  threadId?: string;\n  runId?: string;\n  inputMessages: Message[];\n  properties: any;\n}) => void | Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Router Mode in CopilotKit\nDESCRIPTION: This code snippet demonstrates how to enable Router Mode in CopilotKit by specifying a runtime URL prop in the CopilotKit provider component. Router Mode is the default mode for handling multi-agent flows.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/multi-agent-flows.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<CopilotKit runtimeUrl=\"<copilot-runtime-url>\">\n  {/* Your application components */}\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Implementing State Rendering with React Hooks\nDESCRIPTION: Shows the frontend implementation using the useCoAgentStateRender hook to display the emitted state in the chat UI. The code demonstrates how to render progress logs when they are available in the state.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-7-generative-ui.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseCoAgentStateRender<ResearchState>({\n    name: 'agent',\n    render: ({ state }) => {\n        if (state.logs?.length > 0) {\n            return <Progress logs={state.logs} />;\n        }\n        return null;\n    },\n}, [researchState]);\n```\n\n----------------------------------------\n\nTITLE: Tool-Based State Emission Setup\nDESCRIPTION: Configures automatic state emission based on tool calls, using a step progress tool to report and update state.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/predictive-state-updates.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_customize_config\nfrom copilotkit import CopilotKitState\nfrom langgraph.types import Command\nfrom langgraph.graph import END\nfrom langchain.tools import tool\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.messages import SystemMessage, AIMessage\nfrom langchain_core.runnables import RunnableConfig\n\n# Define a step progress tool for the llm to report the steps\n@tool\ndef step_progress_tool(steps: list[str])\n    \"\"\"Reads and reports steps\"\"\"\n\nasync def frontend_actions_node(state: AgentState, config: RunnableConfig):\n    # Configure CopilotKit to treat step progress tool calls as predictive of the final state\n    config = copilotkit_customize_config(\n        config,\n        emit_intermediate_state=[\n            {\n                \"state_key\": \"observed_steps\",\n                \"tool\": \"step_progress_tool\",\n                \"tool_argument\": \"steps\"\n            },\n        ]\n    )\n\n    system_message = SystemMessage(\n        content=f\"You are a task performer. Pretend doing tasks you are given, report the steps using step_progress_tool.\"\n    )\n\n    # Provide the actions to the LLM\n    model = ChatOpenAI(model=\"gpt-4\").bind_tools(\n        [\n            *state[\"copilotkit\"][\"actions\"],\n            step_progress_tool\n            # your other tools here\n        ],\n    )\n\n    # Call the model with CopilotKit's modified config\n    response = await model.ainvoke([\n        system_message,\n        *state[\"messages\"],\n    ], config)\n\n    # Set the steps in state so they are persisted and communicated to the frontend\n    if isinstance(response, AIMessage) and response.tool_calls and response.tool_calls[0].get(\"name\") == 'step_progress_tool':\n        return Command(\n            goto=END,\n            update={\n                \"messages\": response,\n                \"observed_steps\": response.tool_calls[0].get(\"args\", None).get('steps')\n            }\n        )\n\n    return Command(goto=END, update={\"messages\": response})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { copilotkitCustomizeConfig } from '@copilotkit/sdk-js/langgraph';\n\nasync function frontendActionsNode(state: AgentState, config: RunnableConfig): Promise<AgentState> {\n    const modifiedConfig = copilotkitCustomizeConfig(config, {\n        emitIntermediateState: [\n        {\n            stateKey: \"observed_steps\",\n            tool: \"StepProgressTool\",\n            toolArgument: \"steps\",\n        },\n        ],\n    });\n\n    const stepProgress = tool(\n        async (args) => args,\n        {\n            name: \"StepProgressTool\",\n```\n\n----------------------------------------\n\nTITLE: Setting Up LangSmith Tracing Environment Variables\nDESCRIPTION: Shows the environment variable configuration required for tracing LLM runs with LangSmith in CopilotKit.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_114\n\nLANGUAGE: plaintext\nCODE:\n```\nLANGCHAIN_API_KEY=\"<your-api-key>\"\nLANGCHAIN_PROJECT=\"<your-project-name>\"\nLANGCHAIN_TRACING_V2=\"true\"\nLANGCHAIN_ENDPOINT=\"https://api.smith.langchain.com\"\n```\n\n----------------------------------------\n\nTITLE: Initializing CopilotRuntime Backend Component\nDESCRIPTION: Example showing how to initialize the CopilotRuntime class, which is the back-end component of CopilotKit for LLM interaction.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopilotRuntime } from \"@copilotkit/runtime\";\n\nconst copilotKit = new CopilotRuntime();\n```\n\n----------------------------------------\n\nTITLE: Integrating LangChain JS Actions with CopilotRuntime in TypeScript\nDESCRIPTION: This code snippet shows how to implement LangChain JS backend actions in a CopilotRuntime. It demonstrates creating a joke generator action that streams responses using LangChain components within a Next.js API route.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_179\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { ChatPromptTemplate } from \"@langchain/core/prompts\";\n\nconst runtime = new CopilotRuntime({\n  // ... existing configuration\n  actions: ({properties, url}) => {\n    // Note that actions returns not an array, but an array **generator**.\n    // You can use the input parameters to the actions generator to expose different backend actions to the Copilot at different times:\n    // `url` is the current URL on the frontend application.\n    // `properties` contains custom properties you can pass from the frontend application.\n\n    return [\\\n      {\\\n        name: \"generateJokeForTopic\",\\\n        description: \"Generates a joke for a given topic.\",\\\n        parameters: [\\\n          {\\\n            name: \"topic\",\\\n            type: \"string\",\\\n            description: \"The topic to generate a joke about.\",\\\n            required: true,\\\n          },\\\n        ],\\\n        handler: async ({topic}: {topic: string}) => {\\\n          const prompt = ChatPromptTemplate.fromMessages([\\\n            [\\\n              \"system\",\\\n              \"You are a witty comedian. Generate a short, funny joke about the given topic. But make it sound like a pirate joke!\",\\\n            ],\\\n            [\"user\", \"Topic: {topic}\"],\\\n          ]);\\\n          const chain = prompt.pipe(new ChatOpenAI());\\\n\\\n          return chain.stream({ // return directly chain.stream\\\n            topic: topic,\\\n          });\\\n        },\\\n      },\\\n    ]\n  }\n});\n\n// ... rest of your route definition\n```\n\n----------------------------------------\n\nTITLE: Configuring CopilotKit Component with Runtime URL in React\nDESCRIPTION: Shows how to properly configure the CopilotKit component with a runtime URL in a React application. The component wraps the application and points to a backend endpoint that handles copilot functionality.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/troubleshooting/common-issues.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<CopilotKit\n  runtimeUrl=\"/api/copilotkit\"\n>\n  {/* Your app */}\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Adding useCopilotAction for User Confirmation in React\nDESCRIPTION: This code snippet shows how to use the useCopilotAction hook to create a custom UI component for user confirmation before kicking off a crew. It displays the crew's arguments and waits for user approval.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/human-in-the-loop/flow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotAction } from \"@copilotkit/react-core\"\nimport { Markdown } from \"@copilotkit/react-ui\"\n\nfunction YourMainContent() {\n  // ...\n\n  useCopilotAction({\n    name: \"confirmKickoffCrew\",\n    available: \"remote\",\n    description: \"Confirm the kickoff of the crew. You MUST call this tool before the crew can continue.\",\n    parameters: [\n      { name: \"jsonArguments\", type: \"string\", description: \"The JSON input to the crew\", required: true },\n    ],\n    renderAndWaitForResponse: ({ args, respond, status }) => {\n      return (\n        <div>\n          <pre>{args.jsonArguments}</pre>\n\n          <div className={`flex gap-4 pt-4 ${status !== \"executing\" ? \"hidden\" : \"\"}`}>\n            <button\n              onClick={() => respond?.(\"CANCEL\")}\n              disabled={status !== \"executing\"}\n              className=\"border p-2 rounded-xl w-full\"\n            >\n              Cancel\n            </button>\n            <button\n              onClick={() => respond?.(\"KICKOFF\")}\n              disabled={status !== \"executing\"}\n              className=\"bg-blue-500 text-white p-2 rounded-xl w-full\"\n            >\n              Approve Kickoff\n            </button>\n          </div>\n        </div>\n      );\n    },\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotAction for Form Filling\nDESCRIPTION: Usage of useCopilotAction hook to allow the AI to update form fields. This defines the action parameters and handler for filling out the incident report form.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-form-filling/README.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nuseCopilotAction({\n  name: \"fillIncidentReportForm\",\n  description: \"Fill out the incident report form\",\n  parameters: [\n    {\n      name: \"fullName\",\n      type: \"string\",\n      required: true,\n      description: \"The full name of the person reporting the incident\"\n    },\n    // other parameters ...\n  ],\n  handler: async (action) => {\n    form.setValue(\"name\", action.fullName);\n    form.setValue(\"email\", action.email);\n    form.setValue(\"description\", action.incidentDescription);\n    form.setValue(\"date\", new Date(action.date));\n    form.setValue(\"impactLevel\", action.incidentLevel);\n    form.setValue(\"incidentType\", action.incidentType);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel Function Timeouts\nDESCRIPTION: JSON configuration for vercel.json to increase the serverless function timeout limit for CopilotKit API endpoints.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_119\n\nLANGUAGE: json\nCODE:\n```\n// vercel.json\n{\n     \"functions\": {\n       \"api/copilotkit/**/*\": {\n         \"maxDuration\": 60\n       }\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Correcting Azure OpenAI Import\nDESCRIPTION: Shows the correct import statement for Azure OpenAI integration\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/troubleshooting/common-issues.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_openai import AzureOpenAI # [!code --]\nfrom langchain_openai import AzureChatOpenAI # [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Deploying LangGraph Agent with LangGraph CLI in TypeScript\nDESCRIPTION: This command uses the Node.js LangGraph CLI to start a development server and LangGraph studio session for local development. It requires a LangSmith account and Node 18 or above to deploy a TypeScript graph locally for testing with CopilotKit.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_158\n\nLANGUAGE: bash\nCODE:\n```\n# For TypeScript with Node 18 or above\nnpx @langchain/langgraph-cli dev --host localhost --port 8000\n```\n\n----------------------------------------\n\nTITLE: Installing Copilot Runtime and Dependencies\nDESCRIPTION: Installs the Copilot Runtime package and its dependency for self-hosting.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/quickstart/langgraph.mdx#2025-04-23_snippet_11\n\nLANGUAGE: package-install\nCODE:\n```\n@copilotkit/runtime class-validator\n```\n\n----------------------------------------\n\nTITLE: Accessing Frontend Actions in TypeScript Agent\nDESCRIPTION: Demonstrates how to access and utilize frontend actions within a TypeScript agent's implementation.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/frontend-actions.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function agentNode(state: YourAgentState, config: RunnableConfig): Promise<YourAgentState> {\n    const actions = state.copilotkit?.actions;\n    const model = ChatOpenAI({ model: 'gpt-4o' }).bindTools(actions);\n}\n```\n\n----------------------------------------\n\nTITLE: Running CopilotKit CLI for Next.js Integration\nDESCRIPTION: Command to initialize CopilotKit in a Next.js application using the CLI tool. This is used to quickly set up CrewAI integration in a Next.js project.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_109\n\nLANGUAGE: bash\nCODE:\n```\nnpx copilotkit@latest init\n```\n\n----------------------------------------\n\nTITLE: Middleware Response Handler Implementation\nDESCRIPTION: Implementation of the onAfterRequest middleware function that handles responses after processing.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/CopilotRuntime.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonAfterRequest: (options: {\n  threadId?: string;\n  runId?: string;\n  inputMessages: Message[];\n  outputMessages: Message[];\n  properties: any;\n}) => void | Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotTextarea Package\nDESCRIPTION: Command to install the CopilotTextarea component package using npm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/copilot-textarea.mdx#2025-04-23_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install @copilotkit/react-textarea\n```\n\n----------------------------------------\n\nTITLE: Assembling State Machine with CopilotChat Component in React\nDESCRIPTION: This code shows how to assemble a complete state machine by combining multiple stage hooks into a single component. It tracks the current stage and user's name with React state, initializes all stages with required props, and renders the CopilotChat UI.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useState } from \"react\";\nimport { CopilotKit, useCopilotReadable } from \"@copilotkit/react-core\";\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\n// ...\n\nfunction StateMachineChat() {\n  // Track the current stage and user's name\n  const [stage, setStage] = useState<string>(\"one\");\n  const [name, setName] = useState<string>(\"\");\n\n  // Readable context available across all stages\n  useCopilotReadable({\n    description: \"User's name\",\n    value: name,\n  }, [name])\n\n  // Initialize all stages with their required props\n  useStageOne(stage, setStage, setName);\n  useStageTwo(stage);\n  // any additional stages...\n\n  return (\n    <CopilotKit>\n      <CopilotChat/>\n    </CopilotKit>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotPopup React Component\nDESCRIPTION: Example of implementing a floating chat interface using the CopilotPopup component in a React application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CopilotPopup } from \"@copilotkit/react-ui\";\n\nexport function YourApp() {\n  return (\n    <>\n      <YourMainContent />\n      <CopilotPopup\n        instructions={\"You are assisting the user as best as you can. Answer in the best way possible given the data you have.\"}\n        labels={{\n          title: \"Popup Assistant\",\n          initial: \"Need any help?\",\n        }}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Messages from Chat History in LangGraph\nDESCRIPTION: Shows how to modify the message history in a LangGraph node by using the RemoveMessage class to remove all messages from the current state. This demonstrates message manipulation within the agent workflow.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/concepts/message-management.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_core.messages import RemoveMessage\n\ndef a_node(state: AgentState, config):\n    # ...\n    return {\"messages\":  [RemoveMessage(id=m.id) for m in state['messages']]}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Interrupt Types in LangGraph Agent Node (TypeScript)\nDESCRIPTION: Implements multiple interrupt event triggers in a TypeScript backend agent node, using '@langchain/langgraph', '@langchain/core/messages', and '@langchain/openai'. The code demonstrates how to conditionally request approval or ask for a name, add interrupt results to agent state, and invoke an LLM based on the completed state, returning all accumulated messages and agent state fields.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { interrupt } from \"@langchain/langgraph\"; // [!code highlight]\nimport { SystemMessage } from \"@langchain/core/messages\";\nimport { ChatOpenAI } from \"@langchain/openai\";\n\n// ... your full state definition\n\nasync function chat_node(state: AgentState, config: RunnableConfig) {\n  state.approval = await interrupt({ type: \"approval\", content: \"please approve\" }); // [!code highlight]\n\n  if (!state.agentName) {\n    state.agentName = await interrupt({ type: \"ask\", content: \"Before we start, what would you like to call me?\" }); // [!code highlight]\n  }\n\n  // Tell the agent its name\n  const systemMessage = new SystemMessage({\n    content: `You are a helpful assistant...`,\n  });\n\n  const response = await new ChatOpenAI({ model: \"gpt-4o\" }).invoke(\n    [systemMessage, ...state.messages],\n    config\n  );\n\n  return {\n    ...state,\n    messages: response,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Router Mode in CopilotKit with TSX\nDESCRIPTION: Shows how to set up the CopilotKit provider component in Router Mode, which acts as a central hub for dynamically routing requests between different agents based on user input. Requires setting up an LLM adapter and runtime URL.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/multi-agent-flows.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<CopilotKit runtimeUrl=\"<copilot-runtime-url>\">\n  {/* Your application components */}\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Implementing Copilot Runtime Endpoint in Next.js Pages Router\nDESCRIPTION: This snippet shows how to create a route to handle the /api/copilotkit endpoint using Next.js Pages Router. It sets up a CopilotRuntime instance with a langGraphPlatformEndpoint and uses copilotRuntimeNextJSPagesRouterEndpoint to handle requests.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-langgraph-endpoint.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  CopilotRuntime,\n  OpenAIAdapter,\n  copilotRuntimeNextJSPagesRouterEndpoint,\n  langGraphPlatformEndpoint\n} from '@copilotkit/runtime';\nimport OpenAI from \"openai\";\nimport { NextApiRequest, NextApiResponse } from 'next';\n\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\nconst serviceAdapter = new OpenAIAdapter({ openai } as any);\n\nconst handler = async (req: NextApiRequest, res: NextApiResponse) => {\n  const runtime = new CopilotRuntime({\n    remoteEndpoints: [\n      langGraphPlatformEndpoint({\n        deploymentUrl: \"your-api-url\", // make sure to replace with your real deployment url\n        langsmithApiKey: process.env.LANGSMITH_API_KEY, // only used in LangGraph Platform deployments\n        agents: [ // List any agents available under \"graphs\" list in your langgraph.json file; give each a description explaining when it should be called.\n          {\n            name: 'my_agent',\n            description: 'A helpful LLM agent.',\n            assistantId: 'your-assistant-ID' // optional, but recommended!\n          }\n        ]\n      }),\n    ],\n  });\n\n  const handleRequest = copilotRuntimeNextJSPagesRouterEndpoint({\n    endpoint: '/api/copilotkit',\n    runtime,\n    serviceAdapter,\n  });\n\n  return await handleRequest(req, res);\n};\n\nexport default handler;\n```\n\n----------------------------------------\n\nTITLE: Implementing Input/Output Schema in Python\nDESCRIPTION: Divides the agent state into InputState, OutputState, and OverallState classes, and implements an answer_node function using these states.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/state-inputs-outputs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitState\nfrom typing import Literal\n\n# Divide the state to 3 parts\n\n# Input schema for inputs you are willing to accept from the frontend\nclass InputState(CopilotKitState):\n  question: str\n\n# Output schema for output you are willing to pass to the frontend\nclass OutputState(CopilotKitState):\n  answer: str\n\n# The full schema, including the inputs, outputs and internal state (\"resources\" in our case)\nclass OverallState(InputState, OutputState):\n  resources: List[str]\n\nasync def answer_node(state: OverallState, config: RunnableConfig):\n  \"\"\"\n  Standard chat node, meant to answer general questions.\n  \"\"\"\n\n  model = ChatOpenAI()\n\n  # add the input question in the system prompt so it's passed to the LLM\n  system_message = SystemMessage(\n    content=f\"You are a helpful assistant. Answer the question: {state.get('question')}\"\n  )\n\n  response = await model.ainvoke([\n    system_message,\n    *state[\"messages\"],\n  ], config)\n\n  # ...add the rest of the agent implementation\n\n  # extract the answer, which will be assigned to the state soon\n  answer = response.content\n\n  return {\n     \"messages\": response,\n      # include the answer in the returned state\n     \"answer\": answer\n  }\n\n\n# finally, before compiling the graph, we define the 3 state components\nbuilder = StateGraph(OverallState, input=InputState, output=OutputState)\n\n# add all the different nodes and edges and compile the graph\nbuilder.add_node(\"answer_node\", answer_node)\nbuilder.add_edge(START, \"answer_node\")\nbuilder.add_edge(\"answer_node\", END)\ngraph = builder.compile()\n```\n\n----------------------------------------\n\nTITLE: Manual State Emission Implementation\nDESCRIPTION: Demonstrates manual state emission with simulated step-by-step progress updates and delays.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/predictive-state-updates.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_emit_state\n# ...\nasync def chat_node(state: AgentState, config: RunnableConfig) -> Command[Literal[\"cpk_action_node\", \"tool_node\", \"__end__\"]]:\n    # ...\n\n    # Simulate executing steps one by one\n    steps = [\n        \"Analyzing input data...\",\n        \"Identifying key patterns...\",\n        \"Generating recommendations...\",\n        \"Formatting final output...\"\n    ]\n    \n    for step in steps:\n        self.state[\"observed_steps\"] = self.state.get(\"observed_steps\", []) + [step]\n        await copilotkit_emit_state(config, state)\n        await asyncio.sleep(1)\n\n    # ...\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { copilotkitEmitState } from \"@copilotkit/sdk-js/langgraph\";\n// ...\nasync function chat_node(state: AgentState, config: RunnableConfig) {\n    // ...\n\n    // Simulate executing steps one by one\n    const steps = [\n        \"Analyzing input data...\",\n        \"Identifying key patterns...\",\n        \"Generating recommendations...\",\n        \"Formatting final output...\"\n    ];\n    \n    for (const step of steps) {\n        state.observed_steps = [...(state.observed_steps ?? []), step];\n        copilotkitEmitState(config, state);\n        await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing AssistantMessage Component in CopilotKit\nDESCRIPTION: This snippet shows how to create a custom AssistantMessage component with a removed background color and an added avatar. It uses AssistantMessageProps and other utilities from @copilotkit/react-ui to handle markdown content and loading states.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/bring-your-own-components.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AssistantMessageProps } from \"@copilotkit/react-ui\";\nimport { useChatContext } from \"@copilotkit/react-ui\";\nimport { Markdown } from \"@copilotkit/react-ui\";\nimport { SparklesIcon } from \"@heroicons/react/24/outline\";\n\nimport { CopilotKit } from \"@copilotkit/react-core\";\nimport { CopilotSidebar } from \"@copilotkit/react-ui\";\nimport \"@copilotkit/react-ui/styles.css\";\n\nconst CustomAssistantMessage = (props: AssistantMessageProps) => {\n  const { icons } = useChatContext();\n  const { message, isLoading, subComponent } = props;\n\n  const avatarStyles = \"bg-zinc-400 border-zinc-500 shadow-lg min-h-10 min-w-10 rounded-full text-white flex items-center justify-center\";\n  const messageStyles = \"px-4 rounded-xl pt-2\";\n\n  const avatar = <div className={avatarStyles}><SparklesIcon className=\"h-6 w-6\" /></div>\n\n  return (\n    <div className=\"py-2\">\n      <div className=\"flex items-start\">\n        {!subComponent && avatar}\n        <div className={messageStyles}>\n          {message && <Markdown content={message || \"\"} /> }\n          {isLoading && icons.spinnerIcon}\n        </div>\n      </div>\n      <div className=\"my-2\">{subComponent}</div>\n    </div>\n  );\n};\n\n<CopilotKit>\n  <CopilotSidebar AssistantMessage={CustomAssistantMessage} />\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access and Sitemap for CopilotKit Docs\nDESCRIPTION: This code snippet defines the robots.txt file for the CopilotKit documentation website. It allows all web crawlers to access the site, specifies the host domain, and provides the location of the sitemap for improved search engine indexing.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nAllow: /\n\nHost: https://docs.copilotkit.ai\n\nSitemap: https://docs.copilotkit.ai/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring CopilotKit Provider in React\nDESCRIPTION: Example setup of the CopilotKit provider component in a React application's root layout file to enable Copilot functionality throughout the app.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./globals.css\";\nimport { ReactNode } from \"react\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Use the public api key you got from Copilot Cloud  */}\n        <CopilotKit publicApiKey=\"<your-copilot-cloud-public-api-key>\">\n          {children}\n        </CopilotKit>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up CopilotKit Runtime in Next.js App Router\nDESCRIPTION: TypeScript code for creating a route to handle the /api/copilotkit endpoint in Next.js App Router.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-create-endpoint.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  CopilotRuntime,\n  {{adapterImport}},\n  copilotRuntimeNextJSAppRouterEndpoint,\n} from '@copilotkit/runtime';\n{{extraImports}}\nimport { NextRequest } from 'next/server';\n\n{{clientSetup}}\n{{adapterSetup}}\nconst runtime = new CopilotRuntime();\n\nexport const POST = async (req: NextRequest) => {\n  const { handleRequest } = copilotRuntimeNextJSAppRouterEndpoint({\n    runtime,\n    serviceAdapter,\n    endpoint: '/api/copilotkit',\n  });\n\n  return handleRequest(req);\n};\n```\n\n----------------------------------------\n\nTITLE: Setting a CopilotKit API Key in the Environment File - dotenv\nDESCRIPTION: This dotenv-format snippet demonstrates how to store the CopilotKit API key for secure usage in the frontend by assigning it as an environment variable within a '.env' file. Only a single parameter 'NEXT_PUBLIC_CPK_PUBLIC_API_KEY' is set, which will be read by the application at startup. The key's value must be provided by the user.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-state-machine/README.md#2025-04-23_snippet_4\n\nLANGUAGE: dotenv\nCODE:\n```\nNEXT_PUBLIC_CPK_PUBLIC_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Defining Weather Tool for Agent in Python\nDESCRIPTION: This snippet defines a weather tool for the agent to use, including its name, description, and required parameters. It's added to the agent's available tools in the chat function.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/generative-ui/tool-based.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWEATHER_TOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"get_weather\",\n        \"description\": \"Get the weather for a given location.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"location\": {\n                    \"type\": \"string\",\n                    \"description\": \"The location to get weather for\"\n                }\n            },\n            \"required\": [\"location\"]\n        }\n    }\n}\n\n@start\nasync def chat(self):\n\n    response = await copilotkit_stream(\n        completion(\n            model=\"openai/gpt-4o\",\n            messages=[\n                {\"role\": \"system\", \"content\": prompt},\n                *self.state.get(\"messages\", [])\n            ],\n            tools=[WEATHER_TOOL],\n            stream=True\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing CrewAI Agent with CopilotKit Integration in Python\nDESCRIPTION: This snippet shows the implementation of a CrewAI agent that integrates with CopilotKit. It defines the agent's state, sets up the flow for checking user feedback, and implements the chat function that uses CopilotKit actions as tools.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/human-in-the-loop/flow.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import Literal\nfrom crewai.flow.flow import Flow, start, listen\nfrom copilotkit import CopilotKitState\nfrom copilotkit.crewai import copilotkit_stream\n\nclass AgentState(CopilotKitState):\n    pass\n\nclass EmailAgentFlow(Flow[AgentState]):\n\n    @start\n    async def check_for_user_feedback(self):\n        if len(self.state.get(\"messages\", [])) > 0:\n            last_message = self.state[\"messages\"][-1]\n            if last_message.role == \"tool\" and last_message.content == \"SEND\":\n\n            if self.state[\"messages\"][-1].content != \"SEND\":\n                self.state[\"messages\"].append({\n                  \"role\": \"system\",\n                  \"content\": \"The user declined they essay, please ask them how they'd like to improve it\"\n                })\n            else:\n              self.state[\"messages\"].append({\n                \"role\": \"system\",\n                \"content\": \"The user approved the essay, ask them if they'd like anything else\"\n              })\n\n    @listen(check_for_user_feedback)\n    async def chat():\n        system_message = {\n            \"role\": \"system\",\n            \"content\": \"You write essays. Use your tools to write an essay, don't just write it in plain text.\"\n        }\n\n        response = await copilotkit_stream(\n            completion(\n                model=\"openai/gpt-4o\",\n                messages=[\n                    system_message,\n                    *self.state.get(\"messages\", [])\n                ],\n                tools=self.state[\"copilotkit\"][\"actions\"],\n                stream=True\n            )\n        )\n\n        self.state[\"messages\"].append(response.choices[0].message)\n        return\n```\n\n----------------------------------------\n\nTITLE: Implementing LangChain Adapter for OpenAI in CopilotKit\nDESCRIPTION: Demonstrates how to use the LangChainAdapter to integrate OpenAI's ChatGPT model with CopilotKit, including tracing support for LangSmith.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_115\n\nLANGUAGE: javascript\nCODE:\n```\nconst { LangChainAdapter } = await import(\"@copilotkit/runtime\");\nconst { ChatOpenAI } = await import(\"@langchain/openai\");\n\nasync function getLangChainOpenAIAdapter() {\n  return new LangChainAdapter({\n    chainFn: async ({ messages, tools, threadId }) => {\n      const model = new ChatOpenAI({\n        modelName: \"gpt-4-1106-preview\",\n      }).bindTools(tools, {\n        strict: true,\n      });\n      return model.stream(messages, {\n        tools,\n        metadata: { conversation_id: threadId },\n      });\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ThreadId in CopilotKit Component (React/TypeScript)\nDESCRIPTION: This snippet demonstrates how to set a static threadId when initializing the CopilotKit component. This allows loading of an existing conversation thread.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/persistence/loading-message-history.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\n<CopilotKit threadId=\"37aa68d0-d15b-45ae-afc1-0ba6c3e11353\">\n  <YourApp />\n</CopilotKit>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel Function Timeout for CopilotKit\nDESCRIPTION: Increase the serverless function timeout in vercel.json to avoid timeout issues when using CopilotKit with streaming responses, as default timeouts are often too short.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n// vercel.json\n{\n     \"functions\": {\n       \"api/copilotkit/**/*\": {\n         \"maxDuration\": 60\n       }\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Agent Progress with useCoAgent and useCoAgentStateRender in React\nDESCRIPTION: This snippet demonstrates how to use CoPilotKit's React hooks to render an AI agent's progress. It uses useCoAgent to access the agent's state and useCoAgentStateRender to display real-time progress updates.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/predictive-state-updates.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCoAgent, useCoAgentStateRender } from '@copilotkit/react-core';\n\n// ...\ntype AgentState = {\n    observed_steps: string[];\n};\n\nconst YourMainContent = () => {\n    // Get access to both predicted and final states\n    const { state } = useCoAgent<AgentState>({ name: \"sample_agent\" });\n\n    // Add a state renderer to observe predictions\n    useCoAgentStateRender({\n        name: \"sample_agent\",\n        render: ({ state }) => {\n            if (!state.observed_steps?.length) return null;\n            return (\n                <div>\n                    <h3>Current Progress:</h3>\n                    <ul>\n                        {state.observed_steps.map((step, i) => (\n                            <li key={i}>{step}</li>\n                        ))}\n                    </ul>\n                </div>\n            );\n        },\n    });\n\n    return (\n        <div>\n            <h1>Agent Progress</h1>\n            {state.observed_steps?.length > 0 && (\n                <div>\n                    <h3>Final Steps:</h3>\n                    <ul>\n                        {state.observed_steps.map((step, i) => (\n                            <li key={i}>{step}</li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n        </div>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Intermediate State Emission in CopilotKit Python Agent\nDESCRIPTION: This snippet demonstrates how to use copilotkit_customize_config to set up intermediate state emission in a CopilotKit agent. It defines state keys for content and footer, and configures the emit_intermediate_state property to predictively update the frontend.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-8-progressive-state-updates.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langchain import copilotkit_customize_config, copilotkit_emit_state\n\n@tool(\"section_writer\", args_schema=SectionWriterInput, return_direct=True)\nasync def section_writer(research_query, section_title, idx, state):\n    \"\"\"\nWrites a specific section of a research report based on the query, section title, and provided sources.\n\"\"\"\n\n    # ...\n\n    # Define the state keys that we want to emit, pre-created for this tutorial\n    content_state = {\n        \"state_key\": f\"section_stream.content.{idx}.{section_id}.{section_title}\",\n        \"tool\": \"WriteSection\",\n        \"tool_argument\": \"content\"\n    }\n    footer_state = {\n        \"state_key\": f\"section_stream.footer.{idx}.{section_id}.{section_title}\",\n        \"tool\": \"WriteSection\",\n        \"tool_argument\": \"footer\"\n    }\n\n    config = copilotkit_customize_config(\n        config,\n        emit_intermediate_state=[content_state, footer_state]\n    )\n\n    # ...\n\n    # The LLM will take this new config and the tool calls\n    # we defined will be emitted to the frontend predictively.\n    response = await model.bind_tools([WriteSection]).ainvoke(lc_messages, config)\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Rendering Agent State Outside Chat Interface\nDESCRIPTION: Implementation showing how to render agent state outside of the chat interface using useCoAgent hook, allowing for flexible state display anywhere in the application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_153\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\n// ...\n\n// Define the state of the agent, should match the state of the agent in your LangGraph.\ntype AgentState = {\n  searches: {\n    query: string;\n    done: boolean;\n  }[];\n};\n\nfunction YourMainContent() {\n  // ...\n\n\n  const { state } = useCoAgent<AgentState>({\n    name: \"sample_agent\", // the name the agent is served as\n  })\n\n  // ...\n\n  return (\n    <div>\n      {/* ... */}\n      <div className=\"flex flex-col gap-2 mt-4\">\n\n        {state.searches?.map((search, index) => (\n          <div key={index} className=\"flex flex-row\">\n            {search.done ? \"✅\" : \"❌\"} {search.query}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenAI Assistant Adapter\nDESCRIPTION: Configuration example for OpenAI Assistant API integration with CopilotKit, including assistant ID and feature enablement\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_141\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopilotRuntime, OpenAIAssistantAdapter } from \"@copilotkit/runtime\";\nimport OpenAI from \"openai\";\n\nconst copilotKit = new CopilotRuntime();\n\nconst openai = new OpenAI({\n  organization: \"<your-organization-id>\",\n  apiKey: \"<your-api-key>\",\n});\n\nreturn new OpenAIAssistantAdapter({\n  openai,\n  assistantId: \"<your-assistant-id>\",\n  codeInterpreterEnabled: true,\n  fileSearchEnabled: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing CopilotKit UI Styles in React\nDESCRIPTION: Code snippet showing how to import the default CopilotKit UI styles in a React application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@copilotkit/react-ui/styles.css\";\n```\n\n----------------------------------------\n\nTITLE: Implementing FastAPI Server for LangGraph Agent\nDESCRIPTION: Python script to set up a FastAPI server that serves a LangGraph agent. It uses CopilotKit's FastAPI integration to add an endpoint for the LangGraph agent and includes a health check route.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/langgraph-platform-deployment-tabs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom fastapi import FastAPI\nimport uvicorn\nfrom copilotkit.integrations.fastapi import add_fastapi_endpoint\nfrom copilotkit import CopilotKitRemoteEndpoint, LangGraphAgent\nfrom sample_agent.agent import graph\n\nfrom dotenv import load_dotenv\nload_dotenv()\n\napp = FastAPI()\nsdk = CopilotKitRemoteEndpoint(\n    agents=[\n        LangGraphAgent(\n            name=\"sample_agent\",\n            description=\"Describe your agent here, will be used for multi-agent orchestration\",\n            graph=graph,\n        )\n    ],\n)\n\nadd_fastapi_endpoint(app, sdk, \"/copilotkit\", use_thread_pool=False)\n\n@app.get(\"/health\")\ndef health():\n    \"\"\"Health check.\"\"\"\n    return {\"status\": \"ok\"}\n\ndef main():\n    \"\"\"Run the uvicorn server.\"\"\"\n    port = int(os.getenv(\"PORT\", \"8000\"))\n    uvicorn.run(\n        \"sample_agent.demo:app\",\n        host=\"0.0.0.0\",\n        port=port,\n        reload=True,\n    )\n```\n\n----------------------------------------\n\nTITLE: Video Component Implementation in JSX/MDX\nDESCRIPTION: Embedded video component implementation showing a human-in-the-loop example with autoplay and control features.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/human-in-the-loop/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<video\n  src=\"/images/coagents/human-in-the-loop-example.mp4\"\n  className=\"rounded-lg shadow-xl\"\n  loop\n  playsInline\n  controls\n  autoPlay\n  muted\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit Packages with npm\nDESCRIPTION: Command to install the core CopilotKit packages including the UI, core functionality, and runtime components using npm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_117\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @copilotkit/react-ui @copilotkit/react-core @copilotkit/runtime\n```\n\n----------------------------------------\n\nTITLE: Opening Local Tunnel for FastAPI Server\nDESCRIPTION: Command to create a tunnel for local FastAPI server connection to Copilot Cloud.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_100\n\nLANGUAGE: bash\nCODE:\n```\nnpx copilotkit@latest dev --port 8000\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotKit Agent Lock Mode in React\nDESCRIPTION: Demonstrates how to configure CopilotKit in Agent Lock Mode, which locks the system to work with a specific named agent. This mode is useful for focused, single-workflow implementations.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/multi-agent-flows.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<CopilotKit runtimeUrl=\"<copilot-runtime-url>\" agent=\"<the-name-of-the-agent>\">\n  {/* Your application components */}\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit packages in React\nDESCRIPTION: Installs the latest CopilotKit packages for React UI and core functionality using npm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/quickstart/langgraph.mdx#2025-04-23_snippet_2\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install @copilotkit/react-ui @copilotkit/react-core\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit Dependencies with pnpm\nDESCRIPTION: This command installs the core CopilotKit React library and the UI components library using pnpm package manager.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-3-setup-copilotkit.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @copilotkit/react-core @copilotkit/react-ui\n```\n\n----------------------------------------\n\nTITLE: LLM-Driven Financing Stage Handler\nDESCRIPTION: Implementation of a financing stage that allows LLM to choose between different transition paths based on user input and context.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useStageSellFinancing() {\n  const { stage, setStage } = useGlobalState();\n  const isActive = stage === \"sellFinancing\";\n\n  // Provide context to the AI\n  useCopilotReadable({\n    description: \"Financing Information\",\n    value: \"Current promotion: 0% financing for 60 months...\",\n    available: isActive ? \"enabled\" : \"disabled\"\n  });\n\n  // Different paths based on financing choice by user, LLM will decide which path to take\n  useCopilotAction({\n    name: \"selectFinancing\",\n    description: \"Select the financing option\",\n    available: stage === \"sellFinancing\" ? \"enabled\" : \"disabled\",\n    handler: () => setStage(\"getFinancingInfo\"),\n  }, [stage]);\n \n  useCopilotAction({\n    name: \"selectNoFinancing\",\n    description: \"Select the no financing option\",\n    available: stage === \"sellFinancing\" ? \"enabled\" : \"disabled\",\n    handler: () => setStage(\"getPaymentInfo\"),\n  }, [stage]);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers. The server can be started using npm, yarn, pnpm, or bun.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/examples/next-pages-router/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Tool Call Emission in Chat Node\nDESCRIPTION: Updates the chat node to emit specific tool calls for front-end handling using CopilotKit configuration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-6-human-in-the-loop.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langchain import copilotkit_customize_config\nasync def chat_node(state: AgentState, config: RunnableConfig):\n    \"\"\"Handle chat operations\"\"\"\n    config = copilotkit_customize_config(\n        config,\n        emit_tool_calls=[\"add_trips\", \"update_trips\", \"delete_trips\"],\n    )\n```\n\n----------------------------------------\n\nTITLE: Overriding Default System Message for CopilotChat\nDESCRIPTION: This code demonstrates how to completely override the default system message for a CopilotChat component, which should only be used when other customization options are insufficient.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_135\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\nconst CustomCopilot: React.FC = () => (\n  <CopilotChat\n    instructions=\"You are a knowledgeable tax preparation assistant. Provide accurate and concise answers to tax-related questions, guiding users through the tax filing process.\"\n    labels={{\n      title: \"Tax Preparation Assistant\",\n      initial: \"How can I assist you with your taxes today?\",\n    }}\n    makeSystemMessage={myCustomTaxSystemMessage}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Node with Interrupts in TypeScript\nDESCRIPTION: TypeScript implementation of the chat node function using CopilotKit's interrupt functionality for collecting agent names. Integrates with LangChain and OpenAI for message processing and chat completions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { copilotKitInterrupt } from \"@copilotkit/sdk-js/langgraph\";\nimport { SystemMessage } from \"@langchain/core/messages\";\nimport { ChatOpenAI } from \"@langchain/openai\";\n\nasync function chat_node(state: AgentState, config: RunnableConfig) {\n  if (!state.agentName) {\n    const { answer, messages } = copilotKitInterrupt({\n      action: 'AskName',\n      args: { message: 'Before we start, what would you like to call me?' },\n    });\n    state.agentName = answer\n    state.messages = [...state.message, ...messages]\n  }\n\n  const systemMessage = new SystemMessage({\n    content: `You are a helpful assistant named ${state.agentName}...`,\n  });\n\n  const response = await new ChatOpenAI({ model: \"gpt-4o\" }).invoke(\n    [systemMessage, ...state.messages],\n    config\n  );\n\n  return {\n    ...state,\n    messages: [...state.messages, response],\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CrewAIAgent Instance\nDESCRIPTION: Example of creating a CrewAIAgent for handling email-related tasks using the CrewAI framework.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_106\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CrewAIAgent\n\n\nCrewAIAgent(\n    name=\"email_agent_crew\",\n    description=\"This crew based agent sends emails\",\n    crew=SendEmailCrew(),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing GoogleGenerativeAIAdapter with CopilotRuntime\nDESCRIPTION: Example showing how to initialize and configure the GoogleGenerativeAIAdapter with CopilotRuntime. Demonstrates setting up the Google Generative AI client and creating an adapter instance with a specific model.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/llm-adapters/GoogleGenerativeAIAdapter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopilotRuntime, GoogleGenerativeAIAdapter } from \"@copilotkit/runtime\";\nconst { GoogleGenerativeAI } = require(\"@google/generative-ai\");\n\nconst genAI = new GoogleGenerativeAI(process.env[\"GOOGLE_API_KEY\"]);\n\nconst copilotKit = new CopilotRuntime();\n\nreturn new GoogleGenerativeAIAdapter({ model: \"gemini-1.5-pro\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring LangServe Integration in CopilotRuntime\nDESCRIPTION: This code snippet demonstrates how to modify the CopilotRuntime configuration to include LangServe integration. It shows the syntax for adding a LangServe function source with a chainUrl, name, and description, allowing the copilot to connect to external LangChain chains.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions/langserve-backend-actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst runtime = new CopilotRuntime({\n  // ... existing configuration\n  langserve: [ // [!code highlight:7]\n    {\n      chainUrl: \"http://my-langserve.chain\",\n      name: \"performResearch\",\n      description: \"Performs research on a given topic.\",\n    },\n  ],\n});\n\n// ... rest of your route definition\n```\n\n----------------------------------------\n\nTITLE: Rendering Agent State Outside Chat using TypeScript and React\nDESCRIPTION: This TypeScript and React code shows how to use the useCoAgent hook to render the state of an agent outside the chat interface. It retrieves the agent's state and renders the searches with their status.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/generative-ui/agentic.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\n\ntype AgentState = {\n  searches: {\n    query: string;\n    done: boolean;\n  }[];\n};\n\nfunction YourMainContent() {\n  const { state } = useCoAgent<AgentState>({\n    name: \"sample_agent\", // the name the agent is served as\n  })\n\n  return (\n    <div>\n      {/* ... */}\n      <div className=\"flex flex-col gap-2 mt-4\">\n        {state.searches?.map((search, index) => (\n          <div key={index} className=\"flex flex-row\">\n            {search.done ? \"✅\" : \"❌\"} {search.query}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State in TypeScript\nDESCRIPTION: TypeScript implementation of agent state using Annotation and CopilotKitStateAnnotation with a chat node function.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/in-app-agent-read.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Annotation } from \"@langchain/langgraph\";\nimport { CopilotKitStateAnnotation } from \"@copilotkit/sdk-js/langgraph\";\n\nexport const AgentStateAnnotation = Annotation.Root({\n    language: Annotation<\"english\" | \"spanish\">,\n    ...CopilotKitStateAnnotation.spec,\n});\nexport type AgentState = typeof AgentStateAnnotation.State;\n\nasync function chat_node(state: AgentState, config: RunnableConfig) {\n  // If language is not defined, use a default value.\n  const language = state.language ?? 'spanish'\n\n  // ... add the rest of the node implementation and use the language variable\n\n  return {\n    // ... add the rest of state to return\n    // return the language to make it available for the next nodes & frontend to read\n    language\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Agent Demo\nDESCRIPTION: Command to run the agent demo using Poetry. This should be executed after setting up the environment and installing dependencies.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-shared-state/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npoetry run demo\n```\n\n----------------------------------------\n\nTITLE: Dynamically Switching Threads in CopilotKit\nDESCRIPTION: This code shows how to make the threadId dynamic in CopilotKit. It uses useState to manage the threadId state and passes it to the CopilotKit component. The YourApp component receives a setThreadId function to change the thread dynamically.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/persistence/loading-message-history.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nconst Page = () => {\n  const [threadId, setThreadId] = useState(\"af2fa5a4-36bd-4e02-9b55-2580ab584f89\");\n  return (\n    <CopilotKit threadId={threadId}>\n      <YourApp setThreadId={setThreadId} />\n    </CopilotKit>\n  )\n}\n\nconst YourApp = () => {\n  return (\n    <Button onClick={() => setThreadId(\"679e8da5-ee9b-41b1-941b-80e0cc73a008\")}>\n      Change Thread\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Object Parameter Definition in JavaScript\nDESCRIPTION: Example demonstrating how to define complex object parameters with nested attributes for address data structures.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotAction.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  name: \"addresses\",\n  description: \"The addresses extracted from the text.\",\n  type: \"object[]\",\n  attributes: [\n    {\n      name: \"street\",\n      type: \"string\",\n      description: \"The street of the address.\",\n    },\n    {\n      name: \"city\",\n      type: \"string\",\n      description: \"The city of the address.\",\n    },\n    // ...\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Agent State with useCoAgent Hook (TSX)\nDESCRIPTION: This code shows how to use the useCoAgent hook to load the state of a specific agent (research_agent) for the given thread ID. The state will be restored based on the previously set threadId.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/persistence/loading-agent-state.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { state } = useCoAgent({ name: \"research_agent\" });\n\n// state will now be the state of research_agent in the thread id given above\n```\n\n----------------------------------------\n\nTITLE: Configuring ChatOpenAI Model with StepProgressTool in TypeScript\nDESCRIPTION: This snippet sets up a ChatOpenAI model with a custom StepProgressTool for recording task progress. It defines the tool's schema, creates the model instance, and processes the response to extract progress steps.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/predictive-state-updates.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst stepProgress = createTool(\n    {\n        name: \"StepProgressTool\",\n        description: \"Records progress by updating the steps array\",\n        schema: z.object({\n            steps: z.array(z.string()),\n        }),\n    }\n);\n\nconst model = new ChatOpenAI({\n    model: \"gpt-4o\",\n}).bindTools([stepProgress]);\n\nconst system_message = new SystemMessage(\"You are a task performer. Pretend doing tasks you are given, report the steps using StepProgressTool.\")\nconst response = await model.invoke([system_message, ...state.messages], modifiedConfig);\n\n\nif (response.tool_calls?.length) {\n    return {\n        messages: response;\n        observed_steps: response.tool_calls[0].args.steps,\n    }\n\nreturn { messages: response };\n```\n\n----------------------------------------\n\nTITLE: Saving and Restoring Message History with localStorage in React\nDESCRIPTION: Code example demonstrating how to save and restore message history using localStorage. It handles different message types (TextMessage, ActionExecutionMessage, ResultMessage) and uses the useCopilotMessagesContext hook to manage state.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotMessagesContext } from \"@copilotkit/react-core\";\nimport { ActionExecutionMessage, ResultMessage, TextMessage } from \"@copilotkit/runtime-client-gql\";\n\nconst { messages, setMessages } = useCopilotMessagesContext();\n\n// save to local storage when messages change\nuseEffect(() => {\n  if (messages.length !== 0) {\n    localStorage.setItem(\"copilotkit-messages\", JSON.stringify(messages));\n  }\n}, [JSON.stringify(messages)]);\n\n// initially load from local storage\nuseEffect(() => {\n  const messages = localStorage.getItem(\"copilotkit-messages\");\n  if (messages) {\n    const parsedMessages = JSON.parse(messages).map((message: any) => {\n      if (message.type === \"TextMessage\") {\n        return new TextMessage({\n          id: message.id,\n          role: message.role,\n          content: message.content,\n          createdAt: message.createdAt,\n        });\n      } else if (message.type === \"ActionExecutionMessage\") {\n        return new ActionExecutionMessage({\n          id: message.id,\n          name: message.name,\n          scope: message.scope,\n          arguments: message.arguments,\n          createdAt: message.createdAt,\n        });\n      } else if (message.type === \"ResultMessage\") {\n        return new ResultMessage({\n          id: message.id,\n          actionExecutionId: message.actionExecutionId,\n          actionName: message.actionName,\n          result: message.result,\n          createdAt: message.createdAt,\n        });\n      } else {\n        throw new Error(`Unknown message type: ${message.type}`);\n      }\n    });\n    setMessages(parsedMessages);\n  }\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit Python Package\nDESCRIPTION: Commands to install the CopilotKit Python package using pip, with optional crewai integration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/RemoteEndpoints.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install copilotkit\n# or to include crewai\npip install copilotkit[crewai]\n```\n\n----------------------------------------\n\nTITLE: Handling Interrupts in CopilotKit-LangGraph Agent Node (TypeScript)\nDESCRIPTION: This TypeScript snippet illustrates how to use 'copilotKitInterrupt' from '@copilotkit/sdk-js/langgraph' to send an interrupt message, collect user input, and update backend agent state accordingly. It expects 'AgentState' and 'RunnableConfig' as arguments. It updates both the messages list and the agent name, returning the updated state to ensure subsequent LLM steps have access to the interrupt-triggered messages and metadata.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { copilotKitInterrupt } from \"@copilotkit/sdk-js/langgraph\";\n\n// ...\nasync function chat_node(state: AgentState, config: RunnableConfig) {\n    const { agentName, messages } = copilotKitInterrupt({ message: \"Before we start, what would you like to call me?\" });\n    state.messages = [...state.messages, ...messages];\n    state.agentName = agentName;\n    // ... add the rest of the node implementation, including LLM calls etc.\n\n    // Don't forget to return the messages list with our newly added interrupt messages, and the new agent name\n    return { messages: state.messages, agentName: state.agentName }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Environment Variables\nDESCRIPTION: Example of the required environment variables to be set in the .env file for the agent component. Includes API keys for OpenAI and Google Maps.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-travel/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=...\nGOOGLE_MAPS_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Implementing Interrupt Logic in Python LangGraph Agent\nDESCRIPTION: Adds interrupt functionality to chat node to prompt for agent name using LangGraph's interrupt feature\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom langgraph.types import interrupt\nfrom langchain_core.messages import SystemMessage\nfrom langchain_openai import ChatOpenAI\nfrom copilotkit import CopilotKitState\n\nclass AgentState(CopilotKitState):\n    agent_name: str\n\ndef chat_node(state: AgentState, config: RunnableConfig):\n    if not state.get(\"agent_name\"):\n        state[\"agent_name\"] = interrupt(\"Before we start, what would you like to call me?\")\n\n    system_message = SystemMessage(\n        content=f\"You are a helpful assistant named {state.get('agent_name')}...\"\n    )\n\n    response = ChatOpenAI(model=\"gpt-4o\").invoke(\n        [system_message, *state[\"messages\"]],\n        config\n    )\n\n    return {\n        **state,\n        \"messages\": response,\n    }\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Setup\nDESCRIPTION: Template for setting up the required API keys in the .env file for OpenAI and Google Maps services.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-2-langgraph-agent.mdx#2025-04-23_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nOPENAI_API_KEY=<your-openai-api-key>\nGOOGLE_MAPS_API_KEY=<your-google-maps-api-key>\n```\n\n----------------------------------------\n\nTITLE: Using CoAgent State in TypeScript React Component\nDESCRIPTION: This snippet shows how to use the useCoAgent hook in a React component to access and log the agent state.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_145\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\n\ntype AgentState = {\n  question: string;\n  answer: string;\n}\n\nconst { state } = useCoAgent<AgentState>({\n  name: \"sample_agent\",\n  initialState: {\n    question: \"How's is the weather in SF?\",\n  }\n});\n\nconsole.log(state) // You can expect seeing \"answer\" change, while the others are not returned from the agent\n```\n\n----------------------------------------\n\nTITLE: Rendering Arbitrary Tool Calls with CopilotKit\nDESCRIPTION: This code snippet shows how to create a catch-all action to render any tool call that doesn't have a specific UI component defined. It displays the tool name, arguments, and completion status for arbitrary tool calls.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/generative-ui/tool-based.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  useCopilotAction,\n  CatchAllActionRenderProps,\n} from \"@copilotkit/react-core\";\n\nuseCopilotAction({\n  name: \"*\",\n  followUp: false,\n  render: ({ name, args, status, result }: CatchAllActionRenderProps<[]>) => {\n    return (\n      <div className=\"m-4 p-4 bg-gray-100 rounded shadow\">\n        <h2 className=\"text-sm font-medium\">Tool: {name}</h2>\n        <pre className=\"mt-2 text-xs overflow-auto\">\n          {JSON.stringify(args, null, 2)}\n        </pre>\n        {status === \"complete\" && (\n          <div className=\"mt-2 text-xs text-green-600\">✓ Complete</div>\n        )}\n      </div>\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Version History Entry Format in Markdown\nDESCRIPTION: Standard format for documenting version changes and patch updates in a markdown changelog file, including dependencies and version numbers\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/react-textarea/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- 1fc7fa5: test changelog\n- db3d539: test release notes\n- c4a6aa5: test release notes\n- e5d588d: test changelog\n- 4ae197e: Test release notes\n- 9b3bdc2: test release notes\n- Updated dependencies [72f9e58]\n- Updated dependencies [db3d539]\n- Updated dependencies [e5d588d]\n- Updated dependencies [4211318]\n- Updated dependencies [9b3bdc2]\n- Updated dependencies [d431537]\n  - @copilotkit/runtime-client-gql@1.5.8\n  - @copilotkit/react-core@1.5.8\n  - @copilotkit/shared@1.5.8\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Template for setting up OpenAI and Google Maps API keys in the .env file\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-2-langgraph-agent.mdx#2025-04-23_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nOPENAI_API_KEY=<your-openai-api-key>\nGOOGLE_MAPS_API_KEY=<your-google-maps-api-key>\n```\n\n----------------------------------------\n\nTITLE: Implementing Frontend Action with useCopilotAction in React\nDESCRIPTION: Demonstrates how to create a frontend action using the useCopilotAction hook to enable an AI agent to trigger UI alerts. The action includes parameter definition and handler implementation.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/frontend-actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotAction } from \"@copilotkit/react-core\"\n\nexport function Page() {\n  useCopilotAction({\n    name: \"sayHello\",\n    description: \"Say hello to the user\",\n    available: \"remote\",\n    parameters: [\n      {\n        name: \"name\",\n        type: \"string\",\n        description: \"The name of the user to say hello to\",\n        required: true,\n      },\n    ],\n    handler: async ({ name }) => {\n      alert(`Hello, ${name}!`);\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Actions for CopilotKit\nDESCRIPTION: Setting up backend actions for secure server-side processing, including internet search functionality.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-chat-with-your-data/README.md#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst runtime = new CopilotRuntime({\n  actions: ({properties, url}) => {\n    return [\n      {\n        name: \"searchInternet\",\n        description: \"Searches the internet for information.\",\n        parameters: [\n          {\n            name: \"query\",\n            type: \"string\",\n            description: \"The query to search the internet for.\",\n            required: true,\n          },\n        ],\n        handler: async ({query}: {query: string}) => {\n          // can safely reference sensitive information like environment variables\n          const tvly = tavily({ apiKey: process.env.TAVILY_API_KEY });\n          return await tvly.search(query, {max_results: 5});\n        },\n      },\n    ]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Assistant Message Component in React\nDESCRIPTION: Implementation of a custom assistant message component to style AI responses matching the dashboard's design system.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-chat-with-your-data/README.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const CustomAssistantMessage = (props: AssistantMessageProps) => {\n  const { message, isLoading, subComponent } = props;\n\n  return (\n    <div className=\"pb-4\">\n      {(message || isLoading) && \n        <div className=\"bg-white dark:bg-gray-800 p-4 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm\">\n          <div className=\"text-sm text-gray-700 dark:text-gray-300\">\n            {message && <Markdown content={message} />}\n            {isLoading && (\n              <div className=\"flex items-center gap-2 text-xs text-blue-500\">\n                <Loader className=\"h-3 w-3 animate-spin\" />\n                <span>Thinking...</span>\n              </div>\n            )}\n          </div>\n        </div>\n      }\n      \n      {subComponent && <div className=\"mt-2\">{subComponent}</div>}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Stage Two of a State Machine in CopilotKit with TypeScript\nDESCRIPTION: This code defines the second stage of a conversation state machine that adds pirate-themed instructions for greeting the user by name. It demonstrates how to add additional stages to the state machine pattern.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotAdditionalInstructions } from \"@copilotkit/react-core\";\n\n// ...\n\nfunction useStageTwo(stage: string) => void) {\n  // Add stage-specific instructions - only available in stage \"two\"\n  useCopilotAdditionalInstructions({\n    instructions: \"Talk to the user about their name and refer to them like a pirate would.\",\n    available: stage === \"two\" ? \"available\" : \"disabled\"\n  })\n\n  // ...\n}\n\n// Any additional stages you want to add...\n```\n\n----------------------------------------\n\nTITLE: Defining a CopilotKit Action Handler for Car Configuration - TypeScript/React (TSX)\nDESCRIPTION: This code snippet defines a CopilotKit action named 'updateCarConfiguration' using the 'useCopilotAction' hook in a TypeScript/React environment. It specifies structured parameters (with types, requirement status, and descriptions), and provides an async handler to process the update. Dependencies include React, CopilotKit, and suitable TypeScript configuration. Inputs are user actions or context triggering CopilotKit, outputs are updated car configuration state. Assumes integration into a staged conversational flow and requires CopilotKit's context provider.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-state-machine/README.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// Example from use-stage-build-car.tsx\nuseCopilotAction({\n  name: \"updateCarConfiguration\",\n  description: \"Update the car configuration based on user preferences\",\n  parameters: [\n    {\n      name: \"model\",\n      type: \"string\",\n      required: true,\n      description: \"The car model selected by the user\"\n    },\n    // Other parameters...\n  ],\n  handler: async (action) => {\n    // Update state with the new configuration\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Frontend Paired Action with React\nDESCRIPTION: Creates a frontend component that pairs with the backend fetchUser action using useCopilotAction hook. Handles the display of user data returned from the backend operation.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/front-backend-action-pairing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\" // only necessary if you are using Next.js with the App Router.\nimport { useCopilotAction } from \"@copilotkit/react-core\";\n\nexport function MyComponent() {\nconst [userName, setUserName] = useState<string>('stranger');\n\n// Define Copilot action\nuseCopilotAction({\n    name: \"displayUser\",\n    description: \"Display the user name fetched from the backend\",\n    pairedAction: \"fetchUser\",\n    available: \"frontend\",\n    parameters: [\n    {\n        name: \"name\",\n        type: \"string\",\n        description: \"The user name\",\n    },\n    ],\n    handler: async ({ name }) => {\n        setUserName(name);\n    },\n});\n\nreturn (\n    <h1>\n        hello {userName}\n    </ul>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to run the Next.js development server using different package managers. This allows developers to start the local development environment for the Next.js application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter/ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Streaming with Copilotkit\nDESCRIPTION: Example of wrapping LiteLLM completion function with copilotkit_stream to enable message and tool call streaming to the frontend. Uses GPT-4 model and includes system prompt and message history.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/concepts/copilotkit-stream.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresponse = copilotkit_stream(\n    completion(\n        model=\"openai/gpt-4o\",\n        messages=[\n            {\"role\": \"system\", \"content\": my_prompt},\n            *self.state[\"messages\"]\n        ],\n        stream=True\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering DeleteTrips Component for Trip Deletion in React TSX\nDESCRIPTION: This component displays a list of trips to be deleted and includes action buttons for user confirmation. It uses the ActionButtons component to handle user decisions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-6-human-in-the-loop.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nimport { Trip } from \"@/lib/types\";\nimport { PlaceCard } from \"@/components/PlaceCard\";\nimport { X, Trash } from \"lucide-react\";\nimport { ActionButtons } from \"./ActionButtons\";\nimport { RenderFunctionStatus } from \"@copilotkit/react-core\";\n\nexport type DeleteTripsProps = {\n  args: any;\n  status: RenderFunctionStatus;\n  handler: any;\n  trips: Trip[];\n};\n\nexport const DeleteTrips = ({ args, status, handler, trips }: DeleteTripsProps) => {\n  const tripsToDelete = trips.filter((trip: Trip) => args?.trip_ids?.includes(trip.id));\n\n  return (\n    <div className=\"space-y-4 w-full bg-secondary p-6 rounded-lg\">\n    <h1 className=\"text-sm\">The following trips will be deleted:</h1>\n      {status !== \"complete\" && tripsToDelete?.map((trip: Trip) => (\n        <div key={trip.id} className=\"flex flex-col gap-4\">\n          <>\n            <hr className=\"my-2\" />\n            <div className=\"flex flex-col gap-4\">\n            <h2 className=\"text-lg font-bold\">{trip.name}</h2>\n            {trip.places?.map((place) => (\n              <PlaceCard key={place.id} place={place} />\n            ))}\n            </div>\n          </>\n        </div>\n      ))}\n      { status !== \"complete\" && (\n        <ActionButtons\n          status={status} \n          handler={handler} \n          approve={<><Trash className=\"w-4 h-4 mr-2\" /> Delete</>} \n          reject={<><X className=\"w-4 h-4 mr-2\" /> Cancel</>} \n        />\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing UI Dependencies with pnpm\nDESCRIPTION: This command installs the required dependencies for the UI component using pnpm package manager.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter-crewai-crews/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd ./ui\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in Agent .env (Bash)\nDESCRIPTION: Navigates into the `agent` directory, creates or overwrites a `.env` file there with the `OPENAI_API_KEY`, and then navigates back to the parent directory. Replace `your_api_key_here` with a valid OpenAI API key. This is required for the agent backend.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/demo-viewer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# In the agent directory\ncd agent\necho \"OPENAI_API_KEY=your_api_key_here\" > .env\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Advanced Agent State Management with Run Hints\nDESCRIPTION: Advanced implementation showing how to re-run the agent with state change hints using the useCoAgent hook.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_178\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\nimport { TextMessage, MessageRole } from \"@copilotkit/runtime-client-gql\";\n\nfunction YourMainContent() {\n  const { state, setState, run } = useCoAgent<AgentState>({\n    name: \"sample_agent\",\n    initialState: { language: \"spanish\" }  // optionally provide an initial state\n  });\n\n  const toggleLanguage = () => {\n    const newLanguage = state.language === \"english\" ? \"spanish\" : \"english\";\n    setState({ language: newLanguage });\n\n    run(({ previousState, currentState }) => {\n      return new TextMessage({\n        role: MessageRole.User,\n        content: `the language has been updated to ${currentState.language}`,\n      });\n    });\n  };\n\n  return (\n    // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Guardrails in CopilotKit React Component\nDESCRIPTION: Demonstrates how to set up content moderation guardrails using the CopilotKit React component. It shows configuration of invalid and valid topics for content filtering.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_113\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nexport default function App() {\n  return (\n    <CopilotKit\n      publicApiKey={process.env.COPILOTKIT_PUBLIC_API_KEY}\n      guardrails_c={{\n        // Topics to explicitly block\n        invalidTopics: [\"politics\", \"explicit-content\", \"harmful-content\"],\n        // Topics to explicitly allow\n        validTopics: [\"business\", \"technology\", \"general-assistance\"],\n      }}\n    >\n      {/* Your app */}\n    </CopilotKit>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CopilotTextarea Implementation with Simple Configuration\nDESCRIPTION: Example component showing a basic implementation of CopilotTextarea with state management and minimal configuration for AI suggestions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/copilot-textarea.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FC, useState } from \"react\";\nimport { CopilotTextarea } from '@copilotkit/react-textarea';\n\nconst ExampleComponent: FC = () => {\n  const [text, setText] = useState<string>('');\n\n  return (\n    <CopilotTextarea \n      className=\"w-full p-4 border border-gray-300 rounded-md\"\n      value={text}\n      onValueChange={setText}\n      \n      autosuggestionsConfig={{\n        textareaPurpose: \"the body of an email message\",\n        chatApiConfigs: {},\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotTextarea Component in React\nDESCRIPTION: This code snippet shows how to replace a standard textarea with a CopilotTextarea component in a React application. It includes the import statement, component implementation with props, and configuration for AI-assisted suggestions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-powered-textarea/step-3-copilot-textarea.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// ... the rest of the file\n\nimport { CopilotTextarea } from \"@copilotkit/react-textarea\"; // [!code highlight]\n\nexport function Reply() {\n  // ...\n  return (\n    <div className=\"mt-4 pt-4 space-y-2 bg-background p-4 rounded-md border\">\n      <CopilotTextarea // [!code highlight]\n        className=\"min-h-40 border h-40 p-2 overflow-hidden\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        placeholder=\"Write your reply...\"\n        // [!code highlight:5]\n        autosuggestionsConfig={{\n          textareaPurpose: `Assist me in replying to this email thread. Remember all important details.`,\n          chatApiConfigs: {}\n        }}\n      />\n      <Button disabled={!input} onClick={handleReply}>\n        Reply\n      </Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Re-running Agent with State Changes\nDESCRIPTION: This TypeScript snippet shows advanced usage of the useCoAgent hook, including re-running the agent with a hint about state changes using the run function.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/shared-state/in-app-agent-write.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\nimport { TextMessage, MessageRole } from \"@copilotkit/runtime-client-gql\";\n\n// ...\n\nfunction YourMainContent() {\n  const { state, setState, run } = useCoAgent<AgentState>({\n    name: \"sample_agent\",\n    initialState: { language: \"spanish\" }  // optionally provide an initial state\n  });\n\n  // setup to be called when some event in the app occurs\n  const toggleLanguage = () => {\n    const newLanguage = state.language === \"english\" ? \"spanish\" : \"english\";\n    setState({ language: newLanguage });\n\n    // re-run the agent and provide a hint about what's changed\n    run(({ previousState, currentState }) => {\n      return new TextMessage({\n        role: MessageRole.User,\n        content: `the language has been updated to ${currentState.language}`,\n      });\n    });\n  };\n\n  return (\n    // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running a Copilot Agent - CopilotKit Python SDK - Python\nDESCRIPTION: This Python code initializes a Copilot agent using the CopilotKit SDK. After importing the Copilot class, it creates an instance, adds a custom tool, and runs the agent with a task description. Dependencies include the CopilotKit SDK and any custom tools provided by the user. Inputs include the agent's task prompt; outputs are the agent's responses. The usage pattern is modular, extensible, and allows FastAPI-ready endpoints or CrewAI options if desired.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/sdk-python/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import Copilot\n\n# Initialize a copilot\ncopilot = Copilot()\n\n# Add your tools and configure the copilot\ncopilot.add_tool(my_custom_tool)\n\n# Run the copilot\nresponse = copilot.run(\"Your task description here\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom UI Components in Chat with useCopilotAction\nDESCRIPTION: Illustrates how to use the useCopilotAction hook to render custom UI components within the chat interface, such as a calendar meeting card.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\n\"use client\" // only necessary if you are using Next.js with the App Router.\nimport { useCopilotAction } from \"@copilotkit/react-core\";\n\nexport function YourComponent() {\n  useCopilotAction({\n    name: \"showCalendarMeeting\",\n    description: \"Displays calendar meeting information\",\n    parameters: [\\\n      {\\\n        name: \"date\",\\\n        type: \"string\",\\\n        description: \"Meeting date (YYYY-MM-DD)\",\\\n        required: true\\\n      },\\\n      {\\\n        name: \"time\",\\\n        type: \"string\",\\\n        description: \"Meeting time (HH:mm)\",\\\n        required: true\\\n      },\\\n      {\\\n        name: \"meetingName\",\\\n        type: \"string\",\\\n        description: \"Name of the meeting\",\\\n        required: false\\\n      }\\\n    ],\n\n    render: ({ status, args }) => {\n      const { date, time, meetingName } = args;\n\n      if (status === 'inProgress') {\n        return <LoadingView />; // Your own component for loading state\n      } else {\n        const meetingProps: CalendarMeetingCardProps = {\n          date: date,\n          time,\n          meetingName\n        };\n        return <CalendarMeetingCardComponent {...meetingProps} />;\n      }\n    },\n  });\n\n  return (\n    <>...</>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Object Parameters for Copilot Actions\nDESCRIPTION: Example showing how to define complex object parameters with nested attributes for a Copilot action. This allows the Copilot to work with structured data like address objects.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: \"addresses\",\n  description: \"The addresses extracted from the text.\",\n  type: \"object[]\",\n  attributes: [\\\n    {\\\n      name: \"street\",\\\n      type: \"string\",\\\n      description: \"The street of the address.\",\\\n    },\\\n    {\\\n      name: \"city\",\\\n      type: \"string\",\\\n      description: \"The city of the address.\",\\\n    },\\\n    // ...\\\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State Annotation in TypeScript\nDESCRIPTION: Creates an AgentState annotation in TypeScript using Annotation.Root, including CopilotKitStateAnnotation and custom properties.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/state-inputs-outputs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Annotation } from \"@langchain/langgraph\";\nimport { CopilotKitStateAnnotation } from \"@copilotkit/sdk-js/langgraph\";\n\nconst AgentState = Annotation.Root({\n  ...CopilotKitStateAnnotation.spec,\n  question: Annotation<string>,\n  answer: Annotation<string>,\n  resources: Annotation<string[]>,\n})\n```\n\n----------------------------------------\n\nTITLE: CopilotKitConfig Function Signatures\nDESCRIPTION: Function signatures for merge_state and convert_messages functions used in CopilotKitConfig for customizing CopilotKit's interaction with LangGraph.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/LangGraphAgent.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef merge_state(\n    *,\n    state: dict,\n    messages: List[BaseMessage],\n    actions: List[Any],\n    agent_name: str\n):\n    # ...implementation...\n\ndef convert_messages(messages: List[Message]):\n    # ...implementation...\n```\n\n----------------------------------------\n\nTITLE: CTA Cards Component Implementation in JSX/MDX\nDESCRIPTION: Call-to-action cards component implementation for displaying flow-based HITL documentation links.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/human-in-the-loop/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CTACards\n  columns={1}\n  cards={[\n    {\n      icon: Share2,\n      title: \"Flow-based\",\n      description:\n        \"Utilize CrewAI Crews to create Human-in-the-Loop workflows.\",\n      href: \"/crewai-crews/human-in-the-loop/flow\",\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Input/Output State Schemas in Python\nDESCRIPTION: This code demonstrates how to divide the agent state into input, output, and overall schemas, and implement a node function using these schemas.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_144\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitState\nfrom typing import Literal\n\n# Divide the state to 3 parts\n\n# Input schema for inputs you are willing to accept from the frontend\nclass InputState(CopilotKitState):\n  question: str\n\n# Output schema for output you are willing to pass to the frontend\nclass OutputState(CopilotKitState):\n  answer: str\n\n# The full schema, including the inputs, outputs and internal state (\"resources\" in our case)\nclass OverallState(InputState, OutputState):\n  resources: List[str]\n\nasync def answer_node(state: OverallState, config: RunnableConfig):\n  \"\"\"\n  Standard chat node, meant to answer general questions.\n  \"\"\"\n\n  model = ChatOpenAI()\n\n  # add the input question in the system prompt so it's passed to the LLM\n  system_message = SystemMessage(\n    content=f\"You are a helpful assistant. Answer the question: {state.get('question')}\"\n  )\n\n  response = await model.ainvoke([\n    system_message,\n    *state[\"messages\"],\n  ], config)\n\n  # ...add the rest of the agent implementation\n\n  # extract the answer, which will be assigned to the state soon\n  answer = response.content\n\n  return {\n     \"messages\": response,\n      # include the answer in the returned state\n     \"answer\": answer\n  }\n\n\n# finally, before compiling the graph, we define the 3 state components\nbuilder = StateGraph(OverallState, input=InputState, output=OutputState)\n\n# add all the different nodes and edges and compile the graph\nbuilder.add_node(\"answer_node\", answer_node)\nbuilder.add_edge(START, \"answer_node\")\nbuilder.add_edge(\"answer_node\", END)\ngraph = builder.compile()\n```\n\n----------------------------------------\n\nTITLE: Disabling State Streaming in Python using CopilotKit\nDESCRIPTION: Implementation showing how to disable message and tool call streaming in Python using copilotkit_customize_config. Uses LangGraph and ChatOpenAI with custom configuration to prevent streaming of messages and tool calls to the frontend.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/advanced/disabling-state-streaming.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_customize_config\n\nasync def frontend_actions_node(state: AgentState, config: RunnableConfig):\n    \n    # 1) Configure CopilotKit not to emit messages\n    modifiedConfig = copilotkit_customize_config(\n        config,\n        emit_messages=False, # if you want to disable message streaming\n        emit_tool_calls=False # if you want to disable tool call streaming\n    )\n\n    # 2) Provide the actions to the LLM\n    model = ChatOpenAI(model=\"gpt-4o\").bind_tools([\n      *state[\"copilotkit\"][\"actions\"],\n      # ... any tools you want to make available to the model\n    ])\n\n    # 3) Call the model with CopilotKit's modified config\n    response = await model.ainvoke(state[\"messages\"], modifiedConfig)\n\n    # don't return the new response to hide it from the user\n    return state\n```\n\n----------------------------------------\n\nTITLE: Creating/Activating Python 3.12 Virtual Environment (Bash)\nDESCRIPTION: Creates a Python virtual environment named `.venv` using Python 3.12 and then activates it for the current shell session. Requires Python 3.12 to be installed and available as `python3.12`. Executed within the `agent` directory.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/demo-viewer/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython3.12 -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing UI Dependencies\nDESCRIPTION: Commands to install dependencies for the UI component using pnpm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncd ./ui\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Interrupt-based Flow in React\nDESCRIPTION: This code snippet imports various components and icons needed for implementing the interrupt-based flow in a React application. It includes imports from CopilotKit, custom components, and Lucide React icons.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport InstallSDKSnippet from \"@/snippets/install-sdk.mdx\"\nimport {\n    TailoredContent,\n    TailoredContentOption,\n} from \"@/components/react/tailored-content.tsx\";\nimport RunAndConnectAgentSnippet from \"@/snippets/coagents/run-and-connect-agent.mdx\"\nimport { MessageCircle, PanelsTopLeft } from \"lucide-react\";\n```\n\n----------------------------------------\n\nTITLE: Installing Agent Dependencies with Poetry\nDESCRIPTION: This command installs the required dependencies for the agent component using Poetry package manager.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter-crewai-crews/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd agent\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Configuring Tool Call Emission in LangGraph Agent\nDESCRIPTION: Example showing how to specify tool calls to be emitted to the CopilotKit runtime using copilotkit_customize_config\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/troubleshooting/common-issues.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_customize_config, copilotkit_emit_message\nfrom langgraph_core.runnables import RunnableConfig\nfrom langchain.tools import tool\n\n@tool\ndef say_hello_to(name: str) -> str:\n    return f\"Hello, {name}!\"\n\nasync def my_node(state: State, config: RunnableConfig) -> State:\n    # ...\n    config = copilotkit_customize_config(config, emit_tool_calls=[\"say_hello_to\"])\n    # ...\n    return state\n```\n\n----------------------------------------\n\nTITLE: Rendering Tailored Content Component in JSX\nDESCRIPTION: This snippet demonstrates the usage of a TailoredContent component to provide different explanations based on the user's experience level with LangGraph. It includes two TailoredContentOption components for new and intermediate users.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/concepts/agentic-copilots.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TailoredContent id=\"experience\" defaultOptionIndex={0}>\n    <TailoredContentOption \n        id=\"new\"\n        title=\"I'm new to LangGraph\" \n        description=\"Help me understand what agentic copilots are, where LangGraph fits in, and how to get started.\" \n        icon={<img src=\"/images/copilotkit-logo.svg\" width={7} height={7} />}\n    >\n        {/* Content for new users */}\n    </TailoredContentOption>\n    <TailoredContentOption \n        id=\"intermediate\"\n        title=\"I'm already using LangGraph\" \n        description=\"Help me understand what agentic copilots are, what Copilotkit does to integrate with LangGraph, and how to get started.\" \n        icon={<SiLangchain />}\n    >\n        {/* Content for intermediate users */}\n    </TailoredContentOption>\n</TailoredContent>\n```\n\n----------------------------------------\n\nTITLE: Installing UI Dependencies\nDESCRIPTION: Commands to install the UI dependencies using pnpm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-research-canvas/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncd ./ui\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Configuring Tool Call Streaming in LangGraph\nDESCRIPTION: Shows how to properly configure tool calls to be emitted to the CopilotKit runtime using copilotkit_customize_config.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/troubleshooting/common-issues.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_customize_config, copilotkit_emit_message\nfrom langgraph_core.runnables import RunnableConfig\nfrom langchain.tools import tool\n\n@tool\ndef say_hello_to(name: str) -> str:\n    return f\"Hello, {name}!\"\n\nasync def my_node(state: State, config: RunnableConfig) -> State:\n    # ...\n    config = copilotkit_customize_config(config, emit_tool_calls=[\"say_hello_to\"])\n    # ...\n    return state\n```\n\n----------------------------------------\n\nTITLE: Implementing useCoAgent Hook for State Management\nDESCRIPTION: Integration of the useCoAgent hook to create bidirectional state connection between LangGraph agent and React application state.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-4-integrate-the-agent.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { state, setState } = useCoAgent<AgentState>({\n    name: \"travel\",\n    initialState: {\n      trips: defaultTrips,\n      selected_trip_id: defaultTrips[0].id,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Messages Component in CopilotKit\nDESCRIPTION: This snippet shows how to create a custom Messages component that handles the display and organization of different message types in the chat interface. It uses MessagesProps from @copilotkit/react-ui and manages various message types including text, actions, results, and agent states.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/bring-your-own-components.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MessagesProps, CopilotSidebar } from \"@copilotkit/react-ui\";\nimport { useCopilotChat } from \"@copilotkit/react-core\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\nimport \"@copilotkit/react-ui/styles.css\";\nfunction CustomMessages({\n  messages,\n  inProgress,\n  RenderTextMessage,\n  RenderActionExecutionMessage,\n  RenderResultMessage,\n  RenderAgentStateMessage,\n}: MessagesProps) {\n  const wrapperStyles = \"p-4 flex flex-col gap-2 h-full overflow-y-auto bg-indigo-300\";\n\n  return (\n    <div className={wrapperStyles}>\n      {messages.map((message, index) => {\n        if (message.isTextMessage()) {\n          return <RenderTextMessage \n            key={message.id} \n            message={message} \n            inProgress={inProgress} \n            index={index} \n            isCurrentMessage={index === messages.length - 1}\n          />;\n        } else if (message.isActionExecutionMessage()) {\n          return <RenderActionExecutionMessage \n            key={message.id} \n            message={message} \n            inProgress={inProgress} \n            index={index} \n            isCurrentMessage={index === messages.length - 1}\n          />;\n        } else if (message.isResultMessage()) {\n          return <RenderResultMessage \n            key={message.id} \n            message={message} \n            inProgress={inProgress} \n            index={index} \n            isCurrentMessage={index === messages.length - 1}\n          />;\n        } else if (message.isAgentStateMessage()) {\n          return <RenderAgentStateMessage \n              key={message.id} \n              message={message} \n              inProgress={inProgress} \n              index={index} \n              isCurrentMessage={index === messages.length - 1}\n            />;\n        }\n      })}\n    </div>\n  );\n}\n\n<CopilotKit>\n  <CopilotSidebar Messages={CustomMessages} />\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Authentication with CopilotKit\nDESCRIPTION: Demonstrates how to set up authentication state and implement a sign-in component with CopilotKit React. Includes configuration of auth headers, user state management, and integration with the CopilotKit wrapper component.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_165\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\ninterface AuthState {\n  status: \"authenticated\" | \"unauthenticated\";\n  authHeaders: Record<string, string>;\n  userId?: string;\n  metadata?: Record<string, any>;\n}\n\n// Your SignInComponent component\nfunction SignInComponent({\n  onSignInComplete,\n}: {\n  onSignInComplete: (authState: AuthState) => void;\n}) {\n  const handleAuth = async () => {\n    // Your auth logic (e.g., OAuth, custom auth)\n    const authState = {\n      status: \"authenticated\",\n      authHeaders: {\n        Authorization: \"Bearer your_token\",\n        // Add any other headers needed by your backend\n      },\n      userId: \"user_123\",\n      metadata: {\n        email: \"user@example.com\",\n        // Any other user context needed by tools\n      },\n    };\n\n    onAuthComplete(authState);\n  };\n\n  return <button onClick={handleAuth}>Authenticate</button>;\n}\n\n// Root configuration\nexport default function App() {\n  return (\n    <CopilotKit\n      publicApiKey={process.env.COPILOTKIT_PUBLIC_API_KEY}\n      authConfig_c={{\n        SignInComponent,\n      }}\n    >\n      {/* Your app */}\n    </CopilotKit>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with yarn - Bash\nDESCRIPTION: This Bash snippet starts the development server using 'yarn dev', triggering the 'dev' script from 'package.json'. It is an alternative to pnpm or npm, typically used to run Next.js or React applications during development.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-state-machine/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Navigating to Agent Directory for LangGraph Setup (Bash)\nDESCRIPTION: Changes the current working directory to the `agent` subdirectory. This is a prerequisite for running subsequent commands related to LangGraph agent setup.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/demo-viewer/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd agent\n```\n\n----------------------------------------\n\nTITLE: Implementing Weather Tool in TypeScript Agent\nDESCRIPTION: Creates a weather tool using LangChain's tool function in TypeScript and binds it to an OpenAI model. The tool accepts a location parameter via a Zod schema and returns a simulated weather response.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/generative-ui/tool-based.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst get_weather = tool(\n  (args) => {\n    return `The weather for ${args.location} is 70 degrees.`;\n  },\n  {\n    name: \"get_weather\",\n    description: \"Get the weather for a given location.\",\n    schema: z.object({\n      location: z.string().describe(\"The location to get weather for\"),\n    }),\n  }\n);\n\nasync function chat_node(state: AgentState, config: RunnableConfig) {\n  const model = new ChatOpenAI({ temperature: 0, model: \"gpt-4o\" });\n  const modelWithTools = model.bindTools([get_weather]);\n\n  const response = await modelWithTools.invoke([\n    new SystemMessage(\"You are a helpful assistant.\"),\n    ...state.messages,\n  ], config);\n\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Travel Planner Agent\nDESCRIPTION: Sets up the necessary API keys for OpenAI and Google Maps in a .env file. These keys are required for the agent to function properly.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-travel/agent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=...\nGOOGLE_MAPS_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: React Component for State Rendering\nDESCRIPTION: React component implementation that uses CopilotKit hooks to render both predicted and final states of the agent's progress.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/shared-state/predictive-state-updates.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCoAgent, useCoAgentStateRender } from '@copilotkit/react-core';\n\nconst YourMainContent = () => {\n    const { state } = useCoAgent({ name: \"sample_agent\" });\n\n    useCoAgentStateRender({\n        name: \"sample_agent\",\n        render: ({ state }) => {\n            if (!state.observed_steps?.length) return null;\n            return (\n                <div>\n                    <h3>Current Progress:</h3>\n                    <ul>\n                        {state.observed_steps.map((step, i) => (\n                            <li key={i}>{step}</li>\n                        ))}\n                    </ul>\n                </div>\n            );\n        },\n    });\n\n    return (\n        <div>\n            <h1>Agent Progress</h1>\n            {state.observed_steps?.length > 0 && (\n                <div>\n                    <h3>Final Steps:</h3>\n                    <ul>\n                        {state.observed_steps.map((step, i) => (\n                            <li key={i}>{step}</li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n        </div>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotTextarea with State Management\nDESCRIPTION: Illustrates a more detailed example of using CopilotTextarea in a React component with state management and additional configuration options.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/CopilotTextarea.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\nimport { CopilotTextarea } from \"@copilotkit/react-textarea\";\nimport \"@copilotkit/react-textarea/styles.css\";\n\nexport function ExampleComponent() {\n  const [text, setText] = useState(\"\");\n\n  return (\n    <CopilotTextarea\n      className=\"custom-textarea-class\"\n      value={text}\n      onValueChange={(value: string) => setText(value)}\n      placeholder=\"Enter your text here...\"\n      autosuggestionsConfig={{\n        textareaPurpose: \"Provide context or purpose of the textarea.\",\n        chatApiConfigs: {\n          suggestionsApiConfig: {\n            maxTokens: 20,\n            stop: [\".\", \"?\", \"!\"],\n          },\n        },\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Messages from LangGraph Node in Python\nDESCRIPTION: Example of how to return messages from a LangGraph node to ensure they appear in CopilotKit chat history. The node function takes state and config parameters and returns a dictionary containing response messages.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/troubleshooting/migrate-from-v0.2-to-v0.3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef my_node(state: State, config: RunnableConfig) -> State:\n    response = # ... llm call ...\n    return {\n        \"messages\": response,\n    }\n```\n\n----------------------------------------\n\nTITLE: Using setThreadId from useCopilotContext Hook (React/TypeScript)\nDESCRIPTION: This snippet illustrates how to use the useCopilotContext hook to access the current threadId and setThreadId function. This allows components to change the thread directly without prop drilling.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/persistence/loading-message-history.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotContext } from \"@copilotkit/react-core\";\n\nconst ChangeThreadButton = () => {\n  const { threadId, setThreadId } = useCopilotContext();\n  return (\n    <Button onClick={() => setThreadId(\"d73c22f3-1f8e-4a93-99db-5c986068d64f\")}>\n      Change Thread\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Interrupts in React Frontend\nDESCRIPTION: This TypeScript/JSX snippet demonstrates how to handle multiple types of interrupts in the frontend using conditional rendering based on the interrupt type. It includes components for approval and asking questions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_189\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLangGraphInterrupt } from \"@copilotkit/react-core\";\n// ...\n\nconst ApproveComponent = ({ content, onAnswer }: { content: string; onAnswer: (approved: boolean) => void }) => (\n    // styles omitted for brevity\n    <div>\n        <h1>Do you approve?</h1>\n        <button onClick={() => onAnswer(true)}>Approve</button>\n        <button onClick={() => onAnswer(false)}>Reject</button>\n    </div>\n)\n\nconst AskComponent = ({ question, onAnswer }: { question: string; onAnswer: (answer: string) => void }) => (\n// styles omitted for brevity\n    <div>\n        <p>{question}</p>\n        <form onSubmit={(e) => {\n            e.preventDefault();\n            onAnswer((e.target as HTMLFormElement).response.value);\n        }}>\n            <input type=\"text\" name=\"response\" placeholder=\"Enter your response\" />\n            <button type=\"submit\">Submit</button>\n        </form>\n    </div>\n)\n\nconst YourMainContent = () => {\n    // ...\n\n    useLangGraphInterrupt({\n        enabled: ({ eventValue }) => eventValue.type === 'ask',\n        render: ({ event, resolve }) => (\n            <AskComponent question={event.value.content} onAnswer={answer => resolve(answer)} />\n        )\n    });\n\n    useLangGraphInterrupt({\n        enabled: ({ eventValue }) => eventValue.type === 'approval',\n        render: ({ event, resolve }) => (\n            <ApproveComponent content={event.value.content} onAnswer={answer => resolve(answer)} />\n        )\n    });\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating CopilotKit Provider in React Application\nDESCRIPTION: Code snippet showing how to wrap a React application with the CopilotKit provider. This setup is crucial for enabling CopilotKit functionality throughout the application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-3-setup-copilotkit.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\n// ...\nimport { CopilotKit } from \"@copilotkit/react-core\";\nimport \"@copilotkit/react-ui/styles.css\";\n// ...\n\nexport default function RootLayout({ children }: Readonly<{ children: React.ReactNode }>) {\n    return (\n      <html lang=\"en\" className=\"h-full\">\n        <body className={`${lato.variable} ${noto.className} antialiased h-full`}>\n          <CopilotKit\n            publicApiKey={process.env.NEXT_PUBLIC_CPK_PUBLIC_API_KEY}\n          >\n            <TooltipProvider>\n              <ResearchProvider>\n                {children}\n              </ResearchProvider>\n            </TooltipProvider>\n          </CopilotKit>\n        </body>\n      </html>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State Class in Python\nDESCRIPTION: Defines a custom AgentState class that inherits from CopilotKitState to track observed steps in the agent's execution.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/shared-state/predictive-state-updates.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.crewai import CopilotKitState\nfrom typing import Literal\n\nclass AgentState(CopilotKitState):\n    observed_steps: list[str]  # Array of completed steps\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Travel Planner Agent\nDESCRIPTION: Uses Poetry to install the required dependencies and start the Travel Planner agent server. The server is configured to run on port 8000.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-travel/agent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npoetry install\npoetry run demo\n```\n\n----------------------------------------\n\nTITLE: Adding Zod Conversion and SDK Tool Utilities\nDESCRIPTION: A patch that adds Zod conversion functionality and introduces a utility to convert actions to dynamic structured tools in the SDK.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/runtime-client-gql/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- 1721cbd: add zod conversion\n- 1721cbd: Add convertActionsToDynamicStructuredTools to sdk-js\n```\n\n----------------------------------------\n\nTITLE: Initializing LangChainAdapter with ChatOpenAI Integration\nDESCRIPTION: Demonstrates how to initialize and configure a LangChainAdapter using ChatOpenAI model. Shows setup of CopilotRuntime, configuration of the OpenAI model, and creation of the adapter with a chainFn that supports tool binding and streaming.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/llm-adapters/LangChainAdapter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopilotRuntime, LangChainAdapter } from \"@copilotkit/runtime\";\nimport { ChatOpenAI } from \"@langchain/openai\";\n\nconst copilotKit = new CopilotRuntime();\n\nconst model = new ChatOpenAI({\n  model: \"gpt-4o\",\n  apiKey: \"<your-api-key>\",\n});\n\nreturn new LangChainAdapter({\n  chainFn: async ({ messages, tools }) => {\n    return model.bindTools(tools).stream(messages);\n    // or optionally enable strict mode\n    // return model.bindTools(tools, { strict: true }).stream(messages);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State in Python\nDESCRIPTION: Defines the AgentState class that extends CopilotKitState to include a list of searches.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_150\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitState\n\nclass AgentState(CopilotKitState):\n    searches: list[dict]\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotPopup Component in React\nDESCRIPTION: Implementation example of the CopilotPopup component, which provides a popup interface for interacting with the copilot. This example shows basic setup with custom labels for title and initial message.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_63\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CopilotPopup } from \"@copilotkit/react-ui\";\nimport \"@copilotkit/react-ui/styles.css\";\n\n<CopilotPopup\n  labels={{\n    title: \"Your Assistant\",\n    initial: \"Hi! 👋 How can I assist you today?\",\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Families in CopilotKit\nDESCRIPTION: Examples of setting custom font families for different CopilotKit components using CSS\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/customize-built-in-ui-components.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.copilotKitMessages {\n  font-family: \"Arial, sans-serif\";\n}\n\n.copilotKitInput {\n  font-family: \"Arial, sans-serif\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AsyncPostgresSaver for LangGraph Message Persistence\nDESCRIPTION: This code snippet demonstrates how to set up AsyncPostgresSaver for persisting LangGraph messages to a PostgreSQL database. It includes configuring the graph within a lifespan function for a FastAPI application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_198\n\nLANGUAGE: python\nCODE:\n```\nfrom contextlib import asynccontextmanager\nfrom langgraph.checkpoint.postgres.aio import AsyncPostgresSaver\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    async with AsyncPostgresSaver.from_conn_string(\n        \"postgresql://postgres:postgres@127.0.0.1:5432/postgres\"\n    ) as checkpointer:\n        # NOTE: you need to call .setup() the first time you're using your checkpointer\n        await checkpointer.setup()\n        # Create an async graph\n        graph = workflow.compile(checkpointer=checkpointer)\n\n        # Create SDK with the graph\n        sdk = CopilotKitRemoteEndpoint(\n            agents=[\\\n                LangGraphAgent(\\\n                    name=\"research_agent\",\\\n                    description=\"Research agent.\",\\\n                    graph=graph,\\\n                ),\\\n            ],\n        )\n\n        # Add the CopilotKit FastAPI endpoint\n        add_fastapi_endpoint(app, sdk, \"/copilotkit\")\n        yield\n\napp = FastAPI(lifespan=lifespan)\n```\n\n----------------------------------------\n\nTITLE: Authenticating CopilotKit CLI\nDESCRIPTION: Command to authenticate the CopilotKit CLI for use with Copilot Cloud.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\nnpx copilotkit@latest login\n```\n\n----------------------------------------\n\nTITLE: Implementing useCopilotAction for Essay Draft Review in React\nDESCRIPTION: This snippet demonstrates how to use the useCopilotAction hook from CopilotKit to create a component that renders an essay draft and waits for user approval. It includes buttons for approving or rejecting the draft.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/human-in-the-loop/flow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotAction } from \"@copilotkit/react-core\"\nimport { Markdown } from \"@copilotkit/react-ui\"\n\nfunction YourMainContent() {\n  // ...\n\n  useCopilotAction({\n    name: \"writeEssay\",\n    available: \"remote\",\n    description: \"Writes an essay and takes the draft as an argument.\",\n    parameters: [\n      { name: \"draft\", type: \"string\", description: \"The draft of the essay\", required: true },\n    ],\n    renderAndWaitForResponse: ({ args, respond, status }) => {\n      return (\n        <div>\n          <Markdown content={args.draft || 'Preparing your draft...'} />\n\n          <div className={`flex gap-4 pt-4 ${status !== \"executing\" ? \"hidden\" : \"\"}`}>\n            <button\n              onClick={() => respond?.(\"CANCEL\")}\n              disabled={status !== \"executing\"}\n              className=\"border p-2 rounded-xl w-full\"\n            >\n              Try Again\n            </button>\n            <button\n              onClick={() => respond?.(\"SEND\")}\n              disabled={status !== \"executing\"}\n              className=\"bg-blue-500 text-white p-2 rounded-xl w-full\"\n            >\n              Approve Draft\n            </button>\n          </div>\n        </div>\n      );\n    },\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using useCoAgent Hook for State Management in React\nDESCRIPTION: Demonstrates how to use the useCoAgent hook to access and update agent state from a React component. The example shows how to define state types, provide initial state, and create a toggle function to update state.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_192\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\n\n// Define the agent state type, should match the actual state of your agent\ntype AgentState = {\n  language: \"english\" | \"spanish\";\n}\n\n// Example usage in a pseudo React component\nfunction YourMainContent() {\n  const { state, setState } = useCoAgent<AgentState>({\n    name: \"sample_agent\",\n    initialState: { language: \"spanish\" }  // optionally provide an initial state\n  });\n\n  // ...\n\n  const toggleLanguage = () => {\n    setState({ language: state.language === \"english\" ? \"spanish\" : \"english\" });\n  };\n\n  // ...\n\n  return (\n    // style excluded for brevity\n    <div>\n      <h1>Your main content</h1>\n      <p>Language: {state.language}</p>\n      <button onClick={toggleLanguage}>Toggle Language</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Actions in CopilotRuntime with TypeScript\nDESCRIPTION: This snippet demonstrates how to define a backend action in CopilotKit that allows the AI to fetch user data. It creates a CopilotRuntime instance with an action named 'fetchNameForUserId' that simulates retrieving a user's name from a database based on their ID.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/connect-your-data/backend.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst runtime = new CopilotRuntime({\n  actions: ({properties, url}) => {\n    // You can use the input parameters to the actions generator to expose different backend actions to the Copilot at different times: \n    // `url` is the current URL on the frontend application.\n    // `properties` contains custom properties you can pass from the frontend application.\n    \n    return [\n      {\n        name: \"fetchNameForUserId\",\n        description: \"Fetches user name from the database for a given ID.\",\n        parameters: [\n          {\n            name: \"userId\",\n            type: \"string\",\n            description: \"The ID of the user to fetch data for.\",\n            required: true,\n          },\n        ],\n        handler: async ({userId}: {userId: string}) => {\n          // do something with the userId\n          // return the user data\n          const simulateDatabaseCall = async (userId: string) => { return { name: \"Darth Doe\" } }\n          return await simulateDatabaseCall(userId)\n        },\n      },\n    ]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Window Component in CopilotKit\nDESCRIPTION: This snippet demonstrates how to create a custom Window component that transforms the chat interface into a modal-like structure. It uses WindowProps and useChatContext from @copilotkit/react-ui to manage the open/close state of the chat window.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/bring-your-own-components.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WindowProps, useChatContext, CopilotSidebar } from \"@copilotkit/react-ui\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\nimport \"@copilotkit/react-ui/styles.css\";\nfunction Window({ children }: WindowProps) {\n  const { open, setOpen } = useChatContext();\n\n  if (!open) return null;\n\n  return (\n    <div \n      className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4\"\n      onClick={() => setOpen(false)}\n    >\n      <div \n        className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full h-[80vh] overflow-auto\"\n        onClick={e => e.stopPropagation()}\n      >\n        <div className=\"flex flex-col h-full\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n<CopilotKit>\n  <CopilotSidebar Window={Window} />\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Specifying use client directive for Next.js App Router\nDESCRIPTION: This snippet shows the required 'use client' directive that must be added at the top of any file using React hooks like useCopilotReadable when working with Next.js App Router.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_125\n\nLANGUAGE: typescript\nCODE:\n```\n\"use client\"\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Development Server\nDESCRIPTION: Command to run the development server for the CopilotKit project. This launches the application in development mode with hot-reloading enabled.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/examples/next-openai/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Agent State Rendering with useCoAgentStateRender in React\nDESCRIPTION: Example showing how to use the useCoAgentStateRender hook to render UI components based on an agent's state. The hook accepts a name, optional nodeName, and a render function that receives status, state, and nodeName as props.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCoAgentStateRender.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCoAgentStateRender } from \"@copilotkit/react-core\";\n\ntype YourAgentState = {\n  agent_state_property: string;\n}\n\nuseCoAgentStateRender<YourAgentState>({\n  name: \"basic_agent\",\n  nodeName: \"optionally_specify_a_specific_node\",\n  render: ({ status, state, nodeName }) => {\n    return (\n      <YourComponent\n        agentStateProperty={state.agent_state_property}\n        status={status}\n        nodeName={nodeName}\n      />\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Launch the NextJS development server to run the application locally on port 3000.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-1-checkout-repo.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Emitting Messages Manually\nDESCRIPTION: Example demonstrating how to manually emit messages to update users during node execution.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/js/LangGraph.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { copilotkitEmitMessage } from \"@copilotkit/sdk-js\";\n\nconst message = \"Step 1 of 10 complete\";\nawait copilotkitEmitMessage(config, message);\n\n// Return the message from the node\nreturn {\n  \"messages\": [AIMessage(content=message)]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Streaming in CoAgents with Python\nDESCRIPTION: This snippet demonstrates how to disable message streaming in CoAgents using the copilotkit_customize_config function. By default, message streaming is enabled, but it can be turned off to send messages only after the agent has finished generating them.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/concepts/copilotkit-config.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nconfig = copilotkit_customize_config(\n    config,\n    # True or False\n    emit_messages=False,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Documentation Site\nDESCRIPTION: Commands to install dependencies and start the documentation site in development mode using pnpm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/(other)/contributing/docs-contributions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing UI Dependencies with pnpm\nDESCRIPTION: Commands to navigate to the UI directory and install frontend dependencies using pnpm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter-crewai-flows/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd ./ui\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Layout with CopilotKit in React TSX\nDESCRIPTION: This code snippet defines a RootLayout component that wraps the entire React application. It imports global styles and integrates the CopilotKit component, setting up the foundation for Copilot functionality throughout the app.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-configure-copilotkit-provider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport \"./globals.css\";\nimport { ReactNode } from \"react\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body> \n        {/* Make sure to use the URL you configured in the previous step  */}\n        <CopilotKit runtimeUrl=\"/api/copilotkit\"> \n          {children}\n        </CopilotKit>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Frontend Action Access in Agent\nDESCRIPTION: Demonstrates how to access and utilize frontend actions within the agent's logic using the copilotkit property from the state.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/frontend-actions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def agent(self):\n    response = await copilotkit_stream(\n        completion(\n            model=\"openai/gpt-4o\",\n            messages=[\n                {\"role\": \"system\", \"content\": prompt},\n                *self.state.get(\"messages\", [])\n            ],\n            # Access the actions from the copilotkit property\n            tools=self.state[\"copilotkit\"][\"actions\"],\n            tool_choice=\"required\",\n            stream=True\n        )\n    )\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State with CopilotKit Inheritance\nDESCRIPTION: Shows how to inherit from CopilotKitState in the agent's state definition to access frontend actions provided by CopilotKit.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/frontend-actions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitState\n\nclass YourAgentState(CopilotKitState):\n    your_additional_properties: str\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic LangGraphAgent in Python\nDESCRIPTION: Example showing how to create a LangGraphAgent with essential parameters like name, description, and graph. This snippet demonstrates the minimum required configuration for a LangGraphAgent.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_110\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import LangGraphAgent\n\nLangGraphAgent(\n    name=\"email_agent\",\n    description=\"This agent sends emails\",\n    graph=graph,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Copilot Runtime Endpoint in Node.js HTTP Server\nDESCRIPTION: This snippet demonstrates how to set up a simple Node.js HTTP server and use the Copilot Runtime to handle requests. It utilizes the CopilotRuntime class and copilotRuntimeNodeHttpEndpoint function from @copilotkit/runtime.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-starter.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http';\nimport {\n  CopilotRuntime,\n  ExperimentalEmptyAdapter,\n  copilotRuntimeNodeHttpEndpoint,\n} from '@copilotkit/runtime';\n\n\nconst serviceAdapter = new ExperimentalEmptyAdapter();\n\nconst server = createServer((req, res) => {\n  const runtime = new CopilotRuntime({\n    remoteEndpoints: [\n      // added in next step...\n    ],\n  });\n\n  const handler = copilotRuntimeNodeHttpEndpoint({\n    endpoint: '/copilotkit',\n    runtime,\n    serviceAdapter,\n  });\n\n  return handler(req, res);\n});\n\nserver.listen(4000, () => {\n  console.log('Listening at http://localhost:4000/copilotkit');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Mode in CopilotKit Provider Component\nDESCRIPTION: Example of setting up the CopilotKit provider component in Router Mode, which acts as a central hub to dynamically route requests between different agents based on user input.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_93\n\nLANGUAGE: jsx\nCODE:\n```\n<CopilotKit runtimeUrl=\"<copilot-runtime-url>\">\n  {/* Your application components */}\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Configuring CopilotKit Provider in React Component\nDESCRIPTION: This code snippet demonstrates how to wrap the main application component with the CopilotKit provider, using the Copilot Cloud API key from environment variables.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-3-setup-copilotkit.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nexport default function Home() {\n  return (\n    <CopilotKit\n      publicApiKey={process.env.NEXT_PUBLIC_CPK_PUBLIC_API_KEY}\n    >\n      <TooltipProvider>\n        <TripsProvider>\n          <main className=\"h-screen w-screen\">\n            <MapCanvas />\n          </main>\n        </TripsProvider>\n      </TooltipProvider>\n    </CopilotKit>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Messages for Long-Running Tasks in CoAgents\nDESCRIPTION: Example of how to emit progress messages during long-running tasks in a CoAgent using the copilotkit_emit_message function, which allows messages to be sent outside of node transitions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_195\n\nLANGUAGE: python\nCODE:\n```\nasync def ask_name_node(state: GreetAgentState, config: RunnableConfig):\n    \"\"\"\n    Ask the user for their name.\n    \"\"\"\n\n    content = \"Hey, what is your name? 🙂\"\n\n    await copilotkit_emit_message(config, content)\n\n    # something long running here...\n\n    return {\n        \"messages\": AIMessage(content=content),\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting up CopilotKit Runtime in Next.js Pages Router\nDESCRIPTION: TypeScript code for creating a route to handle the /api/copilotkit endpoint in Next.js Pages Router.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-create-endpoint.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport {\n  CopilotRuntime,\n  {{adapterImport}},\n  copilotRuntimeNextJSPagesRouterEndpoint,\n} from '@copilotkit/runtime';\n{{extraImports}}\n\n{{clientSetup}}\n{{adapterSetup}}\n\nconst handler = async (req: NextApiRequest, res: NextApiResponse) => {\n  const runtime = new CopilotRuntime();\n\n  const handleRequest = copilotRuntimeNextJSPagesRouterEndpoint({\n    endpoint: '/api/copilotkit',\n    runtime,\n    serviceAdapter,\n  });\n\n  return await handleRequest(req, res);\n};\n\nexport default handler;\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Regular Package Dependencies in Your Project\nDESCRIPTION: This command reinstalls the regular package dependencies from npm in your project after unlinking the global packages, returning to normal operation.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/(other)/contributing/code-contributions/package-linking.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Re-Running Agent with State Change Hints in React\nDESCRIPTION: Shows how to re-run an agent with a hint about what state has changed using the run function from useCoAgent. This advanced pattern lets you provide context about state changes to the agent through a user message.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_193\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\nimport { TextMessage, MessageRole } from \"@copilotkit/runtime-client-gql\";\n\n// ...\n\nfunction YourMainContent() {\n  const { state, setState, run } = useCoAgent<AgentState>({\n    name: \"sample_agent\",\n    initialState: { language: \"spanish\" }  // optionally provide an initial state\n  });\n\n  // setup to be called when some event in the app occurs\n  const toggleLanguage = () => {\n    const newLanguage = state.language === \"english\" ? \"spanish\" : \"english\";\n    setState({ language: newLanguage });\n\n    // re-run the agent and provide a hint about what's changed\n    run(({ previousState, currentState }) => {\n      return new TextMessage({\n        role: MessageRole.User,\n        content: `the language has been updated to ${currentState.language}`,\n      });\n    });\n  };\n\n  return (\n    // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for UI\nDESCRIPTION: Content for the .env file in the UI directory, specifying the OpenAI API key.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-ai-researcher/README.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Code-Driven Stage Transitions with Button Click in React\nDESCRIPTION: This example demonstrates code-driven stage transitions where stages change deterministically through UI interactions. It shows how to use useState to track the current stage and how to trigger transitions with button clicks.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst [stage, setStage] = useState<string>(\"one\");\n\n// ...\n\n<button onClick={() => setStage(\"two\")}>\n  Transition to next stage\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State in Python\nDESCRIPTION: This snippet shows how to define the agent state using a custom class that inherits from CopilotKitState. It includes a language attribute with a literal type.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/shared-state/in-app-agent-write.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.crewai import CopilotKitState\nfrom typing import Literal\n\nclass AgentState(CopilotKitState):\n    language: Literal[\"english\", \"spanish\"] = \"english\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Agent State for HITL Interrupts\nDESCRIPTION: Creates an agent state class that adds an agent_name field for use in a human-in-the-loop interrupt flow. This extends CopilotKitState to maintain compatibility with CopilotKit functionality.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_183\n\nLANGUAGE: Python\nCODE:\n```\n# ...\nfrom copilotkit import CopilotKitState # extends MessagesState\n# ...\n\n# This is the state of the agent.\n# It inherits from the CopilotKitState properties from CopilotKit.\nclass AgentState(CopilotKitState):\n    agent_name: str\n```\n\n----------------------------------------\n\nTITLE: Manual State Updates Implementation in Python\nDESCRIPTION: Demonstrates how to manually emit state updates during a flow execution with simulated steps and delays.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/shared-state/predictive-state-updates.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.crewai import copilotkit_emit_state\nfrom crewai.flow.flow import Flow, start\n\nclass MyFlow(Flow):\n    # ...\n    @start\n    async def start_flow(self):\n        # ...\n\n        # Simulate executing steps one by one\n        steps = [\n            \"Analyzing input data...\",\n            \"Identifying key patterns...\",\n            \"Generating recommendations...\",\n            \"Formatting final output...\"\n        ]\n\n        for step in steps:\n            self.state[\"observed_steps\"] = self.state.get(\"observed_steps\", []) + [step]\n            await copilotkit_emit_state(self.state)\n            await asyncio.sleep(1)\n\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for CopilotKit Custom Project\nDESCRIPTION: Command to install project dependencies using npm. This step is necessary before running the application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-fully-custom/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers. This allows developers to run the project locally for development and testing.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-travel/ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Customizing System Message in Headless UI Implementation\nDESCRIPTION: Shows how to use useCopilotChat hook with a custom system message generator for headless UI implementations.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-ai-assistant-behavior.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotChat } from \"@copilotkit/react-core\";\n\nconst CustomCopilotHeadless: React.FC = () => {\n  // [!code highlight:5]\n  const chat = useCopilotChat({\n    // ...\n    makeSystemMessage: myCustomMakeSystemMessage,\n  });\n\n  return (\n    <div>\n      {/* Render your custom UI using visibleMessages */}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication State with CopilotKit in React\nDESCRIPTION: This snippet shows how to configure authentication state in a React application using CopilotKit. It includes defining an AuthState interface, implementing a SignInComponent, and integrating it with the CopilotKit wrapper component.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/authenticated-actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\ninterface AuthState {\n  status: \"authenticated\" | \"unauthenticated\";\n  authHeaders: Record<string, string>;\n  userId?: string;\n  metadata?: Record<string, any>;\n}\n\n// Your SignInComponent component\nfunction SignInComponent({\n  onSignInComplete,\n}: {\n  onSignInComplete: (authState: AuthState) => void;\n}) {\n  const handleAuth = async () => {\n    // Your auth logic (e.g., OAuth, custom auth)\n    const authState = {\n      status: \"authenticated\",\n      authHeaders: {\n        Authorization: \"Bearer your_token\",\n        // Add any other headers needed by your backend\n      },\n      userId: \"user_123\",\n      metadata: {\n        email: \"user@example.com\",\n        // Any other user context needed by tools\n      },\n    };\n\n    onAuthComplete(authState);\n  };\n\n  return <button onClick={handleAuth}>Authenticate</button>;\n}\n\n// Root configuration\nexport default function App() {\n  return (\n    <CopilotKit\n      publicApiKey={process.env.COPILOTKIT_PUBLIC_API_KEY}\n      authConfig_c={{\n        SignInComponent,\n      }}\n    >\n      {/* Your app */}\n    </CopilotKit>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Custom Component in Copilot Chat using useCopilotAction\nDESCRIPTION: Demonstrates how to use useCopilotAction to render a calendar meeting component in the chat interface without a handler function. This example shows how to display UI elements with parameter specifications.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/generative-ui.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\" // only necessary if you are using Next.js with the App Router. \nimport { useCopilotAction } from \"@copilotkit/react-core\"; \n\nexport function YourComponent() {\n  useCopilotAction({ \n    name: \"showCalendarMeeting\",\n    description: \"Displays calendar meeting information\",\n    parameters: [\n      {\n        name: \"date\",\n        type: \"string\",\n        description: \"Meeting date (YYYY-MM-DD)\",\n        required: true\n      },\n      {\n        name: \"time\",\n        type: \"string\",\n        description: \"Meeting time (HH:mm)\",\n        required: true\n      },\n      {\n        name: \"meetingName\",\n        type: \"string\",\n        description: \"Name of the meeting\",\n        required: false\n      }\n    ],\n    render: ({ status, args }) => {\n      const { date, time, meetingName } = args;\n\n      if (status === 'inProgress') {\n        return <LoadingView />; // Your own component for loading state\n      } else {\n        const meetingProps: CalendarMeetingCardProps = {\n          date: date,\n          time,\n          meetingName\n        };\n        return <CalendarMeetingCardComponent {...meetingProps} />;\n      }\n    },\n  });\n\n  return (\n    <>...</>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit UI Dependencies\nDESCRIPTION: Command to install the necessary npm packages for using CopilotKit's UI components, including the CopilotSidebar component.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_95\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @copilotkit/react-core @copilotkit/react-ui\n```\n\n----------------------------------------\n\nTITLE: Implementing Message History Persistence with localStorage in TypeScript\nDESCRIPTION: TypeScript implementation for saving and loading chat message history using localStorage. Handles different message types (TextMessage, ActionExecutionMessage, ResultMessage) and includes message parsing logic for restoration. Uses CopilotKit's message context and effects for state management.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/messages-localstorage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCopilotMessagesContext } from \"@copilotkit/react-core\";\nimport { ActionExecutionMessage, ResultMessage, TextMessage } from \"@copilotkit/runtime-client-gql\";\n\nconst { messages, setMessages } = useCopilotMessagesContext();\n\n// save to local storage when messages change\nuseEffect(() => {\n  if (messages.length !== 0) {\n    localStorage.setItem(\"copilotkit-messages\", JSON.stringify(messages));\n  }\n}, [JSON.stringify(messages)]);\n\n// initially load from local storage\nuseEffect(() => {\n  const messages = localStorage.getItem(\"copilotkit-messages\");\n  if (messages) {\n    const parsedMessages = JSON.parse(messages).map((message: any) => {\n      if (message.type === \"TextMessage\") {\n        return new TextMessage({\n          id: message.id,\n          role: message.role,\n          content: message.content,\n          createdAt: message.createdAt,\n        });\n      } else if (message.type === \"ActionExecutionMessage\") {\n        return new ActionExecutionMessage({\n          id: message.id,\n          name: message.name,\n          scope: message.scope,\n          arguments: message.arguments,\n          createdAt: message.createdAt,\n        });\n      } else if (message.type === \"ResultMessage\") {\n        return new ResultMessage({\n          id: message.id,\n          actionExecutionId: message.actionExecutionId,\n          actionName: message.actionName,\n          result: message.result,\n          createdAt: message.createdAt,\n        });\n      } else {\n        throw new Error(`Unknown message type: ${message.type}`);\n      }\n    });\n    setMessages(parsedMessages);\n  }\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Tunneling Local Server with CopilotKit CLI\nDESCRIPTION: Command to use CopilotKit CLI for tunneling the local server.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_162\n\nLANGUAGE: bash\nCODE:\n```\nnpx copilotkit@latest dev --port <port_number>\n```\n\n----------------------------------------\n\nTITLE: MCP Client Creation Example\nDESCRIPTION: Example of creating an MCP (Model Context Protocol) client with custom configuration and authentication.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/CopilotRuntime.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { experimental_createMCPClient } from \"ai\"; // Import from vercel ai library\n// ...\nconst runtime = new CopilotRuntime({\n  mcpEndpoints: [{ endpoint: \"...\" }],\n  async createMCPClient(config) {\n    return await experimental_createMCPClient({\n      transport: {\n        type: \"sse\",\n        url: config.endpoint,\n        headers: config.apiKey\n          ? { Authorization: `Bearer ${config.apiKey}` }\n          : undefined,\n      },\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning CopilotKit Repository\nDESCRIPTION: Commands to clone the forked CopilotKit repository and navigate to the docs directory.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/(other)/contributing/docs-contributions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/<your-username>/CopilotKit\ncd CopilotKit/docs\n```\n\n----------------------------------------\n\nTITLE: Using useCopilotReadable Hook with Nested Components\nDESCRIPTION: Advanced implementation of useCopilotReadable that maintains hierarchical structure of information using parentId. This pattern is useful for nested components and complex state relationships.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCopilotReadable } from \"@copilotkit/react-core\";\n\nfunction Employee(props: EmployeeProps) {\n  const { employeeName, workProfile, metadata } = props;\n\n  // propagate any information to copilot\n  const employeeContextId = useCopilotReadable({\n    description: \"Employee name\",\n    value: employeeName\n  });\n\n  // Pass a parentID to maintain a hierarchical structure.\n  // Especially useful with child React components, list elements, etc.\n  useCopilotReadable({\n    description: \"Work profile\",\n    value: workProfile.description(),\n    parentId: employeeContextId\n  });\n\n  useCopilotReadable({\n    description: \"Employee metadata\",\n    value: metadata.description(),\n    parentId: employeeContextId\n  });\n\n  return (\n    // Render as usual...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Interrupts in Python\nDESCRIPTION: This Python code defines multiple interrupts within the chat_node function. It includes interrupts for approval and asking for the agent's name, each with a specific type for differentiation.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_188\n\nLANGUAGE: python\nCODE:\n```\nfrom langgraph.types import interrupt\nfrom langchain_core.messages import SystemMessage\nfrom langchain_openai import ChatOpenAI\n\n# ... your full state definition\n\ndef chat_node(state: AgentState, config: RunnableConfig):\n\n  state[\"approval\"] = interrupt({ \"type\": \"approval\", \"content\": \"please approve\" })\n\n  if not state.get(\"agent_name\"):\n    # Interrupt and wait for the user to respond with a name\n    state[\"agent_name\"] = interrupt({ \"type\": \"ask\", \"content\": \"Before we start, what would you like to call me?\" })\n\n  # Tell the agent its name\n  system_message = SystemMessage(\n    content=f\"You are a helpful assistant...\"\n  )\n\n  response = ChatOpenAI(model=\"gpt-4o\").invoke(\n    [system_message, *state[\"messages\"]],\n    config\n  )\n\n  return {\n    **state,\n    \"messages\": response,\n  }\n```\n\n----------------------------------------\n\nTITLE: Manually Emitting Messages in Python with CopilotKit and LangGraph\nDESCRIPTION: This code demonstrates how to emit messages early in a node's execution using the copilotkit_emit_message function in Python. It sends an intermediate message to the user, simulates a long-running task, and then includes the emitted message in the message history.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/advanced/emit-messages.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_core.messages import SystemMessage, AIMessage\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.runnables import RunnableConfig\nfrom copilotkit.langgraph import copilotkit_emit_message\n# ...\n\nasync def chat_node(state: AgentState, config: RunnableConfig):\n    model = ChatOpenAI(model=\"gpt-4o\")\n\n    intermediate_message = \"Thinking really hard...\"\n    await copilotkit_emit_message(config, intermediate_message)\n\n    # simulate a long running task\n    await asyncio.sleep(2) \n\n    response = await model.ainvoke([\n        SystemMessage(content=\"You are a helpful assistant.\"),\n        *state[\"messages\"]\n    ], config)\n    \n    return Command(\n        goto=END,\n        update={\n            # Make sure to include the emitted message in the messages history\n            \"messages\": [AIMessage(content=intermediate_message), response]\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Using useCoAgentStateRender Hook in React\nDESCRIPTION: Implementation of the useCoAgentStateRender hook to render agent state updates in the chat UI.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/in-app-agent-read.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCoAgentStateRender } from \"@copilotkit/react-core\";\n\ntype AgentState = {\n  language: \"english\" | \"spanish\";\n}\n\nfunction YourMainContent() {\n  useCoAgentStateRender({\n    name: \"sample_agent\",\n    render: ({ state }) => {\n      if (!state.language) return null;\n      return <div>Language: {state.language}</div>;\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotKit Provider with Self-hosted Setup\nDESCRIPTION: Integration of CopilotKit provider in a Next.js application using self-hosted configuration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-3-setup-copilotkit.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { TasksList } from \"@/components/TasksList\";\nimport { TasksProvider } from \"@/lib/hooks/use-tasks\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nexport default function Home() {\n  return (\n    <CopilotKit runtimeUrl=\"/api/copilotkit\">\n      <TasksProvider>\n        <TasksList />\n      </TasksProvider>\n    </CopilotKit>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Initial Message in Chat with useCopilotChat in TypeScript\nDESCRIPTION: This code snippet shows how to add an initial message to a chat using the useCopilotChat hook. It uses the appendMessage function to add a welcome message from an AI car salesman when the chat is first loaded.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useCopilotChat } from \"@copilotkit/react-core\";\n\n// ...\n\nconst { appendMessage, isLoading } = useCopilotChat();\n\n// Render an initial message when the chat is first loaded\nuseEffect(() => {\n  if (initialMessageSent || isLoading) return;\n\n  setTimeout(() => {\n    appendMessage(\n      new TextMessage({\n        content:\n          \"Hi, I'm Fio, your AI car salesman. First, let's get your contact information before we get started.\",\n        role: MessageRole.Assistant,\n      }),\n    );\n    setInitialMessageSent(true);\n  }, 500);\n}, [initialMessageSent, appendMessage, isLoading]);\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing CTA Cards Component in JSX\nDESCRIPTION: JSX component rendering a grid of call-to-action cards displaying Generative UI variants with icons and descriptions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/generative-ui/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CTACards\n  columns={2}\n  cards={[\n    {\n      icon: BotIcon,\n      title: \"Agentic\",\n      description: \"Render your agent's state, progress, and outputs with custom UI components.\",\n      href: \"/coagents/generative-ui/agentic\"\n    },\n    {\n      icon: WrenchIcon,\n      title: \"Tool-based\",\n      description: \"Render your agent's tool calls with custom UI components.\",\n      href: \"/coagents/generative-ui/tool-based\"\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing CopilotTextarea Styles in Root Component\nDESCRIPTION: Shows how to import the default styles for CopilotTextarea at the root level of a React application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/CopilotTextarea.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"@copilotkit/react-textarea/styles.css\"; // [!code highlight]\n\nexport function YourRootComponent() {\n  return (\n    <CopilotKit>\n      ...\n    </CopilotKit>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotTask in React Component\nDESCRIPTION: This code snippet demonstrates how to use CopilotTask within a React component. It sets up a task to set a random message and provides a button to execute the task.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/CopilotTask.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotTask, useCopilotContext } from \"@copilotkit/react-core\";\n\nexport function MyComponent() {\n  const context = useCopilotContext();\n\n  const task = new CopilotTask({\n    instructions: \"Set a random message\",\n    actions: [\n      {\n        name: \"setMessage\",\n      description: \"Set the message.\",\n      argumentAnnotations: [\n        {\n          name: \"message\",\n          type: \"string\",\n          description:\n            \"A message to display.\",\n          required: true,\n        },\n      ],\n     }\n    ]\n  });\n\n  const executeTask = async () => {\n    await task.run(context, action);\n  }\n\n  return (\n    <>\n      <button onClick={executeTask}>\n        Execute task\n      </button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Local CrewAI Flow Agent\nDESCRIPTION: Install dependencies and start the local CrewAI Flow agent server.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/quickstart/crewai.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\npoetry lock\npoetry install\n# Start the server\npoetry run demo\n```\n\n----------------------------------------\n\nTITLE: Returning Messages from LangGraph Node\nDESCRIPTION: Example showing how to return messages from a LangGraph node to ensure they appear in CopilotKit chat history. The node takes a State and RunnableConfig as parameters and returns a dictionary containing response messages.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/troubleshooting/migrate-from-v0.2-to-v0.3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef my_node(state: State, config: RunnableConfig) -> State:\n    response = # ... llm call ...\n    return {\n        \"messages\": response,\n    }\n```\n\n----------------------------------------\n\nTITLE: Importing CopilotKit Styles in Root Component\nDESCRIPTION: Example showing how to import CopilotKit styles at the root level of your application\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/chat/CopilotChat.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"@copilotkit/react-ui/styles.css\";\n\nexport function YourRootComponent() {\n  return (\n    <CopilotKit>\n      ...\n    </CopilotKit>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Button Navigation Components\nDESCRIPTION: Implementation of navigation buttons linking to GitHub repository and live demo.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"flex flex-row gap-2\">\n  <Button size=\"lg\" asChild className=\"flex gap-2 items-center\">\n    <Link href=\"https://github.com/CopilotKit/CopilotKit/tree/main/examples/coagents-travel?ref=travel-tutorial\" className=\"no-underline\" target=\"_blank\">\n      <FaGithub className=\"w-6 h-6 mr-2\" />\n      <span>View on GitHub</span>\n    </Link>\n  </Button>\n\n  <Button size=\"lg\" asChild className=\"flex gap-2 items-center\">\n    <Link href=\"https://examples-coagents-ai-travel-app.vercel.app/\" className=\"no-underline\" target=\"_blank\">\n      <PiMonitor className=\"w-6 h-6 mr-2\" />\n      <span>View live app</span>\n    </Link>\n  </Button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous LLM Invocation for Tool Call Streaming\nDESCRIPTION: Demonstrates the correct way to invoke LLM asynchronously to enable progressive streaming of tool calls.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/troubleshooting/common-issues.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfig = copilotkit_customize_config(config, emit_tool_calls=[\"say_hello_to\"])\nresponse = await llm_with_tools.ainvoke(\n    [ SystemMessage(content=system_message), *state[\"messages\"] ],\n    config=config\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Agent State Outside Chat in React\nDESCRIPTION: Demonstrates how to use the useCoAgent hook to render the agent's state outside of the chat interface in a React component.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_69\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\n// ...\n\n// Define the state of the agent, should match the state of the agent in your LangGraph.\ntype AgentState = {\n  searches: {\n    query: string;\n    done: boolean;\n  }[];\n};\n\nfunction YourMainContent() {\n  // ...\n\n\n  const { state } = useCoAgent<AgentState>({\n    name: \"sample_agent\", // the name the agent is served as\n  })\n\n  // ...\n\n  return (\n    <div>\n      {/* ... */}\n      <div className=\"flex flex-col gap-2 mt-4\">\n\n        {state.searches?.map((search, index) => (\n          <div key={index} className=\"flex flex-row\">\n            {search.done ? \"✅\" : \"❌\"} {search.query}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Switching Threads in CopilotKit\nDESCRIPTION: This code shows how to implement dynamic thread switching in CopilotKit using React state. When the threadId changes, CopilotKit will load the previous messages for that thread, enabling seamless conversation context management.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_127\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from \"react\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nconst Page = () => {\n  const [threadId, setThreadId] = useState(\"af2fa5a4-36bd-4e02-9b55-2580ab584f89\");\n  return (\n    <CopilotKit threadId={threadId}>\n      <YourApp setThreadId={setThreadId} />\n    </CopilotKit>\n  )\n}\n\nconst YourApp = () => {\n  return (\n    <Button onClick={() => setThreadId(\"679e8da5-ee9b-41b1-941b-80e0cc73a008\")}>\n      Change Thread\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Chat Suggestions Implementation with useCopilotChatSuggestions\nDESCRIPTION: Basic implementation of chat suggestions using the useCopilotChatSuggestions hook. The hook generates suggestions based on provided instructions and monitors a dependency array to update suggestions when relevant state changes.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotChatSuggestions } from \"@copilotkit/react-ui\";\n\nexport function MyComponent() {\n\n  useCopilotChatSuggestions(\n    {\n      instructions: \"Suggest the most relevant next actions.\",\n      minSuggestions: 1,\n      maxSuggestions: 2,\n    },\n    [relevantState],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding LangGraph Agents to CopilotKit Remote Endpoint in Python\nDESCRIPTION: Shows how to initialize CopilotKitRemoteEndpoint with LangGraph agents. This allows serving agents that can perform specific tasks like sending emails.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_83\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitRemoteEndpoint, LangGraphAgent\nfrom my_agent.agent import graph\n\nsdk = CopilotKitRemoteEndpoint(\n    agents=[\\\n        LangGraphAgent(\\\n            name=\"email_agent\",\\\n            description=\"This agent sends emails\",\\\n            graph=graph,\\\n        )\\\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Exiting Agent Execution\nDESCRIPTION: Example showing how to signal agent completion using copilotkit_exit function within a node.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/LangGraph.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_exit\n\ndef my_node(state: Any):\n    await copilotkit_exit(config)\n    return state\n```\n\n----------------------------------------\n\nTITLE: Basic CopilotChat Component Usage\nDESCRIPTION: Example showing how to import and use the CopilotChat component with basic configuration\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/chat/CopilotChat.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotChat } from \"@copilotkit/react-ui\";\nimport \"@copilotkit/react-ui/styles.css\";\n\n<CopilotChat\n  labels={{\n    title: \"Your Assistant\",\n    initial: \"Hi! 👋 How can I assist you today?\",\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running the Agent Demo\nDESCRIPTION: Command to run the agent demo using Poetry.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-routing/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npoetry run demo\n```\n\n----------------------------------------\n\nTITLE: Simulating State Updates in TypeScript LangGraph Agent\nDESCRIPTION: This snippet demonstrates how to simulate state updates in a TypeScript LangGraph agent, including initializing searches and updating their status over time.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/generative-ui/agentic.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RunnableConfig } from \"@langchain/core/runnables\";\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { Annotation } from \"@langchain/langgraph\";\nimport { SystemMessage } from \"@langchain/core/messages\";\nimport { copilotkitEmitState, CopilotKitStateAnnotation } from \"@copilotkit/sdk-js/langgraph\";\n\ntype Search = {\n  query: string;\n  done: boolean;\n}\n\nexport const AgentStateAnnotation = Annotation.Root({\n  searches: Annotation<Search[]>,\n  ...CopilotKitStateAnnotation.spec,\n});\n\nasync function chat_node(state: AgentState, config: RunnableConfig) {\n  state.searches = [\n    { query: \"Initial research\", done: false },\n    { query: \"Retrieving sources\", done: false },\n    { query: \"Forming an answer\", done: false },\n  ];\n  await copilotkitEmitState(config, state);\n\n  // Simulate state updates\n  for (const search of state.searches) {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    search.done = true;\n    await copilotkitEmitState(config, state);\n  }\n\n  const response = await ChatOpenAI({ model: \"gpt-4o\" }).invoke([\n    new SystemMessage({ content: \"You are a helpful assistant.\"}),\n    ...state.messages,\n  ], config);\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotPopup UI Component\nDESCRIPTION: React component that adds a floating chat interface using CopilotKit's CopilotPopup component. This provides a toggleable chat UI for user interaction.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_123\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopilotPopup } from \"@copilotkit/react-ui\";\n\nexport function YourApp() {\n  return (\n    <>\n      <YourMainContent />\n      <CopilotPopup\n        instructions={\"You are assisting the user as best as you can. Answer in the best way possible given the data you have.\"}\n        labels={{\n          title: \"Popup Assistant\",\n          initial: \"Need any help?\",\n        }}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Emitting Messages in LangGraph Agent\nDESCRIPTION: This code demonstrates how to manually emit messages during a LangGraph agent's execution using the copilotkit_emit_message function. It includes setting up a chat node with an intermediate message emission and a simulated long-running task.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_200\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_core.messages import SystemMessage, AIMessage\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.runnables import RunnableConfig\nfrom copilotkit.langgraph import copilotkit_emit_message\n# ...\n\nasync def chat_node(state: AgentState, config: RunnableConfig):\n    model = ChatOpenAI(model=\"gpt-4o\")\n\n\n    intermediate_message = \"Thinking really hard...\"\n    await copilotkit_emit_message(config, intermediate_message)\n\n    # simulate a long running task\n    await asyncio.sleep(2)\n\n    response = await model.ainvoke([\\\n        SystemMessage(content=\"You are a helpful assistant.\"),\\\n        *state[\"messages\"]\\\n    ], config)\n\n    return Command(\n        goto=END,\n        update={\n            # Make sure to include the emitted message in the messages history\n            \"messages\": [AIMessage(content=intermediate_message), response]\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Emitting Intermediate State in LangGraph in JavaScript\nDESCRIPTION: Shows how to emit intermediate state updates to CopilotKit during long-running operations, allowing for progress updates to users.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\nimport { copilotkitEmitState } from \"@copilotkit/sdk-js\";\n\nfor (let i = 0; i < 10; i++) {\n  await someLongRunningOperation(i);\n  await copilotkitEmitState(config, { progress: i });\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Messages for Long-Running Tasks\nDESCRIPTION: Shows how to emit progress messages during long-running tasks using the copilotkit_emit_message function, including adding the message to the state history with a UUID.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/concepts/message-management.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@listen(\"route_to_ask_name\")\nasync def ask_name():\n    \"\"\"\n    Ask the user for their name.\n    \"\"\"\n\n    content = \"Hey, what is your name? 🙂\"\n\n    await copilotkit_emit_message(content)\n\n    # something long running here...\n\n    self.state[\"messages\"].append({\"role\": \"assistant\", \"content\": content, \"id\": str(uuid.uuid4())})\n\n```\n\n----------------------------------------\n\nTITLE: Emitting Intermediate State\nDESCRIPTION: Example demonstrating how to emit intermediate state updates during long-running operations.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/LangGraph.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_emit_state\n\nfor i in range(10):\n    await some_long_running_operation(i)\n    await copilotkit_emit_state(config, {\"progress\": i})\n```\n\n----------------------------------------\n\nTITLE: Handling Interrupts in CopilotKit-LangGraph Agent Node (Python)\nDESCRIPTION: This Python snippet demonstrates how to use the 'copilotkit_interrupt' function to inject an interrupt message and update the agent's state with the user's response before proceeding with the rest of the node logic, including subsequent LLM calls. It requires the 'copilotkit' library, and expects 'AgentState' and 'RunnableConfig' as parameters. The function modifies state in-place by adding messages and setting the agent name, and returns the updated agent state with all relevant fields.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import copilotkit_interrupt\n\n# ...\nasync def chat_node(state: AgentState, config: RunnableConfig)\n    agent_name, new_messages = copilotkit_interrupt(message=\"Before we start, what would you like to call me?\")\n    state[\"messages\"] = state[\"messages\"] + new_messages\n    state[\"agent_name\"] = agent_name\n    # ... add the rest of the node implementation, including LLM calls etc.\n\n    # Don't forget to return the messages list with our newly added interrupt messages, and the new agent name\n    return { \"messages\": state[\"messages\"], \"agent_name\": state[\"agent_name\"] }\n# ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Agent Exit Flow in TypeScript\nDESCRIPTION: TypeScript implementation of an email agent node showing how to use copilotkitExit to terminate the agent loop. Includes logic for handling message responses and email sending status.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/advanced/exit-agent.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { copilotkitExit } from \"@copilotkit/sdk-js/langgraph\";\n\n// ...\n\nasync function sendEmailNode(state: EmailAgentState, config: RunnableConfig): Promise<{ messages: any[] }> {\n    // Send an email.\n\n    await copilotkitExit(config);\n\n    // get the last message and cast to ToolMessage\n    const lastMessage = state.messages[state.messages.length - 1] as ToolMessage;\n    if (lastMessage.content === \"CANCEL\") {\n        return {\n            messages: [new AIMessage(content=\"❌ Cancelled sending email.\")],\n        }\n    } else {\n        return {\n            messages: [new AIMessage(content=\"✅ Sent email.\")],\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Persisting Streamed Messages in CopilotKit LangGraph Agent (Python)\nDESCRIPTION: This code snippet demonstrates how to persist streamed messages in a CopilotKit LangGraph agent using Python. It shows how to call the model with a modified config and return the new messages to ensure they are persisted at the end of the node.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/troubleshooting/common-issues.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_customize_config\n\nasync def chat_node(state: AgentState, config: RunnableConfig):\n    # 1) Call the model with CopilotKit's modified config\n    model = ChatOpenAI(model=\"gpt-4o\")\n    response = await model.ainvoke(state[\"messages\"], modifiedConfig) \n\n    # 2) Make sure to return the new messages\n    return {\n        messages: response,\n    }\n```\n\n----------------------------------------\n\nTITLE: Manually Emitting Messages in TypeScript with CopilotKit and LangGraph\nDESCRIPTION: This code shows how to emit messages early in a node's execution using the copilotkitEmitMessage function in TypeScript. It sends an intermediate message to the user, simulates a long-running task, and then includes the emitted message in the message history.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/advanced/emit-messages.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AIMessage, SystemMessage } from \"@langchain/core/messages\";\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { RunnableConfig } from \"@langchain/core/runnables\";\nimport { copilotkitEmitMessage } from \"@copilotkit/sdk-js/langgraph\";\n// ...\n\nasync function chat_node(state: AgentState, config: RunnableConfig) {\n    const model = new ChatOpenAI({ model: \"gpt-4o\" });\n\n    const intermediateMessage = \"Thinking really hard...\";\n    await copilotkitEmitMessage(config, intermediateMessage);\n\n    // simulate a long-running task\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    const response = await model.invoke([\n        new SystemMessage({content: \"You are a helpful assistant.\"}),\n        ...state.messages\n    ], config);\n\n    return {\n        // Make sure to include the emitted message in the messages history\n        messages: [new AIMessage(intermediateMessage), response],\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit SDK with Poetry\nDESCRIPTION: Commands to install the CopilotKit SDK using Poetry in the agent directory. This allows the use of CopilotKit functions in the Python-based agent.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-5-stream-progress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npoetry add copilotkit\n# or including support for crewai\npoetry add copilotkit[crewai]\n```\n\n----------------------------------------\n\nTITLE: Running the Next.js UI Project\nDESCRIPTION: Command to start the Next.js development server for the UI component. This should be run after setting up the environment and installing dependencies.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-shared-state/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining State Merge Function Signature\nDESCRIPTION: Function signature definition for customizing how CopilotKit merges agent state with messages and actions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/CrewAIAgent.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef merge_state(\n    *,\n    state: dict,\n    messages: List[BaseMessage],\n    actions: List[Any],\n    agent_name: str\n):\n    # ...implementation...\n```\n\n----------------------------------------\n\nTITLE: Project Structure Overview - Directory Tree\nDESCRIPTION: Displays the directory layout for the Playwright test project, highlighting locations for test files, Playwright configuration (TypeScript), package manifest, and README. Serves as a visual reference for developers to understand and follow the standard structure for E2E test projects. NOTE: This is not executable code.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/e2e/README.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nplaywright-test/\\n├── tests/                    # Test files directory\\n├── playwright.config.ts      # Playwright configuration\\n├── package.json             # Project dependencies and scripts\\n└── README.md               # This file\n```\n\n----------------------------------------\n\nTITLE: React Component Import Declarations\nDESCRIPTION: Import statements for required React components and icons used in the tutorial page.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { YouTubeVideo } from \"@/components/react/youtube-video\";\nimport { FaGithub } from \"react-icons/fa\";\nimport { PiMonitor } from \"react-icons/pi\";\nimport { Button } from \"@/components/ui/button\";\nimport Link from \"next/link\";\n```\n\n----------------------------------------\n\nTITLE: Tunnel Connectivity Testing Commands\nDESCRIPTION: A set of commands to test connectivity to CopilotKit's tunnel service when experiencing issues with tunnel creation. These commands help determine if your network is blocking connections to the tunnel service.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/troubleshooting/common-issues.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nping tunnels.devcopilotkit.com\ncurl -I https://tunnels.devcopilotkit.com\ntelnet tunnels.devcopilotkit.com 443\n```\n\n----------------------------------------\n\nTITLE: CopilotKit README HTML Structure\nDESCRIPTION: HTML markup for the CopilotKit README page, including centered divs for logo, badges, navigation buttons and banner image. Contains links to documentation, Discord server, and cloud platform.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/sdk-js/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div align=\"center\">\n  <a href=\"https://copilotkit.ai\" target=\"_blank\">\n    <img src=\"https://github.com/copilotkit/copilotkit/raw/main/assets/banner.png\" alt=\"CopilotKit Logo\">\n  </a>\n\n  <br/>\n\n  <strong>\n    CopilotKit is the open-source framework for integrating powerful AI Copilots into any application. Easily implement custom AI Chatbots, AI Agents, AI Textareas, and more.\n  </strong>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing UserMessage Component in CopilotKit\nDESCRIPTION: This snippet demonstrates how to create a custom UserMessage component with a blue background and an avatar. It uses the UserMessageProps from @copilotkit/react-ui and implements a custom layout and styling.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/bring-your-own-components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UserMessageProps } from \"@copilotkit/react-ui\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\nimport { CopilotSidebar } from \"@copilotkit/react-ui\";\nimport \"@copilotkit/react-ui/styles.css\";\n\nconst CustomUserMessage = (props: UserMessageProps) => {\n  const wrapperStyles = \"flex items-center gap-2 justify-end mb-4\";\n  const messageStyles = \"bg-blue-500 text-white py-2 px-4 rounded-xl break-words flex-shrink-0 max-w-[80%]\";\n  const avatarStyles = \"bg-blue-500 shadow-sm min-h-10 min-w-10 rounded-full text-white flex items-center justify-center\";\n\n  return (\n    <div className={wrapperStyles}>\n      <div className={messageStyles}>{props.message}</div>\n      <div className={avatarStyles}>TS</div>\n    </div>\n  );\n};\n\n<CopilotKit>\n  <CopilotSidebar UserMessage={CustomUserMessage} />\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Defining AgentState and Chat Node in Python\nDESCRIPTION: This snippet defines an AgentState class and a chat_node function that handles interrupts and agent responses. It uses the CopilotKit framework to create a conversational agent with a customizable name.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_185\n\nLANGUAGE: python\nCODE:\n```\n# add the agent state definition from the previous step\nclass AgentState(CopilotKitState):\n    agent_name: str\n\ndef chat_node(state: AgentState, config: RunnableConfig):\n    if not state.get(\"agent_name\"):\n    # Interrupt and wait for the user to respond with a name\n    state[\"agent_name\"] = interrupt(\"Before we start, what would you like to call me?\")\n\n    # Tell the agent its name\n    system_message = SystemMessage(\n        content=f\"You are a helpful assistant named {state.get('agent_name')}...\"\n    )\n\n    response = ChatOpenAI(model=\"gpt-4o\").invoke(\n        [system_message, *state[\"messages\"]],\n        config\n    )\n\n    return {\n        **state,\n        \"messages\": response,\n    }\n```\n\n----------------------------------------\n\nTITLE: Show Car Component Implementation\nDESCRIPTION: React component for displaying car details with selection and rejection options, including styling and animation features.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport function ShowCar({ car, onSelect, onReject, status, className }: ShowCarProps) {\n  const carDetails = [\n    { label: \"Make\", value: car.make },\n    { label: \"Model\", value: car.model },\n    { label: \"Year\", value: car.year },\n    { label: \"Color\", value: <ColorDisplay color={car.color} /> },\n    { label: \"Price\", value: `$${car.price?.toLocaleString()}`, bold: true },\n  ];\n\n  const cardStyles = cn(\"min-w-[300px] max-w-sm bg-white rounded-xl overflow-hidden p-0 gap-0\", className);\n  const informationWrapperStyles = \"space-y-6 pt-4 pb-4\";\n  const acceptButtonStyles = \"flex-1 bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-all duration-200 shadow-sm hover:shadow-md\";\n  const rejectButtonStyles = \"flex-1 bg-gray-50 text-gray-700 px-6 py-3 rounded-lg font-medium hover:bg-gray-100 transition-all duration-200\";\n\n  return (\n    <AnimatedCard status={status} className={cardStyles}>\n      <CarImage car={car} />\n\n      <div className={informationWrapperStyles}>\n        <div className=\"space-y-2 px-6\">\n          <div className=\"text-2xl font-semibold text-gray-900\">\n            {car.year} {car.make} {car.model}\n          </div>\n          {carDetails.map(({ label, value, bold }) => (\n            <div key={label} className=\"flex justify-between items-center py-1\">\n              <span className=\"text-gray-500 text-sm\">{label}</span>\n              <span className={cn(\"text-gray-900\", bold ? \"font-semibold text-lg\" : \"text-sm\")}>\n                {value}\n              </span>\n            </div>\n          ))}\n        </div>\n\n        <div className={cn(\"px-6 pt-2\", status === \"complete\" ? \"hidden\" : \"animate-fade-in\")}>\n          <hr className=\"mb-4 border-gray-100\" />\n          <div className=\"flex gap-3\">\n            {onReject && (\n              <button className={rejectButtonStyles} onClick={onReject}>\n                Other options\n              </button>\n            )}\n            <button className={acceptButtonStyles} onClick={onSelect}>\n              Select\n            </button>\n          </div>\n        </div>\n      </div>\n    </AnimatedCard>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: LangGraphAgent with Custom Configuration\nDESCRIPTION: Example demonstrating how to create a LangGraphAgent with a custom LangGraph/LangChain configuration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/LangGraphAgent.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nLangGraphAgent(\n    ...\n    langgraph_config=config,\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Agent State in Chat UI\nDESCRIPTION: Shows how to use the useCoAgentStateRender hook to display agent state updates within the chat interface, with automatic reactive updates.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/shared-state/in-app-agent-read.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCoAgentStateRender } from \"@copilotkit/react-core\";\n\ntype AgentState = {\n  language: \"english\" | \"spanish\";\n};\n\nfunction YourMainContent() {\n  useCoAgentStateRender({\n    name: \"sample_agent\",\n    render: ({ state }) => {\n      if (!state.language) return null;\n      return <div>Language: {state.language}</div>;\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Preprocessing and Programmatic Handling of Interrupt Events (TSX)\nDESCRIPTION: Demonstrates advanced interrupt handling for a custom chat UI using the 'handler' property of 'useLangGraphInterrupt' (from '@copilotkit/react-core') to preprocess an interrupt's incoming value and respond automatically when certain conditions are met (e.g., granting access if the user is in the correct department). If preprocessing is insufficient, the handler passes results to a React component for manual resolution by the user. The example assumes 'Department' types, a method for user lookup, and includes conditional UI rendering for access requests.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n// We will assume an interrupt event in the following shape\ntype Department = 'finance' | 'engineering' | 'admin'\ninterface AuthorizationInterruptEvent {\n    type: 'auth',\n    accessDepartment: Department,\n}\n\nimport { useLangGraphInterrupt } from \"@copilotkit/react-core\";\n\nconst YourMainContent = () => {\n    const [userEmail, setUserEmail] = useState({ email: 'example@user.com' })\n    function getUserByEmail(email: string): { id: string; department: Department } {\n        // ... an implementation of user fetching\n    }\n\n    // ...\n    // styles omitted for brevity\n    // [!code highlight:30]\n    useLangGraphInterrupt({\n        handler: async ({ result, event, resolve }) => {\n            const { department } = await getUserByEmail(userEmail)\n            if (event.value.accessDepartment === department || department === 'admin') {\n                // Following the resolution of the event, we will not proceed to the render method\n                resolve({ code: 'AUTH_BY_DEPARTMENT' })\n                return;\n            }\n\n            return { department, userId }\n        },\n        render: ({ result, event, resolve }) => (\n            <div>\n                <h1>Request for {event.value.type}</h1>\n                <p>Members from {result.department} department cannot access this information</p>\n                <p>You can request access from an administrator to continue.</p>\n                <button\n                    onClick={() => resolve({ code: 'REQUEST_AUTH', data: { department: result.department, userId: result.userId } })}\n                >\n                    Request Access\n                </button>\n                <button\n                    onClick={() => resolve({ code: 'CANCEL' })}\n                >\n                    Cancel\n                </button>\n            </div>\n        )\n    });\n    // ...\n\n    return <div>{/* ... */}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Core CopilotKit Features in TypeScript\nDESCRIPTION: Demonstrates the main features of CopilotKit including headless UI, pre-built components, frontend RAG, knowledge base integration, actions, and structured autocompletion. Shows how to create customizable AI assistants with various integration options.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Headless UI with full control\nconst { visibleMessages, appendMessage, setMessages, ... } = useCopilotChat();\n\n// Pre-built components with deep customization options (CSS + pass custom sub-components)\n<CopilotPopup \n  instructions={\"You are assisting the user as best as you can. Answer in the best way possible given the data you have.\"} \n  labels={{ title: \"Popup Assistant\", initial: \"Need any help?\" }} \n/>\n\n// ---\n\n// Frontend RAG\nuseCopilotReadable({\n  description: \"The current user's colleagues\",\n  value: colleagues,\n});\n\n// knowledge-base integration\nuseCopilotKnowledgebase(myCustomKnowledgeBase)\n\n// ---\n\n// Frontend actions + generative UI, with full streaming support\nuseCopilotAction({\n  name: \"appendToSpreadsheet\",\n  description: \"Append rows to the current spreadsheet\",\n  parameters: [\n    { name: \"rows\", type: \"object[]\", attributes: [{ name: \"cells\", type: \"object[]\", attributes: [{ name: \"value\", type: \"string\" }] }] }\n  ],\n  render: ({ status, args }) => <Spreadsheet data={canonicalSpreadsheetData(args.rows)} />,\n  handler: ({ rows }) => setSpreadsheet({ ...spreadsheet, rows: [...spreadsheet.rows, ...canonicalSpreadsheetData(rows)] }),\n});\n\n// ---\n\n// structured autocomplete for anything\nconst { suggestions } = useCopilotStructuredAutocompletion(\n  {\n    instructions: `Autocomplete or modify spreadsheet rows based on the inferred user intent.`,\n    value: { rows: spreadsheet.rows.map((row) => ({ cells: row })) },\n    enabled: !!activeCell && !spreadsheetIsEmpty,\n  },\n  [activeCell, spreadsheet]\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies - Bash\nDESCRIPTION: This command installs all Node.js project dependencies using npm, as specified in package.json. npm should be available in the environment, which comes with Node.js installations. Ensure you run this command in the project root directory containing package.json; expected output is updated node_modules folder with all libraries required for running Playwright tests.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/e2e/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: HTML Badge Links Configuration\nDESCRIPTION: HTML structure for displaying NPM version, license and Discord badges with external links\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/shared/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div align=\"center\">\n  <a href=\"https://www.npmjs.com/package/@copilotkit/react-core\" target=\"_blank\">\n    <img src=\"https://img.shields.io/npm/v/%40copilotkit%2Freact-core?logo=npm&logoColor=%23FFFFFF&label=Version&color=%236963ff\" alt=\"NPM\">\n  </a>\n  <img src=\"https://img.shields.io/github/license/copilotkit/copilotkit?color=%236963ff&label=License\" alt=\"MIT\">\n  <a href=\"https://discord.gg/6dffbvGU3D\" target=\"_blank\">\n    <img src=\"https://img.shields.io/discord/1122926057641742418?logo=discord&logoColor=%23FFFFFF&label=Discord&color=%236963ff\" alt=\"Discord\">\n  </a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing CopilotKit in Next.js\nDESCRIPTION: Command to initialize CopilotKit in an existing Next.js application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/quickstart/crewai.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx copilotkit@latest init\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Components for Next Steps in JSX\nDESCRIPTION: This snippet shows how to create a set of Card components within a Cards container to display next steps for users. Each Card represents a different action or resource related to CoAgents and CopilotKit.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/concepts/agentic-copilots.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards>\n    <Card\n        title=\"Build your first CoAgent\"\n        description=\"Follow a step-by-step tutorial to build a travel app supercharged with CoAgents.\"\n        href=\"/coagents/quickstart/langgraph\"\n        icon={<RocketIcon />}\n    />\n    <Card\n        title=\"Learn more CoAgent concepts\"\n        description=\"Learn more about the concepts used to talk about CoAgents and how to use them.\"\n        href=\"/coagents/concepts/terminology\"\n        icon={<GraduationCapIcon />}\n    />\n    <Card\n        title=\"Read the reference documentation\"\n        description=\"Just here for some reference? Checkout the reference documentation for more details.\"\n        href=\"/reference\"\n        icon={<CodeIcon />}\n    />\n    <Card\n        title=\"See examples of CoAgents in action\"\n        description=\"Checkout our video examples of CoAgents in action.\"\n        href=\"/coagents/videos/research-canvas\"\n        icon={<VideoIcon />}\n    />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Controlling Message and Tool Call Streaming in CopilotKit with Python\nDESCRIPTION: This code snippet demonstrates how to selectively control streaming of messages and tool calls in CopilotKit using Python. It shows two approaches: one that disables all streaming for private LLM calls, and another that enables streaming of message tokens.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/advanced/disabling-state-streaming.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.crewai import copilotkit_stream\n\n@start()\nasync def start(self):\n\n    # 1) Do not emit messages or tool calls, keeping the LLM call private.\n    response = completion(\n        model=\"openai/gpt-4o\",\n        messages=[\n            {\"role\": \"system\", \"content\": my_prompt},\n            *self.state[\"messages\"]\n        ],\n    )\n\n    # 2) Or wrap the LLM call with `copilotkit_stream` to stream messages tokens.\n    #    Note that we pass `stream=True` to the inner `completion` call.\n    response = copilotkit_stream(\n        completion(\n            model=\"openai/gpt-4o\",\n            messages=[\n                {\"role\": \"system\", \"content\": my_prompt},\n                *self.state[\"messages\"]\n            ],\n            stream=True\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring CopilotRuntime for LangGraph JS\nDESCRIPTION: TypeScript code snippet for configuring CopilotRuntime with remoteEndpoints for LangGraph JS integration. This code should be uncommented and customized when using the JS agent.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-research-canvas/readme.md#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n//const runtime = new CopilotRuntime({\n// remoteEndpoints: [\n    // Uncomment this if you want to use LangGraph JS, make sure to\n    // remove the remote action url below too.\n    //\n    // langGraphPlatformEndpoint({\n    //   deploymentUrl: \"http://localhost:8123\",\n    //   langsmithApiKey: process.env.LANGSMITH_API_KEY || \"\", // only used in LangGraph Platform deployments\n    //   agents: [{\n    //       name: \"research_agentt\",\n    //       description: \"Research agent\"\n    //   }]\n    // }),\n// ],\n//});\n```\n\n----------------------------------------\n\nTITLE: Defining LangGraph Agent State in Python\nDESCRIPTION: Defines the state structure for a research agent using Python classes, including fields for research title, proposal, outline, sections, footnotes, sources, tool, and logs.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-6-shared-state.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Dict, Union, List\nfrom langgraph.graph import MessagesState\n\nclass ResearchState(MessagesState):\n    title: str\n    proposal: Dict[str, Union[str, bool, Dict[str, Union[str, bool]]]]  # Stores proposed structure before user approval\n    outline: dict\n    sections: List[dict]  # list of dicts with 'title','content',and 'idx'\n    footnotes: str\n    sources: Dict[str, Dict[str, Union[str, float]]]\n    tool: str\n    logs: List[dict]  # list of dicts logs to be sent to frontend with 'message', 'status'\n```\n\n----------------------------------------\n\nTITLE: Assembling a State Machine Chat Component in CopilotKit with TypeScript\nDESCRIPTION: This code brings together the different state machine stages into a complete chat component. It manages state transitions between stages and provides common context, like the user's name, to all available stages.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\nimport { CopilotKit, useCopilotReadable } from \"@copilotkit/react-core\";\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\n// ...\n\nfunction StateMachineChat() {\n  // Track the current stage and user's name\n  const [stage, setStage] = useState<string>(\"one\");\n  const [name, setName] = useState<string>(\"\");\n\n  // Readable context available across all stages\n  useCopilotReadable({\n    description: \"User's name\",\n    value: name,\n  }, [name])\n\n  // Initialize all stages with their required props\n  useStageOne(stage, setStage, setName);\n  useStageTwo(stage);\n  // any additional stages...\n\n  return (\n    <CopilotKit>\n      <CopilotChat/>\n    </CopilotKit>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Copilot UI Components\nDESCRIPTION: Page component setup for rendering the Copilot chat interface using CopilotPopup.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@copilotkit/react-ui/styles.css\";\nimport { CopilotPopup } from \"@copilotkit/react-ui\";\n\nexport function YourApp() {\n  return (\n    <main>\n      <h1>Your main content</h1>\n\n      <CopilotPopup\n        labels={{\n            title: \"Popup Assistant\",\n            initial: \"Hi! I'm connected to an agent. How can I help?\",\n        }}\n      />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing LangGraph Configuration in JavaScript\nDESCRIPTION: Shows how to customize LangGraph configuration for use with CopilotKit, including options to disable message and tool call emissions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\nimport { copilotkitCustomizeConfig } from \"@copilotkit/sdk-js\";\n\nconfig = copilotkitCustomizeConfig(\n  config,\n  emitMessages=false,\n  emitToolCalls=false\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Component in CopilotKit\nDESCRIPTION: This snippet demonstrates how to create a custom Header component for the chat window. It adds a button to the left of the title with a custom icon and uses HeaderProps and useChatContext from @copilotkit/react-ui to manage the chat interface.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/bring-your-own-components.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HeaderProps, useChatContext, CopilotSidebar } from \"@copilotkit/react-ui\";\nimport { BookOpenIcon } from \"@heroicons/react/24/outline\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\nimport \"@copilotkit/react-ui/styles.css\";\nfunction Header({}: HeaderProps) {\n  const { setOpen, icons, labels } = useChatContext();\n\n  return (\n    <div className=\"flex justify-between items-center p-4 bg-blue-500 text-white\">\n      <div className=\"w-24\">\n        <a href=\"/\">\n          <BookOpenIcon className=\"w-6 h-6\" />\n        </a>\n      </div>\n      <div className=\"text-lg\">{labels.title}</div>\n      <div className=\"w-24 flex justify-end\">\n        <button onClick={() => setOpen(false)} aria-label=\"Close\">\n          {icons.headerCloseIcon}\n        </button>\n      </div>\n    </div>\n  );\n};\n\n<CopilotKit>\n  <CopilotSidebar Header={Header} />\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Remote Actions in CopilotRuntime\nDESCRIPTION: This code snippet illustrates how to set up remote actions in CopilotRuntime. It shows how to integrate external services or APIs that conform to the Open-Source CopilotKit backend protocol, including support for LangGraph-powered CoAgents.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions_old.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst runtime = new CopilotRuntime({\n  remoteEndpoints: [\n    {\n      url: `${BASE_URL}/copilotkit`,\n    },\n  ],\n});\n\n// ... define the route using the CopilotRuntime.\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State Type in TypeScript\nDESCRIPTION: Creates an AgentState type annotation that extends CopilotKitState to store agent properties\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Annotation } from \"@langchain/langgraph\";\nimport { CopilotKitStateAnnotation } from \"@copilotkit/sdk-js/langgraph\";\n\nexport const AgentStateAnnotation = Annotation.Root({\n  agentName: Annotation<string>,\n  ...CopilotKitStateAnnotation.spec,\n});\nexport type AgentState = typeof AgentStateAnnotation.State;\n```\n\n----------------------------------------\n\nTITLE: Initial Chat Message Setup\nDESCRIPTION: Implementation of initial message loading in a chat interface using CopilotKit's chat hooks. Adds a welcome message when the chat first loads.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotChat } from \"@copilotkit/react-core\";\n\n// ...\n\nconst { appendMessage, isLoading } = useCopilotChat();\n\n// Render an initial message when the chat is first loaded\nuseEffect(() => {\n  if (initialMessageSent || isLoading) return;\n\n  setTimeout(() => {\n    appendMessage(\n      new TextMessage({\n        content:\n          \"Hi, I'm Fio, your AI car salesman. First, let's get your contact information before we get started.\",\n        role: MessageRole.Assistant,\n      }),\n    );\n    setInitialMessageSent(true);\n  }, 500);\n}, [initialMessageSent, appendMessage, isLoading]);\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Restricting Agent Access Based on User Context in Python\nDESCRIPTION: Shows how to conditionally provide different sets of agents based on user context, such as limiting certain agents to admin users only.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_85\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitRemoteEndpoint\nfrom my_agents import agent_a, agent_b, is_admin\n\nsdk = CopilotKitRemoteEndpoint(\n    agents=lambda context: (\n        [agent_a, agent_b] if is_admin(context[\"properties\"][\"token\"]) else [agent_a]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Agent State in Chat Interface with React\nDESCRIPTION: Implementation of agent state rendering within a chat interface using useCoAgentStateRender hook. Demonstrates how to map and display agent search states with completion indicators.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_152\n\nLANGUAGE: jsx\nCODE:\n```\n// ...\nimport { useCoAgentStateRender } from \"@copilotkit/react-core\";\n// ...\n\n// Define the state of the agent, should match the state of the agent in your LangGraph.\ntype AgentState = {\n  searches: {\n    query: string;\n    done: boolean;\n  }[];\n};\n\nfunction YourMainContent() {\n  // ...\n\n\n  // styles omitted for brevity\n  useCoAgentStateRender<AgentState>({\n    name: \"sample_agent\", // the name the agent is served as\n    render: ({ state }) => (\n      <div>\n        {state.searches?.map((search, index) => (\n          <div key={index}>\n            {search.done ? \"✅\" : \"❌\"} {search.query}{search.done ? \"\" : \"...\"}\n          </div>\n        ))}\n      </div>\n    ),\n  });\n\n  // ...\n\n  return <div>...</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Suggestions with useCopilotChatSuggestions\nDESCRIPTION: Shows how to use the useCopilotChatSuggestions hook to generate dynamic chat suggestions based on the application state.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_48\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCopilotChatSuggestions } from \"@copilotkit/react-ui\";\n\nexport function MyComponent() {\n  const [employees, setEmployees] = useState([]);\n\n  useCopilotChatSuggestions({\n    instructions: `The following employees are on duty: ${JSON.stringify(employees)}`,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CopilotKit Config to Search Node\nDESCRIPTION: Modification of the search_node function to include a custom CopilotKit configuration. This config describes the intermediate state that will be emitted during the search process.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-5-stream-progress.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_emit_state, copilotkit_customize_config\n\nasync def search_node(state: AgentState, config: RunnableConfig):\n    \"\"\"\n    The search node is responsible for searching the for places.\n    \"\"\"\n    ai_message = cast(AIMessage, state[\"messages\"][-1])\n\n    config = copilotkit_customize_config(\n        config,\n        emit_intermediate_state=[{\n            \"state_key\": \"search_progress\",\n            \"tool\": \"search_for_places\",\n            \"tool_argument\": \"search_progress\",\n        }],\n    )\n```\n\n----------------------------------------\n\nTITLE: Customizing CopilotKit Config for Search Node\nDESCRIPTION: Adds a custom CopilotKit configuration to the search_node function to describe the intermediate state that will be emitted during the search process.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-5-stream-progress.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_emit_state, copilotkit_customize_config\n\nasync def search_node(state: AgentState, config: RunnableConfig):\n    \"\"\"\n    The search node is responsible for searching the for places.\n    \"\"\"\n    ai_message = cast(AIMessage, state[\"messages\"][-1])\n\n    config = copilotkit_customize_config(\n        config,\n        emit_intermediate_state=[{\n            \"state_key\": \"search_progress\",\n            \"tool\": \"search_for_places\",\n            \"tool_argument\": \"search_progress\",\n        }],\n    )\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Tool Call Emission\nDESCRIPTION: Configures the chat node to emit specific tool calls for front-end handling using CopilotKit customization.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-6-human-in-the-loop.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def chat_node(state: AgentState, config: RunnableConfig):\n    \"\"\"Handle chat operations\"\"\"\n    config = copilotkit_customize_config(\n        config,\n        emit_tool_calls=[\"add_trips\", \"update_trips\", \"delete_trips\"],\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Agent Lock Mode in CopilotKit with TSX\nDESCRIPTION: Demonstrates how to configure CopilotKit to work exclusively with a specific agent using Agent Lock Mode. This mode ensures all requests stay within a single workflow graph for precise control.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/multi-agent-flows.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<CopilotKit runtimeUrl=\"<copilot-runtime-url>\" agent=\"<the-name-of-the-agent>\">\n  {/* Your application components */}\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Displaying Email Link in Markdown\nDESCRIPTION: This snippet shows how to create a clickable email link in Markdown format. It's used to provide the security contact email for Copilotkit.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/SECURITY.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[security@copilotkit.ai](mailto:security@copilotkit.ai)\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Visible Browser - Bash\nDESCRIPTION: Executes Playwright tests so browsers are visible during execution by running the custom 'test:headed' npm script. Useful for troubleshooting failures or observing live test actions. Assumes the 'test:headed' script is defined in package.json.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/e2e/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:headed\n```\n\n----------------------------------------\n\nTITLE: Visualizing Agent State for CoAgents in React\nDESCRIPTION: This snippet demonstrates how to use the useCoAgentStateRender hook to visualize the internal state and progress of CoAgents. It renders a progress bar component based on the agent's state and logs.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/bring-your-own-components.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"; // only necessary if you are using Next.js with the App Router.\n \nimport { useCoAgentStateRender } from \"@copilotkit/react-core\";\nimport { Progress } from \"./progress\";\n\ntype AgentState = {\n  logs: string[];\n}\n\nuseCoAgentStateRender<AgentState>({\n  name: \"basic_agent\",\n  render: ({ state, nodeName, status }) => {\n    if (!state.logs || state.logs.length === 0) {\n      return null;\n    }\n\n    // Progress is a component we are omitting from this example for brevity.\n    return <Progress logs={state.logs} />; \n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers. This allows developers to run the project locally for development and testing.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter-crewai-flows/ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Conditional Agent Access\nDESCRIPTION: Demonstrates conditional agent availability based on user permissions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/RemoteEndpoints.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitRemoteEndpoint\nfrom my_agents import agent_a, agent_b, is_admin\n\nsdk = CopilotKitRemoteEndpoint(\n    agents=lambda context: (\n        [agent_a, agent_b] if is_admin(context[\"properties\"][\"token\"]) else [agent_a]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Emitting Progress Messages for Long Running Tasks\nDESCRIPTION: Demonstrates how to emit status messages during long-running tasks using copilotkit_emit_message. This function allows sending feedback to users without waiting for node transitions in the LangGraph workflow.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/concepts/message-management.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def ask_name_node(state: GreetAgentState, config: RunnableConfig):\n    \"\"\"\n    Ask the user for their name.\n    \"\"\"\n\n    content = \"Hey, what is your name? 🙂\"\n \n    await copilotkit_emit_message(config, content)\n\n    # something long running here...\n \n    return {\n        \"messages\": AIMessage(content=content),\n    }\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Icons for Agentic Copilots UI\nDESCRIPTION: Import statements for React components including TailoredContent, various icons from react-icons and lucide-react packages used in the agentic copilots documentation interface.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/concepts/agentic-copilots.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  TailoredContent,\n  TailoredContentOption,\n} from \"@/components/react/tailored-content\";\nimport { BsFillCloudHaze2Fill as CloudIcon } from \"react-icons/bs\";\nimport { FaServer as SelfHostIcon } from \"react-icons/fa6\";\nimport { SiLangchain } from \"react-icons/si\";\nimport { LinkIcon } from \"lucide-react\";\nimport {\n  RocketIcon,\n  GraduationCapIcon,\n  CodeIcon,\n  VideoIcon,\n} from \"lucide-react\";\n```\n\n----------------------------------------\n\nTITLE: Using useCopilotAdditionalInstructions for Stage-Specific Tool Guidance in TSX\nDESCRIPTION: This TSX snippet demonstrates the `useStageGetPaymentInfo` custom React hook. It utilizes the `useCopilotAdditionalInstructions` hook from CopilotKit to conditionally provide specific instructions to the AI agent only when the application's `stage` variable (from `useGlobalState`) is 'getPaymentInfo'. These instructions explicitly direct the AI to announce the current task and then call the 'getPaymentInformation' action, ensuring the correct tool is used at this specific stage. The hook's execution is dependent on changes to the `stage` variable.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport function useStageGetPaymentInfo() {\n  const { setCardInfo, stage, setStage } = useGlobalState();\n\n  // Conditionally add additional instructions for the agent's prompt.\n  useCopilotAdditionalInstructions({\n    available: stage === \"getPaymentInfo\" ? \"enabled\" : \"disabled\",\n    // [!code highlight:6]\n    instructions: `\n        CURRENT STATE: You are now getting the payment information of the user. \n        Say, 'Great! Now I need to get your payment information.' and MAKE SURE \n        to then call the 'getPaymentInformation' action.\n    `,\n  }, [stage]);\n\n  // ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using useCoAgent Hook in React Component\nDESCRIPTION: Demonstrates how to use the useCoAgent hook to access agent state reactively in a React component. The hook provides access to the agent's state which updates automatically when the agent state changes.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_181\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\n\n// Define the agent state type, should match the actual state of your agent\ntype AgentState = {\n  language: \"english\" | \"spanish\";\n}\n\nfunction YourMainContent() {\n  const { state } = useCoAgent<AgentState>({\n    name: \"sample_agent\",\n    initialState: { language: \"spanish\" }  // optionally provide an initial state\n  });\n\n  // ...\n\n  return (\n    // style excluded for brevity\n    <div>\n      <h1>Your main content</h1>\n      <p>Language: {state.language}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Actions for LLM Interactions in React\nDESCRIPTION: This snippet shows how to implement custom actions for LLM interactions using the useCopilotAction hook. It includes defining action parameters and rendering a calendar meeting card based on the action's status and arguments.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/bring-your-own-components.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\" // only necessary if you are using Next.js with the App Router.\nimport { useCopilotAction } from \"@copilotkit/react-core\"; \n \nexport function YourComponent() {\n  useCopilotAction({ \n    name: \"showCalendarMeeting\",\n    description: \"Displays calendar meeting information\",\n    parameters: [\n      {\n        name: \"date\",\n        type: \"string\",\n        description: \"Meeting date (YYYY-MM-DD)\",\n        required: true\n      },\n      {\n        name: \"time\",\n        type: \"string\",\n        description: \"Meeting time (HH:mm)\",\n        required: true\n      },\n      {\n        name: \"meetingName\",\n        type: \"string\",\n        description: \"Name of the meeting\",\n        required: false\n      }\n    ],\n    render: ({ status, args }) => {\n      const { date, time, meetingName } = args;\n \n      if (status === 'inProgress') {\n        return <LoadingView />; // Your own component for loading state\n      } else {\n        const meetingProps: CalendarMeetingCardProps = {\n          date: date,\n          time,\n          meetingName\n        };\n        return <CalendarMeetingCardComponent {...meetingProps} />;\n      }\n    },\n  });\n \n  return (\n    <>...</>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotPopup Component in React\nDESCRIPTION: Demonstrates how to integrate a floating chat interface using CopilotPopup component. The component is rendered alongside main content and can be toggled on/off.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/component-examples.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotPopup } from \"@copilotkit/react-ui\";\n\nexport function YourApp() {\n  return (\n    <>\n      <YourMainContent />\n      <CopilotPopup\n        instructions={\"You are assisting the user as best as you can. Answer in the best way possible given the data you have.\"}\n        labels={{\n          title: \"Popup Assistant\",\n          initial: \"Need any help?\",\n        }}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CopilotTextarea Styles in Layout\nDESCRIPTION: Imports the default CSS styles for the CopilotTextarea component in the root layout file.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/copilot-textarea.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"@copilotkit/react-textarea/styles.css\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Crew Quickstart Component\nDESCRIPTION: React component implementation for integrating CrewAI with CopilotKit, including crew name configuration and required inputs setup.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/quickstart/crewai.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\nimport React from \"react\";\nimport useCrewQuickstart from \"./use-crew-quickstart\";\n\nexport default function YourApp() {\nuseCrewQuickstart({\n    crewName: \"<REPLACE_WITH_YOUR_CREW_NAME>\",\n    /**\n     * List of input required to start your crew (location e.g)\n    */\n    inputs: [\"location\"]\n})\nreturn (\n    <>\n    {/* Existing markup */}\n    </>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State with CopilotKit in TypeScript\nDESCRIPTION: Demonstrates how to integrate CopilotKitStateAnnotation into the agent's state definition using TypeScript.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/frontend-actions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Annotation } from \"@langchain/langgraph\";\nimport { CopilotKitStateAnnotation } from \"@copilotkit/sdk-js/langgraph\";\n\nexport const YourAgentStateAnnotation = Annotation.Root({\n    yourAdditionalProperty: Annotation<string>,\n    ...CopilotKitStateAnnotation.spec,\n});\nexport type YourAgentState = typeof YourAgentStateAnnotation.State;\n```\n\n----------------------------------------\n\nTITLE: Emitting Intermediate State in Search Node\nDESCRIPTION: Updates the search_node function to emit intermediate state using copilotkit_emit_state. This allows progress updates to be sent to the frontend during the search process.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-5-stream-progress.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def search_node(state: AgentState, config: RunnableConfig):\n    # ...\n\n    state[\"search_progress\"] = state.get(\"search_progress\", [])\n    queries = ai_message.tool_calls[0][\"args\"][\"queries\"]\n\n    for query in queries:\n        state[\"search_progress\"].append({\n            \"query\": query,\n            \"results\": [],\n            \"done\": False\n        })\n\n    await copilotkit_emit_state(config, state)\n\n    # ...\n\n    places = []\n    for i, query in enumerate(queries):\n        response = gmaps.places(query)\n        for result in response.get(\"results\", []):\n            place = {\n                \"id\": result.get(\"place_id\", f\"{result.get('name', '')}-{i}\"),\n                \"name\": result.get(\"name\", \"\"),\n                \"address\": result.get(\"formatted_address\", \"\"),\n                \"latitude\": result.get(\"geometry\", {}).get(\"location\", {}).get(\"lat\", 0),\n                \"longitude\": result.get(\"geometry\", {}).get(\"location\", {}).get(\"lng\", 0),\n                \"rating\": result.get(\"rating\", 0),\n            }\n            places.append(place)\n        state[\"search_progress\"][i][\"done\"] = True\n        await copilotkit_emit_state(config, state)\n\n    state[\"search_progress\"] = []\n    await copilotkit_emit_state(config, state)\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Rendering Emitted State in React Component\nDESCRIPTION: Updates the TripsProvider component to use the useCoAgentStateRender hook for rendering the search progress state emitted by the agent in the UI.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-5-stream-progress.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCoAgent, useCoAgentStateRender } from \"@copilotkit/react-core\";\nimport { SearchProgress } from \"@/components/SearchProgress\";\n\nexport const TripsProvider = ({ children }: { children: ReactNode }) => {\n  // ...\n  \n  const { state, setState } = useCoAgent<AgentState>({\n    name: \"travel\",\n    initialState: {\n      trips: defaultTrips,\n      selected_trip_id: defaultTrips[0].id,\n    },\n  });\n\n  useCoAgentStateRender<AgentState>({\n    name: \"travel\",\n    render: ({ state }) => {\n      if (state.search_progress) {\n        return <SearchProgress progress={state.search_progress} />\n      }\n      return null;\n    },\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Human-in-the-Loop Action Buttons with React in TypeScript\nDESCRIPTION: This code snippet implements a generic ActionButtons React component intended to be reused in various human-in-the-loop workflows. It depends on a RenderFunctionStatus type and a Button UI component, handling the disabled state based on operation status and invoking the supplied handler with appropriate string arguments ('CANCEL' or 'SEND') on user action. Inputs include UI components for approve/reject, a handler function, and status. Outputs are two buttons for user decision; the design expects a consistent handler signature and that status is managed externally.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-6-human-in-the-loop.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { RenderFunctionStatus } from \"@copilotkit/react-core\";\nimport { Button } from \"../ui/button\";\n\nexport type ActionButtonsProps = {\n    status: RenderFunctionStatus;\n    handler: any;\n    approve: React.ReactNode;\n    reject: React.ReactNode;\n}\n\nexport const ActionButtons = ({ status, handler, approve, reject }: ActionButtonsProps) => (\n  <div className=\"flex gap-4 justify-between\">\n    <Button \n      className=\"w-full\"\n      variant=\"outline\"\n      disabled={status === \"complete\" || status === \"inProgress\"} \n      onClick={() => handler?.(\"CANCEL\")} // [!code highlight]\n    >\n      {reject}\n    </Button>\n    <Button \n      className=\"w-full\"\n      disabled={status === \"complete\" || status === \"inProgress\"} \n      onClick={() => handler?.(\"SEND\")} // [!code highlight]\n    >\n      {approve}\n    </Button>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Agent Exit Flow in Python\nDESCRIPTION: Example of a Python email agent node that demonstrates proper exit handling using copilotkit_exit. The code shows how to exit the agent loop and return appropriate response messages based on the email sending status.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/advanced/exit-agent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import (copilotkit_exit)\n# ...\nasync def send_email_node(state: EmailAgentState, config: RunnableConfig):\n    \"\"\"Send an email.\"\"\"\n\n    await copilotkit_exit(config)\n\n    # get the last message and cast to ToolMessage\n    last_message = cast(ToolMessage, state[\"messages\"][-1])\n    if last_message.content == \"CANCEL\":\n        return {\n            \"messages\": [AIMessage(content=\"❌ Cancelled sending email.\")],\n        }\n    else:\n        return {\n            \"messages\": [AIMessage(content=\"✅ Sent email.\")],\n        }\n```\n\n----------------------------------------\n\nTITLE: Customizing Input Component for CopilotSidebar in React\nDESCRIPTION: This snippet demonstrates how to create a custom input component for the CopilotSidebar. It includes a text input and a custom 'Ask' button with specific styling and handling for user interactions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/bring-your-own-components.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InputProps, CopilotSidebar } from \"@copilotkit/react-ui\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\nimport \"@copilotkit/react-ui/styles.css\";\nfunction CustomInput({ inProgress, onSend, isVisible }: InputProps) {\n  const handleSubmit = (value: string) => {\n    if (value.trim()) onSend(value);\n  };\n\n  const wrapperStyle = \"flex gap-2 p-4 border-t\";\n  const inputStyle = \"flex-1 p-2 rounded-md border border-gray-300 focus:outline-none focus:border-blue-500 disabled:bg-gray-100\";\n  const buttonStyle = \"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:bg-gray-400 disabled:cursor-not-allowed\";\n\n  return (\n    <div className={wrapperStyle}>\n      <input \n        disabled={inProgress}\n        type=\"text\" \n        placeholder=\"Ask your question here...\" \n        className={inputStyle}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter') {\n            handleSubmit(e.currentTarget.value);\n            e.currentTarget.value = '';\n          }\n        }}\n      />\n      <button \n        disabled={inProgress}\n        className={buttonStyle}\n        onClick={(e) => {\n          const input = e.currentTarget.previousElementSibling as HTMLInputElement;\n          handleSubmit(input.value);\n          input.value = '';\n        }}\n      >\n        Ask\n      </button>\n    </div>\n  );\n}\n\n<CopilotKit>\n  <CopilotSidebar Input={CustomInput} />\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Improving Error Handling for LangGraph Platform Streaming\nDESCRIPTION: A patch that enhances error surfacing when using LangGraph Platform streaming and ensures state is immediately set without using flushSync.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/runtime-client-gql/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- c296282: - Better error surfacing when using LangGraph Platform streaming\n  - Ensure state is immediately set without using flushSync\n- - Better error surfacing when using LangGraph Platform streaming\n  - Ensure state is immediately set without using flushSync\n```\n\n----------------------------------------\n\nTITLE: Creating .env File\nDESCRIPTION: Create a .env file to store environment variables.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/quickstart/crewai.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntouch .env\n```\n\n----------------------------------------\n\nTITLE: CopilotTask Implementation for One-Off Task Execution\nDESCRIPTION: Example demonstrating how to use CopilotTask for executing one-off actions. This sample shows creating a task with instructions and actions, then executing it on button click with the current context.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotTask, useCopilotContext } from \"@copilotkit/react-core\";\n\nexport function MyComponent() {\n  const context = useCopilotContext();\n\n  const task = new CopilotTask({\n    instructions: \"Set a random message\",\n    actions: [\\\n      {\\\n        name: \"setMessage\",\\\n      description: \"Set the message.\",\\\n      argumentAnnotations: [\\\n        {\\\n          name: \"message\",\\\n          type: \"string\",\\\n          description:\\\n            \"A message to display.\",\\\n          required: true,\\\n        },\\\n      ],\\\n     }\\\n    ]\n  });\n\n  const executeTask = async () => {\n    await task.run(context, action);\n  }\n\n  return (\n    <>\n      <button onClick={executeTask}>\n        Execute task\n      </button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tool Call UI Component in React with CopilotKit\nDESCRIPTION: This snippet demonstrates how to use the useCopilotAction hook to render a custom UI component for a specific tool call. It shows how to match the tool name, define parameters, and render a progress indicator for a research crew action.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/generative-ui/tool-based.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotAction } from \"@copilotkit/react-core\";\n// ...\n\nconst YourMainContent = () => {\n  // ...\n  useCopilotAction({\n    name: \"research_crew\",\n    parameters: [\n      {\n        name: \"topic\",\n      },\n      {\n        name: \"current_year\",\n      },\n    ],\n    render({ args, status }) {\n      return (\n        <div className=\"m-4 p-4 bg-gray-100 rounded shadow\">\n          <h1 className=\"text-center text-sm\">\n            Researching {args.topic} in {args.current_year}{\" \"}\n            {status == \"complete\" ? \"✅\" : \"⏳\"}\n          </h1>\n        </div>\n      );\n    },\n  });\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Emitting CoAgent State in Python for Copilotkit\nDESCRIPTION: This code snippet demonstrates how to emit CoAgent state in Python for Copilotkit. It customizes the config to emit intermediate state and then uses copilotkit_emit_state to send the state update.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-travel/ui/lib/hooks/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    # ...\n    config = copilotkit_customize_config(\n        config,\n        emit_intermediate_state=[{\n            \"state_key\": \"search_progress\",\n            \"tool\": \"search_for_places\",\n            \"tool_argument\": \"search_progress\",\n        }],\n    )\n    # ...\n    await copilotkit_emit_state(config, state)\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Passing Configuration from Frontend in React TypeScript\nDESCRIPTION: This snippet demonstrates how to pass configuration properties to an agent using the useCoAgent hook in a React component. It shows how to include an authToken in the configurable object.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/advanced/adding-runtime-configuration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\n\nfunction YourMainContent() {\n  // ...\n\n  useCoAgent<AgentState>({\n    name: \"sample_agent\",\n    configurable: {\n      authToken: 'example-token'\n    }\n  })\n\n  // ...\n\n  return (... your component UI markdown)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CopilotKit Provider in Next.js Layout\nDESCRIPTION: Sets up the CopilotKit provider to wrap the entire application in a Next.js layout file. This enables Copilot functionality throughout the app.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_45\n\nLANGUAGE: jsx\nCODE:\n```\nimport \"./globals.css\";\nimport { ReactNode } from \"react\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Use the public api key you got from Copilot Cloud  */}\n        <CopilotKit publicApiKey=\"<your-copilot-cloud-public-api-key>\">\n          {children}\n        </CopilotKit>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Guardrails in CopilotKit React Component\nDESCRIPTION: This snippet demonstrates how to set up content moderation guardrails in a React application using CopilotKit. It shows the configuration of invalid and valid topics within the CopilotKit component.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/guardrails.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nexport default function App() {\n  return (\n    <CopilotKit\n      publicApiKey={process.env.COPILOTKIT_PUBLIC_API_KEY}\n      guardrails_c={{\n        // Topics to explicitly block\n        invalidTopics: [\"politics\", \"explicit-content\", \"harmful-content\"],\n        // Topics to explicitly allow\n        validTopics: [\"business\", \"technology\", \"general-assistance\"],\n      }}\n    >\n      {/* Your app */}\n    </CopilotKit>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Exiting a LangGraph Agent After Run Completion in JavaScript\nDESCRIPTION: Shows how to signal to CopilotKit to stop an agent after the current run completes using the copilotkitExit function.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\nimport { copilotkitExit } from \"@copilotkit/sdk-js\";\n\nasync function myNode(state: Any):\n  await copilotkitExit(config)\n  return state\n```\n\n----------------------------------------\n\nTITLE: Modifying Message History in CrewAI Flows\nDESCRIPTION: Example showing how to clear the message history in a CrewAI flow by modifying the messages key in the state object.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/concepts/message-management.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef a_flow_function():\n    # ...\n    self.state[\"messages\"] = []\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Layout with CopilotKit Provider\nDESCRIPTION: Sets up the root layout component with CopilotKit provider wrapper. Configures the runtime URL and agent name for CopilotKit integration while maintaining standard HTML structure.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/coagents/self-host-configure-copilotkit-provider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./globals.css\";\nimport { ReactNode } from \"react\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body> \n        <CopilotKit \n          runtimeUrl=\"/api/copilotkit\"\n          agent=\"sample_agent\"\n        > \n          {children}\n        </CopilotKit>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Video Component Implementation\nDESCRIPTION: JSX implementation of a video player component showcasing the travel app demo.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<video controls autoPlay muted loop \n    src=\"/images/coagents/tutorials/ai-travel-app/demo.mp4\"\n    alt=\"Travel app demo\" \n    className=\"w-full h-full [h-800px] shadow-xl\">\n</video>\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Pool Executor in FastAPI Endpoint\nDESCRIPTION: Python code snippet showing how to configure the thread pool executor size when adding the FastAPI endpoint.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_163\n\nLANGUAGE: python\nCODE:\n```\nadd_fastapi_endpoint(app, sdk, \"/copilotkit_remote\", max_workers=10) # default is 10\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State with CopilotKit in Python\nDESCRIPTION: Shows how to inherit from CopilotKitState in Python to access frontend actions in the agent's state definition.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/frontend-actions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitState\n\nclass YourAgentState(CopilotKitState):\n    your_additional_properties: str\n```\n\n----------------------------------------\n\nTITLE: Manually Emitting Tool Calls from LangGraph in JavaScript\nDESCRIPTION: Shows how to manually emit tool calls to CopilotKit by specifying the tool name and arguments.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\nimport { copilotkitEmitToolCall } from \"@copilotkit/sdk-js\";\n\nawait copilotkitEmitToolCall(config, name=\"SearchTool\", args={\"steps\": 10})\n```\n\n----------------------------------------\n\nTITLE: Exiting CopilotKit Agent After Run Completion\nDESCRIPTION: Example of using copilotkit_exit to signal CopilotKit to stop the agent after the current run completes.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_79\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_exit\n\ndef my_node(state: Any):\n    await copilotkit_exit(config)\n    return state\n```\n\n----------------------------------------\n\nTITLE: Configuring State Emission for Tool Calls\nDESCRIPTION: Example demonstrating how to emit tool calls as streaming LangGraph state with specific configuration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/js/LangGraph.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { copilotkitCustomizeConfig } from \"@copilotkit/sdk-js\";\n\nconfig = copilotkitCustomizeConfig(\n  config,\n  emitIntermediateState=[\n    {\n      \"stateKey\": \"steps\",\n      \"tool\": \"SearchTool\",\n      \"toolArgument\": \"steps\",\n    },\n  ],\n)\n```\n\n----------------------------------------\n\nTITLE: Using Configurables in Agent Node (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to access the configurable properties, specifically the authToken, within an agent node function. It shows how to extract the authToken from the config object using optional chaining and nullish coalescing.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/advanced/adding-runtime-configuration.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function agentNode(state: AgentState, config: RunnableConfig): Promise<AgentState> {\n    const authToken = config.configurable?.authToken ?? null;\n\n    return state;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and starting LangGraph agent\nDESCRIPTION: Installs required dependencies, the LangGraph CLI, and starts the agent on localhost:8000. This process sets up the environment and launches LangGraph Studio for agent visualization and interaction.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-2-start-the-agent.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -r requirements.txt # Install dependencies\nbrew install langgraph-cli # Install LangGraph CLI\nlanggraph dev --host localhost --port 8000 # Start the agent\n```\n\n----------------------------------------\n\nTITLE: Configuring Copilot Runtime with CrewAI Flow\nDESCRIPTION: Add the CrewAI Flow deployment to the Copilot Runtime configuration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/quickstart/crewai.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\nCopilotRuntime,\n// ...\n} from \"@copilotkit/runtime\";\n// ...\nconst runtime = new CopilotRuntime({\nremoteEndpoints: [\n    // Our FastAPI endpoint URL\n    { url: \"http://localhost:8000/copilotkit\" },\n],\n});\n// ...\n```\n\n----------------------------------------\n\nTITLE: Integrating LangChain JS with CopilotRuntime\nDESCRIPTION: This code snippet shows how to integrate LangChain JS with CopilotRuntime. It defines an action that generates a joke for a given topic using ChatOpenAI and ChatPromptTemplate from LangChain, demonstrating how to stream results back to the Copilot.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions_old.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { ChatPromptTemplate } from \"@langchain/core/prompts\";\n\nconst runtime = new CopilotRuntime({\n  actions: ({properties, url}) => {\n    return [\n      {\n        name: \"generateJokeForTopic\",\n        description: \"Generates a joke for a given topic.\",\n        parameters: [\n          {\n            name: \"topic\",\n            type: \"string\",\n            description: \"The topic to generate a joke about.\",\n            required: true,\n          },\n        ],\n        handler: async ({topic}: {topic: string}) => {\n          const prompt = ChatPromptTemplate.fromMessages([\n            [\n              \"system\",\n              \"You are a witty comedian. Generate a short, funny joke about the given topic. But make it sound like a pirate joke!\",\n            ],\n            [\"user\", \"Topic: {topic}\"],\n          ]);\n          const chain = prompt.pipe(new ChatOpenAI());\n          return chain.stream({\n            topic: topic,\n          });\n        },\n      },\n    ]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Launching Playwright Test Code Generator - Bash\nDESCRIPTION: Launches Playwright's built-in code generation tool via the 'codegen' npm script. Opens a browser for recording interactions; actions are then converted to Playwright test syntax. Script must be present in package.json.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/e2e/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run codegen\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit SDK\nDESCRIPTION: Command to install the CopilotKit Python SDK using pip package manager.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/LangGraph.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install copilotkit\n```\n\n----------------------------------------\n\nTITLE: Basic Action Configuration in CopilotKit\nDESCRIPTION: Example of creating a CopilotKitRemoteEndpoint with a simple greeting action that takes a name parameter.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/RemoteEndpoints.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitRemoteEndpoint, Action\n\nsdk = CopilotKitRemoteEndpoint(\n    actions=[\n        Action(\n            name=\"greet_user\",\n            handler=greet_user_handler,\n            description=\"Greet the user\",\n            parameters=[\n                {\n                    \"name\": \"name\",\n                    \"type\": \"string\",\n                    \"description\": \"The name of the user\"\n                }\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Build Car Stage Implementation\nDESCRIPTION: Implementation of a car selection stage using generative UI patterns, allowing users to view and select vehicle options.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport function useStageBuildCar() {\n  const { setSelectedCar, stage, setStage } = useGlobalState();\n\n  // ...\n\n  useCopilotAction({\n    name: \"showCar\",\n    description: \"Show a single car that you have in mind. Do not call this more than once, call `showMultipleCars` if you have multiple cars to show.\",\n    available: stage === \"buildCar\" ? \"enabled\" : \"disabled\",\n    parameters: [],\n    renderAndWaitForResponse: ({ args, status, respond }) => {\n      const { car } = args;\n      return (\n        <ShowCar\n          car={(car as Car) || ({} as Car)}\n          status={status}\n          onSelect={() => {\n            setSelectedCar((car as Car) || ({} as Car));\n            respond?.(\"User has selected a car you can see it in your readables, the system will now move to the next state, do not call call nextState.\");\n            setStage(\"sellFinancing\");\n          }}\n          onReject={() => respond?.(\"User wants to select a different car, please stay in this state and help them select a different car\")}\n        />\n      );\n    },\n  }, [stage]);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Warning for Unavailable Agents in CopilotKit\nDESCRIPTION: A patch that adds a warning notification when using agents that are not available on agent-related hooks.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/runtime-client-gql/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- 649ebcc: - fix: add warning when using agents that are not available on agent related hooks\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotChat Component\nDESCRIPTION: Example showing how to implement the basic CopilotChat component with custom labels for title and initial message.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopilotChat } from \"@copilotkit/react-ui\";\nimport \"@copilotkit/react-ui/styles.css\";\n\n<CopilotChat\n  labels={{\n    title: \"Your Assistant\",\n    initial: \"Hi! 👋 How can I assist you today?\",\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Processing User Feedback in TypeScript StateGraph\nDESCRIPTION: This function handles the feedback received from the user. It processes the user's response and creates an informative message for the AI based on whether the user accepted or declined the essay.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/node-flow.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst handleFeedback = async (state: AgentState) => {\n  // 5.1 Get the last message from the state\n  const userResponse = state.messages[state.messages.length - 1].content\n\n  // 5.2 Process a informative message for the AI based on the user response\n  const informativeMessage = userResponse === \"SEND\" ? \n    \"The user accepted the essay, please ask them how you can help now.\" : \n    \"The user declined the essay, please ask them how to improve it.\";\n\n  // 5.3 Return the new state with the informative message as a system message\n  //     so it doesn't appear in the chat history.\n  return {\n    messages: [new SystemMessage(informativeMessage)],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CoAgents with LangGraph Integration in TypeScript\nDESCRIPTION: Shows how to implement in-app LangGraph Agents using CopilotKit, including state sharing, generative UI, human-in-the-loop approval flows, and intermediate state streaming with both LangGraph.js and Python.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Share state between app and agent\nconst { agentState } = useCoAgent({ \n  name: \"basic_agent\", \n  initialState: { input: \"NYC\" } \n});\n\n// agentic generative UI\nuseCoAgentStateRender({\n  name: \"basic_agent\",\n  render: ({ state }) => <WeatherDisplay {...state.final_response} />,\n});\n\n// Human in the Loop (Approval)\nuseCopilotAction({\n    name: \"email_tool\",\n    parameters: [{ name: \"email_draft\", type: \"string\", description: \"The email content\", required: true }],\n    renderAndWaitForResponse: ({ args, status, respond }) => (\n      <EmailConfirmation\n        emailContent={args.email_draft || \"\"}\n        isExecuting={status === \"executing\"}\n        onCancel={() => respond?.({ approved: false })}\n        onSend={() => respond?.({ approved: true, metadata: { sentAt: new Date().toISOString() } })}\n      />\n    ),\n  });\n\n// ---\n\n// intermediate agent state streaming (supports both LangGraph.js + LangGraph python)\nconst modifiedConfig = copilotKitCustomizeConfig(config, {\n  emitIntermediateState: [{ \n    stateKey: \"outline\", \n    tool: \"set_outline\", \n    toolArgument: \"outline\" \n  }],\n});\nconst response = await ChatOpenAI({ model: \"gpt-4o\" }).invoke(messages, modifiedConfig);\n```\n\n----------------------------------------\n\nTITLE: Simulating Agent State Updates in Python\nDESCRIPTION: Implements a chat_node function that simulates state updates for an agent, including initializing searches and marking them as complete.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_67\n\nLANGUAGE: Python\nCODE:\n```\nimport asyncio\nfrom typing import TypedDict\nfrom langchain_core.runnables import RunnableConfig\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.messages import SystemMessage\nfrom copilotkit import CopilotKitState\nfrom copilotkit.langgraph import copilotkit_emit_state\n\nclass Searches(TypedDict):\n    query: str\n    done: bool\n\nclass AgentState(CopilotKitState):\n    searches: list[Searches] = []\n\nasync def chat_node(state: AgentState, config: RunnableConfig):\n    state[\"searches\"] = [\\\n        {\"query\": \"Initial research\", \"done\": False},\\\n        {\"query\": \"Retrieving sources\", \"done\": False},\\\n        {\"query\": \"Forming an answer\", \"done\": False},\\\n    ]\n    await copilotkit_emit_state(config, state)\n\n    # Simulate state updates\n    for search in state[\"searches\"]:\n        await asyncio.sleep(1)\n        search[\"done\"] = True\n        await copilotkit_emit_state(config, state)\n\n    # Run the model to generate a response\n    response = await ChatOpenAI(model=\"gpt-4o\").ainvoke([\\\n        SystemMessage(content=\"You are a helpful assistant.\"),\\\n        *state[\"messages\"],\\\n    ], config)\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotSidebar for Chat Interface\nDESCRIPTION: Setting up the CopilotSidebar component to provide a chat interface for user interaction with the AI assistant.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-chat-with-your-data/README.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<CopilotSidebar\n  instructions={prompt}\n  AssistantMessage={CustomAssistantMessage}\n  labels={{\n    title: \"Data Assistant\",\n    initial: \"Hello, I'm here to help you understand your data. How can I help?\",\n    placeholder: \"Ask about sales, trends, or metrics...\",\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Emitting Tool Calls as Streaming LangGraph State\nDESCRIPTION: Example of using copilotkit_customize_config to emit a tool call as streaming LangGraph state, specifying the destination key, tool name, and tool argument.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_78\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_customize_config\n\nconfig = copilotkit_customize_config(\n    config,\n    emit_intermediate_state=[\\\n       {\\\n            \"state_key\": \"steps\",\\\n            \"tool\": \"SearchTool\",\\\n            \"tool_argument\": \"steps\"\\\n        },\\\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up FastAPI Server with CopilotKit Integration\nDESCRIPTION: Python code for creating a FastAPI server, defining backend actions using CopilotKit, and setting up the CopilotKit endpoint.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_160\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom copilotkit.integrations.fastapi import add_fastapi_endpoint\nfrom copilotkit import CopilotKitRemoteEndpoint, Action as CopilotAction\n\napp = FastAPI()\n\n# Define your backend action\nasync def fetch_name_for_user_id(userId: str):\n    # Replace with your database logic\n    return {\"name\": \"User_\" + userId}\n\n# this is a dummy action for demonstration purposes\naction = CopilotAction(\n    name=\"fetchNameForUserId\",\n    description=\"Fetches user name from the database for a given ID.\",\n    parameters=[\n        {\n            \"name\": \"userId\",\n            \"type\": \"string\",\n            \"description\": \"The ID of the user to fetch data for.\",\n            \"required\": True,\n        }\n    ],\n    handler=fetch_name_for_user_id\n)\n\n# Initialize the CopilotKit SDK\nsdk = CopilotKitRemoteEndpoint(actions=[action])\n\n# Add the CopilotKit endpoint to your FastAPI app\nadd_fastapi_endpoint(app, sdk, \"/copilotkit_remote\")\n\ndef main():\n    \"\"\"Run the uvicorn server.\"\"\"\n    import uvicorn\n    uvicorn.run(\"server:app\", host=\"0.0.0.0\", port=8000, reload=True)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Configuring NestJS Endpoint for CopilotKit Runtime\nDESCRIPTION: This code demonstrates how to create a NestJS handler for CopilotKit by setting up a runtime with service adapters and configuring an endpoint. The handler processes incoming requests and responses for the '/copilotkit' endpoint.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-langgraph-endpoint.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst handler = copilotRuntimeNestEndpoint({\n  runtime,\n  serviceAdapter,\n  endpoint: '/copilotkit',\n});\nreturn handler(req, res);\n```\n\n----------------------------------------\n\nTITLE: Interactive Counter Implementation with useCoAgent\nDESCRIPTION: Demonstrates practical usage of useCoAgent hook in a React component with interactive state management.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCoAgent.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst { state, setState } = useCoAgent<AgentState>({\n  name: \"my-agent\",\n  initialState: {\n    count: 0,\n  },\n});\n\nreturn (\n  <div>\n    <p>Count: {state.count}</p>\n    <button onClick={() => setState({ count: state.count + 1 })}>Increment</button>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing CopilotRuntime with LangFuse Logging\nDESCRIPTION: This code demonstrates how to set up LangFuse logging integration with CopilotRuntime. It initializes a LangFuse client with API keys and configures the CopilotRuntime with OpenAI adapter and logging settings for monitoring LLM requests and responses.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/runtime/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopilotRuntime, OpenAIAdapter } from \"@copilotkit/runtime\";\nimport { LangfuseClient } from \"langfuse\";\n\n// Initialize your LangFuse client\nconst langfuse = new LangfuseClient({\n  publicKey: process.env.LANGFUSE_PUBLIC_KEY!,\n  secretKey: process.env.LANGFUSE_SECRET_KEY!,\n  baseUrl: process.env.LANGFUSE_BASE_URL,\n});\n\n// Create a CopilotRuntime with LangFuse logging enabled\nconst runtime = new CopilotRuntime({\n  adapter: new OpenAIAdapter({ apiKey: process.env.OPENAI_API_KEY }),\n  logging: {\n    enabled: true,\n    progressive: true, // Set to false for buffered logging\n    logger: {\n      logRequest: (data) => langfuse.trace({ name: \"LLM Request\", input: data }),\n      logResponse: (data) => langfuse.trace({ name: \"LLM Response\", output: data }),\n      logError: (errorData) => langfuse.trace({ name: \"LLM Error\", metadata: errorData }),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit Dependencies with Poetry\nDESCRIPTION: Commands for initializing a new Poetry project and installing required dependencies including CopilotKit, FastAPI, and Uvicorn.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_159\n\nLANGUAGE: bash\nCODE:\n```\npoetry new My-CopilotKit-Remote-Endpoint\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add copilotkit fastapi uvicorn\n# or including support for crewai\npoetry add copilotkit[crewai] fastapi uvicorn\n```\n\n----------------------------------------\n\nTITLE: Rendering Agent State Outside React Chat Component\nDESCRIPTION: This snippet demonstrates how to use the useCoAgent hook to render the state of an agent outside of the chat component in a React application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/generative-ui/agentic.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCoAgent } from \"@copilotkit/react-core\";\n\ntype AgentState = {\n  searches: {\n    query: string;\n    done: boolean;\n  }[];\n};\n\nfunction YourMainContent() {\n  const { state } = useCoAgent<AgentState>({\n    name: \"sample_agent\", // the name the agent is served as\n  })\n\n  return (\n    <div>\n      {/* ... */}\n      <div className=\"flex flex-col gap-2 mt-4\">\n        {state.searches?.map((search, index) => (\n          <div key={index} className=\"flex flex-row\">\n            {search.done ? \"✅\" : \"❌\"} {search.query}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Agent in UI\nDESCRIPTION: TypeScript code to uncomment for using LangGraph JS in the UI component, specifying deployment URL and agent details.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter/README.md#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// Uncomment this if you want to use LangGraph JS, make sure to \n// remove the remote action url below too.\n//\n// langGraphPlatformEndpoint({\n//   deploymentUrl: \"http://localhost:8123\",\n//   langsmithApiKey: process.env.LANGSMITH_API_KEY || \"\", // only used in LangGraph Platform deployments\n//   agents: [{\n//       name: 'sample_agent', \n//       description: 'A helpful LLM agent.'\n//   }]\n// }),\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotSidebar Component\nDESCRIPTION: Example of implementing the CopilotSidebar component, which provides a sidebar interface for interacting with a copilot. This includes custom labels for title and initial greeting.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_96\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CopilotSidebar } from \"@copilotkit/react-ui\";\nimport \"@copilotkit/react-ui/styles.css\";\n\n<CopilotSidebar\n  labels={{\n    title: \"Your Assistant\",\n    initial: \"Hi! 👋 How can I assist you today?\",\n  }}\n>\n  <YourApp/>\n</CopilotSidebar>\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit Dependencies for React\nDESCRIPTION: Command to install the necessary CopilotKit packages for a React application. The packages include core functionality, hooks, and pre-built UI components for chat interfaces.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-3-setup-copilotkit.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n@copilotkit/react-core @copilotkit/react-ui\n```\n\n----------------------------------------\n\nTITLE: Implementing Catch-All Renders for Arbitrary Tools in Copilot\nDESCRIPTION: Demonstrates how to set up a catch-all render handler using '*' as the action name. This approach is useful when working with agents that may call arbitrary tools, allowing rendering of actions not explicitly defined.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/generative-ui.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotAction, CatchAllActionRenderProps } from \"@copilotkit/react-core\";\n\nuseCopilotAction({\n  name: \"*\",\n  render: ({ name, args, status, result }: CatchAllActionRenderProps<[]>) => {\n    return <div>Rendering action: {name}</div>;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logging Integration with CopilotRuntime\nDESCRIPTION: This code shows how to implement custom logging integration with CopilotRuntime. It demonstrates using the logging interface to connect with any logging service by implementing custom handling for requests, responses, and errors.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/runtime/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst runtime = new CopilotRuntime({\n  adapter: new OpenAIAdapter({ apiKey: \"YOUR_API_KEY\" }),\n  logging: {\n    enabled: true,\n    progressive: false,\n    logger: {\n      logRequest: (data) => {\n        // Implement your custom logging logic\n        console.log(\"LLM Request:\", JSON.stringify(data));\n      },\n      logResponse: (data) => {\n        // Implement your custom logging logic\n        console.log(\"LLM Response:\", JSON.stringify(data));\n      },\n      logError: (error) => {\n        // Implement your custom error logging\n        console.error(\"LLM Error:\", error);\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Agent Configuration\nDESCRIPTION: Example of setting up CopilotKitRemoteEndpoint with a LangGraphAgent for email handling.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/RemoteEndpoints.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitRemoteEndpoint, LangGraphAgent\nfrom my_agent.agent import graph\n\nsdk = CopilotKitRemoteEndpoint(\n    agents=[\n        LangGraphAgent(\n            name=\"email_agent\",\n            description=\"This agent sends emails\",\n            graph=graph,\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Cloning and Accessing the CopilotKit State Machine Example Using Git - Bash\nDESCRIPTION: This Bash snippet demonstrates how to clone the CopilotKit repository and navigate directly to the copilot state machine example directory. Users must have Git, as well as command-line access. 'git clone' downloads the repo; 'cd' navigates into the specific example folder. No input or output beyond terminal log and filesystem changes.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-state-machine/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/CopilotKit/CopilotKit.git\ncd CopilotKit/examples/copilot-state-machine\n```\n\n----------------------------------------\n\nTITLE: Starting LangGraph Agent with CLI (Python)\nDESCRIPTION: Command to start a local development server and LangGraph studio session using the LangGraph CLI for Python.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\nlanggraph dev --host localhost --port 8000\n```\n\n----------------------------------------\n\nTITLE: Rendering State Updates in React Frontend\nDESCRIPTION: Shows how to use CopilotKit React hooks to observe and render both predicted and final states from a LangGraph agent, providing real-time progress feedback to users.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_149\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCoAgent, useCoAgentStateRender } from '@copilotkit/react-core';\n\n// ...\ntype AgentState = {\n    observed_steps: string[];\n};\n\nconst YourMainContent = () => {\n    // Get access to both predicted and final states\n    const { state } = useCoAgent<AgentState>({ name: \"sample_agent\" });\n\n    // Add a state renderer to observe predictions\n    useCoAgentStateRender({\n        name: \"sample_agent\",\n        render: ({ state }) => {\n            if (!state.observed_steps?.length) return null;\n            return (\n                <div>\n                    <h3>Current Progress:</h3>\n                    <ul>\n                        {state.observed_steps.map((step, i) => (\n                            <li key={i}>{step}</li>\n                        ))}\n                    </ul>\n                </div>\n            );\n        },\n    });\n\n    return (\n        <div>\n            <h1>Agent Progress</h1>\n            {state.observed_steps?.length > 0 && (\n                <div>\n                    <h3>Final Steps:</h3>\n                    <ul>\n                        {state.observed_steps.map((step, i) => (\n                            <li key={i}>{step}</li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n        </div>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotKit Provider with Cloud Setup\nDESCRIPTION: Integration of CopilotKit provider in a Next.js application using cloud configuration with basic structure.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-3-setup-copilotkit.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nexport default function Home() {\n  return (\n    <CopilotKit\n      publicApiKey={process.env.NEXT_PUBLIC_CPK_PUBLIC_API_KEY}\n    >\n      <TooltipProvider>\n        <TripsProvider>\n          <main className=\"h-screen w-screen\">\n            <MapCanvas />\n          </main>\n        </TripsProvider>\n      </TooltipProvider>\n    </CopilotKit>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useCopilotReadable Hook in React Component\nDESCRIPTION: This code snippet shows how to use the useCopilotReadable hook within the EmailsProvider component to make the email thread state accessible to the CopilotKit assistant. It provides a description and the current state of emails to the copilot.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-powered-textarea/step-4-copilot-readable-state.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotReadable } from \"@copilotkit/react-core\";\n\nexport const EmailsProvider = ({ children }: { children: ReactNode }) => {\n  const [emails, setEmails] = useState<Email[]>(emailHistory);\n\n  useCopilotReadable({\n    description: \"The history of this email thread\",\n    value: emails\n  });\n\n  // ... the rest of the file\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Frontend Application with CopilotKit and CrewAI\nDESCRIPTION: This snippet shows the commands to navigate to the UI directory, set up the environment, install dependencies, and start the development server for the frontend application that uses CopilotKit and CrewAI.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-enterprise-crewai-crews/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> cd ui\n> cp .env.example .env  # Copy the example env file\n> # Edit the .env file with your Copilot Cloud Public API Key\n> pnpm install\n> pnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing CopilotTextarea Styles in Layout\nDESCRIPTION: Example showing how to import the default styles for CopilotTextarea in a layout component.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@copilotkit/react-textarea/styles.css\";\n```\n\n----------------------------------------\n\nTITLE: Dynamic Action Configuration\nDESCRIPTION: Demonstrates dynamic action creation using a lambda function that uses context properties.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/RemoteEndpoints.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitRemoteEndpoint, Action\n\nsdk = CopilotKitRemoteEndpoint(\n    actions=lambda context: [\n        Action(\n            name=\"greet_user\",\n            handler=make_greet_user_handler(context[\"properties\"][\"name\"]), \n            description=\"Greet the user\"\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Configurables Schema in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to define a schema for configurables using the Annotation class from @langchain/langgraph. It also shows how to apply this schema when creating a StateGraph instance for the workflow.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/advanced/adding-runtime-configuration.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Annotation } from \"@langchain/langgraph\";\n\n// define which properties will be allowed in the configuration\nexport const ConfigSchemaAnnotation = Annotation.Root({\n  authToken: Annotation<string>\n})\n\n// ...add all necessary graph nodes\n\n// when defining the state graph, apply the config schema\nconst workflow = new StateGraph(AgentStateAnnotation, ConfigSchemaAnnotation)\n```\n\n----------------------------------------\n\nTITLE: Setting up Agent Environment Variables\nDESCRIPTION: Contents of the .env file for the agent component. It includes the OpenAI API key, which is crucial for the agent's functionality.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-shared-state/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Installing LangGraph API and CLI Packages (Bash)\nDESCRIPTION: Installs or upgrades the `langgraph-api` package and installs the `langgraph-cli` package with the `inmem` extra using pip. Assumes pip is available and the virtual environment is active.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/demo-viewer/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npip install -U langgraph-api\npip install \"langgraph-cli[inmem]\"\n```\n\n----------------------------------------\n\nTITLE: Making Agent Aware of Interruptions in Python\nDESCRIPTION: This Python snippet shows how to make the agent aware of interruptions by adding the interrupt messages to the agent's state. It uses the copilotkit_interrupt function to handle the interruption.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_187\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import copilotkit_interrupt\n\n# ...\nagent_name, new_messages = copilotkit_interrupt(message=\"Before we start, what would you like to call me?\")\nstate[\"messages\"] = state[\"messages\"] + new_messages\nstate[\"agent_name\"] = agent_name\n# ...\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotTextarea in a React Component\nDESCRIPTION: Example React component implementing the CopilotTextarea with basic configuration for AI-powered suggestions in an email context.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FC, useState } from \"react\";\nimport { CopilotTextarea } from '@copilotkit/react-textarea';\n\nconst ExampleComponent: FC = () => {\n  const [text, setText] = useState<string>('');\n\n  return (\n    <CopilotTextarea\n      className=\"w-full p-4 border border-gray-300 rounded-md\"\n      value={text}\n      onValueChange={setText}\n\n      autosuggestionsConfig={{\n        textareaPurpose: \"the body of an email message\",\n        chatApiConfigs: {},\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Stage One of a State Machine in CopilotKit with TypeScript\nDESCRIPTION: This code defines the first stage of a conversation state machine using CopilotKit hooks. It adds stage-specific instructions, context about existing names, and an action to transition to the next stage once a valid name is collected.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { \n  useCopilotAdditionalInstructions, \n  useCopilotAction, \n  useCopilotReadable \n} from \"@copilotkit/react-core\";\n\n// ...\n\n/*\n * Not required, but it is convenient to use a dedicated hook to define each \n * stage of the state machine\n */\nfunction useStageOne(\n  stage: string, \n  setStage: (stage: string) => void, \n  setName: (name: string) => void\n) {\n\n  /*\n   * Each stage can define its own instructions, context, and transitions\n   * (implemented via copilotActions). We transition between stages by simply\n   * setting the `stage` variable from the handler of the transition:\n   */\n\n  // Add additional instructions to the system prompt if this stage is active\n  useCopilotAdditionalInstructions({\n    instructions: \"Ask for the user's name politely.\",\n    // Use \"available\" argument to enable this only when the stage is correct! \n    available: stage === \"one\" ? \"available\" : \"disabled\"\n  })\n\n  // Add context to the system prompt if this stage is active\n  useCopilotReadable({\n    description: \"Other names\",\n    value: [\"John\", \"Jane\", \"Jim\"],\n    available: stage === \"one\" ? \"available\" : \"disabled\" \n  })\n\n  // Add an action to the assistant that transitions to the next stage if this stage is active\n  useCopilotAction({\n    name: \"transitionToNextStage\",\n    description: \"Moves to the next stage, only call is the user's name is not in the list of other names\",\n    available: stage === \"one\" ? \"available\" : \"disabled\", \n    parameters: [\n      { name: \"name\", type: \"string\", description: \"The name of the user\", required: true },\n    ],\n    handler: ({ name }) => {\n      // Perform any state updates given the user's input\n      setName(name);\n\n      // Transition to the next stage \n      setStage(\"two\"); \n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up CopilotKit UI Components\nDESCRIPTION: Implement CopilotKit's UI components to render the chat interaction with the agent.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/quickstart/crewai.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"@copilotkit/react-ui/styles.css\";\nimport { CopilotPopup } from \"@copilotkit/react-ui\";\n\nexport function YourApp() {\n  return (\n    <main>\n      <h1>Your main content</h1>\n      <CopilotPopup\n        labels={{\n            title: \"Popup Assistant\",\n            initial: \"Hi! I'm connected to an agent. How can I help?\",\n        }}\n      />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the CopilotKit Repository for Documentation Contributions\nDESCRIPTION: Instructions for cloning the forked CopilotKit repository to contribute to documentation, specifying the commands to clone the repo and navigate to the docs directory.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_167\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your-username>/CopilotKit\ncd CopilotKit/docs\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Component with Props in JSX\nDESCRIPTION: This snippet demonstrates the use of a custom CTACards component in a JSX-based React application. It passes properties including columns and an array of card objects with icon, title, description, and href attributes.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/human-in-the-loop/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CTACards\n  columns={1}\n  cards={[\n    {\n      icon: Share2,\n      title: \"Flow-based\",\n      description:\n        \"Utilize CrewAI Flows to create Human-in-the-Loop workflows.\",\n      href: \"/crewai-flows/human-in-the-loop/flow\",\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State Classes\nDESCRIPTION: Defines the agent state structure with observed_steps field to track completed steps. Shows implementation in both Python and TypeScript.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/predictive-state-updates.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitState\nfrom typing import Literal\n\nclass AgentState(CopilotKitState):\n    observed_steps: list[str]  # Array of completed steps\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Annotation } from \"@langchain/langgraph\";\nimport { CopilotKitStateAnnotation } from \"@copilotkit/sdk-js/langgraph\";\n\nexport const AgentStateAnnotation = Annotation.Root({\n    observed_steps: Annotation<string[]>,  // Array of completed steps\n    ...CopilotKitStateAnnotation.spec,\n});\nexport type AgentState = typeof AgentStateAnnotation.State;\n```\n\n----------------------------------------\n\nTITLE: Importing LangGraph Interrupt Feature\nDESCRIPTION: Shows how to import the necessary components for implementing interrupt-based human-in-the-loop workflows in a LangGraph agent.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_184\n\nLANGUAGE: Python\nCODE:\n```\nfrom langgraph.types import interrupt\nfrom langchain_core.messages import SystemMessage\nfrom langchain_openai import ChatOpenAI\nfrom copilotkit import CopilotKitState\n```\n\n----------------------------------------\n\nTITLE: Defining Configurables Schema in Python\nDESCRIPTION: This Python code snippet shows how to define a schema for configurables using a TypedDict. It also demonstrates how to apply this schema when creating a StateGraph instance for the workflow.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/advanced/adding-runtime-configuration.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TypedDict\n\n# define which properties will be allowed in the configuration\nclass ConfigSchema(TypedDict):\n  authToken: str\n\n# ...add all necessary graph nodes\n\n# when defining the state graph, apply the config schema\nworkflow = StateGraph(AgentState, config_schema=ConfigSchema)\n```\n\n----------------------------------------\n\nTITLE: Installing Agent Dependencies with Poetry\nDESCRIPTION: Command to install the required dependencies for the agent component using Poetry package manager.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-travel/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd agent\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Initializing Agent State Class in Python\nDESCRIPTION: Defines an AgentState class that extends CopilotKitState to store agent properties like name\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitState\n\nclass AgentState(CopilotKitState):\n    agent_name: str\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotReadable for Dashboard Data\nDESCRIPTION: Example of using useCopilotReadable hook to make dashboard data available to the AI assistant.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-chat-with-your-data/README.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nuseCopilotReadable({\n  description: \"Dashboard data including sales trends, product performance, and category distribution\",\n  value: {\n    salesData,\n    productData,\n    categoryData,\n    regionalData,\n    demographicsData,\n    metrics: {\n      totalRevenue,\n      totalProfit,\n      totalCustomers,\n      conversionRate,\n      averageOrderValue,\n      profitMargin\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing CopilotKit Styles in Root Component\nDESCRIPTION: Example of how to import the default CopilotKit styles at the root of a React project to apply styling to CopilotKit components.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/chat/CopilotSidebar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"@copilotkit/react-ui/styles.css\"; // [!code highlight]\n\nexport function YourRootComponent() {\n  return (\n    <CopilotKit>\n      ...\n    </CopilotKit>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: useCopilotChat Hook Return Object Structure\nDESCRIPTION: Outlines the structure of the object returned by the useCopilotChat hook. It includes properties for managing messages, appending, deleting, reloading, stopping generation, resetting the chat, and checking loading state.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotChat.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst {\n  visibleMessages, // An array of messages that are currently visible in the chat.\n  appendMessage, // A function to append a message to the chat.\n  setMessages, // A function to set the messages in the chat.\n  deleteMessage, // A function to delete a message from the chat.\n  reloadMessages, // A function to reload the messages from the API.\n  stopGeneration, // A function to stop the generation of the next message.\n  reset, // A function to reset the chat.\n  isLoading, // A boolean indicating if the chat is loading.\n} = useCopilotChat();\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Component in JSX\nDESCRIPTION: This code snippet shows how to embed an image within a Frame component in a JSX-based React application. It includes className attributes for styling.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/human-in-the-loop/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Frame className=\"my-0\">\n  <img\n    src=\"/images/coagents/coagents-hitl-infographic.png\"\n    alt=\"Agentic Copilot Human in the Loop\"\n    className=\"mt-4 mb-0 shadow-md\"\n  />\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Basic LangGraphAgent Implementation\nDESCRIPTION: Example showing how to create a basic LangGraphAgent instance with required name and graph properties, plus an optional description.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/LangGraphAgent.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import LangGraphAgent\n\nLangGraphAgent(\n    name=\"email_agent\",\n    description=\"This agent sends emails\",\n    graph=graph,\n)\n```\n\n----------------------------------------\n\nTITLE: Basic @persist Decorator Usage in Python\nDESCRIPTION: Shows the basic pattern for using the @persist decorator to enable message persistence in CrewAI Flows. This enables storing messages in either SQLite by default or in a custom persistence implementation.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/persistence/message-persistence.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@persist\n```\n\n----------------------------------------\n\nTITLE: Installing Agent Dependencies with Poetry\nDESCRIPTION: Commands to navigate to the agent directory and install dependencies using Poetry.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-ai-researcher/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd agent\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Rendering Frame Component with Image in JSX\nDESCRIPTION: Shows how to render a state diagram image within a Frame component.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Frame>\n    <img src=\"/images/coagents/coagents-state-diagram.png\" alt=\"Agentic Copilot State Diagram\" />\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Running Python Demo\nDESCRIPTION: Command to run the Python demo using Poetry.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter-crewai-flows/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npoetry run demo\n```\n\n----------------------------------------\n\nTITLE: Customizing CopilotChat Component with Instructions\nDESCRIPTION: This snippet shows how to pass custom instructions directly to a CopilotChat component, which is suitable for UI component customization while maintaining compatibility with performance optimizations.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_134\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\n<CopilotChat\n  instructions=\"You are a helpful assistant specializing in tax preparation. Provide concise and accurate answers to tax-related questions.\"\n  labels={{\n    title: \"Tax Preparation Assistant\",\n    initial: \"How can I help you with your tax preparation today?\",\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring CopilotRuntime for LangGraph Platform Deployment in TypeScript\nDESCRIPTION: This snippet illustrates the setup of CopilotRuntime for a LangGraph Platform deployment. It uses the langGraphPlatformEndpoint function to configure the runtime with a deployment URL, LangSmith API key, and agent definitions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-remote-endpoints.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  CopilotRuntime,\n  langGraphPlatformEndpoint  // [!code highlight]\n  // ...\n} from \"@copilotkit/runtime\";\n// ...\nconst runtime = new CopilotRuntime({\n  remoteEndpoints: [\n    // [!code highlight:12]\n    langGraphPlatformEndpoint({\n      deploymentUrl: \"your-api-url\", // make sure to replace with your real deployment url,\n      langsmithApiKey: process.env.LANGSMITH_API_KEY, // only used in LangGraph Platform deployments\n      agents: [ // List any agents available under \"graphs\" list in your langgraph.json file; give each a description explaining when it should be called.\n        {\n          name: 'sample_agent', \n          description: 'A helpful LLM agent.',\n          assistantId: 'your-assistant-ID' // optional, but recommended!\n        }\n      ]\n    }),\n  ],\n});\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Node with Interrupts in Python\nDESCRIPTION: Implements a chat node function using CopilotKit's interrupt functionality to pause execution and collect user input for agent naming. Utilizes LangChain for message handling and OpenAI for chat completions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_interrupt\nfrom langchain_core.messages import SystemMessage\nfrom langchain_openai import ChatOpenAI\n\ndef chat_node(state: AgentState, config: RunnableConfig):\n  if not state.get(\"agent_name\"):\n    answer, messages = copilotkit_interrupt(\n     action='AskName',\n     args={ \"message\": \"Before we start, what would you like to call me?\" }\n    )\n    state[\"agent_name\"] = answer\n    state[\"messages\"] = [*state[\"messages\"], *messages]\n\n  system_message = SystemMessage(\n    content=f\"You are a helpful assistant named {state.get('agent_name')}...\"\n  )\n\n  response = ChatOpenAI(model=\"gpt-4o\").invoke(\n    [system_message, *state[\"messages\"]],\n    config\n  )\n\n  return {\n    **state,\n    \"messages\": [*state[\"messages\"], response],\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Copilot Cloud API Key in Environment File\nDESCRIPTION: This snippet shows how to set the Copilot Cloud API key in the .env file for the React application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-3-setup-copilotkit.mdx#2025-04-23_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nNEXT_PUBLIC_CPK_PUBLIC_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Installing copilotkit with pip (Python/Bash)\nDESCRIPTION: Utilizes the pip package installer to install `copilotkit` for Python, specifying an extra index URL via `--extra-index-url` for accessing the package. The first command installs the base package, and the second installs it with optional `crewai` extras.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/install-python-sdk.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install copilotkit --extra-index-url https://copilotkit.gateway.scarf.sh/simple/\n# including support for crewai\npip install copilotkit[crewai] --extra-index-url https://copilotkit.gateway.scarf.sh/simple/\n```\n\n----------------------------------------\n\nTITLE: Implementing Crew Based Agent in Python\nDESCRIPTION: Example showing how to create a CrewAIAgent instance using a Crew object for email handling functionality.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/CrewAIAgent.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CrewAIAgent\n\n\nCrewAIAgent(\n    name=\"email_agent_crew\",\n    description=\"This crew based agent sends emails\",\n    crew=SendEmailCrew(),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing LangGraph Agent for Essay Writing in Python\nDESCRIPTION: This snippet demonstrates the implementation of a LangGraph agent for essay writing using CopilotKit. It includes state definition, chat node implementation, and workflow configuration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/node-flow.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import Literal\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.messages import SystemMessage, AIMessage\nfrom langchain_core.runnables import RunnableConfig\nfrom langgraph.graph import StateGraph, END\nfrom langgraph.checkpoint.memory import MemorySaver\nfrom langgraph.types import Command\nfrom copilotkit import CopilotKitState\n\nclass AgentState(CopilotKitState):\n    pass\n\nasync def chat_node(state: AgentState, config: RunnableConfig) -> Command[Literal[\"user_feedback_node\", \"__end__\"]]:\n    model = ChatOpenAI(model=\"gpt-4o\")\n    model_with_tools = model.bind_tools([*state.get(\"copilotkit\", {}).get(\"actions\", [])])\n\n    system_message = SystemMessage(\n        content=\"You write essays. Use your tools to write an essay, don't just write it in plain text.\"\n    )\n\n    response = await model_with_tools.ainvoke([\n        system_message,\n        *state[\"messages\"],\n    ], config)\n\n    if isinstance(response, AIMessage) and response.tool_calls:\n        if response.tool_calls[0].get(\"name\") == \"writeEssay\":\n            return Command(goto=\"interrupt_node\", update={\"messages\": response})\n\n    return Command(goto=END, update={\"messages\": response})\n\ndef interrupt_node(state: AgentState, config: RunnableConfig):\n  pass\n\ndef user_feedback_node(state: AgentState, config: RunnableConfig) -> Command[Literal[\"chat_node\"]]:\n    last_message = state[\"messages\"][-1]\n\n    if last_message.content != \"SEND\":\n        return Command(goto=\"chat_node\", update={\n            \"messages\": [SystemMessage(content=\"The user declined they essay, please ask them how they'd like to improve it\")]\n        })\n\n    return Command(goto=\"chat_node\", update={\n        \"messages\": [SystemMessage(content=\"The user approved the essay, ask them if they'd like anything else\")]\n    })\n\nworkflow = StateGraph(AgentState)\nworkflow.add_node(\"chat_node\", chat_node)\nworkflow.add_node(\"interrupt_node\", interrupt_node)\nworkflow.add_node(\"user_feedback_node\", user_feedback_node)\nworkflow.add_edge(\"interrupt_node\", \"user_feedback_node\")\nworkflow.set_entry_point(\"chat_node\")\n\ngraph = workflow.compile(MemorySaver(), interrupt_after=[\"interrupt_node\"])\n```\n\n----------------------------------------\n\nTITLE: Setting up CopilotKit Runtime in NestJS\nDESCRIPTION: TypeScript code for setting up a controller in NestJS to handle the CopilotKit Runtime endpoint.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-create-endpoint.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { All, Controller, Req, Res } from '@nestjs/common';\nimport { CopilotRuntime, copilotRuntimeNestEndpoint, {{adapterImport}} } from '@copilotkit/runtime';\nimport { Request, Response } from 'express';\n\n@Controller()\nexport class CopilotkitController {\n  @All('/copilotkit')\n  copilotkit(@Req() req: Request, @Res() res: Response) {\n    {{adapterSetup}}\n    const runtime = new CopilotRuntime();\n\n    const handler = copilotRuntimeNestEndpoint({\n      runtime,\n      serviceAdapter,\n      endpoint: '/copilotkit',\n    });\n    return handler(req, res);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit LangGraph SDK for TypeScript\nDESCRIPTION: This snippet demonstrates how to install the CopilotKit SDK for JavaScript/TypeScript using npm. This package is required for creating deep agentic experiences with CopilotKit in TypeScript projects.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/install-sdk.mdx#2025-04-23_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install @copilotkit/sdk-js\n```\n\n----------------------------------------\n\nTITLE: Implementing Stage One with CopilotKit Hooks in TypeScript\nDESCRIPTION: This code demonstrates how to implement the first stage of a state machine using CopilotKit hooks. It shows how to use available prop to conditionally enable instructions, context, and actions based on the current stage. This stage captures a user's name and ensures it's not in a predefined list.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n  useCopilotAdditionalInstructions,\n  useCopilotAction,\n  useCopilotReadable\n} from \"@copilotkit/react-core\";\n\n// ...\n\n/*\n * Not required, but it is convenient to use a dedicated hook to define each\n * stage of the state machine\n */\nfunction useStageOne(\n  stage: string,\n  setStage: (stage: string) => void,\n  setName: (name: string) => void\n) {\n\n  /*\n   * Each stage can define its own instructions, context, and transitions\n   * (implemented via copilotActions). We transition between stages by simply\n   * setting the `stage` variable from the handler of the transition:\n   */\n\n  // Add additional instructions to the system prompt if this stage is active\n  useCopilotAdditionalInstructions({\n    instructions: \"Ask for the user's name politely.\",\n    // Use \"available\" argument to enable this only when the stage is correct!\n    available: stage === \"one\" ? \"available\" : \"disabled\"\n  })\n\n  // Add context to the system prompt if this stage is active\n  useCopilotReadable({\n    description: \"Other names\",\n    value: [\"John\", \"Jane\", \"Jim\"],\n    available: stage === \"one\" ? \"available\" : \"disabled\"\n  })\n\n  // Add an action to the assistant that transitions to the next stage if this stage is active\n  useCopilotAction({\n    name: \"transitionToNextStage\",\n    description: \"Moves to the next stage, only call is the user's name is not in the list of other names\",\n    available: stage === \"one\" ? \"available\" : \"disabled\",\n    parameters: [\\\n      { name: \"name\", type: \"string\", description: \"The name of the user\", required: true },\\\n    ],\n    handler: ({ name }) => {\n      // Perform any state updates given the user's input\n      setName(name);\n\n      // Transition to the next stage\n      setStage(\"two\");\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CopilotKit with CopilotCloud API Key in React\nDESCRIPTION: Demonstrates how to set up the CopilotKit component using CopilotCloud with a public API key instead of a custom runtime URL. This approach uses CopilotKit's cloud service instead of a self-hosted backend.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/troubleshooting/common-issues.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<CopilotKit\n    publicApiKey=\"<your-copilot-cloud-public-api-key>\"\n>\n    {/* Your app */}\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous LLM Invocation with Tool Calls\nDESCRIPTION: Demonstrates the correct way to invoke LLM asynchronously to enable progressive tool call streaming\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/troubleshooting/common-issues.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfig = copilotkit_customize_config(config, emit_tool_calls=[\"say_hello_to\"])\nresponse = await llm_with_tools.ainvoke(\n    [ SystemMessage(content=system_message), *state[\"messages\"] ],\n    config=config\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CopilotRuntime with LangGraph Endpoint\nDESCRIPTION: Setting up the CopilotRuntime with langGraphPlatformEndpoint configuration for self-hosted deployment.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-4-integrate-the-agent.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst runtime = new CopilotRuntime({\n    remoteEndpoints: [\n      langGraphPlatformEndpoint({\n        deploymentUrl: \"http://localhost:<port_number>\",\n        langsmithApiKey: \"your-langsmith-api-key\",\n        agents: [{ \n          name: 'travel', \n          description: 'A travel assistant that can help with planning trips.' \n        }]\n      }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Feedback Handlers in CopilotChat Component\nDESCRIPTION: Example showing how to implement thumbs up and thumbs down feedback handlers in the CopilotChat component. The handlers receive the message object as a parameter and can be used for tracking user feedback or model fine-tuning.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/troubleshooting/migrate-to-1.8.2.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<CopilotChat \n  onThumbsUp={(message) => console.log(message)} \n  onThumbsDown={(message) => console.log(message)}     \n/>\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the project locally for development and testing.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter-crewai-crews/ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the application locally for development and testing purposes.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-wait-user-input/ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Importing CopilotKit Styles in Root Component\nDESCRIPTION: Example of how to import CopilotKit's stylesheet at the root of a React project for consistent styling across components.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n...\nimport \"@copilotkit/react-textarea/styles.css\";\n\nexport function YourRootComponent() {\n  return (\n    <CopilotKit>\n      ...\n    </CopilotKit>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key in Environment File\nDESCRIPTION: Example of adding the API key to the .env file for CopilotKit configuration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-create-endpoint.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n{{envVarName}}=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Overwriting System Message in CopilotChat UI Component\nDESCRIPTION: Demonstrates how to completely override the default system message in a CopilotChat component using the makeSystemMessage property.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-ai-assistant-behavior.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\nconst CustomCopilot: React.FC = () => (\n  <CopilotChat\n    instructions=\"You are a knowledgeable tax preparation assistant. Provide accurate and concise answers to tax-related questions, guiding users through the tax filing process.\"\n    labels={{\n      title: \"Tax Preparation Assistant\",\n      initial: \"How can I assist you with your taxes today?\",\n    }}\n    makeSystemMessage={myCustomTaxSystemMessage} // [!code highlight]\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for CTA Cards in JSX\nDESCRIPTION: This code snippet imports necessary components and icons for creating call-to-action cards in a React application. It uses components from custom paths and icon libraries.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/generative-ui/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CTACards } from \"@/components/react/cta-cards\";\nimport { Callout } from \"fumadocs-ui/components/callout\";\nimport { Bot, Wrench } from \"lucide-react\";\nimport { LuLayoutTemplate } from \"react-icons/lu\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Headers for CopilotKit Requests\nDESCRIPTION: This JSON snippet shows an example of how to set custom headers for requests made by CopilotKit. In this case, it's setting an Authorization header with a bearer token.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/CopilotKit.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Authorization\": \"Bearer X\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing copilotkit with conda (Python/Bash)\nDESCRIPTION: Shows how to install the `copilotkit` Python package using the conda package manager, specifying the `copilotkit-channel` channel with the `-c` flag. The first command performs a standard installation, while the second includes optional `crewai` dependencies.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/install-python-sdk.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda install copilotkit -c copilotkit-channel\n# including support for crewai\nconda install copilotkit[crewai] -c copilotkit-channel\n```\n\n----------------------------------------\n\nTITLE: Cloning CoAgents Starter Repository for TypeScript\nDESCRIPTION: Git command to clone the CoAgents starter repository for TypeScript, using sparse checkout to only get the necessary files.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/quickstart/langgraph.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone -n --depth=1 --filter=tree:0 https://github.com/CopilotKit/CopilotKit && cd CopilotKit && git sparse-checkout set --no-cone examples/coagents-starter/agent-js && git checkout && cd ..\ncd CopilotKit/examples/coagents-starter/agent-js\n```\n\n----------------------------------------\n\nTITLE: Implementing Copilot Runtime Endpoint in Node.js Express\nDESCRIPTION: This snippet shows how to set up a Copilot Runtime handler in an Express.js app. It uses the CopilotRuntime class and copilotRuntimeNodeHttpEndpoint function from @copilotkit/runtime to handle requests at the '/copilotkit' endpoint.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-starter.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express';\nimport {\n  CopilotRuntime,\n  ExperimentalEmptyAdapter,\n  copilotRuntimeNodeHttpEndpoint,\n  langGraphPlatformEndpoint\n} from '@copilotkit/runtime';\n\nconst app = express();\nconst serviceAdapter = new ExperimentalEmptyAdapter();\n\napp.use('/copilotkit', (req, res, next) => {\n  const runtime = new CopilotRuntime({\n    remoteEndpoints: [\n      // added in next step...\n    ],\n  });\n\n  const handler = copilotRuntimeNodeHttpEndpoint({\n    endpoint: '/copilotkit',\n    runtime,\n    serviceAdapter,\n  });\n\n  return handler(req, res, next);\n});\n\napp.listen(4000, () => {\n  console.log('Listening at http://localhost:4000/copilotkit');\n});\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit via pip - Bash\nDESCRIPTION: This Bash code snippet installs the CopilotKit Python SDK from PyPI. It requires Python and pip to be available on the system. The command will download and install CopilotKit and its core dependencies, enabling usage of the SDK in Python projects.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/sdk-python/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install copilotkit\n```\n\n----------------------------------------\n\nTITLE: Emitting Messages in CrewAI\nDESCRIPTION: Shows how to manually emit messages to CopilotKit during long-running operations. Includes both the emission of the message and the required return structure from the node.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/CrewAI.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.crewai import copilotkit_emit_message\n\nmessage = \"Step 1 of 10 complete\"\nawait copilotkit_emit_message(message)\n\n# Return the message from the node\nreturn {\n    \"messages\": [AIMessage(content=message)]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning CopilotKit Repository\nDESCRIPTION: Commands to clone the CopilotKit repository from the coagents-travel-tutorial-start branch and navigate to the project directory.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-1-checkout-repo.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone -b coagents-travel-tutorial-start https://github.com/CopilotKit/CopilotKit.git\ncd CopilotKit\n```\n\n----------------------------------------\n\nTITLE: Implementing Flow Based Agent in Python\nDESCRIPTION: Example showing how to create a CrewAIAgent instance using a Flow object for email handling functionality.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/CrewAIAgent.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nCrewAIAgent(\n    name=\"email_agent_flow\",\n    description=\"This flow based agent sends emails\",\n    flow=SendEmailFlow(),\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing CopilotChat Component with Instructions\nDESCRIPTION: Example of setting custom instructions for a CopilotChat UI component to specialize in tax preparation assistance.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-ai-assistant-behavior.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\n<CopilotChat\n  instructions=\"You are a helpful assistant specializing in tax preparation. Provide concise and accurate answers to tax-related questions.\" // [!code highlight]\n  labels={{\n    title: \"Tax Preparation Assistant\",\n    initial: \"How can I help you with your tax preparation today?\",\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotKit Chat Popup in Next.js Application\nDESCRIPTION: Code showing how to integrate CopilotKit's chat popup component into a Next.js todo list application. The implementation includes importing necessary components, adding styles, and rendering the popup component.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-todo-app/step-2-setup-copilotkit.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { TasksList } from \"@/components/TasksList\";\nimport { TasksProvider } from \"@/lib/hooks/use-tasks\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\nimport { CopilotPopup } from \"@copilotkit/react-ui\"; // [!code highlight]\nimport \"@copilotkit/react-ui/styles.css\"; // [!code highlight]\n\nexport default function Home() {\n  return (\n    <>\n      <TasksProvider>\n        <TasksList />\n      </TasksProvider>\n      <CopilotPopup /> // [!code highlight]\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit SDK with Poetry\nDESCRIPTION: Instructions for installing the CopilotKit SDK using Poetry package manager. This step is necessary to use CopilotKit functions in the Python-based agent.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-5-stream-progress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npoetry add copilotkit\n# or including support for crewai\npoetry add copilotkit[crewai]\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Icons\nDESCRIPTION: Import statements for required React components including YouTube video player, icons, and UI elements.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { YouTubeVideo } from \"@/components/react/youtube-video\";\nimport { FaGithub } from \"react-icons/fa\";\nimport { PiMonitor } from \"react-icons/pi\";\nimport { Button } from \"@/components/ui/button\";\nimport Link from \"next/link\";\n```\n\n----------------------------------------\n\nTITLE: Image Frame Component in JSX/MDX\nDESCRIPTION: Implementation of a framed image component displaying an infographic about agentic copilot human-in-the-loop functionality.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/human-in-the-loop/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Frame className=\"my-0\">\n  <img\n    src=\"/images/coagents/coagents-hitl-infographic.png\"\n    alt=\"Agentic Copilot Human in the Loop\"\n    className=\"mt-4 mb-0 shadow-md\"\n  />\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video Component in React\nDESCRIPTION: Code snippet showing how to embed a YouTube video using a custom React component with configurable playback rate\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/videos/perplexity-clone.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<YouTubeVideo videoId=\"HvzmwwDF4aM\" defaultPlaybackRate={1.25} />\n```\n\n----------------------------------------\n\nTITLE: Tunnel Creation Output Display\nDESCRIPTION: Terminal output showing the successful creation of a tunnel connecting the local agent to Copilot Cloud, including tunnel URL and project information.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-4-agentic-chat-ui.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n✔ Select a project Local (ID: <project_id>)\n✅ LangGraph Platform endpoint detected\n⠹ Creating tunnel...\n\nTunnel Information:\n\n• Tunnel URL:            https://<tunnel_id>.tunnels.devcopilotkit.com\n• Endpoint Type:         LangGraph Platform\n• Project:               projects/<project_id>\n\nPress Ctrl+C to stop the tunnel\n\n✔ 🚀 Local tunnel is live and linked to Copilot Cloud!\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit SDK with Poetry\nDESCRIPTION: This code snippet shows how to install the CopilotKit SDK using Poetry, including optional support for CrewAI.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_199\n\nLANGUAGE: bash\nCODE:\n```\npoetry add copilotkit\n# including support for crewai\npoetry add copilotkit[crewai]\n```\n\n----------------------------------------\n\nTITLE: Dynamic Agent Configuration\nDESCRIPTION: Shows how to dynamically configure agents using context properties and custom configuration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/RemoteEndpoints.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitRemoteEndpoint, LangGraphAgent\nfrom my_agent.agent import graph\n\nsdk = CopilotKitRemoteEndpoint(\n    agents=lambda context: [\n        LangGraphAgent(\n            name=\"email_agent\",\n            description=\"This agent sends emails\",\n            graph=graph,\n            langgraph_config={\n                \"token\": context[\"properties\"][\"token\"]\n            }\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Using setThreadId with useCopilotContext Hook\nDESCRIPTION: This snippet demonstrates how to use the useCopilotContext hook to access and change the current threadId. The hook provides access to the current threadId and a function to update it programmatically.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_128\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCopilotContext } from \"@copilotkit/react-core\";\n\nconst ChangeThreadButton = () => {\n  const { threadId, setThreadId } = useCopilotContext();\n  return (\n    <Button onClick={() => setThreadId(\"d73c22f3-1f8e-4a93-99db-5c986068d64f\")}>\n      Change Thread\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CopilotTextarea in React\nDESCRIPTION: Example of how to import and use the CopilotTextarea component in a React application. It demonstrates basic usage with autosuggest configuration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CopilotTextarea } from '@copilotkit/react-textarea';\nimport \"@copilotkit/react-textarea/styles.css\";\n\n<CopilotTextarea\n  autosuggestionsConfig={{\n    textareaPurpose:\n     \"the body of an email message\",\n    chatApiConfigs: {},\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Agent Directory in Shell\nDESCRIPTION: Command to change directory to the coagents-travel agent folder\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-2-langgraph-agent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/coagents-travel/agent\n```\n\n----------------------------------------\n\nTITLE: Installing Agent Dependencies with Poetry\nDESCRIPTION: Commands to navigate to the agent directory and install dependencies using Poetry.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd agent\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Installing Python Agent Dependencies via Poetry - Shell Script\nDESCRIPTION: Installs required Python dependencies for the backend agent using Poetry. Prerequisites include Poetry installed in your environment. Must be run from the 'agent' directory. This step ensures that all Python dependencies specified in the project's configuration are installed. No inputs or outputs beyond package installation; no constraints other than proper directory context.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa-text/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd agent\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit Package\nDESCRIPTION: Command to install the CopilotKit package using pip package manager.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/LangGraphAgent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install copilotkit\n```\n\n----------------------------------------\n\nTITLE: Initializing GroqAdapter with CopilotRuntime\nDESCRIPTION: Example demonstrating how to initialize and configure the GroqAdapter with CopilotRuntime. Shows setting up the Groq client with an API key and creating a new adapter instance.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/llm-adapters/GroqAdapter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopilotRuntime, GroqAdapter } from \"@copilotkit/runtime\";\nimport { Groq } from \"groq-sdk\";\n\nconst groq = new Groq({ apiKey: process.env[\"GROQ_API_KEY\"] });\n\nconst copilotKit = new CopilotRuntime();\n\nreturn new GroqAdapter({ groq, model: \"<model-name>\" });\n```\n\n----------------------------------------\n\nTITLE: React Component Imports\nDESCRIPTION: Import statements for React components and icons used throughout the documentation interface.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { BiSolidMessage as TextIcon } from \"react-icons/bi\";\nimport { VscJson as JsonIcon } from \"react-icons/vsc\";\nimport { FaDiscord } from \"react-icons/fa\";\nimport Link from \"next/link\";\nimport { YouTubeVideo } from \"@/components/react/youtube-video\";\nimport { CoAgentsEnterpriseCTA } from \"@/components/react/coagents/coagents-enterprise-cta.tsx\";\nimport {\n  CoAgentsFeatureToggle,\n  CoAgentsFeatureRender,\n} from \"@/components/react/coagents/coagents-features.tsx\";\nimport { DynamicContentWrapper } from \"@/components/react/dynamic-content-wrapper\";\nimport { ExamplesCarousel } from \"@/components/react/examples-carousel\";\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State Classes in Python\nDESCRIPTION: This snippet shows how to define the basic state class for an agent using CopilotKit's CopilotKitState.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_143\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitState\nfrom typing import Literal\n\nclass AgentState(CopilotKitState):\n    question: str\n    answer: str\n    resources: List[str]\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State Class in Python with LangGraph\nDESCRIPTION: Defines an AgentState class that extends CopilotKitState to handle language preferences in a LangGraph agent, and implements a chat node that reads and updates this state.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_180\n\nLANGUAGE: Python\nCODE:\n```\nfrom copilotkit import CopilotKitState\nfrom typing import Literal\n\nclass AgentState(CopilotKitState):\n    language: Literal[\"english\", \"spanish\"] = \"spanish\"\n\ndef chat_node(state: AgentState, config: RunnableConfig):\n  # If language is not defined, set a value.\n  # this is because a default value in a state class is not read on runtime\n  language = state.get(\"language\", \"spanish\")\n\n  # ... add the rest of the node implementation and use the language variable\n\n  return {\n    # ... add the rest of state to return\n    # return the language to make it available for the next nodes & frontend to read\n    \"language\": language\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotReadable for Form State\nDESCRIPTION: Usage of useCopilotReadable hook to provide form fields and their current values to the AI, enabling it to understand the current state of the form and session.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-form-filling/README.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nuseCopilotReadable({\n  description: \"The security incident form fields and their current values\",\n  value: formState\n});\n```\n\n----------------------------------------\n\nTITLE: Navigation Cards Component Structure\nDESCRIPTION: JSX structure for navigation cards displaying different UI customization options with icons and descriptions\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards>\n  <Card\n    title=\"Prebuilt Copilot UI\"\n    icon={<MessageCircleIcon />}\n    description=\"Get started quickly with CopilotKit's ready-to-use UI components.\"\n    href=\"/guides/custom-look-and-feel/built-in-ui-components\"\n  />\n  <Card\n    title=\"Styling Copilot UI\"\n    icon={<BrushIcon />}\n    description=\"Customize the appearance of CopilotKit's pre-built components with your own styles.\"\n    href=\"/guides/custom-look-and-feel/customize-built-in-ui-components\"\n  />\n  <Card\n    title=\"Custom Components\"\n    icon={<PuzzleIcon />}\n    description=\"Replace the Copilot UI components with your own while keeping the core functionality.\"\n    href=\"/guides/custom-look-and-feel/bring-your-own-components\"\n  />\n  <Card\n    title=\"Fully Custom UI\"\n    icon={<SettingsIcon />}\n    description=\"Build your UI from scratch using CopilotKit's hooks and core functionality.\"\n    href=\"/guides/custom-look-and-feel/headless-ui\"\n  />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Rendering Agent State in Chat UI with useCoAgentStateRender\nDESCRIPTION: Shows how to render agent state directly in the chat UI using the useCoAgentStateRender hook. This provides a way to display contextual state information to users within the chat interface.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_182\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useCoAgentStateRender } from \"@copilotkit/react-core\";\n\n// Define the agent state type, should match the actual state of your agent\ntype AgentState = {\n  language: \"english\" | \"spanish\";\n}\n\nfunction YourMainContent() {\n  // ...\n\n  useCoAgentStateRender({\n    name: \"sample_agent\",\n    render: ({ state }) => {\n      if (!state.language) return null;\n      return <div>Language: {state.language}</div>;\n    },\n  });\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Data to Copilot using useCopilotReadable Hook in React\nDESCRIPTION: This code snippet demonstrates how to use the useCopilotReadable hook to add contextual data to the Copilot. It creates a state with colleague information and makes it available to the Copilot for intelligent interactions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_124\n\nLANGUAGE: typescript\nCODE:\n```\n\"use client\" // only necessary if you are using Next.js with the App Router.\nimport { useCopilotReadable } from \"@copilotkit/react-core\";\nimport { useState } from 'react';\n\nexport function YourComponent() {\n  // Create colleagues state with some sample data\n  const [colleagues, setColleagues] = useState([\\\n    { id: 1, name: \"John Doe\", role: \"Developer\" },\\\n    { id: 2, name: \"Jane Smith\", role: \"Designer\" },\\\n    { id: 3, name: \"Bob Wilson\", role: \"Product Manager\" }\\\n  ]);\n\n  // Define Copilot readable state\n\n  useCopilotReadable({\n    description: \"The current user's colleagues\",\n    value: colleagues,\n  });\n  return (\n    // Your custom UI component\n    <>...</>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing UI Dependencies with pnpm\nDESCRIPTION: This command installs the required dependencies for the UI using pnpm package manager.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-wait-user-input/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd ./ui\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Agent Dependencies\nDESCRIPTION: Commands to install dependencies for the JavaScript agent using pnpm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd agent-js\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Environment Variables\nDESCRIPTION: This snippet shows the content of the .env file needed for the agent, which includes the OpenAI API key. It's important to use an API key that supports GPT-4.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter-crewai-crews/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Logging Configuration Example\nDESCRIPTION: Example configuration for setting up LLM request/response logging with Langfuse integration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/CopilotRuntime.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlogging: {\n  enabled: true, // Enable or disable logging\n  progressive: true, // Set to false for buffered logging\n  logger: {\n    logRequest: (data) => langfuse.trace({ name: \"LLM Request\", input: data }),\n    logResponse: (data) => langfuse.trace({ name: \"LLM Response\", output: data }),\n    logError: (errorData) => langfuse.trace({ name: \"LLM Error\", metadata: errorData }),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CopilotRuntime Configuration\nDESCRIPTION: Configuration of CopilotRuntime to include the remote endpoint connection.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions/remote-backend-endpoint.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst runtime = new CopilotRuntime({\n    // ...existing configuration\n    remoteEndpoints: [\n        { url: \"http://localhost:8000/copilotkit_remote\" },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Staging Changes for Commit (Bash)\nDESCRIPTION: Command to stage all changes in the working directory for the next commit. This is part of the Git workflow for contributing changes.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Complete State Machine Chat Implementation in CopilotKit with TypeScript\nDESCRIPTION: This is the complete implementation of a two-stage state machine conversation flow. It includes all required hooks, state management, and component rendering to guide users through a conversational form that collects their name.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\nimport { CopilotChat } from \"@copilotkit/react-ui\";\nimport { \n  CopilotKit, \n  useCopilotAction, \n  useCopilotAdditionalInstructions, \n  useCopilotReadable \n} from \"@copilotkit/react-core\";\n\n/*\n* Not required, but it is convenient to use a dedicated hook to define each \n* stage of the state machine\n*/\nfunction useStageOne(\n  stage: string, \n  setStage: (stage: string) => void, \n  setName: (name: string) => void\n) {\n\n  /*\n  * Each stage can define its own instructions, context, and transitions\n  * (implemented via copilotActions). We transition between stages by simply\n  * setting the `stage` variable from the handler of the transition:\n  */\n\n  // Add additional instructions to the system prompt if this stage is active\n  useCopilotAdditionalInstructions({\n    instructions: \"Ask for the user's name politely.\",\n    // Use \"available\" argument to enable this only when the stage is correct!\n    available: stage === \"one\" ? \"available\" : \"disabled\"\n  })\n\n  // Add context to the system prompt if this stage is active\n  useCopilotReadable({\n    description: \"Other names\",\n    value: [\"John\", \"Jane\", \"Jim\"],\n    available: stage === \"one\" ? \"available\" : \"disabled\"\n  })\n\n  // Add an action to the assistant that transitions to the next stage if this stage is active\n  useCopilotAction({\n    name: \"transitionToNextStage\",\n    description: \"Moves to the next stage, only call is the user's name is not in the list of other names\",\n    available: stage === \"one\" ? \"available\" : \"disabled\",\n    parameters: [\n      { name: \"name\", type: \"string\", description: \"The name of the user\", required: true },\n    ],\n    handler: ({ name }) => {\n      // Perform any state updates given the user's input\n      setName(name);\n\n      // Transition to the next stage\n      setStage(\"two\"); \n    }\n  });\n}\n\nfunction useStageTwo(stage: string) => void) {\n  // Add stage-specific instructions - only available in stage \"two\"\n  useCopilotAdditionalInstructions({\n    instructions: \"Talk to the user about their name and refer to them like a pirate would.\",\n    available: stage === \"two\" ? \"available\" : \"disabled\"\n  })\n\n  // ...\n}\n\n// Any additional stages you want to add...\n\nfunction StateMachineChat() {\n  const [stage, setStage] = useState<string>(\"one\");\n  const [ name, setName ] = useState<string>(\"\");\n\n  // Context available across all stages\n  useCopilotReadable({\n    description: \"User's name\",\n    value: name,\n    available: stage === \"one\" ? \"available\" : \"disabled\"\n  }, [name])\n\n  useStageOne(stage, setName);\n  useStageTwo(stage);\n  // any other stages you want to add ...\n\n  return (\n    <CopilotKit>\n      <CopilotChat/>\n    </CopilotKit>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Interrupts in React Frontend\nDESCRIPTION: This TypeScript/JSX code shows how to preprocess interrupt events and handle them programmatically. It includes a handler function that can resolve interrupts without rendering UI components based on user authorization.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_190\n\nLANGUAGE: typescript\nCODE:\n```\n// We will assume an interrupt event in the following shape\ntype Department = 'finance' | 'engineering' | 'admin'\ninterface AuthorizationInterruptEvent {\n    type: 'auth',\n    accessDepartment: Department,\n}\n\nimport { useLangGraphInterrupt } from \"@copilotkit/react-core\";\n\nconst YourMainContent = () => {\n    const [userEmail, setUserEmail] = useState({ email: 'example@user.com' })\n    function getUserByEmail(email: string): { id: string; department: Department } {\n        // ... an implementation of user fetching\n    }\n\n    // ...\n    // styles omitted for brevity\n\n    useLangGraphInterrupt({\n        handler: async ({ result, event, resolve }) => {\n            const { department } = await getUserByEmail(userEmail)\n            if (event.value.accessDepartment === department || department === 'admin') {\n                // Following the resolution of the event, we will not proceed to the render method\n                resolve({ code: 'AUTH_BY_DEPARTMENT' })\n                return;\n            }\n\n            return { department, userId }\n        },\n        render: ({ result, event, resolve }) => (\n            <div>\n                <h1>Request for {event.value.type}</h1>\n                <p>Members from {result.department} department cannot access this information</p>\n                <p>You can request access from an administrator to continue.</p>\n                <button\n                    onClick={() => resolve({ code: 'REQUEST_AUTH', data: { department: result.department, userId: result.userId } })}\n                >\n                    Request Access\n                </button>\n                <button\n                    onClick={() => resolve({ code: 'CANCEL' })}\n                >\n                    Cancel\n                </button>\n            </div>\n        )\n    });\n    // ...\n\n    return <div>{/* ... */}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit React UI Dependencies\nDESCRIPTION: Command to install the necessary dependencies for using the CopilotSidebar component from the @copilotkit/react-ui package.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/chat/CopilotSidebar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @copilotkit/react-core @copilotkit/react-ui\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotKit Router Mode in React\nDESCRIPTION: Shows how to initialize CopilotKit in Router Mode, which acts as a central hub for dynamically routing requests between different agents. This is the default mode that requires a runtime URL configuration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/multi-agent-flows.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<CopilotKit runtimeUrl=\"<copilot-runtime-url>\">\n  {/* Your application components */}\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Running Next.js UI\nDESCRIPTION: Command to run the Next.js UI project using pnpm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-research-canvas/readme.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Environment File\nDESCRIPTION: Command to create a new .env file for storing API keys and configuration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-2-langgraph-agent.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntouch .env\n```\n\n----------------------------------------\n\nTITLE: Simulating State Updates in Python for CrewAI Flow Agent\nDESCRIPTION: This code demonstrates how to simulate state updates in a CrewAI Flow agent. It initializes the state with search queries and updates their status over time, emitting the state changes.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/generative-ui/agentic.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom crewai.flow.flow import start\nfrom litellm import completion\nfrom copilotkit import CopilotKitState\nfrom copilotkit.langgraph import copilotkit_emit_state\nimport asyncio\nfrom typing import TypedDict\n\nclass Searches(TypedDict):\n    query: str\n    done: bool\n\nclass AgentState(CopilotKitState):\n    searches: list[Searches] = []\n\n@start\nasync def chat(self):\n    self.state[\"searches\"] = [\n        {\"query\": \"Initial research\", \"done\": False},\n        {\"query\": \"Retrieving sources\", \"done\": False},\n        {\"query\": \"Forming an answer\", \"done\": False},\n    ]\n    await copilotkit_emit_state(state)\n\n    # Simulate state updates\n    for search in self.state[\"searches\"]:\n        await asyncio.sleep(1)\n        search[\"done\"] = True\n        await copilotkit_emit_state(state)\n\n    # Run the model to generate a response\n    response = await copilotkit_stream(\n        completion(\n            model=\"openai/gpt-4o\",\n            messages=[\n                {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                *self.state.get(\"messages\", [])\n            ],\n            stream=True\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Latest Patch\nDESCRIPTION: Documents recent patches including anonymous telemetry implementation and default runtime URL updates.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/runtime-client-gql/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- b6a4b6eb: Introduce anonymous telemetry\n- b6a4b6eb: Set default Copilot Cloud runtime URL to versioned URL (v1)\n- Updated dependencies [b6a4b6eb]\n- Updated dependencies [b6a4b6eb]\n- Updated dependencies [b6a4b6eb]\n- Updated dependencies\n  - @copilotkit/runtime@1.0.0\n  - @copilotkit/shared@1.0.0\n```\n\n----------------------------------------\n\nTITLE: Unlinking CopilotKit Packages from Global Registry\nDESCRIPTION: This command runs in the CopilotKit monorepo to remove the global links for all packages when you're done with development testing.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/(other)/contributing/code-contributions/package-linking.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nturbo run unlink:global\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Component in CopilotKit\nDESCRIPTION: This snippet shows how to create a custom Button component for triggering the CopilotSidebar or CopilotPopup. It uses ButtonProps and useChatContext from @copilotkit/react-ui to manage the open/close state of the chat interface.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/bring-your-own-components.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ButtonProps, useChatContext, CopilotSidebar } from \"@copilotkit/react-ui\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\nimport \"@copilotkit/react-ui/styles.css\";\nfunction Button({}: ButtonProps) {\n  const { open, setOpen } = useChatContext();\n\n  const wrapperStyles = \"w-24 bg-blue-500 text-white p-4 rounded-lg text-center cursor-pointer\";\n\n  return (\n    <div onClick={() => setOpen(!open)} className={wrapperStyles}>\n      <button\n        className={`${open ? \"open\" : \"\"}`}\n        aria-label={open ? \"Close Chat\" : \"Open Chat\"}\n      >\n        Ask AI\n      </button>\n    </div>\n  );\n};\n\n<CopilotKit>\n  <CopilotSidebar Button={Button} />\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for CopilotKit React UI\nDESCRIPTION: Commands to install the required npm packages for using the useCopilotChatSuggestions hook.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotChatSuggestions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @copilotkit/react-core @copilotkit/react-ui\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAIAdapter with Standard OpenAI Configuration\nDESCRIPTION: Example showing how to initialize CopilotRuntime with OpenAI adapter using standard OpenAI configuration. Requires OpenAI API key and optional organization ID.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/llm-adapters/OpenAIAdapter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopilotRuntime, OpenAIAdapter } from \"@copilotkit/runtime\";\nimport OpenAI from \"openai\";\n\nconst copilotKit = new CopilotRuntime();\n\nconst openai = new OpenAI({\n  organization: \"<your-organization-id>\", // optional\n  apiKey: \"<your-api-key>\",\n});\n\nreturn new OpenAIAdapter({ openai });\n```\n\n----------------------------------------\n\nTITLE: Dynamic Agent Configuration\nDESCRIPTION: Example of implementing dynamic agent configuration based on frontend properties.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions/remote-backend-endpoint.mdx#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef build_agents(context):\n    return [\n        LangGraphAgent(\n            name=\"some_agent\",\n            description=\"This agent does something\",\n            graph=graph,\n            langgraph_config={\n                \"some_property\": context[\"properties\"][\"someProperty\"]\n            }\n        )\n    ]\n\n\napp = FastAPI()\nsdk = CopilotKitRemoteEndpoint(\n    agents=build_agents,\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Azure OpenAI Models in Python\nDESCRIPTION: Shows the correct way to import AzureChatOpenAI instead of AzureOpenAI to resolve the 'bind_tools' attribute error\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_openai import AzureOpenAI\nfrom langchain_openai import AzureChatOpenAI\n```\n\n----------------------------------------\n\nTITLE: Creating Environment File for UI\nDESCRIPTION: This snippet shows the content of the .env file needed for the UI, which includes the OpenAI API key.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-wait-user-input/README.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Implementing Agent Lock Mode in CopilotKit\nDESCRIPTION: This code snippet shows how to enable Agent Lock Mode in CopilotKit by specifying both the runtime URL and the agent name in the CopilotKit provider component. Agent Lock Mode is used when focusing on a specific task or domain.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/multi-agent-flows.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<CopilotKit runtimeUrl=\"<copilot-runtime-url>\" agent=\"<the-name-of-the-agent>\">\n  {/* Your application components */}\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotSidebar Component in React\nDESCRIPTION: Shows implementation of a collapsible sidebar chat interface using CopilotSidebar component. The component wraps the main content and provides an expandable chat interface.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/component-examples.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotSidebar } from \"@copilotkit/react-ui\";\n\nexport function YourApp() {\n  return (\n    <CopilotSidebar\n      defaultOpen={true}\n      instructions={\"You are assisting the user as best as you can. Answer in the best way possible given the data you have.\"}\n      labels={{\n        title: \"Sidebar Assistant\",\n        initial: \"How can I help you today?\",\n      }}\n    >\n      <YourMainContent />\n    </CopilotSidebar>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Lock Mode in CopilotKit Provider Component\nDESCRIPTION: Example of setting up the CopilotKit provider component in Agent Lock Mode, which configures CopilotKit to work exclusively with a specific agent for focused tasks.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_94\n\nLANGUAGE: jsx\nCODE:\n```\n<CopilotKit runtimeUrl=\"<copilot-runtime-url>\" agent=\"<the-name-of-the-agent>\">\n  {/* Your application components */}\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Flow-based CrewAIAgent in Python\nDESCRIPTION: Code showing how to initialize a CrewAIAgent using a Flow object to create an email agent. This demonstrates the basic setup for a Flow-based agent in the CopilotKit framework.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_107\n\nLANGUAGE: python\nCODE:\n```\nCrewAIAgent(\n    name=\"email_agent_flow\",\n    description=\"This flow based agent sends emails\",\n    flow=SendEmailFlow(),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing merge_state Function for CopilotKitConfig\nDESCRIPTION: Function signature for the merge_state method used in CopilotKitConfig to customize how CopilotKit merges agent state. This function handles state management between the agent and the interface.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_108\n\nLANGUAGE: python\nCODE:\n```\n# Function signatures:\ndef merge_state(\n    *,\n    state: dict,\n    messages: List[BaseMessage],\n    actions: List[Any],\n    agent_name: str\n):\n    # ...implementation...\n```\n\n----------------------------------------\n\nTITLE: Opening a tunnel to local LangGraph agent\nDESCRIPTION: Command to open a tunnel to a locally running LangGraph agent for Copilot Cloud connection.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx copilotkit@latest dev --port 8000\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit Packages\nDESCRIPTION: NPM command to install the required CopilotKit React packages for UI and core functionality.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_73\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @copilotkit/react-ui @copilotkit/react-core\n```\n\n----------------------------------------\n\nTITLE: Cloning CopilotKit Repository and Checking Out Tutorial Branch\nDESCRIPTION: Commands to clone the CopilotKit repository, checkout the 'coagents-travel-tutorial-start' branch, and navigate to the tutorial directory.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-1-checkout-repo.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone -b coagents-travel-tutorial-start https://github.com/CopilotKit/CopilotKit.git\ncd CopilotKit\ncd examples/coagents-travel\n```\n\n----------------------------------------\n\nTITLE: Simulating State Updates in Python Agent\nDESCRIPTION: Implements a chat_node function that simulates state updates by adding searches and marking them as done over time.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_151\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom typing import TypedDict\nfrom langchain_core.runnables import RunnableConfig\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.messages import SystemMessage\nfrom copilotkit import CopilotKitState\nfrom copilotkit.langgraph import copilotkit_emit_state\n\nclass Searches(TypedDict):\n    query: str\n    done: bool\n\nclass AgentState(CopilotKitState):\n    searches: list[Searches] = []\n\nasync def chat_node(state: AgentState, config: RunnableConfig):\n    state[\"searches\"] = [\n        {\"query\": \"Initial research\", \"done\": False},\n        {\"query\": \"Retrieving sources\", \"done\": False},\n        {\"query\": \"Forming an answer\", \"done\": False},\n    ]\n    await copilotkit_emit_state(config, state)\n\n    # Simulate state updates\n    for search in state[\"searches\"]:\n        await asyncio.sleep(1)\n        search[\"done\"] = True\n        await copilotkit_emit_state(config, state)\n\n    # Run the model to generate a response\n    response = await ChatOpenAI(model=\"gpt-4o\").ainvoke([\n        SystemMessage(content=\"You are a helpful assistant.\"),\n        *state[\"messages\"],\n    ], config)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tool Call Emission in CopilotKit\nDESCRIPTION: Example of how to enable tool call emission for specific tools using copilotkit_customize_config function.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_104\n\nLANGUAGE: python\nCODE:\n```\nconfig = copilotkit_customize_config(\n    config,\n    # Can set to True, False, or a list of tool call names to emit.\n    emit_tool_calls=[\"tool_name\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Frontend Component with useCopilotAction\nDESCRIPTION: React component implementation using useCopilotAction hook to create an interactive essay review interface with approval functionality.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_172\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCopilotAction } from \"@copilotkit/react-core\"\nimport { Markdown } from \"@copilotkit/react-ui\"\n\nfunction YourMainContent() {\n  // ...\n\n  useCopilotAction({\n    name: \"writeEssay\",\n    available: \"remote\",\n    description: \"Writes an essay and takes the draft as an argument.\",\n    parameters: [\\\n      { name: \"draft\", type: \"string\", description: \"The draft of the essay\", required: true },\\\n    ],\n\n    renderAndWaitForResponse: ({ args, respond, status }) => {\n      return (\n        <div>\n          <Markdown content={args.draft || 'Preparing your draft...'} />\n\n          <div className={`flex gap-4 pt-4 ${status !== \"executing\" ? \"hidden\" : \"\"}`}>\n            <button\n              onClick={() => respond?.(\"CANCEL\")\n              disabled={status !== \"executing\"}\n              className=\"border p-2 rounded-xl w-full\"\n            >\n              Try Again\n            </button>\n            <button\n              onClick={() => respond?.(\"SEND\")\n              disabled={status !== \"executing\"}\n              className=\"bg-blue-500 text-white p-2 rounded-xl w-full\"\n            >\n              Approve Draft\n            </button>\n          </div>\n        </div>\n      );\n    },\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Todo List App Repository\nDESCRIPTION: Clones the example-todos-app repository from GitHub, specifically checking out the base-start-here branch. This command also navigates into the project directory to prepare for the next steps.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-todo-app/step-1-checkout-repo.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone -b base-start-here https://github.com/CopilotKit/example-todos-app.git\ncd example-todos-app\n```\n\n----------------------------------------\n\nTITLE: Conditional Action Access\nDESCRIPTION: Shows how to conditionally provide actions based on user permissions using context properties.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/RemoteEndpoints.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitRemoteEndpoint, Action\n\nsdk = CopilotKitRemoteEndpoint(\n    actions=lambda context: (\n        [action_a, action_b] if is_admin(context[\"properties\"][\"token\"]) else [action_a]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Base Dependencies with Poetry for LangGraph (Bash)\nDESCRIPTION: Installs the base Python dependencies defined in the `pyproject.toml` file within the `agent` directory using Poetry. Assumes Poetry is installed and the virtual environment is active.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/demo-viewer/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Type in Root .env (Bash)\nDESCRIPTION: Adds or modifies the `NEXT_PUBLIC_AGENT_TYPE` variable in the root `.env` file. Setting it to `langgraph` instructs the Next.js application to load LangGraph demos. The default is `crewai`. Requires restarting the development server (`pnpm run dev`) for the change to take effect.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/demo-viewer/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Set to 'langgraph' to view LangGraph demos, or 'crewai' for CrewAI demos (default)\nNEXT_PUBLIC_AGENT_TYPE=langgraph\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit Provider Package\nDESCRIPTION: Command to install the CopilotKit provider package using npm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-create-endpoint.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install {{packageName}}\n```\n\n----------------------------------------\n\nTITLE: Deploying LangGraph Agent with LangGraph CLI in Python\nDESCRIPTION: This command uses the LangGraph CLI to start a development server and LangGraph studio session for local development. It requires a LangSmith account and Python 3.11 or above to deploy a graph locally for testing with CopilotKit.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_157\n\nLANGUAGE: bash\nCODE:\n```\n# For Python 3.11 or above\nlanggraph dev --host localhost --port 8000\n```\n\n----------------------------------------\n\nTITLE: Setting up CopilotKit Provider in Root Layout Component\nDESCRIPTION: This code snippet shows how to wrap your React application with the CopilotKit provider in the root layout component, which is necessary for all Copilot-aware components to function properly.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_130\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./globals.css\";\nimport { ReactNode } from \"react\";\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Use the public api key you got from Copilot Cloud  */}\n        <CopilotKit publicApiKey=\"<your-copilot-cloud-public-api-key>\">\n          {children}\n        </CopilotKit>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Styling for CopilotKit Components\nDESCRIPTION: Shows how to customize CopilotKit components using CSS classes to modify button borders, message padding, and user message background\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/customize-built-in-ui-components.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.copilotKitButton {\n  border-radius: 0;\n}\n\n.copilotKitMessages {\n  padding: 2rem;\n}\n\n.copilotKitUserMessage {\n  background: #007AFF;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Frontend Dependencies\nDESCRIPTION: Navigate to the frontend directory and install project dependencies using pnpm package manager.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-1-checkout-repo.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd frontend\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Running the Next.js UI Project\nDESCRIPTION: This command starts the development server for the Next.js UI project using pnpm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter-crewai-crews/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State in Python for CrewAI Flow\nDESCRIPTION: This snippet shows how to define the state of an agent in Python for a CrewAI Flow. It extends the CopilotKitState class to include a custom 'searches' property.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/generative-ui/agentic.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.crewai import CopilotKitState\n\nclass AgentState(CopilotKitState):\n    searches: list[dict]\n```\n\n----------------------------------------\n\nTITLE: CopilotKit Version Changelog Entry\nDESCRIPTION: Markdown documentation detailing version changes, patches, dependencies and bug fixes for CopilotKit package versions from 1.0.1 through 1.3.15.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/examples/next-openai/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- pass description for array and object action parameters in langchain adapter\n- Updated dependencies\n  - @copilotkit/react-core@1.3.15\n  - @copilotkit/react-textarea@1.3.15\n  - @copilotkit/react-ui@1.3.15\n  - @copilotkit/runtime@1.3.15\n  - @copilotkit/shared@1.3.15\n```\n\n----------------------------------------\n\nTITLE: Implementing Code-driven Stage Transitions in React\nDESCRIPTION: Basic example of transitioning between stages using React useState hook. Shows how to implement simple stage transitions through button clicks.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/cookbook/state-machine.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst [stage, setStage] = useState<string>(\"one\");\n\n// ...\n\n<button onClick={() => setStage(\"two\")}>\n  Transition to next stage\n</button>\n```\n\n----------------------------------------\n\nTITLE: Accessing Frontend Actions in Python Agent\nDESCRIPTION: Example of how to access frontend actions from the copilotkit property in a Python agent's state and bind them to an LLM model.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nasync def agent_node(state: YourAgentState, config: RunnableConfig):\n    # Access the actions from the copilotkit property\n\n    actions = state.get(\"copilotkit\", {}).get(\"actions\", [])\n    model = ChatOpenAI(model=\"gpt-4o\").bind_tools(actions)\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Using setThreadId from useCopilotContext in CopilotKit\nDESCRIPTION: This snippet demonstrates how to use the setThreadId function obtained from the useCopilotContext hook in CopilotKit. It allows changing the threadId directly within a component without passing it as a prop.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/persistence/loading-message-history.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotContext } from \"@copilotkit/react-core\";\n\nconst ChangeThreadButton = () => {\n  const { threadId, setThreadId } = useCopilotContext();\n  return (\n    <Button onClick={() => setThreadId(\"d73c22f3-1f8e-4a93-99db-5c986068d64f\")}>\n      Change Thread\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Labels Configuration in CopilotKit\nDESCRIPTION: Demonstrates how to customize text labels for various UI elements in CopilotKit components\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/customize-built-in-ui-components.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<CopilotChat\n  labels={{\n    initial: \"Hello! How can I help you today?\",\n    title: \"My Copilot\",\n    placeholder: \"Ask me anything!\",\n    stopGenerating: \"Stop\",\n    regenerateResponse: \"Regenerate\",\n  }} \n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Interrupt Logic in TypeScript LangGraph Agent\nDESCRIPTION: Implements interrupt functionality in TypeScript chat node for prompting agent name\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { interrupt } from \"@langchain/langgraph\";\nimport { SystemMessage } from \"@langchain/core/messages\";\nimport { ChatOpenAI } from \"@langchain/openai\";\n\nasync function chat_node(state: AgentState, config: RunnableConfig) {\n    if (!state.agentName) {\n        state.agentName = await interrupt(\"Before we start, what would you like to call me?\");\n    }\n\n    const systemMessage = new SystemMessage({\n        content: `You are a helpful assistant named ${state.agentName}...`,\n    });\n\n    const response = await new ChatOpenAI({ model: \"gpt-4o\" }).invoke(\n        [systemMessage, ...state.messages],\n        config\n    );\n\n    return {\n        ...state,\n        messages: response,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Environment File in Shell\nDESCRIPTION: Command to create a new .env file\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-2-langgraph-agent.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntouch .env\n```\n\n----------------------------------------\n\nTITLE: Running the Next.js UI Project\nDESCRIPTION: Command to start the Next.js development server for the UI.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-ai-researcher/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Nested Component Usage with Parent-Child Relationships\nDESCRIPTION: Shows how to use useCopilotReadable with nested components by utilizing the parentId parameter to maintain hierarchical structure of information.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCopilotReadable.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCopilotReadable } from \"@copilotkit/react-core\";\n\nfunction Employee(props: EmployeeProps) {\n  const { employeeName, workProfile, metadata } = props;\n\n  // propagate any information to copilot\n  const employeeContextId = useCopilotReadable({\n    description: \"Employee name\",\n    value: employeeName\n  });\n\n  // Pass a parentID to maintain a hierarchical structure.\n  // Especially useful with child React components, list elements, etc.\n  useCopilotReadable({\n    description: \"Work profile\",\n    value: workProfile.description(),\n    parentId: employeeContextId\n  });\n\n  useCopilotReadable({\n    description: \"Employee metadata\",\n    value: metadata.description(),\n    parentId: employeeContextId\n  });\n\n  return (\n    // Render as usual...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Workflow with Interrupt Node\nDESCRIPTION: Example showing how to compile a workflow with memory saver and interrupt node configuration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_174\n\nLANGUAGE: python\nCODE:\n```\ngraph = workflow.compile(MemorySaver(), interrupt_after=[\"interrupt_node\"])\n```\n\n----------------------------------------\n\nTITLE: Customizing LangGraph Configuration\nDESCRIPTION: Example showing how to customize LangGraph configuration by disabling message and tool call emissions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/js/LangGraph.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { copilotkitCustomizeConfig } from \"@copilotkit/sdk-js\";\n\nconfig = copilotkitCustomizeConfig(\n  config,\n  emitMessages=false,\n  emitToolCalls=false\n)\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit Dependencies with npm\nDESCRIPTION: Command to install the core CopilotKit library and the textarea component using npm. These packages provide the CopilotKit provider, useful hooks, and a context-aware autocompletion textarea.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-powered-textarea/step-2-setup-copilotkit.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @copilotkit/react-core @copilotkit/react-textarea\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit Packages\nDESCRIPTION: Install the latest CopilotKit packages for the frontend using npm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/quickstart/crewai.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @copilotkit/react-ui @copilotkit/react-core\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAIAdapter with Azure OpenAI\nDESCRIPTION: Example demonstrating Azure OpenAI integration with CopilotKit Runtime. Includes Azure-specific configuration like instance name, model deployment, and API version settings.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/llm-adapters/OpenAIAdapter.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopilotRuntime, OpenAIAdapter } from \"@copilotkit/runtime\";\nimport OpenAI from \"openai\";\n\n// The name of your Azure OpenAI Instance.\n// https://learn.microsoft.com/en-us/azure/cognitive-services/openai/how-to/create-resource?pivots=web-portal#create-a-resource\nconst instance = \"<your instance name>\";\n\n// Corresponds to your Model deployment within your OpenAI resource, e.g. my-gpt35-16k-deployment\n// Navigate to the Azure OpenAI Studio to deploy a model.\nconst model = \"<your model>\";\n\nconst apiKey = process.env[\"AZURE_OPENAI_API_KEY\"];\nif (!apiKey) {\n  throw new Error(\"The AZURE_OPENAI_API_KEY environment variable is missing or empty.\");\n}\n\nconst copilotKit = new CopilotRuntime();\n\nconst openai = new OpenAI({\n  apiKey,\n  baseURL: `https://${instance}.openai.azure.com/openai/deployments/${model}`,\n  defaultQuery: { \"api-version\": \"2024-04-01-preview\" },\n  defaultHeaders: { \"api-key\": apiKey },\n});\n\nreturn new OpenAIAdapter({ openai });\n```\n\n----------------------------------------\n\nTITLE: Configuring Groq Adapter\nDESCRIPTION: Example of initializing the Groq adapter with CopilotKit, including API key configuration\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_140\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopilotRuntime, GroqAdapter } from \"@copilotkit/runtime\";\nimport { Groq } from \"groq-sdk\";\n\nconst groq = new Groq({ apiKey: process.env[\"GROQ_API_KEY\"] });\n\nconst copilotKit = new CopilotRuntime();\n\nreturn new GroqAdapter({ groq, model: \"<model-name>\" });\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit Dependencies\nDESCRIPTION: Command to install the necessary npm packages for using CopilotKit components in a project.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_44\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @copilotkit/react-core @copilotkit/react-textarea\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for the Todo List App\nDESCRIPTION: Installs the required dependencies for the todo list app using npm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-powered-textarea/step-1-checkout-repo.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Development Mode in Bash\nDESCRIPTION: Commands for starting development mode for all packages or a specific package in the CopilotKit monorepo using Turborepo.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/(other)/contributing/code-contributions/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Start all packages in development mode\nturbo run dev\n\n# Start a specific package in development mode\nturbo run dev --filter=\"@copilotkit/package-name\"\n```\n\n----------------------------------------\n\nTITLE: React Component Imports\nDESCRIPTION: Import statements for various React components and icons used throughout the documentation interface.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { BiSolidMessage as TextIcon } from \"react-icons/bi\";\nimport { VscJson as JsonIcon } from \"react-icons/vsc\";\nimport { FaDiscord } from \"react-icons/fa\";\nimport Link from \"next/link\";\nimport { YouTubeVideo } from \"@/components/react/youtube-video\";\nimport { CoAgentsEnterpriseCTA } from \"@/components/react/coagents/coagents-enterprise-cta.tsx\";\nimport {\n  CoAgentsFeatureToggle,\n  CoAgentsFeatureRender,\n} from \"@/components/react/coagents/coagents-features.tsx\";\nimport { DynamicContentWrapper } from \"@/components/react/dynamic-content-wrapper\";\nimport { ExamplesCarousel } from \"@/components/react/examples-carousel\";\nimport {\n  LuPlane,\n  LuBookOpen,\n  LuLightbulb,\n  LuLayoutTemplate,\n  LuBrainCog,\n  LuUserCog,\n  LuWand2,\n  LuPlay,\n  LuMessageSquare,\n  LuWrench,\n} from \"react-icons/lu\";\nimport { CoAgentsExamples } from \"@/components/react/examples-carousel\";\nimport { CTACards } from \"@/components/react/cta-cards\";\nimport { FaSync } from \"react-icons/fa\";\nimport { Socials } from \"@/components/react/socials\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Agent\nDESCRIPTION: Content for the .env file in the agent directory, specifying API keys for OpenAI and Tavily.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-ai-researcher/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=...\nTAVILY_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server with npm/yarn/pnpm/bun - Bash\nDESCRIPTION: This code snippet demonstrates how to start the Next.js development server using different package manager commands: npm, yarn, pnpm, and bun. No dependencies other than the selected package manager and an initialized Next.js project are required. The commands should be executed from the project root and will start a dev server on the default port, enabling live reloading as files are modified.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/langgraph-tutorial-customer-support/ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Initializing AnthropicAdapter with CopilotRuntime in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up and use the AnthropicAdapter with CopilotRuntime. It shows the import statements, creation of a CopilotRuntime instance, initialization of an Anthropic client, and the creation of an AnthropicAdapter instance.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/classes/llm-adapters/AnthropicAdapter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopilotRuntime, AnthropicAdapter } from \"@copilotkit/runtime\";\nimport Anthropic from \"@anthropic-ai/sdk\";\n\nconst copilotKit = new CopilotRuntime();\n\nconst anthropic = new Anthropic({\n  apiKey: \"<your-api-key>\",\n});\n\nreturn new AnthropicAdapter({ anthropic });\n```\n\n----------------------------------------\n\nTITLE: Manually Emitting Messages in CopilotKit\nDESCRIPTION: Example of using copilotkit_emit_message to manually emit a message to CopilotKit during a longer running node.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_81\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_emit_message\n\nmessage = \"Step 1 of 10 complete\"\nawait copilotkit_emit_message(config, message)\n\n# Return the message from the node\nreturn {\n    \"messages\": [AIMessage(content=message)]\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Tool Calls as Streaming LangGraph State in JavaScript\nDESCRIPTION: Demonstrates how to emit tool calls as streaming state in LangGraph by specifying state key, tool name, and optional tool argument.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\nimport { copilotkitCustomizeConfig } from \"@copilotkit/sdk-js\";\n\nconfig = copilotkitCustomizeConfig(\n  config,\n  emitIntermediateState=[\\\n    {\\\n      \"stateKey\": \"steps\",\\\n      \"tool\": \"SearchTool\",\\\n      \"toolArgument\": \"steps\",\\\n    },\\\n  ],\n)\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Launches the development server for the todo list app. This makes the application accessible at http://localhost:3000 for local development and testing.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-todo-app/step-1-checkout-repo.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: React Component Imports\nDESCRIPTION: Import statements for various React components and icons used throughout the application, including UI elements and utility components.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BiSolidMessage as TextIcon } from \"react-icons/bi\";\nimport { VscJson as JsonIcon } from \"react-icons/vsc\";\nimport { FaDiscord } from \"react-icons/fa\";\nimport Link from \"next/link\";\nimport { YouTubeVideo } from \"@/components/react/youtube-video\";\nimport { CoAgentsEnterpriseCTA } from \"@/components/react/coagents/coagents-enterprise-cta.tsx\";\nimport {\n  CoAgentsFeatureToggle,\n  CoAgentsFeatureRender,\n} from \"@/components/react/coagents/coagents-features.tsx\";\nimport { DynamicContentWrapper } from \"@/components/react/dynamic-content-wrapper\";\nimport { ExamplesCarousel } from \"@/components/react/examples-carousel\";\nimport {\n  LuPlane,\n  LuBookOpen,\n  LuLightbulb,\n  LuLayoutTemplate,\n  LuBrainCog,\n  LuUserCog,\n  LuWand2,\n  LuPlay,\n  LuMessageSquare,\n  LuWrench,\n} from \"react-icons/lu\";\nimport { CoAgentsExamples } from \"@/components/react/examples-carousel\";\nimport { CTACards } from \"@/components/react/cta-cards\";\nimport { FaSync } from \"react-icons/fa\";\nimport { Socials } from \"@/components/react/socials\";\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit SDK in Python\nDESCRIPTION: Command to install the CopilotKit SDK using pip.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_76\n\nLANGUAGE: bash\nCODE:\n```\npip install copilotkit\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit packages for React\nDESCRIPTION: Command to install the latest CopilotKit packages for React using npm. This is a prerequisite for setting up CopilotKit in a frontend application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @copilotkit/react-ui @copilotkit/react-core\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Icons\nDESCRIPTION: Import statements for React components, including custom components for tailored content, enterprise CTA, diagrams, and various icons from react-icons and lucide-react libraries.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/quickstart/langgraph.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  TailoredContent,\n  TailoredContentOption,\n} from \"@/components/react/tailored-content.tsx\";\nimport { CoAgentsEnterpriseCTA } from \"@/components/react/coagents/coagents-enterprise-cta.tsx\";\nimport { CoAgentsDiagram } from \"@/components/react/coagents/coagents-diagram.tsx\";\nimport { FaPython, FaJs, FaCloud } from \"react-icons/fa\";\nimport { UserIcon, PaintbrushIcon, WrenchIcon, RepeatIcon, ServerIcon } from \"lucide-react\";\nimport { SiLangchain } from \"react-icons/si\";\n```\n\n----------------------------------------\n\nTITLE: Exiting the Agent Loop in CoAgents\nDESCRIPTION: Example showing how to exit an agent loop in a CoAgent using the copilotkit_exit function, which returns control based on the agent's mode (Router or Agent Lock).\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_197\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import (copilotkit_exit)\n# ...\nasync def send_email_node(state: EmailAgentState, config: RunnableConfig):\n    \"\"\"Send an email.\"\"\"\n\n    await copilotkit_exit(config)\n\n    # get the last message and cast to ToolMessage\n    last_message = cast(ToolMessage, state[\"messages\"][-1])\n    if last_message.content == \"CANCEL\":\n        return {\n            \"messages\": [AIMessage(content=\"❌ Cancelled sending email.\")],\n        }\n    else:\n        return {\n            \"messages\": [AIMessage(content=\"✅ Sent email.\")],\n        }\n```\n\n----------------------------------------\n\nTITLE: Emitting Intermediate State\nDESCRIPTION: Example showing how to emit intermediate state during long-running operations to update users on progress.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/js/LangGraph.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { copilotkitEmitState } from \"@copilotkit/sdk-js\";\n\nfor (let i = 0; i < 10; i++) {\n  await someLongRunningOperation(i);\n  await copilotkitEmitState(config, { progress: i });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State Type\nDESCRIPTION: Example showing how to define agent state types using Python with CopilotKit state management.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_176\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitState\nfrom typing import Literal\n\nclass AgentState(CopilotKitState):\n    language: Literal[\"english\", \"spanish\"] = \"english\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Copilot Runtime Endpoint in Node.js HTTP\nDESCRIPTION: This snippet shows how to set up a simple Node.js HTTP server that uses the Copilot Runtime to handle requests. It creates a CopilotRuntime instance with a langGraphPlatformEndpoint and uses copilotRuntimeNodeHttpEndpoint to handle requests on the /copilotkit route.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-langgraph-endpoint.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http';\nimport {\n  CopilotRuntime,\n  OpenAIAdapter,\n  copilotRuntimeNodeHttpEndpoint,\n  langGraphPlatformEndpoint\n} from '@copilotkit/runtime';\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\nconst serviceAdapter = new OpenAIAdapter({ openai } as any);\n\nconst server = createServer((req, res) => {\n  const runtime = new CopilotRuntime({\n    remoteEndpoints: [\n      langGraphPlatformEndpoint({\n        deploymentUrl: \"your-api-url\", // make sure to replace with your real deployment url\n        langsmithApiKey: process.env.LANGSMITH_API_KEY, // only used in LangGraph Platform deployments\n        agents: [ // List any agents available under \"graphs\" list in your langgraph.json file; give each a description explaining when it should be called.\n          {\n            name: 'my_agent',\n            description: 'A helpful LLM agent.',\n            assistantId: 'your-assistant-ID' // optional, but recommended!\n          }\n        ]\n      }),\n    ],\n  });\n\n  const handler = copilotRuntimeNodeHttpEndpoint({\n    endpoint: '/copilotkit',\n    runtime,\n    serviceAdapter,\n  });\n\n  return handler(req, res);\n});\n\nserver.listen(4000, () => {\n  console.log('Listening at http://localhost:4000/copilotkit');\n});\n```\n\n----------------------------------------\n\nTITLE: CopilotKit Error Handling and Adaptation Improvements\nDESCRIPTION: A patch that improves error handling, introduces a new EmptyLLMAdapter for CoAgents use cases, enhances developer console options, and allows for CopilotKit remote endpoints without agents.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/runtime-client-gql/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- - Better error handling\n  - Introduce new \"EmptyLLMAdapter\" for when using CoAgents\n  - Improve dev console help options\n  - Allow CopilotKit remote endpoint without agents\n```\n\n----------------------------------------\n\nTITLE: CTA Cards Component Implementation in JSX\nDESCRIPTION: React component implementation for displaying call-to-action cards with HITL implementation approaches.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CTACards\n  columns={2}\n  cards={[\n    {\n      icon: Pause,\n      title: \"Interrupt\",\n      description: \"Utilize LangGraph's interrupt function to pause the agent and wait for user input.\",\n      href: \"/coagents/human-in-the-loop/interrupt-flow\"\n    },\n    {\n      icon: Share2,\n      title: \"Node-based\",\n      description: \"Utilize nodes and tools to create LLM driven Human-in-the-Loop workflows.\",\n      href: \"/coagents/human-in-the-loop/node-flow\"\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Properties for CopilotKit Requests\nDESCRIPTION: This JavaScript snippet demonstrates how to set custom properties to be sent with CopilotKit requests. It shows an example of setting a user_id property.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/CopilotKit.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n  'user_id': 'users_id',\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a New Demo in config.ts (TypeScript)\nDESCRIPTION: Provides an example TypeScript object for configuring a new demo within the `src/demos/config.ts` file. It includes fields for `id` (matching the folder name), `name`, `description`, `path`, `tags` for categorization, and the `defaultLLMProvider`.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/demo-viewer/README.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: \"your-demo-name\", // Must match the folder name in agents/demo\n  name: \"Your Demo Name\",\n  description: \"A brief description of what your demo does\",\n  path: \"agents/demo/your-demo-name\",\n  tags: [\"tag1\", \"tag2\"], // Relevant tags for categorization\n  defaultLLMProvider: \"openai\" // Default LLM provider for this demo\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up API Keys in .env File\nDESCRIPTION: Example of how to add OpenAI and LangSmith API keys to the .env file.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/quickstart/langgraph.mdx#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=your_openai_api_key\nLANGSMITH_API_KEY=your_langsmith_api_key\n```\n\n----------------------------------------\n\nTITLE: Disabling Message Streaming in CopilotKit LangGraph Agent (Python)\nDESCRIPTION: This Python code snippet demonstrates how to disable message streaming in a CopilotKit LangGraph agent. It shows how to configure CopilotKit not to emit messages and how to call the model without returning the new response to hide it from the user.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/troubleshooting/common-issues.mdx#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_customize_config\n\nasync def chat_node(state: AgentState, config: RunnableConfig):\n    # 1) Configure CopilotKit not to emit messages\n    modifiedConfig = copilotkit_customize_config(\n        config,\n        emit_messages=False, # if you want to disable message streaming\n    )\n\n    # 2) Call the model with CopilotKit's modified config\n    model = ChatOpenAI(model=\"gpt-4o\")\n    response = await model.ainvoke(state[\"messages\"], modifiedConfig) \n\n    # 3) Don't return the new response to hide it from the user\n    return state\n```\n\n----------------------------------------\n\nTITLE: Testing Local Server URL Alternatives\nDESCRIPTION: Shows two alternative URLs for accessing a local development server when experiencing connection issues, switching from localhost to the numeric IP address to resolve DNS resolution problems.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/troubleshooting/common-issues.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# If this doesn't work:\nhttp://localhost:3000/api/copilotkit\n\n# Try this instead:\nhttp://127.0.0.1:3000/api/copilotkit\n```\n\n----------------------------------------\n\nTITLE: Starting the NextJS Development Server\nDESCRIPTION: Command to start the NextJS development server for the travel app project.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-1-checkout-repo.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Version History Markdown\nDESCRIPTION: Changelog entries documenting version updates, patches, and changes made to the @copilotkit/sdk-js package and its dependencies.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/sdk-js/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @copilotkit/sdk-js\n\n## 1.8.7\n\n### Patch Changes\n\n- @copilotkit/shared@1.8.7\n\n## 1.8.7-next.0\n\n### Patch Changes\n\n- @copilotkit/shared@1.8.7-next.0\n\n## 1.8.6\n\n### Patch Changes\n\n- 7a04bd1: - fix: fix how results are communicated back on interrupt\n  - fix: do not allow followup for interrupt actions\n  - chore: improve TS docs for interrupt\n  - @copilotkit/shared@1.8.6\n```\n\n----------------------------------------\n\nTITLE: Disabling State Streaming in CopilotKit with Python\nDESCRIPTION: Shows how to disable message and tool call streaming in CopilotKit using a custom RunnableConfig in a Python implementation.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_116\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_customize_config\n\nasync def frontend_actions_node(state: AgentState, config: RunnableConfig):\n\n    # 1) Configure CopilotKit not to emit messages\n    modifiedConfig = copilotkit_customize_config(\n        config,\n        emit_messages=False, # if you want to disable message streaming\n        emit_tool_calls=False # if you want to disable tool call streaming\n    )\n\n    # 2) Provide the actions to the LLM\n    model = ChatOpenAI(model=\"gpt-4o\").bind_tools([\\\n      *state[\"copilotkit\"][\"actions\"],\\\n      # ... any tools you want to make available to the model\\\n    ])\n\n    # 3) Call the model with CopilotKit's modified config\n    response = await model.ainvoke(state[\"messages\"], modifiedConfig)\n\n    # don't return the new response to hide it from the user\n    return state\n```\n\n----------------------------------------\n\nTITLE: Customizing LangGraph Configuration\nDESCRIPTION: Example showing how to disable message and tool call emissions in LangGraph configuration using copilotkit_customize_config.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/LangGraph.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_customize_config\n\nconfig = copilotkit_customize_config(\n    config,\n    emit_messages=False,\n    emit_tool_calls=False\n)\n```\n\n----------------------------------------\n\nTITLE: Tunnel Connection Testing Commands\nDESCRIPTION: Commands for testing connectivity to CopilotKit's tunnel service when experiencing connection issues.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/troubleshooting/common-issues.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nping tunnels.devcopilotkit.com\ncurl -I https://tunnels.devcopilotkit.com\ntelnet tunnels.devcopilotkit.com 443\n```\n\n----------------------------------------\n\nTITLE: Locking Agent in CopilotKit Provider\nDESCRIPTION: Configuring the CopilotKit provider to lock all requests to a specific agent.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-4-integrate-the-agent.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<CopilotKit\n  // ...\n  agent=\"travel\"\n>\n  {...}\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit Dependencies\nDESCRIPTION: Commands for installing the required CopilotKit packages using pnpm package manager.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-3-setup-copilotkit.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @copilotkit/react-core @copilotkit/react-ui\n```\n\n----------------------------------------\n\nTITLE: Setting Up UI Environment Variables\nDESCRIPTION: Content for the .env file in the UI directory, including the OpenAI API key.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa-native/README.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Implementing LangChain Adapter with OpenAI Integration\nDESCRIPTION: Creates a LangChain adapter function that initializes ChatOpenAI model with GPT-4, configures tools, and sets up streaming with conversation tracking metadata.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/(other)/observability/langsmith.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { LangChainAdapter } = await import(\"@copilotkit/runtime\");\nconst { ChatOpenAI } = await import(\"@langchain/openai\");\n\nasync function getLangChainOpenAIAdapter() {\n  return new LangChainAdapter({\n    chainFn: async ({ messages, tools, threadId }) => {\n      const model = new ChatOpenAI({\n        modelName: \"gpt-4-1106-preview\",\n      }).bindTools(tools, {\n        strict: true,\n      });\n      return model.stream(messages, {\n        tools,\n        metadata: { conversation_id: threadId },\n      });\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Linking CopilotKit Packages to Your Project\nDESCRIPTION: This command links a specific CopilotKit package (in this example, react-core) from the global registry to your project, allowing you to use your local development version.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/(other)/contributing/code-contributions/package-linking.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# For example, to link the @copilotkit/react-core package:\npnpm link --global @copilotkit/react-core\n```\n\n----------------------------------------\n\nTITLE: HTML Banner and Links Structure\nDESCRIPTION: HTML markup for the project banner, badges, and navigation links using centered div elements and external links\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/shared/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div align=\"center\">\n  <a href=\"https://copilotkit.ai\" target=\"_blank\">\n    <img src=\"https://github.com/copilotkit/copilotkit/raw/main/assets/banner.png\" alt=\"CopilotKit Logo\">\n  </a>\n\n  <br/>\n\n  <strong>\n    CopilotKit is the open-source framework for integrating powerful AI Copilots into any application. Easily implement custom AI Chatbots, AI Agents, AI Textareas, and more.\n  </strong>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Documentation Site Locally\nDESCRIPTION: Commands to install dependencies and start the documentation site in development mode using pnpm, allowing contributors to preview their changes before submitting them.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_168\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running the Agent Demo\nDESCRIPTION: Command to run the agent demo using Poetry.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npoetry run demo\n```\n\n----------------------------------------\n\nTITLE: Using Chat Suggestions with Dependency Management\nDESCRIPTION: Demonstrates how to use useCopilotChatSuggestions with dependency tracking to update suggestions based on changes in application state.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_49\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCopilotChatSuggestions } from \"@copilotkit/react-ui\";\n\nexport function MyComponent() {\n  useCopilotChatSuggestions(\n    {\n      instructions: \"Suggest the most relevant next actions.\",\n    },\n    [appState],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing the Finance AI Repository\nDESCRIPTION: Commands to clone the GitHub repository and install dependencies for the AI-powered financial manager application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/community/demos_2025/finance_ai.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Tabintel/ai-savings.git\ncd ai-savings\n```\n\n----------------------------------------\n\nTITLE: Installing UI Dependencies with pnpm\nDESCRIPTION: Commands to navigate to the UI directory and install dependencies using pnpm package manager.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-shared-state/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd ./ui\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Opening Tunnel for Local LangGraph Studio Deployment\nDESCRIPTION: This command opens a tunnel to a local LangGraph Studio deployment, allowing it to be accessed by CopilotKit. The user needs to specify the port number of their local deployment.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/copilot-cloud-configure-remote-endpoint-langgraph.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx copilotkit@latest dev --port <port_number>\n```\n\n----------------------------------------\n\nTITLE: Running Python Agent Demo\nDESCRIPTION: Command to run the Python agent demo using Poetry.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-research-canvas/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npoetry run demo\n```\n\n----------------------------------------\n\nTITLE: Customizing LangGraph Configuration in CopilotKit\nDESCRIPTION: Example of using copilotkit_customize_config to disable emitting messages and tool calls in the LangGraph configuration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_77\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_customize_config\n\nconfig = copilotkit_customize_config(\n    config,\n    emit_messages=False,\n    emit_tool_calls=False\n)\n```\n\n----------------------------------------\n\nTITLE: Emitting Tool Calls Manually\nDESCRIPTION: Example showing how to manually emit tool calls with specific name and arguments.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/js/LangGraph.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { copilotkitEmitToolCall } from \"@copilotkit/sdk-js\";\n\nawait copilotkitEmitToolCall(config, name=\"SearchTool\", args={\"steps\": 10})\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit React UI Dependencies\nDESCRIPTION: Command to install the necessary dependencies for using the CopilotPopup component from the @copilotkit/react-ui package.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/chat/CopilotPopup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @copilotkit/react-core @copilotkit/react-ui\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for CopilotKit Project\nDESCRIPTION: Command to run the development server using npm. This will start the application for local development and testing.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-fully-custom/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Building All Packages with Turborepo in Bash\nDESCRIPTION: Command to build all packages in the CopilotKit monorepo using Turborepo build system.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/(other)/contributing/code-contributions/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nturbo run build\n```\n\n----------------------------------------\n\nTITLE: Importing React Icons and Custom Components\nDESCRIPTION: This code block imports various React icons and custom components used throughout the documentation page.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/quickstart/crewai.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CoAgentsEnterpriseCTA } from \"@/components/react/coagents/coagents-enterprise-cta.tsx\";\nimport { CoAgentsDiagram } from \"@/components/react/coagents/coagents-diagram.tsx\";\nimport { FaPython, FaJs, FaCloud } from \"react-icons/fa\";\nimport SelfHostingCopilotRuntimeCreateEndpoint from \"@/snippets/self-hosting-copilot-runtime-create-endpoint.mdx\";\nimport CopilotCloudConfigureRemoteEndpointLangGraph from \"@/snippets/copilot-cloud-configure-remote-endpoint-langgraph.mdx\";\nimport CopilotKitCloudCopilotKitProvider from \"@/snippets/copilot-cloud-configure-copilotkit-provider.mdx\";\nimport LangGraphPlatformDeploymentTabs from \"@/snippets/langgraph-platform-deployment-tabs.mdx\";\nimport { Accordions, Accordion } from \"fumadocs-ui/components/accordion\";\nimport FindYourCopilotRuntime from \"@/snippets/find-your-copilot-runtime.mdx\";\nimport CloudCopilotKitProvider from \"@/snippets/coagents/cloud-configure-copilotkit-provider.mdx\";\nimport SelfHostingCopilotRuntimeConfigureCopilotKitProvider from \"@/snippets/coagents/self-host-configure-copilotkit-provider.mdx\";\nimport SelfHostingCopilotRuntimeLangGraphEndpoint from \"@/snippets/self-hosting-copilot-runtime-langgraph-endpoint.mdx\";\nimport SelfHostingCopilotRuntimeStarter from \"@/snippets/self-hosting-copilot-runtime-starter.mdx\";\nimport SelfHostingRemoteEndpoints from \"@/snippets/self-hosting-remote-endpoints.mdx\";\nimport {\n  UserIcon,\n  PaintbrushIcon,\n  WrenchIcon,\n  RepeatIcon,\n  ServerIcon,\n} from \"lucide-react\";\nimport { SiCrewai } from \"@icons-pack/react-simple-icons\";\nimport CopilotUI from \"@/snippets/copilot-ui.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Starting LangGraph Agent with CLI (TypeScript)\nDESCRIPTION: Command to start a local development server and LangGraph studio session using the LangGraph CLI for TypeScript.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\nnpx @langchain/langgraph-cli dev --host localhost --port 8000\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Form-Filling Copilot Project\nDESCRIPTION: Commands for cloning the repository and installing dependencies using pnpm. Alternative commands for yarn and npm are also provided.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-form-filling/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/CopilotKit/CopilotKit.git\ncd CopilotKit/examples/copilot-form-filling\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Environment Variables\nDESCRIPTION: Content for the .env file in the UI directory, specifying the OpenAI API key.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-routing/README.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Cloning the CopilotKit Repository (Bash)\nDESCRIPTION: Command to clone the forked CopilotKit repository to the local machine. This is the first step in setting up the development environment for contributing to the project.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your-GitHub-username>/CopilotKit\n```\n\n----------------------------------------\n\nTITLE: Starting Frontend Development Server with pnpm (Bash)\nDESCRIPTION: This Bash snippet demonstrates initializing the frontend for the Crew Enterprise Demo. It navigates to the 'ui' directory, copies an example '.env' file for environment configuration, prompts the user to edit API keys, and installs dependencies using pnpm before running the development server. Prerequisites include pnpm installed on the system and access to Copilot Cloud Public API Key. Inputs are the commands themselves, and the process results in a running local development server configured for the demo.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/demo-viewer/agent/demo/crewai_crew_enterprise/restaurant_finder_crew/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> cd ui\\n> cp .env.example .env  # Copy the example env file\\n> # Edit the .env file with your Copilot Cloud Public API Key\\n> pnpm install\\n> pnpm run dev\\n\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit SDK with Poetry\nDESCRIPTION: Demonstrates how to install the CopilotKit SDK using Poetry package manager, with optional support for CrewAI.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_146\n\nLANGUAGE: bash\nCODE:\n```\npoetry add copilotkit\n# including support for crewai\npoetry add copilotkit[crewai]\n```\n\n----------------------------------------\n\nTITLE: Emitting Messages\nDESCRIPTION: Example showing how to manually emit messages to CopilotKit during node execution.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/LangGraph.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_emit_message\n\nmessage = \"Step 1 of 10 complete\"\nawait copilotkit_emit_message(config, message)\n\n# Return the message from the node\nreturn {\n    \"messages\": [AIMessage(content=message)]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding API Keys to .env\nDESCRIPTION: Add the OpenAI API key to the .env file for authentication.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/quickstart/crewai.mdx#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=your_openai_api_key\n```\n\n----------------------------------------\n\nTITLE: Disabling State Streaming in TypeScript using CopilotKit\nDESCRIPTION: TypeScript implementation for disabling message and tool call streaming using copilotkitCustomizeConfig. Demonstrates integration with ChatOpenAI and tool binding while preventing frontend streaming.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/advanced/disabling-state-streaming.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { copilotkitCustomizeConfig } from '@copilotkit/sdk-js/langgraph';\n\nasync function frontendActionsNode(state: AgentState, config: RunnableConfig): Promise<AgentState> {\n    // 1) Configure CopilotKit not to emit messages\n    const modifiedConfig = copilotkitCustomizeConfig(config, {\n        emitMessages: false, // if you want to disable message streaming\n        emitToolCalls: false, // if you want to disable tool call streaming\n    });\n\n    // 2) Provide the actions to the LLM\n    const model = new ChatOpenAI({ temperature: 0, model: \"gpt-4o\" });\n    const modelWithTools = model.bindTools!([\n        ...convertActionsToDynamicStructuredTools(state.copilotkit?.actions || []),\n        ...tools,\n    ]);\n\n    // 3) Call the model with CopilotKit's modified config\n    const response = await modelWithTools.invoke(state.messages, modifiedConfig);\n\n    // don't return the new response to hide it from the user\n    return state;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit SDK with Poetry\nDESCRIPTION: Commands for installing CopilotKit SDK using Poetry package manager, including optional CrewAI support.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_171\n\nLANGUAGE: bash\nCODE:\n```\npoetry add copilotkit\n# including support for crewai\npoetry add copilotkit[crewai]\n```\n\n----------------------------------------\n\nTITLE: Installing UI Dependencies with pnpm\nDESCRIPTION: Commands to navigate to the UI directory and install dependencies using pnpm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-routing/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd ./ui\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm (Bash)\nDESCRIPTION: Command to install project dependencies using pnpm package manager. This step is crucial for setting up the development environment after cloning the repository.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key for Agent - Environment Variable\nDESCRIPTION: Specifies the 'OPENAI_API_KEY' for authenticating requests to the OpenAI API for the agent. This should be placed in a '.env' file in the 'agent' directory. The key must support gpt-4o for compatibility. Only one parameter (OPENAI_API_KEY) is used; value must be replaced with a valid key.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa-text/README.md#2025-04-23_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nOPENAI_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State in Python\nDESCRIPTION: Shows how to define the agent state class by extending CopilotKitState, with an observed_steps field to track the agent's progress.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_147\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitState\nfrom typing import Literal\n\nclass AgentState(CopilotKitState):\n    observed_steps: list[str]  # Array of completed steps\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in React Component\nDESCRIPTION: This code snippet shows how to import and use a custom YouTubeVideo component in a React application. It sets the video ID and default playback rate for the embedded YouTube video.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/videos/research-canvas.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { YouTubeVideo } from \"@/components/react/youtube-video\";\n\n<YouTubeVideo videoId=\"0b6BVqPwqA0\" defaultPlaybackRate={1.25} />\n```\n\n----------------------------------------\n\nTITLE: Running the Agent Demo\nDESCRIPTION: Command to run the demo using Poetry.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-ai-researcher/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npoetry run demo\n```\n\n----------------------------------------\n\nTITLE: Defining CopilotKitConfig Function Signatures for LangGraphAgent\nDESCRIPTION: Function signatures for the merge_state and convert_messages methods used in CopilotKitConfig for LangGraphAgent. These functions customize the interaction between CopilotKit and LangGraph.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_112\n\nLANGUAGE: python\nCODE:\n```\n# Function signatures:\ndef merge_state(\n    *,\n    state: dict,\n    messages: List[BaseMessage],\n    actions: List[Any],\n    agent_name: str\n):\n    # ...implementation...\n\ndef convert_messages(messages: List[Message]):\n    # ...implementation...\n```\n\n----------------------------------------\n\nTITLE: Authenticating Copilot Cloud CLI\nDESCRIPTION: Command to authenticate the Copilot Cloud CLI for connecting a remote endpoint to a LangGraph agent.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx copilotkit@latest login\n```\n\n----------------------------------------\n\nTITLE: Structured Version Changelog Entry in Markdown\nDESCRIPTION: A markdown entry documenting patch changes and dependency updates for version 1.4.6 of the CopilotKit node package.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/examples/node-http/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.4.6\n\n### Patch Changes\n\n- .\n- Updated dependencies\n  - @copilotkit/runtime@1.4.6\n  - @copilotkit/shared@1.4.6\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript SDK Dependencies\nDESCRIPTION: Command to install the backend dependencies for the JavaScript SDK using pnpm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-research-canvas/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd agent-js\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Keyboard Command Shortcut\nDESCRIPTION: Keyboard shortcut for searching the documentation using Command+K\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_0\n\nLANGUAGE: keyboard-shortcut\nCODE:\n```\n⌘  K\n```\n\n----------------------------------------\n\nTITLE: Configuring CopilotRuntime for Local LangGraph Studio Deployment in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up CopilotRuntime with a local LangGraph Studio deployment. It uses the langGraphPlatformEndpoint function to configure the runtime with a deployment URL, LangSmith API key, and agent definitions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-remote-endpoints.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  CopilotRuntime,\n  langGraphPlatformEndpoint  // [!code highlight]\n  // ...\n} from \"@copilotkit/runtime\";\n// ...\nconst runtime = new CopilotRuntime({\n  remoteEndpoints: [\n    // [!code highlight:12]\n    langGraphPlatformEndpoint({\n      deploymentUrl: \"your-api-url\", // make sure to replace with your real deployment url,\n      langsmithApiKey: process.env.LANGSMITH_API_KEY, // only used in LangGraph Platform deployments\n      agents: [ // List any agents available under \"graphs\" list in your langgraph.json file; give each a description explaining when it should be called.\n        {\n          name: 'sample_agent', \n          description: 'A helpful LLM agent.',\n          assistantId: 'your-assistant-ID' // optional, but recommended!\n        }\n      ]\n    }),\n  ],\n});\n// ...\n```\n\n----------------------------------------\n\nTITLE: Adding Breakpoint to LangGraph Agent\nDESCRIPTION: Modifies the graph compilation to add a breakpoint at the trips_node, forcing the agent to pause for human approval.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-6-human-in-the-loop.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngraph = graph_builder.compile(\n    checkpointer=MemorySaver(),\n    interrupt_after=[\"trips_node\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Agent Environment Variables\nDESCRIPTION: Content for the .env file in the agent directory, including the OpenAI API key.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa-native/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Environment Variables\nDESCRIPTION: Contents of the .env file for the agent, specifying the OpenAI API key.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Streaming in CopilotKit\nDESCRIPTION: Example of how to customize the LangGraph config to disable message streaming using copilotkit_customize_config function.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_103\n\nLANGUAGE: python\nCODE:\n```\nconfig = copilotkit_customize_config(\n    config,\n    # True or False\n    emit_messages=False,\n)\n```\n\n----------------------------------------\n\nTITLE: Navigating to Agent Directory\nDESCRIPTION: Command to change directory to the agent folder containing the LangGraph implementation.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-2-langgraph-agent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/coagents-travel/agent\n```\n\n----------------------------------------\n\nTITLE: Starting LangGraph Agent with LangGraph CLI\nDESCRIPTION: Commands to start a LangGraph development server and studio session using the LangGraph CLI for both Python and TypeScript environments.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# For Python 3.11 or above\nlanggraph dev --host localhost --port 8000\n```\n\nLANGUAGE: bash\nCODE:\n```\n# For TypeScript with Node 18 or above\nnpx @langchain/langgraph-cli dev --host localhost --port 8000\n```\n\n----------------------------------------\n\nTITLE: Building Packages with Turborepo (Bash)\nDESCRIPTION: Command to build all packages in the project using Turborepo. This ensures that everything works correctly before making any changes.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nturbo run build\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video Component in JSX\nDESCRIPTION: React component implementation for embedding a YouTube video demonstration of the Perplexity clone with custom playback rate settings.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/videos/perplexity-clone.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<YouTubeVideo videoId=\"HvzmwwDF4aM\" defaultPlaybackRate={1.25} />\n```\n\n----------------------------------------\n\nTITLE: HTML Animated Banner Display\nDESCRIPTION: HTML markup for displaying an animated banner image with centered alignment and rounded corners\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/shared/README.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div align=\"center\">\n  <img src=\"https://github.com/CopilotKit/CopilotKit/raw/main/assets/animated-banner.gif\" alt=\"CopilotKit Screenshot\" style=\"border-radius: 15px;\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Testing CopilotKit Info Endpoint with cURL\nDESCRIPTION: Command to test the CopilotKit info endpoint directly using cURL, which helps diagnose if the backend is properly configured and responding. This endpoint should return information about configured agents and actions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/troubleshooting/common-issues.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -d '{}' http://localhost:8000/copilotkit/info\n```\n\n----------------------------------------\n\nTITLE: useCoAgent Hook Return Properties\nDESCRIPTION: Shows the structure of properties returned by the useCoAgent hook, including state management and control functions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/hooks/useCoAgent.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst {\n  name,     // The name of the agent currently being used.\n  nodeName, // The name of the current LangGraph node.\n  state,    // The current state of the agent.\n  setState, // A function to update the state of the agent.\n  running,  // A boolean indicating if the agent is currently running.\n  start,    // A function to start the agent.\n  stop,     // A function to stop the agent.\n  run,      // A function to re-run the agent. Takes a HintFunction to inform the agent why it is being re-run.\n} = agent;\n```\n\n----------------------------------------\n\nTITLE: Linking CopilotKit Packages Globally in the Monorepo\nDESCRIPTION: This command links all CopilotKit packages globally using pnpm, making them available for other projects to reference.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/(other)/contributing/code-contributions/package-linking.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nturbo run link:global\n```\n\n----------------------------------------\n\nTITLE: Frontend Interrupt Handler Implementation in React\nDESCRIPTION: Implements frontend handling of LangGraph interrupts using the useLangGraphInterrupt hook\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/interrupt-flow.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLangGraphInterrupt } from \"@copilotkit/react-core\";\n\nconst YourMainContent = () => {\n    useLangGraphInterrupt({\n        render: ({ event, resolve }) => (\n            <div>\n                <p>{event.value}</p>\n                <form onSubmit={(e) => {\n                    e.preventDefault();\n                    resolve((e.target as HTMLFormElement).response.value);\n                }}>\n                    <input type=\"text\" name=\"response\" placeholder=\"Enter your response\" />\n                    <button type=\"submit\">Submit</button>\n                </form>\n            </div>\n        )\n    });\n\n    return <div>{/* ... */}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with conda\nDESCRIPTION: Commands for creating a new conda environment and installing required dependencies.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions/remote-backend-endpoint.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n your_env_name python=3.8\nconda activate your_env_name\nconda install copilotkit fastapi uvicorn -c copilotkit-channel\n```\n\n----------------------------------------\n\nTITLE: Running Development Mode (JSX)\nDESCRIPTION: Commands to start all packages or a specific package in development mode using Turborepo. This allows contributors to work on and test their changes.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n# To start all packages in development mode\nturbo run dev\n \n# Start a specific package in development mode\nturbo run dev --filter=\"@copilotkit/package-name\"\n```\n\n----------------------------------------\n\nTITLE: Removing Messages from Chat History in LangGraph\nDESCRIPTION: A code snippet demonstrating how to remove all messages from the chat history in a LangGraph agent using the RemoveMessage class.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_194\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_core.messages import RemoveMessage\n\ndef a_node(state: AgentState, config):\n    # ...\n    return {\"messages\":  [RemoveMessage(id=m.id) for m in state['messages']]}\n```\n\n----------------------------------------\n\nTITLE: Running Linting in Bash\nDESCRIPTION: Command to run linting across all packages in the CopilotKit monorepo to ensure code quality standards.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/(other)/contributing/code-contributions/index.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nturbo run lint\n```\n\n----------------------------------------\n\nTITLE: Beta Release 1.0.0-beta.2 Entry\nDESCRIPTION: Details changes in beta.2 release focusing on runtime URL versioning.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/runtime-client-gql/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0-beta.2\n\n### Patch Changes\n\n- Set default Copilot Cloud runtime URL to versioned URL (v1)\n- Updated dependencies\n  - @copilotkit/runtime@1.0.0-beta.2\n  - @copilotkit/shared@1.0.0-beta.2\n```\n\n----------------------------------------\n\nTITLE: Setting up UI Environment Variables\nDESCRIPTION: Contents of the .env file for the UI component. It includes the OpenAI API key, which is necessary for the UI's functionality.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-shared-state/README.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Running Example Applications in Bash\nDESCRIPTION: Commands to run example applications with environment variables for testing CopilotKit changes in real-time.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/(other)/contributing/code-contributions/index.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/next-openai\nexport OPENAI_API_KEY=<your-openai-api-key>\npnpm run example-dev\n```\n\n----------------------------------------\n\nTITLE: Version 1.5.15 Multiple Feature Updates\nDESCRIPTION: Added interrupt support functionality including LangGraph interrupt, multiple interrupts handling, and interrupt as messages feature\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/runtime-client-gql/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- 0dc0f43: - fix(runtime-client-gql): call controller.close() after suppressing abort errors\n- 06f9f35: - feat(interrupt): add copilotkit interrupt as messages with copilotkit interrupt convenience fn\n- 7b3141d: - feat(interrupt): support LG interrupt with useLangGraphInterrupt hook\n  - chore(interrupt): add e2e test to interrupt functionality\n  - feat(interrupt): add support for multiple interrupts and conditions\n- 0bbb4ab: - fix: allow abort errors to pass further down to handler\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch (Bash)\nDESCRIPTION: Command to create a new branch for implementing changes. The branch naming convention is explained, with examples for different types of contributions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <new-branch-name-here>\n```\n\n----------------------------------------\n\nTITLE: Emitting Intermediate State in Search Node\nDESCRIPTION: Implementation of state emission in the search_node function. This code updates the search progress and emits the state at various points during the search process, providing real-time updates.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-5-stream-progress.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def search_node(state: AgentState, config: RunnableConfig):\n    # ... previous code ...\n\n    state[\"search_progress\"] = state.get(\"search_progress\", [])\n    queries = ai_message.tool_calls[0][\"args\"][\"queries\"]\n\n    for query in queries:\n        state[\"search_progress\"].append({\n            \"query\": query,\n            \"results\": [],\n            \"done\": False\n        })\n\n    await copilotkit_emit_state(config, state)\n\n    places = []\n    for i, query in enumerate(queries):\n        response = gmaps.places(query)\n        for result in response.get(\"results\", []):\n            place = {\n                \"id\": result.get(\"place_id\", f\"{result.get('name', '')}-{i}\"),\n                \"name\": result.get(\"name\", \"\"),\n                \"address\": result.get(\"formatted_address\", \"\"),\n                \"latitude\": result.get(\"geometry\", {}).get(\"location\", {}).get(\"lat\", 0),\n                \"longitude\": result.get(\"geometry\", {}).get(\"location\", {}).get(\"lng\", 0),\n                \"rating\": result.get(\"rating\", 0),\n            }\n            places.append(place)\n        state[\"search_progress\"][i][\"done\"] = True\n        await copilotkit_emit_state(config, state)\n\n    state[\"search_progress\"] = []\n    await copilotkit_emit_state(config, state)\n```\n\n----------------------------------------\n\nTITLE: Implementing CopilotPopup in React\nDESCRIPTION: Code snippet demonstrating how to implement the CopilotPopup component in a React application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CopilotPopup } from \"@copilotkit/react-ui\";\n\nexport function YourApp() {\n  return (\n    <>\n      <YourMainContent />\n      <CopilotPopup\n        instructions={\"You are assisting the user as best as you can. Answer in the best way possible given the data you have.\"}\n        labels={{\n          title: \"Popup Assistant\",\n          initial: \"Need any help?\",\n        }}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling AI Response in TypeScript StateGraph\nDESCRIPTION: This snippet handles the AI's response in the state graph. If there was no tool call, it updates the message state and ends the graph.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/node-flow.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nreturn new Command({\n  goto: END,\n  update: {\n    messages: [response],\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration File\nDESCRIPTION: Command to create a new environment file from the example template.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/community/demos_2025/finance_ai.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Using Configurables in Agent Node (Python)\nDESCRIPTION: This Python code snippet shows how to access the configurable properties, specifically the authToken, within an agent node function. It demonstrates extracting the authToken from the config argument.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/advanced/adding-runtime-configuration.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def agent_node(state: AgentState, config: RunnableConfig):\n    \n    auth_token = config['configurable'].get('authToken', None)\n\n    return state\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State in Python\nDESCRIPTION: Implementation of an AgentState class using CopilotKitState with a chat node function that handles language state management.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/in-app-agent-read.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitState\nfrom typing import Literal\n\nclass AgentState(CopilotKitState):\n    language: Literal[\"english\", \"spanish\"] = \"spanish\"\n\ndef chat_node(state: AgentState, config: RunnableConfig):\n  # If language is not defined, set a value.\n  # this is because a default value in a state class is not read on runtime\n  language = state.get(\"language\", \"spanish\")\n\n  # ... add the rest of the node implementation and use the language variable\n\n  return {\n    # ... add the rest of state to return\n    # return the language to make it available for the next nodes & frontend to read\n    \"language\": language\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in Debug Mode - Bash\nDESCRIPTION: Runs Playwright tests in debug mode (step-by-step execution with the browser visible) using a custom npm script 'test:debug'. Useful for investigating test failures interactively. Ensures scripts are properly defined in package.json.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/e2e/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:debug\n```\n\n----------------------------------------\n\nTITLE: Opening Tunnel to Local LangGraph Agent\nDESCRIPTION: Command to open a tunnel to a locally running LangGraph agent for Copilot Cloud connectivity.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\nnpx copilotkit@latest dev --port 8000\n```\n\n----------------------------------------\n\nTITLE: Creating Environment File for Frontend\nDESCRIPTION: Shell command to create a .env file in the frontend directory for storing environment variables, specifically the Copilot Cloud API key.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-3-setup-copilotkit.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntouch frontend/.env\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote Repository (Bash)\nDESCRIPTION: Command to push the committed changes to the remote repository on GitHub. This is the final step before creating a pull request for the contribution.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin <branch-name-here>\n```\n\n----------------------------------------\n\nTITLE: Beta Release 1.0.0-beta.0 Entry\nDESCRIPTION: Details major changes in the initial beta release including new protocol implementation, Copilot Cloud support, and API features.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/runtime-client-gql/CHANGELOG.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0-beta.0\n\n### Major Changes\n\n- V1.0 Release Candidate\n\n  - A robust new protocol between the frontend and the Copilot Runtime\n  - Support for Copilot Cloud\n  - Generative UI\n  - Support for LangChain universal tool calling\n  - OpenAI assistant API streaming\n\n### Patch Changes\n\n- Updated dependencies\n  - @copilotkit/runtime@1.0.0-beta.0\n  - @copilotkit/shared@1.0.0-beta.0\n```\n\n----------------------------------------\n\nTITLE: Disabling Message Streaming in CopilotKit LangGraph Agent (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows how to disable message streaming in a CopilotKit LangGraph agent. It demonstrates configuring CopilotKit not to emit messages and calling the model without returning the new response to hide it from the user.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/troubleshooting/common-issues.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { copilotkitCustomizeConfig } from '@copilotkit/sdk-js/langgraph';\n\nasync function chatNode(state: AgentState, config: RunnableConfig): Promise<AgentState> {\n    // 1) Configure CopilotKit not to emit messages\n    const modifiedConfig = copilotkitCustomizeConfig(config, {\n        emitMessages: false, // if you want to disable message streaming\n    });\n\n    // 2) Call the model with CopilotKit's modified config\n    const model = new ChatOpenAI({ temperature: 0, model: \"gpt-4o\" });\n    const response = await model.invoke(state.messages, modifiedConfig);\n\n    // 3) Don't return the new response to hide it from the user\n    return state;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing the Project\nDESCRIPTION: Commands for cloning the repository and installing dependencies using pnpm, yarn, or npm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-chat-with-your-data/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/CopilotKit/CopilotKit.git\ncd CopilotKit/examples/copilot-chat-with-your-data\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Version 1.8.7 Patch Changes\nDESCRIPTION: Added image input support with multi-model compatibility, pasting capabilities and UX improvements\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/runtime-client-gql/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- 8b8474f: - feat: add image input support with multi-model compatibility, pasting, and UX improvements\n  - @copilotkit/shared@1.8.7\n```\n\n----------------------------------------\n\nTITLE: Rendering Simple String Messages in Copilot Chat\nDESCRIPTION: Shows how to return simple string messages from the render method for quick status updates or notifications. This approach is useful for displaying processing states and simple feedback to the user.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/generative-ui.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\" // only necessary if you are using Next.js with the App Router. \nimport { useCopilotAction } from \"@copilotkit/react-core\"; \n\nuseCopilotAction({ \n  name: \"simpleAction\",\n  description: \"A simple action with string rendering\",\n  parameters: [\n    {\n      name: \"taskName\",\n      type: \"string\",\n      description: \"Name of the task\",\n      required: true,\n    },\n  ],\n  handler: async ({ taskName }) => {\n    return await longRunningOperation(taskName);\n  },\n  render: ({ status, result }) => {\n    return status === \"complete\" ? result : \"Processing...\";\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Weather Tool in Python Agent\nDESCRIPTION: Creates a weather tool using the LangChain tool decorator and binds it to an OpenAI model. The tool accepts a location parameter and returns a simulated weather response.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/generative-ui/tool-based.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@tool\ndef get_weather(location: str):\n    \"\"\"\n    Get the weather for a given location.\n    \"\"\"\n    return f\"The weather for {location} is 70 degrees.\"\n\n# ...\n\nasync def chat_node(state: AgentState, config: RunnableConfig):\n    model = ChatOpenAI(model=\"gpt-4o\")\n    model_with_tools = model.bind_tools([get_weather])\n\n    response = await model_with_tools.ainvoke([\n        SystemMessage(content=f\"You are a helpful assistant.\")\n        *state[\"messages\"],\n    ], config)\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Up Playwright Browsers - Bash\nDESCRIPTION: Runs a custom npm script ('npm run setup') to install the browsers needed for Playwright testing. This step ensures all browser binaries (Chromium, Firefox, WebKit) are available for automated testing. Assumes the script is defined in package.json, typically as 'playwright install' or similar.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/e2e/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run setup\n```\n\n----------------------------------------\n\nTITLE: Sample Playwright App Configuration File - JSON\nDESCRIPTION: Demonstrates the required structure for app-config.json, which contains per-application test settings such as the URL, description, and project name. All properties are required: 'url' is the base address under test, 'description' is for documentation or reports, and 'projectName' is used in test organization. File must be placed at the project root. Keys should be replaced by your application's identifier. Input: N/A. Output: This file is parsed at runtime.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/e2e/README.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"app_name\": {\\n    \"url\": \"https://your-application-url.com\",\\n    \"description\": \"Brief description of your application\",\\n    \"projectName\": \"Your Project Name\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing AbortController Error in CopilotKit\nDESCRIPTION: A patch change that silences errors thrown when an AbortController is cancelled.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/runtime-client-gql/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- fb87bcf: - fix: silence abort controller cancellation throwing an error\n```\n\n----------------------------------------\n\nTITLE: Major CopilotKit Update with Interface Improvements\nDESCRIPTION: A comprehensive update to CopilotKit Core, CoAgents, and the Back-end SDK with interface improvements, better error handling, LangGraph support, and enhanced state management.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/runtime-client-gql/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- CopilotKit Core:\n\n  - Improved error messages and overall logs\n  - `useCopilotAction.renderAndAwait` renamed to `.renderAndAwaitForResponse` (backwards compatible, will be deprecated in the future)\n  - Improved scrolling behavior. It is now possible to scroll up during LLM response generation\n  - Added Azure OpenAI integration\n  - Updated interfaces for better developer ergonomics\n\n  CoAgents:\n\n  - Renamed `remoteActions` to `remoteEndpoints` (backwards compatible, will be deprecated in the future)\n  - Support for LangGraph Platform in Remote Endpoints\n  - LangGraph JS Support for CoAgents (locally via `langgraph dev`, `langgraph up` or deployed to LangGraph Platform)\n  - Improved LangSmith integration - requests made through CoAgents will now surface in LangSmith\n  - Enhanced state management and message handling\n\n  CopilotKid Back-end SDK:\n\n  - Released a whole-new `@copilotkit/sdk-js` for building agents with LangGraph JS Support\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript UI Dependencies via pnpm - Shell Script\nDESCRIPTION: Installs all required Node.js dependencies for the frontend UI using pnpm. Intended for use in the 'ui' directory. This ensures the React/Next.js project has all necessary packages installed before launching. There are no inputs other than the package manager; outputs are package installations.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa-text/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd ./ui\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Synchronizing LangGraph Messages with CopilotKit\nDESCRIPTION: A minor update that synchronizes LangGraph messages with CopilotKit, enhancing compatibility between the two systems.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/runtime-client-gql/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- 1b47092: Synchronize LangGraph messages with CopilotKit\n```\n\n----------------------------------------\n\nTITLE: Tool-Based State Updates in Python\nDESCRIPTION: Shows how to configure automatic state predictions based on tool calls, using a StepProgressTool to track progress.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/shared-state/predictive-state-updates.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.crewai import copilotkit_predict_state\nfrom crewai.flow.flow import Flow, start\n\nclass MyFlow(Flow):\n\n    @start\n    async def start_flow(self):\n        copilotkit_predict_state({\n            \"observed_steps\": {\n                \"tool\": \"StepProgressTool\",\n                \"tool_argument\": \"steps\"\n            }\n        })\n\n        step_progress_tool = {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"StepProgressTool\",\n                \"description\": \"Records progress by updating the steps array\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"steps\": {\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"description\": \"Array of completed steps\"\n                        }\n                    },\n                    \"required\": [\"steps\"]\n                }\n            }\n        }\n\n        response = await copilotkit_stream(\n            completion(\n                model=\"openai/gpt-4o\",\n                messages=[\n                    {\n                        \"role\": \"system\",\n                        \"content\": \"You are a task performer. Pretend doing tasks you are given, report the steps using StepProgressTool.\"\n                    },\n                    *self.state.get(\"messages\", [])\n                ],\n                tools=[step_progress_tool],\n                stream=True\n            )\n        )\n```\n\n----------------------------------------\n\nTITLE: Patch Version Updates - Changelog Entry\nDESCRIPTION: Documents version updates and dependency changes across CopilotKit packages\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/react-textarea/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [0dd1ab9]\n- Updated dependencies [5bc68f8]\n  - @copilotkit/react-core@1.5.19\n  - @copilotkit/shared@1.5.19\n  - @copilotkit/runtime-client-gql@1.5.19\n```\n\n----------------------------------------\n\nTITLE: Running Agent Demo - Poetry Script\nDESCRIPTION: Launches the sample agent application using Poetry. This command should be run from the 'agent' directory after all dependencies have been installed and environment variables configured. It will start the agent demo, relying on prior environment setup.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa-text/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npoetry run demo\n```\n\n----------------------------------------\n\nTITLE: Setting Up Root Component Styles\nDESCRIPTION: Example showing how to import and setup CopilotKit styles at the root component level.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@copilotkit/react-ui/styles.css\";\n\nexport function YourRootComponent() {\n  return (\n    <CopilotKit>\n      ...\n    </CopilotKit>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the CrewAI Agent Server with Poetry (Bash)\nDESCRIPTION: Executes the `crew_server` command within the environment managed by Poetry. This starts the backend server for the CrewAI agents. Assumes dependencies are installed and the `agent` directory is the current working directory.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/demo-viewer/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npoetry run crew_server\n```\n\n----------------------------------------\n\nTITLE: Rendering Emitted State in React Component\nDESCRIPTION: Implementation of the useCoAgentStateRender hook in a React component to receive and render the manually emitted state from the agent. This allows for real-time display of search progress in the UI.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-5-stream-progress.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCoAgent, useCoAgentStateRender } from \"@copilotkit/react-core\";\nimport { SearchProgress } from \"@/components/SearchProgress\";\n\nexport const TripsProvider = ({ children }: { children: ReactNode }) => {\n  // ...\n  \n  const { state, setState } = useCoAgent<AgentState>({\n    name: \"travel\",\n    initialState: {\n      trips: defaultTrips,\n      selected_trip_id: defaultTrips[0].id,\n    },\n  });\n\n  useCoAgentStateRender<AgentState>({\n    name: \"travel\",\n    render: ({ state }) => {\n      if (state.search_progress) {\n        return <SearchProgress progress={state.search_progress} />\n      }\n      return null;\n    },\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GoogleGenerativeAIAdapter for CopilotKit Runtime\nDESCRIPTION: This code snippet demonstrates how to set up and use the GoogleGenerativeAIAdapter with CopilotKit's runtime. It imports necessary dependencies, initializes the Google Generative AI client, creates a CopilotRuntime instance, and returns a new GoogleGenerativeAIAdapter configured for the 'gemini-1.5-pro' model.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_142\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CopilotRuntime, GoogleGenerativeAIAdapter } from \"@copilotkit/runtime\";\nconst { GoogleGenerativeAI } = require(\"@google/generative-ai\");\n\nconst genAI = new GoogleGenerativeAI(process.env[\"GOOGLE_API_KEY\"]);\n\nconst copilotKit = new CopilotRuntime();\n\nreturn new GoogleGenerativeAIAdapter({ model: \"gemini-1.5-pro\" });\n```\n\n----------------------------------------\n\nTITLE: Implementing Front-end Action Handlers\nDESCRIPTION: Sets up useCopilotAction hooks for handling tool calls in the front-end, including rendering components for user approval.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-6-human-in-the-loop.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nuseCopilotAction({ \n    name: \"add_trips\",\n    description: \"Add some trips\",\n    parameters: [\n      {\n        name: \"trips\",\n        type: \"object[]\",\n        description: \"The trips to add\",\n        required: true,\n      },\n    ],\n    renderAndWait: AddTrips,\n  });\n\n  useCopilotAction({\n    name: \"update_trips\",\n    description: \"Update some trips\",\n    parameters: [\n      {\n        name: \"trips\",\n        type: \"object[]\",\n        description: \"The trips to update\",\n        required: true,\n      },\n    ],\n    renderAndWait: EditTrips,\n  });\n\n  useCopilotAction({\n    name: \"delete_trips\",\n    description: \"Delete some trips\",\n    parameters: [\n      {\n        name: \"trip_ids\",\n        type: \"string[]\",\n        description: \"The ids of the trips to delete\",\n        required: true,\n      },\n    ],\n    renderAndWait: (props) => DeleteTrips({ ...props, trips: state.trips }),\n  });\n```\n\n----------------------------------------\n\nTITLE: Customizing CopilotKit CSS Variables\nDESCRIPTION: CSS customization to match the CopilotKit components with the dashboard's design system using CSS variables.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-chat-with-your-data/README.md#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --copilot-kit-primary-color: #3b82f6;\n  --copilot-kit-contrast-color: white;\n  --copilot-kit-secondary-contrast-color: #1e293b;\n  --copilot-kit-background-color: white;\n  --copilot-kit-muted-color: #64748b;\n  --copilot-kit-separator-color: rgba(0, 0, 0, 0.08);\n  --copilot-kit-scrollbar-color: rgba(0, 0, 0, 0.2);\n  /* Additional variables... */\n}\n\n/* Custom CopilotKit styling to match dashboard */\n.copilotKitSidebar .copilotKitWindow {\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);\n}\n\n.copilotKitButton {\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing UI Dependencies with pnpm\nDESCRIPTION: Commands to navigate to the UI directory and install dependencies using pnpm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-ai-researcher/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd ./ui\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm - Bash\nDESCRIPTION: This Bash snippet installs all required Node.js dependencies for the project using 'pnpm', a performant package manager alternative to npm and yarn. This step is essential before starting development and will process the 'package.json' file to fetch the project's dependencies into 'node_modules'. Must run from the project root.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-state-machine/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Rendering Agent State in React Chat Component\nDESCRIPTION: Uses the useCoAgentStateRender hook to render the agent's state within a chat interface in a React component.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_68\n\nLANGUAGE: TypeScript\nCODE:\n```\n// ...\nimport { useCoAgentStateRender } from \"@copilotkit/react-core\";\n// ...\n\n// Define the state of the agent, should match the state of the agent in your LangGraph.\ntype AgentState = {\n  searches: {\n    query: string;\n    done: boolean;\n  }[];\n};\n\nfunction YourMainContent() {\n  // ...\n\n\n  // styles omitted for brevity\n  useCoAgentStateRender<AgentState>({\n    name: \"sample_agent\", // the name the agent is served as\n    render: ({ state }) => (\n      <div>\n        {state.searches?.map((search, index) => (\n          <div key={index}>\n            {search.done ? \"✅\" : \"❌\"} {search.query}{search.done ? \"\" : \"...\"}\n          </div>\n        ))}\n      </div>\n    ),\n  });\n\n  // ...\n\n  return <div>...</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with Poetry\nDESCRIPTION: Command to install Python dependencies for the CoAgents starter project using Poetry.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/quickstart/langgraph.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with Poetry\nDESCRIPTION: Command to install Python dependencies for the backend using Poetry package manager.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter-crewai-flows/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd agent-py\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Creating Secure Tunnel with CopilotKit CLI (Bash)\nDESCRIPTION: Uses the CopilotKit CLI (`npx copilotkit dev`) to create a secure tunnel, forwarding requests from a public URL to the local server running on port 8000. Requires replacing `<your_project_id>` with a valid CopilotKit project ID and having Node.js/npx installed. Run in a separate terminal.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/demo-viewer/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx copilotkit dev --port 8000 --project <your_project_id>\n```\n\n----------------------------------------\n\nTITLE: Using useCoAgentStateRender Hook in React\nDESCRIPTION: Implementation example of the useCoAgentStateRender hook for rendering UI components based on an agent's state. This hook allows developers to visualize agent state during operations in a chat interface.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCoAgentStateRender } from \"@copilotkit/react-core\";\n\ntype YourAgentState = {\n  agent_state_property: string;\n}\n\nuseCoAgentStateRender<YourAgentState>({\n  name: \"basic_agent\",\n  nodeName: \"optionally_specify_a_specific_node\",\n  render: ({ status, state, nodeName }) => {\n    return (\n      <YourComponent\n        agentStateProperty={state.agent_state_property}\n        status={status}\n        nodeName={nodeName}\n      />\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced CopilotTextarea Implementation with Detailed Configuration\nDESCRIPTION: Example component showing a more advanced implementation of CopilotTextarea with additional configuration options like placeholder text and custom API settings for the AI suggestions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/copilot-textarea.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FC, useState } from \"react\";\nimport { CopilotTextarea } from \"@copilotkit/react-textarea\";\n\nconst TextAreaComponent: FC = () => {\n  const [text, setText] = useState<string>(\"\");\n\n  return (\n    <CopilotTextarea \n      // standard textarea args\n      className=\"w-full p-4 border border-gray-300 rounded-md\"\n      value={text}\n      onValueChange={setText}\n      placeholder=\"Start typing...\"\n\n      // ai-specific configs\n      \n      autosuggestionsConfig={{\n        textareaPurpose: \"Write your message here\",\n        chatApiConfigs: {\n          suggestionsApiConfig: {\n            maxTokens: 50,\n            stop: [\"\\n\", \".\", \"?\"],\n          },\n        },\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Environment Variables\nDESCRIPTION: This snippet shows the content of the .env file needed for the UI component, which includes the OpenAI API key.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter-crewai-crews/README.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Environment Variables\nDESCRIPTION: Contents of the .env file for the UI, specifying the OpenAI API key.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa/README.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Customizing Colors with CSS Variables in React TSX\nDESCRIPTION: Demonstrates how to override default CopilotKit colors by setting CSS variables using CopilotKitCSSProperties type\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/customize-built-in-ui-components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotKitCSSProperties } from \"@copilotkit/react-ui\";\n\n<div\n  style={\n    {\n      \"--copilot-kit-primary-color\": \"#222222\",\n    } as CopilotKitCSSProperties\n  }\n>\n  <CopilotSidebar .../>\n</div>\n```\n\n----------------------------------------\n\nTITLE: FastAPI Server Setup\nDESCRIPTION: Example of setting up a FastAPI server to serve the CopilotKit SDK endpoints.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/RemoteEndpoints.mdx#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.integrations.fastapi import add_fastapi_endpoint\nfrom fastapi import FastAPI\n\napp = FastAPI()\nsdk = CopilotKitRemoteEndpoint(...)\nadd_fastapi_endpoint(app, sdk, \"/copilotkit\")\n\ndef main():\n    uvicorn.run(\n        \"your_package:app\",\n        host=\"0.0.0.0\",\n        port=8000,\n        reload=True,\n    )\n```\n\n----------------------------------------\n\nTITLE: Installing Agent Dependencies with Poetry\nDESCRIPTION: Commands to navigate to the agent directory and install dependencies using Poetry.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-routing/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd agent\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with yarn - Bash\nDESCRIPTION: This Bash snippet provides an alternative to install dependencies using 'yarn' instead of pnpm or npm. It uses the 'yarn install' command to fetch and set up all project modules according to 'package.json'. Assumes Yarn is already installed globally.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-state-machine/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Emitting Messages for Long-Running Tasks\nDESCRIPTION: Implementation of a message emission system for long-running tasks using CopilotKit. The function asks for a user's name and demonstrates how to emit messages while processing lengthy operations.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/concepts/message-management.mdx#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@listen(\"route_to_ask_name\")\nasync def ask_name():\n    \"\"\"\n    Ask the user for their name.\n    \"\"\"\n\n    content = \"Hey, what is your name? 🙂\"\n\n    await copilotkit_emit_message(content)\n\n    # something long running here...\n\n    self.state[\"messages\"].append({\"role\": \"assistant\", \"content\": content, \"id\": str(uuid.uuid4())})\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit SDK with Poetry\nDESCRIPTION: Command to install the CopilotKit SDK using Poetry package manager for Python projects.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\npoetry add copilotkit\n# including support for crewai\npoetry add copilotkit[crewai]\n```\n\n----------------------------------------\n\nTITLE: Basic FastAPI Server Setup\nDESCRIPTION: Initial setup of a FastAPI server instance.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions/remote-backend-endpoint.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n```\n\n----------------------------------------\n\nTITLE: Streaming Messages with Copilotkit and LiteLLM\nDESCRIPTION: Example of wrapping the LiteLLM completion function with copilotkit_stream to enable message and tool call streaming to the frontend. The function takes a model name, system prompt, and message history as parameters and requires stream=True to be set.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/concepts/copilotkit-stream.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresponse = copilotkit_stream(\n    completion(\n        model=\"openai/gpt-4o\",\n        messages=[\n            {\"role\": \"system\", \"content\": my_prompt},\n            *self.state[\"messages\"]\n        ],\n        stream=True\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Running All Tests Using npm Script - Bash\nDESCRIPTION: Runs all Playwright tests in headless mode via the npm script 'test'. Requires test files in the expected locations and properly configured Playwright environment. Shows typical workflow for automated CI/CD or local testing.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/e2e/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Initializing CopilotKit Provider in React\nDESCRIPTION: Example of wrapping a React application with the CopilotKit provider component to enable copilot functionality.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\n<CopilotKit runtimeUrl=\"<your-runtime-url>\">\n  // ... your app ...\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Loading an Existing Thread with CopilotKit in React\nDESCRIPTION: This code demonstrates how to load an existing conversation thread in CopilotKit by setting the threadId property on the CopilotKit component. This is useful for maintaining conversation context across sessions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_126\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CopilotKit } from \"@copilotkit/react-core\";\n\n<CopilotKit threadId=\"37aa68d0-d15b-45ae-afc1-0ba6c3e11353\">\n  <YourApp />\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Configuring CopilotRuntime for Self-hosted FastAPI Deployment in TypeScript\nDESCRIPTION: This snippet shows how to configure CopilotRuntime for a self-hosted FastAPI deployment. It sets up the runtime with a single remote endpoint pointing to a local FastAPI server.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-remote-endpoints.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  CopilotRuntime,\n  // ...\n} from \"@copilotkit/runtime\";\n// ...\nconst runtime = new CopilotRuntime({\n  remoteEndpoints: [\n    // [!code highlight:3]\n    // Our FastAPI endpoint URL\n    { url: \"http://localhost:8000/copilotkit\" },\n  ],\n});\n// ...\n```\n\n----------------------------------------\n\nTITLE: Importing CopilotKit Styles in Root Component\nDESCRIPTION: Example showing how to import CopilotKit's default stylesheet at the root of your React project to provide basic styling for all CopilotKit components used in the application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_64\n\nLANGUAGE: jsx\nCODE:\n```\n...\nimport \"@copilotkit/react-ui/styles.css\";\n\nexport function YourRootComponent() {\n  return (\n    <CopilotKit>\n      ...\n    </CopilotKit>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Agent Dependencies with Poetry\nDESCRIPTION: Commands to navigate to the agent directory and install dependencies using Poetry.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa-native/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd agent\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Running the Agent Demo\nDESCRIPTION: This command runs the demo for the agent using Poetry.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-wait-user-input/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npoetry run demo\n```\n\n----------------------------------------\n\nTITLE: Manually Emitting Messages from LangGraph in JavaScript\nDESCRIPTION: Demonstrates how to manually emit messages to CopilotKit during node execution, which is useful for providing updates during long-running tasks.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\nimport { copilotkitEmitMessage } from \"@copilotkit/sdk-js\";\n\nconst message = \"Step 1 of 10 complete\";\nawait copilotkitEmitMessage(config, message);\n\n// Return the message from the node\nreturn {\n  \"messages\": [AIMessage(content=message)]\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Tool Calls as State in CrewAI\nDESCRIPTION: Demonstrates how to stream tool calls as state to CopilotKit by specifying a destination key, tool name, and optional tool argument. Used for state prediction in CrewAI agents.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/CrewAI.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.crewai import copilotkit_predict_state\n\nawait copilotkit_predict_state(\n    {\n        \"steps\": {\n            \"tool_name\": \"SearchTool\",\n            \"tool_argument\": \"steps\",\n        },\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Tailored Content in React\nDESCRIPTION: This snippet shows the import statements for React components used to create tailored content in the CopilotKit documentation.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/predictive-state-updates.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  TailoredContent,\n  TailoredContentOption,\n} from \"@/components/react/tailored-content.tsx\";\nimport { CoAgentsEnterpriseCTA } from \"@/components/react/coagents/coagents-enterprise-cta.tsx\";\nimport InstallSDKSnippet from \"@/snippets/install-sdk.mdx\"\nimport { FaWrench } from \"react-icons/fa\";\nimport { FaArrowUp } from \"react-icons/fa\";\n```\n\n----------------------------------------\n\nTITLE: Declaring a String Variable in TypeScript\nDESCRIPTION: A simple TypeScript code snippet that declares a constant string variable named 'this' with the value 'is a test markdown component'. This appears to be a basic demonstration or placeholder code.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/components/markdown/test-markdown-component.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst this = \"is a test markdown component\";\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State in Python for CopilotKit\nDESCRIPTION: This snippet shows how to define the agent state class in Python, extending CopilotKitState to include custom properties like 'searches'.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/generative-ui/agentic.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit import CopilotKitState\n\nclass AgentState(CopilotKitState):\n    searches: list[dict]\n```\n\n----------------------------------------\n\nTITLE: Initializing CopilotKit with ThreadID\nDESCRIPTION: Demonstrates how to set up CopilotKit with a specific threadId for state persistence. The threadId must be a UUID when using LangGraph platform.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_136\n\nLANGUAGE: jsx\nCODE:\n```\n<CopilotKit threadId=\"2140b272-7180-410d-9526-f66210918b13\">\n  <YourApp />\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Collecting User Feedback in TypeScript StateGraph\nDESCRIPTION: This function serves as a target node for interruption in the state graph. It's executed before the graph is interrupted to await user feedback.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/node-flow.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst getFeedback = async (state: AgentState) => {\n  return state;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Python Agent Demo\nDESCRIPTION: Command to run the Python agent demo using Poetry.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npoetry run demo\n```\n\n----------------------------------------\n\nTITLE: Custom Icons Implementation in CopilotKit\nDESCRIPTION: Shows how to customize icons in CopilotKit components by passing custom icon components through props\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/customize-built-in-ui-components.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<CopilotChat\n  icons={{\n    // Use your own icons here – any React nodes\n    openIcon: <YourOpenIconComponent />,\n    closeIcon: <YourCloseIconComponent />,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Locking Agent in CopilotKit Provider\nDESCRIPTION: Configuration to lock all requests to a specific agent in the CopilotKit provider.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-4-integrate-the-agent.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<CopilotKit\n  // ...\n  agent=\"travel\"\n>\n  {...}\n</CopilotKit>\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit with CrewAI Support - Bash\nDESCRIPTION: This command installs the CopilotKit SDK along with optional CrewAI integration using pip. CrewAI-related dependencies will be included for enhanced multi-agent orchestration. Requires Python with pip, and is suited for users who need advanced agent collaboration features.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/sdk-python/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install \"copilotkit[crewai]\"\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with npm - Bash\nDESCRIPTION: This snippet shows how to start the application's development mode using npm, executing 'npm run dev'. It runs the script named 'dev' from 'package.json', used to launch the local development web server. Requires prior installation of Node.js dependencies.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-state-machine/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Discord Community Link in Markdown\nDESCRIPTION: This snippet demonstrates how to create a clickable link to the Copilotkit Discord community in Markdown format. It's used as a fallback contact method for security issues.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/SECURITY.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Discord community](https://discord.gg/6dffbvGU3D)\n```\n\n----------------------------------------\n\nTITLE: Configuring LangGraphAgent with Custom Config\nDESCRIPTION: Example of passing a custom LangGraph configuration to a LangGraphAgent. This allows for customized behavior when integrating LangGraph with CopilotKit.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_111\n\nLANGUAGE: python\nCODE:\n```\nLangGraphAgent(\n    ...\n    langgraph_config=config,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State Class in Python\nDESCRIPTION: Defines an AgentState class that inherits from CopilotKitState and includes a searches property.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_66\n\nLANGUAGE: Python\nCODE:\n```\n# ...\nfrom copilotkit import CopilotKitState # extends MessagesState\n# ...\n\n# This is the state of the agent.\n# It inherits from the CopilotKitState properties from CopilotKit.\nclass AgentState(CopilotKitState):\n    searches: list[dict]\n```\n\n----------------------------------------\n\nTITLE: Defining Agent State Class in Python\nDESCRIPTION: Creates a custom AgentState class that extends CopilotKitState to define the structure of agent state with a language property.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/shared-state/in-app-agent-read.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.crewai import CopilotKitState\nfrom typing import Literal\n\nclass AgentState(CopilotKitState):\n    language: Literal[\"english\", \"spanish\"] = \"english\"\n```\n\n----------------------------------------\n\nTITLE: Emitting Intermediate State in CopilotKit\nDESCRIPTION: Example of using copilotkit_emit_state to update the user with the current state of a longer running node.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_80\n\nLANGUAGE: python\nCODE:\n```\nfrom copilotkit.langgraph import copilotkit_emit_state\n\nfor i in range(10):\n    await some_long_running_operation(i)\n    await copilotkit_emit_state(config, {\"progress\": i})\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit Packages\nDESCRIPTION: Install the necessary CopilotKit packages using npm. For Copilot Cloud, install react-ui and react-core. For self-hosting, also include the runtime package.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @copilotkit/react-ui @copilotkit/react-core\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @copilotkit/react-ui @copilotkit/react-core @copilotkit/runtime\n```\n\n----------------------------------------\n\nTITLE: Running Formatting and Linting in Bash\nDESCRIPTION: Commands to ensure code formatting and linting standards are met before committing changes to the CopilotKit codebase.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/(other)/contributing/code-contributions/index.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nturbo run format\n```\n\n----------------------------------------\n\nTITLE: Version History Markdown\nDESCRIPTION: Changelog entries documenting version updates and dependency changes for the UI package and its dependencies.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/react-textarea/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ui\n\n## 1.8.7\n\n### Patch Changes\n\n- Updated dependencies [8b8474f]\n  - @copilotkit/runtime-client-gql@1.8.7\n  - @copilotkit/react-core@1.8.7\n  - @copilotkit/shared@1.8.7\n```\n\n----------------------------------------\n\nTITLE: Using useCoAgent Hook for State Restoration\nDESCRIPTION: Shows how to use the useCoAgent hook to retrieve the restored state of a specific agent within the thread context.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/persistence/loading-agent-state.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { state } = useCoAgent({name: \"research_agent\"});\n\n// state will now be the state of research_agent in the thread id given above\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit SDK\nDESCRIPTION: Command to install the CopilotKit SDK using npm package manager.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/js/LangGraph.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @copilotkit/sdk-js\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Poetry\nDESCRIPTION: Commands for initializing a new Poetry project and installing required dependencies including CopilotKit, FastAPI, and uvicorn.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions/remote-backend-endpoint.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry new My-CopilotKit-Remote-Endpoint\npoetry add copilotkit fastapi uvicorn\n```\n\n----------------------------------------\n\nTITLE: Importing CopilotKit Styles in Root Component\nDESCRIPTION: Example of how to import the CopilotKit stylesheet at the root of a React project to apply default styles to CopilotKit components.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/chat/CopilotPopup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"@copilotkit/react-ui/styles.css\"; // [!code highlight]\n\nexport function YourRootComponent() {\n  return (\n    <CopilotKit>\n      ...\n    </CopilotKit>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Tailored Content\nDESCRIPTION: This snippet imports custom React components used for creating tailored content options in the documentation.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/quickstart/crewai.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  TailoredContent,\n  TailoredContentOption,\n} from \"@/components/react/tailored-content.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Setting up Environment Variables\nDESCRIPTION: Content of the .env file required for both Python and JavaScript agents, specifying the OpenAI API key.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter/README.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Configuring LangSmith Environment Variables\nDESCRIPTION: Sets up required environment variables for LangSmith tracing including API key, project name, and endpoint configuration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/(other)/observability/langsmith.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLANGCHAIN_API_KEY=\"<your-api-key>\"\nLANGCHAIN_PROJECT=\"<your-project-name>\"\nLANGCHAIN_TRACING_V2=\"true\"\nLANGCHAIN_ENDPOINT=\"https://api.smith.langchain.com\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Breakpoint to LangGraph Agent\nDESCRIPTION: Adds a breakpoint to the trips_node in the graph compilation to pause execution for human approval.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-6-human-in-the-loop.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngraph = graph_builder.compile(\n    checkpointer=MemorySaver(),\n    interrupt_after=[\"trips_node\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Agent Exit Function\nDESCRIPTION: Example showing how to implement the exit function for stopping an agent after run completion.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/js/LangGraph.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { copilotkitExit } from \"@copilotkit/sdk-js\";\n\nasync function myNode(state: Any):\n  await copilotkitExit(config)\n  return state\n```\n\n----------------------------------------\n\nTITLE: Navigating to Agent Directory for CrewAI Setup (Bash)\nDESCRIPTION: Changes the current working directory to the `agent` subdirectory. This is a prerequisite for running subsequent commands related to CrewAI agent setup.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/demo-viewer/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd agent\n```\n\n----------------------------------------\n\nTITLE: Setting up LangGraph Tunnel using CopilotKit CLI\nDESCRIPTION: Command to create a tunnel between a local LangGraph agent and Copilot Cloud using the CopilotKit CLI.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-4-integrate-the-agent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx copilotkit@latest dev --port <port_number>\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit React Packages\nDESCRIPTION: Command to install the latest CopilotKit packages for React frontend integration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @copilotkit/react-ui @copilotkit/react-core\n```\n\n----------------------------------------\n\nTITLE: Advanced Thread Pool Configuration\nDESCRIPTION: Example of configuring the thread pool executor size for the FastAPI endpoint.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions/remote-backend-endpoint.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nadd_fastapi_endpoint(app, sdk, \"/copilotkit_remote\", max_workers=10)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm in Bash\nDESCRIPTION: Command to install all required dependencies for the CopilotKit monorepo using pnpm package manager.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/(other)/contributing/code-contributions/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing CrewAI Dependencies with Poetry (Bash)\nDESCRIPTION: Installs the Python dependencies defined in the `pyproject.toml` file within the `agent` directory using the Poetry package manager. Assumes Poetry is installed and the `agent` directory is the current working directory.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/demo-viewer/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit Dependencies\nDESCRIPTION: Command to install the required CopilotKit packages for React frontend integration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_98\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @copilotkit/react-ui @copilotkit/react-core\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit React Textarea Package\nDESCRIPTION: Command to install the @copilotkit/react-textarea package using npm package manager.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @copilotkit/react-textarea\n```\n\n----------------------------------------\n\nTITLE: Building the Application for Production\nDESCRIPTION: Command to compile and optimize the application for production deployment.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/community/demos_2025/finance_ai.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Starting the Todo List App Development Server\nDESCRIPTION: Starts the development server for the todo list app, which will be accessible at http://localhost:3000.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-powered-textarea/step-1-checkout-repo.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to launch the NextJS development server for the travel application.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-1-checkout-repo.mdx#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Example with LangGraph Platform in Bash\nDESCRIPTION: Command to run a development environment with the LangGraph platform integration for enhanced development capabilities.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/(other)/contributing/code-contributions/index.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/develop/example.sh coagents-starter langgraph-platform\n```\n\n----------------------------------------\n\nTITLE: Cloning Tutorial Repository with Git\nDESCRIPTION: Clone the tutorial-start branch of the open-research-ana repository which contains the starter code for both frontend and agent components.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-1-checkout-repo.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone -b tutorial-start https://github.com/CopilotKit/open-research-ana.git\ncd open-research-ana\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit CrewAI Package\nDESCRIPTION: Command to install CopilotKit with CrewAI support using pip package manager.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/sdk/python/CrewAIAgent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install copilotkit[crewai]\n```\n\n----------------------------------------\n\nTITLE: Running the Agent Demo\nDESCRIPTION: Command to run the agent demo using Poetry.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa-native/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npoetry run demo\n```\n\n----------------------------------------\n\nTITLE: Network Connectivity Test Commands\nDESCRIPTION: Commands to verify connectivity to the CopilotKit tunnel service\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/troubleshooting/common-issues.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nping tunnels.devcopilotkit.com\ncurl -I https://tunnels.devcopilotkit.com\ntelnet tunnels.devcopilotkit.com 443\n```\n\n----------------------------------------\n\nTITLE: Creating Local Tunnel for CopilotKit Development\nDESCRIPTION: Command to create a local development tunnel that connects CopilotKit to the LangGraph agent running locally.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-4-agentic-chat-ui.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx copilotkit@latest dev --port 8000\n```\n\n----------------------------------------\n\nTITLE: Agent Configuration in LangGraph JSON\nDESCRIPTION: Configuration example for defining an agent in langgraph.json file\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/troubleshooting/common-issues.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"python_version\": \"3.12\",\n    \"dockerfile_lines\": [],\n    \"dependencies\": [\".\"],\n    \"graphs\": {\n        \"my_agent\": \"./src/agent.py:graph\"\n    },\n    \"env\": \".env\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up environment file for LangGraph agent\nDESCRIPTION: Creates a .env file in the agent directory and adds OpenAI and Tavily API keys. This step is crucial for configuring the agent's environment with necessary credentials.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-2-start-the-agent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd agent\ntouch .env\n```\n\nLANGUAGE: txt\nCODE:\n```\nOPENAI_API_KEY=<your-openai-api-key>\nTAVILY_API_KEY=<your-tavily-api-key>\n```\n\n----------------------------------------\n\nTITLE: Cloning the Todo List App Repository\nDESCRIPTION: Clones the example-textarea repository from GitHub, specifically the base-start-here branch, and changes into the project directory.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/tutorials/ai-powered-textarea/step-1-checkout-repo.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone -b base-start-here https://github.com/CopilotKit/example-textarea.git\ncd example-textarea\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components and Documentation Elements\nDESCRIPTION: Import statements for various MDX components and documentation elements used throughout the guide, including snippets for deployment, configuration, and UI components.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/quickstart/langgraph.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelfHostingCopilotRuntimeCreateEndpoint from \"@/snippets/self-hosting-copilot-runtime-create-endpoint.mdx\";\nimport CopilotCloudConfigureRemoteEndpointLangGraph from \"@/snippets/copilot-cloud-configure-remote-endpoint-langgraph.mdx\";\nimport CopilotKitCloudCopilotKitProvider from \"@/snippets/copilot-cloud-configure-copilotkit-provider.mdx\";\nimport LangGraphPlatformDeploymentTabs from \"@/snippets/langgraph-platform-deployment-tabs.mdx\";\nimport { Accordions, Accordion } from \"fumadocs-ui/components/accordion\";\nimport FindYourCopilotRuntime from \"@/snippets/find-your-copilot-runtime.mdx\";\nimport ConnectCopilotUI from \"@/snippets/copilot-ui.mdx\";\nimport CloudCopilotKitProvider from \"@/snippets/coagents/cloud-configure-copilotkit-provider.mdx\";\nimport SelfHostingCopilotRuntimeConfigureCopilotKitProvider from \"@/snippets/coagents/self-host-configure-copilotkit-provider.mdx\";\nimport SelfHostingCopilotRuntimeLangGraphEndpoint from \"@/snippets/self-hosting-copilot-runtime-langgraph-endpoint.mdx\";\nimport SelfHostingCopilotRuntimeStarter from \"@/snippets/self-hosting-copilot-runtime-starter.mdx\";\nimport SelfHostingRemoteEndpoints from \"@/snippets/self-hosting-remote-endpoints.mdx\";\nimport CopilotUI from \"@/snippets/copilot-ui.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Connecting Copilot Cloud Tunnel\nDESCRIPTION: Command to connect the Copilot Cloud Tunnel to the LangGraph server using npx.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-research-canvas/readme.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpx copilotkit@latest dev --port 8123\n```\n\n----------------------------------------\n\nTITLE: Starting LangGraph Server\nDESCRIPTION: Command to start the LangGraph server using npx and the LangGraph CLI.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-research-canvas/readme.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpx @langchain/langgraph-cli dev --host localhost --port 8123\n```\n\n----------------------------------------\n\nTITLE: Connecting Copilot Cloud Tunnel to LangGraph Server\nDESCRIPTION: Command to connect the Copilot Cloud Tunnel to the LangGraph server using npx.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter/README.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpx copilotkit@latest dev --port 8123\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the project locally for development and testing purposes.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-research-canvas/ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Starting LangGraph Development Server (TypeScript)\nDESCRIPTION: Command to start a local LangGraph development server and studio session using TypeScript with Node 18 or above. This method requires a LangSmith account.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/langgraph-platform-deployment-tabs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @langchain/langgraph-cli dev --host localhost --port 8000\n```\n\n----------------------------------------\n\nTITLE: Returning Crew Output in React Component\nDESCRIPTION: This code returns the output of the crew system from the component. It accesses the result property from the state object or defaults to an empty string if no result is available.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/crew-quickstart.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn {\n    output: state?.result || \"\",\n  };\n```\n\n----------------------------------------\n\nTITLE: Starting LangGraph Development Server (Python)\nDESCRIPTION: Command to start a local LangGraph development server and studio session using Python 3.11 or above. This method requires a LangSmith account.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/langgraph-platform-deployment-tabs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlanggraph dev --host localhost --port 8000\n```\n\n----------------------------------------\n\nTITLE: Video Component Implementation in JSX\nDESCRIPTION: React component implementation for displaying a demo video of HITL functionality in an AI Travel App.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<video src=\"/images/coagents/human-in-the-loop-example.mp4\" className=\"rounded-lg shadow-xl\" loop playsInline controls autoPlay muted />\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Structured Message (Bash)\nDESCRIPTION: Command to commit staged changes with a structured commit message. The message format follows the project's conventions for clear and informative commit history.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"<type>(<package>): <subject>\"\n```\n\n----------------------------------------\n\nTITLE: Running the Next.js UI Project\nDESCRIPTION: Command to run the Next.js UI project using pnpm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running the Next.js UI Project\nDESCRIPTION: This command starts the Next.js development server for the UI project.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-wait-user-input/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with pnpm - Bash\nDESCRIPTION: This Bash snippet initiates the development build and start-up process for the app using 'pnpm dev'. It runs any scripts defined under 'dev' in 'package.json', typically launching a Next.js development server on localhost. All dependencies must already be installed.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-state-machine/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Opening Tunnel for Local FastAPI Server\nDESCRIPTION: Use copilotkit to open a tunnel for connecting Copilot Cloud to a local FastAPI server.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/quickstart/crewai.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx copilotkit@latest dev --port 8000\n```\n\n----------------------------------------\n\nTITLE: Beta Release 1.0.0-beta.1 Entry\nDESCRIPTION: Documents beta.1 release introducing anonymous telemetry feature.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/runtime-client-gql/CHANGELOG.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0-beta.1\n\n### Patch Changes\n\n- Introduce anonymous telemetry\n- Updated dependencies\n  - @copilotkit/runtime@1.0.0-beta.1\n  - @copilotkit/shared@1.0.0-beta.1\n```\n\n----------------------------------------\n\nTITLE: Importing CopilotKit UI Styles\nDESCRIPTION: Code snippet showing how to import default styles for CopilotKit UI components.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@copilotkit/react-ui/styles.css\";\n```\n\n----------------------------------------\n\nTITLE: Installing UI Dependencies with pnpm\nDESCRIPTION: Commands to navigate to the UI directory and install dependencies using pnpm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa-native/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd ./ui\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Creating Stage Two for Pirate Greeting in CopilotKit\nDESCRIPTION: This snippet shows the implementation of a second stage in the state machine that greets the user by name as a pirate. It demonstrates adding stage-specific instructions that are only available when stage equals 'two'.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useCopilotAdditionalInstructions } from \"@copilotkit/react-core\";\n\n// ...\n\nfunction useStageTwo(stage: string) => void) {\n  // Add stage-specific instructions - only available in stage \"two\"\n  useCopilotAdditionalInstructions({\n    instructions: \"Talk to the user about their name and refer to them like a pirate would.\",\n    available: stage === \"two\" ? \"available\" : \"disabled\"\n  })\n\n  // ...\n}\n\n// Any additional stages you want to add...\n```\n\n----------------------------------------\n\nTITLE: Installing Python SDK Dependencies\nDESCRIPTION: Command to install the backend dependencies for the Python SDK using Poetry.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-research-canvas/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd agent-py\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Authenticating Copilot Cloud CLI\nDESCRIPTION: Command to authenticate the Copilot Cloud CLI for connecting to local LangGraph agents.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/quickstart/langgraph.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx copilotkit@latest login\n```\n\n----------------------------------------\n\nTITLE: Example Research Command\nDESCRIPTION: Simple example command to test the research agent functionality.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/agent-native-app/step-5-human-in-the-loop.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPlease research dogs!\n```\n\n----------------------------------------\n\nTITLE: Installing Agent Dependencies with Poetry\nDESCRIPTION: Command to install the agent dependencies using Poetry package manager. This should be run in the agent directory.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-shared-state/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd agent\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Running the Agent Demo\nDESCRIPTION: This command runs the demo for the agent component using Poetry.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter-crewai-crews/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npoetry run demo\n```\n\n----------------------------------------\n\nTITLE: Installing UI Dependencies\nDESCRIPTION: Commands to navigate to the UI directory and install project dependencies using pnpm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-1-checkout-repo.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd ui\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting a Development Environment with Hot Reload in Bash\nDESCRIPTION: Commands to start a development environment with hot reload based on CoAgent examples, allowing real-time changes to CopilotKit core code.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/(other)/contributing/code-contributions/index.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/develop/example.sh coagents-starter\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for CopilotKit\nDESCRIPTION: Example of environment variables to be added to the .env file. It shows options for using either OpenAI API key or Copilot Cloud public API key.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-fully-custom/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=sk... #if you want to use OpenAI\nCOPILOT_CLOUD_PUBLIC_API_KEY=ck... #if you want to use Copilot Cloud\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for the Finance AI Application\nDESCRIPTION: Command to install all required npm packages for the project as specified in package.json.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/community/demos_2025/finance_ai.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel Function Timeout\nDESCRIPTION: JSON configuration to increase the function timeout for Vercel deployments to handle CopilotKit's streaming responses.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/self-hosting-copilot-runtime-create-endpoint.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"functions\": {\n    \"api/copilotkit/**/*\": {\n      \"maxDuration\": 60\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Environment Variables\nDESCRIPTION: Example of the required environment variables to be set in the .env file for the UI component. Includes API keys for OpenAI and CopilotKit.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-travel/README.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=...\nNEXT_PUBLIC_CPK_PUBLIC_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Environment Variables\nDESCRIPTION: Content for the .env file in the agent directory, specifying the OpenAI API key.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-routing/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key for UI - Environment Variable\nDESCRIPTION: Defines the 'OPENAI_API_KEY' in a '.env' file in the UI directory for frontend access to OpenAI services. The API key must support gpt-4o. No additional parameters beyond the key are required; value must be filled in appropriately.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa-text/README.md#2025-04-23_snippet_4\n\nLANGUAGE: env\nCODE:\n```\nOPENAI_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Server with Poetry\nDESCRIPTION: Command to run the FastAPI server using Poetry.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_161\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python3 server.py\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in Root .env (Bash)\nDESCRIPTION: Creates or overwrites a `.env` file in the project's root directory, adding the `OPENAI_API_KEY` variable. Replace `your_api_key_here` with a valid OpenAI API key. This is required for the application to interact with OpenAI services.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/demo-viewer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# In the root directory\necho \"OPENAI_API_KEY=your_api_key_here\" > .env\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm - Bash\nDESCRIPTION: This Bash snippet is for projects preferring npm to manage dependencies over pnpm or yarn. 'npm install' reads 'package.json' and downloads all packages to 'node_modules'. Requires npm, which is bundled with Node.js.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-state-machine/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting LangGraph Server for JS Agent\nDESCRIPTION: Command to start the LangGraph server for the JavaScript agent using npx.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter/README.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpx @langchain/langgraph-cli dev --host localhost --port 8123\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenAI API Key in Environment File\nDESCRIPTION: Add your OpenAI API key to the .env file in the root of your project for authentication with OpenAI services. Note that GPT-4o requires a paid API key.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Creating Environment File for LangSmith API Key\nDESCRIPTION: Example of a .env file containing the LangSmith API key, which is required for self-hosted deployment using FastAPI.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/langgraph-platform-deployment-tabs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nLANGSMITH_API_KEY=your_langsmith_api_key\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in UI Mode - Bash\nDESCRIPTION: Starts Playwright's UI mode for debugging or developing tests interactively. The 'test:ui' npm script should be configured in package.json. UI mode allows point-and-click debugging, pausing, and step-by-step execution.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/e2e/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:ui\n```\n\n----------------------------------------\n\nTITLE: Installing Copilot Runtime\nDESCRIPTION: Install the Copilot Runtime package for self-hosting the Copilot Runtime.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/quickstart/crewai.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n@copilotkit/runtime\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Application with create-next-app\nDESCRIPTION: Command to create a new Next.js application using create-next-app CLI tool.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/quickstart/crewai.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for UI\nDESCRIPTION: Contents of the .env file for the UI, specifying the OpenAI API key.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter-crewai-flows/README.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Importing CopilotKit UI Components in JSX/MDX\nDESCRIPTION: This snippet shows the import statements for various CopilotKit UI components and configuration snippets. It includes imports for ConnectCopilotUI, self-hosting configurations, and cloud configurations.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/agentic-chat-ui.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConnectCopilotUI from \"@/snippets/copilot-ui.mdx\";\nimport SelfHostingCopilotRuntimeCreateEndpoint from \"@/snippets/self-hosting-copilot-runtime-create-endpoint.mdx\";\nimport SelfHostingCopilotRuntimeConfigureCopilotKitProvider from \"@/snippets/self-hosting-copilot-runtime-configure-copilotkit-provider.mdx\";\nimport CopilotCloudConfigureCopilotKitProvider from \"@/snippets/cloud/cloud-copilotkit-provider.mdx\";\nimport ComponentExamples from \"@/snippets/component-examples.mdx\";\nimport { UserIcon, PaintbrushIcon, WrenchIcon, RepeatIcon } from \"lucide-react\";\n```\n\n----------------------------------------\n\nTITLE: Installing copilotkit with Poetry (Python/Bash)\nDESCRIPTION: Uses the Poetry package manager to add `copilotkit` as a dependency to a Python project. The first command adds the base package, while the second command adds the package along with optional dependencies required for `crewai` integration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/install-python-sdk.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry add copilotkit\n# including support for crewai\npoetry add copilotkit[crewai]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables\nDESCRIPTION: Instructions for creating a .env file with necessary API keys.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-chat-with-your-data/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=your_openai_api_key\nTAVILY_API_KEY=your_tavily_api_key\n```\n\n----------------------------------------\n\nTITLE: Creating a Callout Component in JSX\nDESCRIPTION: This code creates a Callout component in JSX, which references a Research Canvas example that uses Generative UI. It includes a link to more information.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/generative-ui/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout>\n  This example shows our [Research Canvas](/crewai-crews/videos/research-canvas)\n  making use of Generative UI!\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers. This allows developers to run the application locally for development and testing.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-shared-state/ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit SDK with Poetry\nDESCRIPTION: Instructions for installing the CopilotKit SDK using Poetry package manager, including optional support for CrewAI integration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_196\n\nLANGUAGE: bash\nCODE:\n```\npoetry add copilotkit\n# including support for crewai\npoetry add copilotkit[crewai]\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables\nDESCRIPTION: Setting up environment variables for CopilotKit Cloud API key in the UI directory.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-3-setup-copilotkit.mdx#2025-04-23_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nNEXT_PUBLIC_CPK_PUBLIC_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables\nDESCRIPTION: Example of environment variables to be set in the .env file for both Python and JavaScript agents, including API keys for OpenAI, Tavily, and LangSmith (JS only).\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-research-canvas/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nOPENAI_API_KEY=...\nTAVILY_API_KEY=...\nLANGSMITH_API_KEY=...(JS ONLY)\n```\n\n----------------------------------------\n\nTITLE: Rendering GitHub and Demo Links\nDESCRIPTION: JSX code block for rendering GitHub repository and live demo links using Button components with icons.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"flex flex-row gap-2\">\n  <Button size=\"lg\" asChild className=\"flex gap-2 items-center\">\n    <Link href=\"https://github.com/CopilotKit/CopilotKit/tree/main/examples/coagents-travel?ref=travel-tutorial\" className=\"no-underline\" target=\"_blank\">\n      <FaGithub className=\"w-6 h-6 mr-2\" />\n      <span>View on GitHub</span>\n    </Link>\n  </Button>\n\n  <Button size=\"lg\" asChild className=\"flex gap-2 items-center\">\n    <Link href=\"https://examples-coagents-ai-travel-app.vercel.app/\" className=\"no-underline\" target=\"_blank\">\n      <PiMonitor className=\"w-6 h-6 mr-2\" />\n      <span>View live app</span>\n    </Link>\n  </Button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Cloning CoAgents Starter Repository for Python\nDESCRIPTION: Git command to clone the CoAgents starter repository for Python, using sparse checkout to only get the necessary files.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/quickstart/langgraph.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone -n --depth=1 --filter=tree:0 https://github.com/CopilotKit/CopilotKit && cd CopilotKit && git sparse-checkout set --no-cone examples/coagents-starter/agent-py && git checkout && cd ..\ncd CopilotKit/examples/coagents-starter/agent-py\n```\n\n----------------------------------------\n\nTITLE: Importing CopilotKit UI Styles\nDESCRIPTION: Import statement for the default CopilotKit UI styles that should be included in the root component.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_122\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@copilotkit/react-ui/styles.css\";\n```\n\n----------------------------------------\n\nTITLE: Running the Next.js UI Project\nDESCRIPTION: Command to start the Next.js development server for the UI.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-routing/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Copilot Chat Components in MDX\nDESCRIPTION: Demonstrates the import of LinkIcon and usage of Cards/Card components to document the three main Copilot chat interface components.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/components/chat/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LinkIcon } from \"lucide-react\"\n\n<Cards>\n  <Card\n    title=\"<CopilotChat />\"\n    description=\"The CopilotChat component, providing a chat interface for interacting with your copilot.\"\n    href=\"/reference/components/chat/CopilotChat\"\n    icon={<LinkIcon />}\n  />\n  <Card\n    title=\"<CopilotPopup />\"\n    description=\"The CopilotPopup component, providing a popup interface for interacting with your copilot.\"\n    href=\"/reference/components/chat/CopilotPopup\"\n    icon={<LinkIcon />}\n  />\n  <Card\n    title=\"<CopilotSidebar />\"\n    description=\"The CopilotSidebar component, providing a sidebar interface for interacting with your copilot.\"\n    href=\"/reference/components/chat/CopilotSidebar\"\n    icon={<LinkIcon />}\n  />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Rendering CTA Cards for Generative UI Variants in JSX\nDESCRIPTION: This snippet creates a set of call-to-action cards using the CTACards component. It presents two main variants of Generative UI: Agentic and Tool-based, with descriptions and links to more information.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-crews/generative-ui/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<CTACards\n  columns={2}\n  cards={[\n    {\n      icon: Bot,\n      title: \"Agentic\",\n      description:\n        \"Render your agent's state, progress, and outputs with custom UI components.\",\n      href: \"/crewai-crews/generative-ui/agentic\",\n    },\n    {\n      icon: Wrench,\n      title: \"Tool-based\",\n      description: \"Render your agent's tool calls with custom UI components.\",\n      href: \"/crewai-crews/generative-ui/tool-based\",\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit Packages with npm\nDESCRIPTION: This command installs the necessary CopilotKit packages for React integration. The react-ui package provides UI components while react-core contains the core functionality for Copilot integration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_129\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @copilotkit/react-ui @copilotkit/react-core\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit Dependencies\nDESCRIPTION: Command to install the required npm packages for using CopilotKit React components.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @copilotkit/react-core @copilotkit/react-ui\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for OpenAI\nDESCRIPTION: Environment variable setup for OpenAI API key configuration in development and production environments.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/model-context-protocol.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Environment Variables\nDESCRIPTION: Example of environment variable to be set in the .env file for the UI, including the OpenAI API key.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-research-canvas/readme.md#2025-04-23_snippet_5\n\nLANGUAGE: env\nCODE:\n```\nOPENAI_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Creating Environment File for Agent\nDESCRIPTION: This snippet shows the content of the .env file needed for the agent, which includes the OpenAI API key.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-wait-user-input/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Creating Environment File for CopilotKit Configuration\nDESCRIPTION: Command to create a .env file in the project root. This file will store API keys for CopilotKit runtime configuration.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/copilot-fully-custom/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntouch .env\n```\n\n----------------------------------------\n\nTITLE: Querying LangGraph Agent Chatbot in Markdown\nDESCRIPTION: This snippet shows example questions to ask the LangGraph agent chatbot after integration. It demonstrates how to interact with the agent by asking for a joke, understanding AI, and opinions on React.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/quickstart/langgraph.mdx#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n```\nCan you tell me a joke?\n```\n\n```\nCan you help me understand AI?\n```\n\n```\nWhat do you think about React?\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Copilot Cloud Dev Server\nDESCRIPTION: Command to start the Copilot Cloud dev server for connecting to local LangGraph agents.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/quickstart/langgraph.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx copilotkit@latest dev --port 8000\n```\n\n----------------------------------------\n\nTITLE: Next.js Client Component Declaration\nDESCRIPTION: Shows how to declare a client component in Next.js App Router by adding the use client directive.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_51\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"use client\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Seeding Data for Python Backend (Shell)\nDESCRIPTION: These shell commands, intended to be run within the `agent-py` directory, install the project's Python dependencies using Poetry and then run a seeding script via Poetry. This prepares the backend environment for the customer support agent.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/langgraph-tutorial-customer-support/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npoetry install\npoetry run seed\n```\n\n----------------------------------------\n\nTITLE: Embedding Video with Custom Attributes in JSX\nDESCRIPTION: This code snippet demonstrates how to embed a video in a React component with specific attributes for autoplay, loop, and controls.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/predictive-state-updates.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<video src=\"/images/coagents/intermediate-state-render.mp4\" className=\"rounded-lg shadow-xl\" loop playsInline controls autoPlay muted />\n```\n\n----------------------------------------\n\nTITLE: Next.js App Router Client-Side Directive\nDESCRIPTION: Example showing how to use the 'use client' directive in Next.js App Router when using client-side hooks like useCopilotChatSuggestions.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for NextJS Application\nDESCRIPTION: Commands to navigate to the UI directory and install project dependencies using pnpm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/tutorials/ai-travel-app/step-1-checkout-repo.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd ui\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Agent Dependencies with Poetry\nDESCRIPTION: This command installs the required dependencies for the agent using Poetry package manager.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-wait-user-input/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd agent\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Installing Python Agent Dependencies\nDESCRIPTION: Commands to install dependencies for the Python agent using Poetry.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd agent-py\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering CopilotUI Component in MDX\nDESCRIPTION: Imports the CopilotUI component from snippets directory and renders it with components passed through props.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/custom-look-and-feel/built-in-ui-components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ConnectCopilotUI from \"@/snippets/copilot-ui.mdx\";\n\n<ConnectCopilotUI components={props.components} />\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: This snippet shows various package manager commands to start the Next.js development server. It includes options for npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-routing/ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Navigating to Example Directory\nDESCRIPTION: Command to navigate to the coagents-travel example directory containing the UI and agent components.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/tutorials/ai-travel-app/step-1-checkout-repo.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/coagents-travel\n```\n\n----------------------------------------\n\nTITLE: Running the Next.js UI Project\nDESCRIPTION: Command to start the Next.js development server for the UI.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa-native/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pip\nDESCRIPTION: Commands for setting up a virtual environment and installing dependencies using pip package manager.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/backend-actions/remote-backend-endpoint.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\npip install copilotkit fastapi uvicorn --extra-index-url https://copilotkit.gateway.scarf.sh/simple/\n```\n\n----------------------------------------\n\nTITLE: Launching CrewAI Flow Agent\nDESCRIPTION: Commands to install dependencies and start the CrewAI Flow agent server locally.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_99\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\npoetry lock\npoetry install\n# Start the server\npoetry run demo\n```\n\n----------------------------------------\n\nTITLE: Rendering Tailored Content for CopilotKit Hosting Options\nDESCRIPTION: This JSX snippet renders a TailoredContent component with two options for hosting CopilotKit: Copilot Cloud and Self-hosted. It uses custom components and icons to display information and steps for each option.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/snippets/llm-adapters.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<TailoredContent id=\"hosting\">\n  <TailoredContentOption\n    id=\"copilot-cloud\"\n    title=\"Copilot Cloud (Recommended)\"\n    description=\"Use our hosted backend endpoint to get started quickly (OpenAI only).\"\n    icon={<FaCloud />}\n  >\n  Configure the used LLM adapter [on your Copilot Cloud dashboard](https://cloud.copilotkit.ai/)!\n\n  </TailoredContentOption>\n\n  <TailoredContentOption\n    id=\"self-hosted\"\n    title=\"Self-hosting\"\n    description=\"Learn to host CopilotKit's runtime yourself with your own backend.\"\n    icon={<FaServer />}\n  >\n\n  <Steps>\n    <Step>\n    ## Find your CopilotRuntime instance\n    <FindYourCopilotRuntime components={props.components} />\n\n    </Step>\n\n    <Step>\n    ## Modify the used LLM Adapter\n\n    Use the example code below to tailor your CopilotRuntime instantiation to your desired llm adapter.\n\n    <SelfHostingCopilotRuntimeCreateEndpoint components={props.components} />\n    </Step>\n\n    <Step>\n    ## Make further customizations\n    See the reference documentation linked above for further customization parameters.\n    </Step>\n\n  </Steps>\n\n\n\n  </TailoredContentOption>\n</TailoredContent>\n```\n\n----------------------------------------\n\nTITLE: Starting the LangGraph Development Server (Bash)\nDESCRIPTION: Runs the LangGraph development server using `poetry run`. It binds the server to `localhost` on port `8000` and prevents it from automatically opening a browser tab. Assumes dependencies are installed and the `agent` directory is the current working directory.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/demo-viewer/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npoetry run langgraph dev --host localhost --port 8000 --no-browser\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server for the UI.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter-crewai-flows/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation Cards Component in JSX\nDESCRIPTION: JSX component that creates a grid of navigation cards for different Generative UI implementation approaches using the CTACards component.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/generative-ui/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CTACards\n  columns={2}\n  cards={[\n    {\n      icon: BotIcon,\n      title: \"Agentic\",\n      description:\n        \"Render your agent's state, progress, and outputs with custom UI components.\",\n      href: \"/crewai-flows/generative-ui/agentic\",\n    },\n    {\n      icon: WrenchIcon,\n      title: \"Tool-based\",\n      description: \"Render your agent's tool calls with custom UI components.\",\n      href: \"/crewai-flows/generative-ui/tool-based\",\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running Next.js UI in Development Mode - Shell Script\nDESCRIPTION: Starts the Next.js frontend UI in development mode using pnpm. Assumes all dependencies are previously installed and environment variables are set. This command allows testing of the UI at 'http://localhost:3000'. No additional parameters are required.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa-text/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing UI Dependencies with pnpm\nDESCRIPTION: Commands to navigate to the UI directory and install dependencies using pnpm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd ./ui\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Starting UI Development Server\nDESCRIPTION: Command to start the UI development server using pnpm.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-starter/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating .env File\nDESCRIPTION: Command to create a new .env file for storing environment variables.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/quickstart/langgraph.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntouch .env\n```\n\n----------------------------------------\n\nTITLE: Image Frame Component Implementation in JSX\nDESCRIPTION: React component implementation for displaying an infographic about agentic copilot human in the loop functionality.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/human-in-the-loop/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Frame className=\"my-0\">\n    <img src=\"/images/coagents/coagents-hitl-infographic.png\" alt=\"Agentic Copilot Human in the Loop\" className=\"mt-4 mb-0 shadow-md\" />\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Frame Component in JSX\nDESCRIPTION: JSX component for displaying a demo GIF of the Generative UI meeting scheduling agent feature.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/generative-ui/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Frame>\n  <img \n    src=\"/images/coagents/AgenticGenerativeUI.gif\" \n    className=\"my-0\" \n    alt=\"Demo of Generative UI showing a meeting scheduling agent\"\n  />\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Installing UI Dependencies with pnpm\nDESCRIPTION: Command to install the required dependencies for the UI component using pnpm package manager.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-travel/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd ./ui\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the application locally for development and testing.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-ai-researcher/ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Playwright Test Case - TypeScript\nDESCRIPTION: Provides a minimal example of a Playwright test in TypeScript that navigates to a web page and checks its title. Depends on the @playwright/test module. The 'test' function initializes a test block, while 'expect' is used for assertion. Parameter: 'page' (injected by Playwright) representing a browser page. Inputs: none directly (hardcoded URL). Output: Passes if the title matches /Example/, fails otherwise. Designed to be placed in a .spec.ts file within the tests directory.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/e2e/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from \"@playwright/test\";\\n\\ntest(\"basic test\", async ({ page }) => {\\n  await page.goto(\"https://example.com\");\\n  await expect(page).toHaveTitle(/Example/);\\n});\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the project locally for development and testing.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-qa-native/ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Demo Viewer (Bash)\nDESCRIPTION: Installs project dependencies using pnpm (`pnpm install`) and then starts the Next.js development server (`pnpm run dev`) from the project's root directory. Assumes pnpm is installed. The viewer will typically be accessible at http://localhost:3000.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/demo-viewer/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running the UI with Next.js\nDESCRIPTION: Command to start the Next.js development server for the UI component.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-travel/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running the Frontend UI (Shell)\nDESCRIPTION: These shell commands, executed within the `ui` directory, first install the project's Node.js dependencies using pnpm and then start the frontend development server using pnpm. This makes the user interface accessible.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/langgraph-tutorial-customer-support/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to run the Next.js development server for local testing.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/community/demos_2025/finance_ai.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running the Agent Demo\nDESCRIPTION: Command to run the demo of the agent component using Poetry.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-travel/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npoetry run demo\n```\n\n----------------------------------------\n\nTITLE: Cloning the CopilotKit Repository in Bash\nDESCRIPTION: Commands to fork, clone, and navigate to the CopilotKit repository. This is the first step in setting up your local development environment.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/(other)/contributing/code-contributions/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your-username>/CopilotKit\ncd CopilotKit/CopilotKit\n```\n\n----------------------------------------\n\nTITLE: Installing CopilotKit Packages with NPM\nDESCRIPTION: Command to install the core CopilotKit packages using NPM package manager.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/public/llms-full.txt#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @copilotkit/react-ui @copilotkit/react-core\n```\n\n----------------------------------------\n\nTITLE: Running the Python Backend Demo (Shell)\nDESCRIPTION: This shell command, executed within the `agent-py` directory, uses Poetry to run the main demo application for the backend customer support agent.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/langgraph-tutorial-customer-support/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npoetry run demo\n```\n\n----------------------------------------\n\nTITLE: Importing Components in React/JSX\nDESCRIPTION: This snippet shows the import statements for various components used in the page, including TailoredContent, CoAgentsEnterpriseCTA, and icons from react-icons.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/shared-state/predictive-state-updates.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  TailoredContent,\n  TailoredContentOption,\n} from \"@/components/react/tailored-content.tsx\";\nimport { CoAgentsEnterpriseCTA } from \"@/components/react/coagents/coagents-enterprise-cta.tsx\";\nimport InstallSDKSnippet from \"@/snippets/install-sdk.mdx\";\nimport { FaWrench } from \"react-icons/fa\";\nimport { FaArrowUp } from \"react-icons/fa\";\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Your Project with pnpm\nDESCRIPTION: This command installs project dependencies using pnpm, which is required for the global linking process to work properly.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/(other)/contributing/code-contributions/package-linking.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd your-project\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in JSX Header\nDESCRIPTION: Importing various UI components for the documentation page including ImageZoom, ExamplesCarousel, CTACards, and other React components used throughout the page.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ImageZoom } from 'fumadocs-ui/components/image-zoom';\nimport { ExamplesCarousel } from \"@/components/react/examples-carousel\";\nimport { CTACards } from \"@/components/react/cta-cards\";\nimport { YouTubeVideo } from \"@/components/react/youtube-video\";\n\nimport { MdMessage } from \"react-icons/md\";\nimport { TbSparkles } from \"react-icons/tb\";\nimport { SiLangchain } from \"react-icons/si\";\nimport { SiCrewai } from \"@icons-pack/react-simple-icons\";\nimport { FileSpreadsheet, Banknote, Plane, BookOpen, Telescope, Play } from \"lucide-react\";\n```\n\n----------------------------------------\n\nTITLE: Installing UV Package Manager\nDESCRIPTION: Command to install UV, a dependency management and package handling tool for Python projects. UV is required for setting up the Restaurant Finder Crew project.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/coagents-enterprise-crewai-crews/agent-py/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Features\n\n- Human In the Loop\n- Streaming Responses to your Frontend\n```\n\n----------------------------------------\n\nTITLE: Visualizing Copilot Runtime Communication Flow with Mermaid\nDESCRIPTION: This diagram illustrates the communication flow between @copilotkit/react-core, the Copilot Runtime, and the LLM. It shows how user messages are processed through the runtime and responses are returned.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/self-hosting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant core as @copilotkit/react-core\n  participant runtime as Copilot Runtime\n  participant llm as LLM\n\n  core->>runtime: \"Hey, my name is Uli.\"\n  runtime->>llm: Request\n  llm->>runtime: Response\n  runtime->>core: \"Hello Uli, how can I help you?\"\n```\n\n----------------------------------------\n\nTITLE: Cloning and Navigating Node.js Project Directory - Bash\nDESCRIPTION: This snippet demonstrates how to clone the repository from GitHub using Git and navigate to the Playwright example E2E test directory. Requires Git pre-installed and network access. User is expected to substitute with the correct repository URL if forking or cloning elsewhere.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/e2e/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/CopilotKit/CopilotKit.git\\ncd CopilotKit/examples/e2e\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Zoom Component in JSX\nDESCRIPTION: Demonstrates how to implement an image zoom component using the fumadocs-ui library to display a shared state demonstration gif.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/shared-state/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ImageZoom \n    src=\"/images/coagents/SharedStateCoAgents.gif\" \n    alt=\"Shared State Demo\" \n    width={1000} \n    height={1000} \n    className=\"rounded-lg shadow-lg border mt-0\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Viewing Playwright HTML Test Report - Bash\nDESCRIPTION: Runs the 'show-report' npm script to open the HTML report generated from the previous Playwright test run. Requires tests to have been executed and reports generated. Relies on the proper implementation of the script in package.json.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/e2e/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run show-report\n```\n\n----------------------------------------\n\nTITLE: Importing LLM Adapters Component in MDX\nDESCRIPTION: MDX import statement for including the LLM adapters documentation component with component props passing\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/(root)/guides/bring-your-own-llm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport LLMAdapters from \"@/snippets/llm-adapters.mdx\";\n\n<LLMAdapters components={props.components} />\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in React Component\nDESCRIPTION: This code snippet shows how to import and use a custom YouTubeVideo component in a React application. It sets the video ID and default playback rate for the embedded video.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/videos/research-canvas.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { YouTubeVideo } from \"@/components/react/youtube-video\";\n\n<YouTubeVideo videoId=\"0b6BVqPwqA0\" defaultPlaybackRate={1.25} />\n```\n\n----------------------------------------\n\nTITLE: HTML Navigation Buttons Layout\nDESCRIPTION: HTML structure for navigation buttons to Discord, documentation and cloud services with centered alignment\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/shared/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div align=\"center\">\n  <a href=\"https://discord.gg/6dffbvGU3D?ref=github_readme\" target=\"_blank\">\n    <img src=\"https://github.com/copilotkit/copilotkit/raw/main/assets/btn_discord.png\" alt=\"CopilotKit Discord\" height=\"40px\">\n  </a>\n  <a href=\"https://docs.copilotkit.ai?ref=github_readme\" target=\"_blank\">\n    <img src=\"https://github.com/copilotkit/copilotkit/raw/main/assets/btn_docs.png\" alt=\"CopilotKit GitHub\" height=\"40px\">\n  </a>\n  <a href=\"https://cloud.copilotkit.ai?ref=github_readme\" target=\"_blank\">\n    <img src=\"https://github.com/copilotkit/copilotkit/raw/main/assets/btn_cloud.png\" alt=\"CopilotKit GitHub\" height=\"40px\">\n  </a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Example App Configuration for Playwright - JSON\nDESCRIPTION: An example configuration file for Playwright tests defining a specific application under the key 'my_web_app'. Specifies the application URL, description for reporting, and custom project name for test organization. Ensures Playwright tests run against the correct environment.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/e2e/README.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"my_web_app\": {\\n    \"url\": \"https://staging.myapp.com\",\\n    \"description\": \"E-commerce web application\",\\n    \"projectName\": \"MyApp E2E Tests\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning CoAgents Starter Repo\nDESCRIPTION: Clone the CoAgents Starter repository for a quick start with CrewAI Flow agent.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/crewai-flows/quickstart/crewai.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/CopilotKit/CopilotKit\ncd CopilotKit/examples/coagents-starter-crewai-flows/agent-py\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Cards in JSX\nDESCRIPTION: This code snippet uses JSX to render a set of cards representing different sections of the CopilotKit API Reference. Each card includes a title, description, and a link to more detailed documentation for that section. The LinkIcon component is used as a visual indicator for the links.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/reference/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards>\n  <Card\n    title=\"UI Components\"\n    description=\"See the list of all available UI components in CopilotKit.\"\n    href=\"/reference/components/chat/CopilotChat\"\n    icon={<LinkIcon />}\n  />\n  <Card\n    title=\"Hooks\"\n    description=\"See the list of all available hooks in CopilotKit.\"\n    href=\"/reference/hooks/useCopilotReadable\"\n    icon={<LinkIcon />}\n  />\n  <Card\n    title=\"Classes\"\n    description=\"See the list of all available classes in CopilotKit.\"\n    href=\"/reference/classes/CopilotRuntime\"\n    icon={<LinkIcon />}\n  />\n  <Card\n    title=\"LLM Adapters\"\n    description=\"See the list of all available LLM Adapters in CopilotKit.\"\n    href=\"/reference/classes/llm-adapters/OpenAIAdapter\"\n    icon={<LinkIcon />}\n  />\n  <Card\n    title=\"SDKs\"\n    description=\"Python and JavaScript SDKs for CopilotKit.\"\n    href=\"/reference/sdk/python/LangGraph\"\n    icon={<LinkIcon />}\n  />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Icon Imports from React-Icons\nDESCRIPTION: Additional imports for Lucide icons used in the documentation UI components.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/docs/content/docs/coagents/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport {\n  LuPlane,\n  LuBookOpen,\n  LuLightbulb,\n  LuLayoutTemplate,\n  LuBrainCog,\n  LuUserCog,\n  LuWand2,\n  LuPlay,\n  LuMessageSquare,\n  LuWrench,\n} from \"react-icons/lu\";\nimport { CoAgentsExamples } from \"@/components/react/examples-carousel\";\nimport { CTACards } from \"@/components/react/cta-cards\";\nimport { FaSync } from \"react-icons/fa\";\nimport { Socials } from \"@/components/react/socials\";\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for New Demos (Plaintext)\nDESCRIPTION: Shows the required directory structure for creating a new demo. A folder named after the demo (`your-demo-name`) must be created inside the `agents/demo` directory.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/examples/demo-viewer/README.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nagents/demo/your-demo-name/\n```\n\n----------------------------------------\n\nTITLE: Agent State Management and Messaging Improvements\nDESCRIPTION: A patch that ensures agent state is set immediately and adds support for running an agent without messages.\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/runtime-client-gql/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- - Make sure agent state is set immediately (#1077)\n  - Support running an agent without messages (#1075)\n```\n\n----------------------------------------\n\nTITLE: Next Version Updates - Changelog Entry\nDESCRIPTION: Documents pre-release version updates and dependency changes\nSOURCE: https://github.com/copilotkit/copilotkit/blob/main/CopilotKit/packages/react-textarea/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.5.19-next.1\n\n### Patch Changes\n\n- Updated dependencies [0dd1ab9]\n  - @copilotkit/react-core@1.5.19-next.1\n  - @copilotkit/shared@1.5.19-next.1\n  - @copilotkit/runtime-client-gql@1.5.19-next.1\n```"
  }
]