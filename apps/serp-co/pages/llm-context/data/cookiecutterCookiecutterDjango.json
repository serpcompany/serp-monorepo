[
  {
    "owner": "cookiecutter",
    "repo": "cookiecutter-django",
    "content": "TITLE: Building Docker Stack with Docker Compose\nDESCRIPTION: Command to build the Docker stack for local development using docker-compose. This builds all the services defined in the docker-compose.local.yml file.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally-docker.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose -f docker-compose.local.yml build\n```\n\n----------------------------------------\n\nTITLE: Setting up Django Project on Heroku\nDESCRIPTION: A comprehensive bash script to deploy a cookiecutter-django project to Heroku. Includes creating a Heroku app, setting up PostgreSQL database, Redis, Mailgun, configuring essential environment variables, and pushing the project to Heroku.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/3-deployment/deployment-on-heroku.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nheroku create --buildpack heroku/python\n\n# Note: this is not a free plan\nheroku addons:create heroku-postgresql:essential-0\n\n# On Windows use double quotes for the time zone, e.g.\n# heroku pg:backups schedule --at \"02:00 America/Los_Angeles\" DATABASE_URL\nheroku pg:backups schedule --at '02:00 America/Los_Angeles' DATABASE_URL\nheroku pg:promote DATABASE_URL\n\nheroku addons:create heroku-redis:mini\n\n# Assuming you chose Mailgun as mail service (see below for others)\nheroku addons:create mailgun:starter\n\nheroku config:set DJANGO_DEBUG=False\nheroku config:set DJANGO_SETTINGS_MODULE=config.settings.production\nheroku config:set DJANGO_SECRET_KEY=\"$(openssl rand -base64 64)\"\n\n# Generating a 32 character-long random string without any of the visually similar characters \"IOl01\":\nheroku config:set DJANGO_ADMIN_URL=\"$(openssl rand -base64 4096 | tr -dc 'A-HJ-NP-Za-km-z2-9' | head -c 32)/\"\n\n# Set this to your Heroku app url, e.g. 'bionic-beaver-28392.herokuapp.com'\nheroku config:set DJANGO_ALLOWED_HOSTS=\n\n# Assign with AWS_ACCESS_KEY_ID\nheroku config:set DJANGO_AWS_ACCESS_KEY_ID=\n\n# Assign with AWS_SECRET_ACCESS_KEY\nheroku config:set DJANGO_AWS_SECRET_ACCESS_KEY=\n\n# Assign with AWS_STORAGE_BUCKET_NAME\nheroku config:set DJANGO_AWS_STORAGE_BUCKET_NAME=\n\ngit push heroku main\n\nheroku run python manage.py createsuperuser\n\nheroku run python manage.py check --deploy\n\nheroku open\n```\n\n----------------------------------------\n\nTITLE: Defining Core and Conditional Python Dependencies for Cookiecutter Django\nDESCRIPTION: This requirements file defines all necessary Python packages for a Cookiecutter Django project. It includes base dependencies like Django and Pillow, and conditional dependencies that are included based on template variables such as frontend_pipeline, use_docker, use_celery, use_async, and use_drf.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/requirements/base.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npython-slugify==8.0.4  # https://github.com/un33k/python-slugify\nPillow==11.1.0 # pyup: != 11.2.0  # https://github.com/python-pillow/Pillow\n{%- if cookiecutter.frontend_pipeline == 'Django Compressor' %}\n{%- if cookiecutter.windows == 'y' and cookiecutter.use_docker == 'n' %}\nrcssmin==1.1.2 --install-option=\"--without-c-extensions\"  # https://github.com/ndparker/rcssmin\n{%- else %}\nrcssmin==1.1.2  # https://github.com/ndparker/rcssmin\n{%- endif %}\n{%- endif %}\nargon2-cffi==23.1.0  # https://github.com/hynek/argon2_cffi\n{%- if cookiecutter.use_whitenoise == 'y' %}\nwhitenoise==6.9.0  # https://github.com/evansd/whitenoise\n{%- endif %}\nredis==5.2.1  # https://github.com/redis/redis-py\n{%- if cookiecutter.use_docker == \"y\" or cookiecutter.windows == \"n\" %}\nhiredis==3.1.0  # https://github.com/redis/hiredis-py\n{%- endif %}\n{%- if cookiecutter.use_celery == \"y\" %}\ncelery==5.5.0  # pyup: < 6.0  # https://github.com/celery/celery\ndjango-celery-beat==2.7.0  # https://github.com/celery/django-celery-beat\n{%- if cookiecutter.use_docker == 'y' %}\nflower==2.0.1  # https://github.com/mher/flower\n{%- endif %}\n{%- endif %}\n{%- if cookiecutter.use_async == 'y' %}\nuvicorn[standard]==0.34.0  # https://github.com/encode/uvicorn\nuvicorn-worker==0.3.0  # https://github.com/Kludex/uvicorn-worker\n{%- endif %}\n\n# Django\n# ------------------------------------------------------------------------------\ndjango==5.1.8  # pyup: < 5.2 # https://www.djangoproject.com/\ndjango-environ==0.12.0  # https://github.com/joke2k/django-environ\ndjango-model-utils==5.0.0  # https://github.com/jazzband/django-model-utils\ndjango-allauth[mfa]==65.7.0  # https://github.com/pennersr/django-allauth\ndjango-crispy-forms==2.3  # https://github.com/django-crispy-forms/django-crispy-forms\ncrispy-bootstrap5==2025.4  # https://github.com/django-crispy-forms/crispy-bootstrap5\n{%- if cookiecutter.frontend_pipeline == 'Django Compressor' %}\ndjango-compressor==4.5.1  # https://github.com/django-compressor/django-compressor\n{%- endif %}\ndjango-redis==5.4.0  # https://github.com/jazzband/django-redis\n{%- if cookiecutter.use_drf == 'y' %}\n# Django REST Framework\ndjangorestframework==3.16.0  # https://github.com/encode/django-rest-framework\ndjango-cors-headers==4.7.0  # https://github.com/adamchainz/django-cors-headers\n# DRF-spectacular for api documentation\ndrf-spectacular==0.28.0  # https://github.com/tfranzel/drf-spectacular\n{%- endif %}\n{%- if cookiecutter.frontend_pipeline == 'Webpack' %}\ndjango-webpack-loader==3.1.1  # https://github.com/django-webpack/django-webpack-loader\n{%- endif %}\n```\n\n----------------------------------------\n\nTITLE: Creating New Django Project from Template\nDESCRIPTION: Command to generate a new Django project using the Cookiecutter Django template from GitHub repository.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cookiecutter https://github.com/cookiecutter/cookiecutter-django\n```\n\n----------------------------------------\n\nTITLE: Generating a new cookiecutter-django project using command line\nDESCRIPTION: This command uses cookiecutter to generate a new Django project from the cookiecutter-django template on GitHub. It creates a project scaffold with all the necessary files and directory structure based on the template.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/generate-project-block.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cookiecutter gh:cookiecutter/cookiecutter-django\n```\n\n----------------------------------------\n\nTITLE: Installing Cookiecutter CLI\nDESCRIPTION: Command to install the Cookiecutter CLI tool version 1.7.0 or higher using pip package manager.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install \"cookiecutter>=1.7.0\"\n```\n\n----------------------------------------\n\nTITLE: Running the Django Development Server\nDESCRIPTION: Commands to start the Django development server either synchronously with runserver or asynchronously with uvicorn depending on the project configuration.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage.py runserver 0.0.0.0:8000\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ uvicorn config.asgi:application --host 0.0.0.0 --reload --reload-include '*.html'\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating a Python Virtual Environment\nDESCRIPTION: Commands to create a Python 3.12 virtual environment and activate it for isolating the project dependencies.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python3.12 -m venv <virtual env path>\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ source <virtual env path>/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running the Docker Stack for Local Development\nDESCRIPTION: Command to start the Docker containers for local development. This brings up both Django and PostgreSQL services.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally-docker.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose -f docker-compose.local.yml up\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Pre-commit Hooks\nDESCRIPTION: Commands to initialize a git repository and install pre-commit hooks. This ensures code quality checks run automatically before each commit.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally-docker.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git init\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migrations\nDESCRIPTION: Command to run Django migrations to set up the database schema required by the application.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Production\nDESCRIPTION: This snippet shows the command to build and run the Docker Compose stack for production. It includes variations for detached mode, running migrations, creating a superuser, and scaling services.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/3-deployment/deployment-with-docker.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.production.yml build\ndocker compose -f docker-compose.production.yml up\ndocker compose -f docker-compose.production.yml up -d\ndocker compose -f docker-compose.production.yml run --rm django python manage.py migrate\ndocker compose -f docker-compose.production.yml run --rm django python manage.py createsuperuser\ndocker compose -f docker-compose.production.yml run --rm django python manage.py shell\ndocker compose -f docker-compose.production.yml logs\ndocker compose -f docker-compose.production.yml up --scale django=4\ndocker compose -f docker-compose.production.yml up --scale celeryworker=2\ndocker compose -f docker-compose.production.yml ps\n```\n\n----------------------------------------\n\nTITLE: Specifying Production Dependencies for Django Project\nDESCRIPTION: This snippet defines the production dependencies for a Django project. It includes core packages like gunicorn and psycopg, and conditionally includes other packages based on project configuration such as cloud provider, mail service, and specific features like Sentry integration.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/requirements/production.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# PRECAUTION: avoid production dependencies that aren't in development\n\n-r base.txt\n\ngunicorn==23.0.0  # https://github.com/benoitc/gunicorn\npsycopg[c]==3.2.6  # https://github.com/psycopg/psycopg\n{%- if cookiecutter.use_whitenoise == 'n'and cookiecutter.cloud_provider in ('AWS', 'GCP') %}\nCollectfasta==3.2.1  # https://github.com/jasongi/collectfasta\n{%- endif %}\n{%- if cookiecutter.use_sentry == \"y\" %}\nsentry-sdk==2.25.1  # https://github.com/getsentry/sentry-python\n{%- endif %}\n{%- if cookiecutter.use_docker == \"n\" and cookiecutter.windows == \"y\" %}\nhiredis==3.1.0  # https://github.com/redis/hiredis-py\n{%- endif %}\n\n# Django\n# ------------------------------------------------------------------------------\n{%- if cookiecutter.cloud_provider == 'AWS' %}\ndjango-storages[s3]==1.14.6  # https://github.com/jschneier/django-storages\n{%- elif cookiecutter.cloud_provider == 'GCP' %}\ndjango-storages[google]==1.14.6  # https://github.com/jschneier/django-storages\n{%- elif cookiecutter.cloud_provider == 'Azure' %}\ndjango-storages[azure]==1.14.6  # https://github.com/jschneier/django-storages\n{%- endif %}\n{%- if cookiecutter.mail_service == 'Mailgun' %}\ndjango-anymail[mailgun]==13.0  # https://github.com/anymail/django-anymail\n{%- elif cookiecutter.mail_service == 'Amazon SES' %}\ndjango-anymail[amazon-ses]==13.0  # https://github.com/anymail/django-anymail\n{%- elif cookiecutter.mail_service == 'Mailjet' %}\ndjango-anymail[mailjet]==13.0  # https://github.com/anymail/django-anymail\n{%- elif cookiecutter.mail_service == 'Mandrill' %}\ndjango-anymail[mandrill]==13.0  # https://github.com/anymail/django-anymail\n{%- elif cookiecutter.mail_service == 'Postmark' %}\ndjango-anymail[postmark]==13.0  # https://github.com/anymail/django-anymail\n{%- elif cookiecutter.mail_service == 'Sendgrid' %}\ndjango-anymail[sendgrid]==13.0  # https://github.com/anymail/django-anymail\n{%- elif cookiecutter.mail_service == 'Brevo' %}\ndjango-anymail[brevo]==13.0  # https://github.com/anymail/django-anymail\n{%- elif cookiecutter.mail_service == 'SparkPost' %}\ndjango-anymail[sparkpost]==13.0  # https://github.com/anymail/django-anymail\n{%- elif cookiecutter.mail_service == 'Other SMTP' %}\ndjango-anymail==13.0  # https://github.com/anymail/django-anymail\n{%- endif %}\n```\n\n----------------------------------------\n\nTITLE: Restoring PostgreSQL from Existing Backup with Docker Compose\nDESCRIPTION: This command restores the PostgreSQL database from an existing backup file using Docker Compose. It executes the 'restore' command inside the postgres container with the specified backup file.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/4-guides/docker-postgres-backups.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.local.yml exec postgres restore backup_2018_03_13T09_05_07.sql.gz\n```\n\n----------------------------------------\n\nTITLE: Defining Development Dependencies for Cookiecutter Django Project\nDESCRIPTION: This requirements file extends the production requirements and specifies additional packages needed for development environments. It includes debugging tools, testing frameworks, documentation generators, and code quality tools with conditional inclusions based on project configuration options like Docker usage, async capabilities, and DRF implementation.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/requirements/local.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-r production.txt\n\nWerkzeug[watchdog]==3.1.3 # https://github.com/pallets/werkzeug\nipdb==0.13.13  # https://github.com/gotcha/ipdb\n{%- if cookiecutter.use_docker == 'y' %}\npsycopg[c]==3.2.6  # https://github.com/psycopg/psycopg\n{%- else %}\npsycopg[binary]==3.2.6  # https://github.com/psycopg/psycopg\n{%- endif %}\n{%- if cookiecutter.use_async == 'y' or cookiecutter.use_celery == 'y' %}\nwatchfiles==1.0.4  # https://github.com/samuelcolvin/watchfiles\n{%- endif %}\n\n# Testing\n# ------------------------------------------------------------------------------\nmypy==1.15.0  # https://github.com/python/mypy\ndjango-stubs[compatible-mypy]==5.1.3  # https://github.com/typeddjango/django-stubs\npytest==8.3.5  # https://github.com/pytest-dev/pytest\npytest-sugar==1.0.0  # https://github.com/Teemu/pytest-sugar\n{%- if cookiecutter.use_drf == \"y\" %}\ndjangorestframework-stubs==3.15.3  # https://github.com/typeddjango/djangorestframework-stubs\n{%- endif %}\n\n# Documentation\n# ------------------------------------------------------------------------------\nsphinx==8.2.3 # pyup: != 8.3.0  # https://github.com/sphinx-doc/sphinx\nsphinx-autobuild==2024.10.3 # https://github.com/GaretJax/sphinx-autobuild\n\n# Code quality\n# ------------------------------------------------------------------------------\nruff==0.11.4  # https://github.com/astral-sh/ruff\ncoverage==7.8.0  # https://github.com/nedbat/coveragepy\ndjlint==1.36.4  # https://github.com/Riverside-Healthcare/djLint\npre-commit==4.2.0  # https://github.com/pre-commit/pre-commit\n\n# Django\n# ------------------------------------------------------------------------------\nfactory-boy==3.3.2  # https://github.com/FactoryBoy/factory_boy\n\ndjango-debug-toolbar==5.1.0  # https://github.com/jazzband/django-debug-toolbar\ndjango-extensions==4.0  # https://github.com/django-extensions/django-extensions\ndjango-coverage-plugin==3.1.0  # https://github.com/nedbat/django_coverage_plugin\npytest-django==4.11.1  # https://github.com/pytest-dev/pytest-django\n```\n\n----------------------------------------\n\nTITLE: Creating Superuser Account in Django\nDESCRIPTION: Command to create a superuser account in the Django project. This allows administrative access to the application.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage.py createsuperuser\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a New Django App\nDESCRIPTION: Commands to create a new Django app, move it to the correct location within the project structure, and update its configuration to match the project's naming conventions.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage.py startapp <name-of-the-app>\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ mv <name-of-the-app> <django_project_root>/\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Database\nDESCRIPTION: Command to create a new PostgreSQL database using the createdb utility with the project slug as the database name.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ createdb --username=postgres <project_slug>\n```\n\n----------------------------------------\n\nTITLE: Initial Project Setup in PythonAnywhere\nDESCRIPTION: Commands to clone the repository and set up a Python virtual environment with required dependencies on PythonAnywhere.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/3-deployment/deployment-on-pythonanywhere.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone <my-repo-url>  # you can also use hg\ncd my-project-name\nmkvirtualenv --python=/usr/bin/python3.10 my-project-name\npip install -r requirements/production.txt  # may take a few minutes\n```\n\n----------------------------------------\n\nTITLE: Upgrading PostgreSQL with Docker Compose\nDESCRIPTION: This series of commands demonstrates the process of upgrading PostgreSQL in a Docker environment. It includes steps for stopping containers, creating a backup, removing the old data volume, rebuilding the postgres container, and restoring from backup.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/4-guides/docker-postgres-backups.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.local.yml down\ndocker compose -f docker-compose.local.yml up -d postgres\ndocker compose -f docker-compose.local.yml run --rm postgres backup\ndocker compose -f docker-compose.local.yml down\ndocker volume rm my_project_postgres_data\ndocker compose -f docker-compose.local.yml build postgres\ndocker compose -f docker-compose.local.yml up -d postgres\ndocker compose -f docker-compose.local.yml run --rm postgres restore backup_2018_03_13T09_05_07.sql.gz\ndocker compose -f docker-compose.local.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Database Connection\nDESCRIPTION: Command to set the DATABASE_URL environment variable for connecting to the PostgreSQL database using the appropriate credentials and database name.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ export DATABASE_URL=postgres://postgres:<password>@127.0.0.1:5432/<DB name given to createdb>\n```\n\n----------------------------------------\n\nTITLE: Running Pytest in Local Development Environment\nDESCRIPTION: Command to run all tests using Pytest in a local development environment. This will execute tests across the entire project.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/4-guides/testing.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest\n```\n\n----------------------------------------\n\nTITLE: Generating Django Secret Key\nDESCRIPTION: Python command to generate a secure random secret key for Django application.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/3-deployment/deployment-on-pythonanywhere.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -c 'import random;import string; print(\"\".join(random.SystemRandom().choice(string.digits + string.ascii_letters + string.punctuation) for _ in range(50)))'\n```\n\n----------------------------------------\n\nTITLE: Installing Development Requirements and Git Setup\nDESCRIPTION: Commands to navigate to the project directory, install development dependencies, initialize a git repository, and set up pre-commit hooks for code quality.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd <what you have entered as the project_slug at setup stage>\n$ pip install -r requirements/local.txt\n$ git init # A git repo is required for pre-commit to install\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: Commands to initialize a new Git repository, make the first commit, and push to a remote GitHub repository.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd reddit/\n$ ls\n$ git init\n$ git add .\n$ git commit -m \"first awesome commit\"\n$ git remote add origin git@github.com:pydanny/redditclone.git\n$ git push -u origin master\n```\n\n----------------------------------------\n\nTITLE: Running Django with ipdb Debugging Support\nDESCRIPTION: Command to run Django with service ports exposed to support interactive debugging with ipdb.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally-docker.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose -f docker-compose.local.yml run --rm --service-ports django\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Coverage in Django\nDESCRIPTION: Commands to run tests, check test coverage, and generate an HTML coverage report for the Django project.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ coverage run -m pytest\n$ coverage html\n$ open htmlcov/index.html\n```\n\n----------------------------------------\n\nTITLE: WSGI Configuration for PythonAnywhere\nDESCRIPTION: WSGI configuration file setup with environment variables and Django application initialization.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/3-deployment/deployment-on-pythonanywhere.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport sys\npath = '/home/<your-username>/<your-project-directory>'\nif path not in sys.path:\n    sys.path.append(path)\n\nos.environ['DJANGO_SETTINGS_MODULE'] = 'config.settings.production'\nos.environ['DJANGO_SECRET_KEY'] = '<as above>'\nos.environ['DJANGO_ALLOWED_HOSTS'] = '<as above>'\nos.environ['DJANGO_ADMIN_URL'] = '<as above>'\nos.environ['MAILGUN_API_KEY'] = '<as above>'\nos.environ['MAILGUN_DOMAIN'] = '<as above>'\nos.environ['DJANGO_AWS_ACCESS_KEY_ID'] = ''\nos.environ['DJANGO_AWS_SECRET_ACCESS_KEY'] = ''\nos.environ['DJANGO_AWS_STORAGE_BUCKET_NAME'] = ''\nos.environ['DATABASE_URL'] = '<as above>'\n\nfrom django.core.wsgi import get_wsgi_application\napplication = get_wsgi_application()\n```\n\n----------------------------------------\n\nTITLE: Uploading and Downloading PostgreSQL Backups to Amazon S3 with Docker Compose\nDESCRIPTION: These commands demonstrate how to upload and download PostgreSQL backups to/from Amazon S3 using the aws cli container with Docker Compose. It uses the default S3 environment variables.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/4-guides/docker-postgres-backups.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.production.yml run --rm awscli upload\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.production.yml run --rm awscli download backup_2018_03_13T09_05_07.sql.gz\n```\n\n----------------------------------------\n\nTITLE: Configuring Celery with Redis for Task Processing\nDESCRIPTION: Python code snippet showing how to configure Celery to use Redis as a broker instead of running tasks in the main thread during development.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nCELERY_TASK_ALWAYS_EAGER = False\n```\n\n----------------------------------------\n\nTITLE: Running Celery Worker in Django Project\nDESCRIPTION: Commands to run a Celery worker for background task processing in the Django project. Celery is used for handling asynchronous tasks.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd {{cookiecutter.project_slug}}\ncelery -A config.celery_app worker -l info\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Service\nDESCRIPTION: Commands to run the documentation service alone or combined with local services using Docker Compose.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally-docker.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose -f docker-compose.docs.yml up\n\n$ docker compose -f docker-compose.local.yml -f docker-compose.docs.yml up\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Backup with Docker Compose\nDESCRIPTION: This command creates a backup of the PostgreSQL database using Docker Compose. It executes the 'backup' command inside the postgres container.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/4-guides/docker-postgres-backups.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.local.yml exec postgres backup\n```\n\n----------------------------------------\n\nTITLE: Running Type Checks with Mypy in Django\nDESCRIPTION: Command to run type checks using mypy on the Django project. This helps catch type-related errors before runtime.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mypy {{cookiecutter.project_slug}}\n```\n\n----------------------------------------\n\nTITLE: Executing Django Management Commands in Docker\nDESCRIPTION: Commands to execute Django management commands like migrations and creating superuser inside the Docker container.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally-docker.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose -f docker-compose.local.yml run --rm django python manage.py migrate\n$ docker compose -f docker-compose.local.yml run --rm django python manage.py createsuperuser\n```\n\n----------------------------------------\n\nTITLE: Running Pytest with Docker\nDESCRIPTION: Command to run all tests using Pytest in a Docker-based development environment using the local Docker Compose configuration.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/4-guides/testing.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose -f docker-compose.local.yml run --rm django pytest\n```\n\n----------------------------------------\n\nTITLE: Generating Coverage Report\nDESCRIPTION: Command to generate and display a code coverage report after tests have been run with coverage tracking.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/4-guides/testing.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ coverage report\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Coverage in Docker\nDESCRIPTION: Command to run tests with code coverage analysis in a Docker environment using the local Docker Compose configuration.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/4-guides/testing.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose -f docker-compose.local.yml run --rm django coverage run -m pytest\n```\n\n----------------------------------------\n\nTITLE: Generating Coverage Report in Docker\nDESCRIPTION: Command to generate and display a code coverage report in a Docker environment after tests have been run with coverage tracking.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/4-guides/testing.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose -f docker-compose.local.yml run --rm django coverage report\n```\n\n----------------------------------------\n\nTITLE: Setting Up Mailpit for Email Testing\nDESCRIPTION: Commands to configure and run Mailpit, a Go-based email testing tool that captures emails sent during development without requiring external dependencies.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ chmod +x mailpit\n```\n\nLANGUAGE: bash\nCODE:\n```\n./mailpit\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Environment Variables Configuration\nDESCRIPTION: Example of environment variables in .envs/.local/.postgres file, showing host, database name, user, and password configuration.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally-docker.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# PostgreSQL\n# ------------------------------------------------------------------------------\nPOSTGRES_HOST=postgres\nPOSTGRES_DB=<your project slug>\nPOSTGRES_USER=XgOWtQtJecsAbaIyslwGvFvPawftNaqO\nPOSTGRES_PASSWORD=jSljDz4whHuwO3aJIgVBrqEml5Ycbghorep4uVJ4xjDYQu0LfuTZdctj7y0YcCLu\n```\n\n----------------------------------------\n\nTITLE: Running Redis Server and Celery Worker\nDESCRIPTION: Commands to start a Redis server for use with Celery and to run a Celery worker that processes background tasks for the Django application.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-server\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ celery -A config.celery_app worker --loglevel=info\n```\n\n----------------------------------------\n\nTITLE: Logging Error to Sentry in Python\nDESCRIPTION: This snippet demonstrates how to log an error and send it as a Sentry event in Python. It includes an example of adding extra context information to the log.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/3-deployment/deployment-with-docker.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlogging.error(\"This event is sent to Sentry\", extra={\"<example_key>\": \"<example_value>\"})\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack DevServer for HTTPS\nDESCRIPTION: JavaScript configuration snippet for webpack's devServer section that enables WebSocket connections with the secure setup. This allows hot module replacement to work properly with the HTTPS proxy.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally-docker.rst#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nclient: {\n  webSocketURL: 'auto://0.0.0.0:0/ws', // note the `:0` after `0.0.0.0`\n},\n```\n\n----------------------------------------\n\nTITLE: Django Management Commands for Deployment\nDESCRIPTION: Commands to run migrations, collect static files, and compress assets for deployment.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/3-deployment/deployment-on-pythonanywhere.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsource $VIRTUAL_ENV/bin/postactivate\npython manage.py migrate\npython manage.py collectstatic\n# if using django-compressor:\npython manage.py compress\n# and, optionally\npython manage.py createsuperuser\n```\n\n----------------------------------------\n\nTITLE: Setting Up Frontend Development with Node.js\nDESCRIPTION: Commands to install JavaScript dependencies and start the development server for projects using Webpack or Gulp as the frontend pipeline, enabling live reloading and Sass compilation.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Viewing Existing PostgreSQL Backups with Docker Compose\nDESCRIPTION: This command lists existing backups in the postgres container using Docker Compose. It executes the 'backups' command to show the contents of the /backups directory.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/4-guides/docker-postgres-backups.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.local.yml exec postgres backups\n```\n\n----------------------------------------\n\nTITLE: Running Ruff linting and formatting without modifications\nDESCRIPTION: Commands to run Ruff's formatter and linter in non-destructive mode. The formatter shows differences that would be made, while the linter reports issues without fixing them.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/4-guides/linters.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ruff format --diff .\n$ ruff check .\n```\n\n----------------------------------------\n\nTITLE: Copying PostgreSQL Backups Locally with Docker\nDESCRIPTION: These commands demonstrate how to copy backups from the postgres container to a local directory using the docker cp command. It includes examples for copying all backups and a single backup file.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/4-guides/docker-postgres-backups.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker cp 9c5c3f055843:/backups ./backups\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker cp 9c5c3f055843:/backups/backup_2018_03_13T09_05_07.sql.gz .\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker cp $(docker compose -f docker-compose.local.yml ps -q postgres):/backups ./backups\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Coverage\nDESCRIPTION: Command to run tests with code coverage analysis. This executes Pytest while tracking which lines of code are executed during testing.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/4-guides/testing.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ coverage run -m pytest\n```\n\n----------------------------------------\n\nTITLE: Clearing Docker Cache for Local Development Environment\nDESCRIPTION: Command to clear project-related Docker cache including volumes and images. This resolves authentication issues caused by persisted volumes with outdated credentials.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/5-help/troubleshooting.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.local.yml down --volumes --rmi all\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Docker Images After Dependencies Change\nDESCRIPTION: Commands to rebuild Docker images and restart containers after adding a new Python package to the requirements files.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally-docker.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.local.yml build\ndocker compose -f docker-compose.local.yml up\n```\n\n----------------------------------------\n\nTITLE: Building and Serving HTML Documentation Locally in Bash\nDESCRIPTION: Command to build and serve HTML documentation using Sphinx for local development without Docker. This command should be run from the project directory.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/4-guides/document.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ make -C docs livehtml\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Service Configuration in Docker Compose\nDESCRIPTION: YAML configuration for the PostgreSQL service in docker-compose.local.yml, showing volume mounts and environment file configuration.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally-docker.rst#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\n\npostgres:\n  build:\n    context: .\n    dockerfile: ./compose/production/postgres/Dockerfile\n  volumes:\n    - local_postgres_data:/var/lib/postgresql/data\n    - local_postgres_data_backups:/backups\n  env_file:\n    - ./.envs/.local/.postgres\n\n# ...\n```\n\n----------------------------------------\n\nTITLE: Setting COMPOSE_FILE Environment Variable\nDESCRIPTION: Commands to set the COMPOSE_FILE environment variable to avoid specifying the compose file each time and then run the stack.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally-docker.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ export COMPOSE_FILE=docker-compose.local.yml\n\n$ docker compose up\n```\n\n----------------------------------------\n\nTITLE: Enabling Celery Worker on Heroku\nDESCRIPTION: Command to scale up a Celery worker dyno to 1 instance on Heroku. This is needed to run asynchronous tasks in a cookiecutter-django project that uses Celery.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/3-deployment/deployment-on-heroku.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Scale dyno to 1 instance\nheroku ps:scale worker=1\n```\n\n----------------------------------------\n\nTITLE: Testing Celery Tasks Using Django Shell\nDESCRIPTION: Commands to enter the Django shell, import a task, and queue it for execution by the Celery worker for testing purposes.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage.py shell\n>> from <project_slug>.users.tasks import get_users_count\n>> get_users_count.delay()\n```\n\n----------------------------------------\n\nTITLE: Running Docker Stack in Detached Mode\nDESCRIPTION: Command to run the Docker stack in detached (background) mode, which allows you to continue using the terminal for other commands.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally-docker.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Setting up Sentry Error Tracking on Heroku\nDESCRIPTION: Commands to enable Sentry error tracking for a Django application on Heroku. Provides two options: installing via Heroku add-on or configuring with an existing Sentry DSN.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/3-deployment/deployment-on-heroku.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nheroku addons:create sentry:f1\n```\n\nLANGUAGE: bash\nCODE:\n```\nheroku config:set SENTRY_DSN=https://xxxx@sentry.io/12345\n```\n\n----------------------------------------\n\nTITLE: Merging Production Environment Variables\nDESCRIPTION: Command to merge production environment variables from separate files into a single .env file using the provided Python script.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally-docker.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ python merge_production_dotenvs_in_dotenv.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Buildpacks for Frontend Pipeline\nDESCRIPTION: Command to add Node.js buildpack to Heroku for projects using Gulp or Webpack as frontend pipeline. This allows Heroku to run npm commands for SASS compilation and JS bundling during deployment.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/3-deployment/deployment-on-heroku.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nheroku buildpacks:add --index 1 heroku/nodejs\n```\n\n----------------------------------------\n\nTITLE: Running Celery Beat Scheduler in Django Project\nDESCRIPTION: Commands to run the Celery beat scheduler for periodic tasks in the Django project. This can be run as a standalone process or embedded in a worker.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd {{cookiecutter.project_slug}}\ncelery -A config.celery_app beat\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd {{cookiecutter.project_slug}}\ncelery -A config.celery_app worker -B -l info\n```\n\n----------------------------------------\n\nTITLE: Running Pytest for a Specific App\nDESCRIPTION: Command to run tests for a specific app rather than the entire project. This allows for targeted testing of individual components.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/4-guides/testing.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest <path-to-app-in-project/app>\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Pytest in Django\nDESCRIPTION: Command to run tests using pytest in the Django project.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest\n```\n\n----------------------------------------\n\nTITLE: Running Ruff with automatic fixes\nDESCRIPTION: Commands to run Ruff's formatter and linter with automatic fixes applied. Includes a caution about the unsafe-fixes option which can potentially break code and recommends committing before running these commands.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/4-guides/linters.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ruff format  .\n$ ruff check --fix .\n# be careful with the --unsafe-fixes option, it can break your code\n$ ruff check --fix --unsafe-fixes  .\n```\n\n----------------------------------------\n\nTITLE: Generating Translation Files in Django (Bash)\nDESCRIPTION: This command generates django.po files for all configured languages in the project. It uses docker-compose if the project is set up with Docker.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/locale/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n{% if cookiecutter.use_docker == 'y' %}docker compose -f docker-compose.local.yml run --rm django {% endif %}python manage.py makemessages --all --no-location\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Environment variables setup in virtualenv postactivate script for Django settings.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/3-deployment/deployment-on-pythonanywhere.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport WEB_CONCURRENCY=4\nexport DJANGO_SETTINGS_MODULE='config.settings.production'\nexport DJANGO_SECRET_KEY='<secret key goes here>'\nexport DJANGO_ALLOWED_HOSTS='<www.your-domain.com>'\nexport DJANGO_ADMIN_URL='<not admin/>'\nexport MAILGUN_API_KEY='<mailgun key>'\nexport MAILGUN_DOMAIN='<mailgun sender domain (e.g. mg.yourdomain.com)>'\nexport DJANGO_AWS_ACCESS_KEY_ID=\nexport DJANGO_AWS_SECRET_ACCESS_KEY=\nexport DJANGO_AWS_STORAGE_BUCKET_NAME=\nexport DATABASE_URL='<see Database setup section below>'\nexport REDIS_URL='<see Redis section below>'\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Container Logs and Processes\nDESCRIPTION: Commands to check logs and running processes of a specific Docker container using container_name.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally-docker.rst#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ docker logs <project_slug>_local_celeryworker\n$ docker top <project_slug>_local_celeryworker\n```\n\n----------------------------------------\n\nTITLE: Removing PostgreSQL Backup with Docker Compose\nDESCRIPTION: This command removes a specific backup file from the /backups directory in the postgres container using Docker Compose. It executes the 'rmbackup' command with the specified backup file name.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/4-guides/docker-postgres-backups.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.local.yml exec postgres rmbackup backup_2018_03_13T09_05_07.sql.gz\n```\n\n----------------------------------------\n\nTITLE: Running Tox Tests for Cookiecutter Django in Python\nDESCRIPTION: This command runs the test suite for the Cookiecutter Django template using Tox and the current Python version. It uses uv to manage the environment.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ uv run tox run -e py\n```\n\n----------------------------------------\n\nTITLE: Building Documentation without Docker\nDESCRIPTION: Command to build and serve documentation locally without Docker, to be run from within the docs directory. This enables live reloading as documentation files are changed.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/docs/howto.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake livehtml\n```\n\n----------------------------------------\n\nTITLE: Running Specific Pytest Tests for Cookiecutter Django\nDESCRIPTION: This command demonstrates how to run a specific test using Tox and Pytest. It passes additional options to Pytest after the '--' separator.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ uv run tox run -e py -- -k test_default_configuration\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Docker\nDESCRIPTION: Command to build and serve documentation using Docker Compose, specified in the local Docker Compose configuration file. This containerizes the documentation build process.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/docs/howto.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.local.yml up docs\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtual Environment for Cookiecutter Django Tests\nDESCRIPTION: These commands create and activate a virtual environment for running the generated project tests. This is necessary before running the test scripts.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m venv venv\n$ source venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure for Django Project\nDESCRIPTION: Sets up the basic structure for Sphinx documentation including table of contents tree with conditional includes for PyCharm configuration and user documentation. Uses reStructuredText format with Sphinx directives.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. {{ cookiecutter.project_name }} documentation master file, created by\n   sphinx-quickstart.\n   You can adapt this file completely to your liking, but it should at least\n   contain the root `toctree` directive.\n\nWelcome to {{ cookiecutter.project_name }}'s documentation!\n======================================================================\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   howto{% if cookiecutter.editor == 'PyCharm' %}\n   pycharm/configuration{% endif %}\n   users\n\n\n\nIndices and tables\n==================\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n```\n\n----------------------------------------\n\nTITLE: Running Bare Metal Tests for Cookiecutter Django Project\nDESCRIPTION: This command runs the test script for the generated Cookiecutter Django project without using Docker. It allows passing additional arguments to the cookiecutter CLI.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ tests/test_bare.sh use_celery=y\n```\n\n----------------------------------------\n\nTITLE: Supervisor Configuration for Django Docker Deployment\nDESCRIPTION: This snippet provides a sample Supervisor configuration file for managing the Docker Compose deployment of a Django project. It ensures the application restarts automatically and survives system reboots.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/3-deployment/deployment-with-docker.rst#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[program:{{cookiecutter.project_slug}}]\ncommand=docker compose -f docker-compose.production.yml up\ndirectory=/path/to/{{cookiecutter.project_slug}}\nredirect_stderr=true\nautostart=true\nautorestart=true\npriority=10\n```\n\n----------------------------------------\n\nTITLE: Viewing Postgres Authentication Failure Logs in Docker\nDESCRIPTION: Example log output when Postgres authentication fails due to password mismatch between regenerated projects. This happens when Docker preserves volumes but credentials are regenerated.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/5-help/troubleshooting.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgres_1      | 2018-06-07 19:11:23.963 UTC [81] FATAL:  password authentication failed for user \"pydanny\"\npostgres_1      | 2018-06-07 19:11:23.963 UTC [81] DETAIL:  Password does not match for user \"pydanny\".\npostgres_1      | \tConnection matched pg_hba.conf line 95: \"host all all all md5\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Proxy Service in Docker Compose\nDESCRIPTION: YAML configuration for adding an nginx-proxy service to docker-compose.local.yml. This service handles HTTPS requests and forwards them to the appropriate container, enabling secure local development.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally-docker.rst#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nnginx-proxy:\n  image: jwilder/nginx-proxy:alpine\n  container_name: nginx-proxy\n  ports:\n    - \"80:80\"\n    - \"443:443\"\n  volumes:\n    - /var/run/docker.sock:/tmp/docker.sock:ro\n    - ./certs:/etc/nginx/certs\n  restart: always\n  depends_on:\n    - node\n  environment:\n    - VIRTUAL_HOST=my-dev-env.local\n    - VIRTUAL_PORT=3000\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Warning Messages in Docker\nDESCRIPTION: Example warning logs showing missing environment variables when using Docker with Webpack without Whitenoise. These warnings appear when required AWS storage variables aren't configured.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/5-help/troubleshooting.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nWARN[0000] The \"DJANGO_AWS_STORAGE_BUCKET_NAME\" variable is not set. Defaulting to a blank string.\nWARN[0000] The \"DJANGO_AWS_S3_CUSTOM_DOMAIN\" variable is not set. Defaulting to a blank string.\n```\n\n----------------------------------------\n\nTITLE: Updating Django ALLOWED_HOSTS for HTTPS Development\nDESCRIPTION: Python code snippet to add a custom domain to Django's ALLOWED_HOSTS setting in the local configuration. This allows Django to accept requests from the secure local development domain.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally-docker.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nALLOWED_HOSTS = [\"localhost\", \"0.0.0.0\", \"127.0.0.1\", \"my-dev-env.local\"]\n```\n\n----------------------------------------\n\nTITLE: Including external Contributing documentation with Sphinx\nDESCRIPTION: This snippet demonstrates the Sphinx directive for including an external markdown file (CONTRIBUTING.md) in the documentation. The directive pulls in content from a file located at '../../CONTRIBUTING.md'.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/6-about/contributing.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{include} ../../CONTRIBUTING.md\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Docker Application with Local Compose File\nDESCRIPTION: Command to rebuild and restart the Docker application with the local docker-compose file. This applies the HTTPS configuration changes to the running environment.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally-docker.rst#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose -f docker-compose.local.yml up -d --build\n```\n\n----------------------------------------\n\nTITLE: Building and Serving HTML Documentation with Docker Compose\nDESCRIPTION: Command to build and serve HTML documentation using Docker Compose. This is used when developing locally with Docker.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/4-guides/document.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose -f docker-compose.docs.yml up\n```\n\n----------------------------------------\n\nTITLE: Handling Modified PyCharm Configuration Files in Git\nDESCRIPTION: Command to make Git ignore changes to PyCharm configuration files while preserving the original configurations in the repository for other users. This prevents constant tracking of auto-generated IDE files.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/docs/pycharm/configuration.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git update-index --assume-unchanged {{cookiecutter.project_slug}}.iml\n```\n\n----------------------------------------\n\nTITLE: Future Deployment Commands\nDESCRIPTION: Commands for subsequent deployments after initial setup.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/3-deployment/deployment-on-pythonanywhere.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nworkon my-virtualenv-name\ncd project-directory\ngit pull\npython manage.py migrate\npython manage.py collectstatic\n# if using django-compressor:\npython manage.py compress\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation from Docstrings\nDESCRIPTION: Command to automatically compile all docstrings into documentation source files using Sphinx's apidoc functionality. This creates documentation from code comments.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/docs/howto.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake apidocs\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Version Selection\nDESCRIPTION: Made PostgreSQL versions selectable, with a minimum version of 9.2 supported by Heroku and Django.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\nPostgreSQL\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation with Docker\nDESCRIPTION: Command to run the apidocs generation within a Docker container, useful for maintaining consistency across development environments when generating documentation from docstrings.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/docs/howto.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm docs make apidocs\n```\n\n----------------------------------------\n\nTITLE: Updating Docker Compose Configuration\nDESCRIPTION: Updated Docker configuration to use docker-compose format v2.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\ndocker-compose\n```\n\n----------------------------------------\n\nTITLE: Running Mailpit for Local Email Testing\nDESCRIPTION: Command to run Mailpit, a local SMTP server with a web interface for testing email functionality in development.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ chmod +x mailpit\n./mailpit\n```\n\n----------------------------------------\n\nTITLE: Example of a Translated String in Django (PO)\nDESCRIPTION: This snippet shows an example of a translated string in a django.po file. It includes the original string (msgid) and its translation (msgstr).\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/locale/README.md#2025-04-21_snippet_1\n\nLANGUAGE: po\nCODE:\n```\nmsgid \"users\"\nmsgstr \"utilisateurs\"\n```\n\n----------------------------------------\n\nTITLE: Updating Django Manage.py Script\nDESCRIPTION: Updated manage.py to use the same code as manage.py from Django 1.10.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\nmanage.py\n```\n\n----------------------------------------\n\nTITLE: Running Django's Built-in Unit Tests\nDESCRIPTION: Command to run tests using Django's built-in unittest framework instead of Pytest. This uses Django's test runner directly.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/4-guides/testing.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage.py test\n```\n\n----------------------------------------\n\nTITLE: Adding Mailgun Sender Domain Setting\nDESCRIPTION: Added new setting MAILGUN_SENDER_DOMAIN to allow sending mail from any domain other than those registered with Mailgun.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\nMAILGUN_SENDER_DOMAIN\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Debug Toolbar URL Patterns\nDESCRIPTION: Added urlpatterns configuration to django-debug-toolbar, because the automatic configuration was removed.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\nurlpatterns\n```\n\n----------------------------------------\n\nTITLE: Updating Django Middleware Configuration\nDESCRIPTION: Renamed MIDDLEWARE_CLASSES to MIDDLEWARE to enable support for new style middleware introduced in Django 1.10.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\nMIDDLEWARE_CLASSES\n```\n\nLANGUAGE: Markdown\nCODE:\n```\nMIDDLEWARE\n```\n\n----------------------------------------\n\nTITLE: Updating Django Admin URL Configuration\nDESCRIPTION: Changed 'admin' URL in config/urls.py to match the URL generated by Django 1.10.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\nconfig/urls.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Auth Password Validators\nDESCRIPTION: Added default AUTH_PASSWORD_VALIDATORS configuration generated by Django 1.10 startproject.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\nAUTH_PASSWORD_VALIDATORS\n```\n\n----------------------------------------\n\nTITLE: Using Django App Registry for Celery Tasks\nDESCRIPTION: Changed to use app registry instead of INSTALLED_APPS to discover Celery tasks.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\nINSTALLED_APPS\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: Standard markdown format used for changelog entries showing version numbers, dates, and categorized changes\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 2022.01.13\n\n### Changed\n- Add UserSignupForm and UserSocialSignupForm ([#3515](https://github.com/cookiecutter/cookiecutter-django/pull/3515))\n### Fixed\n- Fix high CPU usage when running `runserver_plus` in Docker ([#3531](https://github.com/cookiecutter/cookiecutter-django/pull/3531))\n- Fix out-of-sync sequence for Site ID ([#3511](https://github.com/cookiecutter/cookiecutter-django/pull/3511))\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: A visual representation of the recommended two-tier project layout with repository root containing configuration files and Django project root containing the actual applications.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally.rst#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n<repository_root>/\n├── config/\n│   ├── settings/\n│   │   ├── __init__.py\n│   │   ├── base.py\n│   │   ├── local.py\n│   │   └── production.py\n│   ├── urls.py\n│   └── wsgi.py\n├── <django_project_root>/\n│   ├── <name_of_the_app>/\n│   │   ├── migrations/\n│   │   ├── admin.py\n│   │   ├── apps.py\n│   │   ├── models.py\n│   │   ├── tests.py\n│   │   └── views.py\n│   ├── __init__.py\n│   └── ...\n├── requirements/\n│   ├── base.txt\n│   ├── local.txt\n│   └── production.txt\n├── manage.py\n├── README.md\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Markdown\nDESCRIPTION: A changelog entry formatted in Markdown documenting version updates, dependency changes and other improvements to the cookiecutter-django project template.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Updated\n- Update django to 3.2.13 ([#3676](https://github.com/cookiecutter/cookiecutter-django/pull/3676))\n\n## 2022.04.08\n\n### Updated\n- Auto-update pre-commit hooks ([#3673](https://github.com/cookiecutter/cookiecutter-django/pull/3673))\n```\n\n----------------------------------------\n\nTITLE: Activating a Docker Machine\nDESCRIPTION: Command to activate a specific Docker machine (dev1) using the eval command, which configures the current shell to use that machine.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/2-local-development/developing-locally-docker.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ eval \"$(docker-machine env dev1)\"\n```\n\n----------------------------------------\n\nTITLE: Django Issue Checker Workflow Limitation Example\nDESCRIPTION: Code snippet showing an example of a limitation in the Django issue checker workflow script. It highlights how the workflow creates issues for Django version compatibility tracking.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/6-about/maintainer-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- When a new dependency is added to the template, the script fails to update an existing issue\n- Not sure what happens when a deps is removed\n- ~~Unable to parse classifiers without minor version~~\n- ~~Creates an issue even if we are on the latest version~~\n```\n\n----------------------------------------\n\nTITLE: Including Production Requirements for Heroku Deployment\nDESCRIPTION: This code imports the production requirements file that contains all necessary dependencies for running the Django application in a production environment on Heroku.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-r requirements/production.txt\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using WebSockets in JavaScript with cookiecutter-django\nDESCRIPTION: This JavaScript example demonstrates how to establish a WebSocket connection to a cookiecutter-django server, set up a message handler, and send/receive messages. It shows both local development and production connection patterns.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/docs/4-guides/websocket.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nws = new WebSocket('ws://localhost:8000/') // or 'wss://<mydomain.com>/' in prod\nWebSocket {url: \"ws://localhost:8000/\", readyState: 0, bufferedAmount: 0, onopen: null, onerror: null, …}\nws.onmessage = event => console.log(event.data)\nevent => console.log(event.data)\nws.send(\"ping\")\nundefined\npong!\n```\n\n----------------------------------------\n\nTITLE: Project Generation Interactive Prompts\nDESCRIPTION: Example of the interactive prompt session when generating a new project, showing available options and sample responses for creating a Reddit clone application.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nCloning into 'cookiecutter-django'...\nremote: Counting objects: 550, done.\nremote: Compressing objects: 100% (310/310), done.\nremote: Total 550 (delta 283), reused 479 (delta 222)\nReceiving objects: 100% (550/550), 127.66 KiB | 58 KiB/s, done.\nResolving deltas: 100% (283/283), done.\nproject_name [My Awesome Project]: Reddit Clone\nproject_slug [reddit_clone]: reddit\ndescription [Behold My Awesome Project!]: A reddit clone.\nauthor_name [Daniel Roy Greenfeld]: Daniel Greenfeld\ndomain_name [example.com]: myreddit.com\nemail [daniel-greenfeld@example.com]: pydanny@gmail.com\nversion [0.1.0]: 0.0.1\n[...additional configuration options...]\n```\n\n----------------------------------------\n\nTITLE: Inserting Author Name in Cookiecutter Django Template\nDESCRIPTION: This snippet uses a Cookiecutter variable to insert the author's name into a generated file. It's typically used in template files to personalize the output with the project creator's information.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/CONTRIBUTORS.txt#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ cookiecutter.author_name }}\n```\n\n----------------------------------------\n\nTITLE: Compiling Translation Messages in Django (Bash)\nDESCRIPTION: This command compiles the translated .po files into .mo files, which are used by the application. It uses docker-compose if the project is set up with Docker.\nSOURCE: https://github.com/cookiecutter/cookiecutter-django/blob/master/{{cookiecutter.project_slug}}/locale/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{% if cookiecutter.use_docker == 'y' %}docker compose -f docker-compose.local.yml run --rm django {% endif %}python manage.py compilemessages\n```"
  }
]