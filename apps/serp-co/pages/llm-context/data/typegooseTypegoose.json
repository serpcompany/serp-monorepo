[
  {
    "owner": "typegoose",
    "repo": "typegoose",
    "content": "TITLE: Basic Typegoose Model Definition and Usage\nDESCRIPTION: Demonstrates basic usage of Typegoose by creating a User model with decorated properties and shows how to connect to MongoDB and perform basic operations.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prop, getModelForClass } from '@typegoose/typegoose';\nimport mongoose from 'mongoose';\n\nclass User {\n  @prop()\n  public name?: string;\n\n  @prop({ type: () => [String] })\n  public jobs?: string[];\n}\n\nconst UserModel = getModelForClass(User);\n\n(async () => {\n  await mongoose.connect('mongodb://localhost:27017/', { dbName: 'test' });\n\n  const { _id: id } = await UserModel.create({ name: 'JohnDoe', jobs: ['Cleaner'] });\n  const user = await UserModel.findById(id).exec();\n\n  console.log(user);\n})();\n```\n\n----------------------------------------\n\nTITLE: Using Typegoose Class-Based Model Definition in TypeScript\nDESCRIPTION: This snippet shows how to define Mongoose models using Typegoose classes and decorators. It demonstrates primitive properties, subdocuments, and references with proper TypeScript typing.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/quick-start-guide.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Job {\n  @prop()\n  public title?: string;\n\n  @prop()\n  public position?: string;\n}\n\nclass Car {\n  @prop()\n  public model?: string;\n}\n\nclass User {\n  @prop()\n  public name?: string;\n\n  @prop({ required: true })\n  public age!: number; // This is a single Primitive\n\n  @prop({ type: () => [String] })\n  public preferences?: string[]; // This is a Primitive Array\n\n  @prop()\n  public mainJob?: Job; // This is a single SubDocument\n\n  @prop({ type: () => [Job] })\n  public jobs?: Job[]; // This is a SubDocument Array\n\n  @prop({ ref: () => Car })\n  public mainCar?: Ref<Car>; // This is a single Reference\n\n  @prop({ ref: () => Car })\n  public cars?: Ref<Car>[]; // This is a Reference Array\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring References with @prop in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the 'ref' option with @prop to set up references between models. It shows both single and array reference examples, using both class and string-based references.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass Kitten {\n  @prop()\n  public name?: string;\n}\n\nclass Cat {\n  // single examples\n  @prop({ ref: () => Kitten })\n  public kitten?: Ref<Kitten>;\n  // or\n  @prop({ ref: 'Kitten' })\n  public kitten?: Ref<Kitten>;\n\n  // array examples\n  @prop({ ref: () => Kitten })\n  public kittens?: Ref<Kitten>[];\n  // or\n  @prop({ ref: 'Kitten' })\n  public kittens?: Ref<Kitten>[];\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Traditional Mongoose Model to Typegoose in TypeScript\nDESCRIPTION: A comparison showing how to convert a traditional Mongoose schema and model to a Typegoose class with proper TypeScript type definitions.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/quick-start-guide.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst kittenSchema = new mongoose.Schema({\n  name: String\n});\n\nconst KittenModel = mongoose.model('Kitten', kittenSchema);\n\nlet document = await KittenModel.create({ name: 'Kitty' });\n// \"document\" has basic mongoose inferred types\n```\n\n----------------------------------------\n\nTITLE: Comparing Mongoose Models with Typegoose Equivalent in TypeScript\nDESCRIPTION: This snippet demonstrates the difference between traditional Mongoose model definition and Typegoose's class-based approach. It shows how Typegoose simplifies code by using decorators and TypeScript types.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/quick-start-guide.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// This is a representation of how typegoose's compile output would look\ninterface Car {\n  model?: string;\n}\n\ninterface Job {\n  title?: string;\n  position?: string;\n}\n\ninterface User {\n  name?: string;\n  age!: number;\n  preferences?: string[];\n  mainJob?: Job;\n  jobs?: Job[];\n  mainCar?: Car | string;\n  cars?: (Car | string)[];\n}\n\nconst JobSchema = new mongoose.Schema({\n  title: String;\n  position: String;\n});\n\nconst CarModel = mongoose.model('Car', {\n  model: String,\n});\n\nconst UserModel = mongoose.model('User', {\n  name: { type: String },\n  age: { type: Number, required: true },\n  preferences: [{ type: String }],\n  mainJob: { type: JobSchema },\n  jobs: [{ type: JobSchema }],\n  mainCar: { type: Schema.Types.ObjectId, ref: 'Car' },\n  cars: [{ type: Schema.Types.ObjectId, ref: 'Car' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Typegoose Model Creation in TypeScript\nDESCRIPTION: This example shows how to create a simple Typegoose model with a class, decorators, and the getModelForClass function to generate a properly typed Mongoose model.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/quick-start-guide.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass KittenClass {\n  @prop()\n  public name?: string;\n}\n\nconst KittenModel = getModelForClass(KittenClass);\n\nlet document = await KittenModel.create({ name: 'Kitty' });\n// \"document\" has proper (manual) typescript types of KittenClass\n```\n\n----------------------------------------\n\nTITLE: Typegoose Enhanced Model Definition\nDESCRIPTION: Demonstrates the simplified Typegoose approach using decorators to define Mongoose models with TypeScript classes, showing various property types and relationships.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Job {\n  @prop()\n  public title?: string;\n\n  @prop()\n  public position?: string;\n}\n\nclass Car {\n  @prop()\n  public model?: string;\n}\n\nclass User {\n  @prop()\n  public name?: string;\n\n  @prop({ required: true })\n  public age!: number;\n\n  @prop({ type: () => [String] })\n  public preferences?: string[];\n\n  @prop()\n  public mainJob?: Job;\n\n  @prop({ type: () => Job })\n  public jobs?: Job[];\n\n  @prop({ ref: () => Car })\n  public mainCar?: Ref<Car>;\n\n  @prop({ ref: () => Car })\n  public cars?: Ref<Car>[];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mongoose Hooks with Typegoose Decorators\nDESCRIPTION: This example demonstrates how to use Mongoose pre and post hooks with Typegoose using class decorators. It shows functionality that runs before and after document save operations.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/quick-start-guide.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@pre<KittenClass>('save', function() {\n  this.isKitten = this.age < 1\n})\n@post<KittenClass>('save', function(kitten) {\n  console.log(kitten.isKitten ? 'We have a kitten here.' : 'We have a big kitty here.')\n})\nclass KittenClass {\n  @prop()\n  public name?: string;\n\n  @prop()\n  public species?: string;\n  \n  @prop()\n  public age?: number\n  \n  @prop({ default: false })\n  public isKitten?: boolean\n}\n\nconst KittenModel = getModelForClass(KittenClass);\n\nconst doc = new KittenModel({ name: 'SomeCat', species: 'SomeSpecies', age: 0 });\nawait doc.save(); // this should output \"We have a kitten here.\"\nconst doc = new KittenModel({ name: 'SomeCat', species: 'SomeSpecies', age: 2 });\nawait doc.save(); // this should output \"We have a big kitty here.\"\n```\n\n----------------------------------------\n\nTITLE: Setting Required Properties with @prop in TypeScript\nDESCRIPTION: This example shows how to use the 'required' option with @prop to mark a property as required in the schema. It also demonstrates the difference between required and optional properties.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Something {\n  @prop({ required: true }) // this is now required in the schema\n  public firstName!: string;\n\n  @prop() // by default, a property is not required\n  public lastName?: string; // using the \"?\" marks the property as optional\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Instance Methods in Typegoose Models\nDESCRIPTION: This example shows how to add instance methods to Typegoose models that can be called on document instances, with proper TypeScript typing using DocumentType.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/quick-start-guide.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass KittenClass {\n  @prop()\n  public name?: string;\n\n  @prop()\n  public species?: string;\n\n  // the \"this\" definition is required to have the correct types\n  public async setSpeciesAndSave(this: DocumentType<KittenClass>, species: string) {\n    this.species = species;\n    await this.save();\n  }\n}\nconst KittenModel = getModelForClass(KittenClass);\n\nconst doc = new KittenModel({ name: 'SomeCat', species: 'SomeSpecies' });\nawait doc.setSpeciesAndSave('SomeOtherSpecies');\n```\n\n----------------------------------------\n\nTITLE: Implementing Discriminators in Typegoose\nDESCRIPTION: This snippet shows how to properly implement discriminators by using getDiscriminatorModelForClass instead of getModelForClass for the child models, enabling proper model discrimination.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/non-nested-discriminators.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@modelOptions({ schemaOptions: { collection: \"animal\" } })\nclass Animal {\n  @prop({ required: true, unique: true })\n  public patientNumber!: number;\n}\n\nclass Dog extends Animal {\n  @prop()\n  public cageNumber!: number;\n}\n\nclass Cat extends Animal {\n  @prop()\n  public nameTag!: string;\n}\n\nclass Parrot extends Animal {\n  @prop()\n  public commonMessage?: string;\n}\n\nconst AnimalModel = getModelForClass(Animal);\n// difference is below here\nconst DogModel = getDiscriminatorModelForClass(AnimalModel, Dog);\nconst CatModel = getDiscriminatorModelForClass(AnimalModel, Cat);\nconst ParrotModel = getDiscriminatorModelForClass(AnimalModel, Parrot);\n```\n\n----------------------------------------\n\nTITLE: Example of Creating a Mongoose Model with getModelForClass in TypeScript\nDESCRIPTION: A practical example showing how to define a Kitten class with a property decorator and convert it to a Mongoose model using getModelForClass.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/getModelForClass.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Kitten {\n  @prop()\n  public name?: string;\n}\n\nconst KittenModel = getModelForClass(Kitten);\n```\n\n----------------------------------------\n\nTITLE: Comparing Native Mongoose and Typegoose Schema Creation\nDESCRIPTION: This snippet compares how to create a schema with a sub-document in both native Mongoose and Typegoose, showing the equivalent implementations.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/faq.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Native Mongoose\nconst subSchema = new mongoose.Schema({ someprop: { type: String } });\nconst mainSchema = new mongoose.Schema({\n  subDoc: subSchema\n})\n\n// Typegoose\nclass Sub {\n  @prop()\n  public someprop: string;\n}\n\nclass Main {\n  @prop()\n  public subDoc: Sub; // by reflection, not explicitly defining option \"type\"\n  // OR\n  @prop({ type: () => Sub }) // defining option \"type\" explicitly\n  public subDoc: Sub;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining @prop Decorator Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the @prop decorator, including its parameters and return type. It defines the various option types that can be passed to the decorator.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction prop(\n  options?: BasePropOptions | ArrayPropOptions | MapPropOptions | PropOptionsForNumber | PropOptionsForString | VirtualOptions,\n  kind?: PropType\n): PropertyDecorator\n```\n\n----------------------------------------\n\nTITLE: Custom Validation with @prop in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the 'validate' option with @prop to set custom validation rules for properties. It includes an example of a custom validator function with an error message.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// \"maxlength\" already exists as an option, this just shows how to use validate\nclass Validated {\n  @prop({\n    validate: {\n      validator: (v) => {\n        return v.length <= 10;\n      },\n      message: 'value is over 10 characters long!'\n    }\n  })\n  public validated?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Discriminators with Class Arrays\nDESCRIPTION: Shows how to use the discriminators option with an array of classes for embedded discriminators. This example uses Building as the base class with Garage and SummerHouse as discriminated subclasses.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n@modelOptions({\n  schemaOptions: {\n    discriminatorKey: 'type'\n  }\n})\nclass Building {\n  @prop({ default: 100 })\n  public width: number;\n\n  @prop({ required: true })\n  public type: string;\n}\n\nclass Garage extends Building {\n  @prop({ default: 10 })\n  public slotsForCars: number;\n}\n\nclass SummerHouse extends Building {\n  @prop({ default: 100 })\n  public distanceToLake: number;\n}\n\nclass Area {\n  @prop({ type: Building, discriminators: () => [Garage, SummerHouse] })\n  public buildings: Building[];\n}\n\nconst AreaModel = getModelForClass(Area);\n\n// then somewhere in an async function\nconst area = await AreaModel.create({});\narea.buildings.push({ type: getName(SummerHouse), distanceToLake: 100 } as SummerHouse);\narea.buildings.push({ type: getName(Garage), slotsForCars: 20 } as Garage);\nawait area.save();\n```\n\n----------------------------------------\n\nTITLE: Resolving Reference Problems with Arrow Functions in Typegoose\nDESCRIPTION: Shows recommended approaches for fixing reference issues in Typegoose, using arrow functions to defer type evaluation and avoid undefined references.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/reference-other-classes.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Nested {\n  @prop()\n  public someNestedProperty: string;\n}\n\n// Recommended first fix:\nclass Main {\n  @prop({ ref: () => Nested }) // since 7.1 arrow functions can be used to defer getting the type\n  public nested: Ref<Nested>;\n}\n\n// Not recommended workaround (hardcoding model name):\nclass Main {\n  @prop({ ref: 'Nested' }) // since 7.0 it is recommended to use \"console.log(getName(Class))\" to get the generated name once and hardcode it like shown here\n  public nested: Ref<Nested>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Methods in Typegoose Models\nDESCRIPTION: This code demonstrates how to add static methods to Typegoose models that can be called directly on the model class, with proper TypeScript typing using ReturnModelType.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/quick-start-guide.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass KittenClass {\n  @prop()\n  public name?: string;\n\n  @prop()\n  public species?: string;\n\n  // the \"this\" definition is required to have the correct types\n  public static async findBySpecies(this: ReturnModelType<typeof KittenClass>, species: string) {\n    return this.find({ species }).exec();\n  }\n}\nconst KittenModel = getModelForClass(KittenClass);\n\nconst docs = await KittenModel.findBySpecies('SomeSpecies');\n```\n\n----------------------------------------\n\nTITLE: Traditional Mongoose Model Definition\nDESCRIPTION: Shows the traditional way of defining Mongoose models without Typegoose, highlighting the redundancy of defining both interfaces and schemas.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Car {\n  model?: string;\n}\n\ninterface Job {\n  title?: string;\n  position?: string;\n}\n\ninterface User {\n  name?: string;\n  age!: number;\n  preferences?: string[];\n  mainJob?: Job;\n  jobs?: Job[];\n  mainCar?: Car | string;\n  cars?: (Car | string)[];\n}\n\nconst JobSchema = new mongoose.Schema({\n  title: String;\n  position: String;\n});\n\nconst CarModel = mongoose.model('Car', {\n  model: string,\n});\n\nconst UserModel = mongoose.model('User', {\n  name: { type: String },\n  age: { type: Number, required: true },\n  preferences: [{ type: String }],\n  mainJob: { type: JobSchema },\n  jobs: [{ type: JobSchema }],\n  mainCar: { type: Schema.Types.ObjectId, ref: 'Car' },\n  cars: [{ type: Schema.Types.ObjectId, ref: 'Car' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Populating References in Typegoose\nDESCRIPTION: Shows how to populate references in Typegoose using the populate method and the isDocument typeguard to safely access properties on populated documents.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/reference-other-classes.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// this example continues to use the classes defined previously\n\nconst cat = await CatModel.create({ year: 2015 });\n\nawait PersonModel.create({ name: \"Jonny\", pet: cat });\n\nconst person1 = await PersonModel.findOne({ name: \"Jonny\" });\n// with this path \"pet\" is still unpopulated\nawait person1.populate(\"pet\"); // will try to populate path \"pet\"\n\nconsole.log(person1.pet); // will list the populated data\n// but for actual use in the code it will need to be checked that it is actually populated, because \".populate\" may also fail\nperson1.pet.year; // Type Error: \"pet\" may not have property \"year\"\n// for this the typeguard \"isDocument\" is used that typegoose provides\nif (isDocument(person1.pet)) {\n  person1.pet.year; // Works without typescript complaining\n} else {\n  // in this case the path is definitely NOT a document\n}\n```\n\n----------------------------------------\n\nTITLE: Using setGlobalOptions for Global Configuration in TypeScript\nDESCRIPTION: This example demonstrates how to use setGlobalOptions to configure global settings for Typegoose, including schema options and global operation options. It shows how multiple calls merge and overwrite settings.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/setGlobalOptions.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsetGlobalOptions({ options: { allowMixed: Severity.ERROR } });\nsetGlobalOptions({ globalOptions: { disableGlobalCaching: true } }); // does not affect the previous setting of \"options\"\nsetGlobalOptions({ globalOptions: { someOtherOption: true } }); // does not affect the previous setting of \"globalOptions\"\nsetGlobalOptions({ options: { disableLowerIndexes: true, allowMixed: Severity.WARN } }); // will overwrite previous setting of \"allowMixed\"\n\n// the global options would now look like\n{\n  options: {\n    allowMixed: Severity.WARN,\n    disableLowerIndexes: true\n  },\n  globalOptions: {\n    disableGlobalCaching: true,\n    someOtherOption: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic References Between Classes in Typegoose\nDESCRIPTION: Example of how to create references between classes in Typegoose using the @prop decorator with the ref option. Shows both single references and arrays of references.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/reference-other-classes.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Nested {\n  @prop()\n  public someNestedProperty: string;\n}\n\nclass Main {\n  @prop({ ref: () => Nested }) // for one\n  public nested: Ref<Nested>;\n\n  @prop({ ref: () => Nested }) // for an array of references\n  public nestedArray: Ref<Nested>[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Typegoose with Class-Transformer in TypeScript\nDESCRIPTION: Demonstrates how to create a Typegoose model with Class-Transformer decorators. It includes a custom DocumentCT class to handle MongoDB document properties and an Account class with exposed and excluded properties.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/class-transformer.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Exclude, Expose, Transform } from 'class-transformer';\nimport { getModelForClass, mongoose, prop } from '@typegoose/typegoose';\n\n// re-implement base Document to allow class-transformer to serialize/deserialize its properties\n// This class is needed, otherwise \"_id\" and \"__v\" would be excluded from the output\nclass DocumentCT {\n  @Expose()\n  // makes sure that when deserializing from a Mongoose Object, ObjectId is serialized into a string\n  @Transform((value) => {\n    if ('value' in value) {\n      // HACK: this is changed because of https://github.com/typestack/class-transformer/issues/879\n      // return value.value.toString(); // because \"toString\" is also a wrapper for \"toHexString\"\n      return value.obj[value.key].toString();\n    }\n\n    return 'unknown value';\n  })\n  public _id: string;\n\n  @Expose()\n  public __v: number;\n}\n\n@Exclude()\nclass Account extends DocumentCT {\n  @prop()\n  @Expose()\n  public email: string;\n\n  @prop()\n  @Expose({ groups: ['admin'] })\n  public password: string;\n}\n\nconst AccountModel = getModelForClass(Account);\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual Properties with Get/Set in Typegoose\nDESCRIPTION: Demonstrates how to create a virtual property 'fullName' using get and set functions in a Typegoose class. The virtual property combines firstName and lastName fields.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/virtuals.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Name {\n  @prop()\n  public firstName?: string;\n\n  @prop()\n  public lastName?: string;\n\n  // this will create a virtual property called 'fullName'\n  public get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n  public set fullName(full) {\n    const [firstName, lastName] = full.split(' ');\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of getClassForDocument with Typegoose\nDESCRIPTION: Demonstrates how to use getClassForDocument to retrieve the Class from a Mongoose document created with Typegoose. Shows a Kitten class with a name property, creating a model, and then verifying the class reference.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/getClassForDocument.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Kitten {\n  @prop()\n  public name?: string;\n}\n\nconst KittenModel = getModelForClass(Kitten);\n\nconst doc = new KittenModel();\n\ngetClassForDocument(doc) === Kitten; // should be \"true\"\n```\n\n----------------------------------------\n\nTITLE: Setting _id Manually in Typegoose\nDESCRIPTION: Demonstrates how to properly set the _id field in Typegoose models, with examples showing default behavior and custom ID generation using UUID.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/faq.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// not overwriting the defaults\nclass Main {\n  // no \"@prop\" because of not wanting to overwrite the defaults\n  public _id!: mongoose.Types.ObjectId;\n}\n\nclass Main2 {\n  // overwrite the \"_id\" type to be a string and generated by a uuidv4 function\n  @prop({ required: true, default: () => uuidv4() })\n  public _id!: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Query Methods with @queryMethod in Typegoose\nDESCRIPTION: Example demonstrating how to implement custom query methods using @queryMethod decorator. It shows defining a QueryHelpers interface, creating a named query function, decorating a class, and using the custom query method on the model instance.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/queryMethod.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { types } from \"@typegoose/typegoose\";\n\n// an interface is needed to add query-function types to the class\ninterface QueryHelpers {\n  // use the actual function types dynamically\n  findByName: types.AsQueryMethod<typeof findByName>;\n  // the same can be done with other functions (not listed in this example)\n  findByLastname: types.AsQueryMethod<typeof findByLastname>;\n}\n\nfunction findByName(this: types.QueryHelperThis<typeof Person, QueryHelpers>, name: string) {\n  return this.find({ name }); // it is important to not do a \"await\" and \".exec\"\n}\n@queryMethod(findByName)\nclass Person {\n  @prop({ required: true })\n  public name: string;\n}\nconst PersonModel = getModelForClass<typeof Person, QueryHelpers>(Person);\n\n// thanks to \"QueryHelpers\" the function \"findByName\" should exist here and return the correct type\nconst docs: types.DocumentType<Person>[] = await PersonModel.find()\n  .findByName('hello')\n  .orFail()\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Creating Indexed and Unique Properties with @prop in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the 'index' and 'unique' options with @prop to create indexed and unique properties in the Mongoose schema.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass IndexedClass {\n  @prop({ index: true })\n  public indexedField?: string;\n\n  @prop({ unique: true }) // implicitly has \"index: true\"\n  public uniqueId?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Map Types in Typegoose\nDESCRIPTION: Shows various ways to define Map types in Typegoose, including primitive types, arrays, and nested documents.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nclass SomeMapClass1 {\n  @prop({ type: String })\n  public lookup?: Map<string, string>; // \"Map<any, any>\" or \"mongoose.Types.Map<any>\" is needed to be detected as a Map\n}\n\nclass SomeMapClass2 {\n  @prop({ type: () => String }, PropType.MAP) // explicitly define the \"PropType\"\n  public lookup?: Map<string, string>;\n}\n\n// Extra Examples with different types\n// Example: Primitive-Arrays\nclass SomeMapClass3 {\n  @prop({ type: () => [String] })\n  public lookup?: Map<string, string[]>;\n}\n\n// Example: SubDocuments\nclass Nested {\n  @prop()\n  public dummy?: string;\n}\nclass SomeMapClass3 {\n  @prop({ type: () => Nested, _id: false })\n  public lookup?: Map<string, Nested>;\n}\n\n// Example: SubDocument-Arrays (since 8.1.1)\nclass Nested {\n  @prop()\n  public dummy?: string;\n}\nclass SomeMapClass3 {\n  @prop({ type: () => [Nested], _id: false })\n  public lookup?: Map<string, Nested[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Virtual Populate in Typegoose\nDESCRIPTION: Demonstrates how to use dynamic ref, localField, and foreignField in virtual populate. This advanced example shows how to dynamically determine these values based on document properties.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/virtuals.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Sub {\n  @prop({ required: true })\n  public parentId!: mongoose.Types.ObjectId;\n}\nclass Parent {\n  @prop({\n    ref: () => (doc: DocumentType<Parent>) => doc.from, // This need to be written this way, because since typegoose \"7.1\", deferred function are supported\n    foreignField: () => 'parentId', // no \"doc\" parameter provided here\n    localField: (doc: DocumentType<Parent>) => doc.local,\n    justOne: false\n  })\n  public nested?: Ref<Sub>[];\n\n  @prop({ required: true })\n  public local!: string;\n\n  @prop({ required: true })\n  public from!: string;\n}\n\n// later in some async code\nconst parent = await ParentModel.create({ local: '_id', from: getName(Sub) });\nawait SubModel.create({ parentId: parent._id });\n```\n\n----------------------------------------\n\nTITLE: Defining buildSchema Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the buildSchema function. It takes a class constructor, optional schema options, and model options, and returns a Mongoose schema.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/buildSchema.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction buildSchema<U extends AnyParamConstructor<any>>(cl: U, options?: mongoose.SchemaOptions, overwriteOptions?: IModelOptions): mongoose.Schema<DocumentType<InstanceType<U>>>\n```\n\n----------------------------------------\n\nTITLE: Resolving Circular Dependencies in Typegoose\nDESCRIPTION: Demonstrates how to resolve circular dependency issues in Typegoose by separating class definitions from model initialization, allowing proper resolution of references between interdependent classes.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/reference-other-classes.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { A } from \"./A\";\nimport { B } from \"./B\";\n\nexport const AModel = getModelForClass(A);\nexport const BModel = getModelForClass(B);\n```\n\n----------------------------------------\n\nTITLE: Setting Schema Collection Name with modelOptions in Typegoose\nDESCRIPTION: Example of using @modelOptions to set a custom collection name via schemaOptions. This configures the MongoDB collection name for the model.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/modelOptions.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@modelOptions({ schemaOptions: { collection: 'NotSomething' } })\nclass Something {}\n```\n\n----------------------------------------\n\nTITLE: Using @plugin Decorator with Mongoose-findorcreate in TypeScript\nDESCRIPTION: This example demonstrates how to use the @plugin decorator to add the mongoose-findorcreate plugin to a Typegoose model. It shows the import statements, class definition with the decorator, and usage of the added plugin method.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/plugin.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { plugin, getModelForClass } from '@typegoose/typegoose';\nimport * as findOrCreate from 'mongoose-findorcreate';\n\n@plugin(findOrCreate)\nclass User {}\n\nconst UserModel = getModelForClass(User);\nconst result = await UserModel.findOrCreate({ ... });\n```\n\n----------------------------------------\n\nTITLE: Nested Discriminator Usage\nDESCRIPTION: Example demonstrating proper usage of nested discriminators with validation and type checking.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/nested-discriminators.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = await AnimalModel.create({\n  patientNumber: 1,\n  medications: [\n    {\n      name: MedicationTypes.MedicationA,\n      amount: 10,\n    } as MedicationA,\n    {\n      name: MedicationTypes.MedicationB,\n      length: 5,\n    } as MedicationB,\n  ],\n});\n\ntry {\n  await AnimalModel.create({\n    patientNumber: 2,\n    medications: [\n      {\n        unknownType: 1,\n      },\n    ],\n  });\n\n  throw new Error('Expected create to fail');\n} catch (err) {\n  assertion(err instanceof mongoose.Error.ValidationError);\n}\n\nassertion(doc.medications[0].name === MedicationTypes.MedicationA);\nassertion(doc.medications[1].name === MedicationTypes.MedicationB);\nassertion(doc.medications.length === 2);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of @prop Decorator in TypeScript\nDESCRIPTION: This example demonstrates the basic usage of the @prop decorator to mark properties for inclusion in the Mongoose schema. It shows three variations: default usage, explicit type definition, and specifying PropType.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Cat {\n  @prop()\n  public name?: string;\n}\n\nclass Cat2 {\n  @prop({ type: () => String }) // explicitly define the Type\n  public name?: string;\n}\n\nclass Cat3 {\n  @prop({ type: () => String }, PropType) // explicitly define the \"PropType\"\n  public name?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining String Enums in Typegoose\nDESCRIPTION: Demonstrates how to use string enums with Typegoose's @prop decorator. It shows both direct enum usage and deferred function usage.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nenum Gender {\n  MALE = 'male',\n  FEMALE = 'female'\n}\n\nclass Enumed {\n  @prop({ enum: Gender })\n  public gender?: Gender;\n\n  // typegoose enum also supports deferred function\n  @prop({ enum: () => Gender })\n  public gender?: Gender;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Array Types in Typegoose\nDESCRIPTION: Shows different ways to define array types in Typegoose, including nested document arrays and explicit PropType definition.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nclass Kitten {\n  @prop()\n  public name?: string;\n}\n\nclass Cat {\n  @prop({ type: () => [Kitten] })\n  public kitten?: Kitten[]; // \"[]\" or \"Array<any>\" or \"mongoose.Types.Array<any>\" or \"mongoose.Types.DocumentArray\" is needed to be detected as an Array\n}\n\nclass Cat2 {\n  @prop({ type: () => [Kitten] }, PropType.ARRAY) // explicitly define the \"PropType\"\n  public kitten?: Kitten[];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Discriminators with modelOptions in Typegoose\nDESCRIPTION: Example demonstrating how to define nested discriminators directly on a base class using the discriminators option, which allows polymorphic document arrays.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/modelOptions.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@modelOptions({\n  schemaOptions: {\n    discriminatorKey: 'type'\n  },\n  options: {\n    discriminators: () => [Garage, SummerHouse] // here instead of as a \"prop-option\"\n  }\n})\nclass Building {\n  @prop({ default: 100 })\n  public width: number;\n\n  @prop({ required: true })\n  public type: string;\n}\n\nclass Garage extends Building {\n  @prop({ default: 10 })\n  public slotsForCars: number;\n}\n\nclass SummerHouse extends Building {\n  @prop({ default: 100 })\n  public distanceToLake: number;\n}\n\nclass Area {\n  @prop({ type: Building }) // instead of having to define it here\n  public buildings: Building[];\n}\n\nconst AreaModel = getModelForClass(Area);\n\n// then somewhere in an async function\nconst area = await AreaModel.create({});\narea.buildings.push({ type: getName(SummerHouse), distanceToLake: 100 } as SummerHouse);\narea.buildings.push({ type: getName(Garage), slotsForCars: 20 } as Garage);\nawait area.save();\n```\n\n----------------------------------------\n\nTITLE: Modifying Mongoose Schema Before Creating a Typegoose Model\nDESCRIPTION: This example demonstrates how to get a schema from a Typegoose class, manually modify it by adding a virtual getter, and then convert it to a properly typed Typegoose model. It uses buildSchema, mongoose.model, and addModelToTypegoose to maintain type safety.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/manual-schema-modification.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Normal Typegoose Class definition\nclass Cat {\n  @prop()\n  public name?: string;\n}\n\n// \"buildSchema\" is called like \"getModelForClass\"\n// \"buildSchema\" also supports overwriting options like \"getModelForClass\" (essentially \"getModelForClass\" passes the options to \"buildSchema\")\nconst CatSchema = buildSchema(Cat);\n\n// example modifying the schema before adding\n// in this case adding a virtual \"getName\"\nCatSchema.virtual(\"getName\").get(function() { return this.name });\n\n// The Schema will have to be manually made into a model\nconst CatModelRaw = mongoose.model(getName(Cat), CatSchema);\n\n// And finally the model will get added to the typegoose cache with the class and also have proper types\n// essentially \"addModelToTypegoose\" re-exports the input model, but cast as the correct typegoose type\nexport const CatModel = addModelToTypegoose(CatModelRaw, Cat);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Discriminator Keys in Typegoose Models\nDESCRIPTION: Demonstrates how to set up class inheritance with a custom discriminator key using Typegoose decorators. Shows the implementation of an Animal base class with Dog, Cat, and Parrot subclasses, using a custom discriminator key 'customKey' instead of the default '__t'.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/non-nested-discriminators.mdx#2025-04-17_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\nenum Names {\n  DOG = \"DOG\",\n  CAT = \"CAT\",\n  PARROT = \"PARROT\",\n}\n\n- @modelOptions({ schemaOptions: { collection: \"animal\" } })\n+ @modelOptions({ schemaOptions: { collection: \"animal\", discriminatorKey: \"customKey\" } })\nclass Animal {\n  @prop({ required: true, unique: true })\n  public patientNumber!: number;\n\n\n+   @prop({ required: true })\n+   public customKey!: string; // its recommended to only use \"string\" or \"number\"\n}\n\nclass Dog extends Animal {\n  @prop()\n  public cageNumber!: number;\n}\n\nclass Cat extends Animal {\n  @prop()\n  public nameTag!: string;\n}\n\nclass Parrot extends Animal {\n  @prop()\n  public commonMessage?: string;\n}\n\nconst AnimalModel = getModelForClass(Animal);\nconst DogModel = getDiscriminatorModelForClass(AnimalModel, Dog, Names.DOG);\nconst CatModel = getDiscriminatorModelForClass(AnimalModel, Cat, Names.CAT);\nconst ParrotModel = getDiscriminatorModelForClass(AnimalModel, Parrot, Names.PARROT);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nenum Names {\n  DOG = \"DOG\",\n  CAT = \"CAT\",\n  PARROT = \"PARROT\",\n}\n\n@modelOptions({ schemaOptions: { collection: \"animal\", discriminatorKey: \"customKey\" } })\nclass Animal {\n  @prop({ required: true, unique: true })\n  public patientNumber!: number;\n\n  // options \"enum\" & \"default\" can also be specified, but don't have much effect\n  // the property set in \"discriminatorKey\" does not actually need to be defined, but its for types like usage in an typeguard\n  @prop({ required: true })\n  public customKey!: string; // its recommended to only use \"string\" or \"number\"\n}\n\nclass Dog extends Animal {\n  @prop()\n  public cageNumber!: number;\n}\n\nclass Cat extends Animal {\n  @prop()\n  public nameTag!: string;\n}\n\nclass Parrot extends Animal {\n  @prop()\n  public commonMessage?: string;\n}\n\nconst AnimalModel = getModelForClass(Animal);\nconst DogModel = getDiscriminatorModelForClass(AnimalModel, Dog, Names.DOG);\nconst CatModel = getDiscriminatorModelForClass(AnimalModel, Cat, Names.CAT);\nconst ParrotModel = getDiscriminatorModelForClass(AnimalModel, Parrot, Names.PARROT);\n```\n\n----------------------------------------\n\nTITLE: Using buildSchema to Create a Mongoose Schema in TypeScript\nDESCRIPTION: This example demonstrates how to use the buildSchema function to create a Mongoose schema from a Typegoose class. It defines a Kitten class with a name property and then builds a schema from it.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/buildSchema.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Kitten {\n  @prop()\n  public name?: string;\n}\n\nconst kittenSchema = buildSchema(Kitten);\n```\n\n----------------------------------------\n\nTITLE: Explicit Type Definition with @prop in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the 'type' option with @prop to explicitly define the type of a property. It shows examples of simple types, arrays, and complex types like enums and mixed types.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass Dummy {\n  // explicitly set type\n  @prop({ type: String })\n  public version1: string;\n\n  // supports deferred-function style\n  @prop({ type: () => String })\n  public version2: string;\n\n  @prop({ type: String })\n  public hello1: string[];\n\n  // supports wrapping type in nested arrays\n  // nested arrays are counted and will be used as option \"dim\"\n  @prop({ type: [[String]] })\n  public hello2: string[][];\n\n  @prop({ set: (val: string[]) => val.join(' '), get: (val: string) => val.split(' '), type: String })\n  public hello: string[];\n}\n\nenum SomeEnum {\n  One,\n  Two\n}\nclass Dummy {\n  @prop({ enum: SomeEnum, type: Number })\n  public enumprop: SomeEnum;\n}\n\nclass Dummy {\n  @prop({ type: mongoose.Schema.Types.Mixed }) // used for mongoose / how it is stored to the DB\n  public something: NewableFunction; // used for intellisense / TypeScript\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-Hook Example with Car Class\nDESCRIPTION: Example implementation of @pre decorator on a Car class, demonstrating a pre-save hook that sets isFast property based on the car model.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/hooks.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@pre<Car>('save', function () {\n  if (this.model === 'Tesla') {\n    this.isFast = true;\n  }\n})\nclass Car {\n  @prop({ required: true })\n  public model!: string;\n\n  @prop()\n  public isFast?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Post-Hook Example with Car Class\nDESCRIPTION: Example implementation of @post decorator on a Car class, demonstrating a post-save hook that logs when a car's top speed exceeds 300 km/h.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/hooks.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@post<Car>('save', (car) => {\n  if (car.topSpeedInKmH > 300) {\n    console.log(car.model, 'is fast!');\n  }\n})\nclass Car {\n  @prop({ required: true })\n  public model!: string;\n\n  @prop({ required: true })\n  public topSpeedInKmH!: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values with @prop in TypeScript\nDESCRIPTION: This example shows how to use the 'default' option with @prop to set default values for properties. It includes both static and dynamic (function-based) default values.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Defaulted {\n  @prop({ default: 'hello world' })\n  public upperCase?: string; // mark as optional, because it will be defaulted\n}\n\nclass Defaulted {\n  @prop({ required: true })\n  firstName!: string\n  @prop({ required: true })\n  lastName!: string\n  \n  @prop({ \n    default: function (this: DocumentType<Defaulted>) {\n      return `${this.firstName} ${this.lastName}`\n    }\n  })\n  public fullName?: string; // mark as optional, because it will be defaulted\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Typegoose Model without emitDecoratorMetadata\nDESCRIPTION: Example showing how to define a Kitten model without type inference. When emitDecoratorMetadata is disabled, all property types must be explicitly defined using the type option and PropType enum where necessary.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/use-without-emitDecoratorMetadata.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Kitten {\n  @prop({ type: () => String, required: true }) // Needs to be explicitly defined, because \"emitDecoratorMetadata\" is not enabled\n  public name!: string;\n\n  @prop({ type: () => [String], required: true }, PropType.ARRAY)\n  public friendNames!: string[];\n\n  @prop({ type: () => Number, required: true }, PropType.MAP)\n  public favoritePlacePriority!: Map<string, number>;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Typegoose Model with ObjectId\nDESCRIPTION: This snippet demonstrates how to query a Typegoose model that has an ObjectId property. It uses the getModelForClass function to create a model and then performs a findOne query using a new ObjectId instance.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/objectId.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst FooModel = getModelForClass(FooModel);\nFooModel.findOne({ userId: new mongoose.Types.ObjectId('5e997f95d6a35f3a0def3339') });\n```\n\n----------------------------------------\n\nTITLE: Using ReturnModelType in a Kitten Class with Typegoose\nDESCRIPTION: Example of using ReturnModelType in a Typegoose class definition, demonstrating a static method with proper typing.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/types/returnModelType.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Kitten {\n  @prop()\n  public name?: string;\n\n  // this is a Model Method\n  public static findByName(this: ReturnModelType<typeof Kitten>, name: string) {\n    return this.find({ name }).exec(); // thanks to \"ReturnModelType\" \"this\" has type information\n  }\n}\n\nconst KittenModel: ReturnModelType<typeof Kitten> = getModelForClass(Kitten);\n```\n\n----------------------------------------\n\nTITLE: Basic Mongoose Schema with Nested Properties\nDESCRIPTION: A simple Mongoose schema example showing nested properties directly within the schema definition.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/nesting-classes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst AnimalSchema = new mongoose.Schema({\n  name: String,\n  properties: {\n    hasEaten: Boolean,\n    nicknames: [String]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Getters and Setters with @prop in TypeScript\nDESCRIPTION: This example shows how to use the 'get' and 'set' options with @prop to define custom getters and setters for properties. It includes examples of string manipulation and array-to-string conversion.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass Dummy {\n  @prop({ set: (val: string) => val.toLowerCase(), get: (val: string) => val })\n  public hello: string;\n}\n\nclass Dummy {\n  // this value is a \"string-array\" during runtime and is stored in the database as a \"primite-string\"\n  @prop({ set: (val: string[]) => val.join(' '), get: (val: string) => val.split(' '), type: String }, PropType.NONE) // requires explicit setting of \"PropType\"\n  public fullName?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Discriminators with DiscriminatorObjects\nDESCRIPTION: Demonstrates the use of discriminators option with an array of DiscriminatorObjects for embedded discriminators. This example uses Building as the base class with Garage and SummerHouse as discriminated subclasses.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n@modelOptions({\n  schemaOptions: {\n    discriminatorKey: 'type'\n  }\n})\nclass Building {\n  @prop({ default: 100 })\n  public width: number;\n\n  @prop({ required: true })\n  public type: string;\n}\n\nclass Garage extends Building {\n  @prop({ default: 10 })\n  public slotsForCars: number;\n}\n\nclass SummerHouse extends Building {\n  @prop({ default: 100 })\n  public distanceToLake: number;\n}\n\nclass Area {\n  @prop({\n    type: Building,\n    discriminators: () => [\n      { type: Garage, value: 'G' },\n      { type: SummerHouse, value: 'S' }\n    ]\n  })\n  public buildings: Building[];\n}\n\nconst AreaModel = getModelForClass(Area);\n\n// then somewhere in an async function\nconst area = await AreaModel.create({});\narea.buildings.push({ type: 'S', distanceToLake: 100 } as SummerHouse);\narea.buildings.push({ type: 'G', slotsForCars: 20 } as Garage);\nawait area.save();\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Model Naming with Function in Typegoose\nDESCRIPTION: Example demonstrating dynamic model naming with a function that accesses decorator parameters. This allows generating model names based on other options.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/modelOptions.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@modelOptions({\n  schemaOptions: { collection: 'SomethingDifferent' },\n  options: {\n    automaticName: false,\n    customName: (options) => `${options.schemaOptions?.collection}_someSuffix`\n  }\n})\nclass MultiModel {}\n\nconst model = getModelForClass(MultiModel);\nexpect(model.modelName).to.be.equal('SomethingDifferent_someSuffix');\n```\n\n----------------------------------------\n\nTITLE: Defining Typegoose Model with emitDecoratorMetadata\nDESCRIPTION: Example showing how to define a Kitten model with type inference enabled through emitDecoratorMetadata. This approach requires less explicit type definitions as types are automatically inferred from TypeScript types.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/use-without-emitDecoratorMetadata.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Kitten {\n  @prop({ required: true }) // Not needed to be explicit that this property is a \"String\"\n  public name!: string;\n\n  @prop({ type: () => [String], required: true })\n  public friendNames!: string[];\n\n  @prop({ type: () => Number, required: true })\n  public favoritePlacePriority!: Map<string, number>;\n}\n```\n\n----------------------------------------\n\nTITLE: isRefTypeArray Usage Example in TypeScript\nDESCRIPTION: Example demonstrating how to use isRefTypeArray to check if all kittens references in a Cat are of type ObjectId.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/typeguards/isRefType.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Cat {\n  @prop({ ref: 'Cat' })\n  public kittens: Ref<Cat>;\n\n  // this example could be smaller, but for demonstation purposes this is a longer version\n  public areAllKittensExisting(): boolean {\n    if (isRefTypeArray(this.kittens, mongoose.Types.ObjectId)) {\n      // \"this.kittens\" now has the type of \"Cat._id\"'s RefType (in this case \"ObjectId\")\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Model Name with modelOptions in Typegoose\nDESCRIPTION: Example showing how to use the customName option to set a specific model name that differs from the class name.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/modelOptions.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@modelOptions({ options: { customName: 'Something' } })\nclass MultiModel {}\n\nconst model = getModelForClass(MultiModel);\nexpect(model.modelName).to.be.equal('Something');\n```\n\n----------------------------------------\n\nTITLE: Creating a single reference to another class in Typegoose\nDESCRIPTION: Implementation of a Person class with a single reference to a Kitten model. The @prop decorator with the ref option is used to specify the reference relationship.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/types/ref-type.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person {\n  @prop({ ref: () => Kitten })\n  public pet?: Ref<Kitten>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual Populate for Arrays in Typegoose\nDESCRIPTION: Demonstrates how to set up virtual populate for an array of references in Typegoose. This example shows a Cat class with a virtual 'kittens' property referencing multiple Kitten documents.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/virtuals.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Kittens {\n  @prop({ required: true, ref: () => Cat ) }) // providing the type deferred\n  public parent: Ref<Cat>;\n}\n\nclass Cat {\n  @prop({\n    ref: () => Kittens,\n    foreignField: 'parent', // compare this value to the document populate is called on\n    localField: '_id' // compare this to the foreign document's value defined in \"foreignField\"\n  })\n  public kittens: Ref<Kittens>[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing references with custom ID types in Typegoose\nDESCRIPTION: Example showing how to create references when the referenced model has a non-default ID type (string instead of ObjectId). The type option in @prop is used to specify the ID type and the second generic parameter of Ref is used to provide type information.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/types/ref-type.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Kitten {\n  @prop()\n  public _id?: string;\n\n  @prop()\n  public name?: string;\n}\n\n// For Single References\nclass Person {\n  // The \"type\" options in this case refers to the \"_id\" type of the referenced class, by default it will be \"ObjectId\"\n  @prop({ ref: () => Kitten, type: () => String })\n  public pet?: Ref<Kitten, string>;\n}\n\n// For a Array of References\nclass Person {\n  // The \"type\" options in this case refers to the \"_id\" type of the referenced class, by default it will be \"ObjectId\"\n  @prop({ ref: () => Kitten, type: () => String })\n  public pet?: Ref<Kitten, string>[];\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logger in Typegoose Project Entry File\nDESCRIPTION: Demonstrates how to properly set up debug logging in a Typegoose project. The setLogLevel function must be called before any other imports to ensure decorators are properly logged.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/logger.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Project Entry file\nimport { setLogLevel } from \"@typegoose/typegoose\";\nsetLogLevel(\"DEBUG\");\n\nimport { anythingElse } from \"someModule\";\nimport { SomeModel } from \"./someModel\";\n\n// the rest of the main entry file\n```\n\n----------------------------------------\n\nTITLE: Using ArraySubDocumentType for Array Subdocuments\nDESCRIPTION: Example demonstrating how to use ArraySubDocumentType to enable access to both the parent document and parent array from elements within a subdocument array.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/types/documentType.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass Place {\n  @prop()\n  public name?: string;\n}\n\nclass Cat {\n  @prop({ type: () => Place })\n  public favoritePlaces!: ArraySubDocumentType<Place>[];\n}\n\nconst CatModel = getModelForClass(Cat);\n\nconst catdoc = new CatModel({ favoritePlaces: [{ name: \"countertop\" }, { name: \"printer\" }]})\n\ncatdoc.favoritePlaces[0].parent() === catdoc;\ncatdoc.favoritePlaces[0].parentArray() === catdoc.favoritePlaces;\n```\n\n----------------------------------------\n\nTITLE: Using refPath with @prop for Dynamic References in TypeScript\nDESCRIPTION: This example shows how to use the 'refPath' option with @prop to create dynamic references based on another field's value. It demonstrates referencing different models based on a string field.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass Car {}\nclass Shop {}\n\n// in another class\nclass Another {\n  @prop({ required: true, enum: 'Car' | 'Shop' })\n  public which!: string;\n\n  @prop({ refPath: 'which' })\n  public kind?: Ref<Car | Shop>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'id' Instead of '_id' in Typegoose Models\nDESCRIPTION: Shows how to define types to use Mongoose's virtual 'id' property alongside the standard '_id' property in a Typegoose model.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/faq.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Cat {\n  id: mongoose.Types.ObjectId;\n  _id: mongoose.Types.ObjectId;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Mongoose Array Fields in Typegoose\nDESCRIPTION: Example showing how to declare a required array field with an empty array default value using mongoose's Array type. This approach allows access to mongoose's array methods while maintaining type safety.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/array-types.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ModelClass {\n  // required field, with empty array by default.\n  @prop({ type: String, required: true, default: [] })\n  public field!: mongoose.Types.Array<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an array of references in Typegoose\nDESCRIPTION: Implementation of a Cat class with an array of references to Kitten models. The Ref<Kitten>[] syntax is used to define an array of references.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/types/ref-type.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Cat {\n  @prop({ ref: () => Kitten })\n  public babies?: Ref<Kitten>[];\n}\n```\n\n----------------------------------------\n\nTITLE: Using type and ref with or without deferred functions in Typegoose\nDESCRIPTION: Shows how to define property types using direct reference or deferred function syntax. The deferred function approach helps avoid circular reference issues and use-before-declaration errors.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/syntax-notes.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Cat {\n  @prop({ type: String })\n  public name: string;\n\n  // is the same as\n  @prop({ type: () => String })\n  public name: string;\n}\n\nclass Cat {\n  @prop({ type: Food }) // ERROR: Used before declaration\n  public food: Food;\n\n  @prop({ type: () => Food }) // no error, thanks to the deferred function\n  public food: Food;\n}\n\nclass Food {\n  @prop({ type: String })\n  public vitamins: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using AutoIncrementSimple from @typegoose/auto-increment\nDESCRIPTION: Example of how to use the AutoIncrementSimple plugin from @typegoose/auto-increment, which increments a field on each save.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/common-plugins.mdx#2025-04-17_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n@plugin(AutoIncrementSimple, [{ field: 'someIncrementedField' }])\nclass SomeClass {\n  @prop() // does not need to be empty\n  public someIncrementedField: number;\n}\n\nconst SomeModel = getModelForClass(SomeClass);\n\nconst doc = await SomeModel.create({ someIncrementedField: 10 });\n\nawait doc.save(); // someIncrementedField will be incremented here\nconsole.log(doc.someIncrementedField); // will print \"11\"\n```\n\n----------------------------------------\n\nTITLE: Using DocumentType with a Kitten Class Example\nDESCRIPTION: Example showing how to use DocumentType with a Kitten class to enable proper typing for instance methods, giving 'this' the correct type information.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/types/documentType.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Kitten {\n  @prop()\n  public name?: string;\n\n  // this is an Instance Method\n  public getName(this: DocumentType<Kitten>) {\n    return this.name; // thanks to \"DocumentType\" \"this\" has type information\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: isRefType Usage Example in TypeScript\nDESCRIPTION: Example showing how to use isRefType to check if a Cat's partner reference is of type ObjectId.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/typeguards/isRefType.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Cat {\n  @prop({ ref: 'Cat' })\n  public partner: Ref<Cat>;\n\n  // this example could be smaller, but for demonstation purposes this is a longer version\n  public hasPartner(): boolean {\n    if (isRefType(this.partner, mongoose.Types.ObjectId)) {\n      // \"this.partner\" now has the type of \"Cat._id\"'s RefType (in this case \"ObjectId\")\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Various Index Types in Typegoose with @index Decorator\nDESCRIPTION: Example demonstrating how to apply the @index decorator to create different types of MongoDB indices: a compound index with uniqueness constraint, a geospatial index, and an index with a partial filter expression. The Location class shows the fields these indices are applied to.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/indexes.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@index({ article: 1, user: 1 }, { unique: true }) // compound index\n@index({ location: '2dsphere' }) // single index with no options\n@index({ article: 1 }, { partialFilterExpression: { stars: { $gte: 4.5 } } }) // single index with options\nclass Location {\n  @prop()\n  public article?: number;\n\n  @prop()\n  public user?: number;\n\n  @prop()\n  public stars?: number;\n\n  @prop({ type: Number, dim: 2 })\n  public location?: number[][];\n}\n```\n\n----------------------------------------\n\nTITLE: Array type definition approaches in Typegoose prop decorators\nDESCRIPTION: Demonstrates different ways to define array types in Typegoose, including single and multi-dimensional arrays. Shows how to explicitly set properties as arrays using PropType.ARRAY.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/syntax-notes.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Cat {\n  @prop({ type: String }) // one dimensional array\n  public nickNames: string[]; // array type automatically inferred because of \"emitDecoratorMetadata\" reflection\n\n  // the above and below examples are the same\n  @prop({ type: [String] }) // one dimensional array\n  public nickNames: string[]; // array type automatically inferred because of \"emitDecoratorMetadata\" reflection\n\n  // to use more dimensions\n  @prop({ type: [[String]] }) // two-dimensional array\n  public nickNames: string[][]; // array type automatically inferred because of \"emitDecoratorMetadata\" reflection\n\n  @prop({ type: String }, PropType.ARRAY) // one dimensional array, explicitly set to be an array\n  public explicitArray: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Deferred Reference Solution in TypeScript\nDESCRIPTION: Shows the correct way to implement self-referencing using deferred references in Typegoose classes.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/known-issues.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass SomeClass {\n  @prop({ ref: () => SomeClass }) // or hardcode the string\n  public ref: Ref<SomeClass>;\n}\n```\n\n----------------------------------------\n\nTITLE: Typegoose Implementation with Nested Classes\nDESCRIPTION: The equivalent Typegoose implementation using separate classes for nested properties. Due to TypeScript reflection limitations, nested objects must be defined as separate classes.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/nesting-classes.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  @prop()\n  public name?: string;\n\n  @prop()\n  public properties?: Properties;\n}\n\nclass Properties {\n  @prop()\n  public hasEaten?: boolean;\n\n  @prop({ type: String })\n  public nicknames?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Property Aliases with @prop in TypeScript\nDESCRIPTION: This example shows how to use the 'alias' option with @prop to create aliases for properties. It demonstrates how to set up a property that will be stored in the database under a different name.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass Dummy {\n  @prop({ alias: 'helloWorld' })\n  public hello: string; // will be included in the DB\n  public helloWorld: string; // will NOT be included in the DB, just for type completion (gets passed as hello in the DB)\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of isDocumentArray Type Guard\nDESCRIPTION: Demonstrates how to use the isDocumentArray function to check if an array of references contains only Mongoose documents, allowing for proper type narrowing in TypeScript.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/typeguards/isDocument.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Cat {\n  @prop({ ref: 'Cat' })\n  public kittens: Ref<Cat>;\n\n  // this example could be smaller, but for demonstation purposes this is a longer version\n  public areAllKittensExisting(): boolean {\n    if (isDocumentArray(this.kittens)) {\n      // \"this.kittens\" now has the type of \"DocumentType<Cat>[]\"\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual Populate for Single Document in Typegoose\nDESCRIPTION: Shows how to set up virtual populate for a single document reference in Typegoose. This example demonstrates a Parent class with a virtual 'one' property referencing a single Sub document.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/virtuals.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Sub {\n  @prop({ required: true, ref: () => Parent }) // providing the type deferred\n  public parent: Ref<Parent>;\n}\n\nclass Parent {\n  @prop({\n    ref: () => Sub,\n    foreignField: 'parent',\n    localField: '_id',\n    justOne: true // when this is not set to \"true\", mongoose will always return a Array\n  })\n  public one: Ref<Sub>;\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple array type variations in Typegoose models\nDESCRIPTION: Shows different TypeScript type declarations for arrays in Typegoose, including normal arrays, Mongoose arrays, and subdocument arrays with their specific functions.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/syntax-notes.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Cat {\n  @prop({ type: String })\n  public normalArray: string[]; // normal array, will still be a Mongoose array at runtime, but not in types\n\n  @prop({ type: String })\n  public mongooseArray: mongoose.Types.Array<string>; // Mongoose array, with Mongoose functions provided (the \"normalArray\" would still be this type at runtime)\n\n  // the \"ArraySubDocumentType\" type is provided by Typegoose\n  @prop({ type: () => Kitten })\n  public subDocArray: ArraySubDocumentType<Kitten>[]; // Mongoose subdocument array, with Mongoose subdocument functions provided\n}\n\nclass Kitten {\n  @prop()\n  public name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lean Queries with Typegoose and Class-Transformer\nDESCRIPTION: Example of using a lean query with Typegoose and Class-Transformer. It demonstrates how to deserialize a Plain Old JavaScript Object (POJO) into an Account instance and then serialize it back.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/class-transformer.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// lean return a Plain Old Javascript Object\nconst pojo = await AccountModel.findById(id).orFail().lean().exec();\n// deserialize Plain Old Javascript Object into an instance of the Account class\nconst deserialized = plainToClass(Account, pojo);\n// serialize Account instance back to a Plain Old Javascript Object, applying class-transformer's magic\nconst serialized = instanceToPlain(deserialized);\n```\n\n----------------------------------------\n\nTITLE: Equivalent Mongoose Schema Creation\nDESCRIPTION: Shows how Typegoose generates Mongoose schemas under the hood, creating separate schema instances for nested classes.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/nesting-classes.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst PropertiesSchema = new mongoose.Schema({\n  hasEaten: {\n    type: Boolean\n  },\n  nicknames: [{\n    type: String\n  }]\n});\n\nconst AnimalSchema = new mongoose.Schema({\n  name: {\n    type: String\n  },\n  properties: {\n    type: PropertiesSchema\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: String Transformation Options in Typegoose\nDESCRIPTION: Demonstrates the use of lowercase, uppercase, and trim options for string transformations in Typegoose.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nclass LowerCased {\n  @prop({ lowercase: true })\n  public lowerCase: string; // \"HELLO\" -> \"hello\"\n}\n\nclass UpperCased {\n  @prop({ uppercase: true })\n  public upperCase: string; // \"hello\" -> \"HELLO\"\n}\n\nclass Trimmed {\n  @prop({ trim: true })\n  public trim: string; // \"   Trim me   \" -> \"Trim me\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of isDocument Type Guard\nDESCRIPTION: Demonstrates how to use the isDocument function to check if a reference field is populated with a Mongoose document, allowing for proper type narrowing in TypeScript.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/typeguards/isDocument.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Cat {\n  @prop({ ref: 'Cat' })\n  public partner: Ref<Cat>;\n\n  // this example could be smaller, but for demonstation purposes this is a longer version\n  public hasPartner(): boolean {\n    if (isDocument(this.partner)) {\n      // \"this.partner\" now has the type of \"DocumentType<Cat>\"\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Value for Number Property in Typegoose\nDESCRIPTION: Example of using the @prop decorator with a 'min' option to set the minimum allowed value for a number property in a Typegoose class.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mined {\n  @prop({ min: 0 })\n  public mined?: number; // the value must be at least 0\n}\n```\n\n----------------------------------------\n\nTITLE: Using getClass with Different Input Types Example\nDESCRIPTION: Example demonstrating how to use getClass with nested objects, documents, and string inputs. Shows retrieving classes from model instances and nested properties.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/getClass.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Nested-GetClass & Document-GetClass\nclass Food {\n  @prop()\n  public name: string;\n}\n\nclass Kitten {\n  @prop()\n  public currentFood: Food;\n}\n\nconst KittenModel = getModelForClass(Kitten);\n\nconst input = new KittenModel();\n\n// Nested\ngetClass(input.currentFood) === Food; // should be \"true\"\n// Document\ngetClass(input) === Kitten; // should be \"true\"\n// by string\ngetClass('Kitten') == Kitten; // should be \"true\"\n```\n\n----------------------------------------\n\nTITLE: UUID Implementation for Document IDs\nDESCRIPTION: Shows how to implement UUID v4 as the _id type with automatic generation using the default prop option.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/changeIDType.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass SomeUUIDv4 {\n  @prop({ required: true, default: () => uuidv4() })\n  public _id!: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Strict Query Options in Mongoose 6.x\nDESCRIPTION: Shows how to handle strict query behavior in Mongoose 6.x where strictQuery is true by default. Demonstrates querying with and without strict query mode, affecting how non-schema properties are handled in queries.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/non-nested-discriminators.mdx#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// The following will result in a empty array\nawait AnimalModel.find({ cageNumber: 10 });\n\n// use the following if it is required to be used this way\nawait AnimalModel.find({ cageNumber: 10 }, null, { strictQuery: false })\n```\n\n----------------------------------------\n\nTITLE: Defining String Regex Validation in Typegoose\nDESCRIPTION: Example of using the @prop decorator with a 'match' option to set a regular expression validation for a string property in a Typegoose class.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nclass RegExpString {\n  @prop({ match: /^H/i })\n  public matched?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Overwriting 'this' in Typegoose Instance Method\nDESCRIPTION: Demonstrates how to properly type 'this' in a Typegoose instance method to ensure access to document functions and correct typing.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/overwrite-this.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Kitten {\n  // Note the following \"this\"\n  public goEat(this: DocumentType<Kitten>, where: string) {\n    // ...code to eat\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using mongoose-findorcreate with Typegoose\nDESCRIPTION: Example of how to use the mongoose-findorcreate plugin with Typegoose. It includes type definitions, class setup, and usage of the findOrCreate method.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/common-plugins.mdx#2025-04-17_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { DocumentType, getModelForClass, plugin, prop, defaultClasses } from '@typegoose/typegoose';\nimport mongoose from 'mongoose';\nimport * as findorcreate from 'mongoose-findorcreate';\n\n/**\n * Result for the `findOrCreate` function from mongoose-findorcreate\n */\nexport interface FindOrCreateResult<T> {\n  created: boolean;\n  doc: DocumentType<T>;\n}\n\n/**\n * This class contains all types for the module \"mongoose-findorcreate\", adjusted for typegoose\n */\n@plugin(findorcreate)\nexport abstract class FindOrCreate {\n  public static findOrCreate: <T extends FindOrCreate>(\n    this: mongoose.Model<T>,\n    condition: FilterQuery<T>,\n    createWith?: any\n  ) => Promise<FindOrCreateResult<T>>;\n}\n\nclass SomeClass extends FindOrCreate {\n  @prop()\n  public someField!: string;\n}\n\nconst SomeClassModel = getModelForClass(SomeClass);\n\n(async () => {\n  await mongoose.connect(`mongodb://localhost:27017/`, { dbName: 'guides' });\n\n  console.log(await SomeClassModel.findOrCreate({ someField: 'Hello' }));\n  console.log(await SomeClassModel.findOrCreate({ someField: 'Hello' })); // both will give the same output\n\n  await mongoose.disconnect();\n})();\n```\n\n----------------------------------------\n\nTITLE: Using SubDocumentType for Accessing Parent Document\nDESCRIPTION: Example showing how to use SubDocumentType with a nested document structure to enable access to the parent document via the .parent() method.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/types/documentType.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Place {\n  @prop()\n  public name?: string;\n}\n\nclass Cat {\n  @prop({ type: () => Place })\n  public favoritePlace!: SubDocumentType<Place>;\n}\n\nconst CatModel = getModelForClass(Cat);\n\nconst catdoc = new CatModel({ favoritePlace: { name: \"countertop\" } })\n\ncatdoc.favoritePlace.parent() === catdoc;\n```\n\n----------------------------------------\n\nTITLE: TypeGoose Model Retrieval Example\nDESCRIPTION: Demonstrates different ways to retrieve a Mongoose model using getModelWithString, including direct model name access, utils.getName(), and document-based retrieval. Shows the recommended approaches and alternatives.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/getModelWithString.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Kitten {\n  @prop()\n  public name?: string;\n}\n\nconst KittenModel = getModelForClass(Kitten);\n\nconst KittenModelNew = getModelWithString(KittenModel.modelName);\n// OR with the internal utils.getName(class)\nconst KittenModelNew = getModelWithString(utils.getName(Kitten));\n// BUT when you have the class at your disposal, you should use \"getModelForClass\" - it will return the already compiled model\n// also possible is to use \"getClass\" to get the class from something like a document, but it would be better to directly get the model from the document\nconst KittenModelNew = getModelWithString(getClass(somedocument) ?? \"\");\n// instead of using a document it is recommended to directly get the model with\nsomedocument.$model;\n```\n\n----------------------------------------\n\nTITLE: Usage Example of addModelToTypegoose with Mongoose Model\nDESCRIPTION: Example demonstrating how to use addModelToTypegoose to create a Typegoose model for a Kitten class with a name property, showing the complete workflow from class definition to model creation.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/addModelToTypegoose.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Kitten {\n  @prop()\n  public name?: string;\n}\n\nconst kittenSchema = buildSchema(Kitten);\nconst KittenModel = addModelToTypegoose(mongoose.model('Kitten', kittenSchema), Kitten);\n// \"KittenModel\" is now a valid Typegoose model\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Value for Number Property in Typegoose\nDESCRIPTION: Demonstration of using the @prop decorator with a 'max' option to set the maximum allowed value for a number property in a Typegoose class.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nclass Maxed {\n  @prop({ max: 10 })\n  public maxed?: number; // the value can be at most 10\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectId Type in Typegoose Model\nDESCRIPTION: This snippet shows how to correctly define a property of type ObjectId in a Typegoose model class. It imports necessary dependencies and uses the @prop decorator to define the userId property.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/objectId.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport mongoose from 'mongoose';\nimport { prop } from '@typegoose/typegoose';\n\nclass FooModel {\n  @prop()\n  userId: mongoose.Types.ObjectId;\n}\n```\n\n----------------------------------------\n\nTITLE: Using AutoIncrementID from @typegoose/auto-increment\nDESCRIPTION: Example of how to use the AutoIncrementID plugin from @typegoose/auto-increment, which increments the _id field for new documents.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/common-plugins.mdx#2025-04-17_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n@plugin(AutoIncrementID, {})\nclass SomeClass {\n  @prop()\n  public _id: number;\n\n  @prop() // does not need to be empty\n  public someIncrementedField: number;\n}\n\nconst SomeModel = getModelForClass(SomeClass);\n\nconst doc1 = await SomeModel.create({ someIncrementedField: 10 }); // _id will be 1\nconst doc2 = await SomeModel.create({ someIncrementedField: 20 }); // _id will be 2\n```\n\n----------------------------------------\n\nTITLE: Disabling Index Inheritance with disableLowerIndexes in Typegoose\nDESCRIPTION: Example of using disableLowerIndexes option to prevent inheriting indexes from parent classes while keeping indexes defined on the current class.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/modelOptions.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@index({ dummy1: 1 })\nclass IndexInherit5 {\n  @prop()\n  public dummy1?: string;\n}\n\n@index({ dummy2: 1 })\n@modelOptions({ options: { disableLowerIndexes: true } }) // does not inherit index \"{ dummy1: 1 }\", but will still include \"{ dummy2: 1 }\"\nclass IndexInherit6 extends IndexInherit5 {\n  @prop()\n  public dummy2?: string;\n}\n\n@index({ dummy3: 1 })\nclass IndexInherit7 extends IndexInherit6 {\n  @prop()\n  public dummy3?: string;\n}\n\nconst sch = buildSchema(IndexInherit7);\n\nconst indexes = sch.indexes();\nassert(indexes.length === 2);\n```\n\n----------------------------------------\n\nTITLE: Nested Discriminator Implementation\nDESCRIPTION: Improved implementation using nested discriminators for proper type validation and middleware support.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/nested-discriminators.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@modelOptions({\n  schemaOptions: {\n    discriminatorKey: 'name',\n    _id: false,\n  },\n})\nclass MedicationBase {\n  @prop({ required: true })\n  public name!: string;\n}\n\nenum MedicationTypes {\n  MedicationA = 'MedicationA',\n  MedicationB = 'MedicationB',\n}\n\nclass MedicationA extends MedicationBase {\n  @prop({ required: true })\n  public amount!: number;\n}\n\nclass MedicationB extends MedicationBase {\n  @prop({ required: true })\n  public length!: number;\n}\n\nclass Animal {\n  @prop({ required: true, unique: true })\n  public patientNumber!: number;\n\n  @prop({\n    required: true,\n    type: MedicationBase,\n    discriminators: () => [\n      { type: MedicationA, value: MedicationTypes.MedicationA },\n      { type: MedicationB, value: MedicationTypes.MedicationB },\n    ],\n  })\n  public medications!: MedicationBase[];\n}\n\nconst AnimalModel = getModelForClass(Animal);\n```\n\n----------------------------------------\n\nTITLE: Defining Number Enums in Typegoose\nDESCRIPTION: Shows how to use number enums with Typegoose's @prop decorator. This feature is supported since mongoose 5.8 and typegoose 6.2.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nenum Gender {\n  MALE, // equal to \"= 0\"\n  FEMALE // equal to \"= 1\"\n}\n\nclass Enumed {\n  @prop({ enum: Gender })\n  public gender?: Gender;\n\n  // typegoose enum also supports deferred function\n  @prop({ enum: Gender })\n  public gender?: Gender;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Property Selection with @prop in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the 'select' option with @prop to control whether a property is included by default when querying the database. It shows how to exclude a property by default and how to explicitly select it in queries.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass Dummy {\n  @prop({ select: false })\n  public hello: string;\n}\n\n// find all in the collection and have the \"hello\" property selected\nconst dummies = await DummyModel.find().select('+hello').exec();\n```\n\n----------------------------------------\n\nTITLE: Managing Model Caching with disableCaching in Typegoose\nDESCRIPTION: Example showing how to control Typegoose's model caching behavior using the disableCaching option, which affects whether models can be retrieved by name later.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/modelOptions.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// some values to keep references\nlet KittenModel1: mongoose.Model<any>;\nlet KittenModel2: mongoose.Model<any>;\nlet KittenClass1: AnyParamConstructor<any>;\nlet KittenClass2: AnyParamConstructor<any>;\n{\n  class Kitten {\n    @prop()\n    public name?: string;\n  }\n\n  KittenModel1 = getModelForClass(Kitten, { options: { disableCaching: true } });\n  KittenClass1 = Kitten;\n}\nassert.ok(getModelWithString(getName(KittenClass1)) === undefined); // caching was disabled locally, so it cannot be found - because it was never added\n{\n  class Kitten {\n    @prop()\n    public nameTag?: string;\n  }\n\n  KittenModel2 = getModelForClass(Kitten, {\n    existingConnection: mongoose.createConnection(),\n  });\n  KittenClass2 = Kitten;\n}\nassert.ok(getModelWithString(getName(KittenClass2))); // caching was enabled, so the second can be found\n\n// the following will return the \"KittenModel2\" instance, because both classes have the same name but only the second one was added to the caching\n// and caching currently works by (typegoose generated) name\nconst KittenModel3 = getModelForClass(KittenClass1);\n// Note that the above *would* work if \"disableCaching\" would be defined via a \"@modelOptions\" decorator, because then caching would also have been disabled here\n\nassert.ok(KittenModel1 !== KittenModel2); // check that both original models do not match, because caching was disabled they are different\n\nassert.ok(KittenModel3 === KittenModel2); // check that \"KittenModel3\" is the same reference as \"KittenModel2\", because \"KittenClass2\" was added with caching and has the same name\n```\n\n----------------------------------------\n\nTITLE: Using innerOptions in Typegoose\nDESCRIPTION: Demonstrates the use of innerOptions to override options at the \"Type\" level. This example shows how to set required: true for each element in an array.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nclass Something {\n  @prop({ innerOptions: { required: true } })\n  public propy: string[];\n}\n\n// This would be mapped to\n{\n  type: [{ type: String, required: true }]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Name Generation in Typegoose\nDESCRIPTION: Demonstrates how customName option works with both static values and functions for dynamic name generation.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/name-generation.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Example having \"customName\" statically set\n@modelOptions({ options: { customName: \"Hello\" } })\nclass SomeClassWithCustomName {\n  @prop()\n  public someProp: string;\n}\n\n// The resulting name will be the statically defined \"customName\"\nassertion(getName(SomeClassWithCustomName) === 'Hello');\n\n// Example having \"customName\" be a function\nlet counter = 0;\n@modelOptions({ options: { customName: () => {\n  counter++;\n  return \"Hello\" + counter;\n} } })\nclass SomeClassWithCustomNameFunction {\n  @prop()\n  public someProp: string;\n}\n\n// The resulting name will be the generated \"customName\"\nassertion(getName(SomeClassWithCustomNameFunction) === 'Hello0');\nassertion(getName(SomeClassWithCustomNameFunction) === 'Hello1');\n```\n\n----------------------------------------\n\nTITLE: Automatic Name Generation in Typegoose\nDESCRIPTION: Shows how automaticName option affects name generation, both with and without a collection defined.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/name-generation.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Example without having \"collection\" defined\n@modelOptions({ options: { automaticName: true } })\nclass SomeClassWithoutCollection {\n  @prop()\n  public someProp: string;\n}\n\n// The resulting name will be the class name\nassertion(getName(SomeClassWithoutCollection) === 'SomeClassWithoutCollection');\n\n// Example having \"collection\" defined\n@modelOptions({ schemaOptions: { collection: 'someCollection' }, options: { automaticName: true } })\nclass SomeClassWithoutCollection {\n  @prop()\n  public someProp: string;\n}\n\n// The resulting name will be a combination of the class name and the collection\nassertion(getName(SomeClassWithoutCollection) === 'SomeClassWithoutCollection_someCollection');\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentType Interface in TypeScript\nDESCRIPTION: The type definition for DocumentType, which combines mongoose.Document and a generic type T to provide type information for MongoDB documents.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/types/documentType.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype DocumentType<T, QueryHelpers = BeAnObject>\n```\n\n----------------------------------------\n\nTITLE: String Validation Options in Typegoose\nDESCRIPTION: Shows how to use maxlength and minlength options for string validation in Typegoose.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nclass MaxLengthed {\n  @prop({ maxlength: 10 })\n  public maxlengthed?: string; // the string can only be 10 characters long\n}\n\nclass MinLengthed {\n  @prop({ minlength: 10 })\n  public minlengthed?: string; // the string must be at least 10 characters long\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Search Index in Typegoose\nDESCRIPTION: Example of creating a static search index on an Author class where only specific fields (birthday and biography) are mapped with defined types.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/searchIndexes.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// static search index that only maps some fields\n@searchIndex({\n  name: 'authorSearch',\n  definition: {\n    mappings: {\n      dynamic: false,\n      fields: {\n        birthday: { type: 'date' },\n        biography: { type: 'string' },\n      },\n    },\n  },\n})\nclass Author {\n  @prop({ required: true })\n  public name!: string;\n\n  @prop({ required: true })\n  public birthday!: Date;\n\n  @prop({ required: true })\n  public biography!: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Discriminators in Typegoose\nDESCRIPTION: This code shows querying with properly configured discriminators, where each model correctly queries only its corresponding document types.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/non-nested-discriminators.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait CatModel.create({ patientNumber: 0, nameTag: \"Catty-1\" });\nawait DogModel.create({ patientNumber: 1, cageNumber: 1 });\n\n// for this example its an \"findOne\" to lower the example code\nconst found = await ParrotModel.findOne({}).exec();\n\nconsole.log(\"found\", found);\n```\n\n----------------------------------------\n\nTITLE: Using outerOptions in Typegoose\nDESCRIPTION: Shows how to use outerOptions to override options at the \"Array\" level. This example demonstrates setting a maxlength constraint on the entire array.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nclass Something {\n  @prop({ outerOptions: { maxlength: 1 } })\n  public propy: string[];\n}\n\n// This would be mapped to\n{\n  type: [{ type: String }],\n  maxlength: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Using SchemaOptions Collection With automaticName in Typegoose\nDESCRIPTION: Example of setting a custom collection name with automaticName flag enabled, which adds the collection name as a suffix to the model name.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/models-with-same-name.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@modelOptions({ schemaOptions: { collection: 'Something' }, options: { automaticName: true } })\nclass MultiModel {}\n\nconst model = getModelForClass(MultiModel);\nexpect(model.modelName).to.be.equal('MultiModel_Something');\n```\n\n----------------------------------------\n\nTITLE: Setting Array Dimensions in Typegoose\nDESCRIPTION: Demonstrates how to set array dimensions using the dim option or the type arrow function syntax. This is useful for creating multi-dimensional arrays.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nclass Something {\n  @prop({ dim: 3, type: String })\n  public propy: string[][][];\n  //or\n  @prop({ type: () => [[[String]]] })\n  public propy: string[][][];\n}\n\n// This would be mapped to\n{\n  type: [[[{ type: String }]]]\n}\n\nclass ArrayInType {\n  @prop({ type: () => [[String]] }) // dim is 2\n  public propy: string[][];\n\n  @prop({ type: () => [String] }) // dim is 1\n  public propy: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Ref<PopulatedType, RawId> type in TypeScript\nDESCRIPTION: The type definition for Ref<PopulatedType, RawId> which is used for MongoDB document references. It takes a PopulatedType parameter for the type when populated and an optional RawId parameter to override the reference type.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/types/ref-type.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Ref<\n  PopulatedType,\n  RawId extends mongoose.RefType = PopulatedType extends { _id?: mongoose.RefType }\n    ? NonNullable<PopulatedType['_id']>\n    : mongoose.Types.ObjectId\n>\n```\n\n----------------------------------------\n\nTITLE: Defining @plugin Decorator Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript function signature for the @plugin decorator. It specifies the expected parameters and return type, allowing for type-safe usage of the decorator in Typegoose models.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/plugin.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction plugin<TFunc extends Func, TParams = Parameters<TFunc>[1]>(mongoosePlugin: TFunc, options?: TParams): ClassDecorator\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Search Index in Typegoose\nDESCRIPTION: Example of creating a dynamic search index on a Book class that automatically maps all fields based on their types without explicit field definitions.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/searchIndexes.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// dynamic index that maps all fields based on their type\n@searchIndex({ name: 'BookSearch', definition: { dynamic: true } })\nclass Book {\n  @prop({ required: true })\n  public title!: string;\n\n  @prop({ required: true })\n  public author!: Ref<Author>;\n\n  @prop({ required: true })\n  public description!: string;\n\n  @prop({ required: true })\n  public publicationYear!: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Shared Parent Model in Typegoose\nDESCRIPTION: This snippet demonstrates how to query all animals using the shared parent model, which will return documents of any child type.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/non-nested-discriminators.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait CatModel.create({ patientNumber: 0, nameTag: \"Catty-1\" });\nawait DogModel.create({ patientNumber: 1, cageNumber: 1 });\n\n// for this example its an \"findOne\" to lower the example code\nconst found = await AnimalModel.findOne({}).exec();\n\nconsole.log(\"found\", found);\n```\n\n----------------------------------------\n\nTITLE: Overriding _id Type in Typegoose Base Interface\nDESCRIPTION: This snippet demonstrates how to override the _id type in the Base interface, which is available in typegoose 6.0.2 and later versions. It shows the pattern of extending the Base interface while optionally extending other classes.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/defaultClasses.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Something extends Base {} // have the interface to add the types of \"Base\" to the class\nclass Something {} // have your class, OR\nclass Something extends TimeStamps {} // have your class extend some other class\n```\n\n----------------------------------------\n\nTITLE: isRefTypeArray Overload 2 Type Definition\nDESCRIPTION: Type definition for the second overload of isRefTypeArray function that handles standard array references.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/typeguards/isRefType.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isRefTypeArray<T, S extends RefType>(docs: Ref<T, S>[] | undefined, refType: AllowedRefTypes): docs is NonNullable<S>[];\n```\n\n----------------------------------------\n\nTITLE: Using modelOptions Decorator in Typegoose 6.0.0\nDESCRIPTION: Shows how to use the new modelOptions decorator to configure schema options for a class. This replaces previous ways of setting schema options through the model creation functions.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/migration/migrate-6.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@modelOptions({ schemaOptions: {} })\nclass Name {}\n```\n\n----------------------------------------\n\nTITLE: SubDocument type variations in Typegoose models\nDESCRIPTION: Demonstrates how to declare different subdocument types in Typegoose, showing normal subdocuments, typed subdocuments with Mongoose functions, and subdocument arrays.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/syntax-notes.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Cat {\n  @prop({ type: () => Kitten })\n  public normalSubDoc: Kitten; // normal subdocument, no extra Mongoose functions in the types\n\n  // the \"SubDocumentType\" type is provided by Typegoose\n  @prop({ type: () => Kitten })\n  public typedSubDoc: SubDocumentType<Kitten>; // Mongoose subdocument type, with Mongoose subdocument functions\n\n  // the \"ArraySubDocumentType\" type is provided by Typegoose\n  @prop({ type: () => Kitten })\n  public subDocArray: ArraySubDocumentType<Kitten>[]; // Mongoose subdocument array, with Mongoose subdocument functions provided\n}\n\nclass Kitten {\n  @prop()\n  public name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Guards with Discriminator Queries\nDESCRIPTION: This snippet demonstrates how to use type guards to maintain proper TypeScript typing when querying with the parent model, allowing access to subclass-specific properties.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/non-nested-discriminators.mdx#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction checkForClass<T extends Animal>(doc: mongoose.Document & KeyStringAny, name: string): doc is DocumentType<T> {\n  return doc?.__t === name;\n}\n\nawait CatModel.create({ patientNumber: 0, nameTag: \"Catty-1\" });\nawait DogModel.create({ patientNumber: 1, cageNumber: 1 });\n\n// for this example its an \"findOne\" to lower the example code\nconst found = await AnimalModel.findOne({ patientNumber: 0 }).orFail().exec();\n\nif (checkForClass<Cat>(found, Names.CAT)) {\n  console.log(\"runtime Cat\", found.nameTag);\n}\nconsole.log(\"found\", found);\n```\n\n----------------------------------------\n\nTITLE: Using PropType with @prop Decorator in TypeScript\nDESCRIPTION: Example showing how to use @prop with a second parameter to force a specific property type mode, which replaces the previously deprecated decorators like mapProp and arrayProp.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/migration/migrate-8.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@prop({}, PropType.ARRAY)\n```\n\n----------------------------------------\n\nTITLE: Type Definition for modelOptions Decorator in Typegoose\nDESCRIPTION: TypeScript type definition for the modelOptions decorator function, showing it accepts an IModelOptions parameter and returns a ClassDecorator.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/modelOptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction modelOptions(options: IModelOptions): ClassDecorator\n```\n\n----------------------------------------\n\nTITLE: Using getModelForClass in Typegoose 6.0.0\nDESCRIPTION: Demonstrates the new import syntax for getModelForClass which has been moved out of the Typegoose class. The function is now imported directly from the typegoose package rather than being accessed as a method of the Typegoose class.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/migration/migrate-6.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getModelForClass } from 'typegoose';\nclass Name {}\n\nconst NameModel = getModelForClass(Name);\n```\n\n----------------------------------------\n\nTITLE: Reference Implementation in Typegoose\nDESCRIPTION: Shows how to implement references in Typegoose, which uses the ref option and the Ref type to refer to other document models.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/nesting-classes.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  @prop()\n  public name?: string;\n\n  @prop({ ref: () => Properties })\n  public properties?: Ref<Properties>;\n}\n\nclass Properties {\n  @prop()\n  public hasEaten?: boolean;\n\n  @prop({ type: String })\n  public nicknames?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Normal Documents with Typegoose and Class-Transformer\nDESCRIPTION: Example of using a normal Mongoose document with Typegoose and Class-Transformer. It shows how to deserialize a Mongoose Object into an Account instance and then serialize it back.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/class-transformer.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// exec returns a Mongoose Object\nconst mo = await AccountModel.findById(id).orFail().exec();\n// deserialize Mongoose Object into an instance of the Account class\nconst deserialized = plainToClass(Account, mo);\n// serialize Account instance back to a Plain Old Javascript Object, applying class-transformer's magic\nconst serialized = instanceToPlain(deserialized);\n```\n\n----------------------------------------\n\nTITLE: Implementing Discriminator Models with Typegoose in TypeScript\nDESCRIPTION: This example demonstrates how to use getDiscriminatorModelForClass to create a base Event model and a ClickEvent discriminator model.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/getDiscriminatorModelForClass.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// The Base Class\nclass Event {\n  @prop({ required: true })\n  public name!: string;\n}\n\n// A Discriminator Class Variant\nclass ClickEvent extends Event {\n  @prop({ required: true, default: 0 })\n  public timesClicked!: number;\n}\n\nconst EventModel = getModelForClass(Event);\nconst ClickEventModel = getDiscriminatorModelForClass(EventModel, ClickEvent);\n```\n\n----------------------------------------\n\nTITLE: Alternative Discriminator Definitions\nDESCRIPTION: Shows different ways to define nested discriminators using either direct class references or discriminator objects.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/nested-discriminators.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  @prop({\n    type: MedicationBase,\n    discriminators: () => [\n      { type: MedicationA, value: MedicationTypes.MedicationA },\n      { type: MedicationB, value: MedicationTypes.MedicationB },\n    ],\n    discriminators: () => [\n      MedicationA,\n      MedicationB,\n    ],\n  })\n  public medications!: MedicationBase[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Discriminators with Type Guards\nDESCRIPTION: This snippet shows how to use custom discriminator names via an enum and implement a type guard function to properly handle type checking at runtime.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/non-nested-discriminators.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// an enum to make it easier to access the names for the typeguard\nenum Names {\n  DOG = \"DOG\",\n  CAT = \"CAT\",\n  PARROT = \"PARROT\",\n}\n\n@modelOptions({ schemaOptions: { collection: \"animal\" } })\nclass Animal {\n  @prop({ required: true, unique: true })\n  public patientNumber!: number;\n}\n\nclass Dog extends Animal {\n  @prop()\n  public cageNumber!: number;\n}\n\nclass Cat extends Animal {\n  @prop()\n  public nameTag!: string;\n}\n\nclass Parrot extends Animal {\n  @prop()\n  public commonMessage?: string;\n}\n\nconst AnimalModel = getModelForClass(Animal);\nconst DogModel = getDiscriminatorModelForClass(AnimalModel, Dog, Names.DOG);\nconst CatModel = getDiscriminatorModelForClass(AnimalModel, Cat, Names.CAT);\nconst ParrotModel = getDiscriminatorModelForClass(AnimalModel, Parrot, Names.PARROT);\n```\n\n----------------------------------------\n\nTITLE: getName Function Type Definition in Typegoose\nDESCRIPTION: Type definition of the getName function that takes a class constructor and optional model options to generate a model name.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/getName.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getName<U extends AnyParamConstructor<any>>(cl: U, overwriteOptions?: IModelOptions)\n```\n\n----------------------------------------\n\nTITLE: Subdocument Implementation in Typegoose\nDESCRIPTION: Shows how to implement subdocuments in Typegoose using nested classes. This approach creates nested schemas under the hood.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/nesting-classes.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  @prop()\n  public name?: string;\n\n  @prop()\n  public properties?: Properties;\n}\n\nclass Properties {\n  @prop()\n  public hasEaten?: boolean;\n\n  @prop({ type: String })\n  public nicknames?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Using mongoose-autopopulate with Typegoose (esModuleInterop: true)\nDESCRIPTION: Example of how to use the mongoose-autopopulate plugin with Typegoose when esModuleInterop is set to true. It shows the slight difference in import statement and plugin usage.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/common-plugins.mdx#2025-04-17_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport mongoose from 'mongoose';\nimport autopopulate from 'mongoose-autopopulate';\nimport { plugin, prop, Ref, getModelForClass } from '@typegoose/typegoose';\n\n@plugin(autopopulate)\nclass SomeClass {\n  @prop({ autopopulate: true, ref: 'SomeReferencedClass' })\n  public populateField: Ref<SomeReferencedClass>;\n}\n\nclass SomeReferencedClass {\n  // a dummy property is required, otherwise the class will equal to others\n  @prop()\n  public dummy?: string;\n}\n\nconst SomeClassModel = getModelForClass(SomeClass);\nconst SomeReferencedClassModel = getModelForClass(SomeReferencedClass);\n\n(async () => {\n  await mongoose.connect(`mongodb://localhost:27017/`, { dbName: 'guides' });\n\n  const reference = await SomeReferencedClassModel.create({ dummy: 'hello' });\n  const { _id: id } = await SomeClassModel.create({ populateField: reference } as SomeClass);\n\n  console.log(await SomeClassModel.findById(id).exec()); // output will be populated\n\n  await mongoose.disconnect();\n})();\n```\n\n----------------------------------------\n\nTITLE: Using the assertion function in TypeScript for type narrowing\nDESCRIPTION: This example demonstrates how to use the assertion function to narrow a union type to a specific type. The function checks the condition and narrows the type when the assertion passes, throwing an error otherwise.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/assertions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet someMultiValue: string | number | boolean = 'Hello';\n// \"someMultiValue\"'s type is currently \"string | number | boolean\", even with a string defined\nassertion(typeof someMultiValue === 'string');\n// now the type of \"someMultiValue\" is just \"string\" and an error is thrown if it is not a string\n```\n\n----------------------------------------\n\nTITLE: Defining FilterOutFunctionKeys Type in TypeScript\nDESCRIPTION: Type definition that filters out function keys from an object type using Omit and GetFunctionKeys utility types. Takes a generic type parameter T that extends object.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/types/utility-types.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype FilterOutFunctionKeys<T extends object> = Omit<T, GetFunctionKeys<T>>\n```\n\n----------------------------------------\n\nTITLE: Basic ID Type Change in Typegoose\nDESCRIPTION: Demonstrates how to change the _id field type to string in a Typegoose class using the @prop decorator.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/changeIDType.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SomeChangedID {\n  @prop()\n  public _id!: string; // change the type of _id to string\n}\n```\n\n----------------------------------------\n\nTITLE: Using mongoose-autopopulate with Typegoose (esModuleInterop: false)\nDESCRIPTION: Example of how to use the mongoose-autopopulate plugin with Typegoose when esModuleInterop is set to false. It demonstrates class definition, model creation, and usage of the autopopulate feature.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/common-plugins.mdx#2025-04-17_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport mongoose from 'mongoose';\nimport * as autopopulate from 'mongoose-autopopulate';\nimport { plugin, prop, Ref, getModelForClass } from '@typegoose/typegoose';\n\n@plugin(autopopulate as any) // this is a dirty fix, because the types of this plugin don't work with \"esModuleInterop: false\"\nclass SomeClass {\n  @prop({ autopopulate: true, ref: 'SomeReferencedClass' })\n  public populateField: Ref<SomeReferencedClass>;\n}\n\nclass SomeReferencedClass {\n  // a dummy property is required, otherwise the class will equal to others\n  @prop()\n  public dummy?: string;\n}\n\nconst SomeClassModel = getModelForClass(SomeClass);\nconst SomeReferencedClassModel = getModelForClass(SomeReferencedClass);\n\n(async () => {\n  await mongoose.connect(`mongodb://localhost:27017/`, { dbName: 'guides' });\n\n  const reference = await SomeReferencedClassModel.create({ dummy: 'hello' });\n  const { _id: id } = await SomeClassModel.create({ populateField: reference } as SomeClass);\n\n  console.log(await SomeClassModel.findById(id).exec()); // output will be populated\n\n  await mongoose.disconnect();\n})();\n```\n\n----------------------------------------\n\nTITLE: Typegoose @index Decorator Type Definition in TypeScript\nDESCRIPTION: Type definition of the @index decorator function, which accepts index fields and options. This decorator is used to create MongoDB indices on schemas similar to mongoose's schema.index() method.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/indexes.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction index<T extends BeAnObject = BeAnObject>(fields: mongoose.IndexDefinition, options?: IndexOptions<T>): ClassDecorator\n```\n\n----------------------------------------\n\nTITLE: Setting maxDepth for mongoose-autopopulate\nDESCRIPTION: Example of how to set the maxDepth option for mongoose-autopopulate to prevent recursive calls in self-referencing models.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/common-plugins.mdx#2025-04-17_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// the types of \"autopopulate\" may change depending on the tsconfig option \"esModuleInterop\"\n@plugin(autopopulate as any) // this is a dirty fix, because the types of this plugin don't work\nclass SomeClass {\n  @prop({ autopopulate: { maxDepth: 1 }, ref: 'SomeReferencedClass' })\n  public populateField: Ref<SomeReferencedClass>;\n}\n```\n\n----------------------------------------\n\nTITLE: Definition of @queryMethod in Typegoose\nDESCRIPTION: Type signature for the @queryMethod decorator function which takes a query helper function and returns a class decorator. The query helper function must have access to the query context via 'this' and return a Mongoose Query object.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/queryMethod.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction queryMethod<QueryHelpers, U extends AnyParamConstructor<any>>(\n  func: (this: QueryHelperThis<U, QueryHelpers>, ...params: any[]) => Query<any, any>\n): ClassDecorator\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of isDocumentArray (Standard Array Overload)\nDESCRIPTION: Second overload of the isDocumentArray function that works with standard JavaScript arrays. It checks if all elements in the array are Mongoose documents.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/typeguards/isDocument.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isDocumentArray<T, S extends RefType>(docs: Ref<T, S>[] | undefined): docs is DocumentType<NonNullable<T>>[];\n```\n\n----------------------------------------\n\nTITLE: Using Base Interface for ID Types\nDESCRIPTION: Demonstrates how to use the Base interface to specify ID types, including examples with plain classes and classes extending TimeStamps.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/changeIDType.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Something extends Base<string> {} // have the interface to add the types of \"Base\" to the class\nclass Something { // have your class, OR\n  @prop()\n  public _id: string;\n}\nclass Something extends TimeStamps { // have your class extend some other class\n  @prop()\n  public _id: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Name Generation in Typegoose\nDESCRIPTION: Demonstrates the default name generation behavior in Typegoose where the generated name is simply the class name.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/name-generation.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SomeClass {\n  @prop()\n  public someProp: string;\n}\n\n// The resulting name will be the class name\nassertion(getName(SomeClass) === 'SomeClass');\n```\n\n----------------------------------------\n\nTITLE: Disabling ID in Subdocuments\nDESCRIPTION: Examples of disabling _id in subdocuments using both schema options and prop options in Typegoose.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/changeIDType.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@modelOptions({ schemaOptions: { _id: false } }) // with the schema option\nclass WithNoId {\n  @prop()\n  public someValue: string;\n}\n\nclass SomeChangedID {\n  @prop({ type: WithNoId, _id: false }) // or with the prop-option\n  public someField: WithNoId[];\n}\n```\n\n----------------------------------------\n\nTITLE: Using mongoose-sequence with Typegoose\nDESCRIPTION: Example of how to use the mongoose-sequence plugin with Typegoose for auto-incrementing fields.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/common-plugins.mdx#2025-04-17_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport AutoIncrementFactory from 'mongoose-sequence';\n\n// AutoIncrement now is the instance\nconst AutoIncrement = AutoIncrementFactory(mongoose);\n\n@plugin(AutoIncrement, { inc_field: '_id', start_seq: 200 })\nclass SomeClass extends defaultClasses.Base<number> {\n  @prop()\n  public _id: number;\n}\n\n// The Plugin options can be applied too\n@plugin<mongoose.SequenceOptions>(AutoIncrement, { inc_field: '_id' }) // Note: \"start_seq\" is not in the \"SequenceOptions\" type\nclass SomeClass extends defaultClasses.Base<number> {\n  @prop()\n  public _id!: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using deleteModel Function Example\nDESCRIPTION: Example showing how to use deleteModel to remove a model named 'SomeUser' from the cache.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/deleteModel.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass SomeUser {}\n\nconst SomeUserModel = getModelForClass(SomeUser);\ndeleteModel('SomeUser');\n```\n\n----------------------------------------\n\nTITLE: Account Class Definition with Deepkit Type\nDESCRIPTION: Example class showing Typegoose and Deepkit type decorators usage with group-based access control\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/deepkit-type.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { t } from '@deepkit/type';\nimport { getModelForClass, prop } from '@typegoose/typegoose';\n\n// We have to use custom \"classToPlain\" and \"plainToClass\" functions, see \"Known Issues\" below\n\nenum Group {\n  confidential = 'confidential',\n  public = 'public',\n}\n\nclass Account {\n  @t.mongoId.group(Group.public)\n  public _id: string;\n\n  @t.group(Group.public)\n  public __v: number;\n\n  @t.group(Group.public)\n  @prop()\n  public email: string;\n\n  @t.group(Group.confidential)\n  @prop()\n  public confidentialProperty?: string;\n}\n\nconst AccountModel = getModelForClass(Account);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom allowMixed Severity in Typegoose\nDESCRIPTION: Demonstrates how to set a custom allowMixed Severity for a specific Property. This example sets the severity to ERROR for a mixed type property.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nclass Something {\n  @prop({ allowMixed: Severity.ERROR, type: () => mongoose.Schema.Types.Mixed })\n  public propy?: any;\n}\n\nbuildSchema(Something); // would throw a \"warnMixed\" error\n```\n\n----------------------------------------\n\nTITLE: Querying Animal Models Without Discriminators\nDESCRIPTION: This snippet shows how querying works without discriminators, demonstrating the problem where queries across different models don't properly discriminate between animal types.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/non-nested-discriminators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait CatModel.create({ patientNumber: 0, nameTag: \"Catty-1\" });\nawait DogModel.create({ patientNumber: 1, cageNumber: 1 });\n\n// for this example its a \"findOne\" to lower the example code\nconst found = await ParrotModel.findOne({}).exec();\n\n// this will \"find\" should log one of the 2 created above\nconsole.log(\"found\", found);\n```\n\n----------------------------------------\n\nTITLE: Using customName Option in Typegoose\nDESCRIPTION: Example of setting a custom model name using the customName option, which completely replaces the default model name.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/models-with-same-name.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@modelOptions({ options: { customName: 'CustomName' } })\nclass CustomNameOption {}\n\nconst model = getModelForClass(CustomNameOption);\nexpect(model.modelName).to.be.equal('CustomName');\n```\n\n----------------------------------------\n\nTITLE: Defining deleteModel Function Type in TypeScript\nDESCRIPTION: Type definition for the deleteModel function that removes a model from mongoose and Typegoose cache by its name.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/deleteModel.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction deleteModel(name: string)\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Property Output in Typegoose\nDESCRIPTION: Shows how to configure Typegoose to include virtual properties in the output by setting toJSON and toObject options in @modelOptions decorator.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/virtuals.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass Sub {}\n\n@modelOptions({\n  schemaOptions: {\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true }\n  }\n})\nclass Parent {\n  @prop({\n    ref: Sub,\n    foreignField: 'parent',\n    localField: '_id',\n    justOne: true\n  })\n  public one: Ref<Sub>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Passthrough Class for Direct Schema Definition in Typegoose\nDESCRIPTION: Demonstration of using the Passthrough class with the 'direct' option set to true for direct schema definition without typegoose processing for different PropTypes (NONE, ARRAY, MAP).\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nclass PassthroughWithDirect {\n  @prop({ type: () => new Passthrough({ somePath: String }, true) })\n  public child?: { somePath: string; };\n}\n\nclass PassthroughWithDirect {\n  @prop({ type: () => new Passthrough([{ somePath: String }], true) })\n  public child?: [{ somePath: string; }];\n}\n\nclass PassthroughWithDirect {\n  @prop({ type: () => new Passthrough({ type: Map, of: { somePath: String } }, true) })\n  public child?: Map<string, { somePath: string }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Suffixed Model Names with automaticName in Typegoose\nDESCRIPTION: Example showing how to combine automaticName and customName to create a model name that appends a suffix to the class name.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/modelOptions.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@modelOptions({ options: { customName: 'Something', automaticName: true } })\nclass MultiModel {}\n\nconst model = getModelForClass(MultiModel);\nexpect(model.modelName).to.be.equal('MultiModel_Something');\n```\n\n----------------------------------------\n\nTITLE: Example of Hook Deduplication with enableMergeHooks in Typegoose\nDESCRIPTION: Example showing how enableMergeHooks option can deduplicate hooks when using plugins. This helps prevent duplicate hooks execution in certain scenarios.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/modelOptions.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// this is a global function and can be de-duplicated, because they are the same reference\nfunction hookTestTimesGlobal() {}\n\nfunction pluginTestTimes(schema) {\n  pluginCount += 1;\n  // the following function cannot be de-duplicated, because they are a new reference each time the plugin gets called\n  schema.pre('save', function hookTestTimesNonGlobal() {});\n  schema.pre('save', hookTestTimesGlobal);\n}\n\n@plugin(pluginTestTimes)\n@modelOptions({\n  options: {\n    enableMergeHooks: true, // needs to be set, because by default typegoose does not need de-duplication\n  },\n})\nclass MergeHooks {\n  @prop()\n  public dummy?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a referenced class in Typegoose\nDESCRIPTION: A simple class definition for a Kitten model that will be referenced by other models. This class demonstrates a basic model with a name property.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/types/ref-type.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Kitten {\n  @prop()\n  public name?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes for Mongoose 7.0 Update\nDESCRIPTION: Major version update removing FindOrCreate functionality due to mongoose 7.0 incompatibility and updating mongoose dependency to version 7.0.0.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### ⚠ BREAKING CHANGES\n\n* **mongoose:** mongoose 7.0.0 is now in use\n* Default-Class \"FindOrCreate\" (and type \"FindOrCreateResult\") has been removed, because mongoose-findorcreate is not compatible with mongoose 7.0\n```\n\n----------------------------------------\n\nTITLE: Self-Containing Class Error Example in TypeScript\nDESCRIPTION: Demonstrates the limitation of self-referencing classes in Typegoose which causes a 'Maximum Class Stack Size Exceeded' error.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/known-issues.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SomeClass {\n  @prop()\n  public ref: SomeClass; // ERROR \"Maximum Class Stack Size Exceeded\"\n}\n```\n\n----------------------------------------\n\nTITLE: Difference Between Subdocument and Reference\nDESCRIPTION: A diff showing the key syntax differences between subdocument implementation and reference implementation in Typegoose.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/nesting-classes.mdx#2025-04-17_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\nclass Animal {\n  @prop()\n  public name?: string;\n\n-   @prop()\n-   public properties?: Properties;\n+   @prop({ ref: () => Properties })\n+   public properties?: Ref<Properties>;\n}\n\nclass Properties {\n  @prop()\n  public hasEaten?: boolean;\n\n  @prop({ type: String })\n  public nicknames?: string[];\n```\n\n----------------------------------------\n\nTITLE: Referencing Classes with Different _id Types in Typegoose\nDESCRIPTION: Demonstrates how to reference classes with non-default _id types (like String or Number) by explicitly setting the type option in the @prop decorator.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/reference-other-classes.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Cat {\n  @prop()\n  public _id: string;\n\n  @prop()\n  public year: number;\n}\n\nclass Person {\n  @prop()\n  public name: string;\n\n  @prop({ ref: () => Cat, type: () => String })\n  public pet?: Ref<Cat, string>;\n}\n```\n\n----------------------------------------\n\nTITLE: getModelForClass Function Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the getModelForClass function, showing its parameters and return type. It accepts a class constructor and optional model options to build a Mongoose model.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/getModelForClass.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getModelForClass<U extends AnyParamConstructor<any>, QueryHelpers = BeAnObject>(cl: U, options?: IModelOptions)\n```\n\n----------------------------------------\n\nTITLE: Updating Error Handling in Typegoose\nDESCRIPTION: Adds new custom errors and merges existing ones to improve error handling across the project.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Add error \"StringLengthExpectedError\" as \"E026\", merge \"E015\" and \"E022\" into \"E026\"\n// Merge Error \"E008\" into \"E026\"\n// Add error \"E025\", called \"NotValidModelError\"\n// Create custom error for \"E003\", called \"FunctionCalledMoreThanSupportedError\"\n```\n\n----------------------------------------\n\nTITLE: Defining PropType Enum in Typegoose\nDESCRIPTION: Definition of the PropType enum used to represent the type of a property in Typegoose, including ARRAY, MAP, and NONE options.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nenum PropType {\n  ARRAY,\n  MAP,\n  NONE // default for properties if no Map / Array is detected\n}\n```\n\n----------------------------------------\n\nTITLE: Document Serialization Example\nDESCRIPTION: Example of serializing a Mongoose document to a POJO with group-based filtering\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/deepkit-type.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = await AccountModel.findById(id).orFail().exec();\nconst access = { groupsExclude: [Group.confidential] };\nconst serialized = classToPlain(Account, doc, access);\nexpect(serialized).toStrictEqual({\n  _id: id,\n  __v: 0,\n  email: 'somebody@gmail.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Using FilterOutFunctionKeys with Class Example\nDESCRIPTION: Demonstration of FilterOutFunctionKeys utility type usage with a Kitten class. Shows how the type removes the getName method while preserving the name property in the resulting type.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/types/utility-types.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Kitten {\n  @prop()\n  public name?: string;\n\n  public getName() {\n    return this.name;\n  }\n}\n\ntype Normal = Pick<Kitten, typeof Kitten>;\n// type:\n// {\n//  name: string | undefined,\n//  getName: () => string\n// }\n\ntype Filtered = FilterOutFunctionKeys<Kitten>;\n// type:\n// {\n//   name: string | undefined\n// }\n```\n\n----------------------------------------\n\nTITLE: Using Passthrough Class for Non-Direct Schema Definition in Typegoose\nDESCRIPTION: Example of using the Passthrough class to define a nested schema without direct wrapping in a new Schema({}) for different PropTypes (NONE, ARRAY, MAP).\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nclass PassthroughNoDirect {\n  @prop()\n  public normalProp?: string;\n\n  @prop({ type: () => new Passthrough({ somePath: String }) })\n  public child?: { somePath: string };\n}\n\nclass PassthroughNoDirect {\n  @prop({ type: () => new Passthrough({ somePath: String }) })\n  public child?: [{ somePath: string }]\n}\n\nclass PassthroughNoDirect {\n  @prop({ type: () => new Passthrough({ someProp: String }) })\n  public child?: Map<string, { someProp: string }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Combined Automatic and Custom Name Generation\nDESCRIPTION: Shows how automaticName and customName options interact when used together to generate combined names.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/name-generation.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Example having \"customName\" statically set and having \"automaticName\"\n@modelOptions({ options: { customName: \"Hello\", automaticName: true } })\nclass SomeClassWithCustomNameAndAutomaticName {\n  @prop()\n  public someProp: string;\n}\n\n// The resulting name will be a combination of the class name and \"customName\"\nassertion(getName(SomeClassWithCustomNameAndAutomaticName) === 'SomeClassWithCustomNameAndAutomaticName_Hello');\n```\n\n----------------------------------------\n\nTITLE: Updating DocumentType Generic in TypeScript\nDESCRIPTION: Adds correct generic type for 'toJSON' and 'toObject' methods in the DocumentType interface.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Original code not provided, but the change is described as:\n// add correct generic for \"toJSON\" and \"toObject\" types in DocumentType\n```\n\n----------------------------------------\n\nTITLE: Custom Serializer Implementation\nDESCRIPTION: Implementation of custom serializer for handling MongoDB ObjectId conversion\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/deepkit-type.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { t, jsonSerializer } from '@deepkit/type';\nimport mongoose from 'mongoose';\n\nconst ObjectId = mongoose.Types.ObjectId;\nconst mySerializer = new (class CustomSerializer extends jsonSerializer.fork('mySerializer') {})();\n\nmySerializer.toClass.register('objectId', (property, state) => {\n  state.setContext({ ObjectId: ObjectId });\n  state.addSetter(`${state.accessor} instanceof String ? ObjectId.createFromHexString(${state.accessor}) : ${state.accessor}`);\n});\n\nmySerializer.fromClass.register('objectId', (property, state) => {\n  state.setContext({ ObjectId: ObjectId });\n  state.addSetter(`${state.accessor} instanceof ObjectId ? ${state.accessor}.toHexString() : ${state.accessor}`);\n});\n\nconst classToPlain = function (schemaCls: any, clsObj: any, access?: any) {\n  return mySerializer.for(schemaCls).serialize(clsObj, access);\n};\n\nconst plainToClass = function (schemaCls: any, obj: any, access?: any) {\n  return mySerializer.for(schemaCls).deserialize(obj, access);\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache Locally in Typegoose\nDESCRIPTION: Example of disabling caching for specific models using modelOptions decorator or options parameter, allowing multiple definitions on different connections.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/models-with-same-name.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { modelOptions, getModelForClass, prop } from \"@typegoose/typegoose\";\n\n@modelOptions({ options: { disableCache: true } })\nclass Kitten {\n  @prop()\n  public name: string;\n}\n\nconst KittenModelDefault = getModelForClass(Kitten);\nconst KittenModelCon1 = getModelForClass(Kitten, { existingConnection: mongoose.createConnection() });\n\n// OR\n{\n  class Kitten {\n    @prop()\n    public name: string;\n  }\n\n  const KittenModel = getModelForClass(Kitten, { options: { disableCaching: true } });\n  assert.ok(!!KittenModel.schema.path('name'));\n}\n{\n  class Kitten {\n    @prop()\n    public nameTag: string;\n  }\n\n  const KittenModel = getModelForClass(Kitten, { existingConnection: mongoose.createConnection(), options: { disableCaching: true } }); // still requires being defined on a different connection / mongoose instance\n  assert.ok(!!KittenModel.schema.path('nameTag'));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Classes Together in Typegoose\nDESCRIPTION: This snippet demonstrates how to use multiple classes together in Typegoose, addressing the limitation of TypeScript and JavaScript not supporting multiple inheritance. It shows combining an interface extension with a class extension.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/defaultClasses.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Something extends Base {} // have the interface to add the types of \"Base\" to the class\nclass Something extends TimeStamps {} // have your class\n```\n\n----------------------------------------\n\nTITLE: Importing Additional Types in Typegoose (TypeScript)\nDESCRIPTION: This code snippet shows how to import additional types from Typegoose that are not exported on the root of the package. These types can be accessed through the 'types' import from '@typegoose/typegoose'.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/types/additional.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { types } from '@typegoose/typegoose';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Option Value Support Error (TypeScript)\nDESCRIPTION: Shows examples of invalid option values that trigger error E027, including incorrect discriminators and ref usage.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/error-warning-details.md#2025-04-17_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nclass ErrorClassDiscriminators {\n  @prop({ discriminators: () => [[ErrorClass]] }) // <- error here\n  public someProp?: ErrorClass; // (this is just an example)\n\n  @prop({ discriminators: () => ErrorClass }) // <- error here\n  public someProp?: ErrorClass; // (this is just an example)\n\n  @prop({ ref: () => [ErrorClass] }) // <- error here\n  public someProp?: Ref<ErrorClass>;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of isDocument Function\nDESCRIPTION: TypeScript function signature for isDocument, a type guard that checks if a reference is a Mongoose document. The function is generic and works with any referenced type.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/typeguards/isDocument.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isDocument<T, S extends RefType>(doc: Ref<T, S> | null | undefined): doc is DocumentType<T>\n```\n\n----------------------------------------\n\nTITLE: POJO Deserialization Example\nDESCRIPTION: Example of deserializing a Plain Old JavaScript Object (POJO) to an Account instance with group-based filtering\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/deepkit-type.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst pojo = await AccountModel.findById(id).orFail().lean().exec();\nconst access = { groupsExclude: [Group.confidential] };\nconst deserialized = plainToClass(Account, pojo, access);\nexpect(deserialized).toStrictEqual(accountClassObject);\n```\n\n----------------------------------------\n\nTITLE: MongoDB Document Structure for Virtual Properties\nDESCRIPTION: Shows the resulting MongoDB document structure when using virtual properties. Only the actual fields (firstName and lastName) are stored in the database.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/virtuals.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  _id: ObjectId('<some long id>'),\n  firstName: 'Will',\n  lastName: 'Smith'\n}\n```\n\n----------------------------------------\n\nTITLE: Using addNullToEnum Option in Typegoose\nDESCRIPTION: Demonstrates the use of addNullToEnum option to add null to the enum array. This doesn't work if the value is required.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/prop.md#2025-04-17_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nenum SomeNumberEnum {\n  one = 1,\n  two = 2\n}\nclass AddNullToEnum {\n  @prop({ enum: SomeNumberEnum, addNullToEnum: true })\n  public value?: SomeNumberEnum;\n}\n\nconst AddNullToEnumModel = getModelForClass(AddNullToEnum);\n\nAddNullToEnumModel.schema.path('value').options.enum === [1, 2, null]; // true\n\n// this is necessary to avoid a validation error\nnew AddNullToEnumModel({ value: null } as AddNullToEnum);\n```\n\n----------------------------------------\n\nTITLE: Using SchemaOptions Collection Without automaticName in Typegoose\nDESCRIPTION: Example of setting a custom collection name without automaticName flag. This keeps the original model name without adding a suffix.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/models-with-same-name.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@modelOptions({ schemaOptions: { collection: 'Something' } })\nclass MultiModel {}\n\nconst model = getModelForClass(MultiModel);\nexpect(model.modelName).to.be.equal('MultiModel');\n```\n\n----------------------------------------\n\nTITLE: Simplified Account Class Without Grouping\nDESCRIPTION: Example of Account class without group-based access control for better performance\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/deepkit-type.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass Account {\n  @t.mongoId\n  public _id: string;\n\n  @t\n  public __v: number;\n\n  @t\n  @prop()\n  public email: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using customName with automaticName in Typegoose\nDESCRIPTION: Example of using both customName and automaticName options, where customName is used as a suffix to the class name.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/models-with-same-name.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@modelOptions({ options: { customName: 'CustomName', automaticName: true } })\nclass CustomNameOption {}\n\nconst model = getModelForClass(CustomNameOption);\nexpect(model.modelName).to.be.equal('CustomNameOption_CustomName');\n```\n\n----------------------------------------\n\nTITLE: Fixing '_id' Unknown Type Issue in Empty Classes\nDESCRIPTION: Demonstrates how to fix the TypeScript typing issue where '_id' is inferred as 'unknown' in empty Typegoose classes by adding a dummy property.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/faq.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Dummy {}\nconst DummyModel = getModelForClass(Dummy);\nconst newDoc = new DummyModel()\nnewDoc._id; // type: unknown\n\nclass Dummy {\n  // simple dummy property for types, will complain if actually used\n  public _dummy: never;\n}\nconst DummyModel = getModelForClass(Dummy);\nconst newDoc = new DummyModel()\nnewDoc._id; // type: mongoose.Types.ObjectId\n```\n\n----------------------------------------\n\nTITLE: Defining @searchIndex Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for the @searchIndex decorator, showing that it takes a SearchIndexDescription parameter and returns a ClassDecorator.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/searchIndexes.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction searchIndex(description: SearchIndexDescription): ClassDecorator\n```\n\n----------------------------------------\n\nTITLE: ModelOptions Merge Function\nDESCRIPTION: New utility function added to consistently merge ModelOptions across the codebase\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Function to merge ModelOptions consistently\nfunction getMergedModelOptions(options: ModelOptions): ModelOptions {\n  // Implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Mixed-Type Array Usage\nDESCRIPTION: Example showing how to use the basic mixed-type array implementation, demonstrating its lack of type validation.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/nested-discriminators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = await AnimalModel.create({\n  patientNumber: 0,\n  medications: [\n    {\n      name: 'med1',\n      amount: 10,\n    } as MedicationA,\n    {\n      name: 'med2',\n      length: 5,\n    } as MedicationB,\n    {\n      unknownType: 1,\n    },\n  ],\n});\n\nassertion(doc.medications[0].name === 'med1');\nassertion(doc.medications[1].name === 'med2');\nassertion(doc.medications[2].unknownType === 1);\nassertion(doc.medications.length === 3);\n```\n\n----------------------------------------\n\nTITLE: Using Passthrough Class in Typegoose\nDESCRIPTION: An example of using the Passthrough class in Typegoose to write mongoose schema-like code directly without Typegoose processing, enabling a direct equivalent to the Mongoose approach.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/nesting-classes.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  @prop()\n  public name?: string;\n\n  @prop({ type: () => new Passthrough({ hasEaten: Boolean, nicknames: [String] }, true) })\n  public properties?: { hasEaten: boolean, nicknames: string[] };\n}\n```\n\n----------------------------------------\n\nTITLE: isRefType Type Definition in TypeScript\nDESCRIPTION: Type definition for the isRefType function that checks if a document reference matches the expected reference type.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/typeguards/isRefType.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isRefType<T, S extends RefType>(doc: Ref<T, S> | null | undefined, refType: AllowedRefTypes): doc is NonNullable<S>\n```\n\n----------------------------------------\n\nTITLE: Setting Typegoose Log Level using TypeScript\nDESCRIPTION: Shows how to set the log level for Typegoose using either the LogLevels enum or a string value. The log level determines what kinds of messages are displayed during runtime.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/logger.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setLogLevel, LogLevels } from '@typegoose/typegoose';\n\nsetLogLevel(LogLevels.SILENT);\n// or\nsetLogLevel(\"SILENT\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PropOptions.discriminators Array Dimension Error (TypeScript)\nDESCRIPTION: Shows invalid usage of the discriminators option where array dimensions are incorrect, triggering error E020.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/error-warning-details.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass ErrorClass {\n  @prop({ discriminators: () => [[ErrorClass]] }) // <- error here\n  public someProp?: ErrorClass; // (this is just an example)\n\n  @prop({ discriminators: () => ErrorClass }) // <- error here\n  public someProp?: ErrorClass; // (this is just an example)\n}\n```\n\n----------------------------------------\n\nTITLE: Using deleteModelWithClass Function Example\nDESCRIPTION: Example demonstrating how to use deleteModelWithClass to remove a model using its class reference.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/deleteModel.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass SomeUser {}\n\nconst SomeUserModel = getModelForClass(SomeUser);\ndeleteModelWithClass(SomeUser);\n```\n\n----------------------------------------\n\nTITLE: Defining SubDocumentType Interface in TypeScript\nDESCRIPTION: The type definition for SubDocumentType, combining DocumentType and mongoose.Types.SubDocument to provide type information for subdocuments.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/types/documentType.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype SubDocumentType<T, QueryHelpers = BeAnObject>\n```\n\n----------------------------------------\n\nTITLE: isRefTypeArray Overload 1 Type Definition\nDESCRIPTION: Type definition for the first overload of isRefTypeArray function that handles mongoose.Types.Array references.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/typeguards/isRefType.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isRefTypeArray<T, S extends RefType>(\n  docs: mongoose.Types.Array<Ref<T, S>> | undefined,\n  refType: AllowedRefTypes\n): docs is mongoose.Types.Array<NonNullable<S>>;\n```\n\n----------------------------------------\n\nTITLE: TypeGoose getModelWithString Function Signature\nDESCRIPTION: TypeScript function signature for getModelWithString that retrieves a model from the TypeGoose cache using a string key. Returns undefined or a ReturnModelType with optional QueryHelpers.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/getModelWithString.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getModelWithString<U extends AnyParamConstructor<any>, QueryHelpers = BeAnObject>(\n  key: string\n): undefined | ReturnModelType<U, QueryHelpers>\n```\n\n----------------------------------------\n\nTITLE: Using getName Function with Different Naming Options in Typegoose\nDESCRIPTION: Examples of using getName with different class configurations, demonstrating default naming, custom naming with customName option, and automatic naming that incorporates collection name.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/getName.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Kitten {}\ngetName(Kitten); // \"Kitten\"\n\n@modelOptions({ options: { customName: 'SomeRandomKitten' } })\nclass Kitten2 {}\ngetName(Kitten); // \"SomeRandomKitten\"\n\n@modelOptions({ schemaOptions: { collection: 'RandomKittens' }, options: { automaticName: true } })\nclass Kitten3 {}\ngetName(Kitten); // \"Kitten3_RandomKittens\"\n```\n\n----------------------------------------\n\nTITLE: getClassForDocument Function Signature in TypeScript\nDESCRIPTION: The TypeScript function signature for getClassForDocument, which takes a mongoose Document and returns a NewableFunction or undefined.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/getClassForDocument.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getClassForDocument(document: mongoose.Document): NewableFunction | undefined\n```\n\n----------------------------------------\n\nTITLE: Installing Typegoose with npm or yarn\nDESCRIPTION: Command-line instructions for installing Typegoose and its peer dependency Mongoose using npm or yarn package managers.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/quick-start-guide.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @typegoose/typegoose # install typegoose itself\n\nnpm install --save mongoose # install peer-dependency mongoose\n```\n\n----------------------------------------\n\nTITLE: Defining getDiscriminatorModelForClass Overload 2 in TypeScript\nDESCRIPTION: This overload of getDiscriminatorModelForClass takes a mongoose Model, a class, and an optional string value. It returns a ReturnModelType.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/getDiscriminatorModelForClass.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getDiscriminatorModelForClass<U extends AnyParamConstructor<any>, QueryHelpers = BeAnObject>(\n  from: mongoose.Model<any, any>,\n  cl: U,\n  value?: string\n): ReturnModelType<U, QueryHelpers>;\n```\n\n----------------------------------------\n\nTITLE: Function Signature for addModelToTypegoose in TypeScript\nDESCRIPTION: Type definition for the addModelToTypegoose function that maps Mongoose models to Typegoose classes. Takes a Mongoose model, a class constructor, and optional configuration for mongoose instance and connection.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/addModelToTypegoose.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addModelToTypegoose<U extends AnyParamConstructor<any>, QueryHelpers = BeAnObject>(\n  model: mongoose.Model<any>,\n  cl: U,\n  options?: { existingMongoose?: mongoose.Mongoose; existingConnection?: any }\n)\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Types in Typegoose\nDESCRIPTION: Removes TODO comments and updates types to use mongoose's types directly, as a related mongoose issue has been resolved.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Removed code:\n// TODO's that probably never happen\n\n// Updated code:\nuse mongoose's types because mongoose issue 10529 got resolved\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Class Input Error (TypeScript)\nDESCRIPTION: Shows examples of invalid class inputs that trigger error E028 in various Typegoose functions.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/error-warning-details.md#2025-04-17_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ngetModelForClass(undefined); // first argument is the class\ngetDiscriminatorModelForClass(ParentModel, undefined); // second argument is the class\naddModelToTypegoose(\"ModelName\", ModelSchema, undefined); // third argument is the class\nbuildSchema(undefined); // first argument is the class\ndeleteModelWithClass(undefined); // first argument is the class\ngetName(undefined); // first argument is the class\n```\n\n----------------------------------------\n\nTITLE: Running Typegoose Tests\nDESCRIPTION: Shell commands for installing dependencies and running the test suite for Typegoose.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/README.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\nyarn run test\n```\n\n----------------------------------------\n\nTITLE: Defining getDiscriminatorModelForClass Overload 3 in TypeScript\nDESCRIPTION: This overload of getDiscriminatorModelForClass takes a mongoose Model, a class, an optional string value, and optional model options. It returns a ReturnModelType.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/getDiscriminatorModelForClass.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getDiscriminatorModelForClass<U extends AnyParamConstructor<any>, QueryHelpers = BeAnObject>(\n  from: mongoose.Model<any, any>,\n  cl: U,\n  value?: string,\n  options?: IModelOptions\n): ReturnModelType<U, QueryHelpers>;\n```\n\n----------------------------------------\n\nTITLE: getClass Function Signature in TypeScript\nDESCRIPTION: Function signature for getClass, showing its typing and parameters. It accepts various input types and returns a NewableFunction or undefined.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/getClass.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getClass(\n  input:\n    | mongoose.Document\n    | { typegooseName: () => string }\n    | { typegooseName: string }\n    | string\n    | any\n): NewableFunction | undefined\n```\n\n----------------------------------------\n\nTITLE: Updating IndexDefinition Type in TypeScript\nDESCRIPTION: Changes the 'fields' property to use Mongoose's 'IndexDefinition' type for improved type safety.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Original code not provided, but the change is described as:\n// change \"fields\" to use mongoose's \"IndexDefinition\" type\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Message Format for Function Call Limits [E003]\nDESCRIPTION: Shows the format of error messages when a function is called more times than supported with the same parameters. This applies to functions like addModelToTypegoose.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/error-warning-details.md#2025-04-17_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nFunction \"${functionName}\" only supports to be called \"${supported}\" times with the same parameters [E003]\n${extra}\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Typegoose\nDESCRIPTION: Webpack configuration to disable minimization which is required for Typegoose to work properly with reflection and property names.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/known-issues.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  optimization: {\n    minimize: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ReturnModelType in TypeScript\nDESCRIPTION: TypeScript type definition for ReturnModelType, which takes a class constructor and optional QueryHelpers.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/types/returnModelType.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ReturnModelType<U extends AnyParamConstructor<any>, QueryHelpers = BeAnObject>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Class Instance and Static Type Examples\nDESCRIPTION: Illustrates the differences between class instance and static types in TypeScript, including correct and incorrect assignments.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/overwrite-this.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Kitten {\n  public dummy?: string;\n}\n\n// the two basic differences, static & instance:\n\n// T1 & T2 are \"typeof Kitten\" (static Kitten) and are interchangeable definitions\nconst T1 = Kitten;\n// explicit type\nconst T2: typeof Kitten = Kitten;\n\n// T3 & T4 are \"Kitten\" (instance of Kitten) and are interchangeable definitions\nconst T3 = new Kitten();\n// explicit type\nconst T4: Kitten = new Kitten();\n\n// combinations & errors\n\n// T5 & T6 are \"Kitten\" (instance of Kitten), whereas the assigned value of T5 is \"typeof Kitten\" (static Kitten)\nconst T5: Kitten = Kitten; // Error: Value of type 'typeof Kitten' has no properties in common with type 'Kitten'. Did you mean to call it?\nconst T6: Kitten = new Kitten(); // this is actually the correct type\n\n// T7 is \"typeof Kitten\" (static Kitten), and assigned is a \"Kitten\" (instance of Kitten)\nconst T7: typeof Kitten = new Kitten(); // Error: Property 'prototype' is missing in type 'Kitten' but required in type 'typeof Kitten'\n```\n\n----------------------------------------\n\nTITLE: Updating Enum Type in BasePropOptions for TypeScript\nDESCRIPTION: Updates the 'enum' property in BasePropOptions to use Mongoose's types for better type consistency.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Original code not provided, but the change is described as:\n// update \"enum\" to use mongoose's types in BasePropOptions\n```\n\n----------------------------------------\n\nTITLE: Installing mongoose-autopopulate with npm or yarn\nDESCRIPTION: Command to install the mongoose-autopopulate plugin using npm or yarn.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/common-plugins.mdx#2025-04-17_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install --save mongoose-autopopulate\n```\n\n----------------------------------------\n\nTITLE: Building Typegoose Documentation for Production in Shell\nDESCRIPTION: Command to generate static content into the build directory. The resulting files can be served using any static contents hosting service.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/website/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Defining ArraySubDocumentType Interface in TypeScript\nDESCRIPTION: The type definition for ArraySubDocumentType, combining DocumentType and mongoose.Types.ArraySubdocument to provide type information for subdocuments in arrays.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/types/documentType.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype ArraySubDocumentType<T, QueryHelpers = BeAnObject>\n```\n\n----------------------------------------\n\nTITLE: Example of Self-Containing vs Self-Referencing Classes in Typegoose\nDESCRIPTION: Demonstrates the difference between unsupported self-containing classes and supported self-referencing classes in Typegoose.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/error-warning-details.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Cat {\n  @prop()\n  public kitten: Cat[]; // self-containing-class\n\n  // the above will \"de-sugar\" to\n  @prop({ type: Cat }) // self-containing-class\n  public kitten: Cat[];\n}\n\nclass Cat {\n  @prop({ ref: () => Cat })\n  public kitten: Ref<Cat>[]; // not self-containing class\n}\n```\n\n----------------------------------------\n\nTITLE: Updating VirtualOptions Type in TypeScript\nDESCRIPTION: Updates the 'match' property in VirtualOptions to use Mongoose's types for better type consistency.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Original code not provided, but the change is described as:\n// update \"match\" to use mongoose's types in VirtualOptions\n```\n\n----------------------------------------\n\nTITLE: Installing mongoose-findorcreate with npm or yarn\nDESCRIPTION: Command to install the mongoose-findorcreate plugin using npm or yarn.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/common-plugins.mdx#2025-04-17_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install --save mongoose-findorcreate\n```\n\n----------------------------------------\n\nTITLE: Highlighting Lines in TypeScript Code\nDESCRIPTION: Demonstrates how to use line highlighting in code blocks with the highlight-start and highlight-end comments. This example shows a TypeScript class definition with specific lines highlighted.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/test.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport something from \"some\";\n\n// highlight-start\nclass SomeClass {\n  public hello?: string\n}\n// highlight-end\n\nexport SomeClass;\n```\n\n----------------------------------------\n\nTITLE: Pre-Hook Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for PreHooks showing various middleware function signatures for different Mongoose operations including save, query, document, aggregate, and insertMany methods.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/hooks.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PreHooks {\n  pre<S extends object | HydratedDocument<any, any>, T = S extends Document ? S : HydratedDocument<DocumentType<S>, any>>(\n    method: 'save',\n    fn: PreSaveMiddlewareFunction<T>,\n    options?: SchemaPreOptions\n  ): ClassDecorator;\n  pre<S extends object | Query<any, any>, T = S extends Query<any, any> ? S : Query<DocumentType<S>, DocumentType<S>>>(\n    method: MongooseQueryMiddleware | MongooseQueryMiddleware[] | RegExp,\n    fn: PreMiddlewareFunction<T>,\n    options?: SchemaPreOptions\n  ): ClassDecorator;\n  pre<S extends object | HydratedDocument<any, any>, T = S extends Document ? S : HydratedDocument<DocumentType<S>, any>>(\n    method: MongooseDocumentMiddleware | MongooseDocumentMiddleware[] | RegExp,\n    fn: PreMiddlewareFunction<T>,\n    options?: SchemaPreOptions\n  ): ClassDecorator;\n  pre<T extends Aggregate<any>>(method: 'aggregate' | RegExp, fn: PreMiddlewareFunction<T>, options?: SchemaPreOptions): ClassDecorator;\n  pre<S extends AnyParamConstructor<any> | Model<any>, T = S extends Model<any> ? S : ReturnModelType<S>>(\n    method: 'insertMany' | RegExp,\n    fn: (this: T, next: (err?: CallbackError) => void, docs: any | Array<any>) => void | Promise<void>,\n    options?: SchemaPreOptions\n  ): ClassDecorator;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Self Containing Class Error [E004]\nDESCRIPTION: Shows the error message format for self-containing class errors, which occur when a class contains itself directly rather than using proper self-referencing.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/error-warning-details.md#2025-04-17_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nIt seems like the type used is the same as the target class, which is not supported (${name}.${key}) [E004]\n```\n\n----------------------------------------\n\nTITLE: Error Message Format for Not String Type Error [E010]\nDESCRIPTION: Shows the format of error messages when an enum is used with String type but the enum doesn't consist only of strings.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/error-warning-details.md#2025-04-17_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\nTypeof \"${targetName}.${key}\" is \"String\", used enum is not only Strings! [E010]\n  Encountered with property in Enum: ${enumKey}.${typeof enumValue}\n```\n\n----------------------------------------\n\nTITLE: Package Version Requirements\nDESCRIPTION: Required package versions for the integration\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/deepkit-type.md#2025-04-17_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n@typegoose/typegoose@9.0.0\n@deepkit/core@1.0.1-alpha.58\n@deepkit/type@1.0.1-alpha.58\n```\n\n----------------------------------------\n\nTITLE: Line Numbering in TypeScript Code Blocks\nDESCRIPTION: Example of enabling line numbering in code blocks using the showLineNumbers attribute. This displays a TypeScript class with numbered lines for easier reference.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/test.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport something from \"some\";\n\nclass SomeClass {\n  public hello?: string\n}\n\nexport SomeClass;\n```\n\n----------------------------------------\n\nTITLE: Post-Hook Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for PostHooks showing various middleware function signatures for different Mongoose operations including query, document, aggregate, and insertMany methods with error handling.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/decorators/hooks.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PostHooks {\n  post<S extends object | Query<any, any>, T = S extends Query<any, any> ? S : Query<DocumentType<S>, DocumentType<S>>>(\n    method: MongooseQueryMiddleware | MongooseQueryMiddleware[] | RegExp,\n    fn: PostMiddlewareFunction<T, QueryResultType<T>>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<S extends object | HydratedDocument<any, any>, T = S extends Document ? S : HydratedDocument<DocumentType<S>, any>>(\n    method: MongooseDocumentMiddleware | MongooseDocumentMiddleware[] | RegExp,\n    fn: PostMiddlewareFunction<T, T>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<T extends Aggregate<any>>(\n    method: 'aggregate' | RegExp,\n    fn: PostMiddlewareFunction<T, Array<AggregateExtract<T>>>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<S extends AnyParamConstructor<any> | Model<any>, T = S extends Model<any> ? S : ReturnModelType<S>>(\n    method: 'insertMany' | RegExp,\n    fn: PostMiddlewareFunction<T, T>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n\n  post<S extends object | Query<any, any>, T = S extends Query<any, any> ? S : Query<DocumentType<S>, DocumentType<S>>>(\n    method: MongooseQueryMiddleware | MongooseQueryMiddleware[] | RegExp,\n    fn: ErrorHandlingMiddlewareFunction<T>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<S extends object | HydratedDocument<any, any>, T = S extends Document ? S : HydratedDocument<DocumentType<S>, any>>(\n    method: MongooseDocumentMiddleware | MongooseDocumentMiddleware[] | RegExp,\n    fn: ErrorHandlingMiddlewareFunction<T>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<T extends Aggregate<any>>(\n    method: 'aggregate' | RegExp,\n    fn: ErrorHandlingMiddlewareFunction<T, Array<any>>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<S extends AnyParamConstructor<any> | Model<any>, T = S extends Model<any> ? S : ReturnModelType<S>>(\n    method: 'insertMany' | RegExp,\n    fn: ErrorHandlingMiddlewareFunction<T>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message Format for Not Number Type Error [E011]\nDESCRIPTION: Shows the format of error messages when an enum is used with Number type but the enum doesn't consist only of numbers.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/error-warning-details.md#2025-04-17_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\nTypeof \"${targetName}.${key}\" is \"Number\", value is undefined/null or does not have a reverse mapping! [E011]\n  Encountered with property: ${enumKey}.${typeof enumValue}\n```\n\n----------------------------------------\n\nTITLE: Adding Warning for Passthrough Usage in Typegoose\nDESCRIPTION: Adds a warning when using 'Passthrough' on WhatIsIt.ARRAY in the processProp function.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\n// processProp: add warning when using \"Passthrough\" on WhatIsIt.ARRAY\n```\n\n----------------------------------------\n\nTITLE: Defining setGlobalOptions Function in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for setGlobalOptions, which takes an IGlobalOptions parameter to apply options globally.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/setGlobalOptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setGlobalOptions(options: IGlobalOptions)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Ref Function in Mongoose Schema\nDESCRIPTION: Allows returning a function in 'ref' option for more dynamic references.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\nref: () => (doc) => doc.someProp\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Commit Hash in Markdown\nDESCRIPTION: Shows how to reference a Git commit hash in a Markdown changelog entry. The commit hash is linked to the full commit on GitHub.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n* **@semantic-release/changelog:** upgrade to 6.0.2 ([91ef4b4](https://github.com/typegoose/typegoose/commit/91ef4b48504e0341b41e0f3accdb7fb96388e7a3))\n```\n\n----------------------------------------\n\nTITLE: Defining deleteModelWithClass Function Type\nDESCRIPTION: Type definition for the deleteModelWithClass function that removes a model using its class reference.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/deleteModel.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction deleteModelWithClass<U extends AnyParamConstructor<any>>(cl: U)\n```\n\n----------------------------------------\n\nTITLE: Basic Mixed-Type Array Implementation\nDESCRIPTION: Initial approach using Mixed type array for storing different medication types. This implementation lacks proper validation and type safety.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/nested-discriminators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MedicationA {\n  name: string;\n  amount: number;\n}\n\ninterface MedicationB {\n  name: string;\n  length: number;\n}\n\nclass Animal {\n  @prop({ required: true, unique: true })\n  public patientNumber!: number;\n\n  @prop({ type: mongoose.Schema.Types.Mixed })\n  public medications?: (MedicationA | MedicationB)[];\n}\n\nconst AnimalModel = getModelForClass(Animal);\n```\n\n----------------------------------------\n\nTITLE: Defining Arrays in NestJS/Type-GraphQL Style\nDESCRIPTION: Allows defining arrays using a function syntax, compatible with NestJS and Type-GraphQL.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype: () => [String]\n```\n\n----------------------------------------\n\nTITLE: Adding Hook Options in Typegoose\nDESCRIPTION: Adds the ability to set hook options in the hooks module.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\n// hooks: add ability to set hook options\n```\n\n----------------------------------------\n\nTITLE: Error Message Format for Invalid OptionsConstructor [E016]\nDESCRIPTION: Shows the format of error messages when a type doesn't have the OptionsConstructor property needed to map options correctly.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/error-warning-details.md#2025-04-17_snippet_9\n\nLANGUAGE: txt\nCODE:\n```\nType has a invalid \"OptionsConstructor\" on \"${name}.${key}\"! [E016]\nType: \"${toStringNoFail(type)}\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of isDocumentArray (Mongoose Array Overload)\nDESCRIPTION: First overload of the isDocumentArray function that works with Mongoose's native Array type. It checks if all elements in the array are Mongoose documents.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/typeguards/isDocument.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isDocumentArray<T, S extends RefType>(\n  docs: mongoose.Types.Array<Ref<T, S>> | undefined\n): docs is mongoose.Types.Array<DocumentType<NonNullable<T>>>;\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in TypeScript Project\nDESCRIPTION: Updates various dependencies including mongoose, lodash, loglevel, and tslib to newer versions.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"mongoose\": \"5.10.4\",\n\"lodash\": \"4.17.20\",\n\"loglevel\": \"1.7.0\",\n\"tslib\": \"2.0.1\",\n\"@types/mongoose\": \"5.7.36\"\n```\n\n----------------------------------------\n\nTITLE: Updating Mongoose Version Constraint in JavaScript\nDESCRIPTION: Changes the version constraint for mongoose from caret (^) to tilde (~) until types are fixed.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"mongoose\": \"~<version>\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Expected Argument Type Error (TypeScript)\nDESCRIPTION: Shows examples of invalid argument types that trigger error E029 in various Typegoose functions and decorators.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/error-warning-details.md#2025-04-17_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nsetGlobalOptions(undefined); // Expected input(name of first argument) to be a defined object\ndeleteModel(undefined); // Expected name(name of first argument) to be a string\ngetModelWithString(undefined); // Expected key(name of first argument) to be a string\n\n@pre('', undefined) // Expected fn(name of second argument) to be a function\n@post('', undefined) // Expected fn(name of second argument) to be a function\nclass SomeClass {}\n\n@pre('', () => {}, '')) // Expected options(name of third argument) to be a object or undefined\n@post('', () => {}, '') // Expected options(name of third argument) to be a object or undefined\nclass SomeClass {}\n```\n\n----------------------------------------\n\nTITLE: Removing Generic from IIndexArray in TypeScript\nDESCRIPTION: Removes the generic type parameter from the IIndexArray interface to simplify its usage.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Original code not provided, but the change is described as:\n// remove generic from IIndexArray\n```\n\n----------------------------------------\n\nTITLE: Converting Base Class to Interface in TypeScript\nDESCRIPTION: Converts the 'Base' class into an interface as part of a breaking change.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Base {\n  // interface members\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Breaking Changes in Markdown\nDESCRIPTION: Shows how to format breaking changes in a Markdown changelog using bullet points and code formatting.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\n### ⚠ BREAKING CHANGES\n\n* **typegoose::buildSchema:** \"buildSchema\" now only accepts 2 parameters instead of 3 (the last 2 got merged)\n* Option \"runSyncIndexes\" has been removed, if still wanting to continue to use it, run \"model.syncIndexes()\" manually\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PropOptions.ref Array Error (TypeScript)\nDESCRIPTION: Shows invalid usage of the ref option with arrays, triggering error E021.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/error-warning-details.md#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass ErrorClass {\n  @prop({ ref: () => [ErrorClass] }) // <- error here\n  public someProp?: Ref<ErrorClass>;\n}\n```\n\n----------------------------------------\n\nTITLE: Re-exporting SubDocument Types in TypeScript\nDESCRIPTION: Re-exports the 'SubDocumentType' and 'ArraySubDocumentType' types from the typegoose module for easier access.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Re-export SubDocumentType and ArraySubDocumentType\nexport { SubDocumentType, ArraySubDocumentType } from 'typegoose';\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache Globally in Typegoose\nDESCRIPTION: Example of disabling the global caching mechanism using setGlobalOptions, allowing multiple definitions of models with the same name on different connections.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/models-with-same-name.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setGlobalOptions, getModelForClass, prop } from \"@typegoose/typegoose\";\n\nsetGlobalOptions({ globalOptions: { disableGlobalCaching: true } });\n\nclass Kitten {\n  @prop()\n  public name: string;\n}\n\nconst KittenModelDefault = getModelForClass(Kitten);\nconst KittenModelCon1 = getModelForClass(Kitten, { existingConnection: mongoose.createConnection() });\n\n// OR\n{\n  class Kitten {\n    @prop()\n    public name: string;\n  }\n\n  const KittenModel = getModelForClass(Kitten);\n  assert.ok(!!KittenModel.schema.path('name'));\n}\n{\n  class Kitten {\n    @prop()\n    public nameTag: string;\n  }\n\n  const KittenModel = getModelForClass(Kitten, { existingConnection: mongoose.createConnection() }); // still requires being defined on a different connection / mongoose instance\n  assert.ok(!!KittenModel.schema.path('nameTag'));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Comment for Map Iteration in Typegoose\nDESCRIPTION: Adds a comment explaining the use of 'for of' loop with Map in the typegoose module.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\n// typegoose: add comment for \"for of Map\"\n```\n\n----------------------------------------\n\nTITLE: Refactoring PropType Enum in Typegoose\nDESCRIPTION: Renames enum 'WhatIsIt' to 'PropType' while maintaining backwards compatibility and re-exports it from the main entry point.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// Renamed enum\nWhatIsIt -> PropType\n\n// Re-exported from main entry point\nexport { PropType } from './path';\n```\n\n----------------------------------------\n\nTITLE: Example of Invalid Type Error [E009]\nDESCRIPTION: Shows code examples that would trigger the E009 error, which occurs when the Type in a property decorator is invalid, undefined, or not a function.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/error-warning-details.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nenum TestEnum {}\n\nclass ErrorClass {\n  @prop({ type: () => undefined }) // <- error here, correct type: \"String\"\n  public someProp?: string;\n\n  @prop({ type: 'Hello' }) // <- error here, correct type: \"String\"\n  public someProp?: string;\n\n  @prop({ type: TestEnum }) // <- error here, correct type: \"String\"\n  public someProp?: TestEnum\n}\n```\n\n----------------------------------------\n\nTITLE: Typegoose Dependency Update Commits\nDESCRIPTION: Git commit history showing dependency updates, version bumps and bug fixes across multiple Typegoose releases.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [12.14.0](https://github.com/typegoose/typegoose/compare/v12.13.0...v12.14.0) (2025-03-25)\n\n### Dependencies\n\n* **mongoose:** upgrade to 8.13.0 ([cc25059](https://github.com/typegoose/typegoose/commit/cc25059))\n\n### Dev-Dependencies\n\n* **eslint-plugin-prettier:** upgrade to 5.2.4 ([4ebc94c](https://github.com/typegoose/typegoose/commit/4ebc94c))\n* **ts-jest:** upgrade to 29.3.0 ([68bceb5](https://github.com/typegoose/typegoose/commit/68bceb5))\n```\n\n----------------------------------------\n\nTITLE: Simplifying DocumentType Conditional in TypeScript\nDESCRIPTION: Simplifies a conditional statement in the DocumentType interface for improved readability.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Original code not provided, but the change is described as:\n// simplify conditional in DocumentType\n```\n\n----------------------------------------\n\nTITLE: Error Message Format for Invalid Enum Type [E012]\nDESCRIPTION: Shows the format of error messages when an invalid type is used with the enum option. Valid types are String or Number.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/error-warning-details.md#2025-04-17_snippet_7\n\nLANGUAGE: txt\nCODE:\n```\nInvalid Type used for options \"enum\" at \"${name}.${key}\"! [E012]\nType: \"${toStringNoFail(value)}\"\nhttps://typegoose.github.io/typegoose/docs/guides/error-warning-details#invalid-type-for-enum-e012\n```\n\n----------------------------------------\n\nTITLE: Version Comparison in Package Reference\nDESCRIPTION: Reference to version comparison showing change from v11.7.1 to v12.0.0-beta.1 using GitHub commit link format.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nv11.7.1...v12.0.0-beta.1\n```\n\n----------------------------------------\n\nTITLE: Displaying Deprecation Table for TDEP0001 in Markdown\nDESCRIPTION: Shows a markdown table indicating when the @arrayProp decorator was deprecated and when it will be removed.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/deprecation-codes.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Deprecated in | Removed in |\n| :-----------: | :--------: |\n|    `7.2.0`    |  `8.0.0`   |\n```\n\n----------------------------------------\n\nTITLE: Formatting Version Header in Markdown\nDESCRIPTION: Demonstrates how to format a version header in a Markdown changelog, including the version number, link to compare changes, and release date.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\n## [10.0.0-beta.3](https://github.com/typegoose/typegoose/compare/v10.0.0-beta.2...v10.0.0-beta.3) (2022-12-12)\n```\n\n----------------------------------------\n\nTITLE: Error Message Format for ResolveTypegooseName Error [E014]\nDESCRIPTION: Shows the format of error messages when an input is not a string and doesn't have a typegooseName function or string.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/error-warning-details.md#2025-04-17_snippet_8\n\nLANGUAGE: txt\nCODE:\n```\nInput was not a string AND didn't have a .typegooseName function AND didn't have a .typegooseName string [E014]\nValue: \"${toStringNoFail(input)}\"\n```\n\n----------------------------------------\n\nTITLE: Breaking Change for Mongoose 7.0\nDESCRIPTION: Removal of FindOrCreate default class and FindOrCreateResult type due to incompatibility with mongoose 7.0\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// The following code has been removed in v11.0.0\nclass FindOrCreate {\n  [key: string]: any;\n}\n\ntype FindOrCreateResult = {\n  doc: any;\n  created: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for Typegoose\nDESCRIPTION: Configuration setup for Babel to properly handle TypeScript decorators and metadata when using Typegoose.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/known-issues.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    ['@babel/plugin-proposal-decorators', { legacy: true }],\n    'babel-plugin-transform-typescript-metadata',\n    ['@babel/plugin-proposal-class-properties', { loose: true }],\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @typegoose/auto-increment with npm or yarn\nDESCRIPTION: Command to install the @typegoose/auto-increment plugin using npm or yarn.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/common-plugins.mdx#2025-04-17_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install --save @typegoose/auto-increment\n```\n\n----------------------------------------\n\nTITLE: Configuration Updates in TypeScript Config\nDESCRIPTION: Updates to tsconfig.json and package.json to update Node.js version requirements and TypeScript target version. Changes include setting minimal Node.js version to 16.20.1 and updating TypeScript target to ES2021.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"target\": \"es2021\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Virtual Populate Options in Mongoose Schema\nDESCRIPTION: Adds warning if 'justOne' is defined without Virtual Populate Options.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Code for this change is not explicitly provided in the changelog\n```\n\n----------------------------------------\n\nTITLE: Custom Error Implementation in Typegoose\nDESCRIPTION: Implements custom error classes including ExpectedTypeError, OptionDoesNotSupportOptionError, and ResolveTypegooseNameError for better error handling.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// Custom error implementation example\nclass ExpectedTypeError extends Error {\n  constructor() {\n    super();\n    // Implementation details\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Typegoose Documentation in Shell\nDESCRIPTION: Command to start a local development server that opens a browser window. Changes to documentation are reflected live without needing to restart the server.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/website/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: TypeScript Empty Class Instance and Static Type Examples\nDESCRIPTION: Shows how the rules for class instance and static types slightly change when dealing with an empty class in TypeScript.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/overwrite-this.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Kitten {}\n\n// the two basic differences, static & instance:\n\n// T1 & T2 are \"typeof Kitten\" (static Kitten)\nconst T1 = Kitten;\n// explicit type\nconst T2: typeof Kitten = Kitten;\n\n// T3 & T4 are \"Kitten\" (instance of Kitten)\nconst T3 = new Kitten();\n// explicit type\nconst T4: Kitten = new Kitten();\n\n// combinations & errors\n\n// DIFFERENCE\n// T5 & T6 are \"Kitten\" (instance of Kitten), whereas the assigned value of T5 is \"typeof Kitten\" (static Kitten)\nconst T5: Kitten = Kitten; // somehow this does not result in any error\nconst T6: Kitten = new Kitten(); // this is actually the correct type\n\n// T7 is \"typeof Kitten\" (static Kitten), and assigned is a \"Kitten\" (instance of Kitten)\nconst T7: typeof Kitten = new Kitten(); // Error: Property 'prototype' is missing in type 'Kitten' but required in type 'typeof Kitten'\n```\n\n----------------------------------------\n\nTITLE: Defining getDiscriminatorModelForClass Overload 1 in TypeScript\nDESCRIPTION: This overload of getDiscriminatorModelForClass takes a mongoose Model, a class, and optional model options. It returns a ReturnModelType.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/functions/getDiscriminatorModelForClass.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getDiscriminatorModelForClass<U extends AnyParamConstructor<any>, QueryHelpers = BeAnObject>(\n  from: mongoose.Model<any, any>,\n  cl: U,\n  options?: IModelOptions\n): ReturnModelType<U, QueryHelpers>;\n```\n\n----------------------------------------\n\nTITLE: Removing Generic from IPluginsArray in TypeScript\nDESCRIPTION: Removes the generic type parameter from the IPluginsArray interface to simplify its usage.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Original code not provided, but the change is described as:\n// remove generic from IPluginsArray\n```\n\n----------------------------------------\n\nTITLE: Removing Istanbul Ignore Comments in Typegoose\nDESCRIPTION: Removes 'istanbul-ignore' comments from tested lines in the processProp and utils modules.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\n// processProp: remove \"istanbul-ignore\" on tested lines\n// utils: remove \"instanbul-ignore\" for tested path\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Typegoose Documentation in Shell\nDESCRIPTION: Command to install all required dependencies for the Typegoose documentation website. Note that yarn is specifically required as some plugins don't work with other package managers.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/website/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing mongoose-sequence with npm or yarn\nDESCRIPTION: Command to install the mongoose-sequence plugin using npm or yarn.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/common-plugins.mdx#2025-04-17_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install --save mongoose-sequence\n```\n\n----------------------------------------\n\nTITLE: NPM and Yarn Command Conversion Example\nDESCRIPTION: Demonstrates the npm2yarn plugin functionality, which automatically converts npm commands to their yarn equivalents in documentation. This is useful for showing installation instructions for both package managers.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/test.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install somepackage\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic String Function Type in TypeScript\nDESCRIPTION: Adds a new type 'DynamicStringFunc' for dynamic string functions.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype DynamicStringFunc = // definition not provided in changelog\n```\n\n----------------------------------------\n\nTITLE: Deploying Typegoose Documentation to GitHub Pages in Shell\nDESCRIPTION: Command to build the website and push it to the gh-pages branch for GitHub Pages hosting. Requires setting GIT_USER environment variable and optionally USE_SSH flag.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/website/README.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nGIT_USER=<Your GitHub username> USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Example of Ref Option is Undefined Error [E005]\nDESCRIPTION: Demonstrates code that would trigger the E005 error, which occurs when the ref option is undefined or null in a property decorator.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/error-warning-details.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass ErrorClass {\n  @prop({ ref: () => undefined }) // <- error here\n  public someProp?: Ref<ErrorClass>;\n\n  @prop({ ref: undefined }) // <- error here\n  public someProp?: Ref<ErrorClass>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Class Hierarchy for Animal Models in Typegoose\nDESCRIPTION: This snippet defines a basic class hierarchy for animal patients with a shared base class and specific animal subclasses. It demonstrates the incorrect approach of using separate models without discriminators.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/advanced/non-nested-discriminators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// to have an shared collection\n@modelOptions({ schemaOptions: { collection: \"animal\" } })\nclass Animal {\n  @prop({ required: true, unique: true })\n  public patientNumber!: number;\n}\n\nclass Dog extends Animal {\n  @prop()\n  public cageNumber!: number;\n}\n\nclass Cat extends Animal {\n  @prop()\n  public nameTag!: string;\n}\n\nclass Parrot extends Animal {\n  @prop()\n  public commonMessage?: string;\n}\n\nconst AnimalModel = getModelForClass(Animal);\nconst DogModel = getModelForClass(Dog);\nconst CatModel = getModelForClass(Cat);\nconst ParrotModel = getModelForClass(Parrot);\n```\n\n----------------------------------------\n\nTITLE: Installing Deepkit Dependencies\nDESCRIPTION: Command to install required Deepkit packages\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/deepkit-type.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @deepkit/core@~1.0.1-alpha.52 @deepkit/type@~1.0.1-alpha.56\n```\n\n----------------------------------------\n\nTITLE: Setting TG_ALLOW_MIXED Environment Variable in Shell\nDESCRIPTION: Examples showing how to set the TG_ALLOW_MIXED environment variable to configure the allowMixed option in Typegoose. The variable accepts both string and numeric values corresponding to Severity levels.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/api/environment.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nTG_ALLOW_MIXED=ALLOW npm run script # result: \"options.allowMixed\" is now \"ALLOW\" (actual: 0)\n\nTG_ALLOW_MIXED=0 npm run script # result: \"options.allowMixed\" is now \"ALLOW\" (actual: 0)\n```\n\n----------------------------------------\n\nTITLE: Version Comparison Snippet\nDESCRIPTION: Git commit comparison link between version v11.0.0-beta.2 and v11.0.0-beta.3\nSOURCE: https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## [11.0.0-beta.3](https://github.com/typegoose/typegoose/compare/v11.0.0-beta.2...v11.0.0-beta.3) (2023-03-27)\n```\n\n----------------------------------------\n\nTITLE: Displaying Deprecation Table for TDEP0003 in Markdown\nDESCRIPTION: Shows a markdown table indicating when the PropOptions aliases 'of', 'items', and 'refType' were deprecated and when they will be removed.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/deprecation-codes.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Deprecated in | Removed in |\n| :-----------: | :--------: |\n|    `7.2.0`    |  `8.0.0`   |\n```\n\n----------------------------------------\n\nTITLE: Displaying Deprecation Table for TDEP0002 in Markdown\nDESCRIPTION: Shows a markdown table indicating when the @mapProp decorator was deprecated and when it will be removed.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/deprecation-codes.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Deprecated in | Removed in |\n| :-----------: | :--------: |\n|    `7.2.0`    |  `8.0.0`   |\n```\n\n----------------------------------------\n\nTITLE: Displaying Code in Tabs Example in Text\nDESCRIPTION: Example showing how to display code within tab components in Docusaurus. This demonstrates the tabs feature with text content surrounding code blocks.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/test.mdx#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCode in Tab 1\n```\n\nLANGUAGE: text\nCODE:\n```\nCode in Tab 2\n```\n\n----------------------------------------\n\nTITLE: Installing Class-Transformer with NPM or Yarn\nDESCRIPTION: Command to install the class-transformer package using npm or yarn.\nSOURCE: https://github.com/typegoose/typegoose/blob/master/docs/guides/integration-examples/class-transformer.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save class-transformer@~0.5.1\n```"
  }
]