[
  {
    "owner": "odoo",
    "repo": "documentation",
    "content": "TITLE: Defining a Basic Odoo Model in Python\nDESCRIPTION: This snippet demonstrates the basic structure for defining an Odoo model. It involves importing `models` and `fields` from `odoo`, creating a class that inherits from `models.Model`, assigning a unique technical name to the `_name` attribute, and defining model fields as class attributes using `fields` types (e.g., `fields.Char()`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import models, fields\nclass AModel(models.Model):\n    _name = 'a.model.name'\n\n    field1 = fields.Char()\n```\n\n----------------------------------------\n\nTITLE: Preventing SQL Injection in Odoo Python using Parameterized Queries\nDESCRIPTION: Demonstrates the risk of SQL injection when constructing SQL queries using Python string concatenation (`+` and `join`). This unsafe method allows embedding malicious SQL code. The correct and secure approach uses the database cursor's parameter substitution mechanism (`%s` placeholder) where the database driver handles proper quoting and escaping of parameters (passed as a tuple), preventing injection vulnerabilities.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/security.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# the following is very bad:\n#   - it's a SQL injection vulnerability\n#   - it's unreadable\n#   - it's not your job to format the list of ids\nself.env.cr.execute('SELECT distinct child_id FROM account_account_consol_rel ' +\n           'WHERE parent_id IN ('+','.join(map(str, ids))+')')\n\n# better\nself.env.cr.execute('SELECT DISTINCT child_id '\\\n           'FROM account_account_consol_rel '\\\n           'WHERE parent_id IN %s',\n           (tuple(ids),))\n```\n\n----------------------------------------\n\nTITLE: Implementing Onchange in Odoo Model - Python\nDESCRIPTION: This snippet demonstrates how to define an @api.onchange method within an Odoo model class in Python. It uses the Odoo ORM and the odoo.api.onchange decorator to trigger updates of the 'name' and 'description' fields whenever the 'partner_id' field is changed in a form view. Dependencies are the Odoo framework with the 'api', 'fields', and 'models' modules. The method relies on self always being a single record, with 'partner_id' as a Many2one relationship. The input is a change to the 'partner_id' field by the user, and the result is that the form view displays prefixed values for 'name' and 'description'. This implementation is limited to form views and does not affect programmatic record creation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/08_compute_onchange.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import api, fields, models\n\nclass TestOnchange(models.Model):\n    _name = \"test.onchange\"\n\n    name = fields.Char(string=\"Name\")\n    description = fields.Char(string=\"Description\")\n    partner_id = fields.Many2one(\"res.partner\", string=\"Partner\")\n\n    @api.onchange(\"partner_id\")\n    def _onchange_partner_id(self):\n        self.name = \"Document for %s\" % (self.partner_id.name)\n        self.description = \"Default description for %s\" % (self.partner_id.name)\n\n```\n\n----------------------------------------\n\nTITLE: Testing Model Logic with TransactionCase - Python\nDESCRIPTION: Illustrates writing unit tests for model logic using Odoo's TransactionCase class. Each method beginning with 'test_' encapsulates a test scenario, in this example validating that a model field is set as expected after performing an action. Requires Odoo's Python test framework and target model definition. Inputs are dictionary values for model creation, outputs are assertions validating the side effects or return values.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass TestModelA(TransactionCase):\n    def test_some_action(self):\n        record = self.env['model.a'].create({'field': 'value'})\n        record.some_action()\n        self.assertEqual(\n            record.field,\n            expected_field_value)\n\n    # other tests...\n```\n\n----------------------------------------\n\nTITLE: Example Odoo Module Manifest (`__manifest__.py`)\nDESCRIPTION: This Python dictionary serves as the manifest file (`__manifest__.py`) for an Odoo module. It declares essential metadata like the module's `name`, `version`, required `depends` (other modules), `author`, `category`, and a `description`. It also lists `data` files (e.g., XML views) that are always loaded and optional `demo` data files. This file is fundamental for Odoo to recognize and manage the module.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/module.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n    'name': \"A Module\",\n    'version': '1.0',\n    'depends': ['base'],\n    'author': \"Author Name\",\n    'category': 'Category',\n    'description': \"\"\"\n    Description text\n    \"\"\",\n    # data files always loaded at installation\n    'data': [\n        'views/mymodule_view.xml',\n    ],\n    # data files containing optionally loaded demonstration data\n    'demo': [\n        'demo/demo_data.xml',\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Dropdown Menu in Odoo XML\nDESCRIPTION: This example illustrates how to create a nested dropdown menu structure, such as a File menu with submenus. It demonstrates the nesting of Dropdown components within other Dropdowns.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<Dropdown>\n  <button>File</button>\n  <t t-set-slot=\"content\">\n    <DropdownItem onSelected=\"() => this.onItemSelected('file-save')\">Save</DropdownItem>\n    <DropdownItem onSelected=\"() => this.onItemSelected('file-open')\">Open</DropdownItem>\n\n    <Dropdown>\n      <button>New</button>\n      <t t-set-slot=\"content\">\n        <DropdownItem onSelected=\"() => this.onItemSelected('file-new-document')\">Document</DropdownItem>\n        <DropdownItem onSelected=\"() => this.onItemSelected('file-new-spreadsheet')\">Spreadsheet</DropdownItem>\n      </t>\n    </Dropdown>\n  </t>\n</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Displaying a Ribbon Widget in Odoo XML Views\nDESCRIPTION: Example of using the generic `web_ribbon` widget within an Odoo view (e.g., form or kanban). It displays a ribbon, typically in a corner, with specified text (`title`), an optional tooltip, and a background color class (`bg_color` or `bg-class`). This is often used to indicate status like 'Archived'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_41\n\nLANGUAGE: xml\nCODE:\n```\n<widget name=\"web_ribbon\" title=\"Archived\" bg_color=\"text-bg-danger\"/>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Formatting Attributes with t-attf-class in QWeb XML\nDESCRIPTION: This snippet demonstrates t-attf- for attribute formatting with inline code, commonly used for classes. Attribute values can be constructed with template syntax (e.g., jinja-style) for dynamic content. In the example, the class attribute is set with even/odd depending on the index in t-foreach. Parentheses and template syntax are required; usage assumes the code supports JavaScript modulo and ternary.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<t t-foreach=\"[1, 2, 3]\" t-as=\"item\">\n    <li t-attf-class=\"row {{ (item_index % 2 === 0) ? 'even' : 'odd' }}\">\n        <t t-out=\"item\"/>\n    </li>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Extending Odoo Views with Inheritance and XPath (XML)\nDESCRIPTION: Presents how to inherit from an existing form view in Odoo to augment its UI. The code uses a record of model 'ir.ui.view' with inherit_id linking to the base view, and arch containing an xpath operation. The xpath selects an existing element by name and inserts a new field afterwards. Required dependencies include the referenced views and fields. This method lets developers modularly adjust view layouts without altering original view definitions. Limitations include requiring unique XPath matches.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/12_inheritance.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"inherited_model_view_form\" model=\"ir.ui.view\">\n    <field name=\"name\">inherited.model.form.inherit.test</field>\n    <field name=\"model\">inherited.model</field>\n    <field name=\"inherit_id\" ref=\"inherited.inherited_model_view_form\"/>\n    <field name=\"arch\" type=\"xml\">\n        <!-- find field description and add the field\n             new_field after it -->\n        <xpath expr=\"//field[@name='description']\" position=\"after\">\n          <field name=\"new_field\"/>\n        </xpath>\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Adding Action Button to Odoo Form View - XML\nDESCRIPTION: This snippet defines an Odoo form view with a button placed in the header section. The button calls the 'action_do_something' method on the model using type='object', enabling seamless user interface interaction and business logic execution in Python. This XML must be loaded as part of an Odoo module, and the method specified must exist in the Python model.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/09_actions.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<form>\\n    <header>\\n        <button name=\\\"action_do_something\\\" type=\\\"object\\\" string=\\\"Do Something\\\"/>\\n    </header>\\n    <sheet>\\n        <field name=\\\"name\\\"/>\\n    </sheet>\\n</form>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Odoo ORM Prefetching for Relational Fields in Python\nDESCRIPTION: This snippet illustrates how prefetching extends to relational fields. Accessing `partner.country_id` triggers prefetching of the `country_id` field for all partners. Subsequently accessing `country.name` triggers prefetching of the `name` field for all the unique country records previously fetched. This results in significantly fewer database queries (typically one for partners, one for countries).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ncountries = set()\nfor partner in partners:\n    country = partner.country_id        # first pass prefetches all partners\n    countries.add(country.name)         # first pass prefetches all countries\n```\n\n----------------------------------------\n\nTITLE: Accessing Odoo Environment and Properties via Recordset (Python REPL)\nDESCRIPTION: This code demonstrates accessing the Odoo `Environment` object associated with a recordset (`records`). It shows how to retrieve the current user's ID (`env.uid`), the user record (`env.user`), and the database cursor (`env.cr`) through the environment. This interaction typically occurs within a Python REPL or debugging session.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n>>> records.env\n<Environment object ...>\n>>> records.env.uid\n3\n>>> records.env.user\nres.user(3)\n>>> records.env.cr\n<Cursor object ...>\n```\n\n----------------------------------------\n\nTITLE: Adding Chatter Widget to Odoo Form View - XML\nDESCRIPTION: This example demonstrates how to include the chatter widget for activity and message management using a div with class oe_chatter. The widget acts as a communication log, allowing users to interact with followers, activities, and messages. Dependency is that the model uses the mail.thread mixin, and field options can be specified as needed.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<form>\\n    <sheet>\\n        ...\\n    </sheet>\\n    <div class=\\\"oe_chatter\\\">\\n        <field name=\\\"message_follower_ids\\\"/>\\n        <field name=\\\"activity_ids\\\"/>\\n        <field name=\\\"message_ids\\\" options=\\\"OPTIONS\\\"/>\\n    </div>\\n</form>\n```\n\n----------------------------------------\n\nTITLE: Flushing, Updating via SQL, and Invalidating Cache in Odoo (Python)\nDESCRIPTION: This Python code demonstrates the pattern of flushing specific model fields (`state`) to the database, executing a raw SQL `UPDATE` statement, and then invalidating the ORM cache for the affected model and fields. Cache invalidation (`invalidate_model`) is crucial after direct database modifications to prevent the ORM from serving stale data.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# make sure 'state' is up-to-date in database\nself.env['model'].flush_model(['state'])\n\nself.env.cr.execute(\"UPDATE model SET state=%s WHERE state=%s\", ['new', 'old'])\n\n# invalidate 'state' from the cache\nself.env['model'].invalidate_model(['state'])\n```\n\n----------------------------------------\n\nTITLE: Inspecting Model Field Metadata with fields_get via XML-RPC in Python\nDESCRIPTION: This example executes the 'fields_get' method to retrieve metadata for fields of the res.partner model, showing only 'string', 'help', and 'type' attributes. Intended for inspecting field labels, help texts, and types before interacting with them; requires models proxy and valid session.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'fields_get', [], {'attributes': ['string', 'help', 'type']})\n```\n\n----------------------------------------\n\nTITLE: Defining an Inverse Method for Computed Fields in Odoo (Python)\nDESCRIPTION: Shows how to make a computed field writable by defining an `inverse` method. The `inverse` parameter is set to the name of a method (`_set_document`) that performs the reverse operation: when the computed field (`document`) is assigned a value, the inverse method updates the underlying source fields. The `compute` method (`_get_document`) defines how the field's value is read.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndocument = fields.Char(compute='_get_document', inverse='_set_document')\n\ndef _get_document(self):\n    for record in self:\n        with open(record.get_document_path) as f:\n            record.document = f.read()\ndef _set_document(self):\n    for record in self:\n        if not record.document: continue\n        with open(record.get_document_path()) as f:\n            f.write(record.document)\n```\n\n----------------------------------------\n\nTITLE: Using Dotted Path Dependencies for Computed Fields in Odoo (Python)\nDESCRIPTION: Illustrates specifying dependencies for a computed field on fields of related records using dot notation within the `@api.depends` decorator (e.g., `'line_ids.value'`). This ensures the computed field (`total`) is recalculated when the specified field (`value`) changes on any related record (`line_ids`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@api.depends('line_ids.value')\ndef _compute_total(self):\n    for record in self:\n        record.total = sum(line.value for line in record.line_ids)\n```\n\n----------------------------------------\n\nTITLE: Defining a Many2one Relationship Field - Odoo - Python\nDESCRIPTION: Defines a Many2one field in an Odoo model to reference another model (here: \"res.partner\"). The field name conventionally ends with '_id'. Requires the Odoo framework with access to the 'fields' module. This creates a dropdown selection in forms, letting users choose a single related record; the related record's data (such as 'name') can be accessed directly through the field. The primary input is the model reference string and an optional label. The field represents a singular foreign key and expects a valid corresponding record in the related table.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/07_relations.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npartner_id = fields.Many2one(\"res.partner\", string=\"Partner\")\n```\n\n----------------------------------------\n\nTITLE: Configuring List View Decorations in Odoo XML\nDESCRIPTION: Example of a list view with decorations where different styles are applied to rows based on record state. The decoration-info applies when state is 'draft' and decoration-danger applies when state is 'trashed'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/backend.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<list string=\"Idea Categories\" decoration-info=\"state=='draft'\"\n    decoration-danger=\"state=='trashed'\">\n    <field name=\"name\"/>\n    <field name=\"state\"/>\n</list>\n```\n\n----------------------------------------\n\nTITLE: Overriding an Existing Odoo Controller Method and Re-exposing Route - Python\nDESCRIPTION: This example illustrates how to extend an existing Odoo controller by subclassing and overriding specific endpoint-handling methods. The overridden method is re-decorated with @route to ensure it remains a published endpoint. It includes a call to super() to delegate to base functionality and an additional do_before() hook for pre-processing. All dependencies and decorators must be in place for this to function within the Odoo environment.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/http.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Extension(MyController):\n    @route()\n    def handler(self):\n        do_before()\n        return super(Extension, self).handler()\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Computed Field with Dependencies in Odoo - Python\nDESCRIPTION: This snippet defines an Odoo model with a computed field 'total' that is dynamically calculated based on 'amount', specifying the dependency with the @api.depends decorator. The private computation method multiplies amount by two for each record. Requires Odoo ORM, declaration of fields, and the odoo.api module. Inputs: no explicit user input; outputs: updates to the 'total' field when 'amount' changes. The method must handle a recordset and should not be called from outside the model context.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/08_compute_onchange.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import api, fields, models\n\nclass TestComputed(models.Model):\n    _name = \"test.computed\"\n\n    total = fields.Float(compute=\"_compute_total\")\n    amount = fields.Float()\n\n    @api.depends(\"amount\")\n    def _compute_total(self):\n        for record in self:\n            record.total = 2.0 * record.amount\n```\n\n----------------------------------------\n\nTITLE: Implementing the Client Action Component in JavaScript (OWL)\nDESCRIPTION: This JavaScript code defines an OWL component (`MyClientAction`) that implements the client-side behavior for the action defined previously. It imports necessary Odoo framework modules (`registry` from `@web/core/registry` and `Component` from `@odoo/owl`), specifies the XML template to use (`my_module.clientaction`), and registers the component in the `actions` registry using the tag ('my_module.MyClientAction') defined in the XML record.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_client_action.rst#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\n\nimport { Component } from  \"@odoo/owl\";\n\nclass MyClientAction extends Component {\n    static template = \"my_module.clientaction\";\n}\n\n// remember the tag name we put in the first step\nregistry.category(\"actions\").add(\"my_module.MyClientAction\", MyClientAction);\n```\n\n----------------------------------------\n\nTITLE: Obtaining Odoo Test Database via XML-RPC - Python\nDESCRIPTION: Fetches a temporary Odoo test database from demo.odoo.com using Python's xmlrpc.client. Requires no user credentials and returns the demo instance's connection parameters. The 'info' object includes host, database, user, and password fields for immediate use.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport xmlrpc.client\\ninfo = xmlrpc.client.ServerProxy('https://demo.odoo.com/start').start()\\nurl, db, username, password = info['host'], info['database'], info['user'], info['password']\n```\n\n----------------------------------------\n\nTITLE: Defining a Non-Persistent Report Model in Odoo (Python)\nDESCRIPTION: This snippet defines a custom Odoo model meant to back a report from an SQL view, not a traditional database table. The model uses _auto = False to indicate it is not stored in the ORM's standard tables, while _rec_name specifies which field will be displayed in navigation. All fields should be marked readonly. It requires Odoo's fields and models modules and must be referenced in the security configuration. Inputs are standard Odoo model class definitions and outputs are ORM models ready for population via SQL.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/create_reports.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import fields, models\n\n\nclass ModuleReport(models.Model):\n    _name = 'module.report'\n    _description = \"Module Report\"\n    _rec_name = 'module_field'\n    _auto = False\n\n```\n\n----------------------------------------\n\nTITLE: Flushing Model Data Before Raw SQL Execution in Odoo (Python)\nDESCRIPTION: This Python example illustrates the necessity of flushing model data to the database before executing raw SQL. It first calls `flush_model(['partner_id'])` to ensure any pending changes to the `partner_id` field for the 'model' are written to the database. Then, it executes a raw SQL query using the flushed data and retrieves the results. The `SQL` object from `odoo.tools` is used for safe query construction.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# make sure that 'partner_id' is up-to-date in database\nself.env['model'].flush_model(['partner_id'])\n\nself.env.cr.execute(SQL(\"SELECT id FROM model WHERE partner_id IN %s\", ids))\nids = [row[0] for row in self.env.cr.fetchall()]\n```\n\n----------------------------------------\n\nTITLE: Defining a Dynamic Default Field Value in Odoo (Python)\nDESCRIPTION: Demonstrates setting a dynamic default value for a field by passing a function (often a lambda calling a model method like `_default_name`) to the `default` parameter. This function is executed at the time of record creation to compute the default value.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef _default_name(self):\n    return self.get_value()\n\nname = fields.Char(default=lambda self: self._default_name())\n```\n\n----------------------------------------\n\nTITLE: Assigning Colors to Tags with Many2many Tags Widget in Odoo XML\nDESCRIPTION: Shows how to use the `color_field` option within the `options` attribute for the `many2many_tags` widget. This option requires specifying the name of a numeric field (present in the view, here 'color') whose value will be used to automatically assign a color to the tag.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"category_id\" widget=\"many2many_tags\" options=\"{'color_field': 'color'}\" />\n```\n\n----------------------------------------\n\nTITLE: Modifying Route Authentication in an Odoo Controller Override - Python\nDESCRIPTION: This snippet demonstrates how to override an inherited route in an Odoo controller, changing its authentication requirement. By providing auth='user' to the @route decorator on the subclass method, it updates the route to require user login, modifying the publicly available endpoint to one requiring authentication. This relies on Odoo’s route extension patterns and proper use of Python’s inheritance model.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/http.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Restrict(MyController):\n    @route(auth='user')\n    def handler(self):\n        return super(Restrict, self).handler()\n```\n\n----------------------------------------\n\nTITLE: Defining Native JavaScript Module with Import/Export in Odoo\nDESCRIPTION: Illustrates the standard ES6 module syntax for defining a JavaScript module in Odoo, located at `web/static/src/file_a.js`. It imports `someFunction` from a relative path (`./file_b.js`) and exports `otherFunction`. Odoo automatically transpiles such files found in `/static/src` into its custom module system.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_modules.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { someFunction } from \"./file_b\";\n\nexport function otherFunction(val) {\n    return someFunction(val + 3);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Record Order in Odoo Model (Python)\nDESCRIPTION: This snippet shows the use of the '_order' model attribute in Odoo to set the default order for fetched records. The example sorts record by descending 'id', ensuring latest records appear first. This is crucial for predictable business display logic across Odoo views and ORM queries. Dependencies: Odoo ORM; input/output are record instances; limitation is that ordering only accepts model field names.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import fields, models\n\nclass TestModel(models.Model):\n    _name = \"test_model\"\n    _description = \"Test Model\"\n    _order = \"id desc\"\n\n    description = fields.Char()\n\n```\n\n----------------------------------------\n\nTITLE: Defining an Odoo Model Structure in Python\nDESCRIPTION: Illustrates the conventional ordering of attributes (private, defaults, fields, compute/search, selection, constraints/onchanges, CRUD, actions, business methods) and naming conventions within an Odoo model using Python. It shows the declaration of fields, compute methods with `@api.depends`, selection methods, constraints with `@api.constrains`, onchange methods with `@api.onchange`, and action methods with `ensure_one()`. This example follows the guidelines presented for Python development in Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass Event(models.Model):\n    # Private attributes\n    _name = 'event.event'\n    _description = 'Event'\n\n    # Default methods\n    def _default_name(self):\n        ...\n\n    # Fields declaration\n    name = fields.Char(string='Name', default=_default_name)\n    seats_reserved = fields.Integer(string='Reserved Seats', store=True,\n        readonly=True, compute='_compute_seats')\n    seats_available = fields.Integer(string='Available Seats', store=True,\n        readonly=True, compute='_compute_seats')\n    price = fields.Integer(string='Price')\n    event_type = fields.Selection(string=\"Type\", selection='_selection_type')\n\n    # compute and search fields, in the same order of fields declaration\n    @api.depends('seats_max', 'registration_ids.state', 'registration_ids.nb_register')\n    def _compute_seats(self):\n        ...\n\n    @api.model\n    def _selection_type(self):\n        return []\n\n    # Constraints and onchanges\n    @api.constrains('seats_max', 'seats_available')\n    def _check_seats_limit(self):\n        ...\n\n    @api.onchange('date_begin')\n    def _onchange_date_begin(self):\n        ...\n\n    # CRUD methods (and name_search, _search, ...) overrides\n    def create(self, values):\n        ...\n\n    # Action methods\n    def action_validate(self):\n        self.ensure_one()\n        ...\n\n    # Business methods\n    def mail_user_confirm(self):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Computed Field with a Relational Dependency - Odoo Python\nDESCRIPTION: This example demonstrates defining a computed Char field dependent on a related model's field using a dependency path (\"partner_id.name\") with the @api.depends decorator. The compute method sets 'description' based on the name of the related partner for each record. Requires the 'res.partner' model, Many2one relationships, and Odoo ORM. Inputs: state of 'partner_id'; outputs: auto-updated 'description' when the partner changes. Handles both Many2one and potentially Many2many/One2many fields.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/08_compute_onchange.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndescription = fields.Char(compute=\"_compute_description\")\npartner_id = fields.Many2one(\"res.partner\")\n\n@api.depends(\"partner_id.name\")\ndef _compute_description(self):\n    for record in self:\n        record.description = \"Test for partner %s\" % record.partner_id.name\n```\n\n----------------------------------------\n\nTITLE: Using a Service in a Component with useService Hook (JavaScript)\nDESCRIPTION: This snippet demonstrates using the useService hook inside an Odoo Owl component to obtain a reference to the rpc service. It waits for the component's initialization, then calls the rpc with awaited results assigned to a class member. Dependencies include the Odoo Owl Component, the useService hook from core utils, and the onWillStart lifecycle hook. Inputs: rpc function arguments when called. Outputs: Results stored in this.someValue. Expects the service name provided to useService to exist.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/services.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useService } from \"@web/core/utils/hooks\";\n\nclass MyComponent extends Component {\n  setup() {\n    const rpc = useService(\"rpc\");\n\n    onWillStart(async () => {\n      this.someValue = await rpc(...);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Direct SQL Execution vs. ORM Search in Odoo Python\nDESCRIPTION: Contrasts discouraged direct database cursor usage (`self.env.cr.execute`) with the recommended Odoo ORM `search` method for fetching records. The direct SQL examples, even the one attempting parameterization, bypass Odoo's ORM features like access control, automated behaviors, and are prone to errors and potential security issues. The ORM `search` method provides a safer, more readable, and integrated way to query data.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/security.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# very very wrong\nself.env.cr.execute('SELECT id FROM auction_lots WHERE auction_id in (' + ','.join(map(str, ids))+') AND state=%s AND obj_price > 0', ('draft',))\nauction_lots_ids = [x[0] for x in self.env.cr.fetchall()]\n\n# no injection, but still wrong\nself.env.cr.execute('SELECT id FROM auction_lots WHERE auction_id in %s '\\\n           'AND state=%s AND obj_price > 0', (tuple(ids), 'draft',))\nauction_lots_ids = [x[0] for x in self.env.cr.fetchall()]\n\n# better\nauction_lots_ids = self.search([('auction_id','in',ids), ('state','=','draft'), ('obj_price','>',0)])\n```\n\n----------------------------------------\n\nTITLE: Grouping Odoo Dropdowns for Hover Activation using XML\nDESCRIPTION: This XML snippet demonstrates how to use the `DropdownGroup` component to group multiple `Dropdown` components. When dropdowns are within the same group (implicitly here), opening one allows the others in the group to open automatically on mouse hover without clicking.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<DropdownGroup>\n  <Dropdown>...</Dropdown>\n  <Dropdown>...</Dropdown>\n  <Dropdown>...</Dropdown>\n</DropdownGroup>\n```\n\n----------------------------------------\n\nTITLE: Overriding the Create Method for Custom Business Logic in Odoo Models (Python)\nDESCRIPTION: Demonstrates how to extend the create method of an Odoo model using the @api.model decorator to insert custom business logic before or after record creation. Dependencies include the odoo module; this overload requires calling super().create(vals) to maintain expected behavior. The vals parameter contains initial data for the new record. The return value and signature must match the parent. This method is needed when adding validation or default values at creation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/12_inheritance.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import fields, models\n\nclass TestModel(models.Model):\n    _name = \"test_model\"\n    _description = \"Test Model\"\n\n    ...\n\n    @api.model\n    def create(self, vals):\n        # Do some business logic, modify vals...\n        ...\n        # Then call super to execute the parent method\n        return super().create(vals)\n```\n\n----------------------------------------\n\nTITLE: Applying the Same Patch Logic to Multiple Objects\nDESCRIPTION: Demonstrates how to apply the same patching logic to multiple objects (`obj1`, `obj2`). Because the `super` keyword's behavior depends on the specific object context, a factory function (`createExtensionObj`) is used to generate a unique extension object for each `patch` call, ensuring `super` works correctly for each target.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/patching_code.rst#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj1 = {\n  method() {\n    doSomething();\n  },\n};\n\nconst obj2 = {\n  method() {\n    doThings();\n  },\n};\n\nfunction createExtensionObj() {\n  return {\n    method() {\n      super.method();\n      doCommonThings();\n    },\n  };\n}\n\npatch(obj1, createExtensionObj());\npatch(obj2, createExtensionObj());\n```\n\n----------------------------------------\n\nTITLE: Handling SQL Updates with Cache Invalidation and Modification Notification in Odoo (Python)\nDESCRIPTION: This advanced Python example shows a complete workflow for updating data via raw SQL while maintaining ORM consistency. It flushes the relevant field (`state`), executes an `UPDATE` using the PostgreSQL `RETURNING` clause to get the IDs of modified records, invalidates the cache (`invalidate_recordset`) only for those specific records and the affected field, and finally calls `modified(['state'])` to trigger recomputation of dependent computed fields.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# make sure 'state' is up-to-date in database\nself.env['model'].flush_model(['state'])\n\n# use the RETURNING clause to retrieve which rows have changed\nself.env.cr.execute(\"UPDATE model SET state=%s WHERE state=%s RETURNING id\", ['new', 'old'])\nids = [row[0] for row in self.env.cr.fetchall()]\n\n# invalidate the cache, and notify the update to the framework\nrecords = self.env['model'].browse(ids)\nrecords.invalidate_recordset(['state'])\nrecords.modified(['state'])\n```\n\n----------------------------------------\n\nTITLE: Model Extension Example in Python\nDESCRIPTION: Shows how to extend an existing model by adding new fields while keeping the original model name.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nclass Extension0(models.Model):\n_name = 'extension.0'\n_description = 'Extension zero'\n\nname = fields.Char(default=\"A\")\n\nclass Extension1(models.Model):\n_inherit = 'extension.0'\n\ndescription = fields.Char(default=\"Extended\")\n```\n\n----------------------------------------\n\nTITLE: Computing Multiple Fields with a Single Method in Odoo (Python)\nDESCRIPTION: Illustrates that a single method (`_apply_discount`) can be used to compute the values for multiple fields (`discount_value`, `total`). The method must be specified in the `compute` parameter for all relevant fields, and the `@api.depends` decorator should list all necessary dependencies. Inside the method, values must be assigned to all fields it computes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndiscount_value = fields.Float(compute='_apply_discount')\ntotal = fields.Float(compute='_apply_discount')\n\n@api.depends('value', 'discount')\ndef _apply_discount(self):\n    for record in self:\n        # compute actual discount from discount percentage\n        discount = record.value * record.discount\n        record.discount_value = discount\n        record.total = record.value - discount\n```\n\n----------------------------------------\n\nTITLE: Defining an Owl Counter Template using QWeb XML\nDESCRIPTION: Defines the QWeb XML template for the `Counter` component, named \"my_module.Counter\". It displays the current counter value from the component's state using `t-esc=\"state.value\"` and includes a button. Clicking the button triggers the `increment` method defined in the component class, bound using `t-on-click=\"increment\".\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/discover_js_framework/01_owl_components.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<templates xml:space=\"preserve\">\n   <t t-name=\"my_module.Counter\">\n      <p>Counter: <t t-esc=\"state.value\"/></p>\n      <button class=\"btn btn-primary\" t-on-click=\"increment\">Increment</button>\n   </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Field to an Existing Model via Inheritance in Odoo (Python)\nDESCRIPTION: Illustrates how to extend an existing Odoo model by inheriting with _inherit and adding a new field. This pattern requires the odoo Python module and access to the base model ('inherited.model'). The example adds a Char field named new_field. The new field will be available for use in forms, domains, and business logic. This approach is suitable for meeting modular extension requirements without modifying the original module's code.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/12_inheritance.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import fields, models\n\nclass InheritedModel(models.Model):\n    _inherit = \"inherited.model\"\n\n    new_field = fields.Char(string=\"New Field\")\n```\n\n----------------------------------------\n\nTITLE: Element-Based Looping Using t-foreach and t-as in QWeb XML\nDESCRIPTION: Demonstrates an alternative equivalent usage of t-foreach and t-as directly on an element (such as <p>), which repeats that entire element for each item in the collection. The inner <t t-out=\"i\"/> outputs the current iteration value. This approach is functionally identical to using a <t> wrapper for looping in QWeb.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<p t-foreach=\"[1, 2, 3]\" t-as=\"i\">\n    <t t-out=\"i\"/>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Accessing User Context via Service in Odoo Owl Component (Javascript)\nDESCRIPTION: Shows how to access the user-specific context within an Odoo Owl component. It utilizes the `useService` hook within the `setup` method to retrieve the `user` service and then accesses its `context` property.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/framework_overview.rst#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyComponent extends Component {\n    setup() {\n        const user = useService(\"user\");\n        console.log(user.context);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Related (Proxy) Field in Odoo (Python)\nDESCRIPTION: Demonstrates the definition of a related field, which acts as a proxy to a field on a related record. The `related` parameter specifies the path (sequence of relational fields) to the target field (e.g., `'user_id.partner_id.name'`). Related fields are computed by default but can be stored in the database by setting `store=True`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nnickname = fields.Char(related='user_id.partner_id.name', store=True)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Models with Inheritance in Odoo (Python)\nDESCRIPTION: Shows how to create a new model in Odoo by inheriting from models.Model, automatically obtaining standard CRUD methods (create, read, write, unlink) and allowing further extension via decorators. Requires the odoo Python module as a dependency. Key parameters include _name for the model name, and _description for its description. This baseline is extensible for all Odoo model customizations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/12_inheritance.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import fields, models\n\nclass TestModel(models.Model):\n    _name = \"test_model\"\n    _description = \"Test Model\"\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Odoo Model and Field via API in Python\nDESCRIPTION: Demonstrates using the Odoo Web Services API (`execute_kw`) in Python to programmatically create a new model ('x_custom'), add a custom required character field ('x_name') to it, create a record within this new model, and finally read the created record. Both the model and the field are created with `state: 'manual'` to ensure they are activated.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nid = models.execute_kw(db, uid, password, 'ir.model', 'create', [{\n    'name': \"Custom Model\",\n    'model': \"x_custom\",\n    'state': 'manual',\n}])\nmodels.execute_kw(db, uid, password, 'ir.model.fields', 'create', [{\n    'model_id': id,\n    'name': 'x_name',\n    'ttype': 'char',\n    'state': 'manual',\n    'required': True,\n}])\nrecord_id = models.execute_kw(db, uid, password, 'x_custom', 'create', [{'x_name': \"test record\"}])\nmodels.execute_kw(db, uid, password, 'x_custom', 'read', [[record_id]])\n```\n\n----------------------------------------\n\nTITLE: Opening Customer Records Using act_window Action (Odoo, JSON)\nDESCRIPTION: This snippet demonstrates an action descriptor for opening customer (partner) records in Odoo using list and form views. It requires the Odoo system environment and, specifically, the 'res.partner' model with appropriate customer data. The 'domain' parameter ensures only partners with the 'customer' attribute set to true are shown. This JSON can be returned from an Odoo method to trigger the window action on the client side.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/actions.rst#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"type\\\": \\\"ir.actions.act_window\\\",\\n    \\\"res_model\\\": \\\"res.partner\\\",\\n    \\\"views\\\": [[False, \\\"list\\\"], [False, \\\"form\\\"]],\\n    \\\"domain\\\": [[\\\"customer\\\", \\\"=\\\", true]],\\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Odoo Server with Development Mode for Views\nDESCRIPTION: This console command starts the Odoo server (`odoo-bin`) specifying the addons path, database name (`-d rd-demo`), module to update (`-u estate`), and enabling development mode specifically for XML view changes (`--dev xml`). This mode allows developers to see view updates by simply refreshing the browser, avoiding server restarts.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/06_basicviews.rst#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ./odoo-bin --addons-path=addons,../enterprise/,../tutorials/ -d rd-demo -u estate --dev xml\n```\n\n----------------------------------------\n\nTITLE: Searching with Domain Criteria in Python\nDESCRIPTION: Example showing how to construct search domains in Odoo using logical operators to find specific partner and sales order records.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n[('name', '=', 'ABC'),\n '|', ('phone','ilike','7620'), ('mobile', 'ilike', '7620')]\n\n[('invoice_status', '=', 'to invoice'),\n ('order_line', 'any', [('product_id.qty_available', '<=', 0)])]\n\n[('birthday.month_number', '=', 2)]\n```\n\n----------------------------------------\n\nTITLE: Setting Date Range Limits for Date Field in XML\nDESCRIPTION: Illustrates how to set minimum and maximum allowed dates for a date field. It uses the 'min_date' and 'max_date' options, with 'today' as a special value for the current date.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"datefield\" options=\"{'min_date': 'today', 'max_date': '2023-12-31'}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Odoo Web Controller with Route - Python\nDESCRIPTION: This snippet defines a custom web controller by inheriting from odoo.http.Controller and exposes a HTTP route using the @route decorator. It demonstrates how to use Odoo’s decorator to publish a method as a web endpoint and return a response. Dependencies include the Odoo HTTP framework and the function stuff(), and parameters for the @route decorator, such as route URL and auth, dictate access policy.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/http.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyController(odoo.http.Controller):\n    @route('/some_url', auth='public')\n    def handler(self):\n        return stuff()\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Odoo via XML-RPC - PHP (Ripcord)\nDESCRIPTION: Authenticates a user with Odoo via the XML-RPC external API in PHP using the Ripcord client. Passes database, username, password, and an empty array as parameters, and obtains a uid for subsequent authenticated calls.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$uid = $common->authenticate($db, $username, $password, array());\n```\n\n----------------------------------------\n\nTITLE: Patching a Class Prototype Method in Odoo Javascript\nDESCRIPTION: Demonstrates how to modify an existing class method (`sleep`) in place using the `patch` utility from `@web/core/utils/patch`. The patch is applied to the class's prototype (`Hamster.prototype`) to alter the behavior of the method for all instances. It shows calling the original method using `super`. Patching static properties requires patching the class itself. It's recommended to apply patches at the top level of a module.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Hamster } from \"@web/core/hamster\"\nimport { patch } from \"@web/core/utils/patch\";\n\npatch(Hamster.prototype, {\n    sleep() {\n        super.sleep(...arguments);\n        console.log(\"zzzz\");\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a One2many Relationship Field - Odoo - Python\nDESCRIPTION: Creates a One2many field to link one record to multiple related records (reverse of Many2one), here referencing 'test_model' via the 'partner_id' foreign key. The first parameter is the comodel (target model), the second is the field on the comodel that points back to this model, and an optional string label. Field names typically end with '_ids'. This field is virtual and only works if the Many2one field is actually defined on the comodel. Requires Odoo's 'fields' module and both models properly related.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/07_relations.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ntest_ids = fields.One2many(\"test_model\", \"partner_id\", string=\"Tests\")\n```\n\n----------------------------------------\n\nTITLE: Conditionally Allowing Record Creation in One2many Widget in Odoo XML\nDESCRIPTION: Shows how to use the `create` option within the `options` attribute for the default `one2many` widget. This allows defining a domain (e.g., `[['some_other_field', '>', 24]]`) to conditionally enable or disable the creation of new related records based on the values of other fields. Similar options exist for `delete`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_39\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"turtles\" options=\"{'create': [['some_other_field', '>', 24]]}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining and Caching/Rendering QWeb Templates - Odoo XML\nDESCRIPTION: Shows how to define QWeb templates using caching and dynamic update directives. Demonstrates the effect of t-cache, t-nocache, t-set, and t-out for maintaining dynamic counters and record-specific content. Also covers template inheritance via t-inherit and legacy manipulation with t-extend and t-jquery. Inputs are data records; dynamic views are controlled by variables and caching. Output is rendered HTML/XML with sections controlled by template directives. No external dependencies beyond the QWeb rendering engine are needed.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\\\"counter\\\" t-value=\\\"counter * 10\\\"/>\n<header t-nocache=\\\"\\\">\n    <t t-set=\\\"counter\\\" t-value=\\\"counter + 5\\\"/>\n    (views: <t t-out=\\\"counter\\\"/>)\n</header>\n<article t-cache=\\\"record\\\">\n    <title><t t-out=\\\"record.name\\\"/> <i t-nocache=\\\"\\\">(views: <t t-out=\\\"counter\\\"/>)</i></titlle>\n    <content t-out=\\\"record.description\\\"/>\n</article>\n<footer>(views: <t t-out=\\\"counter\\\"/>)</footer>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<section t-cache=\\\"records\\\">\n    <article t-foreach=\\\"records\\\" t-as=\\\"record\\\">\n        <header>\n            <title t-field=\\\"record.get_method_title()\\\"/>\n        </header>\n        <footer t-nocache=\\\"This part has a dynamic counter and must be rendered all the time.\\\"\n                t-nocache-cached_value=\\\"record.get_base_counter()\\\">    \n            <span t-out=\\\"counter + cached_value\\\"/>\n        </footer>\n    </article>\n</section>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<templates>\n    <t t-name=\\\"template-name\\\">\n        <!-- template code -->\n    </t>\n</templates>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\\\"child.template\\\" t-inherit=\\\"base.template\\\" t-inherit-mode=\\\"primary\\\">\n    <xpath expr=\\\"//ul\\\" position=\\\"inside\\\">       \n        <li>new element</li>\n    </xpath>\n</t>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<t t-inherit=\\\"base.template\\\" t-inherit-mode=\\\"extension\\\">\n    <xpath expr=\\\"//tr[1]\\\" position=\\\"after\\\">\n        <tr><td>new cell</td></tr>\n    </xpath>\n</t>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<t t-extend=\\\"base.template\\\">\n    <t t-jquery=\\\"ul\\\" t-operation=\\\"append\\\">\n        <li>new element</li>\n    </t>\n</t>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\\\"foo\\\" t-value=\\\"42\\\"/>\n<t t-log=\\\"foo\\\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<t t-if=\\\"a_test\\\">\n    <t t-debug=\\\"\\\"/>\n</t>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\\\"foo\\\" t-value=\\\"42\\\"/>\n<t t-js=\\\"ctx\\\">\n    console.log(\\\"Foo is\\\", ctx.foo);\n</t>\n```\n\n----------------------------------------\n\nTITLE: Opening Powerbox with Custom Commands in Odoo Editor (JavaScript)\nDESCRIPTION: This snippet shows how to open Odoo Editor's Powerbox with a fully custom set of commands and categories, bypassing the default ones. It requires access to the current odooEditor.powerbox instance from within the Wysiwyg class context. The method accepts two arrays: one for commands and one for categories, each supporting translated names and descriptions via _t, and allows precise control over Powerbox presentation. Inputs are the custom commands and categories; no value is returned as the Powerbox UI is launched for the user. This method is ideal for specialized flows such as pasting image URLs. Ensure to use it only with a single Powerbox instance from the editor context.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/odoo_editor.rst#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.odooEditor.powerbox.open(\n    [{\n        name: _t('Document'),\n        category: _t('Documentation'),\n        description: _t(\"Add this text to your mailing's documentation\"),\n        fontawesome: 'fa-book',\n        priority: 1, // This is the only command in its category anyway.\n    }],\n    [{\n        name: _t('Documentation'),\n        priority: 300,\n    }]\n);\n\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Field Label in Odoo Models (Python)\nDESCRIPTION: Illustrates how to override the default field label (which is normally a capitalized version of the field name) by explicitly providing a user-visible name using the `string` parameter when defining a field.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfield2 = fields.Integer(string=\"Field Label\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Owl Hook for Time Updates in Javascript\nDESCRIPTION: Provides an example of a custom Owl hook named `useCurrentTime`. This hook utilizes `useState` for reactive state management and lifecycle hooks (`onWillStart`, `onWillUnmount`) to set up and tear down an interval timer that updates the current time every second.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/framework_overview.rst#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useCurrentTime() {\n    const state = useState({ now: new Date() });\n    const update = () => state.now = new Date();\n    let timer;\n    onWillStart(() => timer = setInterval(update, 1000));\n    onWillUnmount(() => clearInterval(timer));\n    return state;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Hierarchical Menu Structure in Odoo XML\nDESCRIPTION: Shows how to create a multi-level menu structure in Odoo using nested `<menuitem>` tags in XML. It defines a root menu (\"Test\"), a first-level menu (\"First Level\"), and an action menu linked to `test_model_action`. The action menu implicitly takes its name from the linked action.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/05_firstui.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<menuitem id=\"test_menu_root\" name=\"Test\">\n    <menuitem id=\"test_first_level_menu\" name=\"First Level\">\n        <menuitem id=\"test_model_menu_action\" action=\"test_model_action\"/>\n    </menuitem>\n</menuitem>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Boolean Field in Odoo Fields Registry (JavaScript)\nDESCRIPTION: This code snippet registers the 'LateOrderBooleanField' class under the key 'late_boolean' in Odoo's registry for field components. It ensures that when a field uses 'widget=\"late_boolean\"' in the XML arch, the corresponding custom component is instantiated. This approach relies on Odoo's declarative registry system. Requires that 'LateOrderBooleanField' is defined and imported in the same context.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_field.rst#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nregistry.category(\"fields\").add(\"late_boolean\", LateOrderBooleanField);\n```\n\n----------------------------------------\n\nTITLE: Action Notification with Button in Odoo Notification Service (JavaScript)\nDESCRIPTION: This example snippet demonstrates configuring an Odoo notification with additional options and interaction. The notificationService and actionService are both initialized. When triggered, the add method displays a custom notification with a title, success type, and a button; clicking the button executes a specified action via actionService.doAction. Dependencies include actionService and notificationService being available and properly injected. Parameters include the notification message, display options, and action callback. Outcome is a visible notification with user-interactive controls.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/services.rst#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n  // in setup\n  this.notificationService = useService(\"notification\");\n  this.actionService = useService(\"action\");\n\n  // later\n  this.notificationService.add(\"You closed a deal!\", {\n    title: \"Congrats\",\n    type: \"success\",\n    buttons: [\n        {\n            name: \"See your Commission\",\n            onClick: () => {\n                this.actionService.doAction(\"commission_action\");\n            },\n        },\n    ],\n  });\n```\n\n----------------------------------------\n\nTITLE: Combining Domains with Static Domain Methods\nDESCRIPTION: Demonstrates how to use the static methods of the Domain class (and, or, not, combine) to create complex domain operations. These methods help manipulate domain expressions programmatically.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/framework_overview.rst#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// [\"&\", (\"a\", \"=\", 1), (\"uid\", \"<=\", uid)]\nDomain.and([[[\"a\", \"=\", 1]], \"[('uid', '<=', uid)]\"]]).toString();\n\n// [\"|\" , (\"a\", \"=\", 1), (\"uid\", \"<=\", uid)]\nDomain.or([[[\"a\", \"=\", 1]], \"[('uid', '<=', uid)]\"]]).toString();\n\n// [\"!\", (\"a\", \"=\", 1)]\nDomain.not([[\"a\", \"=\", 1]]).toString();\n\n// [\"&\", (\"a\", \"=\", 1), (\"uid\", \"<=\", uid)]\nDomain.combine([[[\"a\", \"=\", 1]], \"[('uid', '<=', uid)]\"], \"AND\").toString();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Model Class for Odoo Web View (JavaScript)\nDESCRIPTION: This class encapsulates data retrieval and management logic for a custom Odoo view, including loading records from the ORM and managing concurrency with KeepLast. The constructor accepts fields and context needed for making domain queries. The model can be made reactive and used within controllers to maintain synchronized UI state. Care should be taken to handle concurrency and correct data parsing from the arch.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_view.rst#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { KeepLast } from \"@web/core/utils/concurrency\";\n\nexport class BeautifulModel {\n    constructor(orm, resModel, fields, archInfo, domain) {\n        this.orm = orm;\n        this.resModel = resModel;\n        // We can access arch information parsed by the beautiful arch parser\n        const { fieldFromTheArch } = archInfo;\n        this.fieldFromTheArch = fieldFromTheArch;\n        this.fields = fields;\n        this.domain = domain;\n        this.keepLast = new KeepLast();\n    }\n\n    async load() {\n        // The keeplast protect against concurrency call\n        const { length, records } = await this.keepLast.add(\n            this.orm.webSearchRead(this.resModel, this.domain, [this.fieldsFromTheArch], {})\n        );\n        this.records = records;\n        this.recordsLength = length;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Promise Rejections and Potential Pitfalls (JavaScript)\nDESCRIPTION: Demonstrates handling promise rejections using `.catch()`. It highlights a common pitfall where the `.catch()` block handles errors not only from the initial `someFunction()` promise but also from within the `.then()` callback block. The example correctly filters for a specific error type (`MyError`) using `instanceof` before handling it, preventing the accidental swallowing of unrelated errors.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/error_handling.rst#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsomeFunction().then((someVal) => {\n  // work with someVal\n}).catch((e) => {\n  if (!(e instanceof MyError)) {\n    throw e;\n  }\n  return null;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a JavaScript Module in Odoo\nDESCRIPTION: This snippet demonstrates how to define a JavaScript module in Odoo using the 'odoo.define' function. It shows the module naming convention, dependency declaration, and the module definition function structure.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_modules.rst#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nodoo.define('module.Something', ['web.ajax'], function (require) {\n    \"use strict\";\n\n    var ajax = require('web.ajax');\n\n    // some code here\n    return something;\n});\n```\n\n----------------------------------------\n\nTITLE: Server-Side Messaging Methods in Odoo Mail Thread (Python)\nDESCRIPTION: Presents method signatures and documentation for server-side operations provided by the 'mail.thread' mixin. This includes methods for posting messages (`message_post`, `message_post_with_view`, `message_post_with_template`), handling incoming emails (`message_new`, `message_update`), and managing followers (`message_subscribe`, `message_unsubscribe`, `message_unsubscribe_users`). These methods allow programmatic interaction with the Odoo messaging system.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/mixins.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. method:: message_post(self, body='', subject=None, message_type='notification', subtype=None, parent_id=False, attachments=None, **kwargs)\n\n    Post a new message in an existing thread, returning the new\n    mail.message ID.\n\n    :param str | Markup body: body of the message. Will be escaped if `str`. Use\n        a :class:`~markupsafe.Markup` object for HTML content.\n    :param str message_type: see mail_message.message_type field\n    :param int parent_id: handle reply to a previous message by adding the\n        parent partners to the message in case of private discussion\n    :param list(tuple(str,str)) attachments: list of attachment tuples in the form\n        ``(name,content)``, where content is NOT base64 encoded\n    :param bool body_is_html: indicates whether `body` should be treated as HTML, even if `str`.\n    :param `\\**kwargs`: extra keyword arguments will be used as default column values for the\n          new mail.message record\n    :return: ID of newly created mail.message\n    :rtype: int\n\n.. method:: message_post_with_view(views_or_xmlid, **kwargs):\n\n    Helper method to send a mail / post a message using a view_id to\n    render using the ir.qweb engine. This method is stand alone, because\n    there is nothing in template and composer that allows to handle\n    views in batch. This method will probably disappear when templates\n    handle ir ui views.\n\n    :param str or ``ir.ui.view`` record: external id or record of the view that\n        should be sent\n\n.. method:: message_post_with_template(template_id, **kwargs)\n\n    Helper method to send a mail with a template\n\n    :param template_id: the id of the template to render to create the body of the message\n    :param `\\**kwargs`: parameter to create a mail.compose.message wizard (which inherit from mail.message)\n\n.. rubric:: Receiving messages\n\nThese methods are called when a new e-mail is processed by the mail gateway. These\ne-mails can either be new thread (if they arrive via an :ref:`alias <reference/mixins/mail/alias>`)\nor simply replies from an existing thread. Overriding them allows you to set values\non the thread's record depending on some values from the email itself (i.e. update\na date or an e-mail address, add CC's addresses as followers, etc.).\n\n.. method:: message_new(msg_dict, custom_values=None)\n\n    Called by ``message_process`` when a new message is received\n    for a given thread model, if the message did not belong to\n    an existing thread.\n\n    The default behavior is to create a new record of the corresponding\n    model (based on some very basic info extracted from the message).\n    Additional behavior may be implemented by overriding this method.\n\n    :param dict msg_dict: a map containing the email details and\n        attachments. See ``message_process`` and ``mail.message.parse`` for details\n    :param dict custom_values: optional dictionary of additional\n        field values to pass to create() when creating the new thread record;\n        be careful, these values may override any other values coming from\n        the message\n    :rtype: int\n    :return: the id of the newly created thread object\n\n.. method:: message_update(msg_dict, update_vals=None)\n\n    Called by ``message_process`` when a new message is received\n    for an existing thread. The default behavior is to update the record\n    with ``update_vals`` taken from the incoming email.\n\n    Additional behavior may be implemented by overriding this\n    method.\n\n    :param dict msg_dict: a map containing the email details and attachments;\n        see ``message_process`` and ``mail.message.parse()`` for details.\n    :param dict update_vals: a dict containing values to update records given\n        their ids; if the dict is None or is void, no write operation is performed.\n    :return: True\n\n.. rubric:: Followers management\n\n.. method:: message_subscribe(partner_ids=None, channel_ids=None, subtype_ids=None, force=True)\n\n    Add partners to the records followers.\n\n    :param list(int) partner_ids: IDs of the partners that will be subscribed\n        to the record\n    :param list(int) channel_ids: IDs of the channels that will be subscribed\n        to the record\n    :param list(int) subtype_ids: IDs of the subtypes that the channels/partners\n        will be subscribed to (defaults to the default subtypes if ``None``)\n    :param force: if True, delete existing followers before creating new one\n        using the subtypes given in the parameters\n    :return: Success/Failure\n    :rtype: bool\n\n\n.. method:: message_unsubscribe(partner_ids=None, channel_ids=None)\n\n    Remove partners from the record's followers.\n\n    :param list(int) partner_ids: IDs of the partners that will be subscribed\n        to the record\n    :param list(int) channel_ids: IDs of the channels that will be subscribed\n        to the record\n    :return: True\n    :rtype: bool\n\n\n.. method:: message_unsubscribe_users(user_ids=None)\n\n    Wrapper on message_subscribe, using users.\n\n    :param list(int) user_ids: IDs of the users that will be unsubscribed\n        to the record; if None, unsubscribe the current user instead.\n    :return: True\n    :rtype: bool\n```\n\n----------------------------------------\n\nTITLE: Defining a Static Default Field Value in Odoo (Python)\nDESCRIPTION: Shows how to set a fixed default value for an Odoo model field. The `default` parameter is assigned a literal value (e.g., a string) which will be used as the default when creating new records.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nname = fields.Char(default=\"a value\")\n```\n\n----------------------------------------\n\nTITLE: Inheriting and Modifying Kanban Controller Template in Odoo Web (XML)\nDESCRIPTION: This XML template demonstrates how to extend an existing Kanban controller view by inheriting from its base template and injecting new markup (such as a custom ribbon or information block). Using t-inherit and xpath, developers can add, modify, or replace portions of the standard template. Dependencies include the Odoo client-side templating engine. The template can be referenced from the controller class to alter the view's appearance.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_view.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<templates>\n    <t t-name=\"my_module.CustomKanbanView\" t-inherit=\"web.KanbanView\">\n        <xpath expr=\"//Layout\" position=\"before\">\n            <div>\n                Hello world !\n            </div>\n        </xpath>\n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Defining Public vs. Private Methods for Security in Odoo Python\nDESCRIPTION: Illustrates the distinction between public (`action_done`) and private (`_set_state`) methods in Odoo models. Public methods are accessible via RPC and require careful validation of conditions (like user group checks) as parameters cannot be trusted. Private methods (prefixed with `_`) are not directly callable via RPC and can encapsulate sensitive operations, potentially using `sudo()` to escalate privileges for specific actions like state changes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/security.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# this method is public and its arguments can not be trusted\ndef action_done(self):\n    if self.state == \"draft\" and self.env.user.has_group('base.manager'):\n        self._set_state(\"done\")\n\n# this method is private and can only be called from other python methods\ndef _set_state(self, new_state):\n    self.sudo().write({\"state\": new_state})\n```\n\n----------------------------------------\n\nTITLE: Illustrating Supported/Unsupported Related Field Chaining in Odoo Python\nDESCRIPTION: This snippet defines sample Many2one, Many2many, and One2many fields and then illustrates how related fields can be defined. It shows supported scenarios where a Many2many or One2many field is accessed through a Many2one relationship (`related=\"m2o_id.m2m_ids\"`). It also highlights unsupported scenarios where chaining directly through Many2many or One2many fields (`related=\"m2m_ids.m2m_ids\"`) will not work as expected, suggesting the use of computed fields instead.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nm2o_id = fields.Many2one()\nm2m_ids = fields.Many2many()\no2m_ids = fields.One2many()\n\n# Supported\nd_ids = fields.Many2many(related=\"m2o_id.m2m_ids\")\ne_ids = fields.One2many(related=\"m2o_id.o2m_ids\")\n\n# Won't work: use a custom Many2many computed field instead\nf_ids = fields.Many2many(related=\"m2m_ids.m2m_ids\")\ng_ids = fields.One2many(related=\"o2m_ids.o2m_ids\")\n```\n\n----------------------------------------\n\nTITLE: Expected Odoo Server Warnings After Minimal Model Creation\nDESCRIPTION: Shows typical warning messages logged by the Odoo server after creating a new model (`estate.property`) without providing a `_description` attribute (for user-friendly identification) or defining access rules (for security). These warnings prompt developers to add necessary configurations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/03_basicmodel.rst#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n...\nWARNING rd-demo odoo.models: The model estate.property has no _description\n...\nWARNING rd-demo odoo.modules.loading: The model estate.property has no access rules, consider adding one...\n...\n```\n\n----------------------------------------\n\nTITLE: Populating an Odoo SQL View Model by Overriding BaseModel.init() (Python)\nDESCRIPTION: This snippet shows how to implement the init(self) method to define or replace the underlying SQL view for a custom Odoo report model. It drops the existing view if present, then executes a CREATE or REPLACE VIEW statement using fragments from _select() and _from() helper methods. The snippet requires the odoo.tools module and assumes self.env.cr is available for executing SQL. The method is called automatically by Odoo when the model is initialized.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/create_reports.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef init(self):\n    tools.drop_view_if_exists(self.env.cr, self._table)\n    self.env.cr.execute(\"\"\"CREATE or REPLACE VIEW %s as (\n                           SELECT\n                              %s\n                           FROM\n                              %s\n            )\"\"\" % (self._table, self._select(), self._from()))\n\n```\n\n----------------------------------------\n\nTITLE: Obtaining Odoo Test Database via XML-RPC - Ruby\nDESCRIPTION: Uses Ruby's XMLRPC library to acquire a demo Odoo test database. Makes an XML-RPC call to demo.odoo.com to retrieve a hash of server parameters. Output values are extracted from the info hash for connection setup.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"xmlrpc/client\"\\ninfo = XMLRPC::Client.new2('https://demo.odoo.com/start').call('start')\\nurl, db, username, password = info['host'], info['database'], info['user'], info['password']\n```\n\n----------------------------------------\n\nTITLE: Reading Data from the Odoo ORM with webSearchRead (JavaScript)\nDESCRIPTION: This example illustrates fetching records from the Odoo backend using the orm service's webSearchRead method. It retrieves specified fields and includes context options (such as bin_size for image data). Dependencies: Odoo orm service in JavaScript. Parameters: model name, domain, fields, and context. Output: record list and count. Limitation: must include bin_size for non-base64 image format.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/master_odoo_web_framework/02_create_gallery_view.rst#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { length, records } = this.orm.webSearchRead(this.resModel, domain, {\n   specification: {\n        [this.fieldToFetch]: {},\n        [this.secondFieldToFetch]: {},\n    },\n    context: {\n        bin_size: true,\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Component Template for Owl Component (XML)\nDESCRIPTION: This XML snippet provides the external QWeb/Owl template for a component, referenced by 'myaddon.MyComponent'. It implements a clickable div that displays a reactive state value, matching the logic in the JavaScript component. Template files should begin with the standard XML prologue and follow the 'addon_name.ComponentName' naming convention for compatibility with Odoo's asset bundling. Input: state from the component; output: rendered HTML. Translation and template inheritance are supported.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<templates xml:space=\"preserve\">\n\n<t t-name=\"myaddon.MyComponent\">\n  <div t-on-click=\"increment\">\n    <t t-esc=\"state.value\"/>\n  </div>\n</t>\n\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Embedding a Simple QR Barcode in QWeb Reports using HTML\nDESCRIPTION: Shows how to embed a QR barcode image within an Odoo QWeb report. It uses the `t-att-src` QWeb attribute on an `<img>` tag to dynamically construct the URL for the barcode generation controller (`/report/barcode/QR/`), passing the desired text ('My text in qr code') as part of the URL path.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/reports.rst#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<img t-att-src=\"'/report/barcode/QR/%s' % 'My text in qr code'\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Simple Owl Component in Odoo (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates creating a basic Owl component class using the Owl framework in Odoo. It imports Component, xml, and useState, then defines a MyComponent class with an inline XML template and reactive state. The increment method updates a numeric value; the template binds this to an onClick event. Required dependencies: @odoo/owl library. Main input is user interaction; output is UI update to the displayed number. The component is ES2019-compliant with dynamic state and template rendering.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, xml, useState } from \"@odoo/owl\";\n\nclass MyComponent extends Component {\n    static template = xml`\n        <div t-on-click=\"increment\">\n            <t t-esc=\"state.value\">\n        </div>\n    `;\n\n    setup() {\n        this.state = useState({ value: 1 });\n    }\n\n    increment() {\n        this.state.value++;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making GET and POST HTTP Requests with Odoo HTTP Service (JavaScript)\nDESCRIPTION: This code demonstrates initializing and utilizing the Odoo HTTP service for performing GET and POST requests within a frontend module. The httpService is acquired through useService(\"http\"), permitting methods such as get and post with appropriate arguments. Dependencies are none, but network connectivity and a valid endpoint are required. Input parameters include the route (URL), and optionally, data and read methods; outputs are the responses in the requested format. Limitations include security and CORS restrictions enforced by the browser.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/services.rst#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n  const httpService = useService(\"http\");\n  const data = await httpService.get(\"https://something.com/posts/1\");\n  // ...\n  await httpService.post(\"https://something.com/posts/1\", { title: \"new title\", content: \"new content\" });\n```\n\n----------------------------------------\n\nTITLE: Creating Odoo Records with One2many Lines using Command in Python\nDESCRIPTION: Illustrates creating a main record (`test_model`) and its associated One2many (`line_ids`) records in a single `create` call. It uses `odoo.fields.Command.create` within a list to specify the data for the new line item(s). This is the standard approach for populating relational fields like `invoice_line_ids` when creating the parent record (e.g., `account.move`). Requires importing `Command` from `odoo.fields`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/13_other_module.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import Command\n\ndef inherited_action(self):\n    self.env[\"test_model\"].create(\n        {\n            \"name\": \"Test\",\n            \"line_ids\": [\n                Command.create({\n                    \"field_1\": \"value_1\",\n                    \"field_2\": \"value_2\",\n                })\n            ],\n        }\n    )\n    return super().inherited_action()\n```\n\n----------------------------------------\n\nTITLE: Registering a Component Template by Name for Translation (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to define an Owl component by registering its template via a template string identifier, enabling the use of external, translatable XML templates. The component references an XML template 'myaddon.MyComponent', which is defined elsewhere. This pattern supports localization. Requires the @odoo/owl library and a corresponding, properly named XML template file. Inputs: component properties and events; output: template-driven display. Ensures component logic and template are decoupled for maintainability.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, useState } from \"@odoo/owl\";\n\nclass MyComponent extends Component {\n    static template = 'myaddon.MyComponent';\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the WebClient Root Template in Odoo XML (Owl)\nDESCRIPTION: Presents a simplified XML template for the main Odoo WebClient Owl component (`web.WebClient`). It shows the basic layout containing a `NavBar`, an `ActionContainer` for displaying actions, and a `MainComponentsContainer` for extensible components.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/framework_overview.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\"web.WebClient\">\n    <body class=\"o_web_client\">\n        <NavBar/>\n        <ActionContainer/>\n        <MainComponentsContainer/>\n    </body>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Model Inheritance Implementation in Python\nDESCRIPTION: Demonstrates classical inheritance in Odoo by creating a new model that inherits fields and methods from a base model.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nclass Inheritance0(models.Model):\n    _name = 'inheritance.0'\n    _description = 'Inheritance Zero'\n\n    name = fields.Char()\n\n    def call(self):\n        return self.check(\"model 0\")\n\n    def check(self, s):\n        return \"This is {} record {}\".format(s, self.name)\n\nclass Inheritance1(models.Model):\n    _name = 'inheritance.1'\n    _inherit = 'inheritance.0'\n    _description = 'Inheritance One'\n\n    def call(self):\n        return self.check(\"model 1\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Output Using Standard Elements with t-if in QWeb XML\nDESCRIPTION: This snippet shows the use of a standard XML element (e.g., <div>) with the t-if attribute for conditional content rendering. If the specified 'condition' evaluates to true, the <div> is rendered along with its child <p>; otherwise, the entire element is omitted. This pattern is interchangeable with using the <t> element for conditions within QWeb templates.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<div t-if=\"condition\">\n    <p>Test</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTTP Controller to Serve Standalone App - Odoo - Python\nDESCRIPTION: This Python snippet implements a basic Odoo HTTP controller that exposes the standalone application view at a public URL. When accessed, it renders the QWeb view, passing it 'session_info' from the Odoo environment for template initialization. Place this controller in your module's controllers directory. Dependencies include Odoo's web controller and http API. The controller expects no parameters from users. Output is the fully rendered HTML page with all assets and session context injected.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/standalone_owl_application.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo.http import request, route, Controller\\n\\nclass YourController(Controller):\\n    @route(\\\"/your_module/standalone_app\\\", auth=\\\"public\\\")\\n    def standalone_app(self):\\n        return request.render(\\n            'your_module.standalone_app',\\n            {\\n                'session_info': request.env['ir.http'].get_frontend_session_info(),\\n            }\\n        )\n```\n\n----------------------------------------\n\nTITLE: Structure of Odoo Module Directory - Directory Tree - Text\nDESCRIPTION: Details the typical structure of an Odoo web client module, including source directories for images, Python files, manifest, data files, and static web resources. Each sub-folder fulfills a specific role in the Odoo addon or in exposing static assets to the browser. This structure reflects Odoo's recommended organization for modules and assists in extension and integration.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\noepetstore\n|-- images\n|   |-- alligator.jpg\n|   |-- ball.jpg\n|   |-- crazy_circle.jpg\n|   |-- fish.jpg\n|   `-- mice.jpg\n|-- __init__.py\n|-- oepetstore.message_of_the_day.csv\n|-- __manifest__.py\n|-- petstore_data.xml\n|-- petstore.py\n|-- petstore.xml\n`-- static\n    `-- src\n        |-- css\n        |   `-- petstore.css\n        |-- js\n        |   `-- petstore.js\n        `-- xml\n            `-- petstore.xml\n```\n\n----------------------------------------\n\nTITLE: Defining a Stored Related Field with Specific Dependencies in Odoo Python\nDESCRIPTION: This snippet demonstrates how to define a character field ('nickname') that is related to the 'name' field of the 'partner_id' relation. It uses `store=True` to make the field stored in the database and `depends=['partner_id']` to ensure the field is recomputed only when the 'partner_id' field changes, not when the related partner's name changes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nnickname = fields.Char(\n    related='partner_id.name', store=True,\n    depends=['partner_id'])\n# The nickname will only be recomputed when the partner_id\n# is modified, not when the name is modified on the partner.\n```\n\n----------------------------------------\n\nTITLE: Importing Absolutely Across Different Odoo Addons\nDESCRIPTION: Shows how a JavaScript module (`file_c.js`) in the `stock` addon must use the full, absolute Odoo module name (`@web/file_a`) to import a module defined in a different addon (`web`). Relative imports do not work across different Odoo addons.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_modules.rst#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {something} from `@web/file_a`;\n```\n\n----------------------------------------\n\nTITLE: Listing and Creating OpenAcademy Sessions via XML-RPC in Python\nDESCRIPTION: This Python script provides a solution for an exercise involving Odoo's XML-RPC interface. It connects to the Odoo server, logs in, reads existing 'openacademy.session' records (displaying name and seats), and then creates a new session record linked to a specific course (course_id: 2). It uses `functools.partial` to simplify the calls to the 'execute' method.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/web_services.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport functools\nimport xmlrpc.client\nHOST = 'localhost'\nPORT = 8069\nDB = 'openacademy'\nUSER = 'admin'\nPASS = 'admin'\nROOT = 'http://%s:%d/xmlrpc/' % (HOST,PORT)\n\n# 1. Login\nuid = xmlrpc.client.ServerProxy(ROOT + 'common').login(DB,USER,PASS)\nprint(\"Logged in as %s (uid:%d)\" % (USER,uid))\n\ncall = functools.partial(\n    xmlrpc.client.ServerProxy(ROOT + 'object').execute,\n    DB, uid, PASS)\n\n# 2. Read the sessions\nsessions = call('openacademy.session','search_read', [], ['name','seats'])\nfor session in sessions:\n    print(\"Session %s (%s seats)\" % (session['name'], session['seats']))\n# 3.create a new session\nsession_id = call('openacademy.session', 'create', {\n    'name' : 'My session',\n    'course_id' : 2,\n})\n```\n\n----------------------------------------\n\nTITLE: Reading Record Fields via XML-RPC in Python\nDESCRIPTION: This snippet shows how to read specific fields (name, country_id, comment) from res.partner records using the Odoo XML-RPC API in Python. It calls 'execute_kw' with the 'read' method, passing record IDs and the list of fields to retrieve. Returns a list of dictionaries where each entry represents a record; dependencies include the models XML-RPC proxy, and requires valid database connection information.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'read', [ids], {'fields': ['name', 'country_id', 'comment']})\n```\n\n----------------------------------------\n\nTITLE: Enabling Odoo Module Transpilation with Opt-in Tag\nDESCRIPTION: Demonstrates using the `/** @odoo-module **/` comment directive to explicitly mark a JavaScript file for transpilation into an Odoo module. This opt-in mechanism is used for files located outside the default transpiled directories (`/static/src`, `/static/tests`), ensuring they are converted and integrated into the Odoo module system.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_modules.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module **/\nexport function sum(a, b) {\n  return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced PetToysList Widget with Click Navigation\nDESCRIPTION: Modified PetToysList widget that includes click event handling to navigate to the product form view when a toy is clicked. Uses the events property to bind click handlers to pet toy elements.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.PetToysList = instance.Widget.extend({\n    template: 'PetToysList',\n    events: {\n        'click .oe_petstore_pettoy': 'selected_item',\n    },\n    start: function () {\n        var self = this;\n        return new instance.web.Model('product.product')\n            .query(['name', 'image'])\n            .filter([['categ_id.name', '=', \"Pet Toys\"]])\n            .limit(5)\n            .all()\n            .then(function (results) {\n                _(results).each(function (item) {\n\n```\n\n----------------------------------------\n\nTITLE: Defining Record Rules in Odoo Security (XML)\nDESCRIPTION: This snippet demonstrates how to define a record rule in an Odoo module's XML data file using the <record> element of the ir.rule model. The rule restricts access to records based on the current user, allowing only the record's user (user_id) or records with no assigned user to be visible or modifiable. It uses Odoo's domain syntax for dynamic access checks and the Command.link helper to reference groups. Prerequisites: a valid model reference, a proper group reference, and knowledge of Odoo's security infrastructure. Expected input is an XML element; the rule outputs access control and applies at runtime. Limitations: only grants/restricts access based on specified domain logic and is only as effective as the domain's accuracy.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/restrict_data_access.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\\\"rule_id\\\" model=\\\"ir.rule\\\">\\n    <field name=\\\"name\\\">A description of the rule's role</field>\\n    <field name=\\\"model_id\\\" ref=\\\"model_to_manage\\\"/>\\n    <field name=\\\"perm_read\\\" eval=\\\"False\\\"/>\\n    <field name=\\\"groups\\\" eval=\\\"[Command.link(ref('base.group_user'))]\\\"/>\\n    <field name=\\\"domain_force\\\">[\\n        '|', ('user_id', '=', user.id),\\n             ('user_id', '=', False)\\n    ]</field>\\n</record>\n```\n\n----------------------------------------\n\nTITLE: Converting String to Date Object in Odoo (Python)\nDESCRIPTION: Example demonstrating the use of the `fields.Date.to_date` static method. This helper function is used to parse a string representation of a date (potentially retrieved from the execution context) and convert it into a `datetime.date` object, ensuring type compatibility for date operations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfields.Date.to_date(self._context.get('date_from'))\n```\n\n----------------------------------------\n\nTITLE: Defining Odoo Test Classes with Tags (Python)\nDESCRIPTION: Illustrates how to define Odoo test classes using `odoo.tests.common.TransactionCase` and the `@tagged` decorator from `odoo.tests`. The `@tagged` decorator controls when tests run in the CI: `post_install` runs tests after all modules are installed, while `at_install` (the default, implicitly present if not removed) runs tests immediately after the defining module is installed. This allows for better control over test execution timing based on dependencies and potential interactions between modules.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/unit_tests.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo.tests.common import TransactionCase\nfrom odoo.tests import tagged\n\n# The CI will run these tests after all the modules are installed,\n# not right after installing the one defining it.\n@tagged('post_install', '-at_install')  # add `post_install` and remove `at_install`\nclass PostInstallTestCase(TransactionCase):\n    def test_01(self):\n        ...\n\n@tagged('at_install')  # this is the default\nclass AtInstallTestCase(TransactionCase):\n    def test_01(self):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Basic Kanban View Structure in Odoo\nDESCRIPTION: This XML snippet shows the basic structure of a kanban view in Odoo. Kanban views display records as cards and can be used for workflow visualization or simply to display records in a card format.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_69\n\nLANGUAGE: xml\nCODE:\n```\n<kanban>\n    ...\n</kanban>\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Field Values in Odoo Frontend QWeb Templates\nDESCRIPTION: Illustrates how to display the value of a custom field (`x_post_category`) on an Odoo website frontend page using QWeb templating (typically within a `views/website_blog_templates.xml` file). The `t-field` attribute is used within an HTML tag (e.g., `<h1>`) to dynamically render the field's content associated with the current record variable (e.g., `blog_post`). It accesses the field using `blog_post.x_post_category`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<h1 t-field=\"blog_post.x_post_category\"/>\n```\n\n----------------------------------------\n\nTITLE: Searching and Reading Records with search_read via XML-RPC in Python\nDESCRIPTION: This Python snippet demonstrates searching for companies and retrieving selected fields ('name', 'country_id', 'comment') with a limit of five records using 'search_read'. Arguments specify a domain filter, fields to return, and limit; result is a list of dictionaries. Requires a previously authenticated models proxy.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'search_read', [[['is_company', '=', True]]], {'fields': ['name', 'country_id', 'comment'], 'limit': 5})\n```\n\n----------------------------------------\n\nTITLE: Defining a URL Route with Model Converter in Odoo Python Controller\nDESCRIPTION: This snippet demonstrates the use of the 'model' converter in Odoo routes. It fetches a teacher record directly and renders a template with the teacher data.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@http.route('/academy/<model(\"academy.teachers\"):teacher>/', auth='public', website=True)\ndef teacher(self, teacher):\n    return http.request.render('academy.biography', {\n        'person': teacher\n    })\n```\n\n----------------------------------------\n\nTITLE: Defining a Python Constraint in Odoo using @api.constrains\nDESCRIPTION: Example of an Odoo Python constraint defined using the `@api.constrains` decorator, monitoring the 'date_end' field. The `_check_date_end` method iterates over the recordset (`self`) and raises a `ValidationError` from `odoo.exceptions` with a specific message if any record's `date_end` is earlier than the current date obtained via `fields.Date.today()`. This ensures that the end date is always set in the future.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/10_constraints.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo.exceptions import ValidationError\n\n...\n\n@api.constrains('date_end')\ndef _check_date_end(self):\n    for record in self:\n        if record.date_end < fields.Date.today():\n            raise ValidationError(\"The end date cannot be set in the past\")\n    # all records passed the test, don't return anything\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using a Custom JavaScript Class - JavaScript\nDESCRIPTION: Shows how to instantiate an Odoo web custom class and call its methods. The object receives properties after instantiation, which can be used within its methods via 'this'. Demonstrates typical usage and method invocation in Odoo's JavaScript environment.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar my_object = new MyClass();\nmy_object.say_hello();\n// print \"hello\" in the console\n```\n\n----------------------------------------\n\nTITLE: Minimal QWeb Template for Property Offers PDF Report (XML)\nDESCRIPTION: Presents a minimal QWeb template for generating a PDF report listing offers for properties in the 'estate' module. This XML template defines a unique ID (`report_property_offers`), iterates over the provided property records (`docs`), uses standard Odoo report layouts (`web.html_container`, `web.external_layout`), displays property name and expected price, and dynamically generates an HTML table listing the prices of associated offers (`offer_ids`) using QWeb directives like `t-foreach`, `t-as`, and `t-set`. It also utilizes Bootstrap CSS classes (`class=\"table\"`) for styling.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/pdf_reports.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<odoo>\n    <template id=\"report_property_offers\">\n        <t t-foreach=\"docs\" t-as=\"property\">\n            <t t-call=\"web.html_container\">\n                <t t-call=\"web.external_layout\">\n                    <div class=\"page\">\n                        <h2>\n                            <span t-field=\"property.name\"/>\n                        </h2>\n                        <div>\n                            <strong>Expected Price: </strong>\n                            <span t-field=\"property.expected_price\"/>\n                        </div>\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>Price</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <t t-set=\"offers\" t-value=\"property.mapped('offer_ids')\"/>\n                                <tr t-foreach=\"offers\" t-as=\"offer\">\n                                    <td>\n                                        <span t-field=\"offer.price\"/>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </t>\n            </t>\n        </t>\n    </template>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Defining Odoo Notebook Pages using Props in JavaScript and XML\nDESCRIPTION: This snippet demonstrates defining pages for the Odoo `Notebook` component programmatically using the `pages` prop. A reusable `MyTemplateComponent` is defined for page content. The main component `MyComponent` passes an array of page configurations (including the component to use, title, ID, and specific props) to the `Notebook` component via the `pages` getter. This approach is useful for dynamic page generation or when pages share a common structure.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, xml } from \"@odoo/owl\";\nimport { Notebook } from \"@web/core/notebook/notebook\";\n\nclass MyTemplateComponent extends Component {\n  static template = xml`\n    <h1 t-esc=\"props.title\" />\n    <p t-esc=\"props.text\" />\n  `;\n}\n\nclass MyComponent extends Component {\n  static template = xml`\n    <Notebook defaultPage=\"'page_2'\" pages=\"pages\" />\n  `;\n\n  get pages() {\n    return [\n      {\n        Component: MyTemplateComponent,\n        title: \"Page 1\",\n        props: {\n          title: \"My First Page\",\n          text: \"This page is not visible\",\n        },\n      },\n      {\n        Component: MyTemplateComponent,\n        id: \"page_2\",\n        title: \"Page 2\",\n        props: {\n          title: \"My second page\",\n          text: \"You're at the right place!\",\n        },\n      },\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Record Rules in Odoo XML\nDESCRIPTION: Example of a record rule that restricts deletion rights for CRM leads. The rule only allows deletion of leads in the 'cancel' state and applies only to users in the sales manager group.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/backend.rst#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"delete_cancelled_only\" model=\"ir.rule\">\n    <field name=\"name\">Only cancelled leads may be deleted</field>\n    <field name=\"model_id\" ref=\"crm.model_crm_lead\"/>\n    <field name=\"groups\" eval=\"[(4, ref('sales_team.group_sale_manager'))]\"/>\n    <field name=\"perm_read\" eval=\"0\"/>\n    <field name=\"perm_write\" eval=\"0\"/>\n    <field name=\"perm_create\" eval=\"0\"/>\n    <field name=\"perm_unlink\" eval=\"1\" />\n    <field name=\"domain_force\">[('state','=','cancel')]</field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Customizing Field Search Behavior in Odoo Search View using XML\nDESCRIPTION: This XML snippet illustrates how to customize the search behavior for a specific field in an Odoo search view. The `filter_domain` attribute on the `description` field overrides the default search logic. Instead of only searching the `description` field, it generates a domain that performs an 'ilike' (case-insensitive contains) search on both the `name` and `description` fields using the value entered by the user (`self`). The `string` attribute provides a user-friendly label for this combined search.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<search string=\"Test\">\n    <field name=\"description\" string=\"Name and description\"\n           filter_domain=\"['|', ('name', 'ilike', self), ('description', 'ilike', self)]\"/>\n</search>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Text Field Component in Odoo Owl (JavaScript)\nDESCRIPTION: This snippet defines a new Odoo Owl component, 'MyTextField', for rendering a single-line text input styled as red ('text-danger'). It uses the imported 'standardFieldProps' for compatibility with Odoo's view mechanisms. The component accepts typical field props and supports the 'char' type. The 'onChange' handler is provided to propagate value changes via the props' update method. Expected usage is for fields of type 'char' where the value should be displayed in red.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_field.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { standardFieldProps } from \"@web/views/fields/standard_field_props\";\nimport { Component, xml } from \"@odoo/owl\";\nimport { registry } from \"@web/core/registry\";\n\nexport class MyTextField extends Component {\n   static template = xml`\n      <input t-att-id=\\\"props.id\\\" class=\\\"text-danger\\\" t-att-value=\\\"props.value\\\" onChange.bind=\\\"onChange\\\" />\n   `;\n   static props = { ...standardFieldProps };\n   static supportedTypes = [\"char\"];\n\n   /**\n   * @param {boolean} newValue\n   */\n   onChange(newValue) {\n      this.props.update(newValue);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ORM Service in JavaScript\nDESCRIPTION: Example showing how to implement and register a basic ORM service that provides database operations like read, write and unlink.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\nexport const OrmService = {\n    start() {\n        return {\n            read(...) { ... },\n            write(...) { ... },\n            unlink(...) { ... },\n            ...\n        }\n    },\n};\nregistry.category(\"services\").add(\"orm\", OrmService);\n```\n\n----------------------------------------\n\nTITLE: Structuring Nested Groups and Fields in Odoo Form View - XML\nDESCRIPTION: This snippet shows a typical structure where groups are nested within a form layout. Groups are used to organize fields for better readability, commonly specifying column counts or additional attributes for layout control. Each group or subgroup helps in achieving multi-column forms in Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<form>\\n    <group>\\n        ...\\n    </group>\\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectMenu Component in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement a SelectMenu component in JavaScript using Odoo OWL. It shows the component structure, template definition, and data preparation for choices and groups.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, xml } from \"@odoo/owl\";\nimport { SelectMenu } from \"@web/core/select_menu/select_menu\";\n\nclass MyComponent extends Component {\n  static template = xml`\n    <SelectMenu\n      choices=\"choices\"\n      groups=\"groups\"\n      value=\"'value_2'\"\n    />\n  `;\n\n  get choices() {\n    return [\n        {\n          value: \"value_1\",\n          label: \"First value\"\n        }\n    ]\n  }\n  get groups() {\n    return [\n      {\n          label: \"Group A\",\n          choices: [\n              {\n                value: \"value_2\",\n                label: \"Second value\"\n              },\n              {\n                value: \"value_3\",\n                label: \"Third value\"\n              }\n          ]\n      },\n      {\n          label: \"Group B\",\n          choices: [\n              {\n                value: \"value_4\",\n                label: \"Fourth value\"\n              }\n          ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining Odoo Test Database via XML-RPC - Java (Apache XML-RPC)\nDESCRIPTION: Requests demo instance parameters from Odoo demo server in Java using the Apache XML-RPC library. Builds a server URL config, executes the 'start' call, and parses the resulting Map for connection details. The snippet omits imports for brevity.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nfinal XmlRpcClient client = new XmlRpcClient();\\n\\nfinal XmlRpcClientConfigImpl start_config = new XmlRpcClientConfigImpl();\\nstart_config.setServerURL(new URL(\"https://demo.odoo.com/start\"));\\nfinal Map<String, String> info = (Map<String, String>)client.execute(\\n    start_config, \"start\", emptyList());\\n\\nfinal String url = info.get(\"host\"),\\n              db = info.get(\"database\"),\\n        username = info.get(\"user\"),\\n        password = info.get(\"password\");\n```\n\n----------------------------------------\n\nTITLE: Using the Odoo Pager Component in XML\nDESCRIPTION: This XML snippet shows a basic implementation of the Odoo `Pager` component. It's configured with an initial `offset` (starting index), `limit` (items per page), and `total` number of items. The `onUpdate` prop specifies a function to be called when the user navigates between pages, allowing the parent component to react and fetch/display the correct data.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<Pager offset=\"0\" limit=\"80\" total=\"50\" onUpdate=\"doSomething\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Date-Based Filters in Odoo XML View\nDESCRIPTION: This XML example shows how to create a set of pre-defined, time-dependent filters for a specific date or datetime field (`create_date`) using the `date` attribute within a `<filter>` tag in an Odoo search view. This automatically generates sub-filters (e.g., by month, quarter, year) accessible through a dropdown menu under 'Filters'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_51\n\nLANGUAGE: xml\nCODE:\n```\n<filter string=\"Creation Date\" name=\"filter_create_date\" date=\"create_date\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Updatable Odoo Record in XML\nDESCRIPTION: Shows how to define an Odoo record in XML using the `noupdate=\"1\"` attribute on the `<odoo>` tag. This flag ensures that the specified record (`id1` for `model`) will be created if it doesn't exist, but it will not be updated during subsequent module upgrades. This is typically used for configuration data that users might customize.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/define_module_data.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<odoo noupdate=\"1\">\n  <record id=\"id1\" model=\"model\">\n    <field name=\"fieldA\" eval=\"True\"/>\n  </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Querying Models Using the Odoo Environment (Python REPL)\nDESCRIPTION: This snippet shows how to use the current environment (`self.env`) to access another model (`res.partner`) to get an empty recordset, and then perform a search on that model using a domain. The result is a recordset containing `res.partner` records matching the criteria. This interaction typically occurs within a Python REPL or debugging session.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n>>> self.env['res.partner']\nres.partner()\n>>> self.env['res.partner'].search([('is_company', '=', True), ('customer', '=', True)])\nres.partner(7, 18, 12, 14, 17, 19, 8, 31, 26, 16, 13, 20, 30, 22, 29, 15, 23, 28, 74)\n```\n\n----------------------------------------\n\nTITLE: Iterating with t-foreach and t-as in QWeb XML Templates\nDESCRIPTION: Shows how to iterate over a list using t-foreach with t-as to define a scoped variable for each iteration. The snippet produces a <p> element for each item in the list [1, 2, 3], injecting the current item value with t-out. This is a core pattern for rendering repeated structures in QWeb. The expression for t-foreach can be a list, mapping, or integer.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<t t-foreach=\"[1, 2, 3]\" t-as=\"i\">\n    <p><t t-out=\"i\"/></p>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering an Owl Component in JavaScript (Odoo)\nDESCRIPTION: Creates a basic Owl component class 'YourComponent' in JavaScript, extending `owl.Component`. It links to the previously defined XML template ('your_module.YourComponent') via the static `template` property and defines empty props. The component is then registered in Odoo's `public_components` registry under the name 'your_module.YourComponent', making it available for use in the frontend. This file should be placed alongside its template (e.g., `/your_module/static/src/portal_component/your_component.js`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/frontend_owl_components.rst#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Component } from \"@odoo/owl\";\nimport { registry } from \"@web/core/registry\"\n\nexport class YourComponent extends Component {\n    static template = \"your_module.YourComponent\";\n    static props = {};\n}\n\nregistry.category(\"public_components\").add(\"your_module.YourComponent\", YourComponent);\n```\n\n----------------------------------------\n\nTITLE: Appending Content Inside a Notebook Node – Odoo XML\nDESCRIPTION: This XML snippet demonstrates how to use the position=\\\"inside\\\" attribute in Odoo view inheritance. This attribute appends the content of the inheritance specification (in this case, a new page tab) inside the matched <notebook> node. The snippet requires familiarity with Odoo's view inheritance system and expects an existing notebook node in the target view. It modifies the structure by directly including child nodes within the matched element.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_records.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<notebook position=\\\"inside\\\">\\n    <page string=\\\"New feature\\\">\\n        ...\\n    </page>\\n</notebook>\n```\n\n----------------------------------------\n\nTITLE: Debugging Security Flow with Print Statement in Odoo Python Method\nDESCRIPTION: This Python code snippet demonstrates adding a print statement within the action_sold method of an Odoo model (estate_account). The print is strategically placed before an operation (such as invoice creation) that may trigger an access control error, providing a clear marker in server logs for debugging. No special libraries are needed, but the code should be inserted within an Odoo model method; it outputs to server logs and may be removed after debugging is complete.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/restrict_data_access.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(\" reached \".center(100, '='))\n```\n\n----------------------------------------\n\nTITLE: Creating a Persistent State Service - Odoo Owl Framework - JavaScript\nDESCRIPTION: This snippet registers a custom stateful service in Odoo using Owl, providing getValue and setValue functions for component-wide state sharing. Dependency: '@web/core/registry'. The service exposes a returned object with methods for accessing and mutating internal state. Components retrieve values via useService('shared_state'). No hard constraints, though state isn't persisted across reloads.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/discover_js_framework/02_build_a_dashboard.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\n\nconst sharedStateService = {\n    start(env) {\n        let state = {};\n        return {\n            getValue(key) {\n                return state[key];\n            },\n            setValue(key, value) {\n                state[key] = value;\n            },\n        };\n    },\n};\n\nregistry.category(\"services\").add(\"shared_state\", sharedStateService);\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Computed Field in Odoo (Python)\nDESCRIPTION: Shows how to define a field whose value is calculated rather than stored directly in the database. The `compute` parameter specifies the method (`_compute_total`) that performs the calculation. The `@api.depends` decorator lists the fields ('value', 'tax') that trigger a recomputation when their values change. The compute method must assign the calculated value to the field on each record.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import api\ntotal = fields.Float(compute='_compute_total')\n\n@api.depends('value', 'tax')\ndef _compute_total(self):\n    for record in self:\n        record.total = record.value + record.value * record.tax\n```\n\n----------------------------------------\n\nTITLE: Defining a Computed Field with Inverse Function in Odoo - Python\nDESCRIPTION: This code snippet extends the computed field example by making it writable through an inverse method. The 'total' field is given both compute and inverse methods, which enable setting 'total' directly and automatically updating the dependent field 'amount'. Requires Odoo's api module, a correct field declaration, and compliance with Odoo recordset semantics. Inputs: modification of either 'total' or 'amount'; outputs: both fields maintained in sync. The inverse method is invoked when a field's value is manually set and record is saved.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/08_compute_onchange.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import api, fields, models\n\nclass TestComputed(models.Model):\n    _name = \"test.computed\"\n\n    total = fields.Float(compute=\"_compute_total\", inverse=\"_inverse_total\")\n    amount = fields.Float()\n\n    @api.depends(\"amount\")\n    def _compute_total(self):\n        for record in self:\n            record.total = 2.0 * record.amount\n\n    def _inverse_total(self):\n        for record in self:\n            record.amount = record.total / 2.0\n```\n\n----------------------------------------\n\nTITLE: Multi-Attribute Assignment with t-att for Mapping in QWeb XML\nDESCRIPTION: Demonstrates the use of t-att with a mapping expression in QWeb XML, where each key/value pair is rendered as an attribute and its value on the element. Passing a dictionary (e.g., {'a': 1, 'b': 2}) dynamically sets both 'a' and 'b' attributes. Useful for conditional or computed multi-attribute output.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<div t-att=\"{'a': 1, 'b': 2}\"/>\n```\n\n----------------------------------------\n\nTITLE: Declaring the Root Owl Component - Owl Framework - JavaScript\nDESCRIPTION: This JavaScript snippet declares a minimal Owl component class called 'Root'. It specifies its associated QWeb template and does not take any properties. This class should be stored in your module's static source directory as 'root.js', and is essential for the main app to render UI. The only dependency is the '@odoo/owl' library for the base Component.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/standalone_owl_application.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from \\\"@odoo/owl\\\";\\n\\nexport class Root extends Component {\\n    static template = \\\"your_module.Root\\\";\\n    static props = {};\\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Message of the Day Widget\nDESCRIPTION: Defines the styling for the Message of the Day widget in the pet store application, giving it margin, padding, rounded corners, and a light gray background.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_36\n\nLANGUAGE: css\nCODE:\n```\n.oe_petstore_motd {\n    margin: 5px;\n    padding: 5px;\n    border-radius: 3px;\n    background-color: #F0EEEE;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Searchable Computed Field in Odoo (Python)\nDESCRIPTION: Demonstrates how to enable searching on a computed field. The `search` parameter is set to the name of a method (`_search_upper`) which implements the search logic. This method receives the operator and value from the search domain and must return a valid Odoo domain targeting storable fields to fulfill the search condition.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nupper_name = field.Char(compute='_compute_upper', search='_search_upper')\n\ndef _search_upper(self, operator, value):\n    if operator == 'like':\n        operator = 'ilike'\n    return [('name', operator, value)]\n```\n\n----------------------------------------\n\nTITLE: Making RPC Calls with the RPC Service - Odoo Owl Framework - JavaScript\nDESCRIPTION: Demonstrates how to call Odoo server controllers from a component using the rpc service and the onWillStart lifecycle hook. Requires: '@web/core/utils/hooks' and a registered rpc service. Inputs are route, params, and optional settings; output is a promise resolving with server data. Useful for loading dashboard statistics. Called inside onWillStart to ensure data is fetched before render.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/discover_js_framework/02_build_a_dashboard.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsetup() {\n      this.rpc = useService(\"rpc\");\n      onWillStart(async () => {\n         const result = await this.rpc(\"/my/controller\", {a: 1, b: 2});\n         // ...\n      });\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Service in the Odoo JavaScript Service Registry\nDESCRIPTION: This code snippet shows how to define a custom service object and add it to the 'services' registry in Odoo. The service object should specify its dependencies and a start method for initialization. Requires @web/core/registry; expected parameters include the service key ('myService') and an object with a dependencies array and a start() function. Used to activate new or customized web-client services; entries must define necessary lifecycle hooks.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/registries.rst#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\n\nconst myService = {\n    dependencies: [...],\n    start(env, deps) {\n        // some code here\n    }\n};\n\nregistry.category(\"services\").add(\"myService\", myService);\n```\n\n----------------------------------------\n\nTITLE: Embedding ActionSwiper for Actionable Swiping in Owl Templates (XML)\nDESCRIPTION: This XML snippet shows the usage of the ActionSwiper Owl component in a template, wrapping another element to enable left- and right-swipe actions. It defines onLeftSwipe and onRightSwipe properties as JavaScript object literals, each specifying an action callback, icon class, and Bootstrap background color. Required: that ActionSwiper and child components are available, and callback functions exist. Input: user swipe gesture; output: invocation of the provided actions. Useful for list item interactions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<ActionSwiper onLeftSwipe=\"Object\" onRightSwipe=\"Object\">\n  <SomeElement/>\n</ActionSwiper>\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries in Odoo (Python)\nDESCRIPTION: This Python code demonstrates executing a raw SQL query directly against the database using the cursor (`cr`) available on the Odoo environment (`self.env`). The `execute` method takes the SQL string and optional parameters to prevent SQL injection. Executing raw SQL bypasses the ORM and security rules, so it should be used cautiously.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nself.env.cr.execute(\"some_sql\", params)\n```\n\n----------------------------------------\n\nTITLE: Rendering QWeb Templates with QWeb2.Engine.render in JavaScript\nDESCRIPTION: Explains the `render` method of the `QWeb2.Engine`. This function takes the name of a previously loaded template and an optional context object containing variables. It processes the template and returns the resulting HTML as a string. No external dependencies beyond a loaded QWeb2.Engine instance are required.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nQWeb2.Engine.render(template[, context])\n```\n\n----------------------------------------\n\nTITLE: Setting Variables with t-set and t-value in QWeb XML Templates\nDESCRIPTION: Shows how to declare a variable with t-set and assign a value using t-value in QWeb XML templates. The variable can be referenced later, e.g., via t-out. This pattern enables intermediate computations or reusable expressions in templates. All assignments are scoped per QWeb context, and variables can be used for output or logic.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\"foo\" t-value=\"2 + 1\"/>\n<t t-out=\"foo\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Notification Action Button by Overriding _notify_get_groups (Odoo Python)\nDESCRIPTION: Extends the BusinessTrip Odoo model to provide custom notification actions to users belonging to a specified group via the _notify_get_groups method. Defines an action_cancel method and uses the notification system to selectively add a 'Cancel' button to email notifications, visible only for users in the 'business.group_trip_manager' group when the state is 'confirmed'. Requires the model to inherit from both mail.thread and mail.alias.mixin, and utilizes Odoo's group membership and notification template features.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/mixins.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nclass BusinessTrip(models.Model):\\n    _name = 'business.trip'\\n    _inherit = ['mail.thread', 'mail.alias.mixin']\\n    _description = 'Business Trip'\\n\\n    # Pevious code goes here\\n\\n    def action_cancel(self):\\n        self.write({'state': 'draft'})\\n\\n    def _notify_get_groups(self, message, groups):\\n        \\\"\\\"\\\" Handle Trip Manager recipients that can cancel the trip at the last\\n        minute and kill all the fun. \\\"\\\"\\\"\\n        groups = super(BusinessTrip, self)._notify_get_groups(message, groups)\\n\\n        self.ensure_one()\\n        if self.state == 'confirmed':\\n            app_action = self._notify_get_action_link('method',\\n                                    method='action_cancel')\\n            trip_actions = [{'url': app_action, 'title': _('Cancel')}]\\n\\n        new_group = (\\n            'group_trip_manager',\\n            lambda partner: any(\\n                user.sudo().has_group('business.group_trip_manager')\\n                for user in partner.user_ids\\n            ),\\n            {'actions': trip_actions},\\n        )\\n\\n        return [new_group] + groups\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Odoo Model and Field via API in Ruby\nDESCRIPTION: Demonstrates using the Odoo Web Services API (`execute_kw`) in Ruby to programmatically create a new model ('x_custom'), add a custom required character field ('x_name') to it, create a record within this new model, and finally read the created record. Both the model and the field are created with `state: 'manual'` to ensure they are activated.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nid = models.execute_kw(db, uid, password, 'ir.model', 'create', [{\n    name: \"Custom Model\",\n    model: \"x_custom\",\n    state: 'manual'\n}])\nmodels.execute_kw(db, uid, password, 'ir.model.fields', 'create', [{\n    model_id: id,\n    name: \"x_name\",\n    ttype: \"char\",\n    state: \"manual\",\n    required: true\n}])\nrecord_id = models.execute_kw(db, uid, password, 'x_custom', 'create', [{x_name: \"test record\"}])\nmodels.execute_kw(db, uid, password, 'x_custom', 'read', [[record_id]])\n```\n\n----------------------------------------\n\nTITLE: Defining Python Expression in View Attributes (XML)\nDESCRIPTION: Example of using Python expressions in view attributes like 'readonly' and 'invisible'. It demonstrates accessing field values, context, and parent record data.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"field_a\" readonly=\"True\"/>\n<field name=\"field_b\" invisible=\"context.get('show_me') and field_a == 4\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"field_a\"/>\n<field name=\"x2m\">\n    <!-- sub-view -->\n    <form>\n        <field name=\"field_b\" invisible=\"parent.field_a\"/>\n    </form>\n</field>\n```\n\n----------------------------------------\n\nTITLE: Iterating Over an Odoo Recordset in Python\nDESCRIPTION: This snippet demonstrates iterating over an Odoo recordset (`self`). The `for` loop yields singleton recordsets, where each `record` variable holds a recordset containing exactly one record from the original set during each iteration.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n    def do_operation(self):\n        print(self) # => a.model(1, 2, 3, 4, 5)\n        for record in self:\n            print(record) # => a.model(1), then a.model(2), then a.model(3), ...\n```\n\n----------------------------------------\n\nTITLE: Defining and Extending Academy Courses - Odoo Model in Python\nDESCRIPTION: This snippet introduces an Odoo model named 'academy.courses' that inherits from both mail.thread and product.template, allowing courses to function as products and leverage discussion features. Required dependencies include the Odoo ORM and its model/field system. The model contains a name field and a many-to-one relation to a teacher; expected to be used for linking courses with responsible staff in the Academy module.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nclass Courses(models.Model):\n    _name = 'academy.courses'\n    _inherit = ['mail.thread', 'product.template']\n\n    name = fields.Char()\n    teacher_id = fields.Many2one('academy.teachers', string=\"Teacher\")\n```\n\n----------------------------------------\n\nTITLE: Importing Utilities using @web Prefix in Odoo Javascript\nDESCRIPTION: Demonstrates importing the `memoize` utility function from the `@web/core/utils/functions` path within the Odoo JavaScript framework. This utilizes the `@web` alias which maps to the `web/static/src` directory.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/framework_overview.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { memoize } from \"@web/core/utils/functions\";\n```\n\n----------------------------------------\n\nTITLE: Rendering QWeb Templates in Odoo HTTP Controllers - Python\nDESCRIPTION: Demonstrates how to render QWeb templates from an Odoo HTTP controller using http.request.render. Input includes template name and template context values as a dictionary; output is an odoo.http.Response containing the rendered view. Requires the http object from odoo.http and appropriate access to template identifiers. The method is called during a web request to display a view.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nresponse = http.request.render('my-template', {\n    'context_value': 42\n})\n```\n\n----------------------------------------\n\nTITLE: Signaling Failure by Returning a Structured Object/Array (JavaScript)\nDESCRIPTION: Shows two alternative patterns for functions needing to return `null` or `undefined` as valid results. Instead of throwing errors on failure, the function returns either a structured object (e.g., `{ val, err }`) or a two-element array (e.g., `[err, val]`). The caller destructures the result and checks the `err` property/element to determine success or failure. The array pattern suggests placing the error first to make it harder to ignore.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/error_handling.rst#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { val: someVal, err } = someFunction();\nif (err) {\n  return;\n}\n// do something with someVal as it is known to be valid\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst [err, someVal] = someFunction();\nif (err) {\n  return;\n}\n// do something with someVal as it is known to be valid\n```\n\n----------------------------------------\n\nTITLE: Defining a Computed Field Equivalent to a Related Field in Odoo using Python\nDESCRIPTION: This Python code provides the equivalent implementation of a `related` field using a standard computed field. The `description` field is defined as a `Char` field with a `compute` method specified (`_compute_description`). The `@api.depends('partner_id.name')` decorator ensures the `_compute_description` method is called whenever the `name` field of the related `partner_id` changes. The method then iterates through the records (`self`) and sets the `description` field's value to the partner's name.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n    ...\n\n    partner_id = fields.Many2one(\"res.partner\", string=\"Partner\")\n    description = fields.Char(compute=\"_compute_description\")\n\n    @api.depends(\"partner_id.name\")\n    def _compute_description(self):\n        for record in self:\n            record.description = record.partner_id.name\n```\n\n----------------------------------------\n\nTITLE: Configuring Search View in Odoo XML\nDESCRIPTION: Example of a search view with custom field filters and grouping options. Includes a custom domain filter for searching across multiple fields, a filter for 'My Ideas', and grouping by inventor.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/backend.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<search string=\"Ideas\">\n    <field name=\"name\"/>\n    <field name=\"description\" string=\"Name and description\"\n           filter_domain=\"['|', ('name', 'ilike', self), ('description', 'ilike', self)]\"/>\n    <field name=\"inventor_id\"/>\n    <field name=\"country_id\" widget=\"selection\"/>\n\n    <filter name=\"my_ideas\" string=\"My Ideas\"\n            domain=\"[('inventor_id', '=', uid)]\"/>\n    <group string=\"Group By\">\n        <filter name=\"group_by_inventor\" string=\"Inventor\"\n                context=\"{'group_by': 'inventor_id'}\"/>\n    </group>\n</search>\n```\n\n----------------------------------------\n\nTITLE: Safely Catching Specific Errors with try...catch (JavaScript)\nDESCRIPTION: Illustrates the recommended practice for catching specific, expected errors. The `try` block contains only the single statement expected to potentially throw (`someFunction()`). The `catch` block checks if the caught error `e` is an instance of the expected `MyError` type. If not, the error is re-thrown to avoid swallowing unexpected errors. This pattern keeps the try block minimal and ensures only intended errors are handled.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/error_handling.rst#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet someVal;\ntry {\n  someVal = someFunction();\n  // do not start working with someVal here.\n} catch (e) {\n  if (!(e instanceof MyError)) {\n    throw e;\n  }\n  someVal = null;\n}\n// start working with someVal here\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Events with useBus Hook in Owl - JavaScript\nDESCRIPTION: This snippet illustrates the use of the useBus hook to listen to and clean up EventBus-driven events in an Owl component. By importing useBus from \"@web/core/utils/hooks\" and calling it within the setup method, the component subscribes to \"some-event\" from the provided environment bus, logging received events. The hook handles automatic unsubscription to prevent memory leaks. Dependencies are EventBus and the existence of this.env.bus (Odoo UI runtime). Parameters include bus instance, event name, and callback.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/hooks.rst#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useBus } from \"@web/core/utils/hooks\";\n\nclass MyComponent {\n  setup() {\n    useBus(this.env.bus, \"some-event\", event => {\n      console.log(event);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Transpiled Odoo Module from Native JS\nDESCRIPTION: Displays the Odoo custom module format generated by transpiling the native JavaScript module from `file_a.js`. The code is wrapped in `odoo.define`, dependencies are listed (using the Odoo module naming convention like `@web/file_b`), and import/export statements are converted to use `require` and assign to `__exports`. The module is automatically named based on its path (`@web/file_a`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_modules.rst#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n odoo.define('@web/file_a', ['@web/file_b'], function (require) {\n 'use strict';\n let __exports = {};\n\n const { someFunction } = require(\"@web/file_b\");\n\n __exports.otherFunction = function otherFunction(val) {\n    return someFunction(val + 3);\n };\n\n return __exports;\n )};\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Toggling Custom Filters in SearchModel - Odoo Web Framework - JavaScript\nDESCRIPTION: This JavaScript snippet retrieves all search items (filters) from the Odoo search model that have the custom property 'isFromAwesomeKanban' set to true. It then iterates through these filters, checking for active state, and toggles each to ensure only one is active at a time. This logic is crucial for replacing old customer filters when a new customer is selected from the sidebar, thus preventing stacking of redundant filters. Requires access to the environment's 'searchModel' object and assumes filters are identifiable by ID.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/master_odoo_web_framework/03_customize_kanban_view.rst#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst customerFilters = this.env.searchModel.getSearchItems((searchItem) =>\n      searchItem.isFromAwesomeKanban\n);\n\nfor (const customerFilter of customerFilters) {\n   if (customerFilter.isActive) {\n         this.env.searchModel.toggleSearchItem(customerFilter.id);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending BooleanField Component in Odoo Owl (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a custom boolean field widget by subclassing the existing BooleanField component within Odoo's Owl framework. It sets a new template for the custom field by specifying a static template reference. Dependencies include @web/core/registry, @web/views/fields/boolean/boolean_field, @odoo/owl, and a suitable registry setup. The entry point for this modification is the 'LateOrderBooleanField' class, which will be registered for use through the widget registry.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_field.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\nimport { BooleanField } from \"@web/views/fields/boolean/boolean_field\";\nimport { Component, xml } from \"@odoo/owl\";\n\nclass LateOrderBooleanField extends BooleanField {\n   static template = \"my_module.LateOrderBooleanField\";\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Text Field Component in Odoo (JavaScript)\nDESCRIPTION: This snippet registers the 'MyTextField' component with the Odoo fields registry under the widget name 'my_text_field'. This enables the new field type to be referenced in XML views. This step is mandatory for Odoo's runtime to map view XML to the JavaScript component. Prerequisites: 'MyTextField' must be declared and imported prior to registration.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_field.rst#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nregistry.category(\"fields\").add(\"my_text_field\", MyTextField);\n```\n\n----------------------------------------\n\nTITLE: Updating and Replacing URL State with Odoo Router Service (JavaScript)\nDESCRIPTION: This pair of routerService method calls shows how to update and replace the URL's hash parameters using the Odoo router service in JavaScript. The first call appends a new key/value (menu_id) while retaining others; the second call demonstrates replacing all hash state with a new key (yipyip) and clears the rest. Dependencies are the Odoo router service and a proper frontend environment. Input parameters specify the hash object and whether to replace the state; effects are visible in the URL without reloading the page.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/services.rst#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n  // url = /web#action_id=123\n  routerService.pushState({ menu_id: 321 });\n  // url is now /web#action_id=123&menu_id=321\n  routerService.pushState({ yipyip: \"\" }, replace: true);\n  // url is now /web#yipyip\n```\n\n----------------------------------------\n\nTITLE: Focusing an Input using useAutofocus Hook in Owl - JavaScript\nDESCRIPTION: This snippet demonstrates how to import and use the useAutofocus hook from \"@web/core/utils/hooks\" in a JavaScript class component. The useAutofocus hook returns an element ref that should be assigned to an input or relevant UI element so that it's automatically focused as soon as it's mounted in the DOM. It requires Owl as a dependency and the component template should reference \"autofocus\". The setup method stores the ref and the static template links it for rendering. The hook only works if the input was not already displayed.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/hooks.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAutofocus } from \"@web/core/utils/hooks\";\n\nclass Comp {\n  setup() {\n    this.inputRef = useAutofocus();\n  }\n  static template = \"Comp\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Views and Menu Items for Courses in Odoo (XML)\nDESCRIPTION: This XML snippet defines the user interface components for the 'academy.courses' model. It includes a window action to open the courses view, search view definitions for filtering courses by name or teacher, a list view displaying course name and teacher, a form view for editing details, and menu items to make the Courses accessible from the Academy menu.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"action_academy_courses\" model=\"ir.actions.act_window\">\n    <field name=\"name\">Academy courses</field>\n    <field name=\"res_model\">academy.courses</field>\n</record>\n<record id=\"academy_course_search\" model=\"ir.ui.view\">\n    <field name=\"name\">Academy courses: search</field>\n    <field name=\"model\">academy.courses</field>\n    <field name=\"arch\" type=\"xml\">\n        <search>\n            <field name=\"name\"/>\n            <field name=\"teacher_id\"/>\n        </search>\n    </field>\n</record>\n<record id=\"academy_course_list\" model=\"ir.ui.view\">\n    <field name=\"name\">Academy courses: list</field>\n    <field name=\"model\">academy.courses</field>\n    <field name=\"arch\" type=\"xml\">\n        <list string=\"Courses\">\n            <field name=\"name\"/>\n            <field name=\"teacher_id\"/>\n        </list>\n    </field>\n</record>\n<record id=\"academy_course_form\" model=\"ir.ui.view\">\n    <field name=\"name\">Academy courses: form</field>\n    <field name=\"model\">academy.courses</field>\n    <field name=\"arch\" type=\"xml\">\n        <form>\n            <sheet>\n                <field name=\"name\"/>\n                <field name=\"teacher_id\"/>\n            </sheet>\n        </form>\n    </field>\n</record>\n\n<menuitem sequence=\"0\" id=\"menu_academy\" name=\"Academy\"/>\n<menuitem id=\"menu_academy_content\" parent=\"menu_academy\"\n            name=\"Academy Content\"/>\n<menuitem id=\"menu_academy_content_courses\"\n            parent=\"menu_academy_content\"\n            action=\"action_academy_courses\"/>\n<menuitem id=\"menu_academy_content_teachers\"\n            parent=\"menu_academy_content\"\n            action=\"action_academy_teachers\"/>\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Translation Methods in Odoo\nDESCRIPTION: This snippet shows the proper way to use Odoo's translation method. It provides examples of correct and incorrect ways to translate strings, emphasizing the importance of using literal strings in translation calls and how to properly handle string formatting within translations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n_ = self.env._\n\n# good: plain strings\nerror = _('This record is locked!')\n\n# good: strings with formatting patterns included\nerror = _('Record %s cannot be modified!', record)\n\n# ok too: multi-line literal strings\nerror = _(\"\"\"This is a bad multiline example\n             about record %s!\"\"\", record)\nerror = _('Record %s cannot be modified' \\\n          'after being validated!', record)\n\n# bad: tries to translate after string formatting\n#      (pay attention to brackets!)\n# This does NOT work and messes up the translations!\nerror = _('Record %s cannot be modified!' % record)\n\n# bad: formatting outside of translation\n# This won't benefit from fallback mechanism in case of bad translation\nerror = _('Record %s cannot be modified!') % record\n\n# bad: dynamic string, string concatenation, etc are forbidden!\n# This does NOT work and messes up the translations!\nerror = _(\"'\" + que_rec['question'] + \"' \\n\")\n\n# bad: field values are automatically translated by the framework\n# This is useless and will not work the way you think:\nerror = _(\"Product %s is out of stock!\") % _(product.name)\n# and the following will of course not work as already explained:\nerror = _(\"Product %s is out of stock!\" % product.name)\n\n# Instead you can do the following and everything will be translated,\n# including the product name if its field definition has the\n# translate flag properly set:\nerror = _(\"Product %s is not available!\", product.name)\n```\n\n----------------------------------------\n\nTITLE: Customizing 'Add' Text for One2many Widget in Odoo XML\nDESCRIPTION: Illustrates how to use the `create_text` option within the `options` attribute for the `one2many` widget. This allows overriding the default 'Add' label/text used for the button or link that creates new related records (e.g., displaying 'Add turtle' instead).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_40\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"turtles\" options=\"{'create_text': 'Add turtle'}\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing PetToysList Widget in Odoo JavaScript\nDESCRIPTION: Complete implementation of the Odoo pet store with HomePage, MessageOfTheDay, and PetToysList widgets. The PetToysList widget retrieves and displays pet toys from the product.product model filtered by category.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nodoo.oepetstore = function(instance, local) {\n    var _t = instance.web._t,\n        _lt = instance.web._lt;\n    var QWeb = instance.web.qweb;\n\n    local.HomePage = instance.Widget.extend({\n        template: \"HomePage\",\n        start: function () {\n            return Promise.all([\n                new local.PetToysList(this).appendTo(this.$('.oe_petstore_homepage_left')),\n                new local.MessageOfTheDay(this).appendTo(this.$('.oe_petstore_homepage_right'))\n            ]);\n        }\n    });\n    instance.web.client_actions.add('petstore.homepage', 'instance.oepetstore.HomePage');\n\n    local.MessageOfTheDay = instance.Widget.extend({\n        template: 'MessageOfTheDay',\n        start: function () {\n            var self = this;\n            return new instance.web.Model('oepetstore.message_of_the_day')\n                .query([\"message\"])\n                .order_by('-create_date', '-id')\n                .first()\n                .then(function (result) {\n                    self.$(\".oe_mywidget_message_of_the_day\").text(result.message);\n                });\n        }\n    });\n\n    local.PetToysList = instance.Widget.extend({\n        template: 'PetToysList',\n        start: function () {\n            var self = this;\n            return new instance.web.Model('product.product')\n                .query(['name', 'image'])\n                .filter([['categ_id.name', '=', \"Pet Toys\"]])\n                .limit(5)\n                .all()\n                .then(function (results) {\n                    _(results).each(function (item) {\n                        self.$el.append(QWeb.render('PetToy', {item: item}));\n                    });\n                });\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Owl Component\nDESCRIPTION: Demonstrates how to handle errors in an Owl component using onError hook while still propagating the error to the global error service via a rejected Promise.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/error_handling.rst#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, onError } from \"@odoo/owl\";\nclass MyComponent extends Component {\n  setup() {\n    onError((error) => {\n      // implementation of this method is left as an exercise for the reader\n      this.removeErroringSubcomponent();\n      Promise.reject(error); // create a rejected Promise without passing it anywhere\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CheckBox Component in Owl XML Template (XML)\nDESCRIPTION: This XML code example incorporates the CheckBox Owl component, binding its value and disabled props to variables, and listens for changes via t-on-change. The CheckBox displays a label alongside its clickable box, toggling when either is clicked. Inputs are the 'value' and 'disabled' booleans; output is a changed value reflected in the UI and event callback. Requires the CheckBox component to be available and onValueChange handler to be defined.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<CheckBox value=\"boolean\" disabled=\"boolean\" t-on-change=\"onValueChange\">\n  Some Text\n</CheckBox>\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal QWeb Report Template in XML\nDESCRIPTION: Provides the basic structure for an Odoo QWeb report template. It uses `web.html_container` and loops through `docs` (the records for the report) using `t-foreach`. The `web.external_layout` incorporates default headers/footers, and content within `<div class=\"page\">` forms the body. The template's `id` (e.g., `report_invoice`) must match the name specified in the corresponding report action (e.g., `account.report_invoice`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/reports.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"report_invoice\">\n    <t t-call=\"web.html_container\">\n        <t t-foreach=\"docs\" t-as=\"o\">\n            <t t-call=\"web.external_layout\">\n                <div class=\"page\">\n                    <h2>Report title</h2>\n                    <p>This object's name is <span t-field=\"o.name\"/></p>\n                </div>\n            </t>\n        </t>\n    </t>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Field Widget in Odoo View XML (XML)\nDESCRIPTION: This snippet shows how to utilize the registered field component in the Odoo view definition XML. By specifying the 'widget' attribute on a <field> tag (e.g., 'widget=\"late_boolean\"'), Odoo will render that field using the associated custom component. There are no dependencies beyond having the registry entry and template in place. The field must exist in the related model.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_field.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\\\"somefield\\\" widget=\\\"late_boolean\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-One Relation Field in Odoo XML\nDESCRIPTION: Creates an `ir.model.fields` record in XML to define a many-to-one relational field. This example defines a field named `x_partner_id` on the `real_estate_property` model (referenced by its external ID `estate.model_real_estate_property`), linking it to the `res.partner` model. The field type (`ttype`) is set to `many2one`, and the target model is specified using the `relation` attribute.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/importable_modules.rst#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n    <!-- ...model definition from before... -->\n    <record id=\"field_real_estate_property_partner_id\" model=\"ir.model.fields\">\n        <field name=\"model_id\" ref=\"estate.model_real_estate_property\" />\n        <field name=\"name\">x_partner_id</field>\n        <field name=\"field_description\">Customer</field>\n        <field name=\"ttype\">many2one</field>\n        <field name=\"relation\">res.partner</field>\n    </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Implementing Mail Thread in Business Expense Model (Python)\nDESCRIPTION: This snippet shows the implementation of a 'BusinessExpense' model that inherits from 'mail.thread', allowing it to be created via email through the BusinessTrip alias.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/mixins.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass BusinessExpense(models.Model):\n    _name = 'business.expense'\n    _inherit = ['mail.thread']\n    _description = 'Business Expense'\n\n    name = fields.Char()\n    amount = fields.Float('Amount')\n    trip_id = fields.Many2one('business.trip', 'Business Trip')\n    partner_id = fields.Many2one('res.partner', 'Created by')\n```\n\n----------------------------------------\n\nTITLE: Defining an Owl Counter Component in JavaScript\nDESCRIPTION: Defines a basic Owl component named `Counter`. It imports `Component` and `useState` from `@odoo/owl`. The component uses `useState` in its `setup` method to manage a reactive state object containing a `value` initialized to 0. An `increment` method increases this value. The `static template` property links it to an XML template named \"my_module.Counter\".\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/discover_js_framework/01_owl_components.rst#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Component, useState } from \"@odoo/owl\";\n\nexport class Counter extends Component {\n    static template = \"my_module.Counter\";\n\n    setup() {\n        this.state = useState({ value: 0 });\n    }\n\n    increment() {\n        this.state.value++;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an Odoo Theme Module Manifest (Python)\nDESCRIPTION: This snippet demonstrates the required structure for an Odoo theme module's manifest file (__manifest__.py), including mandatory and optional metadata fields such as name, description, dependencies, data files, and asset bundles. No external dependencies besides Odoo are required. At a minimum, the 'name' field is required, but most real-world manifests include version, author, and asset references. The manifest enables Odoo to recognize and properly load the module during initialization.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n   'name': 'Airproof Theme',\n   'description': '...',\n   'category': 'Website/Theme',\n   'version': '{BRANCH}.0',\n   'author': '...',\n   'license': '...',\n   'depends': ['website'],\n   'data': [\n      # ...\n   ],\n   'assets': {\n      # ...\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom View in the Odoo Web Registry (JavaScript)\nDESCRIPTION: This code assembles the previously defined controller, renderer, model, and arch parser into a view definition and registers it under a custom type in Odoo's view registry. The props function combines generic and parsed arch information to create a comprehensive property set for the view. This is required to activate the custom view type and make it available in the Odoo system. Dependencies are the registry and modules for all the custom classes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_view.rst#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\nimport { BeautifulController } from \"./beautiful_controller\";\nimport { BeautifulArchParser } from \"./beautiful_arch_parser\";\nimport { BeautifylModel } from \"./beautiful_model\";\nimport { BeautifulRenderer } from \"./beautiful_renderer\";\n\nexport const beautifulView = {\n    type: \"beautiful\",\n    display_name: \"Beautiful\",\n    icon: \"fa fa-picture-o\", // the icon that will be displayed in the Layout panel\n    multiRecord: true,\n    Controller: BeautifulController,\n    ArchParser: BeautifulArchParser,\n    Model: BeautifulModel,\n    Renderer: BeautifulRenderer,\n\n    props(genericProps, view) {\n        const { ArchParser } = view;\n        const { arch } = genericProps;\n        const archInfo = new ArchParser().parse(arch);\n\n        return {\n            ...genericProps,\n            Model: view.Model,\n            Renderer: view.Renderer,\n            archInfo,\n        };\n    },\n};\n\nregistry.category(\"views\").add(\"beautifulView\", beautifulView);\n```\n\n----------------------------------------\n\nTITLE: Adding Workflow Buttons to an Odoo List View Header\nDESCRIPTION: Demonstrates how to add workflow buttons to the header of a list view. The header element contains button elements that can be always displayed or only when records are selected.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_45\n\nLANGUAGE: xml\nCODE:\n```\n<list>\n    <header>\n        <BUTTONS/>\n    </header>\n    ...\n</list>\n```\n\n----------------------------------------\n\nTITLE: Designing a Custom View Controller Template in Odoo Web (XML)\nDESCRIPTION: This XML template defines how the custom view controller should render its layout and child components, such as renderers, with the Odoo client-side templating engine. The props pattern allows for flexible injection of display logic and renderer properties. This design is required for the custom controller to display both standard and custom content as needed.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_view.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<templates xml:space=\"preserve\">\n    <t t-name=\"my_module.View\">\n        <Layout display=\"props.display\" className=\"'h-100 overflow-auto'\">\n            <t t-component=\"props.Renderer\" records=\"model.records\" propsYouWant=\"'Hello world'\"/>\n        </Layout>\n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Obtaining Categorized Registries in Odoo JavaScript\nDESCRIPTION: This code imports the root registry and obtains child registries for fields, services, and views using the category method. Each call to category returns or creates a subregistry for the designated feature. Requires @web/core/registry as a dependency. Key parameters are the category names ('fields', 'services', 'views'). Used for organizing and customizing registrations for different Odoo frontend features.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/registries.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\n\nconst fieldRegistry = registry.category(\"fields\");\nconst serviceRegistry = registry.category(\"services\");\nconst viewRegistry = registry.category(\"views\");\n```\n\n----------------------------------------\n\nTITLE: Launching Odoo Server with odoo-bin\nDESCRIPTION: Navigates to the Odoo source code directory (`$HOME/src/odoo/`) and executes the `odoo-bin` script to start the Odoo server. The `--addons-path` argument specifies a comma-separated list of directories containing Odoo modules (core addons, enterprise addons, and tutorial addons). The `-d rd-demo` argument specifies the database to use or create.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/setup_guide.rst#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cd $HOME/src/odoo/\n$ ./odoo-bin --addons-path=\"addons/,../enterprise/,../tutorials\" -d rd-demo\n```\n\n----------------------------------------\n\nTITLE: Basic Python Profiler Usage\nDESCRIPTION: This snippet demonstrates the simplest way to enable the Odoo profiler from Python code using a context manager. It profiles the execution of `do_stuff()` using the default collectors (SQL and Periodic). The results are typically saved to an `ir.profile` record.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/performance.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith Profiler():\n    do_stuff()\n```\n\n----------------------------------------\n\nTITLE: Using Lazy Translation Objects Odoo Python\nDESCRIPTION: This Python snippet shows how to define a lazily evaluated translatable string using Odoo's `LazyTranslate` class. The translation string is not resolved until it is actually converted to a string for output, allowing for proper context-aware translation in dynamic environments. Requires importing `LazyTranslate` from `odoo.tools`. Inputs are the module name and literal string; output is a lazy translation object.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/translations.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo.tools import LazyTranslate\n_lt = LazyTranslate(__name__)\nLAZY_TEXT = _lt(\"some text\")\n```\n\n----------------------------------------\n\nTITLE: Incorrect and Correct Usage of _super in Async Contexts - Odoo JS Classes - JavaScript\nDESCRIPTION: Emphasizes the constraint that this._super cannot be reliably accessed inside asynchronous blocks, such as setTimeout. Demonstrates both incorrect (leads to errors) and correct usage by saving a bound reference to _super for later invocation. Ensures method chaining works properly in async patterns within Odoo custom widgets.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// broken, will generate an error\nsay_hello: function () {\n    setTimeout(function () {\n        this._super();\n    }.bind(this), 0);\n}\n\n// correct\nsay_hello: function () {\n    // don't forget .bind()\n    var _super = this._super.bind(this);\n    setTimeout(function () {\n        _super();\n    }.bind(this), 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Inherited View in XML for Odoo\nDESCRIPTION: This snippet demonstrates how to create an inherited view in Odoo. It shows the structure for extending an existing view, including the inherit_id field, mode specification, and examples of using xpath and direct node targeting for modifications.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_records.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"ADDON.MODEL_view_TYPE\" model=\"ir.ui.view\">\n    <field name=\"model\">MODEL</field>\n    <field name=\"inherit_id\" ref=\"VIEW_REFERENCE\"/>\n    <field name=\"mode\">MODE</field>\n    <field name=\"arch\" type=\"xml\">\n        <xpath expr=\"XPATH\" position=\"POSITION\">\n            <CONTENT/>\n        </xpath>\n        <NODE ATTRIBUTES=\"VALUES\" position=\"POSITION\">\n            <CONTENT/>\n        </NODE>\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Device Driver for Odoo IoT - Python\nDESCRIPTION: Shows how to define a device driver by subclassing Driver in odoo.addons.hw_drivers.driver. Initializes attributes like device_type, device_connection, and device_name, and defines the supported method to match devices. Dependencies: odoo.addons.hw_drivers.driver. Key parameters: constructor (identifier, device), supported method checks eligibility. Inputs: device metadata; Outputs: Driver instance if supported.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/connect_device.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo.addons.hw_drivers.driver import Driver\\n\\nclass DriverName(Driver):\\n    connection_type = 'ConnectionType'\\n\\n    def __init__(self, identifier, device):\\n        super(NewDriver, self).__init__(identifier, device)\\n        self.device_type = 'DeviceType'\\n        self.device_connection = 'DeviceConnection'\\n        self.device_name = 'DeviceName'\\n\\n    @classmethod\\n    def supported(cls, device):\\n        ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic QWeb Template (XML)\nDESCRIPTION: This XML code defines a QWeb template with the ID 'index'. It uses the `t-foreach` directive to iterate over the 'teachers' list passed from the controller (aliased as 'teacher' for each iteration) and displays each teacher's name within a paragraph tag using `t-esc` for HTML escaping. The template file (`templates.xml`) must be declared in the `__manifest__.py` file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n\n    <template id=\"index\">\n        <title>Academy</title>\n        <t t-foreach=\"teachers\" t-as=\"teacher\">\n            <p><t t-esc=\"teacher\"/></p>\n        </t>\n    </template>\n\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Controlling Asset Loading Order in Odoo Manifest (Python)\nDESCRIPTION: Shows a technique within the `__manifest__.py` to ensure a specific file (like `jquery.js`) is loaded before other files matched by a glob pattern within the same directory or bundle. By explicitly listing the critical file before the glob pattern, its position earlier in the load order is guaranteed due to Odoo processing only the first occurrence of a file path.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/assets.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n'web.assets_common': [\n    'my_addon/static/lib/jquery/jquery.js',\n    'my_addon/static/lib/jquery/**/*',\n],\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Odoo Model and Field via API in PHP\nDESCRIPTION: Demonstrates using the Odoo Web Services API (`execute_kw`) in PHP to programmatically create a new model ('x_custom'), add a custom required character field ('x_name') to it, create a record within this new model, and finally read the created record. Both the model and the field are created with `state: 'manual'` to ensure they are activated.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$id = $models->execute_kw($db, $uid, $password, 'ir.model', 'create', array(array(\n    'name' => \"Custom Model\",\n    'model' => 'x_custom',\n    'state' => 'manual'\n)));\n$models->execute_kw($db, $uid, $password, 'ir.model.fields', 'create', array(array(\n    'model_id' => $id,\n    'name' => 'x_name',\n    'ttype' => 'char',\n    'state' => 'manual',\n    'required' => true\n)));\n$record_id = $models->execute_kw($db, $uid, $password, 'x_custom', 'create', array(array('x_name' => \"test record\")));\n$models->execute_kw($db, $uid, $password, 'x_custom', 'read', array(array($record_id)));\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Content with QWeb Templates in XML\nDESCRIPTION: This snippet demonstrates conditional rendering within QWeb XML templates using the <t> node and the t-if attribute. The placeholder <t> executes its directive and, if the expression evaluates to true, its body is rendered; otherwise, nothing is output. Requires QWeb processing within the Odoo framework. The 'condition' variable determines whether the inner <p> element appears in the output.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<t t-if=\"condition\">\n    <p>Test</p>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Defining an Odoo Domain for Filtering Records\nDESCRIPTION: This snippet shows an example of an Odoo domain, represented as a list of triplets (field, operator, value). It filters records from the 'Product' model where 'product_type' is 'service' AND 'unit_price' is greater than 1000. Domains are used to select subsets of records based on specified criteria.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/06_basicviews.rst#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n[('product_type', '=', 'service'), ('unit_price', '>', 1000)]\n```\n\n----------------------------------------\n\nTITLE: Defining Mail Message Subtype in Odoo (XML)\nDESCRIPTION: Defines a custom mail.message.subtype record in Odoo, used to trigger specific notifications on status changes of a related model. Dependencies include Odoo's mail subsystem and proper registration of the external id 'mt_state_change'. Required fields specify the name, target model, activation default, and a description. The snippet is intended to be placed inside an Odoo module's data XML, and the 'res_model' should match the Python model being tracked.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/mixins.rst#2025-04-23_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<record id=\\\"mt_state_change\\\" model=\\\"mail.message.subtype\\\">\\n    <field name=\\\"name\\\">Trip confirmed</field>\\n    <field name=\\\"res_model\\\">business.trip</field>\\n    <field name=\\\"default\\\" eval=\\\"True\\\"/>\\n    <field name=\\\"description\\\">Business Trip confirmed!</field>\\n</record>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom View Controller in Odoo Web (JavaScript)\nDESCRIPTION: This JavaScript class defines a new view controller responsible for connecting the layout, renderer, and model within the Odoo Web client. It handles creation of a reactive model, fetching data via ORM services, and ties into lifecycle hooks for initial loading. This pattern provides a foundation for advanced views where controlling data flow and interface rendering is necessary. Key dependencies are Odoo's Component API and service hooks.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_view.rst#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { Layout } from \"@web/search/layout\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport { Component, onWillStart, useState} from \"@odoo/owl\";\n\nexport class BeautifulController extends Component {\n    static template = \"my_module.View\";\n    static components = { Layout };\n\n    setup() {\n        this.orm = useService(\"orm\");\n\n        // The controller create the model and make it reactive so whenever this.model is\n        // accessed and edited then it'll cause a rerendering\n        this.model = useState(\n            new this.props.Model(\n                this.orm,\n                this.props.resModel,\n                this.props.fields,\n                this.props.archInfo,\n                this.props.domain\n            )\n        );\n\n        onWillStart(async () => {\n            await this.model.load();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Search Filter in Kanban Controller - Odoo Web Framework - JavaScript\nDESCRIPTION: This JavaScript snippet illustrates how to programmatically add a new filter to a search model within the Kanban controller in Odoo. By calling 'createNewFilters' on the searchModel environment object, a custom domain can be injected as an active filter. The domain parameter receives an array describing the field, operator, and value to filter by (e.g., matching 'partner_id'), and additional metadata like 'isFromAwesomeKanban' can be set to distinguish custom filters. This approach is used to synchronize UI selection (customer) with backend filtering.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/master_odoo_web_framework/03_customize_kanban_view.rst#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nthis.env.searchModel.createNewFilters([{\n      description: partner_name,\n      domain: [[\"partner_id\", \"=\", partner_id]],\n      isFromAwesomeKanban: true, // this is a custom key to retrieve our filters later\n}])\n```\n\n----------------------------------------\n\nTITLE: Triggering Webpage Opening via act_url Action (Odoo, JSON)\nDESCRIPTION: This example JSON dictionary defines an action of type ir.actions.act_url to open a specific web address within Odoo. It assumes the client or browser context is available as part of an Odoo session. The 'url' parameter specifies the target resource, and 'target': 'self' causes the content area to be replaced with the result; switching to 'new' would open a new window. Typically used for menu items or button actions that redirect users to external or internal web pages.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/actions.rst#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"type\\\": \\\"ir.actions.act_url\\\",\\n    \\\"url\\\": \\\"https://odoo.com\\\",\\n    \\\"target\\\": \\\"self\\\",\\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Odoo Record Creation using Batching (Python)\nDESCRIPTION: This snippet demonstrates the recommended practice for creating multiple Odoo records. It accumulates the creation values into a list of dictionaries and then calls the `create` method once with the entire list. This allows the Odoo framework to optimize the creation process, including potential field computations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/performance.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncreate_values = []\nfor name in ['foo', 'bar']:\n    create_values.append({'name': name})\nrecords = model.create(create_values)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Resource Leak Risk When Throwing Errors (JavaScript)\nDESCRIPTION: This snippet demonstrates a common pitfall where throwing an error can lead to resource leaks. An event listener is added, a function (`someFunction`) is called which might throw, and then the listener is supposed to be removed. If `someFunction` throws, the `removeEventListener` line is skipped, leaking the listener.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/error_handling.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neventTarget.addEventListener(\"event\", handler);\nsomeFunction();\neventTarget.removeEventListener(\"event\", handler);\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying a Registry in Odoo JavaScript\nDESCRIPTION: This snippet demonstrates how to import the Registry class from the Odoo web core, instantiate a new registry, add a new entry with a key, and retrieve it. Dependencies include the @web/core/registry module. The main parameters are the entry key (here, 'hello') and its value ('odoo'). The registry acts as a simple, ordered key/value map; output is logged to the console. Throws if duplicate keys are added unless the force option is used.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/registries.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Registry } from \"@web/core/registry\";\n\nconst myRegistry = new Registry();\n\nmyRegistry.add(\"hello\", \"odoo\");\n\nconsole.log(myRegistry.get(\"hello\"));\n```\n\n----------------------------------------\n\nTITLE: Registering a Field Component in Odoo Javascript Registry\nDESCRIPTION: Shows how to register a custom Owl component (`MyFieldChar`) as a field type in the Odoo framework. It imports the central `registry`, accesses the `fields` category, and uses the `add` method to register the component.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/framework_overview.rst#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from \"@odoo/owl\";\nimport { registry } from \"./core/registry\";\n\nclass MyFieldChar extends Component {\n    // some code\n}\n\nregistry.category(\"fields\").add(\"my_field_char\", MyFieldChar);\n```\n\n----------------------------------------\n\nTITLE: Alternative XPath Injection Methods for Odoo View Inheritance (XML)\nDESCRIPTION: Shows two alternative approaches to inserting a new field after an existing one in a view using XPath. Both methods target the 'description' field and append 'idea_ids' after it. Dependencies are the target fields and views already defined in the system. Both are functionally equivalent and allow flexible extension of form views. Valid only if the targeted element can be matched uniquely.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/12_inheritance.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<xpath expr=\"//field[@name='description']\" position=\"after\">\n    <field name=\"idea_ids\" />\n</xpath>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"description\" position=\"after\">\n    <field name=\"idea_ids\" />\n</field>\n```\n\n----------------------------------------\n\nTITLE: QWeb Template Structure for an Odoo Printed Report - XML\nDESCRIPTION: This XML QWeb template defines the HTML structure for an Odoo printed report. Using nested 't-call' and 't-foreach' constructs, it iterates over the 'docs' context variable to generate report pages dynamically. The use of web.html_container and web.external_layout ensures consistent styling and layout. The template expects 'docs' (the business records being printed) and optionally uses the 'user' context. Inputs are the context variables and outputs are HTML (or PDF) reports rendered by Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/backend.rst#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<t t-call=\\\"web.html_container\\\">\n    <t t-foreach=\\\"docs\\\" t-as=\\\"o\\\">\n        <t t-call=\\\"web.external_layout\\\">\n            <div class=\\\"page\\\">\n                <h2>Report title</h2>\n            </div>\n        </t>\n    </t>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Dropdown with Items in Odoo XML\nDESCRIPTION: This snippet demonstrates how to create a basic Dropdown component with DropdownItems in Odoo's XML templating system. It shows the usage of the default and content slots for structuring the dropdown.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<Dropdown>\n  <!-- The content of the \"default\" slot is the component's toggle -->\n  <button class=\"my-btn\" type=\"button\">\n    Click me to toggle the dropdown menu!\n  </button>\n\n  <!-- The \"content\" slot is rendered inside the menu that pops up next to the toggle -->\n  <t t-set-slot=\"content\">\n    <DropdownItem onSelected=\"selectItem1\">Menu Item 1</DropdownItem>\n    <DropdownItem onSelected=\"selectItem2\">Menu Item 2</DropdownItem>\n  </t>\n</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Conditional Server Action with Nested act_window Response (Odoo, XML)\nDESCRIPTION: This snippet extends the server action by returning a dynamic action to the client if a condition is met. In the embedded Python code, if the record satisfies 'some_condition()', a form view for the record is opened by assigning a structured 'action' dict, returned to the client. Dependencies include Odoo's server action system, proper model setup, and typical parameters (model_res_partner, state='code'). Used in cases where server actions can alter the next client-side behavior.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/actions.rst#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<record model=\\\"ir.actions.server\\\" id=\\\"print_instance\\\">\\n    <field name=\\\"name\\\">Res Partner Server Action</field>\\n    <field name=\\\"model_id\\\" ref=\\\"model_res_partner\\\"/>\\n    <field name=\\\"state\\\">code</field>\\n    <field name=\\\"code\\\">\\n        if record.some_condition():\\n            action = {\\n                \\\"type\\\": \\\"ir.actions.act_window\\\",\\n                \\\"view_mode\\\": \\\"form\\\",\\n                \\\"res_model\\\": record._name,\\n                \\\"res_id\\\": record.id,\\n            }\\n    </field>\\n</record>\n```\n\n----------------------------------------\n\nTITLE: Generating tsconfig.json using odoo-bin in Console\nDESCRIPTION: This command executes the `odoo-bin tsconfig` tool located within the 'community' directory. It generates a `tsconfig.json` file by analyzing the JavaScript/TypeScript code in the addon paths specified via `--addons-path` (community/addons, community/odoo/addons, enterprise). The resulting configuration file is redirected and saved as `tsconfig.json` in the current directory, enhancing editor autocompletion for Odoo JavaScript development.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_51\n\nLANGUAGE: console\nCODE:\n```\n$ community/odoo-bin tsconfig --addons-path community/addons,community/odoo/addons,enterprise > tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Overriding track_subtype to Trigger Custom Notification (Odoo Python)\nDESCRIPTION: Implements the _track_subtype() method in a custom Odoo model to trigger the defined mail subtype when the 'state' field changes to 'confirmed'. Requires inheriting 'mail.thread' and configuring the model fields accordingly. The method inspects the modified fields and returns a reference to the matching subtype, or falls back to the parent implementation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/mixins.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nclass BusinessTrip(models.Model):\\n    _name = 'business.trip'\\n    _inherit = ['mail.thread']\\n    _description = 'Business Trip'\\n\\n    name = fields.Char(tracking=True)\\n    partner_id = fields.Many2one('res.partner', 'Responsible',\\n                                 tracking=True)\\n    guest_ids = fields.Many2many('res.partner', 'Participants')\\n    state = fields.Selection([('draft', 'New'), ('confirmed', 'Confirmed')],\\n                             tracking=True)\\n\\n    def _track_subtype(self, init_values):\\n        # init_values contains the modified fields' values before the changes\\n        #\\n        # the applied values can be accessed on the record as they are already\\n        # in cache\\n        self.ensure_one()\\n        if 'state' in init_values and self.state == 'confirmed':\\n            return self.env.ref('my_module.mt_state_change')\\n        return super(BusinessTrip, self)._track_subtype(init_values)\n```\n\n----------------------------------------\n\nTITLE: Testing an Odoo Form View using testUtils and Custom Assertions in JavaScript\nDESCRIPTION: Shows an example of testing an Odoo FormView component. It utilizes the 'testUtils.createView' helper to instantiate the view with mock data and a defined architecture. The test then employs a custom QUnit assertion 'assert.containsOnce' to verify the DOM structure. Finally, it cleans up by calling 'form.destroy()'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('simple group rendering', function (assert) {\n    assert.expect(1);\n\n    var form = testUtils.createView({\n        View: FormView,\n        model: 'partner',\n        data: this.data,\n        arch: '<form string=\"Partners\">' +\n                '<group>' +\n                    '<field name=\"foo\"/>' +\n                '</group>' +\n            '</form>',\n        res_id: 1,\n    });\n\n    assert.containsOnce(form, 'table.o_inner_group');\n\n    form.destroy();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-Write Field in JavaScript\nDESCRIPTION: Example implementation of a basic read-write field (FieldChar2) that extends AbstractField. Handles both editable and non-editable modes with proper event handling and value management.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.FieldChar2 = instance.web.form.AbstractField.extend({\n    init: function() {\n        this._super.apply(this, arguments);\n        this.set(\"value\", \"\");\n    },\n    start: function() {\n        this.on(\"change:effective_readonly\", this, function() {\n            this.display_field();\n            this.render_value();\n        });\n        this.display_field();\n        return this._super();\n    },\n    display_field: function() {\n        var self = this;\n        this.$el.html(QWeb.render(\"FieldChar2\", {widget: this}));\n        if (! this.get(\"effective_readonly\")) {\n            this.$(\"input\").change(function() {\n                self.internal_set_value(self.$(\"input\").val());\n            });\n        }\n    },\n    render_value: function() {\n        if (this.get(\"effective_readonly\")) {\n            this.$el.text(this.get(\"value\"));\n        } else {\n            this.$(\"input\").val(this.get(\"value\"));\n        }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Branches (if, elif, else) in QWeb XML\nDESCRIPTION: This snippet illustrates the use of t-if, t-elif, and t-else attributes for multi-branch conditional rendering in QWeb XML templates. It supports complex conditional logic within the template, displaying different content depending on user properties (e.g., birthday or username). All branches are mutually exclusive; requires user and today() available in context.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<div>\n    <p t-if=\"user.birthday == today()\">Happy birthday!</p>\n    <p t-elif=\"user.login == 'root'\">Welcome master!</p>\n    <p t-else=\"\">Welcome!</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Security Rule for Company-Restricted Records in Odoo XML\nDESCRIPTION: Creates an Odoo security rule (`ir.rule`) for models where each record must belong to a specific company. The `domain_force` `[('company_id', 'in', company_ids)]` restricts access, ensuring users can only view records associated with the companies they are currently permitted to access (`company_ids`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/company.rst#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Company-restricted Records -->\n<record model=\"ir.rule\" id=\"record_restricted_company_rule\">\n    <field name=\"name\">Restricted Record: multi-company</field>\n    <field name=\"model_id\" ref=\"model_record_restricted\"/>\n    <field name=\"global\" eval=\"True\"/>\n    <field name=\"domain_force\">\n        [('company_id', 'in', company_ids)]\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Enhanced XML Templates for Pet Store Components\nDESCRIPTION: Extended XML templates that include definitions for the PetToysList widget and individual PetToy items. The templates provide structure for displaying pet toys with names and images.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_38\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<templates xml:space=\"preserve\">\n    <t t-name=\"HomePage\">\n        <div class=\"oe_petstore_homepage\">\n            <div class=\"oe_petstore_homepage_left\"></div>\n            <div class=\"oe_petstore_homepage_right\"></div>\n        </div>\n    </t>\n    <t t-name=\"MessageOfTheDay\">\n        <div class=\"oe_petstore_motd\">\n            <p class=\"oe_mywidget_message_of_the_day\"></p>\n        </div>\n    </t>\n    <t t-name=\"PetToysList\">\n        <div class=\"oe_petstore_pettoyslist\">\n        </div>\n    </t>\n    <t t-name=\"PetToy\">\n        <div class=\"oe_petstore_pettoy\">\n            <p><t t-esc=\"item.name\"/></p>\n            <p><img t-att-src=\"'data:image/jpg;base64,'+item.image\"/></p>\n        </div>\n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Extending Odoo Model with Website Metadata and Publication Mixins (Python)\nDESCRIPTION: This snippet demonstrates how to define an Odoo model that inherits the website SEO metadata and publishing mixins. It adds support for metadata fields such as title, description, and keywords, which can be edited in the frontend for better SEO. Dependencies include Odoo's ORM and the presence of 'website.seo.metadata' and 'website.published.mixin'. The class must be part of a valid Odoo module.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/mixins.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass BlogPost(models.Model):\\n    _name = \\\"blog.post\\\"\\n    _description = \\\"Blog Post\\\"\\n    _inherit = ['website.seo.metadata', 'website.published.mixin']\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Service with Dependencies in Odoo (JavaScript)\nDESCRIPTION: This code registers a new service in the Odoo frontend registry called \"myService\" that depends on the notification service. On initialization, it schedules a notification to appear every five seconds with an incrementing counter. Requires the Odoo web core registry and expects the notification service to be present as a dependency. Input: None. Output: Notification popups. Usage: Imported into Odoo web frontend as part of the service startup lifecycle.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/services.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\n\nconst myService = {\n    dependencies: [\"notification\"],\n    start(env, { notification }) {\n        let counter = 1;\n        setInterval(() => {\n            notification.add(`Tick Tock ${counter++}`);\n        }, 5000);\n    }\n};\n\nregistry.category(\"services\").add(\"myService\", myService);\n```\n\n----------------------------------------\n\nTITLE: Safe Retrieval of Field Value Using __getitem__ in Python\nDESCRIPTION: This snippet shows a safer method to retrieve a field value dynamically using the __getitem__ method of a recordset. This approach is preferred as it restricts access to only valid field values.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/security.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# better retrieval of a field value\ndef _get_state_value(self, res_id, state_field):\n    record = self.sudo().browse(res_id)\n    return record[state_field]\n```\n\n----------------------------------------\n\nTITLE: Color Field Implementation\nDESCRIPTION: Complete implementation of a color field widget that displays and edits color values, with both read-only and editable modes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.FieldColor = instance.web.form.AbstractField.extend({\n    events: {\n        'change input': function (e) {\n            if (!this.get('effective_readonly')) {\n                this.internal_set_value($(e.currentTarget).val());\n            }\n        }\n    },\n    init: function() {\n        this._super.apply(this, arguments);\n        this.set(\"value\", \"\");\n    },\n    start: function() {\n        this.on(\"change:effective_readonly\", this, function() {\n            this.display_field();\n            this.render_value();\n        });\n        this.display_field();\n        return this._super();\n    },\n    display_field: function() {\n        this.$el.html(QWeb.render(\"FieldColor\", {widget: this}));\n    },\n    render_value: function() {\n        if (this.get(\"effective_readonly\")) {\n            this.$(\".oe_field_color_content\").css(\"background-color\", this.get(\"value\") || \"#FFFFFF\");\n        } else {\n            this.$(\"input\").val(this.get(\"value\") || \"#FFFFFF\");\n        }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Structuring Unit Test Folders and Imports - Python\nDESCRIPTION: Demonstrates the conventional organization and import pattern for test modules in an Odoo module, using a 'tests' subfolder and importing each test script within '__init__.py'. Ensures all test modules are detected and executed. Requires Python and Odoo's test framework, as well as correctly named test files starting with 'test_'. Inputs are tested module paths, outputs are automatic test discovery and execution upon install or update.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nyour_module\n├── ...\n├── tests\n|   ├── __init__.py\n|   ├── test_bar.py\n|   └── test_foo.py\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom . import test_foo, test_bar\n```\n\n----------------------------------------\n\nTITLE: Decoration Attribute for List View in Odoo\nDESCRIPTION: Example of using the decoration attribute at the list view level to apply conditional styling to entire rows based on field values.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_41\n\nLANGUAGE: xml\nCODE:\n```\n<list decoration-danger=\"field_qty &gt; field_limit\">\n    ...\n</list>\n```\n\n----------------------------------------\n\nTITLE: Controlling Data Loading with noupdate in Odoo XML\nDESCRIPTION: This snippet demonstrates how to use the `noupdate=\"1\"` attribute within an Odoo XML data file. When applied to a `<data>` tag (or the root `<odoo>` tag), it ensures that the enclosed operations are only executed during the initial module installation (`odoo-bin -i module`) and are skipped during subsequent module updates (`odoo-bin -u module`). Operations outside the `noupdate=\"1\"` block are executed on both install and update.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/data.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n    <data noupdate=\"1\">\n        <!-- Only loaded when installing the module (odoo-bin -i module) -->\n        <operation/>\n    </data>\n\n    <!-- (Re)Loaded at install and update (odoo-bin -i/-u) -->\n    <operation/>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Server Action with Python Code (Odoo, XML)\nDESCRIPTION: This XML record snippet defines an ir.actions.server action for the res.partner model, executing a Python code block when triggered. It requires the Odoo environment and the model referenced by model_res_partner. The 'name' field is the label for the server action, 'state' indicates execution of Python 'code', and the <field name=\"code\"> raises a user-warning with the partner's name. Used for custom automation or manual triggers via server actions from UI or rules.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/actions.rst#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<record model=\\\"ir.actions.server\\\" id=\\\"print_instance\\\">\\n    <field name=\\\"name\\\">Res Partner Server Action</field>\\n    <field name=\\\"model_id\\\" ref=\\\"model_res_partner\\\"/>\\n    <field name=\\\"state\\\">code</field>\\n    <field name=\\\"code\\\">\\n        raise Warning(record.name)\\n    </field>\\n</record>\n```\n\n----------------------------------------\n\nTITLE: QWeb View to Render Standalone App - Odoo - XML\nDESCRIPTION: This XML QWeb template provides the entry point for the browser, initializing the global 'odoo' JavaScript variable for web framework and security (CSRF, debug, session_info) and including the project's standalone assets bundle. It must be defined in the Odoo module's data files and referenced by the controller. The code expects to receive 'session_info' and related context for variable assignment, and outputs a minimal HTML document with proper script initialization and assets included.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/standalone_owl_application.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<odoo>\\n    <template id=\\\"your_module.standalone_app\\\">&lt;!DOCTYPE html&gt;\\n        <html>\\n            <head>\\n                <script type=\\\"text/javascript\\\">\\n                    var odoo = {\\n                        csrf_token: \\\"<t t-nocache=\\\"The csrf token must always be up to date.\\\" t-esc=\\\"request.csrf_token(None)\\\"/>\\\",\\n                        debug: \\\"<t t-out=\\\"debug\\\"/>\\\",\\n                        __session_info__: <t t-esc=\\\"json.dumps(session_info)\\\"/>,\\n                    };\\n                </script>\\n                <t t-call-assets=\\\"your_module.assets_standalone_app\\\" />\\n            </head>\\n            <body/>\\n        </html>\\n    </template>\\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Efficient Odoo Record Counting using _read_group (Python)\nDESCRIPTION: This snippet shows an optimized approach to count related records for a batch of records (`self`). It uses the `_read_group` method to perform a single SQL query that groups and counts records based on `related_id`. The results are then mapped back to the corresponding records in the original recordset, significantly improving performance compared to querying inside a loop.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/performance.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef _compute_count(self):\n    domain = [('related_id', 'in', self.ids)]\n    counts_data = other_model._read_group(domain, ['related_id'], ['__count'])\n    mapped_data = dict(counts_data)\n    for record in self:\n        record.count = mapped_data.get(record, 0)\n```\n\n----------------------------------------\n\nTITLE: Efficient Odoo Field Access using Batch Browsing (Python)\nDESCRIPTION: This snippet demonstrates the efficient way to access fields on multiple records. By browsing the entire list of `record_ids` at once (`model.browse(record_ids)`), Odoo's prefetching mechanism is triggered effectively. When accessing fields like `record.foo` inside the loop, the data is typically fetched in a single query for the whole recordset, drastically reducing database load.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/performance.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nrecords = model.browse(record_ids)\nfor record in records:\n    record.foo  # One query is executed for the entire recordset.\n```\n\n----------------------------------------\n\nTITLE: Importing Relatively within Same Odoo Addon\nDESCRIPTION: Illustrates how a JavaScript module (`file_b.js`) within the `web` addon can use a relative path (`./file_a`) to import another module (`file_a.js`) located in the same addon's `static/src` directory. Relative imports are resolved correctly when both modules reside within the same Odoo addon.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_modules.rst#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {something} from `./file_a`;\n```\n\n----------------------------------------\n\nTITLE: Defining a Related Field in an Odoo Model using Python\nDESCRIPTION: This Python snippet shows how to define a `related` field in an Odoo model. The `description` field (a `Char` field) is linked to the `name` field of the related `res.partner` record specified by the `partner_id` Many2one field. The value of `description` will automatically reflect the value of `partner_id.name` and update whenever the related partner's name changes. This provides a declarative way to access data from related models.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n    ...\n\n    partner_id = fields.Many2one(\"res.partner\", string=\"Partner\")\n    description = fields.Char(related=\"partner_id.name\")\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Widget in Odoo XML View - XML\nDESCRIPTION: This snippet demonstrates adding a character field named 'foo' in an Odoo view, rendering it with the 'url' widget and displaying a custom anchor text. The field is shown as an anchor in readonly mode, with its text set by the 'text' attribute, keeping the href unchanged. Required context: Odoo XML view definitions; no additional dependencies required.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\\\"foo\\\" widget=\\\"url\\\" text=\\\"Some URL\\\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Field Tracking in an Odoo Model using Python\nDESCRIPTION: Shows how to enable field tracking on the 'business.trip' model by adding the 'tracking=True' attribute to the 'name' and 'partner_id' fields. This configuration ensures that any changes made to these fields are automatically logged as notes in the record's chatter.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/mixins.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass BusinessTrip(models.Model):\n    _name = 'business.trip'\n    _inherit = ['mail.thread']\n    _description = 'Business Trip'\n\n    name = fields.Char(tracking=True)\n    partner_id = fields.Many2one('res.partner', 'Responsible',\n                                 tracking=True)\n    guest_ids = fields.Many2many('res.partner', 'Participants')\n```\n\n----------------------------------------\n\nTITLE: Integrating Chatter into Courses Model in Odoo (Python)\nDESCRIPTION: This Python snippet modifies the 'academy.courses' model definition to integrate Odoo's Chatter system. It adds '_inherit = 'mail.thread'' to the class definition, making the model inherit the necessary fields and methods for messaging, notifications, and follower management.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nclass Courses(models.Model):\n    _name = 'academy.courses'\n    _inherit = 'mail.thread'\n\n    name = fields.Char()\n    teacher_id = fields.Many2one('academy.teachers', string=\"Teacher\")\n```\n\n----------------------------------------\n\nTITLE: Looping Over Related Records in a Many2many Field - Odoo - Python\nDESCRIPTION: Shows iterating across all related records in a Many2many field in Odoo for further processing or data extraction. The example presumes the presence of a 'tax_ids' Many2many field on 'my_test_object'. Each tax object in 'tax_ids' is accessed in turn, and its 'name' is printed. This snippet requires at least one related record and the Odoo recordset API; if 'tax_ids' is empty, the loop does nothing.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/07_relations.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfor tax in my_test_object.tax_ids:\n    print(tax.name)\n```\n\n----------------------------------------\n\nTITLE: Defining a Server Action to Update Offer Status in Odoo via XML and Embedded Python - XML\nDESCRIPTION: Creates a server action (Refuse all offers) on the x_estate.property model that sets all related offer records' x_status to 'refused'. The XML record binds the action with embedded Python code executed in Odoo's sandbox, iterating over property records and updating their offers. Prerequisites include the x_offer_ids relation, valid 'refused' status, and correct model references. This snippet is deployable as either a manual or button-triggered server action.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/importable_modules.rst#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\\\"action_x_estate_property_refuse_all_offers\\\" model=\\\"ir.actions.server\\\">\\n    <field name=\\\"name\\\">Refuse all offers</field>\\n    <field name=\\\"model_id\\\" ref=\\\"estate.model_real_estate_property\\\"/>\\n    <field name=\\\"state\\\">code</field>\\n    <field name=\\\"code\\\"><![CDATA[\\nfor property in records:\\n    property.x_offer_ids.write({'x_status': 'refused'})\\n    ]]></field>\\n</record>\n```\n\n----------------------------------------\n\nTITLE: Conditional Field Display in Kanban Card Template\nDESCRIPTION: Shows how to conditionally display fields in a kanban card template using the 'record' object. This example checks if the record is not a company before displaying the parent_id field.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_71\n\nLANGUAGE: xml\nCODE:\n```\n<kanban>\n   <templates>\n      <field name=\"is_company\"/>\n      <t t-name=\"card\">\n         <field name=\"name\"/>\n         <field t-if=\"!record.is_company.raw_value\" name=\"parent_id\">\n      </t>\n   </templates>\n</kanban>\n```\n\n----------------------------------------\n\nTITLE: Adding a Systray Item to the Systray Registry in Odoo JavaScript\nDESCRIPTION: This snippet registers a custom component, MySystrayItem, as a systray item in Odoo. The code imports the registry, defines a subclass of Component, and adds it with a unique key. Depends on @web/core/registry and a compatible Component base class (such as Owl). The main parameters are the item key ('myAddon.myItem') and an object containing the Component. Output is an extension of systray menu items in the Odoo navbar.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/registries.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\n\nclass MySystrayItem extends Component {\n    // some component ...\n}\n\nregistry.category(\"systray\").add(\"myAddon.myItem\", {\n    Component: MySystrayItem,\n});\n```\n\n----------------------------------------\n\nTITLE: Removing a Patch\nDESCRIPTION: Illustrates how to remove a previously applied patch. The `patch` function returns an `unpatch` function, which can be called later (e.g., in test teardown) to revert the changes made by the patch.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/patching_code.rst#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst unpatch = patch(object, { ... });\n// test stuff here\nunpatch();\n```\n\n----------------------------------------\n\nTITLE: Defining a Many2many Relationship Field - Odoo - Python\nDESCRIPTION: Defines a Many2many field in an Odoo model, here linking to the 'account.tax' model. The field allows associating multiple related records. By convention, the field name ends with '_ids'. This field displays as a list or tag selection in the UI and stores many-to-many references in an auxiliary relational table. It requires the Odoo 'fields' module and both models to be declared. The primary input is the related model string and an optional label.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/07_relations.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ntax_ids = fields.Many2many(\"account.tax\", string=\"Taxes\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Printed Report Action in Odoo - XML\nDESCRIPTION: This XML snippet registers an Odoo printed report action by configuring an 'ir.actions.report' record. It details the report name, model it operates on, report type (typically 'qweb-pdf'), internal template and file identifiers, and attachment rules. The inclusion of 'binding_model_id' and 'binding_type' controls contextual menu behavior. This pattern is essential for integrating printable QWeb PDF reports with business objects in Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/backend.rst#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\\\"account_invoices\\\" model=\\\"ir.actions.report\\\">\n    <field name=\\\"name\\\">Invoices</field>\n    <field name=\\\"model\\\">account.invoice</field>\n    <field name=\\\"report_type\\\">qweb-pdf</field>\n    <field name=\\\"report_name\\\">account.report_invoice</field>\n    <field name=\\\"report_file\\\">account.report_invoice</field>\n    <field name=\\\"attachment_use\\\" eval=\\\"True\\\"/>\n    <field name=\\\"attachment\\\">(object.state in ('open','paid')) and\n        ('INV'+(object.number or '').replace('/','')+'.pdf')</field>\n    <field name=\\\"binding_model_id\\\" ref=\\\"model_account_invoice\\\"/>\n    <field name=\\\"binding_type\\\">report</field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Defining a QUnit Test Module Structure in JavaScript\nDESCRIPTION: Establishes the basic structure for a QUnit test file within an Odoo addon ('my_addon'). It uses 'odoo.define' to declare the module and 'require' to import dependencies ('my_addon.utils'). It then sets up a QUnit module named 'my_addon' containing a submodule 'utils' where specific tests will be added.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nodoo.define('my_addon.utils_tests', function (require) {\n\"use strict\";\n\nvar utils = require('my_addon.utils');\n\nQUnit.module('my_addon', {}, function () {\n\n    QUnit.module('utils');\n\n});\n});\n```\n\n----------------------------------------\n\nTITLE: Model Delegation Pattern in Python\nDESCRIPTION: Illustrates delegation inheritance where a model delegates field lookups to child models using Reference fields.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nclass Screen(models.Model):\n    _name = 'delegation.screen'\n    _description = 'Screen'\n\n    size = fields.Float(string='Screen Size in inches')\n\nclass Keyboard(models.Model):\n    _name = 'delegation.keyboard'\n    _description = 'Keyboard'\n\n    layout = fields.Char(string='Layout')\n\nclass Laptop(models.Model):\n    _name = 'delegation.laptop'\n    _description = 'Laptop'\n\n    _inherits = {\n        'delegation.screen': 'screen_id',\n        'delegation.keyboard': 'keyboard_id',\n    }\n\n    name = fields.Char(string='Name')\n    maker = fields.Char(string='Maker')\n\n    screen_id = fields.Many2one('delegation.screen', required=True, ondelete=\"cascade\")\n    keyboard_id = fields.Many2one('delegation.keyboard', required=True, ondelete=\"cascade\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Renderer Component in Odoo Web (JavaScript)\nDESCRIPTION: This snippet provides the structure for a custom renderer class in the Odoo frontend framework. The renderer is responsible for the visual representation of records passed from the controller, using a specified template. It serves as the foundation for advanced data rendering scenarios within custom Odoo views. The renderer can leverage additional properties and Reactivity through Odoo's Component framework.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_view.rst#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { Component } from \"@odoo/owl\";\nexport class BeautifulRenderer extends Component {\n    static template = \"my_module.Renderer\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Odoo Model for Real Estate Properties - XML\nDESCRIPTION: This XML snippet defines a new Odoo model (x_estate.property) using the ir.model metadata system: it creates a model record named 'Real Estate Property' with an x_ prefix, which is mandatory for all models defined via data files. This is typically included in a module's models/*.xml file. No additional dependencies are needed besides the standard Odoo base system. The snippet must be wrapped in an <odoo> root element.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/importable_modules.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\n<odoo>\n    <record id=\\\"model_real_estate_property\\\" model=\\\"ir.model\\\">\n        <field name=\\\"name\\\">Real Estate Property</field>\n        <field name=\\\"model\\\">x_estate.property</field>\n    </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Field Widget in Odoo Javascript\nDESCRIPTION: Illustrates how to register a custom field component (`PadField`) within the Odoo framework using the central registry. The component is added to the 'fields' category of the registry imported from `@web/core/registry`. This registration makes the `PadField` component available for use in views (like forms, lists, kanbans) for fields of supported types (e.g., 'char').\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\nclass PadField extends Component { ... }\n\nregistry.category(\"fields\").add(\"pad\", {\n  component: PadField,\n  supportedTypes: [\"char\"],\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering an Odoo Service with Dependencies in Javascript\nDESCRIPTION: Illustrates the creation and registration of a custom Odoo service. The example defines `myService` which depends on the `notification` service (injected via the `start` method's second argument) and uses it to periodically display notifications. The service is added to the `services` registry.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/framework_overview.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"./core/registry\";\n\nconst serviceRegistry = registry.category(\"services\");\n\nconst myService = {\n    dependencies: [\"notification\"],\n    start(env, { notification }) {\n        let counter = 1;\n        setInterval(() => {\n            notification.add(`Tick Tock ${counter++}`);\n        }, 5000);\n    }\n};\n\nserviceRegistry.add(\"myService\", myService);\n```\n\n----------------------------------------\n\nTITLE: Illustrating Verbosity of try...catch for Control Flow (JavaScript)\nDESCRIPTION: This snippet repeats a previous example to emphasize the problems with using try/catch for routine failure handling. It requires declaring variables with `let` outside the block, involves checking error types with `instanceof` and re-throwing, and can lead to accidentally catching unrelated errors if the `try` block is too large or error filtering is omitted.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/error_handling.rst#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet someVal;\ntry {\n  someVal = someFunction();\n} catch (e) {\n  if (!(e instanceof MyError)) {\n    throw e;\n  }\n  someVal = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Using record and function Tags in Odoo XML Data\nDESCRIPTION: This example illustrates defining a record and calling model methods within an Odoo XML data file. It creates a `res.partner` record with an external ID `partner_1`. It then uses the `<function>` tag to call methods (`send_inscription_notice` on `res.partner` and `send_vip_inscription_notice` on `res.users`), passing parameters using `ref` (to reference external IDs) and `eval` (to evaluate Python expressions, including nested function calls like a search). The `<data noupdate=\"1\">` ensures this part runs only on install.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/data.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n    <data noupdate=\"1\">\n        <record id=\"partner_1\" model=\"res.partner\">\n            <field name=\"name\">Odude</field>\n        </record>\n\n        <function model=\"res.partner\" name=\"send_inscription_notice\"\n            eval=\"[[ref('partner_1'), ref('partner_2')]]\"/>\n\n        <function model=\"res.users\" name=\"send_vip_inscription_notice\">\n            <function eval=\"[[('vip','=',True)]]\" model=\"res.partner\" name=\"search\"/>\n        </function>\n    </data>\n\n    <record id=\"model_form_view\" model=\"ir.ui.view\">\n        ...\n    </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Odoo Dropdown Component in JavaScript\nDESCRIPTION: This JavaScript snippet defines an Odoo Owl component `MyComponent` that utilizes the `Dropdown` and `DropdownItem` components. It demonstrates how to manage the dropdown's state using the `useDropdownState` hook, automatically open the dropdown when the component mounts using `onMounted`, and implement custom close logic (50% chance of closing on button click).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, onMounted } from \"@odoo/owl\";\nimport { Dropdown } from \"@web/core/dropdown/dropdown\";\nimport { DropdownItem } from \"@web/core/dropdown/dropdown_item\";\nimport { useDropdownState } from \"@web/core/dropdown/dropdown_hooks\";\n\nclass MyComponent extends Component {\n\n  static components = { Dropdown, DropdownItem };\n  static template = xml`\n    <Dropdown state=\"this.dropdown\">\n      <div>My Dropdown</div>\n\n      <t t-set-slot=\"content\">\n        <button t-on-click=\"() => this.mightClose()\">Close It!<button>\n      </t>\n    </Dropdown>\n  `;\n\n  setup() {\n    this.dropdown = useDropdownState();\n\n    onMounted(() => {\n      this.dropdown.open();\n    });\n  }\n\n  mightClose() {\n    if (Math.random() > 0.5) {\n      this.dropdown.close();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Overall Settings View Structure in Odoo XML\nDESCRIPTION: This example illustrates the structure of an Odoo Settings view XML definition. It uses the `<app>` element to define the application context, `<block>` elements to group settings, and `<setting>` elements for individual configuration options, which can contain fields, buttons, or custom HTML.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n<app string=\"CRM\" name=\"crm\">\n    <setting type=\"header\" string=\"Foo\">\n        <field name=\"foo\" title=\"Foo?.\"/>\n        <button name=\"nameAction\" type=\"object\" string=\"Button\"/>\n    </setting>\n    <block title=\"Title of group Bar\">\n        <setting help=\"this is bar\" documentation=\"/applications/technical/web/settings/this_is_a_test.html\">\n            <field name=\"bar\"/>\n        </setting>\n        <setting string=\"This is Big BAR\" company_specific=\"1\">\n            <field name=\"bar\"/>\n        </setting>\n    </block>\n    <block title=\"Title of group Foo\">\n        <setting string=\"Personalize setting\" help=\"this is full personalize setting\">\n            <div>This is a different setting</div>\n        </setting>\n    </block>\n</app>\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated Odoo Module Alias for All Exports\nDESCRIPTION: Displays the generated Odoo module definition for the alias `web.someName` when `default=0` is specified. It defines the alias module, depends on the original module (`@web/file_a`), and its factory function directly returns the result of `require('@web/file_a')`, effectively exposing all exports of the original module under the alias.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_modules.rst#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nodoo.define(`web.someName`, [\"@web/file_a\"], function(require) {\n    return require('@web/file_a');\n});\n```\n\n----------------------------------------\n\nTITLE: Triggering an Odoo Scheduled Action Programmatically (Python)\nDESCRIPTION: This Python snippet shows how to manually trigger an Odoo Scheduled Action (`ir.cron`) record using the `_trigger` method. It allows scheduling the next execution of the action record (`action_record`) at a specific future date and time specified by the optional 'at' parameter.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/actions.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\naction_record._trigger(at=XX:date)\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Using Odoo Action Manager\nDESCRIPTION: Example of using the Odoo Action Manager to navigate between views. This code shows how to create an action that opens a form view for a specific product record.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\ninstance.web.TestWidget = instance.Widget.extend({\n    dispatch_to_new_action: function() {\n        this.do_action({\n            type: 'ir.actions.act_window',\n            res_model: \"product.product\",\n            res_id: 1,\n            views: [[false, 'form']],\n            target: 'current',\n            context: {},\n        });\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Complete CSS Styling for Pet Store Components\nDESCRIPTION: Comprehensive CSS styling for the pet store homepage layout, including styles for MessageOfTheDay and PetToysList widgets. Uses table-cell display to create a two-column layout.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_39\n\nLANGUAGE: css\nCODE:\n```\n.oe_petstore_homepage {\n    display: table;\n}\n\n.oe_petstore_homepage_left {\n    display: table-cell;\n    width : 300px;\n}\n\n.oe_petstore_homepage_right {\n    display: table-cell;\n    width : 300px;\n}\n\n.oe_petstore_motd {\n    margin: 5px;\n    padding: 5px;\n    border-radius: 3px;\n    background-color: #F0EEEE;\n}\n\n.oe_petstore_pettoyslist {\n    padding: 5px;\n}\n\n.oe_petstore_pettoy {\n    margin: 5px;\n    padding: 5px;\n    border-radius: 3px;\n    background-color: #F0EEEE;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Attributes from a Custom XML Arch (JavaScript)\nDESCRIPTION: This example JavaScript class demonstrates how to define a minimal ArchParser for extracting attribute values from an Odoo XML arch. Specifically, it reads a custom attribute from the provided XML document, returning its value for use in view configuration. Dependencies: Odoo web architecture, XML parser utilities. Inputs: xmlDoc (XMLDocument). Output: Object containing attribute values. Used to pass config from XML to JS controllers.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/master_odoo_web_framework/02_create_gallery_view.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport class MyCustomArchParser {\n    parse(xmlDoc) {\n       const myAttribute = xmlDoc.getAttribute(\"my_attribute\")\n       return {\n           myAttribute,\n       }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring Correct Company Context in Odoo Python Onchange and Compute Methods\nDESCRIPTION: Provides examples demonstrating the use of `self.with_company(self.company_id)` within `@api.onchange` and `@api.depends` methods. This practice ensures that operations potentially affected by company context are executed using the company specified on the record itself, preventing inconsistencies.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/company.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@api.onchange('field_name')\ndef _onchange_field_name(self):\n self = self.with_company(self.company_id)\n ...\n\n@api.depends('field_2')\ndef _compute_field_3(self):\n for record in self:\n   record = record.with_company(record.company_id)\n   ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Progress Bars in Odoo Kanban View\nDESCRIPTION: Shows how to define progress bars on top of kanban columns with field mapping and color configurations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_78\n\nLANGUAGE: xml\nCODE:\n```\n<kanban>\n    <progressbar field=\"activity_state\"\n                 colors=\"{'planned': 'success', 'today': 'warning', 'overdue': 'danger'}\"\n                 sum_field=\"expected_revenue\"/>\n    <templates>\n        ...\n    </templates>\n</kanban>\n```\n\n----------------------------------------\n\nTITLE: Defining Action Method for Odoo Button - Python\nDESCRIPTION: This code snippet implements the Python side of the button logic for Odoo. It defines the 'TestAction' model with a 'name' field and a public method 'action_do_something', which updates the 'name' field to 'Something' for each record in the set and returns True. The model must be registered with Odoo, and is designed to be invoked from the user interface via an XML button with type='object'. Dependencies include the Odoo framework (models, fields).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/09_actions.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import fields, models\\n\\nclass TestAction(models.Model):\\n    _name = \\\"test.action\\\"\\n\\n    name = fields.Char()\\n\\n    def action_do_something(self):\\n        for record in self:\\n            record.name = \\\"Something\\\"\\n        return True\n```\n\n----------------------------------------\n\nTITLE: Defining an Odoo Model with a Basic Field in Python\nDESCRIPTION: Illustrates how to add a simple field (`name` of type `fields.Char`) to an Odoo model definition using the `odoo.fields` module. It also includes the `_description` attribute, which provides a human-readable name for the model used in the Odoo UI.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/03_basicmodel.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import fields, models\n\nclass TestModel(models.Model):\n    _name = \"test_model\"\n    _description = \"Test Model\"\n\n    name = fields.Char()\n```\n\n----------------------------------------\n\nTITLE: Efficient Filtering using Odoo Recordset Operations (Python)\nDESCRIPTION: This snippet showcases using Odoo's built-in recordset operations for efficient filtering. Subtracting one recordset (`invalid_ids`) from another (`self`) using the `-` operator leverages optimized internal logic (potentially database-level operations) to achieve the filtering, often providing a concise and performant solution compared to manual looping and checking.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/performance.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ninvalid_ids = self.search(domain)\nfor record in self - invalid_ids:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Rendering QWeb Template in Odoo Widget using JavaScript\nDESCRIPTION: Shows how to render a QWeb template inside an Odoo widget using the QWeb.render method.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nlocal.HomePage = instance.Widget.extend({\n    start: function() {\n        this.$el.append(QWeb.render(\"HomePageTemplate\"));\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Odoo Controller (Python)\nDESCRIPTION: This Python code defines a simple controller class `Academy` inheriting from `http.Controller`. It includes a method `index` decorated with `@http.route` to handle requests to the '/academy/academy/' URL. The `auth='public'` parameter makes the page accessible without logging in. Initially, it returns a static string \"Hello, world\". The file needs to be imported in `academy/__init__.py`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# -*- coding: utf-8 -*-\nfrom odoo import http\n\nclass Academy(http.Controller):\n\n    @http.route('/academy/academy/', auth='public')\n    def index(self, **kw):\n        return \"Hello, world\"\n```\n\n----------------------------------------\n\nTITLE: Passing Rich Content to Sub-Templates Using t-call and t-out in QWeb XML\nDESCRIPTION: Shows how to call a sub-template and pass rich, rendered content (e.g., <em>) as the '0' variable available within the sub-template via t-out. Allows for content injection and flexible sub-template composition in QWeb. The child content is passed and rendered as a parameter.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<t t-call=\"other-template\">\n    <em>content</em>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Odoo ORM Prefetching for Simple Fields in Python\nDESCRIPTION: This example shows Odoo's prefetching mechanism. When iterating through a recordset (`partners`) and accessing a simple stored field (`partner.name`), the ORM prefetches that field (and other simple fields like `lang`) for all records in the `partners` set in a single query, significantly improving performance compared to querying each record individually.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfor partner in partners:\n    print partner.name          # first pass prefetches 'name' and 'lang'\n                                # (and other fields) on all 'partners'\n    print partner.lang\n```\n\n----------------------------------------\n\nTITLE: Using Domain Class for Record Filtering in JavaScript\nDESCRIPTION: Shows how to use the Domain class to check if records match specified conditions. The example demonstrates creating domains, checking if records match conditions, and converting domains between different formats.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/framework_overview.rst#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nnew Domain([[\"a\", \"=\", 3]]).contains({ a: 3 }) // true\n\nconst domain = new Domain([\"&\", \"&\", [\"a\", \"=\", 1], [\"b\", \"=\", 2], [\"c\", \"=\", 3]]);\ndomain.contains({ a: 1, b: 2, c: 3 }); // true\ndomain.contains({ a: -1, b: 2, c: 3 }); // false\n\n// next expression returns [\"|\" , (\"a\", \"=\", 1), (\"b\", \"<=\", 3)]\nDomain.or([[[\"a\", \"=\", 1]], \"[('b', '<=', 3)]\"]]).toString();\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Odoo Form View Structure in XML\nDESCRIPTION: This XML snippet illustrates the fundamental layout of an Odoo Form view using the `<form>` root element. It utilizes `<sheet>`, `<group>`, and `<notebook>` elements to organize fields ('name', 'last_seen', 'description') visually. Fields are placed within groups, and notebooks allow for tabbed content using `<page>` elements.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/06_basicviews.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<form string=\"Test\">\n    <sheet>\n        <group>\n            <group>\n                <field name=\"name\"/>\n            </group>\n            <group>\n                <field name=\"last_seen\"/>\n            </group>\n        </group>\n        <notebook>\n            <page string=\"Description\">\n                <field name=\"description\"/>\n            </page>\n        </notebook>\n    </sheet>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Instantiating DeviceProxy for IoT Device Communication - Odoo JavaScript\nDESCRIPTION: Illustrates client-side instantiation of the DeviceProxy to communicate with a device via the IoT Box. Uses require to import iot.DeviceProxy and creates a proxy with iot_ip and device_identifier. Dependencies: Odoo JS module loader, IoT Box accessible over local network. Inputs: iot_ip, identifier; Outputs: DeviceProxy object.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/connect_device.rst#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar DeviceProxy = require('iot.DeviceProxy');\\n\\nvar iot_device = new DeviceProxy({\\n    iot_ip: iot_ip,\\n    identifier: device_identifier\\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Tour in JavaScript\nDESCRIPTION: Sets up a tour by registering it with the tour service, specifying a starting URL and preparing for step definitions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport tour from 'web_tour.tour';\ntour.register('rental_product_configurator_tour', {\n    url: '/web',  // Here, you can specify any other starting url\n}, [\n    // Your sequence of steps\n]);\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Snippet under a Group in Snippet Structure (XML)\nDESCRIPTION: This XML snippet demonstrates how to insert a custom snippet into the snippet structure of Odoo's Website Builder using XPath, assigning properties for search keywords and grouping. Dependencies: Odoo Website Builder, previously declared snippet template and group. Inputs: t-snippet reference, string, group ID, and keywords. Output: snippet becomes available for drag-and-drop in the UI. Group IDs must match those in the group creation step.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\\\"snippets\\\" inherit_id=\\\"website.snippets\\\" name=\\\"Airproof - Snippets\\\">\\n   <!-- Create the group -->\\n   <xpath expr=\\\"//snippets[@id='snippet_groups']/*[1]\\\" position=\\\"before\\\">\\n      <t snippet-group=\\\"airproof\\\" t-snippet=\\\"website.s_snippet_group\\\" string=\\\"Airproof\\\" t-thumbnail=\\\"/website_airproof/static/src/img/wbuilder/s_airproof_group_thumbnail.svg\\\"/>\\n   </xpath>\\n\\n   <!-- Add the custom snippet to the group -->\\n   <xpath expr=\\\"//snippets[@id='snippet_structure']/*[1]\\\" position=\\\"before\\\">\\n      <t t-snippet=\\\"website_airproof.s_airproof_snippet\\\" string=\\\"Custom snippet\\\" group=\\\"airproof\\\">\\n         <keywords>Snippet</keywords>\\n      </t>\\n   </xpath>\\n</template>\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Odoo via XML-RPC - Python\nDESCRIPTION: Requests authentication from the Odoo /xmlrpc/2/common endpoint using Python and retrieves the user's unique identifier (uid). Takes database, username, password, and an optional context dictionary as parameters. A valid uid is required for further API operations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nuid = common.authenticate(db, username, password, {})\n```\n\n----------------------------------------\n\nTITLE: Defining Default Static Pages in Odoo Website - XML\nDESCRIPTION: This XML snippet shows how to declare a default static page template (e.g., homepage) by defining a template record and using Odoo's layout. The template includes variable setting via 't-set', page wrapping, and standard structure. Required dependency: Odoo Website application. Important fields: 'id', 'name', QWeb 't-call', and 'pageName'. Expected usage: loaded when a module is installed to provide a home page.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\\\"website.homepage\\\" name=\\\"Home\\\">\\n   <t t-call=\\\"website.layout\\\">\\n      <t t-set=\\\"pageName\\\" t-value=\\\"'homepage'\\\"/>\\n      <div id=\\\"wrap\\\" class=\\\"oe_structure oe_empty\\\" />\\n   </t>\\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Report Data Logic in Python for Odoo Reports\nDESCRIPTION: Shows how to create a custom report model in Odoo to inject specific data into the QWeb rendering context. This involves defining a class inheriting `models.AbstractModel` with a specific name (`_name = 'report.module.report_name'`). The `_get_report_values` method is overridden to fetch the relevant records (`obj`) based on `docids` and return a dictionary containing custom data (e.g., `'lines'`) for the template. Note that the default context variables (`docs`, `doc_ids`, `doc_model`) are *not* automatically included when using this custom approach and must be added manually if needed.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/reports.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import api, models\n\nclass ParticularReport(models.AbstractModel):\n    _name = 'report.module.report_name'\n\n    def _get_report_values(self, docids, data=None):\n        # get the report action back as we will need its data\n        report = self.env['ir.actions.report']._get_report_from_name('module.report_name')\n        # get the records selected for this rendering of the report\n        obj = self.env[report.model].browse(docids)\n        # return a custom rendering context\n        return {\n            'lines': docids.get_lines()\n        }\n```\n\n----------------------------------------\n\nTITLE: Overriding Powerbox Options in Odoo Editor (JavaScript)\nDESCRIPTION: This snippet demonstrates how to override the _getPowerboxOptions method within a class that extends Odoo Editor's Wysiwyg class, used for adding custom commands and categories to the Powerbox. Dependencies include Odoo's web_editor and mass_mailing modules, as well as the translation function _t for localizability. The code modifies the Powerbox options by appending a new category and a new command at specific priorities, and returns the modified options object, to be invoked when the Powerbox is next rendered. Input parameters are not required; the output is an options object passed internally. The approach ensures proper translation handling and recommends consistency in priority assignment to avoid z-index-like conflicts.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/odoo_editor.rst#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n_getPowerboxOptions: function () {\n    const options = this._super();\n    // (existing code before the return statement)\n    options.categories.push({\n        name: _t('Documentation'),\n        priority: 300,\n    });\n    options.commands.push({\n        name: _t('Document'),\n        category: _t('Documentation'),\n        description: _t(\"Add this text to your mailing's documentation\"),\n        fontawesome: 'fa-book',\n        priority: 1, // This is the only command in its category anyway.\n    });\n    return options;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Map Widget in JavaScript for Odoo\nDESCRIPTION: This JavaScript code creates a custom widget for displaying coordinates on a map in Odoo. It extends the FormWidget class and includes methods for rendering the map and handling field changes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.WidgetCoordinates = instance.web.form.FormWidget.extend({\n    start: function() {\n        this._super();\n        this.field_manager.on(\"field_changed:provider_latitude\", this, this.display_map);\n        this.field_manager.on(\"field_changed:provider_longitude\", this, this.display_map);\n        this.display_map();\n    },\n    display_map: function() {\n        this.$el.html(QWeb.render(\"WidgetCoordinates\", {\n            \"latitude\": this.field_manager.get_field_value(\"provider_latitude\") || 0,\n            \"longitude\": this.field_manager.get_field_value(\"provider_longitude\") || 0,\n        }));\n    }\n});\n\ninstance.web.form.custom_widgets.add('coordinates', 'instance.oepetstore.WidgetCoordinates');\n```\n\n----------------------------------------\n\nTITLE: Using t-cache Directive for Template Fragment Caching (Odoo QWeb/HTML)\nDESCRIPTION: Shows how to use the t-cache directive in Odoo QWeb templates to cache rendered template fragments keyed by a Python expression. The directive enables reuse of rendered content to save database queries but requires careful cache key selection to ensure cache validity. Explicit examples show expressing the key (e.g., record and a condition), the use of t-if and t-else, and the direct effect on the resulting rendered output. Main dependencies are on Odoo QWeb and proper evaluation of the key expression.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_19\n\nLANGUAGE: html\nCODE:\n```\nExample::\n\n    <div t-cache=\"record,bool(condition)\">\n        <span t-if=\"condition\" t-field=\"record.partner_id.name\">\n        <span t-else=\"\" t-field=\"record.partner_id\" t-options-widget=\"contact\">\n    </div>\n\nIn this case, there may be values \\u200b\\u200b(string) in the cache corresponding to each\nrecord already returned with a true condition, as well as for the false\ncondition. And if a module modifies the record, the write_date being modified,\nthe cached value is discarded.\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Arch Parser for Odoo Web View (JavaScript)\nDESCRIPTION: This snippet creates a custom parser class extending XMLParser to extract specific attributes from a view's arch XML. The parser enables the rest of the view component classes to access additional configuration or metadata from view definitions. Dependencies include Odoo's XMLParser utility.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_view.rst#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { XMLParser } from \"@web/core/utils/xml\";\n\nexport class BeautifulArchParser extends XMLParser {\n    parse(arch) {\n        const xmlDoc = this.parseXML(arch);\n        const fieldFromTheArch = xmlDoc.getAttribute(\"fieldFromTheArch\");\n        return {\n            fieldFromTheArch,\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an OpenAcademy Session with Dynamic Course Lookup via XML-RPC in Python\nDESCRIPTION: This Python snippet enhances the previous XML-RPC example by dynamically searching for an 'openacademy.course' record whose name contains 'Functional'. It retrieves the ID of the first matching course and uses it when creating a new 'openacademy.session' record, avoiding the need for a hard-coded course ID.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/web_services.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# 3.create a new session for the \"Functional\" course\ncourse_id = call('openacademy.course', 'search', [('name','ilike','Functional')])[0]\nsession_id = call('openacademy.session', 'create', {\n    'name' : 'My session',\n    'course_id' : course_id,\n})\n```\n\n----------------------------------------\n\nTITLE: Adding User Dropdown Component to Header\nDESCRIPTION: QWeb code to add a user dropdown menu to a custom header.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<t t-call=\"portal.user_dropdown\">\n   <t t-set=\"_user_name\" t-value=\"true\"/>\n   <t t-set=\"_icon\" t-value=\"false\"/>\n   <t t-set=\"_avatar\" t-value=\"false\"/>\n   <t t-set=\"_item_class\" t-valuef=\"nav-item dropdown\"/>\n   <t t-set=\"_link_class\" t-valuef=\"nav-link\"/>\n   <t t-set=\"_dropdown_menu_class\" t-valuef=\"...\"/>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Defining an Odoo Model with Mail Thread Mixin in Python\nDESCRIPTION: Defines a simple Odoo model named 'business.trip' inheriting from 'mail.thread' to integrate basic messaging capabilities. It includes fields for the trip name, responsible partner, and participants. This inheritance is the first step to enable chatter functionality.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/mixins.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass BusinessTrip(models.Model):\n    _name = 'business.trip'\n    _inherit = ['mail.thread']\n    _description = 'Business Trip'\n\n    name = fields.Char()\n    partner_id = fields.Many2one('res.partner', 'Responsible')\n    guest_ids = fields.Many2many('res.partner', 'Participants')\n```\n\n----------------------------------------\n\nTITLE: Searching and Reading Records with search_read via XML-RPC in Java\nDESCRIPTION: This Java snippet finds partners where 'is_company' equals true, retrieving targeted fields and limiting to five records using 'search_read'. Inputs and outputs are mapped to Java's data structures, leveraging HashMap for options. Assumes an existing authenticated session and models client.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_33\n\nLANGUAGE: java\nCODE:\n```\nasList((Object[])models.execute(\"execute_kw\", asList(\n    db, uid, password,\n    \"res.partner\", \"search_read\",\n    asList(asList(\n        asList(\"is_company\", \"=\", true))),\n    new HashMap() {{\n        put(\"fields\", asList(\"name\", \"country_id\", \"comment\"));\n        put(\"limit\", 5);\n    }}\n)));\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Fields to an Odoo Model via XML Data File - XML\nDESCRIPTION: This XML snippet demonstrates how to define several new fields—name (x_name), selling price (x_selling_price), description (x_description), and postcode (x_postcode)—for the custom x_estate.property model in Odoo, using ir.model.fields records. Each field is described with its technical name, type, label, and options, and references the parent model. This data should be placed in a models/*.xml file and requires that the corresponding model (with the id 'model_real_estate_property') is already defined and referenced. All fields must be prefixed with x_, and various attributes control their required status, data type, and UI label.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/importable_modules.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\n<odoo>\n    <!-- ...model definition from before... -->\n    <record id=\\\"field_real_estate_property_name\\\" model=\\\"ir.model.fields\\\">\n        <field name=\\\"model_id\\\" ref=\\\"estate.model_real_estate_property\\\" />\n        <field name=\\\"name\\\">x_name</field>\n        <field name=\\\"field_description\\\">Name</field>\n        <field name=\\\"ttype\\\">char</field>\n        <field name=\\\"required\\\">True</field>\n    </record>\n\n    <record id=\\\"field_real_estate_property_selling_price\\\" model=\\\"ir.model.fields\\\" >\n        <field name=\\\"model_id\\\" ref=\\\"estate.model_real_estate_property\\\" />\n        <field name=\\\"name\\\">x_selling_price</field>\n        <field name=\\\"field_description\\\">Selling Price</field>\n        <field name=\\\"ttype\\\">float</field>\n        <field name=\\\"required\\\">True</field>\n    </record>\n\n    <record id=\\\"field_real_estate_property_description\\\" model=\\\"ir.model.fields\\\" >\n        <field name=\\\"model_id\\\" ref=\\\"estate.model_real_estate_property\\\" />\n        <field name=\\\"name\\\">x_description</field>\n        <field name=\\\"field_description\\\">Description</field>\n        <field name=\\\"ttype\\\">html</field>\n    </record>\n\n    <record id=\\\"field_real_estate_property_postcode\\\" model=\\\"ir.model.fields\\\" >\n        <field name=\\\"model_id\\\" ref=\\\"estate.model_real_estate_property\\\" />\n        <field name=\\\"name\\\">x_postcode</field>\n        <field name=\\\"field_description\\\">Postcode</field>\n        <field name=\\\"ttype\\\">char</field>\n    </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Models in Multiple Languages\nDESCRIPTION: Examples showing how to create a custom model in Odoo and then inspect its fields using different programming languages. Custom models must have names starting with 'x_' and have state set to 'manual'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'ir.model', 'create', [{\n    'name': \"Custom Model\",\n    'model': \"x_custom_model\",\n    'state': 'manual',\n}])\nmodels.execute_kw(db, uid, password, 'x_custom_model', 'fields_get', [], {'attributes': ['string', 'help', 'type']})\n```\n\nLANGUAGE: php\nCODE:\n```\n$models->execute_kw($db, $uid, $password, 'ir.model', 'create', array(array(\n    'name' => \"Custom Model\",\n    'model' => 'x_custom_model',\n    'state' => 'manual'\n)));\n$models->execute_kw($db, $uid, $password, 'x_custom_model', 'fields_get', array(), array('attributes' => array('string', 'help', 'type')));\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'ir.model', 'create', [{\n    name: \"Custom Model\",\n    model: 'x_custom_model',\n    state: 'manual'\n}])\nfields = models.execute_kw(db, uid, password, 'x_custom_model', 'fields_get', [], {attributes: %w(string help type)})\n```\n\nLANGUAGE: java\nCODE:\n```\nmodels.execute(\n    \"execute_kw\", asList(\n        db, uid, password,\n        \"ir.model\", \"create\",\n        asList(new HashMap<String, Object>() {{\n            put(\"name\", \"Custom Model\");\n            put(\"model\", \"x_custom_model\");\n            put(\"state\", \"manual\");\n        }})\n));\nfinal Object fields = models.execute(\n    \"execute_kw\", asList(\n        db, uid, password,\n        \"x_custom_model\", \"fields_get\",\n        emptyList(),\n        new HashMap<String, Object> () {{\n            put(\"attributes\", asList(\n                    \"string\",\n                    \"help\",\n                    \"type\"));\n        }}\n));\n```\n\nLANGUAGE: go\nCODE:\n```\nvar id int64\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"ir.model\", \"create\",\n    []map[string]string{\n        {\n            \"name\":  \"Custom Model\",\n            \"model\": \"x_custom_model\",\n            \"state\": \"manual\",\n        },\n    },\n}, &id); err != nil {\n    log.Fatal(err)\n}\nrecordFields := map[string]string{}\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"x_custom_model\", \"fields_get\",\n    []any{},\n    map[string][]string{\n        \"attributes\": {\"string\", \"help\", \"type\"},\n    },\n}, &recordFields); err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a URL Route with Parameter in Odoo Python Controller\nDESCRIPTION: This snippet demonstrates how to create a route in an Odoo controller that accepts a name parameter and displays it. It uses the @http.route decorator to define the URL pattern.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@http.route('/academy/<name>/', auth='public', website=True)\ndef teacher(self, name):\n    return '<h1>{}</h1>'.format(name)\n```\n\n----------------------------------------\n\nTITLE: Registering Non-Odoo Base TestCase Classes - Python\nDESCRIPTION: Shows how to manually apply default Odoo test tags to custom TestCase classes that do not inherit from Odoo's BaseCase. This ensures the tests are included in the default suite. Dependencies include Python's unittest library and Odoo's tagging system. Inputs are any standard unittest.TestCase class, with outputs being greater integration in Odoo's test discoverability.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport unittest\nfrom odoo.tests import tagged\n\n@tagged('standard', 'at_install')\nclass SmallTest(unittest.TestCase):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of an Odoo XML Data File\nDESCRIPTION: This snippet shows the fundamental structure of an Odoo XML data file. It consists of a root `<odoo>` element which encloses one or more operation elements (like `<record>`, `<function>`, etc.) that define or manipulate data within the Odoo system. The file is processed sequentially.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/data.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- the root elements of the data file -->\n<odoo>\n    <operation/>\n    ...\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Search View Structure in Odoo XML\nDESCRIPTION: Shows the basic structure of a search view. Search views are used to filter content in other views like list and graph views.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_47\n\nLANGUAGE: xml\nCODE:\n```\n<search>\n    ...\n</search>\n```\n\n----------------------------------------\n\nTITLE: Switching Odoo Account using Mobile API in JavaScript\nDESCRIPTION: Triggers the native account switching interface within the Odoo mobile application, allowing the user to change the logged-in Odoo account. This function takes no arguments and returns a jQuery Deferred object.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/mobile.rst#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmobile.methods.switchAccount();\n```\n\n----------------------------------------\n\nTITLE: Registering Odoo Widget as Client Action in JavaScript\nDESCRIPTION: Registers the HomePage widget as a client action, allowing it to be called and displayed from the menu system.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\ninstance.web.client_actions.add(\n    'petstore.homepage', 'instance.oepetstore.HomePage');\n```\n\n----------------------------------------\n\nTITLE: Fetching and Passing ORM Data from Controller (Python)\nDESCRIPTION: This updated controller method retrieves records from the 'academy.teachers' model. It accesses the model environment using `http.request.env['academy.teachers']` and calls the `search([])` method to fetch all records. The resulting recordset is passed to the 'academy.index' template under the 'teachers' key.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass Academy(http.Controller):\n\n     @http.route('/academy/academy/', auth='public')\n     def index(self, **kw):\n         Teachers = http.request.env['academy.teachers']\n         return http.request.render('academy.index', {\n             'teachers': Teachers.search([])\n         })\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query in Odoo Upgrade Script\nDESCRIPTION: This example demonstrates how to execute a SQL query in an Odoo upgrade script. It updates partner names by appending an exclamation mark and logs the number of affected records.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/upgrades/upgrade_scripts.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\n_logger = logging.getLogger(__name__)\n\n\ndef migrate(cr, version):\n    cr.execute(\"UPDATE res_partner SET name = name || '!'\")\n    _logger.info(\"Updated %s partners\", cr.rowcount)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Model Field Metadata with fields_get via XML-RPC in Ruby\nDESCRIPTION: This Ruby snippet retrieves descriptive metadata (label, help, type) for fields in res.partner using the 'fields_get' method via XML-RPC. It sends the list of attributes to fetch and expects results as a hash per field. Assumes connectivity setup and authentication are complete.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'fields_get', [], {attributes: %w(string help type)})\n```\n\n----------------------------------------\n\nTITLE: Adding Chatter to an Odoo Form View in XML\nDESCRIPTION: Defines an Odoo form view for the 'business.trip' model. It incorporates the '<chatter>' element, which renders the messaging interface (chatter) on the form. The example demonstrates setting the 'open_attachments' attribute to true, making the attachment section initially expanded.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/mixins.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"business_trip_form\" model=\"ir.ui.view\">\n    <field name=\"name\">business.trip.form</field>\n    <field name=\"model\">business.trip</field>\n    <field name=\"arch\" type=\"xml\">\n        <form string=\"Business Trip\">\n            <!-- Your usual form view goes here\n            ...\n            Then comes chatter integration with options you might want to set -->\n            <chatter open_attachments=\"True\"/>\n        </form>\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Rendering Dashboard Items with t-foreach and Dynamic Components - Owl XML\nDESCRIPTION: This XML template snippet uses Owl's t-foreach directive to iterate over dashboard items, dynamically rendering DashboardItem wrappers. For each item object, it computes its props (using a props function if available), and renders the associated dynamic component with those props. The snippet requires an 'items' array, a 'statistics' data object, and relies on Owl's support for dynamic components and props; it outputs structured dashboard UI and is constrained to Owl templating syntax.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/discover_js_framework/02_build_a_dashboard.rst#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<t t-foreach=\"items\" t-as=\"item\" t-key=\"item.id\">\n   <DashboardItem size=\"item.size || 1\">\n      <t t-set=\"itemProp\" t-value=\"item.props ? item.props(statistics) : {'data': statistics}\"/>\n      <t t-component=\"item.Component\" t-props=\"itemProp\" />\n   </DashboardItem>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Defining Odoo Data using a CSV File (Example: res.country.state)\nDESCRIPTION: This snippet shows the content of a CSV file (`res.country.state.csv`) used for bulk data definition in Odoo. The first row declares the field names, including the special `id` for the external identifier. Subsequent rows define individual records for the `res.country.state` model, specifying the external ID, the related country's external ID (`country_id/id`), the state name, and the state code. This format is often used for data like access rights or, as shown here, geographical data.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/data.rst#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nid,country_id/id,name,code\nstate_us_al,base.us,\"Alabama\",AL\nstate_us_ak,base.us,\"Alaska\",AK\nstate_us_az,base.us,\"Arizona\",AZ\nstate_us_ar,base.us,\"Arkansas\",AR\nstate_us_ca,base.us,\"California\",CA\nstate_us_co,base.us,\"Colorado\",CO\nstate_us_ct,base.us,\"Connecticut\",CT\nstate_us_de,base.us,\"Delaware\",DE\nstate_us_dc,base.us,\"District of Columbia\",DC\nstate_us_fl,base.us,\"Florida\",FL\nstate_us_ga,base.us,\"Georgia\",GA\nstate_us_hi,base.us,\"Hawaii\",HI\nstate_us_id,base.us,\"Idaho\",ID\nstate_us_il,base.us,\"Illinois\",IL\nstate_us_in,base.us,\"Indiana\",IN\nstate_us_ia,base.us,\"Iowa\",IA\nstate_us_ks,base.us,\"Kansas\",KS\nstate_us_ky,base.us,\"Kentucky\",KY\nstate_us_la,base.us,\"Louisiana\",LA\nstate_us_me,base.us,\"Maine\",ME\nstate_us_md,base.us,\"Maryland\",MD\nstate_us_ma,base.us,\"Massachusetts\",MA\nstate_us_mi,base.us,\"Michigan\",MI\nstate_us_mn,base.us,\"Minnesota\",MN\nstate_us_ms,base.us,\"Mississippi\",MS\nstate_us_mo,base.us,\"Missouri\",MO\nstate_us_mt,base.us,\"Montana\",MT\nstate_us_ne,base.us,\"Nebraska\",NE\nstate_us_nv,base.us,\"Nevada\",NV\nstate_us_nh,base.us,\"New Hampshire\",NH\nstate_us_nj,base.us,\"New Jersey\",NJ\nstate_us_nm,base.us,\"New Mexico\",NM\nstate_us_ny,base.us,\"New York\",NY\nstate_us_nc,base.us,\"North Carolina\",NC\nstate_us_nd,base.us,\"North Dakota\",ND\nstate_us_oh,base.us,\"Ohio\",OH\nstate_us_ok,base.us,\"Oklahoma\",OK\nstate_us_or,base.us,\"Oregon\",OR\nstate_us_pa,base.us,\"Pennsylvania\",PA\nstate_us_ri,base.us,\"Rhode Island\",RI\nstate_us_sc,base.us,\"South Carolina\",SC\nstate_us_sd,base.us,\"South Dakota\",SD\nstate_us_tn,base.us,\"Tennessee\",TN\nstate_us_tx,base.us,\"Texas\",TX\nstate_us_ut,base.us,\"Utah\",UT\nstate_us_vt,base.us,\"Vermont\",VT\nstate_us_va,base.us,\"Virginia\",VA\nstate_us_wa,base.us,\"Washington\",WA\nstate_us_wv,base.us,\"West Virginia\",WV\nstate_us_wi,base.us,\"Wisconsin\",WI\nstate_us_wy,base.us,\"Wyoming\",WY\n\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Assets Dynamically in Odoo (JavaScript)\nDESCRIPTION: Provides an example of using the `loadAssets` asynchronous helper function from `@web/core/assets` to dynamically load JavaScript files or entire asset bundles on demand. This is useful for loading libraries only when needed, improving initial page load performance. The function takes an object specifying assets to load and returns a Promise that resolves when loading is complete.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/assets.rst#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait loadAssets({\n  // parameters defining assets to load go here\n})\n```\n\n----------------------------------------\n\nTITLE: Searching and Reading Records with search_read via XML-RPC in Ruby\nDESCRIPTION: This Ruby code searches for partners where 'is_company' is true, returning only 'name', 'country_id', and 'comment' fields for up to five records. Utilizes Odoo's 'search_read' shortcut to combine searching and reading, relying on the models interface and valid session state.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'search_read', [[['is_company', '=', true]]], {fields: %w(name country_id comment), limit: 5})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom JavaScript Class for Snippet Options\nDESCRIPTION: This snippet shows how to create a custom JavaScript class for snippet options, including built-in and custom methods. It also demonstrates how to register the class in the options registry.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module */\n\nimport options from 'web_editor.snippets.options';\n\nconst AirproofSnippet = options.Class.extend({\n   // Built-in method example\n   start: function() {\n      //...\n   }\n   // Custom method example\n   customMethodName: function() {\n      //...\n   }\n});\n\noptions.registry.AirproofSnippet = AirproofSnippet;\n\nexport default AirproofSnippet;\n```\n\n----------------------------------------\n\nTITLE: Overriding Methods and Calling Superclass Methods - Odoo JavaScript - JavaScript\nDESCRIPTION: Illustrates how to override methods in subclasses with Odoo's JavaScript class system and call the parent method using this._super(). The child method includes extra logic after invoking the superclass method. A warning is provided that _super is not a standard JS feature and is only safe during synchronous calls, requiring special handling for async logic.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar MySpanishClass = MyClass.extend({\n    say_hello: function() {\n        this._super();\n        console.log(\"translation in Spanish: hola\", this.name);\n    },\n});\n\nvar my_object = new MySpanishClass(\"Bob\");\nmy_object.say_hello();\n// print \"hello Bob \\n translation in Spanish: hola Bob\" in the console\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-company Record Rules in Odoo via XML\nDESCRIPTION: This XML snippet defines a record rule for the hr_appraisal_plan model, ensuring that records are either not assigned to a company or belong to one of the user's accessible companies (company_ids). Dependencies include Odoo's ir.rule mechanism and presence of the company_id field on the model. The domain_force attribute uses Odoo's domain syntax to restrict access; records are visible if the company_id is unset or within company_ids. The snippet is to be included in a data file loaded by an Odoo module; modifications require a module update.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/restrict_data_access.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<record model=\\\"ir.rule\\\" id=\\\"hr_appraisal_plan_comp_rule\\\">\n    <field name=\\\"name\\\">Appraisal Plan multi-company</field>\n    <field name=\\\"model_id\\\" ref=\\\"model_hr_appraisal_plan\\\"/>\n    <field name=\\\"domain_force\\\">[\n    '|', ('company_id', '=', False),\n         ('company_id', 'in', company_ids)\n]</field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Modifying Test Tags with Decorator - Python\nDESCRIPTION: Demonstrates the use of the @tagged decorator to customize test tagging for test discovery and filtering. This pattern is essential for controlling which tests run by default or under specific tags (e.g., not running unless explicitly selected). Requires Odoo's test suite and support for decorators in Python. Inputs are tag values and optional class inheritance, outputs are filtered test inclusion at execution time.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo.tests import TransactionCase, tagged\n\n@tagged('-standard', 'nice')\nclass NiceTest(TransactionCase):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Dashboard Item Object - JavaScript\nDESCRIPTION: This snippet defines the structure of a dashboard item as a JavaScript object for use in a generic dashboard system. The item specifies an id, description, associated component, optional size, and a props function to compute properties from statistic data. Dependencies include the StandardItem component and any required statistic data structure; the snippet is designed to be extended for additional items, and is expected to be consumed in a template that iterates over such items.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/discover_js_framework/02_build_a_dashboard.rst#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst item = {\n   id: \"average_quantity\",\n   description: \"Average amount of t-shirt\",\n   Component: StandardItem,\n   // size and props are optionals\n   size: 3,\n   props: (data) => ({\n      title: \"Average amount of t-shirt by order this month\",\n      value: data.average_quantity\n   }),\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Search View Structure in Odoo\nDESCRIPTION: This XML snippet demonstrates a complete search view structure with different types of filters, including a text filter, a user filter, and a group by filter. It shows the basic implementation pattern for search views.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_62\n\nLANGUAGE: xml\nCODE:\n```\n<search>\n    <filter string=\"My Custom Name\" domain=\"[('name', 'ilike', 'AAA')]\"/>\n    <filter string=\"My orders\" domain=\"[('user_id', '=', uid)]\"/>\n    <filter string=\"Category\" context=\"{'group_by': 'category_id'}\"/>\n</search>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Device Updates via Longpolling Listeners - Odoo JavaScript\nDESCRIPTION: Demonstrates how to subscribe to value changes from a device using the DeviceProxy.add_listener method. Registers a callback (_onValueChange) to handle status updates pushed from the IoT Box over longpolling. Dependencies: DeviceProxy instance and callback definition. Inputs: callback function; Outputs: invoked on data changes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/connect_device.rst#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\niot_device.add_listener(this._onValueChange.bind(this));\\n\\n_onValueChange: function (result) {\\n    ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Python Expressions in JavaScript using py_js\nDESCRIPTION: Demonstrates how to use the evaluateExpr function from @web/core/py_js/py to evaluate Python expressions in JavaScript. This is useful for handling Python modifiers in views that need to be evaluated by the browser.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/framework_overview.rst#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { evaluateExpr } from \"@web/core/py_js/py\";\n\nevaluateExpr(\"1 + 2*{'a': 1}.get('b', 54) + v\", { v: 33 }); // returns 142\n```\n\n----------------------------------------\n\nTITLE: Disabling Number Formatting for Integer Field in XML\nDESCRIPTION: Illustrates how to prevent automatic formatting of an integer field's value according to locale settings by setting the 'format' option to false.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"int_value\" options='{\"format\": false}' />\n```\n\n----------------------------------------\n\nTITLE: Defining an Owl Component Template in XML (Odoo)\nDESCRIPTION: Defines a simple Owl component template using Odoo's QWeb syntax within an XML file. This template, named 'your_module.YourComponent', renders the static text 'Hello, World!'. It serves as the visual structure for the corresponding JavaScript component and should be placed in the module's static directory (e.g., `/your_module/static/src/portal_component/your_component.xml`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/frontend_owl_components.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<templates xml:space=\"preserve\">\n    <t t-name=\"your_module.YourComponent\">\n        Hello, World!\n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Asserting Database Query Count in Odoo Tests (Python)\nDESCRIPTION: Demonstrates using the `assertQueryCount` context manager within an Odoo Python test case (likely inheriting from `odoo.tests.BaseCase`). This method asserts that the code executed within the `with` block performs exactly the specified number of SQL queries (11 in this example). It is used for performance testing to ensure operations do not exceed expected database interaction levels.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertQueryCount(11):\n    do_something()\n```\n\n----------------------------------------\n\nTITLE: Patching an Owl Component's `setup` Method\nDESCRIPTION: Shows how to patch an Owl component, which is typically an ES6 class. Following best practices, the component's `setup` method (a prototype method) is patched to add custom logic, such as invoking a hook (`useMyHook`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/patching_code.rst#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\npatch(MyComponent.prototype, {\n  setup() {\n    useMyHook();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Python Test Class for Running Tours\nDESCRIPTION: Python test class that inherits from HTTPCase and launches a tour for testing using the start_tour method.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef test_your_test(self):\n    # Optional Setup\n    self.start_tour(\"/web\", \"your_tour_name\", login=\"admin\")\n    # Optional verifications\n```\n\n----------------------------------------\n\nTITLE: Formatting Supported Import/Export Statements for Odoo Transpiler\nDESCRIPTION: Provides examples of JavaScript `import` and `export` statement formatting that are correctly processed by Odoo's native module transpiler. This includes variations in leading whitespace and the presence of certain multi-line comments, as long as the keywords `import` or `export` are not preceded by non-space characters on the same line and do not appear at the start of a line within a multi-line comment or string.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_modules.rst#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// supported\nimport X from \"xxx\";\nexport X;\n  export default X;\n    import X from \"xxx\";\n\n/*\n * import X ...\n */\n\n/*\n * export X\n */\n```\n\n----------------------------------------\n\nTITLE: Implementing Migration Function in Python for Odoo Upgrade Scripts\nDESCRIPTION: This snippet shows the basic structure of the migrate function required in Odoo upgrade scripts. It takes a database cursor and version as parameters, allowing for database operations and version-specific migrations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/upgrades/upgrade_scripts.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef migrate(cr, version):\n   :param cr: current database cursor\n   :type cr: :class:`~odoo.sql_db.Cursor`\n   :param str version: installed version of the module\n```\n\n----------------------------------------\n\nTITLE: Exposing Reactive Clicker Service API - Odoo Owl JavaScript\nDESCRIPTION: This JavaScript code exports a reactive state object containing the current number of clicks, together with an increment function to update clicks. This pattern is used for an Owl service or hook, making the click counter reactive and sharable across multiple components (such as systray and client action). The code requires Owl's reactive API and useService/useState or equivalent for consumption. State changes will automatically propagate to dependent components.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/master_odoo_web_framework/01_build_clicker_game.rst#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst state = reactive({ clicks: 0 });\\n...\\nreturn {\\n   state,\\n   increment(inc) {\\n      state.clicks += inc\\n   }\\n};\n```\n\n----------------------------------------\n\nTITLE: Inspecting Model Field Metadata with fields_get via XML-RPC in Java\nDESCRIPTION: This Java snippet demonstrates fetching field metadata (labels, help texts, types) for res.partner with 'fields_get', utilizing the models proxy and Java maps. Assumes prior session authentication; returns a map with field names as keys and their meta-descriptions as values.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_28\n\nLANGUAGE: java\nCODE:\n```\n(Map<String, Map<String, Object>>)models.execute(\"execute_kw\", asList(\n    db, uid, password,\n    \"res.partner\", \"fields_get\",\n    emptyList(),\n    new HashMap() {{\n        put(\"attributes\", asList(\"string\", \"help\", \"type\"));\n    }}\n));\n```\n\n----------------------------------------\n\nTITLE: Using Newline to Start New Rows in Odoo Form Group - XML\nDESCRIPTION: This snippet demonstrates how to insert a newline element within a group to force a new row before the usual column filling is complete. Useful for custom layouts where grouping and row breaks are required. Placed within group elements in a form.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<form>\\n    <group>\\n        ...\\n        <newline/>\\n        ...\\n    </group>\\n</form>\n```\n\n----------------------------------------\n\nTITLE: Registering a Module for Frontend Translation Odoo Python\nDESCRIPTION: This advanced Python example demonstrates how to expose server module translations to the frontend by customizing the `ir.http` model's `_get_translation_frontend_modules_name` class method in Odoo. By appending the module to the return value, translations are made accessible in client-side JavaScript code. Requires knowledge of Odoo's ORM and inheritance system; expects module names as strings; output is an updated list of module names.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/translations.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import models\n\nclass IrHttp(models.AbstractModel):\n    _inherit = 'ir.http'\n\n    @classmethod\n    def _get_translation_frontend_modules_name(cls):\n        modules = super()._get_translation_frontend_modules_name()\n        return modules + ['your_module']\n```\n\n----------------------------------------\n\nTITLE: Mounting the Owl Application - Odoo/Web - JavaScript\nDESCRIPTION: This snippet represents the application mounting logic. It waits for the DOM readiness using Owl's 'whenReady', then mounts the Root component onto the document body with 'mountComponent'. This code should reside in the module's static 'app.js'. Dependencies: '@odoo/owl' for lifecycle management, '@web/env' for mounting, and the Root component. The code assumes the corresponding assets and templates are properly included in the bundle; input is the Root component, output is the live application element on the DOM.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/standalone_owl_application.rst#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { whenReady } from \\\"@odoo/owl\\\";\\nimport { mountComponent } from \\\"@web/env\\\";\\nimport { Root } from \\\"./root\\\";\\n\\nwhenReady(() => mountComponent(Root, document.body));\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Sub-Filters for Date Filters in Odoo XML\nDESCRIPTION: This XML snippet demonstrates creating a custom sub-filter (\"Last 30 Days\") within a date-based filter in an Odoo search view. The inner `<filter>` defines a specific `domain` using Python expressions involving `datetime` and `relativedelta` to filter records created within the last 30 days. Custom sub-filters defined this way are mutually exclusive with other default or custom sub-filters within the same parent date filter.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_52\n\nLANGUAGE: xml\nCODE:\n```\n<filter string=\"Creation Date\" name=\"filter_create_date\" date=\"create_date\">\n   <filter name=\"create_date_last_30_days\" string=\"Last 30 Days\" domain=\"[('create_date', '&gt;', datetime.datetime.combine(context_today() - relativedelta(days=30), datetime.time(23, 59, 59)).to_utc())]\"/>\n</filter>\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Odoo via XML-RPC - Go (kolo/xmlrpc)\nDESCRIPTION: Implements user authentication against the Odoo /xmlrpc/2/common endpoint in Go using the kolo/xmlrpc package. Provides credentials and captures the resulting uid or logs an error on failure. The uid should be retained for future requests.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nvar uid int64\\nif err := client.Call(\"authenticate\", []any{\\n    db, username, password,\\n    map[string]any{},\\n}, &uid); err != nil {\\n    log.Fatal(err)\\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Simple Notification with Odoo Notification Service (JavaScript)\nDESCRIPTION: This snippet shows how to display a basic notification using the Odoo notification service from JavaScript. After obtaining the notification service with useService, it calls add with a notification message. The notification appears on the user's screen with default styling and behavior. There are no explicit dependencies; this code assumes it is executed in an Odoo frontend environment which registers the notification service. Inputs are the message string and optional configuration objects; output is the UI notification.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/services.rst#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n  const notificationService = useService(\"notification\");\n  notificationService.add(\"I'm a very simple notification\");\n```\n\n----------------------------------------\n\nTITLE: Declaring Snippet Options Template (XML)\nDESCRIPTION: This XML snippet sets up a base template for declaring custom snippet options, using inheritance to extend Odoo's standard snippet options. The dependencies are Odoo's Website Builder and the snippet whose options are being defined. Input is the template node and the position directive for adding options; output is a structure ready for option elements. Limitation: actual options must be declared within the inner <xpath> block.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\\\"s_airproof_snippet_options\\\" inherit_id=\\\"website.snippet_options\\\" name=\\\"Airproof - Snippets Options\\\">\\n   <xpath expr=\\\".\\\" position=\\\"inside\\\">\\n      <!-- Options -->\\n   </xpath>\\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using sprintf with Translations in JavaScript\nDESCRIPTION: Shows the recommended way to inject user-provided values in translatable strings using _.str.sprintf with named arguments after translation, which makes strings more readable to translators.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nthis.$el.text(_.str.sprintf(\n    _t(\"Hello, %(user)s!\"), {\n    user: \"Ed\"\n}));\n```\n\n----------------------------------------\n\nTITLE: Interacting with Odoo ORM in Shell (Python)\nDESCRIPTION: Python code example executed within the Odoo shell (`odoo-bin shell`). It retrieves all partner records using `env[\"res.partner\"].search([])`, iterates through them to append an exclamation mark to each partner's name, and finally persists these changes to the database using `env.cr.commit()`. It's noted that committing is necessary as the shell runs in transaction mode by default, rolling back changes on exit otherwise.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nIn [1]: records = env[\"res.partner\"].search([])\n\nIn [2]: records\nOut[2]: res.partner(14, 26, 33, 21, 10)\n\nIn [3]: for partner in records:\n   ...:     partner.name = \"%s !\" % partner.name\n   ...:\n\nIn [4]: env.cr.commit()\n```\n\n----------------------------------------\n\nTITLE: Profiling within Odoo Tests\nDESCRIPTION: This snippet illustrates using the `self.profile()` shortcut within an Odoo test class (e.g., inheriting from `TransactionCase`) to profile a block of code. It is shown used alongside `assertQueryCount` to analyze both execution time and query generation. Profiling outside `assertQueryCount` captures queries potentially executed during context manager exit (e.g., ORM flushes).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/performance.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith self.profile():\n    with self.assertQueryCount(__system__=1211):\n        do_stuff()\n```\n\n----------------------------------------\n\nTITLE: Correct and Incorrect Translation Parameter Usage Odoo Python\nDESCRIPTION: This set of examples demonstrates proper and improper parameterization of translation strings in Python for Odoo modules. The 'Don't' example shows string interpolation before translating, which prevents correct language substitutions; the 'Do' example correctly passes variables as parameters to the translation function for accurate translation context. Requires Odoo's translation mechanism; inputs include message templates and dynamic variables; outputs are fully translated messages.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/translations.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n_(\"Scheduled meeting with %s\" % invitee.name)\n```\n\nLANGUAGE: python\nCODE:\n```\n_(\"Scheduled meeting with %s\", invitee.name)\n```\n\n----------------------------------------\n\nTITLE: Creating a Sheet for Responsive Odoo Form Layout - XML\nDESCRIPTION: This example sets up an Odoo form with a sheet element to create a responsive, centered page layout with margins. Sheet is recommended for modern, visually balanced forms. It is usually used as the primary content wrapper, containing one or more group elements as children.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<form>\\n    <sheet>\\n        ...\\n    </sheet>\\n</form>\n```\n\n----------------------------------------\n\nTITLE: Extending Odoo JavaScript Classes (Inheritance) - JavaScript\nDESCRIPTION: Demonstrates subclassing in Odoo's JavaScript class pattern using Class.extend. The subclass, MySpanishClass, overrides the 'say_hello' method to provide new functionality (a Spanish translation). Maintains compatibility with the original base class structure.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar MySpanishClass = MyClass.extend({\n    say_hello: function() {\n        console.log(\"hola\", this.name);\n    },\n});\n\nvar my_object = new MySpanishClass(\"Bob\");\nmy_object.say_hello();\n// print \"hola Bob\" in the console\n```\n\n----------------------------------------\n\nTITLE: Defining Company-Dependent and Context-Aware Computed Fields in Odoo Python Models\nDESCRIPTION: Demonstrates defining a text field (`company_info`) whose value varies per company by setting `company_dependent=True`. It also shows a computed field (`display_info`) that relies on the current company context, achieved using the `@api.depends_context('company')` decorator, ensuring it recalculates when the active company changes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/company.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import api, fields, models\n\nclass Record(models.Model):\n    _name = 'record.public'\n\n    info = fields.Text()\n    company_info = fields.Text(company_dependent=True)\n    display_info = fields.Text(string='Infos', compute='_compute_display_info')\n\n    @api.depends_context('company')\n    def _compute_display_info(self):\n        for record in self:\n            record.display_info = record.info + record.company_info\n```\n\n----------------------------------------\n\nTITLE: Conditional Tour Step with Advanced Run Function\nDESCRIPTION: Example of a tour step that's conditionally active for mobile and enterprise modes, with a custom run function that performs a click action.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    isActive: [\"mobile\", \"enterprise\"],\n    content: \"Click on Add a product link\",\n    trigger: 'a:contains(\"Add a product\")',\n    tooltipPosition: \"bottom\",\n    async run(helpers) { //Exactly the same as run: \"click\"\n      helpers.click();\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Best Practices: Initializing Owl Components Using setup (JavaScript)\nDESCRIPTION: This code illustrates correct and incorrect component initialization in Owl/Odoo. The correct example overrides the setup method for initialization, while the incorrect one uses a constructor, which is prohibited in Owl. The pattern ensures compatibility and extensibility. No dependencies other than Owl basics. Inputs: props/context via setup; outputs: configured component. Ensures future-proofing and base class predictability.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// correct:\nclass MyComponent extends Component {\n    setup() {\n        // initialize component here\n    }\n}\n\n// incorrect. Do not do that!\nclass IncorrectComponent extends Component {\n    constructor(parent, props) {\n        // initialize component here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Cookie via the Cookie Service API (JavaScript)\nDESCRIPTION: This code calls the setCookie method on the cookieService to set the value of the 'hello' cookie to 'odoo'. This demonstrates the API for manipulating cookies using Odoo's cookie service. It requires the cookie service to be available in the component or environment. Inputs include the cookie name, value, and optional ttl. Outputs: Cookie set in the browser. No return value or response is described.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/services.rst#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncookieService.setCookie(\"hello\", \"odoo\");\n```\n\n----------------------------------------\n\nTITLE: Eager vs Lazy Translation Lookup Odoo JavaScript\nDESCRIPTION: This pair of JavaScript examples demonstrate bad and good approaches to mapping error codes to localized messages. The 'bad' approach evaluates `_t` translations at module load, locking language. The 'good' approach uses `_lt` for lazy evaluation, yielding fresh translations per context. Requires Odoo's web.core module. Inputs are error codes; outputs are localized error strings resolved at error display time.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/translations.rst#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar core = require('web.core');\nvar _t = core._t;\nvar map_title = {\n    access_error: _t('Access Error'),\n    missing_error: _t('Missing Record'),\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar core = require('web.core');\nvar _lt = core._lt;\nvar map_title = {\n    access_error: _lt('Access Error'),\n    missing_error: _lt('Missing Record'),\n};\n```\n\n----------------------------------------\n\nTITLE: Server Communication Examples\nDESCRIPTION: Examples of using ORM and RPC services to communicate with the server for model method calls and controller routes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreturn this.orm.call(\"some.model\", \"some_method\", [some, args]);\n\nreturn this.rpc(\"/some/route/\", {\n    some: param,\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring an Odoo JavaScript Submodule - Simple Assignment - JavaScript\nDESCRIPTION: Illustrates the minimal pattern to declare a submodule in Odoo by assigning a function to the global odoo variable. Variables, classes, or objects can be attached to the local namespace for exposure to the web client or other modules. This provides a clear entry point and consistent structure for loading custom web modules.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nodoo.oepetstore = function(instance, local) {\n    local.xxx = ...;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Property Offer Fields Structure in Odoo\nDESCRIPTION: Table structure defining the fields for property offers, including price (Float), status (Selection), partner_id (Many2one), and property_id (Many2one). Specifies field types, attributes, and valid values where applicable.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/07_relations.rst#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n========================= ================================ ============= =================\nField                     Type                             Attributes    Values\n========================= ================================ ============= =================\nprice                     Float\nstatus                    Selection                        no copy       Accepted, Refused\npartner_id                Many2one (``res.partner``)       required\nproperty_id               Many2one (``estate.property``)   required\n========================= ================================ ============= =================\n```\n\n----------------------------------------\n\nTITLE: Defining Search Fields in Odoo XML View\nDESCRIPTION: This XML snippet defines fields within an Odoo search view. It shows standard field definitions (`name`, `amount`, `currency_id`) and a field (`ref`) using `filter_domain` to apply a custom search logic based on the input value (`self`). The `filter_domain` allows for more complex filtering than the default `operator` attribute.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_49\n\nLANGUAGE: xml\nCODE:\n```\n<search>\n    <field name=\"name\" string=\"My Custom Name\"/>\n    <field name=\"amount\"/>\n    <field name=\"currency_id\"/>\n    <field name=\"ref\" filter_domain=\"[('name', 'like', self)]\"/>\n</search>\n```\n\n----------------------------------------\n\nTITLE: Populating an Odoo SQL View Model via _table_query Property (Python)\nDESCRIPTION: This snippet demonstrates defining the _table_query property as a dynamic SQL SELECT statement, enabling Odoo to generate the view based on context (such as company or currency switching). It references _select() and _from() methods, which must return valid SQL fragments. This method is most suitable when the SQL must adapt to runtime conditions, and it supports the same split-query pattern as overriding init().\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/create_reports.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@property\ndef _table_query(self):\n    return 'SELECT %s FROM %s' % (self._select(), self._from())\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Rainbow Man Effect with the Effect Service (JavaScript)\nDESCRIPTION: This code uses the effect service to add a 'rainbow_man' effect overlay on the page, with an optional custom message. The effectService is retrieved via useService and its add method is called with an options object. Required: effect service in environment. Inputs: Effect type and message options. Outputs: Visual effect display. Limitations: Only the 'rainbow_man' effect is built-in.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/services.rst#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst effectService = useService(\"effect\");\neffectService.add({\n  type: \"rainbow_man\", // can be omitted, default type is already \"rainbow_man\"\n  message: \"Boom! Team record for the past 30 days.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Odoo via XML-RPC - Java (Apache XML-RPC)\nDESCRIPTION: Uses the Java Apache XML-RPC library to authenticate a user with Odoo's /xmlrpc/2/common endpoint. Calls 'authenticate' with the necessary parameters and receives a uid used for further user-specific API access.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nint uid = (int)client.execute(common_config, \"authenticate\", asList(db, username, password, emptyMap()));\n```\n\n----------------------------------------\n\nTITLE: Defining Security Rule for Shareable Records in Odoo XML\nDESCRIPTION: Creates an Odoo security rule (`ir.rule`) for models where records can either have no specific company or belong to one. The `domain_force` `['|', ('company_id', '=', False), ('company_id', 'in', company_ids)]` grants access if the record's `company_id` is empty or matches one of the user's currently active companies (`company_ids`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/company.rst#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Shareable Records -->\n<record model=\"ir.rule\" id=\"record_shared_company_rule\">\n    <field name=\"name\">Shared Record: multi-company</field>\n    <field name=\"model_id\" ref=\"model_record_shared\"/>\n    <field name=\"global\" eval=\"True\"/>\n    <field name=\"domain_force\">\n        ['|', ('company_id', '=', False), ('company_id', 'in', company_ids)]\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Defining Window Action via XML (Odoo, XML)\nDESCRIPTION: This XML snippet defines an ir.actions.act_window record in Odoo's data files, pointing to a custom graph view for a specific model. It requires Odoo's ORM, the referenced model (some.model), and the custom view (my_specific_view). 'view_mode' is set to 'graph' and 'view_id' points to the specific graph view, ensuring the window action always uses this specialized view. This XML should be placed in module data files (e.g., within a <data> section) and loaded during module installation or updates.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/actions.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<record model=\\\"ir.actions.act_window\\\" id=\\\"test_action\\\">\\n    <field name=\\\"name\\\">A Test Action</field>\\n    <field name=\\\"res_model\\\">some.model</field>\\n    <field name=\\\"view_mode\\\">graph</field>\\n    <field name=\\\"view_id\\\" ref=\\\"my_specific_view\\\"/>\\n</record>\n```\n\n----------------------------------------\n\nTITLE: Invalid `super` Usage Examples (Warning)\nDESCRIPTION: Shows examples of incorrect `super` usage within object literals using standard function expressions or arrow functions. Using `super` in these contexts will result in a `SyntaxError` because `super` is only valid within class methods or object literal methods using method syntax.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/patching_code.rst#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = {\n  a: function () {\n    // Throws: \"Uncaught SyntaxError: 'super' keyword unexpected here\"\n    super.a();\n  },\n  b: () => {\n    // Throws: \"Uncaught SyntaxError: 'super' keyword unexpected here\"\n    super.b();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Search Panel with Department and Manager Fields in Odoo\nDESCRIPTION: This XML example shows a searchpanel implementation with two fields: department_id and manager_id. The manager field has a domain that depends on the selected department, demonstrating field relationships in search panels.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_66\n\nLANGUAGE: xml\nCODE:\n```\n<searchpanel>\n    <field name=\"department_id\"/>\n    <field name=\"manager_id\" select=\"multi\" domain=\"[('department_id', '=', department_id)]\"/>\n</searchpanel>\n```\n\n----------------------------------------\n\nTITLE: Ensuring Resource Cleanup with try...finally (JavaScript)\nDESCRIPTION: This snippet shows the correct way to handle potential errors when resource cleanup is necessary. The code that might throw (`someFunction`) is placed within a `try` block, and the essential cleanup code (`removeEventListener`) is placed in a `finally` block, guaranteeing its execution regardless of whether an error occurs in the `try` block.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/error_handling.rst#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\neventTarget.addEventListener(\"event\", handler);\ntry {\n  someFunction();\n} finally {\n  eventTarget.removeEventListener(\"event\", handler);\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Odoo Record Field Caching in Python\nDESCRIPTION: This code demonstrates Odoo's record cache. The first access to `record.name` reads the value from the database. Subsequent accesses retrieve the value directly from the cache, avoiding additional database queries.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nrecord.name             # first access reads value from database\nrecord.name             # second access gets value from cache\n```\n\n----------------------------------------\n\nTITLE: Defining Groups and Fields for Odoo Form View Column Layouts - XML\nDESCRIPTION: This code demonstrates the structure of group elements for organizing fields into columns and complex nested layouts in an Odoo form view. Each group can have attributes like string, col, and colspan to modify display and layout, and groups can be nested for multi-level sectioning. Fields defined in groups automatically generate labels, and visual arrangements follow the Odoo UI design patterns.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<group>\\n    <field name=\\\"a\\\" string=\\\"custom\\\"/>\\n    <field name=\\\"b\\\"/>\\n</group>\\n<group string=\\\"title 1\\\">\\n    <group string=\\\"title 2\\\">\\n        <field name=\\\"c\\\"/>\\n        <field name=\\\"d\\\"/>\\n    </group>\\n    <group>\\n        <field name=\\\"e\\\"/>\\n        <field name=\\\"f\\\"/>\\n        <field name=\\\"g\\\"/>\\n    </group>\\n</group>\\n<group col=\\\"12\\\">\\n    <group colspan=\\\"8\\\">\\n        <field name=\\\"h\\\"/>\\n    </group>\\n    <group colspan=\\\"4\\\">\\n        <field name=\\\"i\\\"/>\\n    </group>\\n</group>\n```\n\n----------------------------------------\n\nTITLE: Implementing TagsList Component in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement a TagsList component in JavaScript using Odoo OWL. It shows how to create a parent component that uses TagsList and provides tag data with various attributes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, xml } from \"@odoo/owl\";\nimport { TagsList } from \"@web/core/tags_list/tags_list\";\n\nclass Parent extends Component {\n  static template = xml`<TagsList tags=\"tags\" />`;\n  static components = { TagsList };\n\n  setup() {\n    this.tags = [{\n        id: \"tag1\",\n        text: \"Earth\"\n    }, {\n        colorIndex: 1,\n        id: \"tag2\",\n        text: \"Wind\",\n        onDelete: () => {...}\n    }, {\n        colorIndex: 2,\n        id: \"tag3\",\n        text: \"Fire\",\n        onClick: () => {...},\n        onDelete: () => {...}\n    }];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Demonstration Data (XML)\nDESCRIPTION: This XML file (`demo.xml`) uses Odoo's `<record>` tag to define demonstration data for the 'academy.teachers' model. Each record creates a new teacher entry in the database with a specified 'name'. This data is only loaded if Odoo is started with demonstration data enabled. The file must be listed in the `__manifest__.py` 'demo' section.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n\n    <record id=\"padilla\" model=\"academy.teachers\">\n        <field name=\"name\">Diana Padilla</field>\n    </record>\n    <record id=\"carroll\" model=\"academy.teachers\">\n        <field name=\"name\">Jody Carroll</field>\n    </record>\n    <record id=\"vaughn\" model=\"academy.teachers\">\n        <field name=\"name\">Lester Vaughn</field>\n    </record>\n\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal Kanban View with QWeb in Odoo XML\nDESCRIPTION: This snippet shows how to define a basic Kanban view for the 'property' model using Odoo's QWeb XML templating engine. It uses the <kanban> root element, with an embedded <templates> section that must include a root template named 'kanban-box'. The template renders a card for each record showing only the 'name' field. To use this snippet, add it to the view definition and ensure that the view_mode of the related 'ir.actions.act_window' includes 'kanban'. The only required field displayed is 'name', and there are no conditional elements or additional display logic in this minimal setup.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/14_qwebintro.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<kanban>\\n    <templates>\\n        <t t-name=\"kanban-box\">\\n            <div>\\n                <field name=\"name\"/>\\n            </div>\\n        </t>\\n    </templates>\\n</kanban>\n```\n\n----------------------------------------\n\nTITLE: Creating Records in Odoo Model using XML-RPC in Java\nDESCRIPTION: This Java example creates a new res.partner setting the 'name' field to 'New Partner' using 'create' via XML-RPC. Uses HashMap for field mappings and expects an integer ID as the response. Requires configuration of the models interface and authenticated session.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_38\n\nLANGUAGE: java\nCODE:\n```\nfinal Integer id = (Integer)models.execute(\"execute_kw\", asList(\n    db, uid, password,\n    \"res.partner\", \"create\",\n    asList(new HashMap() {{ put(\"name\", \"New Partner\"); }})\n));\n```\n\n----------------------------------------\n\nTITLE: Escaping and Marking HTML as Safe in Odoo and MarkupSafe (Python)\nDESCRIPTION: Illustrates the use of utility functions and classes for HTML escaping and marking content as safe within Odoo and MarkupSafe. Functions such as html_escape and markupsafe.escape are aliases with single escaping, html_sanitize is available, and MarkupSafe.Markup can be used for explicit safety declarations. MarkupSafe.Markup is an assertion-based API and should be applied with caution, as it does not verify true safety. These functions escape or mark strings, while to_text performs type conversion without explicitly managing safety. The code is referenced with namespaced Python identifiers and their documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n* :func:`~odoo.tools.misc.html_escape` and :func:`markupsafe.escape` (they are\n  aliases, and have no risk of double-escaping).\n* :func:`~odoo.tools.mail.html_sanitize`.\n* :class:`markupsafe.Markup`.\n\n  .. warning:: :class:`markupsafe.Markup` is an unsafe API, it's an *assertion*\n               that you want the content to be markup-safe but necessarily can\n               not check that, it should be used with care.\n* :func:`~odoo.tools.pycompat.to_text` does not mark the content as safe, but\n  will not strip that information from safe content.\n\n```\n\n----------------------------------------\n\nTITLE: HTML-Escaping Output with t-out in QWeb XML Templates\nDESCRIPTION: Demonstrates usage of the t-out directive to inject a variable's value into the template output, ensuring the value is HTML-escaped to mitigate XSS vulnerabilities. The <t t-out=\"value\"/> node is typically enclosed in another element, such as <p>. The 'value' variable should be available in the QWeb context, and the output will be properly escaped.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<p><t t-out=\"value\"/></p>\n```\n\n----------------------------------------\n\nTITLE: Accessing Company-Dependent Fields in Odoo Python\nDESCRIPTION: Illustrates how to read the value of a company-dependent field. Direct access retrieves the value associated with the current company (`self.env.company`), while using `record.with_company(company_B)` allows fetching the value specifically associated with `company_B`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/company.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Accessed as the main company (self.env.company)\nval = record.company_dependent_field\n\n# Accessed as the desired company (company_B)\nval = record.with_company(company_B).company_dependent_field\n# record.with_company(company_B).env.company == company_B\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Odoo Model and Field via API in Java\nDESCRIPTION: Demonstrates using the Odoo Web Services API (`execute` method, likely wrapping `execute_kw`) in Java to programmatically create a new model ('x_custom'), add a custom required character field ('x_name') to it, create a record within this new model, and finally read the created record. Both the model and the field are created with `state: 'manual'` to ensure they are activated. Requires casting results to appropriate types (e.g., Integer).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_46\n\nLANGUAGE: java\nCODE:\n```\nfinal Integer id = (Integer)models.execute(\n    \"execute_kw\", asList(\n        db, uid, password,\n        \"ir.model\", \"create\",\n        asList(new HashMap<String, Object>() {{\n            put(\"name\", \"Custom Model\");\n            put(\"model\", \"x_custom\");\n            put(\"state\", \"manual\");\n        }})\n));\nmodels.execute(\n    \"execute_kw\", asList(\n        db, uid, password,\n        \"ir.model.fields\", \"create\",\n        asList(new HashMap<String, Object>() {{\n            put(\"model_id\", id);\n            put(\"name\", \"x_name\");\n            put(\"ttype\", \"char\");\n            put(\"state\", \"manual\");\n            put(\"required\", true);\n        }})\n));\nfinal Integer record_id = (Integer)models.execute(\n    \"execute_kw\", asList(\n        db, uid, password,\n        \"x_custom\", \"create\",\n        asList(new HashMap<String, Object>() {{\n            put(\"x_name\", \"test record\");\n        }})\n));\n\nclient.execute(\n    \"execute_kw\", asList(\n        db, uid, password,\n        \"x_custom\", \"read\",\n        asList(asList(record_id))\n));\n```\n\n----------------------------------------\n\nTITLE: Disabling Active Header Template in XML\nDESCRIPTION: XML configuration to disable the default header template in Odoo Website Builder.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"website.template_header_default\" model=\"ir.ui.view\">\n   <field name=\"active\" eval=\"False\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Showing Snackbar with Action using Odoo Mobile API in JavaScript\nDESCRIPTION: Displays a snackbar message at the bottom of the screen, potentially with an action button. Requires an object argument with a 'message' key and an optional 'btn_text' key for the button label. The returned jQuery Deferred object resolves to `true` if the action button is clicked, and `false` if the snackbar is dismissed automatically.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/mobile.rst#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmobile.methods.showSnackBar({'message': 'Message is deleted', 'btn_text': 'Undo'}).then(function(result){\n    if(result){\n        // Do undo operation\n    }else{\n        // Snack Bar dismissed\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Calling the Original Method Using `super` in a Patch\nDESCRIPTION: Illustrates how to call the original (parent) method from within a patched method using the native `super` keyword. This allows extending the original functionality rather than completely replacing it. Note that `super` requires the containing function to be a method, not a standard function.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/patching_code.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npatch(object, {\n  fn() {\n    super.fn(...arguments);\n    // do other things\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding Free Product Price in Shop View - Odoo Website Extension in XML\nDESCRIPTION: This XML template demonstrates extending an existing website_sale view to hide the price of products when the price is zero, which is especially relevant for free academy courses. It uses an XPath selector for the product price element, conditional logic, and Odoo templating. Dependencies: the academy module, website_sale, and correct external IDs. Inputs are rendered products; outputs are modified views with price display conditional.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_39\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"product_item_hide_no_price\" inherit_id=\"website_sale.products_item\">\n    <xpath expr=\"//div[hasclass('product_price')]/b\" position=\"attributes\">\n        <attribute name=\"t-if\">product.price &gt; 0</attribute>\n    </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding One2many Field to Estate Property Type Model in Odoo\nDESCRIPTION: Adds an 'offer_ids' field to the estate.property.type model as the One2many inverse of the previously defined property_type_id field in estate.property.offer.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\noffer_ids = fields.One2many('estate.property.offer', 'property_type_id', string='Offers')\n```\n\n----------------------------------------\n\nTITLE: Registering a New Effect in the Effects Registry (JavaScript)\nDESCRIPTION: Demonstrates how to add a new visual effect called 'sepia' to the effects registry in Odoo. Defines a SepiaEffect component that overlays a sepia-toned div, and provides a sepiaEffectProvider factory function for the registry. Dependencies: @web/core/registry, @odoo/owl, and effect registry. Inputs: registry and component definition. Outputs: Effect available for use via effectService.add({type:'sepia'}). Limitations: Only components following provided API should be added.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/services.rst#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\nimport { Component, xml } from \"@odoo/owl\";\n\nclass SepiaEffect extends Component {\n  static template = xml`\n    <div style=\"\n        position: absolute;\n        left: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n        pointer-events: none;\n        background: rgba(124,87,0, 0.4);\n    \"></div>\n  `;\n}\n\nexport function sepiaEffectProvider(env, params = {}) {\n    return {\n        Component: SepiaEffect,\n    };\n}\n\nconst effectRegistry = registry.category(\"effects\");\neffectRegistry.add(\"sepia\", sepiaEffectProvider);\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo XML-RPC Connection Parameters - Go\nDESCRIPTION: Initializes configuration variables for Odoo XML-RPC API calls in Go. Declares url, db, username, and password as part of a multi-variable block, which are prerequisites for authentication functions. No package dependencies required for this initialization.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar (\\n    url = <insert server URL>\\n    db = <insert database name>\\n    username = \"admin\"\\n    password = <insert password for your admin user (default: admin)>\\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Collectors in Python Profiler\nDESCRIPTION: This example shows how to customize the profiler by explicitly specifying which collectors to use and configuring their options. It enables the SQL collector and the Periodic collector with a specific interval of 0.1 seconds for sampling stack traces.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/performance.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith Profiler(collectors=['sql', PeriodicCollector(interval=0.1)]):\n    do_stuff()\n```\n\n----------------------------------------\n\nTITLE: Defining a Complex Odoo Domain with Logical Operators\nDESCRIPTION: This snippet demonstrates a more complex Odoo domain using logical operators ('|' for OR, '!' for NOT, '&' for AND in prefix notation). It selects records where 'product_type' is 'service' OR the 'unit_price' is NOT between 1000 (inclusive) and 2000 (exclusive).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/06_basicviews.rst#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n['|',\n    ('product_type', '=', 'service'),\n    '!', '&',\n        ('unit_price', '>=', 1000),\n        ('unit_price', '<', 2000)]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Odoo Model and Field via API in Go\nDESCRIPTION: Demonstrates using the Odoo Web Services API (`models.Call` function, likely calling `execute_kw`) in Go to programmatically create a new model ('x_custom'), add a custom required character field ('x_name') to it, create a record within this new model, and finally read the created record. Both the model and the field are created with `state: 'manual'` to ensure they are activated. Includes explicit error handling.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_47\n\nLANGUAGE: go\nCODE:\n```\nvar id int64\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"ir.model\", \"create\",\n    []map[string]string{\n        {\n            \"name\":  \"Custom Model\",\n            \"model\": \"x_custom\",\n            \"state\": \"manual\",\n        },\n    },\n}, &id); err != nil {\n    log.Fatal(err)\n}\nvar fieldId int64\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"ir.model.fields\", \"create\",\n    []map[string]any{\n        {\n            \"model_id\": id,\n            \"name\":     \"x_name\",\n            \"ttype\":    \"char\",\n            \"state\":    \"manual\",\n            \"required\": true,\n        },\n    },\n}, &fieldId); err != nil {\n    log.Fatal(err)\n}\nvar recordId int64\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"x_custom\", \"create\",\n    []map[string]string{\n        {\"x_name\": \"test record\"},\n    },\n}, &recordId); err != nil {\n    log.Fatal(err)\n}\nvar recordFields []map[string]any\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"x_custom\", \"read\",\n    [][]int64{{recordId}},\n}, recordFields); err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Plural Message Handling Odoo Python\nDESCRIPTION: This Python code demonstrates how to properly handle plural forms in translated messages by providing complete sentences for each case, recognizing that languages differ significantly in pluralization rules. Inputs include a count variable; outputs are contextually appropriate messages. Requires parameterized translation tools in Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/translations.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nif invoice_count > 1:\n  msg = _(\\\"You have %(count)s invoices\\\", count=invoice_count)\nelse:\n  msg = _(\\\"You have one invoice\\\")\n```\n\n----------------------------------------\n\nTITLE: Consuming the Action Service for Navigation - Odoo Owl Framework - JavaScript\nDESCRIPTION: Illustrates accessing and using the 'action' service within a component to trigger standard Odoo actions, such as opening configuration via XML ID. Depends on '@web/core/utils/hooks' and the core 'action' service. Key methods: useService and doAction. Expects an action XML ID to execute predefined navigational logic inside Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/discover_js_framework/02_build_a_dashboard.rst#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useService } from \"@web/core/utils/hooks\";\n...\nsetup() {\n      this.action = useService(\"action\");\n}\nopenSettings() {\n      this.action.doAction(\"base_setup.action_general_configuration\");\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Inline List Views in Odoo with XML (XML)\nDESCRIPTION: This XML snippet shows embedding an inline list view into a form. The parent form displays a description and a One2many field 'line_ids', with a list view inside it showing only 'field_1' and 'field_2'. This example is specific to customizing how child records are displayed for a relational field within a form view. Dependencies: an Odoo model with a One2many field; input is handled via the form interface; the list is limited to fields chosen for clarity.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <field name=\"description\"/>\n    <field name=\"line_ids\">\n        <list>\n            <field name=\"field_1\"/>\n            <field name=\"field_2\"/>\n        </list>\n    </field>\n</form>\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Odoo UI Button with Server Action in XML\nDESCRIPTION: This XML snippet demonstrates overriding a standard Odoo button's behavior. It modifies the 'sale.order' form view to replace the original 'action_confirm' object button calls with calls to a custom server action 'estate.action_x_estate_property_create_from_sale_order'. The server action definition includes Python code that first executes the original 'order.action_confirm()' method and then creates a new 'x_estate.property' record based on the sale order details. This approach allows adding custom logic around existing button actions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/importable_modules.rst#2025-04-23_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"view_sale_order_form\" model=\"ir.ui.view\">\n    <field name=\"name\">sale.order.form.inherit.estate</field>\n    <field name=\"model\">sale.order</field>\n    <field name=\"inherit_id\" ref=\"sale.view_order_form\" />\n    <field name=\"arch\" type=\"xml\">\n        <xpath expr=\"//button[@name='action_confirm'][@type='object']\" position=\"attributes\">\n            <attribute name=\"type\">action</attribute>\n            <attribute name=\"name\">estate.action_x_estate_property_create_from_sale_order</attribute>\n        </xpath>\n        <!-- since the button is present twice in the original view, we need to replace it twice -->\n        <xpath expr=\"//button[@name='action_confirm'][@type='object']\" position=\"attributes\">\n            <attribute name=\"type\">action</attribute>\n            <attribute name=\"name\">estate.action_x_estate_property_create_from_sale_order</attribute>\n        </xpath>\n    </field>\n</record>\n\n<record id=\"action_x_estate_property_create_from_sale_order\" model=\"ir.actions.server\">\n    <field name=\"name\">Confirm and create property from sale order</field>\n    <field name=\"model_id\" ref=\"sale.model_sale_order\"/>\n    <field name=\"state\">code</field>\n    <field name=\"code\"><![CDATA[\nfor order in records:\n    order.action_confirm()\n    property_type = env['x_estate.property.type'].sudo().search([('x_name', '=', 'Other')], limit=1)\n    property = env['x_estate.property'].sudo().create({\n        'x_name': order.name,\n        'x_expected_price': 0,\n        'x_selling_price': 0,\n        'x_sale_order_id': order.id,\n        'x_property_type_id': property_type.id,\n    })\n    ]]></field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Reading Record Fields via XML-RPC in PHP\nDESCRIPTION: This PHP example fetches specified fields ('name', 'country_id', 'comment') from the 'res.partner' model through the Odoo XML-RPC API. The 'fields' parameter defines which columns to retrieve. It assumes the presence of a configured models proxy and proper authentication data.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$models->execute_kw($db, $uid, $password, 'res.partner', 'read', array($ids), array('fields'=>array('name', 'country_id', 'comment')));\n```\n\n----------------------------------------\n\nTITLE: Notifying Progress in an Odoo Scheduled Action Batch (Python)\nDESCRIPTION: This Python snippet demonstrates how to use the `_notify_progress` method within an Odoo Scheduled Action (`ir.cron`) to inform the scheduler about the progress of a batch process. It takes the number of completed items (`done`) and remaining items (`remaining`) as arguments, allowing the scheduler to manage long-running tasks effectively.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/actions.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nself.env['ir.cron']._notify_progress(done=XX:int, remaining=XX:int)\n```\n\n----------------------------------------\n\nTITLE: Calling a Model Method in an Odoo Scheduled Action (Python)\nDESCRIPTION: This Python code snippet demonstrates the basic structure for the 'code' field within an Odoo Scheduled Action (`ir.cron`). It shows how to call a specific method (`method_name`) on the model associated with the cron job (`model`). The `model` variable is available within the execution context of the scheduled action.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/actions.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmodel.<method_name>()\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo Multi-Processing Workers for Production Use\nDESCRIPTION: Odoo server configuration for a production environment with 8 workers, memory limits, request and time constraints, and cron thread settings based on system resources.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/deploy.rst#2025-04-23_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[options]\nlimit_memory_hard = 1677721600\nlimit_memory_soft = 629145600\nlimit_request = 8192\nlimit_time_cpu = 600\nlimit_time_real = 1200\nmax_cron_threads = 1\nworkers = 8\n```\n\n----------------------------------------\n\nTITLE: Label Selection with CSS Classes in Odoo XML View - XML\nDESCRIPTION: This snippet shows a 'state' selection field rendered with the 'label_selection' widget and an options dictionary mapping field values to specific CSS classes. The view applies 'default' or 'danger' styling based on the field value, enhancing status display. Used in Odoo XML view files when selection choices require visual differentiation by CSS classes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<field\\n    name=\\\"state\\\"\\n    widget=\\\"label_selection\\\"\\n    options=\\\"{\\n        'classes': {\\n            'draft': 'default',\\n            'cancel': 'default',\\n            'none': 'danger',\\n        },\\n    }\\\"\\n/>\n```\n\n----------------------------------------\n\nTITLE: Loading Templates into QWeb2.Engine with add_template in JavaScript\nDESCRIPTION: Details the `add_template` method used to load templates into a `QWeb2.Engine` instance. Templates can be supplied as an XML string, a URL pointing to an XML file, or a DOM Document/Node object. This is useful for managing separate template namespaces, such as for Kanban views.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nQWeb2.Engine.add_template(templates)\n```\n\n----------------------------------------\n\nTITLE: XML Templates for Pet Store Homepage Components\nDESCRIPTION: Defines XML templates for the HomePage and MessageOfTheDay widgets, using Odoo's template system with QWeb. The templates define the basic structure of the homepage and the message display area.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<templates xml:space=\"preserve\">\n    <t t-name=\"HomePage\">\n        <div class=\"oe_petstore_homepage\">\n        </div>\n    </t>\n    <t t-name=\"MessageOfTheDay\">\n        <div class=\"oe_petstore_motd\">\n            <p class=\"oe_mywidget_message_of_the_day\"></p>\n        </div>\n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Enabling SMTP SSL/STARTTLS via Odoo Command-line\nDESCRIPTION: Instructs Odoo to use a secure connection (SSL/STARTTLS) when communicating with the configured SMTP server.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n--smtp-ssl\n```\n\n----------------------------------------\n\nTITLE: Activating Spellcheck on Input, Textarea, and Contenteditable Elements with useSpellCheck - JavaScript\nDESCRIPTION: This code demonstrates using useSpellCheck from \"@web/core/utils/hooks\" to automatically enable spellchecking on input, textarea, or contenteditable elements within an Owl component. The hook is instantiated with optional refName options to target different elements, and works alongside template t-ref directives. Spellcheck is enabled on focus and cleaned up on blur. Dependencies: Owl and target DOM nodes must be available. The hook can be bypassed using spellcheck=\"false\" attributes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/hooks.rst#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSpellCheck } from \"@web/core/utils/hooks\";\n\nclass Comp {\n  setup() {\n    this.simpleRef = useSpellCheck();\n    this.customRef = useSpellCheck({ refName: \"custom\" });\n    this.nodeRef = useSpellCheck({ refName: \"container\" });\n  }\n  static template = \"Comp\";\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Clicker Service with Custom Hook - Odoo Owl JavaScript\nDESCRIPTION: This JavaScript statement demonstrates usage of a custom hook named useClicker for accessing the clicker service functionality. The pattern standardizes consumption of shared state and methods, abstracting direct access to useService/useState in user components. Requires definition of the useClicker hook and its export from the relevant service or hook module.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/master_odoo_web_framework/01_build_clicker_game.rst#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.clicker = useClicker();\n```\n\n----------------------------------------\n\nTITLE: Integrating Website Layout in QWeb Template (XML)\nDESCRIPTION: This final version of the 'academy.index' template uses `<t t-call=\"website.layout\">` to wrap its content within the standard Odoo website layout. It sets the page title using `<t t-set=\"title\">`. The actual content (the list of teachers) is placed within standard div structures (`oe_structure`, `container`) for proper styling and integration with the website's theme.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n\n    <template id=\"index\">\n        <t t-call=\"website.layout\">\n            <t t-set=\"title\">Academy</t>\n            <div class=\"oe_structure\">\n                <div class=\"container\">\n                    <t t-foreach=\"teachers\" t-as=\"teacher\">\n                        <p><t t-esc=\"teacher.id\"/> <t t-esc=\"teacher.name\"/></p>\n                    </t>\n                </div>\n            </div>\n        </t>\n    </template>\n\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Inspecting Model Field Metadata with fields_get via XML-RPC in PHP\nDESCRIPTION: This PHP code fetches metadata (string, help, type) for res.partner fields using the 'fields_get' method of Odoo's XML-RPC API. Returns structured meta-information for each field to assist in generating forms or processing data. Requires valid XML-RPC client configuration and credentials.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$models->execute_kw($db, $uid, $password, 'res.partner', 'fields_get', array(), array('attributes' => array('string', 'help', 'type')));\n```\n\n----------------------------------------\n\nTITLE: Adding Owl Component Assets to `web.assets_frontend` Bundle (Odoo Manifest)\nDESCRIPTION: Configures the Odoo module manifest (typically `__manifest__.py`) to include the Owl component's static files (XML template and JS) in the `web.assets_frontend` bundle. This ensures the component's code is loaded on the portal and website pages. The wildcard `**/*` includes all files within the specified directory (`your_module/static/src/portal_component/`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/frontend_owl_components.rst#2025-04-23_snippet_2\n\nLANGUAGE: py\nCODE:\n```\n{\n    # ...\n    'assets': {\n        'web.assets_frontend': [\n            'your_module/static/src/portal_component/**/*',\n        ],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Record Fields via XML-RPC in Ruby\nDESCRIPTION: This Ruby snippet demonstrates reading selected fields ('name', 'country_id', 'comment') from res.partner using XML-RPC's 'execute_kw'. The 'fields' option is passed as a symbol array. It expects appropriate variable definitions for connection and authentication and returns an array of hashes with record data.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'read', [ids], {fields: %w(name country_id comment)})\n```\n\n----------------------------------------\n\nTITLE: Setting End Year for Date Filters in Odoo XML\nDESCRIPTION: This XML snippet demonstrates using the `end_year` attribute on a date-based `<filter>` tag in an Odoo search view. It sets the latest selectable year in the filter's dropdown relative to the current year (e.g., `2` means two years after the current year). Requires the `date` attribute to be set.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_56\n\nLANGUAGE: xml\nCODE:\n```\n<filter string=\"Creation Date\" name=\"filter_create_date\" date=\"create_date\" end_year=\"2\"/>\n```\n\n----------------------------------------\n\nTITLE: Iterating Through a One2many Related Recordset - Odoo - Python\nDESCRIPTION: Illustrates iterating over all records in a One2many relationship to perform actions (such as printing a field). Assumes that 'partner' is an Odoo model instance with a 'test_ids' One2many field, and that the related model has a 'name' attribute. Useful for batch processing, reporting, or aggregation over related objects. The code expects valid linked records in the One2many set.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/07_relations.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfor test in partner.test_ids:\n    print(test.name)\n```\n\n----------------------------------------\n\nTITLE: Patching Prototype Methods of a JavaScript Class\nDESCRIPTION: Illustrates the common scenario of patching instance methods (prototype methods) of an ES6 class. The `patch` function must be applied to the class's `prototype` property.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/patching_code.rst#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// this is probably the usual case: patching a class method\npatch(MyClass.prototype, {\n  myPrototypeFn() {...},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Records in Odoo Model using XML-RPC in Ruby\nDESCRIPTION: This Ruby code demonstrates creating a new res.partner with the name 'New Partner' using Odoo's 'create' method via XML-RPC. The field values are supplied as a hash, and the result is the new record's ID. Assumes initialized connection and authenticated session.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nid = models.execute_kw(db, uid, password, 'res.partner', 'create', [{name: \"New Partner\"}])\n```\n\n----------------------------------------\n\nTITLE: Searching and Reading Records with search_read via XML-RPC in Go\nDESCRIPTION: This Go snippet searches for company records and reads selected fields, limiting results to five. Employs 'search_read' for combined operation and stores output as a slice of maps. Necessary setup includes authenticated models.Call client and error handling for failed calls.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_34\n\nLANGUAGE: go\nCODE:\n```\nvar recordFields []map[string]any\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"res.partner\", \"search_read\",\n    []any{[]any{\n        []any{\"is_company\", \"=\", true},\n    }},\n    map[string]any{\n        \"fields\": []string{\"name\", \"country_id\", \"comment\"},\n        \"limit\":  5,\n    },\n}, &recordFields); err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining One2many Relationships in Odoo Models (Python)\nDESCRIPTION: This Python snippet demonstrates defining two basic Odoo models with a One2many-Many2one relationship. The parent model, 'TestModel', has a 'description' field and a One2many relationship to 'TestModelLine' via 'line_ids'. The child model includes a reference to the parent and three character fields. This pattern is foundational to representing hierarchical data in Odoo. Dependencies: Odoo ORM; input fields include text and relational identifiers; there are no strict validation constraints provided.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import fields, models\n\nclass TestModel(models.Model):\n    _name = \"test_model\"\n    _description = \"Test Model\"\n\n    description = fields.Char()\n    line_ids = fields.One2many(\"test_model_line\", \"model_id\")\n\n\nclass TestModelLine(models.Model):\n    _name = \"test_model_line\"\n    _description = \"Test Model Line\"\n\n    model_id = fields.Many2one(\"test_model\")\n    field_1 = fields.Char()\n    field_2 = fields.Char()\n    field_3 = fields.Char()\n\n```\n\n----------------------------------------\n\nTITLE: Eager vs Lazy Error Message Mapping Odoo Python\nDESCRIPTION: These snippets show the difference between evaluating translations at server launch (incorrect) and at error rendering (correct) in Odoo Python. The first example translates messages too early, freezing them in a single language; the second uses lazy translation for correct per-user language switching. Inputs are error codes and translation keys; outputs are localized error messages. Requires UserError exception, Odoo translation tools, and understanding of lazy initialization.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/translations.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nERROR_MESSAGE = {\n  # bad, evaluated at server launch with no user language\n  'access_error': _('Access Error'),\n  'missing_error': _('Missing Record'),\n}\n\nclass Record(models.Model):\n\n  def _raise_error(self, code):\n    raise UserError(ERROR_MESSAGE[code])\n```\n\nLANGUAGE: python\nCODE:\n```\nERROR_MESSAGE = {\n  'access_error': _lt('Access Error'),\n  'missing_error': _lt('Missing Record'),\n}\n\nclass Record(models.Model):\n\n  def _raise_error(self, code):\n    # translation lookup executed at error rendering\n    raise UserError(ERROR_MESSAGE[code])\n```\n\nLANGUAGE: python\nCODE:\n```\ndef _get_error_message(self):\n  return {\n    access_error: _('Access Error'),\n    missing_error: _('Missing Record'),\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Odoo Test Cases with TransactionCase\nDESCRIPTION: Example of implementing test cases in Odoo using TransactionCase class, including setup, property testing, and error handling. Shows how to use @tagged decorator for controlling test execution timing.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/unit_tests.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo.tests.common import TransactionCase\nfrom odoo.exceptions import UserError\nfrom odoo.tests import tagged\n\n# The CI will run these tests after all the modules are installed,\n# not right after installing the one defining it.\n@tagged('post_install', '-at_install')\nclass EstateTestCase(TransactionCase):\n\n    @classmethod\n    def setUpClass(cls):\n        # add env on cls and many other things\n        super(EstateTestCase, cls).setUpClass()\n\n        # create the data for each tests. By doing it in the setUpClass instead\n        # of in a setUp or in each test case, we reduce the testing time and\n        # the duplication of code.\n        cls.properties = cls.env['estate.property'].create([...])\n\n    def test_creation_area(self):\n        \"\"\"Test that the total_area is computed like it should.\"\"\"\n        self.properties.living_area = 20\n        self.assertRecordValues(self.properties, [\n           {'name': ..., 'total_area': ...},\n           {'name': ..., 'total_area': ...},\n        ])\n\n\n    def test_action_sell(self):\n        \"\"\"Test that everything behaves like it should when selling a property.\"\"\"\n        self.properties.action_sold()\n        self.assertRecordValues(self.properties, [\n           {'name': ..., 'state': ...},\n           {'name': ..., 'state': ...},\n        ])\n\n        with self.assertRaises(UserError):\n            self.properties.forbidden_action_on_sold_property()\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Odoo Custom Module without Dependencies\nDESCRIPTION: Illustrates the fundamental structure for defining a module using Odoo's legacy custom JavaScript module system. It calls `odoo.define` with a unique module name (`module.A`), an empty array indicating no dependencies (`[]`), and a factory function. The function uses `'use strict';` and returns the module's value (`A`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_modules.rst#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// in file a.js\nodoo.define('module.A', [], function (require) {\n    \"use strict\";\n\n    var A = ...;\n\n    return A;\n});\n```\n\n----------------------------------------\n\nTITLE: Inefficient Odoo Field Access due to Lack of Prefetching (Python)\nDESCRIPTION: This snippet shows a common performance pitfall where accessing a field (`record.foo`) on records browsed individually within a loop triggers separate database queries for each record. This happens because Odoo's prefetching mechanism works best when operating on the entire recordset at once.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/performance.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfor record_id in record_ids:\n    model.browse(record_id)\n    record.foo  # One query is executed per record.\n```\n\n----------------------------------------\n\nTITLE: Configuring doAction for Popover Client Action - Odoo Owl JavaScript\nDESCRIPTION: This JavaScript snippet configures a client action to open in a popover (not in fullscreen), by specifying the 'target: \"new\"' parameter in the doAction call. It creates an Odoo action of type ir.actions.client, referencing the client_action tag, and assigns a display name. This approach enables UI modal overlays in the Odoo web client for a seamless user experience. Requires the Odoo action service and a registered client action identified by 'awesome_clicker.client_action'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/master_odoo_web_framework/01_build_clicker_game.rst#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n   type: \\\"ir.actions.client\\\",\\n   tag: \\\"awesome_clicker.client_action\\\",\\n   target: \\\"new\\\",\\n   name: \\\"Clicker\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Kanban Controller in Odoo Web (JavaScript)\nDESCRIPTION: This snippet demonstrates how to subclass the KanbanController from Odoo Web to create a custom controller with additional logic or new methods. It shows how to define a new controller class, associate a new template, merge it into the original view definition, and register the view in the Odoo views registry. Dependencies include the Odoo Web Kanban controller/module and the registry. Key parameters are the custom template name and class overrides. This enables modular extension of core views without modifying the base code.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_view.rst#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { KanbanController } from \"@web/views/kanban/kanban_controller\";\nimport { kanbanView } from \"@web/views/kanban/kanban_view\";\nimport { registry } from \"@web/core/registry\";\n\n// the controller usually contains the Layout and the renderer.\nclass CustomKanbanController extends KanbanController {\n    static template = \"my_module.CustomKanbanView\";\n\n    // Your logic here, override or insert new methods...\n    // if you override setup(), don't forget to call super.setup()\n}\n\nexport const customKanbanView = {\n    ...kanbanView, // contains the default Renderer/Controller/Model\n    Controller: CustomKanbanController,\n};\n\n// Register it to the views registry\nregistry.category(\"views\").add(\"custom_kanban\", customKanbanView);\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Rights for Academy Models in Odoo (CSV)\nDESCRIPTION: This CSV snippet defines access control list (ACL) rules for the 'academy.teachers' and 'academy.courses' models using Odoo's security mechanism. It grants read access (perm_read=1) to both models for all users (no specific group_id) but denies write, create, and delete permissions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_27\n\nLANGUAGE: csv\nCODE:\n```\nid,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\naccess_academy_teachers,access_academy_teachers,model_academy_teachers,,1,0,0,0\naccess_academy_courses,access_academy_courses,model_academy_courses,,1,0,0,0\n```\n\n----------------------------------------\n\nTITLE: Indirectly Patching Class Constructor Logic via `setup` Method\nDESCRIPTION: Demonstrates a workaround for patching constructor logic, as direct constructor patching is impossible. The original class calls a `setup` method from its constructor. This `setup` method, being a standard prototype method, can then be patched to extend or modify the instance initialization logic.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/patching_code.rst#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyClass {\n  constructor() {\n    this.setup();\n  }\n  setup() {\n    this.number = 1;\n  }\n}\n\npatch(MyClass.prototype, {\n  setup() {\n    super.setup(...arguments);\n    this.doubleNumber = this.number * 2;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Field Values on an Odoo Record in Python\nDESCRIPTION: This snippet illustrates accessing field values from an Odoo record using attribute access (`record.name`, `record.company_id.name`). It also shows how to modify a field value (`record.name = \"Bob\"`), which triggers a database update, and how to access field values using dictionary-like item access (`record[field]`), useful for dynamic field names.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> record.name\nExample Name\n>>> record.company_id.name\nCompany Name\n>>> record.name = \"Bob\"\n>>> field = \"name\"\n>>> record[field]\nBob\n```\n\n----------------------------------------\n\nTITLE: Inheriting an Odoo Model and Overriding a Method in Python\nDESCRIPTION: Provides a basic template for inheriting an existing Odoo model (`inherited.model`) using the `_inherit` attribute. It shows how to override a method (`inherited_action`) and ensure the original functionality is still executed by calling `super().inherited_action()`. This pattern is fundamental for extending or modifying existing model behavior in separate modules.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/13_other_module.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import models\n\nclass InheritedModel(models.Model):\n    _inherit = \"inherited.model\"\n\n    def inherited_action(self):\n        return super().inherited_action()\n```\n\n----------------------------------------\n\nTITLE: Declaring a Custom Snippet Template for Odoo Website Builder (XML)\nDESCRIPTION: This XML snippet illustrates the declaration of a custom website snippet template in Odoo, including the root <odoo> node and a <template> element containing the snippet's structure. Dependencies are Odoo  and the intended custom classes. Inputs: template ID and HTML structure. Outputs: a registered snippet available for insertion. Limitations: data-name and data-snippet attributes are required elsewhere for full recognition.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<odoo>\\n\\n    <template id=\\\"s_airproof_snippet\\\" name=\\\"...\\\">\\n        <section class=\\\"s_airproof_snippet\\\">\\n            <!-- Content -->\\n        </section>\\n    </template>\\n\\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Calling Server Model Methods from JavaScript Widget\nDESCRIPTION: Demonstrates how to create a widget that calls a method on an Odoo model and displays the result. Uses instance.web.Model to create a connection to the model and call() to invoke the server method.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.HomePage = instance.Widget.extend({\n    start: function() {\n        var self = this;\n        var model = new instance.web.Model(\"oepetstore.message_of_the_day\");\n        model.call(\"my_method\", {context: new instance.web.CompoundContext()}).then(function(result) {\n            self.$el.append(\"<div>Hello \" + result[\"hello\"] + \"</div>\");\n            // will show \"Hello world\" to the user\n        });\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying System Notification using Odoo Mobile API in JavaScript\nDESCRIPTION: Shows a standard system notification outside the application's UI, visible in the device's notification area/drawer. Requires an object argument with 'title' and 'message' keys. This function is accessed via the mobile API object (the example uses `mobile.showNotification` directly). Returns a jQuery Deferred object.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/mobile.rst#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmobile.showNotification({'title': 'Simple Notification', 'message': 'This is a test for a simple notification'})\n```\n\n----------------------------------------\n\nTITLE: Calling Sub-Templates with t-call in QWeb XML\nDESCRIPTION: This snippet shows how to invoke another template from within a QWeb XML template using t-call. The current context (variables, etc.) is passed to the called template, so parameters or pre-set variables can be injected as desired. The called template should be defined and accessible under the given name.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<t t-call=\"other-template\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining an Odoo Search Filter with a Domain in XML\nDESCRIPTION: This XML snippet defines a `<filter>` element within an Odoo search view. The `name` attribute provides an identifier, and the `domain` attribute specifies the filtering condition (`[('test_val', '&lt;', 0)]`). Note the use of `&lt;` to represent the less than operator (<) in XML to avoid parsing errors. This filter allows users to toggle a predefined search for records where 'test_val' is negative.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/06_basicviews.rst#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<filter name=\"negative\" domain=\"[('test_val', '&lt;', 0)]\"/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Bash Auto-Completion for odoo-bin\nDESCRIPTION: This command generates a list of `odoo-bin` options using `--help`, processes the output with `sed`, `grep`, `sort`, `uniq`, and `tr` to format them for bash completion, and appends the result to the user's `.bash_completion` file. This enables tab completion for `odoo-bin` commands in the Bash shell. Requires `bash` and standard Unix utilities (`sed`, `grep`, `sort`, `uniq`, `tr`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"complete -W '`./odoo-bin --help | \\\n  sed -e 's/[^a-z_-]\\(-\\+[a-z0-9_-]\\+\\)/\\n\\1\\n/' | \\\n  grep -- '^-' | sort | uniq | tr '\\n' ' '`' odoo-bin\" >> ~/.bash_completion\n```\n\n----------------------------------------\n\nTITLE: Consuming a Service from a Component - Odoo Owl Framework - JavaScript\nDESCRIPTION: Shows how to consume a custom service from within an Owl component setup function. It demonstrates obtaining a service instance using useService and reading a key's value. Requires: '@web/core/utils/hooks' and a service called 'shared_state' to be previously registered. Key parameter is service name. Input is the key; output is the stored value.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/discover_js_framework/02_build_a_dashboard.rst#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useService } from \"@web/core/utils/hooks\";\n\nsetup() {\n   this.sharedState = useService(\"shared_state\");\n   const value = this.sharedState.getValue(\"somekey\");\n   // do something with value\n}\n```\n\n----------------------------------------\n\nTITLE: Organized Qweb Component Class and Attribute Usage\nDESCRIPTION: Presents a recommended, more readable approach for managing an Odoo Qweb component's class list. Static classes are moved to the class attribute for clarity and ordering, while toggled classes use t-att-class for dynamic state. This improves readability, maintainability, and follows team conventions. Prerequisite: understanding of Odoo Qweb templating.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/scss_tips.rst#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<myComponent\n   t-att-class=\"{\n      o_myComponent_disabled: props.readonly,\n      o_myComponent_active: props.active\n   }\"\n   class=\"myComponent card position-absolute d-flex d-lg-block border px-3 px-lg-2\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Redirecting After Successful Odoo Form Submission - XML\nDESCRIPTION: This form snippet demonstrates the use of data-success-mode set to 'redirect' and data-success-page to instruct Odoo to redirect users to a specific page after successful form submission. Parameters include data-success-mode ('redirect') and data-success-page (destination URL). Make sure the target page exists.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/forms.rst#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<form data-success-mode=\"redirect\" data-success-page=\"/contactus-thank-you\">\n```\n\n----------------------------------------\n\nTITLE: Checking Odoo Server Version via XML-RPC - Python\nDESCRIPTION: Performs a server version check on Odoo using Python's xmlrpc.client and the XML-RPC /xmlrpc/2/common endpoint. No authentication is required for this call. Expected output is a dictionary containing version information about the Odoo server.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncommon = xmlrpc.client.ServerProxy('{}/xmlrpc/2/common'.format(url))\\ncommon.version()\n```\n\n----------------------------------------\n\nTITLE: Adding Global CSS Styles to QWeb Reports via Template Inheritance in XML\nDESCRIPTION: Illustrates how to add custom global CSS styles applicable to all Odoo QWeb reports. This is done by creating a new template that inherits (`inherit_id`) the base `report.style` template. An `xpath` expression with `expr=\".\"` is used to target the root element and inject the desired CSS rules (e.g., styling `.example-css-class`) within a `<t>` tag.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/reports.rst#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"report_saleorder_style\" inherit_id=\"report.style\">\n  <xpath expr=\".\">\n    <t>\n      .example-css-class {\n        background-color: red;\n      }\n    </t>\n  </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Tooltip with 'help' Attribute in Odoo XML\nDESCRIPTION: This example demonstrates how to add a tooltip to a button in Odoo using the 'help' attribute. The tooltip displays the text 'Revoke' when a user hovers over a trash icon button that calls the 'remove' method on the object.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures/button_attribute_help.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<button type=\"object\" name=\"remove\" icon=\"fa-trash\" help=\"Revoke\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Items in a CSS Grid Layout (XML)\nDESCRIPTION: Provides an example of specifying grid items within a grid-enabled row. Uses o_grid_item and o_grid_item_image for container divs, and defines position and layering with grid-area and z-index in style. Useful for composing advanced responsive layouts, with image support and precise placement. Requires the parent row to have o_grid_mode and data-row-count attributes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\\\"row o_grid_mode\\\" data-row-count=\\\"13\\\">\\n   <div class=\\\"o_grid_item g-height-* g-col-lg-*\\\" style=\\\"grid-area: 2 / 1 / 7 / 8; z-index: 3;\\\">\\n      <!-- Content -->\\n   </div>\\n   <div class=\\\"o_grid_item o_grid_item_image g-height-* g-col-lg-*\\\" style=\\\"grid-area: 1 / 6 / 9 / 13; z-index: 2;\\\">\\n      <img src=\\\"...\\\" alt=\\\"...\\\" >\\n   </div>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Odoo Custom Module with Dependencies\nDESCRIPTION: Demonstrates defining an Odoo custom module named `module.B` that depends on `module.A`. The dependency is listed in the array `['module.A']`. The factory function receives a `require` function, which is used to access the exported value of the dependency (`var A = require('module.A');`). The module then defines its own logic potentially using `A` and returns its value `B`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_modules.rst#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// in file b.js\nodoo.define('module.B', ['module.A'], function (require) {\n    \"use strict\";\n\n    var A = require('module.A');\n\n    var B = ...; // something that involves A\n\n    return B;\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Developer Features via Odoo Command-line\nDESCRIPTION: Activates specific developer-oriented features using a comma-separated list. Features include 'all', 'xml' (load QWeb from files), 'reload' (auto-restart on Python changes), 'qweb' (enable t-debug), '(i)p(u)db' (debugger on errors), 'werkzeug' (frontend traceback). This option is intended for development only and should not be used in production.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n--dev <feature,feature,...,feature>\n```\n\n----------------------------------------\n\nTITLE: Unsafe Retrieval of Field Value Using getattr in Python\nDESCRIPTION: This snippet demonstrates an unsafe method to retrieve a field value dynamically using getattr. It's considered unsafe as it allows access to any property of the record, including private attributes or methods.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/security.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# unsafe retrieval of a field value\ndef _get_state_value(self, res_id, state_field):\n    record = self.sudo().browse(res_id)\n    return getattr(record, state_field, False)\n```\n\n----------------------------------------\n\nTITLE: Updating Module Manifest for Data Files (Python)\nDESCRIPTION: This snippet shows the 'data' key within the `__manifest__.py` file. It lists the XML and CSV files that should be loaded when the module is installed or updated. Here, it includes the access control rules file (`security/ir.model.access.csv`) and the template file (`templates.xml`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# always loaded\n'data': [\n    'security/ir.model.access.csv',\n    'templates.xml',\n],\n```\n\n----------------------------------------\n\nTITLE: User Service Context Updates - JavaScript\nDESCRIPTION: Examples showing how to update and modify the user context in the user service.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/services.rst#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nuserService.updateContext({ isFriend: true })\n\nuserService.removeFromContext(\"isFriend\")\n\nconst isInSalesGroup = await userService.hasGroup(\"sale.group_sales\")\n```\n\n----------------------------------------\n\nTITLE: Relational Field with Subviews (XML)\nDESCRIPTION: Shows how relational fields can contain specific subviews for list and form representations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"children_ids\">\n   <list>\n      <field name=\"name\"/>\n   </list>\n   <form>\n      <field name=\"id\"/>\n      <field name=\"name\"/>\n   </form>\n</field>\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets Bundle in Module Manifest - Odoo - Python\nDESCRIPTION: This Python dictionary (from the module manifest) illustrates how to define a new assets bundle for the standalone app. The snippet ensures the bundle includes core Odoo and Owl framework assets, necessary SCSS files for Bootstrap support, and all application-specific source files. It must be placed inside your module's manifest under the 'assets' key. The glob path 'your_module/static/src/standalone_app/**/*' dynamically includes all relevant source files; all files must not overlap with 'web.assets_backend' or 'web.assets_frontend'. Requires the Odoo module framework.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/standalone_owl_application.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{\\n    # ...\\n    'assets': {\\n        'your_module.assets_standalone_app': [\\n            ('include', 'web._assets_helpers'),\\n            'web/static/src/scss/pre_variables.scss',\\n            'web/static/lib/bootstrap/scss/_variables.scss',\\n            ('include', 'web._assets_bootstrap'),\\n            ('include', 'web._assets_core'),\\n            'your_module/static/src/standalone_app/**/*',\\n        ],\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Odoo Website Controller via Server Action in XML\nDESCRIPTION: This XML snippet defines an Odoo server action ('server_action_estate_list') configured to function as a website controller. It targets the 'estate.model_real_estate_property' model and is made available publicly on the website via the path '/actions/estate' by setting 'website_published' to True and defining 'website_path'. The actual request handling logic (using the 'request' object and setting the 'response' variable) would be placed within the 'code' field (not shown in this specific snippet but described in the context). Requires the 'website' module.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/importable_modules.rst#2025-04-23_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"server_action_estate_list\" model=\"ir.actions.server\">\n    <field name=\"name\">Estate List Controller</field>\n    <field name=\"model_id\" ref=\"estate.model_real_estate_property\" />\n    <field name=\"website_published\">True</field>\n    <field name=\"website_path\">estate</field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Obtaining Odoo Test Database via XML-RPC - PHP (Ripcord Library)\nDESCRIPTION: Demonstrates retrieving a test database from demo.odoo.com in PHP using the Ripcord library. Requires the ripcord.php file and enables XML-RPC and OpenSSL extensions. The info array contains the test instance's connection data for further use.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('ripcord.php');\n$info = ripcord::client('https://demo.odoo.com/start')->start();\nlist($url, $db, $username, $password) = array($info['host'], $info['database'], $info['user'], $info['password']);\n```\n\n----------------------------------------\n\nTITLE: Running Odoo Server with Development Configuration (bash)\nDESCRIPTION: Demonstrates running the Odoo server (`odoo-bin`) with common development options using a shell script example. It specifies the paths to custom and standard addons (`--addons-path`), filters databases (`--db-filter`), selects the database to use (`-d`), installs the 'website' module (`-i website`), loads no demo data (`--without-demo=all`), and enables XML development mode (`--dev=xml`). The surrounding XML tags are part of the documentation format, not the executed command.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/setup.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n./odoo-bin --addons-path=../enterprise,addons --db-filter=<database> -d <database> --without-demo=all -i website --dev=xml\n```\n\n----------------------------------------\n\nTITLE: Adding a Main Component to the Components Registry in Odoo JavaScript\nDESCRIPTION: This code registers a top-level Owl component, LoadingIndicator, in the main_components registry. In Odoo, this allows the component to be rendered inside the MainComponentsContainer. This depends on the registry import and assumes LoadingIndicator is an existing Owl Component. The main parameter is the component key (\"LoadingIndicator\") associated with an object containing the Component class. Used for extending the Odoo web interface with additional root-level components.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/registries.rst#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nregistry.category(\"main_components\").add(\"LoadingIndicator\", {\n  Component: LoadingIndicator,\n});\n```\n\n----------------------------------------\n\nTITLE: Widget Event Handling\nDESCRIPTION: Demonstrates how to listen for and handle custom widget events in a parent widget.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.HomePage = instance.Widget.extend({\n    start: function() {\n        var widget = new local.ConfirmWidget(this);\n        widget.on(\"user_chose\", this, this.user_chose);\n        widget.appendTo(this.$el);\n    },\n    user_chose: function(confirm) {\n        if (confirm) {\n            console.log(\"The user agreed to continue\");\n        } else {\n            console.log(\"The user refused to continue\");\n        }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Variables in a t-call Block in QWeb XML\nDESCRIPTION: Demonstrates passing variables to a called template via the body of a t-call block. Variables set in the block (e.g., via t-set) will be available locally to the sub-template but not outside the block. This enables temporary contextual data to be passed for partial rendering.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<t t-call=\"other-template\">\n    <t t-set=\"var\" t-value=\"1\"/>\n</t>\n<!-- \"var\" does not exist here -->\n```\n\n----------------------------------------\n\nTITLE: Marking Strings for Translation Odoo Python\nDESCRIPTION: This Python snippet demonstrates how to explicitly mark a literal string for translation using Odoo's `self.env._` method and the backward-compatible `odoo.tools._`. This pattern is necessary in imperative code (e.g., assigning translated UI text) to ensure terms are collected for translation export. Requires Odoo environment and import of the `odoo.tools` module. Input is a literal string; output is a translation-ready string, with translation handled at runtime depending on user locale.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/translations.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntitle = self.env._(\"Bank Accounts\")\n\n# old API for backward-compatibility\nfrom odoo.tools import _\ntitle = _(\\\"Bank Accounts\\\")\n```\n\n----------------------------------------\n\nTITLE: Adding a JavaScript Test File to Odoo Assets using XML\nDESCRIPTION: Demonstrates how to register a new JavaScript test file ('utils_tests.js') within the Odoo asset management system. This XML snippet modifies the 'web.qunit_suite_tests' template, using an XPath expression to insert a new script tag, ensuring the test file is included when running the QUnit test suite.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<odoo>\n    <template id=\"qunit_suite_tests\" name=\"my addon tests\" inherit_id=\"web.qunit_suite_tests\">\n        <xpath expr=\"//script[last()]\" position=\"after\">\n            <script type=\"text/javascript\" src=\"/my_addon/static/tests/utils_tests.js\"/>\n        </xpath>\n    </template>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Defining Button Context in Odoo XML\nDESCRIPTION: Demonstrates how to set a context attribute on a button element in Odoo XML. The context is provided as a Python expression that evaluates to a dictionary and will be merged into the view's context when the button is called.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures/button_attribute_context.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<button name=\"button_confirm\" type=\"object\" context=\"{'BUSINESS_KEY': ANY}\" string=\"LABEL\"/>\n```\n\n----------------------------------------\n\nTITLE: Field Decoration in Odoo List Views\nDESCRIPTION: Examples of using the decoration attributes in list view fields to apply conditional styling based on record values.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_39\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"name\" decoration-bf=\"1\"/>\n<field name=\"quantity\" decoration-info=\"state == 'draft'\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Action Buttons to an Odoo List View\nDESCRIPTION: Demonstrates how to add action buttons to a list view. Buttons can trigger object methods or edit actions, with options for labels, icons, and visibility control.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_43\n\nLANGUAGE: xml\nCODE:\n```\n<list>\n    <button type=\"object\" name=\"ACTION\" string=\"LABEL\"/>\n    <button type=\"object\" name=\"ACTION\" icon=\"FONT_AWESOME\"/>\n</list>\n```\n\n----------------------------------------\n\nTITLE: Structuring the /parse Request for Odoo Extract API in JSON\nDESCRIPTION: Defines the JSON-RPC2 request structure for submitting a document (invoice, bank statement, expense, applicant) to the Odoo Extract API's /parse endpoint. Requires `account_token`, `version`, and a list containing one base64 encoded `document`. Optional parameters like `webhook_url` for asynchronous notifications and `user_infos` for improved accuracy are supported.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/extract_api.rst#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"account_token\": string,\n        \"version\": int,\n        \"documents\": [string],\n        \"dbuuid\": string,\n        \"webhook_url\": string,\n        \"user_infos\": {\n            \"user_company_vat\": string,\n            \"user_company_name\": string,\n            \"user_company_country_code\": string,\n            \"user_lang\": string,\n            \"user_email\": string,\n            \"purchase_order_regex\": string,\n            \"perspective\": string,\n        },\n    },\n    \"id\": string,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple QUnit Test Case in JavaScript\nDESCRIPTION: Illustrates how to add a specific test case using QUnit within the previously defined 'utils' submodule. It uses 'QUnit.test' to define the test, 'assert.expect' to specify the number of expected assertions, calls the function under test ('utils.myFunction'), and verifies the output using 'assert.strictEqual'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test(\"some test case that we want to test\", function (assert) {\n    assert.expect(1);\n\n    var result = utils.myFunction(someArgument);\n    assert.strictEqual(result, expectedResult);\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Tax Amount Using Python in Odoo\nDESCRIPTION: Example of using Python code to define a custom 10% tax calculation in Odoo. The code includes both the tax amount computation and the applicability check.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/taxes.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresult = price_unit * 0.10\n```\n\nLANGUAGE: python\nCODE:\n```\nresult = true\n```\n\n----------------------------------------\n\nTITLE: Configuring ActionSwiper With Callbacks and Icons (XML)\nDESCRIPTION: This XML snippet configures an ActionSwiper component with explicit properties for swipe actions. The onRightSwipe and onLeftSwipe props each provide an action function, icon, and Bootstrap contextual background color. The snippet demonstrates direct inline assignment and shows how UI actions are connected to swipe gestures. Prerequisites: ActionSwiper component and supplied actions/functions. Input: user swipes; output: UI feedback and action. Limited to client-side defined interactions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<ActionSwiper\n  onRightSwipe=\"\n    {\n      action: '() => Delete item',\n      icon: 'fa-delete',\n      bgColor: 'bg-danger',\n    }\"\n  onLeftSwipe=\"\n    {\n      action: '() => Star item',\n      icon: 'fa-star',\n      bgColor: 'bg-warning',\n    }\"\n>\n  <div>\n    Swipable item\n  </div>\n</ActionSwiper>\n```\n\n----------------------------------------\n\nTITLE: Badge Widget with Decoration in Odoo XML View - XML\nDESCRIPTION: This snippet demonstrates rendering a 'foo' field as a badge widget, with decoration-danger condition applied via the 'decoration-danger' attribute, causing the badge to display red styling if 'state' equals 'cancel'. Utilized for dynamic visual emphasis based on record state in Odoo dashboards or list views. Applies to char, selection, or many2one fields and relies on view decoration logic.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\\\"foo\\\" widget=\\\"badge\\\" decoration-danger=\\\"state == 'cancel'\\\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Related Field to Estate Property Offer Model in Odoo\nDESCRIPTION: Adds a 'property_type_id' field to the estate.property.offer model as a related field to property_id.property_type_id. This field is set to be stored.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nproperty_type_id = fields.Many2one(related='property_id.property_type_id', store=True)\n```\n\n----------------------------------------\n\nTITLE: Accessing Related Record Data in Many2one - Odoo - Python\nDESCRIPTION: Demonstrates how to access related record attributes through a Many2one field. Requires that the model has a Many2one field (e.g., 'partner_id') and a referencable record (here: 'my_test_object'). This snippet prints the 'name' field of the referenced partner. The code expects the object and its related record to exist; attempting to access a null relation could raise an error.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/07_relations.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nprint(my_test_object.partner_id.name)\n```\n\n----------------------------------------\n\nTITLE: Using t-foreach for Variable Scope and Assignment in QWeb XML\nDESCRIPTION: Illustrates variable declaration and scope inside and outside a loop with t-set and t-value in QWeb templates. 'existing_variable' is set before and inside the loop, while 'new_variable' is introduced only inside. After the loop, only existing_variable persists in the global context; new_variable is not defined outside. Useful for understanding QWeb variable lifetimes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\"existing_variable\" t-value=\"False\"/>\n<!-- existing_variable now False -->\n\n<p t-foreach=\"[1, 2, 3]\" t-as=\"i\">\n    <t t-set=\"existing_variable\" t-value=\"True\"/>\n    <t t-set=\"new_variable\" t-value=\"True\"/>\n    <!-- existing_variable and new_variable now True -->\n</p>\n\n<!-- existing_variable always True -->\n<!-- new_variable undefined -->\n```\n\n----------------------------------------\n\nTITLE: Setting the Color Palette for Use in the Theme - SCSS\nDESCRIPTION: This snippet assigns the palette name 'airproof' to the `$o-website-values-palettes` map, instructing Odoo to use the specified color palette for the active website theme. Typically placed in the theme's `primary_variables.scss` file, it requires a previously defined palette and is essential for ensuring the correct color set is active.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_12\n\nLANGUAGE: scss\nCODE:\n```\n$o-website-values-palettes: (\n   (\n      'color-palettes-name':              'airproof',\n   ),\n);\n```\n\n----------------------------------------\n\nTITLE: Hiding Section on Desktop in Odoo\nDESCRIPTION: XML snippet demonstrating how to hide a section on desktop devices using Bootstrap and Odoo-specific classes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_41\n\nLANGUAGE: xml\nCODE:\n```\n<section class=\"s_text_block o_cc o_cc1 o_colored_level pt16 pb16 d-lg-none o_snippet_desktop_invisible\" data-snippet=\"s_text_block\" name=\"Text\">\n    <!-- Content -->\n</section>\n```\n\n----------------------------------------\n\nTITLE: Changing Icon Size with Font Awesome Classes in Odoo XML\nDESCRIPTION: Illustrates how to change the display size of a Font Awesome icon using size-specific classes within the span. Available sizes include fa-2x through fa-5x. Dependency: Font Awesome included in Odoo Website Builder. Outputs a span that renders the specified icon at the chosen size.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/media.rst#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<span class=\\\"fa fa-2x fa-picture-o\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Odoo Record with Command Operations in XML\nDESCRIPTION: Creates an Odoo record for the 'tutorial.example' model. The 'related_ids' field (likely a One2many or Many2many) is populated using `Command.create` to dynamically generate two new related records with specified names, and `Command.link` to link an existing record identified by its external XML ID ('model.xml_id'). This demonstrates manipulating relational fields during data definition using special ORM commands within an XML file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/define_module_data.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n  <record id=\"id1\" model=\"tutorial.example\">\n    <field name=\"related_ids\" eval=\"[\n        Command.create({\n            'name': 'My name',\n        }),\n        Command.create({\n            'name': 'Your name',\n        }),\n        Command.link(ref('model.xml_id')),\n    ]\"/>\n  </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo Form Submission to Create Project Task - XML\nDESCRIPTION: By specifying data-model_name as 'project.task', this form allows users to create new project tasks within Odoo. The Project app should be active in Odoo, and form fields must meet required constraints for 'project.task'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/forms.rst#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<form data-model_name=\"project.task\">\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Text Field Widget in Odoo View XML (XML)\nDESCRIPTION: This snippet specifies the usage of the new field widget ('widget=\"my_text_field\"') within an Odoo record view XML. The field should exist on the model, and the custom widget must be correctly registered with the registry for proper rendering. No additional configuration or dependencies are required beyond the widget registration.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_field.rst#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\\\"somefield\\\" widget=\\\"my_text_field\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining a Manifest for Accounting Report Module in Odoo (Python)\nDESCRIPTION: This code provides a basic template for the __manifest__.py file required to create a localization-specific accounting reports module within the Odoo enterprise system. It specifies the module name, category, version, license, dependencies (including both the country localization and core account_reports modules), data files to be loaded, and the auto_install flag. This manifest enables automated loading of accounting report XML definitions when the localization is installed. No custom Python code or classes are required in this file; it serves solely as metadata for the Odoo module system. All fields are required for proper registration and should be adapted for each country.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/accounting_localization.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"name\": \"COUNTRY - Accounting Reports\",\n    \"category\": \"Accounting/Localizations/Reporting\",\n    \"version\": \"1.0.0\",\n    \"license\": \"OEEL-1\",\n    \"depends\": [\n        \"l10n_XX\", \"account_reports\"\n    ],\n    \"data\": [\n        \"data/balance_sheet.xml\",\n        \"data/profit_and_loss.xml\",\n    ],\n    \"auto_install\": True,\n}\n```\n\n----------------------------------------\n\nTITLE: Using Translation Function in JavaScript\nDESCRIPTION: Demonstrates how to use the _t() translation function to translate text in JavaScript. This function returns the translation if defined or the original text otherwise.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nthis.$el.text(_t(\"Hello user!\"));\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Item Padding in Odoo Website Builder (XML)\nDESCRIPTION: This XML snippet demonstrates how to structure grid-based layout elements in Odoo's Website Builder, setting vertical and horizontal paddings using CSS custom properties. Prerequisites include the use of Odoo's Website Builder and applicable CSS classes like 'g-height-*' and 'g-col-lg-*'. Inputs are grid item classnames and style properties, and outputs are rendered grid-layout HTML. Limitations: styling is largely determined by associated CSS and Website Builder conventions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\\\"row o_grid_mode\\\" data-row-count=\\\"13\\\" style=\\\"gap: 20px 10px;\\\">\\n   <div class=\\\"o_grid_item g-height-* g-col-lg-*\\\" style=\\\"--grid-item-padding-y: 20px; --grid-item-padding-x: 15px; grid-area: 2 / 1 / 7 / 8; z-index: 3;\\\">\\n      <!-- Content -->\\n   </div>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Elements in Odoo Search View\nDESCRIPTION: This XML example demonstrates how filter elements are used in an Odoo search view. The example shows how consecutive filters are composed with OR logic, displaying records where state is either 'draft' or 'done'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_60\n\nLANGUAGE: xml\nCODE:\n```\n<filter domain=\"[('state', '=', 'draft')]\"/>\n<filter domain=\"[('state', '=', 'done')]\"/>\n```\n\n----------------------------------------\n\nTITLE: Advanced Positioning: Menu Placement with usePosition and useRef in Owl - JavaScript\nDESCRIPTION: This advanced snippet shows integration of usePosition and useRef with Owl's t-ref directive to position a dropdown menu relative to a toggler. The menu's template and menu ref are coordinated, with usePosition called using a function reference, passing options such as popper ref, position, and an onPositioned callback for dynamic styling. This example demonstrates more complex usage patterns including event-driven styling and responsive repositioning, assuming Owl and position_hook dependencies.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/hooks.rst#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, xml, useRef } from \"@odoo/owl\";\nimport { usePosition } from \"@web/core/position_hook\";\n\nclass DropMenu extends Component {\n  static template = xml`\n    <button t-ref=\"toggler\">Toggle Menu</button>\n    <div t-ref=\"menu\">\n      <t t-slot=\"default\">\n        This is the menu default content.\n      </t>\n    </div>\n  `;\n\n  setup() {\n    const toggler = useRef(\"toggler\");\n    usePosition(\n      () => toggler.el,\n      {\n        popper: \"menu\",\n        position: \"right-start\",\n        onPositioned: (el, { direction, variant }) => {\n          el.classList.add(`dm-${direction}`); // -> \"dm-top\" \"dm-right\" \"dm-bottom\" \"dm-left\"\n          el.style.backgroundColor = variant === \"middle\" ? \"red\" : \"blue\";\n        },\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Browser Object for Browser APIs\nDESCRIPTION: Shows how to use the browser object to access browser APIs like setTimeout. This approach makes the code more testable as the browser object can be mocked during tests.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/framework_overview.rst#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { browser } from \"@web/core/browser/browser\";\n\n// somewhere in code\nbrowser.setTimeout(someFunction, 1000);\n```\n\n----------------------------------------\n\nTITLE: Defining the Client Action Template in XML (OWL)\nDESCRIPTION: This XML snippet defines the OWL template associated with the JavaScript component (`MyClientAction`). It uses the `t-name` attribute ('awesome_tshirt.clientaction', although the JS references 'my_module.clientaction' - note this discrepancy) to identify the template. When the client action is triggered, the content within this template ('Hello world') will be rendered by the corresponding OWL component.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_client_action.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<templates xml:space=\"preserve\">\n    <t t-name=\"awesome_tshirt.clientaction\">\n        Hello world\n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Linking Custom JavaScript Methods to Snippet Options in XML\nDESCRIPTION: This snippet demonstrates how to link custom JavaScript methods to snippet options by adding the data-js attribute to the options group in the XML template.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_47\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"s_airproof_snippet_options\" inherit_id=\"website.snippet_options\" name=\"Airproof - Snippets Options\">\n   <xpath expr=\".\" position=\"inside\">\n      <div data-selector=\".s_airproof_snippet\" data-js=\"airproofSnippet\">\n         // Options\n      </div>\n   </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Service - Odoo Owl Framework - JavaScript\nDESCRIPTION: Demonstrates how to register a simple service in Odoo's JS framework using Owl and the core registry. This service depends on the 'notification' service and emits a notification every 5 seconds. Required dependencies include '@web/core/registry' and the notification service. The main parameters are service name and an object with dependencies and a start method. The service doesn't expose an API; it has a side effect of displaying notifications.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/discover_js_framework/02_build_a_dashboard.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\n\nconst myService = {\n    dependencies: [\"notification\"],\n    start(env, { notification }) {\n        let counter = 1;\n        setInterval(() => {\n            notification.add(`Tick Tock ${counter++}`);\n        }, 5000);\n    },\n};\n\nregistry.category(\"services\").add(\"myService\", myService);\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple JavaScript Class in Odoo Web - Class.extend - JavaScript\nDESCRIPTION: Demonstrates how to define a new JavaScript class using Odoo's class system based on John Resig's inheritance pattern. The example shows the creation of a class with a single 'say_hello' method. Requires the Odoo web client and its instance parameter, exposing custom class-based behaviors for use in widgets or modules.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar MyClass = instance.web.Class.extend({\n    say_hello: function() {\n        console.log(\"hello\");\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Plain JavaScript with IIFE in Odoo\nDESCRIPTION: Shows how to structure plain JavaScript code using an Immediately Invoked Function Expression (IIFE) to prevent variables from leaking into the global scope. This pattern is recommended for external libraries or specific low-level tasks in Odoo where a module system isn't used, but care must be taken regarding execution order.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_modules.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(function () {\n  // some code here\n  let a = 1;\n  console.log(a);\n})();\n```\n\n----------------------------------------\n\nTITLE: Defining the 'name' Field Attribute in Odoo Documentation\nDESCRIPTION: Documentation for the mandatory 'name' attribute which specifies the name of the field to render in Odoo. This attribute is required and must be a string value.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures/field_attribute_name.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: name\n   :noindex:\n\n   The name of the field to render.\n\n   :requirement: Mandatory\n   :type: str\n```\n\n----------------------------------------\n\nTITLE: Updating QWeb Template for ORM Data (XML)\nDESCRIPTION: This updated QWeb template ('academy.index') now iterates over the 'teachers' recordset passed from the controller. Inside the loop, it displays the database ID (`teacher.id`) and the name (`teacher.name`) for each teacher record using `t-esc`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n\n    <template id=\"index\">\n         <title>Academy</title>\n         <t t-foreach=\"teachers\" t-as=\"teacher\">\n             <p><t t-esc=\"teacher.id\"/> <t t-esc=\"teacher.name\"/></p>\n         </t>\n    </template>\n\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Period for Date Filters in Odoo XML\nDESCRIPTION: This XML snippet shows how to use the `default_period` attribute within a date-based `<filter>` tag in an Odoo search view. It specifies which time periods (e.g., 'year', 'month-1' representing the previous month) should be active by default when the view loads, using a comma-separated list of valid filter IDs. Requires the `date` attribute to be set.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_57\n\nLANGUAGE: xml\nCODE:\n```\n<filter string=\"Creation Date\" name=\"filter_create_date\" date=\"create_date\" default_period=\"year,month-1\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Bundles in Odoo Manifest (Python)\nDESCRIPTION: Demonstrates how to define asset bundles (`web.assets_backend`, `web.assets_common`, `web.qunit_suite_tests`) within the `assets` dictionary in a module's `__manifest__.py` file. Files are specified using paths, potentially with glob patterns, listing the assets included in each bundle.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/assets.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n'assets': {\n    'web.assets_backend': [\n        'web/static/src/xml/**/*',\n    ],\n    'web.assets_common': [\n        'web/static/lib/bootstrap/**/*',\n        'web/static/src/js/boot.js',\n        'web/static/src/js/webclient.js',\n        'web/static/src/xml/webclient.xml',\n    ],\n    'web.qunit_suite_tests': [\n        'web/static/src/js/webclient_tests.js',\n    ],\n},\n```\n\n----------------------------------------\n\nTITLE: Declaring Website Settings in Odoo via XML Record - XML\nDESCRIPTION: This XML snippet is used to declare a website record in Odoo, setting global options like site name and logo. To be included in a data file for the theme module, it requires that the specified image path exists and that the record ID does not conflict with others. It demonstrates the use of the <odoo> and <record> tags as required by Odoo's XML data loading.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<odoo noupdate=\"1\">\n   <record id=\"website.default_website\" model=\"website\">\n      <field name=\"name\">Airproof</field>\n      <field name=\"logo\" type=\"base64\" file=\"website_airproof/static/src/img/content/logo_pred.png\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Using CompoundContext in Model Method Calls\nDESCRIPTION: Shows how to use CompoundContext to pass the user's context along with additional keys to the server. This ensures proper translation and timezone handling in server responses.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nmodel.call(\"my_method\", {context: new instance.web.CompoundContext({'new_key': 'key_value'})})\n```\n\n----------------------------------------\n\nTITLE: Structuring Tabbed Pages for Odoo Form Notebook - XML\nDESCRIPTION: This example shows a notebook element with two child pages. Each page can have its own string attribute for labeling, and contents are separated under tabs. Commonly used for separating logically related fields and sections, enabling a cleaner and more organized UI.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<form>\\n    <notebook>\\n        <page string=\\\"Page1\\\">\\n            ...\\n        </page>\\n        <page string=\\\"Page2\\\">\\n            ...\\n        </page>\\n    </notebook>\\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using t-nocache for Dynamic Template Segments (Odoo QWeb/HTML)\nDESCRIPTION: Demonstrates placement and result of using t-nocache for non-cached (dynamic) template sections inside a cached parent in Odoo QWeb templates. Only controller-provided values are available within the t-nocache scope. Shows example XML/HTML for a section with a title and a dynamic counter value, with a sample rendering. Authors are cautioned about scoping and value availability inside t-nocache blocks.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_21\n\nLANGUAGE: html\nCODE:\n```\nExample::\n\n        <section>\n            <article t-cache=\"record\">\n                <title><t t-out=\"record.name\"/> <i t-nocache=\"\">(views: <t t-out=\"counter\"/>)</i></titlle>\n                <content t-out=\"record.description\"/>\n            </article>\n        </section>\n\nWill render (counter = 1)::\n\n        <section>\n            <article>\n                <title>The record name <i>(views: 1)</i></titlle>\n                <content>Record description</content>\n            </article>\n        </section>\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Radio Buttons Horizontally in Odoo XML\nDESCRIPTION: Demonstrates how to use the `options` attribute with `widget=\"radio\"` to display radio buttons horizontally instead of vertically by setting the `horizontal` key to `true`. This widget is applicable to `selection` and `many2one` field types.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"recommended_activity_type_id\" widget=\"radio\" options=\"{'horizontal': true}\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Integer Field with Number Input in XML\nDESCRIPTION: Shows how to set up an integer field to use a number input type, which enables native browser support, especially on mobile devices. It also demonstrates setting a custom step value for incrementing/decrementing.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"int_value\" options=\"{'type': 'number', 'step': 100}\" />\n```\n\n----------------------------------------\n\nTITLE: Good Example: Defining Translable Meta Title in Odoo - XML\nDESCRIPTION: Illustrates correct translation-focused usage of 't-set' for meta title assignment in Odoo QWeb templates. Using content between tags ensures translatability. Recommended for localizable page titles.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\\\"additional_title\\\">My title</t>\n```\n\n----------------------------------------\n\nTITLE: Enforcing Multi-Company Consistency in Odoo Python Models\nDESCRIPTION: Shows how to configure an Odoo model for automatic multi-company consistency checks. Setting the class attribute `_check_company_auto = True` enables the feature, and adding `check_company=True` to relational fields (like `other_record_id`) ensures linked records belong to compatible companies upon creation or update. The `company_id` field itself should not have `check_company=True`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/company.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import fields, models\n\nclass Record(models.Model):\n    _name = 'record.shareable'\n    _check_company_auto = True\n\n    company_id = fields.Many2one('res.company')\n    other_record_id = fields.Many2one('other.record', check_company=True)\n```\n\n----------------------------------------\n\nTITLE: Patching Getters and Setters\nDESCRIPTION: Demonstrates patching getter and setter properties on an object. The `super` keyword can be used within patched getters and setters to access the original property's behavior.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/patching_code.rst#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npatch(object, {\n  get number() {\n    return super.number / 2;\n  },\n  set number(value) {\n    super.number = value;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Header Overlay on Odoo Page - XML\nDESCRIPTION: This snippet sets the 'header_overlay' field to True, making the page's header background transparent and overlaying the content. Helps in achieving advanced UI effects for customizable website headers. Insert into the website.page's or ir.ui.view's record as desired.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\\\"header_overlay\\\" eval=\\\"True\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding a User Menu Item in the User Menu Registry in Odoo JavaScript\nDESCRIPTION: This code registers a user menu item by supplying a key and a callback function that receives the Odoo frontend environment (env) and returns an object describing the menu item. Relies on @web/core/registry and expects env and supporting services (e.g., action_manager). Menu item descriptors support description, callback, hide, href, and sequence. Used to extend user-account dropdown functionality; the function is re-executed every menu open.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/registries.rst#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\n\nregistry.category(\"user_menuitems\").add(\"my item\", (env) => {\n    return {\n        description: env._t(\"Technical Settings\"),\n        callback: () => { env.services.action_manager.doAction(3); },\n        hide: (Math.random() < 0.5),\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing SelectMenu Appearance in XML\nDESCRIPTION: This snippet shows how to customize the appearance of the SelectMenu component using XML. It demonstrates setting a custom toggler text and defining a custom template for choices using slots.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<SelectMenu\n  choices=\"choices\"\n  groups=\"groups\"\n  value=\"'value_2'\"\n>\n  Make a choice!\n  <t t-set-slot=\"choice\" t-slot-scope=\"choice\">\n    <span class=\"coolClass\" t-esc=\"'👉 ' + choice.data.label + ' 👈'\" />\n  </t>\n</SelectMenu>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Form Field Widget in JavaScript\nDESCRIPTION: Implementation of a custom form field widget extending AbstractField for displaying read-only text\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.FieldChar2 = instance.web.form.AbstractField.extend({\n    init: function() {\n        this._super.apply(this, arguments);\n        this.set(\"value\", \"\");\n    },\n    render_value: function() {\n        this.$el.text(this.get(\"value\"));\n    },\n});\n\ninstance.web.form.widgets.add('char2', 'instance.oepetstore.FieldChar2');\n```\n\n----------------------------------------\n\nTITLE: State Selection with Hide Label Option in Odoo List View - XML\nDESCRIPTION: This snippet configures a 'kanban_state' field with the 'state_selection' widget, supplying the 'hide_label' option to remove the label next to the status icon in list views. Utilized in Odoo list (tree) view customization to keep status compact and icon-only when desired. Requires the field to be of selection type and present in the view.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\\\"kanban_state\\\" widget=\\\"state_selection\\\" options=\\\"{'hide_label': true}\\\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Main Template for Translatable QWeb Reports in XML\nDESCRIPTION: Defines the main container template for a translatable Odoo report (e.g., Sale Order). It iterates through the `docs` records and, for each `doc`, calls a separate document template (`sale.report_saleorder_document`) using `t-call`. Crucially, it passes the partner's language (`doc.partner_id.lang`) via the `t-lang` attribute to enable rendering the document template in the appropriate language.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/reports.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Main template -->\n<template id=\"report_saleorder\">\n    <t t-call=\"web.html_container\">\n        <t t-foreach=\"docs\" t-as=\"doc\">\n            <t t-call=\"sale.report_saleorder_document\" t-lang=\"doc.partner_id.lang\"/>\n        </t>\n    </t>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Records in Odoo Model using XML-RPC in Python\nDESCRIPTION: This example uses Python to create a new res.partner record via Odoo's XML-RPC 'create' method, initializing the name field. Expects the response to be the integer ID of the new record. Prerequisites are the models proxy, an authenticated session, and a dictionary with initial data.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nid = models.execute_kw(db, uid, password, 'res.partner', 'create', [{'name': \"New Partner\"}])\n```\n\n----------------------------------------\n\nTITLE: Styling with SCSS in Odoo Website Theme\nDESCRIPTION: SCSS code example that customizes blockquote styling using Odoo's color and font variables. This demonstrates how to leverage theme variables in custom styling.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_27\n\nLANGUAGE: scss\nCODE:\n```\nblockquote {\n  border-radius: $rounded-pill;\n  color: o-color('o-color-3');\n  font-family: o-website-value('headings-font');\n}\n```\n\n----------------------------------------\n\nTITLE: Intermediate Component for Lazy Loading with LazyComponent - JavaScript\nDESCRIPTION: This snippet defines an ExampleComponentLoader class in JavaScript, which uses Owl's LazyComponent to load the 'example_module.example_assets' bundle only when the ExampleComponent is needed. The class is registered in the Odoo registry under the 'actions' category. It depends on the 'Component', 'LazyComponent' from '@web/core/assets', a valid XML literal for the template, and Odoo's registry system. This allows for efficient, demand-driven asset loading in Odoo frontend modules.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/discover_js_framework/02_build_a_dashboard.rst#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport class ExampleComponentLoader extends Component {\n    static components = { LazyComponent };\n    static template = xml`\n        <LazyComponent bundle=\"'example_module.example_assets'\" Component=\"'ExampleComponent'\" />\n    `;\n}\n\nregistry.category(\"actions\").add(\"example_module.example_action\", ExampleComponentLoader);\n```\n\n----------------------------------------\n\nTITLE: Safe Content Generation with markupsafe.Markup\nDESCRIPTION: Examples of using Markup class for safe HTML generation with proper escaping of user content.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/security.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef get_name(self, to_html=False):\n    if to_html:\n        return Markup(\"<strong>%s</strong>\") % self.name  # escape the name\n    else:\n        return self.name\n```\n\n----------------------------------------\n\nTITLE: Organizing Odoo Data Module Directory Structure - Bash\nDESCRIPTION: This Bash snippet visually describes the recommended directory structure for an Odoo data module, including key folders for actions, models, security, views, and manifest/init files. It helps clarify the organization and required files for developing modules comprised solely of XML data files. No Bash dependencies are required; all entries (\\*.xml) are placeholders signifying where you should place your own XML files inside the respective directories.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/importable_modules.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nestate\n├── actions\n│   └── *.xml\n├── models\n│   └── *.xml\n├── security\n│   └── ir.model.access.csv\n│   └── estate_security.xml\n├── views\n│   └── *.xml\n├── __init__.py\n└── __manifest__.py\n```\n\n----------------------------------------\n\nTITLE: Setting a Fixed Language for Header/Footer in Translatable QWeb Reports (XML)\nDESCRIPTION: Demonstrates how to render the standard header and footer of a report in a specific language (e.g., `en_US`), irrespective of the main document's language. This is achieved by applying the `t-lang` attribute directly to the `t-call` directive invoking `web.external_layout`, ensuring consistency for these elements.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/reports.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<t t-call=\"web.external_layout\" t-lang=\"en_US\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Website Views and Presets in XML\nDESCRIPTION: XML code demonstrating how to activate or deactivate views as presets for the website. This is typically used in the presets.xml file to configure default view settings for a theme.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<we-button title=\"...\"\n   data-name=\"...\"\n   data-customize-website-views=\"website.template_header_default\"\n   data-customize-website-variable=\"'...'\"\n   data-img=\"...\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"...\" inherit_id=\"...\" name=\"...\" active=\"True\"/>\n<template id=\"...\" inherit_id=\"...\" name=\"...\" active=\"False\"/>\n```\n\n----------------------------------------\n\nTITLE: Positioning an Element with usePosition Hook in Owl - JavaScript\nDESCRIPTION: This example shows how to import usePosition and position an Owl component's DOM node relative to a target element. The component defines a template with a popper div and uses usePosition in setup, passing this.props.target as the reference element. Positioning is automatically updated on scroll/resize. Optionally, popper and reference refs are managed using t-ref. Dependencies include Owl, @web/core/position_hook, and correct template mapping; limitations may include precise CSS control.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/hooks.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePosition } from \"@web/core/position_hook\";\nimport { Component, xml } from \"@odoo/owl\";\n\nclass MyPopover extends Component {\n  static template = xml`\n    <div t-ref=\"popper\">\n      I am positioned through a wonderful hook!\n    </div>\n  `;\n\n  setup() {\n    // Here, the reference is the target props, which is an HTMLElement\n    usePosition(this.props.target);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Device Actions from Browser via DeviceProxy - Odoo JavaScript\nDESCRIPTION: Shows how to instruct a device to perform an action using the DeviceProxy.action JavaScript method, sending data to the IoT Box. The request only returns a status; any result must be retrieved via longpolling. Dependencies: DeviceProxy instance. Inputs: action data object; Outputs: request status.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/connect_device.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\niot_device.action(data);\n```\n\n----------------------------------------\n\nTITLE: Defining an SVG Shape with Top and Bottom Paths\nDESCRIPTION: Example SVG code defining a shape (`zigs06`) composed of two parts (`zigs06_top` and `zigs06_bottom`) using `<defs>` and `<use>`. It uses specific fill colors (`#383E45` and `#FFFFFF`) which correspond to the 5th and 4th colors in Odoo's default palette.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/shapes.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" preserveAspectRatio=\"none\" width=\"100%\" height=\"100%\">\n    <defs>\n        <svg id=\"zigs06_top\" viewBox=\"0 0 30 30\" preserveAspectRatio=\"xMinYMin meet\" fill=\"#383E45\" width=\"100%\">\n            <path d=\"M30,7.9C22.5,7.9,22.5,20,15,20S7.5,7.9,0,7.9V0h30V7.9z\"/>\n        </svg>\n        <svg id=\"zigs06_bottom\" viewBox=\"0 0 30 30\" preserveAspectRatio=\"xMinYMax meet\" fill=\"#FFFFFF\" width=\"100%\">\n            <path d=\"M0,22.1C7.5,22.1,7.5,10,15,10s7.5,12.1,15,12.1V30H0V22.1z\"/>\n        </svg>\n    </defs>\n    <svg>\n        <use xlink:href=\"#zigs06_top\"/>\n        <use xlink:href=\"#zigs06_bottom\"/>\n    </svg>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining an HTML Field (`html`) in Odoo\nDESCRIPTION: Defines a field for storing rich text content, editable using the integrated Odoo HTML editor. Odoo's technical name is 'html'. The 'Multiline Text' widget can be used to disable the rich text editor and allow editing of raw HTML content directly.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/studio/fields.rst#2025-04-23_snippet_5\n\nLANGUAGE: Odoo\nCODE:\n```\nhtml\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Content Template for Blog Posts\nDESCRIPTION: This snippet shows how to create a custom dynamic content template for blog posts in Odoo website themes. It iterates over records and sets up the structure for displaying blog post content.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_50\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"dynamic_filter_template_blog_post_airproof\" name=\"...\">\n   <div t-foreach=\"records\" t-as=\"data\" class=\"s_blog_posts_post\">\n      <t t-set=\"record\" t-value=\"data['_record']\"/>\n      <!-- Content -->\n   </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Field Value using ir.default in Odoo XML\nDESCRIPTION: Defines an `ir.default` record in XML to set a static default value for a specific field within an Odoo model. This example sets the default value of the `x_selling_price` field (referenced by its external ID `estate.field_real_estate_property_selling_price`) to `100000`. This method is used for setting defaults in Odoo data modules, which can be user or company-specific but cannot be dynamically calculated.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/importable_modules.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n    <!-- ...model definition from before... -->\n    <record id=\"default_real_estate_property_selling_price\" model=\"ir.default\">\n        <field name=\"field_id\" ref=\"estate.field_real_estate_property_selling_price\" />\n        <field name=\"json_value\">100000</field>\n    </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Content Evaluation Security Patterns\nDESCRIPTION: Demonstrates safe alternatives to eval() for parsing user-provided content.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/security.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# very bad\ndomain = eval(self.filter_domain)\nreturn self.search(domain)\n\n# better but still not recommended\nfrom odoo.tools import safe_eval\ndomain = safe_eval(self.filter_domain)\nreturn self.search(domain)\n\n# good\nfrom ast import literal_eval\ndomain = literal_eval(self.filter_domain)\nreturn self.search(domain)\n```\n\n----------------------------------------\n\nTITLE: Creating a Top-Level Website Menu Item in Odoo XML\nDESCRIPTION: This XML snippet creates a new top-level menu item named \"About us\" linked to '/about-us'. It uses a `<record>` tag within `/website_airproof/data/menu.xml` to define a `website.menu` entry, specifying its `name`, `url`, `parent_id` (searched by URL '/default-main-menu' and website ID 1), the target `website_id` (1), and its display `sequence` (10).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/navigation.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"menu_about_us\" model=\"website.menu\">\n    <field name=\"name\">About us</field>\n    <field name=\"url\">/about-us</field>\n    <field name=\"parent_id\" search=\"[\n        ('url', '=', '/default-main-menu'),\n        ('website_id', '=', 1)]\"/>\n    <field name=\"website_id\">1</field>\n    <field name=\"sequence\" type=\"int\">10</field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Controlling Odoo Prefetching with `with_prefetch` (Python)\nDESCRIPTION: This snippet demonstrates the use of the `with_prefetch` method in Odoo. It can be used to explicitly control which records should be considered for prefetching when browsing a specific record, potentially overriding the default prefetch behavior. In this example, it attempts to ensure fields are prefetched based on `self.ids` even when operating on a single message browsed by `values['id']`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/performance.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfor values in values_list:\n    message = self.browse(values['id']).with_prefetch(self.ids)\n```\n\n----------------------------------------\n\nTITLE: Cloning Odoo Petstore Module - Console Command - Shell\nDESCRIPTION: Demonstrates how to clone the example Odoo module (petstore) from GitHub using a shell command. The cloned folder contains the basic structure for an Odoo web client addon and should be added to the Odoo addons path before database creation and module installation. Requires a working Git installation and appropriate permissions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone http://github.com/odoo/petstore\n```\n\n----------------------------------------\n\nTITLE: Formatting Unsupported Object Exports with Comments for Odoo Transpiler\nDESCRIPTION: Shows examples of exporting objects where comments are included within the curly braces (`{ ... }`). This specific formatting, including comments inside the export list, is *not* supported by the Odoo transpiler and will likely lead to errors during the transformation process.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_modules.rst#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n  // not supported\n  export {\n    a as b, // this is a comment\n    c,\n    d,\n  }\n\n  export {\n    a /* this is a comment */\n  } from \"./file_a\"\n```\n\n----------------------------------------\n\nTITLE: Connecting and Creating Records via JSON-RPC in Python\nDESCRIPTION: This Python 3 script demonstrates interaction with an Odoo server using JSON-RPC. It defines helper functions `json_rpc` (to handle the low-level request/response) and `call` (to structure Odoo method calls). The script uses standard libraries `urllib.request` and `json` to connect, log in, and create a new 'note.note' record.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/web_services.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport random\nimport urllib.request\n\nHOST = 'localhost'\nPORT = 8069\nDB = 'openacademy'\nUSER = 'admin'\nPASS = 'admin'\n\ndef json_rpc(url, method, params):\n    data = {\n        \"jsonrpc\": \"2.0\",\n        \"method\": method,\n        \"params\": params,\n        \"id\": random.randint(0, 1000000000),\n    }\n    req = urllib.request.Request(url=url, data=json.dumps(data).encode(), headers={\n        \"Content-Type\":\"application/json\",\n    })\n    reply = json.loads(urllib.request.urlopen(req).read().decode('UTF-8'))\n    if reply.get(\"error\"):\n        raise Exception(reply[\"error\"])\n    return reply[\"result\"]\n\ndef call(url, service, method, *args):\n    return json_rpc(url, \"call\", {\"service\": service, \"method\": method, \"args\": args})\n\n# log in the given database\nurl = \"http://%s:%s/jsonrpc\" % (HOST, PORT)\nuid = call(url, \"common\", \"login\", DB, USER, PASS)\n\n# create a new note\nargs = {\n    'color': 8,\n    'memo': 'This is another note',\n    'create_uid': uid,\n}\nnote_id = call(url, \"object\", \"execute\", DB, uid, PASS, 'note.note', 'create', args)\n```\n\n----------------------------------------\n\nTITLE: Using Group Element in Odoo Search View\nDESCRIPTION: This XML snippet shows how to use the group element to organize filters in more complex search views. Groups provide a way to visually separate related filters for better usability.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_64\n\nLANGUAGE: xml\nCODE:\n```\n<search>\n    <group>\n        <FILTERS/>\n    </group>\n</search>\n```\n\n----------------------------------------\n\nTITLE: Inserting Assets Before a Specific File in Odoo (Python)\nDESCRIPTION: Demonstrates inserting assets immediately before a specific target file within a bundle using the `before` directive in the `__manifest__.py`. The syntax requires a 3-element tuple `('before', <target_path>, <new_path>)`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/assets.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n'web.assets_common': [\n    ('before', 'web/static/src/css/bootstrap_overridden.scss', 'my_addon/static/src/css/bootstrap_overridden.scss'),\n],\n```\n\n----------------------------------------\n\nTITLE: Inserting Assets After a Specific File in Odoo (Python)\nDESCRIPTION: Shows how to insert assets immediately after a specific target file within a bundle using the `after` directive in the `__manifest__.py`. The syntax requires a 3-element tuple `('after', <target_path>, <new_path>)`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/assets.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n'web.assets_common': [\n    ('after', 'web/static/src/css/list_view.scss', 'my_addon/static/src/css/list_view.scss'),\n],\n```\n\n----------------------------------------\n\nTITLE: Running Odoo Tests via Command Line (Console)\nDESCRIPTION: Provides examples of using the `odoo-bin` command to execute Odoo unit tests. It demonstrates running all tests for a specific module and its dependencies (`-i account --test-enable`), running tests from a single Python file (`--test-file`), and filtering tests based on tags, modules, classes, or methods (`--test-tags`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/unit_tests.rst#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ # run all the tests of account, and modules installed by account\n$ # the dependencies already installed are not tested\n$ # this takes some time because you need to install the modules, but at_install\n$ # and post_install are respected\n$ odoo-bin -i account --test-enable\n$ # run all the tests in this file\n$ odoo-bin --test-file=addons/account/tests/test_account_move_entry.py\n$ # test tags can help you filter quite easily\n$ odoo-bin --test-tags=/account:TestAccountMove.test_custom_currency_on_account_1\n```\n\n----------------------------------------\n\nTITLE: Starting an Odoo XML File Structure\nDESCRIPTION: Demonstrates the required initial structure for any Odoo XML file, including the XML declaration specifying encoding (UTF-8) and the mandatory root `<odoo>` tag which encloses all Odoo-specific definitions like templates or records.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<odoo>\n   ...\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Defining Buttons with Hotkeys in Odoo Form View - XML\nDESCRIPTION: These snippets show how to assign keyboard shortcuts to Odoo form buttons using the data-hotkey attribute. The hotkey is triggered using alt or shift+alt with the specified key. Place these buttons in a form to improve accessibility and productivity.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<button type=\\\"object\\\" name=\\\"action_confirm\\\" string=\\\"Confirm\\\" data-hotkey=\\\"c\\\"/>\\n<button type=\\\"object\\\" name=\\\"action_tear\\\" string=\\\"Tear the sheet\\\" data-hotkey=\\\"shift+k\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Declaring a New Static Theme Page in Odoo - XML\nDESCRIPTION: This snippet defines a new published static page using the 'website.page' model. Includes fields for name, URL, key, type, and embeds QWeb structure as page content. The required dependencies include the website module and proper website_id for scoping. Content is wrapped in Odoo's layout for Website Builder compatibility. Inputs: page attributes for record fields; outputs: new accessible page.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<odoo noupdate=\\\"1\\\">\\n     <record id=\\\"page_about_us\\\" model=\\\"website.page\\\">\\n         <field name=\\\"name\\\">About us</field>\\n         <field name=\\\"is_published\\\" eval=\\\"True\\\"/>\\n         <field name=\\\"key\\\">website_airproof.page_about_us</field>\\n         <field name=\\\"url\\\">/about-us</field>\\n         <field name=\\\"website_id\\\" eval=\\\"1\\\" />\\n         <field name=\\\"type\\\">qweb</field>\\n         <field name=\\\"arch\\\" type=\\\"xml\\\">\\n             <t t-name=\\\"website_airproof.page_about_us\\\">\\n                 <t t-call=\\\"website.layout\\\">\\n                 <div id=\\\"wrap\\\" class=\\\"oe_structure\\\">\\n                     <!-- Content -->\\n                 </div>\\n                 </t>\\n             </t>\\n         </field>\\n     </record>\\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New Odoo Module via Command Line\nDESCRIPTION: Example of using the `odoo-bin scaffold` subcommand to automatically generate the basic directory structure and initial files for a new Odoo module. In this case, it creates a module named `my_module` within the `/addons/` directory, simplifying the module creation process.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_44\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin scaffold my_module /addons/\n```\n\n----------------------------------------\n\nTITLE: Making an RPC Call using Odoo RPC Service (JavaScript)\nDESCRIPTION: This snippet illustrates initializing and invoking the Odoo rpc service to send an asynchronous RPC request to the backend. The service is acquired via useService(\"rpc\") and then called with a route and parameters object. The service uses a POST method and expects parameters to be JSON-serializable, returning the controller response. Inputs are the route and an optional parameter dictionary; output is a Promise resolved with the result. Limitations include intended use only for Odoo controller endpoints and indirect error handling.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/services.rst#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n   // in setup\n   this.rpc = useService(\"rpc\");\n\n   // somewhere else, in an async function:\n   const result = await this.rpc(\"/my/route\", { some: \"value\" });\n```\n\n----------------------------------------\n\nTITLE: Defining footer Element in Odoo Form XML\nDESCRIPTION: The `<footer>` element is used within Odoo form views, typically placed after the `<sheet>`. Its primary purpose is to define the buttons displayed at the bottom of dialog boxes derived from this form view.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <sheet>\n        ...\n    </sheet>\n    <footer>\n        <BUTTONS/>\n    </footer>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Example Structure Using separator with Title in Odoo Form XML\nDESCRIPTION: This snippet demonstrates how the `<separator>` element can optionally include a `string` attribute to display a title, acting as a section divider within a form group. It shows separators used at different nesting levels within groups.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <group>\n        <FIELD/>\n        <separator string=\"Title 1\"/>\n        <FIELD/>\n        <group>\n            <FIELD/>\n            <separator string=\"Title 2\"/>\n            <FIELD/>\n        </group>\n        <group>\n            <FIELD/>\n            <FIELD/>\n        </group>\n    </group>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Adding a Rainbow Man Effect with Default Settings (JavaScript)\nDESCRIPTION: This snippet shows the minimal call to display the built-in rainbow man effect with default values. The add method is called with the effect type only. Requires effect service availability. Inputs: Type string. Outputs: Rainbow man effect overlay.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/services.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neffectService.add({ type: \"rainbow_man\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring Progress Bar Widget with Options in Odoo XML View - XML\nDESCRIPTION: This field configuration shows the 'progressbar' widget on an integer or float field 'absence_of_today', with options to define 'current_value', 'max_value', and 'editable'. The bar visualizes progress as a ratio, and these options allow dynamic referencing of record fields for current and maximum values. Used in Odoo views to display completion metrics; referenced fields should be present in the model.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<field\\n    name=\\\"absence_of_today\\\"\\n    widget=\\\"progressbar\\\"\\n    options=\\\"{\\n        'current_value': 'absence_of_today',\\n        'max_value': 'total_employee',\\n        'editable': false,\\n    }\\\"\\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding a Field to an XML View\nDESCRIPTION: XML code snippet showing how to add the new datetime field to an existing view definition.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-23_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"value2\"/>\n\n<field name=\"start_datetime\"/>\n```\n\n----------------------------------------\n\nTITLE: Linking Button to Server Action in Odoo View - XML\nDESCRIPTION: This XML code demonstrates how to bind a view button to a server action in Odoo using 'type=\\\"action\\\"' and referencing the external identifier with the percent syntax. When the button is clicked, Odoo executes the action corresponding to the external ID. Loading this snippet requires a registered server action and a correctly defined external identifier.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/09_actions.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<button type=\\\"action\\\" name=\\\"%(test.test_model_action)d\\\" string=\\\"My Action\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo Form Submission for Sending Email - XML\nDESCRIPTION: This minimal XML snippet demonstrates creating a form that targets the 'mail.mail' model, triggering an email send action upon submission. The only required parameter is data-model_name set to 'mail.mail'. Dependencies include the mail module being enabled on the Odoo server.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/forms.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<form data-model_name=\"mail.mail\">\n```\n\n----------------------------------------\n\nTITLE: List View Field Element in Odoo\nDESCRIPTION: Demonstrates how to define a field element within a list view in Odoo. Each field represents a column in the list view that displays values from the model.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_37\n\nLANGUAGE: xml\nCODE:\n```\n<list>\n    <field name=\"FIELD_NAME\"/>\n</list>\n```\n\n----------------------------------------\n\nTITLE: Extending Odoo Model with Customer Rating and Mail Thread Features (Python)\nDESCRIPTION: This snippet illustrates how to add customer rating capabilities to a custom Odoo model by inheriting from 'rating.mixin' and 'mail.thread'. The fields 'user_id' and 'partner_id' link the model to users and customers, enabling rating and communication features. Requires the model to exist within a valid Odoo module and have dependencies on 'rating.mixin' and Odoo's ORM, specifically fields.Many2one linking to res.users and res.partner.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/mixins.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass MyModel(models.Models):\\n    _name = 'my_module.my_model'\\n    _inherit = ['rating.mixin', 'mail.thread']\\n\\n    user_id = fields.Many2one('res.users', 'Responsible')\\n    partner_id = fields.Many2one('res.partner', 'Customer')\n```\n\n----------------------------------------\n\nTITLE: Adding Computed Field for Offer Count in Estate Property Type Model\nDESCRIPTION: Adds an 'offer_count' computed field to the estate.property.type model that counts the number of offers for a given property type using the offer_ids field.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\noffer_count = fields.Integer(compute='_compute_offer_count', string='Offer Count')\n\n@api.depends('offer_ids')\ndef _compute_offer_count(self):\n    for record in self:\n        record.offer_count = len(record.offer_ids)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding a Field in Odoo Form View using XML\nDESCRIPTION: This XML snippet demonstrates using the `invisible` attribute within an Odoo form view. The `description` field will only be visible if the value of the `is_partner` field is true. The expression `not is_partner` evaluates to true when `is_partner` is false, making the field invisible in that case. It's crucial that any field used in an `invisible` attribute's expression (like `is_partner` here) is also included within the same view, even if hidden itself.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <field name=\"description\" invisible=\"not is_partner\"/>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Enabling and Managing a Pager with usePager in Owl - JavaScript\nDESCRIPTION: This snippet demonstrates using the usePager hook from \"@web/search/pager_hook\" to control pagination state within a custom Owl View component. A state object (with offset, limit, total) is managed and passed to the Pager through usePager, providing dynamic props including an onUpdate callback to mutate state. All paging configuration and updates are handled declaratively. Owl and @web/search/pager_hook are required dependencies. Expected inputs and outputs are managed pager state and update logic.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/hooks.rst#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePager } from \"@web/search/pager_hook\";\n\nclass CustomView {\n  setup() {\n    const state = owl.hooks.useState({\n      offset: 0,\n      limit: 80,\n      total: 50,\n    });\n    usePager(() => {\n      return {\n        offset: this.state.offset,\n        limit: this.state.limit,\n        total: this.state.total,\n        onUpdate: (newState) => {\n          Object.assign(this.state, newState);\n        },\n      };\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Column Amount Option (XML)\nDESCRIPTION: The s_nb_column_fixed class on a row div disables the option for users to modify the number of columns within the Website Builder. Used to enforce a fixed column layout, this requires a Bootstrap row structure and Odoo snippet context.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\\\"row s_nb_column_fixed\\\">\n```\n\n----------------------------------------\n\nTITLE: Adding a Sepia Effect using Odoo Effect Service (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to access and use the Odoo effect service within a frontend application. It obtains the effect service through the useService hook, then applies a sepia effect by calling the add method with the desired effect parameters. This example relies on the effect service being registered globally, typically within webclient.js, and assumes the Odoo JavaScript services infrastructure is properly loaded. Input is an effect configuration (e.g., type: 'sepia'), and the effect change is applied to the Odoo UI.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/services.rst#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n  const effectService = useService(\"effect\");\n  effectService.add({ type: \"sepia\" });\n```\n\n----------------------------------------\n\nTITLE: Disabling Product Categories Display in eCommerce\nDESCRIPTION: XML record example that disables the display of product categories in the eCommerce module. Used in presets.xml to configure how products are displayed on the website.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"website_sale.products_categories\" model=\"ir.ui.view\">\n   <field name=\"active\" eval=\"False\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo Form Submission for Job Application - XML\nDESCRIPTION: This snippet shows a form configured to create a new HR applicant by setting data-model_name to 'hr.applicant'. Additional backend setup for the HR module and required fields may be necessary for proper operation, as defined in the HR Applicant model.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/forms.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<form data-model_name=\"hr.applicant\">\n```\n\n----------------------------------------\n\nTITLE: Applying Background Gradient to Section in Odoo XML\nDESCRIPTION: Demonstrates how to apply a linear background gradient to an Odoo website section (`<section>`) using an inline `style` attribute. This method is often used in custom themes where gradients aren't selectable via the standard UI. The `!important` flag ensures the style overrides others.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/gradients.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<section class=\"s_text_image\" data-snippet=\"s_text_image\" data-name=\"Text - Image\" style=\"background-image: linear-gradient(135deg, rgb(255, 204, 51) 0%, rgb(226, 51, 255) 100%) !important;\">\n    <!-- Content -->\n</section>\n```\n\n----------------------------------------\n\nTITLE: Defining loadAssets Function in JavaScript\nDESCRIPTION: This function loads assets described by the assets parameter. It handles loading of JavaScript and CSS files.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/assets.rst#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n.. js:function:: loadAssets(assets)\n\n    :param Object assets: a description of various assets that should be loaded\n    :returns: Promise<void>\n\n    Load the assets described by the `assets` parameter. It is an object that\n    may contain the following keys:\n\n    .. list-table::\n      :widths: 20 20 60\n      :header-rows: 1\n\n      * - Key\n        - Type\n        - Description\n      * - `jsLibs`\n        - `string[]`\n        - a list of urls of javascript files\n      * - `cssLibs`\n        - `string[]`\n        - a list of urls of css files\n```\n\n----------------------------------------\n\nTITLE: Field Aggregation in Odoo List Views\nDESCRIPTION: Examples of defining column aggregations (sum and average) in Odoo list views to display totals at the bottom of numeric columns.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_40\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"sent\" sum=\"Total\" />\n<field name=\"clicks_ratio\" avg=\"Average\"/>\n```\n\n----------------------------------------\n\nTITLE: Correct and Incorrect Concatenation of Translation Strings Odoo Python\nDESCRIPTION: This pair of Python snippets illustrate improper versus proper block structuring of translatable strings. The first demonstrates splitting context across multiple small translations, which makes contextless and error-prone translations; the second consolidates the information for fuller translation context, supporting translators with the whole message. Requires Odoo translation tools; input is literal strings (possibly concatenated); output is a formatted, contextually correct translation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/translations.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n_(\"Reference of the document that generated \") + \\\n_(\"this sales order request.\")\n```\n\nLANGUAGE: python\nCODE:\n```\n_(\"Reference of the document that generated \" + \\\n  \"this sales order request.\")\n```\n\n----------------------------------------\n\nTITLE: Checking Odoo Server Version via XML-RPC - Ruby\nDESCRIPTION: Queries the /xmlrpc/2/common endpoint using Ruby's XMLRPC::Client to fetch Odoo server version metadata. Useful for validating endpoint accessibility and server version before authenticating.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ncommon = XMLRPC::Client.new2(\"#{url}/xmlrpc/2/common\")\\ncommon.call('version')\n```\n\n----------------------------------------\n\nTITLE: Filtering Account Balances by Tag and Code Prefix in Odoo Configuration (plaintext)\nDESCRIPTION: This snippet demonstrates the configuration syntax used within Odoo reports to select account balances based on tags and code prefixes. The example illustrates combining account selection by tag (my_module.my_tag), by linked tag ID (42), and by code prefix (10). It is used in Odoo's reporting YAML or template files, not in code execution contexts. The inputs are tag references and code prefixes; the output is a filtered set of account balances for reporting.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/reporting/customize.rst#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nThe balances of accounts tagged as *my_module.my_tag* will be summed with those of accounts\nlinked to the tag with ID *42* and accounts with the code prefix `10`\n```\n\n----------------------------------------\n\nTITLE: Using ExecutionContext for Granular Profiling Analysis\nDESCRIPTION: This code demonstrates how to use `ExecutionContext` as a context manager, typically within loops or repeated calls. It allows differentiating calls to the same code block (`do_stuff()`) in the Speedscope results by adding contextual information (like the loop `index`) as separate frames, aiding in analysis.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/performance.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfor index in range(max_index):\n    with ExecutionContext(current_index=index):  # Identify each call in speedscope results.\n        do_stuff()\n```\n\n----------------------------------------\n\nTITLE: Moving Nodes Relative to a Target Node Locator – Odoo XML\nDESCRIPTION: This example utilizes the position=\\\"move\\\" attribute to reposition nodes specified by an inner <xpath> or <field> selector, modifying their placement relative to a target node in the view. The mechanism relies on both a 'move' instruction and context on where the node should be inserted (e.g., after, inside, etc.). Familiarity with Odoo's XML view architecture is necessary to ensure correct element referencing.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_records.rst#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<xpath expr=\\\"//@target\\\" position=\\\"after\\\">\\n    <xpath expr=\\\"//@node\\\" position=\\\"move\\\"/>\\n</xpath>\\n\\n<field name=\\\"target_field\\\" position=\\\"after\\\">\\n    <field name=\\\"my_field\\\" position=\\\"move\\\"/>\\n</field>\n```\n\n----------------------------------------\n\nTITLE: Describing Odoo Addon Directory Structures - plaintext - text\nDESCRIPTION: This snippet shows a sample directory tree structure of an Odoo module, illustrating the organization of files and folders (such as models, controllers, views, etc.) for clarity and maintainability. It aids developers in visualizing the ideal layout, supporting quick navigation and adherence to Odoo standards. There are no dependencies or parameters, and it serves as a template reference for new modules.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\naddons/plant_nursery/\n|-- models/\n|   |-- plant_nursery.py (first main model)\n|   |-- plant_order.py (another main model)\n|   |-- res_partner.py (inherited Odoo model)\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Odoo via XML-RPC - Ruby\nDESCRIPTION: Invokes the 'authenticate' method on the Odoo XML-RPC /xmlrpc/2/common endpoint using Ruby. Supplies database name, username, password, and an empty hash for options. The result is a uid integer indicating successful authentication.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nuid = common.call('authenticate', db, username, password, {})\n```\n\n----------------------------------------\n\nTITLE: Defining Odoo Module Alias Re-exporting Default\nDESCRIPTION: Demonstrates using the `/** @odoo-module alias=web.someName**/` comment directive to create an alias (`web.someName`) for a native JavaScript module. This alias allows older code using the `web.someName` identifier to access the module defined with the new ES6 syntax. By default, the alias re-exports the `default` export of the original module.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_modules.rst#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module alias=web.someName**/\nimport { someFunction } from './file_b';\n\nexport default function otherFunction(val) {\n    return someFunction(val + 3);\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring IoT Handler Directories for Odoo Modules - text\nDESCRIPTION: Shows the directory structure required in an Odoo module for IoT integration. Modules should contain an iot_handlers directory, subdivided into drivers and interfaces folders with Python scripts for each device type. This template helps organize device support code and enables auto-loading by the IoT Box. Inputs: directory and filenames; Output: file structure.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/connect_device.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nyour_module\\n├── ...\\n└── iot_handlers\\n    ├── drivers\\n    │   ├── DriverName.py\\n    │   └── ...\\n    │\\n    └── interfaces\\n        ├── InterfaceName.py\\n        └── ...\n```\n\n----------------------------------------\n\nTITLE: Verbose Utility-Class Usage in an HTML Component Attribute\nDESCRIPTION: Illustrates a Qweb (Odoo) component using a long class list with conditional class names and static Bootstrap/Odoo utility classes for layout, border, and state. This highlights the downside of verbose inline class usage and the potential for reduced readability. Relies on the Qweb templating engine and Odoo/Bootstrap CSS.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/scss_tips.rst#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<myComponent t-attf-class=\"d-flex border px-lg-2 card\n{{props.readonly ? 'o_myComponent_disabled' : ''}}\ncard d-lg-block position-absolute {{props.active ?\n'o_myComponent_active' : ''}}  myComponent px-3\"/>\n```\n\n----------------------------------------\n\nTITLE: Registering and Handling Client Actions in JavaScript\nDESCRIPTION: JavaScript code showing client-side action registration and handling in Odoo web client. Includes event handling and action management.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nself.$el.append(QWeb.render('PetToy', {item: item}));\n});\n});\n},\nselected_item: function (event) {\n    this.do_action({\n        type: 'ir.actions.act_window',\n        res_model: 'product.product',\n        res_id: $(event.currentTarget).data('id'),\n        views: [[false, 'form']],\n    });\n},\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Hierarchical Data with XML ID References in CSV\nDESCRIPTION: Illustrates importing data via CSV format where relationships are established using XML IDs. The `parent_id:id` column header signifies that the values in that column ('module.parent') are external XML IDs referencing parent records. This allows creating multiple child records ('child1', 'child2', 'child3') linked to a common parent identified by `module.parent`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/define_module_data.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nid,parent_id:id,name\n\"child1\",\"module.parent\",\"Name1\"\n\"child2\",\"module.parent\",\"Name2\"\n\"child3\",\"module.parent\",\"Name3\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Assets in an Odoo Bundle (Python)\nDESCRIPTION: Illustrates how to replace a target asset file with one or more new files at the same position within the bundle using the `replace` directive in the `__manifest__.py`. The syntax requires a 3-element tuple `('replace', <target_path>, <new_path>)`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/assets.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n'web.assets_common': [\n    ('replace', 'web/static/src/js/boot.js', 'my_addon/static/src/js/boot.js'),\n],\n```\n\n----------------------------------------\n\nTITLE: Clearing Python Bytecode Cache\nDESCRIPTION: Navigates to the Python site-packages directory (the example path `$HOME/.local/lib/python3.8/site-packages/` should be adjusted based on the actual Python installation) and uses the `find` command to locate and delete all `.pyc` (compiled Python bytecode) files. This can help resolve `AttributeError` issues that sometimes occur after updating modules or Python itself.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/setup_guide.rst#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ cd $HOME/.local/lib/python3.8/site-packages/\n$ find -name '*.pyc' -type f -delete\n```\n\n----------------------------------------\n\nTITLE: Defining Google OAuth Redirect URI for Odoo\nDESCRIPTION: Specifies the callback URL that Google will redirect to after successful user authentication. This URL, `https://yourdbname.odoo.com/google_gmail/confirm`, requires replacing `yourdbname` with the actual Odoo database name. It must be added under 'Authorized redirect URIs' when creating OAuth 2.0 Client ID credentials (Web Application type) in the Google API Console. This configuration is essential for the OAuth flow to complete correctly and is also needed when resolving 'Error 400 Redirect URI Mismatch'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/email_communication/google_oauth.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://yourdbname.odoo.com/google_gmail/confirm\n```\n\n----------------------------------------\n\nTITLE: Example of footer Content in Odoo Form XML\nDESCRIPTION: This snippet demonstrates common buttons placed within a `<footer>` element for Odoo form dialogs. It includes standard 'Save' and 'Discard' buttons (using `special` attribute) and a custom action button triggering an object method.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<footer>\n    <button string=\"Save\" special=\"save\"/>\n    <button string=\"Feature action\" type=\"object\" name=\"my_action\" class=\"btn-primary\"/>\n    <button string=\"Discard\" special=\"cancel\"/>\n</footer>\n```\n\n----------------------------------------\n\nTITLE: Scaffolding an Odoo Module (Console)\nDESCRIPTION: This command uses Odoo's scaffolding tool (`odoo-bin scaffold`) to create a basic module structure. It generates an 'Academy' module inside a 'my-modules' directory. This is the initial step in creating a new custom Odoo module.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ./odoo-bin scaffold Academy my-modules\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Company Field in Odoo XML Views\nDESCRIPTION: Defines an Odoo form view in XML. The `company_id` field includes the attribute `groups=\"base.group_multi_company\"`, making the field visible only to users who are members of the 'Multi Companies' security group (`base.group_multi_company`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/company.rst#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<record model=\"ir.ui.view\" id=\"record_form_view\">\n    <field name=\"name\">record.restricted.form</field>\n    <field name=\"model\">record.restricted</field>\n    <field name=\"arch\" type=\"xml\">\n        <form>\n            <sheet>\n                <group>\n                    <group>\n                        <field name=\"company_id\" groups=\"base.group_multi_company\"/>\n                        <field name=\"other_record_id\"/>\n                    </group>\n                </group>\n            </sheet>\n        </form>\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Defining an Action Handler in an IoT Driver - Odoo Python\nDESCRIPTION: Outlines how to add an action method in a Python driver class to process commands received from Odoo JavaScript. This method executes with data sent by the frontend via DeviceProxy.action. Dependencies: must be a method of a Driver subclass. Inputs: data from JS; Outputs: implementation-specific, can trigger device behavior.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/connect_device.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef action(self, data):\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Alias in Business Trip Form View (XML)\nDESCRIPTION: This XML snippet demonstrates how to add alias configuration fields to the form view of the BusinessTrip model, allowing easy management of the email alias.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/mixins.rst#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<page string=\"Emails\">\n    <group name=\"group_alias\">\n        <label for=\"alias_name\" string=\"Email Alias\"/>\n        <div name=\"alias_def\">\n            <field name=\"alias_id\" class=\"oe_read_only oe_inline\"\n                    string=\"Email Alias\" required=\"0\"/>\n            <div class=\"oe_edit_only oe_inline\" name=\"edit_alias\"\n                 style=\"display: inline;\" >\n                <field name=\"alias_name\" class=\"oe_inline\"/>\n                @\n                <field name=\"alias_domain\" class=\"oe_inline\" readonly=\"1\"/>\n            </div>\n        </div>\n        <field name=\"alias_contact\" class=\"oe_inline\"\n                string=\"Accept Emails From\"/>\n    </group>\n</page>\n```\n\n----------------------------------------\n\nTITLE: Example SQL Constraint Application Error in Odoo Log\nDESCRIPTION: Illustrates a typical error logged by Odoo when attempting to add an SQL constraint (e.g., `CHECK(price > 0)`) to a table (`estate_property_offer`) that already contains data violating the constraint. This indicates that problematic data must be corrected or removed before the constraint can be successfully applied during a module update.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/10_constraints.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nERROR rd-demo odoo.schema: Table 'estate_property_offer': unable to add constraint 'estate_property_offer_check_price' as CHECK(price > 0)\n```\n\n----------------------------------------\n\nTITLE: Defining the Translatable Document Template in QWeb XML\nDESCRIPTION: Shows the document-specific template used within a translatable report structure, called by the main template. It re-browses the `doc` record using the language specified in the context (`doc.with_context(lang=doc.partner_id.lang)`) to ensure translatable fields (like country names) are correctly rendered. It utilizes `web.external_layout` for structure and displays relevant record fields. Re-browsing is only necessary if the record uses translatable fields and may impact performance.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/reports.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Translatable template -->\n<template id=\"report_saleorder_document\">\n    <!-- Re-browse of the record with the partner lang -->\n    <t t-set=\"doc\" t-value=\"doc.with_context(lang=doc.partner_id.lang)\" />\n    <t t-call=\"web.external_layout\">\n        <div class=\"page\">\n            <div class=\"oe_structure\"/>\n            <div class=\"row\">\n                <div class=\"col-6\">\n                    <strong t-if=\"doc.partner_shipping_id == doc.partner_invoice_id\">Invoice and shipping address:</strong>\n                    <strong t-if=\"doc.partner_shipping_id != doc.partner_invoice_id\">Invoice address:</strong>\n                    <div t-field=\"doc.partner_invoice_id\" t-options=\"{&quot;no_marker&quot;: True}\"/>\n                <...>\n            <div class=\"oe_structure\"/>\n        </div>\n    </t>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Extending Elements With ActionSwiper Using XPath in Owl XML Templates (XML)\nDESCRIPTION: This XML snippet demonstrates how to wrap an existing element in the ActionSwiper component via Odoo's xpath template engine. It first inserts ActionSwiper after elements with the 'o_Message' class, conditionally sets the onRightSwipe prop, then moves the original element inside ActionSwiper. This enables swiping for elements already present. Prerequisites: understanding of xpath template modifications and context variables. Input: dynamic state and DOM; output: extended interactive behavior.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<xpath expr=\"//*[hasclass('o_Message')]\" position=\"after\">\n  <ActionSwiper\n    onRightSwipe=\"messaging.device.isMobile and messageView.message.isNeedaction ?\n      {\n        action: () => messageView.message.markAsRead(),\n        icon: 'fa-check-circle',\n        bgColor: 'bg-success',\n      } : undefined\"\n  />\n</xpath>\n<xpath expr=\"//ActionSwiper\" position=\"inside\">\n  <xpath expr=\"//*[hasclass('o_Message')]\" position=\"move\"/>\n</xpath>\n```\n\n----------------------------------------\n\nTITLE: Using Tax Tags Engine for Report Expressions\nDESCRIPTION: This snippet explains the Tax Tags computation engine for accounting reports. The formula matches or creates tax tags and calculates the difference between positive and negative tagged move lines.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/reporting/customize.rst#2025-04-23_snippet_1\n\nLANGUAGE: odoo\nCODE:\n```\ntag_name\n```\n\n----------------------------------------\n\nTITLE: Translating Strings in Odoo Owl Components using Environment\nDESCRIPTION: Demonstrates how to perform string translation within an Odoo Owl component by accessing the `_t` function from the component's environment (`this.env`). Note that template translations are usually automatic.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/framework_overview.rst#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst someString = this.env._t('some text');\n```\n\n----------------------------------------\n\nTITLE: Structuring the /get_result Request for Odoo Extract API in JSON\nDESCRIPTION: Specifies the JSON-RPC2 request format for querying the Odoo Extract API's /get_result endpoint to retrieve the processing status and extracted data. Requires the `version` used in the initial parse request, the `document_token` received in the parse response, and the `account_token`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/extract_api.rst#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"version\": int,\n        \"document_token\": int,\n        \"account_token\": string,\n    },\n    \"id\": string,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Employee Cost per Hour for a Work Center in Odoo\nDESCRIPTION: Explains how to set the default estimated hourly cost for *each employee* working at a specific work center. This value, entered in the 'per employee' field, is used primarily for calculating the initial estimated MO cost, not the final real cost.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/basic_setup/mo_costs.rst#2025-04-23_snippet_5\n\nLANGUAGE: Odoo Configuration\nCODE:\n```\nenter a value in the\n:guilabel:`per employee` field, located beside the :guilabel:`Cost per hour` section on the work\ncenter's :guilabel:`General Information` tab.\n```\n\n----------------------------------------\n\nTITLE: Defining Column Visibility in Odoo Views - XML\nDESCRIPTION: Demonstrates how to use the column_invisible attribute in Odoo XML view definitions to conditionally show or hide a field or button based on a Python expression. This requires familiarity with Odoo's view architecture and assumes column_invisible is used within a <field> or <button> element. The attribute expects a Python expression and its return value determines if the widget is hidden (True) or visible (False).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures/generic_attribute_column_invisible.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\\\"product_is_late\\\" column_invisible=\\\"parent.has_late_products == False\\\"/>\n<button type=\\\"object\\\" name=\\\"action_confirm\\\" column_invisible=\\\"context.get('hide_confirm')\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Azure Role for Odoo Storage (JSON)\nDESCRIPTION: This JSON configuration defines a custom role in Microsoft Azure IAM specifically for Odoo integration. It grants permissions to generate user delegation keys, read blobs, and add blobs ('Microsoft.Storage/storageAccounts/blobServices/containers/blobs/add/action'), while explicitly excluding delete permissions ('notDataActions') for enhanced security. This role is intended to be assigned to the Odoo application registration within the Azure subscription scope. The `subscription-id` placeholder in `assignableScopes` must be replaced with the actual Azure subscription ID.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/integrations/cloud_storage.rst#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"roleName\": \"Custom role\",\n        \"description\": \"\",\n        \"assignableScopes\": [\n            \"/subscriptions/subscription-id\"\n        ],\n        \"permissions\": [\n            {\n                \"actions\": [\"Microsoft.Storage/storageAccounts/blobServices/generateUserDelegationKey/action\"],\n                \"notActions\": [],\n                \"dataActions\": [\"Microsoft.Storage/storageAccounts/blobServices/containers/blobs/read\", \"Microsoft.Storage/storageAccounts/blobServices/containers/blobs/add/action\"],\n                \"notDataActions\": []\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Panel in Odoo Search View\nDESCRIPTION: This XML snippet demonstrates the basic structure of a searchpanel element, which displays a search panel to the left of multi-record views for quick filtering of data based on specified fields.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_65\n\nLANGUAGE: xml\nCODE:\n```\n<search>\n    <searchpanel>\n        <FIELDS/>\n    </searchpanel>\n</search>\n```\n\n----------------------------------------\n\nTITLE: Selecting Fonts for Odoo Theme Palette (SCSS)\nDESCRIPTION: This SCSS snippet shows how to set various theme element fonts by key, such as font, headings-font, navbar-font, and buttons-font, within the $o-website-values-palettes structure. This is placed within the primary_variables.scss definition and is used to supply font parameters to the Odoo theming system via SCSS variables. Only string keys for known Odoo properties are supported.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n$o-website-values-palettes: (\n   (\n      'font':                             '<font-name>',\n      'headings-font':                    '<font-name>',\n      'navbar-font':                      '<font-name>',\n      'buttons-font':                     '<font-name>',\n   ),\n);\n```\n\n----------------------------------------\n\nTITLE: Using the Event Bus for Component Communication\nDESCRIPTION: Demonstrates subscribing to events on the env.bus, which allows different parts of the system to communicate without coupling. The example shows listening for the WEB_CLIENT_READY event.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/framework_overview.rst#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// for example, in some service code:\nenv.bus.on(\"WEB_CLIENT_READY\", null, doSomething);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Snippet Options and Controls (XML)\nDESCRIPTION: This XML snippet implements specific snippet options such as layout (Default, Portrait, Square, Landscape) and spacing via button groups, allowing end users to customize appearance through the Website Builder. Dependencies: Odoo Website Builder, appropriate classes on elements. Input: option group, data-selector, and button configuration. Output is real-time snippet style/user interaction. Limitations: option values must match CSS class availability.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\\\"s_airproof_snippet_options\\\" inherit_id=\\\"website.snippet_options\\\" name=\\\"Airproof - Snippets Options\\\">\\n   <xpath expr=\\\".\\\" position=\\\"inside\\\">\\n      <div data-selector=\\\".s_airproof_snippet\\\">\\n         <we-select string=\\\"Layout\\\">\\n            <we-button data-select-class=\\\"\\\">Default</we-button>\\n            <we-button data-select-class=\\\"s_airproof_snippet_portrait\\\">Portrait</we-button>\\n            <we-button data-select-class=\\\"s_airproof_snippet_square\\\">Square</we-button>\\n            <we-button data-select-class=\\\"s_airproof_snippet_landscape\\\">Landscape</we-button>\\n         </we-select>\\n         <we-title>Space</we-title>\\n         <we-button-group string=\\\"Before\\\">\\n            <we-button data-select-class=\\\"mt-0\\\">1</we-button>\\n            <we-button data-select-class=\\\"mt-3\\\">2</we-button>\\n            <we-button data-select-class=\\\"mt-5\\\">3</we-button>\\n         </we-button-group>\\n      </div>\\n   </xpath>\\n</template>\n```\n\n----------------------------------------\n\nTITLE: Pair-Based Attribute Assignment with t-att in QWeb XML\nDESCRIPTION: Illustrates passing a pair (array or tuple) to t-att in QWeb XML to produce a single attribute assignment. The first element is the attribute name, and the second is the value. This allows for programmatic attribute specification in templates when the attribute name is dynamic.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<div t-att=\"['a', 'b']\"/>\n```\n\n----------------------------------------\n\nTITLE: Inefficient Odoo Record Counting in a Loop (Python)\nDESCRIPTION: This snippet demonstrates an inefficient pattern where `search_count` is called inside a loop iterating over a recordset (`self`). This results in a separate SQL query being executed for each record, negatively impacting performance, especially for large recordsets. This is presented as a 'bad example' to be avoided.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/performance.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef _compute_count(self):\n    for record in self:\n        domain = [('related_id', '=', record.id)]\n        record.count = other_model.search_count(domain)\n```\n\n----------------------------------------\n\nTITLE: Adding One2many Relationship to Teachers Model in Odoo (Python)\nDESCRIPTION: This Python snippet updates the 'academy.teachers' model to include a one-to-many relationship field ('course_ids'). This field links a teacher to multiple courses defined in the 'academy.courses' model, using 'teacher_id' as the inverse relational field. The updated 'Courses' model definition is included for context.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nclass Teachers(models.Model):\n    _name = 'academy.teachers'\n\n    name = fields.Char()\n    biography = fields.Html()\n\n    course_ids = fields.One2many('academy.courses', 'teacher_id', string=\"Courses\")\n\nclass Courses(models.Model):\n    _name = 'academy.courses'\n\n    name = fields.Char()\n    teacher_id = fields.Many2one('academy.teachers', string=\"Teacher\")\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Gradient in Odoo Website Builder (XML)\nDESCRIPTION: Defines an Odoo `ir.ui.view` record to add a custom gradient to the Website Builder's color picker. It inherits from `web_editor.colorpicker` and uses an XPath expression to append a new `linear-gradient` value to the existing list of predefined gradients (`gradients` variable in QWeb). This makes the custom gradient available for selection in the editor UI. It depends on the `web_editor` module. The record is typically placed in a data file (e.g., `data/gradients.xml`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/gradients.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"colorpicker\" model=\"ir.ui.view\">\n   <field name=\"key\">website_airproof.colorpicker</field>\n   <field name=\"name\">Custom Gradients</field>\n   <field name=\"type\">qweb</field>\n   <field name=\"inherit_id\" ref=\"web_editor.colorpicker\"/>\n   <field name=\"arch\" type=\"xml\">\n      <xpath expr=\"//div[@data-name='predefined_gradients']/t[@t-set='gradients']\" position=\"after\">\n         <t t-set=\"gradients\" t-value=\"gradients + ['linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)']\" />\n      </xpath>\n   </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Using we-colorpicker Element in XML\nDESCRIPTION: Shows how to create a color/gradient picker option using the we-colorpicker element with various attributes to control how colors are applied to the target element.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_46\n\nLANGUAGE: xml\nCODE:\n```\n<we-colorpicker\n   string=\"Color filter\"\n   data-select-style=\"true\"\n   data-css-property=\"background-color\"\n   data-color-prefix=\"bg-\"\n   data-apply-to=\".s_map_color_filter\" />\n```\n\n----------------------------------------\n\nTITLE: Extending Page Template Groups with Custom Entry (Airproof) - Odoo Website - XML\nDESCRIPTION: This XML snippet demonstrates how to inherit and extend the standard Odoo website template groups by introducing a custom group labeled 'Airproof'. The 'inherit_id' attribute specifies the base template to extend, while the <xpath> element targets the insertion point after the 'custom' group. Expected input is the existing template structure; output is the augmented list of groups including 'Airproof'. This pattern leverages Odoo's XML inheritance and requires the base template 'website.new_pages_template_groups' to exist.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"new_pages_template_groups\" inherit_id=\"website.new_pages_template_groups\" name=\"Airproof - New Page Template Groups\">\n   <xpath expr=\"//div[@id='custom']\" position=\"after\">\n      <div id=\"airproof\">Airproof</div>\n   </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Query Helper for Fetching Records\nDESCRIPTION: Demonstrates the simplified query helper for fetching records from Odoo models. This provides a cleaner syntax compared to the combination of search and read method calls.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nmodel.query(['name', 'login', 'user_email', 'signature'])\n     .filter([['active', '=', true], ['company_id', '=', main_company]])\n     .limit(15)\n     .all().then(function (users) {\n    // do work with users records\n});\n```\n\n----------------------------------------\n\nTITLE: Marking an Element as Not Editable (XML)\nDESCRIPTION: Assigns the o_not_editable class to any container (e.g., div) to prevent direct editing of its content via the Website Builder interface. Useful to restrict edits to specific structural or protected elements.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\\\"o_not_editable\\\">\n```\n\n----------------------------------------\n\nTITLE: Embedding an Owl Component in an Odoo Portal View (XML/QWeb)\nDESCRIPTION: Demonstrates how to embed the previously defined Owl component into an Odoo portal page using an XML view definition (e.g., in `/your_module/views/templates.xml`). It inherits from the `portal.portal_my_home` template and uses an XPath expression to insert the `<owl-component>` tag before the main portal content area (`.o_portal_my_home`). The `name` attribute must match the component's name registered in the `public_components` registry ('your_module.YourComponent').\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/frontend_owl_components.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<odoo>\n    <template id=\"your_module.portal_my_home\" inherit_id=\"portal.portal_my_home\">\n        <xpath expr=\"//*[hasclass('o_portal_my_home')]\" position=\"before\">\n            <owl-component name=\"your_module.YourComponent\" />\n        </xpath>\n    </template>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Listing Available Variables and Functions for Odoo Execute Code Action in Python\nDESCRIPTION: Provides the list of predefined variables (like `env`, `model`, `record`, `records`), utility modules/functions (`time`, `datetime`, `dateutil`, `timezone`, `log`, `float_compare`, `UserError`, `Command`, `_logger`), and the mechanism to return an action (`action = {...}`) available within the Python execution environment of an Odoo 'Execute Code' automated action. These elements allow interaction with the Odoo environment, record context, logging, and error handling.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/studio/automated_actions.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n- `env`: environment on which the action is triggered\n- `model`: model of the record on which the action is triggered; is a void recordset\n- `record`: record on which the action is triggered; may be void\n- `records`: recordset of all records on which the action is triggered in multi-mode; this may be\n  left empty\n- `time`, `datetime`, `dateutil`, `timezone`: useful Python libraries\n- `float_compare`: utility function to compare floats based on specific precision\n- `log(message, level='info')`: logging function to record debug information in ir.logging\n  table\n- `_logger.info(message)`: logger to emit messages in server logs\n- `UserError`: exception class for raising user-facing warning messages\n- `Command`: x2many commands namespace\n- `action = {...}`: to return an action\n```\n\n----------------------------------------\n\nTITLE: Defining a Method Operating on a Recordset in Odoo Python\nDESCRIPTION: This snippet shows a basic Odoo model definition (`AModel`) containing a method (`a_method`). Inside the method, `self` represents the recordset on which the method is called, which could contain zero, one, or multiple records of the 'a.model' model.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass AModel(models.Model):\n    _name = 'a.model'\n    def a_method(self):\n        # self can be anything between 0 records and all records in the\n        # database\n        self.do_operation()\n```\n\n----------------------------------------\n\nTITLE: Using Transactions in PostgreSQL for Safe Database Operations\nDESCRIPTION: Examples of using SQL transactions in PostgreSQL to safely perform database operations. The examples show how to begin transactions, perform updates, and commit or rollback changes to prevent unintended modifications.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/advanced/containers.rst#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nodoo-addons-master-1=> BEGIN;\nBEGIN\nodoo-addons-master-1=> UPDATE res_users SET password = '***';\nUPDATE 457\nodoo-addons-master-1=> ROLLBACK;\nROLLBACK\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Font Asset in Frontend Bundle (Python)\nDESCRIPTION: This manifest asset entry lists a custom SCSS file, font.scss, to be included in Odoo's frontend assets bundle. This is required when adding custom fonts using @font-face rules, ensuring the font stylesheet is loaded on website pages. The asset path is relative to the module root; make sure the file exists.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n'assets': {\n   'web.assets_frontend': [\n      'website_airproof/static/src/scss/font.scss',\n   ],\n},\n```\n\n----------------------------------------\n\nTITLE: Standard Search and Read Pattern\nDESCRIPTION: Shows the standard pattern for searching and reading records without using the query helper. This demonstrates why the query helper is preferred for cleaner code.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nmodel.call('search', [['active', '=', true], ['company_id', '=', main_company]], {limit: 15})\n    .then(function (ids) {\n        return model.call('read', [ids, ['name', 'login', 'user_email', 'signature']]);\n    })\n    .then(function (users) {\n        // do work with users records\n    });\n```\n\n----------------------------------------\n\nTITLE: Declaring a Custom Kanban View in Arch (XML)\nDESCRIPTION: This code snippet shows how to instantiate and use a custom Kanban view by specifying the js_class attribute within the view arch XML definition. The kanban tag indicates usage of the view engine, and the embedded templates define how individual records or boxes are rendered. This is required to activate the custom controller defined in earlier JavaScript snippets, ensuring Odoo loads the proper view class.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_view.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<kanban js_class=\"custom_kanban\">\n    <templates>\n        <t t-name=\"kanban-box\">\n            <!--Your comment-->\n        </t>\n    </templates>\n</kanban>\n```\n\n----------------------------------------\n\nTITLE: Defining Window Action View Binding (Odoo, XML)\nDESCRIPTION: This XML snippet creates a binding between a window action and a tree view via the ir.actions.act_window.view model. It is used in Odoo data files to sequence and specify which views should be available for a window action. Prerequisites include the existence of the action (test_action) and the view (view_test_tree). The 'sequence' field manages ordering, and 'view_mode' specifies the type of the view to attach. The snippet is placed in module XML files and loaded as part of extension installation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/actions.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<record model=\\\"ir.actions.act_window.view\\\" id=\\\"test_action_tree\\\">\\n   <field name=\\\"sequence\\\" eval=\\\"1\\\"/>\\n   <field name=\\\"view_mode\\\">list</field>\\n   <field name=\\\"view_id\\\" ref=\\\"view_test_tree\\\"/>\\n   <field name=\\\"act_window_id\\\" ref=\\\"test_action\\\"/>\\n</record>\n```\n\n----------------------------------------\n\nTITLE: Patching Static Methods of a JavaScript Class\nDESCRIPTION: Shows how to patch static methods or properties of an ES6 class. The `patch` function is applied directly to the class itself, not its prototype.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/patching_code.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyClass {\n  static myStaticFn() {...}\n  myPrototypeFn() {...}\n}\n\n// this will patch static properties!!!\npatch(MyClass, {\n  myStaticFn() {...},\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing Elements using XPath in Odoo XML\nDESCRIPTION: Demonstrates how to replace an element using an XPath expression. This example targets the first element possessing the 'breadcrumb' class (`//*[hasclass('breadcrumb')]`) and replaces it entirely using `position=\"replace\"`. No replacement content is provided within the `<xpath>` tag in this specific snippet, effectively removing the targeted element.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<xpath expr=\"//*[hasclass('breadcrumb')]\" position=\"replace\"/>\n```\n\n----------------------------------------\n\nTITLE: Registering an Ordered Systray Item With a Sequence in Odoo JavaScript\nDESCRIPTION: This snippet adds a systray item with a specified sequence number, affecting the order in which it is displayed. The item object holds a reference to the MySystrayItem component. Requires prior definition/import of MySystrayItem and the registry object. The sequence parameter (e.g., 43) determines position; lower values appear further right. Used to control systray menu item ordering visually.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/registries.rst#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst item = {\n    Component: MySystrayItem\n};\nregistry.category(\"systray\").add(\"myaddon.some_description\", item, { sequence: 43 });\n```\n\n----------------------------------------\n\nTITLE: NGINX Configuration for Odoo Deployment\nDESCRIPTION: Comprehensive NGINX configuration for Odoo deployment including SSL termination, websocket handling, proxy settings, and security headers.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/deploy.rst#2025-04-23_snippet_7\n\nLANGUAGE: nginx\nCODE:\n```\n#odoo server\nupstream odoo {\n  server 127.0.0.1:8069;\n}\nupstream odoochat {\n  server 127.0.0.1:8072;\n}\nmap $http_upgrade $connection_upgrade {\n  default upgrade;\n  ''      close;\n}\n\n# http -> https\nserver {\n  listen 80;\n  server_name odoo.mycompany.com;\n  rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n  listen 443 ssl;\n  server_name odoo.mycompany.com;\n  proxy_read_timeout 720s;\n  proxy_connect_timeout 720s;\n  proxy_send_timeout 720s;\n\n  # SSL parameters\n  ssl_certificate /etc/ssl/nginx/server.crt;\n  ssl_certificate_key /etc/ssl/nginx/server.key;\n  ssl_session_timeout 30m;\n  ssl_protocols TLSv1.2;\n  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n  ssl_prefer_server_ciphers off;\n\n  # log\n  access_log /var/log/nginx/odoo.access.log;\n  error_log /var/log/nginx/odoo.error.log;\n\n  # Redirect websocket requests to odoo gevent port\n  location /websocket {\n    proxy_pass http://odoochat;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection $connection_upgrade;\n    proxy_set_header X-Forwarded-Host $http_host;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Real-IP $remote_addr;\n\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\";\n    proxy_cookie_flags session_id samesite=lax secure;  # requires nginx 1.19.8\n  }\n\n  # Redirect requests to odoo backend server\n  location / {\n    # Add Headers for odoo proxy mode\n    proxy_set_header X-Forwarded-Host $http_host;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_redirect off;\n    proxy_pass http://odoo;\n\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\";\n    proxy_cookie_flags session_id samesite=lax secure;  # requires nginx 1.19.8\n  }\n\n  # common gzip\n  gzip_types text/css text/scss text/plain text/xml application/xml application/json application/javascript;\n  gzip on;\n}\n```\n\n----------------------------------------\n\nTITLE: Firing Device Change Events from Driver using Event Manager - Odoo Python\nDESCRIPTION: Shows driver-side code for updating listeners by calling event_manager.device_changed. After setting the driver's self.data dictionary, the event informs JavaScript callbacks of the new device data. Dependencies: odoo.addons.hw_drivers.event_manager, Driver subclass. Inputs: updated device state; Outputs: triggers client-side listeners.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/connect_device.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo.addons.hw_drivers.event_manager import event_manager\\n\\nclass DriverName(Driver):\\n    connection_type = 'ConnectionType'\\n\\n    def methodName(self):\\n        self.data = {\\n            'value': 0.5,\\n            ...\\n        }\\n        event_manager.device_changed(self)\n```\n\n----------------------------------------\n\nTITLE: Implementing IP Address Change Handler in Python for Odoo.sh\nDESCRIPTION: This code snippet demonstrates how to create a controller in Odoo to handle IP address changes on the Odoo.sh platform. It defines a route that receives old and new IP addresses as parameters and logs the change, allowing for custom actions to be implemented in response to IP changes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/advanced/frequent_technical_questions.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass IPChangeController(http.Controller):\n\n    @http.route('/_odoo.sh/ip-change', auth='public')\n    def ip_change(self, old=None, new=None):\n        _logger.info(\"IP address changed from %s to %s\", old, new)\n        # Then perform whatever action required for your use case, e.g., update an\n        # ir.config_parameter, send an email, contact an external firewall service's API, ...\n        return 'ok'\n```\n\n----------------------------------------\n\nTITLE: Signaling Failure by Returning null/undefined (JavaScript)\nDESCRIPTION: Presents a simpler alternative to throwing errors for expected failures. The function `someFunction` returns `null` (or `undefined`) to indicate it couldn't complete its task. The calling code checks the return value directly using an `if` statement, avoiding the complexity of `try...catch` blocks and allowing the use of `const`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/error_handling.rst#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst someVal = someFunction();\n// further\nif (someVal !== null) { /* do something */ }\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Company for Odoo Python Models\nDESCRIPTION: Demonstrates defining a required `company_id` field on an Odoo model and setting its default value to the user's current company using `default=lambda self: self.env.company`. This ensures a company is always set, especially important when the field might be hidden for users not in the `base.group_multi_company` group.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/company.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import api, fields, models\n\nclass Record(models.Model):\n    _name = 'record.restricted'\n    _check_company_auto = True\n\n    company_id = fields.Many2one(\n        'res.company', required=True, default=lambda self: self.env.company\n    )\n    other_record_id = fields.Many2one('other.record', check_company=True)\n```\n\n----------------------------------------\n\nTITLE: Selecting Tests to Run by Tag, Module, or Class - Console/CLI\nDESCRIPTION: Lists various ways to run tests in Odoo via the CLI, using tags, module paths, class, or method names. All commands use 'odoo-bin --test-tags' with different arguments, demonstrating granular control over test selection. Assumes tests and modules are installed and accessible. Inputs are CLI tag expressions, outputs are filtered test execution runs.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin --test-tags /sale\n```\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin --test-tags '/sale,-slow'\n```\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin --test-tags '-standard, slow, /stock'\n```\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin --test-tags nice\n```\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin --test-tags nice,standard\n```\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin --test-tags 'standard,-slow'\n```\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin --test-tags /stock_account\n```\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin --test-tags .test_supplier_invoice_forwarded_by_internal_user_without_supplier\n```\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin --test-tags /account:TestAccountIncomingSupplierInvoice.test_supplier_invoice_forwarded_by_internal_user_without_supplier\n```\n\n----------------------------------------\n\nTITLE: Displaying Many2one Attachment Image with Widget in Odoo XML View - XML\nDESCRIPTION: This code displays the 'displayed_image_id' many2one field using the 'attachment_image' widget, allowing the related image record to be rendered as an image in the view. The snippet is for Odoo XML view customization when an image is stored as an attachment and linked via a relational field. No special options are required; the widget will fetch and display the image automatically.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\\\"displayed_image_id\\\" widget=\\\"attachment_image\\\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Paper Format for Odoo Reports in XML\nDESCRIPTION: Provides an example of defining a custom paper format (`report.paperformat`) record in Odoo using XML data. It sets various properties like `name`, `format` (`custom`), page dimensions (`page_height`, `page_width` in mm), `orientation`, margins (in mm), header settings (`header_line`, `header_spacing`), and `dpi` to control the layout of the generated PDF report.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/reports.rst#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"paperformat_frenchcheck\" model=\"report.paperformat\">\n    <field name=\"name\">French Bank Check</field>\n    <field name=\"default\" eval=\"True\"/>\n    <field name=\"format\">custom</field>\n    <field name=\"page_height\">80</field>\n    <field name=\"page_width\">175</field>\n    <field name=\"orientation\">Portrait</field>\n    <field name=\"margin_top\">3</field>\n    <field name=\"margin_bottom\">3</field>\n    <field name=\"margin_left\">3</field>\n    <field name=\"margin_right\">3</field>\n    <field name=\"header_line\" eval=\"False\"/>\n    <field name=\"header_spacing\">3</field>\n    <field name=\"dpi\">80</field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Scanning Barcodes using Odoo Mobile API in JavaScript\nDESCRIPTION: Initiates the device's barcode scanning functionality. It supports various 1D (EAN, UPC, Code-*) and 2D (QR Code, Data Matrix, PDF-417, AZTEC) formats. The returned jQuery Deferred object resolves with the scanned barcode string ('code') upon successful scanning.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/mobile.rst#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmobile.methods.scanBarcode().then(function(code){\n    if(code){\n        // Perform operation with the scanned code\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Chatter Interface to Course Form View in Odoo (XML)\nDESCRIPTION: This XML snippet updates the form view for the 'academy.courses' model to display the Chatter interface. It adds a 'div' with the class 'oe_chatter' containing the 'message_follower_ids' and 'message_ids' fields, rendered using the 'mail_followers' and 'mail_thread' widgets respectively, typically placed at the bottom of the form.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"academy_course_form\" model=\"ir.ui.view\">\n    <field name=\"name\">Academy courses: form</field>\n    <field name=\"model\">academy.courses</field>\n    <field name=\"arch\" type=\"xml\">\n        <form>\n            <sheet>\n                <field name=\"name\"/>\n                <field name=\"teacher_id\"/>\n            </sheet>\n            <div class=\"oe_chatter\">\n                <field name=\"message_follower_ids\" widget=\"mail_followers\"/>\n                <field name=\"message_ids\" widget=\"mail_thread\"/>\n            </div>\n        </form>\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Resetting Product Cost from BoM in Odoo Inventory\nDESCRIPTION: Explains the function of the 'Compute Price from BoM' button found on a product form (if a BoM exists). Clicking this button resets the product's 'Cost' field to the theoretical cost calculated solely from its Bill of Materials components and operations, temporarily ignoring historical MO costs. This reset is not permanent as future MOs will influence the average cost again.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/basic_setup/mo_costs.rst#2025-04-23_snippet_16\n\nLANGUAGE: Odoo Configuration\nCODE:\n```\nClick this button [:guilabel:`Compute Price from BoM`] to reset the cost of the\nproduct to the expected cost, which only takes into account the components and operations listed on\nthe |BoM|.\n```\n\n----------------------------------------\n\nTITLE: Creating Odoo Automation Rule with Server Action in XML\nDESCRIPTION: Defines an Odoo server action ('action_x_estate_property_create_from_sale_order') and an automation rule ('automation_rule_x_estate_property_create_from_sale_order') using XML. The server action contains Python code to create an 'x_estate.property' record from a 'sale.order'. The automation rule triggers this server action when the 'state' field of a 'sale.order' record changes to 'sale'. This method leverages automation rules instead of UI overrides for extending standard model behavior based on lifecycle events. Requires the 'base_automation' module.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/importable_modules.rst#2025-04-23_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"action_x_estate_property_create_from_sale_order\" model=\"ir.actions.server\">\n    <field name=\"name\">Create property from sale order</field>\n    <field name=\"model_id\" ref=\"sale.model_sale_order\"/>\n    <field name=\"state\">code</field>\n    <field name=\"code\"><![CDATA[\nfor order in records:\n    property_type = env['x_estate.property.type'].sudo().search([('x_name', '=', 'Other')], limit=1)\n    property = env['x_estate.property'].sudo().create({\n        'x_name': order.name,\n        'x_expected_price': 0,\n        'x_selling_price': 0,\n        'x_sale_order_id': order.id,\n        'x_property_type_id': property_type.id,\n    })\n    ]]></field>\n</record>\n\n<record id=\"automation_rule_x_estate_property_create_from_sale_order\" model=\"base.automation\">\n    <field name=\"name\">Create property from sale order</field>\n    <field name=\"model_id\" ref=\"sale.model_sale_order\"/>\n    <field name=\"trigger\">on_state_set</field>\n    <field name=\"trg_selection_field_id\" ref=\"sale.selection__sale_order__state__sale\"/>\n    <field name=\"trigger_field_ids\" eval=\"[(4, ref('sale.field_sale_order__state'))]\"/>\n    <field name=\"action_server_ids\" eval=\"[(4, ref('estate.action_x_estate_property_create_from_sale_order'))]\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Using Conditionals in Kanban View Templates with QWeb in Odoo XML\nDESCRIPTION: This XML snippet extends the basic Kanban view to include conditional rendering using the 't-if' directive in Odoo's QWeb templating. It adds a <field name=\"state\"/> outside the <templates> block to make the 'state' data available for logic, but not direct display. Inside the template, a <div> is conditionally rendered if the record's 'state' field has the raw value 'new', displaying a custom message. This demonstrates use of the 'record' object, including its 'raw_value' field property, allowing fields to be requested for logic without being visible. Dependencies: Odoo's QWeb engine; required fields include 'name' and 'state'. Inputs are the property records, and output is a card with the name and, if applicable, the message for new records only.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/14_qwebintro.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<kanban>\\n    <field name=\"state\"/>\\n    <templates>\\n        <t t-name=\"kanban-box\">\\n            <div>\\n                <field name=\"name\"/>\\n                <div t-if=\"record.state.raw_value == 'new'\">\\n                    This is new!\\n                </div>\\n            </div>\\n        </t>\\n    </templates>\\n</kanban>\n```\n\n----------------------------------------\n\nTITLE: Defining a Date Field (`date`) in Odoo\nDESCRIPTION: Defines a field for selecting a specific date using a calendar picker. Odoo's technical name is 'date'. An available widget is 'Remaining Days', which displays the time difference (e.g., 'In 5 days') relative to the current date; this widget usually implies the field should be read-only.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/studio/fields.rst#2025-04-23_snippet_6\n\nLANGUAGE: Odoo\nCODE:\n```\ndate\n```\n\n----------------------------------------\n\nTITLE: Configuring Visibility with Invisible Attribute - Odoo XML\nDESCRIPTION: Demonstrates the use of the 'invisible' attribute in Odoo XML views to conditionally hide or show form fields or groups based on Python expressions evaluated at runtime. No external dependencies are required except for Odoo's QWeb view processing and its environment. The snippet shows how Boolean expressions on model fields ('fname_c', 'fname_a', 'parent.fname_d') determine the visibility. Inputs are the model fields passed via the Odoo view context; outputs are the dynamic rendering of UI elements accordingly. The constraint is that complex logical conditions must be valid Python expressions that Odoo can interpret.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures/generic_attribute_invisible.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\\\"fname_b\\\" invisible=\\\"fname_c != 3 and fname_a == parent.fname_d\\\"/>\n<group invisible=\\\"fname_c != 4\\\">\\n    <field name=\\\"fname_c\\\"/>\n    <field name=\\\"fname_d\\\"/>\n<group>\n```\n\n----------------------------------------\n\nTITLE: Defining Gradients for Website UI Elements - SCSS\nDESCRIPTION: This snippet shows how to add custom gradient values for various theme UI components (menu, header, footer, copyright bar) within the `$o-website-values-palettes` SCSS map. At least one gradient (menu-gradient) is fully defined as an example. This should be placed in the theme’s `primary_variables.scss`. Syntax follows Odoo theming conventions and expects gradient values to be compatible with CSS linear-gradient.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_14\n\nLANGUAGE: scss\nCODE:\n```\n$o-website-values-palettes: (\n   (\n      'menu-gradient': linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%),\n      'header-boxed-gradient': [your-gradient],\n      'footer-gradient': [your-gradient],\n      'copyright-gradient': [your-gradient],\n   ),\n);\n```\n\n----------------------------------------\n\nTITLE: Declaring Theme Font Configurations in Odoo (SCSS)\nDESCRIPTION: This snippet declares SCSS theme font configurations for custom fonts within Odoo's $o-theme-font-configs variable. It supports specifying a font's family, Google fonts URL, and custom properties such as size overrides. Placeholders must be replaced with real font names, URLs, and property maps. Intended to be placed in primary_variables.scss, referenced by the asset bundle.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n$o-theme-font-configs: (\n   <font-name>: (\n      'family': <css font family list>,\n      'url' (optional): <related part of Google fonts URL>,\n      'properties' (optional): (\n         <font-alias>: (\n            <website-value-key>: <value>,\n            ...,\n         ),\n      ...,\n   )\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Kanban Card Template in XML\nDESCRIPTION: Demonstrates how to define a basic kanban card template using the 'templates' element and 'card' template. The template includes a single field displaying the 'name' value.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_70\n\nLANGUAGE: xml\nCODE:\n```\n<kanban>\n   <templates>\n      <t t-name=\"card\">\n         <field name=\"name\"/>\n      </t>\n   </templates>\n</kanban>\n```\n\n----------------------------------------\n\nTITLE: Converting Script Loading Events to Promise Results in JavaScript\nDESCRIPTION: This JavaScript code creates a <script> element in the DOM, attaches error and load event listeners, and returns a Promise that resolves on successful loading or rejects on a loading error. This pattern transforms asynchronous DOM events into Promise-based control flow, enabling easier error handling for external script resources. Dependencies include browser DOM APIs and standard JavaScript Promise functionality. The function returns a Promise, resolving with no value on load and rejecting with the error event if loading fails.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/error_handling.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst scriptEl = document.createElement(\"script\");\nscriptEl.src = \"https://example.com/third_party_script.js\";\nreturn new Promise((resolve, reject) => {\n  scriptEl.addEventListener(\"error\", reject);\n  scriptEl.addEventListener(\"load\", resolve);\n  document.head.append(scriptEl);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Kanban Card Layout with Multiple Fields\nDESCRIPTION: Shows how to create a basic kanban card layout using multiple fields and Bootstrap utility classes for styling.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_73\n\nLANGUAGE: xml\nCODE:\n```\n<kanban>\n   <templates>\n      <t t-name=\"card\">\n         <field class=\"fw-bold fs-5\" name=\"display_name\"/>\n         <field class=\"text-muted\" name=\"parent_id\"/>\n         <field name=\"tag_ids\" widget=\"many2many_tags\"/>\n      </t>\n   </templates>\n</kanban>\n```\n\n----------------------------------------\n\nTITLE: Launching a Wizard Using Odoo Window Action - XML\nDESCRIPTION: This XML snippet defines an Odoo window action that launches a wizard by specifying the action parameters needed for creating a dialog-bound form. The 'target' field set to 'new' opens the wizard as a modal dialog. 'binding_model_id' links the action contextually to another model; view mode, resource model, and a unique record ID are also specified. This pattern is commonly used to trigger wizard dialogs from buttons or contextual menus in Odoo forms and lists.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/backend.rst#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\\\"launch_the_wizard\\\" model=\\\"ir.actions.act_window\\\">\n    <field name=\\\"name\\\">Launch the Wizard</field>\n    <field name=\\\"res_model\\\">wizard.model.name</field>\n    <field name=\\\"view_mode\\\">form</field>\n    <field name=\\\"target\\\">new</field>\n    <field name=\\\"binding_model_id\\\" ref=\\\"model_context_model_ref\\\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Rendering a QWeb Template from Controller (Python)\nDESCRIPTION: This updated controller method now uses `http.request.render()` to render a QWeb template identified by 'academy.index'. It passes a dictionary containing a list of teacher names under the key 'teachers' to the template's rendering context. This replaces the static string response.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Academy(http.Controller):\n\n    @http.route('/academy/academy/', auth='public')\n    def index(self, **kw):\n        return http.request.render('academy.index', {\n            'teachers': [\"Diana Padilla\", \"Jody Caroll\", \"Lester Vaughn\"],\n        })\n```\n\n----------------------------------------\n\nTITLE: Base API Response Structure in JavaScript\nDESCRIPTION: Defines the base JSON-RPC 2.0 response structure that wraps document processing results, including status and extracted features.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/extract_api.rst#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": string,\n    \"result\": {\n        \"status\": string,\n        \"status_msg\": string,\n        \"results\": [\n            {\n                \"full_text_annotation\": string,\n                \"feature_1_name\": feature_1_result,\n                \"feature_2_name\": feature_2_result,\n                ...\n            },\n            ...\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Size Option for All Child Columns (XML)\nDESCRIPTION: Applies the s_col_no_resize class to a row, disabling the resizing option for all columns inside. Intended to prevent user-driven resizing in the builder, within a Bootstrap row component.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\\\"row s_col_no_resize\\\">\n```\n\n----------------------------------------\n\nTITLE: Extending a Registered Odoo View with a Custom Renderer (JavaScript)\nDESCRIPTION: This snippet shows how to extend an existing registered Odoo view by creating a subclass of the renderer and re-registering a new view that uses the custom renderer. It demonstrates class inheritance and dynamic registration via registry.category(\"views\").add. Dependencies: Odoo registry, base galleryView, GalleryRenderer. Inputs: none; outputs: side effect of replacing/adding new view with custom renderer. Intended for extensibility.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/master_odoo_web_framework/02_create_gallery_view.rst#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from '@web/core/registry';\nimport { galleryView } from '@awesome_gallery/gallery_view';\nimport { GalleryRenderer } from '@awesome_gallery/gallery_renderer';\n\nexport class MyExtendedGalleryRenderer extends GalleryRenderer {\n   static template = \"my_module.MyExtendedGalleryRenderer\";\n   setup() {\n      super.setup();\n      console.log(\"my gallery renderer extension\");\n   }\n}\n\nregistry.category(\"views\").add(\"my_gallery\", {\n   ...galleryView,\n   Renderer: MyExtendedGalleryRenderer,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Odoo Search View in XML\nDESCRIPTION: This XML snippet shows the basic structure of an Odoo Search view using the `<search>` root element. It includes `<field>` elements for 'name' and 'last_seen', allowing users to directly search these fields in the associated list or other views. The `string` attribute defines the view's title.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/06_basicviews.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<search string=\"Tests\">\n    <field name=\"name\"/>\n    <field name=\"last_seen\"/>\n</search>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Mixing of XPath Move and Content Directives in Odoo XML\nDESCRIPTION: Provides a counter-example demonstrating incorrect usage of the `position=\"move\"` directive in Odoo XML. It highlights that mixing a move operation (`<xpath expr=\"//t[@t-if='opt_wsale_categories_top']\" position=\"move\" />`) and adding static content (`<div><!-- Content --></div>`) within the same parent `<xpath>` block is not advised and can lead to unexpected results or errors.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<xpath expr=\"//*[hasclass('o_wsale_products_main_row')]\" position=\"before\">\n<xpath expr=\"//t[@t-if='opt_wsale_categories_top']\" position=\"move\" />\n<div><!-- Content --></div>\n</xpath>\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of XPath Move Directives in Odoo XML\nDESCRIPTION: Presents the recommended way to use the `position=\"move\"` directive in Odoo XML template modifications. It shows that move operations should be within their own `<xpath>` block, separate from blocks that add static content, even if targeting the same insertion point (`//*[hasclass('o_wsale_products_main_row')]` with `position=\"before\"`). This ensures clarity and avoids potential conflicts.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<xpath expr=\"//*[hasclass('o_wsale_products_main_row')]\" position=\"before\">\n<xpath expr=\"//t[@t-if='opt_wsale_categories_top']\" position=\"move\" />\n</xpath>\n<xpath expr=\"//*[hasclass('o_wsale_products_main_row')]\" position=\"before\">\n<div><!-- Content --></div>\n</xpath>\n```\n\n----------------------------------------\n\nTITLE: Using Git Merge Command for Branch Management\nDESCRIPTION: Demonstrates how to use the git merge command to combine branches on a local workstation before pushing to Odoo.sh.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/branches.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit merge\n```\n\n----------------------------------------\n\nTITLE: Creating Demo Course Product Data in Odoo (XML)\nDESCRIPTION: This XML snippet, intended for a demo data file (e.g., 'academy/demo.xml'), creates sample course products. It defines two records for the 'product.template' model, setting their names, assigning a teacher (referencing an existing teacher record 'padilla'), linking them to the 'category_courses' product category, marking them as published on the website, setting the price, and specifying the product type as 'service'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_37\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"course0\" model=\"product.template\">\n    <field name=\"name\">Course 0</field>\n    <field name=\"teacher_id\" ref=\"padilla\"/>\n    <field name=\"public_categ_ids\" eval=\"[(4, ref('academy.category_courses'), False)]\"/>\n    <field name=\"website_published\">True</field>\n    <field name=\"list_price\" type=\"float\">0</field>\n    <field name=\"type\">service</field>\n</record>\n<record id=\"course1\" model=\"product.template\">\n    <field name=\"name\">Course 1</field>\n    <field name=\"teacher_id\" ref=\"padilla\"/>\n    <field name=\"public_categ_ids\" eval=\"[(4, ref('academy.category_courses'), False)]\"/>\n```\n\n----------------------------------------\n\nTITLE: Reading Record Fields via XML-RPC in Go\nDESCRIPTION: This Go example reads the fields 'name', 'country_id', and 'comment' from 'res.partner' records via Odoo's XML-RPC interface. Field options are defined in a map, and the results are unmarshalled into a slice of maps representing each record. Requires a configured models.Call client and authentication.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nvar recordFields []map[string]any\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"res.partner\", \"read\",\n    ids,\n    map[string][]string{\n        \"fields\": {\"name\", \"country_id\", \"comment\"},\n    },\n}, &recordFields); err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Dashboard Graph Widget with Graph Type Attribute in Odoo XML View - XML\nDESCRIPTION: This code defines a 'dashboard_graph_data' char field rendered by the 'dashboard_graph' widget, with the 'graph_type' attribute set to 'line'. The field is treated as a JSON-serializable dataset and is displayed as a line or bar chart in dashboards, commonly used in Odoo's accounting modules. The view expects a properly formatted JSON field and sets the 'graph_type' explicitly.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\\\"dashboard_graph_data\\\" widget=\\\"dashboard_graph\\\" graph_type=\\\"line\\\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Button in Odoo Theme (XML)\nDESCRIPTION: This XML snippet shows a <we-button> element with various data attributes for customizing website builder UI options in Odoo. These attributes link the button to customizable theme variables and options, such as a sidebar or custom view. This snippet is intended to be placed within Odoo view XML files and does not require dependencies beyond Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<we-button title=\"...\"\n   data-name=\"...\"\n   data-customize-website-views=\"...\"\n   data-customize-website-variable=\"'Sidebar'\"\n   data-img=\"...\"/>\n```\n\n----------------------------------------\n\nTITLE: Marking Strings for Translation Odoo JavaScript\nDESCRIPTION: This JavaScript snippet illustrates how to mark a string as translatable in Odoo's client-side code using the `_t` function provided by `odoo.web`. This is necessary for making UI messages and labels available for translation. `_t` must wrap literal strings; input is a string literal and output is the ready-for-translation text, retrieved according to the user's language context. Depends on Odoo's web core modules being loaded.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/translations.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntitle = _t(\"Bank Accounts\");\n```\n\n----------------------------------------\n\nTITLE: Defining a Selection Field (`selection`) in Odoo\nDESCRIPTION: Defines a field that allows users to choose a single value from a predefined list of options. Odoo's technical name is 'selection'. The specific values available for selection must be configured when defining the field.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/studio/fields.rst#2025-04-23_snippet_9\n\nLANGUAGE: Odoo\nCODE:\n```\nselection\n```\n\n----------------------------------------\n\nTITLE: Python Analogy for QWeb t-foreach Loop (Python)\nDESCRIPTION: Provides the equivalent Python code for the QWeb loop construct (`t-foreach=\"offers\" t-as=\"offer\"`) used in the XML template. This snippet clarifies that the QWeb directive iterates through the items in the 'offers' collection (previously defined using `t-set`), assigning each item to the 'offer' variable in each iteration, similar to a standard Python `for` loop.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/pdf_reports.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfor offer in offers:\n```\n\n----------------------------------------\n\nTITLE: Defining a Monetary Field (`monetary`) in Odoo\nDESCRIPTION: Defines a field specifically for monetary values. Odoo's technical name is 'monetary'. Adding this field typically requires a corresponding 'Currency' field on the model to determine the currency symbol and formatting; Odoo may prompt to add one if missing.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/studio/fields.rst#2025-04-23_snippet_4\n\nLANGUAGE: Odoo\nCODE:\n```\nmonetary\n```\n\n----------------------------------------\n\nTITLE: Custom Renderer Template for Odoo Web View (XML)\nDESCRIPTION: This template specifies how records and auxiliary data should be rendered within the custom view's renderer. It leverages Odoo's template engine to iterate over data props and inject content. This is vital for displaying model data visually within the custom renderer component, and can be extended for more advanced visualizations or data presentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_view.rst#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<templates xml:space=\"preserve\">\n    <t t-name=\"my_module.Renderer\">\n        <t t-esc=\"props.propsYouWant\"/>\n        <t t-foreach=\"props.records\" t-as=\"record\" t-key=\"record.id\">\n            // Show records\n        </t>\n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Defining Odoo Notebook Pages using Slots in XML\nDESCRIPTION: This XML snippet illustrates how to create a tabbed interface using the Odoo `Notebook` component. Pages are defined directly within the `Notebook` using `t-set-slot`, where each slot represents a page. Attributes like `title` and `isVisible` configure the tab appearance and visibility. The `orientation` prop is set to 'vertical' for left-aligned tabs.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<Notebook orientation=\"'vertical'\">\n  <t t-set-slot=\"page_1\" title=\"'Page 1'\" isVisible=\"true\">\n    <h1>My First Page</h1>\n    <p>It's time to build Owl components. Did you read the documentation?</p>\n  </t>\n  <t t-set-slot=\"page_2\" title=\"'2nd page'\" isVisible=\"true\">\n    <p>Wise owl's silent flight. Through the moonlit forest deep, guides my path to code</p>\n  </t>\n</Notebook>\n```\n\n----------------------------------------\n\nTITLE: Setting Hard Memory Limit per Worker via Odoo Command-line\nDESCRIPTION: Used with '--workers', this sets a strict upper limit on virtual memory (in bytes) for a worker process. If a worker exceeds this limit, it is immediately killed, potentially interrupting its current request. Defaults to 2560MiB (2684354560 bytes).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_38\n\nLANGUAGE: console\nCODE:\n```\n--limit-memory-hard <limit>\n```\n\n----------------------------------------\n\nTITLE: Starting Odoo Server with Custom Modules Path (Console)\nDESCRIPTION: This command starts the Odoo server. The `--addons-path` option tells Odoo where to look for modules, including the standard 'addons' directory and the custom 'my-modules' directory created earlier. This is necessary for Odoo to recognize and load the new 'Academy' module.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ./odoo-bin --addons-path addons,my-modules\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder for Selection Widget in Odoo XML\nDESCRIPTION: Shows how to use the `placeholder` attribute on a `field` with `widget=\"selection\"` to display informative text when no value is currently selected. The `placeholder` attribute takes a string value.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"tax_id\" widget=\"selection\" placeholder=\"Select a tax\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Sale Order Custom Field from Subscription in Odoo Migration Script (Python/SQL)\nDESCRIPTION: This Python function `migrate` is an Odoo upgrade script snippet designed to run during a module or version upgrade. It utilizes the database cursor (`cr`) provided by Odoo to execute a raw SQL query. The query updates the `custom_field` in the `sale_order` table (`so`) by copying the value from the `custom_field` of the related `sale_subscription` table (`ss`), joining the tables where the subscription's `new_sale_order_id` matches the sale order's `id`. This is commonly used for data migration tasks when data structures or relationships change between versions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/upgrade_custom_db.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef migrate(cr, version):\n   cr.execute(\n      \"\"\"\n      UPDATE sale_order so\n         SET custom_field = ss.custom_field\n        FROM sale_subscription ss\n       WHERE ss.new_sale_order_id = so.id\n      \"\"\"\n   )\n```\n\n----------------------------------------\n\nTITLE: Field Element with Domain (XML)\nDESCRIPTION: Illustrates the use of the 'domain' attribute in a field element to apply filters when displaying existing records for selection.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"fname\" domain=\"[('fname_a', '=', parent.fname_b)]\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Group By Options via Filter Context in Odoo XML\nDESCRIPTION: This XML snippet demonstrates how to define 'Group By' options within an Odoo search view using the `<filter>` element's `context` attribute. Setting the `group_by` key in the context dictionary (evaluated as a Python expression) adds a corresponding field (e.g., 'category_id', 'create_date') to the 'Group By' menu. For date/datetime fields, a specific interval (like ':week') can be appended to set the default grouping granularity when activated, otherwise it defaults to month.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_59\n\nLANGUAGE: xml\nCODE:\n```\n<filter string=\"Category\" name=\"groupby_category\" context=\"{'group_by': 'category_id'}\"/>\n<filter string=\"Creation Date\" name=\"groupby_create_date\" context=\"{'group_by': 'create_date:week'}\"/>\n```\n\n----------------------------------------\n\nTITLE: Using the Week Days Selection Widget in Odoo XML\nDESCRIPTION: Shows the basic usage of the `week_days` widget in an Odoo XML view. This widget renders a set of checkboxes, one for each day of the week, allowing users to select multiple days.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_42\n\nLANGUAGE: xml\nCODE:\n```\n<widget name=\"week_days\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Order in Odoo XML List View\nDESCRIPTION: This snippet demonstrates how to set the 'default_order' attribute in an Odoo XML list view. It shows how to specify multiple fields for ordering, including descending order for a specific field.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures/root_attribute_default_order.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<list default_order=\"sequence,name desc\">\n    ...\n</list>\n```\n\n----------------------------------------\n\nTITLE: Defining Odoo XML for Admin Menu and Action\nDESCRIPTION: This XML snippet creates a menu structure and action in the Odoo backend for accessing the Academy teachers model. It defines an action and associated menu items.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n    <record id=\"action_academy_teachers\" model=\"ir.actions.act_window\">\n        <field name=\"name\">Academy teachers</field>\n        <field name=\"res_model\">academy.teachers</field>\n    </record>\n\n    <menuitem sequence=\"0\" id=\"menu_academy\" name=\"Academy\"/>\n    <menuitem id=\"menu_academy_content\" parent=\"menu_academy\"\n                name=\"Academy Content\"/>\n    <menuitem id=\"menu_academy_content_teachers\"\n                parent=\"menu_academy_content\"\n                action=\"action_academy_teachers\"/>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Disabling Two-Factor Authentication for Admin User (bash/sql)\nDESCRIPTION: Executes a SQL UPDATE command via `psql` to clear the two-factor authentication secret (`top_secret`) for the Odoo admin user (`id=2`), effectively disabling 2FA for that account. This can be useful if 2FA was enabled on the source database and prevents login after import. Connects to the specified `<database-name>`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/setup.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npsql <database-name>\nupdate res_users set top_secret='' where id=2;\n```\n\n----------------------------------------\n\nTITLE: SCSS for Custom Animated Titles Without Display or Font Overrides\nDESCRIPTION: Provides SCSS for module title and subtitle classes limited only to animation properties, leveraging tag semantics (e.g., h5, div) to provide default typography and layout. This is the recommended approach for maintainability and minimal repetition across the UI. Assumes the animation keyframes are defined elsewhere.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/scss_tips.rst#2025-04-23_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n.o_module_custom_title {\n   animation: 1s linear 1s mycustomAnimation;\n}\n\no_module_custom_subtitle {\n   animation: 2s linear 1s mycustomAnimation;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Computed Field on Odoo Model Using XML and Embedded Python - XML\nDESCRIPTION: Defines a computed field (x_total_area) that sums the living and garden area fields on the x_estate.property model. This XML snippet registers the field with necessary attributes and embeds Python code (within a CDATA section) to compute its value. Requires a prior model definition and fields x_living_area and x_garden_area to be present; works only in Odoo data modules with sandboxed Python execution. Expected output is a new 'Total Area' computed and stored by default on each property record.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/importable_modules.rst#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\\n    <!-- ...model definition from before... -->\\n    <record id=\\\"field_real_estate_property_total_area\\\" model=\\\"ir.model.fields\\\">\\n        <field name=\\\"model_id\\\" ref=\\\"estate.model_real_estate_property\\\" />\\n        <field name=\\\"name\\\">x_total_area</field>\\n        <field name=\\\"field_description\\\">Total Area</field>\\n        <field name=\\\"ttype\\\">float</field>\\n        <field name=\\\"depends\\\">x_living_area,x_garden_area</field>\\n        <field name=\\\"compute\\\"><![CDATA[\\nfor property in self:\\n    property['x_total_area'] = property.x_living_area + property.x_garden_area\\n        ]]></field>\\n    </record>\\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Completing a Manufacturing Order in Odoo\nDESCRIPTION: Indicates the action required to mark a Manufacturing Order (MO) as completed within Odoo. Clicking the 'Produce All' button finalizes the production process for the MO and updates cost calculations based on actual consumption and time.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/basic_setup/mo_costs.rst#2025-04-23_snippet_14\n\nLANGUAGE: Odoo Configuration\nCODE:\n```\nclicking :guilabel:`Produce All`\n```\n\n----------------------------------------\n\nTITLE: Defining a Date & Time Field (`datetime`) in Odoo\nDESCRIPTION: Defines a field for selecting both a date and a time using calendar and clock pickers. Odoo's technical name is 'datetime'. If no time is set, the user's current time is used automatically. Specific widgets include 'Date Range' (requires another date/datetime field as start/end) and 'Remaining Days' (displays time difference, implies read-only).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/studio/fields.rst#2025-04-23_snippet_7\n\nLANGUAGE: Odoo\nCODE:\n```\ndatetime\n```\n\n----------------------------------------\n\nTITLE: Referencing Existing Odoo Record by XML ID in XML\nDESCRIPTION: Demonstrates how to set a relational field (e.g., Many2one) in an Odoo XML data file. The `related_id` field of the `tutorial.example` record with `id=\"id1\"` is linked to the record identified by the XML ID `module.relatedid` using the `ref` attribute. This establishes a relationship between the two records during data import.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/define_module_data.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n  <record id=\"id1\" model=\"tutorial.example\">\n    <field name=\"related_id\" ref=\"module.relatedid\"/>\n  </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Creating a Stat Button with Custom Styling in Odoo XML\nDESCRIPTION: This example shows how to create a stat button in Odoo XML views. It includes custom styling for displaying statistical information, uses Font Awesome icons, and provides a help tooltip.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures/generic_attribute_class.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<button type=\"object\" name=\"ACTION\" class=\"oe_stat_button\" icon=\"FONT_AWESOME\" help=\"HELP\">\n   <div class=\"o_field_widget o_stat_info\">\n      <span class=\"o_stat_value\"><FIELD/></span>\n      <span class=\"o_stat_text\">TEXT</span>\n   </div>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using a Translatable Variable within Non-Translatable Attributes (t-att-title) in Odoo XML\nDESCRIPTION: Shows how a previously defined translatable variable (here represented as `label`, assuming it holds content like 'Foo' from the prior example) can be inserted into attributes like `t-att-title`. While the `t-att-title` directive itself doesn't make the attribute definition inherently translatable, the *value* passed via the variable retains its translatable nature.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/translations.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<div t-att-title=”label” />\n...\n<nav t-att-title=”label” />\n```\n\n----------------------------------------\n\nTITLE: Deactivating Default Home Page via Record - XML\nDESCRIPTION: Deactivates the default homepage view in Odoo by setting 'active' to False on the corresponding 'ir.ui.view' record. This disables the default page, typically to replace it with a customized one. Can be loaded in module data files.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\\\"website.homepage\\\" model=\\\"ir.ui.view\\\">\\n    <field name=\\\"active\\\" eval=\\\"False\\\"/>\\n</record>\n```\n\n----------------------------------------\n\nTITLE: Implementing Mail Thread and Alias in Business Trip Model (Python)\nDESCRIPTION: This snippet demonstrates how to add mail thread and alias functionality to a custom 'BusinessTrip' model. It includes the necessary field definitions and overrides for alias configuration.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/mixins.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass BusinessTrip(models.Model):\n    _name = 'business.trip'\n    _inherit = ['mail.thread', 'mail.alias.mixin']\n    _description = 'Business Trip'\n\n    name = fields.Char(tracking=True)\n    partner_id = fields.Many2one('res.partner', 'Responsible',\n                                 tracking=True)\n    guest_ids = fields.Many2many('res.partner', 'Participants')\n    state = fields.Selection([('draft', 'New'), ('confirmed', 'Confirmed')],\n                             tracking=True)\n    expense_ids = fields.One2many('business.expense', 'trip_id', 'Expenses')\n    alias_id = fields.Many2one('mail.alias', string='Alias', ondelete=\"restrict\",\n                               required=True)\n\n    def _get_alias_model_name(self, vals):\n        \"\"\" Specify the model that will get created when the alias receives a message \"\"\"\n        return 'business.expense'\n\n    def _get_alias_values(self):\n        \"\"\" Specify some default values that will be set in the alias at its creation \"\"\"\n        values = super(BusinessTrip, self)._get_alias_values()\n        values['alias_defaults'] = {'trip_id': self.id}\n        values['alias_contact'] = 'followers'\n        return values\n```\n\n----------------------------------------\n\nTITLE: Displaying Action Buttons in Odoo Form View - XML\nDESCRIPTION: This code snippet demonstrates how to define action buttons inside an Odoo form XML view. The button element uses attributes like type, name, string, and icon, which determine its action type (e.g., invoking an object method), identifier, display label, and icon. Dependencies include the Odoo framework and correct contextual usage inside a form view. The buttons may trigger Python methods, display specific icons, or interface with front-end actions depending on configuration.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<form>\\n    <button type=\\\"object\\\" name=\\\"ACTION\\\" string=\\\"LABEL\\\"/>\\n    <button type=\\\"object\\\" name=\\\"ACTION\\\" icon=\\\"FONT_AWESOME\\\"/>\\n</form>\n```\n\n----------------------------------------\n\nTITLE: Adding Systray Component\nDESCRIPTION: Example of registering a custom systray component to the systray registry with sequence ordering.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\"\nclass MySystrayComponent extends Component {\n    ...\n}\nregistry.category(\"systray\").add(\"MySystrayComponent\", MySystrayComponent, { sequence: 1 });\n```\n\n----------------------------------------\n\nTITLE: Creating Named Groups for Odoo Dropdowns using XML\nDESCRIPTION: This XML snippet shows how to create specific, named groups for `Dropdown` components using the `group` attribute on the `DropdownGroup` component. Dropdowns within `DropdownGroup` elements sharing the same `group` key ('my-group' in this example) will exhibit the hover-to-open behavior amongst themselves, independently of other groups ('my-other-group').\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<DropdownGroup group=\"'my-group'\">\n  <Dropdown>...</Dropdown>\n  <Dropdown>...</Dropdown>\n</DropdownGroup>\n\n<DropdownGroup group=\"'my-other-group'\">\n  <Dropdown>...</Dropdown>\n</DropdownGroup>\n\n<DropdownGroup group=\"'my-group'\">\n  <Dropdown>...</Dropdown>\n</DropdownGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Install Test Execution - Python\nDESCRIPTION: Shows how to use the @tagged decorator to control when a test class is executed. This example forces a test to run only after all modules are installed ('post_install'). Requires Odoo's testing helpers imported from 'odoo.tests', and the Python 'HttpCase' base class. The test checks if a visitor is created for a tracked website page. Inputs are the Odoo test environment, outputs are checks/assertions performed after module installation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# coding: utf-8\nfrom odoo.tests import HttpCase, tagged\n\n# This test should only be executed after all modules have been installed.\n@tagged('-at_install', 'post_install')\nclass WebsiteVisitorTests(HttpCase):\n  def test_create_visitor_on_tracked_page(self):\n      Page = self.env['website.page']\n```\n\n----------------------------------------\n\nTITLE: Configuring Gantt View XML Attributes\nDESCRIPTION: Example of configuring Gantt view decorations using XML attributes to conditionally style rows based on record states.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_79\n\nLANGUAGE: xml\nCODE:\n```\n<gantt decoration-info=\"state == 'draft'\" \n      decoration-danger=\"state == 'help_needed'\" \n      decoration-bf=\"state == 'busy'\">\n  ...\n</gantt>\n```\n\n----------------------------------------\n\nTITLE: Extending Session Info in Python\nDESCRIPTION: Shows how to extend the session_info method to add custom data to the client session.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import models\nfrom odoo.http import request\n\nclass IrHttp(models.AbstractModel):\n    _inherit = 'ir.http'\n\n    def session_info(self):\n        result = super(IrHttp, self).session_info()\n        result['some_key'] = get_some_value_from_db()\n        return result\n```\n\n----------------------------------------\n\nTITLE: Adding Website Module Dependency (Python)\nDESCRIPTION: This snippet shows updating the `__manifest__.py` file to add 'website' to the list of dependencies ('depends'). This ensures that the 'website' module is installed and loaded before the 'academy' module, making its features available.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n'version': '0.1',\n\n# any module necessary for this one to work correctly\n'depends': ['website'],\n\n# always loaded\n'data': [\n```\n\n----------------------------------------\n\nTITLE: Extending Action Context with Additional Parameters in JavaScript\nDESCRIPTION: Shows how to programmatically execute an action with extended context by using the actionService's doAction method with additional_context parameter. This allows passing data between actions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/framework_overview.rst#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// in setup\nlet actionService = useService(\"action\");\n\n// in some event handler\nactionService.doAction(\"addon_name.something\", {\n    additional_context:{\n        default_period_id: defaultPeriodId\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Teacher Form View to Display Courses in Odoo (XML)\nDESCRIPTION: This XML snippet updates the form view for the 'academy.teachers' model. It adds the 'course_ids' field (the One2many relationship) to the form, rendering it as an inline, editable list ('editable=\"bottom\"') displaying the names of the courses associated with the teacher.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"academy_teacher_form\" model=\"ir.ui.view\">\n    <field name=\"name\">Academy teachers: form</field>\n    <field name=\"model\">academy.teachers</field>\n    <field name=\"arch\" type=\"xml\">\n        <form>\n            <sheet>\n                <field name=\"name\"/>\n                <field name=\"biography\"/>\n                <field name=\"course_ids\">\n                    <list string=\"Courses\" editable=\"bottom\">\n                        <field name=\"name\"/>\n                    </list>\n                </field>\n            </sheet>\n        </form>\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Outlining Odoo Module Directory Structure using Bash - Bash\nDESCRIPTION: This snippet uses a bash-style tree diagram to represent the structure of a typical Odoo module directory, indicating where Python business logic (models), data files (such as XML for views or configuration), and module manifest files are placed. There are no executable commands; this is meant as a conceptual layout for developers planning their modules. It assumes familiarity with filesystem hierarchies and serves as a visual reference for organizing module files within Odoo's expected addon paths.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/01_architecture.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmodule\\n├── models\\n│   ├── *.py\\n│   └── __init__.py\\n├── data\\n│   └── *.xml\\n├── __init__.py\\n└── __manifest__.py\n```\n\n----------------------------------------\n\nTITLE: Default Screenshot Path for Failed Browser Tests (Console)\nDESCRIPTION: Specifies the default directory path where Odoo saves PNG screenshots when an `HttpCase.browser_js` test fails. This occurs when tests are run from the command line using the headless Chrome browser. The `{db_name}` placeholder represents the specific database used during the test run.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n'/tmp/odoo_tests/{db_name}/screenshots/'\n```\n\n----------------------------------------\n\nTITLE: Using Font Awesome Style Options for Icons in Odoo Website XML\nDESCRIPTION: Shows how to add style options to a Font Awesome icon, such as size and shape, using additional classes in span element. Dependencies: Odoo Website Builder's built-in Font Awesome library. Class parameters adjust rendering. Outputs a modified span element that visually emphasizes or resizes the icon.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/media.rst#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<span class=\\\"fa fa-2x fa-picture-o rounded-circle\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding a Field Filter to an Odoo Search View\nDESCRIPTION: Demonstrates how to add a field-based filter to a search view. The field element defines domains or contexts with user-provided values for filtering.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_48\n\nLANGUAGE: xml\nCODE:\n```\n<search>\n    <field name=\"FIELD_NAME\"/>\n</search>\n```\n\n----------------------------------------\n\nTITLE: Setting a Background Image Centered (XML)\nDESCRIPTION: Uses oe_img_bg and o_bg_img_center classes with the background-image style to assign and center a background image for an element. Primarily for visual decoration, requiring a valid image URL.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\\\"oe_img_bg o_bg_img_center\\\" style=\\\"background-image: url('...')\\\">\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Odoo Module Tests\nDESCRIPTION: Shows the recommended file structure for organizing tests in an Odoo module, with test files placed in a dedicated tests directory.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/unit_tests.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nestate\n├── models\n│   ├── *.py\n│   └── __init__.py\n├── tests\n│   ├── test_*.py\n│   └── __init__.py\n├── __init__.py\n└── __manifest__.py\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Snippet to Inner Content Snippets (XML)\nDESCRIPTION: This snippet demonstrates how to make a custom snippet available as 'inner content' within other building blocks by inserting it into the 'snippet_content' group. Dependencies include Odoo and the proper template. Inputs: t-snippet reference, display string, and t-thumbnail image path. Output is the custom snippet's appearance in the inner content options panel. The group attribute should be omitted for inner content usage.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\\\"snippets\\\" inherit_id=\\\"website.snippets\\\" name=\\\"Airproof - Snippets\\\">\\n   <!-- Add the custom snippet to the group -->\\n   <xpath expr=\\\"//snippets[@id='snippet_content']/*[1]\\\" position=\\\"before\\\">\\n      <t t-snippet=\\\"website_airproof.s_airproof_snippet\\\" string=\\\"Custom snippet\\\" t-thumbnail=\\\"/website_airproof/static/src/img/wbuilder/s_airproof_snippet.svg\\\" />\\n   </xpath>\\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining a URL Route with Integer Parameter in Odoo Python Controller\nDESCRIPTION: This code shows how to create a route that only accepts integer parameters. It uses the int converter in the route definition to ensure the parameter is an integer.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@http.route('/academy/<int:id>/', auth='public', website=True)\ndef teacher(self, id):\n    return '<h1>{} ({})</h1>'.format(id, type(id).__name__)\n```\n\n----------------------------------------\n\nTITLE: Appending Assets to a Bundle in Odoo Manifest (Python)\nDESCRIPTION: Shows the default operation for adding assets to a bundle. Simply listing a file path or glob pattern (like 'my_addon/static/src/js/**/*') appends the matching files to the end of the specified bundle (`web.assets_common`) within the `__manifest__.py` file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/assets.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n'web.assets_common': [\n    'my_addon/static/src/js/**/*',\n],\n```\n\n----------------------------------------\n\nTITLE: Moving Elements using Nested XPath in Odoo XML\nDESCRIPTION: Illustrates moving an element within the XML structure using a nested XPath expression. The outer XPath targets the element with `id=\"footer\"` (`//div[@id='footer']`) with `position=\"before\"`. The inner XPath targets the element with `id=\"o_footer_scrolltop_wrapper\"` (`//div[@id='o_footer_scrolltop_wrapper']`) and uses `position=\"move\"` to relocate it before the footer element.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<xpath expr=\"//div[@id='footer']\" position=\"before\">\n   <xpath expr=\"//div[@id='o_footer_scrolltop_wrapper']\" position=\"move\" />\n</xpath>\n```\n\n----------------------------------------\n\nTITLE: Defining Related Field on Odoo Model Using XML - XML\nDESCRIPTION: Adds a related field (x_country_id) to the x_estate.property model that mirrors the country_id field from the related x_partner_id record. This XML snippet sets up the relationship using 'related', allowing direct access to the buyer's country from the property record. Dependencies include prior Many2one link via x_partner_id and existing country_id field on res.partner. The field will automatically reflect changes in the related partner's country.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/importable_modules.rst#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\\n    <!-- ...model definition from before... -->\\n    <record id=\\\"field_real_estate_property_country_id\\\" model=\\\"ir.model.fields\\\">\\n        <field name=\\\"model_id\\\" ref=\\\"estate.model_real_estate_property\\\" />\\n        <field name=\\\"name\\\">x_country_id</field>\\n        <field name=\\\"field_description\\\">Buyer's Country</field>\\n        <field name=\\\"ttype\\\">many2one</field>\\n        <field name=\\\"relation\\\">res.country</field>\\n        <field name=\\\"related\\\">x_partner_id.country_id</field>\\n    </record>\\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Applying Dependent Patches Correctly (and Incorrectly)\nDESCRIPTION: Illustrates the correct and incorrect ways to apply patches where one extension logically builds upon another. Cloning or spreading a previous extension object (`ext1` into `invalid_ext2`) breaks the `super` chain. The correct approach is to apply each extension object separately using sequential `patch` calls (`ext1` first, then `valid_ext2`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/patching_code.rst#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst object = {\n  method1() {\n    doSomething();\n  },\n  method2() {\n    doAnotherThing();\n  },\n};\n\nconst ext1 = {\n  method1() {\n    super.method1();\n    doThings();\n  },\n};\n\nconst invalid_ext2 = {\n  ...ext1, // this will not work: super will not refer to the correct object in methods coming from ext1\n  method2() {\n    super.method2();\n    doOtherThings();\n  },\n};\n\npatch(object, invalid_ext2);\nobject.method1(); // throws: Uncaught TypeError: (intermediate value).method1 is not a function\n\nconst valid_ext2 = {\n  method2() {\n    super.method2();\n    doOtherThings();\n  },\n};\n\npatch(object, ext1); // first patch base extension\npatch(object, valid_ext2); // then the new one\nobject.method1(); // works as expected\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Globally Using Command-Line - Text\nDESCRIPTION: This snippet demonstrates how to set global Git configuration parameters, namely user.name and user.email, using the git config command. It is essential for establishing authorship and ensuring proper identification for commits. Replace <var> and <value> with the appropriate configuration key and desired value (e.g., user.name and your full name, respectively). Requires an installed Git client. No output is produced unless the syntax is incorrect.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/git_guidelines.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngit config --global <var> <value>\n```\n\n----------------------------------------\n\nTITLE: Connecting and Creating Records via XML-RPC in Python\nDESCRIPTION: This Python 3 script demonstrates connecting to an Odoo server using the `xmlrpc.client` library. It authenticates the user, obtains a user ID (uid), and then uses the 'execute' method to create a new 'note.note' record with specified attributes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/web_services.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport xmlrpc.client\n\nroot = 'http://%s:%d/xmlrpc/' % (HOST, PORT)\n\nuid = xmlrpc.client.ServerProxy(root + 'common').login(DB, USER, PASS)\nprint(\"Logged in as %s (uid: %d)\" % (USER, uid))\n\n# Create a new note\nsock = xmlrpc.client.ServerProxy(root + 'object')\nargs = {\n    'color' : 8,\n    'memo' : 'This is a note',\n    'create_uid': uid,\n}\nnote_id = sock.execute(DB, uid, PASS, 'note.note', 'create', args)\n```\n\n----------------------------------------\n\nTITLE: Disabling Tag Color Editing with Many2many Tags Widget in Odoo XML\nDESCRIPTION: Demonstrates setting the `no_edit_color` option to `true` (in conjunction with `color_field`) for the `many2many_tags` widget using the `options` attribute. This prevents users from manually changing the color assigned to the tags.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_37\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"category_id\" widget=\"many2many_tags\" options=\"{'color_field': 'color', 'no_edit_color': true}\" />\n```\n\n----------------------------------------\n\nTITLE: Prepending Assets in an Odoo Bundle (Python)\nDESCRIPTION: Illustrates how to add one or more files to the beginning of an asset bundle using the `prepend` operation. This is achieved by using a tuple `('prepend', <path>)` in the bundle definition within the `__manifest__.py`'s `assets` dictionary.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/assets.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n'web.assets_common': [\n    ('prepend', 'my_addon/static/src/css/bootstrap_overridden.scss'),\n],\n```\n\n----------------------------------------\n\nTITLE: Using Separator Element in Odoo Search View\nDESCRIPTION: This XML snippet demonstrates how to use the separator element to distinguish between groups of filters in a search view. Separators help organize filters and change the logical composition between filter groups.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_63\n\nLANGUAGE: xml\nCODE:\n```\n<search>\n    <FILTERS/>\n    <separator/>\n    <FILTERS/>\n</search>\n```\n\n----------------------------------------\n\nTITLE: Defining a Button with Confirm Attribute in Odoo Form View - XML\nDESCRIPTION: This code illustrates adding a confirm attribute to a button, prompting the user for confirmation before executing the action. The confirmation text can be customized, and a typical usage is to safeguard potentially destructive operations. Place inside Odoo's form view and link to a server-side action via name.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<button name=\\\"action_destroye_gate\\\" string=\\\"Send the goa'uld\\\" type=\\\"object\\\" confirm=\\\"Do you confirm the action?\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Verifying Non-Nullable Constraints on estate_property Table via psql\nDESCRIPTION: Shows the expected partial output of the `psql \\d estate_property;` command after configuring the `name` and `expected_price` fields with `required=True` in the Odoo model. The output verifies that the `Nullable` column for these fields in the database table is now set to `not null`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/03_basicmodel.rst#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nrd-demo=# \\d estate_property;\n                                                    Table \"public.estate_property\"\n    Column       |            Type             | Collation | Nullable |                   Default\n--------------------+-----------------------------+-----------+----------+---------------------------------------------\n...\nname               | character varying           |           | not null |\n...\nexpected_price     | double precision            |           | not null |\n...\n```\n\n----------------------------------------\n\nTITLE: Adding Active Field in Odoo Model\nDESCRIPTION: Demonstrates adding an active field to an estate.property model in Odoo. The active field is a reserved field that automatically filters out records with active=False from search results.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/05_firstui.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nactive = fields.Boolean()\n```\n\n----------------------------------------\n\nTITLE: Adding Inline Create Buttons to an Odoo List View\nDESCRIPTION: Shows how to add inline create buttons to a list view using the control and create elements. This is useful for One2many or Many2many fields to provide custom 'add a line' options.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_46\n\nLANGUAGE: xml\nCODE:\n```\n<list>\n   <control>\n       <create string=\"LABEL\"/>\n       <BUTTONS/>\n    </control>\n    ...\n</list>\n```\n\n----------------------------------------\n\nTITLE: Composing a Page Template with Multiple Snippet Calls - XML\nDESCRIPTION: Demonstrates creating a static page template by composing multiple snippet template calls inside a main wrapper. Uses 't-snippet-call' to include defined template sections, forming the structure presented in the New Page dialog. Should be placed in the template file named according to the naming convention in __manifest__.py.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<div id=\\\"wrap\\\">\\n   <t t-snippet-call=\\\"website_airproof.new_page_template_airproof_faq_s_text_block_h1\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Header Template in SCSS Variables\nDESCRIPTION: Configures the header template name in the SCSS variables palette for the website theme.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_19\n\nLANGUAGE: scss\nCODE:\n```\n$o-website-values-palettes: (\n   (\n      'header-template': 'Contact',\n   ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Object and Action Button Types in Odoo XML\nDESCRIPTION: This XML snippet demonstrates how to create two different types of buttons in Odoo. The first button uses type='object' to call a method on the current model, while the second uses type='action' to load and execute an action record.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures/button_attribute_type.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<button type=\"object\" name=\"action_create_new\" string=\"Create document\"/>\n<button type=\"action\" name=\"addon.action_create_view\" string=\"Create and Edit\"/>\n```\n\n----------------------------------------\n\nTITLE: Calculating Forecasted Stock in Odoo MPS\nDESCRIPTION: This formula explains how the 'Forecasted Stock' row in the Odoo Master Production Schedule (MPS) dashboard is calculated by default. It sums the 'Forecasted Demand' and the 'Suggested Replenishment' for a given time period to determine the projected stock level, assuming suggested replenishments are fulfilled. For components, 'Indirect Demand Forecast' is also included in the calculation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/workflows/use_mps.rst#2025-04-23_snippet_0\n\nLANGUAGE: math\nCODE:\n```\n.. math::\n   \\text{Forecasted Demand} + \\text{Suggested Replenishment} = \\text{Forecasted Stock}\n```\n\n----------------------------------------\n\nTITLE: Creating Attributes for Product Variants in Odoo\nDESCRIPTION: This snippet outlines the process of creating attributes for product variants in Odoo. It covers navigating to the Attributes page, creating a new attribute, and configuring various settings such as Display Type and Variant Creation Mode.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/products_prices/products/variants.rst#2025-04-23_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\nTo create a new attribute from the :guilabel:`Attributes` page, click :guilabel:`New`. Doing so\nreveals a blank attributes form that can be customized and configured in a number of ways.\n\n.. image:: variants/attribute-creation.png\n   :align: center\n   :alt: A blank attribute creation form in the Odoo Sales application.\n\nFirst, create an :guilabel:`Attribute Name`, such as `Color` or `Size`.\n\nNext, select one of the options from the :guilabel:`Display Type` field. The :guilabel:`Display\nType` determines how this product is shown on the online store, *Point of Sale* dashboard, and\n*Product Configurator*.\n\nThe :guilabel:`Display Type` options are:\n\n- :guilabel:`Pills`: options appear as selectable buttons on the product page of the online store.\n- :guilabel:`Color`: options appear as small, colored squares, which reflect any HTML color codes\n- :guilabel:`Radio`: options appear in a bullet-style list on the product page of the online store.\n- :guilabel:`Select`: options appear in a drop-down menu on the product page of the online store.\n  set, on the product page of the online store.\n- :guilabel:`Multi-checkbox (option)`: options appear as selectable checkboxes on the product page\n  of the online store.\n\n.. image:: variants/display-types.png\n   :align: center\n   :alt: Display Types on Product Configurator on the online store in Odoo.\n\nThe :guilabel:`Variant Creation Mode` field informs Odoo when to automatically create a new variant\nonce an attribute is added to a product.\n\n.. note::\n   The :guilabel:`Variant Creation Mode` field **must** be set to :guilabel:`Never (option)` in\n   order for the :guilabel:`Multi-checkbox (option)` to work properly as the :guilabel:`Display\n   Type`.\n\n- :guilabel:`Instantly`: creates all possible variants as soon as attributes and values are added\n  to a product template.\n- :guilabel:`Dynamically`: creates variants **only** when corresponding attributes and values are\n  added to a sales order.\n- :guilabel:`Never (option)`: never automatically creates variants.\n\n.. warning::\n   Once added to a product, an attribute's :guilabel:`Variants Creation Mode` cannot be edited.\n\nThe :guilabel:`eCommerce Filter Visibility` field determines whether or not these attribute options\nare visible to the customer on the front-end, as they shop on the online store.\n\n- :guilabel:`Visible`: the attribute values are visible to customers on the front-end.\n- :guilabel:`Hidden`: the attribute values are hidden from customers on the front-end.\n\nLastly, in the optional :guilabel:`eCommerce Category` field, select a category from a drop-down\nmenu to group similar attributes under the same section for added specificity and organization.\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Color Palettes via SCSS Map Merge - SCSS\nDESCRIPTION: This snippet demonstrates how to merge a new color palette into the Odoo `$o-color-palettes` SCSS map, specifically for a theme named 'airproof'. It defines five primary colors that the Website Builder will use for various UI elements. Requires Odoo’s SCSS variables to be imported, and is typically placed in a theme’s `primary_variables.scss` file. The palette ensures color consistency and automatic generation of combinations for the theme.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_10\n\nLANGUAGE: scss\nCODE:\n```\n$o-color-palettes: map-merge($o-color-palettes,\n   (\n      'airproof': (\n         'o-color-1':                    #bedb39,\n         'o-color-2':                    #2c3e50,\n         'o-color-3':                    #f2f2f2,\n         'o-color-4':                    #ffffff,\n         'o-color-5':                    #000000,\n      ),\n   )\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating Customer Rating Views and Actions in Odoo Form Views (XML)\nDESCRIPTION: This snippet encapsulates two related XML records integrating customer ratings into Odoo's interface. The first defines an action that opens ratings in various view modes for a specific model instance; the second extends a form view to add a button displaying the rating count and linking to the ratings. Dependencies include the action's existence, a form view structure to inherit, and fields related to the rating and stat display.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/mixins.rst#2025-04-23_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\\\"rating_rating_action_my_model\\\" model=\\\"ir.actions.act_window\\\">\\n    <field name=\\\"name\\\">Customer Ratings</field>\\n    <field name=\\\"res_model\\\">rating.rating</field>\\n    <field name=\\\"view_mode\\\">kanban,pivot,graph</field>\\n    <field name=\\\"domain\\\">[('res_model', '=', 'my_module.my_model'), ('res_id', '=', active_id), ('consumed', '=', True)]</field>\\n</record>\\n\\n<record id=\\\"my_module_my_model_view_form_inherit_rating\\\" model=\\\"ir.ui.view\\\">\\n    <field name=\\\"name\\\">my_module.my_model.view.form.inherit.rating</field>\\n    <field name=\\\"model\\\">my_module.my_model</field>\\n    <field name=\\\"inherit_id\\\" ref=\\\"my_module.my_model_view_form\\\"/>\\n    <field name=\\\"arch\\\" type=\\\"xml\\\">\\n        <xpath expr=\\\"//div[@name='button_box']\\\" position=\\\"inside\\\">\\n            <button name=\\\"%(rating_rating_action_my_model)d\\\" type=\\\"action\\\"\\n                    class=\\\"oe_stat_button\\\" icon=\\\"fa-smile-o\\\">\\n                <field name=\\\"rating_count\\\" string=\\\"Rating\\\" widget=\\\"statinfo\\\"/>\\n            </button>\\n        </xpath>\\n    </field>\\n</record>\n```\n\n----------------------------------------\n\nTITLE: Restarting Odoo Server and Updating Module (Console)\nDESCRIPTION: This command restarts the Odoo server and forces an update of the 'academy' module. The `-d academy` specifies the database to use, and `-u academy` triggers the module update. This is needed to load the new template defined in `templates.xml` (after it's added to the manifest).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin --addons-path addons,my-modules -d academy -u academy\n```\n\n----------------------------------------\n\nTITLE: Removing Assets from an Odoo Bundle (Python)\nDESCRIPTION: Demonstrates how to remove specific files or files matching a pattern from an asset bundle using the `remove` directive in the `__manifest__.py`. The syntax is a pair `('remove', <target_path_or_pattern>)`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/assets.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n'web.assets_common': [\n    ('remove', 'web/static/src/js/boot.js'),\n],\n```\n\n----------------------------------------\n\nTITLE: Timed Auto-Closing Notification using Odoo Notification Service (JavaScript)\nDESCRIPTION: This code illustrates how to programmatically close a notification after a timed interval. It shows the useService initialization and the call to add on notificationService, which returns a close function. setTimeout is then used to invoke close after 1000 milliseconds, resulting in an auto-closing notification. This snippet requires only the notification service and is useful for non-intrusive, informational feedback to users. Key input is the notification message and the timeout duration; output is a notification that dismisses itself after the delay.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/services.rst#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n  const notificationService = useService(\"notification\");\n  const close = notificationService.add(\"I will be quickly closed\");\n  setTimeout(close, 1000);\n```\n\n----------------------------------------\n\nTITLE: Adding SCSS Assets to Odoo Bundle (Python)\nDESCRIPTION: This Python manifest fragment demonstrates how to include a custom SCSS file (primary_variables.scss) in Odoo's primary variables asset bundle. The assets key defines which SCSS resources are loaded, allowing for custom variable overrides used throughout the theme. This requires the path to the SCSS file relative to the module root. Only the specific listed file will be included.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n'assets': {\n   'web._assets_primary_variables': [\n      'website_airproof/static/src/scss/primary_variables.scss',\n   ],\n},\n```\n\n----------------------------------------\n\nTITLE: Obtaining Odoo Test Database via XML-RPC - Go (kolo/xmlrpc)\nDESCRIPTION: Connects to the Odoo demo server using the Go kolo/xmlrpc library to obtain test instance parameters. Handles the XML-RPC client setup, error checking, and result extraction into local variables for later use. Assumes prior installation of the github.com/kolo/xmlrpc package.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nclient, err := xmlrpc.NewClient(\"https://demo.odoo.com/start\", nil)\\nif err != nil {\\n    log.Fatal(err)\\n}\\ninfo := map[string]string{}\\nclient.Call(\"start\", nil, &info)\\nurl = info[\"host\"].(string)\\ndb = info[\"database\"].(string)\\nusername = info[\"user\"].(string)\\npassword = info[\"password\"].(string)\n```\n\n----------------------------------------\n\nTITLE: Enabling Website Integration in Controller (Python)\nDESCRIPTION: This modification adds the `website=True` argument to the `@http.route` decorator in the controller. This flag signals integration with the 'website' module, which adds website-specific helpers and context to the request object and enables the use of standard website layouts.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass Academy(http.Controller):\n\n      @http.route('/academy/academy/', auth='public', website=True)\n      def index(self, **kw):\n          Teachers = http.request.env['academy.teachers']\n          return http.request.render('academy.index', {\n              'teachers': Teachers.search([])\n          })\n```\n\n----------------------------------------\n\nTITLE: Launching Odoo Interactive Shell via Command Line\nDESCRIPTION: Demonstrates the command `odoo-bin shell` used to start an interactive Python console environment for Odoo. This environment provides direct access to the Odoo Object-Relational Mapper (ORM) and other framework functionalities, useful for debugging or manual data manipulation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_41\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin shell\n```\n\n----------------------------------------\n\nTITLE: Setting a Button Icon using 'icon' attribute in Odoo XML\nDESCRIPTION: This XML snippet demonstrates how to assign an icon (specifically 'fa-trash' from Font Awesome) to an Odoo button using the `icon` attribute. The button has `type=\"object\"` and `name=\"remove\"`. The `icon` attribute is optional, expects a string representing the icon class (referencing available icons like Font Awesome), and defaults to an empty string if not provided.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures/button_attribute_icon.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<button type=\"object\" name=\"remove\" icon=\"fa-trash\"/>\n```\n\n----------------------------------------\n\nTITLE: Inefficient Odoo Record Creation in a Loop (Python)\nDESCRIPTION: This snippet illustrates creating multiple Odoo records inefficiently by calling the `create` method within a loop. Each call potentially triggers individual processing and database operations, which is less optimal than batch creation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/performance.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfor name in ['foo', 'bar']:\n    model.create({'name': name})\n```\n\n----------------------------------------\n\nTITLE: Embedding Iframe Video Content in Odoo Website with XML\nDESCRIPTION: Illustrates how to embed a video within Odoo website content using an iframe inside a styled div. The data-oe-expression and src attributes specify the video URL. Requires a valid video source and uses additional structural divs for editing and sizing. Outputs a block with an embedded frame for video playback; suitable for content areas.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/media.rst#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\\\"media_iframe_video\\\" data-oe-expression=\\\"...\\\">\\n    <div class=\\\"css_editable_mode_display\\\">&nbsp;</div>\\n    <div class=\\\"media_iframe_video_size\\\" contenteditable=\\\"false\\\">&nbsp;</div>\\n    <iframe src=\\\"...\\\"\\n        frameborder=\\\"0\\\"\\n        contenteditable=\\\"false\\\"\\n        allowfullscreen=\\\"allowfullscreen\\\"/>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Populating Drop Zone with Content in Odoo\nDESCRIPTION: Template to populate an existing drop zone with predefined content using XPath replacement.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_40\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"oe_structure_layout_01\" inherit_id=\"...\" name=\"...\">\n   <xpath expr=\"//*[@id='oe_structure_layout_01']\" position=\"replace\">\n      <div id=\"oe_structure_layout_01\" class=\"oe_structure oe_structure_solo\">\n         <!-- Content -->\n      </div>\n   </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: WhatsApp Message Template Example with Dynamic Variables\nDESCRIPTION: Example of a WhatsApp message template using dynamic variables ({{1}}, {{2}}, etc.) to reference fields from the database for personalized messaging.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/productivity/whatsapp.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nDear {{1}},\n\n| Here is your invoice *{{2}}* from *{{3}}* for a total of *{{4}}{{5}}*.\n| To review your invoice or pay online: {{6}}\n\nThank you\n```\n\n----------------------------------------\n\nTITLE: Adding Tabbed Sections Using Notebook and Page in Odoo Form View - XML\nDESCRIPTION: This snippet adds a notebook element with child pages to create a tabbed interface in Odoo forms. Each page element represents a new tab and can contain further form fields or components. Notebooks should be placed directly under the form root or sheet, not within groups, as per Odoo recommendations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<form>\\n    <notebook>\\n        <page string=\\\"LABEL\\\">\\n            ...\\n        </page>\\n    </notebook>\\n</form>\n```\n\n----------------------------------------\n\nTITLE: Adding an Item to a Dropdown Menu in Odoo XML\nDESCRIPTION: This XML snippet adds a specific item (\"Item 1\" linking to '/dropdown/item-1') to a previously declared dropdown menu. It creates a `website.menu` record, setting its `name`, `url`, `website_id` (1), `sequence`, and crucially, referencing the parent dropdown menu record (`website_airproof.menu_services`) in the `parent_id` field using `ref`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/navigation.rst#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"menu_services_item_1\" model=\"website.menu\">\n    <field name=\"name\">Item 1</field>\n    <field name=\"url\">/dropdown/item-1</field>\n    <field name=\"website_id\">1</field>\n    <field name=\"parent_id\" ref=\"website_airproof.menu_services\"/>\n    <field name=\"sequence\" type=\"int\">...</field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Candidate Object Structure in JavaScript\nDESCRIPTION: Defines the structure for extracted candidates including content, coordinate positioning, and page location information.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/extract_api.rst#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"candidate\": [\n    {\n        \"content\": string|float,\n        \"coords\": [float, float, float, float, float],\n        \"page\": int\n    },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Filter in Odoo for Company-specific Databases\nDESCRIPTION: Configuration example for setting up a database filter that only shows databases with names beginning with 'mycompany' in the Odoo configuration file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/deploy.rst#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[options]\ndbfilter = ^mycompany.*$\n```\n\n----------------------------------------\n\nTITLE: Setting Start Year for Date Filters in Odoo XML\nDESCRIPTION: This XML snippet demonstrates using the `start_year` attribute on a date-based `<filter>` tag in an Odoo search view. It sets the earliest selectable year in the filter's dropdown relative to the current year (e.g., `-3` means three years prior to the current year). Requires the `date` attribute to be set.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_55\n\nLANGUAGE: xml\nCODE:\n```\n<filter string=\"Creation Date\" name=\"filter_create_date\" date=\"create_date\" start_year=\"-3\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding a Datetime Field to a Model\nDESCRIPTION: Python code snippet showing how to add a new datetime field to an existing Odoo model with a default value.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndescription = fields.Text()\n\nstart_datetime = fields.Datetime('Start time', default=lambda self: fields.Datetime.now())\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo Single Outgoing Mail Server (Azure OAuth Example)\nDESCRIPTION: This example configuration outlines the settings for a single outgoing mail server in Odoo, intended for sending notifications. It specifies the server username, sets the `FROM Filtering` to match the notification email address, and defines the necessary `mail.catchall.domain` and `mail.default.from` system parameters. This setup ensures all outgoing system emails use the designated notification address.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/email_communication/azure_oauth.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- Outgoing mail server **username** (login) = `notifications@example.com`\n- Outgoing mail server :guilabel:`FROM Filtering` = `notifications@example.com`\n- `mail.catchall.domain` in system parameters = `example.com`\n- `mail.default.from` in system parameters = `notifications`\n```\n\n----------------------------------------\n\nTITLE: Activating Product Categories Sidebar by Default - Odoo View Modification in XML\nDESCRIPTION: This XML code snippet modifies the ir.ui.view record for product categories to set its 'active' field to True by default, making the categories sidebar visible immediately upon module installation. It must be loaded in an environment where Odoo view inheritance is supported. Dependencies: Odoo framework, academy module, and referenced views. No additional parameters are needed; the active flag is set as a static configuration.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_40\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"website_sale.products_categories\" model=\"ir.ui.view\">\n    <field name=\"active\" eval=\"True\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Spellcheck-Enabled Template Markup for Multiple Elements in Owl - XML\nDESCRIPTION: This XML template for the \"Comp\" component demonstrates three spellcheck-enabled regions: a standard input with t-ref=\"spellcheck\", a textarea with t-ref=\"custom\", and a container div (t-ref=\"container\") that holds child elements including a spellcheck-disabled input and a contenteditable div. This segmentation enables selective activation of spellcheck logic per UI element. Supporting code must use useSpellCheck with matching refNames.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/hooks.rst#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\"Comp\">\n  <input t-ref=\"spellcheck\" type=\"text\"/>\n  <textarea t-ref=\"custom\"/>\n  <div t-ref=\"container\">\n    <input type=\"text\" spellcheck=\"false\"/>\n    <div contenteditable=\"true\"/>\n  </div>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Formatting Supported Object Exports for Odoo Transpiler\nDESCRIPTION: Demonstrates the correct formatting for exporting multiple identifiers as part of an object literal (`export { a as b, c, d }`) or re-exporting named identifiers from another file (`export { a } from \"./file_a\"`), which is supported by the Odoo transpiler.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_modules.rst#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n  // supported\n  export {\n    a as b,\n    c,\n    d,\n  }\n\n  export {\n    a\n  } from \"./file_a\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Records in Odoo XML Files - XML - xml\nDESCRIPTION: This snippet demonstrates the preferred format for declaring records in Odoo XML data files, showing the order of attributes and placement of model data and field values. It follows Odoo's conventions for grouping records, setting attributes like 'id', 'model', and using 'field' tags and options. Required to load custom views or data into Odoo, it expects valid XML input and is processed by Odoo's ORM during module installation or updates.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"view_id\" model=\"ir.ui.view\">\n    <field name=\"name\">view.name</field>\n    <field name=\"model\">object_name</field>\n    <field name=\"priority\" eval=\"16\"/>\n    <field name=\"arch\" type=\"xml\">\n        <list>\n            <field name=\"my_field_1\"/>\n            <field name=\"my_field_2\" string=\"My Label\" widget=\"statusbar\" statusbar_visible=\"draft,sent,progress,done\" />\n        </list>\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Menu Item to Open in New Window in Odoo XML\nDESCRIPTION: This XML snippet shows how to modify an existing `website.menu` record (identified by its `id=\"...\"`) to make its link open in a new browser tab/window. This is achieved by setting the `new_window` boolean field to `True` using `eval=\"True\"`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/navigation.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"...\" model=\"website.menu\">\n    <field name=\"new_window\" eval=\"True\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Properly Using SQL Transactions with WHERE Clause\nDESCRIPTION: Example of a proper SQL transaction with a WHERE clause to limit the scope of changes. This demonstrates the safe pattern of beginning a transaction, performing a targeted update, and committing the changes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/advanced/containers.rst#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nodoo-addons-master-1=> BEGIN;\nBEGIN\nodoo-addons-master-1=> UPDATE res_users SET password = '***' WHERE id = 1;\nUPDATE 1\nodoo-addons-master-1=> COMMIT;\nCOMMIT\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Form View for Teachers in Odoo (XML)\nDESCRIPTION: This XML snippet defines a custom form view for the 'academy.teachers' model in Odoo. It aims to improve the default layout by placing the 'name' and 'biography' fields within a <sheet> element for better presentation and editing experience. This view overrides the basic auto-generated form view.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"academy_teacher_form\" model=\"ir.ui.view\">\n    <field name=\"name\">Academy teachers: form</field>\n    <field name=\"model\">academy.teachers</field>\n    <field name=\"arch\" type=\"xml\">\n        <form>\n            <sheet>\n                <field name=\"name\"/>\n                <field name=\"biography\"/>\n            </sheet>\n        </form>\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nested Groups and Newline Element in Odoo Form - XML\nDESCRIPTION: This example provides a structural outline of a form with groups, sub-groups, and likely uses the newline element for explicit row breaks, showing possible component organization for advanced layouts. It is useful when visual separation of form sections or categorical grouping is required for user experience.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<form>\\n    <group string=\\\"Title 1\\\">\\n        <group string=\\\"Title 1.1\\\">...</group>\n```\n\n----------------------------------------\n\nTITLE: Configuring Map View in Odoo XML\nDESCRIPTION: Example of a Map view configuration that displays records on a map with routing enabled. It customizes the display by hiding the name field, setting a custom order, and adding a custom field to the pin's popup.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_81\n\nLANGUAGE: xml\nCODE:\n```\n<map res_partner=\"partner_id\" default_order=\"date_begin\" routing=\"1\" hide_name=\"1\">\n    <field name=\"partner_id\" string=\"Customer Name\"/>\n</map>\n```\n\n----------------------------------------\n\nTITLE: Defining Initializers in JavaScript Classes - init Method - JavaScript\nDESCRIPTION: Shows how to create a constructor by defining an 'init' method in an Odoo JavaScript class. This method receives parameters passed during instantiation and initializes the object's attributes. Ensures objects are created with properly bound properties for further use.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar MyClass = instance.web.Class.extend({\n    init: function(name) {\n        this.name = name;\n    },\n    say_hello: function() {\n        console.log(\"hello\", this.name);\n    },\n});\n\nvar my_object = new MyClass(\"Bob\");\nmy_object.say_hello();\n// print \"hello Bob\" in the console\n```\n\n----------------------------------------\n\nTITLE: Handling the /parse Response from Odoo Extract API in JSON\nDESCRIPTION: Illustrates the JSON-RPC2 response format received from the Odoo Extract API's /parse endpoint. Includes a `status` code (e.g., 'success', 'error_no_credit'), a descriptive `status_msg`, and the crucial `document_token` required for fetching results if the submission was successful.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/extract_api.rst#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": string,\n    \"result\": {\n        \"status\": string,\n        \"status_msg\": string,\n        \"document_token\": string,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Field Element with Options (XML)\nDESCRIPTION: Shows how to use the 'options' attribute in a field element to configure widget options, specifically for relation fields.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"tag_ids\" widget=\"many2many_tags\" options=\"{'color_field': 'FIELD_NAME', 'no_quick_create': True}\"/>\n```\n\n----------------------------------------\n\nTITLE: Applying Extra Shape Color Mapping Variant in Odoo XML\nDESCRIPTION: Demonstrates how to apply the 'second' extra color mapping (defined using `add-extra-shape-colors-mapping` in SCSS) to a shape in Odoo XML. This is achieved by adding the corresponding class `o_second_extra_shape_mapping` to the shape's `div`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/shapes.rst#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<section data-oe-shape-data=\"{'shape':'web_editor/Zigs/06'}\">\n    <div class=\"o_we_shape o_web_editor_Zigs_06 o_second_extra_shape_mapping\"/>\n    <div class=\"container\">\n        <!-- Content -->\n    </div>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Example HTML Content for Scraping in Odoo Field Cleaning\nDESCRIPTION: Provides a sample HTML snippet used as input for the 'Scrap HTML' action within Odoo's Field Cleaning rules. This action is designed to convert HTML markup into plain text format, removing tags while attempting to preserve content structure.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/productivity/data_cleaning.rst#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n.. code-block:: html\n   :caption: HTML text\n\n   <h1>John Doe</h1>\n   <p>Lorem ipsum dolor sit <a href=\"https://example.com\">amet</a>.</p>\n```\n\n----------------------------------------\n\nTITLE: Block-Based Variable Assignment with t-set in QWeb XML\nDESCRIPTION: Demonstrates assigning a variable to a rendered block instead of an expression value using t-set without t-value. The inner content is captured and becomes the variable's value, which can later be output with t-out. This is useful for caching or repeating complex markup in templates.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\"foo\">\n    <li>ok</li>\n</t>\n<t t-out=\"foo\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Binary File Upload with Filename Attribute in Odoo XML View - XML\nDESCRIPTION: This snippet configures a binary field 'datas' with an accompanying 'filename' attribute 'datas_fname', ensuring that when files are uploaded, their names are preserved in the specified field. It is designed for use in Odoo XML view definitions for binary uploads, where filenames would otherwise be lost. The view must have both the binary and filename fields present.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\\\"datas\\\" filename=\\\"datas_fname\\\" />\n```\n\n----------------------------------------\n\nTITLE: ZPL Label Configuration Sample\nDESCRIPTION: Zebra Programming Language (ZPL) label format options for printing product labels. Can print labels with product name, barcode, and optionally price information.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/print_on_validation.rst#2025-04-23_snippet_0\n\nLANGUAGE: zpl\nCODE:\n```\nZPL Labels\nZPL Labels with price\n```\n\n----------------------------------------\n\nTITLE: Adding View File to Odoo Module Data (Odoo Manifest)\nDESCRIPTION: Updates the Odoo module manifest (`__manifest__.py`) to include the XML view file (`views/templates.xml`) in the `data` section. This is essential for Odoo to load and apply the view modifications, including the addition of the `<owl-component>` tag defined in the view file, when the module is installed or updated.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/frontend_owl_components.rst#2025-04-23_snippet_4\n\nLANGUAGE: py\nCODE:\n```\n{\n    # ...\n    'data': [\n        'views/templates.xml',\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HomePage and MessageOfTheDay Widgets in Odoo JavaScript\nDESCRIPTION: Defines two Odoo widgets: HomePage which serves as the main container, and MessageOfTheDay which fetches and displays the latest message from the oepetstore.message_of_the_day model.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.HomePage = instance.Widget.extend({\n    template: \"HomePage\",\n    start: function() {\n        return new local.MessageOfTheDay(this).appendTo(this.$el);\n    },\n});\n\ninstance.web.client_actions.add('petstore.homepage', 'instance.oepetstore.HomePage');\n\nlocal.MessageOfTheDay = instance.Widget.extend({\n    template: \"MessageOfTheDay\",\n    start: function() {\n        var self = this;\n        return new instance.web.Model(\"oepetstore.message_of_the_day\")\n            .query([\"message\"])\n            .order_by('-create_date', '-id')\n            .first()\n            .then(function(result) {\n                self.$(\"oe_mywidget_message_of_the_day\").text(result.message);\n            });\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Appending Content Before a Field Node – Odoo XML\nDESCRIPTION: This XML snippet demonstrates use of the position=\\\"before\\\" attribute, placing new content before the matched field node. Within a view inheritance context, it allows the developer to inject new fields or structure that precede the specified target. Requires Odoo's inheritance system and a well-formed XML parent node.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_records.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<field name=x_field\\\" position=\\\"before\\\">\\n    <field name=\\\"x_other_field\\\"/>\\n</field>\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo Proxy Mode Setting\nDESCRIPTION: Sets proxy mode configuration in Odoo's configuration file to enable running behind a reverse proxy.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/deploy.rst#2025-04-23_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nproxy_mode = True\n```\n\n----------------------------------------\n\nTITLE: Defining Basic View Structure in XML for Odoo\nDESCRIPTION: This snippet shows the generic structure for defining a basic view in Odoo. It includes the record definition, essential fields like name, model, and arch, and placeholders for the specific view type content.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_records.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"ADDON.MODEL_view_TYPE\" model=\"ir.ui.view\">\n  <field name=\"name\">NAME</field>\n  <field name=\"model\">MODEL</field>\n  <field name=\"arch\" type=\"xml\">\n    <VIEW_TYPE>\n      <views/>\n    </VIEW_TYPE>\n  </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Accessing Instance Attributes in Odoo JavaScript Classes - JavaScript\nDESCRIPTION: Explains how to work with instance attributes in custom Odoo classes by assigning values after instantiation. Methods can access these attributes using 'this'. This pattern allows for dynamic object composition and flexible method logic.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar MyClass = instance.web.Class.extend({\n    say_hello: function() {\n        console.log(\"hello\", this.name);\n    },\n});\n\nvar my_object = new MyClass();\nmy_object.name = \"Bob\";\nmy_object.say_hello();\n// print \"hello Bob\" in the console\n```\n\n----------------------------------------\n\nTITLE: Referencing CSV Column Structure for Odoo Country State Data\nDESCRIPTION: This snippet describes the structure of a CSV file used for country state data in Odoo. It specifies that the fourth column of the CSV corresponds to the 'code' field for the 'res.country.state' model.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/data.rst#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n* the fourth column is the ``code`` field for ``res.country.state``\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo Form Submission to Create Opportunity - XML\nDESCRIPTION: This form is configured for the CRM module in Odoo, creating an opportunity by specifying data-model_name as 'crm.lead'. The CRM app must be installed and all required opportunity fields should be presented in the form for a successful operation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/forms.rst#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<form data-model_name=\"crm.lead\">\n```\n\n----------------------------------------\n\nTITLE: Creating Records in Odoo Model using XML-RPC in Go\nDESCRIPTION: This Go code demonstrates creating a new res.partner record with a specified name via XML-RPC. The function expects to store the returned record ID; error handling is included for a failed call. Setup needs ready models.Call client and valid credential variables.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_39\n\nLANGUAGE: go\nCODE:\n```\nvar id int64\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"res.partner\", \"create\",\n    []map[string]string{\n        {\"name\": \"New Partner\"},\n    },\n}, &id); err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Using we-range Element in XML\nDESCRIPTION: Shows how to create a slider option using the we-range element. Each step in the range corresponds to a different CSS class, separated by vertical bars.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_44\n\nLANGUAGE: xml\nCODE:\n```\n<we-range\n   string=\"Images Spacing\"\n   data-select-class=\"o_spc-none|o_spc-small|o_spc-medium|o_spc-big\" />\n```\n\n----------------------------------------\n\nTITLE: Color Field Template\nDESCRIPTION: QWeb template for the color field defining the display structure for both modes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_48\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\"FieldColor\">\n    <div class=\"oe_field_color\">\n        <t t-if=\"widget.get('effective_readonly')\">\n            <div class=\"oe_field_color_content\" />\n        </t>\n        <t t-if=\"! widget.get('effective_readonly')\">\n            <input type=\"color\"></input>\n        </t>\n    </div>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Defining Model Access Control Rules (CSV)\nDESCRIPTION: This CSV file defines access rights for the 'academy.teachers' model (`model_academy_teachers`). The line grants read access (`perm_read=1`) to all users (empty `group_id:id`) but denies write, create, and delete permissions (`perm_write=0`, `perm_create=0`, `perm_unlink=0`). This file must be listed in the `__manifest__.py` 'data' section.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_9\n\nLANGUAGE: csv\nCODE:\n```\nid,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\naccess_academy_teachers,access_academy_teachers,model_academy_teachers,,1,0,0,0\n```\n\n----------------------------------------\n\nTITLE: Sample Python Model Definition\nDESCRIPTION: Defines a sample Odoo model 'oepetstore.message_of_the_day' with two fields and a method that returns a dictionary. This model will be used to demonstrate client-server communication.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nclass message_of_the_day(models.Model):\n    _name = \"oepetstore.message_of_the_day\"\n\n    @api.model\n    def my_method(self):\n        return {\"hello\": \"world\"}\n\n    message = fields.Text(),\n    color = fields.Char(size=20),\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic List View Structure in Odoo XML\nDESCRIPTION: Shows the basic structure of a list view with fields. The field elements define the columns to display, with options for custom names and aggregation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_42\n\nLANGUAGE: xml\nCODE:\n```\n<list>\n    <field name=\"name\" string=\"My Custom Name\"/>\n    <field name=\"amount\" sum=\"Total\"/>\n    <field name=\"currency_id\"/>\n    <field name=\"tax_id\"/>\n</list>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'string' Field Attribute in Odoo using reStructuredText\nDESCRIPTION: Documentation for the 'string' attribute which defines the label of a field in Odoo. The attribute is optional and defaults to the string attribute of the model's field when not specified.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures/field_attribute_string.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. attribute:: string\n   :noindex:\n\n   The label of the field.\n\n   :requirement: Optional\n   :type: str\n   :default: The `string` attribute of the model's field\n```\n\n----------------------------------------\n\nTITLE: Multi-Condition Block Rendering with t-if/t-elif/t-else in Odoo Report XML - XML\nDESCRIPTION: Illustrates multi-branch conditional logic within report templates, enabling dynamic labels or blocks based on model state and context. The snippet selects a title for sales orders as Pro-Forma Invoice, Quotation, or Order based on context ('proforma', 'is_pro_forma') and document state. Expected context: env.context, doc, and doc.state; output is a dynamically determined heading. Used in head/title sections of Odoo XML reports.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/studio/pdf_reports.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<h2 class=\\\"mt-4\\\">\\n    <span t-if=\\\"env.context.get('proforma', False) or is_pro_forma\\\">Pro-Forma Invoice # </span>\\n    <span t-elif=\\\"doc.state in ['draft','sent']\\\">Quotation # </span>\\n    <span t-else=\\\"\\\">Order # </span>\\n    <span t-field=\\\"doc.name\\\">SO0000</span>\\n</h2>\n```\n\n----------------------------------------\n\nTITLE: Displaying Odoo Icon Class: oi-arrow-down-left\nDESCRIPTION: This snippet shows the CSS class name 'oi-arrow-down-left' used to render the corresponding down-left arrow icon within the Odoo framework. The surrounding HTML structure typically includes an `<i>` tag with this class applied.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/icons.rst#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\noi-arrow-down-left\n```\n\n----------------------------------------\n\nTITLE: Formatting SCSS Code According to Odoo Guidelines\nDESCRIPTION: Provides an example of recommended SCSS formatting, including four-space indentation, specific brace placement, spacing around operators and selectors, and the use of variables. This snippet demonstrates styling `.o_foo`, `.o_bar`, `.o_baz`, and nested `.o_qux` elements using SCSS variables like `$o-statusbar-height` as per Odoo's CSS/SCSS guidelines.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_16\n\nLANGUAGE: scss\nCODE:\n```\n.o_foo, .o_foo_bar, .o_baz {\n   height: $o-statusbar-height;\n\n   .o_qux {\n      height: $o-statusbar-height * 0.5;\n   }\n}\n\n.o_corge {\n   background: $o-list-footer-bg-color;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Documentation Build Dependencies - requirements.txt - text\nDESCRIPTION: This snippet enumerates exact package versions needed for setting up a stable documentation build environment with Sphinx. It includes core Sphinx dependencies, extensions for various output formats, and a compatibility-pinned version of 'sphinx-tabs'. This file should be used with a Python package manager (e.g., pip install -r requirements.txt) to ensure all required tools are installed for documentation generation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndocutils==0.17.0\nlibsass==0.20.1\npygments~=2.6.1\npygments-csv-lexer~=0.1\nsphinx==4.3.2\nsphinxcontrib-applehelp==1.0.4\nsphinxcontrib-devhelp==1.0.2\nsphinxcontrib-htmlhelp==2.0.1\nsphinxcontrib-serializinghtml==1.1.5\nsphinxcontrib-qthelp==1.0.3\nsphinx-tabs==3.4.5  # Compatibility with docutils==0.17.0\n```\n\n----------------------------------------\n\nTITLE: Documenting Specific Fields of AccountAccountTag Model (reStructuredText)\nDESCRIPTION: These Sphinx `autofield` directives automatically generate documentation for individual fields (`name`, `applicability`, `color`, `active`, `tax_negate`, `country_id`) within the `AccountAccountTag` model previously targeted by `automodel`. Sphinx extracts docstrings and type information from the Python source code for each field. This requires the `automodel` directive to be declared beforehand for context.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/standard_modules/account/account_account_tag.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autofield:: name\n.. autofield:: applicability\n.. autofield:: color\n.. autofield:: active\n.. autofield:: tax_negate\n.. autofield:: country_id\n```\n\n----------------------------------------\n\nTITLE: Declaring Image Attachments via XML in Odoo\nDESCRIPTION: This snippet shows how to register an image in Odoo's database so it becomes available for use in templates and the media dialog. It creates an ir.attachment record referencing an image file, specifying its name and visibility. Dependencies: Odoo, valid static image file at given path. Parameters: name for image, base64-encoded image data, model to associate with, and public status. Expected output: Registered image retrievable by record ID; required for many builder operations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/media.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\\\"img_about_01\\\" model=\\\"ir.attachment\\\">\\n    <field name=\\\"name\\\">About Image 01</field>\\n    <field name=\\\"datas\\\" type=\\\"base64\\\" file=\\\"website_airproof/static/src/img/content/img_about_01.jpg\\\"/>\\n    <field name=\\\"res_model\\\">ir.ui.view</field>\\n    <field name=\\\"public\\\" eval=\\\"True\\\"/>\\n</record>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Allowing Tag Creation with Many2many Tags Widget in Odoo XML\nDESCRIPTION: Illustrates how to use the `create` option within the `options` attribute for the `many2many_tags` widget. This allows defining a domain (e.g., `[['some_other_field', '>', 24]]`) to dynamically control whether new tags can be created based on the values of other fields in the view.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"category_id\" widget=\"many2many_tags\" options=\"{'create': [['some_other_field', '>', 24]]}\" />\n```\n\n----------------------------------------\n\nTITLE: Counting Lines of Code (Cloc) for Specific Path via Command Line\nDESCRIPTION: Shows how to use the `odoo-bin cloc` command with the `--path` (`-p`) option to count lines of code specifically within the files located in the `addons/account` directory. This allows analyzing the code volume of a particular module or directory.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_47\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin cloc -p addons/account\n```\n\n----------------------------------------\n\nTITLE: Inefficient Membership Checking using List Lookup (Python)\nDESCRIPTION: This snippet demonstrates a potentially inefficient pattern where membership (`record.id in invalid_ids`) is checked against a list (`invalid_ids`) inside a loop. List membership checking takes O(k) time on average (where k is the list size), leading to an overall O(n*k) complexity for the loop, which can be slow for large lists.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/performance.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ninvalid_ids = self.search(domain).ids\nfor record in self:\n    if record.id in invalid_ids:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Catching and Rethrowing Filtered Errors in JavaScript\nDESCRIPTION: This JavaScript block demonstrates how to selectively handle errors based on their class using the instanceof operator, and how to rethrow errors that are not intended to be captured by the current catch block. It assumes that MyErrorClass is a defined Error subclass and doStuff() is a call that may throw. Inputs are the function to be invoked; the output is either normal control flow or a thrown error passed upwards. The snippet emphasizes the limitation that JavaScript's catch cannot natively filter by error type, so developers must implement their own filtering pattern.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/error_handling.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  doStuff();\n} catch (e) {\n  if (!(e instanceof MyErrorClass)) {\n    throw e; // caught an error we can't handle, rethrow\n  }\n  // handle MyErrorClass\n}\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Notifications in JavaScript\nDESCRIPTION: Examples of displaying notifications with different options like title, message type and persistence settings.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nthis.notification.add({\n    title: _t(\"Success\"),\n    message: _t(\"Your signature request has been sent.\")\n});\nthis.notification.add({\n    title: _t(\"Error\"),\n    message: _t(\"Filter name is required.\"),\n    type: \"danger\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Active Field\nDESCRIPTION: Shows how to set a default value for the active field to ensure records remain visible in list views.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/05_firstui.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nactive = fields.Boolean(default=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Employee Hourly Cost in Odoo\nDESCRIPTION: Describes how to set the actual hourly cost for a specific employee within their profile in the Employees app. This value is entered in the 'Hourly Cost' field under the 'Settings' tab and is used to calculate the 'real cost' of manufacturing orders.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/basic_setup/mo_costs.rst#2025-04-23_snippet_7\n\nLANGUAGE: Odoo Configuration\nCODE:\n```\nselect the :guilabel:`Settings` tab, and enter the\nemployee's rate in the :guilabel:`Hourly Cost` field of the :guilabel:`Application Settings`\nsection.\n```\n\n----------------------------------------\n\nTITLE: Improving Translation Readability in Odoo\nDESCRIPTION: This snippet illustrates how to structure code for better translation readability. It shows examples of poorly formatted strings that make translation difficult, and better alternatives that make the strings easier for translators to work with while maintaining proper functionality.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Bad: makes the translations hard to work with\nerror = \"'\" + question + _(\"' \\nPlease enter an integer value \")\n\n# Ok (pay attention to position of the brackets too!)\nerror = _(\"Answer to question %s is not valid.\\n\" \\\n          \"Please enter an integer value.\", question)\n\n# Better\nerror = _(\"Answer to question %(title)s is not valid.\\n\" \\\n          \"Please enter an integer value.\", title=question)\n```\n\n----------------------------------------\n\nTITLE: Formatting Unsupported Import/Export Statements for Odoo Transpiler\nDESCRIPTION: Illustrates examples of JavaScript `import` and `export` statement formatting that will cause issues with the Odoo transpiler due to its simplified parsing approach (not using a full JS parser). This includes having non-space characters immediately before the keywords on the same line, or having lines within multi-line comments/strings starting with `import` or `export`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_modules.rst#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// not supported\n\nvar a= 1;import X from \"xxx\";\n/*\n  import X ...\n*/\n```\n\n----------------------------------------\n\nTITLE: Redirecting Odoo Logs to Syslog via Command-line\nDESCRIPTION: Sends Odoo server logs to the operating system's standard event logger: Syslog on Unix-like systems or the Event Log on Windows. Configuration options for the syslog handler itself are not available through this flag.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_29\n\nLANGUAGE: console\nCODE:\n```\n--syslog\n```\n\n----------------------------------------\n\nTITLE: Defining Section Wrapper in Odoo Website Builder (XML)\nDESCRIPTION: Demonstrates the standard section wrapper markup for snippets. This ensures snippets are styled and moveable within the Website Builder, with attributes for identification and UI display. Depends on the Odoo Website Builder and expects 'class', 'data-name', and 'data-snippet' attributes in the <section> element. Inputs and outputs are the rendered section HTML; attributes are automatically injected on drag/drop but should be manually added for theme page declarations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<section class=\\\"s_snippet_name\\\" data-name=\\\"...\\\" data-snippet=\\\"...\\\">\\n    <!-- Content -->\\n</section>\n```\n\n----------------------------------------\n\nTITLE: Secure HTML Template Rendering Pattern\nDESCRIPTION: Shows proper implementation of HTML content rendering using t-esc directive and separate styling.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/security.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nQWeb.render('secure_template', {\n    message: \"You have an important notification on the product:\",\n    subject: product.name\n})\n```\n\nLANGUAGE: xml\nCODE:\n```\n<div t-name=\"secure_template\">\n    <div id=\"information-bar\">\n        <div class=\"info\"><t t-esc=\"message\" /></div>\n        <div class=\"subject\"><t t-esc=\"subject\" /></div>\n    </div>\n</div>\n```\n\nLANGUAGE: css\nCODE:\n```\n.subject {\n    font-weight: bold;\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Odoo Module: l10n_mx_edi_stock (Mexico - Electronic Delivery Guide)\nDESCRIPTION: This snippet shows the technical name `l10n_mx_edi_stock` for the optional 'Mexico - Electronic Delivery Guide' Odoo module. This module allows the creation of the 'Carta Porte' (Bill of Lading) as a signed electronic document, required to prove the legality of goods transportation within Mexico.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/mexico.rst#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nl10n_mx_edi_stock\n```\n\n----------------------------------------\n\nTITLE: Field Element in Form View (XML)\nDESCRIPTION: Demonstrates the usage of the 'field' element in a form view to render and edit a single field of the current record.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <field name=\"FIELD_NAME\"/>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Referencing Default Odoo Color Palette Map in SCSS\nDESCRIPTION: Repeats the definition of the `default_palette` SCSS map to emphasize that custom SVG shapes should ideally use colors from this palette for consistency and adaptability within Odoo themes. This ensures custom shapes integrate well with theme color changes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/shapes.rst#2025-04-23_snippet_10\n\nLANGUAGE: scss\nCODE:\n```\ndefault_palette = {\n    '1': '#3AADAA',\n    '2': '#7C6576',\n    '3': '#F6F6F6',\n    '4': '#FFFFFF',\n    '5': '#383E45',\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Reverse Proxy Mode via Odoo Command-line\nDESCRIPTION: Activates support for `X-Forwarded-*` headers (like `X-Forwarded-For`, `X-Forwarded-Proto`, `X-Forwarded-Host`) commonly set by reverse proxies. It uses Werkzeug's proxy support, ignores headers if `X-Forwarded-Host` is missing, takes the IP from the last `X-Forwarded-For` entry, and updates `web.base.url` on admin login based on these headers. This must only be enabled when Odoo is behind a trusted reverse proxy.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_26\n\nLANGUAGE: console\nCODE:\n```\n--proxy-mode\n```\n\n----------------------------------------\n\nTITLE: Defining Random Rewards for Odoo Clicker Game in JavaScript\nDESCRIPTION: This JavaScript snippet defines an array named `rewards` containing example reward objects for an Odoo clicker game. Each reward object includes a description, an `apply` function that modifies the game state (represented by the `clicker` object), and optional `minLevel` and `maxLevel` properties to restrict availability based on the game's progress. This structure allows for easily adding various bonuses to the game.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/master_odoo_web_framework/01_build_clicker_game.rst#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport const rewards = [\n   {\n      description: \"Get 1 click bot\",\n      apply(clicker) {\n            clicker.increment(1);\n      },\n      maxLevel: 3,\n   },\n   {\n      description: \"Get 10 click bot\",\n      apply(clicker) {\n            clicker.increment(10);\n      },\n      minLevel: 3,\n      maxLevel: 4,\n   },\n   {\n      description: \"Increase bot power!\",\n      apply(clicker) {\n            clicker.multipler += 1;\n      },\n      minLevel: 3,\n   },\n];\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Odoo Configuration for Remote PostgreSQL Connection\nDESCRIPTION: Complete Odoo configuration example showing admin password, PostgreSQL connection parameters (host, port, credentials), and database filtering for a production environment.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/deploy.rst#2025-04-23_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[options]\nadmin_passwd = mysupersecretpassword\ndb_host = 192.168.1.2\ndb_port = 5432\ndb_user = odoo\ndb_password = pwd\ndbfilter = ^mycompany.*$\n```\n\n----------------------------------------\n\nTITLE: Push/Pull Rules Documentation Snippet\nDESCRIPTION: Detailed explanation of push and pull rules functionality in RST format, including their triggers and use cases in warehouse operations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/use_routes.rst#2025-04-23_snippet_1\n\nLANGUAGE: RST\nCODE:\n```\nPush rules\n----------\n\nPush rules are used to *supply products into a storage locations* as soon as they arrive at a\nspecific receiving location.\n\n.. note::\n   Push rules can only be triggered if there are no pull rules that have already generated the\n   product transfers.\n```\n\n----------------------------------------\n\nTITLE: Binding Odoo Server Action to Views in XML\nDESCRIPTION: Defines an Odoo server action using XML. This action, named \"Refuse all offers\", targets the 'estate.model_real_estate_property' model and is triggered by Python code. It's bound to the same model and made accessible in 'tree' and 'form' views via the gear icon. The embedded Python code iterates through selected property records and sets the 'x_status' of related 'x_offer_ids' to 'refused'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/importable_modules.rst#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"action_x_estate_property_refuse_all_offers\" model=\"ir.actions.server\">\n    <field name=\"name\">Refuse all offers</field>\n    <field name=\"model_id\" ref=\"estate.model_real_estate_property\"/>\n    <field name=\"state\">code</field>\n    <field name=\"binding_model_id\" ref=\"estate.model_real_estate_property\"/>\n    <field name=\"binding_view_types\">tree,form</field>\n    <field name=\"code\"><![CDATA[\nfor property in records:\n    property.x_offer_ids.write({'x_status': 'refused'})\n    ]]></field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Defining an Integer Field (`integer`) in Odoo\nDESCRIPTION: Defines a field for storing whole numbers (positive, negative, or zero) without decimals. Odoo's technical name is 'integer'. Available widgets include 'Percentage Pie' (read-only circular percentage display), 'Progress Bar' (read-only percentage bar display), and 'Handle' (drag handle for manual record ordering in List view).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/studio/fields.rst#2025-04-23_snippet_2\n\nLANGUAGE: Odoo\nCODE:\n```\ninteger\n```\n\n----------------------------------------\n\nTITLE: Importing Translation File via Odoo Command-line\nDESCRIPTION: Imports translations from a specified CSV or PO file into the database and exits. Requires the '-d' (database) and '-l' (language) options to be set.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n--i18n-import <filename>\n```\n\n----------------------------------------\n\nTITLE: Registering a Client Action Component in JavaScript\nDESCRIPTION: This snippet demonstrates how to create and register a client action component in Odoo's web framework. It involves importing the registry, defining a component class, and adding it to the 'actions' category of the registry with a unique identifier.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\nclass MyClientAction extends Component { ... }\nregistry.category(\"actions\").add(\"my-custom-action\", ClientAction);\n```\n\n----------------------------------------\n\nTITLE: Creating an IR Action Record for Client Action in XML\nDESCRIPTION: This snippet shows how to create a server-side record for a client action. It defines an 'ir.actions.client' record with a name and tag field, where the tag must match the identifier used when registering the client action component.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_44\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"my_client_action\" model=\"ir.actions.client\">\n    <field name=\"name\">Some Name</field>\n    <field name=\"tag\">my-custom-action</field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Using we-button Element in XML\nDESCRIPTION: Demonstrates how to use we-button elements inside we-select or we-button-group to add selectable options with CSS classes. The example shows adding different margin-top classes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_39\n\nLANGUAGE: xml\nCODE:\n```\n<we-button-group string=\"Before\">\n   <we-button data-select-class=\"mt-0\">1</we-button>\n   <we-button data-select-class=\"mt-3\">2</we-button>\n   <we-button data-select-class=\"mt-5\">3</we-button>\n</we-button-group>\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Logger Levels via Odoo Command-line\nDESCRIPTION: Sets the logging level for a specific Odoo logger using the format `LOGGER:LEVEL`. For example, `odoo.models:DEBUG` sets the `odoo.models` logger to `DEBUG` level. Omitting the logger configures the root logger. Omitting the level defaults to `INFO`. This option can be repeated to configure multiple loggers.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_31\n\nLANGUAGE: console\nCODE:\n```\n--log-handler <handler-spec>\n```\n\nLANGUAGE: console\nCODE:\n```\n# Example usage:\n$ odoo-bin --log-handler :DEBUG --log-handler werkzeug:CRITICAL --log-handler odoo.fields:WARNING\n```\n\n----------------------------------------\n\nTITLE: Unit Testing pyUtils with QUnit - JavaScript\nDESCRIPTION: Presents a JavaScript unit test using QUnit to validate the arithmetic evaluation logic of 'pyUtils.py_eval'. The test case module ('py_utils') includes two assertions for sum and modulo operations. Requires QUnit and Odoo's pyUtils library being loaded in the test environment. Inputs are arithmetic string expressions, outputs are JavaScript assertions validating evaluated results.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('py_utils');\n\nQUnit.test('simple arithmetic', function (assert) {\n    assert.expect(2);\n\n    var result = pyUtils.py_eval(\"1 + 2\");\n    assert.strictEqual(result, 3, \"should properly evaluate sum\");\n    result = pyUtils.py_eval(\"42 % 5\");\n    assert.strictEqual(result, 2, \"should properly evaluate modulo operator\");\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Selection Badge Widget in Odoo XML\nDESCRIPTION: Shows the basic usage of the `selection_badge` widget for `selection` or `many2one` fields. This widget displays the available choices as rectangular badges instead of a standard dropdown or radio buttons.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"recommended_activity_type_id\" widget=\"selection_badge\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Request Limit per Worker via Odoo Command-line\nDESCRIPTION: Used in conjunction with '--workers', this option specifies the maximum number of requests a single worker process will handle before it is automatically recycled (stopped and restarted). Defaults to 8196 requests.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_36\n\nLANGUAGE: console\nCODE:\n```\n--limit-request <limit>\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallax Background Effect (XML)\nDESCRIPTION: Outlines the structure for a section element to achieve a parallax scrolling effect, integrating s_parallax_is_fixed, s_parallax_no_overflow_hidden, and a set of specific data attributes. The background image is defined within a span element. Requires images and must be used in Odoo snippets/pages designed for visual movement on scroll.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<section class=\\\"parallax s_parallax_is_fixed s_parallax_no_overflow_hidden\\\" data-scroll-background-ratio=\\\"1\\\">\\n    <span class=\\\"s_parallax_bg oe_img_bg o_bg_img_center\\\" style=\\\"background-image: url('...'); background-position: 50% 75%;\\\"/>\\n    <div class=\\\"container\\\">\\n        <!-- Content -->\\n    </div>\\n</section>\n```\n\n----------------------------------------\n\nTITLE: Excluding Files from Odoo Cloc Count in Manifest (Python)\nDESCRIPTION: Python dictionary snippet illustrating the `cloc_exclude` key within an Odoo module's manifest file (`__manifest__.py`). This key holds a list of file path patterns (using glob syntax like `*.xml` or `**/*`) that should be ignored by the `odoo-bin cloc` tool when calculating lines of code for that specific module. This allows excluding libraries, generated files, or specific data files.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_50\n\nLANGUAGE: python\nCODE:\n```\n\"cloc_exclude\": [\n    \"lib/common.py\", # exclude a single file\n    \"data/*.xml\",    # exclude all XML files in a specific folder\n    \"example/**/*\",  # exclude all files in a folder hierarchy recursively\n    \"**/*.scss\",     # exclude all scss file from the module\n]\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Odoo Module Internationalization - Text\nDESCRIPTION: This code block shows the standard i18n directory layout for managing translation templates and PO files in an Odoo module. The 'idea.pot' file serves as the English template exported from Odoo, while individual PO files like 'fr.po' or 'pt_BR.po' provide translations for respective languages. No code execution is required; it's a structural example for translation management within Odoo modules.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/backend.rst#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n|- idea/ # The module directory\n   |- i18n/ # Translation files\n      | - idea.pot # Translation Template (exported from Odoo)\n      | - fr.po # French translation\n      | - pt_BR.po # Brazilian Portuguese translation\n      | (...)\n```\n\n----------------------------------------\n\nTITLE: Describing Complete Odoo Addon Directory Tree - plaintext - text\nDESCRIPTION: This comprehensive directory tree represents a fully structured Odoo addon, encapsulating all key directories and files for models, controllers, reports, security, static resources, views, and wizards. It serves as a master template for new module development, ensuring adherence to Odoo community standards.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\naddons/plant_nursery/\n|-- __init__.py\n|-- __manifest__.py\n|-- controllers/\n|   |-- __init__.py\n|   |-- plant_nursery.py\n|   |-- portal.py\n|-- data/\n|   |-- plant_nursery_data.xml\n|   |-- plant_nursery_demo.xml\n|   |-- mail_data.xml\n|-- models/\n|   |-- __init__.py\n|   |-- plant_nursery.py\n|   |-- plant_order.py\n|   |-- res_partner.py\n|-- report/\n|   |-- __init__.py\n|   |-- plant_order_report.py\n|   |-- plant_order_report_views.xml\n|   |-- plant_order_reports.xml (report actions, paperformat, ...)\n|   |-- plant_order_templates.xml (xml report templates)\n|-- security/\n|   |-- ir.model.access.csv\n|   |-- plant_nursery_groups.xml\n|   |-- plant_nursery_security.xml\n|   |-- plant_order_security.xml\n|-- static/\n|   |-- img/\n|   |   |-- my_little_kitten.png\n|   |   |-- troll.jpg\n|   |-- lib/\n|   |   |-- external_lib/\n|   |-- src/\n|   |   |-- js/\n|   |   |   |-- widget_a.js\n|   |   |   |-- widget_b.js\n|   |   |-- scss/\n|   |   |   |-- widget_a.scss\n|   |   |   |-- widget_b.scss\n|   |   |-- xml/\n|   |   |   |-- widget_a.xml\n|   |   |   |-- widget_a.xml\n|-- views/\n|   |-- plant_nursery_menus.xml\n|   |-- plant_nursery_views.xml\n|   |-- plant_nursery_templates.xml\n|   |-- plant_order_views.xml\n|   |-- plant_order_templates.xml\n|   |-- res_partner_views.xml\n|-- wizard/\n|   |--make_plant_order.py\n|   |--make_plant_order_views.xml\n```\n\n----------------------------------------\n\nTITLE: Enhancing Map Widget with Geolocation in JavaScript\nDESCRIPTION: This extended JavaScript code adds geolocation functionality to the custom map widget. It includes a button to get the user's current location and updates the map accordingly.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.WidgetCoordinates = instance.web.form.FormWidget.extend({\n    events: {\n        'click button': function () {\n            navigator.geolocation.getCurrentPosition(\n                this.proxy('received_position'));\n        }\n    },\n    start: function() {\n        var sup = this._super();\n        this.field_manager.on(\"field_changed:provider_latitude\", this, this.display_map);\n        this.field_manager.on(\"field_changed:provider_longitude\", this, this.display_map);\n        this.on(\"change:effective_readonly\", this, this.display_map);\n        this.display_map();\n        return sup;\n    },\n    display_map: function() {\n        this.$el.html(QWeb.render(\"WidgetCoordinates\", {\n            \"latitude\": this.field_manager.get_field_value(\"provider_latitude\") || 0,\n            \"longitude\": this.field_manager.get_field_value(\"provider_longitude\") || 0,\n        }));\n        this.$(\"button\").toggle(! this.get(\"effective_readonly\"));\n    },\n    received_position: function(obj) {\n        this.field_manager.set_values({\n            \"provider_latitude\": obj.coords.latitude,\n            \"provider_longitude\": obj.coords.longitude,\n        });\n    },\n});\n\ninstance.web.form.custom_widgets.add('coordinates', 'instance.oepetstore.WidgetCoordinates');\n```\n\n----------------------------------------\n\nTITLE: Registering Frontend Assets in Odoo Manifest\nDESCRIPTION: Python code for the module's manifest file that registers SCSS assets for the frontend. This configuration adds custom styling files to the assets_frontend bundle.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n'assets': {\n   'web.assets_frontend': [\n      'website_airproof/static/src/scss/theme.scss',\n   ],\n},\n```\n\n----------------------------------------\n\nTITLE: Checking Odoo Server Version via XML-RPC - PHP (Ripcord)\nDESCRIPTION: Uses the Ripcord library in PHP to check the Odoo server's version information from the /xmlrpc/2/common endpoint. This preliminary step ensures connectivity and retrieves version data as an array or object.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$common = ripcord::client(\"$url/xmlrpc/2/common\");\n$common->version();\n```\n\n----------------------------------------\n\nTITLE: Updating Modules on Specified Odoo Databases\nDESCRIPTION: This command restricts access to `11firstdatabase` and `11seconddatabase` using `--database`. It also triggers an update (`-u`) of the `base` module. Odoo typically performs the update operation on the first database listed (`11firstdatabase` in this case). If `11seconddatabase` does not exist, Odoo might create it and install the `base` module.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ odoo-bin --database 11firstdatabase,11seconddatabase -u base\n```\n\n----------------------------------------\n\nTITLE: Gallery View Definition in XML\nDESCRIPTION: Example XML definition of a gallery view for contacts with advanced tooltip template implementation. Includes image field, tooltip field and custom field definitions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/master_odoo_web_framework/02_create_gallery_view.rst#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"contacts_gallery_view\" model=\"ir.ui.view\">\n   <field name=\"name\">awesome_gallery.orders.gallery</field>\n   <field name=\"model\">res.partner</field>\n   <field name=\"arch\" type=\"xml\">\n      <gallery image_field=\"image_1920\" tooltip_field=\"name\">\n         <field name=\"email\"/>\n         <field name=\"name\"/>\n         <tooltip-template>\n            <p class=\"m-0\">name: <field name=\"name\"/></p>\n            <p class=\"m-0\">e-mail: <field name=\"email\"/></p>\n         </tooltip-template>\n      </gallery>\n   </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Declaring Contextual CSS Variables for Components - SCSS - SCSS\nDESCRIPTION: Demonstrates the BEM-based naming of CSS custom properties within component selectors, enabling component-local theming or contextual overrides. No code dependencies, but assumes integration with a framework that supports CSS custom properties. The variables are set in different selectors to provide context-specific styles. Inputs: selectors and desired variable values; outputs: CSS where these variables are used. Variables are intended for DOM usage and contextual design adaptation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_24\n\nLANGUAGE: scss\nCODE:\n```\n.o_kanban_record {\n   --KanbanRecord-width: value;\n   --KanbanRecord__picture-border: value;\n   --KanbanRecord__picture-border--active: value;\n}\n\n// Adapt the component when rendered in another context.\n.o_form_view {\n   --KanbanRecord-width: another-value;\n   --KanbanRecord__picture-border: another-value;\n   --KanbanRecord__picture-border--active: another-value;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Graph View in Odoo XML\nDESCRIPTION: Example of a graph view that displays total idea scores by inventor. The view groups data by inventor_id and uses the score field as the measure to be aggregated.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/backend.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<graph string=\"Total idea score by Inventor\">\n    <field name=\"inventor_id\"/>\n    <field name=\"score\" type=\"measure\"/>\n</graph>\n```\n\n----------------------------------------\n\nTITLE: Python Notification Display\nDESCRIPTION: Server-side code to trigger client notifications using the display_notification client action.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef show_notification(self):\n    return {\n        'type': 'ir.actions.client',\n        'tag': 'display_notification',\n        'params': {\n            'title': _('Success'),\n            'message': _('Your signature request has been sent.'),\n            'sticky': False,\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Headers in an Odoo List View\nDESCRIPTION: Shows how to define group headers when grouping records on Many2one fields. The groupby element can contain buttons and fields for additional functionality.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_44\n\nLANGUAGE: xml\nCODE:\n```\n<list>\n    ...\n    <groupby name=\"FIELD_NAME\">\n        <BUTTONS/>\n        <FIELDS/>\n    </groupby>\n</list>\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Widget with Preview Option in Odoo XML View - XML\nDESCRIPTION: This snippet shows how to define a binary field named 'image' with the 'image' widget, providing an 'options' dictionary specifying 'preview_image': 'image_128'. This tells the widget to use the 'image_128' field as the preview image source when only a bin_size is present. Used in Odoo XML view files, it requires binary fields and optionally a small image field for previews.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\\\"image\\\" widget=\\\"image\\\" options=\\\"{'preview_image': 'image_128'}\\\" />\n```\n\n----------------------------------------\n\nTITLE: Adding a Remote for Personal Fork (Git, Console Commands) - Console\nDESCRIPTION: This snippet shows how to add a Git remote named 'dev' pointing to the user's personal fork of the Odoo documentation repository. The URL must be updated with the actual GitHub account handle. This allows contributors to push changes to their own fork instead of the main upstream repository, a standard practice in collaborative open source workflows. The command is intended for those who do not work at Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation.rst#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ git remote add dev git@github.com:<your_github_account>/documentation.git\n\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Data Structure for Mobile API in JavaScript\nDESCRIPTION: Defines a JavaScript object containing various fields (like name, phone, email, address, image) representing contact details. This structure is used as input for the `addContact` mobile API method. The 'image' field expects Base64 encoded image data.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/mobile.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar contact = {\n    'name': 'Michel Fletcher',\n    'mobile': '9999999999',\n    'phone': '7954856587',\n    'fax': '765898745',\n    'email': 'michel.fletcher@agrolait.example.com',\n    'website': 'http://www.agrolait.com',\n    'street': '69 rue de Namur',\n    'street2': false,\n    'country_id': [21, 'Belgium'],\n    'state_id': false,\n    'city': 'Wavre',\n    'zip': '1300',\n    'parent_id': [8, 'Agrolait'],\n    'function': 'Analyst',\n    'image': '<<BASE 64 Image Data>>'\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Language Translations via Odoo Command-line\nDESCRIPTION: Specifies a comma-separated list of language codes (e.g., 'en_US,fr_FR') for which translations should be loaded into the database. Used for internationalisation (i18n).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n--load-language <languages>\n```\n\n----------------------------------------\n\nTITLE: Defining IrAsset Class in Python\nDESCRIPTION: This class represents the ir.asset model in Odoo, used for dynamic asset declaration in the database. It includes fields for name, bundle, directive, path, target, active status, and sequence.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/assets.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: odoo.addons.base.models.ir_asset.IrAsset\n\n.. rst-class:: o-definition-list\n\n`name`\n    Name of the asset record (for identification purpose).\n\n`bundle`\n    Bundle in which the asset will be applied.\n\n`directive` (default= `append`)\n    This field determines how the `path` (and `target` if needed) will be interpreted.\n    Here is the list of available directives along with their required arguments:\n\n    - **append**: `path`\n    - **prepend**: `path`\n    - **before**: `target`, `path`\n    - **after**: `target`, `path`\n    - **include**: `path` (interpreted as a **bundle name**)\n    - **remove**: `path` (interpreted as a **target asset** to remove)\n    - **replace**: `target`, `path`\n\n`path`\n    A string defining one of the following:\n\n    - a **relative path** to an asset file in the addons file system;\n    - a **glob pattern** to a set of asset files in the addons file system;\n    - a **URL** to an attachment or external asset file;\n    - a **bundle name**, when using the `include` directive.\n\n`target`\n    Target file to specify a position in the bundle. Can only be used with the\n    directives `replace`, `before` and `after`.\n\n`active` (default= `True`)\n    Whether the record is active\n\n`sequence` (default= `16`)\n    Loading order of the asset records (ascending). A sequence lower than 16 means\n    that the asset will be processed *before* the ones declared in the manifest.\n```\n\n----------------------------------------\n\nTITLE: Combining Database Filtering and Specific Database Operations in Odoo\nDESCRIPTION: This command demonstrates combining database visibility filtering with targeted operations. The `--db-filter ^11.*$` option restricts the *list* of visible databases to those starting with \"11\" (e.g., in the database selector). However, the `-u base` operation, targeted by `--database 11firstdatabase,11seconddatabase`, will attempt to update the `base` module on `11firstdatabase`. This shows how `--db-filter` affects listing, while `--database` dictates which databases are used for specific operations like `-u` or `-i`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ odoo-bin --db-filter ^11.*$ --database 11firstdatabase,11seconddatabase -u base\n```\n\n----------------------------------------\n\nTITLE: Applying Padding with Odoo Classes (XML)\nDESCRIPTION: Applies top (pt80) and bottom (pb80) padding via class attributes, using Odoo-specific class naming. These control the spacing handlers in the Website Builder UI; padding amounts are multiples of 8 up to 256. Intended for any snippet section or column to improve visual spacing.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\nclass=\\\"pt80 pb80\\\"\n```\n\n----------------------------------------\n\nTITLE: Defining Invoice Line Structure in JavaScript\nDESCRIPTION: Specifies the structure of invoice lines, including description, quantity, subtotal, total, taxes, and unit price. Each line is represented as an object within an array.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/extract_api.rst#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"invoice_lines\": [\n    {\n        \"description\": string,\n        \"quantity\": float,\n        \"subtotal\": float,\n        \"total\": float,\n        \"taxes\": list[float],\n        \"total\": float,\n        \"unit_price\": float\n    },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Identifying Odoo Module: l10n_mx_reports (Odoo Mexican Localization Reports)\nDESCRIPTION: This snippet shows the technical name `l10n_mx_reports` for the 'Odoo Mexican Localization Reports' Odoo module. This module adapts standard Odoo accounting reports (Chart of Accounts, Trial Balance, DIOT) to meet Mexico's electronic accounting requirements.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/mexico.rst#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nl10n_mx_reports\n```\n\n----------------------------------------\n\nTITLE: Declaring Settings Block using block Element in Odoo Settings XML\nDESCRIPTION: The `<block>` element is used within an `<app>` element in Odoo Settings views to group related settings. It accepts optional `title` and `help` attributes, which are displayed in the UI and are searchable. It acts as a container for multiple `<setting>` elements.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <app string=\"NAME\" name=\"TECHNICAL_NAME\">\n        ...\n        <block title=\"TITLE\">\n            ...\n        </block>\n        ...\n    </app>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Field Element with Context (XML)\nDESCRIPTION: Demonstrates the usage of the 'context' attribute in a field element to set the context for fetching values and creating or searching records.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"fname\" context=\"{\n    'TYPE_view_ref': 'ADDON.MODEL_view_TYPE',\n    'group_by': 'FIELD_NAME',\n    'default_FIELD_NAME': ANY,\n    'search_default_FIELD_NAME': True,\n    'OTHER_BUSINESS_KEY': ANY,\n  }\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch\nDESCRIPTION: Command to create a new Git branch from the master branch for development purposes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b feature-1 master\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime Field Options in XML\nDESCRIPTION: Demonstrates various options for a datetime field, including setting the rounding increment for minutes and hiding seconds or the entire time part in the UI.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"datetimefield\" widget=\"datetime\" options=\"{'rounding': 10, 'show_seconds': false, 'show_time': false}\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Module Version in Manifest for Production Updates\nDESCRIPTION: Shows how to trigger automatic module updates in production by increasing the version number in the module's manifest file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/branches.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n__manifest__.py\n```\n\n----------------------------------------\n\nTITLE: Creating a CRM Lead via Command in Odoo Live Chat\nDESCRIPTION: Creates a new lead in the Odoo CRM application using the current conversation details. The operator types `/lead`, presses Enter, then types a title for the lead and presses Enter again. This command requires the Odoo CRM app to be installed. The conversation transcript is added to the lead's internal notes, and the source is set to 'Livechat'. The link to the newly created lead is shown only to the operator.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/websites/livechat/responses.rst#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n/lead\n```\n\n----------------------------------------\n\nTITLE: Inserting a Component Before Kanban Renderer using XPath - Odoo QWeb - XML\nDESCRIPTION: This XML snippet demonstrates how to use an XPath expression inside an Odoo QWeb template to insert a new div or component before the main Kanban renderer. This approach is commonly used to extend pre-existing view templates in Odoo, such as placing a custom sidebar beside a list or board. The 'expr' attribute targets the component by name, and the 'position' attribute specifies where to insert the content; this snippet provides the scaffold for integrating the CustomerList component.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/master_odoo_web_framework/03_customize_kanban_view.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xpath expr=\\\"//t[@t-component='props.Renderer']\\\" position=\\\"before\\\">\\n   ...\\n</xpath>\n```\n\n----------------------------------------\n\nTITLE: Showing Toast Notification using Odoo Mobile API in JavaScript\nDESCRIPTION: Displays a brief, non-intrusive message (toast) on the mobile device's screen. This function is accessed via the mobile API object (e.g., obtained from `web_mobile.rpc`). It requires an object argument containing the 'message' key with the text to display. Returns a jQuery Deferred object.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/mobile.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmobile.methods.showToast({'message': 'Message sent'});\n```\n\n----------------------------------------\n\nTITLE: Custom BooleanField Template with Conditional Display (XML)\nDESCRIPTION: This XML snippet defines the template for the custom 'LateOrderBooleanField', inheriting from 'web.BooleanField'. It injects a new span element with the 'text-danger' CSS class to display 'Late!' in red whenever the checkbox is checked. Dependencies include proper template registration in Odoo, correct XPath to target the CheckBox element, and matching the template name with the component. The template expects a 'props.value' context variable indicating the checkbox state.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_field.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<templates xml:space=\\\"preserve\\\">\n    <t t-name=\\\"my_module.LateOrderBooleanField\\\" t-inherit=\\\"web.BooleanField\\\"> \n        <xpath expr=\\\"//CheckBox\\\" position=\\\"after\\\"> \n            <span t-if=\\\"props.value\\\" class=\\\"text-danger\\\"> Late! </span>\n        </xpath> \n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Setting Gevent/Websocket Port via Odoo Command-line\nDESCRIPTION: Specifies the TCP port used for websocket connections when running Odoo in multiprocessing or gevent mode. Defaults to 8072. This option is not used in the default threaded mode.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_25\n\nLANGUAGE: console\nCODE:\n```\n--gevent-port <port>\n```\n\n----------------------------------------\n\nTITLE: Declaring Frontend Asset Overrides in Odoo Manifest - Python\nDESCRIPTION: This Python dictionary snippet is placed in the Odoo module's `__manifest__.py` file and tells Odoo to prepend a custom SCSS file for Bootstrap variable overrides to the frontend helpers asset bundle. This enables safe extension of Bootstrap’s variables without changing core files. Dependencies include the presence of the target SCSS file and a properly structured Odoo module.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n'assets': {\n   'web._assets_frontend_helpers': [\n      ('prepend', 'website_airproof/static/src/scss/bootstrap_overridden.scss'),\n   ],\n},\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Interface for Device Detection - Odoo Python\nDESCRIPTION: Demonstrates how to create a new interface by subclassing Interface from odoo.addons.hw_drivers.interface. The get_devices method returns a dictionary of discovered device data, feeding device details to the Odoo driver system. Dependencies: odoo.addons.hw_drivers.interface. Key parameters include connection_type (declares the interface type). Inputs: none; Outputs: dict of devices.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/connect_device.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo.addons.hw_drivers.interface import Interface\\n\\nclass InterfaceName(Interface):\\n    connection_type = 'ConnectionType'\\n\\n    def get_devices(self):\\n        return {\\n            'device_identifier_1': {...},\\n            ...\\n        }\n```\n\n----------------------------------------\n\nTITLE: Defining Default Odoo Color Palette Map in SCSS\nDESCRIPTION: Shows the SCSS map `default_palette` defining the standard five colors used by Odoo shapes. This allows shapes to adapt automatically when the theme's palette changes, as default shapes reference this map.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/shapes.rst#2025-04-23_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\ndefault_palette = {\n    '1': '#3AADAA',\n    '2': '#7C6576',\n    '3': '#F6F6F6',\n    '4': '#FFFFFF',\n    '5': '#383E45',\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fail2ban Filter for Odoo Login Failures - ini\nDESCRIPTION: This fail2ban filter checks logs for lines indicating failed Odoo login attempts. It uses a regular expression to match log messages that note login failures by extracting the offending IP address as '<HOST>'. The filter does not ignore any lines (empty 'ignoreregex') and requires fail2ban to monitor the configured Odoo log file. This must be saved in a 'filter.d' file and initiated by a corresponding jail configuration.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/deploy.rst#2025-04-23_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n[Definition]\nfailregex = ^ \\d+ INFO \\S+ \\S+ Login failed for db:\\S+ login:\\S+ from <HOST>\nignoreregex =\n```\n\n----------------------------------------\n\nTITLE: Configuring Data and Demo Files in Odoo Manifest (Python)\nDESCRIPTION: This Python snippet shows the 'data' and 'demo' sections of the module manifest ('__manifest__.py'). It lists the XML and CSV files that should always be loaded ('data' section) and specifies the 'demo.xml' file which should only be loaded when Odoo is started with demonstration data enabled.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n    'security/ir.model.access.csv',\n    'templates.xml',\n    'views.xml',\n    'data.xml',\n],\n# only loaded in demonstration mode\n'demo': [\n```\n\n----------------------------------------\n\nTITLE: Defining Product Category for Courses in Odoo (XML)\nDESCRIPTION: This XML snippet, intended for a data file (e.g., 'academy/data.xml'), defines a new product category specifically for courses. It creates a 'product.public.category' record named 'Courses' and sets its parent category to an existing website sale category ('website_sale.categ_others').\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n    <record model=\"product.public.category\" id=\"category_courses\">\n        <field name=\"name\">Courses</field>\n        <field name=\"parent_id\" ref=\"website_sale.categ_others\"/>\n    </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Defining the QWeb2.Engine Class in JavaScript\nDESCRIPTION: Describes the QWeb2.Engine class, the core renderer for Odoo's QWeb templating system. It handles loading, parsing, compiling, and rendering templates. An instance is available globally in Odoo Web as `core.qweb`, and it also serves as a namespace for templates.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nQWeb2.Engine\n```\n\n----------------------------------------\n\nTITLE: Onboarding Tour Manifest Configuration\nDESCRIPTION: Updates the __manifest__.py file to include both the tour JavaScript file in web.assets_backend and the tour XML data file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n'data': [\n   'data/your_tour.xml',\n],\n'assets': {\n    'web.assets_backend': [\n        'your_module/static/src/js/tours/your_tour.js',\n    ],\n},\n```\n\n----------------------------------------\n\nTITLE: Creating a Kanban Card Layout with Footer\nDESCRIPTION: Demonstrates how to create a kanban card layout with a footer section that sticks to the bottom of the card and displays fields in a row.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_74\n\nLANGUAGE: xml\nCODE:\n```\n<kanban>\n   <templates>\n      <t t-name=\"card\">\n         <field class=\"fw-bold fs-5\" name=\"display_name\"/>\n         <field class=\"text-muted\" name=\"parent_id\"/>\n         <field name=\"tag_ids\" widget=\"many2many_tags\"/>\n         <footer>\n            <field name=\"priority\" widget=\"priority\"/> <!-- bottom left corner -->\n            <field class=\"ms-auto\" name=\"activity_ids\" widget=\"kanban_activity\"/> <!-- bottom right corner -->\n         </footer>\n      </t>\n   </templates>\n</kanban>\n```\n\n----------------------------------------\n\nTITLE: Odoo Email Template for Sending Customer Rating Requests (XML)\nDESCRIPTION: This XML snippet defines an Odoo email template for requesting customer ratings. It sets up the sender, subject, model reference, recipient, and auto-deletion, and provides a basic HTML body containing links for users to rate their experience. Dependencies include the recipient's partner ID, an implemented 'rating_get_access_token()', and integration into Odoo's mail.template system.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/mixins.rst#2025-04-23_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\\\"rating_my_model_email_template\\\" model=\\\"mail.template\\\">\\n            <field name=\\\"name\\\">My Model: Rating Request</field>\\n            <field name=\\\"email_from\\\">${object.rating_get_rated_partner_id().email or '' | safe}</field>\\n            <field name=\\\"subject\\\">Service Rating Request</field>\\n            <field name=\\\"model_id\\\" ref=\\\"my_module.model_my_model\\\"/>\\n            <field name=\\\"partner_to\\\" >${object.rating_get_partner_id().id}</field>\\n            <field name=\\\"auto_delete\\\" eval=\\\"True\\\"/>\\n            <field name=\\\"body_html\\\"><![CDATA[\\n% set access_token = object.rating_get_access_token()\\n<p>Hi,</p>\\n<p>How satsified are you?</p>\\n<ul>\\n    <li><a href=\\\"/rate/${access_token}/5\\\">Satisfied</a></li>\\n    <li><a href=\\\"/rate/${access_token}/3\\\">Okay</a></li>\\n    <li><a href=\\\"/rate/${access_token}/1\\\">Dissatisfied</a></li>\\n</ul>\\n]]></field>\\n        </record>\n```\n\n----------------------------------------\n\nTITLE: Enabling X-Sendfile/X-Accel for Attachment Serving via Odoo Command-line\nDESCRIPTION: Delegates the serving of attachment files (binary fields) to the front-end web server (like Apache or Nginx) by setting `X-Sendfile` or `X-Accel-*` headers. This requires specific configuration on the web server side.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_27\n\nLANGUAGE: console\nCODE:\n```\n--x-sendfile\n```\n\n----------------------------------------\n\nTITLE: Installing ipdb Python Debugger using pip\nDESCRIPTION: Installs the `ipdb` Python package using the `pip` command. `ipdb` is an interactive debugger based on `pdb` but utilizes `IPython` for features like tab completion and syntax highlighting, enhancing the debugging experience.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/setup_guide.rst#2025-04-23_snippet_7\n\nLANGUAGE: console\nCODE:\n```\npip install ipdb\n```\n\n----------------------------------------\n\nTITLE: Defining a Python Code Block using RST .. code-block:: Directive\nDESCRIPTION: This snippet shows the reStructuredText syntax for embedding a code block with syntax highlighting. It uses the `.. code-block::` directive followed by the language identifier (`python` in this case) to format the code correctly.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n.. code-block:: text\n\n   .. code-block:: python\n\n      def main():\n          print(\"Hello world!\")\n```\n\n----------------------------------------\n\nTITLE: Adding Components to a Bill of Materials in Odoo\nDESCRIPTION: Explains the procedure for adding component materials to a Bill of Materials (BoM) form in Odoo. Users click 'Add a line' in the 'Components' tab, select the component product, and specify the required quantity.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/basic_setup/mo_costs.rst#2025-04-23_snippet_9\n\nLANGUAGE: Odoo Configuration\nCODE:\n```\nIn the :guilabel:`Components` tab of the |BoM| form, add each component by clicking :guilabel:`Add a\nline`, selecting the component from the drop-down menu in the :guilabel:`Component` column, and\nentering the quantity in the :guilabel:`Quantity` column.\n```\n\n----------------------------------------\n\nTITLE: Installing RTLcss on Linux\nDESCRIPTION: Command to install RTLcss globally using npm on Linux for right-to-left language support\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/source.rst#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo npm install -g rtlcss\n```\n\n----------------------------------------\n\nTITLE: Illustrating Odoo's SCSS Compilation Order\nDESCRIPTION: This code block demonstrates the conceptual compilation order of CSS and SCSS variables in Odoo, showing the hierarchy of variable definitions across different asset bundles.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/scss_inheritance.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n↓ [Compilation starts]\n⏐\n↓ web.dark_mode_variables\n⏐   ├─ Primary Variables\n⏐   └─ Components Variables\n⏐\n↓ web._assets_primary_variables\n⏐   ├─ Primary Variables (enterprise)\n⏐   ├─ Components Variables (enterprise)\n⏐   ├─ Primary Variables (community)\n⏐   └─ Components Variables (community)\n⏐\n↓ web._assets_bootstrap\n⏐\n↓ web.assets_backend\n⏐   ├─ ...\n⏐   ├─ CSS variables definition\n⏐   └─ CSS variables contextual adaptations\n⏐\n● [Visual result on screen]\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Odoo Module with PDF Reports (Bash)\nDESCRIPTION: Illustrates the recommended file and directory structure for an Odoo module ('estate') that includes PDF reports. It highlights the placement of report-related files, such as QWeb templates (`estate_property_templates.xml`) and report action definitions (`estate_property_reports.xml`), within a dedicated `report` subdirectory alongside standard Odoo module components like models, security, and views.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/pdf_reports.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nestate\n├── models\n│   ├── *.py\n│   └── __init__.py\n├── report\n│   ├── estate_property_templates.xml\n│   └── estate_property_reports.xml\n├── security\n│   └── ir.model.access.csv\n├── views\n│   └── *.xml\n├── __init__.py\n└── __manifest__.py\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Module Deployment\nDESCRIPTION: Series of Git commands for staging, committing, and pushing module changes to Odoo.sh.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/src/user/\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/src/odoo-addons/\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit add my_module\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"[ADD] my_module: add the start_datetime field to the model my_module.my_module\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push https HEAD:feature-1\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Setting Meta Title on Odoo Page - XML\nDESCRIPTION: This snippet demonstrates setting a meta title for Odoo website pages using the QWeb 't-set' directive. The meta title is plain text content for translation, enhancing SEO and usability. Should be inserted within a page template to define the browser tab title or search appearance.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\\\"additional_title\\\">My Page Title</t>\n```\n\n----------------------------------------\n\nTITLE: Showing Success Message After Odoo Form Submission - XML\nDESCRIPTION: Here, data-success-mode is set to 'message', indicating that Odoo will display a message on the same page after the form is submitted. This approach doesn't navigate away, improving user feedback inline. Key dependency: the frontend must handle showing and hiding the message appropriately.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/forms.rst#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<form data-success-mode=\"message\">\n```\n\n----------------------------------------\n\nTITLE: Statinfo Widget with Label Field Option in Odoo XML View - XML\nDESCRIPTION: This snippet defines a stat button with an embedded integer or float field 'payslip_count' rendered by the 'statinfo' widget. The 'options' provide a 'label_field' dictating that the value of 'label_tasks' is shown as the text. Used within Odoo buttons for dashboards or summaries to display labeled counters. This setup operates inside a <button> and requires both fields to be present.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<button\\n    name=\\\"%(act_payslip_lines)d\\\"\\n    icon=\\\"fa-money\\\"\\n    type=\\\"action\\\"\\n>\\n    <field\\n        name=\\\"payslip_count\\\"\\n        widget=\\\"statinfo\\\"\\n        string=\\\"Payslip\\\"\\n        options=\\\"{'label_field': 'label_tasks'}\\\"\\n    />\\n</button>\n```\n\n----------------------------------------\n\nTITLE: Calling Custom Method in Snippet Options XML\nDESCRIPTION: This snippet demonstrates how to call a custom JavaScript method on a snippet option in the XML template.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_49\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"s_airproof_snippet_options\" inherit_id=\"website.snippet_options\" name=\"Airproof - Snippets Options\">\n   <xpath expr=\".\" position=\"inside\">\n      <div data-selector=\".s_airproof_snippet\" data-js=\"airproofSnippet\">\n         <we-checkbox data-custom-method-name=\"\" />\n      </div>\n   </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding State Field with Selection Values\nDESCRIPTION: Implements a state field with five possible values, required status, no copying, and default value set to 'New'. Used for tracking property status.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/05_firstui.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nstate = fields.Selection([\n    ('new', 'New'),\n    ('offer_received', 'Offer Received'),\n    ('offer_accepted', 'Offer Accepted'),\n    ('sold', 'Sold'),\n    ('cancelled', 'Cancelled')\n], required=True, copy=False, default='new')\n```\n\n----------------------------------------\n\nTITLE: Using we-input Element in XML with Optional Attributes\nDESCRIPTION: Demonstrates creating a text field option with we-input, including optional attributes for unit display, unit conversion, and step increment value.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_45\n\nLANGUAGE: xml\nCODE:\n```\n<we-input\n   string=\"Speed\"\n   data-unit=\"s\"\n   data-save-unit=\"ms\"\n   data-step=\"0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Using Odoo Domain Computation Engine for Report Expressions\nDESCRIPTION: This snippet shows the syntax for Odoo Domain computation engine in accounting reports. It supports operations like sum, sum_if_pos, sum_if_neg, and count_rows to aggregate move line data based on domain filters.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/reporting/customize.rst#2025-04-23_snippet_0\n\nLANGUAGE: odoo\nCODE:\n```\nsum\n   The result is the sum of all the balances of the matched move lines.\n\nsum_if_pos\n   The result is the sum of all the balances of the matched move lines if this amount is positive.\n   Otherwise, it is `0`.\n\nsum_if_neg\n   The result is the sum of all the balances of the matched move lines if this amount is negative.\n   Otherwise, it is `0`.\n\ncount_rows\n   The result is the number of sub-lines of this expression. If the parent line has a group-by\n   value, this will correspond to the number of distinct grouping keys in the matched move lines.\n   Otherwise, it will be the number of matched move lines.\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Shape Option to Odoo Website Builder UI in XML\nDESCRIPTION: Odoo XML template modification (`options.xml`) that inherits from `website.snippet_options_background_options`. It uses an XPath expression to insert a new `we-select-page` section with a `we-button` into the Website Builder's shape selection menu, making the custom 'illustration/hexagons/01' shape selectable.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/shapes.rst#2025-04-23_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<!-- /website_airproof/views/snippets/options.xml -->\n\n<template id=\"snippet_options_background_options\" inherit_id=\"website.snippet_options_background_options\" name=\"Shapes\">\n    <xpath expr=\"//*[hasclass('o_we_shape_menu')]/*[last()]\" position=\"after\">\n        <we-select-page string=\"Theme\">\n            <we-button data-shape=\"illustration/hexagons/01\" data-select-label=\"Hexagon 01\"/>\n        </we-select-page>\n    </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding a Default Odoo Website Form - XML\nDESCRIPTION: This XML snippet shows the standard format for integrating a web form in an Odoo page. The form includes essential attributes like action, method, enctype, and multiple data-* attributes for controlling validation, pre-fill, redirection, and model binding. Key parameters include data-model_name (sets the backend model), data-success-mode (defines the completion behavior), and data-success-page (target page for redirection). Required dependencies include the Odoo Website Builder and, in some cases, backend models for successful form submission.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/forms.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<form\n   action=\"/website/form/\" method=\"post\"\n   enctype=\"multipart/form-data\"\n   class=\"o_mark_required\"\n   data-mark=\"*\" data-pre-fill=\"true\"\n   data-success-mode=\"redirect\"\n   data-success-page=\"/contactus-thank-you\"\n   data-model_name=\"mail.mail\">\n     <div class=\"s_website_form_rows row s_col_no_bgcolor\">\n          <div class=\"form-group s_website_form_field col-12 s_website_form_dnone\" data-name=\"Field\">\n               <!-- Form fields -->\n           </div>\n     </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Adding Navbar Toggler Component to Header\nDESCRIPTION: QWeb code to add a navbar toggler component to a custom header for mobile responsiveness.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n<t t-call=\"website.navbar_toggler\">\n   <t t-set=\"_toggler_class\" t-valuef=\"...\"/>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Defining Purchase Liquidations Journal Name Format\nDESCRIPTION: Specifies the required format for naming a purchase liquidation journal in Odoo for Ecuadorian localization. This format includes the emission entity, emission point, and document type.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/ecuador.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[Emission Entity]-[Emission Point] [Document Type]\n```\n\nLANGUAGE: text\nCODE:\n```\n001-001 Purchase Liquidations\n```\n\n----------------------------------------\n\nTITLE: Defining User Group Access for XML Field in Odoo\nDESCRIPTION: This XML snippet demonstrates how to use the 'groups' attribute to control field visibility based on user groups. It shows how to include and exclude specific groups using comma-separated values and the negative operator.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures/generic_attribute_groups.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"FIELD_NAME\" groups=\"base.group_no_one,!base.group_multi_company\"/>\n```\n\n----------------------------------------\n\nTITLE: Color Field Styling\nDESCRIPTION: CSS styling for the color field's read-only display mode.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_49\n\nLANGUAGE: css\nCODE:\n```\n.oe_field_color_content {\n    height: 20px;\n    width: 50px;\n    border: 1px solid black;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jordan Payroll Modules in RST\nDESCRIPTION: This RST code snippet provides a table listing the modules required for the Jordan Payroll localization, including their technical names and descriptions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll/payroll_localizations/jordan.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n\n   * - Name\n     - Technical name\n     - Description\n   * - :guilabel:`Jordan - Payroll`\n     - `l10n_jo_hr_payroll`\n     - Payroll module supporting basic calculation, tax income brackets, and national contribution\n       tax and social security\n   * - :guilabel:`Jordan - Payroll with Accounting`\n     - `l10n_jo_hr_payroll_account`\n     - Bridge module between **Payroll** and **Accounting**\n```\n\n----------------------------------------\n\nTITLE: Filtering Odoo Databases by Name using Regex\nDESCRIPTION: This command demonstrates running `odoo-bin` with the `--db-filter` option. It uses the regular expression `^11.*$` to filter the list of available databases shown in the Odoo database manager or login screen, restricting visibility to only those databases whose names start with \"11\".\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ odoo-bin --db-filter ^11.*$\n```\n\n----------------------------------------\n\nTITLE: Tour Step for Product Selection\nDESCRIPTION: Example of a tour step that triggers clicking on an \"Add\" button for a specific product identified by its name.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    trigger: '.js_product:has(strong:contains(Chair floor protection)) .js_add',\n    run: \"click\",\n},\n```\n\n----------------------------------------\n\nTITLE: Rotating Elements in ZPL Label\nDESCRIPTION: Shows how to rotate barcode elements by changing the BC command parameter from BCN (normal) to BCB (270 degrees rotation).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/zebra.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n^XA^CI28\n...\n^BCN,100,Y,N,N\n...\n^XZ\n```\n\nLANGUAGE: xml\nCODE:\n```\n^XA^CI28\n...\n^BCB,100,Y,N,N\n...\n^XZ\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Color Combination Mappings - SCSS\nDESCRIPTION: This advanced SCSS snippet demonstrates how to override specific color combination mappings within a theme palette named 'airproof'. By specifying 'o-cc*-property': 'o-color-*', it provides a mechanism for customizing the color roles for different website UI components. Requires Odoo's SCSS variable maps and should be used with care to maintain palette consistency. The asterisk should be replaced with the appropriate color combination index (1-5).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_13\n\nLANGUAGE: scss\nCODE:\n```\n$o-color-palettes: map-merge($o-color-palettes,\n   (\n      'airproof': (\n\n         'o-cc*-bg':                     'o-color-*',\n         'o-cc*-text':                   'o-color-*',\n         'o-cc*-headings':               'o-color-*',\n         'o-cc*-h2':                     'o-color-*',\n         'o-cc*-h3':                     'o-color-*',\n         'o-cc*-h4':                     'o-color-*',\n         'o-cc*-h5':                     'o-color-*',\n         'o-cc*-h6':                     'o-color-*',\n         'o-cc*-link':                   'o-color-*',\n         'o-cc*-btn-primary':            'o-color-*',\n         'o-cc*-btn-primary-border':     'o-color-*',\n         'o-cc*-btn-secondary':          'o-color-*',\n         'o-cc*-btn-secondary-border':   'o-color-*',\n\n      ),\n   )\n);\n```\n\n----------------------------------------\n\nTITLE: Counting Lines of Code (Cloc) for Database Modules via Command Line\nDESCRIPTION: Example command `odoo-bin cloc` using the `--database` (`-d`) option to count lines of code (LOC) in all extra modules installed on the specified database (`my_database`), as well as custom server actions and computed fields. It requires specifying the `--addons-path` to locate the module source code. This provides a metric for code size.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_46\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin cloc --addons-path=addons -d my_database\n```\n\n----------------------------------------\n\nTITLE: Displaying Odoo Icon Class: oi-arrow-down-right\nDESCRIPTION: This snippet shows the CSS class name 'oi-arrow-down-right' used to render the corresponding down-right arrow icon within the Odoo framework. The surrounding HTML structure typically includes an `<i>` tag with this class applied.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/icons.rst#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\noi-arrow-down-right\n```\n\n----------------------------------------\n\nTITLE: Declarative Event Binding\nDESCRIPTION: Demonstrates the preferred declarative approach to DOM event binding using the events property in Odoo widgets.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.MyWidget = instance.Widget.extend({\n    events: {\n        \"click .my_button\": \"button_clicked\",\n    },\n    button_clicked: function() {\n        ..\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Translatable Text Content within t-set in Odoo XML\nDESCRIPTION: Illustrates how text content enclosed within `<t t-set>` tags is considered translatable in Odoo XML views, even though directives like `t-value` are not explicitly translatable themselves. The variable `additional_title` will hold the translatable string \"My Page Title Shown in the Browser Tab\".\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/translations.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=”additional_title”>My Page Title Shown in the Browser Tab</t>\n```\n\n----------------------------------------\n\nTITLE: Simplified Push Command for Subsequent Changes\nDESCRIPTION: Simplified git push command that can be used after the initial push has set up tracking.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ git push\n```\n\n----------------------------------------\n\nTITLE: Deploying Odoo Module using odoo-bin CLI - Bash\nDESCRIPTION: This snippet provides the Bash command to deploy an Odoo module using the odoo-bin command line interface. It shows the required arguments: path to the module, instance URL, login, and password. The command may also accept the --force option to reinitialize data set as noupdate. This assumes that odoo-bin is accessible in the environment and the user has sufficient permissions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/importable_modules.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ odoo-bin deploy <path_to_your_module> https://<your_odoo_instance> --login <your_login> --password <your_password>\n```\n\n----------------------------------------\n\nTITLE: Efficient Data Matching using Dictionary Lookup (Python)\nDESCRIPTION: This snippet shows an optimized approach to match data, reducing time complexity significantly compared to nested loops. It first creates a dictionary (`mapped_result`) from the `results` list, mapping IDs to 'foo' values (O(m) time). Then, it iterates through the recordset (`self`) once (O(n) time), performing efficient lookups in the dictionary (O(1) average time). The overall complexity is typically O(n+m).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/performance.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nmapped_result = {result['id']: result['foo'] for result in results}\nfor record in self:\n    record.foo = mapped_result.get(record.id)\n```\n\n----------------------------------------\n\nTITLE: Adding Delete Option to Kanban Card Menu\nDESCRIPTION: Demonstrates how to add a delete option to the kanban card menu using the 'widget' object to check if the user has delete permissions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_72\n\nLANGUAGE: xml\nCODE:\n```\n<kanban>\n   <templates>\n      <t t-name=\"card\">\n         <field name=\"name\"/>\n      </t>\n      <t t-name=\"menu\">\n         <a t-if=\"widget.deletable\" role=\"menuitem\" type=\"delete\" class=\"dropdown-item\">Delete</a>\n      </t>\n   </templates>\n</kanban>\n```\n\n----------------------------------------\n\nTITLE: Restarting Odoo Service on Linux (Shell)\nDESCRIPTION: This shell command restarts the Odoo service on a Linux system, assuming it's managed by the `service` command. `sudo` grants necessary permissions, and `odoo15` specifies the service name (the version number might need adjustment based on the installed Odoo version). Restarting the server is essential after changing the `admin_passwd` in the configuration file for the change to take effect during the password reset process. Requires `sudo` access and the Odoo service to be correctly configured.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/deploy.rst#2025-04-23_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nsudo service odoo15 restart\n```\n\n----------------------------------------\n\nTITLE: Defining Odoo Module Alias Re-exporting All\nDESCRIPTION: Illustrates using the `/** @odoo-module alias=web.someName default=0**/` directive. The `default=0` flag instructs the alias mechanism to re-export *all* exports (not just the default export) from the original native module. This makes the entire module interface available under the alias name.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_modules.rst#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module alias=web.someName default=0**/\nimport { someFunction } from './file_b';\n\nexport function otherFunction(val) {\n    return someFunction(val + 3);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Menu in Header\nDESCRIPTION: QWeb code to implement the navigation menu in a custom header.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<t t-foreach=\"website.menu_id.child_id\" t-as=\"submenu\">\n   <t t-call=\"website.submenu\">\n      <t t-set=\"item_class\" t-valuef=\"nav-item\"/>\n      <t t-set=\"link_class\" t-valuef=\"nav-link\"/>\n   </t>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Exporting Companies from PostgreSQL to CSV for Odoo Import\nDESCRIPTION: SQL command to export company data from a PostgreSQL database to a CSV file with External IDs for import into Odoo. The query creates a formatted CSV with company IDs, names, and a flag indicating they are companies.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials/export_import_data.rst#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncopy (select 'company_'||id as \"External ID\",company_name as \"Name\",'True' as \"Is a Company\" from companies) TO '/tmp/company.csv' with CSV HEADER;\n```\n\n----------------------------------------\n\nTITLE: Mapping Send Quotations Root Documentation (Sales)\nDESCRIPTION: Maps the old root documentation path for sending quotations (`applications/sales/sales/send_quotations.rst`) to the new path for sales quotations (`applications/sales/sales/sales_quotations.rst`) within the Odoo Sales application documentation. Comment indicates the general move from `send_quotations` to `sales_quotations`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/18.0.txt#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/sales/sales/send_quotations.rst applications/sales/sales/sales_quotations.rst                                                       # sales/send_quotations --> sales/sales_quotations\n```\n\n----------------------------------------\n\nTITLE: Example Structure of Buttons Container in Odoo Form XML\nDESCRIPTION: This code illustrates the usage of the `div` with `name=\"button_box\"` to create a container for smart buttons in an Odoo form. It includes examples of an edit button and an object button displaying statistical information using a nested field with a 'statinfo' widget.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <div name=\"button_box\">\n        <button type=\"edit\" name=\"edit\" icon=\"fa-edit\" string=\"Button1\"/>\n        <button type=\"object\" name=\"my_action\" icon=\"fa-dollar\">\n            <field name=\"total_inv\" widget=\"statinfo\" string=\"Invoices\"/>\n        </button>\n    </div>\n<form>\n```\n\n----------------------------------------\n\nTITLE: Applying Conditional Styling to Odoo List View Rows using XML\nDESCRIPTION: This XML code defines an Odoo list view where rows are conditionally styled using the `decoration-success` attribute. Rows corresponding to records where the `is_partner` field evaluates to `True` will be displayed with a success style (typically green). Other decoration attributes (like `decoration-danger`, `decoration-info`, `decoration-bf` for bold, `decoration-it` for italic, `decoration-muted`) can be used similarly with Python expressions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<list decoration-success=\"is_partner==True\">\n    <field name=\"name\"/>\n</list>\n```\n\n----------------------------------------\n\nTITLE: Staging and Committing Changes with Git - Console\nDESCRIPTION: Shows a two-step process for adding all changes to the Git staging area and committing them with a message using the console. The first command stages all modified, added, and deleted files, and the second opens the Git commit editor. Git must be installed and run in a valid repository. Input expects staged changes, and output is a new commit in the local branch history.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation.rst#2025-04-23_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ git add .\n$ git commit\n```\n\n----------------------------------------\n\nTITLE: Configuring DKIM CNAME DNS Record in Bash\nDESCRIPTION: This snippet specifies the required CNAME record for enabling DKIM (DomainKeys Identified Mail) when sending email from a custom domain using Odoo's servers. Add this CNAME entry in your DNS provider's panel to delegate DKIM signing to Odoo, ensuring authenticated emails. Correct setup is mandatory for valid DKIM signatures. Inputs are the CNAME record's name and value; the expected output is a functional DKIM setup validated by mail testing tools.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/email_communication/email_domain.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nodoo._domainkey IN CNAME odoo._domainkey.odoo.com.\n```\n\n----------------------------------------\n\nTITLE: Defining 'sample' Attribute in Odoo View (reStructuredText)\nDESCRIPTION: This snippet defines the 'sample' attribute for Odoo views. It specifies whether the view should be populated with sample records when no actual records are found for the current model. The attribute is optional, boolean, and defaults to False.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures/root_attribute_sample.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: sample\n   :noindex:\n\n   Whether the view should be populated with a set of sample records if none are found for the\n   current model.\n\n   These fake records have heuristics for certain field names/models. For example, a field\n   `display_name` on the model `res.users` will be populated with sample people names, while an\n   `email` field will be in the form `firstname.lastname@sample.demo`.\n\n   The user is unable to interact with these data, and they will be discarded as soon as an action\n   is performed (record created, column added, etc.).\n\n   :requirement: Optional\n   :type: bool\n   :default: `False`\n```\n\n----------------------------------------\n\nTITLE: Inserting Logo Component in Header\nDESCRIPTION: QWeb code to insert the website logo component in a custom header.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<t t-call=\"website.placeholder_header_brand\">\n   <t t-set=\"_link_class\" t-valuef=\"...\"/>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Setting Order for Default Group By Filters in Odoo\nDESCRIPTION: This Python dictionary example shows how to set the order of default group by filters using numeric values. Lower values are applied first, so 'bar' will be applied before 'foo'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_68\n\nLANGUAGE: python\nCODE:\n```\n{\n    'search_default_foo': 2,\n    'search_default_bar': 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Courses Model in Odoo (Python)\nDESCRIPTION: This Python snippet defines a new Odoo model named 'academy.courses'. It includes a character field for the course name ('name') and a many-to-one relationship field ('teacher_id') linking each course to a single teacher record from the 'academy.teachers' model.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nclass Courses(models.Model):\n    _name = 'academy.courses'\n\n    name = fields.Char()\n    teacher_id = fields.Many2one('academy.teachers', string=\"Teacher\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Options for Many2one Widget in Odoo XML\nDESCRIPTION: Example of setting options for the default `many2one` widget using the `options` attribute. This snippet specifically disables the creation of new related records (`'no_create': true`) and prevents opening the related record form when clicking the field in read-only mode (`'no_open': true`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"currency_id\" options=\"{'no_create': true, 'no_open': true}\" />\n```\n\n----------------------------------------\n\nTITLE: Onboarding Tour XML Configuration\nDESCRIPTION: XML record that defines an onboarding tour, including its name, sequence, and completion message.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<odoo>\n    <record id=\"your_tour\" model=\"web_tour.tour\">\n        <field name=\"name\">your_tour</field>\n        <field name=\"sequence\">10</field>\n        <field name=\"rainbow_man_message\">Congrats, that was a great tour</field>\n    </record>\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Describing Odoo Printable Reports Structure - plaintext - text\nDESCRIPTION: This snippet details the placement and naming conventions for files related to printable (QWeb) reports in an Odoo module. It separates report actions and templates to enhance clarity and maintainability, serving as a best-practices template for report organization.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\naddons/plant_nursery/\n|-- report/\n|   |-- plant_order_reports.xml (report actions, paperformat, ...)\n|   |-- plant_order_templates.xml (xml report templates)\n```\n\n----------------------------------------\n\nTITLE: Adding Call to Action Component to Header\nDESCRIPTION: QWeb code to add a call-to-action component to a custom header.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n<t t-call=\"website.placeholder_header_call_to_action\">\n   <t t-set=\"_div_classes\" t-valuef=\"...\"/>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Sub-Filter as Default Period in Odoo XML\nDESCRIPTION: This XML example illustrates setting a custom-defined sub-filter ('create_date_last_30_days') as the default active period for a date-based filter in an Odoo search view. The `default_period` attribute references the custom filter's `name` prefixed with 'custom_'. Requires the `date` attribute to be set.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_58\n\nLANGUAGE: xml\nCODE:\n```\n<filter string=\"Creation Date\" name=\"filter_create_date\" date=\"create_date\" default_period=\"custom_create_date_last_30_days\">\n   <filter name=\"create_date_last_30_days\" string=\"Last 30 Days\" domain=\"[('create_date', '&gt;', datetime.datetime.combine(context_today() - relativedelta(days=30), datetime.time(23, 59, 59)).to_utc())]\"/>\n</filter>\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Backgrounds with Odoo XML Section Elements\nDESCRIPTION: Displays how to configure a section element to use a background video within an Odoo website. The data-bg-video-src attribute specifies the video source URL. No special dependencies except the CSS class and presence of video file. Expects a valid video URL. The section hosts block content with a video-playing background.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/media.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<section class=\\\"o_background_video\\\" data-bg-video-src=\\\"...\\\">\\n    <!-- Content -->\\n</section>\n```\n\n----------------------------------------\n\nTITLE: Removing Class Attribute Values using XPath in Odoo XML\nDESCRIPTION: Demonstrates modifying element attributes using XPath with `position=\"attributes\"`. This snippet targets the `<header>` element (`//header`) and removes the class `x_airproof_header` from its `class` attribute using the `<attribute name=\"class\" remove=\"x_airproof_header\" />` tag. The `separator` attribute is not needed for removal.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<xpath expr=\"//header\" position=\"attributes\">\n   <attribute name=\"class\" remove=\"x_airproof_header\" />\n</xpath>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Background Shape in Odoo XML Page\nDESCRIPTION: Example XML structure for applying the custom 'illustration/hexagons/01' shape to a section. It uses the `data-oe-shape-data` attribute to specify the shape identifier and optionally override default colors (e.g., mapping 'c4' and 'c5'). The corresponding `div` with `o_we_shape` and the shape-specific class `o_illustration_hexagons_01` is included.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/shapes.rst#2025-04-23_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<section class=\"...\" data-oe-shape-data=\"{'shape': 'illustration/hexagons/01', 'colors': {'c4': '#8595A2', 'c5': 'rgba(0, 255, 0)'}}\">\n    <div class=\"o_we_shape o_illustration_hexagons_01\"/>\n    <div class=\"container\">\n        <!-- Content -->\n    </div>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Defining IVA Tax Name Format\nDESCRIPTION: Specifies the required format for naming Value-Added Tax (IVA) types in Odoo for Ecuadorian localization. The format includes the percentage, form code, tax support code, and tax support short name.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/ecuador.rst#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nIVA [percent] (104, [form code] [tax support code] [tax support short name])\n```\n\nLANGUAGE: text\nCODE:\n```\nIVA 12% (104, RUC [tax support code] IVA)\n```\n\n----------------------------------------\n\nTITLE: Title Service Update Example - JavaScript\nDESCRIPTION: Demonstrates how to use the title service to modify the document title by setting title parts.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/services.rst#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// in some component setup method\nconst titleService = useService(\"title\");\n\ntitleService.setParts({ odoo: \"Odoo 15\", fruit: \"Apple\" });\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Odoo Model Fields in Python\nDESCRIPTION: Illustrates how to set default values for fields in an Odoo model using Python. The `default` parameter is used within the field definition. It can accept literal Python values (like the string \"Unknown\" for the `name` field) or a function call (like `fields.Datetime.now` for the `last_seen` field) which is evaluated when a new record is created.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/05_firstui.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nname = fields.Char(default=\"Unknown\")\nlast_seen = fields.Datetime(\"Last Seen\", default=fields.Datetime.now)\n```\n\n----------------------------------------\n\nTITLE: Documenting Odoo Account Model Structure in RST\nDESCRIPTION: ReStructuredText documentation defining the AccountAccount model from Odoo's accounting module, specifying its key fields including name, currency, code, account type, reconciliation settings, notes, tax IDs, and tag IDs.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/standard_modules/account/account_account.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _reference/account_account:\n\n=======\nAccount\n=======\n\n.. automodel:: odoo.addons.account.models.account_account.AccountAccount\n    :main:\n\n    .. autofield:: name\n    .. autofield:: currency_id\n    .. autofield:: code\n    .. autofield:: account_type\n    .. autofield:: reconcile\n    .. autofield:: note\n    .. autofield:: tax_ids\n    .. autofield:: tag_ids\n```\n\n----------------------------------------\n\nTITLE: Using Odoo Shell for Record Manipulation\nDESCRIPTION: Example of using the Odoo shell to search and modify records in the database. The example shows how to query a partner by email, view its name, modify it, and verify the change has been applied.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/advanced/containers.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$  odoo-bin shell\n>>> partner = env['res.partner'].search([('email', '=', 'asusteK@yourcompany.example.com')], limit=1)\n>>> partner.name\n'ASUSTeK'\n>>> partner.name = 'Odoo'\n>>> env['res.partner'].search([('email', '=', 'asusteK@yourcompany.example.com')], limit=1).name\n'Odoo'\n```\n\n----------------------------------------\n\nTITLE: Configuring Sendcloud Warehouse Example\nDESCRIPTION: Example configuration showing matching warehouse names between Sendcloud and Odoo systems.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/sendcloud_shipping.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n| **SendClould configuration**\n| :guilabel:`Miscellaneous`\n| :guilabel:`Address Name (optional)`: `Warehouse #1`\n| :guilabel:`Brand`: `Default`\n\n| **Odoo warehouse configuration**\n| :guilabel:`Warehouse`: `Warehouse #1`\n| :guilabel:`Short Name`: `WH`\n| :guilabel:`Company`: `My company (San Francisco)`\n| :guilabel:`Address`: `My Company (San Francisco)`\n```\n\n----------------------------------------\n\nTITLE: Defining File Structure for Odoo Test Tours\nDESCRIPTION: Outlines the standard directory structure for creating Odoo integration tests (tours) within a custom addon ('your_module'). It specifies the location for the JavaScript tour file (`static/tests/tours/your_tour.js`) and the associated Python test file (`tests/test_calling_the_tour.py`) that initiates the tour.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nyour_module\n├── ...\n├── static\n|   └── tests\n|       └── tours\n|           └── your_tour.js\n├── tests\n|   ├── __init__.py\n|   └── test_calling_the_tour.py\n└── __manifest__.py\n```\n\n----------------------------------------\n\nTITLE: Writing Structured Commit Messages in Odoo Documentation - Text\nDESCRIPTION: This snippet shows the standardized template for writing commit messages in the Odoo documentation project, emphasizing the inclusion of tag, module, short summary, and an extended description. Tags such as [FIX], [REF], [ADD], among others, must prefix the message. The header provides a succinct summary (ideally < 50 characters), followed by a long-form explanation and references to related tasks or issues. Inputs include your commit details; outputs are meaningful, traceable Git history. Requires discipline in message clarity.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/git_guidelines.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[TAG] module: describe your change in a short sentence (ideally < 50 chars)\n\nLong version of the change description, including the rationale for the change,\nor a summary of the feature being introduced.\n\nPlease spend a lot more time describing WHY the change is being done rather\nthan WHAT is being changed. This is usually easy to grasp by actually reading\nthe diff. WHAT should be explained only if there are technical choices\nor decision involved. In that case explain WHY this decision was taken.\n\nEnd the message with references, such as task or bug numbers, PR numbers, and\nOPW tickets, following the suggested format:\ntask-123 (related to task)\nFixes #123  (close related issue on Github)\nCloses #123  (close related PR on Github)\nopw-123 (related to ticket)\n```\n\n----------------------------------------\n\nTITLE: Using data-drop-in Attribute in XML\nDESCRIPTION: Shows how to define where a snippet can be dropped using the data-drop-in attribute. This example allows the snippet to be dropped into elements with the .x_custom_location class.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\n<div data-selector=\".s_airproof_snippet\" data-drop-in=\".x_custom_location\">\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Hyperlinks using RST :doc: Directive\nDESCRIPTION: This snippet demonstrates how to create a hyperlink to another documentation page within the Odoo project using the `:doc:` role in reStructuredText. It shows linking to both a general documentation section and a specific page, using relative paths.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n.. code-block:: text\n\n   Please refer to the :doc:`Accounting documentation <../../../applications/finance/accounting>`\n   to learn more about :doc:`../../../applications/finance/accounting/customer_invoices`.\n```\n\n----------------------------------------\n\nTITLE: Registering New Page Templates in Module Manifest - Python\nDESCRIPTION: Registers new static page templates for the Odoo 'New Page' dialog via the module's __manifest__.py. The field 'new_page_templates' maps template keys to snippet/component lists. Dependencies: Odoo website module, and listed snippets must exist. Enables users to create new pages using predefined building blocks.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n{\\n   'name': 'Airproof Theme',\\n   'description': '...',\\n   'category': 'Website/Theme',\\n   'version': '{BRANCH}.0.0',\\n   'author': '...',\\n   'license': '...',\\n   'depends': ['website'],\\n   'data': [\\n      # ...\\n   ],\\n   'assets': {\\n      # ...\\n   },\\n   'new_page_templates': {\\n      'airproof': {\\n         'faq': ['s_airproof_text_block_h1', 's_title', 's_faq_collapse', 's_call_to_action']\\n   }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Window Action in Odoo XML\nDESCRIPTION: Defines an Odoo window action (`ir.actions.act_window`) using XML. This action, identified by `test_model_action`, is linked to the `test_model` model and specifies that `list` and `form` views should be available when the action is triggered. It serves as a bridge between menus/buttons and model views.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/05_firstui.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"test_model_action\" model=\"ir.actions.act_window\">\n    <field name=\"name\">Test action</field>\n    <field name=\"res_model\">test_model</field>\n    <field name=\"view_mode\">list,form</field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Empty Todo List Initialization in JavaScript\nDESCRIPTION: Code showing how to initialize an empty todo list state using useState hook.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/discover_js_framework/01_owl_components.rst#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nthis.todos = useState([]);\n```\n\n----------------------------------------\n\nTITLE: XML Template for Custom Map Widget in Odoo\nDESCRIPTION: This XML template defines the structure for rendering the custom map widget, including the Google Maps iframe with dynamic latitude and longitude values.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_53\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\"WidgetCoordinates\">\n    <iframe width=\"400\" height=\"300\"\n        t-attf-src=\"https://maps.google.com/?ie=UTF8&amp;ll={{latitude}},{{longitude}}&amp;output=embed\">\n    </iframe>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode with QWeb2.Engine.debug in JavaScript\nDESCRIPTION: Explains the `debug` attribute of `QWeb2.Engine`. It's a boolean flag that, when set to true, prevents the QWeb engine from catching errors during template execution, allowing exceptions to propagate for easier debugging. By default, it's false.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nQWeb2.Engine.debug\n```\n\n----------------------------------------\n\nTITLE: Running Odoo Server on Linux\nDESCRIPTION: Command to run the Odoo server on Linux with custom addons path and database configuration\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/source.rst#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /CommunityPath\n$ python3 odoo-bin --addons-path=addons -d mydb\n```\n\n----------------------------------------\n\nTITLE: Creating Device Contact using Odoo Mobile API in JavaScript\nDESCRIPTION: Calls the mobile API method to create a new contact in the device's address book using the provided contact details object. This function is part of the mobile API object. Returns a jQuery Deferred object.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/mobile.rst#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmobile.methods.addContact(contact);\n```\n\n----------------------------------------\n\nTITLE: Adding Buttons to Default Footer using replace Attribute in Odoo Form XML\nDESCRIPTION: This example shows how to use the `replace=\"0\"` attribute on the `<footer>` element. Instead of replacing the default dialog buttons (like Save/Discard), this adds the specified custom button alongside them.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<footer replace=\"0\">\n    <button string=\"Custom added action\" type=\"object\" name=\"my_action\" class=\"btn-primary\"/>\n</footer>\n```\n\n----------------------------------------\n\nTITLE: Expected HTML Output for the Owl Card Component\nDESCRIPTION: Shows the expected HTML structure generated by the `Card` component when invoked with specific title and content props. It utilizes Bootstrap classes (`card`, `d-inline-block`, `m-2`, `card-body`, `card-title`, `card-text`) to structure the card layout, displaying the provided title and content within standard card elements.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/discover_js_framework/01_owl_components.rst#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n      <div class=\"card d-inline-block m-2\" style=\"width: 18rem;\">\n          <div class=\"card-body\">\n              <h5 class=\"card-title\">my title</h5>\n              <p class=\"card-text\">\n               some content\n              </p>\n          </div>\n      </div>\n```\n\n----------------------------------------\n\nTITLE: Setting Dashboard Items in Component Setup - JavaScript\nDESCRIPTION: This succinct setup function assigns a pre-defined items list to the current component instance in JavaScript, making the dashboard items available for rendering in the template. It expects that the 'items' array (imported from another module) is available in the surrounding scope. This enables the dashboard to generically render its items with the template using a t-foreach loop.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/discover_js_framework/02_build_a_dashboard.rst#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nsetup() {\n   this.items = items;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing New Branch\nDESCRIPTION: Commands to create a new feature branch from master and push it to the remote repository.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/branches.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature-1 master\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push -u origin feature-1\n```\n\n----------------------------------------\n\nTITLE: Generating Secure Random String for Odoo admin_passwd using Python (Console)\nDESCRIPTION: This console command executes a short Python script to generate a 32-character, pseudorandom, base64-encoded string. It utilizes `os.urandom(24)` for random bytes and `base64.b64encode` for printability, suitable for the `admin_passwd` parameter in the Odoo configuration file. Requires Python 3 to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/deploy.rst#2025-04-23_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ python3 -c 'import base64, os; print(base64.b64encode(os.urandom(24)))'\n```\n\n----------------------------------------\n\nTITLE: Using __IMC Parameter for ESC * Command\nDESCRIPTION: The `__IMC` parameter, when appended to an Epson printer's name in CUPS (e.g., `PrinterName__IMC__`), forces the Odoo IoT system to use the 'ESC *' command for printing, necessary for models incompatible with 'GS v 0'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/iot/devices/printer.rst#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n__IMC\n```\n\n----------------------------------------\n\nTITLE: Enabling the Columns Selector (XML)\nDESCRIPTION: Adds the s_allow_columns class to a container div, enabling Website Builder features to manage and select different column arrangements in a layout. Requires Bootstrap and Odoo Website Builder context, with the output being an editable container for organizing columns.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\\\"container s_allow_columns\\\">\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation Structure for Odoo Accounting\nDESCRIPTION: ReStructuredText configuration that sets up the documentation structure for Odoo accounting modules. Includes directive for no search functionality and a table of contents tree with accounting-related documentation pages.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/standard_modules/account.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:nosearch:\n\n==========\nAccounting\n==========\n\n.. toctree::\n    :titlesonly:\n\n    account/account_account_tag\n    account/account_account\n    account/account_fiscal_position\n    account/account_group\n    account/account_report\n    account/account_report_line\n    account/account_tax\n    account/account_tax_repartition\n```\n\n----------------------------------------\n\nTITLE: Icon Usage Example\nDESCRIPTION: Shows how to reference icons from FontAwesome and Odoo UI with descriptors.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nThe graph view is represented by the :icon:`fa-area-chart` :guilabel:`(area chart)` icon. The pivot view is represented by the :icon:`oi-view-pivot` icon.\n```\n\n----------------------------------------\n\nTITLE: Declaring Individual Setting using setting Element in Odoo Settings XML\nDESCRIPTION: The `<setting>` element defines an individual configuration option within a `<block>` in an Odoo Settings view. It typically contains at least one `<field>` element, which determines its behavior and label (unless overridden by the `string` attribute). Additional elements like HTML can be included for complex settings.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <app string=\"NAME\" name=\"TECHNICAL_NAME\">\n        <block title=\"TITLE\">\n            ...\n            <setting string=\"SETTING_NAME\">\n                ...\n                <field name=\"FIELD_NAME\"/>\n                ...\n            </setting>\n            ...\n        </block>\n    </app>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Assigning CSS Class to Page - XML\nDESCRIPTION: This snippet uses 't-set' with 't-valuef' to assign a dynamic CSS class or page name, often for customizing styling or enabling logic in Odoo QWeb templates. The value expression is context-specific.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\\\"pageName\\\" t-valuef=\\\"...\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Shape Styles and Properties in Odoo Theme SCSS\nDESCRIPTION: SCSS code (in `primary_variables.scss`) merging new shape definitions into the global `$o-bg-shapes` map. It defines properties for the custom 'illustration/hexagons/01' shape, including its position, size, default color index (1), and enabling both horizontal and vertical repetition.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/shapes.rst#2025-04-23_snippet_12\n\nLANGUAGE: scss\nCODE:\n```\n// /website_airproof/static/src/scss/primary_variables.scss\n\n$o-bg-shapes: map-merge($o-bg-shapes,\n    (\n        'illustration': map-merge(\n            map-get($o-bg-shapes, 'illustration') or (),\n            (\n                'hexagons/01': ('position': center center, 'size': auto 100%, 'colors': (1), 'repeat-x': true, 'repeat-y': true),\n            ),\n        ),\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Gantt View Thumbnails in Odoo XML\nDESCRIPTION: Example XML code for configuring a Gantt view with thumbnails attribute. This demonstrates how to display user avatars next to group names by referencing a related image field.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_80\n\nLANGUAGE: xml\nCODE:\n```\n<gantt\n   date_start=\"date_start\"\n   date_stop=\"date_stop\"\n   thumbnails=\"{'user_id': 'image_128'}\"\n >\n </gantt>\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo Form Submission to Create Helpdesk Ticket - XML\nDESCRIPTION: With data-model_name set to 'helpdesk.ticket', this form will generate a new ticket upon submission. The backend helpdesk app must be installed and the form should supply any required fields as expected by the 'helpdesk.ticket' model.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/forms.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<form data-model_name=\"helpdesk.ticket\">\n```\n\n----------------------------------------\n\nTITLE: Triggering Device Vibration using Odoo Mobile API in JavaScript\nDESCRIPTION: Vibrates the mobile device for a specified duration in milliseconds. This function is part of the mobile API object and takes an object argument with the 'duration' key. Returns a jQuery Deferred object.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/mobile.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmobile.methods.vibrate({'duration': 100});\n```\n\n----------------------------------------\n\nTITLE: Cloning GitHub Repository\nDESCRIPTION: Commands to create a directory structure, clone a GitHub repository, and navigate to the repository folder.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir ~/src\n$ cd ~/src\n$ git clone https://github.com/odoo/odoo-addons.git\n$ cd ~/src/odoo-addons\n```\n\n----------------------------------------\n\nTITLE: Installing Python Debuggers in Odoo.sh\nDESCRIPTION: Commands to install Python debuggers (pudb or ipdb) in an Odoo.sh container. Shows both temporary installation for the current build and permanent installation via requirements.txt.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/advanced/containers.rst#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$  pip install pudb --user\n```\n\nLANGUAGE: bash\nCODE:\n```\n$  pip install ipdb --user\n```\n\n----------------------------------------\n\nTITLE: Creating Helpdesk Ticket for Time-Tracked Services in RST\nDESCRIPTION: This RST snippet explains how to create or select a helpdesk ticket for time-tracked services.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/helpdesk/advanced/track_and_bill.rst#2025-04-23_snippet_7\n\nLANGUAGE: rst\nCODE:\n```\nTo record a timesheet entry for time-tracked services, go to the :menuselection:`Helpdesk` app, and\nselect the appropriate team for which these services apply.\n\nIf there is already an existing ticket for this issue, select it from the Kanban view. This opens\nthe ticket details form. If there is no existing ticket for this customer issue, click\n:guilabel:`New` to create a new ticket and enter the necessary customer information on the blank\nticket details form.\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Navigation Tour Steps\nDESCRIPTION: Example of tour steps that navigate through Odoo's menu system, showing how to use predefined steps and custom steps together.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// First step\ntour.stepUtils.showAppsMenuItem(),\n// Second step\n{\n   trigger: '.o_app[data-menu-xmlid=\"your_module.maybe_your_module_menu_root\"]',\n   isActive: ['community'],  // Optional\n   run: \"click\",\n}, {\n    // Third step\n},\n```\n\n----------------------------------------\n\nTITLE: Adding Content to Odoo Widget in JavaScript\nDESCRIPTION: Modifies the HomePage widget to append content to its root element using jQuery.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nlocal.HomePage = instance.Widget.extend({\n    start: function() {\n        this.$el.append(\"<div>Hello dear Odoo user!</div>\");\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom View in the Odoo View Registry (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates registering a custom view in Odoo's view registry. It imports a controller module, defines a view object with display properties, and associates it with a view type for Odoo's view registry. Key parameters include the view type, display name, icon, and assigned Controller. Dependencies: Odoo JavaScript web framework, @web/core/registry. Output is side-effect: view is added to Odoo's registry for runtime use.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/master_odoo_web_framework/02_create_gallery_view.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\nimport { MyController } from \"./my_controller\";\n\nexport const myView = {\n      type: \"my_view\",\n      display_name: \"MyView\",\n      icon: \"oi oi-view-list\",\n      multiRecord: true,\n      Controller: MyController,\n};\n\nregistry.category(\"views\").add(\"my_controller\", myView);\n```\n\n----------------------------------------\n\nTITLE: Resetting Admin User Password in Odoo Database (bash/sql)\nDESCRIPTION: Executes a SQL UPDATE command via `psql` to reset the password for the Odoo admin user (typically with `id=2`) to 'admin'. This is often necessary after importing a database dump to regain administrative access. It connects to the specified `<database_name>`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/setup.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npsql \\c\n<database_name>\nupdate res_users set login='admin', password='admin' where id=2;\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for Employment Hero Payroll\nDESCRIPTION: ReStructuredText documentation detailing the Employment Hero payroll module configuration and API integration with Odoo. Includes setup instructions for API keys, business ID configuration, and tax mapping.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/employment_hero.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=======================\nEmployment Hero Payroll\n=======================\n\nThe `Employment Hero <https://employmenthero.com/>`_ module synchronises payslip accounting entries\n(e.g., expenses, social charges, liabilities, taxes) automatically from Employment Hero to Odoo.\nPayroll administration is still done in Employment Hero. We only record the **journal entries** in\nOdoo.\n\n.. important::\n   KeyPay was rebranded as **Employment Hero** in March 2023.\n\n.. _employment_hero/configuration:\n\nConfiguration\n-------------\n\n#. :ref:`Activate <general/install>` the :guilabel:`Employment Hero Payroll` module\n   (`l10n_employment_hero`).\n#. Configure the **Employment Hero API** by going to :menuselection:`Accounting --> Configuration\n   --> Settings`. More fields become visible after clicking on :guilabel:`Enable Employment Hero\n   Integration`.\n```\n\n----------------------------------------\n\nTITLE: Embedding Google Maps iframe in HTML\nDESCRIPTION: This snippet demonstrates how to embed a Google Maps iframe in HTML, with placeholders for latitude and longitude coordinates.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_51\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"400\" height=\"300\" src=\"https://maps.google.com/?ie=UTF8&amp;ll=XXX,YYY&amp;output=embed\">\n</iframe>\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Font with @font-face in SCSS (SCSS)\nDESCRIPTION: This SCSS snippet uses @font-face to declare a custom web font, specifying its family, weight, style, and source URLs. Intended for placement in a dedicated font.scss asset registered in the Odoo theme manifest. The example includes support for .woff and .woff2 formats, making the font available across most modern browsers. Customize the family and URLs as needed.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n@font-face {\n   font-family: \"My Custom Font\", Helvetica, Helvetica Neue, Arial, sans-serif;\n   font-weight: 400;\n   font-style: normal;\n   src: url('/fonts/my-custom-font.woff') format('woff'),\n        url('/fonts/my-custom-font.woff2') format('woff2');\n}\n```\n\n----------------------------------------\n\nTITLE: Including Image for Stage Settings in RST\nDESCRIPTION: This RST directive includes an image showing the gear icon and drop-down menu for stage settings.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment.rst#2025-04-23_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: recruitment/gear.png\n   :align: center\n   :alt: The gear icon that appears when a column name is moused over, and the drop-down menu it\n         displays when clicked.\n```\n\n----------------------------------------\n\nTITLE: Insecure HTML Template Rendering in JavaScript and QWeb\nDESCRIPTION: Demonstrates unsafe use of t-raw directive that could lead to XSS vulnerabilities when displaying HTML content.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/security.rst#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nQWeb.render('insecure_template', {\n    info_message: \"You have an <strong>important</strong> notification\",\n})\n```\n\nLANGUAGE: xml\nCODE:\n```\n<div t-name=\"insecure_template\">\n    <div id=\"information-bar\"><t t-raw=\"info_message\" /></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Access Control CSV Format for Odoo Models - text\nDESCRIPTION: Defines the CSV format for specifying model access rights in Odoo using the 'ir.model.access.csv' file. Each row grants a set of permissions (read, write, create, unlink) to a user group for a model. Required columns include unique 'id', a readable 'name', model identifier, group identifier (or blank for open access), and permission flags ('1' for allow, '0' for deny). The file must be placed in the correct folder (typically 'security') and declared in '__manifest__.py'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/04_securityintro.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"id,name,model_id/id,group_id/id,perm_read,perm_write,perm_create,perm_unlink\\naccess_test_model,access_test_model,model_test_model,base.group_user,1,0,0,0\"\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for Processing Batch Transfers\nDESCRIPTION: Instructions for handling and validating batch transfers including detailed operations and backorder creation\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/picking_methods/batch.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\nProcess batch transfer\n======================\n\nHandle batch transfers in the :menuselection:`Inventory app --> Operations --> Batch Transfers`\npage.\n\nFrom here, select the intended transfer from the list. Then, on the batch transfer form, input the\n:guilabel:`Done` quantities for each product, under the :guilabel:`Detailed Operations` tab.\nFinally, select :guilabel:`Validate` to complete the picking.\n```\n\n----------------------------------------\n\nTITLE: Declaring a Mega Menu with Embedded HTML Content in Odoo XML\nDESCRIPTION: This XML snippet from `/website_airproof/data/menu.xml` declares a \"Mega Menu\" item for website ID 1 within the main menu. It sets the `is_mega_menu` field to `True`, specifies optional CSS classes via `mega_menu_classes`, and defines the menu's structure and default content directly within the `mega_menu_content` field using embedded HTML. The HTML includes a section with rows and columns containing multiple nested navigation menus.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/navigation.rst#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"menu_mega_menu\" model=\"website.menu\">\n    <field name=\"name\">Mega Menu</field>\n    <field name=\"parent_id\" search=\"[\n        ('url', '=', '/default-main-menu'),\n        ('website_id', '=', 1)]\"/>\n    <field name=\"website_id\">1</field>\n    <field name=\"sequence\" type=\"int\">..</field>\n    <field name=\"is_mega_menu\" eval=\"True\"/>\n    <field name=\"mega_menu_classes\">...</field>\n    <field name=\"mega_menu_content\" type=\"html\">\n        <section class=\"s_mega_menu_multi_menus py-4 o_colored_level o_cc o_cc1\">\n            <div class=\"container\">\n                <div class=\"row\">\n                    <div class=\"col-12 col-sm py-2 text-center\">\n                        <h4 class=\"o_default_snippet_text\">First Menu</h4>\n                        <nav class=\"nav flex-column\">\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 1</a>\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 2</a>\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 3</a>\n                        </nav>\n                    </div>\n                    <div class=\"col-12 col-sm py-2 text-center\">\n                        <h4 class=\"o_default_snippet_text\">Second Menu</h4>\n                        <nav class=\"nav flex-column\">\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 1</a>\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 2</a>\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 3</a>\n                        </nav>\n                    </div>\n                    <div class=\"col-12 col-sm py-2 text-center\">\n                        <h4 class=\"o_default_snippet_text\">Third Menu</h4>\n                        <nav class=\"nav flex-column\">\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 1</a>\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 2</a>\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 3</a>\n                        </nav>\n                    </div>\n                    <div class=\"col-12 col-sm py-2 text-center\">\n                        <h4 class=\"o_default_snippet_text\">Last Menu</h4>\n                        <nav class=\"nav flex-column\">\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 1</a>\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 2</a>\n                            <a href=\"#\" class=\"nav-link o_default_snippet_text\" data-name=\"Menu Item\">Menu Item 3</a>\n                        </nav>\n                    </div>\n                </div>\n            </div>\n        </section>\n    </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Enabling Footer Template in XML\nDESCRIPTION: XML configuration to enable a specific footer template in Odoo Website Builder.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"website.template_footer_links\" model=\"ir.ui.view\">\n   <field name=\"active\" eval=\"True\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Pluralization Handling Odoo Python\nDESCRIPTION: This Python anti-pattern shows incorrect English-style pluralization using string concatenation after translation, which will not work for languages with different plural forms or word order. Should be avoided. Input is a count variable; output is poorly internationalized message. Included as a cautionary example.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/translations.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmsg = _(\\\"You have %(count)s invoice\\\", count=invoice_count)\nif invoice_count > 1:\n  msg += _(\\\"s\\\")\n```\n\n----------------------------------------\n\nTITLE: Creating Buttons Container using div in Odoo Form XML\nDESCRIPTION: This snippet shows how to create a dedicated container for buttons, often displayed as smart buttons in the top-right corner of an Odoo form view. This is achieved using a `<div>` element with the specific `name=\"button_box\"` attribute.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <div name=\"button_box\">\n        <BUTTONS/>\n    </div>\n<form>\n```\n\n----------------------------------------\n\nTITLE: Percent Pie Widget for Visual KPI Display in Odoo XML View - XML\nDESCRIPTION: This snippet defines an integer or float field 'replied_ratio' rendered with the 'percentpie' widget, showing a visual pie chart reflecting a percentage (0-100). Used within Odoo views to provide a graphical representation of completion ratios, often in dashboards or statistics panels. No additional options are required; the widget interprets the value as a percent by default.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\\\"replied_ratio\\\" string=\\\"Replied\\\" widget=\\\"percentpie\\\" />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database List with XML-RPC in Python\nDESCRIPTION: Python code example using XML-RPC to programmatically retrieve the list of databases from the Odoo Online database manager. The snippet shows how to authenticate with user credentials and API key, and call the 'list' method of the 'odoo.database' model.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_online.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport xmlrpc.client\n\nUSER = 'user@domain.tld'\nAPIKEY = 'your_apikey'\n\nroot = 'https://www.odoo.com/xmlrpc/'\nuid = xmlrpc.client.ServerProxy(root + 'common').login('openerp', USER, APIKEY)\nsock = xmlrpc.client.ServerProxy(root + 'object')\ndatabases_list = sock.execute('openerp', uid, APIKEY, 'odoo.database', 'list')\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo XML-RPC Connection Parameters - PHP\nDESCRIPTION: Demonstrates PHP variable assignments for Odoo XML-RPC connection. Establishes the server URL, database name, username, and password variables necessary for subsequent XML-RPC authentication and calls. No third-party libraries are used at this stage.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$url = <insert server URL>;\n$db = <insert database name>;\n$username = \"admin\";\n$password = <insert password for your admin user (default: admin)>;\n```\n\n----------------------------------------\n\nTITLE: Declaring Application using app Element in Odoo Settings XML\nDESCRIPTION: The `<app>` element is the top-level container within the `<form>` tag for defining an Odoo Settings view. It requires `string` (display name) and `name` (technical module name) attributes to identify the application and create a sidebar entry. An optional `logo` attribute can specify a custom icon path.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <app string=\"NAME\" name=\"TECHNICAL_NAME\">\n    ...\n    </app>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating Records in Odoo Model using XML-RPC in PHP\nDESCRIPTION: This PHP snippet creates a new partner in Odoo, setting only the name field, and captures the returned record ID. The 'create' call uses an array of field-value mappings as expected by Odoo. Setup includes authenticated XML-RPC models client and credentials.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$id = $models->execute_kw($db, $uid, $password, 'res.partner', 'create', array(array('name'=>\"New Partner\")));\n```\n\n----------------------------------------\n\nTITLE: Executing the Help Command in Odoo Live Chat\nDESCRIPTION: Displays an informative message to the operator outlining the different input types available in the chat window: `@username` for mentions, `/command` for executing commands, and `:shortcut` for inserting canned responses. This command is only visible to the operator.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/websites/livechat/responses.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/help\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Odoo Widget in JavaScript\nDESCRIPTION: Defines a basic HomePage widget by extending the Odoo Widget class. It overrides the start method to log a message when the widget is loaded.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nlocal.HomePage = instance.Widget.extend({\n    start: function() {\n        console.log(\"pet store home page loaded\");\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining 'edit' Attribute in Odoo View Documentation\nDESCRIPTION: Specifies the 'edit' attribute for Odoo views, which controls whether record editing is enabled or disabled. It is an optional boolean attribute with a default value of True.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures/root_attribute_edit.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: edit\n   :noindex:\n\n   Disable/enable record edition on the view.\n\n   :requirement: Optional\n   :type: bool\n   :default: `True`\n```\n\n----------------------------------------\n\nTITLE: Adding Domain to Estate Property Offer Action in Odoo XML\nDESCRIPTION: Adds a domain to the estate.property.offer action to filter offers based on the property_type_id of the current record (active_id).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-23_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"domain\">[('property_type_id', '=', active_id)]</field>\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Image and Alt Text\nDESCRIPTION: RST markup for including images with alt text in the documentation\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/reporting.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: reporting/reporting-annotate.png\n   :alt: Annotate reports.\n\n.. image:: reporting/reporting-comparison.png\n   :alt: Comparison menu to compare time periods.\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Gradient Filter for Background (XML)\nDESCRIPTION: Covers the application of a linear gradient as an overlay filter using inline CSS (background-image) with o_we_bg_filter for sections. Enables complex gradient and color overlay effects essential for modern theme designs.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<section>\\n    <div class=\\\"o_we_bg_filter\\\" style=\\\"background-image: linear-gradient(135deg, rgba(255, 204, 51, 0.5) 0%, rgba(226, 51, 255, 0.5) 100%) !important;\\\"/>\\n    <div class=\\\"container\\\">\\n        <!-- Content -->\\n    </div>\\n</section>\n```\n\n----------------------------------------\n\nTITLE: Restricting Odoo Access to Specific Databases\nDESCRIPTION: This command runs `odoo-bin` using the `--database` option to explicitly limit access to only the specified databases, `11firstdatabase` and `11seconddatabase`. Other databases hosted on the same PostgreSQL server will not be accessible through this Odoo instance.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ odoo-bin --database 11firstdatabase,11seconddatabase\n```\n\n----------------------------------------\n\nTITLE: Updating Odoo Module from Command Line\nDESCRIPTION: Command to update specific Odoo modules and stop the server after initialization. This is useful when changes to database-stored data like field labels or views need to be applied.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/online-editor.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ odoo-bin -u <comma-separated module names> --stop-after-init\n```\n\n----------------------------------------\n\nTITLE: Effect Service Options Interface Definition (TypeScript)\nDESCRIPTION: Defines the EffectOptions TypeScript interface for options passed to the effectService.add method. Includes the optional effect type and allows arbitrary additional parameters. This annotates what configuration can be accepted when displaying effects. Dependency: TypeScript environment for type-checking. Used for documentation and IDE support, not runtime execution.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/services.rst#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EffectOptions {\n  // The name of the desired effect\n  type?: string;\n  [paramName: string]: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Gallery View with Optional Tooltip in XML (XML)\nDESCRIPTION: This XML snippet defines an Odoo gallery view with additional fields specified as attributes. The image_field attribute indicates which field contains image data, while tooltip_field can hold a secondary value displayed on hover. Inputs: field names as strings. Output: arch definition for gallery view. Used by JavaScript side to configure the view at runtime.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/master_odoo_web_framework/02_create_gallery_view.rst#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<gallery image_field=\"some_field\" tooltip_field=\"some_other_field\"/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Windows Virtual IoT Homepage URL\nDESCRIPTION: This URL is used to access the homepage of the Windows virtual IoT service running on the local machine. Users navigate to this address in a web browser to find the pairing code or configure the connection using a token.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/iot/connect.rst#2025-04-23_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttp://localhost:8069\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch for Contributions - Git Console\nDESCRIPTION: This snippet shows how to create and switch to a new branch derived from the base branch (typically matching the target Odoo version). Contributors prefix the branch with the base branch and may suffix it with their handle. Used to isolate features or bug fixes for submission. Requires a clean repository and no conflicting local changes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development.rst#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ git switch -c {CURRENT_BRANCH}-fix-invoices\n```\n\nLANGUAGE: console\nCODE:\n```\n$ git switch -c {CURRENT_BRANCH}-fix-invoices-xyz\n```\n\n----------------------------------------\n\nTITLE: Redirecting Odoo Logs to a File via Command-line\nDESCRIPTION: Specifies a file path where Odoo server logs should be written instead of the default standard error (stderr). On Unix systems, this file can be managed by external log rotation tools.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_28\n\nLANGUAGE: console\nCODE:\n```\n--logfile <file>\n```\n\n----------------------------------------\n\nTITLE: Defining Odoo Python Model for Teachers with Biography Field\nDESCRIPTION: This Python code defines the Teachers model with name and biography fields. The biography field is of type Html to allow rich text content.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass Teachers(models.Model):\n    _name = 'academy.teachers'\n\n    name = fields.Char()\n    biography = fields.Html()\n```\n\n----------------------------------------\n\nTITLE: Setting SMTP Server Address via Odoo Command-line\nDESCRIPTION: Specifies the network address (hostname or IP) of the SMTP server Odoo should use for sending emails.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n--smtp <server>\n```\n\n----------------------------------------\n\nTITLE: Staging Git Changes\nDESCRIPTION: Command to stage all changes in the new module directory for commit.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git add my_module\n```\n\n----------------------------------------\n\nTITLE: Reading Record Fields via XML-RPC in Java\nDESCRIPTION: This Java snippet reads fields 'name', 'country_id', and 'comment' from res.partner records using Odoo's XML-RPC API. It builds required lists and uses HashMap for the method's optional parameters. Dependencies include XML-RPC client configuration as well as predefined database and authentication variables.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nasList((Object[])models.execute(\"execute_kw\", asList(\n    db, uid, password,\n    \"res.partner\", \"read\",\n    asList(ids),\n    new HashMap() {{\n        put(\"fields\", asList(\"name\", \"country_id\", \"comment\"));\n    }}\n)));\n```\n\n----------------------------------------\n\nTITLE: Searching Helpdesk Tickets via Command in Odoo Live Chat\nDESCRIPTION: Searches existing Helpdesk tickets by keyword or ticket number. The operator types `/search_tickets`, presses Enter, then types the search term (keyword or number) and presses Enter again. This command requires the Odoo Helpdesk app to be installed and Live Chat activated for a Helpdesk team. The search results (links to tickets) are displayed only to the operator.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/websites/livechat/responses.rst#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n/search_tickets\n```\n\n----------------------------------------\n\nTITLE: Creating a Fail2ban Jail to Block Brute-Force Login Attempts on Odoo - ini\nDESCRIPTION: This fail2ban jail configuration enables the enforcement of bans on IPs with repeated failed Odoo login attempts. When ten login attempts fail within one minute from the same IP, the jail issues a 15-minute ban on HTTP(S) ports. 'logpath' must point to the actual Odoo log file, and timing or threshold parameters can be tuned as needed. Intended for use with the corresponding fail2ban filter definition and tailored for brute-force attack prevention on Odoo deployments.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/deploy.rst#2025-04-23_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n[odoo-login]\nenabled = true\nport = http,https\nbantime = 900  ; 15 min ban\nmaxretry = 10  ; if 10 attempts\nfindtime = 60  ; within 1 min  /!\\ Should be adjusted with the TZ offset\nlogpath = /var/log/odoo.log  ;  set the actual odoo log path here\n```\n\n----------------------------------------\n\nTITLE: Replacing Default 404 Page Content Using XPath Override - XML\nDESCRIPTION: Demonstrates overriding the content of the 404 (Not Found) error page in Odoo via XML inheritance and XPath replacement. Sets a new meta title and provides customized HTML in the error page container. Dependencies: Odoo http_routing and website modules. Useful for branding custom error pages.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\\\"404\\\" inherit_id=\\\"http_routing.404\\\">\\n    <xpath expr=\\\"//*[@id='wrap']\\\" position=\\\"replace\\\">\\n        <t t-set=\\\"additional_title\\\" t-value=\\\"'404 - Not found'\\\"/>\\n\\n        <div id=\\\"wrap\\\" class=\\\"oe_structure\\\">\\n            <!-- Content -->\\n        </div>\\n    </xpath>\\n</template>\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Classes to a Field in Odoo XML\nDESCRIPTION: This snippet demonstrates how to apply multiple CSS classes to a field element in Odoo XML views. It combines inline styling, left alignment, and avatar display for an image field.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures/generic_attribute_class.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"fname\" class=\"oe_inline oe_left oe_avatar\"/>\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Background Shape in Odoo XML\nDESCRIPTION: XML snippet illustrating how to add a standard background shape to a section using the `data-oe-shape-data` attribute to specify the shape identifier (`web_editor/Zigs/06`). A corresponding `div` with `o_we_shape` and shape-specific classes is required within the section.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/shapes.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<section data-oe-shape-data=\"{'shape':'web_editor/Zigs/06'}\">\n    <div class=\"o_we_shape o_web_editor_Zigs_06\"/>\n    <div class=\"container\">\n        <!-- Content -->\n     </div>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Transformed Invoice Lines Example\nDESCRIPTION: Shows the final format of invoice lines after transformation, where negative lines have been converted to positive discounts while maintaining tax calculations and HSN codes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/india.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n+-------------------------------------------------------------------------------------------------------------+\n|                                         **Product Details**                                                 |\n+==================+==============+==================+==============+==============+==============+===========+\n| **Product Name** | **HSN Code** | **Tax Excluded** | **Quantity** | **Discount** | **GST Rate** | **Total** |\n+------------------+--------------+------------------+--------------+--------------+--------------+-----------+\n| Product A        |  123456      |  1,000           |  1           |  100         |  18%         |  1,062    |\n+------------------+--------------+------------------+--------------+--------------+--------------+-----------+\n| Product B        |  239345      |  1,500           |  2           |  0           |  5%          |  3,150    |\n+------------------+--------------+------------------+--------------+--------------+--------------+-----------+\n```\n\n----------------------------------------\n\nTITLE: Defining a Decimal Field (`float`) in Odoo\nDESCRIPTION: Defines a field for storing decimal numbers (positive, negative, or zero), also known as floating-point numbers. Odoo's technical name is 'float'. Although stored with higher precision, values are typically displayed with two decimal places. Available widgets include 'Monetary' (currency display, though the dedicated 'monetary' field is recommended), 'Percentage' (appends '%'), 'Percentage Pie', 'Progress Bar', and 'Time' (formats value as hh:mm).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/studio/fields.rst#2025-04-23_snippet_3\n\nLANGUAGE: Odoo\nCODE:\n```\nfloat\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Heading, Lead, and Small Text Usage - XML/HTML\nDESCRIPTION: This HTML snippet demonstrates the use of Bootstrap and Odoo classes for styling various heading levels, lead text, and small text. It is intended for use in theme templates and provides concrete examples for content authors. No dependencies are required other than an active Odoo website with Bootstrap classes available.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<!-- h1 with display heading sizes -->\n<h1 class=\"display-1\">Heading 1 with Display Heading 1 size</h1>\n<h1 class=\"display-2\">Heading 1 with Display Heading 2 size</h1>\n<h1 class=\"display-3\">Heading 1 with Display Heading 3 size</h1>\n<h1 class=\"display-4\">Heading 1 with Display Heading 4 size</h1>\n\n<!-- Lead text - named \"Light\" in the dropdown -->\n<p class=\"lead\">A text typically used as an introduction.</p>\n\n<!-- Small text -->\n<p class=\"o_small\">Body text with a smaller size.</p>\n```\n\n----------------------------------------\n\nTITLE: Raw Latex Negative Vertical Space Command Definition\nDESCRIPTION: Defines a raw latex command for creating negative vertical space of 0.5cm, used for formatting document layout in the signature section.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/legal/terms/i18n/partnership_es.rst#2025-04-23_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n.. |vnegspace| raw:: latex\n\n        \\vspace{-.5cm}\n```\n\n----------------------------------------\n\nTITLE: Applying Odoo Color Classes for Backgrounds (XML)\nDESCRIPTION: Utilizes the o_cc and o_cc* classes to set backgrounds using the theme's color palette for either columns or section elements. Requires proper class assignment and integration with Odoo's CSS. Useful for visually differentiating sections in a snippet.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\nclass=\\\"o_cc o_cc*\\\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Filter in Odoo Using Subdomain Matching\nDESCRIPTION: Configuration example that shows only databases matching the first subdomain of the incoming request, enabling multi-tenant setups with domain-specific database selection.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/deploy.rst#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[options]\ndbfilter = ^%d$\n```\n\n----------------------------------------\n\nTITLE: Combining Tags and Prefixes in Prefix of Account Codes Engine\nDESCRIPTION: This snippet demonstrates combining account tags and code prefixes in a complex arithmetic expression for the Prefix of Account Codes engine.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/reporting/customize.rst#2025-04-23_snippet_10\n\nLANGUAGE: odoo\nCODE:\n```\ntag(my_module.my_tag) + tag(42) + 10\n```\n\n----------------------------------------\n\nTITLE: Overriding and Customizing QWeb Snippets for New Page Templates - XML\nDESCRIPTION: Defines a QWeb template snippet 's_airproof_text_block_h1' by inheritance, customizing its content (here, replacing a div with an H1 heading). Used as a building block for new static page templates in Odoo. Dependencies include the original snippet template and Bootstrap for CSS.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\\\"s_airproof_text_block_h1\\\" inherit_id=\\\"website.s_text_block\\\" primary=\\\"True\\\">\\n   <xpath expr=\\\"//div[hasclass('container')]|//div[hasclass('o_container_small')]\\\" position=\\\"replace\\\">\\n      <div class=\\\"container s_allow_columns\\\">\\n            <h1 class=\\\"display-1\\\">FAQ - Help</h1>\\n      </div>\\n   </xpath>\\n</template>\n```\n\n----------------------------------------\n\nTITLE: Exporting Translation Terms via Odoo Command-line\nDESCRIPTION: Exports all translatable terms from the specified modules (using '--modules') or all installed modules to a file (CSV, PO, or TGZ archive) and then exits. Requires the '-d' (database) option.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n--i18n-export <filename>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Title and Subtitle Styles with Animation in SCSS\nDESCRIPTION: These SCSS snippets assign styles to custom classes for module titles and subtitles, setting display to block, font size, weight, and animations. The intention is to visually present titles and subtitles with custom animations, but this approach leads to code duplication and semantic issues—illustrated in the 'Don't' example. There are no explicit dependencies, but it assumes animation keyframes exist.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/scss_tips.rst#2025-04-23_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n.o_module_custom_title {\n   display: block;\n   font-size: 120%;\n   font-weight: bold;\n   animation: 1s linear 1s mycustomAnimation;\n}\n\no_module_custom_subtitle {\n   display: block;\n   font-size: 12px;\n   font-weight: bold;\n   animation: 2s linear 1s mycustomAnimation;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Income Tax Withholding Tax Name Format\nDESCRIPTION: Specifies the required format for naming Income Tax Withholding codes in Odoo for Ecuadorian localization. The format includes the ATS code, withholding percentage, and withholding name.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/ecuador.rst#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nCode ATS [percent of withhold] [withhold name]\n```\n\nLANGUAGE: text\nCODE:\n```\nCode ATS 10% Retenci\\u00f3n a la Fuente\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo Form Submission to Create Customer - XML\nDESCRIPTION: Setting data-model_name to 'res.partner', this snippet enables the form to create a new customer entity (partner) in Odoo. The 'res.partner' model should exist and necessary fields must be included for the form to function successfully.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/forms.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<form data-model_name=\"res.partner\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo XML-RPC Connection Parameters - Python\nDESCRIPTION: Demonstrates how to define connection parameters for Odoo XML-RPC integration in Python. Required variables include server URL, database name, username, and password. These values are prerequisites for all subsequent XML-RPC API interactions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nurl = <insert server URL>\\ndb = <insert database name>\\nusername = 'admin'\\npassword = <insert password for your admin user (default: admin)>\n```\n\n----------------------------------------\n\nTITLE: Modifying Shape Color Mapping Using Only Palette References in SCSS\nDESCRIPTION: Uses the `change-shape-colors-mapping` SCSS function to alter the colors of the 'web_editor/Zigs/06' shape by remapping color index 4 to index 3 and color index 5 to index 1, both referencing colors from the default Odoo palette.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/shapes.rst#2025-04-23_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n// /website_airproof/static/src/scss/primary_variables.scss\n\n $o-bg-shapes: change-shape-colors-mapping('web_editor', 'Zigs/06', (4: 3, 5: 1));\n```\n\n----------------------------------------\n\nTITLE: Alternate Block Rendering with t-if/t-else in Odoo Report XML - XML\nDESCRIPTION: Demonstrates how to use t-else to render alternate content when the t-if condition is false in Odoo XML templates, producing mutually exclusive outputs. The code conditionally shows a table of tags if tags exist; otherwise, a message block is displayed. Requires use within Odoo's templating system and assumes existence of doc and doc.tag_ids in context; outputs either the table or a no-tags message.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/studio/pdf_reports.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- table root element -->\\n<table class=\\\"table\\\" t-if=\\\"len(doc.tag_ids) > 0\\\">\\n    <!-- thead = table header, the row with column titles -->\\n    <thead>\\n        <!-- table row element -->\\n        <tr>\\n            <!-- table header element -->\\n            <th>ID</th>\\n            <th>Name</th>\\n        </tr>\\n    </thead>\\n    <!-- table body, the main content -->\\n    <tbody>\\n        <!-- we create a row for each subrecord with t-foreach -->\\n        <tr t-foreach=\\\"doc.tag_ids\\\" t-as=\\\"tag\\\">\\n            <!-- for each line, we output the name and price as table cells -->\\n            <td t-out=\\\"tag.id\\\"/>\\n            <td t-out=\\\"tag.name\\\"/>\\n        </tr>\\n    </tbody>\\n</table>\\n<div class=\\\"text-muted\\\" t-else=\\\"\\\">No tag present on this document.</div>\n```\n\n----------------------------------------\n\nTITLE: Title Service Interface Definition - TypeScript\nDESCRIPTION: TypeScript interface definition for the title service Parts object that defines the structure of title components.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/services.rst#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Parts {\n    [key: string]: string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Images using RST .. image:: Directive\nDESCRIPTION: This snippet illustrates how to insert an image into an RST document using the `.. image::` directive. It specifies the relative path to the image file and includes alternative text using the `:alt:` parameter for accessibility.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n.. code-block:: text\n\n   .. image:: rst_guidelines/create-invoice.png\n      :alt: Create an invoice.\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo XML-RPC Connection Parameters - Ruby\nDESCRIPTION: Shows how to declare connection details for accessing Odoo's XML-RPC API via Ruby. Variables for the server URL, database name, username, and password are set up and must be initialized before making API calls.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nurl = <insert server URL>\\ndb = <insert database name>\\nusername = \"admin\"\\npassword = <insert password for your admin user (default: admin)>\n```\n\n----------------------------------------\n\nTITLE: Field Optional Attribute in Odoo List Views\nDESCRIPTION: Shows how to make columns optionally visible in Odoo list views using the optional attribute with 'show' or 'hide' values.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_38\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"fname_a\" optional=\"show\"/>\n<field name=\"fname_b\" optional=\"hide\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Inner Content Block Wrapper in Odoo Website Builder (XML)\nDESCRIPTION: Shows how to use a generic HTML tag (e.g., <div>) to define an inner content snippet within a building block. The div receives snippet identification classes and data attributes to ensure it is recognized by the system; useful for snippets placed inside other blocks. Relies on Odoo's framework to process these attributes, and requires proper unique classing for UI control.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\\\"s_snippet_name\\\" data-name=\\\"...\\\" data-snippet=\\\"...\\\">\\n    <!-- Content -->\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using the Owl Card Component with Props in QWeb XML\nDESCRIPTION: Demonstrates how to use the `Card` component within a parent template (like `Playground`). It passes static string values 'my title' and 'some content' to the component's `title` and `content` props, respectively. Note the use of single quotes within the double quotes to denote string literals passed as props.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/discover_js_framework/01_owl_components.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Card title=\"'my title'\" content=\"'some content'\"/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Activity Plan Chatter in reStructuredText\nDESCRIPTION: This RST code snippet defines an image directive to show the chatter thread of a CRM opportunity with a launched activity plan.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/crm/optimize/utilize_activities.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: utilize_activities/activity-plan-chatter.png\n   :align: center\n   :alt: The chatter thread of a CRM opportunity with a launched activity plan.\n```\n\n----------------------------------------\n\nTITLE: Setting Start Month for Date Filters in Odoo XML\nDESCRIPTION: This XML snippet demonstrates using the `start_month` attribute on a date-based `<filter>` tag in an Odoo search view. It sets the earliest selectable month in the filter's dropdown relative to the current month (e.g., `-3` means three months prior to the current month). Requires the `date` attribute to be set.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_53\n\nLANGUAGE: xml\nCODE:\n```\n<filter string=\"Creation Date\" name=\"filter_create_date\" date=\"create_date\" start_month=\"-3\"/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Attendance Log Details in reStructuredText\nDESCRIPTION: This snippet shows how to structure and format attendance log details using reStructuredText syntax. It includes sections for main details and check-in/check-out information.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/attendances.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nMain details\n~~~~~~~~~~~~\n\n- :guilabel:`Employee`: the name of the employee.\n- :guilabel:`Check In`: the date and time the employee checked in.\n- :guilabel:`Check Out`: the date and time the employee checked out. This only appears if the\n  employee has checked out.\n- :guilabel:`Worked Hours`: the total amount of time the employee logged for the day, in an hour and\n  minute format (HH:MM). This value calculates all the checks in and check outs for the day, if the\n  employee checked in and out multiple times.\n- :guilabel:`Extra Hours`: any extra hours the employee logged that is beyond their expected working\n  hours.\n\nCheck in/check out details\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following information appears for both the :guilabel:`Check In` and :guilabel:`Check Out`\nsections.\n\n- :guilabel:`Mode`: the method with which the attendance information was gathered.\n  :guilabel:`Systray` is displayed if the employee logged in and out :ref:`directly from the\n  database <attendances/check-in>`, :guilabel:`Manual` is displayed if the employee logged in and\n  out :ref:`using an attendance kiosk <attendances/kiosk-mode-entry>`.\n- :guilabel:`IP Address`: the IP address for the computer the employee used to log in or out.\n- :guilabel:`Browser`: the web browser the employee used to log in or out.\n- :guilabel:`Localization`: the city and country associated with the computer's IP address.\n- :guilabel:`GPS Coordinates`: the specific coordinates when the user logged in or out. To view the\n  specific coordinates on a map, click the :guilabel:`→ View on Maps` button beneath the\n  :guilabel:`GPS Coordinates`. This opens a map in a new browser tab, with the specific location\n  pointed out.\n```\n\n----------------------------------------\n\nTITLE: Generating a Controller URL for Image Fields (JavaScript)\nDESCRIPTION: This snippet demonstrates constructing a URL to fetch image binary data for a given model's record, using Odoo's \"/web/image\" controller endpoint. It uses the url helper and dynamic parameters for model, ID, and field. Dependencies: Odoo @web/core/utils/urls. Expected input: model name, record ID, field name (all required). Output: URL string pointing to image resource.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/master_odoo_web_framework/02_create_gallery_view.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { url } from \"@web/core/utils/urls\";\nconst url = url(\"/web/image\", {\n   model: resModel,\n   id: image_id,\n   field: imageField,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Employment Hero Payroll URL for Singapore in Odoo\nDESCRIPTION: Provides the specific URL (`https://apisg.yourpayroll.io/`) needed for the 'Payroll URL' field when configuring the Odoo Employment Hero API connector for Singapore. This setting directs the integration to the correct regional API endpoint for Employment Hero payroll.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/singapore.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://apisg.yourpayroll.io/\n```\n\n----------------------------------------\n\nTITLE: Deleting Local Branch in Git\nDESCRIPTION: Removes a branch from your local Git repository. The -D flag forces deletion even if the branch has unmerged changes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/branches.rst#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ git branch -D master\n```\n\n----------------------------------------\n\nTITLE: Declaring Fields Outside Templates in Odoo Kanban View\nDESCRIPTION: Example showing how to declare fields outside kanban templates for fetching data that may not be displayed but is needed for conditions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_76\n\nLANGUAGE: xml\nCODE:\n```\n<kanban>\n   <templates>\n      <field name=\"is_company\"/>\n      <t t-name=\"card\">\n         <field name=\"name\"/>\n         <field t-if=\"!record.is_company.raw_value\" name=\"parent_id\">\n      </t>\n   </templates>\n</kanban>\n```\n\n----------------------------------------\n\nTITLE: Creating Title Container using div in Odoo Form XML\nDESCRIPTION: This snippet demonstrates how to define a container for the main title field in an Odoo form view. A `<div>` element with the CSS class `oe_title` is used within the `<sheet>` to wrap the primary display field, often styled with an `<h1>` tag.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <sheet>\n        <div class=\"oe_title\">\n            <h1><FIELD/></h1>\n        </div>\n    </sheet>\n<form>\n```\n\n----------------------------------------\n\nTITLE: Declaring Google Fonts in Odoo Theme SCSS (SCSS)\nDESCRIPTION: This snippet configures a Google font for use in the Odoo theme by declaring its name, CSS family, Google URL fragment, and additional style properties. Example uses the Poppins font with specified base font size. The declaration is placed within $o-theme-font-configs and is referenced by Odoo's SCSS theme engine. Replace values with the desired font and configuration as appropriate.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n$o-theme-font-configs: (\n   'Poppins': (\n      'family':                         ('Poppins', sans-serif),\n      'url':                            'Poppins:400,500',\n      'properties' : (\n         'base': (\n            'font-size-base':           1rem,\n         ),\n      ),\n   ),\n);\n```\n\n----------------------------------------\n\nTITLE: Overwriting Existing Translations on Import/Update via Odoo Command-line\nDESCRIPTION: Forces the overwriting of existing translation terms when importing a translation file (with '--i18n-import') or when updating modules. Use with caution.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n--i18n-overwrite\n```\n\n----------------------------------------\n\nTITLE: Using ORM in Odoo Upgrade Script with Upgrade Utils\nDESCRIPTION: This example shows how to use Odoo's ORM in an upgrade script by leveraging the upgrade_utils library. It searches for partners and updates their names, demonstrating a more Odoo-specific approach to data migration.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/upgrades/upgrade_scripts.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom odoo.upgrade import util\n\n_logger = logging.getLogger(__name__)\n\n\ndef migrate(cr, version):\n    env = util.env(cr)\n\n    partners = env[\"res.partner\"].search([])\n    for partner in partners:\n        partner.name += \"!\"\n\n    _logger.info(\"Updated %s partners\", len(partners))\n```\n\n----------------------------------------\n\nTITLE: Filtering Odoo Account Balances by Tag and Credit Suffix (plaintext)\nDESCRIPTION: This snippet provides an Odoo reporting formula example, matching accounts by tag and evaluating only credit balances. The syntax 'tag(my_module.my_tag)C' is used in report engine expressions. The required parameters are the tag name and the 'C' suffix to indicate credit. The output is the sum of credit balances for the matching tagged accounts. Used in analytic template or configuration contexts in Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/reporting/customize.rst#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\ntag(my_module.my_tag)C\n```\n\n----------------------------------------\n\nTITLE: Declaring a Dropdown Menu Parent Item in Odoo XML\nDESCRIPTION: This XML snippet, from `/website_airproof/data/menu.xml`, defines the parent item for a dropdown menu named \"Services\" within the main menu of website ID 1. It creates a `website.menu` record, setting its `name`, `website_id`, `parent_id` (the default main menu found by URL), and `sequence`. This parent item typically does not have its own `url`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/navigation.rst#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"menu_services\" model=\"website.menu\">\n    <field name=\"name\">Services</field>\n    <field name=\"website_id\">1</field>\n    <field name=\"parent_id\" search=\"[\n        ('url', '=', '/default-main-menu'),\n        ('website_id', '=', 1)]\"/>\n    <field name=\"sequence\" type=\"int\">...</field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Moving Applicant to Contract Signed Stage in Odoo Recruitment\nDESCRIPTION: This snippet explains how to move an applicant to the 'Contract Signed' stage in the Odoo Recruitment app after they have accepted and signed the contract offer.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment/offer_job_positions.rst#2025-04-23_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\nTo move the applicant to that stage, drag-and-drop the applicant's card to the :guilabel:`Contract\nSigned` stage. If the stage is not visible, click the :icon:`fa-ellipsis-h` :guilabel:`(ellipsis)`\nbutton to the right of :guilabel:`Contract Proposal` on the applicant's form, and click\n:guilabel:`Contract Signed` from the resulting drop-down menu.\n\nOnce the applicant is moved to the :guilabel:`Contract Signed` stage, a green :guilabel:`HIRED`\nbanner appears in the top-right of the applicant's card and form.\n```\n\n----------------------------------------\n\nTITLE: Adding Sign In Component to Header\nDESCRIPTION: QWeb code to add the sign-in component to a custom header.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<t t-call=\"portal.placeholder_user_sign_in\">\n   <t t-set=\"_item_class\" t-valuef=\"nav-item\"/>\n   <t t-set=\"_link_class\" t-valuef=\"nav-link\"/>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Forced Double-Escaping in Python and Javascript\nDESCRIPTION: Provides examples and explanation for forcibly escaping content that is already marked as safe, using standard string conversion in Python and Javascript. Shows that the safety flag can be removed by converting objects to strings, with the result differing between Python and Javascript due to differences in their template safety models. Highlights the need for explicit type handling to avoid unintentional unsafe output.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nIf content is marked as safe but for some reason needs to be escaped anyway\n(e.g. printing the markup of an HTML fields), it can just be converted back\nto a normal string to \"strip\" the safety flag e.g. `str(content)` in Python and\n`String(content)` in Javascript.\n\n```\n\n----------------------------------------\n\nTITLE: Odoo Log Warning for Missing Access Rights - text\nDESCRIPTION: Shows the warning message Odoo logs when a model lacks access rules. This informs the developer that no users have access to the model and that access rules should be defined. The warning recurs until a properly formatted access control file is created and referenced in the module's '__manifest__.py'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/04_securityintro.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"WARNING rd-demo odoo.modules.loading: The models ['estate.property'] have no access rules...\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Mobile Header Template in XML\nDESCRIPTION: Customizes the mobile header template to maintain consistency with the desktop header.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"template_header_mobile\" inherit_id=\"website.template_header_mobile\" name=\"Airproof - Template Header Mobile\">\n   <!-- Xpaths -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Negative Line Transformation Example in Indian E-Invoice\nDESCRIPTION: Demonstration of how negative invoice lines (typically discounts) are transformed to comply with government portal requirements. The example shows conversion of negative lines into positive discounts while maintaining HSN codes and GST rates.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/india.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+---------------------------------------------------------------------------------------------------+\n|                                     **Product Details**                                           |\n+=======================+==============+==================+==============+==============+===========+\n| **Product Name**      | **HSN Code** | **Tax Excluded** | **Quantity** | **GST Rate** | **Total** |\n+-----------------------+--------------+------------------+--------------+--------------+-----------+\n| Product A             |  123456      |  1,000           |  1           |  18%         |  1,180    |\n+-----------------------+--------------+------------------+--------------+--------------+-----------+\n| Product B             |  239345      |  1,500           |  2           |  5%          |  3,150    |\n+-----------------------+--------------+------------------+--------------+--------------+-----------+\n| Discount on Product A |  123456      |  -100            |  1           |  18%         |  -118     |\n+-----------------------+--------------+------------------+--------------+--------------+-----------+\n```\n\n----------------------------------------\n\nTITLE: Defining a Text Field (`char`) in Odoo\nDESCRIPTION: Defines a field for short text strings containing any character, typically displayed as a single line in the UI. Odoo's technical name for this field type is 'char'. Available widgets include 'Badge' (read-only tag display), 'Copy to Clipboard', 'E-mail' (mailto link), 'Image' (displays image from URL, not stored in Odoo), 'Phone' (tel link, optionally with SMS sending), and 'URL' (clickable link).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/studio/fields.rst#2025-04-23_snippet_0\n\nLANGUAGE: Odoo\nCODE:\n```\nchar\n```\n\n----------------------------------------\n\nTITLE: Sending a Webhook Payload with HTTP POST - JSON\nDESCRIPTION: This JSON code snippet represents a minimal payload for triggering a webhook in Odoo via an HTTP POST request. The 'model' key should be set to the technical name of the target model (such as 'sale.order'), and the 'id' should contain the record number to be updated (as an integer, not a string with non-digit characters). This payload should be sent as the raw body of a POST request using tools like Postman, with the Content-Type set to application/json. The Odoo webhook expects at least these fields to accurately locate and update the target record in the database.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/studio/automated_actions/webhooks.rst#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"model\\\": \\\"sale.order\\\",\\n    \\\"id\\\": \\\"SALES ORDER NUMBER\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Header Buttons in Odoo Kanban View\nDESCRIPTION: Demonstrates how to add custom buttons in the control panel of a kanban view using the header element.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_77\n\nLANGUAGE: xml\nCODE:\n```\n<header>\n    <button name=\"toDoAlways\" type=\"object\" string=\"Always displayed\" display=\"always\"/>\n    <button name=\"toDoSelection\" type=\"object\" string=\"Displayed if selection\"/>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Configuring Reward Form Fields in Odoo Referrals (RST)\nDESCRIPTION: This snippet outlines the fields to be filled when creating a new reward in the Odoo Referrals application. It includes required fields like Product Name and Description, as well as optional fields like Cost and Photo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/referrals/rewards.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n- :guilabel:`Product Name`: enter the name as it should appear for the reward. This field is\n  required.\n- :guilabel:`Cost`: enter the amount of points required to redeem the reward.\n- :guilabel:`Company`: using the drop-down menu, select the company the reward is configured for. If\n  a reward is available for multiple companies, each company **must** configure a reward for their\n  specific company. This field **only** appears if in a multi-company environment; if this field\n  appears, it is required.\n\n  .. example::\n     A corporation with three different companies offers a gift card as a reward. In the database,\n     there are three separate rewards listed for a gift card, one for each of the three companies.\n\n- :guilabel:`Gift Responsible`: using the drop-down menu, select the person responsible for\n  procuring and delivering the reward to the recipient. This person is alerted when the reward is\n  bought in the *Referrals* application, so they know when to deliver the reward to the recipient.\n- :guilabel:`Photo`: add a photo of the reward, which appears on the rewards page. Hover over the\n  image box in the top-right corner (a square with a camera and plus sign inside it), and a\n  :icon:`fa-pencil` :guilabel:`(pencil)` icon appears. Click the :icon:`fa-pencil`\n  :guilabel:`(pencil)` icon to select and add a photo to the reward form. Once a photo is added,\n  hovering over the image reveals two icons instead of one: a :icon:`fa-pencil`\n  :guilabel:`(pencil)` icon and a :icon:`fa-trash-o` :guilabel:`(trash can)` icon. Click the\n  :icon:`fa-trash-o` :guilabel:`(trash can)` icon to delete the currently selected image.\n- :guilabel:`Description` tab: type in the description for the reward. This is visible on the reward\n  card, beneath the title. This field is required.\n```\n\n----------------------------------------\n\nTITLE: Declaring an Account Tax Report - Odoo - XML\nDESCRIPTION: This XML snippet demonstrates how to define an account.report record for configuring a tax report in an Odoo localization module. It creates a tax report object, setting its display name, linking it to a root tax report template, and associating it with a country. Requires Odoo's account module and that referenced templates (like account.generic_tax_report and base.XX) exist. Key fields: 'name' (report title), 'root_report_id' (connects to Odoo's built-in tax report), and 'country_id' (targets the report for a specific country). The partial example must be wrapped in an <odoo> tag in the actual file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/accounting_localization.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<odoo>\n    <record id=\"tax_report\" model=\"account.report\">\n        <field name=\"name\">Tax Report</field>\n        <field name=\"root_report_id\" ref=\"account.generic_tax_report\"/>\n        <field name=\"country_id\" ref=\"base.XX\"/>\n    </record>\n\n    ...\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Adding Action Button to Odoo Form View to Trigger Server Action - XML\nDESCRIPTION: Demonstrates how to add a button to the form view header in Odoo XML, binding it to the previously defined server action (Refuse all offers). Clicking this button in the UI triggers the server action, executing the embedded logic on the current property record. The snippet assumes the presence of the referenced server action and the correct integration within a form view architecture.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/importable_modules.rst#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<!-- form view definition from your code... -->\\n<header>\\n    <button name=\\\"estate.action_x_estate_property_refuse_all_offers\\\" type=\\\"action\\\" string=\\\"Refuse all offers\\\"/>\\n</header>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Table of Contents with toctree Directive\nDESCRIPTION: This snippet configures a Sphinx documentation table of contents using the toctree directive. It sets the maximum depth to 4 levels, hides the table of contents from view, and includes a reference to the 'enterprise_fr' documentation file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/legal/terms/i18n/enterprise_tex_fr.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:nosearch:\n:orphan:\n\n.. toctree::\n   :maxdepth: 4\n   :hidden:\n\n   enterprise_fr\n```\n\n----------------------------------------\n\nTITLE: Basic Widget DOM Selection\nDESCRIPTION: Demonstrates how to properly select DOM elements within a widget's scope using jQuery.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nthis.$el.find(\"input.my_input\")...\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.MyWidget = instance.Widget.extend({\n    start: function() {\n        this.$(\"input.my_input\")...\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Stylelint for Odoo CSS/SCSS Standards (JSON)\nDESCRIPTION: Suggests a JSON configuration object for Stylelint, aimed at enforcing Odoo's CSS/SCSS coding standards. It includes rules for error avoidance (e.g., `block-no-empty`) and stylistic conventions (e.g., `indentation`, spacing rules for functions, declarations, blocks, and selectors). This configuration helps maintain code quality and consistency.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n\"stylelint.config\": {\n    \"rules\": {\n        // https://stylelint.io/user-guide/rules\n\n        // Avoid errors\n        \"block-no-empty\": true,\n        \"shorthand-property-no-redundant-values\": true,\n        \"declaration-block-no-shorthand-property-overrides\": true,\n\n        // Stylistic conventions\n        \"indentation\": 4,\n\n        \"function-comma-space-after\": \"always\",\n        \"function-parentheses-space-inside\": \"never\",\n        \"function-whitespace-after\": \"always\",\n\n        \"unit-case\": \"lower\",\n\n        \"value-list-comma-space-after\": \"always-single-line\",\n\n        \"declaration-bang-space-after\": \"never\",\n        \"declaration-bang-space-before\": \"always\",\n        \"declaration-colon-space-after\": \"always\",\n        \"declaration-colon-space-before\": \"never\",\n\n        \"block-closing-brace-empty-line-before\": \"never\",\n        \"block-opening-brace-space-before\": \"always\",\n\n        \"selector-attribute-brackets-space-inside\": \"never\",\n        \"selector-list-comma-space-after\": \"always-single-line\",\n        \"selector-list-comma-space-before\": \"never-single-line\",\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Creating a See Also Block using RST .. seealso:: Directive\nDESCRIPTION: This snippet demonstrates the syntax for creating a 'See Also' admonition block in RST using the `.. seealso::` directive. It shows how to include multiple links, including internal documentation links using `:doc:` and external URLs.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n.. code-block:: text\n\n   .. seealso::\n   - :doc:`Accounting documentation <../../../applications/finance/accounting>`\n   - :doc:`../../../applications/sales/sales/invoicing/proforma`\n   - `Google documentation on setting up Analytics for a website <https://support.google.com/analytics/answer/1008015?hl=en/>`_\n```\n\n----------------------------------------\n\nTITLE: Creating an Odoo XML Template for Teacher Biography\nDESCRIPTION: This XML snippet defines a template for displaying a teacher's biography. It uses the website layout and displays the teacher's name.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"biography\">\n    <t t-call=\"website.layout\">\n        <t t-set=\"title\">Academy</t>\n        <div class=\"oe_structure\"/>\n        <div class=\"oe_structure\">\n            <div class=\"container\">\n                <h3><t t-esc=\"person.name\"/></h3>\n            </div>\n        </div>\n        <div class=\"oe_structure\"/>\n    </t>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Checking Odoo Server Version via XML-RPC - Go (kolo/xmlrpc)\nDESCRIPTION: Utilizes the Go kolo/xmlrpc library to call the 'version' method on the Odoo /xmlrpc/2/common endpoint. Handles connection, error diagnostics, and the mapping of the returned version information for further inspection.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nclient, err := xmlrpc.NewClient(fmt.Sprintf(\"%s/xmlrpc/2/common\", url), nil)\\nif err != nil {\\n    log.Fatal(err)\\n}\\ncommon := map[string]any{}\\nif err := client.Call(\"version\", nil, &common); err != nil {\\n    log.Fatal(err)\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Nesting Odoo Widgets in JavaScript\nDESCRIPTION: Demonstrates how to create a new widget (GreetingsWidget) and nest it within the HomePage widget using the appendTo method.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nlocal.GreetingsWidget = instance.Widget.extend({\n    start: function() {\n        this.$el.append(\"<div>We are so happy to see you again in this menu!</div>\");\n    },\n});\n\nlocal.HomePage = instance.Widget.extend({\n    start: function() {\n        this.$el.append(\"<div>Hello dear Odoo user!</div>\");\n        var greeting = new local.GreetingsWidget(this);\n        return greeting.appendTo(this.$el);\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Operation Duration Computation in Odoo BoM\nDESCRIPTION: Explains the two methods for determining the duration of an operation listed on a Bill of Materials (BoM). The default is 'Set duration manually', using the 'Default Duration' field value. Alternatively, 'Compute based on tracked time' allows Odoo to calculate the duration based on historical work order data.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/basic_setup/mo_costs.rst#2025-04-23_snippet_11\n\nLANGUAGE: Odoo Configuration\nCODE:\n```\nBy default, the :guilabel:`Duration Computation` field is set to :guilabel:`Set duration manually`,\nwhich means that the number entered in :guilabel:`Default Duration` field is always used as the\nexpected duration of the operation.\n\nSelecting :guilabel:`Compute based on tracked time` causes Odoo to automatically compute the\n:guilabel:`Default Duration` based on a certain number of work orders, which is set in the\n:guilabel:`Based on` field. Before there are work orders to compute this duration, the value in the\n:guilabel:`Default Duration` field is used instead.\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Success Message Block for Odoo Forms - XML\nDESCRIPTION: This snippet provides an example structure for a success message block to display after form submission, using HTML elements inside a div with classes 's_website_form_end_message' and 'd-none'. The message is initially hidden with 'd-none' and becomes visible upon successful form submission. Ensure this block is located within the form context and styled to be shown as appropriate by the Odoo frontend JS.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/forms.rst#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\"s_website_form_end_message d-none\">\n     <div class=\"oe_structure\">\n          <section class=\"s_text_block pt64 pb64\" data-snippet=\"s_text_block\">\n               <div class=\"container\">\n                     <h2 class=\"text-center\">This is a success!</h2>\n               </div>\n          </section>\n     </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Identifying Odoo Module: l10n_mx_edi_landing (Odoo Mexico Localization for Stock/Landing)\nDESCRIPTION: This snippet shows the technical name `l10n_mx_edi_landing` for the optional 'Odoo Mexico Localization for Stock/Landing' Odoo module. This module enables the management of customs numbers related to landed costs within electronic documents, relevant for import/export operations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/mexico.rst#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nl10n_mx_edi_landing\n```\n\n----------------------------------------\n\nTITLE: Array Splice Operation for Todo Removal\nDESCRIPTION: Example code demonstrating how to remove a todo item from an array using findIndex and splice methods.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/discover_js_framework/01_owl_components.rst#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// find the index of the element to delete\nconst index = list.findIndex((elem) => elem.id === elemId);\nif (index >= 0) {\n      // remove the element at index from list\n      list.splice(index, 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository with Submodules\nDESCRIPTION: Command to clone an Odoo Git repository with all its submodules, specifically checking out the master branch.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/branches.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recurse-submodules --branch master git@github.com:odoo/odoo.git\n```\n\n----------------------------------------\n\nTITLE: Improved Semantic HTML for Title and Subtitle with Bootstrap/Odoo\nDESCRIPTION: Shows a semantically-correct approach using h5 for the title and div with nested <b><small> for the subtitle, reducing the need for custom CSS and maintaining style consistency. The classes still allow for animation customization. No dependencies beyond default Bootstrap/Odoo styles.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/scss_tips.rst#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<h5 class=\"o_module_custom_title\">\n   Hello There!\n</h5>\n\n<div class=\"o_module_custom_subtitle\">\n   <b><small>I\\'m a subtitle.</small></b>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining header Element in Odoo Form XML\nDESCRIPTION: The `<header>` element is used within an Odoo form definition, placed before the `<sheet>` element. It provides a full-width area typically used to display workflow buttons and status widgets, enhancing user interaction with the record's lifecycle.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <header>\n        <BUTTONS/>\n    </header>\n    <sheet>\n        ...\n    </sheet>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using separator for Spacing in Odoo Form XML\nDESCRIPTION: The `<separator/>` element is used within an Odoo form view's XML definition to add vertical spacing between elements, typically within a `<group>`. It doesn't require any attributes for basic spacing.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    ...\n    <separator/>\n    ...\n</form>\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for Point of Sale System\nDESCRIPTION: Complete ReStructuredText documentation that details the setup and usage of Odoo Point of Sale system. Includes sections on starting sessions, selling products, managing customers, handling refunds, and closing sessions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/point_of_sale.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=============\nPoint of Sale\n=============\n\nWith **Odoo Point of Sale**, run your shops and restaurants easily. The app works on any device with\na web browser, even if you are temporarily offline. Product moves are automatically registered in\nyour stock, you get real-time statistics, and your data is consolidated across all shops.\n```\n\n----------------------------------------\n\nTITLE: Definition of a Position-Relative Utility Class in CSS\nDESCRIPTION: Demonstrates a utility class for setting an element's position to relative with !important, matching the Bootstrap utility convention. This snippet is redundant in Odoo, as such utility classes are already provided by Bootstrap and should be reused instead of rewritten. No dependencies are necessary, but assumes the presence of the class in the CSS stack.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/scss_tips.rst#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\nposition-relative {\n   position: relative !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Nodes with QWeb2.Engine.preprocess_node in JavaScript\nDESCRIPTION: Explains the `preprocess_node` attribute of `QWeb2.Engine`. If assigned a function, this function will be invoked for each DOM node before it's compiled into template code. Odoo Web utilizes this for automatic translation of text content and specific attributes. It defaults to `null`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nQWeb2.Engine.preprocess_node\n```\n\n----------------------------------------\n\nTITLE: Setting Search Defaults in Odoo Views\nDESCRIPTION: This Python dictionary example demonstrates how to set default search values and filters through an action's context. It shows setting a text field 'foo' to 'acro' and enabling a filter 'bar'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_67\n\nLANGUAGE: python\nCODE:\n```\n{\n    'search_default_foo': 'acro',\n    'search_default_bar': 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Odoo List View in XML\nDESCRIPTION: This XML snippet demonstrates the basic structure of an Odoo List view. It uses the `<list>` root element and includes `<field>` elements to specify which model fields (like 'name' and 'last_seen') should be displayed as columns in the list. The `string` attribute on the `<list>` tag sets the view's title.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/06_basicviews.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<list string=\"Tests\">\n    <field name=\"name\"/>\n    <field name=\"last_seen\"/>\n</list>\n```\n\n----------------------------------------\n\nTITLE: Using Canned Response Shortcuts in Odoo Live Chat\nDESCRIPTION: Inserts a preconfigured text substitution into the chat window. The operator types a colon (`:`) followed by the defined shortcut text (e.g., `:greeting`). Upon sending or pressing Enter, the shortcut is automatically replaced with the full response text visible to both operator and customer.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/websites/livechat/responses.rst#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n:shortcut\n```\n\n----------------------------------------\n\nTITLE: Applying Decoration to State Field in XML\nDESCRIPTION: Demonstrates how to apply a decoration to a state field, changing its text color based on a condition. The example uses the 'decoration-danger' attribute to apply red text when the amount is less than 10000.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"state\" decoration-danger=\"amount &lt; 10000\"/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Batch Deferral Actions in Odoo\nDESCRIPTION: This RST snippet shows an image of the actions button and selected count that appear when selecting time off entries to defer in Odoo. It includes the image path, alignment, and alt text.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll/work_entries.rst#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: work_entries/batch-defer.png\n   :align: center\n   :alt: The actions button and # Selected buttons that appear after any selections are made.\n```\n\n----------------------------------------\n\nTITLE: Modifying Field Widgets in Odoo Report XML - XML\nDESCRIPTION: Shows how to modify the display of fields in Odoo report templates by editing widget options using XML. The code demonstrates default field usage and how to specify the widget type and precision for specific fields using the t-options attribute. Dependencies include the Odoo QWeb templating system, with required context for doc variables; inputs are model fields, outputs are formatted report components. Key constraints: only valid within Odoo Studio report editor XML sources.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/studio/pdf_reports.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\\\"oe_structure\\\">\\n <span t-field=\\\"doc.date_order\\\"/>\\n <span t-field=\\\"doc.price_unit\\\"/>\\n</div>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\\\"oe_structure\\\">\\n <span t-field=\\\"doc.date_order\\\" t-options=\\\"{'widget': 'date'}\\\"/>\\n <span t-field=\\\"doc.price_unit\\\" t-options=\\\"{'widget': 'float', 'precision': 4}\\\"/>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Inefficient Data Matching using Nested Loops (Python)\nDESCRIPTION: This snippet illustrates an algorithm with O(n*m) or potentially O(n²) time complexity due to nested loops. It iterates through a recordset (`self`) and for each record, iterates through a list (`results`) to find a matching item based on 'id'. This approach becomes very slow as the size of the inputs increases.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/performance.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfor record in self:\n    for result in results:\n        if results['id'] == record.id:\n            record.foo = results['foo']\n            break\n```\n\n----------------------------------------\n\nTITLE: Adding Class Attribute Values using XPath in Odoo XML\nDESCRIPTION: Shows how to add a value to an element's attribute using XPath with `position=\"attributes\"`. This example targets the `<header>` element (`//header`) and adds the class `x_airproof_header` to its `class` attribute using `<attribute name=\"class\" add=\"x_airproof_header\" separator=\" \"/>`. A `separator=\" \"` is specified to ensure proper spacing between class names.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<xpath expr=\"//header\" position=\"attributes\">\n   <attribute name=\"class\" add=\"x_airproof_header\" separator=\" \"/>\n</xpath>\n```\n\n----------------------------------------\n\nTITLE: Simulating Fiscal Printer Setup Sequence - Odoo Integration - plaintext\nDESCRIPTION: These steps guide the user through entering a specific sequence on a fiscal printer to enable simulation mode while configuring Odoo POS integration. The sequence requires no transaction in progress and the printer to be in its default state. The inputs '3333' and '14' configure the device for simulated operation, which is essential for hardware testing purposes before moving to production mode.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/italy.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#. Make sure the fiscal printer is set to its default state: printer on, start-up cycle complete,\\n   and no transaction in progress.\\n#. Type `3333`.\\n#. Press :guilabel:`Chiave`. The screen displays :guilabel:`Scelta Funzione`.\\n#. Type `14`. The screen displays :guilabel:`Apprendimento`.\n```\n\n----------------------------------------\n\nTITLE: Reading CSV Data with Pandas in Python Console\nDESCRIPTION: Example of using pandas in an IPython console to display CSV data with rich formatting. Shows how the Python console in Odoo.sh supports advanced visualization capabilities.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/online-editor.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nenv['res.users'].search_read([], ['name', 'email', 'login'])\n[{'id': 2,\n'login': 'admin',\n'name': 'Administrator',\n'email': 'admin@example.com'}]\n```\n\n----------------------------------------\n\nTITLE: Preparing JSON Payload for Odoo Contact Webhook (JSON)\nDESCRIPTION: This JSON snippet provides an example body for sending a POST request to the Odoo webhook endpoint to create a new contact. It includes the required fields: 'name', 'email', and 'phone', which should be replaced with actual contact information. The expected input is a valid JSON object, and upon correct submission, a 200 OK or status: ok response should be returned. Missing or misnamed fields will cause the webhook to fail and errors to be returned by Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/studio/automated_actions/webhooks.rst#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"name\": \"CONTACT NAME\",\\n    \"email\": \"CONTACTEMAIL@EMAIL.COM\",\\n    \"phone\": \"CONTACT PHONE NUMBER\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Content Before Header using XPath in Odoo XML\nDESCRIPTION: Provides an example of extending the `website.layout` template to insert content before the `<header>` element. It uses an XPath expression (`//header`) to target the header and the `position=\"before\"` attribute to specify the insertion point. The template is identified by `id=\"layout\"` and `name=\"Welcome Message\"` and inherits from `website.layout`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"layout\" inherit_id=\"website.layout\" name=\"Welcome Message\">\n   <xpath expr=\"//header\" position=\"before\">\n      <!-- Content -->\n   </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting CPU Time Limit per Worker Request via Odoo Command-line\nDESCRIPTION: Used with '--workers', this option limits the maximum CPU time (in seconds) that a worker process can spend processing a single request. This helps prevent runaway requests from consuming excessive resources.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_39\n\nLANGUAGE: console\nCODE:\n```\n--limit-time-cpu <limit>\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Note and Example Directives\nDESCRIPTION: Special directive blocks for highlighting important notes and providing examples in the documentation\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/point_of_sale/pricing/pricelists.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n   The selected pricelist type applies to the entire database, including the :doc:`Sales\n   <../../sales/products_prices/prices/pricing>` and :ref:`eCommerce <ecommerce/pricelists>`\n   apps.\n\n.. example::\n   To have the final price end with `.99`, set the :guilabel:`Rounding Method` to `1.00` and\n   the :guilabel:`Extra Fee` to `-0.01`.\n```\n\n----------------------------------------\n\nTITLE: Setting Company Logo as Attachment in Odoo Website XML\nDESCRIPTION: Shows how to assign a logo image to a website object by referencing an image file as base64 via XML. Useful for setting company branding in templates. Dependent on an existing static image file and Odoo's XML data importing. The field 'logo' is assigned the image. Output is a website record with its logo displaying in templates like the site header.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/media.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\\\"website.default_website\\\" model=\\\"website\\\">\\n    <field name=\\\"logo\\\" type=\\\"base64\\\" file=\\\"website_airproof/static/src/img/content/logo.png\\\"/>\\n</record>\n```\n\n----------------------------------------\n\nTITLE: Merging Branches\nDESCRIPTION: Commands to merge a staging branch into the current branch and push changes to remote.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/branches.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit merge staging-1\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push -u origin master\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL User on Linux\nDESCRIPTION: Commands to create a new PostgreSQL user and database on Linux systems\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/source.rst#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ sudo -u postgres createuser -d -R -S $USER\n$ createdb $USER\n```\n\n----------------------------------------\n\nTITLE: WhatsApp Template Variables Configuration Table\nDESCRIPTION: List table showing the configuration of dynamic variables in a WhatsApp template, including variable names, sample values, types, and referenced fields.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/productivity/whatsapp.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Name\n     - Sample Value\n     - Type\n     - Field\n   * - body - {{1}}\n     - Azure Interior\n     - Field of Model\n     - `Partner`\n   * - body - {{2}}\n     - INV/2022/00001\n     - Field of Model\n     - `Number`\n   * - body - {{3}}\n     - My Company\n     - Field of Model\n     - `Company`\n   * - body - {{4}}\n     - $\n     - Field of Model\n     - `Currency > Symbol`\n   * - body - {{5}}\n     - 4000\n     - Field of Model\n     - `Amount`\n   * - body - {{6}}\n     - \\https://..\n     - Portal link\n     -\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Mega Menu QWeb Template Layout in Odoo XML\nDESCRIPTION: This XML snippet, located in `/website_airproof/views/website_templates.xml`, defines a QWeb template (`id=\"s_mega_menu_airproof\"`) to provide a custom layout structure for a mega menu. The template, named \"Airproof\" and restricted to logged-in users (`groups=\"base.group_user\"`), contains a `<section>` element with specific Odoo styling classes (`s_mega_menu_airproof`, `o_cc`, `o_cc1`, `pt40`) intended to hold the mega menu's content.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/navigation.rst#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"s_mega_menu_airproof\" name=\"Airproof\" groups=\"base.group_user\">\n    <section class=\"s_mega_menu_airproof o_cc o_cc1 pt40\">\n        <!-- Content -->\n    </section>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining a Button with Special Attribute in Odoo Form View - XML\nDESCRIPTION: This example shows how to configure a form view button with the special attribute, allowing dialog-level actions such as cancel and icon display. Used in modals or dialogs, special='cancel' closes the dialog without saving; other values like 'save' can trigger other behaviors. Dependencies are the standard Odoo form context and possibly FontAwesome for icons.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<button special=\\\"cancel\\\" icon=\\\"fa-trash\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Odoo Custom Icon in HTML\nDESCRIPTION: Demonstrates how to render an Odoo custom icon using the 'oi' class in conjunction with a specific icon class. This example shows the usage of the Odoo logo icon.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/icons.rst#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"oi oi-odoo\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Mega Menu Template Option to Odoo Website Builder XML\nDESCRIPTION: This XML snippet, from `/website_airproof/data/presets.xml`, modifies the Odoo Website Builder's snippet options (`website.snippet_options`) to include a new choice for a custom mega menu template. It uses `xpath` to insert a `<we-button>` within the mega menu template options (`data-name='mega_menu_template_opt'`). This button is configured to apply the custom template `website_airproof.s_mega_menu_airproof` when selected in the builder, displaying \"Airproof\" as the label and using a specified image (`/website_airproof/static/src/img/builder/header_opt.svg`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/navigation.rst#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"snippet_options\" inherit_id=\"website.snippet_options\" name=\"Airproof - Mega Menu Options\">\n    <xpath expr=\"//*[@data-name='mega_menu_template_opt']/*\" position=\"before\">\n        <t t-set=\"_label\">Airproof</t>\n        <we-button t-att-data-select-label=\"_label\"\n            data-select-template=\"website_airproof.s_mega_menu_airproof\"\n            data-img=\"/website_airproof/static/src/img/builder/header_opt.svg\"\n            t-out=\"_label\"/>\n    </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Snippet Group to the Snippet List (XML)\nDESCRIPTION: This XML snippet adds a new custom snippet group (e.g., 'Airproof') into the Website Builder's snippet grouping structure with appropriate XPath insertion and attributes for display, including a group thumbnail. Required dependencies are Odoo, a corresponding thumbnail image, and correct template inheritance. Inputs: group attributes and template IDs. Outputs: an organized group visible in the snippet panel. Ensure snippet-group ID is unique.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\\\"snippets\\\" inherit_id=\\\"website.snippets\\\" name=\\\"Airproof - Snippets\\\">\\n   <!-- Create the group -->\\n   <xpath expr=\\\"//snippets[@id='snippet_groups']/*[1]\\\" position=\\\"before\\\">\\n      <t snippet-group=\\\"airproof\\\" t-snippet=\\\"website.s_snippet_group\\\" string=\\\"Airproof\\\" t-thumbnail=\\\"/website_airproof/static/src/img/wbuilder/s_airproof_group_thumbnail.svg\\\"/>\\n   </xpath>\\n</template>\n```\n\n----------------------------------------\n\nTITLE: Menu Selection Path Formatting\nDESCRIPTION: Demonstrates how to format menu navigation paths using the menuselection markup.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTo review sales performance, go to :menuselection:`Sales --> Reporting --> Dashboard`.\n```\n\n----------------------------------------\n\nTITLE: Adding Website Sale Dependency in Odoo Manifest (Python)\nDESCRIPTION: This Python snippet updates the module manifest ('__manifest__.py') to include 'website_sale' as a dependency. This replaces the previous 'website' dependency and indicates that the 'academy' module now requires the e-commerce functionality provided by 'website_sale' (which includes 'sale' and 'website' modules implicitly).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n'version': '0.1',\n\n# any module necessary for this one to work correctly\n'depends': ['mail', 'website_sale'],\n\n# always loaded\n'data': [\n```\n\n----------------------------------------\n\nTITLE: Searching and Reading Records with search_read via XML-RPC in PHP\nDESCRIPTION: This snippet uses PHP to search for company partners and read specific fields (name, country_id, comment) using the 'search_read' method. The code limits results to five, combining the search and fetch steps. Dependencies include an XML-RPC client and necessary Odoo connection environment.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$models->execute_kw($db, $uid, $password, 'res.partner', 'search_read', array(array(array('is_company', '=', true))), array('fields'=>array('name', 'country_id', 'comment'), 'limit'=>5));\n```\n\n----------------------------------------\n\nTITLE: Deactivating Default Contact Us Page via Record - XML\nDESCRIPTION: Like the homepage deactivation, but for the default 'Contact Us' page. By marking the view as inactive, Odoo hides this static page on the website. Replace the default content or prevent its exposure.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\\\"website.contactus\\\" model=\\\"ir.ui.view\\\">\\n    <field name=\\\"active\\\" eval=\\\"False\\\"/>\\n</record>\n```\n\n----------------------------------------\n\nTITLE: Defining Bank Statement Line Structure in JavaScript\nDESCRIPTION: Details the structure of bank statement lines, including amount, description, and date. Each line is represented as an object within an array named 'bank_statement_lines'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/extract_api.rst#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\"bank_statement_lines\": [\n    {\n        \"amount\": float,\n        \"description\": string,\n        \"date\": string,\n    },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: ZPL Lot/Serial Number Label Configuration\nDESCRIPTION: ZPL format options for printing lot and serial number labels, supporting both single labels per lot/SN and per unit printing formats.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/print_on_validation.rst#2025-04-23_snippet_1\n\nLANGUAGE: zpl\nCODE:\n```\nZPL Labels - One per lot/SN\nZPL Labels - One per unit\n```\n\n----------------------------------------\n\nTITLE: Initializing Todo List State in JavaScript\nDESCRIPTION: Example of initializing todo list state with a single hardcoded todo item using useState hook.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/discover_js_framework/01_owl_components.rst#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nthis.todos = useState([{ id: 3, description: \"buy milk\", isCompleted: false }]);\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Table of Contents (reStructuredText)\nDESCRIPTION: This snippet uses the reStructuredText 'toctree' directive to create a table of contents for the 'Acquire leads' section of the Odoo documentation. The ':titlesonly:' option indicates that only the main titles of the linked documents should be displayed in the table of contents. The listed items ('acquire_leads/convert', 'acquire_leads/opportunities_form', etc.) are relative paths to other documentation files.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/crm/acquire_leads.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   acquire_leads/convert\n   acquire_leads/opportunities_form\n   acquire_leads/email_manual\n   acquire_leads/send_quotes\n   acquire_leads/lead_mining\n```\n\n----------------------------------------\n\nTITLE: Documenting AccountTaxRepartitionLine Model in Odoo\nDESCRIPTION: This snippet defines the structure for documenting the AccountTaxRepartitionLine model in Odoo. It specifies the model path and lists the fields to be documented.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/standard_modules/account/account_tax_repartition.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodel:: odoo.addons.account.models.account_tax.AccountTaxRepartitionLine\n    :main:\n\n    .. autofield:: factor_percent\n    .. autofield:: repartition_type\n    .. autofield:: document_type\n    .. autofield:: account_id\n    .. autofield:: tax_id\n    .. autofield:: tag_ids\n    .. autofield:: use_in_tax_closing\n```\n\n----------------------------------------\n\nTITLE: Saving Operations in Odoo Bill of Materials\nDESCRIPTION: Describes the buttons used to save a newly defined operation after configuring it in the 'Create Operations' pop-up window within the Bill of Materials (BoM) form. 'Save & Close' saves the current operation and closes the pop-up, while 'Save & New' saves the current operation and opens a blank pop-up to add another.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/basic_setup/mo_costs.rst#2025-04-23_snippet_12\n\nLANGUAGE: Odoo Configuration\nCODE:\n```\nFinally, click :guilabel:`Save & Close` to add the operation to the |BoM|, and close the\n:guilabel:`Create Operations` pop-up window. Alternatively, click :guilabel:`Save & New` to add the\noperation to the |BoM|, and open a blank :guilabel:`Create Operations` pop-up window to add another\noperation.\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure with toctree Directive\nDESCRIPTION: Sets up a Sphinx documentation structure with a toctree directive that organizes documentation related to Odoo's time off feature. The ':nosearch:' directive prevents this page from appearing in search results, while ':titlesonly:' ensures only titles are displayed in the table of contents.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/timesheets/overview.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:nosearch:\n\n========\nOverview\n========\n\n.. toctree::\n   :titlesonly:\n\n   overview/time_off\n```\n\n----------------------------------------\n\nTITLE: Disabling Size Option for One Column (XML)\nDESCRIPTION: Assigns the s_col_no_resize class only to the targeted column (col-lg-*), preventing resizing of that specific column while other siblings remain resizable. Used within Bootstrap columns in an Odoo snippet context.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\\\"col-lg-* s_col_no_resize\\\">\n```\n\n----------------------------------------\n\nTITLE: Adding Formatted Date Display to Odoo XML Template\nDESCRIPTION: This XML code demonstrates how to display a formatted date in an Odoo template using t-field with options for long format and relative time display.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\"oe_structure\">\n    <div class=\"container\">\n        <h3 t-field=\"person.name\"/>\n        <p>Last modified: <i t-field=\"person.write_date\" t-options='{\"widget\": \"relative\"}'/></p>\n        <div t-field=\"person.biography\"/>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Making an Element Unremovable (XML)\nDESCRIPTION: Applies the oe_unremovable class to a div or other containers, ensuring the element cannot be deleted through the builder UI. Designed for mandatory elements within a layout.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\\\"oe_unremovable\\\">\n```\n\n----------------------------------------\n\nTITLE: Defining Palette Variables for Odoo Theme (SCSS)\nDESCRIPTION: This SCSS snippet initializes the $o-website-values-palettes variable, which contains theme templates, colors, fonts, and other configuration entries for Odoo themes. It is placed in an SCSS file such as primary_variables.scss and is referenced in the Odoo primary variables asset bundle. The file must only contain SCSS variable and mixin overrides.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n$o-website-values-palettes: (\n   (\n      // Templates\n      // Colors\n      // Fonts\n      // Buttons\n      // ...\n   ),\n);\n```\n\n----------------------------------------\n\nTITLE: Hiding the Header on Odoo Page - XML\nDESCRIPTION: Uses 't-set' with a boolean literal 't-value' to hide the page header in Odoo. Used inside page templates, often for landing pages or minimalist design. Set 'no_header' to 'true'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\\\"no_header\\\" t-value=\\\"true\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Color Filter as Background (XML)\nDESCRIPTION: Overlays a custom color using inline style with rgba() in combination with o_we_bg_filter for nuanced background effects. Useful for branding or design adaptations; modifies visual look without requiring additional classes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<section>\\n    <div class=\\\"o_we_bg_filter\\\" style=\\\"background-color: rgba(39, 110, 114, 0.54) !important;\\\"/>\\n    <div class=\\\"container\\\">\\n        <!-- Content -->\\n    </div>\\n</section>\n```\n\n----------------------------------------\n\nTITLE: Replacing a Field Node and Wrapping with a Div – Odoo XML\nDESCRIPTION: This example replaces a matched field node with new content using position=\\\"replace\\\" in the <xpath> expression. It also demonstrates the use of the $0 placeholder, which is substituted by a copy of the replaced node inside a <div> wrapper. Pre-requisites involve understanding of Odoo's node replacement logic, and developers should ensure proper placeholder usage.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_records.rst#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<xpath expr=\\\"//field[@name='x_field']\\\" position=\\\"replace\\\">\\n    <div class=\\\"wrapper\\\">\\n        $0\\n    </div>\\n</xpath>\n```\n\n----------------------------------------\n\nTITLE: Identifying Odoo Module: l10n_mx_reports_closing (Mexico - Localization Reports for Closing)\nDESCRIPTION: This snippet displays the technical name `l10n_mx_reports_closing` for the 'Mexico - Localization Reports for Closing' Odoo module. It provides functionality specifically for creating the Closing Entry, also known as the 'month 13th move', which is relevant for Mexican accounting practices.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/mexico.rst#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nl10n_mx_reports_closing\n```\n\n----------------------------------------\n\nTITLE: Deleting Default Website Menu Items in Odoo XML\nDESCRIPTION: This XML snippet demonstrates how to remove default menu items ('Contact us', 'Shop') from a specific Odoo website (ID 1) using `<delete>` records in a data file (`/website_airproof/data/menu.xml`). It targets `website.menu` records based on their URL ('/', '/contactus', '/shop') and `website_id`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/navigation.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Contact us -->\n<delete model=\"website.menu\" search=\"[('url','in', ['/', '/contactus']),\n('website_id', '=', 1)]\"/>\n\n<!-- Shop -->\n<delete model=\"website.menu\" search=\"[('url','in', ['/', '/shop']),\n('website_id', '=', 1)]\"/>\n```\n\n----------------------------------------\n\nTITLE: Efficient Membership Checking using Set Lookup (Python)\nDESCRIPTION: This snippet presents an optimized alternative using a set for membership checking. Converting the `invalid_ids` list to a set takes O(k) time. However, checking membership (`record.id in invalid_ids`) in a set takes only O(1) time on average. This reduces the overall loop complexity to roughly O(n+k), which is much faster than list lookup for large inputs.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/performance.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ninvalid_ids = set(invalid_ids)\nfor record in self:\n    if record.id in invalid_ids:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Applying Block Display to a div Element in CSS\nDESCRIPTION: Demonstrates a redundant CSS rule where 'display: block' is explicitly set on a div element, which is already the default display type for divs according to user agent stylesheets and Bootstrap Reboot. No dependencies are required. The rule is unnecessary in 99% of cases and serves as an example of code bloat.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/scss_tips.rst#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ndiv.element {\n   display: block;\n   /* not needed 99% of the time */\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Website Footer Layout in Odoo XML\nDESCRIPTION: XML template to modify the website footer copyright section using XPath. Allows replacing the default footer content with custom implementation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_38\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"copyright\" inherit_id=\"website.layout\">\n   <xpath expr=\"//div[hasclass('o_footer_copyright')]\" position=\"replace\">\n      <div class=\"o_footer_copyright\" data-name=\"Copyright\">\n         <!-- Content -->\n      </div>\n   </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: RST Table Structure for Module Installation\nDESCRIPTION: ReStructuredText table defining the core Canadian accounting modules, their technical names and descriptions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/canada.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n   :widths: 25 25 50\n\n   * - Name\n     - Technical name\n     - Description\n   * - :guilabel:`Canada - Accounting`\n     - `l10n_ca`\n     - Base accounting module for Canadian localization.\n   * - :guilabel:`Canada - Accounting Reports`\n     - `l10n_ca_reports`\n     - Adds Canadian accounting reports.\n   * - :guilabel:`Canadian Checks Layout`\n     - `l10n_ca_check_printing`\n     - Enables the printing of payments on pre-printed check paper.\n```\n\n----------------------------------------\n\nTITLE: Describing Odoo Addon Security Files Structure - plaintext - text\nDESCRIPTION: This snippet displays the recommended organization for security-related files within an Odoo addon. It separates access rights (CSV), user group definitions, and record rule XML files for different models, supporting clear and maintainable access control definitions. The snippet serves as a structural template and does not require any dependencies.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\naddons/plant_nursery/\n|-- security/\n|   |-- ir.model.access.csv\n|   |-- plant_nursery_groups.xml\n|   |-- plant_nursery_security.xml\n|   |-- plant_order_security.xml\n```\n\n----------------------------------------\n\nTITLE: Identifying Odoo Module: l10n_mx_edi_40 (EDI v4.0 for Mexico)\nDESCRIPTION: This snippet displays the technical name `l10n_mx_edi_40` for the 'EDI v4.0 for Mexico' Odoo module. This module is crucial for generating electronic documents (CFDI) that adhere to the specific requirements of CFDI version 4.0, mandated by the SAT. It works in conjunction with the base EDI module (`l10n_mx_edi`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/mexico.rst#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nl10n_mx_edi_40\n```\n\n----------------------------------------\n\nTITLE: Implementing RNG View Validation in Python\nDESCRIPTION: Schema validation for gallery views using RelaxNG. Validates mandatory image_field and optional tooltip_field attributes against an RNG file definition.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/master_odoo_web_framework/02_create_gallery_view.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# -*- coding: utf-8 -*-\nimport logging\nimport os\n\nfrom lxml import etree\n\nfrom odoo.loglevels import ustr\nfrom odoo.tools import misc, view_validation\n\n_logger = logging.getLogger(__name__)\n\n_viewname_validator = None\n\n@view_validation.validate('viewname')\ndef schema_viewname(arch, **kwargs):\n      \" Check the gallery view against its schema\n\n      :type arch: etree._Element\n      \"\n      global _viewname_validator\n\n      if _viewname_validator is None:\n         with misc.file_open(os.path.join('modulename', 'rng', 'viewname.rng')) as f:\n            _viewname_validator = etree.RelaxNG(etree.parse(f))\n\n      if _viewname_validator.validate(arch):\n         return True\n\n      for error in _viewname_validator.error_log:\n         _logger.error(ustr(error))\n      return False\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Request/Response Debug Logging via Odoo Command-line\nDESCRIPTION: A shortcut to enable detailed logging of HTTP requests and responses. This is equivalent to setting `--log-handler=odoo.http:DEBUG`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_32\n\nLANGUAGE: console\nCODE:\n```\n--log-web\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Directive - Force Sync Tip\nDESCRIPTION: RST tip directive explaining how to force immediate order synchronization in developer mode\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/amazon_connector/manage.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. tip::\n   To immediately synchronize the orders of an Amazon account, switch to :ref:`developer mode\n   <developer-mode>`, head to the Amazon account in Odoo, and click :guilabel:`Sync Orders`. The\n   same can be done with pickings by clicking :guilabel:`Sync Pickings`.\n```\n\n----------------------------------------\n\nTITLE: Defining useAssets Hook in JavaScript\nDESCRIPTION: This hook is used for loading assets in a component's onWillStart method. It internally calls the loadAssets function.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/assets.rst#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n.. js:function:: useAssets(assets)\n\n    :param Object assets: a description of various assets that should be loaded\n\n    This hook is useful when components need to load some assets in their\n    `onWillStart` method. It internally calls `loadAssets`.\n```\n\n----------------------------------------\n\nTITLE: Installing pdf417gen Library for Odoo PDF Reports (Shell)\nDESCRIPTION: This command installs the 'pdf417gen' Python library using pip. This library is a necessary dependency for Odoo installations on Odoo SH or On-Premise environments to generate the PDF417 barcode required for Chilean electronic invoice PDF reports, ensuring compliance with SII regulations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/chile.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install pdf417gen\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Image Directive for Batch Production Window\nDESCRIPTION: Inserts an image into the document showing the Batch Production pop-up window, where serial numbers can be assigned, with alternative text for accessibility.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/workflows/manufacture_lots_serials.rst#2025-04-23_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. image:: manufacture_lots_serials/batch-production.png\n   :alt: The \"Batch Production\" pop-up window, from which serial numbers can be assigned.\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Dependencies on Linux\nDESCRIPTION: Command to install PostgreSQL server and client on Linux systems using apt package manager\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/source.rst#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt install postgresql postgresql-client\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Classes to Odoo Widgets in JavaScript\nDESCRIPTION: Shows how to add CSS classes to widget root elements for easier identification and styling.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nlocal.HomePage = instance.Widget.extend({\n    className: 'oe_petstore_homepage',\n    //...\n});\nlocal.GreetingsWidget = instance.Widget.extend({\n    className: 'oe_petstore_greetings',\n    //...\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Scoped t-set Variable Behavior With and Without t-cache (Odoo QWeb/HTML)\nDESCRIPTION: Provides a structured example of variable scoping differences for t-set assignments inside cached and non-cached template sections. Shows that variable values can diverge between cached and uncached segments of the template, which impacts rendering output. Demonstrates QWeb and HTML usage with explanation of expected render results. Useful for template authors working with nested scopes and caching directives.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_20\n\nLANGUAGE: html\nCODE:\n```\nExample::\n\n        <div>\n            <t t-set=\"a\" t-value=\"1\"/>\n            <inside>\n                <t t-set=\"a\" t-value=\"2\"/>\n                <t t-out=\"a\"/>\n            </inside>\n            <outside t-out=\"a\"/>\n\n            <t t-set=\"b\" t-value=\"1\"/>\n            <inside t-cache=\"True\">\n                <t t-set=\"b\" t-value=\"2\"/>\n                <t t-out=\"b\"/>\n            </inside>\n            <outside t-out=\"b\"/>\n        </div>\n\nWill render::\n\n        <div>\n            <inside>2</inside>\n            <outside>2</inside>\n\n            <inside>2</inside>\n            <outside>1</inside>\n        </div>\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent and Children Widgets in Odoo JavaScript\nDESCRIPTION: Demonstrates how to access parent and children widgets using getParent() and getChildren() methods.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nlocal.GreetingsWidget = instance.Widget.extend({\n    start: function() {\n        console.log(this.getParent().$el );\n        // will print \"div.oe_petstore_homepage\" in the console\n    },\n});\n\nlocal.HomePage = instance.Widget.extend({\n    start: function() {\n        var greeting = new local.GreetingsWidget(this);\n        greeting.appendTo(this.$el);\n        console.log(this.getChildren()[0].$el);\n        // will print \"div.oe_petstore_greetings\" in the console\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Page Template Groups in Odoo Website - XML\nDESCRIPTION: This XML snippet establishes several base groupings for page templates in the Odoo website module. Each <div> element within the <template> tag serves as a group label (e.g., Basic, About, Gallery), which can later be referenced or extended. No external dependencies are required except for Odoo's standard view system. The <template> is intended to be referenced by ID in other parts of the module and is typically included in files loaded by the website module. Input: None directly; Output: A set of template group divs available for use in the Odoo website interface.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"new_page_template_groups\">\n   <div id=\"basic\">Basic</div>\n   <div id=\"about\">About</div>\n   <div id=\"landing\">Landing Pages</div>\n   <div id=\"gallery\">Gallery</div>\n   <div id=\"services\">Services</div>\n   <div id=\"pricing\">Pricing Plans</div>\n   <div id=\"team\">Team</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using we-title Element in XML\nDESCRIPTION: Demonstrates how to add titles between options to categorize them using the we-title element in Odoo website building blocks.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_37\n\nLANGUAGE: xml\nCODE:\n```\n<we-title>Option subtitle 1</we-title>\n```\n\n----------------------------------------\n\nTITLE: Wave Transfer Menu Navigation in reStructuredText\nDESCRIPTION: Documentation showing the menu navigation paths for accessing wave transfer functionality in Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/picking_methods/wave.rst#2025-04-23_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:menuselection:`Inventory --> Configuration --> Settings`\n:menuselection:`Inventory --> Operations --> Wave Transfers`\n:menuselection:`Inventory app --> Configuration --> Operation Types`\n```\n\n----------------------------------------\n\nTITLE: Defining the 'widget' Field Attribute in Odoo Documentation\nDESCRIPTION: Documentation for the optional 'widget' attribute that specifies which widget to use for rendering a field. This references a JavaScript Owl component implementation registered in the fields registry.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures/field_attribute_name.rst#2025-04-23_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: widget\n   :noindex:\n\n   The widget used to represent the field. The selected widget can change the way the field is\n   rendered and/or the way it can be edited. It refers to a Javascript implementation (an Owl\n   component) registered to the `fields` registry.\n\n   :requirement: Optional\n   :type: str\n```\n\n----------------------------------------\n\nTITLE: Displaying Odoo Icon Class: oi-arrow-right\nDESCRIPTION: This snippet shows the CSS class name 'oi-arrow-right' used to render the corresponding right arrow icon within the Odoo framework. The surrounding HTML structure typically includes an `<i>` tag with this class applied.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/icons.rst#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\noi-arrow-right\n```\n\n----------------------------------------\n\nTITLE: Committing Code Changes - Git Console\nDESCRIPTION: Standard Git commands to stage all local changes and open the commit editor for recording a commit message. Used after editing code to finalize a set of related changes before pushing them to a remote fork. Assumes local modifications are ready for submission and a branch is checked out.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development.rst#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ git add .\n$ git commit\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Color Mapping Variant to a Shape in SCSS\nDESCRIPTION: Utilizes the `add-extra-shape-colors-mapping` SCSS function to add a new color variant named 'second' for the 'web_editor/Zigs/06' shape. This variant maps color index 4 to 3 and color index 5 to 1, allowing selection via a corresponding CSS class without altering the default mapping.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/shapes.rst#2025-04-23_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n// /website_airproof/static/src/scss/boostrap_overridden.scss\n\n$o-bg-shapes: add-extra-shape-colors-mapping('web_editor', 'Zigs/06', 'second', (4: 3, 5: 1));\n```\n\n----------------------------------------\n\nTITLE: Overriding Bootstrap SCSS Variables for Typography and Components - SCSS\nDESCRIPTION: Contained in the `bootstrap_overridden.scss` file, this snippet overrides selected Bootstrap SCSS variables for headlines, navbar, forms, and card components. It makes use of the `!default` flag to allow Odoo or other module overrides. Requires Bootstrap’s SCSS source, and the file must only contain variable/mixin definitions as per Odoo’s guidelines.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_16\n\nLANGUAGE: scss\nCODE:\n```\n// Typography\n$h1-font-size:                 4rem !default;\n\n// Navbar\n$navbar-nav-link-padding-x:    1rem!default;\n\n// Buttons + Forms\n$input-placeholder-color:      o-color('o-color-1') !default;\n\n// Cards\n$card-border-width:            0 !default;\n```\n\n----------------------------------------\n\nTITLE: Calculating Double Holiday Pay Recovery Threshold in Odoo (Belgium)\nDESCRIPTION: This formula calculates the maximum recoverable amount (threshold) for double holiday pay based on the employee's current salary, months worked in the previous year for a prior employer, and their occupation rate. This threshold is used in Odoo's Belgian Payroll module to limit the recovered amount if the employee's salary has decreased, ensuring compliance with regulations. The system recovers the lower value between this threshold and the actual amount paid by the previous employer.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll/payroll_localizations/belgium.rst#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\\text{Threshold} = \\text{Current monthly salary} \\times \\text{Months worked in previous year}\n      \\times \\text{Occupation rate} \\times 7.67%\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Fields in Odoo Debug Mode using XML\nDESCRIPTION: This XML snippet demonstrates how to make an Odoo field visible only when the debug (developer) mode is activated. It achieves this by assigning the field to the 'base.group_no_one' group, which is typically only accessible in debug mode. This technique is used within Odoo view definitions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/framework_overview.rst#2025-04-23_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"fname\" groups=\"base.group_no_one\"/>\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Image Directives\nDESCRIPTION: Image inclusion directives for displaying screenshots and visual aids in the documentation\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/point_of_sale/pricing/pricelists.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: pricelists/settings.png\n   :alt: Enabling pricelists in the general P0S settings\n\n.. image:: pricelists/multiple-prices.png\n   :alt: Setup form of a multiple prices pricelist\n\n.. image:: pricelists/price-rules.png\n   :alt: Setup form to configure an advanced pricelist\n\n.. image:: pricelists/pricelist-button.png\n   :alt: Button to select a pricelist on the POS frontend\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive for Level Form\nDESCRIPTION: ReStructuredText directive for displaying a level form image with center alignment and alt text.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/referrals.rst#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: referrals/levels.png\n   :align: center\n   :alt: A level form in edit mode.\n```\n\n----------------------------------------\n\nTITLE: Modifying Shape Color Mapping with Palette Reference and Custom Color in SCSS\nDESCRIPTION: Uses the `change-shape-colors-mapping` SCSS function to alter the colors of the 'web_editor/Zigs/06' shape. It maps color index 4 to index 3 from the default palette and maps color index 5 to a custom RGB value.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/shapes.rst#2025-04-23_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n// /website_airproof/static/src/scss/primary_variables.scss\n\n $o-bg-shapes: change-shape-colors-mapping('web_editor', 'Zigs/06', (4: 3, 5: rgb(187, 27, 152)))\n```\n\n----------------------------------------\n\nTITLE: Defining Default Odoo Page Structure in XML\nDESCRIPTION: Illustrates the fundamental HTML structure of an Odoo website page, using `div#wrapwrap` as the main container with nested `header`, `main`, and `footer` elements. The `main` element contains the unique page content within `div#wrap.oe_structure`. This structure separates cross-page elements (header, footer) from page-specific content.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<div id=\"wrapwrap\">\n   <header/>\n      <main>\n         <div id=\"wrap\" class=\"oe_structure\">\n            <!-- Page Content -->\n         </div>\n      </main>\n   <footer/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Text Highlighting with SVG in Odoo Website Builder (XML)\nDESCRIPTION: Demonstrates how to implement text highlights using SVG via custom CSS classes and styles. The markup uses nested <span> with o_text_highlight classes and an inline SVG for the visual effect, which is adjustable via custom properties like --text-highlight-width and --text-highlight-color. Designed to emphasize specific words or phrases in snippet headings; requires proper CSS and SVG setup in Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<h2>\\n   Title with\\n   <span class=\\\"o_text_highlight o_text_highlight_fill\\\" style=\\\"--text-highlight-width: 10px !important; --text-highlight-color: #FFFF00;\\\">\\n      <span class=\\\"o_text_highlight_item\\\">\\n         highlighted text\\n         <svg fill=\\\"none\\\" class=\\\"o_text_highlight_svg o_content_no_merge position-absolute overflow-visible top-0 start-0 w-100 h-100 pe-none\\\">\\n            <!-- SVG path -->\\n         </svg>\\n      </span>\\n   </span>\\n</h2>\n```\n\n----------------------------------------\n\nTITLE: Using Command Line Module Update Switch\nDESCRIPTION: References the command line switch for updating modules through Odoo's CLI.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/branches.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n-u\n```\n\n----------------------------------------\n\nTITLE: Configuring Monetary Field with Currency in XML\nDESCRIPTION: Illustrates how to set up a monetary field with a specific currency field. This allows the value to be displayed with the correct currency symbol and formatting.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"value\" widget=\"monetary\" options=\"{'currency_field': 'currency_id'}\" />\n```\n\n----------------------------------------\n\nTITLE: Calculating Fictitious Remuneration in Belgian Payroll\nDESCRIPTION: Mathematical formula for calculating fictitious remuneration when an employee has taken unpaid leave. The calculation considers unpaid leave days, average monthly salary, and standard divisors according to Belgian regulations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll/payroll_localizations/belgium.rst#2025-04-23_snippet_0\n\nLANGUAGE: math\nCODE:\n```\n\\text{Fictitious Remuneration} = (\\text{Unpaid Leave Days} \\times \\text{Average Monthly Salary} \\times 3) \\div (13 \\times 5)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SCSS Variable Assignment in Odoo\nDESCRIPTION: This snippet shows how variables are assigned in different SCSS files and how the !default flag affects variable assignment priority.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/scss_inheritance.rst#2025-04-23_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$foo: red !default;\n```\n\nLANGUAGE: scss\nCODE:\n```\n$foo: blue !default; // -> Already defined, line ignored.\n$bar: black !default; // -> Not defined yet, value assigned.\n```\n\nLANGUAGE: scss\nCODE:\n```\n.component {\n   color: $foo; // -> 'color: red;'\n   background: $bar; // -> 'background: black;'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting an ipdb Breakpoint in Python Code\nDESCRIPTION: Demonstrates how to programmatically insert a breakpoint in Python code using the `ipdb` library. Importing `ipdb` and calling `ipdb.set_trace()` will pause execution at that line and launch the interactive `ipdb` debugger in the console.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/setup_guide.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport ipdb; ipdb.set_trace()\n```\n\n----------------------------------------\n\nTITLE: Describing Odoo Addon Views Directory Structure - plaintext - text\nDESCRIPTION: This code snippet outlines the segmentation of view files within the views directory of an Odoo module. Backend views, portal templates, main menu definitions, and their naming conventions are demonstrated, enhancing maintainability by separating concerns and improving readability. The snippet is a reference structure with no special requirements.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\naddons/plant_nursery/\n|-- views/\n|   | -- plant_nursery_menus.xml (optional definition of main menus)\n|   | -- plant_nursery_views.xml (backend views)\n|   | -- plant_nursery_templates.xml (portal templates)\n|   | -- plant_order_views.xml\n|   | -- plant_order_templates.xml\n|   | -- res_partner_views.xml\n```\n\n----------------------------------------\n\nTITLE: Linking a Menu Item to an External URL in Odoo XML\nDESCRIPTION: This XML snippet demonstrates how to configure a `website.menu` record (identified by its `id=\"...\"`) to link to an external website. It involves setting the `url` field to the complete external URL (e.g., 'https://www.odoo.com').\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/navigation.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"...\" model=\"website.menu\">\n    <field name=\"url\">https://www.odoo.com</field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Route Configuration Documentation in RST\nDESCRIPTION: ReStructuredText documentation detailing Odoo's route configuration, push/pull rules, and warehouse movement patterns. Includes explanations of inventory locations, rule types, and setup procedures.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/use_routes.rst#2025-04-23_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n==========================\nRoutes and push/pull rules\n==========================\n\n*Routes* in Odoo control the movement of products between different locations, whether internal or\nexternal, using push and pull rules. Once set up, these rules help automate the logistics of product\nmovement based on specific conditions.\n```\n\n----------------------------------------\n\nTITLE: Running Odoo Server on Windows\nDESCRIPTION: Command to run the Odoo server on Windows with database credentials, custom addons path and database name\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/source.rst#2025-04-23_snippet_14\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\> cd CommunityPath/\nC:\\> python odoo-bin -r dbuser -w dbpassword --addons-path=addons -d mydb\n```\n\n----------------------------------------\n\nTITLE: Inventory Valuation Formula in RST\nDESCRIPTION: Mathematical formulas demonstrating inventory valuation calculations using RST math directives\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/product_management/inventory_valuation/inventory_valuation_config.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:math:`$80 + (4 * $16) = $144`\n:math:`$144 / 12 = $12`\n:math:`(-8 * $10) + (-2 * $16) = -112`\n:math:`$144 - $112 = $32`\n:math:`$32 / 2 = $16`\n:math:`$32 + $12 = $44`\n:math:`$44 / 4 = $11`\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Menu Item Linked to an Action in Odoo XML\nDESCRIPTION: Demonstrates the `<menuitem>` shortcut in Odoo XML to create a basic menu item. This menu item, identified by `test_model_menu_action`, directly triggers the window action named `test_model_action` when clicked in the UI.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/05_firstui.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<menuitem id=\"test_model_menu_action\" action=\"test_model_action\"/>\n```\n\n----------------------------------------\n\nTITLE: Cloning Odoo Tutorials Repository using Git\nDESCRIPTION: Clones the `odoo/tutorials` GitHub repository to the local machine using the `git clone` command with SSH authentication. This repository contains modules and code specifically designed for Odoo tutorials.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/setup_guide.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone git@github.com:odoo/tutorials.git\n```\n\n----------------------------------------\n\nTITLE: Country Reference Examples\nDESCRIPTION: Different ways to reference a country (Belgium) in import files using name, Database ID, or External ID.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials/export_import_data.rst#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nCountry: Belgium\nCountry/Database ID: 21\nCountry/External ID: base.be\n```\n\n----------------------------------------\n\nTITLE: Registering a Palette Name for Use in Website Builder - SCSS\nDESCRIPTION: This SCSS code appends the newly created 'airproof' color palette to the `$o-selected-color-palettes-names` list. It ensures that the Website Builder recognizes and offers the palette as an option to users. Should be placed after the palette definition and requires that `$o-selected-color-palettes-names` is already defined by Odoo’s framework.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_11\n\nLANGUAGE: scss\nCODE:\n```\n$o-selected-color-palettes-names: append($o-selected-color-palettes-names, 'airproof');\n```\n\n----------------------------------------\n\nTITLE: Restarting Odoo Server After Code Changes (Console)\nDESCRIPTION: This command restarts the Odoo server, again specifying the custom addons path. Restarting is required to load the newly added controller code and make the '/academy/academy/' URL accessible.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ./odoo-bin --addons-path addons,my-modules\n```\n\n----------------------------------------\n\nTITLE: Defining and Integrating SCSS and CSS Variables for Components and Dashboards - SCSS \\u0026 Text - SCSS/Text\nDESCRIPTION: Provides an example workflow establishing SCSS variables for top-level theming, then bridging to CSS variables within component and dashboard files. Assumes SCSS and modern CSS environment. Dependencies: values for `$o-main-text-color` and `$o-info` must be declared elsewhere. Ensures design-system consistency with context overrides using CSS variables. Expected: input SCSS; output robust, contextual CSS with scalable theme customization.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_26\n\nLANGUAGE: scss\nCODE:\n```\n$o-component-color: $o-main-text-color;\n$o-dashboard-color: $o-info;\n// [...]\n```\n\nLANGUAGE: text\nCODE:\n```\n.o_component {\n   color: var(--MyComponent-color, #{$o-component-color});\n}\n```\n\nLANGUAGE: text\nCODE:\n```\n.o_dashboard {\n   --MyComponent-color: #{$o-dashboard-color};\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Activity Plan Schedule Window in reStructuredText\nDESCRIPTION: This RST code snippet defines an image directive to display the schedule activity pop-up window with an Activity plan selected.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/crm/optimize/utilize_activities.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: utilize_activities/schedule-activity-plan.png\n   :align: center\n   :alt: The schedule activity pop-up window with an Activity plan selected.\n```\n\n----------------------------------------\n\nTITLE: Defining an Odoo Template View in XML\nDESCRIPTION: Outlines the structure for defining or extending an Odoo template view using the `<template>` tag. Key attributes include `id` for the new/modified view's unique identifier, `inherit_id` to specify the base template to extend (using the format `module.template_id`), and `name` for a human-readable description of the template modification.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"...\" inherit_id=\"...\" name=\"...\">\n   <!-- Content -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting jQuery Instance with QWeb2.Engine.jQuery in JavaScript\nDESCRIPTION: Describes the `jQuery` attribute of `QWeb2.Engine`. This attribute holds the jQuery instance used internally by the engine, primarily for processing template inheritance directives (t-extend, t-jquery, etc.). It defaults to the global `window.jQuery` object.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nQWeb2.Engine.jQuery\n```\n\n----------------------------------------\n\nTITLE: Cloning Odoo Repositories on Linux (HTTPS)\nDESCRIPTION: Commands to clone both Odoo Community and Enterprise repositories using HTTPS on Linux systems\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/source.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/odoo/odoo.git\n$ git clone https://github.com/odoo/enterprise.git\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Footer Option in XML\nDESCRIPTION: Defines a custom footer option for the Odoo Website Builder interface.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"template_header_opt\" inherit_id=\"website.snippet_options\" name=\"Footer Template - Option\">\n   <xpath expr=\"//we-select[@data-variable='footer-template']\" position=\"inside\">\n      <we-button title=\"airproof\"\n         data-customize-website-views=\"website_airproof.footer\"\n         data-customize-website-variable=\"'airproof'\"\n         data-img=\"/website_airproof/static/src/img/wbuilder/template_header_opt.svg\"/>\n   </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Embedding a Parameterized Barcode in QWeb Reports using HTML\nDESCRIPTION: Demonstrates embedding a barcode in an Odoo QWeb report while specifying multiple parameters via a query string. It uses `t-att-src` on an `<img>` tag to build the URL for the generic barcode controller (`/report/barcode/`). Parameters like `barcode_type`, `value`, `width`, and `height` are dynamically included in the query string. Note the use of `&amp;` for escaping ampersands within the HTML attribute value.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/reports.rst#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<img t-att-src=\"'/report/barcode/?\n    barcode_type=%s&amp;value=%s&amp;width=%s&amp;height=%s'%('QR', 'text', 200, 200)\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Meta Description on Odoo Page - XML\nDESCRIPTION: Sets the meta description for an Odoo page via a QWeb 't-set'. Improves SEO by adding a description that appears in search engines. Used within a template, accepts a descriptive string.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\\\"meta_description\\\">This is the description of the page that will appear on Search\\nEngines.</t>\n```\n\n----------------------------------------\n\nTITLE: Creating a Kanban Card Layout with Side Image\nDESCRIPTION: Shows how to create a kanban card layout with an image on the side using 'aside' and 'main' HTML elements and flexbox styling.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_75\n\nLANGUAGE: xml\nCODE:\n```\n<kanban>\n   <templates>\n      <t t-name=\"card\" class=\"flex-row\">\n         <aside>\n            <field name=\"avatar_128\" widget=\"image\" alt=\"Avatar\"/>\n         </aside>\n         <main class=\"ms-2\">\n\n\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Response in Odoo Server Action\nDESCRIPTION: Server action code that generates an HTML response listing property names from the x_estate.property model. Uses request.make_response to create the HTTP response.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/importable_modules.rst#2025-04-23_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"state\">code</field>\n<field name=\"code\"><![CDATA[\n    html = '<html><body><h1>Properties</h1><ul>'\n    for property in request.env['x_estate.property'].search([]):\n        html += f'<li>{property.x_name}</li>'\n    html += '</ul></body></html>'\n    response = request.make_response(html)\n]]></field>\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Odoo Documentation\nDESCRIPTION: This code snippet defines the table of contents for the Odoo documentation reference section using reStructuredText directives. It sets up the structure and links to various subsections of the documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n:show-content:\n:show-toc:\n:hide-page-toc:\n\n=========\nReference\n=========\n\n.. toctree::\n   :maxdepth: 3\n\n   reference/backend\n   reference/frontend\n   reference/user_interface\n   reference/standard_modules\n   reference/cli\n   reference/upgrades\n   reference/external_api\n   reference/extract_api\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Table of Contents - Sphinx reStructuredText\nDESCRIPTION: This snippet creates an index for Odoo standard modules documentation using Sphinx's toctree directive in reStructuredText. It lists sub-documents (account and payment modules) to be included in the navigation. There are no external package dependencies, but Sphinx must be used to render the documentation. This structure expects referenced files ('standard_modules/account' and 'standard_modules/payment') to exist and be valid reStructuredText files.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/standard_modules.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\\n    :titlesonly:\\n\\n    standard_modules/account\\n    standard_modules/payment\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Message for Draft Bill Creation\nDESCRIPTION: RST markup for showing an error message popup when attempting to create a draft bill without receiving any products.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/control_bills.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: control_bills/control-bills-error-message-popup.png\n   :align: center\n   :alt: Bill control policy draft bill error message.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database List with JSON-RPC in Python\nDESCRIPTION: Python code example using JSON-RPC to programmatically retrieve the list of databases from the Odoo Online database manager. The snippet includes helper functions for making JSON-RPC calls, authenticating with user credentials and API key, and calling the 'list' method of the 'odoo.database' model.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_online.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport random\nimport urllib.request\n\nUSER = 'user@domain.tld'\nAPIKEY = 'your_apikey'\n\ndef json_rpc(url, method, params):\n    data = {\n        'jsonrpc': '2.0',\n        'method': method,\n        'params': params,\n        'id': random.randint(0, 1000000000),\n    }\n    req = urllib.request.Request(url=url, data=json.dumps(data).encode(), headers={\n        \"Content-Type\": \"application/json\",\n    })\n    reply = json.loads(urllib.request.urlopen(req).read().decode('UTF-8'))\n    if reply.get('error'):\n        raise Exception(reply['error'])\n    return reply['result']\n\ndef call(url, service, method, *args):\n    return json_rpc(url, 'call', {'service': service, 'method': method, 'args': args})\n\nurl = 'https://www.odoo.com/jsonrpc'\nuid = call(url, 'common', 'login', 'openerp', USER, APIKEY)\ndatabases_list = call(url, 'object', 'execute', 'openerp', uid, APIKEY, 'odoo.database', 'list')\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for MTO Configuration\nDESCRIPTION: Comprehensive RST documentation covering the setup and usage of Make to Order (MTO) functionality in Odoo, including route configuration, product setup, and workflow execution.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/warehouses_storage/replenishment/mto.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n========================\nReplenish on order (MTO)\n========================\n\n.. |SO| replace:: :abbr:`SO (sales order)`\n.. |SOs| replace:: :abbr:`SOs (sales orders)`\n.. |MO| replace:: :abbr:`MO (manufacturing order)`\n.. |PO| replace:: :abbr:`PO (purchase order)`\n.. |MTO| replace:: :abbr:`MTO (make to order)`\n.. |RFQ| replace:: :abbr:`RFQ (request for quotation)`\n.. |BOM| replace:: :abbr:`BOM (bill of materials)`\n```\n\n----------------------------------------\n\nTITLE: Configuring 360 Feedback in Odoo RST Documentation\nDESCRIPTION: This RST code snippet explains how to configure and use the 360 Feedback feature in Odoo Appraisals. It covers enabling the option, accessing the survey template, and notes the requirement of the Surveys application.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/appraisals.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n360 feedback\n************\n\nThe :guilabel:`360 Feedback` option can be enabled to allow managers to request feedback from other\nemployees using a different survey form, at any time, independent of the appraisal schedule.\n\nTypically, managers ask for feedback from other people who work with an employee they manage. This\nincludes the employee's various managers, peers, and direct reports.\n\nTo view the :guilabel:`360 Feedback` survey, click the :guilabel:`→ Internal link` icon at the end\nof the :guilabel:`Default Template` field. The :guilabel:`360 Feedback` survey loads, and any\ndesired changes to the survey can be made.\n\nFor more information on how to edit a survey, refer to the :doc:`../marketing/surveys/create`\ndocument.\n\n.. important::\n   The :guilabel:`360 Feedback` form is a pre-configured survey within the *Surveys* application. In\n   order to use the :guilabel:`360 Feedback` option, including the ability to edit the survey, the\n   *Surveys* application **must** be installed.\n```\n\n----------------------------------------\n\nTITLE: Displaying New Event Form for Interview Scheduling\nDESCRIPTION: This code snippet demonstrates how to include an image of the new event form used for scheduling interviews in the documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment/schedule_interviews.rst#2025-04-23_snippet_2\n\nLANGUAGE: reST\nCODE:\n```\n.. image:: schedule_interviews/new-event.png\n   :align: center\n   :alt: A new meeting card with all the details populated, and ready to save.\n```\n\n----------------------------------------\n\nTITLE: Git Checkout and Add Submodule Commands\nDESCRIPTION: Commands for checking out a branch and adding a Git submodule. Shows syntax for specifying repository URL, branch, and target path.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/advanced/submodules.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout <branch>\\n$ git submodule add -b <branch> <git@yourprovider.com>:<username/repository.git> <path>\n```\n\n----------------------------------------\n\nTITLE: Overriding Inline Display on a span Tag in CSS\nDESCRIPTION: Shows a CSS rule to force a span element to display as a block, which replicates the behavior provided by a div tag. The comment recommends replacing the span with a div instead of adding this custom CSS. There are no external dependencies. The snippet encourages semantic and minimal code.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/scss_tips.rst#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nspan.element {\n   display: block;\n   /* replace <span> with <div> instead\n      to get 'display: block' by default */\n}\n```\n\n----------------------------------------\n\nTITLE: Apply 'noupdate' to Specific Records in Data Section - XML\nDESCRIPTION: Demonstrates scoping 'noupdate' to selected records only, by wrapping them in a <data noupdate=\"1\"> tag. Only records within the <data> block are protected from updates, allowing other records in the file to update normally.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<odoo>\\n   <record id=\\\"menu_company\\\" model=\\\"website.menu\\\">\\n      <!-- Fields -->\\n   </record>\\n\\n   <data noupdate=\\\"1\\\">\\n      <record id=\\\"menu_faq\\\" model=\\\"website.menu\\\">\\n         <!-- Fields -->\\n      </record>\\n      <record id=\\\"menu_legal\\\" model=\\\"website.menu\\\">\\n         <!-- Fields -->\\n      </record>\\n   </data>\\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Setting Element Configuration in Odoo XML Views\nDESCRIPTION: Details the attributes available for the `<setting>` element in Odoo XML views, including type, string, title, help, company_dependent, and documentation attributes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<setting type=\"header\" string=\"Label\" title=\"Tooltip\" help=\"Description\" company_dependent=\"1\" documentation=\"path\"><!-- content --></setting>\n```\n\n----------------------------------------\n\nTITLE: Using we-checkbox Element in XML\nDESCRIPTION: Demonstrates how to create a toggle switch option using the we-checkbox element. When checked, it adds the s_airproof_snippet_tooltip class to the selected element.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_43\n\nLANGUAGE: xml\nCODE:\n```\n<we-checkbox\n   string=\"Tooltip\"\n   data-select-class=\"s_airproof_snippet_tooltip\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Grid Layout for Snippets (XML)\nDESCRIPTION: Shows how to set up a responsive CSS grid within an Odoo snippet by adding o_grid_mode to a row, specifying row count with data-row-count, and setting the gap via the style attribute. The grid supports a fixed 12 columns and is customized by row/column gap pixel values.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\\\"row o_grid_mode\\\" data-row-count=\\\"13\\\" style=\\\"gap: 20px 10px\\\">\\n   <!-- Content -->\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Delivery Cost Calculation Formula\nDESCRIPTION: Mathematical formula showing how total delivery cost is calculated including rule's delivery cost, margin on rate, and additional margin.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/new_delivery_method.rst#2025-04-23_snippet_0\n\nLANGUAGE: math\nCODE:\n```\nTotal = Rule's~Delivery~Cost + (Margin~on~rate \\times Rule's~Delivery~Cost) + Additional~margin\n```\n\n----------------------------------------\n\nTITLE: Basic Pre-defined Filter Definition in Odoo XML\nDESCRIPTION: This XML snippet illustrates the basic structure for defining a pre-defined, toggleable filter within an Odoo search view using the `<filter>` element. The `string` attribute provides the user-facing label, and the `domain` attribute specifies the Odoo domain (filter criteria) to be applied when the filter is activated.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_50\n\nLANGUAGE: xml\nCODE:\n```\n<search>\n    <filter string=\"LABEL\" domain=\"DOMAIN\"/>\n</search>\n```\n\n----------------------------------------\n\nTITLE: Example CORS Error Message in Browser Console\nDESCRIPTION: This snippet displays a typical Cross-Origin Resource Sharing (CORS) error message that might appear in a web browser's developer console if the CORS setting is not enabled in the KeyCDN zone configuration. It indicates that a resource (like a font) from the CDN domain was blocked from loading on the Odoo domain due to security policy, often fixable by enabling CORS in KeyCDN.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/websites/website/configuration/cdn.rst#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nFont from origin 'http://pulltest-xxxxx.kxcdn.com' has been blocked from loading /shop:1 by\nCross-Origin Resource Sharing policy: No 'Access-Control-Allow-Origin' header is present on the\nrequested resource. Origin 'http://yourdatabase.odoo.com' is therefore not allowed access.\n```\n\n----------------------------------------\n\nTITLE: Adding a White Color Filter to Background (XML)\nDESCRIPTION: Uses o_we_bg_filter and bg-white-85 classes to overlay a semi-transparent white filter (85% opacity) above section content. Serves to soften backgrounds and enhance text clarity. Integrates seamlessly with Odoo Website Builder layouts.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<section>\\n    <div class=\\\"o_we_bg_filter bg-white-85\\\"/>\\n    <div class=\\\"container\\\">\\n        <!-- Content -->\\n    </div>\\n</section>\n```\n\n----------------------------------------\n\nTITLE: Sample Error Stack Trace\nDESCRIPTION: Example of an Owl error stack trace showing both the hook registration location and the actual error source.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/error_handling.rst#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nError: The following error occurred in onMounted: \"My error\"\n  at wrapError\n  at onMounted\n  at MyComponent.setup\n  at new ComponentNode\n  at Root.template\n  at MountFiber._render\n  at MountFiber.render\n  at ComponentNode.initiateRender\n\nCaused by: Error: My error\n  at ParentComponent.someMethod\n  at MountFiber.complete\n  at Scheduler.processFiber\n  at Scheduler.processTasks\n```\n\n----------------------------------------\n\nTITLE: Scaffolding an Odoo Module using Odoo.sh Editor\nDESCRIPTION: Command to create a new Odoo module structure using the odoo-bin scaffold tool from the Odoo.sh editor terminal.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ odoo-bin scaffold my_module ~/src/user/\n```\n\n----------------------------------------\n\nTITLE: Deleting Records in Multiple Languages\nDESCRIPTION: Examples showing how to delete a partner record and then verify that it no longer exists in the database using Odoo's execute_kw method across different programming languages.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'unlink', [[id]])\n# check if the deleted record is still in the database\nmodels.execute_kw(db, uid, password, 'res.partner', 'search', [[['id', '=', id]]])\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'unlink', [[id]])\n# check if the deleted record is still in the database\nmodels.execute_kw(db, uid, password, 'res.partner', 'search', [[['id', '=', id]]])\n```\n\nLANGUAGE: php\nCODE:\n```\n$models->execute_kw($db, $uid, $password, 'res.partner', 'unlink', array(array($id)));\n// check if the deleted record is still in the database\n$models->execute_kw(\n    $db, $uid, $password, 'res.partner', 'search', array(array(array('id', '=', $id)))\n);\n```\n\nLANGUAGE: java\nCODE:\n```\nmodels.execute(\"execute_kw\", asList(\n    db, uid, password,\n    \"res.partner\", \"unlink\",\n    asList(asList(id))));\n// check if the deleted record is still in the database\nasList((Object[])models.execute(\"execute_kw\", asList(\n    db, uid, password,\n    \"res.partner\", \"search\",\n    asList(asList(asList(\"id\", \"=\", 78)))\n)));\n```\n\nLANGUAGE: go\nCODE:\n```\nvar result bool\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"res.partner\", \"unlink\",\n    []any{\n        []int64{id},\n    },\n}, &result); err != nil {\n    log.Fatal(err)\n}\n// check if the deleted record is still in the database\nvar record []any\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"res.partner\", \"search\",\n    []any{[]any{\n        []any{\"id\", \"=\", id},\n    }},\n}, &record); err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for Batch Picking Configuration\nDESCRIPTION: Instructions for enabling batch picking functionality in Odoo Inventory settings and configuring storage locations and multi-step routes\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/picking_methods/batch.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nConfiguration\n=============\n\nTo activate the batch picking option, begin by going to :menuselection:`Inventory app -->\nConfiguration --> Settings`. Under the :guilabel:`Operations` section, check the :guilabel:`Batch,\nWave & Cluster Transfers` box.\n```\n\n----------------------------------------\n\nTITLE: Installing System Libraries for Python Packages\nDESCRIPTION: Command to install system libraries required for Python package compilation\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/source.rst#2025-04-23_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt install python3-pip libldap2-dev libpq-dev libsasl2-dev\n```\n\n----------------------------------------\n\nTITLE: Running Odoo Server on MacOS\nDESCRIPTION: Command to run the Odoo server on MacOS with custom addons path and database configuration\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/source.rst#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /CommunityPath\n$ python3 odoo-bin --addons-path=addons -d mydb\n```\n\n----------------------------------------\n\nTITLE: Pushing the Branch to Your Fork - Git Console\nDESCRIPTION: This snippet pushes the local branch to the contributor's remote fork (‘dev’ alias), setting the upstream for subsequent pushes. Required for opening a pull request on GitHub. Expects that remotes are properly set up and changes are committed. Branch name corresponds to the contribution being made.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development.rst#2025-04-23_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ git push -u dev {CURRENT_BRANCH}-fix-invoices-xyz\n```\n\n----------------------------------------\n\nTITLE: Downloading XML File for Purchase Order in Odoo\nDESCRIPTION: This snippet shows an example of an XML file for a purchase order (PO00017) that can be downloaded from the buyer's portal and uploaded to the seller's Odoo database. The XML follows the Order-X schema, which is commonly used in European countries for EDI.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/advanced/edi.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<P00017.xml>\n```\n\n----------------------------------------\n\nTITLE: Listing Available Canned Responses in Odoo Live Chat\nDESCRIPTION: Displays a list of available canned responses directly within the chat input area for the operator to select from. The operator types two colons (`::`) into the message window. This provides an alternative to remembering and typing specific shortcuts.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/websites/livechat/responses.rst#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n::\n```\n\n----------------------------------------\n\nTITLE: Setting View Presets in Odoo XML Configuration\nDESCRIPTION: Example XML record for presets.xml that deactivates a view. This pattern is used to configure which views should be active or inactive by default in a theme.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"module.view\" model=\"ir.ui.view\">\n      <field name=\"active\" eval=\"False\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Creating a Tip Box in RST Documentation\nDESCRIPTION: This RST directive creates a tip box with information about modifying status color names.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment.rst#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. tip::\n   The names for the three status colors (`In Progress`, `Blocked`, and `Ready for Next Stage`)\n   :ref:`can be modified <recruitment/modify-stages>`, if desired.\n```\n\n----------------------------------------\n\nTITLE: Configuring X-Accel for Filestore Access in Odoo - nginx\nDESCRIPTION: This nginx configuration snippet sets up an internal location for the '/web/filestore' path, mapping it to the Odoo filestore directory using an alias. The 'internal' directive ensures that only nginx can serve content from this location, improving security. Before use, replace '/path/to/odoo/data-dir/filestore' with the correct filestore path; the Odoo '--x-sendfile' CLI flag must be enabled. The configuration is relevant only for NGINX and not required by Apache. Limitations include requiring the correct filestore path and server reload to apply changes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/deploy.rst#2025-04-23_snippet_11\n\nLANGUAGE: nginx\nCODE:\n```\nlocation /web/filestore {\n    internal;\n    alias /path/to/odoo/data-dir/filestore;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GS1 Barcode with FNC1 Separator\nDESCRIPTION: Example of using the FNC1 separator character (\\x1D) to create a flexible-length barcode for lot numbers instead of using a fixed 20-character format.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLOT001\\x1D\n```\n\n----------------------------------------\n\nTITLE: Combining Editable and Rounding Subformulas in Odoo Reporting Engine (plaintext)\nDESCRIPTION: This configuration example presents a mixing of the 'editable' and 'rounding' subformulas in an Odoo report expression. The string 'editable;rounding=2' specifies that the expression is both manually editable and should be rounded to two decimals. No code execution is involved; instead, this string is parsed by Odoo's engine to alter report behavior. The parameters are subformula identifiers separated by a semicolon.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/reporting/customize.rst#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\neditable;rounding=2\n```\n\n----------------------------------------\n\nTITLE: Adding Attachment Preview Widget to Odoo Form View - XML\nDESCRIPTION: This snippet adds an attachment preview widget via an empty div with class o_attachment_preview. It must be used as a child of the form view and requires no additional configuration. The appearance and controls are managed automatically by Odoo if the feature is enabled for the model.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<form>\\n    <sheet>\\n        ...\\n    </sheet>\\n    <div class=\\\"o_attachment_preview\\\"/>\\n<form>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Attribute Assignment with t-att-{$name} in QWeb XML\nDESCRIPTION: Shows how t-att-{$name} can be used to compute and set a single attribute value on an element dynamically in QWeb. The expression in t-att-a is evaluated and set as the value for the 'a' attribute, allowing dynamic construction of attributes during template rendering. The example outputs a <div> with attribute a set to 42.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<div t-att-a=\"42\"/>\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes from Odoo.sh Editor\nDESCRIPTION: Command to push commits from the Odoo.sh editor terminal to the remote repository.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ git push https HEAD:feature-1\n```\n\n----------------------------------------\n\nTITLE: Mathematical Formula for Belgian Withholding Tax Calculation\nDESCRIPTION: Formula for calculating the final withholding tax amount in Belgium. The tax is determined by multiplying the gross thirteenth month salary by the applicable tax rate and subtracting any applicable reductions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll/payroll_localizations/belgium.rst#2025-04-23_snippet_1\n\nLANGUAGE: math\nCODE:\n```\n\\text{Tax} = \\text{Gross Thirteenth Month} \\times \\text{Applicable Tax Rate} - \\text{Reduction (if applicable)}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Field OnChange Trigger in Odoo Views (XML)\nDESCRIPTION: This XML snippet demonstrates how to prevent an `on_change` event from firing for a specific field within an Odoo form view by setting the `on_change` attribute to \"0\". This is useful to avoid unnecessary interface updates or function calls when the field's value is changed by the user.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/orm.rst#2025-04-23_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"name\" on_change=\"0\"/>\n```\n\n----------------------------------------\n\nTITLE: Inserting a Figure with Caption in reStructuredText\nDESCRIPTION: Creates a figure in the document with an image and caption using reStructuredText syntax. This is used to display and describe the Knowledge bookmark icon.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/helpdesk/overview/help_center.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: help_center/help-center-knowledge-bookmark-icon.png\n   :alt: View of a message in Helpdesk focusing on the Knowledge bookmark icon.\n\n   The Knowledge app is represented by the bookmark icon.\n```\n\n----------------------------------------\n\nTITLE: Displaying Upgrade Help Command for On-Premise Installations\nDESCRIPTION: This command displays the general help information and available commands for the Odoo upgrade script. It's useful for on-premise administrators to understand the upgrade options before initiating the process.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/upgrade.rst#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python <(curl -s https://upgrade.odoo.com/upgrade) --help\n```\n\n----------------------------------------\n\nTITLE: Viewing Odoo.sh Working Directory Structure\nDESCRIPTION: Shows the directory structure of an Odoo.sh build, including source code locations, data directories, and log files. This structure helps users understand where to find and edit different components.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/online-editor.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── home\n│    └── odoo\n│         ├── src\n│         │    ├── odoo                Odoo Community source code\n│         │    │    └── odoo-bin       Odoo server executable\n│         │    ├── enterprise          Odoo Enterprise source code\n│         │    ├── themes              Odoo Themes source code\n│         │    └── user                Your repository branch source code\n│         ├── data\n│         │    ├── filestore           database attachments, as well as the files of binary fields\n│         │    └── sessions            visitors and users sessions\n│         └── logs\n│              ├── install.log         Database installation logs\n│              ├── odoo.log            Running server logs\n│              ├── update.log          Database updates logs\n│              └── pip.log             Python packages installation logs\n```\n\n----------------------------------------\n\nTITLE: Implementing a Recursive Dropdown Structure in Odoo XML\nDESCRIPTION: This code snippet shows how to create a recursive dropdown structure using Odoo's templating system. It uses a recursive template call to generate a tree-like dropdown menu from a data structure.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\"addon.MainTemplate\">\n  <div>\n    <t t-call=\"addon.RecursiveDropdown\">\n      <t t-set=\"name\" t-value=\"'Main Menu'\" />\n      <t t-set=\"items\" t-value=\"state.menuItems\" />\n    </t>\n  </div>\n</t>\n\n<t t-name=\"addon.RecursiveDropdown\">\n  <Dropdown>\n    <button t-esc=\"name\"></button>\n    <t t-set-slot=\"content\">\n      <t t-foreach=\"items\" t-as=\"item\" t-key=\"item.id\">\n\n        <!-- If this item has no child: make it a <DropdownItem/> -->\n        <DropdownItem t-if=\"!item.childrenTree.length\" onSelected=\"() => this.onItemSelected(item)\" t-esc=\"item.name\"/>\n\n        <!-- Else: recursively call the current dropdown template. -->\n        <t t-else=\"\" t-call=\"addon.RecursiveDropdown\">\n          <t t-set=\"name\" t-value=\"item.name\" />\n          <t t-set=\"items\" t-value=\"item.childrenTree\" />\n        </t>\n      </t>\n    </t>\n  </Dropdown>\n</t>\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Example with Examples\nDESCRIPTION: RST markup showing example directive with expense cost scenarios\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/expenses.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. example::\n   Here are some examples for when to set a specific :guilabel:`Cost` on a product vs. leaving the\n   :guilabel:`Cost` at `0.00`:\n\n   - **Meals**: set the :guilabel:`Cost` to `0.00`. When an employee logs an expense for a meal,\n     they enter the actual amount of the bill and will be reimbursed for that amount. An expense for\n     a meal costing $95.23 would equal a reimbursement for $95.23.\n   - **Mileage**: set the :guilabel:`Cost` to `0.30`. When an employee logs an expense for\n     \"mileage\", they enter the number of miles driven in the :guilabel:`Quantity` field, and are\n     reimbursed 0.30 per mile they entered. An expense for 100 miles would equal a reimbursement for\n     $30.00.\n   - **Monthly Parking**: set the :guilabel:`Cost` to `75.00`. When an employee logs an expense for\n     \"monthly parking\", the reimbursement would be for $75.00.\n   - **Expenses**: set the :guilabel:`Cost` to `0.00`. When an employee logs an expense that is not\n     a meal, mileage, or monthly parking, they use the generic :guilabel:`Expenses` product. An\n     expense for a laptop costing $350.00 would be logged as an :guilabel:`Expenses` product, and\n     the reimbursement would be for $350.00.\n```\n\n----------------------------------------\n\nTITLE: Label Element in Form View (XML)\nDESCRIPTION: Demonstrates the use of the 'label' element to manually display a field's label when it's not automatically shown.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    <div class=\"col col-md-auto\">\n        <label for=\"FIELD_NAME\" string=\"LABEL\"/>\n        <div>\n            <field name=\"FIELD_NAME\" class=\"oe_inline\"/>\n        </div>\n    </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Inspecting Model Field Metadata with fields_get via XML-RPC in Go\nDESCRIPTION: This Go code pulls 'string', 'help', and 'type' attributes for each field in res.partner through XML-RPC's 'fields_get'. The results are parsed into a map; designed for schema introspection before data manipulation. Setup requires a ready models.Call client and user credentials.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_29\n\nLANGUAGE: go\nCODE:\n```\nrecordFields := map[string]string{}\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"res.partner\", \"fields_get\",\n    []any{},\n    map[string][]string{\n        \"attributes\": {\"string\", \"help\", \"type\"},\n    },\n}, &recordFields); err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Track and Bill Time Features in RST\nDESCRIPTION: This RST snippet demonstrates how to enable the Track and Bill Time features for a Helpdesk team, including selecting a project for timesheets.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/helpdesk/advanced/track_and_bill.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nTo view and enable the *Track & Bill Time* features on a **Helpdesk** team, first navigate to\n:menuselection:`Helpdesk app --> Configuration --> Helpdesk Teams`. Then, select a team from the\nlist, or create a :doc:`new one <../../helpdesk>`. This reveals a team's settings page.\n\nOn the team's settings page, scroll to the :guilabel:`Track & Bill Time` section. Check the boxes\nlabeled :guilabel:`Timesheets` and :guilabel:`Time Billing`.\n\nAfter the :guilabel:`Timesheets` box is checked, a new field appears, labeled :guilabel:`Project`.\n\n.. note::\n   If this is the first time this feature has been enabled on this database, the page may need to be\n   manually saved and refreshed before the :guilabel:`Project` field appears.\n\nThe project selected in this field represents where all the timesheets for this team's tickets are\nrecorded. Click into the :guilabel:`Project` drop-down menu to select a project.\n\nTo create a new project where the timesheets are recorded, click into the :guilabel:`Project`\ndrop-down menu, type a name for the project, and then click :guilabel:`Create` from the drop-down\nmenu beneath.\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Handling in reStructuredText for Attendance\nDESCRIPTION: This snippet shows how to document error handling procedures for attendance entries using reStructuredText. It includes information on identifying errors and steps to fix them.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/attendances.rst#2025-04-23_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\nErrors\n------\n\nEntries that contain an error appear on the overview dashboard in red. In the :guilabel:`Gantt\nview`, the entry appears with a red background. If in the :guilabel:`List view`, the entry text\nappears in red.\n\nAn error typically occurs when an employee has checked in but has not checked out within the last\n24 hours, or when an employee has a check in and check out period spanning over 16 hours.\n\nTo fix the error, the attendance entry must be modified or deleted. Click on the entry to reveal a\npop-up containing the details for that particular entry. To modify the :guilabel:`Check In` and/or\n:guilabel:`Check Out` information, click on the :guilabel:`Check In` or :guilabel:`Check Out` field\nand a calendar selector appears. Click on the desired date, then use the time selector beneath the\ncalendar to select the specific time for the entry. When the information is correct, click\n:guilabel:`Apply.`\n```\n\n----------------------------------------\n\nTITLE: Disabling Background Color Option of a Specific Column (XML)\nDESCRIPTION: Includes the s_col_no_bgcolor class in a specific column to prevent color picker customization in the Website Builder. Useful for strict branding or design requirements within a layout.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\\\"col-lg-* s_col_no_bgcolor\\\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Copy with Debugger in Python\nDESCRIPTION: A method implementation for copying Partner objects with integrated debugger breakpoint. The method ensures single record processing, handles name generation for the copy, and maintains default values.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/setup_guide.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef copy(self, default=None):\n    import ipdb; ipdb.set_trace()\n    self.ensure_one()\n    chosen_name = default.get('name') if default else ''\n    new_name = chosen_name or _('%s (copy)') % self.name\n    default = dict(default or {}, name=new_name)\n    return super(Partner, self).copy(default)\n```\n\n----------------------------------------\n\nTITLE: Assigning Compatibility System Attributes to Snippets (XML)\nDESCRIPTION: This XML snippet shows how to tag website snippets with data attributes ('data-vcss', 'data-vxml', 'data-js') for version control and compatibility, enabling the system to load appropriate file versions. Dependencies are Odoo's Website Builder and the supporting backend for handling these attributes. Inputs are section attributes; output is markup signaling which resource versions to use. Limitations: must coordinate with appropriately versioned static resource files.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<section class=\\\"s_snippet_name\\\" data-vcss=\\\"001\\\" data-vxml=\\\"001\\\" data-js=\\\"001\\\">\\n    <!-- Content -->\\n</section>\n```\n\n----------------------------------------\n\nTITLE: Calculating Subcontracted Product Valuation in RST\nDESCRIPTION: This snippet demonstrates the equation for calculating the total valuation of a subcontracted product in Odoo. It includes variables for component costs, manufacturing price, shipping costs, dropshipping costs, and other associated costs.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/subcontracting.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. math::\n   P = C + M + S + D + x\n```\n\n----------------------------------------\n\nTITLE: Displaying Odoo Test Command Line Options (Console)\nDESCRIPTION: Shows how to display the help message for the `odoo-bin` command, specifically focusing on the options available for configuring and running tests. This includes options like specifying a test file, enabling tests, filtering by tags, and setting directories for screencasts and screenshots.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/unit_tests.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin -h\nUsage: odoo-bin [options]\n\nOptions:\n--version             show program's version number and exit\n-h, --help            show this help message and exit\n\n[...]\n\nTesting Configuration:\n  --test-file=TEST_FILE\n                      Launch a python test file.\n  --test-enable       Enable unit tests.\n  --test-tags=TEST_TAGS\n                      Comma-separated list of specs to filter which tests to\n                      execute. Enable unit tests if set. A filter spec has\n                      the format: [-][tag][/module][:class][.method] The '-'\n                      specifies if we want to include or exclude tests\n                      matching this spec. The tag will match tags added on a\n                      class with a @tagged decorator (all Test classes have\n                      'standard' and 'at_install' tags until explicitly\n                      removed, see the decorator documentation). '*' will\n                      match all tags. If tag is omitted on include mode, its\n                      value is 'standard'. If tag is omitted on exclude\n                      mode, its value is '*'. The module, class, and method\n                      will respectively match the module name, test class\n                      name and test method name. Example: --test-tags\n                      :TestClass.test_func,/test_module,external  Filtering\n                      and executing the tests happens twice: right after\n                      each module installation/update and at the end of the\n                      modules loading. At each stage tests are filtered by\n                      --test-tags specs and additionally by dynamic specs\n                      'at_install' and 'post_install' correspondingly.\n  --screencasts=DIR   Screencasts will go in DIR/{db_name}/screencasts.\n  --screenshots=DIR   Screenshots will go in DIR/{db_name}/screenshots.\n                      Defaults to /tmp/odoo_tests.\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for Salary Package Benefits Configuration\nDESCRIPTION: RST markup explaining how to configure employee benefits in Odoo, including benefit types, display options, and required documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll.rst#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. example::\n   A company has two structure types, one labeled :guilabel:`Employee`, and another labeled\n   :guilabel:`Intern`. The :guilabel:`Employee` structure type contains the benefit of using a\n   company car, while the :guilabel:`Intern` structure type has a meal voucher benefit available.\n\n   A person hired under the :guilabel:`Employee` structure type can use the company car benefit, but\n   cannot have meal vouchers. A person hired under the :guilabel:`Intern` structure type would have\n   meal voucher benefits available to them, not the use of a company car.\n```\n\n----------------------------------------\n\nTITLE: Linking Git Repository with Your Fork - Git Console\nDESCRIPTION: These commands link your local Odoo repository to your personal fork on GitHub via SSH, enabling pushing changes to your fork rather than the main repository. Replace <your_github_account> with your GitHub username. Requires Git, an existing fork on GitHub, and SSH key configuration. Used for both Odoo's Community and Enterprise repositories depending on access.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development.rst#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cd /CommunityPath\n$ git remote add dev git@github.com:<your_github_account>/odoo.git\n```\n\nLANGUAGE: console\nCODE:\n```\n$ cd /EnterprisePath\n$ git remote add dev git@github.com:<your_github_account>/enterprise.git\n```\n\n----------------------------------------\n\nTITLE: Removing odoo.com Domain Constraint in Gmail Plugin (TypeScript)\nDESCRIPTION: This snippet demonstrates the removal of a domain restriction in the plugin source file login.ts (TypeScript), which enforces that URLs must be subdomains of odoo.com. Deleting these lines permits on-premise Odoo instances with custom domains to connect to the Gmail Plugin. This code change is a prerequisite for on-premise installations where the domain is not odoo.com but a custom server domain. Removing these lines disables the client-side URL validation, so additional security review is recommended if deploying broadly.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/integrations/mail_plugins/gmail.rst#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nif (!/^https:\\/\\/(\\/[^\\/?]*\\.)?odoo\\.com(\\/|$)/.test(validatedUrl)) {\\n     return notify(\"The URL must be a subdomain of odoo.com\");\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing RTLcss on MacOS\nDESCRIPTION: Command to install RTLcss globally using npm on MacOS for right-to-left language support\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/source.rst#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo npm install -g rtlcss\n```\n\n----------------------------------------\n\nTITLE: Enabling SQL Query Debug Logging via Odoo Command-line\nDESCRIPTION: A shortcut to enable detailed logging of SQL queries executed by Odoo. This is equivalent to setting `--log-handler=odoo.sql_db:DEBUG`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_33\n\nLANGUAGE: console\nCODE:\n```\n--log-sql\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for Picking Methods\nDESCRIPTION: ReStructuredText directive that creates a table of contents listing different picking method documentation pages. Includes options for batch, cluster and wave picking methods.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/picking_methods.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   picking_methods/batch\n   picking_methods/cluster\n   picking_methods/wave\n```\n\n----------------------------------------\n\nTITLE: Connecting to Builds via SSH in Bash\nDESCRIPTION: Command to establish an SSH connection to a build. Requires the build ID and domain name as parameters.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/branches.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ssh <build_id>@<domain>\n```\n\n----------------------------------------\n\nTITLE: Standard Apache License 2.0 Text Template\nDESCRIPTION: This is the standard text for the Apache License, Version 2.0. It should be included in source files, typically within comments, as per the license requirements. The placeholders `{yyyy}` and `{name of copyright owner}` need to be replaced with the actual year and copyright owner's name.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/extensions/odoo_theme/static/lib/odoo_ui_icons/LICENSE.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright {yyyy} {name of copyright owner}\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Inspecting estate_property Table Structure After Adding Basic Fields via psql\nDESCRIPTION: Shows the expected output of the `psql \\d estate_property;` command after adding several basic fields (like name, description, price, etc.) to the `estate.property` model in Odoo. This verifies the ORM has correctly created the corresponding columns with appropriate SQL types in the database table, including standard Odoo audit fields (`id`, `create_uid`, `create_date`, `write_uid`, `write_date`) and foreign key constraints for user tracking.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/03_basicmodel.rst#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ psql -d rd-demo\n\nrd-demo=# \\d estate_property;\n                                                    Table \"public.estate_property\"\n    Column       |            Type             | Collation | Nullable |                   Default\n--------------------+-----------------------------+-----------+----------+---------------------------------------------\nid                 | integer                     |           | not null | nextval('estate_property_id_seq'::regclass)\ncreate_uid         | integer                     |           |          |\ncreate_date        | timestamp without time zone |           |          |\nwrite_uid          | integer                     |           |          |\nwrite_date         | timestamp without time zone |           |          |\nname               | character varying           |           |          |\ndescription        | text                        |           |          |\npostcode           | character varying           |           |          |\ndate_availability  | date                        |           |          |\nexpected_price     | double precision            |           |          |\nselling_price      | double precision            |           |          |\nbedrooms           | integer                     |           |          |\nliving_area        | integer                     |           |          |\nfacades            | integer                     |           |          |\ngarage             | boolean                     |           |          |\ngarden             | boolean                     |           |          |\ngarden_area        | integer                     |           |          |\ngarden_orientation | character varying           |           |          |\nIndexes:\n    \"estate_property_pkey\" PRIMARY KEY, btree (id)\nForeign-key constraints:\n    \"estate_property_create_uid_fkey\" FOREIGN KEY (create_uid) REFERENCES res_users(id) ON DELETE SET NULL\n    \"estate_property_write_uid_fkey\" FOREIGN KEY (write_uid) REFERENCES res_users(id) ON DELETE SET NULL\n```\n\n----------------------------------------\n\nTITLE: Documenting Database Functions for Spreadsheets - reStructuredText\nDESCRIPTION: This snippet catalogs database formula functions in spreadsheet software using a list-table in reStructuredText, listing names, required arguments, and links to Excel's documentation for each function. It supports Odoo documentation builds and can be compiled by Sphinx without special extensions. The content clarifies dependencies and provides external references for each function's technical specification.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/productivity/spreadsheet/functions.rst#2025-04-23_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Name and arguments\n     - Description or link\n   * - DAVERAGE(database, field, criteria)\n     - `Excel DAVERAGE article <https://support.microsoft.com/office/daverage-function-a6a2d5ac-4b4b-48cd-a1d8-7b37834e5aee>`_\n   * - DCOUNT(database, field, criteria)\n     - `Excel DCOUNT article <https://support.microsoft.com/office/dcount-function-c1fc7b93-fb0d-4d8d-97db-8d5f076eaeb1>`_\n   * - DCOUNTA(database, field, criteria)\n     - `Excel DCOUNTA article <https://support.microsoft.com/office/dcounta-function-00232a6d-5a66-4a01-a25b-c1653fda1244>`_\n   * - DGET(database, field, criteria)\n     - `Excel DGET article <https://support.microsoft.com/office/dget-function-455568bf-4eef-45f7-90f0-ec250d00892e>`_\n   * - DMAX(database, field, criteria)\n     - `Excel DMAX article <https://support.microsoft.com/office/dmax-function-f4e8209d-8958-4c3d-a1ee-6351665d41c2>`_\n   * - DMIN(database, field, criteria)\n     - `Excel DMIN article <https://support.microsoft.com/office/dmin-function-4ae6f1d9-1f26-40f1-a783-6dc3680192a3>`_\n   * - DPRODUCT(database, field, criteria)\n     - `Excel DPRODUCT article <https://support.microsoft.com/office/dproduct-function-4f96b13e-d49c-47a7-b769-22f6d017cb31>`_\n   * - DSTDEV(database, field, criteria)\n     - `Excel DSTDEV article <https://support.microsoft.com/office/dstdev-function-026b8c73-616d-4b5e-b072-241871c4ab96>`_\n   * - DSTDEVP(database, field, criteria)\n     - `Excel DSTDEVP article <https://support.microsoft.com/office/dstdevp-function-04b78995-da03-4813-bbd9-d74fd0f5d94b>`_\n   * - DSUM(database, field, criteria)\n     - `Excel DSUM article <https://support.microsoft.com/office/dsum-function-53181285-0c4b-4f5a-aaa3-529a322be41b>`_\n   * - DVAR(database, field, criteria)\n     - `Excel DVAR article <https://support.microsoft.com/office/dvar-function-d6747ca9-99c7-48bb-996e-9d7af00f3ed1>`_\n   * - DVARP(database, field, criteria)\n     - `Excel DVARP article <https://support.microsoft.com/office/dvarp-function-eb0ba387-9cb7-45c8-81e9-0394912502fc>`_\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Debugger Breakpoint in Odoo.sh Python Code\nDESCRIPTION: Code snippet showing how to add a conditional debugger breakpoint in Python code for Odoo.sh. The condition ensures the debugger only activates when running from a shell.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/advanced/containers.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nif sys.__stdin__.isatty():\n    import pdb; pdb.set_trace()\n```\n\n----------------------------------------\n\nTITLE: Defining toctree for Odoo Quality Documentation in RST\nDESCRIPTION: This RST code snippet defines the table of contents for the Odoo Quality documentation. It includes links to quality management and quality check types sections.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/quality.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   quality/quality_management\n   quality/quality_check_types\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Footer Template in XML\nDESCRIPTION: Defines the structure for a custom footer template in Odoo Website Builder.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_37\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"footer\" model=\"ir.ui.view\">\n   <field name=\"name\">Airproof Footer</field>\n   <field name=\"type\">qweb</field>\n   <field name=\"key\">website_airproof.footer</field>\n   <field name=\"inherit_id\" ref=\"website.layout\"/>\n   <field name=\"mode\">extension</field>\n   <field name=\"arch\" type=\"xml\">\n      <xpath expr=\"//div[@id='footer']\" position=\"replace\">\n         <div id=\"footer\" class=\"oe_structure oe_structure_solo\" t-ignore=\"true\" t-if=\"not no_footer\">\n            <!-- Content -->\n         </div>\n      </xpath>\n   </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Importing Serial Numbers in Odoo\nDESCRIPTION: Example showing how to input serial numbers 124 and 125 into the Import Lots pop-up window, while keeping existing serial numbers\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/product_management/product_tracking/serial_numbers.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n124\n125\n```\n\n----------------------------------------\n\nTITLE: Checking Odoo Server Version via XML-RPC - Java (Apache XML-RPC)\nDESCRIPTION: Employs the Apache XML-RPC library in Java to invoke the 'version' meta-call on the Odoo /xmlrpc/2/common endpoint. This snippet sets up the configuration and performs the method call, expecting a dictionary/map result.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nfinal XmlRpcClientConfigImpl common_config = new XmlRpcClientConfigImpl();\\ncommon_config.setServerURL(new URL(String.format(\"%s/xmlrpc/2/common\", url)));\\nclient.execute(common_config, \"version\", emptyList());\n```\n\n----------------------------------------\n\nTITLE: Referencing Recruitment Stage Editing in RST\nDESCRIPTION: This RST directive creates a reference to the 'Edit stage' section within the recruitment documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. _recruitment/edit-stage:\n```\n\n----------------------------------------\n\nTITLE: Correct and Incorrect Translation Parameter Usage Odoo JavaScript\nDESCRIPTION: These JavaScript examples contrast bad and good practices when splitting or combining translatable UI strings. Incorrect usage splits sentences, harming translation context and correctness, whereas the correct usage provides a single contiguous message containing variables for more meaningful translation. Intended for UI display logic. Inputs are UI string fragments and variables; outputs are concatenated or formatted messages. Relies on Odoo's web core translation utilities.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/translations.rst#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n_t(\"You have \") + invoices.length + _t(\" invoices waiting\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\n_.str.sprintf(_t(\"You have %s invoices wainting\"), invoices.length);\n```\n\n----------------------------------------\n\nTITLE: Declaring the Custom View in Odoo Arch Record (XML)\nDESCRIPTION: This arch XML code registers a new custom view using the <record> tag, assigning it a unique id and linking it to a model. The custom view type is referenced in the arch field together with any required attributes. This ensures the Odoo backend recognizes and loads the custom client-side view when displaying records for the specified model.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_view.rst#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n...\n<record id=\"my_beautiful_view\" model=\"ir.ui.view\">\n  <field name=\"name\">my_view</field>\n  <field name=\"model\">my_model</field>\n  <field name=\"arch\" type=\"xml\">\n      <beautiful fieldFromTheArch=\"res.partner\"/>\n  </field>\n</record>\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring SPF DNS Record in Bash\nDESCRIPTION: This snippet provides the required value for a DNS TXT record to set up SPF (Sender Policy Framework) for domains sending email via Odoo. To use, add or update your domain's TXT record with the provided string. This authenticates servers allowed to send on behalf of your domain and is essential when using a custom domain with Odoo's email server. Requires access to your DNS provider's management panel. Inputs and outputs depend on DNS provider; expected input is a TXT record, with successful propagation allowing compliant email deliverability.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/email_communication/email_domain.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nv=spf1 include:_spf.odoo.com ~all\n```\n\n----------------------------------------\n\nTITLE: FEC CSV File Format Specification\nDESCRIPTION: CSV file format for French FEC accounting data with specific technical requirements including UTF-8 encoding, various separators (;, |, ',', TAB), and line terminators (\\r\\n, \\n). Dates must follow the %Y%m%d format.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/france.rst#2025-04-23_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nJournalCode;JournalLib;EcritureNum;EcritureDate;CompteNum;CompteLib;CompAuxNum;CompAuxLib;PieceRef;PieceDate;EcritureLib;Debit;Credit;EcritureLet;DateLet;ValidDate;Montantdevise;Idevise\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Color Palettes in Odoo SCSS\nDESCRIPTION: Shows how to extend the default Odoo color palettes (`$o-color-palettes`) using SCSS, typically within a theme's `primary_variables.scss` file. This snippet merges a new custom palette named 'airproof' into the existing map using `map-merge`. It defines specific background color variables (`o-cc1-bg`, `o-cc5-bg`) by mapping them to predefined Odoo color variables (`o-color-5`, `o-color-1`), allowing theme-specific color customization.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_15\n\nLANGUAGE: scss\nCODE:\n```\n$o-color-palettes: map-merge($o-color-palettes,\n   (\n      'airproof': (\n         'o-cc1-bg':                     'o-color-5',\n         'o-cc5-bg':                     'o-color-1',\n      ),\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Example of header Content in Odoo Form XML\nDESCRIPTION: This example shows a typical implementation of the `<header>` element in an Odoo form view. It includes a conditional workflow button ('Reset') and a status bar field ('state') to visualize the record's stage.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<header>\n    <button string=\"Reset\" type=\"object\" name=\"set_draft\" invisible=\"state != 'done'\"/>\n    <field name=\"state\" widget=\"statusbar\" statusbar_visible=\"draft,posted\" options=\"{'clickable': 1}\"/>\n</header>\n```\n\n----------------------------------------\n\nTITLE: NGINX Static File Serving Configuration\nDESCRIPTION: NGINX configuration for serving static files with Content Security Policy headers.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/deploy.rst#2025-04-23_snippet_10\n\nLANGUAGE: nginx\nCODE:\n```\nmap $sent_http_content_type $content_type_csp {\n    default \"\";\n    ~image/ \"default-src 'none'\";\n}\n\nserver {\n    # the rest of the configuration\n\n    location @odoo {\n        # copy-paste the content of the / location block\n    }\n\n    # Serve static files right away\n    location ~ ^/[^/]+/static/.+$ {\n        # root and try_files both depend on your addons paths\n        root ...;\n        try_files ... @odoo;\n        expires 24h;\n        add_header Content-Security-Policy $content_type_csp;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Heading Sizing Classes with Embedded Spans - XML/HTML\nDESCRIPTION: These XML/HTML snippets show how to apply heading size classes to text by wrapping it in a <span> with the appropriate class (e.g., h1-fs, h2-fs, o_small-fs). Suitable for Odoo website templates, they demonstrate flexibility in sizing headings independently of the HTML tag used. Inputs are any text elements; outputs are visually adjusted font sizes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<!-- h2 sized like an h1 -->\n<h2><span class=\"h1-fs\">Heading</span></h2>\n\n<!-- h2 sized with other heading sizes -->\n<h2><span class=\"h2-fs\">Heading</span></h2>\n<h2><span class=\"h3-fs\">Heading</span></h2>\n<h2><span class=\"h4-fs\">Heading</span></h2>\n<h2><span class=\"h5-fs\">Heading</span></h2>\n<h2><span class=\"h6-fs\">Heading</span></h2>\n\n<!-- h2 sized like a normal paragraph (base size, 16px by default) -->\n<h2><span class=\"base-fs\">Heading</span></h2>\n\n<!-- h2 sized like a small text (14px by default) -->\n<h2><span class=\"o_small-fs\">Heading</span></h2>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Remote for odoo-dev Shared Fork\nDESCRIPTION: For Odoo employees, this configures the Git remote 'dev' to point to the shared `odoo-dev/tutorials` fork and sets the push URL for 'origin' to prevent accidental pushes to the main repository. This setup facilitates collaborative work and code review on tutorials within Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/setup_guide.rst#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ cd /tutorials\n$ git remote add dev git@github.com:odoo-dev/tutorials.git\n$ git remote set-url --push origin you_should_not_push_on_this_repository\n```\n\n----------------------------------------\n\nTITLE: Navigating to Generate Payslips in Odoo\nDESCRIPTION: This RST snippet provides a reference to navigate to the correct time period for generating payslips in Odoo. It also includes a tip about resolving conflicts before generating payslips.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll/work_entries.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nTo generate payslips, :ref:`navigate to the time period <payroll/adjust-view>` the payslips should\nbe generated for. Ensure the :guilabel:`Conflicting` filter is removed. When the desired pay period\nis displayed, click the :guilabel:`Generate Payslips` button.\n\n.. tip::\n   If the :guilabel:`Generate Payslips` button is not active (appears pale purple, instead of dark\n   purple), that indicates there are conflicts, or the date selected includes dates in the future.\n   Resolve all conflicts before generating payslips.\n```\n\n----------------------------------------\n\nTITLE: Describing Odoo Addon Controllers Directory Structure - plaintext - text\nDESCRIPTION: This snippet showcases the recommended organization for controller files in an Odoo module, including both main and inherited controllers. It highlights naming conventions for main controller files and deprecated alternatives. This structural template guides correct file placement and modular code organization.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\naddons/plant_nursery/\n|-- controllers/\n|   |-- plant_nursery.py\n|   |-- portal.py (inheriting portal/controllers/portal.py)\n|   |-- main.py (deprecated, replaced by plant_nursery.py)\n```\n\n----------------------------------------\n\nTITLE: Compressing PNG Images with pngquant - Console\nDESCRIPTION: Illustrates compressing PNG images by using the 'pngquant' tool in the console, followed by moving the optimized output to replace the original. 'pngquant' is required as a dependency. The first command compresses an image at the given path, producing a new file with '-fs8' appended (e.g., 'image-fs8.png'); the second command replaces the original image. The process reduces image file size without significant quality loss; requires bash and that 'pngquant' is installed.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation.rst#2025-04-23_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ pngquant path/to/image.png\n$ mv path/to/image-fs8.png path/to/image.png\n```\n\n----------------------------------------\n\nTITLE: Navigating to Allocation Management in Odoo (RST)\nDESCRIPTION: Instructions for accessing the Allocations management section in Odoo. This snippet shows the menu path to view allocation requests that need approval.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/time_off/management.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n:menuselection:`Time Off app --> Management --> Allocations`\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Daily Operations in Odoo Documentation\nDESCRIPTION: A reStructuredText (RST) toctree directive that organizes the daily operations documentation structure. It includes links to various operation guides like adjustments, receipts, deliveries, transfers, and barcode nomenclature.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/barcode/operations.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :titlesonly:\n   :glob:\n\n   operations/adjustments\n   operations/receipts_deliveries\n   operations/process_transfers\n   operations/transfers_scratch\n   operations/barcode_nomenclature\n   operations/gs1_nomenclature\n   operations/gs1_usage\n```\n\n----------------------------------------\n\nTITLE: Installing Odoo Dependencies on Debian/Ubuntu\nDESCRIPTION: Command to install required Odoo dependencies using the debinstall script\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/source.rst#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ cd odoo #CommunityPath\n$ sudo ./setup/debinstall.sh\n```\n\n----------------------------------------\n\nTITLE: Journal Entry for Outstanding Account Method (Initial Payment)\nDESCRIPTION: This snippet shows the journal entry created when recording a check payment using the outstanding account method. The payment moves the amount from Accounts Receivable to Outstanding Receipts.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/payments/checks.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n+----------------------+-------------------+----------+----------+\n| Account              | Statement Match   | Debit    | Credit   |\n+======================+===================+==========+==========+\n| Account Receivable   |                   |          | 100.00   |\n+----------------------+-------------------+----------+----------+\n| Outstanding Receipts |                   | 100.00   |          |\n+----------------------+-------------------+----------+----------+\n```\n\n----------------------------------------\n\nTITLE: Setting Precision for Float Field in XML\nDESCRIPTION: Demonstrates how to specify the precision for a float field using the 'digits' attribute, which determines how many decimal places are displayed.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"factor\" digits=\"[42,5]\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Initial Model Data with CSV - Odoo Modules - text\nDESCRIPTION: Demonstrates the structure and contents of a CSV file used to import initial data (such as country states) for an Odoo model. Requires the file to be saved in a module's 'data' folder and referenced in the '__manifest__.py' file. Fields include external IDs and references, with 'id' for unique identification, 'country_id:id' linking to the country, 'name' as the record name, and 'code' for the code of the state. The import is only processed during module installation or update and fields referenced must exist in the model definition.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/04_securityintro.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"\\\"id\\\",\\\"country_id:id\\\",\\\"name\\\",\\\"code\\\"\\nstate_au_1,au,\\\"Australian Capital Territory\\\",\\\"ACT\\\"\\nstate_au_2,au,\\\"New South Wales\\\",\\\"NSW\\\"\\nstate_au_3,au,\\\"Northern Territory\\\",\\\"NT\\\"\\nstate_au_4,au,\\\"Queensland\\\",\\\"QLD\\\"\\n...\"\n```\n\n----------------------------------------\n\nTITLE: Resetting Odoo Source Code to Official Version\nDESCRIPTION: Command to discard local changes and reset the Odoo source code to the official version from Github. This is useful when there are conflicts during the update process.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/update.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit reset --hard\n```\n\n----------------------------------------\n\nTITLE: Using data-exclude in XML\nDESCRIPTION: Demonstrates how to exclude specific elements from being selected by the option rule. This example selects all ul elements except those with the .navbar-nav class.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n<div\n   data-selector=\"ul\"\n   data-exclude=\".navbar-nav\">\n```\n\n----------------------------------------\n\nTITLE: Using SCALE<X> Parameter for Receipt Scaling\nDESCRIPTION: The `SCALE<X>` parameter (where X is a percentage value, e.g., `SCALE75`) added to an Epson printer's name in CUPS adjusts the scale of the printed output. This is used to correct receipts that are printed too large or too small.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/iot/devices/printer.rst#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nSCALE<X>\n```\n\n----------------------------------------\n\nTITLE: Responsive Column Visibility in Odoo\nDESCRIPTION: XML template showing how to implement responsive column visibility using Bootstrap grid system and Odoo visibility classes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_42\n\nLANGUAGE: xml\nCODE:\n```\n<section class=\"s_text_block o_cc o_cc1 o_colored_level pt16 pb16\" data-snippet=\"s_text_block\" name=\"Text\">\n   <div class=\"container s_allow_columns\">\n      <div class=\"row\">\n         <div class=\"col-12 col-lg-6 d-none d-lg-block o_snippet_mobile_invisible\">\n            Column 1\n         </div>\n         <div class=\"col-12 col-lg-6\">\n            Column 2\n         </div>\n      </div>\n   </div>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Adjusting Margins in ZPL Label\nDESCRIPTION: Example of modifying the x-coordinate starting position to prevent text cutoff. Changes FT100,80 to FT0,80 to accommodate longer product names.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/zebra.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n^XA^CI28\n^FT100,80^A0N,40,30^FD[E-COM11] Cabinet with Doors (wood: Cherry, handles: brass)^FS\n...\n^XZ\n```\n\nLANGUAGE: xml\nCODE:\n```\n^XA^CI28\n^FT0,80^A0N,40,30^FD[E-COM11] Cabinet with Doors (wood: Cherry, handles: brass)^FS\n...\n^XZ\n```\n\n----------------------------------------\n\nTITLE: Configuring Postfix Alias for Odoo Email Gateway\nDESCRIPTION: This snippet shows how to set up an alias in Postfix's configuration file to route incoming emails to the Odoo mailgate script. It requires specifying the database name, user ID, and password.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/email_gateway.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nemail@address: \"|/odoo-directory/addons/mail/static/scripts/odoo-mailgate.py -d <database-name> -u <userid> -p <password>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents and Doc Options reStructuredText\nDESCRIPTION: This snippet configures documentation display settings such as the search bar, page content, and table of contents, followed by a toctree directive that creates a hierarchical table of contents linking to user guides for different Odoo applications. It requires Sphinx or a similar reStructuredText-compatible documentation generator and expects referenced documentation files to exist in the specified subdirectories. The output is a navigable, multi-level documentation structure, but proper file paths and configuration integration into the docs build system are necessary for correct processing.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n:show-content:\n:hide-page-toc:\n:show-toc:\n\n\n=========\nUser Docs\n=========\n\nDiscover our user guides and configuration tutorials per application.\n\n\n.. toctree::\n    :maxdepth: 2\n\n    applications/essentials\n    applications/finance\n    applications/sales\n    applications/websites\n    applications/inventory_and_mrp\n    applications/hr\n    applications/marketing\n    applications/services\n    applications/productivity\n    applications/studio\n    applications/general\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Username and Email (Git, Console Commands) - Console\nDESCRIPTION: This snippet configures Git with the user's name and email address to properly identify authorship of future contributions in commit metadata. Dependencies: a working Git installation. The parameters \"user.name\" and \"user.email\" must match your actual name and the email registered with GitHub. Inputs are usernames/emails; outputs are the setting of these values globally for Git on your system. This is a necessary first step before committing code to the Odoo documentation repository.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"youremail@example.com\"\n\n```\n\n----------------------------------------\n\nTITLE: Running Upgrade Script for Production Database in On-premise Deployment\nDESCRIPTION: This command downloads and executes the Odoo upgrade script to upgrade a production database to a target version. It requires the database name and target version as parameters.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/upgrade.rst#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ python <(curl -s https://upgrade.odoo.com/upgrade) production -d <your db name> -t <target version>\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Delivery Method Implementation Example\nDESCRIPTION: Example showing how to add a delivery product with specific pricing to a sales order.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. example::\n   `Furniture Delivery`, a delivery product with a fixed rate of `$200`, is added to sales order\n   `S00088`.\n```\n\n----------------------------------------\n\nTITLE: Example KeyCDN Zone URL\nDESCRIPTION: This snippet illustrates an example 'Zone URL' generated by KeyCDN after successfully deploying a new pull zone (e.g., 'pulltest-xxxxx.kxcdn.com'). This unique URL, provided by KeyCDN, needs to be copied and used in the Odoo instance configuration.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/websites/website/configuration/cdn.rst#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npulltest-xxxxx.kxcdn.com\n```\n\n----------------------------------------\n\nTITLE: Mapping Documentation Path Redirects in Plaintext\nDESCRIPTION: Defines a set of file path mappings from previous documentation structure to a new, maintainable format. Comments are included to clarify bulk renaming patterns using globs (e.g., /* -> /maintain/*). No dependencies are required, but users should have an understanding of Odoo's documentation structure. Inputs are file path pairs; output is informational for maintainers or for use with automation scripts. A limitation is that this format is purely informational and not machine-executable without additional parsing.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/13.0.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nadministration/db_management/db_premise.rst administration/maintain/db_premise.rst           # /db_management/* -> /maintain/*\\nadministration/db_management/hosting_changes.rst administration/maintain/hosting_changes.rst # /db_management/* -> /maintain/*\\nadministration/db_upgrade.rst administration/upgrade/process.rst                             # db_upgrade -> /upgrade/process\\nadministration/enterprise.rst administration/maintain/enterprise.rst                         # /* -> /maintain/*\\nadministration/update.rst administration/maintain/update.rst                                 # administration/* -> administration/maintain/*\n```\n\n----------------------------------------\n\nTITLE: Deleting Remote Branch in Git\nDESCRIPTION: Removes a branch from your remote Git repository. This example shows how to delete the master branch.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/branches.rst#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ git push origin :master\n```\n\n----------------------------------------\n\nTITLE: Defining Root Owl Template - Odoo/QWeb - XML\nDESCRIPTION: This XML code defines the basic QWeb template for the root component 'your_module.Root' used by Owl components. It should be placed in your module's static directory and serves as the UI starting point for the standalone app. The template simply displays the static message 'Hello, World!' for initial verification. No dependencies beyond QWeb templating are required. The input and output are the static HTML fragment for the UI.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/standalone_owl_application.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<templates xml:space=\\\"preserve\\\">\\n    <t t-name=\\\"your_module.Root\\\">\\n        Hello, World!\\n    </t>\\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Displaying Calendar View for Interview Scheduling\nDESCRIPTION: This code snippet shows how to include an image in the documentation, specifically displaying the calendar view for scheduling interviews.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment/schedule_interviews.rst#2025-04-23_snippet_1\n\nLANGUAGE: reST\nCODE:\n```\n.. image:: schedule_interviews/calendar.png\n   :align: center\n   :alt: The calendar view, highlighting how to change the displayed meetings.\n```\n\n----------------------------------------\n\nTITLE: Illustrating PO File Structure for Odoo Module Translations\nDESCRIPTION: Provides a sample structure of a `.po` (Portable Object) file used for Odoo translations, typically located in a module's `i18n` directory (e.g., `/website_coconuts/i18n/fr_BE.po`). It shows the standard `msgid` (original string) and `msgstr` (translated string) entries, along with comments indicating the source module (`#. module: ...`) and specific location (`#: model_terms:ir.ui.view,arch_db:...`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/translations.rst#2025-04-23_snippet_5\n\nLANGUAGE: po\nCODE:\n```\n#. module: website_airproof\n#: model_terms:ir.ui.view,arch_db:website_airproof.s_custom_snippet\nmsgid \"...\"\nmsgstr \"...\"\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Pivot View Documentation\nDESCRIPTION: Documentation section explaining the pivot view functionality in Odoo's reporting system.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials/reporting.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. _reporting/views/pivot:\n\nPivot view\n----------\n\nThe :ref:`pivot view <reporting/using-pivot>` is used to aggregate your records' data and break it\ndown for analysis. The view is often found under the :guilabel:`Reporting` menu of apps but can be\nfound elsewhere. Click the **pivot view button** located at the top right to access it.\n```\n\n----------------------------------------\n\nTITLE: RST Directive - Expense Report List Image\nDESCRIPTION: ReStructuredText directive for displaying an image of the expense reports list with proper alignment and alt text.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/expenses/approve_expenses.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: approve_expenses/expense-reports-list.png\n   :align: center\n   :alt: Reports to validate are found on the Reports to Approve page.\n```\n\n----------------------------------------\n\nTITLE: Identifying Odoo Module: l10n_mx_xml_polizas (Odoo Mexican XML Polizas Export)\nDESCRIPTION: This snippet shows the technical name `l10n_mx_xml_polizas` for the 'Odoo Mexican XML Polizas Export' Odoo module. This module enables the export of Journal Entries ('Pólizas') in XML format, a requirement for compulsory audits in Mexico.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/mexico.rst#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nl10n_mx_xml_polizas\n```\n\n----------------------------------------\n\nTITLE: Adding Language Selector Component to Header\nDESCRIPTION: QWeb code to add a language selector component to a custom header.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<t t-call=\"website.placeholder_header_language_selector\">\n   <t t-set=\"_div_classes\" t-valuef=\"...\"/>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Calculating Adjusted Non-Serious Representation Fees using Math Formulas\nDESCRIPTION: This snippet calculates the adjusted amount for non-serious representation fees, taking into account the default or company-defined threshold, total fees, and the employee's work time rate as a percentage. The formula prorates the non-serious portion based on part-time employment. Inputs: threshold (default €283.73), total fees, work time rate (0-100). Outputs the adjusted amount before any absence-based reductions. Requires knowledge of payroll thresholds and rate concepts.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll/payroll_localizations/belgium.rst#2025-04-23_snippet_3\n\nLANGUAGE: math\nCODE:\n```\n\\text{adjusted amount} = \\text{threshold} + (\\text{total fees} - \\text{threshold}) \\times \\frac{\\text{work time rate}}{100}\n```\n\n----------------------------------------\n\nTITLE: Modifying Node Attributes Using Attribute Sub-Elements – Odoo XML\nDESCRIPTION: This snippet uses position=\\\"attributes\\\" to change node attributes via <attribute> sub-elements. Attributes can be added, removed, or adjusted using the add and remove features, with an optional separator. The example sets the 'invisible' attribute and updates the 'class' attribute on the target node. Required context includes Odoo's inheritance attribute update mechanism.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_records.rst#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\\\"x_field\\\" position=\\\"attributes\\\">\\n    <attribute name=\\\"invisible\\\">True</attribute>\\n    <attribute name=\\\"class\\\" add=\\\"mt-1 mb-1\\\" remove=\\\"mt-2 mb-2\\\" separator=\\\" \\\"/>\\n</field>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Odoo Community Repository on Debian/Ubuntu\nDESCRIPTION: Commands to add the Odoo GPG key, configure the repository source, and install Odoo Community edition on Debian/Ubuntu systems.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/packages.rst#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ wget -q -O - https://nightly.odoo.com/odoo.key | sudo gpg --dearmor -o /usr/share/keyrings/odoo-archive-keyring.gpg\n$ echo 'deb [signed-by=/usr/share/keyrings/odoo-archive-keyring.gpg] https://nightly.odoo.com/{CURRENT_MAJOR_BRANCH}/nightly/deb/ ./' | sudo tee /etc/apt/sources.list.d/odoo.list\n$ sudo apt-get update && sudo apt-get install odoo\n```\n\n----------------------------------------\n\nTITLE: Defining SCSS Mixins and Functions - SCSS - SCSS\nDESCRIPTION: This snippet shows definitions for a mixin (`o-avatar`) and a function (`o-invert-color`) using Odoo's naming conventions. The mixin allows reusable avatar styling for size and border radius, with block-scoped optional arguments. The function performs color inversion with optional adjustment. Prerequisite: Using a SASS/SCSS compiler. Key parameters include `$-size`, `$-radius`, and `$-color`. Outputs are reusable SCSS blocks; usage requires code to import and use the mixin or function.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n@mixin o-avatar($-size: 1.5em, $-radius: 100%) {\n   width: $-size;\n   height: $-size;\n   border-radius: $-radius;\n}\n\n@function o-invert-color($-color, $-amount: 100%) {\n   $-inverse: change-color($-color, $-hue: hue($-color) + 180);\n\n   @return mix($-inverse, $-color, $-amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating .txt Files for PLE Inventory Reports in Odoo\nDESCRIPTION: This snippet demonstrates how to generate .txt files for PLE 12.1 and 13.1 permanent inventory Kardex reports in Odoo. It involves accessing the Inventory Valuation Report, clicking the 'PLE Reports' button, selecting the period, and choosing the desired report to export.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/peru.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nGenerate a .txt file for permanent inventory Kardex reports\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n|PLE| 12.1 and 13.1 come as two separate books. The books need to be downloaded in `.txt` file\nformat from Odoo, and then they should be submitted to the |SUNAT| |PLE| software.\n\nOn the :ref:`Inventory Valuation Report <inventory/management/reporting/valuation-report>`, click\nthe :guilabel:`PLE Reports` button. Then, select the :guilabel:`Period` and choose a report to\nexport: either the :guilabel:`PLE 12.1` or :guilabel:`PLE 13.1`. Odoo generates a `.txt` file\nfor the chosen report.\n\n.. image:: peru/l10n-ple-export-button.png\n   :alt: Export Buttons selection\n\n.. note::\n   Only a download of the report in `.txt` format is available. There is no preview or visualization\n   available within Odoo.\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Visibility for System Administrators in Odoo XML\nDESCRIPTION: XML configuration showing how to restrict the elearning settings menu visibility to system administrators only. This demonstrates the use of groups attribute for menu access control.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/restrict_data_access.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<menuitem name=\"Settings\" id=\"website_slides.menu_website_slides_settings\"\n          parent=\"website_slides.website_slides_menu_root\"\n          sequence=\"99\"\n          groups=\"base.group_system\"/>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Module Directory Structure - Odoo - Bash\nDESCRIPTION: This bash snippet illustrates the recommended folder and file structure for an Odoo localization module, showing subfolders for data, views, demo content, and Python models. There are no functional shell commands—this diagram is for reference. It assumes you are building a module named l10n_xx and helps ensure all critical files (CSV, XML, Python) are placed as expected so Odoo can find and install them properly.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/accounting_localization.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nl10n_xx\n├── data\n│   ├── template\n│   │   ├── account.account-xx.csv\n│   │   ├── account.group-xx.csv\n│   │   └── account.tax.group-xx.csv\n│   └── other_data.xml\n├── views\n│   └── xxxmodel_views.xml\n├── demo\n│   └── demo_company.xml\n├── models\n│   ├── template_xx.py\n│   └── __init__.py\n├── __init__.py\n└── __manifest__.py\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive for Product Card\nDESCRIPTION: Inserts and configures an image showing a product card in the catalog interface\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/product_catalog.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: product_catalog/product-card.png\n   :align: center\n   :alt: A product card in the product catalog.\n```\n\n----------------------------------------\n\nTITLE: Updating Odoo Source Code from Github\nDESCRIPTION: Commands to fetch and apply the latest Odoo source code changes from Github repositories. This method is used for installations that were originally cloned from the official Odoo repositories.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/update.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch\ngit rebase --autostash\n```\n\n----------------------------------------\n\nTITLE: Fetching and Rebasing Odoo and Enterprise Branches\nDESCRIPTION: Shows the process for updating local branches in both the core Odoo and Enterprise repositories. It first fetches all changes from all remotes and prunes stale branches (`git fetch --all --prune`). Then, it rebases the current local branch onto the corresponding upstream branch (`odoo/{BRANCH}` or `enterprise/{BRANCH}`), automatically stashing and reapplying any local changes (`--autostash`). This workflow integrates upstream changes into the local development branch.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/setup_guide.rst#2025-04-23_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ cd $HOME/src/odoo\n$ git fetch --all --prune\n$ git rebase --autostash odoo/{BRANCH}\n\n$ cd $HOME/src/enterprise\n$ git fetch --all --prune\n$ git rebase --autostash enterprise/{BRANCH}\n```\n\n----------------------------------------\n\nTITLE: Customer Invoice Journal Entry with Cash Basis Tax\nDESCRIPTION: Example journal entry showing the accounting entries for a customer invoice with a 15% cash basis tax on a $1,000 sale.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/taxes/cash_basis.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n**Customer journal (INV)**\nDebit                    | Credit\n--------------------------|----------------------------\nReceivable $1,150         |\n                          | Income $1,000\n                          | Temporary tax account $150\n```\n\n----------------------------------------\n\nTITLE: Creating Drop Zone for Snippets in Odoo\nDESCRIPTION: Defines an empty area where users can drag and drop snippets for modular page design.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_39\n\nLANGUAGE: xml\nCODE:\n```\n<div id=\"oe_structure_layout_01\" class=\"oe_structure\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Header Template in XML\nDESCRIPTION: Defines the structure for a custom header template in Odoo Website Builder.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"header\" model=\"ir.ui.view\">\n   <field name=\"name\">Airproof Header</field>\n   <field name=\"type\">qweb</field>\n   <field name=\"key\">website_airproof.header</field>\n   <field name=\"inherit_id\" ref=\"website.layout\"/>\n   <field name=\"mode\">extension</field>\n   <field name=\"arch\" type=\"xml\">\n      <xpath expr=\"//header//nav\" position=\"replace\">\n         <!-- Static Content -->\n         <!-- Components -->\n         <!-- Editable areas -->\n      </xpath>\n   </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation Structure for Payment Providers\nDESCRIPTION: RST configuration for organizing payment provider documentation, using toctree directive to include wire transfer documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/subscriptions/payment_providers.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:nosearch:\n\n=================\nPayment providers\n=================\n\n.. toctree::\n   :titlesonly:\n\n   payment_providers/wire_transfer\n```\n\n----------------------------------------\n\nTITLE: Referencing ESC/POS Command GS v 0\nDESCRIPTION: Refers to the 'GS v 0' ESC/POS command, used to check compatibility for certain Epson printer models like the TM-U220B. Incompatibility with this command necessitates using alternative commands like 'ESC *'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/iot/devices/printer.rst#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nGS v 0\n```\n\n----------------------------------------\n\nTITLE: Installing Odoo Package on Debian/Ubuntu\nDESCRIPTION: Commands to install a downloaded Odoo package on Debian/Ubuntu, handling dependencies and completing the installation as root.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/packages.rst#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# dpkg -i <path_to_installation_package> # this probably fails with missing dependencies\n# apt-get install -f # should install the missing dependencies\n# dpkg -i <path_to_installation_package>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ipdb Breakpoint in Python\nDESCRIPTION: Provides a concrete example showing the placement of `import ipdb; ipdb.set_trace()` within Python code to initiate a debugging session at that specific point during execution. This is typically placed just before the line of code you want to inspect.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/setup_guide.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# ... some python code ...\nimport ipdb; ipdb.set_trace()\n# ... code execution will pause here ...\n# ... rest of the python code ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Content Template for Products\nDESCRIPTION: This snippet demonstrates how to create a custom dynamic content template for products in Odoo website themes. It includes attributes for controlling the number of elements displayed on different devices.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_51\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"dynamic_filter_template_product_product_airproof\" name=\"...\">\n   <t t-foreach=\"records\" t-as=\"data\" data-number-of-elements=\"4\" data-number-of-elements-sm=\"1\" data-number-of-elements-fetch=\"8\">\n      <t t-set=\"record\" t-value=\"data['_record']\"/>\n      <!-- Content -->\n   </t>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Win/Loss Ratio Formula in Mathematical Notation\nDESCRIPTION: Mathematical formula displaying the calculation of win/loss ratio as opportunities won divided by opportunities lost.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/crm/performance/win_loss.rst#2025-04-23_snippet_0\n\nLANGUAGE: math\nCODE:\n```\n\\begin{equation}\nWin/Loss Ratio = \\frac{Opportunities Won}{Opportunities Lost}\n\\end{equation}\n```\n\n----------------------------------------\n\nTITLE: Opening Product in Form View Dialog (Odoo, JSON)\nDESCRIPTION: This snippet provides a JSON descriptor for opening a specific product's form view in a dialog window in Odoo. Dependencies include a valid Odoo product record (to supply the 'a_product_id'), and the Odoo client capable of interpreting the action. The 'target': 'new' parameter ensures that the product form appears as a popup dialog instead of in-place navigation. This is typically returned from server-side methods for dynamic UI behavior.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/actions.rst#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"type\\\": \\\"ir.actions.act_window\\\",\\n    \\\"res_model\\\": \\\"product.product\\\",\\n    \\\"views\\\": [[False, \\\"form\\\"]],\\n    \\\"res_id\\\": a_product_id,\\n    \\\"target\\\": \\\"new\\\",\\n}\n```\n\n----------------------------------------\n\nTITLE: RST Documentation - DHL Integration Configuration\nDESCRIPTION: ReStructuredText documentation detailing the complete process of setting up DHL shipping integration in Odoo, including connector setup, shipping method configuration, and credential management.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/dhl_credentials.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n===============\nDHL integration\n===============\n\nDHL is one of the shipping carriers for which a *shipping connector* is available in Odoo's\n**Inventory** app. By enabling the shipping connector in the app's settings, and configuring at\nleast one *shipping method*, the process of :doc:`calculating shipping rates\n<../setup_configuration>` and :doc:`generating shipping labels <labels>` is greatly simplified.\n\n.. note::\n   While a variety of shipping connectors are available for different carriers, this documentation\n   details the configuration settings specific to integrating DHL. For instructions on configuring\n   the integration settings common to all shippers, see the documentation on :doc:`third-party\n   shippers <third_party_shipper>`.\n```\n\n----------------------------------------\n\nTITLE: Setting Async Email Parameter in Odoo System Configuration\nDESCRIPTION: Sets the 'sale.async_emails' system parameter to 'True' to enable asynchronous email sending for order confirmations. This configuration is applied after installing the 'Sales - Async Emails' module and is recommended for high-traffic eCommerce websites.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/websites/ecommerce/performance.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsale.async_emails = True\n```\n\n----------------------------------------\n\nTITLE: Using Account Tags in Prefix of Account Codes Engine\nDESCRIPTION: This snippet demonstrates how to match accounts by their associated tags instead of code prefixes in the Prefix of Account Codes engine.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/reporting/customize.rst#2025-04-23_snippet_8\n\nLANGUAGE: odoo\nCODE:\n```\ntag(25)\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo XML-RPC Connection Parameters - Java\nDESCRIPTION: Provides Java-style variable declaration for Odoo XML-RPC connection. Assigns string values representing the server URL, database name, username, and password, which must be set before performing authentication and API operations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal String url = <insert server URL>,\\n              db = <insert database name>,\\n        username = \"admin\",\\n        password = <insert password for your admin user (default: admin)>;\n```\n\n----------------------------------------\n\nTITLE: Installing RTLcss on Windows\nDESCRIPTION: Command to install RTLcss globally using npm on Windows for right-to-left language support\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/source.rst#2025-04-23_snippet_11\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\> npm install -g rtlcss\n```\n\n----------------------------------------\n\nTITLE: Wave Transfer Image References in reStructuredText\nDESCRIPTION: Image reference definitions for wave transfer documentation, including alt text for accessibility.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/picking_methods/wave.rst#2025-04-23_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. image:: wave/wave-transfers-setting.png\n   :alt: View of Odoo Inventory app settings to enable the wave transfers option.\n\n.. image:: wave/list-of-operations.png\n   :alt: How to get an operation type's list of operations.\n\n.. image:: wave/select-lines.png\n   :alt: Select lines to add to the wave.\n\n.. image:: wave/auto-wave-grouping.png\n   :alt: The Automatic batches feature with the wave grouping option for product category selected.\n```\n\n----------------------------------------\n\nTITLE: Creating Manufacturing Orders with By-Products in Odoo\nDESCRIPTION: This snippet shows the navigation path to create new Manufacturing Orders (MOs) that include by-products in Odoo's Manufacturing app.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/workflows/byproducts.rst#2025-04-23_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:menuselection:`Manufacturing app --> Operations --> Manufacturing Orders`\n```\n\n----------------------------------------\n\nTITLE: Preventing Odoo Module Transpilation with Ignore Tag\nDESCRIPTION: Shows how to use the `/** @odoo-module ignore **/` comment directive at the beginning of a JavaScript file to instruct the Odoo transpiler to skip processing this file. This is useful for files that should remain as plain JavaScript or whose structure is incompatible with automatic transpilation into an Odoo module.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_modules.rst#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/** @odoo-module ignore **/\n(function () {\n  const sum = (a, b) => a + b;\n  console.log(sum(1, 2));\n)();\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Model Fields in Odoo XML\nDESCRIPTION: Shows how to declare a custom field (`x_post_category`) as an `ir.model.fields` record in Odoo XML (typically in a `data/fields.xml` file). This record defines the field's properties like technical name (`name`), description (`field_description`), type (`ttype=\"html\"`), state (`manual`), index status, and links it to an existing model (`website_blog.model_blog_post`) using `model_id`. This declaration makes the field available in the Odoo system.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"x_post_category\" model=\"ir.model.fields\">\n   <field name=\"name\">x_post_category</field>\n   <field name=\"field_description\">...</field>\n   <field name=\"ttype\">html</field>\n   <field name=\"state\">manual</field>\n   <field name=\"index\">0</field>\n   <field name=\"model_id\" ref=\"website_blog.model_blog_post\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Setting SMTP Password via Odoo Command-line\nDESCRIPTION: Provides the password required for authentication with the SMTP server.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n--smtp-password <password>\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive for Filter Sidebar\nDESCRIPTION: Inserts and configures an image showing the filter sidebar in the product catalog\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/product_catalog.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: product_catalog/filter-sidebar.png\n   :align: center\n   :alt: The filter sidebar in the product catalog.\n```\n\n----------------------------------------\n\nTITLE: Applying Good HTML Class Naming Conventions (Do)\nDESCRIPTION: Presents an HTML example illustrating the preferred \"Grandchild\" approach for CSS class naming (`o_element_wrapper`, `o_element_entries`, `o_element_entry`, `o_element_link`) as recommended by Odoo guidelines. This method results in more compact, readable, and maintainable code compared to overly nested naming schemes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<div class=“o_element_wrapper”>\n   <div class=“o_element_entries”>\n      <span class=“o_element_entry”>\n         <a class=“o_element_link”>Entry</a>\n      </span>\n   </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Moving Applicant Card in Odoo Recruitment Kanban View\nDESCRIPTION: This code snippet illustrates how to move an applicant's card from one stage to another using the click and drag method in Odoo's Recruitment application Kanban view.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment/recruitment-flow.rst#2025-04-23_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. image:: recruitment-flow/move.png\n   :align: center\n   :alt: An applicant's card moves from one stage to another by using the click and drag method.\n```\n\n----------------------------------------\n\nTITLE: Command Palette Search Shortcuts in RST\nDESCRIPTION: Documents the special keyboard shortcuts for searching different types of content within Odoo's command palette, including menus, users, Discuss channels, and Knowledge articles.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials/keyboard_shortcuts.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n- :kbd:`/`: search for menus, applications, and modules.\n- :kbd:`@`: search for users.\n- :kbd:`#`: search for **Discuss** channels.\n- :kbd:`?`: search for **Knowledge** articles.\n```\n\n----------------------------------------\n\nTITLE: Embedding eLearning Publish Button Image using reStructuredText\nDESCRIPTION: This reStructuredText snippet uses the `image` directive to display the `elearning-publish-button.png` image, centered on the page. The `:align:` option controls the image alignment, and the `:alt:` attribute provides descriptive text for accessibility and for cases where the image cannot be loaded. It visually represents the action of publishing content within the Odoo eLearning module.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/websites/elearning.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: elearning/elearning-publish-button.png\n  :align: center\n  :alt: Publish your content.\n```\n\n----------------------------------------\n\nTITLE: NGINX Cookie Security Configuration\nDESCRIPTION: NGINX configuration for securing session cookies with Secure flag and SameSite attribute.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/deploy.rst#2025-04-23_snippet_9\n\nLANGUAGE: nginx\nCODE:\n```\n# requires nginx 1.19.8\nproxy_cookie_flags session_id samesite=lax secure;\n```\n\n----------------------------------------\n\nTITLE: Defining an Odoo JavaScript Module - Module Pattern - JavaScript\nDESCRIPTION: Shows how to declare a JavaScript module in Odoo's web client using the module pattern. The global odoo variable is assigned a function whose name matches the module's directory. The function receives the Odoo client instance and a local namespace, where objects and widgets can be attached. This approach provides encapsulation and avoids naming conflicts between modules.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nodoo.oepetstore = function(instance, local) {\n    var _t = instance.web._t,\n        _lt = instance.web._lt;\n    var QWeb = instance.web.qweb;\n\n    local.HomePage = instance.Widget.extend({\n        start: function() {\n            console.log(\"pet store home page loaded\");\n        },\n    });\n\n    instance.web.client_actions.add(\n        'petstore.homepage', 'instance.oepetstore.HomePage');\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Cost Valuation Formula in Mathematical Notation\nDESCRIPTION: The mathematical formula for computing the new average cost when products are received in inventory. The formula accounts for old quantity, old average cost, incoming quantity, and purchase price to determine the new average cost.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/get_started/avg_price_valuation.rst#2025-04-23_snippet_0\n\nLANGUAGE: math\nCODE:\n```\nAvg~Cost = \\frac{(Old~Qty \\times Old~Avg~Cost) + (Incoming~Qty \\times Purchase~Price)}{Final~Qty}\n```\n\n----------------------------------------\n\nTITLE: Defining Correct Epson Printer Names in CUPS\nDESCRIPTION: Examples of correctly formatted printer names for Epson models in CUPS for Odoo IoT integration. These names use double underscores and specific parameters like `__IMC` (for ESC * command), `LDV` (Low Vertical Density), `LDH` (Low Horizontal Density), and `SCALE<value>` to control printing behavior.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/iot/devices/printer.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nEPSONTMm30II__IMC__\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nEPSON_TM_U220__IMC_LDV_LDH_SCALE80__\n```\n\n----------------------------------------\n\nTITLE: Modifying Classes with include() Method in Odoo Web Framework\nDESCRIPTION: Demonstrates how to modify an existing class using the include() method, which alters the target class in-place instead of creating a new class. The _super() method is used to call the original implementation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar TestClass = instance.web.Class.extend({\n    testMethod: function() {\n        return \"hello\";\n    },\n});\n\nTestClass.include({\n    testMethod: function() {\n        return this._super() + \" world\";\n    },\n});\n\nconsole.log(new TestClass().testMethod());\n// will print \"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Credit Note Document Type Format\nDESCRIPTION: Specifies the standard format for the 'Document Type' field when creating a customer credit note in Odoo for Ecuadorian localization. It uses a code (04) followed by the document name.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/ecuador.rst#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n(04) Credit Note\n```\n\n----------------------------------------\n\nTITLE: Using Bootstrap Row and Column Selector Classes (CSS)\nDESCRIPTION: Shows a CSS selector applied for large columns directly inside a .row, triggering resizable features in the Website Builder. Used to make columns user-resizable when editing pages; requires Bootstrap grid structure and Odoo Website Builder integration. Adjusts usability in the editor and is not intended for direct outputs, but for UI-activated behaviors.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.row > .col-lg-*\n```\n\n----------------------------------------\n\nTITLE: Installing GeoIP Databases Using Bash Commands\nDESCRIPTION: Commands to move the downloaded GeoLite2 City and Country database files to the standard location at /usr/share/GeoIP/ directory.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/geo_ip.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmv ~/Downloads/GeoLite2-City.mmdb /usr/share/GeoIP/\nmv ~/Downloads/GeoLite2-Country.mmdb /usr/share/GeoIP/\n```\n\n----------------------------------------\n\nTITLE: Illustrating Poor HTML Class Naming (Avoid)\nDESCRIPTION: Provides an HTML example demonstrating overly specific and deeply nested CSS class names (`o_element_wrapper_entries_entry_link`), which should be avoided according to Odoo's naming conventions. This structure makes the code harder to read and maintain.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<div class=“o_element_wrapper”>\n   <div class=“o_element_wrapper_entries”>\n      <span class=“o_element_wrapper_entries_entry”>\n         <a class=“o_element_wrapper_entries_entry_link”>Entry</a>\n      </span>\n   </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Odoo Menu Navigation - Build Loads\nDESCRIPTION: Navigation path for accessing delivery operations in the Inventory app\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/dispatch.rst#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nInventory app --> Operations --> Deliveries\n```\n\n----------------------------------------\n\nTITLE: Warning RST Block for Invalid Invoice Creation\nDESCRIPTION: ReStructuredText warning block showing error message when trying to create an invoice without validating delivered quantity\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/invoicing/invoicing_policy.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. warning::\n   If a user attempts to create an invoice without validating the delivered quantity, the following\n   error message appears: :guilabel:`There is no invoiceable line. If a product has a Delivered\n   quantities invoicing policy, please make sure that a quantity has been delivered.`\n```\n\n----------------------------------------\n\nTITLE: Apply 'noupdate' at File-Level for Multiple Records - XML\nDESCRIPTION: Shows adding the 'noupdate' attribute on the <odoo> root tag to prevent all records in the file from being updated on module upgrade. Useful for protecting pages or menus edited through the Website Builder.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<odoo noupdate=\\\"1\\\">\\n   <record id=\\\"menu_company\\\" model=\\\"website.menu\\\">\\n      <!-- Fields -->\\n   </record>\\n   <record id=\\\"menu_faq\\\" model=\\\"website.menu\\\">\\n      <!-- Fields -->\\n   </record>\\n</odoo>\n```\n\n----------------------------------------\n\nTITLE: Mapping Unit of Measure Documentation (Inventory/MRP)\nDESCRIPTION: Maps the old documentation path for Unit of Measure (UoM) under Purchase (`applications/inventory_and_mrp/purchase/products/uom.rst`) to the new path under Inventory Product Management configuration (`applications/inventory_and_mrp/inventory/product_management/configure/uom.rst`) within the Odoo Inventory & MRP application documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/18.0.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/inventory_and_mrp/purchase/products/uom.rst applications/inventory_and_mrp/inventory/product_management/configure/uom.rst\n```\n\n----------------------------------------\n\nTITLE: Installing xlwt Package for XLS Export in Odoo on Debian/Ubuntu\nDESCRIPTION: Command to install the xlwt Python package manually on Debian Buster or Ubuntu 18.04 for XLS export functionality in Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/packages.rst#2025-04-23_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ sudo pip3 install xlwt\n```\n\n----------------------------------------\n\nTITLE: Committing Git Changes\nDESCRIPTION: Command to commit the staged changes with a commit message.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -m \"My first module\"\n```\n\n----------------------------------------\n\nTITLE: Defining Odoo Webhook Endpoint URL for Mercado Pago Notifications\nDESCRIPTION: Specifies the relative URL path `/pos_mercado_pago/notification` which must be appended to the Odoo database's base URL (e.g., `https://mycompany.odoo.com`) and configured as the webhook endpoint in the Mercado Pago developer panel. This endpoint receives notifications from Mercado Pago about payment terminal events, requiring the Odoo instance to be publicly accessible.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/point_of_sale/payment_methods/terminals/mercado_pago.rst#2025-04-23_snippet_0\n\nLANGUAGE: url\nCODE:\n```\n/pos_mercado_pago/notification\n```\n\n----------------------------------------\n\nTITLE: Using Prefix of Account Codes Engine with Complex Arithmetic\nDESCRIPTION: This example demonstrates a more complex formula using the Prefix of Account Codes engine with multiple account prefixes in an arithmetic expression.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/reporting/customize.rst#2025-04-23_snippet_4\n\nLANGUAGE: odoo\nCODE:\n```\n21 + 10 - 5\n```\n\n----------------------------------------\n\nTITLE: Enabling Variant Grid Entry Setting in Odoo Sales\nDESCRIPTION: Instructions for enabling the Variant Grid Entry setting in the Odoo Sales application. This setting allows for a simplified variant selection process using a pop-up window on quotations and sales orders.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/sales_quotations/orders_and_variants.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nTo enable that setting, go to :menuselection:`Sales app --> Configuration --> Settings`, and scroll\nto the :guilabel:`Product Catalog` section. Then, check the box next to the :guilabel:`Variant Grid\nEntry` option, and click :guilabel:`Save`.\n```\n\n----------------------------------------\n\nTITLE: Implementing Unidecode in Odoo Model\nDESCRIPTION: Example of implementing the Unidecode library in an Odoo model for character normalization.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import models, fields, api\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom unidecode import unidecode\n```\n\nLANGUAGE: python\nCODE:\n```\n@api.model\ndef create(self, values):\n    if 'name' in values:\n        values['name'] = unidecode(values['name'])\n    return super(my_module, self).create(values)\n\ndef write(self, values):\n    if 'name' in values:\n        values['name'] = unidecode(values['name'])\n    return super(my_module, self).write(values)\n```\n\n----------------------------------------\n\nTITLE: Importing SQL Dump into PostgreSQL Database (bash)\nDESCRIPTION: Imports data from an SQL dump file (`dump.sql`) into a specified PostgreSQL database using the `psql` command. This step populates the previously created empty database with the data from the Odoo backup. Requires `psql` to be installed and the `dump.sql` file to be present.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/setup.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npsql <database_name> < dump.sql\n```\n\n----------------------------------------\n\nTITLE: Using Display Heading Sizing Classes in Titles - XML/HTML\nDESCRIPTION: This code snippet demonstrates how to use Bootstrap’s Display Heading sizing classes (display-1-fs to display-4-fs) in <span> tags inside heading elements. It enables extra-large heading sizes without changing the semantic HTML tag. Suitable for Odoo templates with Bootstrap available. User customization in the Website Builder is limited to sizes 1-4.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<h2><span class=\"display-1-fs\">Heading</span></h2>\n<h2><span class=\"display-2-fs\">Heading</span></h2>\n<h2><span class=\"display-3-fs\">Heading</span></h2>\n<h2><span class=\"display-4-fs\">Heading</span></h2>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Header Template in SCSS Variables\nDESCRIPTION: Configures a custom header template name in the SCSS variables palette.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_22\n\nLANGUAGE: scss\nCODE:\n```\n$o-website-values-palettes: (\n   (\n      'header-template': 'airproof',\n   ),\n);\n```\n\n----------------------------------------\n\nTITLE: Example DMARC DNS TXT Record (Literal) in Bash\nDESCRIPTION: This example snippet illustrates the syntax for a DMARC TXT record that instructs mail servers to send aggregate reports to a specified email address but takes no action (policy 'none') on failures. Intended as a template for configuring basic DMARC reporting. Usage requires creating or updating a TXT DNS record named _dmarc on the sending domain. Inputs are the DMARC record fields (version, policy, report address), output is improved visibility into domain abuse and authentication failures.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/email_communication/email_domain.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n_dmarc IN TXT “v=DMARC1; p=none; rua=mailto:postmaster@example.com”\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation for Delivery Methods Configuration\nDESCRIPTION: RST markup documentation explaining delivery methods configuration, activation, and usage in Odoo, including menu navigation paths and setup instructions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:show-content:\n\n================\nDelivery methods\n================\n\nWhen activated in Odoo, the *Delivery Methods* setting adds the option of calculating the cost of\nshipping on sales orders and e-commerce shopping carts.\n\nWhen integrated with a :ref:`third-party carrier <inventory/shipping/third_party>`, shipping prices\nare calculated based on the carrier's pricing information.\n```\n\n----------------------------------------\n\nTITLE: Computing AVCO for First Inventory Receipt Example\nDESCRIPTION: Mathematical calculation showing how average cost is computed when receiving 8 tables at $10 each when starting with zero inventory. The calculation demonstrates the application of the AVCO formula.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/get_started/avg_price_valuation.rst#2025-04-23_snippet_1\n\nLANGUAGE: math\nCODE:\n```\nAvg~Cost = \\frac{0 + 8 \\times $10}{8} = \\frac{$80}{8} = $10\n```\n\n----------------------------------------\n\nTITLE: Excluding Accounts by Tag and Code Prefix in Odoo Reports (plaintext)\nDESCRIPTION: This snippet shows another example of Odoo account filtering, using a tag condition and excluding those with a specific code prefix. The syntax 'tag(my_module.my_tag)\\(10)' is interpreted by Odoo's reporting configuration to match accounts tagged as 'my_module.my_tag' excluding those with code prefix '10'. The required inputs are the tag and the prefix to exclude. Used within report engine or expression fields.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/reporting/customize.rst#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\ntag(my_module.my_tag)\\(10)\n```\n\n----------------------------------------\n\nTITLE: Identifying Odoo Module: l10n_mx_edi_extended (EDI for Mexico - Advanced Features)\nDESCRIPTION: This snippet shows the technical name `l10n_mx_edi_extended` for the optional 'EDI for Mexico (Advanced Features)' Odoo module. This module adds the external trade complement ('complemento de comercio exterior') to invoices, which is legally required when selling products to foreign countries from Mexico.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/mexico.rst#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nl10n_mx_edi_extended\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Graph View Documentation\nDESCRIPTION: Documentation section describing the graph view functionality in Odoo's reporting system.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials/reporting.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. _reporting/views/graph:\n\nGraph view\n----------\n\nThe :ref:`graph view <reporting/using-graph>` is used to visualize your records' data, helping you\nidentify patterns and trends. The view is often found under the :guilabel:`Reporting` menu of apps\nbut can be found elsewhere. Click the **graph view button** located at the top right to access\nit.\n```\n\n----------------------------------------\n\nTITLE: Changing Applicant Stage in Odoo Recruitment\nDESCRIPTION: This code snippet shows how to change the stage of an applicant in Odoo's Recruitment application by clicking on the desired stage at the top of the applicant's card.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment/recruitment-flow.rst#2025-04-23_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. image:: recruitment-flow/stage-change.png\n     :align: center\n     :alt: Change the stage of an applicant by clicking on the desired stage at the top of the\n           applicant's card.\n```\n\n----------------------------------------\n\nTITLE: Sending an Interview Email in Odoo Recruitment\nDESCRIPTION: This code snippet demonstrates how to send an interview email to an applicant using Odoo's Recruitment application. It includes fields for recipients, subject, email body, attachments, and answer deadline.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment/recruitment-flow.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. image:: recruitment-flow/send-survey.png\n   :align: center\n   :alt: Send a custom survey, also referred to as an interview form, to an applicant using a\n         pre-configured template.\n```\n\n----------------------------------------\n\nTITLE: Customizing SelectMenu Bottom Area in XML\nDESCRIPTION: This code demonstrates how to customize the bottom area of the SelectMenu dropdown using XML. It shows how to add a custom button that creates a new item based on the search input.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/owl_components.rst#2025-04-23_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<SelectMenu\n    choices=\"choices\"\n>\n    <span class=\"select_menu_test\">Select something</span>\n    <t t-set-slot=\"bottomArea\" t-slot-scope=\"select\">\n        <div t-if=\"select.data.searchValue\">\n            <button class=\"btn text-primary\" t-on-click=\"() => this.onCreate(select.data.searchValue)\">\n                Create this article \"<i t-esc=\"select.data.searchValue\" />\"\n            </button>\n        </div>\n    </t>\n</SelectMenu>\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Alignment in Odoo Website Theme\nDESCRIPTION: XML record example that activates center-aligned menu headers. This is used in the presets.xml file to define the default alignment for menu items.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"website.template_header_default_align_center\" model=\"ir.ui.view\">\n   <field name=\"active\" eval=\"True\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Embedding an Image in reStructuredText\nDESCRIPTION: This reStructuredText directive embeds an image file named 'example-report.png' located in the 'members_analysis' subdirectory. The image is centered and includes alternative text for accessibility.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/members/members_analysis.rst#2025-04-23_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. image:: members_analysis/example-report.png\n   :align: center\n   :alt: A sample of the members analysis report.\n```\n\n----------------------------------------\n\nTITLE: Defining Structure Type Fields in Odoo RST Documentation\nDESCRIPTION: Documentation describing the fields and options available when creating a new payroll structure type in Odoo, including wage types, scheduled pay options, and work entry types.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n- :guilabel:`Structure Type`: enter the name for the new structure type, such as `Employee` or\n  `Worker`.\n- :guilabel:`Country`: select the country that the new structure type applies to from the drop-down\n  menu.\n- :guilabel:`Wage Type`: select what type of wage the new structure type uses, either\n  :guilabel:`Fixed Wage` or :guilabel:`Hourly Wage`.\n```\n\n----------------------------------------\n\nTITLE: Odoo Menu Navigation - Car Model Configuration\nDESCRIPTION: Navigation path for configuring vehicle models in the Fleet app\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/dispatch.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nFleet app --> Configuration --> Models\n```\n\n----------------------------------------\n\nTITLE: Using Prefix of Account Codes Engine with Credit/Debit Filtering\nDESCRIPTION: This example demonstrates how to filter accounts by credit (C) or debit (D) balances when using the Prefix of Account Codes engine.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/reporting/customize.rst#2025-04-23_snippet_6\n\nLANGUAGE: odoo\nCODE:\n```\n21D + 10\\(101, 102)C - 5\\(57)\n```\n\n----------------------------------------\n\nTITLE: Adding an Important Notice in reStructuredText\nDESCRIPTION: Creates an important notice box in the documentation to highlight crucial information about publishing Knowledge articles for customer visibility.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/helpdesk/overview/help_center.rst#2025-04-23_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. important::\n   Even though the *Help* article has been enabled on a team, Odoo does **not** share all the nested\n   articles to the web. Individual articles intended for customers **must** be published for them to\n   be viewable on the website.\n```\n\n----------------------------------------\n\nTITLE: Adding a Black Color Filter to Background (XML)\nDESCRIPTION: Demonstrates how to overlay a black color filter with 50% opacity on a section via nested divs using o_we_bg_filter and the corresponding Bootstrap color class. This improves contrast/readability or adds emphasis over background images or colors. No additional dependencies beyond Odoo styles are required.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<section>\\n    <div class=\\\"o_we_bg_filter bg-black-50\\\"/>\\n    <div class=\\\"container\\\">\\n        <!-- Content -->\\n    </div>\\n</section>\n```\n\n----------------------------------------\n\nTITLE: Supported Number Formats\nDESCRIPTION: Examples of supported number formats in Odoo import, including various currency and thousand separator formats.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials/export_import_data.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n32.000,00\n32000,00\n32,000.00\n-32000.00\n(32000.00)\n$ 32.000,00\n(32000.00 €)\n```\n\n----------------------------------------\n\nTITLE: Identifying Odoo Module: l10n_mx (Mexico - Accounting)\nDESCRIPTION: This snippet shows the technical name `l10n_mx` for the 'Mexico - Accounting' Odoo module. This module is the base fiscal localization package for Mexico, providing essential accounting features like the chart of accounts (based on SAT codes) and common tax configurations required for Mexican compliance. Installing this module is a prerequisite for setting up Mexican electronic invoicing in Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/mexico.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nl10n_mx\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Products in RST\nDESCRIPTION: This RST snippet explains how to configure service products for time billing, including creating a prepaid/fixed price product and modifying the default 'Service on Timesheets' product.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/helpdesk/advanced/track_and_bill.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nWhen the :guilabel:`Time Billing` feature is enabled, a new product is created in the **Sales** app\ncalled *Service on Timesheets*. This product can be found under :menuselection:`Sales app-->\nProducts --> Products`. Then, search for `Service on Timesheets` in the search bar. This is the\nproduct that is used when invoicing for *post-paid support services* **after** they have been\ncompleted.\n\nSelect :guilabel:`Service on Timesheets` from the product page. This reveals the product detail\nform. The product is configured with the :guilabel:`Product Type` set to :guilabel:`Service` and the\n:guilabel:`Invoicing Policy` set to :guilabel:`Based on Timesheets`. Make any necessary changes to\nthe product record, such as the :guilabel:`Cost` or :guilabel:`Sales Price`.\n\nIn order to invoice for support services **before** the work has been completed (also known as\n*prepaid support services*), a separate product with a different invoicing policy must be created.\n\nTo create a new service product, go to :menuselection:`Sales app --> Products --> Products`, and\nclick :guilabel:`New`. This reveals a blank product detail form.\n\nOn the new product form, add a :guilabel:`Product Name`, and set the :guilabel:`Product Type` to\n:guilabel:`Service`. Then, set the :guilabel:`Invoicing Policy` to :guilabel:`Prepaid/Fixed Price`.\nThis means an invoice can be generated and payment can be received for this product before any\ntimesheets entries have been recorded for these services.\n\nFinally, set the :guilabel:`Sales Price`, and confirm that the unit of measure is set to\n:guilabel:`Hours`.\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Network Listening Settings\nDESCRIPTION: PostgreSQL server configuration setting the listening address to localhost and a specific IP (192.168.1.2), with port and connection limits for optimal performance.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/deploy.rst#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nlisten_addresses = 'localhost,192.168.1.2'\nport = 5432\nmax_connections = 80\n```\n\n----------------------------------------\n\nTITLE: Mapping Sips Payment Provider Documentation to Worldline (Finance)\nDESCRIPTION: Maps the old documentation path for the Sips payment provider (`applications/finance/payment_providers/sips.rst`) to the new path under Worldline (`applications/finance/payment_providers/worldline.rst`) within the Odoo Finance application documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/18.0.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/payment_providers/sips.rst applications/finance/payment_providers/worldline.rst\n```\n\n----------------------------------------\n\nTITLE: Wave Transfer Configuration Process in reStructuredText\nDESCRIPTION: Structured documentation showing the process to enable and configure wave transfers in Odoo, including required settings and navigation steps.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/picking_methods/wave.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |SO| replace:: :abbr:`SO (sales order)`\n\n.. example::\n   #. |SO| 1 calls for one apple and one orange\n   #. |SO| 2 calls for one apple and one banana\n   #. |SO| 3 calls for one apple, one orange, and two bananas\n```\n\n----------------------------------------\n\nTITLE: Navigation Path for Invoice Resequencing\nDESCRIPTION: Step-by-step instructions for accessing and executing the invoice resequencing functionality in Odoo, including required permissions and UI navigation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/customer_invoices/sequence.rst#2025-04-23_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n#. Activate the :ref:`developer mode <developer-mode>`.\n#. From the :guilabel:`Accounting Dashboard`, open the :guilabel:`Customer Invoices` journal.\n#. Select the invoices that need a new sequence.\n#. Click the :icon:`fa-cog` :guilabel:`Actions` menu and select :guilabel:`Resequence`.\n#. In the :guilabel:`Ordering` field, choose to\n\n   - :guilabel:`Keep current order`: The order of the numbers remains the same.\n   - :guilabel:`Reorder by accounting date`: The number is reordered by accounting date.\n\n#. Set the :guilabel:`First New Sequence`.\n#. :guilabel:`Preview Modifications` and click :guilabel:`Confirm`.\n```\n\n----------------------------------------\n\nTITLE: Verifying Initial State of estate_property Table via psql\nDESCRIPTION: Demonstrates how to check if the `estate_property` table exists and is empty using a `psql` command before the model is defined in Odoo. This serves as a baseline check to confirm the table doesn't exist or is empty prior to ORM creation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/03_basicmodel.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ psql -d rd-demo\nrd-demo=# SELECT COUNT(*) FROM estate_property;\ncount\n-------\n    0\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Creating a Helpdesk Ticket via Command in Odoo Live Chat\nDESCRIPTION: Creates a new Helpdesk ticket using the current conversation transcript. The operator types `/ticket`, presses Enter, then types a title for the ticket and presses Enter again. This command requires the Odoo Helpdesk app to be installed and Live Chat activated for a Helpdesk team. The resulting ticket link is shown only to the operator.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/websites/livechat/responses.rst#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/ticket\n```\n\n----------------------------------------\n\nTITLE: Setting SMTP SSL Certificate File via Odoo Command-line\nDESCRIPTION: Specifies the path to an SSL certificate file (.pem) to be used for SMTP authentication. Requires '--smtp-ssl-private-key-filename' to also be set.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n--smtp-ssl-certificate-filename <path/to/cert.pem>\n```\n\n----------------------------------------\n\nTITLE: Displaying Should Be Paid Field on Draft Vendor Bill\nDESCRIPTION: RST markup for showing the Should Be Paid field status on a draft vendor bill.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/control_bills.rst#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: control_bills/control-bills-should-be-paid.png\n   :align: center\n   :alt: Should Be Paid field status on draft vendor bill.\n```\n\n----------------------------------------\n\nTITLE: Running Odoo Shell to Trigger Debugger\nDESCRIPTION: Command to run the Odoo shell which can then be used to trigger code containing debugger breakpoints for interactive debugging sessions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/advanced/containers.rst#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ odoo-bin shell\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database for Odoo Import (bash)\nDESCRIPTION: Creates an empty PostgreSQL database using the `createdb` command. This is a prerequisite step before importing an SQL dump file into a new Odoo database instance. The `<database_name>` should be replaced with the desired name for the new database.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/setup.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncreatedb <database_name>\n```\n\n----------------------------------------\n\nTITLE: Using data-js Attribute in XML\nDESCRIPTION: Shows how to bind a custom JavaScript method to a snippet using the data-js attribute. This binds the CustomMethodName JavaScript method to the .s_airproof_snippet elements.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<div data-selector=\".s_airproof_snippet\" data-js=\"CustomMethodName\">\n```\n\n----------------------------------------\n\nTITLE: Registering JavaScript Assets in Odoo Manifest\nDESCRIPTION: Python code for the module's manifest file that registers JavaScript files for the frontend. This configuration adds custom JavaScript functionality to the assets_frontend bundle.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n'assets': {\n   'web.assets_frontend': [\n      'website_airproof/static/src/js/theme.js',\n   ],\n},\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Document Headers\nDESCRIPTION: Document structure defining the main heading and subheadings for fiscal positions documentation\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/taxes/fiscal_positions.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n==========================================\nFiscal positions (tax and account mapping)\n==========================================\n```\n\n----------------------------------------\n\nTITLE: Setting Up Date Range Widget in XML\nDESCRIPTION: Shows how to use the daterange widget to allow selection of a start and end date from a single picker. It demonstrates linking the widget to separate start and end date fields.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"start_date\" widget=\"daterange\" options=\"{'end_date_field': 'end_date'}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Online Payments Structure in reST\nDESCRIPTION: Sphinx/reST documentation structure defining the online payments configuration process, including toctree references and image inclusions for the payment portal interface.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/payments/online.rst#2025-04-23_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n===============\nOnline payments\n===============\n\n.. toctree::\n\n   online/install_portal_patch\n\n.. image:: online/online-payment-providers.png\n   :align: center\n   :alt: Payment provider choice after having clicked on \"Pay Now\"\n\n.. image:: online/view-invoice.png\n   :alt: Email with a link to view the invoice online on the Customer Portal.\n\n.. image:: online/pay-now.png\n   :alt: \"Pay now\" button on an invoice in the Customer Portal.\n```\n\n----------------------------------------\n\nTITLE: Database Transaction Management in Odoo RPC Framework\nDESCRIPTION: This snippet illustrates how Odoo's RPC framework manages database transactions. It demonstrates why developers should never commit transactions manually in their code, as the framework automatically handles transaction management for all RPC calls.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef execute(self, db_name, uid, obj, method, *args, **kw):\n    db, pool = pooler.get_db_and_pool(db_name)\n    # create transaction cursor\n    cr = db.cursor()\n    try:\n        res = pool.execute_cr(cr, uid, obj, method, *args, **kw)\n        cr.commit() # all good, we commit\n    except Exception:\n        cr.rollback() # error, rollback everything atomically\n        raise\n    finally:\n        cr.close() # always close cursor opened manually\n    return res\n```\n\n----------------------------------------\n\nTITLE: Setting Component Cost Manually in Odoo Inventory\nDESCRIPTION: This describes how to manually override the automatically calculated component cost in Odoo. Users can click the 'Cost' field on the component's product form and enter a desired value, although subsequent Purchase Orders (POs) for that component will revert the cost back to the automatic calculation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/basic_setup/mo_costs.rst#2025-04-23_snippet_2\n\nLANGUAGE: Odoo Configuration\nCODE:\n```\nclicking the :guilabel:`Cost` field on\nthe component's product form and entering a value.\n```\n\n----------------------------------------\n\nTITLE: Technical Security System Configuration and DSFinV-K Export\nDESCRIPTION: Instructions for configuring Fiskaly TSS integration with Odoo Point of Sale and performing DSFinV-K data exports. Requires company registration with the financial authority and proper configuration of fiscal identifiers.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/germany.rst#2025-04-23_snippet_0\n\nLANGUAGE: configuration\nCODE:\n```\nl10n_de_pos_cert  # Germany - Certification for Point of Sale module\nl10n_de_pos_res_cert  # Germany - Certification for Point of Sale of type restaurant module\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Form for Variant Selection Method in Odoo\nDESCRIPTION: Steps to configure a product form to use either the Product Configurator or Order Grid Entry for variant selection. This determines how variants are added to quotations or sales orders.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/sales_quotations/orders_and_variants.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nTo configure a product form to use either a product configurator or variant grid entry, start by\nnavigating to :menuselection:`Sales app --> Products --> Products` to view all the products in the\ndatabase.\n\nThen, select the desired product to configure, or click :guilabel:`New`, to create a new product\nfrom scratch. Once on the product form, click into the :guilabel:`Attributes \\& Variants` tab, where\nproduct variants can be viewed, modified, and added.\n\nAt the bottom of the :guilabel:`Attributes \\& Variants` tab, there is a :guilabel:`Sales Variant\nSelection` section with two options: :guilabel:`Product Configurator` and :guilabel:`Order Grid\nEntry`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Bill Control Policy in Odoo Purchase Settings\nDESCRIPTION: This RST snippet shows the configuration options for bill control policies in the Odoo Purchase app settings. It includes an image reference and explains the two available options: 'Ordered quantities' and 'Received quantities'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/manage.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: manage/manage-configuration-settings.png\n   :align: center\n   :alt: Bill control policies in purchase app settings.\n```\n\n----------------------------------------\n\nTITLE: Leaving a Conversation via Command in Odoo Live Chat\nDESCRIPTION: Allows the operator to exit the current live chat conversation. Typing `/leave` removes the operator but does not end the chat session for the customer or remove the customer from the conversation. Other operators may potentially join afterwards.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/websites/livechat/responses.rst#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n/leave\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for Creating Batch Transfers\nDESCRIPTION: Detailed steps for creating batch transfers manually through the Inventory app interface and batch transfer form\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/picking_methods/batch.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nCreate batch transfers\n======================\n\nTo manually group transfers directly from the :menuselection:`Inventory app`, hover over the\ndesired operation type from the :guilabel:`Inventory Overview` menu (e.g. the :guilabel:`Receipts`\nKanban card), click the :icon:`fa-ellipsis-v` :guilabel:`(vertical ellipsis)` icon, then select\n:guilabel:`Prepare Batch`.\n```\n\n----------------------------------------\n\nTITLE: Creating Code Tabs with Language-Specific Syntax Highlighting\nDESCRIPTION: Shows how to implement code tabs that automatically apply language-specific syntax highlighting to code blocks, with examples in C++, Python, and JavaScript.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_31\n\nLANGUAGE: text\nCODE:\n```\n.. tabs::\n\n   .. code-tab:: c++ Hello C++\n\n      #include <iostream>\n\n      int main() {\n          std::cout << \"Hello World\";\n          return 0;\n      }\n\n   .. code-tab:: python Hello Python\n\n      print(\"Hello World\")\n\n   .. code-tab:: javascript Hello JavaScript\n\n      console.log(\"Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Setting SMTP Username via Odoo Command-line\nDESCRIPTION: Provides the username required for authentication with the SMTP server.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n--smtp-user <name>\n```\n\n----------------------------------------\n\nTITLE: Displaying Referrals Onboarding Message in reStructuredText\nDESCRIPTION: This RST code snippet shows how to format the main message displayed during the Referrals application onboarding process. It uses a guilabel directive to style the text.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/referrals.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:guilabel:`GATHER YOUR TEAM! Job Referral Program`\n```\n\n----------------------------------------\n\nTITLE: Defining Purchase Liquidations Journal Short Code Example\nDESCRIPTION: Provides an example of a unique 5-digit short code used for the accounting entry sequence of a purchase liquidation journal. This code helps identify the journal in accounting entries.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/ecuador.rst#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nPT001\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching to a Specific Git Branch - Console\nDESCRIPTION: Shows how to create and switch to a new Git branch with a specific suffix using the console. The 'git switch -c' command creates a branch named by appending '-explain-pricelists-xyz' to the current branch. This supports parallel development or contextual changes. Requires Git and an existing repository; output is the current HEAD now pointing to the new branch.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation.rst#2025-04-23_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ git switch -c {CURRENT_BRANCH}-explain-pricelists-xyz\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies on MacOS\nDESCRIPTION: Commands to install Python dependencies including setuptools, wheel and requirements.txt packages on MacOS\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/source.rst#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /CommunityPath\n$ pip3 install setuptools wheel\n$ pip3 install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Appending Content After a Field Node – Odoo XML\nDESCRIPTION: This XML snippet shows how to append content after a matched field node using the position=\\\"after\\\" attribute within an <xpath> expression. The additional field node is inserted after the target element's parent, enabling extensibility of views without altering original definitions. Dependencies include Odoo's view inheritance engine, and it assumes a valid XPath selector.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_records.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<xpath expr=\\\"//field[@name='x_field']\\\" position=\\\"after\\\">\\n    <field name=\\\"x_other_field\\\"/>\\n</xpath>\n```\n\n----------------------------------------\n\nTITLE: Inserting RST Image for Blank Alternative Quotation\nDESCRIPTION: This RST code inserts an image showing a blank alternative quotation form with alternatives in the breadcrumbs.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/calls_for_tenders.rst#2025-04-23_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: calls_for_tenders/calls-for-tenders-blank-quotation.png\n   :align: center\n   :alt: Blank alternative quotation with alternatives in breadcrumbs.\n```\n\n----------------------------------------\n\nTITLE: Using Prefix of Account Codes Engine with Literal C/D in Prefix\nDESCRIPTION: This snippet shows how to use literal 'C' or 'D' in account prefixes without treating them as credit/debit filters.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/reporting/customize.rst#2025-04-23_snippet_7\n\nLANGUAGE: odoo\nCODE:\n```\n21D\\()\n```\n\n----------------------------------------\n\nTITLE: Defining an Odoo Model (Python)\nDESCRIPTION: This Python code defines an Odoo ORM model named 'academy.teachers'. It inherits from `models.Model` and defines a single character field named 'name' using `fields.Char()`. This model corresponds to a database table that will store teacher information. The file (`models.py`) needs to be imported in `academy/__init__.py`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import models, fields, api\n\nclass Teachers(models.Model):\n    _name = 'academy.teachers'\n\n    name = fields.Char()\n```\n\n----------------------------------------\n\nTITLE: Displaying Odoo Icon Class: oi-arrow-up-right\nDESCRIPTION: This snippet shows the CSS class name 'oi-arrow-up-right' used to render the corresponding up-right arrow icon within the Odoo framework. The surrounding HTML structure typically includes an `<i>` tag with this class applied.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/icons.rst#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\noi-arrow-up-right\n```\n\n----------------------------------------\n\nTITLE: Displaying Font Awesome Icons in Odoo Website XML\nDESCRIPTION: Demonstrates how to add a Font Awesome icon to an Odoo web page using the span element and icon classes. Font Awesome library must be included (it is by default in Odoo Website Builder). The class attribute specifies icon style. Outputs a span rendering the icon inline wherever required.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/media.rst#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<span class=\\\"fa fa-picture-o\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Substitution for List View Icon\nDESCRIPTION: This reStructuredText directive defines a substitution named 'list'. Usage of `|list|` results in the Odoo 'oi-view-list' icon followed by the text '(list) icon', standardizing the list view icon's appearance in the documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/crm/performance/forecast_report.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. |list| replace:: :icon:`oi-view-list` :guilabel:`(list)` icon\n```\n\n----------------------------------------\n\nTITLE: Identifying Odoo Module: l10n_mx_xml_polizas_edi (Odoo Mexican XML Polizas Export Edi bridge)\nDESCRIPTION: This snippet displays the technical name `l10n_mx_xml_polizas_edi` for the 'Odoo Mexican XML Polizas Export Edi bridge' Odoo module. This module serves as a complement or bridge for the `l10n_mx_xml_polizas` module, likely facilitating integration with EDI processes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/mexico.rst#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nl10n_mx_xml_polizas_edi\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Quality Check Types in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for quality check types using reStructuredText syntax. It includes a title and a toctree directive with the 'titlesonly' option, listing four different quality check type pages.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/quality/quality_check_types.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n\n===================\nQuality check types\n===================\n\n.. toctree::\n   :titlesonly:\n\n   quality_check_types/instructions_check\n   quality_check_types/pass_fail_check\n   quality_check_types/measure_check\n   quality_check_types/picture_check\n```\n\n----------------------------------------\n\nTITLE: Defining drag-handle Icon Substitution in reStructuredText (rst/svg)\nDESCRIPTION: Defines a reStructuredText substitution named 'drag-handle'. When referenced as |drag-handle|, it inserts an SVG icon representing a drag handle (four vertical dots), embedded using the 'raw-html' role, along with a descriptive GUI label '(drag handle)'. This icon is typically used to indicate elements that can be reordered via drag-and-drop.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/productivity/spreadsheet/global_filters.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. |drag-handle| replace:: :raw-html:`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 4 16\" fill=\"currentColor\"><circle cx=\"2\" cy=\"3.5\" r=\"1\"></circle><circle cx=\"2\" cy=\"6.5\" r=\"1\"></circle><circle cx=\"2\" cy=\"9.5\" r=\"1\"></circle><circle cx=\"2\" cy=\"12.5\" r=\"1\"></circle></svg>` :guilabel:`(drag handle)`\n```\n\n----------------------------------------\n\nTITLE: Configuring Directive Prefix with QWeb2.Engine.prefix in JavaScript\nDESCRIPTION: Describes the `prefix` attribute of `QWeb2.Engine`. This string attribute determines the prefix used to identify QWeb directives within templates during the parsing phase. The default value is 't'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nQWeb2.Engine.prefix\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for Pricing Documentation\nDESCRIPTION: ReStructuredText directive defining the documentation structure for pricing management, specifying the titlesonly option and linking to pricing, currencies, and discounts documentation pages.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/products_prices/prices.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   prices/pricing\n   prices/currencies\n   prices/discounts\n```\n\n----------------------------------------\n\nTITLE: Updating Database to Enterprise on Linux (Installer Method)\nDESCRIPTION: Command to update the database to include the web_enterprise module after installing the Enterprise package on Linux.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/community_to_enterprise.rst#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ python3 /usr/bin/odoo-bin -d <database_name> -i web_enterprise --stop-after-init\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for EU Distance Selling\nDESCRIPTION: ReStructuredText markup documentation showing the structure and configuration steps for EU intra-community distance selling in Odoo, including OSS reporting setup and navigation instructions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/taxes/eu_distance_selling.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n===================================\nEU intra-community distance selling\n===================================\n\n.. note::\n   This remains applicable even if the vendor is located outside of the European Union.\n\nConfiguration\n=============\n\n.. image:: eu_distance_selling/enable-feature.png\n   :alt: EU intra-community Distance Selling feature in Odoo Accounting settings\n\n.. tip::\n   Whenever you add or modify taxes, you can automatically update your fiscal positions.\n\n.. seealso::\n   - :doc:`../taxes`\n   - :doc:`../../fiscal_localizations`\n   - :doc:`fiscal_positions`\n\nOne-Stop Shop (OSS)\n===================\n\n.. image:: eu_distance_selling/oss-report.png\n   :alt: OSS reports view\n```\n\n----------------------------------------\n\nTITLE: Example Google Search Console Verification Identifier\nDESCRIPTION: Illustrates an example format (`google<unique_code>.html`) for the verification identifier provided by Google Search Console during the HTML file upload verification process. This specific string, representing the unique part of the filename or its content, needs to be copied from the downloaded file and pasted into the Odoo Website settings under Configuration -> Settings -> SEO.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/websites/website/configuration/google_search_console.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngoogle123abc.html\n```\n\n----------------------------------------\n\nTITLE: Tracking Hours on Helpdesk Ticket in RST\nDESCRIPTION: This RST snippet details how to track time spent on a helpdesk ticket using the Timesheets tab, including updating remaining hours and linking to the sales order.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/helpdesk/advanced/track_and_bill.rst#2025-04-23_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\nTime spent working on a **Helpdesk** ticket is tracked on the **Timesheets** tab on the specific\nticket.\n\nOn the ticket detail form, click on the :guilabel:`Timesheets` tab and click :guilabel:`Add a line`.\nChoose an :guilabel:`Employee`, add a :guilabel:`Description` of the task, and enter the number of\n:guilabel:`Hours Spent`.\n\nAs new lines are added to :guilabel:`Timesheets` tab, the :guilabel:`Remaining Hours on SO` field,\nat the bottom-right of the tab, is automatically updated.\n\n.. note::\n   If the number of hours on the :guilabel:`Timesheets` tab exceeds the number of hours sold, the\n   :guilabel:`Remaining Hours of SO` turns red.\n\nAs hours are added to the :guilabel:`Timesheets` tab, they are automatically updated in the\n:guilabel:`Delivered` field on the |SO|, as well.\n```\n\n----------------------------------------\n\nTITLE: Adding Odoo Upgrade Utils to requirements.txt\nDESCRIPTION: This snippet shows the line to add to the requirements.txt file for installing Odoo Upgrade Utils on Odoo.sh.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/upgrades/upgrade_utils.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nodoo_upgrade @ git+https://github.com/odoo/upgrade-util@master\n```\n\n----------------------------------------\n\nTITLE: Uncommenting Module Manifest Access Control Line\nDESCRIPTION: Python code snippet showing how to uncomment the security access control file declaration in the module's manifest file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# 'security/ir.model.access.csv',\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Fields to Backend Views using XPath in Odoo XML\nDESCRIPTION: Demonstrates how to add a previously declared custom field (`x_post_category`) to an existing backend form view (`website_blog.view_blog_post_form`) using an `ir.ui.view` record and XPath. The XPath expression `//field[@name='blog_id']` targets an existing field within the form, and `position=\"before\"` inserts the new field definition (`<field name=\"x_post_category\" ... />`) before it, making it visible and editable in the backend interface.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"view_blog_post_form_category\" model=\"ir.ui.view\">\n   <field name=\"name\">view_blog_post_form_category</field>\n   <field name=\"model\">blog.post</field>\n   <field name=\"inherit_id\" ref=\"website_blog.view_blog_post_form\"/>\n   <field name=\"arch\" type=\"xml\">\n      <xpath expr=\"//field[@name='blog_id']\" position=\"before\">\n         <field name=\"x_post_category\" string=\"...\" placeholder=\"...\"/>\n      </xpath>\n   </field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Defining Abbreviation Replacement Macros - Sphinx/reStructuredText\nDESCRIPTION: Defines reusable inline replacements for commonly referenced abbreviations in the documentation by mapping short codes (like |IAP|) to their expanded forms via the abbr role. This enables writers to use concise markup elsewhere in the file which will expand into proper accessible abbreviations. No external dependencies are required. Inputs are the abbreviation shortcuts and their expanded tooltip text as shown below.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/brazil.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |IAP| replace:: :abbr:`IAP (In-app-purchase)`\n.. |API| replace:: :abbr:`API (Application programming interface)`\n.. |SO| replace:: :abbr:`SO (Sales order)`\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for Odoo AccountReport Model with Sphinx\nDESCRIPTION: This snippet utilizes Sphinx's `automodel` directive to target the `odoo.addons.account.models.account_report.AccountReport` class for documentation generation. Subsequent `autofield` directives specify individual fields of the `AccountReport` model (like `name`, `line_ids`, various filters, etc.) to be included in the generated documentation. This structure is standard for documenting Odoo models using Sphinx, leveraging introspection to pull details from the source code.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/standard_modules/account/account_report.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodel:: odoo.addons.account.models.account_report.AccountReport\n    :main:\n\n    .. autofield:: name\n    .. autofield:: line_ids\n    .. autofield:: column_ids\n    .. autofield:: root_report_id\n    .. autofield:: country_id\n    .. autofield:: only_tax_exigible\n    .. autofield:: availability_condition\n    .. autofield:: load_more_limit\n    .. autofield:: search_bar\n    .. autofield:: default_opening_date_filter\n    .. autofield:: filter_multi_company\n    .. autofield:: filter_date_range\n    .. autofield:: filter_show_draft\n    .. autofield:: filter_unreconciled\n    .. autofield:: filter_unfold_all\n    .. autofield:: filter_period_comparison\n    .. autofield:: filter_growth_comparison\n    .. autofield:: filter_journals\n    .. autofield:: filter_analytic\n    .. autofield:: filter_hierarchy\n    .. autofield:: filter_account_type\n    .. autofield:: filter_partner\n    .. autofield:: filter_fiscal_position\n```\n\n----------------------------------------\n\nTITLE: Cloning the Odoo Documentation Repository (Git, Console Commands) - Console\nDESCRIPTION: This snippet demonstrates using Git to clone the Odoo documentation repository from GitHub and navigating into the created directory. Dependencies: git must be installed and the user must have access rights to GitHub. The output is a local copy of the 'documentation' repository. The SSH address is used for secure authentication. After cloning, the user navigates (cd) into the directory to prepare for editing.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation.rst#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git clone git@github.com:odoo/documentation.git\n$ cd documentation\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Forecasted Date with Horizon Days in Odoo (LaTeX)\nDESCRIPTION: This LaTeX snippet defines the formula used by Odoo to calculate the Forecasted Date when 'Horizon Days' are configured for a manual reordering rule. It adds the specified Horizon Days to the current date and the vendor lead time, allowing for earlier replenishment planning. This formula is specifically relevant for manual reordering rules as detailed in the replenishment report documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/warehouses_storage/replenishment/reordering_rules.rst#2025-04-23_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\text{Forecasted date} = \\text{Current date} + \\text{Vendor Lead Time} + \\text{Horizon Days}\n```\n\n----------------------------------------\n\nTITLE: Calculating Daily Reduction for Representation Fees with Absences using Math Formulas\nDESCRIPTION: This formula determines the daily reduction in fees when an employee has missing workdays. It factors in the total amount, the company threshold, a scaling value (3), and the number of scheduled workdays per week (days per week). Inputs: total amount, threshold, days per week. Outputs the amount to be reduced per day missed. Used for further payroll adjustment calculations, relies on prior calculation of total amount and payroll context.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll/payroll_localizations/belgium.rst#2025-04-23_snippet_4\n\nLANGUAGE: math\nCODE:\n```\n\\text{daily reduction} = \\frac{(\\text{total amount} - \\text{threshold}) \\times 3}{13 \\times \\text{days per week}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sendcloud Shipping Products Example\nDESCRIPTION: Example showing the configuration of delivery and return shipping products in Odoo with Sendcloud integration.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/sendcloud_shipping.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n| :guilabel:`DELIVERY`\n| :guilabel:`Shipping Product`: `DPD Home 0-31.5kg`\n| :guilabel:`Carrier`: `DPD`\n| :guilabel:`Minimum Weight`: `0.00`\n| :guilabel:`Maximum Weight`: `31.50`\n\n:guilabel:`Countries`: `Austria` `Belgium` `Bosnia` `Herzegovina` `Bulgaria` `Croatia` `Czech`\n`Republic` `Denmark` `Estonia` `Finland` `France` `Germany` `Greece` `Hungary` `Iceland`\n`Ireland` `Italy` `Latvia` `Liechtenstein` `Lithuania` `Luxembourg` `Monaco` `Netherlands`\n`Norway` `Poland` `Portugal` `Romania` `Serbia` `Slovakia` `Slovenia` `Spain` `Sweden`\n`Switzerland`\n\n| :guilabel:`RETURN`\n| :guilabel:`Return Shipping Product`: `DPD Return 0-20kg`\n| :guilabel:`Return Carrier`: `DPD`\n| :guilabel:`Return Minimum Weight`: `0.00`\n| :guilabel:`Return Maximum Weight`: `20.00`\n| :guilabel:`Return Countries`: `Belgium` `Netherlands`\n```\n\n----------------------------------------\n\nTITLE: Inserting RST Image for Quality Alert Form\nDESCRIPTION: This RST directive inserts an image of a filled-out quality alert form, providing visual context for the form description in the documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/quality/quality_management/quality_alerts.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: quality_alerts/alert-form.png\n   :align: center\n   :alt: A quality alert form that has been filled out.\n```\n\n----------------------------------------\n\nTITLE: Bank Payment Journal Entry\nDESCRIPTION: Journal entry recording the payment received from customer for an invoice with cash basis tax.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/taxes/cash_basis.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n**Bank journal (BANK)**\nDebit                    | Credit\n--------------------------|----------------------------\nBank $1,150              |\n                          | Receivable $1,150\n```\n\n----------------------------------------\n\nTITLE: reST Documentation Structure\nDESCRIPTION: Contains structured documentation using reStructuredText format, detailing employee configuration including working hours, private information tab, HR settings, and document management.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/employees/new_employee.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _employees/private-info:\n\nPrivate information tab\n-----------------------\n\n.. _employees/hr-settings:\n\nHR settings tab\n---------------\n\n.. _employees/docs:\n\nDocuments\n=========\n\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for Dashboard Integration\nDESCRIPTION: Documentation fragment detailing the process of adding reports to dashboards and accessing saved reports\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/crm/performance/win_loss.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\nTo add a report to :guilabel:`My dashboard`:\n\n1. On the :guilabel:`Pipeline Analysis` page, click the :guilabel:`⚙️ (gear)` icon.\n2. In the drop-down menu that appears, hover over :guilabel:`Dashboard`.\n3. In the :guilabel:`Add to my dashboard` drop-down menu, enter a name for the report (by\n   default, it is named :guilabel:`Pipeline`).\n4. Click :guilabel:`Add`.\n\nTo view a saved report:\n\n1. Return to the main apps page, and navigate to :menuselection:`Dashboards app --> My\n   Dashboard`.\n```\n\n----------------------------------------\n\nTITLE: Alternative FEC Format with Montant/Sens Fields\nDESCRIPTION: Alternative CSV format for FEC data using Montant (Amount) and Sens (Direction) fields instead of separate Debit/Credit columns. Sens can be 'C' for Credit or 'D' for Debit.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/france.rst#2025-04-23_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\nJournalCode;JournalLib;EcritureNum;EcritureDate;CompteNum;CompteLib;CompAuxNum;CompAuxLib;PieceRef;PieceDate;EcritureLib;Montant;Sens;EcritureLet;DateLet;ValidDate;Montantdevise;Idevise\n```\n\n----------------------------------------\n\nTITLE: Setting Default FROM Email Address via Odoo Command-line\nDESCRIPTION: Defines the default email address to be used in the 'FROM' field when Odoo sends emails. Replace `<address>` with the desired sender email address.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n--email-from <address>\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for Avalara Portal\nDESCRIPTION: ReStructuredText markup for documenting Avalara portal features including transactions, filtering, reporting and jurisdiction management\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/taxes/avatax/avalara_portal.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _avatax/portal:\n\n=======================\nAvalara (Avatax) portal\n=======================\n\nAvalara's (*AvaTax*) management console offers account management options including: viewing/editing\nthe transactions sent from Odoo to *AvaTax*, details on how the taxes are calculated, tax reporting,\ntax exemption management, and tax return resources.\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Odoo Employees Documentation in reStructuredText\nDESCRIPTION: This code snippet defines the table of contents for the Odoo Employees documentation using reStructuredText directives. It includes links to subpages covering various aspects of employee management such as new employee onboarding, departments, certifications, equipment, offboarding, and retention reports.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/employees.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   employees/new_employee\n   employees/departments\n   employees/certifications\n   employees/equipment\n   employees/offboarding\n   employees/retention_report\n```\n\n----------------------------------------\n\nTITLE: Configuring Purchase Agreements in Odoo RST\nDESCRIPTION: This RST snippet shows the navigation path and steps to enable the Purchase Agreements feature in Odoo's Purchase app settings.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/purchase_templates.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nFirst, navigate to :menuselection:`Purchase app --> Configuration --> Settings`. Under the\n:guilabel:`Orders` section, tick the :guilabel:`Purchase Agreements` checkbox. Click\n:guilabel:`Save` to save the changes.\n```\n\n----------------------------------------\n\nTITLE: Identifying Incorrect Epson Printer Name Formats in CUPS\nDESCRIPTION: Illustrates common mistakes in formatting Epson printer names within CUPS for Odoo IoT. Incorrect formats include spaces, missing parameter separators (`__`), invalid parameters (`XDV`), or incomplete parameters (`SCALE` without value). While these might not prevent detection, they lead to incorrect print output.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/iot/devices/printer.rst#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nEPSON TMm 30II\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nEPSONTMm30II\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nEPSONTMm30II__IMC\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nEPSONTMm30II__IMC_XDV__\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nEPSONTMm30II__IMC_SCALE__\n```\n\n----------------------------------------\n\nTITLE: Raw Latex Horizontal Space Command Definition\nDESCRIPTION: Defines a raw latex command for creating horizontal space of 4cm, used for formatting document layout in the signature section.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/legal/terms/i18n/partnership_es.rst#2025-04-23_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n.. |hspace| raw:: latex\n\n        \\hspace{4cm}\n```\n\n----------------------------------------\n\nTITLE: Example Odoo Configuration: Hashed admin_passwd Line\nDESCRIPTION: This snippet shows an example line from an Odoo configuration file (`odoo.conf` or `.odoorc`). It displays the `admin_passwd` parameter set to a securely hashed value (using PBKDF2-SHA format), representing the master password used for database management operations. This is the typical appearance before resetting the password.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/deploy.rst#2025-04-23_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nadmin_passwd = $pbkdf2-sh39dji295.59mptrfW.9z6HkA$w9j9AMVmKAP17OosCqDxDv2hjsvzlLpF8Rra8I7p/b573hji540mk/.3ek0lg%kvkol6k983mkf/40fjki79m\n```\n\n----------------------------------------\n\nTITLE: reStructuredText Section Header Declaration\nDESCRIPTION: Defines the main document header and subheaders using reStructuredText syntax.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/reservation_methods/manually.rst#2025-04-23_snippet_1\n\nLANGUAGE: reST\nCODE:\n```\n==================\nManual reservation\n==================\n\n.. _inventory/reservation_methods/manually:\n```\n\n----------------------------------------\n\nTITLE: Creating Tables for Module Installation - Sphinx/reStructuredText\nDESCRIPTION: Demonstrates how to construct a table with headers and rows in Sphinx reStructuredText using the list-table directive. The table presents essential Odoo modules for Brazilian localization, their technical names, and a short description. Prerequisites include knowledge of Sphinx documentation syntax. The directive utilizes header rows, width specifications, and provides a readable structure for summarizing configuration items. Output is a markdown-styled list table with module details as structured content.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/brazil.rst#2025-04-23_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n   :widths: 25 25 50\n\n   * - Name\n     - Technical name\n     - Description\n   * - :guilabel:`Brazilian - Accounting`\n     - `l10n_br`\n     - Default :ref:`fiscal localization package <fiscal_localizations/packages>`, which represents\n       having the Generic Brazilian chart of accounts and Taxes, together with document types and\n       identification types.\n   * - :guilabel:`Brazil - Accounting Reports`\n     - `l10n_br_reports`\n     - Accounting reports for Brazil.\n   * - :guilabel:`AvaTax Brazil` & :guilabel:`AvaTax Brazil for Services`\n     - `l10n_br_avatax` & `l10n_br_avatax_services`\n     - Goods and Services tax computation through Avalara.\n   * - :guilabel:`Brazilian Accounting EDI` & :guilabel:`Brazilian Accounting EDI for services`\n     - `l10n_br_edi` & `l10n_br_edi_services`\n     - Provides electronic invoicing for goods and services for Brazil through AvaTax.\n   * - :guilabel:`Brazil Pix QR codes`\n     - `l10n_br_pix`\n     - Implements Pix QR codes for Brazil.\n```\n\n----------------------------------------\n\nTITLE: Defining global-filter Icon Substitution in reStructuredText (rst/svg)\nDESCRIPTION: Defines a reStructuredText substitution named 'global-filter'. When referenced as |global-filter|, it inserts an SVG icon representing the global filter concept, embedded using the 'raw-html' role, along with a descriptive GUI label '(global filter)'. This ensures consistent representation of the global filter icon throughout the documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/productivity/spreadsheet/global_filters.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. |global-filter| replace:: :raw-html:`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewbox=\"0 0 20 20\"><path fill=\"currentColor\" d=\"M1 3h12L7 9M5.5 6h3v11l-3-3M14 4h4v2h-4m-3 3h7v2h-7m0 3h7v2h-7\"></path></svg>` :guilabel:`(global filter)`\n```\n\n----------------------------------------\n\nTITLE: Using data-selector Attribute in XML\nDESCRIPTION: Demonstrates how to use the data-selector attribute to target elements by tag name, class, or ID for applying custom options in website themes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n<div data-selector=\"section, h1, .custom_class, #custom_id\">\n```\n\n----------------------------------------\n\nTITLE: Navigating to Scheduled Actions in Odoo Developer Mode\nDESCRIPTION: This snippet provides instructions for accessing the Scheduled Actions menu in Odoo's developer mode. It's used for manually generating closings for test and audit purposes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/france.rst#2025-04-23_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:menuselection:`Settings --> Technical --> Automation --> Scheduled Actions`\n```\n\n----------------------------------------\n\nTITLE: Using Registered Images in Odoo Website XML Templates\nDESCRIPTION: Demonstrates referencing a previously registered image within XML template markup. Utilizes the Odoo route for attachments, using the record ID as part of the URL. Requires the image be declared as an ir.attachment. The only required parameter is the src path, which must match the record. Output is an <img> tag that includes the image for display in the rendered web page.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/media.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<img src=\\\"/web/image/website_airproof.img_about_01\\\" alt=\\\"\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo Multiple User Outgoing Mail Servers (Azure OAuth Example)\nDESCRIPTION: This example demonstrates configuring multiple outgoing mail servers in Odoo for individual users alongside a dedicated notifications server. Each user's server (e.g., for John and Jane) has `FROM Filtering` set to their specific email address, allowing them to send emails under their own name. A separate server handles notifications, using the default configured in system parameters (`mail.catchall.domain` and `mail.default.from`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/email_communication/azure_oauth.rst#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- User #1 mailbox\n   - Outgoing mail server #1 **username** (login) = `john@example.com`\n   - Outgoing mail server #1 :guilabel:`FROM Filtering` = `john@example.com`\n- User #2 mailbox\n   - Outgoing mail server #2 **username** (login) = `jane@example.com`\n   - Outgoing mail server #2 :guilabel:`FROM Filtering` = `jane@example.com`\n- Notifications mailbox\n   - Outgoing mail server #3 **username** (login) = `notifications@example.com`\n   - Outgoing mail server #3 :guilabel:`FROM Filtering` = `notifications@example.com`\n- System Parameters\n   - `mail.catchall.domain` in system parameters = `example.com`\n   - `mail.default.from` in system parameters = `notifications`\n```\n\n----------------------------------------\n\nTITLE: Interpreting SMTP Delivery Failure Messages in Odoo - Text\nDESCRIPTION: This snippet provides a real-world example of an SMTP delivery failure notification, typically encountered when Odoo attempts to send an email using an external service (Sendgrid) without a verified sender address. The text includes the error code (550), a brief error description, and a link to sender identity requirements. It helps administrators recognize and interpret SMTP responses and guides them to resolve such issues by updating sender verification or email configuration. The output is a plaintext message used in error diagnosis; inputs are SMTP server responses. There are no code dependencies, but successful debugging may require administrative email server access.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/email_communication/faq.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMail Delivery Failed\\nMail delivery failed via SMTP server 'None'.\\nSMTPDataError: 550\\nThe from address does not match a verified Sender Identity. Mail cannot be sent until this\\nerror is resolved. Visit https://sendgrid.com/docs/for-developers/sending-email/sender-identity/\\nto see the Sender Identity requirements\n```\n\n----------------------------------------\n\nTITLE: Installing Odoo Upgrade Utils via pip\nDESCRIPTION: This snippet demonstrates how to install the Odoo Upgrade Utils library using pip for platforms where Odoo is not self-managed.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/upgrades/upgrade_utils.rst#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python3 -m pip install git+https://github.com/odoo/upgrade-util@master\n```\n\n----------------------------------------\n\nTITLE: Adding Operations to a Bill of Materials in Odoo\nDESCRIPTION: Details the steps to add a manufacturing operation to a Bill of Materials (BoM) via the 'Operations' tab. This involves clicking 'Add a line', entering an operation name, selecting the relevant Work Center, and specifying the estimated Default Duration in the pop-up window.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/basic_setup/mo_costs.rst#2025-04-23_snippet_10\n\nLANGUAGE: Odoo Configuration\nCODE:\n```\nIn the :guilabel:`Operations` tab, add an operation by clicking :guilabel:`Add a line` to open the\n:guilabel:`Create Operations` pop-up window. Enter a title for the operation in the\n:guilabel:`Operation` field.\n\nSelect the :guilabel:`Work Center` where the operation is carried out. Then, add a\n:guilabel:`Default Duration`, which is the estimated amount of time the operation takes to complete.\n```\n\n----------------------------------------\n\nTITLE: Using data-drop-near Attribute in XML\nDESCRIPTION: Demonstrates how to define where a snippet can be dropped beside using the data-drop-near attribute. This example allows the snippet to be dropped near elements with the .card class.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<div data-selector=\".s_airproof_snippet_card\" data-drop-near=\".card\">\n```\n\n----------------------------------------\n\nTITLE: Setting Translatable Attributes with Dynamic Content using t-attf- in Odoo XML\nDESCRIPTION: Demonstrates the recommended way to create translatable attributes in Odoo XML views using `t-attf-`. This approach correctly handles string interpolation (`#{user.name}`) and marks the entire resulting string as translatable. This is preferred over using `t-att-` with string concatenation for translatable attributes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/translations.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<div t-attf-title=\"Hello #{user.name}\" />\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for Personal Information Configuration\nDESCRIPTION: RST markup for documenting the personal information section of employee cards in Odoo, including access paths and configuration options.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll.rst#2025-04-23_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n   An employee card can be thought of as an employee personal file.\n\nThe :guilabel:`Personal Info` section lists all of the fields that are available to enter on the\nemployee's card. To access this section, go to :menuselection:`Payroll app --> Configuration -->\nSalary Package Configurator: Personal Info`.\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Important Notice Block\nDESCRIPTION: Creates an 'important' notice block to highlight key information about the Purchase Analysis report and reference other documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/advanced/analyze.rst#2025-04-23_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. important::\n   The :guilabel:`Purchase Analysis` report is one of many reports available across the Odoo app\n   suite. This documentation only covers the measures specific to the :guilabel:`Purchase Analysis`\n   report, along with a few use case examples.\n\n   For a full overview of the basic features available in most Odoo reports, see the documentation\n   on :doc:`reporting essentials <../../../essentials/reporting>`.\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with pip\nDESCRIPTION: Command to install Python package dependencies using pip package manager\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/source.rst#2025-04-23_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ cd /CommunityPath\n$ pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Identifying Odoo Module: l10n_mx_edi (EDI for Mexico)\nDESCRIPTION: This snippet shows the technical name `l10n_mx_edi` for the 'EDI for Mexico' Odoo module. This module provides the core functionality for generating and validating electronic documents (like invoices and payment complements) according to SAT specifications. It's essential for electronic invoicing compliance in Mexico.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/mexico.rst#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nl10n_mx_edi\n```\n\n----------------------------------------\n\nTITLE: Example Redirect URI for Azure App Registration in Odoo Integration\nDESCRIPTION: This snippet provides an example format for the Redirect URI required during Microsoft Azure application registration when integrating with Odoo. The user must replace `yourdbname.odoo.com` with their specific Odoo database URL. This URI specifies the endpoint in the Odoo application where Microsoft will redirect the user and send the authentication response after successful authorization.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/productivity/calendar/outlook.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://yourdbname.odoo.com/microsoft_account/authentication\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Navigation Instructions\nDESCRIPTION: Documentation showing the menu navigation paths and steps for configuring delivery costs in Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nTo calculate shipping on sales orders and e-commerce, the *Delivery Costs* module must be installed.\nTo do so, navigate to the :menuselection:`Apps` application from the main Odoo dashboard.\n\nThen, remove the :guilabel:`Apps` filter, and type in `Delivery Costs` in the :guilabel:`Search...`\nbar. After finding the :guilabel:`Delivery Costs` module, click :guilabel:`Activate` to install it.\n```\n\n----------------------------------------\n\nTITLE: Displaying a Tip Box in reStructuredText\nDESCRIPTION: This reStructuredText directive creates a 'tip' admonition box. It highlights useful information for the user, suggesting the pivot view offers more in-depth data analysis capabilities, including multiple measures and viewing data by month and stage.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/members/members_analysis.rst#2025-04-23_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. tip::\n   The :ref:`pivot view <reporting/using-pivot>` can be used to view and analyze data in a more\n   in-depth manner. Multiple measures can be selected, and data can be viewed by month, and by\n   opportunity stage.\n```\n\n----------------------------------------\n\nTITLE: Using XML IDs for Tags in Prefix of Account Codes Engine\nDESCRIPTION: This example shows how to reference account tags using XML IDs in the Prefix of Account Codes engine.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/reporting/customize.rst#2025-04-23_snippet_9\n\nLANGUAGE: odoo\nCODE:\n```\ntag(my_module.my_tag)\n```\n\n----------------------------------------\n\nTITLE: Navigation Menu Path in RST\nDESCRIPTION: RST formatting for displaying navigation menu paths in the Odoo interface\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/product_management/inventory_valuation/inventory_valuation_config.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n:menuselection:`Inventory app --> Configuration --> Product Categories`\n```\n\n----------------------------------------\n\nTITLE: Mapping Payment Internal Transfers Documentation (Finance)\nDESCRIPTION: Maps the old documentation path for internal transfers under Payments (`applications/finance/accounting/payments/internal_transfers.rst`) to the new path under Bank (`applications/finance/accounting/bank/internal_transfers.rst`) within the Odoo Finance/Accounting documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/18.0.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/payments/internal_transfers.rst applications/finance/accounting/bank/internal_transfers.rst\n```\n\n----------------------------------------\n\nTITLE: Instantiating Page Template Blocks for New Page Templates - XML\nDESCRIPTION: Shows how to instantiate both customized and standard snippet templates for inclusion in a new static page template. Uses 'inherit_id' and 'primary' attributes to register each block. Required in the same XML data file that defines or references these snippets.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\\\"new_page_template_s_airproof_text_block_h1\\\" inherit_id=\\\"website_airproof.s_airproof_text_block_h1\\\" primary=\\\"True\\\"/>\\n<template id=\\\"new_page_template_airproof_faq_s_title\\\" inherit_id=\\\"website.s_title\\\" primary=\\\"True\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Specifying Language for I18n Operations via Odoo Command-line\nDESCRIPTION: Sets the target language for internationalisation (i18n) import or export operations. This option is mandatory when using '--i18n-export' or '--i18n-import'. Use the language code (e.g., 'fr_FR').\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n-l, --language <language>\n```\n\n----------------------------------------\n\nTITLE: Structuring Sales Documentation Index with reStructuredText - reStructuredText\nDESCRIPTION: Defines a section headed 'Sales' for documentation purposes and includes a 'toctree' directive listing multiple sales-related modules. This approach uses reStructuredText syntax to generate navigable documentation for the Odoo project. The snippet is mainly used for organizing written content, with no runtime dependencies except for a documentation generator that supports reStructuredText (such as Sphinx). The list under the toctree will show as hierarchical navigation links in generated documentation. No parameters are required, and the input is limited to the order and presence of referenced submodules.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n\n=====\nSales\n=====\n\n\n.. toctree::\n\n    sales/crm\n    sales/sales\n    sales/point_of_sale\n    sales/subscriptions\n    sales/rental\n    sales/members\n```\n\n----------------------------------------\n\nTITLE: Displaying Odoo Icon Class: oi-arrow-up-left\nDESCRIPTION: This snippet shows the CSS class name 'oi-arrow-up-left' used to render the corresponding up-left arrow icon within the Odoo framework. The surrounding HTML structure typically includes an `<i>` tag with this class applied.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/icons.rst#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\noi-arrow-up-left\n```\n\n----------------------------------------\n\nTITLE: Updated XML Template for Map Widget with Geolocation Button\nDESCRIPTION: This XML template extends the previous version by adding a button to trigger geolocation functionality in the custom map widget.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_55\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\"WidgetCoordinates\">\n    <iframe width=\"400\" height=\"300\"\n        t-attf-src=\"https://maps.google.com/?ie=UTF8&amp;ll={{latitude}},{{longitude}}&amp;output=embed\">\n    </iframe>\n    <button>Get My Current Coordinate</button>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Viewing Component Cost in Odoo Inventory\nDESCRIPTION: This describes the navigation path within Odoo to view the cost of a component product. The cost, automatically calculated based on the average purchase cost from Purchase Orders (POs), is found in the 'Cost' field on the 'General Information' tab of the product form in the Inventory app.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/basic_setup/mo_costs.rst#2025-04-23_snippet_1\n\nLANGUAGE: Odoo Configuration\nCODE:\n```\n:guilabel:`Inventory app --> Products --> Products`, and select a component product. The cost is displayed in the\n:guilabel:`Cost` field of the :guilabel:`General Information` tab, on the component's product form.\n```\n\n----------------------------------------\n\nTITLE: Using we-row Element in XML\nDESCRIPTION: Shows how to create a row where elements are displayed next to each other using the we-row element. This is useful for grouping related options together.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_38\n\nLANGUAGE: xml\nCODE:\n```\n<we-row string=\"My option\">\n   <we-select>...</we-select>\n   <we-button-group>...</we-button-group>\n</we-row>\n```\n\n----------------------------------------\n\nTITLE: Configuring Calendar View in Odoo XML\nDESCRIPTION: Example of a calendar view that displays idea records as calendar events. It sets the start date field, color segmentation based on inventor_id, and includes the name field in event display.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/backend.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<calendar string=\"Ideas\" date_start=\"invent_date\" color=\"inventor_id\">\n    <field name=\"name\"/>\n</calendar>\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo Documentation Table of Contents in reStructuredText\nDESCRIPTION: Sets up a hidden table of contents (toctree) for Odoo documentation with a maximum depth of 4 levels. It includes a single document 'terms_of_sale_de' and uses the ':nosearch:' and ':orphan:' directives to control indexing and orphan warnings.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/legal/terms/i18n/terms_of_sale_tex_de.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n:orphan:\n\n.. toctree::\n   :maxdepth: 4\n   :hidden:\n\n   terms_of_sale_de\n```\n\n----------------------------------------\n\nTITLE: Updating Module Version in Manifest\nDESCRIPTION: Demonstrates how to update the version number in the module manifest file to trigger automatic updates.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n'version': '0.1'\n```\n\nLANGUAGE: python\nCODE:\n```\n'version': '0.2'\n```\n\nLANGUAGE: python\nCODE:\n```\n'version': '0.3'\n```\n\n----------------------------------------\n\nTITLE: Displaying Vendor Bill Form for Ordered Quantities Policy in Odoo\nDESCRIPTION: This RST snippet includes an image reference showing the vendor bill form when the bill control policy is set to 'Ordered quantities' in Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/manage.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: manage/manage-draft-vendor-bill.png\n   :align: center\n   :alt: Vendor bill form for ordered quantities control policy.\n```\n\n----------------------------------------\n\nTITLE: RST Table Structure for Predefined Accounts\nDESCRIPTION: ReStructuredText table showing predefined accounts in the Canadian Chart of Accounts, organized by account type.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/canada.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - :guilabel:`Type`\n     - :guilabel:`Account Name`\n   * - :guilabel:`Current Assets`\n     - | :guilabel:`Bank Suspense Account`\n       | :guilabel:`Outstanding Receipts`\n       | :guilabel:`Outstanding Payments`\n       | :guilabel:`Liquidity Transfer`\n       | :guilabel:`Stock Valuation`\n       | :guilabel:`Stock Interim (Received)`\n       | :guilabel:`Stock Interim (Delivered)`\n       | :guilabel:`Cost of Production`\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Output for Company Data\nDESCRIPTION: Example of the CSV output generated by the company export SQL query. This shows the formatted data with External IDs, company names, and the 'Is a Company' flag set to True.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials/export_import_data.rst#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nExternal ID,Name,Is a Company\ncompany_1,Bigees,True\ncompany_2,Organi,True\ncompany_3,Boum,True\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Products & Prices in reStructuredText\nDESCRIPTION: This snippet creates a table of contents for the Products & Prices section using reStructuredText syntax. It sets up a titlesonly directive and lists the subsections to be included in the documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/products_prices.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n\n=================\nProducts & Prices\n=================\n\n.. toctree::\n   :titlesonly:\n\n   products_prices/products\n   products_prices/prices\n   products_prices/returns\n   products_prices/ewallets_giftcards\n   products_prices/loyalty_discount\n```\n\n----------------------------------------\n\nTITLE: Payment Provider Class Reference (Odoo)\nDESCRIPTION: API documentation structure for the PaymentProvider class showing available method references including feature support computation, provider compatibility checks, form view generation, validation handling, and tokenization requirements.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/standard_modules/payment/payment_provider.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:hide-page-toc:\n\n================\nPayment Provider\n================\n\n.. autoclass:: odoo.addons.payment.models.payment_provider.PaymentProvider()\n\n   .. automethod:: _compute_feature_support_fields\n   .. automethod:: _get_compatible_providers\n   .. automethod:: _get_redirect_form_view\n   .. automethod:: _get_validation_amount\n   .. automethod:: _get_validation_currency\n   .. automethod:: _is_tokenization_required\n   .. automethod:: _should_build_inline_form\n   .. automethod:: _get_removal_values\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Example with Image\nDESCRIPTION: RST markup showing an image directive for the expense categories interface\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/expenses.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: expenses/categories.png\n   :align: center\n   :alt: Set expense costs on products.\n```\n\n----------------------------------------\n\nTITLE: Creating Project Update in Odoo Dashboard\nDESCRIPTION: This RST snippet outlines the process of creating a new project update in the Odoo project dashboard. It details the fields to be filled and their purposes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/project/project_management/project_dashboard.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nTo create a new project update, go to the project dashboard, click :guilabel:`New`, and fill in the\nfollowing fields:\n\n  - :guilabel:`Status`: Choose between :guilabel:`On Track`, :guilabel:`At Risk`, :guilabel:`Off\n    Track`, :guilabel:`On Hold`, and :guilabel:`Done`. Once the status is set, a color-coded dot is\n    displayed on the project's Kanban card, allowing the project manager to easily identify which\n    projects need attention.\n  - :guilabel:`Progress`: Manually input the completion percentage based on the project's progress.\n  - :guilabel:`Date` and :guilabel:`Author`: These fields are automatically filled in with\n    appropriate information based on the user who created the update and the current date.\n  - :guilabel:`Description`: Use this rich-text field to gather notes. Depending on the project\n    configuration (e.g., if the project is billable), this field may be pre-filled with current\n    information on aspects such as profitability, budget, milestones, etc.\n```\n\n----------------------------------------\n\nTITLE: Required Slashes for Odoo CDN Base URL\nDESCRIPTION: This snippet highlights the necessary formatting for the 'CDN Base URL' field within Odoo's Website settings when configuring the CDN. Two forward slashes (`//`) must precede the KeyCDN Zone URL, and one forward slash (`/`) must follow it.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/websites/website/configuration/cdn.rst#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n//\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n/\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote Repository\nDESCRIPTION: Uploads committed changes to the master branch of your remote repository. The -u flag sets up tracking for the branch.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/branches.rst#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ git push -u origin master\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with pip (pip, Console Commands) - Console\nDESCRIPTION: This snippet installs all Python dependencies required for building the Odoo documentation, as listed in requirements.txt. Dependencies: pip must be installed, and requirements.txt should be present in the current directory (usually the root of the cloned documentation repo). The command does not specify a virtual environment; thus, dependencies are installed globally or per user. Success is required for building documentation locally.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation.rst#2025-04-23_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ pip install -r requirements.txt\n\n```\n\n----------------------------------------\n\nTITLE: Defining Module Manifest - Odoo - Python\nDESCRIPTION: This Python dictionary defines the __manifest__.py file for an Odoo localization module, specifying module metadata, dependencies (notably on the 'account' module), and providing lists of demo and data files needed for localization. You must have Odoo installed and the conventional directory structure in place for your files. Inputs include name, version, dependencies, and provided data/demo XML files. Outputs affect how the module is registered and loaded by Odoo. Only required fields should be set; missing fields may cause module installation errors.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/accounting_localization.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"name\": \"COUNTRY - Accounting\",\n    \"version\": \"1.0.0\",\n    \"category\": \"Accounting/Localizations/Account Charts\",\n    \"license\": \"LGPL-3\",\n    \"depends\": [\n        \"account\",\n    ],\n    \"data\": [\n        \"data/other_data.xml\",\n        \"views/xxxmodel_views.xml\",\n    ],\n    \"demo\": [\n        \"demo/demo_company.xml\",\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Working Hours in Odoo RST Documentation\nDESCRIPTION: Documentation detailing the configuration of default working hours including company settings, time zones, and work time calculations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n- :guilabel:`Name`: type in the name for the new default working hours.\n- :guilabel:`Company`: select the company that can use these new default working hours.\n- :guilabel:`Average Hour Per Day`: the average hours per day field is auto-populated.\n- :guilabel:`Timezone`: select the time zone to be used.\n- :guilabel:`Company Full Time`: enter the number of hours per week.\n- :guilabel:`Work Time Rate`: this percentage is auto-generated.\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Odoo Sales Documentation\nDESCRIPTION: This snippet creates a table of contents for the Odoo Sales documentation, listing various subsections such as quotations, invoicing, products and prices, commissions, and integrations with Amazon, Shopee, and Gelato.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales.rst#2025-04-23_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   sales/sales_quotations\n   sales/invoicing\n   sales/products_prices\n   sales/commissions\n   sales/amazon_connector\n   sales/shopee_connector\n   sales/gelato\n```\n\n----------------------------------------\n\nTITLE: Updating Database to Enterprise on Windows\nDESCRIPTION: Command to update the database to include the web_enterprise module after installing Odoo Enterprise on Windows, run from the server subfolder in the installation path.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/community_to_enterprise.rst#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ..\\python\\python.exe odoo-bin -d <database_name> -i web_enterprise --stop-after-init\n```\n\n----------------------------------------\n\nTITLE: Storing Computed Fields with Dependencies in Odoo - Python\nDESCRIPTION: This variation creates a computed Char field ('description') on a model, specifying a dependency on 'partner_id.name' with the @api.depends decorator, and persists the field value in the database by setting store=True. This allows searching on 'description' but at a potential performance cost if many records refer to the same dependency. Requires correct model relationships, the use of the 'store' argument, and understanding ORM recomputation mechanics. Inputs: updates to related partner; outputs: persistent and auto-updated description.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/08_compute_onchange.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndescription = fields.Char(compute=\"_compute_description\", store=True)\npartner_id = fields.Many2one(\"res.partner\")\n\n@api.depends(\"partner_id.name\")\ndef _compute_description(self):\n    for record in self:\n        record.description = \"Test for partner %s\" % record.partner_id.name\n```\n\n----------------------------------------\n\nTITLE: Accessing PostgreSQL Database with psql in Odoo.sh\nDESCRIPTION: Example of how to access the PostgreSQL database shell from an Odoo.sh container. This demonstrates connecting to the database and shows the psql connection information.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/advanced/containers.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nodoo@odoo-addons-master-1.odoo.sh:~$ psql\npsql (9.5.2, server 9.5.11)\nSSL connection (protocol: TLSv1.2, cipher: ECDHE-RSA-AES256-GCM-SHA384, bits: 256, compression: off)\nType \"help\" for help.\n\nodoo-addons-master-1=>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Employee Records in Odoo Employees App\nDESCRIPTION: Specifies the application to navigate to in order to access and manage employee records, which is necessary for setting individual employee costs.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/basic_setup/mo_costs.rst#2025-04-23_snippet_6\n\nLANGUAGE: Odoo Configuration\nCODE:\n```\n:menuselection:`Employees` app\n```\n\n----------------------------------------\n\nTITLE: Defining a Checkbox Field (`boolean`) in Odoo\nDESCRIPTION: Defines a field representing a true/false value, typically rendered as a checkbox. Odoo's technical name is 'boolean'. Alternative widgets include 'Button' (radio button style) and 'Toggle' (switch style), both of which can be interacted with directly without entering edit mode.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/studio/fields.rst#2025-04-23_snippet_8\n\nLANGUAGE: Odoo\nCODE:\n```\nboolean\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText See Also Section\nDESCRIPTION: Related documentation links section using seealso directive\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/taxes/fiscal_positions.rst#2025-04-23_snippet_4\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. seealso::\n\n  * :doc:`../taxes`\n  * :doc:`B2B_B2C`\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Section Headers\nDESCRIPTION: Document structure headers defining the pricelists documentation hierarchy in RST format\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/point_of_sale/pricing/pricelists.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n==========\nPricelists\n==========\n\n.. _pricelists/configuration:\n\nConfiguration\n=============\n\n.. _pricelists/create:\n\nCreate pricelists\n-----------------\n\n.. _pricelists/simple:\n\nMultiple prices per product\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. _pricelists/advanced:\n\nAdvanced price rules\n~~~~~~~~~~~~~~~~~~~~\n```\n\n----------------------------------------\n\nTITLE: Mapping Orders and Variants in Quotations Documentation (Sales)\nDESCRIPTION: Maps the old documentation path for orders and variants in quotations under 'send_quotations' (`applications/sales/sales/send_quotations/orders_and_variants.rst`) to the new path under 'sales_quotations' (`applications/sales/sales/sales_quotations/orders_and_variants.rst`) within the Odoo Sales application documentation. Comment confirms the pattern `send_quotations/* --> sales_quotations/*`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/18.0.txt#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/sales/sales/send_quotations/orders_and_variants.rst applications/sales/sales/sales_quotations/orders_and_variants.rst               # sales/send_quotations/* --> sales/sales_quotations/*\n```\n\n----------------------------------------\n\nTITLE: JavaScript Tour Configuration for Odoo Estate Module\nDESCRIPTION: Defines a simple onboarding tour for the Estate module using Odoo's web tour system. Includes a single step that points users to the Estate app in the menu.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/importable_modules.rst#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registry } from \"@web/core/registry\";\n\nregistry.category(\"web_tour.tours\").add('estate_tour', {\n    url: \"/web\",\n    sequence: 170,\n    steps: () => [{\n    trigger: '.o_app[data-menu-xmlid=\"estate.menu_root\"]',\n    content: 'Start selling your properties from this app!',\n    position: 'bottom',\n    }],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Hexagon Shape using SVG\nDESCRIPTION: SVG code defining a simple custom hexagon shape stored in `/website_airproof/static/shapes/hexagons/01.svg`. It uses a `<polygon>` element with a specific fill color (`#3AADAA`), corresponding to color 1 in the default Odoo palette.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/shapes.rst#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<!-- /website_airproof/static/shapes/hexagons/01.svg -->\n\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"86\" height=\"100\">\n    <polygon points=\"0 25, 43 0, 86 25, 86 75, 43 100, 0 75\" style=\"fill: #3AADAA;\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Odoo Community Repository on Fedora\nDESCRIPTION: Commands to add the Odoo repository, install Odoo Community edition, and configure it as a service on Fedora systems.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/packages.rst#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf config-manager --add-repo=https://nightly.odoo.com/{CURRENT_MAJOR_BRANCH}/nightly/rpm/odoo.repo\n$ sudo dnf install -y odoo\n$ sudo systemctl enable odoo\n$ sudo systemctl start odoo\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for Spreadsheet Integration\nDESCRIPTION: Documentation fragment showing how to add reports to spreadsheets from different views in Odoo\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/crm/performance/win_loss.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n2. In the pop-up menu that appears, click :guilabel:`Confirm`.\n\n- **In Cohort or List View**:\n\n  1. Click the :guilabel:`⚙️ (gear)` icon.\n  2. In the drop-down menu that appears, hover over :guilabel:`Spreadsheet`.\n  3. In the next drop-down menu, click either :guilabel:`Insert in spreadsheet` or\n     :guilabel:`Link in spreadsheet`.\n```\n\n----------------------------------------\n\nTITLE: Creating Product Variants in Odoo\nDESCRIPTION: This snippet describes the process of creating product variants in Odoo by applying attributes and values to products. It covers accessing the product form, navigating to the Attributes & Variants tab, and adding attributes and values to generate variants.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/products_prices/products/variants.rst#2025-04-23_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\nOnce an attribute is created, use the attribute (and its values) to create a product variant. To\ndo that, go to :menuselection:`Sales app --> Products --> Products`, and select an existing product to\nview that desired product's form. Or, click :guilabel:`Create` to create a new product, to which a\nproduct variant can be added.\n\nOn the product form, click the :guilabel:`Attributes \\& Variants` tab to view, manage, and modify\nattributes and values for the product.\n\n.. image:: variants/attributes-values-tab.png\n   :align: center\n   :alt: The attributes and values tab on a typical product form in Odoo Sales.\n\nTo add an attribute to a product, and subsequent attribute values, click :guilabel:`Add a line` in\nthe :guilabel:`Attributes \\& Variants` tab. Then, choose the desired attribute from the drop-down\nmenu that appears.\n\n.. tip::\n   Attributes can be created directly from the :guilabel:`Attributes \\& Variants` tab of a product\n   form. To do that, start typing the name of the new attribute in the blank field, and select\n   either :guilabel:`Create` or :guilabel:`Create and edit...` from the mini drop-down menu that\n   appears.\n\n   Clicking :guilabel:`Create` creates the attribute, which can be customized later. Clicking\n   :guilabel:`Create and edit...` creates the attribute, and a :guilabel:`Create Attribute` pop-up\n   form appears. In the pop-up form, proceed to modify the attribute in a number of ways.\n\nOnce an attribute is selected in the :guilabel:`Attribute` column, proceed to select the specific\nattribute values to apply to the product, via the drop-down menu available in the :guilabel:`Values`\ncolumn.\n\n.. note::\n   There is no limit to how many values can be added.\n```\n\n----------------------------------------\n\nTITLE: Gelato Webhook URL Format Example\nDESCRIPTION: Example format for configuring the webhook URL endpoint in Gelato to receive order updates in Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/gelato.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://stealthywood.odoo.com/gelato/webhook\n```\n\n----------------------------------------\n\nTITLE: Using Aggregate Other Formulas Engine for Report Expressions\nDESCRIPTION: This snippet demonstrates the Aggregate Other Formulas engine which combines other expressions with arithmetic operations. It supports conditional subformulas to filter results based on thresholds.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/reporting/customize.rst#2025-04-23_snippet_2\n\nLANGUAGE: odoo\nCODE:\n```\nif_above(CUR(amount))\n   The value of the arithmetic expression will be returned only if it is greater than the provided\n   bound. Otherwise, the result will be `0`.\n\nif_below(CUR(amount))\n   The value of the arithmetic expression will be returned only if it is lower than the provided\n   bound. Otherwise, the result will be `0`.\n\nif_between(CUR1(amount1), CUR2(amount2))\n   The value of the arithmetic expression will be returned only if it is strictly between the\n   provided bounds. Otherwise, it will be brought back to the closest bound.\n\nif_other_expr_above(LINE_CODE.EXPRESSION_LABEL, CUR(amount))\n   The value of the arithmetic expression will be returned only if the value of the expression\n   denoted by the provided line code and expression label is greater than the provided bound.\n   Otherwise, the result will be `0`.\n\nif_other_expr_below(LINE_CODE.EXPRESSION_LABEL, CUR(amount))\n   The value of the arithmetic expression will be returned only if the value of the expression\n   denoted by the provided line code and expression label is lower than the provided bound.\n   Otherwise, the result will be `0`.\n```\n\n----------------------------------------\n\nTITLE: Git Commit and Push Submodule Changes\nDESCRIPTION: Commands for committing and pushing changes after adding a submodule to the repository.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/advanced/submodules.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -a && git push -u <remote> <branch>\n```\n\n----------------------------------------\n\nTITLE: Overriding Control Policy on Product Form in Odoo\nDESCRIPTION: This RST snippet demonstrates how to override the default control policy for a specific product in Odoo. It includes an image reference showing the Control Policy field on the product form.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/manage.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: manage/manage-product-form.png\n   :align: center\n   :alt: Control policy field on product form.\n```\n\n----------------------------------------\n\nTITLE: Cloning Odoo Repositories on Windows (HTTPS)\nDESCRIPTION: Commands to clone both Odoo Community and Enterprise repositories using HTTPS on Windows systems\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/source.rst#2025-04-23_snippet_1\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\> git clone https://github.com/odoo/odoo.git\nC:\\> git clone https://github.com/odoo/enterprise.git\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Document Options for Odoo Sales Documentation\nDESCRIPTION: This snippet sets various document options for the reStructuredText file, including hiding search functionality, showing content and table of contents, and hiding the page-level table of contents.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n:show-content:\n:hide-page-toc:\n:show-toc:\n```\n\n----------------------------------------\n\nTITLE: RST Table - Initial Payment Entry\nDESCRIPTION: Shows the journal entry when payment is received, with Account Receivable credited and Undeposited funds debited.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/get_started/cheat_sheet.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. rst-class:: table-sm d-c-table\n\n+-------------------------+--------------+------------+---------------+\n|Account                  |Debit         |Credit      |Reconciliation |\n+=========================+==============+============+===============+\n|Account Receivable       |              |100         |Invoice ABC    |\n+-------------------------+--------------+------------+---------------+\n|Undeposited funds        |100           |            |Check 0123     |\n+-------------------------+--------------+------------+---------------+\n```\n\n----------------------------------------\n\nTITLE: Setting Expense Re-invoicing Percentage Example\nDESCRIPTION: Example showing a painting company splitting travel expenses between two companies, with each company being assigned 50% of the expense in the Analytic Distribution.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/expenses/reinvoice_expenses.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nA painting company agrees to paint an office building that houses two different companies. During the estimate, a meeting is held at the office location to discuss the project.\n\nBoth companies agree to pay for the travel expenses for the painting company employees. When creating the expenses for the mileage and hotels, **both companies** are listed in the Analytic Distribution line, for 50% each.\n```\n\n----------------------------------------\n\nTITLE: Applying Text Gradient in Odoo XML\nDESCRIPTION: Shows how to apply a linear gradient effect to text within an Odoo website element (e.g., `<h2>`). It uses a `<font>` tag with the `text-gradient` class and an inline `style` attribute defining the `background-image` gradient.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/gradients.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<h2>\n    <font class=\"text-gradient\" style=\"background-image: linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%);\">A Section Subtitle</font>\n</h2>\n```\n\n----------------------------------------\n\nTITLE: Replacing Plus Icon Placeholder in reStructuredText\nDESCRIPTION: Defines a text replacement for a plus icon and label using reStructuredText syntax. This allows the icon to be easily referenced throughout the document.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/helpdesk/overview/help_center.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. |plus| replace:: :icon:`fa-plus` :guilabel:`(plus)` icon\n```\n\n----------------------------------------\n\nTITLE: Using Prefix of Account Codes Engine with Exclusions\nDESCRIPTION: This snippet shows how to exclude specific sub-prefixes when matching accounts in the Prefix of Account Codes engine.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/reporting/customize.rst#2025-04-23_snippet_5\n\nLANGUAGE: odoo\nCODE:\n```\n21 + 10\\(101, 102) - 5\\(57)\n```\n\n----------------------------------------\n\nTITLE: Enabling Header Template in XML\nDESCRIPTION: XML configuration to enable a specific header template in Odoo Website Builder.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"website.template_header_contact\" model=\"ir.ui.view\">\n   <field name=\"active\" eval=\"True\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Accessing Graph View for Stock Value Visualization (RST)\nDESCRIPTION: This snippet explains how to access and interpret the graph view for visualizing stock value in Odoo. It covers the default line chart view and options for bar and pie chart representations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/warehouses_storage/reporting/aging.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nGraph view\n==========\n\nThe stock value can be depicted graphically by clicking the :icon:`fa-area-chart`\n:guilabel:`(graph)` icon. By default, the graph is displayed in :icon:`fa-line-chart` line chart\nview and filtered to show the cumulative total of all inventory value over time in Odoo.\n\nAt the top of the report, a :icon:`fa-bar-chart` bar chart or :icon:`fa-pie-chart` pie chart view\ncan be selected instead.\n```\n\n----------------------------------------\n\nTITLE: Inserting Content Before Elements using XPath in Odoo XML\nDESCRIPTION: Shows how to insert content before a specific element using XPath. This example targets a `<nav>` element that is a direct child of `<header>` (`//header/nav`) and inserts a `<div>Some content before the header</div>` immediately before it using `position=\"before\"`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<xpath expr=\"//header/nav\" position=\"before\">\n   <div>Some content before the header</div>\n</xpath>\n```\n\n----------------------------------------\n\nTITLE: Navigating Odoo.sh Directory Structure\nDESCRIPTION: Overview of the main directories in an Odoo.sh container following the Linux Filesystem Hierarchy Standard, showing the location of source code, data directories, and Python installations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/advanced/containers.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── home\n│    └── odoo\n│         ├── src\n│         │    ├── odoo                Odoo Community source code\n│         │    │    └── odoo-bin       Odoo server executable\n│         │    ├── enterprise          Odoo Enterprise source code\n│         │    ├── themes              Odoo Themes source code\n│         │    └── user                Your repository branch source code\n│         ├── data\n│         │    ├── filestore           database attachments, as well as the files of binary fields\n│         │    └── sessions            visitors and users sessions\n│         └── logs\n│              ├── install.log         Database installation logs\n│              ├── odoo.log            Running server logs\n│              ├── update.log          Database updates logs\n│              └── pip.log             Python packages installation logs\n└── usr\n       ├── lib\n       │    ├── python2.7\n       │         └── dist-packages       Python 2.7 standard libraries\n       │    ├── python3\n       │         └── dist-packages       Python 3 standard libraries\n       │    └── python3.5\n       │         └── dist-packages       Python 3.5 standard libraries\n       ├── local\n       │    └── lib\n       │         ├── python2.7\n       │         │    └── dist-packages  Python 2.7 third-party libraries\n       │         └── python3.5\n       │              └── dist-packages  Python 3.5 third-party libraries\n       └── usr\n            └── bin\n                 ├── python2.7           Python 2.7 executable\n                 └── python3.5           Python 3.5 executable\n```\n\n----------------------------------------\n\nTITLE: Listing Onboarding Slide Messages in reStructuredText\nDESCRIPTION: This RST code block demonstrates how to create a numbered list of onboarding slide messages using reStructuredText syntax. Each item uses the guilabel directive for styling.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/referrals.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n#. :guilabel:`Oh no! Villains are lurking the city! Help us recruit a team of superheroes to save\n   the day!`\n#. :guilabel:`Browse through open job positions, promote them on social media, or refer friends.`\n#. :guilabel:`Collect points and exchange them for awesome gifts in the shop.`\n#. :guilabel:`Compete against your colleagues to build the best justice league!`\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for Exchange Rate Management\nDESCRIPTION: ReStructuredText blocks describing manual and automatic currency rate updates, including interface navigation and configuration options.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/get_started/multi_currency.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. _multi-currency/config-rates:\n\nCurrency rates\n--------------\n\nManual update\n~~~~~~~~~~~~~\n\nTo manually create and set a currency rate, go to :menuselection:`Accounting --> Configuration -->\nCurrencies`, click on the currency you wish to change the rate of, and under the :guilabel:`Rates`\ntab, click :guilabel:`Add a line` to create a new rate.\n```\n\n----------------------------------------\n\nTITLE: Scaffolding an Odoo Module from Local Odoo Installation\nDESCRIPTION: Command to create a new Odoo module structure using the odoo-bin scaffold tool from a local Odoo installation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./odoo-bin scaffold my_module ~/src/odoo-addons/\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring PostgreSQL Server on Fedora for Odoo\nDESCRIPTION: Series of commands to install, initialize, enable, and start PostgreSQL server on Fedora systems for use with Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/packages.rst#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf install -y postgresql-server\n$ sudo postgresql-setup --initdb --unit postgresql\n$ sudo systemctl enable postgresql\n$ sudo systemctl start postgresql\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for Multi-Currency Accounting Operations\nDESCRIPTION: ReStructuredText blocks detailing multi-currency accounting processes, including payment registration, bank transactions, and exchange rate journal entries.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/get_started/multi_currency.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. _multi-currency/mca:\n\nMulti-currency accounting\n=========================\n\n.. _multi-currency/mca-documents:\n\nInvoices, bills, and other documents\n------------------------------------\n\nFor all documents, you can select the currency and journal to use for the transaction on the\ndocument itself.\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending Invoice for Prepaid Services in RST\nDESCRIPTION: This RST snippet outlines the steps to create and send an invoice for prepaid support services, including options for down payments.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/helpdesk/advanced/track_and_bill.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\nAfter the |SO| has been confirmed, click the :guilabel:`Create Invoice` button. This opens a\n:guilabel:`Create invoice(s)` pop-up window.\n\nIf no down payment is collected, the :guilabel:`Create Invoice` type can remain as\n:guilabel:`Regular Invoice`. If a :doc:`down payment <../../../sales/sales/invoicing/down_payment>`\nis collected, choose between either :guilabel:`Down payment (percentage)` or :guilabel:`Down payment\n(fixed amount)`.\n\nWhen the necessary information has been entered, click :guilabel:`Create Draft`.\n\nThe invoice can then be sent to the customer for payment.\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Section Headers\nDESCRIPTION: Section headers for configuration and application sections with proper RST formatting\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/taxes/fiscal_positions.rst#2025-04-23_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\nConfiguration\n=============\n\n .. _fiscal_positions/mapping:\n\nTax and account mapping\n-----------------------\n```\n\n----------------------------------------\n\nTITLE: Adding See Also Reference in reStructuredText\nDESCRIPTION: This RST code snippet adds a 'see also' section with a reference to the Activities documentation page.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/crm/optimize/utilize_activities.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. seealso::\n - :doc:`Activities </applications/essentials/activities>`\n```\n\n----------------------------------------\n\nTITLE: Resizing Barcode in ZPL Label\nDESCRIPTION: Demonstrates how to adjust barcode size by modifying the BY command parameter from BY3 to BY2, reducing the bar width for a smaller scale.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/zebra.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n^XA^CI28\n...\n^FO100,160^BY3\n...\n^XZ\n```\n\nLANGUAGE: xml\nCODE:\n```\n^XA^CI28\n...\n^FO100,160^BY2\n...\n^XZ\n```\n\n----------------------------------------\n\nTITLE: Using Custom GeoIP Database Paths in Odoo CLI\nDESCRIPTION: Example command for starting Odoo with a custom path to the GeoLite2 City database using the --geoip-city-db option.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/geo_ip.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./odoo-bin --geoip-city-db= ~/Downloads/GeoLite2-City.mmdb\n```\n\n----------------------------------------\n\nTITLE: Installing web_enterprise Module on Linux (Source Code Method)\nDESCRIPTION: Command to install the web_enterprise module when upgrading to Enterprise using the source code method on Linux.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/community_to_enterprise.rst#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ -d <database_name> -i web_enterprise --stop-after-init\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Odoo UI Documentation in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for Odoo's user interface documentation using reStructuredText syntax. It includes directives for disabling search and specifying a titlesonly format for the toctree.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n\n==============\nUser interface\n==============\n\n.. toctree::\n    :titlesonly:\n\n    user_interface/view_records\n    user_interface/view_architectures\n    user_interface/scss_inheritance\n    user_interface/icons\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Unaccent Extension via Odoo Command-line\nDESCRIPTION: Specifies whether Odoo should attempt to enable the 'unaccent' PostgreSQL extension when creating new databases. This extension helps in searching by ignoring accents.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n--unaccent\n```\n\n----------------------------------------\n\nTITLE: Populating an Odoo Database via Command Line\nDESCRIPTION: Demonstrates the `odoo-bin populate` command used to duplicate existing data within a specified database (`my_database`). This example targets the `res.partner` and `account.move` models, multiplying their records by a factor of 1000. This utility is useful for generating large datasets for performance testing or benchmarking, introducing variations to handle constraints.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_45\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin populate -d  my_database --models res.partner,account.move --factors 1000\n```\n\n----------------------------------------\n\nTITLE: Displaying Referral Points Structure in RST\nDESCRIPTION: This RST code snippet shows the default point structure for referrals in Odoo's Referrals application. It lists the points earned for each recruitment stage, from Initial Qualification to Contract Signed.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/referrals/points.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n   The preconfigured point structure for referrals is as follows:\n\n   - :guilabel:`Initial Qualification`: 1 point\n   - :guilabel:`First Interview`: 20 points\n   - :guilabel:`Second Interview`: 9 points\n   - :guilabel:`Contract Proposal`: 5 points\n   - :guilabel:`Contract Signed`: 50 points\n\n   The default total points earned for a referral that is hired is 85 points. Modifications of the\n   points earned for each stage are made in the *Recruitment* application. Refer to the\n   :ref:`Recruitment <recruitment/modify-stages>` documentation to modify the points for each stage.\n```\n\n----------------------------------------\n\nTITLE: Identifying Odoo Module: l10n_mx_edi_extended_40 (EDI v4.0 for Mexico - COMEX)\nDESCRIPTION: This snippet displays the technical name `l10n_mx_edi_extended_40` for the optional 'EDI v4.0 for Mexico (COMEX)' Odoo module. It adapts the functionality of the `l10n_mx_edi_extended` module (external trade complement) to be compliant with the CFDI 4.0 specification.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/mexico.rst#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nl10n_mx_edi_extended_40\n```\n\n----------------------------------------\n\nTITLE: Filtering Sender Email Address for SMTP via Odoo Command-line\nDESCRIPTION: Specifies a filter (domain or full email address) to determine which sender addresses should use the configured SMTP settings. Emails from addresses not matching the filter will be encapsulated using system parameters ('mail.default.from' and 'mail.catchall.domain').\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n--from-filter <address or domain>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Schedule an Interview in Odoo\nDESCRIPTION: This snippet demonstrates the menu navigation path to schedule an interview for an applicant in the Odoo Recruitment app.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment/schedule_interviews.rst#2025-04-23_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n:menuselection:`Recruitment app`\n```\n\n----------------------------------------\n\nTITLE: Understanding the 'm' Parameter in ESC * Command\nDESCRIPTION: The 'm' parameter within the ESC/POS 'ESC *' command definition, as referenced on Epson's documentation. Its value determines printing characteristics; for the TM-U220 model, valid values are 0 or 1, excluding 32 or 33 which correspond to high vertical density.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/iot/devices/printer.rst#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nm\n```\n\n----------------------------------------\n\nTITLE: Creating RFQ from Purchase Template in Odoo RST\nDESCRIPTION: This RST snippet explains how to create a new Request for Quotation (RFQ) from an existing purchase template in Odoo, including vendor selection and product management.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/purchase_templates.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\nTo :ref:`create a new quotation <purchase/manage_deals/create-new-rfq>`, click :guilabel:`New\nQuotation`. This opens a new |RFQ|, that is pre-populated with the correct information, depending on\nthe settings configured on the |pt| form.\n\nIf there was no vendor identified on the |pt|, choose a :guilabel:`Vendor` from the drop-down list.\nProducts can be added to the |RFQ| by clicking :guilabel:`Add a product` in the :guilabel:`Products`\ntab. To remove a product, click the :icon:`fa-trash-o` :guilabel:`(trash)` icon at the far-right of\nthe product line.\n\nFrom the new |RFQ| form, click :guilabel:`Send by Email` to compose and send an email to the listed\nvendor. Click :guilabel:`Print RFQ` to generate a printable PDF of the quotation; or, once ready,\nclick :guilabel:`Confirm Order` to confirm the purchase order.\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Output for Person Data with Company Relationships\nDESCRIPTION: Example of the CSV output generated by the person export SQL query. This shows formatted data with External IDs for people, names, the 'Is a Company' flag set to False, and relationships to companies via External IDs.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials/export_import_data.rst#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nExternal ID,Name,Is a Company,Related Company/External ID\nperson_1,Fabien,False,company_1\nperson_2,Laurence,False,company_1\nperson_3,Eric,False,company_2\nperson_4,Ramsy,False,company_3\n```\n\n----------------------------------------\n\nTITLE: Non-Semantic HTML for Custom Title and Subtitle\nDESCRIPTION: This HTML example uses span tags with custom classes to render a title and subtitle. This method increases reliance on custom CSS for presentation and animation, and is discouraged due to lack of semantic meaning and maintainability. No dependencies are required.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/scss_tips.rst#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"o_module_custom_title\">\n   Hello There!\n</span>\n\n<span class=\"o_module_custom_subtitle\">\n   I\\'m a subtitle.\n</span>\n```\n\n----------------------------------------\n\nTITLE: Including Image for Survey Sending in RST\nDESCRIPTION: This RST directive includes an image showing how to send a custom survey to an applicant.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment.rst#2025-04-23_snippet_10\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: recruitment/send-survey.png\n   :align: center\n   :alt: Send a custom survey, also referred to as an interview form, to an applicant using a\n         pre-configured template.\n```\n\n----------------------------------------\n\nTITLE: Traditional DOM Event Binding\nDESCRIPTION: Shows the traditional way of binding DOM events using jQuery event handlers in Odoo widgets.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.MyWidget = instance.Widget.extend({\n    start: function() {\n        var self = this;\n        this.$(\".my_button\").click(function() {\n            self.button_clicked();\n        });\n    },\n    button_clicked: function() {\n        ..\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Reading Record Data in Multiple Languages\nDESCRIPTION: Examples showing how to update a partner record and then read its display name after the change using Odoo's execute_kw method across different programming languages.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nmodels.execute_kw(db, uid, password, 'res.partner', 'write', [[id], {name: \"Newer partner\"}])\n# get record name after having changed it\nmodels.execute_kw(db, uid, password, 'res.partner', 'read', [[id], ['display_name']])\n```\n\nLANGUAGE: php\nCODE:\n```\n$models->execute_kw($db, $uid, $password, 'res.partner', 'write', array(array($id), array('name'=>\"Newer partner\")));\n// get record name after having changed it\n$models->execute_kw($db, $uid, $password,\n    'res.partner', 'read', array(array($id), array('display_name')));\n```\n\nLANGUAGE: java\nCODE:\n```\nmodels.execute(\"execute_kw\", asList(\n    db, uid, password,\n    \"res.partner\", \"write\",\n    asList(\n        asList(id),\n        new HashMap() {{ put(\"name\", \"Newer Partner\"); }}\n    )\n));\n// get record name after having changed it\nasList((Object[])models.execute(\"execute_kw\", asList(\n    db, uid, password,\n    \"res.partner\", \"read\",\n    asList(asList(id), asList(\"display_name\"))\n)));\n```\n\nLANGUAGE: go\nCODE:\n```\nvar result bool\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"res.partner\", \"write\",\n    []any{\n        []int64{id},\n        map[string]string{\"name\": \"Newer partner\"},\n    },\n}, &result); err != nil {\n    log.Fatal(err)\n}\n// get record name after having changed it\nvar record []any\nif err := models.Call(\"execute_kw\", []any{\n    db, uid, password,\n    \"res.partner\", \"name_get\",\n    []any{\n        []int64{id},\n    },\n}, &record); err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Including Image in reStructuredText Document\nDESCRIPTION: Inserts an image into the document using reStructuredText syntax, specifying the file path and alt text for accessibility.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/helpdesk/overview/help_center.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: help_center/help-center-enable-features.png\n   :alt: Overview of the settings page of a team emphasizing the Help Center features.\n```\n\n----------------------------------------\n\nTITLE: Bill Control Policy Configuration\nDESCRIPTION: Example showing combined usage of menuselection and guilabel markup for complex UI navigation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nTo configure the bill control policy, navigate to :menuselection:`Purchase --> Configuration --> Settings`, and scroll down to the :guilabel:`Invoicing` section. Under :guilabel:`Bill Control`, select either :guilabel:`Ordered quantities` or :guilabel:`Received quantities`.\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to a Fork on Remote 'dev' with Git - Console\nDESCRIPTION: Demonstrates pushing the current local branch and setting the upstream to the 'dev' remote using the 'git push -u' command in the console. This is typical when working with a fork of the repository. Dependency is Git; key parameters are the remote alias 'dev' and the branch name. The expected outcome is the local branch being available on the 'dev' remote and future pushes defaulting to this upstream.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation.rst#2025-04-23_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ git push -u dev {CURRENT_BRANCH}-explain-pricelists\n```\n\n----------------------------------------\n\nTITLE: Comparing Epson TM-U220B Naming Conventions and Print Results\nDESCRIPTION: Provides examples of different naming conventions for the Epson TM-U220B printer in CUPS, demonstrating the effect of adding parameters like `LDV`, `LDH` (Low Density Horizontal), and `SCALE<X>` on the final printed receipt size and formatting.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/iot/devices/printer.rst#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nEpsonTMU220B__IMC_LDV__\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nEpsonTMU220B__IMC_LDV_SCALE75__\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nEpsonTMU220B__IMC_LDV_LDH__\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nEpsonTMU220B__IMC_LDV_LDH_SCALE35__\n```\n\n----------------------------------------\n\nTITLE: Running Module Tests with Odoo Command Line\nDESCRIPTION: Command to run tests for a module using the Odoo command line interface. This example shows how to install the 'sale' module with test mode enabled and appropriate logging configuration.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/advanced/containers.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$  odoo-bin -i sale --test-enable --log-level=test --stop-after-init\n```\n\n----------------------------------------\n\nTITLE: Editing Bank Account Number in RST\nDESCRIPTION: This RST code snippet shows how to include an image illustrating the process of editing bank account information in Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/bank.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: bank/bank-account-number.png\n   :alt: Edit your bank information\n```\n\n----------------------------------------\n\nTITLE: Sending Request for Quotation by Email in Odoo\nDESCRIPTION: Process of sending an RFQ to a vendor via email in Odoo's Purchase app.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/rfq.rst#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\nClicking :guilabel:`Send by Email` reveals a :guilabel:`Compose Email` pop-up window, with a\n:guilabel:`Purchase: Request for Quotation` template loaded, ready to send to the vendor's email\naddress (configured in the **Contacts** app).\n\nAfter crafting the desired message, click :guilabel:`Send`. Once sent, the |RFQ| moves to the\n:guilabel:`RFQ Sent` stage.\n```\n\n----------------------------------------\n\nTITLE: Feature Result Structure in JavaScript\nDESCRIPTION: Shows the structure for individual feature extraction results, including selected values and candidates with confidence scores.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/extract_api.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"feature_name\": {\n    \"selected_value\": candidate_12,\n    \"candidates\": [candidate_12, candidate_3, candidate_4, ...]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating File Download Links using RST :download: Directive\nDESCRIPTION: This snippet shows the reStructuredText syntax for creating a hyperlink that prompts a file download. It uses the `:download:` role, specifying the display text and the relative path to the downloadable file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n.. code-block:: text\n\n   Download this :download:`module structure template <rst_guidelines/my_module.zip>` to start building your module.\n```\n\n----------------------------------------\n\nTITLE: Installing Odoo Upgrade Utils via Command Line\nDESCRIPTION: This snippet shows how to start Odoo with the Upgrade Utils library by prepending its path to the --upgrade-path option.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/upgrades/upgrade_utils.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ./odoo-bin --upgrade-path=/path/to/upgrade-util/src,/path/to/other/upgrade/script/directory [...]\n```\n\n----------------------------------------\n\nTITLE: RST Table - Direct Bank Reconciliation\nDESCRIPTION: Shows the journal entry when payment is directly reconciled with the bank statement, linking Account Receivable to Bank account.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/get_started/cheat_sheet.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. rst-class:: table-sm d-c-table\n\n+-------------------------+--------------+------------+---------------+---------------+\n|Account                  |Debit         |Credit      |Reconciliation |Bank Statement |\n+=========================+==============+============+===============+===============+\n|Account Receivable       |              |100         |Invoice ABC    |               |\n+-------------------------+--------------+------------+---------------+---------------+\n|Bank                     |100           |            |               |Statement XYZ  |\n+-------------------------+--------------+------------+---------------+---------------+\n```\n\n----------------------------------------\n\nTITLE: RST Image Link for Subscription Plan Form\nDESCRIPTION: RST syntax for displaying subscription plan quotation template image\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/subscriptions/plans.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: plans/subplan-quotation-template.png\n   :align: center\n   :alt: Subscription plan (quotation template) configuration form.\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Example with Note\nDESCRIPTION: RST markup showing a note directive explaining expense category management\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/expenses.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n   Expense categories are managed like products in Odoo. The expense category form follows the\n   standard product form in Odoo, and the information entered is similar. Expense products will be\n   referred to as expense categories throughout this document since the main menu refers to these as\n   :guilabel:`Expense Categories`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for Task Management Documentation - Sphinx reStructuredText\nDESCRIPTION: Defines a toctree table of contents for the 'Task Management' documentation section in Odoo using Sphinx's reStructuredText. Uses ':nosearch:' to exclude this page from Sphinx search and lists five subpages for detailed task-related topics. No code execution; dependencies are Sphinx and its reStructuredText parser, content is purely navigational.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/project/tasks.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n\n===============\nTask management\n===============\n\n.. toctree::\n   :titlesonly:\n\n   tasks/task_stages_statuses\n   tasks/task_creation\n   tasks/recurring_tasks\n   tasks/sub-tasks\n   tasks/task_dependencies\n```\n\n----------------------------------------\n\nTITLE: Inserting RST Image for Create Alternative Pop-up\nDESCRIPTION: This RST code inserts an image showing the 'Create alternative' pop-up window in the Odoo Purchase app.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/calls_for_tenders.rst#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: calls_for_tenders/calls-for-tenders-create-alternative.png\n   :align: center\n   :alt: Calls for tenders pop-up to create alternative quotation.\n```\n\n----------------------------------------\n\nTITLE: Embedding Usage Notes and Example Blocks in reStructuredText Documentation\nDESCRIPTION: This snippet demonstrates the use of the \".. example::\" and \".. note::\" directives within reStructuredText to provide contextual examples and important notes, respectively, to readers of Sphinx-based documentation. The \".. example::\" block explains how to structure an email expense submission, while the \".. note::\" block details Odoo's security handling for employee emails and includes embedded images for further guidance. These blocks help organize and emphasize key information for Odoo expense documentation. No programming dependencies are required, but familiarity with reStructuredText and Sphinx is assumed. Inputs include descriptive text and image embeds; outputs are rendered documentation sections with the provided formatting.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/expenses/log_expenses.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. example::\n   If submitting an expense, via email, for a $25.00 meal during a work trip, the email subject\n   would be `FOOD $25.00`.\n\n   Explanation:\n\n   - The :guilabel:`Internal Reference` for the expense category `Meals` is `FOOD`\n   - The :guilabel:`Cost` for the expense is `$25.00`\n\n.. note::\n   For security purposes, only authenticated employee emails are accepted by Odoo when creating an\n   expense from an email. To confirm an authenticated employee email address, go to the employee\n   card in the :menuselection:`Employees app`, and refer to the :guilabel:`Work Email` field.\n\n   .. image:: log_expenses/authenticated-email-address.png\n      :align: center\n      :alt: Create the domain alias by clicking the link.\n```\n\n----------------------------------------\n\nTITLE: RST File Structure for Chilean Taxation Documentation\nDESCRIPTION: RST markup for documenting Chilean taxation system including electronic receipts, invoices, returns, and financial reports. Contains image references and navigation structure for Odoo documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/chile.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: chile/invoice-receipt-selection.png\n   :align: center\n   :alt: Automatic contact selection of an anonymous end consumer.\n\n.. note::\n   If the client requests a credit note due to a return of their purchase, the credit note should be\n   made using the *Accounting* app.\n\n.. image:: chile/contact-for-electronic-invoice.png\n   :align: center\n   :alt: Selection of contact for the receipt.\n\n.. image:: chile/invoice-option-at-payment.png\n   :align: center\n   :alt: Selection of invoice option at payment.\n\n.. image:: chile/refund-order.png\n   :align: center\n   :alt: Refund option in the POS application.\n\n.. image:: chile/select-order-refund.png\n   :align: center\n   :alt: Selection of order for the refund process.\n\n.. seealso::\n   `Smart tutorial - Electronic invoicing for point of sale\n   <https://www.youtube.com/watch?v=B2XuWmtlmno&t=360s>`_.\n```\n\n----------------------------------------\n\nTITLE: Editing Odoo Configuration File on Linux using Nano (Shell)\nDESCRIPTION: This shell command is used to edit the Odoo configuration file located at `/etc/odoo.conf` on a Linux system, typically used for package installations. It uses `sudo` to gain root privileges necessary for modifying the file and `nano` as the text editor. This step is part of the manual master password reset process via the command line. Requires `sudo` access and the `nano` editor to be installed.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/deploy.rst#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nsudo nano /etc/odoo.conf\n```\n\n----------------------------------------\n\nTITLE: Inserting RST Image for Compare Product Lines Page\nDESCRIPTION: This RST code inserts an image showing the Compare Product Lines page for alternative RfQs in the Odoo Purchase app.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/calls_for_tenders.rst#2025-04-23_snippet_7\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: calls_for_tenders/calls-for-tenders-compare-products.png\n   :align: center\n   :alt: Compare Product Lines page for alternative RFQs.\n```\n\n----------------------------------------\n\nTITLE: CSV Date Format Example\nDESCRIPTION: Example of ISO 8601 date format to be used when importing dates into Odoo. Dates should be formatted as YYYY-MM-DD.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials/export_import_data.rst#2025-04-23_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\n1981-07-24\n```\n\n----------------------------------------\n\nTITLE: Implementing Card-Based Navigation in Sphinx Documentation\nDESCRIPTION: Demonstrates how to create card-based navigation elements in Sphinx documentation, with targets, tags, and descriptions for each card.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_32\n\nLANGUAGE: text\nCODE:\n```\n.. cards::\n\n   .. card:: Documentation\n      :target: ../documentation\n      :tag: Step-by-step guide\n      :large:\n\n      Use this guide to acquire the tools and knowledge you need to write documentation.\n\n   .. card:: Content guidelines\n      :target: content_guidelines\n\n      List of guidelines, tips, and tricks to help you create clear and effective content.\n\n   .. card:: RST guidelines\n      :target: rst_guidelines\n\n      List of technical guidelines to observe when writing with reStructuredText.\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Manufacturing Documentation\nDESCRIPTION: This snippet defines the table of contents for the Manufacturing documentation using reStructuredText directives. It includes links to various sections such as basic setup, advanced configuration, workflows, shop floor, subcontracting, and reporting.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   manufacturing/basic_setup\n   manufacturing/advanced_configuration\n   manufacturing/workflows\n   manufacturing/shop_floor\n   manufacturing/subcontracting\n   manufacturing/reporting\n```\n\n----------------------------------------\n\nTITLE: Accessing the Manufacturing Order Overview in Odoo\nDESCRIPTION: Explains the steps to view the detailed cost breakdown and other information for a specific Manufacturing Order (MO) in Odoo. This involves navigating to the MO list, selecting the desired MO, and clicking the 'Overview' smart button.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/basic_setup/mo_costs.rst#2025-04-23_snippet_13\n\nLANGUAGE: Odoo Configuration\nCODE:\n```\nnavigate to :menuselection:`Manufacturing\napp --> Operations --> Manufacturing Orders`, and select an |MO|. Then, click the :icon:`fa-bars`\n:guilabel:`Overview` smart button at the top of the |MO|.\n```\n\n----------------------------------------\n\nTITLE: Odoo Menu Navigation - Dock Locations\nDESCRIPTION: Navigation path for configuring dock locations in the Inventory app\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/dispatch.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nInventory app --> Configuration --> Locations\n```\n\n----------------------------------------\n\nTITLE: Defining Tabs in RST for Editor Features\nDESCRIPTION: This RST code creates tabs to organize different categories of powerbox commands in the Odoo rich-text editor documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials/html_editor.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. tabs::\n   .. tab:: Structure\n\n      .. list-table::\n         :widths: 20 80\n         :header-rows: 1\n         :stub-columns: 1\n\n         * - Command\n           - Use\n         * - :guilabel:`Separator`\n           - Insert a horizontal rule separator.\n         * - :guilabel:`2 columns`\n           - Convert into 2 columns.\n         * - :guilabel:`3 columns`\n           - Convert into 3 columns.\n         * - :guilabel:`4 columns`\n           - Convert into 4 columns.\n         * - :guilabel:`Table`\n           - Insert a table.\n         * - :guilabel:`Bulleted list`\n           - Create a bulleted list.\n         * - :guilabel:`Numbered list`\n           - Create a numbered list.\n         * - :guilabel:`Checklist`\n           - Create a checklist.\n         * - :guilabel:`Quote`\n           - Add a blockquote section.\n         * - :guilabel:`Code`\n           - Add a code section.\n```\n\n----------------------------------------\n\nTITLE: Referencing Recruitment Stage Modification in RST\nDESCRIPTION: This RST directive creates a reference to the 'Modify stages' section within the recruitment documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _recruitment/modify-stages:\n```\n\n----------------------------------------\n\nTITLE: Field Template Definition in XML\nDESCRIPTION: QWeb template for the FieldChar2 component defining the structure for both read-only and editable modes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_46\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\"FieldChar2\">\n    <div class=\"oe_field_char2\">\n        <t t-if=\"! widget.get('effective_readonly')\">\n            <input type=\"text\"></input>\n        </t>\n    </div>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Image Include for Tax Collection Interface\nDESCRIPTION: reStructuredText directive for including an image showing the AvaTax management console's tax collection page with highlighted elements\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/taxes/avatax/avalara_portal.rst#2025-04-23_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. image:: avalara_portal/where-you-collect-tax.png\n   :align: center\n   :alt: AvaTax management console, on the Where you collect tax page, with the add button and\n         sales and use tax tab highlighted.\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Remote for Personal Tutorials Fork\nDESCRIPTION: Changes the current directory to the cloned tutorials path (`/TutorialsPath`) and adds a new Git remote named 'dev' pointing to the user's personal fork of the `odoo/tutorials` repository on GitHub. The `<your_github_account>` placeholder must be replaced with the actual GitHub username. This setup allows pushing tutorial work to a personal fork.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/setup_guide.rst#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cd /TutorialsPath\n$ git remote add dev git@github.com:<your_github_account>/tutorials.git\n```\n\n----------------------------------------\n\nTITLE: Enabling 3-Way Matching in Odoo Purchase App Settings\nDESCRIPTION: RST markup for displaying the 3-way matching feature in Purchase app settings.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/control_bills.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: control_bills/control-bills-three-way-matching.png\n   :align: center\n   :alt: Enabled 3-way matching feature in Purchase app settings.\n```\n\n----------------------------------------\n\nTITLE: Inserting RST Image for Link RfQ Pop-up\nDESCRIPTION: This RST code inserts an image showing the pop-up window to link a new quotation to existing RfQs.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/calls_for_tenders.rst#2025-04-23_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: calls_for_tenders/calls-for-tenders-link-rfq-popup.png\n   :align: center\n   :alt: Pop-up to link new quotation to existing RFQs.\n```\n\n----------------------------------------\n\nTITLE: Defining AccountFiscalPosition Model Documentation Structure\nDESCRIPTION: ReStructuredText markup defining the documentation structure for the AccountFiscalPosition model, including field definitions and model reference.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/standard_modules/account/account_fiscal_position.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _reference/account_fiscal_position:\n\n===============\nFiscal Position\n===============\n\n.. automodel:: odoo.addons.account.models.partner.AccountFiscalPosition\n    :main:\n\n    .. autofield:: sequence\n    .. autofield:: name\n    .. autofield:: account_ids\n    .. autofield:: tax_ids\n    .. autofield:: note\n    .. autofield:: auto_apply\n    .. autofield:: vat_required\n    .. autofield:: country_id\n    .. autofield:: country_group_id\n    .. autofield:: state_ids\n    .. autofield:: zip_from\n    .. autofield:: zip_to\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Author Information - Git Console\nDESCRIPTION: This snippet demonstrates how to set your user name and email for Git globally on your system. This configuration ensures your commits are attributed correctly when contributing to the Odoo project. Dependencies are Git and a valid email address matching your GitHub account; expected input is the contributor's name and email. This step is essential for proper author identification in commit history. No external configuration needed except for Git installation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git config --global user.name \\\"Your Name\\\"\n$ git config --global user.email \\\"youremail@example.com\\\"\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in reStructuredText for Odoo.sh Introduction\nDESCRIPTION: This snippet demonstrates how to embed a YouTube video in reStructuredText format, specifically for an introduction to Odoo.sh. It includes parameters for alignment, width, and height of the video player.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/overview/introduction.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. youtube:: QuNsa9n9PMg\n    :align: right\n    :width: 700\n    :height: 394\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure\nDESCRIPTION: Defines the structure and navigation for Odoo developer documentation using reStructuredText format. Includes table of contents, cards for different documentation sections, and cross-references.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   developer/tutorials\n   developer/howtos\n   developer/reference\n\n.. cards::\n\n   .. card:: Tutorials\n      :target: developer/tutorials\n\n      Tutorials take you by the hand through hands-on exercises to build skills and familiarity in\n      Odoo development.\n\n   .. card:: How-to guides\n      :target: developer/howtos\n\n      Recipes that provide a step-by-step guide for addressing real-world problems and use-cases.\n\n   .. card:: Reference\n      :target: developer/reference\n\n      Technical descriptions and factual information on the frameworks and APIs of Odoo.\n\n.. seealso::\n   - :doc:`Guide: Contribute to the codebase </contributing/development>`\n   - `Community forums <https://www.odoo.com/forum>`_\n```\n\n----------------------------------------\n\nTITLE: Creating a New Request for Quotation in Odoo\nDESCRIPTION: Step-by-step guide to create a new Request for Quotation (RFQ) in Odoo's Purchase app, including vendor selection and deadline configuration.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/rfq.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\nTo create a new |RFQ|, click the :guilabel:`New` button on the top-left corner of the\n:guilabel:`Requests for Quotation` dashboard to reveal a new |PO| form.\n\nStart by assigning a :guilabel:`Vendor`.\n\nThe :guilabel:`Vendor Reference` field points to the sales and delivery order numbers sent by the\nvendor. This comes in handy once products are received, and the |PO| needs to be matched to the\ndelivery order.\n```\n\n----------------------------------------\n\nTITLE: Defining raw-html Role in reStructuredText (rst)\nDESCRIPTION: Defines a custom reStructuredText role named 'raw-html' that allows embedding raw HTML content directly into the documentation output, specifying the format as HTML. This role is subsequently used to include SVG icons.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/productivity/spreadsheet/global_filters.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. role:: raw-html(raw)\\n   :format: html\n```\n\n----------------------------------------\n\nTITLE: RestructuredText VAT Documentation\nDESCRIPTION: RST markup for documentation about VAT number verification in Odoo, including configuration steps and important notes about VIES validation functionality.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/taxes/vat_verification.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n===============================\nVAT numbers verification (VIES)\n===============================\n\n`VAT Information Exchange System <https://ec.europa.eu/taxation_customs/vies/#/vat-validation>`_, or\n**VIES**, is a tool provided by the European Commission that allows you to check the validity of VAT\nnumbers for companies registered in the European Union.\n\nOdoo's VAT Validation feature uses the VIES to verify your contacts' VAT numbers directly from\nOdoo's interface.\n\n.. note::\n   Regardless of whether or not the Verify VAT Numbers feature is enabled, Odoo checks the format of\n   a contact's VAT against the `expected format of VAT numbers\n   <https://en.wikipedia.org/wiki/VAT_identification_number>`_ from that country.\n\nVIES VAT number verification\n============================\n\nTo activate this feature, go to :menuselection:`Accounting --> Configuration --> Settings`. In the\n:guilabel:`Taxes` section, enable the :guilabel:`Verify VAT Numbers` feature, and click on\n:guilabel:`Save`.\n\nOnce the :guilabel:`Verify VAT Numbers` feature is enabled, if the contact's :guilabel:`Tax ID`\nfield is populated *and* its country is different from your company's country, Odoo displays an\n:guilabel:`Intra-Community Valid` checkbox. Odoo tests the VAT number through the VIES and\nautomatically checks or unchecks the :guilabel:`Intra-Community Valid` checkbox depending on the\nvalidity of the VAT number.\n\n.. image:: vat_verification/intra-community-valid.png\n   :alt: Intra-community valid checkbox on the contact record\n\n.. important::\n   It is possible to manually override the :guilabel:`Intra-Community Valid` field on a contact in\n   case the automatic VIES check is incorrect (for example, if the company was recently created and\n   its VAT is not yet in the VIES). This change is logged in the chatter for transparency.\n\n.. note::\n   Odoo can :ref:`automatically apply fiscal positions <fiscal_positions/automatic>`. If the Verify VAT\n   Numbers feature is enabled, any fiscal positions with VAT required enabled will require\n   Intra-Community valid VAT numbers to apply automatically.\n```\n\n----------------------------------------\n\nTITLE: Defining eCommerce Documentation Structure with ReStructuredText\nDESCRIPTION: This RST (ReStructuredText) snippet defines the structure of the eCommerce documentation section. It includes a title, introduction, important notes about domain names, related documentation links, and a table of contents for subsections.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/websites/ecommerce.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:nosearch:\n:show-content:\n:hide-page-toc:\n:show-toc:\n\n=========\neCommerce\n=========\n\nRun a modern open-source online store with Odoo eCommerce. Learn how to sell online, promote\nproducts and increase your average cart sizes.\n\n.. important::\n   Odoo offers a :ref:`free custom domain name <domain-name/register>` to all Odoo Online databases\n   for one year. Visitors can then access your website with an address such as `www.example.com`\n   rather than the default `example.odoo.com`.\n\n.. seealso::\n   - :doc:`Website Documentation <website>`\n   - `Odoo Tutorials: Website <https://www.odoo.com/slides/website-25>`_\n   - `Odoo Tutorials: eCommerce <https://www.odoo.com/slides/ecommerce-26>`_\n\n.. toctree::\n   :titlesonly:\n\n   ecommerce/products\n   ecommerce/cart\n   ecommerce/checkout\n   ecommerce/payments\n   ecommerce/shipping\n   ecommerce/order_handling\n   ecommerce/customer_accounts\n   ecommerce/performance\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Table Structure for Financial Reports\nDESCRIPTION: ReStructuredText table showing the hierarchy and organization of financial reports available in Odoo's accounting module.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n+-----------------------------------------------+\n|               Financial reports               |\n+============+==================================+\n| Statement  | Balance sheet                    |\n|            +----------------------------------+\n|            | Profit and loss                  |\n|            +----------------------------------+\n|            | Cash flow statement              |\n|            +----------------------------------+\n|            | Tax report                       |\n|            +----------------------------------+\n|            | ES sales list                    |\n+------------+----------------------------------+\n| Audit      | General ledger                   |\n|            +----------------------------------+\n|            | Trial balance                    |\n|            +----------------------------------+\n|            | Journal report                   |\n|            +----------------------------------+\n|            | Intrastat report                 |\n|            +----------------------------------+\n|            | Check register                   |\n+------------+----------------------------------+\n| Partner    | Partner ledger                   |\n|            +----------------------------------+\n|            | Aged receivable                  |\n|            +----------------------------------+\n|            | Aged payable                     |\n+------------+----------------------------------+\n| Management | Invoice analysis                 |\n|            +----------------------------------+\n|            | Unrealized currency gains/losses |\n|            +----------------------------------+\n|            | Depreciation schedule            |\n|            +----------------------------------+\n|            | Disallowed expenses              |\n|            +----------------------------------+\n|            | Budget analysis                  |\n|            +----------------------------------+\n|            | Product margins                  |\n|            +----------------------------------+\n|            | 1099 report                      |\n+------------+----------------------------------+\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Directive - FBA Stock Management\nDESCRIPTION: RST tip directive explaining stock management for Fulfilled by Amazon orders\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/amazon_connector/manage.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. tip::\n   To follow *Amazon (FBA)* stock in Odoo, make an inventory adjustment after replenishing stock. An\n   automated replenishment from reordering rules can also be triggered on the Amazon location.\n```\n\n----------------------------------------\n\nTITLE: RST Directive - Refuse Expense Image\nDESCRIPTION: ReStructuredText directive for displaying an image of the refuse expense dialog with proper alignment and alt text.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/expenses/approve_expenses.rst#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: approve_expenses/refuse-expense.png\n   :align: center\n   :alt: Send messages in the chatter.\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo Documentation Structure with reStructuredText\nDESCRIPTION: This snippet defines the structure of the Odoo documentation using reStructuredText directives. It sets up a table of contents tree with specific options for depth and visibility, and includes a reference to an enterprise documentation file in Brazilian Portuguese.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/legal/terms/i18n/enterprise_tex_pt_BR.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n:orphan:\n\n.. toctree::\n   :maxdepth: 4\n   :hidden:\n\n   enterprise_pt_BR\n```\n\n----------------------------------------\n\nTITLE: Adding See Also References in reStructuredText\nDESCRIPTION: This reStructuredText directive creates a 'seealso' admonition box, providing links to related documentation pages. It directs users to pages about custom search filters and managing favorite searches within Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/members/members_analysis.rst#2025-04-23_snippet_4\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. seealso::\n   - :ref:`search/custom-filters`\n   - :ref:`search/favorites`\n```\n\n----------------------------------------\n\nTITLE: Configuring Bank Synchronization in RST Format\nDESCRIPTION: Structured documentation in RST format describing bank synchronization setup, configuration options, supported providers, and troubleshooting steps for Odoo Enterprise.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/bank/bank_synchronization.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n====================\nBank synchronization\n====================\n\nOdoo can synchronize directly with your bank institution to get all bank statements imported\nautomatically into your database.\n\nTo check if your bank is compatible with Odoo, go to `Odoo Accounting Features\n<https://www.odoo.com/page/accounting-features>`_, and click on\n:guilabel:`See list of supported institutions`.\n\nOdoo supports more than 26,000 institutions around the world.\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for AvaTax Configuration\nDESCRIPTION: Complete RST documentation detailing the setup process for AvaTax integration with Odoo including credentials configuration, transaction settings, address validation, fiscal positions and product mapping.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/taxes/avatax.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nFor help determining which *AvaTax* environment to use (either :guilabel:`Production` or\n:guilabel:`Sandbox`), visit: `Sandbox vs Production environments\n<https://knowledge.avalara.com/bundle/fzc1692293626742/page/sandbox-vs-production.html>`_.\n\nCredentials\n~~~~~~~~~~~\n\nNow, the credentials can be entered in. The *AvaTax* :guilabel:`Account ID` should be entered in the\n:guilabel:`API ID` field, and the :guilabel:`License Key` should be entered in the :guilabel:`API\nKey` field.\n\n.. important::\n   The :guilabel:`Account ID` can be found by logging into the *AvaTax* portal (`sandbox\n   <https://sandbox.admin.avalara.com/>`_ or `production <https://admin.avalara.com/>`_).\n```\n\n----------------------------------------\n\nTITLE: Neutralizing an Odoo Database via Command Line\nDESCRIPTION: Shows the command `odoo-bin neutralize` used to neutralize a specific Odoo database, typically for sanitizing it before sharing or testing. The command requires specifying the path to the addons directory (`--addons-path`) and the target database name (`-d <database>`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_43\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin --addons-path <PATH,...>  neutralize -d <database>\n```\n\n----------------------------------------\n\nTITLE: Inserting Image Directive in RST Documentation\nDESCRIPTION: reStructuredText directive for embedding and aligning a centered image with alt text, specifically showing stock valuation journals configuration.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/product_management/inventory_valuation/inventory_valuation_config.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: inventory_valuation_config/journals.png\n   :align: center\n   :alt: Show Stock Valuation journals in a list.\n```\n\n----------------------------------------\n\nTITLE: Committing All Changes in Git\nDESCRIPTION: Commits all current changes in your working directory to the Git repository. The -a flag automatically stages all modified files.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/branches.rst#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -a\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTP/Long-Polling Workers via Odoo Command-line\nDESCRIPTION: Prevents the Odoo server from starting its HTTP and long-polling workers. Cron workers might still start. This option has no effect if '--test-enable' is used, as tests require the HTTP server.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n--no-http\n```\n\n----------------------------------------\n\nTITLE: Calculating Sick Leave Payment in UAE Payroll\nDESCRIPTION: Formula for calculating the amount paid to an employee during sick leave days. It divides the product of leave days and gross monthly salary by 30, then multiplies by the applicable percentage based on sick leave type.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll/payroll_localizations/united_arab_emirates.rst#2025-04-23_snippet_1\n\nLANGUAGE: math\nCODE:\n```\n\\frac{\\text{Number of Leave Days} \\times \\text{Gross Per Month}}{30} \\times \\text{Percentage}\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies\nDESCRIPTION: Shows how to specify external Python library dependencies in requirements.txt file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nunidecode\n```\n\n----------------------------------------\n\nTITLE: Switching to a New Git Branch - Console\nDESCRIPTION: Demonstrates how to create and switch to a new Git branch using the 'git switch -c' command in the console. This is useful when starting a new feature or change set following the recommended branch naming convention. No dependencies beyond Git are required, and the key parameter is the branch name formed by appending '-explain-pricelists' to the current branch. The command expects Git to be installed and run inside a valid repository; the output is the new branch being active.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation.rst#2025-04-23_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ git switch -c {CURRENT_BRANCH}-explain-pricelists\n```\n\n----------------------------------------\n\nTITLE: Inserting Content Inside Elements using XPath in Odoo XML\nDESCRIPTION: Illustrates adding content within a targeted element using XPath. This example selects a `<ul>` element (`//ul`) and inserts a new `<li>Last element of the list</li>` element as its last child using `position=\"inside\"`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<xpath expr=\"//ul\" position=\"inside\">\n   <li>Last element of the list</li>\n</xpath>\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Project Management in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for project management documentation using reStructuredText syntax. It includes a title and a toctree directive pointing to the 'approvals' section under management.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/plm/management.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n==================\nProject management\n==================\n\n.. toctree::\n   :titlesonly:\n\n   management/approvals\n```\n\n----------------------------------------\n\nTITLE: Activating Product Variants Setting in Odoo Sales\nDESCRIPTION: This snippet demonstrates how to enable the Variants feature in the Odoo Sales application settings. It involves navigating to the Configuration menu and checking the appropriate box.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/products_prices/products/variants.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nTo use product variants, the *Variants* setting **must** be activated in the Odoo *Sales*\napplication.\n\nTo do that, go to :menuselection:`Sales app --> Configuration --> Settings`, and locate the\n:guilabel:`Product Catalog` section at the top of the page.\n\nIn that section, check the box to enable the :guilabel:`Variants` feature.\n\n.. image:: variants/activating-variants-setting.png\n   :align: center\n   :alt: Activating product variants on the Settings page of the Odoo Sales application.\n\nThen, click :guilabel:`Save` at the top of the :guilabel:`Settings` page.\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for POS Tipping Configuration\nDESCRIPTION: Detailed RST markup documentation explaining the configuration and usage of tipping features in Odoo POS, including terminal integration and post-payment tipping functionality.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/point_of_sale/restaurant/tips.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n====\nTips\n====\n\nTipping is customary in multiple countries. Point of Sale allows tipping in :ref:`shops <pos/sell>`,\n:doc:`bars <../restaurant>`, or :doc:`restaurants <../restaurant>`.\n\n.. _configuration:\n\nConfiguration\n=============\n\nTo allow tipping in your POS, activate the :guilabel:`Tips` feature in :menuselection:`Point of Sale\n--> Configuration --> Settings`. At the top of the page, select the POS in which you wish to allow\n**tipping**, scroll down to the :guilabel:`Payment` section and check :guilabel:`Tips`. Once\nenabled, add a :guilabel:`Tip Product` in the corresponding field, and save. The designated product\nwill be used as a reference on customers' receipts.\n```\n\n----------------------------------------\n\nTITLE: Structuring Table of Contents with reStructuredText in Odoo Documentation\nDESCRIPTION: This snippet uses reStructuredText (.rst) directives, specifically '.. toctree::', to organize a documentation section in the Odoo project. The ':titlesonly:' option ensures only page titles are shown in the generated navigation. It supports linking to specific reporting documentation topics, requiring the Sphinx toolchain for rendering. Inputs are plain text module paths; output is a structured navigation sidebar for the Reporting section.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/reporting.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\\n   :titlesonly:\\n\\n   reporting/allocation\\n   reporting/oee\\n   reporting/production_analysis\n```\n\n----------------------------------------\n\nTITLE: Disabling Background Color Options for All Columns (XML)\nDESCRIPTION: Adds s_col_no_bgcolor to the row to disable color selection for all child columns. Enforces a uniform look and is appropriate where only predetermined colors are desirable.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\\\"row s_col_no_bgcolor\\\">\n```\n\n----------------------------------------\n\nTITLE: Hyperlink Alias Example\nDESCRIPTION: Demonstrates creation and usage of hyperlink aliases.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n.. _proof-of-concept: https://en.wikipedia.org/wiki/Proof_of_concept\n\nA proof-of-concept_ is a simplified version, a prototype of what is expected to agree on the main lines of expected changes. `PoC <proof-of-concept_>`_ is a common abbreviation.\n```\n\n----------------------------------------\n\nTITLE: Configuring Stock Aging Report in Pivot View (RST)\nDESCRIPTION: This snippet describes how to access and configure the stock aging report in pivot view from the Stock Valuation dashboard in Odoo. It explains the default view and how to customize it for more granular inventory analysis.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/warehouses_storage/reporting/aging.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nConfigure\n---------\n\nBy default, the pivot view shows the value of all *product categories* by *day and month*. Clicking\nthe :icon:`fa-plus-square` :guilabel:`(plus)` icon in each column or row will reveal a drop-down\nlist of options to create a more granular breakdown of the inventory valuation. The drop-down\noptions include: :guilabel:`Product`, :guilabel:`Lot/Serial Number`, :guilabel:`Product Category`,\n:guilabel:`Date`, :guilabel:`Company`, or :guilabel:`Add Custom Group` Clicking the\n:icon:`fa-minus-square-o` :guilabel:`(minus)` icon collapses the field back to an empty state.\n\nIn the table, the :guilabel:`Remaining Qty` column displays the number of on-hand items, and\n:guilabel:`Remaining Value` displays the total cost of purchasing these items.\n```\n\n----------------------------------------\n\nTITLE: Nested List Example\nDESCRIPTION: Shows how to create nested lists with proper indentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n- This is the first item of a bulleted list.\n\n  #. It has a nested numbered list\n  #. with two items.\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Important Note for Continuous Improvement\nDESCRIPTION: This snippet creates an important note in ReStructuredText format explaining the flexibility and adaptability of continuous improvement methodologies.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/workflows/continuous_improvement.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. important::\n   Continuous improvement is not a one-size-fits-all methodology. While most strategies include\n   between four and six steps, proper implementation requires developing a system tailored to the\n   specific needs of each company.\n\n   This is not a limitation, but rather a benefit, as it makes the methodology flexible enough to\n   adapt to almost any use case. Odoo, in particular, adapts well to this flexibility, as it can be\n   configured to meet the needs of almost any workflow.\n\n   As such, it is important to remember the content below only provides *examples* of how Odoo\n   *might* be used. They should be viewed as more of a starting point, rather than a concrete\n   outline that every organization must follow.\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Image Directives\nDESCRIPTION: Image inclusion directives for fiscal position configuration screenshots with alignment and alt text\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/taxes/fiscal_positions.rst#2025-04-23_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. image:: fiscal_positions/fiscal-positions-tax-mapping.png\n   :align: center\n   :alt: Example of a fiscal position's tax mapping\n\n.. image:: fiscal_positions/fiscal-positions-account-mapping.png\n   :align: center\n   :alt: Example of a fiscal position's account mapping\n```\n\n----------------------------------------\n\nTITLE: Creating a Warning Block using RST .. warning:: Directive\nDESCRIPTION: This snippet provides the reStructuredText syntax for creating a 'Warning' admonition block using the `.. warning::` directive. It's used to advise the reader to proceed with caution regarding the described topic.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n.. code-block:: text\n\n   .. warning::\n      Use this alert block to require the reader to proceed with caution with what is described in the warning.\n```\n\n----------------------------------------\n\nTITLE: NGINX HSTS Security Header Configuration\nDESCRIPTION: NGINX configuration for adding HTTP Strict Transport Security (HSTS) header to enforce HTTPS connections.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/deploy.rst#2025-04-23_snippet_8\n\nLANGUAGE: nginx\nCODE:\n```\nadd_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\";\n```\n\n----------------------------------------\n\nTITLE: Adding a Note Box in reStructuredText\nDESCRIPTION: Creates a note box in the documentation to provide additional information about clipboard box options when accessed from Helpdesk.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/helpdesk/overview/help_center.rst#2025-04-23_snippet_9\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n   Clipboard boxes only display the :guilabel:`Use as description` or :guilabel:`Send as Message`\n   options if they are accessed directly from the **Helpdesk**.\n```\n\n----------------------------------------\n\nTITLE: Adding Vendor Pricelist in Odoo Product Form\nDESCRIPTION: Instructions for adding vendor pricing information to a product in Odoo's Purchase app.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/rfq.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nIn the :guilabel:`Purchase` tab of the product form, click :guilabel:`Add a line` to input the\nvendor and their price, to have this information auto-populate on an |RFQ| each time the product is\nlisted.\n```\n\n----------------------------------------\n\nTITLE: Defining Supply Chain Documentation Structure in reStructuredText\nDESCRIPTION: This RST code snippet defines the table of contents for Odoo's Supply Chain documentation. It includes various modules related to supply chain management, such as inventory, manufacturing, purchasing, and quality control.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:nosearch:\n\n============\nSupply Chain\n============\n\n.. toctree::\n\n   inventory_and_mrp/inventory\n   inventory_and_mrp/manufacturing\n   inventory_and_mrp/purchase\n   inventory_and_mrp/barcode\n   inventory_and_mrp/quality\n   inventory_and_mrp/maintenance\n   inventory_and_mrp/plm\n   inventory_and_mrp/repairs\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Documentation for Tax Units\nDESCRIPTION: RST markup documentation describing tax unit configuration, fiscal positions, and tax reporting in Odoo. Includes navigation paths, setup instructions, and image references.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/get_started/tax_units.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n=========\nTax units\n=========\n\n.. important::\n   This is only applicable to multi-company environments.\n\nA **tax unit** is a group of VAT-taxable enterprises that are legally independent of each other but\nare closely linked financially, organizationally, and economically and therefore considered the same\nVAT-taxable enterprise.\n\n.. example::\n   Enterprise **A** owes €300.000,00 of VAT taxes and enterprise **B** can recover €280.000,00 of\n   VAT taxes. They form up as a **tax unit** so that the two amounts balance out and must conjointly\n   only pay €20.000,00 of VAT taxes.\n\nConfiguration\n=============\n\n.. seealso::\n   :doc:`../taxes/fiscal_positions`.\n\n.. image:: tax_units/report.png\n   :alt: tax unit tax report\n```\n\n----------------------------------------\n\nTITLE: Creating Helpdesk Ticket for Prepaid Services in RST\nDESCRIPTION: This RST snippet explains how to create a helpdesk ticket for prepaid services, including linking it to the corresponding sales order item.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/helpdesk/advanced/track_and_bill.rst#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\nTo create a **Helpdesk** ticket for prepaid services, navigate to :menuselection:`Helpdesk` and\nclick the :guilabel:`Tickets` button to reveal a specific team's pipeline. Click :guilabel:`New` to\ncreate a new ticket.\n\nOn the blank ticket form, create a ticket :guilabel:`Title`, and enter the :guilabel:`Customer`\ninformation.\n\nWhen the customer name is added, the :guilabel:`Sales Order Item` field automatically populates with\nthe most recent prepaid sales order item that has time remaining.\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Odoo General Settings Documentation in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents (toctree) for the general settings section of Odoo documentation. It lists various subsections related to general configuration and setup options in Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n\n    general/apps_modules\n    general/users\n    general/companies\n    general/multi_company\n    general/iot\n    general/email_communication\n    general/integrations\n    general/developer_mode\n```\n\n----------------------------------------\n\nTITLE: RST Image Insertion\nDESCRIPTION: ReStructuredText markup for inserting an image showing the Snailmail setup screen, including alignment and alt text specifications.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/customer_invoices/snailmail.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: snailmail/setup-snailmail.png\n   :align: center\n   :alt: Under settings enable the snailmail feature in Odoo Accounting\n```\n\n----------------------------------------\n\nTITLE: Navigating to Time Off Management in Odoo (RST)\nDESCRIPTION: Instructions for accessing the Time Off management section in Odoo. This snippet shows the menu path to view time off requests that need approval.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/time_off/management.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:menuselection:`Time Off app --> Management --> Time Off`\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents in reStructuredText\nDESCRIPTION: This snippet creates a hidden table of contents (with nosearch directive) for Terms and Conditions documentation. It sets up a titlesonly toctree that links to various terms and conditions documents.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/legal/terms.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:nosearch:\n\n====================\nTerms and Conditions\n====================\n\n.. toctree::\n    :titlesonly:\n\n    terms/odoo_sh_terms\n    terms/enterprise\n    terms/partnership\n    terms/terms_of_sale\n```\n\n----------------------------------------\n\nTITLE: Displaying Subscription Product Image in RST Documentation\nDESCRIPTION: This RST code snippet shows how to include an image of a subscription product on the eCommerce website in the documentation. It specifies the image path, alignment, and alternative text.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/subscriptions/ecommerce.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: ecommerce/subscription-product.png\n   :align: center\n   :alt: Subscription product on eCommerce website.\n```\n\n----------------------------------------\n\nTITLE: Setting Body Image in SCSS Variables\nDESCRIPTION: Sets the body background image path and type in Odoo SCSS variables palette.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_17\n\nLANGUAGE: scss\nCODE:\n```\n$o-website-values-palettes: (\n   (\n      'body-image': '/website_airproof/static/src/img/background-lines.svg',\n      'body-image-type': 'image' or 'pattern'\n   )\n);\n```\n\n----------------------------------------\n\nTITLE: RST HTML Span Element Definition\nDESCRIPTION: RestructuredText raw HTML definitions for status indicators used in the collaborator access table.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/settings.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. |green| raw:: html\n\n   <span class=\"text-success\" style=\"font-size: 32px; line-height: 0.5\">●</span>\n\n.. |orange| raw:: html\n\n   <span class=\"text-warning\" style=\"font-size: 32px; line-height: 0.5\">●</span>\n\n.. |red| raw:: html\n\n   <span class=\"text-danger\" style=\"font-size: 32px; line-height: 0.5\">●</span>\n```\n\n----------------------------------------\n\nTITLE: Command Execution Reference\nDESCRIPTION: Demonstrates how to format command references using the command markup.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nRun the command :command:`make clean html` to delete existing built files and build the documentation to HTML.\n```\n\n----------------------------------------\n\nTITLE: Viewing Average Manufacturing Cost in Odoo Inventory\nDESCRIPTION: Describes how to find the average manufacturing cost for a product in Odoo, which is calculated based on all completed Manufacturing Orders (MOs). This cost is displayed per unit of measure in the 'Cost' field on the product's form within the Inventory app.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/basic_setup/mo_costs.rst#2025-04-23_snippet_15\n\nLANGUAGE: Odoo Configuration\nCODE:\n```\nnavigate to :menuselection:`Inventory app --> Products --> Products`, and select a product.\n\nThe manufacturing cost of the product is displayed per unit of measure in the :guilabel:`Cost`\nfield, located in the :guilabel:`General Information` tab.\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Directives for Field Service Documentation\nDESCRIPTION: This snippet sets up reStructuredText directives for the Field Service documentation page. It configures the page to hide search functionality, show content, hide page table of contents, and show a custom table of contents.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/field_service.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n:show-content:\n:hide-page-toc:\n:show-toc:\n```\n\n----------------------------------------\n\nTITLE: RST Structure for Ship Later Documentation\nDESCRIPTION: RST formatted documentation that outlines the Ship Later feature, including configuration settings and usage instructions in Odoo POS.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/point_of_sale/shop/ship_later.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n==========\nShip later\n==========\n\nThe **Ship Later** feature allows you to sell products and schedule delivery at a later date. It is\nuseful, for example, when a product is out of stock or so voluminous that it requires to be shipped,\nor if, for any reason, the customer needs their order to be shipped later, etc.\n\nConfiguration\n=============\n\n:ref:`Go to the POS settings <configuration/settings>`, scroll down to the :guilabel:`Inventory`\nsection, and enable :guilabel:`Allow Ship Later`.\n\n.. image:: ship_later/settings.png\n   :scale: 85%\n   :alt: settings to enable and configure the ship later feature\n\nOnce activated, you can:\n\n- Choose the location from where the products are shipped by selecting a :guilabel:`Warehouse`.\n- Define a :guilabel:`Specific route`, or leave this field empty to use the default route.\n- Define the :guilabel:`Shipping Policy`; select :guilabel:`As soon as possible` if the products\n  can be delivered separately or :guilabel:`When all products are ready` to ship all the products at\n  once.\n\n.. seealso::\n   - :doc:`../../../inventory_and_mrp/inventory/shipping_receiving/setup_configuration`\n   - :doc:`../../../inventory_and_mrp/inventory/warehouses_storage/inventory_management/warehouses`\n\nPractical application\n=====================\n\n#. :ref:`Open a session <pos/session-start>` and make a sale.\n#. On the payment screen, set a customer and select :guilabel:`Ship Later`.\n#. On the popup window, set a shipping date and click :guilabel:`Confirm` to proceed to payment.\n\n.. image:: ship_later/payment.png\n   :scale: 75%\n   :alt: selecting ship later at checkout.\n\nThe system instantly creates a delivery order from the warehouse to the shipping address.\n\n.. Note::\n   The selected customer must have referenced an address in the system for products to be shipped.\n```\n\n----------------------------------------\n\nTITLE: RST Tab Group for QR Menu Configuration\nDESCRIPTION: RST markup for displaying QR menu configuration options in a tabbed interface, including QR code generation and customization instructions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/point_of_sale/self_order.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. tabs::\n\n   .. group-tab:: QR menu\n\n      Select :guilabel:`QR menu` or :guilabel:`QR menu + Ordering` to give customers access to your\n      menu or product catalog by scanning a QR code on their personal device.\n```\n\n----------------------------------------\n\nTITLE: Defining Repairs Documentation Structure in reStructuredText\nDESCRIPTION: This snippet defines the structure and metadata for the Repairs documentation page in Odoo. It sets various directives for content visibility and organization, and includes a table of contents linking to the repair orders subpage.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/repairs.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n:show-content:\n:hide-page-toc:\n:show-toc:\n\n=======\nRepairs\n=======\n\nOdoo *Repairs* assists companies in creating and processing repairs for damaged products returned by\ncustomers.\n\n.. toctree::\n   :titlesonly:\n\n   repairs/repair_orders\n```\n\n----------------------------------------\n\nTITLE: Describing Odoo Addon Wizards Directory Structure - plaintext - text\nDESCRIPTION: This code snippet demonstrates how to organize transient models (wizards) in a dedicated directory, showing Python and XML view files named after the transient model. This exemplifies modular design and eases wizard maintenance, referencing the naming and placement conventions described for other module components.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\naddons/plant_nursery/\n|-- wizard/\n|   |-- make_plant_order.py\n|   |-- make_plant_order_views.xml\n```\n\n----------------------------------------\n\nTITLE: Inserting an Image for Knowledge Article Sharing in reStructuredText\nDESCRIPTION: Adds an image to the document using reStructuredText syntax, showing the sharing and publishing options for a Knowledge article.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/helpdesk/overview/help_center.rst#2025-04-23_snippet_7\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: help_center/help-center-knowledge-sharing.png\n   :alt: View of a knowledge article focused on sharing and publishing options.\n```\n\n----------------------------------------\n\nTITLE: Initiating On-Premise Test Database Upgrade via Command Line\nDESCRIPTION: This command initiates a test database upgrade for on-premise Odoo installations. It requires proper database access configuration and network connectivity to the upgrade platform. The script downloads and executes the upgrade process for a specified database to a target Odoo version.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/upgrade.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ python <(curl -s https://upgrade.odoo.com/upgrade) test -d <your db name> -t <target version>\n```\n\n----------------------------------------\n\nTITLE: Inserting RST Image for Quality Alerts Kanban View\nDESCRIPTION: This RST directive inserts an image of the Quality Alerts Kanban board, illustrating the visual organization of alerts in different stages of the review process.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/quality/quality_management/quality_alerts.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: quality_alerts/alert-kanban.png\n   :align: center\n   :alt: The Quality Alerts page, displaying alerts in a Kanban view.\n```\n\n----------------------------------------\n\nTITLE: Odoo Menu Navigation - Delivery Methods\nDESCRIPTION: Navigation path for configuring delivery methods in the Inventory app\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/dispatch.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nInventory app --> Configuration --> Delivery Methods\n```\n\n----------------------------------------\n\nTITLE: Implementing Group Tabs with Synchronized Selection\nDESCRIPTION: Demonstrates how to create group tabs that synchronize selection across tab groups, with examples in different programming languages.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_30\n\nLANGUAGE: text\nCODE:\n```\n.. tabs::\n\n   .. group-tab:: C++\n\n      C++\n\n   .. group-tab:: Python\n\n      Python\n\n   .. group-tab:: Java\n\n      Java\n\n.. tabs::\n\n   .. group-tab:: C++\n\n      .. code-block:: c++\n\n         int main(const int argc, const char **argv) {\n             return 0;\n         }\n\n   .. group-tab:: Python\n\n      .. code-block:: python\n\n         def main():\n             return\n\n   .. group-tab:: Java\n\n      .. code-block:: java\n\n         class Main {\n             public static void main(String[] args) {}\n         }\n```\n\n----------------------------------------\n\nTITLE: Defining Todo Object Structure in JavaScript\nDESCRIPTION: Example structure of a todo object showing required fields: id (number), description (string), and isCompleted (boolean) flag.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/discover_js_framework/01_owl_components.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{ id: 3, description: \"buy milk\", isCompleted: false }\n```\n\n----------------------------------------\n\nTITLE: RST Table - Bank Statement Registration\nDESCRIPTION: Illustrates the journal entry when the bank statement is registered, moving funds from Undeposited to Bank account.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/get_started/cheat_sheet.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. rst-class:: table-sm d-c-table\n\n+-------------------------+--------------+------------+---------------+\n|Account                  |Debit         |Credit      |Reconciliation |\n+=========================+==============+============+===============+\n|Undeposited funds        |              |100         |Check 0123     |\n+-------------------------+--------------+------------+---------------+\n|Bank                     |100           |            |               |\n+-------------------------+--------------+------------+---------------+\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Escaping Nested Backticks in reStructuredText\nDESCRIPTION: This reStructuredText snippet demonstrates an incorrect method for escaping nested backticks within inline code formatting. Using single backticks around the inner backticks (`\\``) results in an \"[UNKNOWN NODE title_reference]\" error during documentation processing with tools like Docutils or Sphinx.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_34\n\nLANGUAGE: rst\nCODE:\n```\n```\\`this formatting\\` ```\n```\n\n----------------------------------------\n\nTITLE: Accessing Bills of Materials for By-Products in Odoo\nDESCRIPTION: This code snippet demonstrates the navigation path to access and edit Bills of Materials (BoMs) for adding by-products in Odoo's Manufacturing app.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/workflows/byproducts.rst#2025-04-23_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:menuselection:`Manufacturing app --> Products --> Bills of Materials`\n```\n\n----------------------------------------\n\nTITLE: Defining Advanced Documentation Structure in reStructuredText\nDESCRIPTION: This RST code defines the structure for advanced Odoo documentation topics. It sets up a toctree (table of contents tree) with specific pages for after-sales processes, closing tickets, and tracking and billing.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/helpdesk/advanced.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:nosearch:\n\n========\nAdvanced\n========\n\n.. toctree::\n   :titlesonly:\n\n   advanced/after_sales\n   advanced/close_tickets\n   advanced/track_and_bill\n```\n\n----------------------------------------\n\nTITLE: RST Expense Report Documentation Structure\nDESCRIPTION: ReStructuredText markup for documenting expense report posting process, including headers, important notes, and navigation instructions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/expenses/post_expenses.rst#2025-04-23_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n=============\nPost expenses\n=============\n\nOnce an expense report is :doc:`approved <../expenses/approve_expenses>`, the next step is to post\nthe expense report to the proper accounting journal.\n\n.. important::\n   To post expense reports to an accounting journal, the user **must** have the following\n   :doc:`access rights <../../general/users/access_rights>`:\n\n   - Accounting: *Accountant* or *Adviser*\n   - Expenses: *Manager*\n```\n\n----------------------------------------\n\nTITLE: Creating Sales Order for Time-Tracked Services in RST\nDESCRIPTION: This RST snippet describes how to create a sales order for post-paid support services using the 'Service on Timesheets' product.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/helpdesk/advanced/track_and_bill.rst#2025-04-23_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\nTo invoice a customer for post-paid support services, first create a |SO| with the *Service on\nTimesheets* product. To do this, go to :menuselection:`Sales app --> Orders --> Quotations`. Then,\nclick :guilabel:`New` to reveal a blank quotation form.\n\nFill out the quotation with the customer information.\n\nOn the :guilabel:`Order Lines` tab, click :guilabel:`Add a product`. Select the :guilabel:`Service\non Timesheets` product. After updating any other necessary information, :guilabel:`Confirm` the\nquotation.\n\n.. important::\n   Unlike with the prepaid services quotation, Odoo does **not** allow an invoice to be created at\n   this time. Since services were **not** performed, nothing was delivered, so there is nothing to\n   invoice.\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Odoo Deal Management\nDESCRIPTION: This snippet defines a table of contents using reStructuredText syntax for the 'Manage deals' section of Odoo documentation. It includes various subsections related to deal management.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n\n============\nManage deals\n============\n\n.. toctree::\n   :titlesonly:\n\n   manage_deals/rfq\n   manage_deals/blanket_orders\n   manage_deals/calls_for_tenders\n   manage_deals/purchase_templates\n   manage_deals/control_bills\n   manage_deals/manage\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in RST Documentation\nDESCRIPTION: This RST directive creates a table of contents for the recruitment documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment.rst#2025-04-23_snippet_12\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   recruitment/new_job\n   recruitment/recruitment-flow\n   recruitment/add-new-applicants\n   recruitment/schedule_interviews\n   recruitment/offer_job_positions\n   recruitment/refuse_applicant\n   recruitment/source_analysis\n   recruitment/recruitment_analysis\n   recruitment/time_in_stage\n   recruitment/team_performance\n```\n\n----------------------------------------\n\nTITLE: Configuring and Sending Job Offer Email in Odoo\nDESCRIPTION: This snippet demonstrates the process of configuring and sending a job offer email to an applicant in Odoo. It includes details on populating fields in the 'Generate a Simulation Link' pop-up window and sending the offer via email.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment/offer_job_positions.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. important::\n   If the applicant does not have an email address listed on their applicant card, a warning appears\n   in a red box at the bottom of the :guilabel:`Generate a Simulation Link` pop-up window, stating:\n   :guilabel:`The applicant does not have a valid email set. The Offer Link won't be able to be\n   completed.` Click :guilabel:`Discard`, then enter an email on the applicant's card. Once an email\n   is entered, click the :guilabel:`Generate Offer` button, and the email pop-up window loads again.\n\nThe default :guilabel:`Recruitment: Your Salary Package` email template is used (set in the\n:guilabel:`Load template` field), and the :guilabel:`Recipients`, :guilabel:`Subject`, and email\nbody are pre-populated based on the email template.\n\nIf any attachments need to be added, click the :icon:`fa-paperclip` :guilabel:`Attachments` button,\nand a file explorer window appears. Navigate to the desired file, then click :guilabel:`Open` to\nattach it to the email. The attachment loads, and is listed above the :icon:`fa-paperclip`\n:guilabel:`Attachments` button.\n\nOnce the email is ready to send, click :guilabel:`Send`. The email pop-up window closes, and an\n:guilabel:`Offers` smart button appears at the top of the applicant's card.\n```\n\n----------------------------------------\n\nTITLE: Defining the Odoo Proprietary License v1.0 (Plain Text)\nDESCRIPTION: This text block presents the full terms of the Odoo Proprietary License v1.0. This license typically applies to Odoo Apps developed by Odoo SA, outlining permissions for use, modification, and distribution, alongside warranty disclaimers and liability limitations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/legal/licenses.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nOdoo Proprietary License v1.0\n\nThis software and associated files (the \"Software\") may only be used\n(executed, modified, executed after modifications) if you have purchased a\nvalid license from the authors, typically via Odoo Apps, or if you have\nreceived a written agreement from the authors of the Software (see the\nCOPYRIGHT file).\n\nYou may develop Odoo modules that use the Software as a library (typically\nby depending on it, importing it and using its resources), but without\ncoping any source code or material from the Software. You may distribute\nthose modules under the license of your choice, provided that this license\nis compatible with the terms of the Odoo Proprietary License (For example:\nLGPL, MIT, or proprietary licenses similar to this one).\n\nIt is forbidden to publish, distribute, sublicense, or sell copies of the\nSoftware or modified copies of the Software.\n\nThe above copyright notice and this permission notice must be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Displaying Comparison Section Image in RST\nDESCRIPTION: Shows how to include an image of the comparison section in the search bar for the production analysis report using reStructuredText.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials/search.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: search/comparison-section.png\n   :alt: The search bar for the production analysis report.\n```\n\n----------------------------------------\n\nTITLE: Managing File Redirections for Documentation Updates - Text\nDESCRIPTION: This snippet demonstrates how to add a line to the text file in the redirects folder when moving or deleting a .rst file in Odoo documentation. It shows the syntax needed to map the old file location to the new one, formatted as a plain text entry. No programming dependencies are required, and the snippet is to be entered as a single line without additional formatting. Parameters include the path to the old location and the new location, separated by a space. The expected output is a valid redirection entry that helps the documentation build system maintain accurate links.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/content_guidelines.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\napplications/websites/website/configuration/unsplash.rst applications/general/integrations/unsplash.rst\n```\n\n----------------------------------------\n\nTITLE: Defining a Multiline Text Field (`text`) in Odoo\nDESCRIPTION: Defines a field for longer text content, supporting any character type. By default, it displays two text lines in the UI for input. Odoo's technical name is 'text'. The 'Copy to Clipboard' widget is available, allowing users to copy the field's value easily.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/studio/fields.rst#2025-04-23_snippet_1\n\nLANGUAGE: Odoo\nCODE:\n```\ntext\n```\n\n----------------------------------------\n\nTITLE: Applying Background Image/Pattern in Odoo SCSS (Placeholder)\nDESCRIPTION: Indicates the location (`/website_airproof/static/src/scss/primary_variables.scss`) where SCSS code for defining background images or patterns would typically reside. The snippet itself is empty but signifies the file and context for customizing website backgrounds using SCSS variables or rules within the theme's primary variables file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_16\n\nLANGUAGE: scss\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Note in RST Documentation\nDESCRIPTION: This RST directive creates a note box about email templates and references another document.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment.rst#2025-04-23_snippet_8\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n   Email templates can be created, modified, and deleted to suit the needs of a business. For more\n   information on email templates, refer to the :doc:`../general/companies/email_template` document.\n```\n\n----------------------------------------\n\nTITLE: Installing num2words Package for Textual Amounts in Odoo on Debian/Ubuntu\nDESCRIPTION: Command to install the num2words Python package manually on Debian Buster or Ubuntu 18.04, needed for rendering textual amounts in Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/packages.rst#2025-04-23_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ sudo pip3 install num2words\n```\n\n----------------------------------------\n\nTITLE: Translation Function Import in JavaScript\nDESCRIPTION: Shows how to import the translation functions _t and _lt in a JavaScript module. These functions are used to make text translatable in the Odoo web client.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar _t = instance.web._t,\n    _lt = instance.web._lt;\n```\n\n----------------------------------------\n\nTITLE: Enabling Tag Record Editing with Many2many Tags Widget in Odoo XML\nDESCRIPTION: Example of setting the `edit_tags` option to `true` within the `options` attribute for the `many2many_tags` widget. Enabling this option allows users to click on a tag to open and potentially edit the underlying related record.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_38\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"category_id\" widget=\"many2many_tags\" options=\"{'edit_tags': true}\" />\n```\n\n----------------------------------------\n\nTITLE: Result of Correctly Escaped Nested Backticks in reStructuredText\nDESCRIPTION: This represents the intended output in the final rendered documentation when nested backticks are correctly escaped using the five-backtick method (` ````` `). It displays the text \"this formatting\" enclosed in double backticks, signifying inline code.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_36\n\nLANGUAGE: rst\nCODE:\n```\n```this formatting```\n```\n\n----------------------------------------\n\nTITLE: Building Odoo Documentation with Make\nDESCRIPTION: Command to build the Odoo documentation locally using Make. Additional help commands are available through 'make help'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Adding Mail Module Dependency in Odoo Manifest (Python)\nDESCRIPTION: This Python snippet shows how to modify the Odoo module manifest file ('__manifest__.py') to add a dependency. It adds 'mail' to the 'depends' list, indicating that the 'academy' module requires the 'mail' module (which provides Chatter functionality) to work correctly.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n'version': '0.1',\n\n# any module necessary for this one to work correctly\n'depends': ['website', 'mail'],\n\n# always loaded\n'data': [\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Quality Control Documentation in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents for quality control documentation using reStructuredText syntax. It includes a main title and a list of subtopics related to quality management in Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/quality/quality_management.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n\n======================\nQuality control basics\n======================\n\n.. toctree::\n   :titlesonly:\n\n   quality_management/quality_control_points\n   quality_management/quality_alerts\n   quality_management/quality_checks\n   quality_management/failure_locations\n```\n\n----------------------------------------\n\nTITLE: Calculating Monthly Leave Provision in UAE Payroll\nDESCRIPTION: Formula for calculating the monthly leave provision amount for employees in the UAE. It takes into account the total salary, number of leave days, and divides by 12 to get the monthly amount.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll/payroll_localizations/united_arab_emirates.rst#2025-04-23_snippet_0\n\nLANGUAGE: math\nCODE:\n```\n\\text{Monthly Leave Provision} = \\frac{\\text{Total Salary} \\times \\text{Number of Leave Days}}{30} \\div 12\n```\n\n----------------------------------------\n\nTITLE: RST Image Link for Terms and Conditions\nDESCRIPTION: RST syntax for displaying subscription plan terms and conditions image\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/subscriptions/plans.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: plans/subplan-terms-conditions.png\n   :align: center\n   :alt: Subscription plan Terms & Conditions tab.\n```\n\n----------------------------------------\n\nTITLE: Inserting RST Image for Cancelled Quotations\nDESCRIPTION: This RST code inserts an image showing cancelled quotations in the Purchase app overview.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/calls_for_tenders.rst#2025-04-23_snippet_8\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: calls_for_tenders/calls-for-tenders-zero-total.png\n   :align: center\n   :alt: Cancelled quotations in the Purchase app overview.\n```\n\n----------------------------------------\n\nTITLE: Mapping Reporting Declarations Intrastat Path (plaintext)\nDESCRIPTION: Maps the old documentation path for Intrastat declarations under reporting to a new path, keeping the filename but moving it up one directory level.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_47\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/reporting/declarations/intrastat.rst applications/finance/accounting/reporting/intrastat.rst                       # reporting/declarations/* -> reporting/*\n```\n\n----------------------------------------\n\nTITLE: Configuring File-Level reStructuredText Documentation\nDESCRIPTION: reStructuredText markup for a documentation page about configuring and using time and materials invoicing in Odoo. Includes section headers, image references, notes, tips and cross-references.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/invoicing/time_materials.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n=====================================\nInvoicing based on time and materials\n=====================================\n\nInvoicing based on time and/or materials is typically used when accurately estimating the size of a\nproject isn't possible, or when the requirements of a project may change.\n\n.. image:: time_materials/analytic-accounting-setting.png\n   :align: center\n   :alt: How it looks to activate the Analytic Accounting setting in Odoo Accounting Setting page.\n\n.. note::\n   The time entered in the :guilabel:`Hours Spent` column is immediately reflected in the\n   :guilabel:`Allocated Time` field\n\n.. tip::\n   Pay attention to the :guilabel:`Analytic Distribution` column in the :guilabel:`Customer\n   Invoice`\n```\n\n----------------------------------------\n\nTITLE: Creating a Danger Block using RST .. danger:: Directive\nDESCRIPTION: This snippet demonstrates the reStructuredText syntax for creating a 'Danger' admonition block using the `.. danger::` directive. This block highlights potentially harmful actions or serious threats.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n.. code-block:: text\n\n   .. danger::\n      Use this alert block to bring the reader's attention to a serious threat.\n```\n\n----------------------------------------\n\nTITLE: reStructuredText Directive for Sales Order Abbreviation\nDESCRIPTION: Defines a reStructuredText replacement directive to create an abbreviation for Sales Order (SO) throughout the document.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/reservation_methods/manually.rst#2025-04-23_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n.. |SO| replace:: :abbr:`SO (Sales Order)`\n```\n\n----------------------------------------\n\nTITLE: Correctly Escaping Nested Backticks in reStructuredText\nDESCRIPTION: This reStructuredText snippet shows the correct way to escape nested backticks for inline code formatting. Encapsulating the content, including the inner double backticks, within five backticks (` ````` `) allows the inner formatting to be rendered literally without causing processing errors.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_35\n\nLANGUAGE: rst\nCODE:\n```\n`````this formatting`````\n```\n\n----------------------------------------\n\nTITLE: Configuring Bank Journal Information in RST\nDESCRIPTION: This RST code snippet demonstrates how to include an image showing the manual configuration of bank information in Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/bank.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: bank/bank-journal-config.png\n   :alt: Manually configure your bank information\n```\n\n----------------------------------------\n\nTITLE: Defining Hidden Table of Contents Structure in Sphinx for Odoo Documentation\nDESCRIPTION: This reStructuredText snippet configures a hidden table of contents for Odoo documentation. It uses the ':nosearch:' and ':orphan:' directives to exclude the page from search results and prevent warnings about the document not being included in any toctree. The toctree directive with 'maxdepth: 4' and 'hidden' options defines a reference to an enterprise documentation module in German.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/legal/terms/i18n/enterprise_tex_de.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n:orphan:\n\n.. toctree::\n   :maxdepth: 4\n   :hidden:\n\n   enterprise_de\n```\n\n----------------------------------------\n\nTITLE: Accessing PostgreSQL Shell in Odoo.sh\nDESCRIPTION: Shows the command to access the PostgreSQL shell within the Odoo.sh terminal interface.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/branches.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npsql\n```\n\n----------------------------------------\n\nTITLE: Inserting Image in reStructuredText for Attendance Details\nDESCRIPTION: This snippet demonstrates how to insert an image into the documentation using reStructuredText syntax. It includes the image path, alignment, and alt text for accessibility.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/attendances.rst#2025-04-23_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. image:: attendances/details.png\n   :align: center\n   :alt: The detailed information for an attendance entry.\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Substitution for Caret Icon\nDESCRIPTION: This reStructuredText directive defines a substitution named 'caret'. When `|caret|` is used in the document, it will be replaced by the Font Awesome 'fa-caret-down' icon followed by the text '(down) icon'. This is used for consistent icon representation in the documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/crm/performance/forecast_report.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. |caret| replace:: :icon:`fa-caret-down` :guilabel:`(down)` icon\n```\n\n----------------------------------------\n\nTITLE: Image Display Configuration in RST\nDESCRIPTION: RST markup for displaying and configuring images in the documentation with alignment and alt text properties.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/invoicing/expense.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:align: center\n:alt: A create invoices pop-up window that appears when the Create Invoice is clicked.\n```\n\n----------------------------------------\n\nTITLE: Creating a Warning Note in reStructuredText\nDESCRIPTION: This RST code block demonstrates how to create a warning note in the documentation using the warning directive. It includes multi-line text and emphasizes important information.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/referrals.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. warning::\n   It is not advised to edit the images. An image file must have a transparent background in order\n   for it to render properly. Only users with knowledge about transparent images should attempt\n   adjusting any images in the *Referrals* application.\n\n   Once an image is changed and the friend is saved, it is **not possible** to revert to the\n   original image. To revert to the original image, the *Referrals* application must be *uninstalled\n   then reinstalled.*\n```\n\n----------------------------------------\n\nTITLE: Defining RST Table of Contents for Odoo Essentials\nDESCRIPTION: ReStructuredText directive that creates a table of contents by listing documentation file paths for essential Odoo features and functionalities.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\n   essentials/activities\n   essentials/reporting\n   essentials/search\n   essentials/html_editor\n   essentials/contacts\n   essentials/export_import_data\n   essentials/in_app_purchase\n   essentials/keyboard_shortcuts\n```\n\n----------------------------------------\n\nTITLE: Creating Employee Record from Hired Applicant in Odoo\nDESCRIPTION: This snippet outlines the process of creating an employee record from a hired applicant in Odoo. It includes instructions on accessing the employee form and filling out the necessary information.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment/offer_job_positions.rst#2025-04-23_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\nOnce the applicant has been hired, the next step is to create their employee record. Click the\n:guilabel:`Create Employee` button in the top-left corner of the hired applicant's form.\n\nAn employee form appears, with information from the applicant's card, and the employee contract.\n\nFill out the rest of the employee form. For detailed information on the fields, refer to the\n:doc:`../employees/new_employee` documentation.\n\nOnce completed, the employee record is saved in the *Employees* app.\n```\n\n----------------------------------------\n\nTITLE: Commit Message Format with Tags for Odoo Documentation\nDESCRIPTION: Template showing the proper format for Odoo documentation commit messages, including tag conventions and guidelines for writing descriptive commit messages.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/commit_template.txt#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[TAG] application/module: describe your changes in a short sentence\n\n# If you feel that it might help a future reader to understand your commit\n# motivations, take some time to explain WHY you made these changes in a few\n# sentences. The WHAT is usually easily understood by reading the diff.\n#\n# Short description tip: structure your commit message as if it was completing\n# this sentence: \"If merged, this commit will ...\". For instance, the following\n# commit message is correct: \"[IMP] sales: compress images to save space\".\n#\n# Tag meanings:\n#\n# [ADD] = New content\n# [IMP] = Improvement\n# [FIX] = Content or RST fix\n# [REM] = Removal\n# [REF] = Refactoring (restructuring)\n# [MOV] = Move/rename\n#\n```\n\n----------------------------------------\n\nTITLE: Referencing Recruitment Stage Customization in RST\nDESCRIPTION: This RST directive creates a reference to the 'Customize stages' section within the recruitment documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. _recruitment/customize-stages:\n```\n\n----------------------------------------\n\nTITLE: Describing Odoo Addon Static Assets Directory Structure - plaintext - text\nDESCRIPTION: This snippet presents a sample layout for the static directory in an Odoo module, with subfolders for images, external libraries, JavaScript, SCSS, and XML widget files. It enforces modular and maintainable static asset management, following consistent naming and organizational standards. The structure should be used as a template when designing the static resources in a new module.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\naddons/plant_nursery/\n|-- static/\n|   |-- img/\n|   |   |-- my_little_kitten.png\n|   |   |-- troll.jpg\n|   |-- lib/\n|   |   |-- external_lib/\n|   |-- src/\n|   |   |-- js/\n|   |   |   |-- widget_a.js\n|   |   |   |-- widget_b.js\n|   |   |-- scss/\n|   |   |   |-- widget_a.scss\n|   |   |   |-- widget_b.scss\n|   |   |-- xml/\n|   |   |   |-- widget_a.xml\n|   |   |   |-- widget_a.xml\n```\n\n----------------------------------------\n\nTITLE: Hiding the Footer on Odoo Page - XML\nDESCRIPTION: Similar to hiding the header, this snippet hides the page footer using 'no_footer' property, set via 't-set'. Typically used for specific templates requiring no Odoo default footer.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\\\"no_footer\\\" t-value=\\\"true\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabbed Content in Sphinx Documentation\nDESCRIPTION: Demonstrates how to create tabbed content in Sphinx documentation with separate versions for different user types (Online, Odoo.sh, On-premise).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n.. tabs::\n\n   .. tab:: Odoo Online\n\n      Content dedicated to Odoo Online users.\n\n   .. tab:: Odoo.sh\n\n      Alternative for Odoo.sh users.\n\n   .. tab:: On-premise\n\n      Third version for On-premise users.\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive for Catalog Button\nDESCRIPTION: Inserts and configures an image showing the catalog button location on the Order Lines tab\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/product_catalog.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: product_catalog/catalog-button.png\n   :align: center\n   :alt: The \"Catalog\" button on the \"Order Lines\" tab of a sales quotation.\n```\n\n----------------------------------------\n\nTITLE: Including Image for Adding Column in RST\nDESCRIPTION: This RST directive includes an image showing how to add a new column to Kanban stages.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment.rst#2025-04-23_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: recruitment/add-column.png\n   :align: center\n   :alt: The plus sign to click to add a new column to the Kanban stages.\n```\n\n----------------------------------------\n\nTITLE: RST Directive - Approve Multiple Reports Image\nDESCRIPTION: ReStructuredText directive for displaying an image showing how to approve multiple reports with proper alignment and alt text.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/expenses/approve_expenses.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: approve_expenses/approve-report.png\n   :align: center\n   :alt: Approve multiple reports by clicking the checkboxes next to each report.\n```\n\n----------------------------------------\n\nTITLE: Showing Invalid Operation for Fully Billed Purchase Order\nDESCRIPTION: RST markup for displaying an Invalid Operation popup window when attempting to bill a fully billed Purchase Order.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/control_bills.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: control_bills/control-bills-invalid-operation.png\n   :align: center\n   :alt: Invalid Operation pop-up window for billed Purchase Order.\n```\n\n----------------------------------------\n\nTITLE: Mapping Get Signature to Validate Quotation Documentation (Sales)\nDESCRIPTION: Maps the old documentation path for getting a signature to validate quotations under 'send_quotations' (`applications/sales/sales/send_quotations/get_signature_to_validate.rst`) to the new path under 'sales_quotations' (`applications/sales/sales/sales_quotations/get_signature_to_validate.rst`) within the Odoo Sales application documentation. Comment confirms the pattern `send_quotations/* --> sales_quotations/*`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/18.0.txt#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/sales/sales/send_quotations/get_signature_to_validate.rst applications/sales/sales/sales_quotations/get_signature_to_validate.rst   # sales/send_quotations/* --> sales/sales_quotations/*\n```\n\n----------------------------------------\n\nTITLE: Creating an Exercise Block using RST .. exercise:: Directive\nDESCRIPTION: This snippet demonstrates the reStructuredText syntax for creating an 'Exercise' admonition block using the `.. exercise::` directive. This block is designed to suggest a practical exercise for the reader to perform.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n.. code-block:: text\n\n   .. exercise::\n      Use this alert block to suggest an exercise to the reader.\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Example Block for Time Period Comparison\nDESCRIPTION: Creates an 'example' block demonstrating how to use the Purchase Analysis report to compare purchase orders across different time periods.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/advanced/analyze.rst#2025-04-23_snippet_4\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. example::\n   Following the :ref:`previous example <purchase/purchase-analysis-example>`, it has been one month\n   since Bike Haus decided to reduce the quantity of products purchased from Bike Friends, one of\n   their retailers. Bike Haus' purchasing manager, David, wants to understand the impact this\n   decision has had on the amount of money they have spent on Bike Friends products.\n\n   David starts by navigating to :menuselection:`Purchase app --> Reporting --> Purchase`. Then, he\n   selects the :icon:`oi-view-pivot` :guilabel:`(pivot table)` option at the top of the screen.\n\n   In the search bar, he types `Bike Friends`, and clicks :guilabel:`Enter`, so the report only\n   shows data for purchases from Bike Friends.\n\n   Then, David clicks the :icon:`fa-caret-down` :guilabel:`(toggle)` button on the right of the\n   search bar to open its drop-down menu. In the :guilabel:`Confirmation Date` field, he leaves the\n   :guilabel:`June` and :guilabel:`2024` filters enabled. He also selects :guilabel:`Confirmation\n   Date: Previous Period` in the :guilabel:`Comparison` section, before clicking away from the\n   drop-down menu to close it.\n\n   Next, David clicks on the :guilabel:`Measures` :icon:`fa-caret-down` drop-down menu. He leaves\n   the :guilabel:`Total` and :guilabel:`Untaxed Total` datasets enabled, and disables the\n   :guilabel:`Order` and :guilabel:`Count` datasets.\n\n   Finally, David clicks the :icon:`fa-minus-square-o` :guilabel:`Total` button above the rows on\n   the pivot table, and selects the :guilabel:`Product` option.\n\n   With all of these options configured, the :guilabel:`Purchase Analysis` report shows a pivot\n   table comparing purchase data for the current month, June, with the previous month, May.\n\n   The pivot table is broken down into two main columns: one for the untaxed total spent, and one\n   for the taxed total spent. These columns are further broken down into three smaller columns: the\n   amount spent in May, the amount spent in June, and the variation between the two months,\n   represented as a percentage.\n\n   On the left side of the pivot table, one row is shown for each product purchased from Bike\n   Friends during June. Using this report, David is able to see that Bike Haus has spent much less\n   money on products purchased from Bike Friends, compared to the previous month.\n\n   .. image:: analyze/comparison.png\n      :align: center\n      :alt: The Purchase report, comparing the amount spent at a vendor.\n```\n\n----------------------------------------\n\nTITLE: Creating a New Contact in Odoo Using Webhook (Python)\nDESCRIPTION: This Python code snippet is used as the executable action for an Odoo webhook that creates a new contact when triggered. It retrieves the contact's name, email, and phone from the webhook payload, checks for required fields, and creates a new partner record via the Odoo ORM. Dependencies include the Odoo framework (providing 'env') and a properly structured webhook payload. Key parameters are 'name', 'email', and 'phone' from the payload; missing 'name' or 'email' causes an error. The output is a new record added to 'res.partner', and it raises a ValueError if required data is missing.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/studio/automated_actions/webhooks.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# variables to retrieve and hold data from the payload\\ncontact_name = payload.get('name')\\ncontact_email = payload.get('email')\\ncontact_phone = payload.get('phone')\\n\\n# a Python function to turn the variables into a contact in Odoo\\nif contact_name and contact_email:\\n    new_partner = env['res.partner'].create({\\n        'name': contact_name,\\n        'email': contact_email,\\n        'phone': contact_phone,\\n        'company_type':'person',\\n        'customer_rank': 1,\\n    })\\n# an error message for missing required data in the payload\\nelse:\\n    raise ValueError(\"Missing required fields: 'name' and 'email'\")\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Tabs in Sphinx Documentation\nDESCRIPTION: Shows how to implement nested tabs within Sphinx documentation, allowing for hierarchical organization of content like stars and moons with their subcategories.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_29\n\nLANGUAGE: text\nCODE:\n```\n.. tabs::\n\n   .. tab:: Stars\n\n      .. tabs::\n\n         .. tab:: The Sun\n\n            The closest star to us.\n\n         .. tab:: Proxima Centauri\n\n            The second closest star to us.\n\n         .. tab:: Polaris\n\n            The North Star.\n\n   .. tab:: Moons\n\n      .. tabs::\n\n         .. tab:: The Moon\n\n            Orbits the Earth.\n\n         .. tab:: Titan\n\n            Orbits Jupiter.\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in RST for Payroll Localizations\nDESCRIPTION: This RST code snippet defines a table of contents (toctree) for payroll localization documentation. It includes links to specific country documentation files.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll/payroll_localizations.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   payroll_localizations/australia\n   payroll_localizations/belgium\n   payroll_localizations/hong_kong\n   payroll_localizations/jordan\n   payroll_localizations/united_arab_emirates\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Header Option in XML\nDESCRIPTION: Defines a custom header option for the Odoo Website Builder interface.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"template_footer_opt\" inherit_id=\"website.snippet_options\" name=\"Footer Template - Option\">\n   <xpath expr=\"//we-select[@data-variable='footer-template']\" position=\"inside\">\n      <we-button title=\"airproof\"\n         data-customize-website-views=\"website_airproof.footer\"\n         data-customize-website-variable=\"'airproof'\"  data-img=\"/website_airproof/static/src/img/wbuilder/template_footer_opt.svg\"/>\n   </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining QWeb Template in XML for Odoo\nDESCRIPTION: Creates a simple QWeb template in XML format, which can be used to render content in Odoo widgets.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_17\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<templates xml:space=\"preserve\">\n    <t t-name=\"HomePageTemplate\">\n        <div style=\"background-color: red;\">This is some simple HTML</div>\n    </t>\n</templates>\n```\n\n----------------------------------------\n\nTITLE: reStructuredText Documentation for Odoo Data Inalterability\nDESCRIPTION: Technical documentation written in reStructuredText format that explains Odoo's data inalterability features, including configuration settings, hash generation process, and reporting functionality\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/reporting/data_inalterability.rst#2025-04-23_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n================================\nData inalterability check report\n================================\n\nTax authorities in some countries require companies to **prove their posted accounting entries are\nunaltered**, meaning that once an entry has been secured, it can no longer be changed.\n\nTo do so, Odoo creates a unique fingerprint for each secured entry thanks to the **SHA-256 algorithm**.\nThis fingerprint is called a hash.\n```\n\n----------------------------------------\n\nTITLE: Accessing Make Help for Odoo Documentation\nDESCRIPTION: Command to display available Make commands for Odoo documentation building.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake help\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation Structure for Odoo Shop Features\nDESCRIPTION: ReStructuredText markup defining the documentation structure for Odoo shop features. Uses toctree directive to organize related documentation pages in a hierarchical structure.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/point_of_sale/shop.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:nosearch:\n\n=============\nShop features\n=============\n\n.. toctree::\n   :titlesonly:\n\n   shop/sales_order\n   shop/barcode\n   shop/serial_numbers\n   shop/ship_later\n   shop/customer_display\n```\n\n----------------------------------------\n\nTITLE: Creating an Example Block using RST .. example:: Directive\nDESCRIPTION: This snippet illustrates the reStructuredText syntax for creating an 'Example' admonition block using the `.. example::` directive. This block is used to showcase a specific example related to the documentation content.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n.. code-block:: text\n\n   .. example::\n      Use this alert block to show an example.\n```\n\n----------------------------------------\n\nTITLE: Defining RST Replacement Directives for Purchase Abbreviations\nDESCRIPTION: This RST code defines replacement directives for common purchase-related abbreviations used throughout the document.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/calls_for_tenders.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. |PO| replace:: :abbr:`PO (Purchase Order)`\n.. |POs| replace:: :abbr:`POs (Purchase Orders)`\n.. |RfQ| replace:: :abbr:`RfQ (Request for Quotation)`\n.. |RfQs| replace:: :abbr:`RfQs (Requests for Quotation)`\n```\n\n----------------------------------------\n\nTITLE: Displaying Internal Link Icon in RST\nDESCRIPTION: This RST code snippet shows how to display an image of the internal link icon used to set up a default worksheet template. It includes scaling and alt text for accessibility.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/field_service/worksheets.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: worksheets/template-default.png\n   :scale: 75%\n   :alt: Mouse on project name to setup default worksheet template\n```\n\n----------------------------------------\n\nTITLE: Documentation Reference Links in RST\nDESCRIPTION: RST markup for creating documentation reference links to related topics using the seealso directive.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/invoicing/expense.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. seealso::\n   - :doc:`invoicing_policy`\n   - :doc:`time_materials`\n   - :doc:`milestone`\n```\n\n----------------------------------------\n\nTITLE: Creating See Also Section in RST Documentation\nDESCRIPTION: This RST directive creates a 'See Also' section with links to related documentation pages.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment.rst#2025-04-23_snippet_11\n\nLANGUAGE: rst\nCODE:\n```\n.. seealso::\n   - :doc:`recruitment/new_job`\n   - :doc:`recruitment/add-new-applicants`\n   - :doc:`recruitment/schedule_interviews`\n   - :doc:`recruitment/offer_job_positions`\n   - :doc:`recruitment/refuse_applicant`\n   - :doc:`recruitment/source_analysis`\n   - :doc:`recruitment/recruitment_analysis`\n   - :doc:`recruitment/time_in_stage`\n   - :doc:`recruitment/team_performance`\n```\n\n----------------------------------------\n\nTITLE: External Hyperlink Example\nDESCRIPTION: Shows how to create external hyperlinks with custom labels.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nFor instance, `this is an external hyperlink to Odoo's website <https://www.odoo.com>`_.\n```\n\n----------------------------------------\n\nTITLE: RST See Also Section\nDESCRIPTION: ReStructuredText directive for related documentation links.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/referrals.rst#2025-04-23_snippet_8\n\nLANGUAGE: rst\nCODE:\n```\n.. seealso::\n   - :doc:`referrals/share_jobs`\n   - :doc:`referrals/points`\n   - :doc:`referrals/rewards`\n   - :doc:`referrals/alerts`\n   - :doc:`referrals/reporting`\n```\n\n----------------------------------------\n\nTITLE: Defining RST Replacements for Manufacturing Order Abbreviation\nDESCRIPTION: This RST directive defines a replacement for the 'MO' abbreviation, which stands for Manufacturing Order. It's used throughout the document for consistency.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/quality/quality_management/quality_alerts.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. |MO| replace:: :abbr:`MO (Manufacturing Order)`\n```\n\n----------------------------------------\n\nTITLE: Installing Make on Linux (apt, Console Commands) - Console\nDESCRIPTION: This snippet uses the apt package manager to install 'make' on Linux systems, which is required to build and manage the Odoo documentation. Dependencies: user must have sudo privileges and be using a Debian-based operating system. The '-y' flag approves the installation without further prompts. Ensures that the 'make' utility is available for the documentation build process.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation.rst#2025-04-23_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt install make -y\n\n```\n\n----------------------------------------\n\nTITLE: Mapping Analytic Timesheets Path (plaintext)\nDESCRIPTION: Maps the old documentation path for analytic accounting related to timesheets to a new path under 'reporting/analytic'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/others/analytic/timesheets.rst applications/finance/accounting/reporting/analytic/timesheets.rst                   # others/analytic/* -> reporting/analytic/*\n```\n\n----------------------------------------\n\nTITLE: Including Image in RST Documentation\nDESCRIPTION: This RST directive includes an image file in the documentation, specifying alignment and alt text.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: recruitment/status-dots.png\n   :align: center\n   :alt: The applicant card statuses, and status bar.\n```\n\n----------------------------------------\n\nTITLE: Context Demonstration in Python Server Method\nDESCRIPTION: Shows how the context is received in the Python server method. The context contains user configuration values like language and timezone, plus any additional keys added in the JavaScript call.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n@api.model\ndef my_method(self):\n    print(self.env.context)\n    // will print: {'lang': 'en_US', 'new_key': 'key_value', 'tz': 'Europe/Brussels', 'uid': 1}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Content Template for Events\nDESCRIPTION: This snippet shows how to create a custom dynamic content template for events in Odoo website themes. It iterates over records and sets up the timezone context for each event.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_52\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"dynamic_filter_template_event_event_airproof\" name=\"...\">\n   <div t-foreach=\"records\" t-as=\"data\" class=\"s_events_event\">\n      <t t-set=\"record\" t-value=\"data['_record']._set_tz_context()\"/>\n      <!-- Content -->\n   </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git for Windows Collaboration (Git, Console Commands) - Console\nDESCRIPTION: This snippet sets Git to automatically convert line endings to Windows style on commit and defines the commit message template path for users on Windows. Dependencies: git for Windows installed; the commit_template.txt file must exist in the current directory. The '%CD%' variable represents the current working directory in Windows. These configurations help ensure that line endings and commit formats remain consistent among multilingual contributors.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation.rst#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ git config --global core.autocrlf true\n$ git config commit.template %CD%\\commit_template.txt\n\n```\n\n----------------------------------------\n\nTITLE: Inserting RST Image for Purchase Agreements Setting\nDESCRIPTION: This RST code inserts an image showing the Purchase Agreements setting in the Odoo Purchase app configuration.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/calls_for_tenders.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: calls_for_tenders/calls-for-tenders-enabled-setting.png\n   :align: center\n   :alt: Purchase Agreements enabled in the Purchase app settings.\n```\n\n----------------------------------------\n\nTITLE: Patching a Simple JavaScript Object\nDESCRIPTION: Demonstrates the basic usage of the `patch` function from `@web/core/utils/patch` to modify a method (`fn`) within a simple JavaScript object. The original `fn` method is replaced by the new definition provided in the extension object.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/patching_code.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { patch } from \"@web/core/utils/patch\";\n\nconst object = {\n  field: \"a field\",\n  fn() {\n    // do something\n  },\n};\n\npatch(object, {\n  fn() {\n    // do things\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating RST Table of Contents for Advanced Odoo Documentation\nDESCRIPTION: ReStructuredText markup defining a table of contents tree for advanced Odoo documentation topics. Uses the titlesonly directive to show only top-level sections.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/advanced.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:nosearch:\n\n========\nAdvanced\n========\n\n.. toctree::\n   :titlesonly:\n\n   advanced/containers\n   advanced/submodules\n   advanced/frequent_technical_questions\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Invoice Document Type Format\nDESCRIPTION: Specifies the standard format for the 'Document Type' field on a customer invoice in Odoo for Ecuadorian localization. It uses a code (01) followed by the document name.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/ecuador.rst#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n(01) Invoice\n```\n\n----------------------------------------\n\nTITLE: Defining Withholding Journal Name Format\nDESCRIPTION: Specifies the required format for naming a withholding journal in Odoo for Ecuadorian localization. This format includes the emission entity, emission point, and document type.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/ecuador.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[Emission Entity]-[Emission Point] [Document Type]\n```\n\nLANGUAGE: text\nCODE:\n```\n001-001 Withholding\n```\n\n----------------------------------------\n\nTITLE: Restructured Text Shipping Documentation\nDESCRIPTION: RST markup documentation for configuring third-party shipping carriers in Odoo, including directives, section headers, notes, warnings and path specifications.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/third_party_shipper.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. |SO| replace:: :abbr:`SO (Sales Order)`\n.. |DO| replace:: :abbr:`DO (Delivery Order)`\n\n.. _inventory/shipping/third_party:\n\n.. seealso::\n   - :doc:`dhl_credentials`\n   - :doc:`sendcloud_shipping`\n   - :doc:`ups_credentials`\n\n.. important::\n   Other services from DHL are **not** supported.\n\n   Sendcloud currently supports shipping **from** Austria, Belgium, France, Germany, Italy, the\n   Netherlands, Spain, and the United Kingdom, and **to** any European country.\n\n.. note::\n   The list often includes **two** delivery methods from the same :guilabel:`Provider`: one for\n   international shipping and one for domestic shipping.\n```\n\n----------------------------------------\n\nTITLE: Renaming Website Configuration Documentation in Odoo\nDESCRIPTION: This snippet demonstrates the renaming of a file in the website application documentation. It changes 'recaptcha.rst' to 'spam_protection.rst' in the configuration directory.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/saas-16.2.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# applications/websites\n\napplications/websites/website/configuration/recaptcha.rst applications/websites/website/configuration/spam_protection.rst\n```\n\n----------------------------------------\n\nTITLE: Subscription Plan Configuration Menu Path\nDESCRIPTION: RST formatted path showing navigation to subscription plans configuration menu\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/subscriptions/plans.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:menuselection:`Subscriptions --> Configuration --> Plans`\n```\n\n----------------------------------------\n\nTITLE: Custom Anchor Example\nDESCRIPTION: Shows how to create and reference custom anchors in documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n.. _contributing/rst/hyperlinks-guidelines:\n\nHyperlinks\n==========\n\n.. _contributing/rst/relative-links:\n\nUse relative links for internal URLs\n------------------------------------\n\nPlease refer to the :ref:`contributing/rst/hyperlinks-guidelines` section to learn more about :ref:`relative links <contributing/rst/relative-links>`.\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Odoo Product Management Documentation\nDESCRIPTION: This reStructuredText snippet defines a table of contents for the 'Manage your products' section of Odoo documentation. It includes directives for page title, search exclusion, and links to subpages.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/products_prices/products.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n\n====================\nManage your products\n====================\n\n.. toctree::\n   :titlesonly:\n\n   products/import\n   products/variants\n   products/product_images\n```\n\n----------------------------------------\n\nTITLE: reStructuredText Image Directive\nDESCRIPTION: Includes an image in the documentation with alignment and alt text specifications.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/reservation_methods/manually.rst#2025-04-23_snippet_2\n\nLANGUAGE: reST\nCODE:\n```\n.. image:: manually/manually-operations-type.png\n   :align: center\n   :alt: Reservation method field on delivery order operation type form.\n```\n\n----------------------------------------\n\nTITLE: Viewing Visitor History via Command in Odoo Live Chat\nDESCRIPTION: Displays a list of the most recent web pages (up to 15) visited by the customer/visitor during their current session. The operator types `/history` in the chat window. The history list is visible only to the operator.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/websites/livechat/responses.rst#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n/history\n```\n\n----------------------------------------\n\nTITLE: Installing Command Line Tools on MacOS\nDESCRIPTION: Command to install Xcode Command Line Tools on MacOS\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/source.rst#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ xcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Defining File Path Redirects for Odoo Documentation\nDESCRIPTION: This configuration block defines multiple file path redirections for the Odoo documentation system. Each line maps an old relative path (first element) to a new relative path (second element), often accompanied by a comment explaining the change or pattern. These mappings ensure users accessing old links are directed to the updated content locations across various application modules (Inventory, Marketing, Sales, Services, Surveys).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/14.0.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# applications/inventory\n\napplications/inventory_and_mrp/inventory/management/delivery/dropshipping.rst applications/inventory_and_mrp/inventory/shipping/operation/dropshipping.rst                                                  # /inventory/management/incoming/* --> /shipping/operation/*\napplications/inventory_and_mrp/inventory/management/incoming/handle_receipts.rst applications/inventory_and_mrp/inventory/management/shipments_deliveries/inventory_flow.rst                                # /inventory/management/incoming/* --> /management/shipments_deliveries/*\napplications/inventory_and_mrp/inventory/management/delivery/inventory_flow.rst applications/inventory_and_mrp/inventory/management/shipments_deliveries/inventory_flow.rst                                 # /inventory/management/delivery/* --> /management/shipments_deliveries/*\napplications/inventory_and_mrp/inventory/management/delivery/label_type.rst applications/inventory_and_mrp/inventory/shipping/operation/label_type.rst                                                      # /inventory/management/delivery/* --> /shipping/operation/*\napplications/inventory_and_mrp/inventory/management/delivery/one_step.rst applications/inventory_and_mrp/inventory/management/shipments_deliveries/receipts_delivery_one_step.rst                           # /inventory/management/delivery/* --> /management/shipments_deliveries/*\napplications/inventory_and_mrp/inventory/management/incoming/one_step.rst applications/inventory_and_mrp/inventory/management/shipments_deliveries/receipts_delivery_one_step.rst                           # /inventory/management/incoming/* --> /management/shipments_deliveries/*\napplications/inventory_and_mrp/inventory/management/delivery/three_steps.rst applications/inventory_and_mrp/inventory/management/shipments_deliveries/delivery_three_steps.rst                              # /inventory/management/delivery/* --> /management/shipments_deliveries/*\napplications/inventory_and_mrp/inventory/management/delivery/two_steps.rst applications/inventory_and_mrp/inventory/management/shipments_deliveries/receipts_delivery_two_steps.rst                         # /inventory/management/delivery/* --> /management/shipments_deliveries/*\napplications/inventory_and_mrp/inventory/management/incoming/three_steps.rst applications/inventory_and_mrp/inventory/management/shipments_deliveries/receipts_three_steps.rst                              # /inventory/management/incoming/* --> /management/shipments_deliveries/*\napplications/inventory_and_mrp/inventory/management/incoming/two_steps.rst applications/inventory_and_mrp/inventory/management/shipments_deliveries/receipts_delivery_two_steps.rst                         # /inventory/management/incoming/* --> /management/shipments_deliveries/*\napplications/inventory_and_mrp/inventory/management/replenishment_strategies/virtual_warehouses.rst applications/inventory_and_mrp/inventory/management/warehouses/warehouse_replenishment_transfer.rst\napplications/inventory_and_mrp/inventory/routes/concepts/inter_warehouse.rst applications/inventory_and_mrp/inventory/management/warehouses/warehouse_replenishment_transfer.rst\n\n# applications/marketing\n\napplications/marketing/social_marketing/overview/livechat.rst applications/marketing/social_marketing/essentials/sms_essentials.rst\napplications/marketing/social_marketing/overview/push_notifications.rst applications/marketing/social_marketing/essentials/sms_essentials.rst\napplications/marketing/social_marketing/overview/create_posts.rst applications/marketing/social_marketing/essentials/sms_essentials.rst\n\n# applications/sales\n\napplications/sales/crm/acquire_leads/generate_from_email.rst applications/sales/crm/acquire_leads/generate_leads.rst       # (#986)\napplications/sales/crm/acquire_leads/generate_from_website.rst applications/sales/crm/acquire_leads/generate_leads.rst       # (#986)\napplications/sales/point_of_sale/advanced_pricing_features/discount_tags.rst applications/sales/point_of_sale/pricing/discount_tags.rst  # /advanced_pricing_features/* -> /pricing/*\napplications/sales/point_of_sale/advanced_pricing_features/discounts.rst applications/sales/point_of_sale/pricing/discounts.rst          # /advanced_pricing_features/* -> /pricing/*\napplications/sales/point_of_sale/advanced_pricing_features/loyalty.rst applications/sales/point_of_sale/pricing/loyalty.rst              # /advanced_pricing_features/* -> /pricing/*\napplications/sales/point_of_sale/advanced_pricing_features/pricelists.rst applications/sales/point_of_sale/pricing/pricelists.rst        # /advanced_pricing_features/* -> /pricing/*\napplications/sales/point_of_sale/belgian_fdm/setup.rst applications/finance/fiscal_localizations/belgium.rst\napplications/sales/point_of_sale/overview/getting_started.rst applications/sales/point_of_sale.rst                                       # point_of_sale/overview/getting_started -> point_of_sale\napplications/sales/point_of_sale/overview/epos_ssc.rst applications/sales/point_of_sale/configuration/epos_ssc.rst                       # /overview/* -> /configuration/*\napplications/sales/point_of_sale/overview/https.rst applications/sales/point_of_sale/configuration/https.rst                             # /overview/* -> /configuration/*\napplications/sales/point_of_sale/overview/register.rst applications/sales/point_of_sale.rst                                              # point_of_sale/overview/register -> point_of_sale\napplications/sales/point_of_sale/payment/adyen.rst applications/sales/point_of_sale/payment_methods/terminals/adyen.rst                  # /payment/* -> /payment_methods/terminals/*\napplications/sales/point_of_sale/payment/ingenico.rst applications/sales/point_of_sale/payment_methods/terminals/ingenico.rst            # /payment/* -> /payment_methods/terminals/*\napplications/sales/point_of_sale/payment/six.rst applications/sales/point_of_sale/payment_methods/terminals/six.rst                      # /payment/* -> /payment_methods/terminals/*\napplications/sales/point_of_sale/payment/vantiv.rst applications/sales/point_of_sale/payment_methods/terminals/vantiv.rst                # /payment/* -> /payment_methods/terminals/*\napplications/sales/point_of_sale/restaurant/fiscal_position.rst applications/sales/point_of_sale/pricing/fiscal_position.rst             # /restaurant/* -> /pricing/*\napplications/sales/point_of_sale/restaurant/restaurant.rst applications/sales/point_of_sale/restaurant/floors_tables.rst\napplications/sales/point_of_sale/restaurant/split.rst applications/sales/point_of_sale/restaurant/bill_printing.rst\napplications/sales/point_of_sale/shop/cash_rounding.rst applications/sales/point_of_sale/pricing/cash_rounding.rst                       # /shop/* -> /pricing/*\napplications/sales/point_of_sale/shop/invoice.rst applications/sales/point_of_sale/receipts_invoices.rst                                 # /shop/invoice -> receipts_invoices\napplications/sales/point_of_sale/shop/multicashiers.rst applications/sales/point_of_sale/employee_login.rst                              # /shop/multicashiers -> employee_login\napplications/sales/point_of_sale/shop/reprint.rst applications/sales/point_of_sale/receipts_invoices.rst                                 # /shop/reprint -> receipts_invoices\napplications/sales/sales/advanced/portal.rst applications/general/users/portal.rst\n\n# applications/services\n\napplications/services/fsm.rst applications/services/field_service.rst                                                               # fsm -> field_service\napplications/services/fsm/helpdesk/plan_onsite.rst applications/services/field_service/onsite_interventions.rst                     # fsm/helpdesk/plan_onsite -> field_service/onsite_interventions\napplications/services/fsm/sales/onsite_tasks_from_sales_orders.rst applications/services/field_service/onsite_interventions.rst     # fsm/sales/onsite_tasks_from_sales_orders -> field_service/onsite_interventions\n\n# applications/surveys\n\napplications/marketing/surveys/overview.rst applications/marketing/surveys.rst                           # remove survey overview folder\napplications/marketing/surveys/overview/create.rst applications/marketing/surveys/create.rst             # remove survey overview folder\napplications/marketing/surveys/overview/scoring.rst applications/marketing/surveys/scoring.rst           # remove survey overview folder\napplications/marketing/surveys/overview/time_random.rst applications/marketing/surveys/time_random.rst   # remove survey overview folder\n```\n\n----------------------------------------\n\nTITLE: Displaying Payslip Printing Button in Odoo\nDESCRIPTION: This RST snippet shows an image of the print button for printing payslips in Odoo. It includes the image path, alignment, and alt text.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll/work_entries.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: work_entries/print-payslips.png\n   :align: center\n   :alt: Print button for printing the payslips.\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Odoo Setup Documentation in RST\nDESCRIPTION: This RST code creates a table of contents for the Setup section of Odoo documentation. It uses the toctree directive with titlesonly and glob options to include links to device troubleshooting, hardware, and software setup guides.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/barcode/setup.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:nosearch:\n\n=====\nSetup\n=====\n\n.. toctree::\n   :titlesonly:\n   :glob:\n\n   setup/device_troubleshooting\n   setup/hardware\n   setup/software\n```\n\n----------------------------------------\n\nTITLE: RST Directive - Chatter Image\nDESCRIPTION: ReStructuredText directive for displaying an image of the chatter communication feature with proper alignment and alt text.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/expenses/approve_expenses.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: approve_expenses/chatter.png\n   :align: center\n   :alt: Send messages in the chatter.\n```\n\n----------------------------------------\n\nTITLE: Mapping Customer Invoices EPC QR Code Path (plaintext)\nDESCRIPTION: Maps the old documentation path for EPC QR codes on customer invoices to the new path, keeping the structure under 'customer_invoices'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_37\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/receivables/customer_invoices/epc_qr_code.rst applications/finance/accounting/customer_invoices/epc_qr_code.rst                   # receivables/customer_invoices/* -> customer_invoices/*\n```\n\n----------------------------------------\n\nTITLE: RST Note Block for Maximum Level\nDESCRIPTION: ReStructuredText note directive explaining behavior at maximum level.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/referrals.rst#2025-04-23_snippet_7\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n   Once a user has reached the highest configured level, they will continue to accrue points that\n   can be redeemed for rewards, but they are no longer able to level up. The ring around their photo\n   remains solid cyan.\n```\n\n----------------------------------------\n\nTITLE: Mapping Analytic Purchases/Expenses Path (plaintext)\nDESCRIPTION: Maps the old documentation path for analytic accounting related to purchases and expenses to a new path under 'reporting/analytic'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/others/analytic/purchases_expenses.rst applications/finance/accounting/reporting/analytic/purchases_expenses.rst   # others/analytic/* -> reporting/analytic/*\n```\n\n----------------------------------------\n\nTITLE: Creating a Warning Box in reStructuredText\nDESCRIPTION: Generates a warning box in the documentation to highlight important information about enabling Help Center features and potential subscription impacts.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/helpdesk/overview/help_center.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. danger::\n   Since all of the *Help Center* features require integration with other applications, enabling any\n   of them may result in the installation of additional modules or applications.\n\n   Installing a new application on a *One-App-Free* database will trigger a 15-day trial. At the end\n   of the trial, if a `paid subscription <https://www.odoo.com/pricing>`_ has **not** been added to\n   the database, it will no longer be active or accessible.\n```\n\n----------------------------------------\n\nTITLE: Inserting RST Note for Call for Tender Definition\nDESCRIPTION: This RST code inserts a note explaining the concept of 'call for tender' and its usage in public and private sectors.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/calls_for_tenders.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n   Sometimes referred to as a *call for tender*, this process is primarily used by organizations in\n   the public sector, who are legally bound to use it when making a purchase. However, private\n   companies can also use alternative |RfQs| to spend money efficiently.\n```\n\n----------------------------------------\n\nTITLE: Defining Shop Floor Toctree in reStructuredText\nDESCRIPTION: This snippet uses the Sphinx/reStructuredText toctree directive to construct a navigable documentation index for the Shop Floor section. The :titlesonly: option restricts the navigation to display only page titles. Prerequisites include a Sphinx-based documentation setup and existence of the referenced sub-pages like 'shop_floor_overview' and 'shop_floor_tracking'. Its main purpose is to organize sub-sections under a parent Shop Floor heading, supporting modular and scalable documentation structure.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/shop_floor.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\\n   :titlesonly:\\n\\n   shop_floor/shop_floor_overview\\n   shop_floor/shop_floor_tracking\n```\n\n----------------------------------------\n\nTITLE: Mapping Payables SEPA Payment Path (plaintext)\nDESCRIPTION: Maps the old documentation path for paying via SEPA under payables to the new path specifically for SEPA payments under 'payments'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/payables/pay/sepa.rst applications/finance/accounting/payments/pay_sepa.rst                                        # payables/pay/sepa -> payments/pay_sepa\n```\n\n----------------------------------------\n\nTITLE: Displaying Bank Journal Card on Accounting Dashboard in RST\nDESCRIPTION: This RST code snippet shows how to include an image of a bank journal card displayed on the Accounting Dashboard, which contains action buttons.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/bank.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: bank/card.png\n   :alt: Bank journals are displayed on the Accounting Dashboard and contain action buttons\n```\n\n----------------------------------------\n\nTITLE: Setting Soft Memory Limit per Worker via Odoo Command-line\nDESCRIPTION: Used with '--workers', this defines the maximum virtual memory (in bytes) a worker process can consume. If exceeded, the worker is gracefully terminated and recycled after finishing its current request. Defaults to 2048MiB (2147483648 bytes).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_37\n\nLANGUAGE: console\nCODE:\n```\n--limit-memory-soft <limit>\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for Payroll Other Input Types\nDESCRIPTION: RST markup for documenting how to configure additional salary input types in Odoo Payroll, including creating new input types and setting their availability in payroll structures.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: payroll/other-input.png\n   :align: center\n   :alt: A list of other input types for payroll that can be selected when creating a new entry for\n         a payslip.\n\n.. important::\n   The :guilabel:`Code` is used in the salary rules to compute payslips. If the\n   :guilabel:`Availability in Structure` field is left blank, it indicates that the new input type\n   is available for all payslips and is not exclusive to a specific structure.\n```\n\n----------------------------------------\n\nTITLE: Warning Notice in RST\nDESCRIPTION: RST warning directive for cautioning users about changing costing methods\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/product_management/inventory_valuation/inventory_valuation_config.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. warning::\n   Changing the costing method greatly impacts inventory valuation. It is highly recommended to\n   consult an accountant first before making any adjustments here.\n```\n\n----------------------------------------\n\nTITLE: Computing AVCO for Product Delivery Example\nDESCRIPTION: Mathematical calculation showing how average cost remains unchanged when delivering products. This example delivers 10 tables and demonstrates that the average cost per unit stays at $12 despite the reduction in inventory.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/get_started/avg_price_valuation.rst#2025-04-23_snippet_2\n\nLANGUAGE: math\nCODE:\n```\nAvg~Cost = \\frac{12 \\times $12 + (-10) \\times $12}{12-10} = \\frac{24}{2} = $12\n```\n\n----------------------------------------\n\nTITLE: Defining Withholding Journal Short Code Example\nDESCRIPTION: Provides an example of a unique 5-digit short code used for the accounting entry sequence of a withholding journal. This code helps identify the journal in accounting entries.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/ecuador.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nWT001\n```\n\n----------------------------------------\n\nTITLE: Odoo Tax Model Documentation Structure in RST\nDESCRIPTION: ReStructuredText documentation layout defining the structure for Odoo's AccountTax model documentation, including field references and automodel directives.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/standard_modules/account/account_tax.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _reference/account_tax:\n\n=====\nTaxes\n=====\n\n.. automodel:: odoo.addons.account.models.account_tax.AccountTax\n    :main:\n\n    .. autofield:: name\n    .. autofield:: type_tax_use\n    .. autofield:: tax_scope\n    .. autofield:: amount_type\n    .. autofield:: active\n    .. autofield:: children_tax_ids\n    .. autofield:: sequence\n    .. autofield:: amount\n    .. autofield:: description\n    .. autofield:: price_include\n    .. autofield:: include_base_amount\n    .. autofield:: is_base_affected\n    .. autofield:: analytic\n    .. autofield:: invoice_repartition_line_ids\n    .. autofield:: refund_repartition_line_ids\n    .. autofield:: tax_group_id\n    .. autofield:: tax_exigibility\n    .. autofield:: cash_basis_transition_account_id\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Document Structure - Odoo Reporting Guide\nDESCRIPTION: ReStructuredText markup defining the structure and content of the Odoo reporting documentation, including sections for view selection, measures, and visualization types.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials/reporting.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=========\nReporting\n=========\n\nYou can find several reports under the :guilabel:`Reporting` menu of most apps that let you analyze\nand visualize the data of your records.\n\n.. _reporting/views:\n\nSelecting a view\n================\n\nDepending on the report, Odoo can display the data in various ways. Sometimes, a unique view\nfully tailored to the report is available, while several views are available for others. However,\ntwo generic views are dedicated to reporting: the graph and pivot views.\n```\n\n----------------------------------------\n\nTITLE: Accessing and Logging Route Information via Odoo Router Service (JavaScript)\nDESCRIPTION: This snippet demonstrates how to fetch and inspect the current route information from the Odoo router service in a JavaScript frontend. By referencing env.services.router.current, it extracts the current URL's pathname, search, and hash components. The code provides examples of logging these objects for debugging or conditional logic. This functionality is provided by the router service without explicit dependencies, as long as the env object is populated appropriately. Inputs are none; outputs are log statements of the route info.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/services.rst#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n  // url = /web?debug=assets#action=123&owl&menu_id=174\n  const { pathname, search, hash } = env.services.router.current;\n  console.log(pathname); //   /web\n  console.log(search); //   { debug=\"assets\" }\n  console.log(hash); //   { action:123, owl: \"\", menu_id: 174 }\n```\n\n----------------------------------------\n\nTITLE: Using Services in Components\nDESCRIPTION: Demonstrates how to use services within components using the useService hook to handle ORM operations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass SomeComponent extends Component {\n    setup() {\n        this.orm = useService(\"orm\");\n    }\n    // ...\n    getActivityModelViewID(model) {\n        return this.orm.call(model, \"get_activity_view_id\", this.params);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Lines of Code (Cloc) Using Configuration File via Command Line\nDESCRIPTION: Demonstrates using `odoo-bin cloc` with the `--config` (`-c`) option to specify an Odoo configuration file (`config.conf`). This file can contain the `addons_path` setting, eliminating the need to specify `--addons-path` directly on the command line when counting lines for modules in a database (`-d my_database`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_49\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin cloc -c config.conf -d my_database\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Odoo Upgrade Documentation in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for Odoo upgrade documentation using reStructuredText syntax. It includes links to pages for upgrade scripts and upgrade utilities.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/upgrades.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n\n========\nUpgrades\n========\n\n.. toctree::\n    :titlesonly:\n\n    upgrades/upgrade_scripts\n    upgrades/upgrade_utils\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Section Headers and Links\nDESCRIPTION: RST markup for section headers and internal document links defining the structure of the accounting reports documentation\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/reporting.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=========\nReporting\n=========\n\n.. _accounting/reporting/balance-sheet:\n\nBalance Sheet\n=============\n\n.. _accounting/reporting/profit-and-loss:\n\nProfit and Loss\n===============\n```\n\n----------------------------------------\n\nTITLE: Exporting People with Company Relationships from PostgreSQL to CSV\nDESCRIPTION: SQL command to export person data with company relationships from a PostgreSQL database to a CSV file for Odoo import. The query creates External IDs for people and references company External IDs.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials/export_import_data.rst#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncopy (select 'person_'||id as \"External ID\",person_name as \"Name\",'False' as \"Is a Company\",'company_'||company_id as \"Related Company/External ID\" from persons) TO '/tmp/person.csv' with CSV\n```\n\n----------------------------------------\n\nTITLE: Including an Image of Clipboard Options in reStructuredText\nDESCRIPTION: Inserts an image into the document using reStructuredText syntax, displaying the clipboard options available in Knowledge articles.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/helpdesk/overview/help_center.rst#2025-04-23_snippet_8\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: help_center/help-center-knowledge-clipboard-options.png\n   :alt: View of a clipboard in knowledge with focus on send and copy options.\n```\n\n----------------------------------------\n\nTITLE: Mapping Main Concept Getting Started Path (plaintext)\nDESCRIPTION: Maps the old documentation path for the main accounting concepts under getting started to the main accounting documentation file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/getting_started/main_concept.rst applications/finance/accounting.rst                                               # accounting/getting_started/main_concept -> accounting\n```\n\n----------------------------------------\n\nTITLE: Mapping Multi-currency Invoices/Payments Path (plaintext)\nDESCRIPTION: Maps the old documentation path related to invoices and payments in multi-currency under 'others/multicurrencies' to the main multi-currency documentation file in 'get_started'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/others/multicurrencies/invoices_payments.rst applications/finance/accounting/get_started/multi_currency.rst        # others/multicurrencies/* -> get_started/multi_currency\n```\n\n----------------------------------------\n\nTITLE: Inserting an Image in reStructuredText Documentation\nDESCRIPTION: This RST code snippet shows how to insert an image into the documentation using the image directive. It includes alignment, alt text, and file path specifications.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/referrals.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: referrals/onboarding.png\n   :align: center\n   :alt: An onboarding slide with the skip and next buttons visible at the bottom.\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in reStructuredText for Odoo Documentation\nDESCRIPTION: This snippet demonstrates how to create a table of contents in reStructuredText using the toctree directive with the titlesonly option, linking to the introduction section.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/overview.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   overview/introduction\n```\n\n----------------------------------------\n\nTITLE: Creating a Note Block using RST .. note:: Directive\nDESCRIPTION: This snippet provides the reStructuredText syntax for creating a 'Note' admonition block. The `.. note::` directive is used to highlight important additional information for the reader.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n.. code-block:: text\n\n   .. note::\n      Use this alert block to draw the reader's attention and highlight important additional information.\n```\n\n----------------------------------------\n\nTITLE: Mapping Supplier Bill Process Overview Path (plaintext)\nDESCRIPTION: Maps the old documentation path for the supplier bill process overview to the main vendor bills documentation file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/getting_started/process_overview/supplier_bill.rst applications/finance/accounting/vendor_bills.rst                # getting_started/process_overview/supplier_bill -> vendor_bills\n```\n\n----------------------------------------\n\nTITLE: Configuring Exim for Odoo Email Gateway\nDESCRIPTION: This snippet demonstrates the configuration line for Exim mail server to route all incoming emails to the Odoo mailgate script. It requires specifying the database name, user ID, and password.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/email_gateway.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n*: |/odoo-directory/addons/mail/static/scripts/odoo-mailgate.py -d <database-name> -u <userid> -p <password>\n```\n\n----------------------------------------\n\nTITLE: Mapping Multiple Payments Path (plaintext)\nDESCRIPTION: Maps the documentation path for handling multiple payments to the main payments documentation file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_31\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/payments/multiple.rst applications/finance/accounting/payments.rst                                                 # accounting/payments/multiple --> accounting/payments.rst\n```\n\n----------------------------------------\n\nTITLE: Configuring By-Products Setting in Odoo Manufacturing\nDESCRIPTION: This snippet shows the path to enable the By-Products setting in Odoo's Manufacturing app configuration. It's a crucial step for using by-products functionality.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/workflows/byproducts.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:menuselection:`Manufacturing app --> Configuration --> Settings`\n```\n\n----------------------------------------\n\nTITLE: Creating a New Purchase Template in Odoo RST\nDESCRIPTION: This RST snippet provides instructions for creating a new purchase template in Odoo, including navigation, vendor selection, and product addition.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/purchase_templates.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nNavigate :menuselection:`Purchase app --> Orders --> Purchase Agreements` and click :guilabel:`New`.\n\nSelect a :guilabel:`Vendor` from the drop-down list.\n\n.. tip::\n   To make this template available to use with multiple vendors, leave the :guilabel:`Vendor` field\n   blank.\n\nIn the :guilabel:`Agreement Type` field, select :guilabel:`Purchase Template` from the drop-down.\n\nConfirm the information in the remaining fields is correct, or update as needed.\n\nOn the :guilabel:`Products` tab, click :guilabel:`Add a line`, and select the desired product.\nUpdate the :guilabel:`Quantity`, and set the :guilabel:`Unit Price`.\n```\n\n----------------------------------------\n\nTITLE: Structuring Service Documentation with Sphinx toctree in reStructuredText\nDESCRIPTION: This code snippet demonstrates the use of the Sphinx :toctree: directive to create a navigable list of sub-documents related to services in Odoo documentation. No external dependencies are needed apart from an existing Sphinx environment; the snippet expects referenced files (like services/project, services/timesheets, etc.) to exist. The directive organizes the hierarchy and allows Sphinx to automatically generate a table of contents, making it easier to maintain modular documentation. Inputs include the relative paths to each section; outputs are the generated navigation in HTML or other Sphinx-supported output formats.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n\n    services/project\n    services/timesheets\n    services/planning\n    services/field_service\n    services/helpdesk\n```\n\n----------------------------------------\n\nTITLE: Mapping Initial Configuration Setup Path (plaintext)\nDESCRIPTION: Maps the old documentation path for the general initial configuration setup to the main 'get_started' documentation file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/getting_started/initial_configuration/setup.rst applications/finance/accounting/get_started.rst                    # getting_started/initial_configuration/setup -> get_started\n```\n\n----------------------------------------\n\nTITLE: RST Warning Block for Image Editing\nDESCRIPTION: ReStructuredText warning directive about image editing limitations and requirements.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/referrals.rst#2025-04-23_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. warning::\n   It is not advised to edit the images. An image file must have a transparent background in order\n   for it to render properly. Only users with knowledge about transparent images should attempt\n   adjusting any images in the *Referrals* application.\n\n   Once an image is changed and the level is saved, it is **not possible** to revert to the original\n   image. To revert to the original image, the *Referrals* application must be *uninstalled then\n   reinstalled.*\n```\n\n----------------------------------------\n\nTITLE: Adding Attribute Values in Odoo Product Variants\nDESCRIPTION: This snippet explains how to add values to attributes for product variants in Odoo. It covers accessing the Attribute Values tab, adding new values, and configuring options like custom values and color selection for color attributes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/products_prices/products/variants.rst#2025-04-23_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\nAttribute values should be added to the :guilabel:`Attribute Values` tab. Values can be added to an\nattribute at any time, if needed.\n\nTo add a value, click :guilabel:`Add a line` in the :guilabel:`Attribute Values` tab.\n\nThen, enter the name of the value in the :guilabel:`Value` column. Next, check the box in the\n:guilabel:`Is custom value` column, if the value is custom (i.e. the customer gets to provide unique\nspecifications that are specific to this particular value).\n\n.. note::\n   If the :guilabel:`Display Type` - :guilabel:`Color` option is selected, the option to add an HTML\n   color code will appear to the far-right of the value line, to make it easier for salespeople and\n   customers to know exactly what color option they're choosing.\n\n   .. image:: variants/attribute-value-add-a-line.png\n      :align: center\n      :alt: Attribute values tab when add a line is clicked, showing the custom columns.\n\n   To choose a color, click the blank circle in the :guilabel:`Color` column, which reveals an HTML\n   color selector pop-up window.\n\n   .. image:: variants/picking-a-color.png\n      :align: center\n      :alt: Selecting a color from the HTML color pop-up window that appears on attribute form.\n\n   In this pop-up window, select a specific color by dragging the color slider to a particular hue,\n   and clicking on the color portion directly on the color gradient window.\n\n   Or, choose a specific color by clicking the *dropper* icon, and selecting a desired color that's\n   currently clickable on the screen.\n```\n\n----------------------------------------\n\nTITLE: Declaring Shape Properties in Odoo Theme SCSS\nDESCRIPTION: SCSS snippet from `primary_variables.scss` defining the properties for the 'Zigs/06' shape. It specifies the shape's position, size, default color indices (4 and 5 from the palette), and enables horizontal repetition (`repeat-x`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/shapes.rst#2025-04-23_snippet_4\n\nLANGUAGE: sass\nCODE:\n```\n// /website_airproof/static/src/scss/primary_variables.scss\n\n'Zigs/06': ('position': bottom, 'size': 30px 100%, 'colors': (4, 5), 'repeat-x': true),\n```\n\n----------------------------------------\n\nTITLE: Setting SMTP Server Port via Odoo Command-line\nDESCRIPTION: Defines the port number to connect to on the specified SMTP server.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n--smtp-port <port>\n```\n\n----------------------------------------\n\nTITLE: Odoo Menu Navigation - Inventory Settings\nDESCRIPTION: Navigation path for configuring inventory settings related to dispatch management\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/dispatch.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nInventory app --> Configuration --> Settings\n```\n\n----------------------------------------\n\nTITLE: Declaring Autofocus Input in Owl XML Template - XML\nDESCRIPTION: This XML template snippet defines the UI part of the previous JavaScript Comp class, using Owl's t-ref directive. The input element with t-ref=\"autofocus\" is the target for the useAutofocus hook. When rendered, this input becomes focused automatically based on the JavaScript setup. The template is registered under the name \"Comp\" and can contain further UI context. The use of t-ref and static template naming is a common pattern in Owl for component referencing.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/hooks.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\"Comp\">\n  <input t-ref=\"autofocus\" type=\"text\"/>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Inserting Image in reStructuredText for Reporting\nDESCRIPTION: This snippet shows how to insert an image illustrating the reporting interface in attendance management using reStructuredText syntax.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/attendances.rst#2025-04-23_snippet_5\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. image:: attendances/reporting.png\n   :align: center\n   :alt: The default report view, with all the optional view buttons highlighted.\n```\n\n----------------------------------------\n\nTITLE: Creating a Tip Block using RST .. tip:: Directive\nDESCRIPTION: This snippet shows the reStructuredText syntax for creating a 'Tip' admonition block using the `.. tip::` directive. This block is intended to inform the reader about a useful trick or shortcut.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n.. code-block:: text\n\n   .. tip::\n      Use this alert block to inform the reader about a useful trick that requires an action.\n```\n\n----------------------------------------\n\nTITLE: Mapping Create Quotations Documentation (Sales)\nDESCRIPTION: Maps the old documentation path for creating quotations under 'send_quotations' (`applications/sales/sales/send_quotations/create_quotations.rst`) to the new path under 'sales_quotations' (`applications/sales/sales/sales_quotations/create_quotations.rst`) within the Odoo Sales application documentation. Comment confirms the pattern `send_quotations/* --> sales_quotations/*`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/18.0.txt#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/sales/sales/send_quotations/create_quotations.rst applications/sales/sales/sales_quotations/create_quotations.rst                   # sales/send_quotations/* --> sales/sales_quotations/*\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Directive - Delivery Carrier Setup\nDESCRIPTION: RST tip directive explaining carrier setup for Amazon integration\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/amazon_connector/manage.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. tip::\n   If the chosen carrier isn't supported by Odoo, a carrier with the same name can still be created\n   (e.g. create a carrier named `easyship`). The name used is **not** case sensitive, but be mindful\n   to avoid typos. If there are typos, Amazon will **not** recognize them. Next, create a delivery\n   carrier named `Self Delivery` to inform Amazon that the user will make the deliveries. Even with\n   this route, a tracking reference still **must** be entered. Remember, the customer is notified by\n   email about the delivery, and the carrier, along with the tracking reference, are displayed in\n   the email to the customer.\n```\n\n----------------------------------------\n\nTITLE: RST Tab Group for Usage Guidelines\nDESCRIPTION: RST markup describing the usage instructions for both QR menu and kiosk implementations of self-ordering.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/point_of_sale/self_order.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. tabs::\n\n   .. group-tab:: QR menu\n\n      On the POS user's end, access the self-ordering interface by\n\n      - Scanning a downloaded or printed QR code; or\n      - Clicking the :icon:`fa-ellipsis-v` (:guilabel:`vertical ellipsis`) icon on the POS card,\n        then :guilabel:`Mobile Menu`.\n```\n\n----------------------------------------\n\nTITLE: QWeb Template for Pet Toy Display\nDESCRIPTION: XML template using QWeb for rendering pet toy items with image and name display\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_43\n\nLANGUAGE: xml\nCODE:\n```\n<t t-name=\"PetToy\">\n    <div class=\"oe_petstore_pettoy\" t-att-data-id=\"item.id\">\n        <p><t t-esc=\"item.name\"/></p>\n        <p><img t-attf-src=\"data:image/jpg;base64,{{item.image}}\"/></p>\n    </div>\n</t>\n```\n\n----------------------------------------\n\nTITLE: Mapping Payables Check Payment Path (plaintext)\nDESCRIPTION: Maps the old documentation path for paying by check under payables to the new path specifically for paying checks under 'payments'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/payables/pay/check.rst applications/finance/accounting/payments/pay_checks.rst                                     # payables/pay/check -> payments/pay_checks\n```\n\n----------------------------------------\n\nTITLE: RST Tab Group for Additional Settings\nDESCRIPTION: RST markup defining the configuration options for home buttons, service locations, payment options, language settings, and splash screens.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/point_of_sale/self_order.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. tabs::\n\n   .. tab:: Home buttons\n\n      The :guilabel:`Home buttons` are displayed on the kiosk or mobile device interfaces when\n      customers are self-ordering.\n```\n\n----------------------------------------\n\nTITLE: Configuring Appraisal Plans in Odoo RST Documentation\nDESCRIPTION: This RST code snippet demonstrates how to configure appraisal plans in Odoo. It explains the default schedule and how to modify it, with an important note about the impact of changes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/appraisals.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nAppraisals plans\n****************\n\nBy default, appraisals are pre-configured to be automatically created six months after an employee\nis hired, with a second appraisal exactly six months after that.\n\nOnce those two initial appraisals have been completed in the employee's first year, following\nappraisals are only created once a year (every twelve months).\n\nTo modify this schedule, change the number of months in the blank fields under the\n:guilabel:`Appraisals Plans` section.\n\n.. important::\n   If the :guilabel:`Appraisals Plans` section is modified, **all** empty :guilabel:`Next Appraisal\n   Dates` are modified for **all** employees.\n```\n\n----------------------------------------\n\nTITLE: Mapping Customer Invoices Deferred Revenues Path (plaintext)\nDESCRIPTION: Maps the old documentation path for deferred revenues on customer invoices to the new path, keeping the structure under 'customer_invoices'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_35\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/receivables/customer_invoices/deferred_revenues.rst applications/finance/accounting/customer_invoices/deferred_revenues.rst       # receivables/customer_invoices/* -> customer_invoices/*\n```\n\n----------------------------------------\n\nTITLE: Mapping Multi-currency How It Works Path (plaintext)\nDESCRIPTION: Maps the old documentation path explaining how multi-currency works under 'others/multicurrencies' to the main multi-currency documentation file in 'get_started'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/others/multicurrencies/how_it_works.rst applications/finance/accounting/get_started/multi_currency.rst             # others/multicurrencies/* -> get_started/multi_currency\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Structure with reStructuredText Directives\nDESCRIPTION: This snippet configures the structure of the Odoo documentation using reStructuredText directives. It sets up a hidden table of contents with a maximum depth of 4 and includes a reference to the 'terms_of_sale_fr' file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/legal/terms/i18n/terms_of_sale_tex_fr.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n:orphan:\n\n.. toctree::\n   :maxdepth: 4\n   :hidden:\n\n   terms_of_sale_fr\n```\n\n----------------------------------------\n\nTITLE: Documenting Directory Structure for Media Files in RST - pseudo-filesystem\nDESCRIPTION: This snippet illustrates the recommended organization of media files alongside their respective RST source files. It shows a sample directory tree where each RST document has its own dedicated folder for images and other media, using consistent naming conventions. No third-party dependencies are required, but the project must follow these organizational standards to keep assets discoverable and manageable.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/content_guidelines.rst#2025-04-23_snippet_1\n\nLANGUAGE: pseudo-filesystem\nCODE:\n```\n  ├── section\n  │   └── doc_filename\n  │   │   └── screenshot-tips.gif\n  │   │   └── awesome-filename.png\n  │   └── doc_filename.rst\n```\n\n----------------------------------------\n\nTITLE: Implementing Line Breaks in Sphinx Documentation\nDESCRIPTION: Shows how to break lines within paragraphs without creating new paragraphs in reStructuredText, preserving the flow of content.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_33\n\nLANGUAGE: text\nCODE:\n```\n| A first long line that you break in two\n  -> here <- is rendered as a single line.\n| A second line that follows a line break.\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Signature Table Definition\nDESCRIPTION: Creates a signature table structure for HTML output with columns for ODOO and PARTNER signatures\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/legal/terms/partnership.rst#2025-04-23_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. only:: html\n\n    .. rubric:: Signatures\n\n    +---------------------------------------+------------------------------------------+\n    | For ODOO,                             | For PARTNER                              |\n    +---------------------------------------+------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL for Network Access in pg_hba.conf\nDESCRIPTION: PostgreSQL host-based authentication configuration allowing TCP connections from localhost and a specific network range (192.168.1.x) using MD5 password authentication.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/deploy.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# IPv4 local connections:\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             192.168.1.0/24          md5\n```\n\n----------------------------------------\n\nTITLE: Mapping Customer Invoices Cash Rounding Path (plaintext)\nDESCRIPTION: Maps the old documentation path for cash rounding on customer invoices to the new path, keeping the structure under 'customer_invoices'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_33\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/receivables/customer_invoices/cash_rounding.rst applications/finance/accounting/customer_invoices/cash_rounding.rst               # receivables/customer_invoices/* -> customer_invoices/*\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Directive - Note About Order Cancellation\nDESCRIPTION: RST note directive explaining the automatic cancellation behavior between Amazon and Odoo orders\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/amazon_connector/manage.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n   When an order is cancelled in Amazon, and was already synchronized in Odoo, the corresponding\n   sales order is automatically cancelled in Odoo.\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Change Management Documentation\nDESCRIPTION: This snippet defines a table of contents using reStructuredText syntax. It includes links to three main sections of the change management documentation: engineering change orders, ECO types, and version control.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/plm/manage_changes.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   manage_changes/engineering_change_orders\n   manage_changes/eco_type\n   manage_changes/version_control\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Path Redirects in Plain Text\nDESCRIPTION: This configuration block lists pairs of file paths used to set up redirects for Odoo documentation. Each line specifies an old path followed by the corresponding new path, separated by whitespace. Comments starting with '#' provide explanations for the redirects, often indicating structural changes or consolidation of documentation sections like Barcode, Maintenance, Quality Control, and Product Management within the Inventory and MRP applications.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/16.0.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# applications/inventory_and_mrp\n\napplications/inventory_and_mrp/manufacturing/management/quality_control.rst applications/inventory_and_mrp/manufacturing/quality_control/quality_control_points.rst              # redirect to new doc\napplications/inventory_and_mrp/manufacturing/management/alternative_wc.rst applications/inventory_and_mrp/manufacturing/management/using_work_centers.rst\napplications/inventory_and_mrp/inventory/barcode.rst applications/inventory_and_mrp/barcode.rst                                                                                                   # /inventory_and_mrp/inventory/barcode/* -> /inventory_and_mrp/barcode/*\napplications/inventory_and_mrp/inventory/barcode/operations.rst applications/inventory_and_mrp/barcode/operations.rst                                                                             # /inventory_and_mrp/inventory/barcode/* -> /inventory_and_mrp/barcode/*\napplications/inventory_and_mrp/inventory/barcode/operations/adjustments.rst applications/inventory_and_mrp/barcode/operations/adjustments.rst                                                     # /inventory_and_mrp/inventory/barcode/* -> /inventory_and_mrp/barcode/*\napplications/inventory_and_mrp/inventory/barcode/operations/barcode_nomenclature.rst applications/inventory_and_mrp/barcode/operations/barcode_nomenclature.rst                                   # /inventory_and_mrp/inventory/barcode/* -> /inventory_and_mrp/barcode/*\napplications/inventory_and_mrp/inventory/barcode/operations/gs1_nomenclature.rst applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst                                           # /inventory_and_mrp/inventory/barcode/* -> /inventory_and_mrp/barcode/*\napplications/inventory_and_mrp/inventory/barcode/operations/internal.rst applications/inventory_and_mrp/barcode/operations/receipts_deliveries.rst                                                # /inventory_and_mrp/inventory/barcode/operations/internal -> /inventory_and_mrp/barcode/operations/receipts_deliveries\napplications/inventory_and_mrp/barcode/operations/internal.rst applications/inventory_and_mrp/barcode/operations/receipts_deliveries.rst                                                          # /inventory_and_mrp/barcode/operations/internal -> /inventory_and_mrp/barcode/operations/receipts_deliveries\napplications/inventory_and_mrp/inventory/barcode/operations/transfers_scratch.rst applications/inventory_and_mrp/barcode/operations/transfers_scratch.rst                                         # /inventory_and_mrp/inventory/barcode/* -> /inventory_and_mrp/barcode/*\napplications/inventory_and_mrp/inventory/barcode/setup.rst applications/inventory_and_mrp/barcode/setup.rst                                                                                       # /inventory_and_mrp/inventory/barcode/* -> /inventory_and_mrp/barcode/*\napplications/inventory_and_mrp/inventory/barcode/setup/hardware.rst applications/inventory_and_mrp/barcode/setup/hardware.rst                                                                     # /inventory_and_mrp/inventory/barcode/* -> /inventory_and_mrp/barcode/*\napplications/inventory_and_mrp/inventory/barcode/setup/software.rst applications/inventory_and_mrp/barcode/setup/software.rst                                                                     # /inventory_and_mrp/inventory/barcode/* -> /inventory_and_mrp/barcode/*\napplications/inventory_and_mrp/manufacturing/maintenance.rst applications/inventory_and_mrp/maintenance.rst                                                                                       # /inventory_and_mrp/manufacturing/maintenance/* -> /inventory_and_mrp/maintenance/*\napplications/inventory_and_mrp/manufacturing/maintenance/add_new_equipment.rst applications/inventory_and_mrp/maintenance/equipment_management/add_new_equipment.rst                              # /inventory_and_mrp/manufacturing/maintenance/* -> /inventory_and_mrp/maintenance/*\napplications/inventory_and_mrp/manufacturing/quality_control.rst applications/inventory_and_mrp/quality.rst                                                                                       # /inventory_and_mrp/manufacturing/quality_control/* -> /inventory_and_mrp/quality/*\napplications/inventory_and_mrp/manufacturing/quality_control/quality_alerts.rst applications/inventory_and_mrp/quality/quality_management/quality_alerts.rst                                      # /inventory_and_mrp/manufacturing/quality_control/* -> /inventory_and_mrp/quality/*\napplications/inventory_and_mrp/manufacturing/quality_control/quality_control_points.rst applications/inventory_and_mrp/quality/quality_management/quality_control_points.rst                      # /inventory_and_mrp/manufacturing/quality_control/* -> /inventory_and_mrp/quality/*\napplications/inventory_and_mrp/inventory/management.rst applications/inventory_and_mrp/inventory/product_management.rst                                                                                                       # /inventory_and_mrp/inventory/management -> /inventory_and_mrp/inventory/product_management\napplications/inventory_and_mrp/inventory/management/products.rst applications/inventory_and_mrp/inventory/product_management/product_replenishment.rst                                                                        # /inventory_and_mrp/inventory/management/products -> /inventory_and_mrp/inventory/product_management/product_replenishment\napplications/inventory_and_mrp/inventory/management/products/strategies.rst applications/inventory_and_mrp/inventory/product_management/product_replenishment/strategies.rst                                                  # /inventory_and_mrp/inventory/management/products/* -> /inventory_and_mrp/inventory/product_management/product_replenishment/*\napplications/inventory_and_mrp/inventory/product_management/product_replenishment/strategies.rst applications/inventory_and_mrp/inventory/warehouses_storage/replenishment.rst                                                # /inventory_and_mrp/inventory/product_management/product_replenishment/strategies -> /inventory_and_mrp/inventory/warehouses_storage/replenishment\napplications/inventory_and_mrp/inventory/management/products/mto.rst applications/inventory_and_mrp/inventory/product_management/product_replenishment/mto.rst                                                                # /inventory_and_mrp/inventory/management/products/* -> /inventory_and_mrp/inventory/product_management/product_replenishment/*\napplications/inventory_and_mrp/inventory/product_management/product_replenishment/mto.rst applications/inventory_and_mrp/inventory/warehouses_storage/replenishment/mto.rst                                                   # /inventory_and_mrp/inventory/product_management/product_replenishment/mto -> /inventory_and_mrp/inventory/warehouses_storage/replenishment/mto\napplications/inventory_and_mrp/inventory/management/products/reordering_rules.rst applications/inventory_and_mrp/inventory/product_management/product_replenishment/reordering_rules.rst                                      # /inventory_and_mrp/inventory/management/products/* -> /inventory_and_mrp/inventory/product_management/product_replenishment/*\napplications/inventory_and_mrp/inventory/product_management/product_replenishment/reordering_rules.rst applications/inventory_and_mrp/inventory/warehouses_storage/replenishment/reordering_rules.rst                         # /inventory_and_mrp/inventory/product_management/product_replenishment/reordering_rules -> /inventory_and_mrp/inventory/warehouses_storage/replenishment/reordering_rules\napplications/inventory_and_mrp/inventory/management/products/uom.rst applications/inventory_and_mrp/inventory/product_management/product_replenishment/uom.rst                                                                # /inventory_and_mrp/inventory/management/products/* -> /inventory_and_mrp/inventory/product_management/product_replenishment/*\napplications/inventory_and_mrp/inventory/product_management/product_replenishment/uom.rst applications/inventory_and_mrp/inventory/product_management/configure/uom.rst                                                       # /inventory_and_mrp/inventory/product_management/product_replenishment/uom -> /inventory_and_mrp/inventory/product_management/configure/uom\napplications/inventory_and_mrp/inventory/product_management/product_tracking/package.rst applications/inventory_and_mrp/inventory/product_management/configure/package.rst                                                    # /inventory_and_mrp/inventory/product_management/product_tracking/package -> /inventory_and_mrp/inventory/product_management/configure/package\napplications/inventory_and_mrp/inventory/product_management/product_tracking/packaging.rst applications/inventory_and_mrp/inventory/product_management/configure/packaging.rst                                                # /inventory_and_mrp/inventory/product_management/product_tracking/packaging -> /inventory_and_mrp/inventory/product_management/configure/packaging\napplications/inventory_and_mrp/inventory/management/products/scrap_inventory.rst applications/inventory_and_mrp/inventory/product_management/product_replenishment/scrap_inventory.rst                                        # /inventory_and_mrp/inventory/management/products/* -> /inventory_and_mrp/inventory/product_management/product_replenishment/*\napplications/inventory_and_mrp/inventory/product_management/product_replenishment/scrap_inventory.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/scrap_inventory.rst                    # /inventory_and_mrp/inventory/product_management/product_replenishment/scrap_inventory -> /inventory_and_mrp/inventory/warehouses_storage/inventory_management/scrap_inventory\n```\n\n----------------------------------------\n\nTITLE: Mapping Reporting Declarations Tax Returns Path (plaintext)\nDESCRIPTION: Maps the old documentation path for tax return declarations under reporting to a new path, keeping the filename but moving it up one directory level.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_48\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/reporting/declarations/tax_returns.rst applications/finance/accounting/reporting/tax_returns.rst                   # reporting/declarations/* -> reporting/*\n```\n\n----------------------------------------\n\nTITLE: Configuring Odoo via INI File\nDESCRIPTION: Example of an Odoo configuration file (typically `.odoorc` or specified via `--config`) using INI format. This snippet shows how to set the database user (`db_user`) and database filter (`dbfilter`) options within the `[options]` section. These settings correspond to command-line options like `--db-user` and `--db-filter`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_40\n\nLANGUAGE: ini\nCODE:\n```\n[options]\ndb_user=odoo\ndbfilter=odoo\n```\n\n----------------------------------------\n\nTITLE: Setting Overall Log Verbosity Level via Odoo Command-line\nDESCRIPTION: Sets predefined logging levels for key loggers. Standard levels ('critical', 'error', 'warn', 'debug') affect 'odoo' and 'werkzeug' loggers ('debug' only affects 'odoo'). Special pseudo-levels exist: 'debug_sql' (like --log-sql), 'debug_rpc' (debug level for 'odoo' and HTTP requests), 'debug_rpc_answer' (like debug_rpc plus HTTP responses). If conflicting with '--log-handler', the latter takes precedence.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_34\n\nLANGUAGE: console\nCODE:\n```\n--log-level <level>\n```\n\n----------------------------------------\n\nTITLE: Numbered List Examples\nDESCRIPTION: Demonstrates automatic and custom-start numbered lists.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n#. This is a numbered list.\n#. Numbering is automatic.\n```\n\nLANGUAGE: text\nCODE:\n```\n6. Use this format to start the numbering\n   with a number other than one.\n#. The numbering is automatic from there.\n```\n\n----------------------------------------\n\nTITLE: Mapping Customer Invoices Snailmail Path (plaintext)\nDESCRIPTION: Maps the old documentation path for snailmail related to customer invoices to the new path, keeping the structure under 'customer_invoices'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_40\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/receivables/customer_invoices/snailmail.rst applications/finance/accounting/customer_invoices/snailmail.rst                       # receivables/customer_invoices/* -> customer_invoices/*\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Admonition Block using RST .. admonition:: Directive\nDESCRIPTION: This snippet illustrates how to create a custom admonition block in reStructuredText using the `.. admonition::` directive followed by a custom title. This allows for creating titled alert blocks beyond the standard types.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n.. code-block:: text\n\n   .. admonition:: Title\n\n      Customize this alert block with a **Title** of your choice.\n```\n\n----------------------------------------\n\nTITLE: Creating Extendable Logic with Domain Construction Methods in Python\nDESCRIPTION: This code demonstrates how to structure methods for better extensibility in Odoo. It shows a progression from hardcoded logic to more extendable patterns that allow modules to override specific parts of business logic without duplicating code.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# do not do this\n# modifying the domain or criteria implies overriding whole method\ndef action(self):\n    ...  # long method\n    partners = self.env['res.partner'].search(complex_domain)\n    emails = partners.filtered(lambda r: arbitrary_criteria).mapped('email')\n\n# better but do not do this either\n# modifying the logic forces to duplicate some parts of the code\ndef action(self):\n    ...\n    partners = self._get_partners()\n    emails = partners._get_emails()\n\n# better\n# minimum override\ndef action(self):\n    ...\n    partners = self.env['res.partner'].search(self._get_partner_domain())\n    emails = partners.filtered(lambda r: r._filter_partners()).mapped('email')\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Example with Tip\nDESCRIPTION: RST markup showing a tip directive about units of measure configuration\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/expenses.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. tip::\n   The *Sales* app is where specification on the units of measure are created and edited (e.g.\n   units, miles, nights, etc.). Go to :menuselection:`Sales app --> Configuration --> Settings` and\n   ensure `Units of Measure` is enabled in the `Product Catalog` section. Click on the\n   :guilabel:`Units of Measure` internal link to :doc:`view, create, and edit the units of measure\n   <../inventory_and_mrp/inventory/product_management/configure/uom>`.\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes from Local Repository\nDESCRIPTION: Command to push commits from a local repository to the remote repository, setting up tracking.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/first_module.rst#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ git push -u origin feature-1\n```\n\n----------------------------------------\n\nTITLE: Setting SMTP SSL Private Key File via Odoo Command-line\nDESCRIPTION: Specifies the path to an SSL private key file (.pem) used for SMTP authentication. Requires '--smtp-ssl-certificate-filename' to also be set.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n--smtp-ssl-private-key-filename <path/to/key.pem>\n```\n\n----------------------------------------\n\nTITLE: Including External License File Content in RST\nDESCRIPTION: This reStructuredText directive, `.. literalinclude:: ../licenses/enterprise_license.txt`, instructs the documentation generator to fetch the content of the specified file (`enterprise_license.txt` located in the parent directory's `licenses` subfolder) and include it verbatim in the output. This is used within a LaTeX-only block (`.. only:: latex`) to embed the full Odoo Enterprise Edition License text directly into the generated LaTeX document.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/legal/terms/enterprise.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. literalinclude:: ../licenses/enterprise_license.txt\n```\n\n----------------------------------------\n\nTITLE: Mapping Bank Reconciliation Cash Transactions Path (plaintext)\nDESCRIPTION: Maps the old documentation path for cash transactions in bank reconciliation to the new path under bank/reconciliation_cash.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/bank/reconciliation/cash_transactions.rst applications/finance/accounting/bank/reconciliation_cash.rst             # bank/reconciliation/cash_transactions -> bank/reconciliation_cash\n```\n\n----------------------------------------\n\nTITLE: Translation Usage Examples\nDESCRIPTION: Demonstrates using the _t function for static and dynamic string translations with placeholders.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { _t } from \"@web/core/l10n/translation\";\n\nclass SomeComponent extends Component {\n    static exampleString = _t(\"this should be translated\");\n    ...\n    someMethod() {\n        const str = _t(\"some text\");\n    }\n}\n\nconst str = _t(\"Hello %s, you have %s unread messages.\", user.name, unreadCount);\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in RST for Powerbox Commands\nDESCRIPTION: This RST code creates a table listing various powerbox commands and their uses in the Odoo rich-text editor.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials/html_editor.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n   :widths: 20 80\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Command\n     - Use\n   * - :guilabel:`2 columns`\n     - Convert into 2 columns.\n   * - :guilabel:`3 columns`\n     - Convert into 3 columns.\n   * - :guilabel:`4 columns`\n     - Convert into 4 columns.\n   * - :guilabel:`Table`\n     - Insert a table.\n   * - :guilabel:`Bulleted list`\n     - Create a bulleted list.\n   * - :guilabel:`Numbered list`\n     - Create a numbered list.\n   * - :guilabel:`Checklist`\n     - Create a checklist.\n   * - :guilabel:`Quote`\n     - Add a blockquote section.\n   * - :guilabel:`Code`\n     - Add a code section.\n```\n\n----------------------------------------\n\nTITLE: Mapping Bank Reconciliation Use Cases Path (plaintext)\nDESCRIPTION: Maps the old documentation path for bank reconciliation use cases to the main reconciliation documentation file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/bank/reconciliation/use_cases.rst applications/finance/accounting/bank/reconciliation.rst                          # reconciliation/use_cases -> reconciliation\n```\n\n----------------------------------------\n\nTITLE: Mapping Customer Payments Batch SDD Path (plaintext)\nDESCRIPTION: Maps the old documentation path for batch SDD customer payments under receivables to the new path under 'payments/batch_sdd'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_42\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/receivables/customer_payments/batch_sdd.rst applications/finance/accounting/payments/batch_sdd.rst                 # receivables/customer_payments/* -> payments/*\n```\n\n----------------------------------------\n\nTITLE: Mapping Cash Register Setup Path (plaintext)\nDESCRIPTION: Maps the old documentation path for managing cash registers to a new path under the bank directory.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/bank/setup/manage_cash_register.rst applications/finance/accounting/bank/cash_register.rst                         # bank/setup/manage_cash_register -> bank/cash_register\n```\n\n----------------------------------------\n\nTITLE: Mapping Supplier Bills Deferred Expenses Path (plaintext)\nDESCRIPTION: Maps the old documentation path for deferred expenses related to supplier bills to the new path under 'vendor_bills/deferred_expenses'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/payables/supplier_bills/deferred_expenses.rst applications/finance/accounting/vendor_bills/deferred_expenses.rst       # payables/supplier_bills/* -> vendor_bills/*\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies on Windows\nDESCRIPTION: Commands to install Python dependencies including setuptools, wheel and requirements.txt packages on Windows\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/source.rst#2025-04-23_snippet_7\n\nLANGUAGE: doscon\nCODE:\n```\nC:\\> cd \\CommunityPath\nC:\\> pip install setuptools wheel\nC:\\> pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Mapping Customer Payments Check Path (plaintext)\nDESCRIPTION: Maps the old documentation path for check payments from customers under receivables to the new path under 'payments/checks'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_43\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/receivables/customer_payments/check.rst applications/finance/accounting/payments/checks.rst                        # receivables/customer_payments/check -> payments/checks\n```\n\n----------------------------------------\n\nTITLE: Navigating to Work Center Configuration in Odoo Manufacturing\nDESCRIPTION: Provides the menu path to access the list and configuration settings for work centers within the Odoo Manufacturing application.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/basic_setup/mo_costs.rst#2025-04-23_snippet_3\n\nLANGUAGE: Odoo Configuration\nCODE:\n```\n:menuselection:`Manufacturing app\n--> Configuration --> Work Centers`\n```\n\n----------------------------------------\n\nTITLE: Mapping Optional Products in Quotations Documentation (Sales)\nDESCRIPTION: Maps the old documentation path for optional products in quotations under 'send_quotations' (`applications/sales/sales/send_quotations/optional_products.rst`) to the new path under 'sales_quotations' (`applications/sales/sales/sales_quotations/optional_products.rst`) within the Odoo Sales application documentation. Comment confirms the pattern `send_quotations/* --> sales_quotations/*`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/18.0.txt#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/sales/sales/send_quotations/optional_products.rst applications/sales/sales/sales_quotations/optional_products.rst                   # sales/send_quotations/* --> sales/sales_quotations/*\n```\n\n----------------------------------------\n\nTITLE: Mapping Customer Invoices Credit Notes Path (plaintext)\nDESCRIPTION: Maps the old documentation path for credit notes on customer invoices to the new path, keeping the structure under 'customer_invoices'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_34\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/receivables/customer_invoices/credit_notes.rst applications/finance/accounting/customer_invoices/credit_notes.rst                 # receivables/customer_invoices/* -> customer_invoices/*\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Server Listening Port via Odoo Command-line\nDESCRIPTION: Defines the TCP port number on which the Odoo HTTP server should listen for incoming connections. Defaults to port 8069.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_24\n\nLANGUAGE: console\nCODE:\n```\n-p <port>\n```\n\nLANGUAGE: console\nCODE:\n```\n--http-port <port>\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive for Level Up Display\nDESCRIPTION: ReStructuredText directive for showing the level up interface with center alignment and detailed alt text.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/referrals.rst#2025-04-23_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: referrals/level-up.png\n   :align: center\n   :alt: A 'Click to level up!' appears beneath the user's image, and a large 'Level up!' appears\n         above their image.\n```\n\n----------------------------------------\n\nTITLE: Using Prefix of Account Codes Engine with Basic Syntax\nDESCRIPTION: This snippet shows the basic syntax for the Prefix of Account Codes engine, which matches accounts by their code prefixes and performs arithmetic on their balances.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/reporting/customize.rst#2025-04-23_snippet_3\n\nLANGUAGE: odoo\nCODE:\n```\n21\n```\n\n----------------------------------------\n\nTITLE: Creating a Tip Block in RST\nDESCRIPTION: Demonstrates how to create a tip block in reStructuredText, providing information on viewing all favorited searches in Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials/search.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. tip::\n   To view *all* favorited searches, first activate :ref:`developer-mode`, and navigate to\n   :menuselection:`Settings app --> Technical --> User Interface: User-defined Filters`. From here,\n   all favorited searches can be viewed, edited, archived, or deleted.\n```\n\n----------------------------------------\n\nTITLE: Mapping Bank Reconciliation Models Path (plaintext)\nDESCRIPTION: Maps the old documentation path for bank reconciliation models to a potentially simplified path, keeping the filename the same but moving it up one directory level.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/bank/reconciliation/reconciliation_models.rst applications/finance/accounting/bank/reconciliation_models.rst       # bank/reconciliation/* -> bank/*\n```\n\n----------------------------------------\n\nTITLE: Mapping Ogone Payment Provider Documentation to Worldline (Finance)\nDESCRIPTION: Maps the old documentation path for the Ogone payment provider (`applications/finance/payment_providers/ogone.rst`) to the new path under Worldline (`applications/finance/payment_providers/worldline.rst`) within the Odoo Finance application documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/18.0.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/payment_providers/ogone.rst applications/finance/payment_providers/worldline.rst\n```\n\n----------------------------------------\n\nTITLE: Displaying Odoo Icon Class: oi-arrow-left\nDESCRIPTION: This snippet shows the CSS class name 'oi-arrow-left' used to render the corresponding left arrow icon within the Odoo framework. The surrounding HTML structure typically includes an `<i>` tag with this class applied.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/icons.rst#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\noi-arrow-left\n```\n\n----------------------------------------\n\nTITLE: Mapping Getting Started Cheat Sheet Path (plaintext)\nDESCRIPTION: Maps the old documentation path for the accounting cheat sheet to a new path under the 'get_started' directory.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/getting_started/cheat_sheet.rst applications/finance/accounting/get_started/cheat_sheet.rst                        # getting_started/* -> get_started/*\n```\n\n----------------------------------------\n\nTITLE: Creating an Important Block using RST .. important:: Directive\nDESCRIPTION: This snippet shows the reStructuredText syntax for creating an 'Important' admonition block using the `.. important::` directive. This block is used to notify the reader about crucial information they should not miss.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n.. code-block:: text\n\n   .. important::\n      Use this alert block to notify the reader about important information.\n```\n\n----------------------------------------\n\nTITLE: Mapping Customer Payments Batch Path (plaintext)\nDESCRIPTION: Maps the old documentation path for batch customer payments under receivables to the new path under 'payments/batch'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_41\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/receivables/customer_payments/batch.rst applications/finance/accounting/payments/batch.rst                         # receivables/customer_payments/* -> payments/*\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure\nDESCRIPTION: ReStructuredText markup defining the document structure for Odoo Snailmail documentation, including sections for configuration, sending invoices, and pricing information.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/customer_invoices/snailmail.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _customer_invoices/snailmail:\n\n=========\nSnailmail\n=========\n\nConfiguration\n=============\n\nSend invoices by post\n=====================\n\nPricing\n=======\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents Structure for Odoo.sh Documentation in RST\nDESCRIPTION: This RST (reStructuredText) snippet defines the table of contents structure for the Odoo.sh documentation. It includes a directive to hide the page from search results and organizes content into three main sections: overview, getting started, and advanced.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:nosearch:\n\n=======\nOdoo.sh\n=======\n\n\n.. toctree::\n\n    odoo_sh/overview\n    odoo_sh/getting_started\n    odoo_sh/advanced\n```\n\n----------------------------------------\n\nTITLE: State Selection Field Usage in Odoo XML Kanban View - XML\nDESCRIPTION: This field defines a 'kanban_state' selection rendered with the 'state_selection' widget to handle state transitions in Kanban views, displaying task or record state with legends and icons. It requires hardcoded fields and is useful for workflow visualization in project management modules. Supports additional legend fields for display in the dropdown.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\\\"kanban_state\\\" widget=\\\"state_selection\\\" />\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Restaurant Documentation\nDESCRIPTION: RST markup for documenting restaurant features in Odoo POS, including configuration steps and table management functionality\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/point_of_sale/restaurant.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:show-content:\\n\\n===================\\nRestaurant features\\n===================\\n\\nManaging a restaurant or a bar comes with specific needs. The Point of Sale application provides\\nvarious features that allow performing all the required tasks in such businesses.\\n\\nOnce the POS is set to be used in a restaurant or a bar, you can:\\n\\n- :doc:`organize your floors and tables to reflect your interior <restaurant/floors_tables>`;\\n- :ref:`take orders <restaurant/orders>`;\\n- :doc:`communicate with the kitchen or the bar through the POS <restaurant/kitchen_printing>`;\\n- :doc:`print bills in advance and split them <restaurant/bill_printing>`;\\n- :doc:`collect tips <restaurant/tips>`; and\\n- :doc:`set different taxes for takeaway food <pricing/fiscal_position>`.\n```\n\n----------------------------------------\n\nTITLE: Reorganizing Odoo Documentation File Structure\nDESCRIPTION: This snippet contains instructions for moving and reorganizing various documentation files within the Odoo project. It includes changes to the sales, accounting, and developer reference sections.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/saas-15.2.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# applications/sales\n\napplications/sales/sales/send_quotations/different_addresses.rst applications/finance/accounting/customer_invoices/customer_addresses.rst                  # move from sales to accounting\n\n# developer/reference\n\ndeveloper/reference/backend/standard_modules.rst developer/reference/standard_modules.rst                                                                  # move standard_modules/ one level up (#2456)\ndeveloper/reference/backend/standard_modules/account.rst developer/reference/standard_modules/account.rst                                                  # move standard_modules/ one level up (#2456)\ndeveloper/reference/backend/standard_modules/account/account_account.rst developer/reference/standard_modules/account/account_account.rst                  # move standard_modules/ one level up (#2456)\ndeveloper/reference/backend/standard_modules/account/account_account_tag.rst developer/reference/standard_modules/account/account_account_tag.rst          # move standard_modules/ one level up (#2456)\ndeveloper/reference/backend/standard_modules/account/account_chart_template.rst developer/reference/standard_modules/account/account_chart_template.rst    # move standard_modules/ one level up (#2456)\ndeveloper/reference/backend/standard_modules/account/account_fiscal_position.rst developer/reference/standard_modules/account/account_fiscal_position.rst  # move standard_modules/ one level up (#2456)\ndeveloper/reference/backend/standard_modules/account/account_group.rst developer/reference/standard_modules/account/account_group.rst                      # move standard_modules/ one level up (#2456)\ndeveloper/reference/backend/standard_modules/account/account_tax.rst developer/reference/standard_modules/account/account_tax.rst                          # move standard_modules/ one level up (#2456)\ndeveloper/reference/backend/standard_modules/account/account_tax_repartition.rst developer/reference/standard_modules/account/account_tax_repartition.rst  # move standard_modules/ one level up (#2456)\ndeveloper/reference/backend/standard_modules/account/account_tax_report_line.rst developer/reference/standard_modules/account/account_tax_report_line.rst  # move standard_modules/ one level up (#2456)\n```\n\n----------------------------------------\n\nTITLE: Mapping Adviser Budget Path (plaintext)\nDESCRIPTION: Maps the old documentation path for budgets under 'others/adviser' to the new path under 'reporting/budget'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/others/adviser/budget.rst applications/finance/accounting/reporting/budget.rst                                     # others/adviser/* -> reporting/*\n```\n\n----------------------------------------\n\nTITLE: Accessing the Memberships Analysis Report in Odoo\nDESCRIPTION: This reStructuredText snippet indicates the menu path required to access the Memberships Analysis report within the Odoo interface. Users should navigate through the Members application to find the Reporting section.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/members/members_analysis.rst#2025-04-23_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:menuselection:`Members app --> Reporting`\n```\n\n----------------------------------------\n\nTITLE: Specifying Modules for I18n Export via Odoo Command-line\nDESCRIPTION: Used in conjunction with '--i18n-export' to specify which modules' translatable terms should be exported. Provide a comma-separated list of module names.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n--modules\n```\n\n----------------------------------------\n\nTITLE: Mapping Multi-Currency Path (plaintext)\nDESCRIPTION: Maps the old documentation path for multi-currency under 'others' to a new path under 'get_started'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/others/multi_currency.rst applications/finance/accounting/get_started/multi_currency.rst                           # others/* -> get_started/*\n```\n\n----------------------------------------\n\nTITLE: Mapping Get Paid to Validate Quotation Documentation (Sales)\nDESCRIPTION: Maps the old documentation path for getting paid to validate quotations under 'send_quotations' (`applications/sales/sales/send_quotations/get_paid_to_validate.rst`) to the new path under 'sales_quotations' (`applications/sales/sales/sales_quotations/get_paid_to_validate.rst`) within the Odoo Sales application documentation. Comment confirms the pattern `send_quotations/* --> sales_quotations/*`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/18.0.txt#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/sales/sales/send_quotations/get_paid_to_validate.rst applications/sales/sales/sales_quotations/get_paid_to_validate.rst             # sales/send_quotations/* --> sales/sales_quotations/*\n```\n\n----------------------------------------\n\nTITLE: Mapping Supplier Bills OCR Path (plaintext)\nDESCRIPTION: Maps the old documentation path for OCR related to supplier bills to the invoice digitization documentation under 'vendor_bills'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_30\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/payables/supplier_bills/ocr.rst applications/finance/accounting/vendor_bills/invoice_digitization.rst                  # payables/supplier_bills/ocr --> vendor_bills/invoice_digitization\n```\n\n----------------------------------------\n\nTITLE: Specifying Documentation Build Dependencies with Requirements File - Plaintext\nDESCRIPTION: This snippet showcases a requirements.txt file listing three key Python dependencies: Pillow for image processing, mock for test mocking, and sphinx-lint for linting Sphinx documentation. It ensures that an environment set up with these specified versions will support building, linting, and testing documentation for the Odoo project. Users should install these using pip, and the file is intended for use with Python virtual environments to maintain dependency control.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/tests/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPillow==9.0.1\\nmock==5.0.1\\nsphinx-lint==0.6.7\n```\n\n----------------------------------------\n\nTITLE: Defining Odoo Record Rule Domain for MRP Subcontractor Warnings\nDESCRIPTION: This Odoo domain expression serves as an example within the Record Rules configuration for groups. It filters records to enable Manufacturing Resource Planning (MRP) consumption warnings specifically for subcontractors. The domain checks if any `mrp_production_ids` associated with a record are included in the list of production IDs linked to the current user's commercial partner. This mechanism refines access rights based on specific data conditions and requires knowledge of Odoo's domain syntax and data models.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/users/access_rights.rst#2025-04-23_snippet_0\n\nLANGUAGE: Odoo Domain\nCODE:\n```\n[('mrp_production_ids', 'in', user.partner_id.commercial_partner_id.production_ids.ids)]\n```\n\n----------------------------------------\n\nTITLE: Documenting Array Functions for Spreadsheets - reStructuredText\nDESCRIPTION: This snippet uses reStructuredText's list-table format to catalog spreadsheet array functions with their argument signatures and a description or documentation link for each. It requires no special dependencies, only basic reStructuredText support, and is targeted at documentation compilers like Sphinx. It details names, arguments, and Excel compatibility links, making it useful for reference and ensuring users know which functions have equivalent Excel support or Odoo-specific limitations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/productivity/spreadsheet/functions.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Name and arguments\n     - Description or link\n   * - ARRAY.CONSTRAIN(input_range, rows, columns)\n     - Returns a result array constrained to a specific width and height (not compatible with Excel)\n   * - CHOOSECOLS(array, col_num, [col_num2, ...])\n     - `Excel CHOOSECOLS article <https://support.microsoft.com/office/choosecols-function-bf117976-2722-4466-9b9a-1c01ed9aebff>`_\n   * - CHOOSEROWS(array, row_num, [row_num2, ...])\n     - `Excel CHOOSEROWS article <https://support.microsoft.com/office/chooserows-function-51ace882-9bab-4a44-9625-7274ef7507a3>`_\n   * - EXPAND(array, rows, [columns], [pad_with])\n     - `Excel EXPAND article <https://support.microsoft.com/office/expand-function-7433fba5-4ad1-41da-a904-d5d95808bc38>`_\n   * - FLATTEN(range, [range2, ...])\n     - Flattens all the values from one or more ranges into a single column (not compatible with Excel)\n   * - FREQUENCY(data, classes)\n     - `Excel FREQUENCY article <https://support.microsoft.com/office/frequency-function-44e3be2b-eca0-42cd-a3f7-fd9ea898fdb9>`_\n   * - HSTACK(range1, [range2, ...])\n     - `Excel HSTACK article <https://support.microsoft.com/office/hstack-function-98c4ab76-10fe-4b4f-8d5f-af1c125fe8c2>`_\n   * - MDETERM(square_matrix)\n     - `Excel MDETERM article <https://support.microsoft.com/office/mdeterm-function-e7bfa857-3834-422b-b871-0ffd03717020>`_\n   * - MINVERSE(square_matrix)\n     - `Excel MINVERSE article <https://support.microsoft.com/office/minverse-function-11f55086-adde-4c9f-8eb9-59da2d72efc6>`_\n   * - MMULT(matrix1, matrix2)\n     - `Excel MMULT article <https://support.microsoft.com/office/mmult-function-40593ed7-a3cd-4b6b-b9a3-e4ad3c7245eb>`_\n   * - SUMPRODUCT(range1, [range2, ...])\n     - `Excel SUMPRODUCT article <https://support.microsoft.com/office/sumproduct-function-16753e75-9f68-4874-94ac-4d2145a2fd2e>`_\n   * - SUMX2MY2(array_x, array_y)\n     - `Excel SUMX2MY2 article <https://support.microsoft.com/office/sumx2my2-function-9e599cc5-5399-48e9-a5e0-e37812dfa3e9>`_\n   * - SUMX2PY2(array_x, array_y)\n     - `Excel SUMX2PY2 article <https://support.microsoft.com/office/sumx2py2-function-826b60b4-0aa2-4e5e-81d2-be704d3d786f>`_\n   * - SUMXMY2(array_x, array_y)\n     - `Excel SUMXMY2 article <https://support.microsoft.com/office/sumxmy2-function-9d144ac1-4d79-43de-b524-e2ecee23b299>`_\n   * - TOCOL(array, [ignore], [scan_by_column])\n     - `Excel TOCOL article <https://support.microsoft.com/office/tocol-function-22839d9b-0b55-4fc1-b4e6-2761f8f122ed>`_\n   * - TOROW(array, [ignore], [scan_by_column])\n     - `Excel TOROW article <https://support.microsoft.com/office/torow-function-b90d0964-a7d9-44b7-816b-ffa5c2fe2289>`_\n   * - TRANSPOSE(range)\n     - `Excel TRANSPOSE article <https://support.microsoft.com/office/transpose-function-ed039415-ed8a-4a81-93e9-4b6dfac76027>`_\n   * - VSTACK(range1, [range2, ...])\n     - `Excel VSTACK article <https://support.microsoft.com/office/vstack-function-a4b86897-be0f-48fc-adca-fcc10d795a9c>`_\n   * - WRAPCOLS(range, wrap_count, [pad_with])\n     - `Excel WRAPCOLS article <https://support.microsoft.com/office/wrapcols-function-d038b05a-57b7-4ee0-be94-ded0792511e2>`_\n   * - WRAPROWS(range, wrap_count, [pad_with])\n     - `Excel WRAPROWS article <https://support.microsoft.com/office/wraprows-function-796825f3-975a-4cee-9c84-1bbddf60ade0>`_\n\n```\n\n----------------------------------------\n\nTITLE: Updating Odoo XML Template to Link to Teacher Pages\nDESCRIPTION: This XML code modifies the index template to create links to individual teacher pages using the slug function for URL generation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\"index\">\n    <t t-call=\"website.layout\">\n        <t t-set=\"title\">Academy</t>\n        <div class=\"oe_structure\">\n            <div class=\"container\">\n                <t t-foreach=\"teachers\" t-as=\"teacher\">\n                    <p>\n                        <a t-attf-href=\"/academy/{{ slug(teacher) }}\">\n                        <t t-esc=\"teacher.name\"/></a>\n                    </p>\n                </t>\n            </div>\n        </div>\n    </t>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Context Field in XML for Odoo Actions\nDESCRIPTION: Demonstrates how to define a context field in XML that will be evaluated as an object and provided to the action component. This example shows setting a default search filter for customers.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/framework_overview.rst#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"context\">{'search_default_customer': 1}</field>\n```\n\n----------------------------------------\n\nTITLE: Tax Cash Basis Journal Entry\nDESCRIPTION: Automatic journal entry created upon payment reconciliation showing the movement of tax amounts from temporary to final accounts.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/taxes/cash_basis.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n**Tax Cash Basis Journal (Caba)**\nDebit                    | Credit\n--------------------------|----------------------------\nIncome account $1,000     |\nTemporary tax account $150|\n                          | Income account $1,000\n                          | Tax Received $150\n```\n\n----------------------------------------\n\nTITLE: Restarting Odoo Server to Apply Field Additions via Command Line\nDESCRIPTION: Repeats the command-line instruction to restart the Odoo server (`odoo-bin`) and upgrade the `estate` module (`-u estate`) after adding new fields to the model. This step is necessary to ensure the database schema reflects the changes made in the Python code.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/03_basicmodel.rst#2025-04-23_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ./odoo-bin --addons-path=addons,../enterprise/,../tutorials/ -d rd-demo -u estate\n```\n\n----------------------------------------\n\nTITLE: Mapping Chart of Accounts Initial Config Path (plaintext)\nDESCRIPTION: Maps the old documentation path for chart of accounts initial configuration to a new path under the 'get_started' directory.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/getting_started/initial_configuration/chart_of_accounts.rst applications/finance/accounting/get_started/chart_of_accounts.rst     # getting_started/initial_configuration/* -> get_started/*\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Replacements for Purchase Order Abbreviations\nDESCRIPTION: Sets up text replacements for 'PO' (purchase order) and 'POs' (purchase orders) to be used throughout the document.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/advanced/analyze.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. |PO| replace:: :abbr:`PO (purchase order)`\n.. |POs| replace:: :abbr:`POs (purchase orders)`\n```\n\n----------------------------------------\n\nTITLE: Mapping Foreign Currency Setup Path (plaintext)\nDESCRIPTION: Maps the old documentation path for foreign currency setup to a new path under the bank directory, streamlining the structure.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/bank/setup/foreign_currency.rst applications/finance/accounting/bank/foreign_currency.rst                          # bank/setup/* -> bank/*\n```\n\n----------------------------------------\n\nTITLE: Setting Background Images in Odoo XML Sections\nDESCRIPTION: This snippet applies a registered attachment image as a CSS background in a section of a web page. Utilizes the same attachment access route as regular images. Dependent on image registration as an ir.attachment. The style attribute must supply a valid background-image URL. Output is a section element with the specified image as background.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/media.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<section style=\\\"background-image: url('/web/image/website_airproof.img_about_01');\\\">\\n\n```\n\n----------------------------------------\n\nTITLE: Using data-target with data-selector in XML\nDESCRIPTION: Shows how to use data-target attribute to apply options to a child element of the element matched by data-selector. In this example, applying the option to a .row inside a .s_airproof_snippet.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n<div\n   data-selector=\".s_airproof_snippet\"\n   data-target=\".row\">\n```\n\n----------------------------------------\n\nTITLE: Restructuring Finance Documentation in Odoo\nDESCRIPTION: This snippet shows the relocation of files within the finance application documentation. It moves files from the 'payables/pay' directory to the 'payments' directory.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/saas-16.2.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# applications/finance\n\napplications/finance/accounting/payables/pay/trusted_accounts.rst applications/finance/accounting/payments/trusted_accounts.rst         # payables/pay/* -> payments/*\n```\n\n----------------------------------------\n\nTITLE: Restarting Odoo Server and Upgrading a Module via Command Line\nDESCRIPTION: Shows the command-line instruction to restart the Odoo server (`odoo-bin`), specifying the addons path, the target database (`-d rd-demo`), and instructing it to upgrade the `estate` module (`-u estate`). Upgrading the module triggers the ORM to apply any schema changes defined in the Python models to the specified database.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/03_basicmodel.rst#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ./odoo-bin --addons-path=addons,../enterprise/,../tutorials/ -d rd-demo -u estate\n```\n\n----------------------------------------\n\nTITLE: Configuring Git for Linux and macOS Collaboration (Git, Console Commands) - Console\nDESCRIPTION: This snippet sets up Git to handle line endings correctly and sets the commit message template for users on Linux or macOS. Dependencies: git installed; a file named commit_template.txt must be present in the current working directory. The 'core.autocrlf input' configures Git to leave line endings unchanged on commits, suitable for Linux/macOS, and the commit template path is resolved dynamically. These settings help maintain consistent commit formatting across contributors.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation.rst#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ git config --global core.autocrlf input\n$ git config commit.template `pwd`/commit_template.txt\n\n```\n\n----------------------------------------\n\nTITLE: Mapping Customer Payments Recording Path (plaintext)\nDESCRIPTION: Maps the old documentation path for recording customer payments under receivables to the main payments documentation file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_46\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/receivables/customer_payments/recording.rst applications/finance/accounting/payments.rst                           # receivables/customer_payments/recording -> payments\n```\n\n----------------------------------------\n\nTITLE: Creating a Spoiler using RST .. spoiler:: Directive\nDESCRIPTION: This snippet demonstrates the reStructuredText syntax for creating a spoiler element using the `.. spoiler::` directive followed by the spoiler's title. The content following the directive will be initially hidden.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n.. code-block:: text\n\n   .. spoiler:: Answer to the Ultimate Question of Life, the Universe, and Everything\n\n      **42**\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Font Assets to Odoo Reports in XML\nDESCRIPTION: This snippet demonstrates how to add custom font assets to the Odoo report assets bundle using XML inheritance. It extends the 'web.report_assets_common' template to include a custom LESS file for fonts.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/reports.rst#2025-04-23_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<template id=\"report_assets_common_custom_fonts\" name=\"Custom QWeb fonts\" inherit_id=\"web.report_assets_common\">\n    <xpath expr=\".\" position=\"inside\">\n        <link href=\"/your_module/static/src/less/fonts.less\" rel=\"stylesheet\" type=\"text/less\"/>\n    </xpath>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Journal Entry for Reconciliation Bypass Method\nDESCRIPTION: This snippet shows the single journal entry created when using the reconciliation bypass method. The amount moves directly from Accounts Receivable to the Bank account, skipping the reconciliation process.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/payments/checks.rst#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n+----------------------+-------------------+----------+----------+\n| Account              | Statement Match   | Debit    | Credit   |\n+======================+===================+==========+==========+\n| Account Receivable   | X                 |          | 100.00   |\n+----------------------+-------------------+----------+----------+\n| Bank                 |                   | 100.00   |          |\n+----------------------+-------------------+----------+----------+\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes Directly to 'origin' Remote with Git - Console\nDESCRIPTION: Details pushing the local branch to the primary 'origin' remote (e.g., for internal contributors) using the 'git push -u' command. It sets the remote tracking branch and is suitable for environments where contributors have access to the main repository. Dependency is Git; the command expects valid permissions on the 'origin' remote.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation.rst#2025-04-23_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ git push -u origin {CURRENT_BRANCH}-explain-pricelists-xyz\n```\n\n----------------------------------------\n\nTITLE: Mapping Analytic Usage Path (plaintext)\nDESCRIPTION: Maps the old documentation path for analytic accounting usage to the main analytic reporting documentation file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/others/analytic/usage.rst applications/finance/accounting/reporting/analytic.rst                                   # others/analytic/usage -> reporting/analytic\n```\n\n----------------------------------------\n\nTITLE: Mapping Multi-currency Exchange Path (plaintext)\nDESCRIPTION: Maps the old documentation path related to currency exchange under 'others/multicurrencies' to the main multi-currency documentation file in 'get_started'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/others/multicurrencies/exchange.rst applications/finance/accounting/get_started/multi_currency.rst                 # others/multicurrencies/* -> get_started/multi_currency\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Result from Reading Custom Record\nDESCRIPTION: Illustrates the expected JSON output structure when reading the newly created record from the custom model 'x_custom' using the Odoo Web Services API's 'read' method. The result is an array containing a single object representing the record, including its ID, the custom field 'x_name', and standard Odoo audit fields.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/external_api.rst#2025-04-23_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"create_uid\": [1, \"Administrator\"],\n        \"x_name\": \"test record\",\n        \"__last_update\": \"2014-11-12 16:32:13\",\n        \"write_uid\": [1, \"Administrator\"],\n        \"write_date\": \"2014-11-12 16:32:13\",\n        \"create_date\": \"2014-11-12 16:32:13\",\n        \"id\": 1,\n        \"display_name\": \"test record\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Deprecated Output Directives: esc and raw (XML/HTML templates)\nDESCRIPTION: Explains deprecated output directives that once controlled HTML escaping in QWeb templates. The esc directive was an alias for out but with unclear semantics, while raw would emit content unescaped regardless of safety, now deprecated in favor of using markupsafe.Markup passed to out. The transition to markupsafe.Markup is recommended for improved traceability and safety in markup-producing code.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/qweb.rst#2025-04-23_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n``esc``\n    An alias for ``out``, would originally HTML-escape its input. Not yet\n    formally deprecated as the only difference between ``out`` and ``esc`` is\n    that the latter is a bit unclear / incorrect.\n``raw``\n    A version of ``out`` which *never* escapes its content. Content is emitted\n    as-is, whether it's safe or not.\n\n    .. deprecated:: 15.0\n\n        Use ``out`` with a :class:`markupsafe.Markup` value instead.\n\n        ``t-raw`` was deprecated because as the code *producting* the content\n        evolves it can be hard to track that it's going to be used for markup,\n        leading to more complicated reviews and more dangerous lapses.\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Fonts and Styles in LESS for Odoo Reports\nDESCRIPTION: This LESS code snippet shows how to define a custom font face and create a custom style class for use in Odoo QWeb reports. It demonstrates loading a custom font file and defining a style with specific font properties.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/reports.rst#2025-04-23_snippet_10\n\nLANGUAGE: LESS\nCODE:\n```\n@font-face {\n    font-family: 'MonixBold';\n    src: local('MonixBold'), local('MonixBold'), url(/your_module/static/fonts/MonixBold-Regular.otf) format('opentype');\n}\n\n.h1-title-big {\n    font-family: MonixBold;\n    font-size: 60px;\n    color: #3399cc;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Follow-up Actions in Odoo\nDESCRIPTION: ReStructuredText documentation detailing how to configure and manage payment follow-up actions, including follow-up levels configuration, customer communication methods, and reporting features.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/payments/follow_up.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=====================\nFollow-up on invoices\n=====================\n\nFollow-up messages can be sent to customers when payments are overdue. Odoo helps identify late\npayments and allows scheduling and sending the appropriate reminders using **follow-up actions**\naccording to the number of overdue days. Follow-ups can be sent through different methods, including\nemail, post, or SMS.\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents with toctree in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for integration documentation pages, using the reStructuredText toctree directive. It lists several integration-related documents that will be included in the navigation structure when building Sphinx documentation. The key component is the '.. toctree::' directive, followed by indented filenames or paths. No additional dependencies are required, but the referenced files must exist in the documentation tree.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/integrations.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n============\nIntegrations\n============\n\n.. toctree::\n\n   integrations/mail_plugins\n   integrations/unsplash\n   integrations/geolocation\n   integrations/google_translate\n   integrations/cloud_storage\n   integrations/barcodelookup\n```\n\n----------------------------------------\n\nTITLE: Mapping Outstanding Accounts Setup Path (plaintext)\nDESCRIPTION: Maps the old documentation path for outstanding accounts setup to the main bank documentation file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/bank/setup/outstanding_accounts.rst applications/finance/accounting/bank.rst                                       # bank/setup/outstanding_accounts -> bank\n```\n\n----------------------------------------\n\nTITLE: Mapping Customer Payments Follow-up Path (plaintext)\nDESCRIPTION: Maps the old documentation path for customer payment follow-ups under receivables to the new path under 'payments/follow_up'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_44\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/receivables/customer_payments/followup.rst applications/finance/accounting/payments/follow_up.rst                  # receivables/customer_payments/followup -> payments/follow_up\n```\n\n----------------------------------------\n\nTITLE: Flipping Background Shape Horizontally/Vertically in Odoo XML\nDESCRIPTION: Demonstrates how to flip a background shape using the `flip` array within the `data-oe-shape-data` attribute in an Odoo XML section. The `o_we_flip_x` and `o_we_flip_y` classes are added to the shape's `div` to apply the horizontal and vertical flip respectively.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/shapes.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<section data-oe-shape-data=\"{'shape':'web_editor/Zigs/06','flip':[x,y]}\">\n    <div class=\"o_we_shape o_we_flip_x o_we_flip_y o_web_editor_Zigs_06\"/>\n    <div class=\"container\">\n        <!-- Content -->\n    </div>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Server Listening Interface via Odoo Command-line\nDESCRIPTION: Specifies the TCP/IP network interface address on which the Odoo HTTP server should listen for incoming connections. Defaults to '0.0.0.0', meaning it listens on all available interfaces.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n--http-interface <interface>\n```\n\n----------------------------------------\n\nTITLE: Extending Inner Content Selectors for Custom Snippets (XML)\nDESCRIPTION: This XML snippet demonstrates how to add a custom snippet to the set of recognized 'inner content' selectors by updating the 'so_content_addition_selector' variable in Odoo's Website Builder. Dependencies: Odoo Website Builder's snippet system and CSS selectors. Inputs: t-set node and new selector. Output: custom snippet becomes droppable into other blocks supporting inner content. Limitations: the selector string must be valid and correspond to the custom snippet's class.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n<template id=\\\"snippet_options\\\" inherit_id=\\\"website.snippet_options\\\" name=\\\"Airproof - Snippets Options\\\">\\n   <xpath expr=\\\"//t[@t-set='so_content_addition_selector']\\\" position=\\\"after\\\">\\n      <t t-set=\\\"so_content_addition_selector\\\"\\n         t-value=\\\"so_content_addition_selector + ', .s_airproof_snippet'\\\" />\\n   </xpath>\\n</template>\n```\n\n----------------------------------------\n\nTITLE: Ordering SCSS Properties Following Odoo Guidelines\nDESCRIPTION: Demonstrates the recommended order for CSS/SCSS properties within a ruleset according to Odoo guidelines. It starts with positioning (`@include o-position-absolute`), layout (`display`), box model (`margin`, `width`, `border`, `padding`), and ends with decorative rules (`background`, `font-size`, `filter`). The example also shows placing SCSS (`$-inner-gap`) and CSS (`--element-margin`, `--element-size`) variables at the top.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_19\n\nLANGUAGE: scss\nCODE:\n```\n.o_element {\n   $-inner-gap: $border-width + $legend-margin-bottom;\n\n   --element-margin: 1rem;\n   --element-size: 3rem;\n\n   @include o-position-absolute(1rem);\n   display: block;\n   margin: var(--element-margin);\n   width: calc(var(--element-size) + #{$-inner-gap});\n   border: 0;\n   padding: 1rem;\n   background: blue;\n   font-size: 1rem;\n   filter: blur(2px);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in reStructuredText\nDESCRIPTION: This snippet shows how to create a table of contents for related documents using reStructuredText syntax.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/attendances.rst#2025-04-23_snippet_7\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   attendances/check_in_check_out\n   attendances/kiosks\n   attendances/hardware\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets in Manifest.py for Tour Testing\nDESCRIPTION: Updates the __manifest__.py file to add your tour JavaScript file to the web.assets_tests asset bundle, making it available for testing.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n'assets': {\n    'web.assets_tests': [\n        'your_module/static/tests/tours/your_tour.js',\n    ],\n},\n```\n\n----------------------------------------\n\nTITLE: SSCC Package Barcode Pattern in Regular Expression\nDESCRIPTION: Regular expression pattern for matching Serial Shipping Container Code (SSCC) in GS1 barcodes, consisting of Application Identifier (00) followed by 18 digits.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-23_snippet_1\n\nLANGUAGE: regularexpression\nCODE:\n```\n(00)(\\\\d{18})\n```\n\n----------------------------------------\n\nTITLE: Confirming XML File Loading via Server Log\nDESCRIPTION: Shows an example log message indicating that an Odoo module's XML view file (`estate/views/estate_property_views.xml`) has been successfully loaded by the server during module installation or update. This confirmation appears in the Odoo server logs.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/05_firstui.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nINFO rd-demo odoo.modules.loading: loading estate/views/estate_property_views.xml\n```\n\n----------------------------------------\n\nTITLE: Mapping Supplier Bills Assets Path (plaintext)\nDESCRIPTION: Maps the old documentation path for assets related to supplier bills to the new path under 'vendor_bills/assets'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/payables/supplier_bills/assets.rst applications/finance/accounting/vendor_bills/assets.rst                             # payables/supplier_bills/* -> vendor_bills/*\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Shape SVG as an Odoo Attachment in XML\nDESCRIPTION: Odoo XML record (`shapes.xml`) defining an `ir.attachment` to register the custom hexagon SVG file (`01.svg`). It specifies the file path via `datas`, assigns a URL (`/web_editor/shape/illustration/hexagons/01.svg`) for web editor access, and sets `public` to `True`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/shapes.rst#2025-04-23_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<!-- /website_airproof/data/shapes.xml -->\n\n<record id=\"shape_hexagon_01\" model=\"ir.attachment\">\n    <field name=\"name\">01.svg</field>\n    <field name=\"datas\" type=\"base64\" file=\"website_airproof/static/shapes/hexagons/01.svg\"/>\n    <field name=\"url\">/web_editor/shape/illustration/hexagons/01.svg</field>\n    <field name=\"public\" eval=\"True\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Using t-att- for Attributes (Not Natively Translatable) in Odoo XML\nDESCRIPTION: Shows an alternative method using `t-att-` with string concatenation to set an attribute's value. This approach is explicitly warned against because the resulting string ('Hello' + user.name) is not automatically considered translatable by Odoo's translation mechanism.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/translations.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<div t-att-title=\"'Hello' + user.name\" />\n```\n\n----------------------------------------\n\nTITLE: Installing a Module with Odoo Command Line\nDESCRIPTION: Command to install a module using the Odoo command line interface. This example shows how to install the 'sale' module without loading demo data and stopping the server after initialization.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/advanced/containers.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$  odoo-bin -i sale --without-demo=all --stop-after-init\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Table of Contents - reStructuredText\nDESCRIPTION: This snippet illustrates the use of the toctree directive in reStructuredText to create a navigation tree for payment-related documentation. The directive includes references to four subordinate documentation files and specifies that only their titles should be shown. There are no programming dependencies beyond standard reStructuredText parsers, and the expected input is a list of documentation filenames. Outputs are navigation elements rendered in the documentation build. No business logic or parameterization is present.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/standard_modules/payment.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\\n   :titlesonly:\\n\\n   payment/payment_method\\n   payment/payment_provider\\n   payment/payment_token\\n   payment/payment_transaction\n```\n\n----------------------------------------\n\nTITLE: Documenting PaymentMethod Class in Odoo Python\nDESCRIPTION: Auto-generated documentation for the PaymentMethod class located in odoo.addons.payment.models.payment_method module. Includes documentation for _get_compatible_payment_methods and _get_from_code methods.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/standard_modules/payment/payment_method.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass PaymentMethod():\n    _get_compatible_payment_methods\n    _get_from_code\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure in reStructuredText\nDESCRIPTION: Sets up a documentation tree structure with titlesonly option, organizing Amazon Connector documentation into three main sections: features, setup, and manage.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/amazon_connector.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:nosearch:\n\n================\nAmazon Connector\n================\n\n.. toctree::\n   :titlesonly:\n\n   amazon_connector/features\n   amazon_connector/setup\n   amazon_connector/manage\n```\n\n----------------------------------------\n\nTITLE: Setting a Translatable Variable using t-set in Odoo XML\nDESCRIPTION: Demonstrates defining a variable named `title` using `<t t-set>`. The content \"Foo\" located between the opening and closing tags is treated as translatable text and stored in the `title` variable for potential later use within the template.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/translations.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=”title”>Foo</t>\n```\n\n----------------------------------------\n\nTITLE: Disabling Portal Language Selector in Odoo\nDESCRIPTION: XML record example that deactivates the language selector in the portal module. Used in presets.xml to control the visibility of the language selection feature.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"portal.footer_language_selector\" model=\"ir.ui.view\">\n   <field name=\"active\" eval=\"False\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Updating a Module with Odoo Command Line\nDESCRIPTION: Command to update a module using the Odoo command line interface. This example shows how to update the 'sale' module and stop the server after the update is complete.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/advanced/containers.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$  odoo-bin -u sale --stop-after-init\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for Odoo AccountAccountTag Model (reStructuredText)\nDESCRIPTION: This Sphinx directive `automodel` instructs the documentation generator to automatically create documentation for the specified Odoo Python model (`odoo.addons.account.models.account_account_tag.AccountAccountTag`). The `:main:` option likely indicates this is the primary focus of the section. Subsequent `autofield` directives nested under this will target fields within this model. Requires Sphinx with the autodoc extension enabled and access to the Odoo source code.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/standard_modules/account/account_account_tag.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodel:: odoo.addons.account.models.account_account_tag.AccountAccountTag\n    :main:\n```\n\n----------------------------------------\n\nTITLE: Using LDV Parameter for Low Vertical Density\nDESCRIPTION: The `LDV` parameter, added to an Epson printer's name in CUPS (e.g., `PrinterName__IMC_LDV__`), forces Low Vertical Density printing mode. This is required for models like the Epson TM-U220 that do not support High Vertical Density with the 'ESC *' command.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/iot/devices/printer.rst#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nLDV\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Products Documentation in reStructuredText\nDESCRIPTION: This reStructuredText directive creates a table of contents for the Products documentation section. It specifies a titlesonly option and includes links to three sub-pages: pricelist, reordering, and temporary reordering documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/products.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   products/pricelist\n   products/reordering\n   products/temporary_reordering\n```\n\n----------------------------------------\n\nTITLE: Example Odoo Database URL for KeyCDN Origin\nDESCRIPTION: This snippet shows an example format for the 'Origin URL' required when creating a pull zone in KeyCDN. Users should replace 'yourdatabase.odoo.com' with their actual Odoo database URL or a custom domain pointing to the Odoo instance.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/websites/website/configuration/cdn.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://yourdatabase.odoo.com\n```\n\n----------------------------------------\n\nTITLE: Bad Example: Non-translatable Meta Title (Not Recommended) - XML\nDESCRIPTION: Shows an anti-pattern: assigning a literal string using 't-valuef', which is not explicitly exported for translation. This may harm localization and should be avoided when translation is required.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/pages.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<t t-set=\\\"additional_title\\\" t-valuef=\\\"My title\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Conditional Table Display with t-if/t-foreach in Odoo Report XML - XML\nDESCRIPTION: Displays how to render a table only if a certain condition (e.g., the presence of tags) is met, using t-if for conditionally displaying a table and t-foreach to iterate over related records. It leverages Odoo's QWeb XML syntax with doc.tag_ids as the collection; if tags are present, they are listed in a dynamically generated table. Inputs are doc.tag_ids; output is a table or nothing if no tags are present. Must be used in the XML template editor of Odoo reports.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/studio/pdf_reports.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- table root element -->\\n<table class=\\\"table\\\" t-if=\\\"len(doc.tag_ids) > 0\\\">\\n    <!-- thead = table header, the row with column titles -->\\n    <thead>\\n        <!-- table row element -->\\n        <tr>\\n            <!-- table header element -->\\n            <th>ID</th>\\n            <th>Name</th>\\n        </tr>\\n    </thead>\\n    <!-- table body, the main content -->\\n    <tbody>\\n        <!-- we create a row for each subrecord with t-foreach -->\\n        <tr t-foreach=\\\"doc.tag_ids\\\" t-as=\\\"tag\\\">\\n            <!-- for each line, we output the name and price as table cells -->\\n            <td t-out=\\\"tag.id\\\"/>\\n            <td t-out=\\\"tag.name\\\"/>\\n        </tr>\\n    </tbody>\\n</table>\n```\n\n----------------------------------------\n\nTITLE: Operating System Specific Shortcuts in RST\nDESCRIPTION: Table of keyboard shortcuts showing the equivalent commands for Windows/Linux and macOS, including navigation, record management, and system-wide actions.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials/keyboard_shortcuts.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Description\n     - Windows / Linux\n     - macOS\n   * - Previous breadcrumb\n     - :kbd:`Alt` + :kbd:`B`\n     - :kbd:`Ctrl` + :kbd:`B`\n   * - Create new record\n     - :kbd:`Alt` + :kbd:`C`\n     - :kbd:`Ctrl` + :kbd:`C`\n   * - Odoo Home Page\n     - :kbd:`Alt` + :kbd:`H`\n     - :kbd:`Ctrl` + :kbd:`H`\n   * - Discard changes\n     - :kbd:`Alt` + :kbd:`J`\n     - :kbd:`Ctrl` + :kbd:`J`\n   * - Save changes\n     - :kbd:`Alt` + :kbd:`S`\n     - :kbd:`Ctrl` + :kbd:`S`\n   * - Next page\n     - :kbd:`Alt` + :kbd:`N`\n     - :kbd:`Ctrl` + :kbd:`N`\n   * - Previous page\n     - :kbd:`Alt` + :kbd:`P`\n     - :kbd:`Ctrl` + :kbd:`P`\n   * - Search\n     - :kbd:`Alt` + :kbd:`Q`\n     - :kbd:`Ctrl` + :kbd:`Q`\n   * - Select menus\n     - :kbd:`Alt` + :kbd:`1-9`\n     - :kbd:`Ctrl` + :kbd:`1-9`\n   * - Create a new To-Do\n     - :kbd:`Alt` + :kbd:`Shift` + :kbd:`T`\n     - :kbd:`Ctrl` + :kbd:`Shift` + :kbd:`T`\n   * - Search a Knowledge article\n     - :kbd:`Alt` + :kbd:`F`\n     - :kbd:`Ctrl` + :kbd:`F`\n   * - Share a Knowledge article\n     - :kbd:`Alt` + :kbd:`Shift` + :kbd:`S`\n     - :kbd:`Ctrl` + :kbd:`Shift` + :kbd:`S`\n   * - Open command palette\n     - :kbd:`Ctrl` + :kbd:`K`\n     - :kbd:`Command` + :kbd:`K`\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Table of Contents using Sphinx Toctree\nDESCRIPTION: This snippet utilizes the Sphinx `toctree` directive within a reStructuredText file to generate a table of contents. It lists relative paths to other documentation files (`.rst` files typically), organizing the Marketing module documentation into subsections like Email Marketing, Marketing Automation, etc.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/marketing.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n\n   marketing/email_marketing\n   marketing/marketing_automation\n   marketing/sms_marketing\n   marketing/events\n   marketing/surveys\n   marketing/social_marketing\n```\n\n----------------------------------------\n\nTITLE: Documenting Date Functions for Spreadsheets - reStructuredText\nDESCRIPTION: This snippet lists spreadsheet date/time functions in reStructuredText using the list-table directive, documenting the function signature for each and providing a link to its respective Excel documentation. It requires a Sphinx or compatible documentation builder and is formatted to allow technical writers or developers easy lookup and cross-referencing. Covered functions include those related to date arithmetic, conversion, and calendar computations, clarifying expected parameter types and compatibility details.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/productivity/spreadsheet/functions.rst#2025-04-23_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Name and arguments\n     - Description or link\n   * - DATE(year, month, day)\n     - `Excel DATE article <https://support.microsoft.com/office/date-function-e36c0c8c-4104-49da-ab83-82328b832349>`_\n   * - DATEDIF(start_date, end_date, unit)\n     - `Excel DATEDIF article <https://support.microsoft.com/office/datedif-function-25dba1a4-2812-480b-84dd-8b32a451b35c>`_\n   * - DATEVALUE(date_string)\n     - `Excel DATEVALUE article <https://support.microsoft.com/office/datevalue-function-df8b07d4-7761-4a93-bc33-b7471bbff252>`_\n   * - DAY(date)\n     - `Excel DAY article <https://support.microsoft.com/office/day-function-8a7d1cbb-6c7d-4ba1-8aea-25c134d03101>`_\n   * - DAYS(end_date, start_date)\n     - `Excel DAYS article <https://support.microsoft.com/office/days-function-57740535-d549-4395-8728-0f07bff0b9df>`_\n   * - DAYS360(start_date, end_date, [method])\n     - `Excel DAYS360 article <https://support.microsoft.com/office/days360-function-b9a509fd-49ef-407e-94df-0cbda5718c2a>`_\n   * - EDATE(start_date, months)\n     - `Excel EDATE article <https://support.microsoft.com/office/edate-function-3c920eb2-6e66-44e7-a1f5-753ae47ee4f5>`_\n   * - EOMONTH(start_date, months)\n     - `Excel EOMONTH article <https://support.microsoft.com/office/eomonth-function-7314ffa1-2bc9-4005-9d66-f49db127d628>`_\n   * - HOUR(time)\n     - `Excel HOUR article <https://support.microsoft.com/office/hour-function-a3afa879-86cb-4339-b1b5-2dd2d7310ac7>`_\n   * - ISOWEEKNUM(date)\n     - `Excel ISOWEEKNUM article <https://support.microsoft.com/office/isoweeknum-function-1c2d0afe-d25b-4ab1-8894-8d0520e90e0e>`_\n   * - MINUTE(time)\n     - `Excel MINUTE article <https://support.microsoft.com/office/minute-function-af728df0-05c4-4b07-9eed-a84801a60589>`_\n   * - MONTH(date)\n     - `Excel MONTH article <https://support.microsoft.com/office/month-function-579a2881-199b-48b2-ab90-ddba0eba86e8>`_\n   * - NETWORKDAYS(start_date, end_date, [holidays])\n     - `Excel NETWORKDAYS article <https://support.microsoft.com/office/networkdays-function-48e717bf-a7a3-495f-969e-5005e3eb18e7>`_\n   * - NETWORKDAYS.INTL(start_date, end_date, [weekend], [holidays])\n     - `Excel NETWORKDAYS.INTL article <https://support.microsoft.com/office/networkdays-intl-function-a9b26239-4f20-46a1-9ab8-4e925bfd5e28>`_\n   * - NOW()\n     - `Excel NOW article <https://support.microsoft.com/office/now-function-3337fd29-145a-4347-b2e6-20c904739c46>`_\n   * - SECOND(time)\n     - `Excel SECOND article <https://support.microsoft.com/office/second-function-740d1cfc-553c-4099-b668-80eaa24e8af1>`_\n   * - TIME(hour, minute, second)\n     - `Excel TIME article <https://support.microsoft.com/office/time-function-9a5aff99-8f7d-4611-845e-747d0b8d5457>`_\n   * - TIMEVALUE(time_string)\n     - `Excel TIMEVALUE article <https://support.microsoft.com/office/timevalue-function-0b615c12-33d8-4431-bf3d-f3eb6d186645>`_\n   * - TODAY()\n     - `Excel TODAY article <https://support.microsoft.com/office/today-function-5eb3078d-a82c-4736-8930-2f51a028fdd9>`_\n   * - WEEKDAY(date, [type])\n     - `Excel WEEKDAY article <https://support.microsoft.com/office/weekday-function-60e44483-2ed1-439f-8bd0-e404c190949a>`_\n   * - WEEKNUM(date, [type])\n     - `Excel WEEKNUM article <https://support.microsoft.com/office/weeknum-function-e5c43a03-b4ab-426c-b411-b18c13c75340>`_\n   * - WORKDAY(start_date, num_days, [holidays])\n     - `Excel WORKDAY article <https://support.microsoft.com/office/workday-function-f764a5b7-05fc-4494-9486-60d494efbf33>`_\n   * - WORKDAY.INTL(start_date, num_days, [weekend], [holidays])\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Active Footer Template in XML\nDESCRIPTION: XML configuration to disable the default footer template in Odoo Website Builder.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"website.footer_custom\" model=\"ir.ui.view\">\n   <field name=\"active\" eval=\"False\"/>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Linking Git Repository with Shared Development Fork - Git Console\nDESCRIPTION: For contributors working at Odoo, these commands set the remote to the shared odoo-dev fork and configure the origin to disable direct pushing. Ensures changes are pushed to the dev fork rather than the primary repository. This setup helps enforce policy for internal contributors. Requires appropriate access rights to odoo-dev's forks.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development.rst#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ cd /CommunityPath\n$ git remote add dev git@github.com:odoo-dev/odoo.git\n$ git remote set-url --push origin you_should_not_push_on_this_repository\n```\n\nLANGUAGE: console\nCODE:\n```\n$ cd /EnterprisePath\n$ git remote add dev git@github.com:odoo-dev/enterprise.git\n$ git remote set-url --push origin you_should_not_push_on_this_repository\n```\n\n----------------------------------------\n\nTITLE: Configuring Record Deletion in Odoo Views with reStructuredText\nDESCRIPTION: This snippet defines the 'delete' attribute for Odoo views. It controls whether record deletion is enabled or disabled through the Action dropdown. The attribute is optional, of boolean type, and defaults to True.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures/root_attribute_delete.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. attribute:: delete\n   :noindex:\n\n   Disable/enable record deletion on the view through the :guilabel:`Action` dropdown.\n\n   :requirement: Optional\n   :type: bool\n   :default: `True`\n```\n\n----------------------------------------\n\nTITLE: Using we-select Element in XML\nDESCRIPTION: Demonstrates how to create a dropdown list option using the we-select element with a label specified by the string attribute.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_41\n\nLANGUAGE: xml\nCODE:\n```\n<we-select string=\"Layout\">...</we-select>\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Campaign Templates Documentation in RST\nDESCRIPTION: This RST code creates a documentation structure with a table of contents for campaign templates. It sets up the page title 'Campaign templates' and includes a titlesonly directive that references the 'double_optin' documentation page.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/marketing/marketing_automation/campaign_templates.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:nosearch:\n\n==================\nCampaign templates\n==================\n\n.. toctree::\n   :titlesonly:\n\n   campaign_templates/double_optin\n```\n\n----------------------------------------\n\nTITLE: Navigating to Bills of Materials Configuration in Odoo Manufacturing\nDESCRIPTION: Provides the menu path within the Odoo Manufacturing app to access the list of Bills of Materials (BoMs), where users can create new BoMs or modify existing ones.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/basic_setup/mo_costs.rst#2025-04-23_snippet_8\n\nLANGUAGE: Odoo Configuration\nCODE:\n```\n:menuselection:`Manufacturing app --> Products --> Bills of Materials`\n```\n\n----------------------------------------\n\nTITLE: Setting Footer Template in SCSS Variables\nDESCRIPTION: Configures the footer template name in the SCSS variables palette.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_33\n\nLANGUAGE: scss\nCODE:\n```\n$o-website-values-palettes: (\n   (\n      'footer-template': 'Links',\n   ),\n);\n```\n\n----------------------------------------\n\nTITLE: Calculating Prorated Revenue Formula using LaTeX Math\nDESCRIPTION: This snippet uses the reStructuredText 'math' directive to render a mathematical formula using LaTeX syntax. It shows that Prorated Revenue is calculated by multiplying the Expected Revenue of an opportunity by its Probability percentage. Requires a reStructuredText processor with math extension enabled (e.g., Sphinx with mathjax).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/crm/performance/forecast_report.rst#2025-04-23_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n.. math::\n\n   \\text{Expected Revenue} \\times \\text{Probability} = \\text{Prorated Revenue}\n```\n\n----------------------------------------\n\nTITLE: AccountGroup Model Reference in RST\nDESCRIPTION: RST documentation structure for the AccountGroup model from Odoo's accounting module. Defines the automodel reference and its associated fields including parent_id, name, code prefix start and end.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/standard_modules/account/account_group.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _reference/account_group:\n\n=============\nAccount Group\n=============\n\n.. automodel:: odoo.addons.account.models.account_account.AccountGroup\n    :main:\n\n    .. autofield:: parent_id\n    .. autofield:: name\n    .. autofield:: code_prefix_start\n    .. autofield:: code_prefix_end\n```\n\n----------------------------------------\n\nTITLE: Journal Entry for Outstanding Account Method (Bank Statement Reconciliation)\nDESCRIPTION: This snippet shows the journal entry created when reconciling the bank statement with the outstanding receipt. The amount moves from Outstanding Receipts to the Bank account.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/payments/checks.rst#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n+---------------------+-------------------+----------+----------+\n| Account             | Statement Match   | Debit    | Credit   |\n+=====================+===================+==========+==========+\n| Outstanding Receipts|        X          |          | 100.00   |\n+---------------------+-------------------+----------+----------+\n| Bank                |                   | 100.00   |          |\n+---------------------+-------------------+----------+----------+\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiprocessing Mode with Worker Count via Odoo Command-line\nDESCRIPTION: Activates multiprocessing mode (available on Unix-based systems) and specifies the number of HTTP worker processes to spawn for handling HTTP and RPC requests. Setting `count` to 0 disables multiprocessing (default). Associated options like `--limit-request`, `--limit-memory-soft`, `--limit-memory-hard`, and `--limit-time-cpu` can control worker behavior and recycling.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_35\n\nLANGUAGE: console\nCODE:\n```\n--workers <count>\n```\n\n----------------------------------------\n\nTITLE: Defining a Database Index on an Odoo Field (Python)\nDESCRIPTION: This snippet shows how to define a database index for an Odoo model field. Setting the `index=True` parameter on a field definition (like `fields.Char`) instructs Odoo to create a corresponding index in the database table. Indexes speed up search operations on the indexed column but add overhead to write operations (INSERT, UPDATE, DELETE).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/performance.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nname = fields.Char(string=\"Name\", index=True)\n```\n\n----------------------------------------\n\nTITLE: Inserting a Horizontal Rule Separator in RST\nDESCRIPTION: This RST snippet demonstrates how to insert a horizontal rule separator in the Odoo rich-text editor using the powerbox command.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials/html_editor.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n   :widths: 20 80\n   :header-rows: 1\n   :stub-columns: 1\n\n   * - Command\n     - Use\n   * - :guilabel:`Separator`\n     - Insert a horizontal rule separator.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Auto-Complete Feature for Vendor Bills in Odoo\nDESCRIPTION: This RST snippet includes an image reference showing the auto-complete drop-down list on a draft vendor bill in Odoo, which allows linking the bill to an existing purchase order.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/manage.rst#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: manage/manage-auto-complete.png\n   :align: center\n   :alt: Auto-complete drop-down list on draft vendor bill.\n```\n\n----------------------------------------\n\nTITLE: Defining Abbreviations in reStructuredText\nDESCRIPTION: This snippet defines several abbreviations using reStructuredText substitution definitions. These abbreviations (MO, MOs, POs, BoM, BoMs) are used throughout the document for brevity and consistency when referring to Manufacturing Orders, Purchase Orders, and Bills of Materials.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/basic_setup/mo_costs.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |MO| replace:: :abbr:`MO (Manufacturing Order)`\n.. |MOs| replace:: :abbr:`MOs (Manufacturing Orders)`\n.. |POs| replace:: :abbr:`POs (Purchase Orders)`\n.. |BoM| replace:: :abbr:`BoM (Bill of Materials)`\n.. |BoMs| replace:: :abbr:`BoMs (Bills of Materials)`\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for Odoo Accounting Setup\nDESCRIPTION: Structured documentation that covers the setup process for Odoo Accounting and Invoicing modules, including configuration of fiscal periods, bank accounts, taxes, chart of accounts, and invoice customization options.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/get_started.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n===========\nGet started\n===========\n\nWhen you first open your Odoo Accounting app, the :guilabel:`Accounting Dashboard` welcomes you with\na step-by-step onboarding banner, a wizard that helps you get started. This onboarding banner is\ndisplayed until you choose to close it.\n```\n\n----------------------------------------\n\nTITLE: Creating Stat Button for Estate Property Type in Odoo XML\nDESCRIPTION: Adds a stat button to the estate.property.type form view that points to the estate.property.offer action. The button uses the type=\"action\" attribute to link to the action.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/11_sprinkles.rst#2025-04-23_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<button name=\"%(estate.action_estate_property_offer)d\" type=\"action\" class=\"oe_stat_button\" icon=\"fa-usd\">\n    <field name=\"offer_count\" widget=\"statinfo\" string=\"Offers\"/>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'name' attribute in Odoo documentation\nDESCRIPTION: Documentation for the 'name' attribute which specifies either a method to call (when type is 'object') or an action to load (when type is 'action'). The attribute can accept an XMLID in raw format or in %(XMLID)d format.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures/button_attribute_name.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. attribute:: name\n   :noindex:\n\n   The method to call if the `type` is `object`. The :term:`XMLID <external identifier>` of the\n   action to load if the `type` is `action`, either in raw format or in `%(XMLID)d` format.\n\n   :requirement: Optional\n   :type: str\n   :default: `''`\n```\n\n----------------------------------------\n\nTITLE: Testing GeoIP Functionality with XML Template Code\nDESCRIPTION: XML snippet to add to a webpage that displays the country name of the current visitor based on their IP address, useful for testing if GeoIP is working correctly.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/geo_ip.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<h1 class=\"text-center\" t-esc=\"request.geoip.country.name or 'geoip failure'\"/>\n```\n\n----------------------------------------\n\nTITLE: Tooltip Template RNG Validation\nDESCRIPTION: RelaxNG schema definition for validating tooltip templates in gallery views. Defines structure for tooltip-template elements and nested content.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/master_odoo_web_framework/02_create_gallery_view.rst#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<rng:define name=\"tooltip-template\">\n   <rng:element name=\"tooltip-template\">\n         <rng:zeroOrMore>\n            <rng:text/>\n            <rng:ref name=\"any\"/>\n         </rng:zeroOrMore>\n   </rng:element>\n</rng:define>\n\n<rng:define name=\"any\">\n   <rng:element>\n         <rng:anyName/>\n         <rng:zeroOrMore>\n            <rng:choice>\n               <rng:attribute>\n                     <rng:anyName/>\n               </rng:attribute>\n               <rng:text/>\n               <rng:ref name=\"any\"/>\n            </rng:choice>\n         </rng:zeroOrMore>\n   </rng:element>\n</rng:define>\n```\n\n----------------------------------------\n\nTITLE: Counting Lines of Code (Cloc) for Multiple Paths via Command Line\nDESCRIPTION: Illustrates using the `--path` (`-p`) option multiple times with `odoo-bin cloc` to count lines of code across several specified directories (`addons/account` and `addons/sale`). The tool aggregates the LOC counts from all provided paths.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_48\n\nLANGUAGE: console\nCODE:\n```\n$ odoo-bin cloc -p addons/account -p addons/sale\n```\n\n----------------------------------------\n\nTITLE: Inserting Image in reStructuredText for Error Handling\nDESCRIPTION: This snippet shows how to insert an image illustrating the error handling process in attendance entries using reStructuredText syntax.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/attendances.rst#2025-04-23_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. image:: attendances/errors.png\n   :align: center\n   :alt: The pop-up that allows for modifications to an attendance entry with an error. The calendar\n         selector is shown, and the time selector is highlighted.\n```\n\n----------------------------------------\n\nTITLE: Defining Salary Rules in Odoo RST Documentation\nDESCRIPTION: Documentation explaining the configuration of salary rules including rule names, categories, conditions, and computation methods.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n- :guilabel:`Rule Name`: enter a name for the rule. This field is required.\n- :guilabel:`Category`: select a category the rule applies to from the drop-down menu.\n- :guilabel:`Code`: enter a code to be used for this new rule.\n- :guilabel:`Sequence`: enter a number indicating when this rule is calculated.\n- :guilabel:`Salary Structure`: select a salary structure the rule applies to.\n```\n\n----------------------------------------\n\nTITLE: Setting End Month for Date Filters in Odoo XML\nDESCRIPTION: This XML snippet demonstrates using the `end_month` attribute on a date-based `<filter>` tag in an Odoo search view. It sets the latest selectable month in the filter's dropdown relative to the current month (e.g., `2` means two months after the current month). Requires the `date` attribute to be set.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_54\n\nLANGUAGE: xml\nCODE:\n```\n<filter string=\"Creation Date\" name=\"filter_create_date\" date=\"create_date\" end_month=\"2\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Client Action in Odoo (JSON)\nDESCRIPTION: This JSON snippet defines a client action (`ir.actions.client`) that instructs the Odoo web client to invoke the action identified by the tag 'pos.ui', typically used to launch the Point of Sale interface. The 'type' specifies the action model, and 'tag' identifies the specific client-side action to execute.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/actions.rst#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"ir.actions.client\",\n    \"tag\": \"pos.ui\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Grid Table using RST ASCII Art Syntax\nDESCRIPTION: This snippet demonstrates the reStructuredText syntax for creating a grid table using ASCII art with characters like `+`, `-`, and `|`. Header rows are indicated using `=` as the separator.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n.. code-block:: text\n\n   +-----------------------+--------------+---------------+\n   |                       | Shirts       | T-shirts      |\n   +=======================+==============+===============+\n   | **Available colours** | Purple       | Green         |\n   |                       +--------------+---------------+\n   |                       | Turquoise    | Orange        |\n   +-----------------------+--------------+---------------+\n   | **Sleeves length**    | Long sleeves | Short sleeves |\n   +-----------------------+--------------+---------------+\n```\n\n----------------------------------------\n\nTITLE: Representing the Naive Bayes Formula for Odoo Lead Scoring using reStructuredText Math Directive\nDESCRIPTION: This snippet uses the reStructuredText `.. math::` directive to display the Naive Bayes probability formula. This formula is the foundation of Odoo's predictive lead scoring mechanism, calculating the probability of winning a lead (P(A|B)) by considering the overall success probability (P(A)), the probability of specific conditions given success (P(B|A)), and the overall probability of those conditions (P(B)). The surrounding text explains each term in the context of lead variables like salesperson, source, and language.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/crm/track_leads/lead_scoring.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. math::\n   \\begin{equation}\n   P(A | B) = \\frac{P(A) \\times P(B | A)}{P(B)}\n   \\end{equation}\n```\n\n----------------------------------------\n\nTITLE: Adding Products to Request for Quotation in Odoo\nDESCRIPTION: Instructions for adding products to an RFQ in Odoo, including creating new products on the fly.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/rfq.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\nIn the :guilabel:`Products` tab, add the products to be ordered. Click :guilabel:`Add a product`,\nand type in the product name, or select the item from the drop-down menu.\n\nTo create a new product and add it, type the new product name in the :guilabel:`Product` column,\nselect :guilabel:`Create [product name]` from the resulting drop-down menu and manually add the unit\nprice. Alternatively, select :guilabel:`Create and edit...` to be taken to the product form for that\nnew item.\n```\n\n----------------------------------------\n\nTITLE: Result of Scraping HTML to Plain Text in Odoo Field Cleaning\nDESCRIPTION: Shows the plain text output resulting from applying the 'Scrap HTML' action to the example HTML content using Odoo's Field Cleaning rules. It illustrates how HTML elements like headings and links are converted into a plain text representation, often using Markdown-like syntax for structure.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/productivity/data_cleaning.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.. code-block:: text\n   :caption: Plain text\n\n   **John Doe** Lorem ipsum dolor sit amet [1] .[1] https://example.com\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom SCSS Font in Odoo Theme (SCSS)\nDESCRIPTION: This snippet defines theme font configuration for a custom font (Proxima Nova) within $o-theme-font-configs. This makes the custom font available within the website's theme configuration, and allows associating additional style properties, such as custom base values for theme variables. Place inside primary_variables.scss, replacing the font family as needed.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/theming.rst#2025-04-23_snippet_9\n\nLANGUAGE: scss\nCODE:\n```\n$o-theme-font-configs: (\n   'Proxima Nova': (\n      'family':                         ('Proxima Nova', sans-serif),\n      'properties' : (\n         'base': (\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Text with 'string' Attribute in Odoo XML\nDESCRIPTION: This example demonstrates how to set the text label for a button using the 'string' attribute in Odoo XML. The 'string' attribute defines the button's visible text when no icon is present, or serves as alt text for the icon when one is used.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures/button_attribute_string.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<button type=\"object\" name=\"action_create_new\" string=\"Create document\"/>\n```\n\n----------------------------------------\n\nTITLE: Using we-button-group Element in XML\nDESCRIPTION: Shows how to format options as buttons next to each other using the we-button-group element with a label specified by the string attribute.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_42\n\nLANGUAGE: xml\nCODE:\n```\n<we-button-group string=\"Before\">...</we-button-group>\n```\n\n----------------------------------------\n\nTITLE: Mapping Quotation Deadline Documentation (Sales)\nDESCRIPTION: Maps the old documentation path for quotation deadlines under 'send_quotations' (`applications/sales/sales/send_quotations/deadline.rst`) to the new path under 'sales_quotations' (`applications/sales/sales/sales_quotations/deadline.rst`) within the Odoo Sales application documentation. Comment confirms the pattern `send_quotations/* --> sales_quotations/*`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/18.0.txt#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/sales/sales/send_quotations/deadline.rst applications/sales/sales/sales_quotations/deadline.rst                                     # sales/send_quotations/* --> sales/sales_quotations/*\n```\n\n----------------------------------------\n\nTITLE: Example Redirect Rule for Merged Files (Plaintext)\nDESCRIPTION: This snippet illustrates a redirect rule used when the content of one file (`administration/install/odoo_sh.rst`) is merged into another (`administration/odoo_sh.rst`), and the original file is deleted. It ensures users accessing the old file path are redirected to the consolidated page.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/MANUAL.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nadministration/install/odoo_sh.rst administration/odoo_sh.rst  # Move all information related to Odoo.sh on a single page\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal Odoo Model in Python\nDESCRIPTION: Provides a basic example of defining an Odoo model by creating a Python class that inherits from `odoo.models.Model` and setting the required `_name` attribute. The `_name` attribute defines the technical name used by Odoo to refer to the model and typically corresponds to the database table name (with underscores replacing dots).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/server_framework_101/03_basicmodel.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo import models\n\nclass TestModel(models.Model):\n    _name = \"test_model\"\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive for Added Product\nDESCRIPTION: Inserts and configures an image showing a product card after it has been added to an order\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/product_catalog.rst#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: product_catalog/added-product.png\n   :align: center\n   :alt: A product card for a product that has been added.\n```\n\n----------------------------------------\n\nTITLE: Adding New Amazon Marketplace\nDESCRIPTION: Instructions for adding a new Amazon marketplace to Odoo's database by creating a marketplace record with specific API identifiers, regions, and seller central URLs. The marketplace must be properly configured with the correct marketplace ID and region settings as per Amazon's documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/amazon_connector/setup.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Fields required for new marketplace:\nfields = {\n    'name': 'Amazon.<country_code>',  # e.g. Amazon.se\n    'api_identifier': '<Marketplace_ID>',\n    'region': '<Amazon_Region>',\n    'seller_central_url': '<Seller_Central_URL>'\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing ESC/POS Command ESC *\nDESCRIPTION: Refers to the 'ESC *' ESC/POS command, an alternative printing command supported by some Epson models (like TM-U220B) that are incompatible with 'GS v 0'. Using this command often requires specific parameters in the printer name (`__IMC`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/general/iot/devices/printer.rst#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nESC *\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Example Workflow for Coat Rack Product Improvement\nDESCRIPTION: This snippet creates an example workflow in ReStructuredText format demonstrating how a company might use Odoo apps to implement a product improvement process for a coat rack.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/workflows/continuous_improvement.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. admonition:: Example workflow: coat rack product improvement\n   :class: alert alert-success\n\n   *Wood Hut* is a manufacturer of fine wood products. They are committed to manufacturing products\n   of the highest-possible quality, and are always looking for ways to improve the products they\n   sell, along with the processes used to create them.\n\n   Wood Hut uses the Odoo platform to manage every element of their production, fulfillment, and\n   customer satisfaction processes. They have developed a custom product improvement workflow that\n   incorporates the Helpdesk, Quality, PLM, and Manufacturing apps.\n\n   One of Wood Hut's most popular products is their *coat rack*. It's made entirely of oak, and\n   customers describe it as \"sleek and elegant.\" However, recent customer feedback about the coat\n   rack has brought attention to quality issues that necessitate revising the current manufacturing\n   process.\n\n   The product revision workflow begins when the customer service team receives a ticket in the\n   Helpdesk app from a customer having problems with the coat rack she purchased. The customer,\n   Abigail Peterson, has found that her coat rack falls over when more than five coats are hanging\n   from it. This is a major issue, as the coat rack has enough dowels for six coats.\n\n   .. image:: continuous_improvement/helpdesk-ticket.png\n      :align: center\n```\n\n----------------------------------------\n\nTITLE: Example Default Customer Credit Note Number\nDESCRIPTION: Provides an example of the default numbering format Odoo assigns to the first customer credit note if a specific number isn't manually set during creation. The format includes a prefix 'NotCr', emission entity, emission point, and a sequence number.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/ecuador.rst#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nNotCr 001-001-000000001\n```\n\n----------------------------------------\n\nTITLE: Defining the Client Action Record in Odoo (XML)\nDESCRIPTION: This XML snippet defines an `ir.actions.client` record in Odoo. It registers a new client action with a specific name ('My Client Action') and a unique tag ('my_module.MyClientAction'). This tag is used to link the action record to its corresponding JavaScript implementation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/javascript_client_action.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<record model=\"ir.actions.client\" id=\"my_client_action\">\n    <field name=\"name\">My Client Action</field>\n    <field name=\"tag\">my_module.MyClientAction</field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: List View Root Element Configuration in Odoo\nDESCRIPTION: Shows the basic structure of a list view in Odoo XML with its root element. The list view (formerly called tree) is used to display data in tabular format.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<list>\n    ...\n</list>\n```\n\n----------------------------------------\n\nTITLE: Creating an Important Note in RST Documentation\nDESCRIPTION: This RST directive creates an important note box about deleting stages with existing applicants.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment.rst#2025-04-23_snippet_7\n\nLANGUAGE: rst\nCODE:\n```\n.. important::\n   If there are applicants currently in the stage being deleted, an error pops up when attempting to\n   delete the stage. The records currently in the stage to need to be either deleted, archived, or\n   moved to a different stage before the stage can be deleted.\n```\n\n----------------------------------------\n\nTITLE: Mapping Vantiv Terminal Documentation (Point of Sale)\nDESCRIPTION: Maps the old documentation path for Vantiv payment terminals (`content/applications/sales/point_of_sale/payment_methods/terminals/vantiv.rst`) to the consolidated terminals documentation path (`content/applications/sales/point_of_sale/payment_methods/terminals.rst`) within the Odoo Point of Sale application documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/18.0.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ncontent/applications/sales/point_of_sale/payment_methods/terminals/vantiv.rst content/applications/sales/point_of_sale/payment_methods/terminals.rst\n```\n\n----------------------------------------\n\nTITLE: Styling we-button with Icons in XML\nDESCRIPTION: Shows how to enhance we-button elements with icons and additional attributes for better user experience. This example adds a FontAwesome icon and a title attribute.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/building_blocks.rst#2025-04-23_snippet_40\n\nLANGUAGE: xml\nCODE:\n```\n<we-button\n   class=\"fa fa-fw fa-angle-double-right\"\n   title=\"Move to last\"\n   data-position=\"last\" />\n```\n\n----------------------------------------\n\nTITLE: Adding a Tip Box in reStructuredText\nDESCRIPTION: Creates a tip box in the documentation to provide additional guidance on creating new Knowledge articles and sharing them.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/helpdesk/overview/help_center.rst#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. tip::\n   To create a new article, go to the :menuselection:`Knowledge app`, then hover the cursor next to\n   the :guilabel:`Workspace` section heading, located in the left sidebar. Moving the cursor there\n   reveals a hidden |plus|.\n\n   Click the |plus| to create a new article in the :guilabel:`Workspace`. Click the\n   :icon:`fa-share-alt` :guilabel:`Share` icon, and slide the :guilabel:`Share to Web` toggle switch\n   until it reads :guilabel:`Article Published`. It can then be added to a **Helpdesk** team.\n```\n\n----------------------------------------\n\nTITLE: Including Nested Bundles in Odoo Assets (Python)\nDESCRIPTION: Explains how to include the contents of one asset bundle within another using the `include` directive in the `__manifest__.py`. This helps reuse asset lists (often prefixed with '_') and organize the manifest, using the syntax `('include', <bundle_name>)`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/assets.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n'web.assets_common': [\n    ('include', 'web._primary_variables'),\n],\n```\n\n----------------------------------------\n\nTITLE: Documenting Attendance Reporting in reStructuredText\nDESCRIPTION: This snippet demonstrates how to document the attendance reporting features using reStructuredText. It includes information on viewing reports, adjusting filters, and changing chart types.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/attendances.rst#2025-04-23_snippet_4\n\nLANGUAGE: reStructuredText\nCODE:\n```\nReporting\n=========\n\nTo view attendance reports, click :guilabel:`Reporting` in the top menu. The default report displays\neach employee's attendance information for the past 3 months, in a :guilabel:`Line Chart`.\n\nThe default view is a :guilabel:`Graph`. To view the data in a pivot table, click the\n:guilabel:`Pivot Table` button on the top right of the report. To switch back to the graph view,\nclick the :guilabel:`Graph` button, located next to the :guilabel:`Pivot Table` button.\n\nTo present different information, adjust the :ref:`filters and groups <attendances/filters-groups>`\nin the same way as in the :guilabel:`Overview` dashboard.\n\nThe data can be presented in either a :guilabel:`Bar Chart`, :guilabel:`Line Chart`, :guilabel:`Pie\nChart`, :guilabel:`Stacked` chart, or in :guilabel:`Descending` or :guilabel:`Ascending` order. To\nchange the view to any of these charts, click the corresponding button above the displayed chart.\n\nTo change the :guilabel:`Measures`, click the :guilabel:`Measures` button and select the desired\nmeasure from the drop-down menu.\n\nThe report can also be inserted into a spreadsheet. Click the :guilabel:`Insert in Spreadsheet`\nbutton and a pop-up appears. Select the desired spreadsheet, and click :guilabel:`Confirm`.\n```\n\n----------------------------------------\n\nTITLE: Defining AccountReportLine Model Fields - Python/RST\nDESCRIPTION: Auto-documentation directives for the AccountReportLine model fields in Odoo, including core properties like name, expressions, hierarchy, and display settings.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/standard_modules/account/account_report_line.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodel:: odoo.addons.account.models.account_report.AccountReportLine\n    :main:\n\n    .. autofield:: name\n    .. autofield:: expression_ids\n    .. autofield:: report_id\n    .. autofield:: hierarchy_level\n    .. autofield:: parent_id\n    .. autofield:: children_ids\n    .. autofield:: foldable\n    .. autofield:: print_on_new_page\n    .. autofield:: action_id\n    .. autofield:: hide_if_zero\n```\n\n----------------------------------------\n\nTITLE: Unsupported Number Formats\nDESCRIPTION: Examples of number formats that will not work in Odoo import.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials/export_import_data.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nABC 32.000,00\n$ (32.000,00)\n```\n\n----------------------------------------\n\nTITLE: Including an Image with Alt Text in reStructuredText\nDESCRIPTION: Inserts an image into the document using reStructuredText syntax, specifying the file path and alt text for the Knowledge search window.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/helpdesk/overview/help_center.rst#2025-04-23_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: help_center/help-center-knowledge-search.png\n   :alt: View of knowledge search window from a helpdesk ticket.\n```\n\n----------------------------------------\n\nTITLE: Basic Form View Structure (XML)\nDESCRIPTION: Shows the basic structure of a form view in Odoo, with the root element 'form'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n    ...\n</form>\n```\n\n----------------------------------------\n\nTITLE: Setting readonly Attribute for Odoo Fields in XML\nDESCRIPTION: This snippet demonstrates how to use the 'readonly' attribute in Odoo XML field definitions. It shows two examples: one where the field is always read-only, and another where the read-only state depends on a Python expression.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures/field_attribute_readonly.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"fname_a\" readonly=\"True\"/>\n<field name=\"fname_b\" readonly=\"name_a in [fname_b, parent.fname_d]\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding See Also Section in reStructuredText\nDESCRIPTION: This snippet demonstrates how to add a 'See Also' section with links to related documentation using reStructuredText syntax.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/attendances.rst#2025-04-23_snippet_6\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. seealso::\n   - :doc:`attendances/check_in_check_out`\n   - :doc:`attendances/kiosks`\n   - :doc:`attendances/hardware`\n```\n\n----------------------------------------\n\nTITLE: Mapping VoIP Transfer/Forward Documentation (Productivity)\nDESCRIPTION: Maps the old documentation path for transferring/forwarding calls in VoIP (`applications/productivity/voip/transfer_forward.rst`) to the consolidated VoIP widget documentation (`applications/productivity/voip/voip_widget.rst`) within the Odoo Productivity application documentation. Comment indicates the general move from `transfer_forward` to `voip_widget`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/18.0.txt#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/productivity/voip/transfer_forward.rst applications/productivity/voip/voip_widget.rst # voip/transfer_forward --> voip/voip_widget\n```\n\n----------------------------------------\n\nTITLE: Switching Git Branches for Odoo and Enterprise\nDESCRIPTION: Demonstrates how to switch the current working branch in both the core Odoo repository (`$HOME/src/odoo`) and the Enterprise repository (`$HOME/src/enterprise`) using the `git switch {BRANCH}` command. It's crucial to keep both repositories synchronized on the same branch for development consistency.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/setup_guide.rst#2025-04-23_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ cd $HOME/src/odoo\n$ git switch {BRANCH}\n\n$ cd $HOME/src/enterprise\n$ git switch {BRANCH}\n```\n\n----------------------------------------\n\nTITLE: Example Redirect Rule for Moved File (Plaintext)\nDESCRIPTION: This example shows a redirect rule for a source file moved from one directory to another. It redirects accesses from the old location `developer/misc/guidelines.rst` to the new location `contributing/develop/guidelines.rst`. A comment explains the reason for the move.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/MANUAL.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndeveloper/misc/guidelines.rst contributing/develop/guidelines.rst  # Move all guidelines in contributing/\n```\n\n----------------------------------------\n\nTITLE: Configuring Float Toggle Widget in XML\nDESCRIPTION: Shows how to use the float_toggle widget to create a button that cycles through predefined values for a float field. It includes options for setting a conversion factor and the range of allowed values.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_reference.rst#2025-04-23_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"days_to_close\" widget=\"float_toggle\" options=\"{'factor': 2, 'range': [0, 4, 8]}\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Widget Multiplication Implementation\nDESCRIPTION: Example of a custom form widget that multiplies two field values and displays the result.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.WidgetMultiplication = instance.web.form.FormWidget.extend({\n    start: function() {\n        this._super();\n        this.field_manager.on(\"field_changed:integer_a\", this, this.display_result);\n        this.field_manager.on(\"field_changed:integer_b\", this, this.display_result);\n        this.display_result();\n    },\n    display_result: function() {\n        var result = this.field_manager.get_field_value(\"integer_a\") *\n                     this.field_manager.get_field_value(\"integer_b\");\n        this.$el.text(\"a*b = \" + result);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Gantt View in Odoo XML\nDESCRIPTION: Example of a Gantt chart view showing project planning. The view sets start and end dates, a progress field, and groups data by inventor_id by default. This requires the enterprise edition module web_gantt.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/backend.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<gantt string=\"Ideas\"\n       date_start=\"invent_date\"\n       date_stop=\"date_finished\"\n       progress=\"progress\"\n       default_group_by=\"inventor_id\" />\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Blocks for Multi-Currency Configuration\nDESCRIPTION: ReStructuredText documentation blocks defining configuration steps and settings for Odoo's multi-currency system, including main currency setup, foreign currency enablement, and exchange rate configuration.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/get_started/multi_currency.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _multi-currency/config:\n\nConfiguration\n=============\n\n.. _multi-currency/config-main-currency:\n\nMain currency\n-------------\n\nThe **main currency** is defined by default according to the company's country. You can change it by\ngoing to :menuselection:`Accounting --> Configuration --> Settings --> Currencies` and changing the\ncurrency in the :guilabel:`Main Currency` setting.\n```\n\n----------------------------------------\n\nTITLE: Defining Access Rights in Odoo CSV\nDESCRIPTION: Example CSV file for defining access rights to models. Each line specifies permissions (read, write, create, unlink) for a specific model and user group combination.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/backend.rst#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nid,name,model_id/id,group_id/id,perm_read,perm_write,perm_create,perm_unlink\naccess_idea_idea,idea.idea,model_idea_idea,base.group_user,1,1,1,0\naccess_idea_vote,idea.vote,model_idea_vote,base.group_user,1,1,1,0\n```\n\n----------------------------------------\n\nTITLE: Displaying Individual Time Off Deferral in Odoo\nDESCRIPTION: This RST snippet shows an image of the time off details for an individual request that needs to be deferred in Odoo. It includes the image path, alignment, and alt text.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll/work_entries.rst#2025-04-23_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: work_entries/single-defer.png\n   :align: center\n   :alt: The time off details for an individual request that needs to be deferred.\n```\n\n----------------------------------------\n\nTITLE: Including Custom CSS and JavaScript Files for Accounting Documentation\nDESCRIPTION: Code specifying the custom CSS and JavaScript files to be included in the accounting documentation page. These files likely contain styling and interactive functionality for various accounting demonstrations.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/get_started/cheat_sheet.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n:code-column:\n:custom-css: accounting.css\n:custom-js: accounts.js,chart-of-accounts.js,entries.js,misc.js,reconciliation.js\n```\n\n----------------------------------------\n\nTITLE: Example Commit Messages for Odoo Documentation - Text\nDESCRIPTION: This snippet provides practical examples of well-structured commit messages according to the Odoo documentation standards, illustrating correct tag usage ([REF], [FIX]), message header construction, and referencing related issues. Each message includes a header, detailed explanation, and relation to tasks or pull requests. These examples serve as templates for contributors. No dependencies, intended for educational and reference use.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/git_guidelines.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[REF] models: use `parent_path` to implement parent_store\n\n This replaces the former modified preorder tree traversal (MPTT) with the\n fields `parent_left`/`parent_right`[...]\n\n[FIX] account: remove frenglish\n\n  [...]\n\n  Closes #22793\n  Fixes #22769\n\n[FIX] website: remove unused alert div, fixes look of input-group-btn\n\n  Bootstrap's CSS depends on the input-group-btn\n  element being the first/last child of its parent.\n  This was not the case because of the invisible\n  and useless alert.\n```\n\n----------------------------------------\n\nTITLE: Mapping Odoo Documentation File Paths\nDESCRIPTION: This snippet shows the changes in file structure for Odoo's inventory and MRP documentation. Each line represents a file that has been moved or renamed, with the old path on the left and the new path on the right. Comments at the end of some lines provide additional context about the changes.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/16.0.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/inventory_and_mrp/inventory/warehouses_storage/inventory_valuation/integrating_landed_costs.rst applications/inventory_and_mrp/inventory/product_management/inventory_valuation/integrating_landed_costs.rst     # /inventory_and_mrp/inventory/warehouses_storage/inventory_valuation/* -> /inventory_and_mrp/inventory/product_management/inventory_valuation/*\napplications/inventory_and_mrp/inventory/management/inventory_adjustments/cycle_counts.rst applications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/cycle_counts.rst                         # /inventory_and_mrp/inventory/management/inventory_adjustments/cycle_counts -> /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/*\napplications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/cycle_counts.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/cycle_counts.rst                  # /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/cycle_counts -> /inventory_and_mrp/inventory/warehouses_storage/inventory_management/cycle_counts\napplications/inventory_and_mrp/inventory/management/misc.rst applications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse.rst                                                                    # /inventory_and_mrp/inventory/management/misc -> /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse\napplications/inventory_and_mrp/inventory/management/misc/owned_stock.rst applications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/owned_stock.rst                                            # /inventory_and_mrp/inventory/management/misc/* -> /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/*\napplications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/owned_stock.rst applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/owned_stock.rst                        # /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/owned_stock -> /inventory_and_mrp/inventory/shipping_receiving/daily_operations/owned_stock\napplications/inventory_and_mrp/inventory/management/misc/batch_transfers.rst applications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/batch_transfers.rst                                    # /inventory_and_mrp/inventory/management/misc/* -> /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/*\napplications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/batch_transfers.rst applications/inventory_and_mrp/inventory/shipping_receiving/picking_methods/batch.rst                           # /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/batch_transfers -> /inventory_and_mrp/inventory/shipping_receiving/picking_methods/batch\napplications/inventory_and_mrp/inventory/management/misc/wave_transfers.rst applications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/wave_transfers.rst                                      # /inventory_and_mrp/inventory/management/misc/* -> /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/*\napplications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/wave_transfers.rst applications/inventory_and_mrp/inventory/shipping_receiving/picking_methods/wave.rst                             # /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/wave_transfers -> inventory_and_mrp/inventory/shipping_receiving/picking_methods/wave\napplications/inventory_and_mrp/inventory/management/misc/cluster_picking.rst applications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/cluster_picking.rst                                    # /inventory_and_mrp/inventory/management/misc/* -> /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/*\napplications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/cluster_picking.rst applications/inventory_and_mrp/inventory/shipping_receiving/picking_methods/cluster.rst                         # inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/cluster_picking -> /inventory_and_mrp/inventory/shipping_receiving/picking_methods/cluster\napplications/inventory_and_mrp/inventory/routes.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/advanced_operations_warehouse.rst                                                        # /inventory_and_mrp/inventory/routes -> /inventory_and_mrp/inventory/warehouses_storage/inventory_management/advanced_operations_warehouse\napplications/inventory_and_mrp/inventory/routes/concepts.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/advanced_operations_warehouse.rst                                               # /inventory_and_mrp/inventory/routes/concepts -> /inventory_and_mrp/inventory/warehouses_storage/inventory_management/advanced_operations_warehouse\napplications/inventory_and_mrp/inventory/routes/concepts/cross_dock.rst applications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/cross_dock.rst                                              # /inventory_and_mrp/inventory/routes/concepts/cross_dock -> /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/*\napplications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/cross_dock.rst applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/cross_dock.rst                          # /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/cross_dock -> /inventory_and_mrp/inventory/shipping_receiving/daily_operations/cross_dock\napplications/inventory_and_mrp/inventory/routes/concepts/stock_warehouses.rst applications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/stock_warehouses.rst                                  # /inventory_and_mrp/inventory/routes/concepts/stock_warehouses -> /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/*\napplications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/stock_warehouses.rst applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/stock_warehouses.rst              # /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/stock_warehouses -> /inventory_and_mrp/inventory/shipping_receiving/daily_operations/stock_warehouses\napplications/inventory_and_mrp/inventory/routes/strategies.rst applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/advanced_operations_warehouse.rst                                             # /inventory_and_mrp/inventory/routes/strategies -> /inventory_and_mrp/inventory/warehouses_storage/inventory_management/advanced_operations_warehouse\napplications/inventory_and_mrp/inventory/routes/strategies/putaway.rst applications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/putaway.rst                                                  # /inventory_and_mrp/inventory/routes/strategies/* -> /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/*\napplications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/putaway.rst applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/putaway.rst                                # /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/putaway -> /inventory_and_mrp/inventory/shipping_receiving/daily_operations/putaway\napplications/inventory_and_mrp/inventory/routes/strategies/removal.rst applications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/removal.rst                                                  # /inventory_and_mrp/inventory/routes/strategies/* -> /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/*\napplications/inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/removal.rst applications/inventory_and_mrp/inventory/shipping_receiving/removal_strategies.rst                                      # /inventory_and_mrp/inventory/warehouses_storage/advanced_operations_warehouse/removal -> /inventory_and_mrp/inventory/shipping_receiving/removal_strategies\napplications/inventory_and_mrp/inventory/management/products/usage.rst applications/inventory_and_mrp/inventory/product_management/product_replenishment/uom.rst                                                              # /inventory_and_mrp/inventory/management/products/usage -> /inventory_and_mrp/inventory/product_management/product_replenishment/uom\napplications/inventory_and_mrp/inventory/shipping.rst applications/inventory_and_mrp/inventory/shipping_receiving.rst                                                                                                         # /inventory_and_mrp/inventory/shipping -> /inventory_and_mrp/inventory/shipping_receiving\napplications/inventory_and_mrp/inventory/shipping/setup.rst applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration.rst                                                                               # /inventory_and_mrp/inventory/shipping/setup -> /inventory_and_mrp/inventory/shipping_receiving/setup_configuration\napplications/inventory_and_mrp/inventory/shipping/setup/delivery_method.rst applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/delivery_method.rst                                               # /inventory_and_mrp/inventory/shipping/setup/* -> /inventory_and_mrp/inventory/shipping_receiving/setup_configuration/*\n```\n\n----------------------------------------\n\nTITLE: Setting Work Center Operating Cost per Hour in Odoo\nDESCRIPTION: Details how to set the hourly operating cost specifically for the work center itself (excluding labor). This is done by entering a value in the 'per workcenter' field within the 'Cost per hour' section on the work center's configuration form.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/basic_setup/mo_costs.rst#2025-04-23_snippet_4\n\nLANGUAGE: Odoo Configuration\nCODE:\n```\nenter a value in the :guilabel:`per\nworkcenter` field, located beside the :guilabel:`Cost per hour` section on the work center's\n:guilabel:`General Information` tab.\n```\n\n----------------------------------------\n\nTITLE: Python Module Manifest Configuration\nDESCRIPTION: Manifest file configuration showing how to include JavaScript assets in an Odoo module. Specifies the JavaScript tour file to be included in the web.assets_backend bundle.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/importable_modules.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"name\": \"Real Estate\",\n    # [...]\n    \"assets\": {\n        \"web.assets_backend\": [\n            \"estate/static/src/js/tour.js\",\n        ],\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Directive for LaTeX Spacing\nDESCRIPTION: Defines custom LaTeX spacing commands for document formatting using RestructuredText directives\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/legal/terms/partnership.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. |vnegspace| raw:: latex\n\n        \\vspace{-.5cm}\n\n.. |vspace| raw:: latex\n\n        \\vspace{.8cm}\n\n.. |hspace| raw:: latex\n\n        \\hspace{4cm}\n```\n\n----------------------------------------\n\nTITLE: Creating RST Table of Contents for Pricing Features\nDESCRIPTION: ReStructuredText directive that creates a table of contents linking to various pricing-related documentation pages in Odoo. The titlesonly option displays only the main section titles.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/point_of_sale/pricing.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   pricing/discounts\n   pricing/discount_tags\n   pricing/loyalty\n   pricing/pricelists\n   pricing/fiscal_position\n   pricing/cash_rounding\n   pricing/electronic_labels\n```\n\n----------------------------------------\n\nTITLE: Calculating Unpaid Leave Deductions in UAE Payroll\nDESCRIPTION: Formula for calculating the amount to be deducted when an employee takes unpaid leave. It takes the product of unpaid leave days and gross monthly salary, then divides by 30.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll/payroll_localizations/united_arab_emirates.rst#2025-04-23_snippet_2\n\nLANGUAGE: math\nCODE:\n```\n\\frac{\\text{Total Number of Unpaid Leave Days} \\times \\text{Gross Per Month}}{30}\n```\n\n----------------------------------------\n\nTITLE: Logging Odoo Events to Database via Command-line\nDESCRIPTION: Enables logging messages to the `ir.logging` model (stored in the `ir_logging` table) within a specified database. The database can be a local database name or a full PostgreSQL URI for remote logging.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/cli.rst#2025-04-23_snippet_30\n\nLANGUAGE: console\nCODE:\n```\n--log-db <dbname>\n```\n\n----------------------------------------\n\nTITLE: Creating an Example Block in RST\nDESCRIPTION: Demonstrates how to create an example block in reStructuredText, explaining the comparison feature in the Production Analysis report.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials/search.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. example::\n   In the :guilabel:`Production Analysis` report of the :menuselection:`Manufacturing` app, data for\n   the second quarter of 2024 is compared to data for the second quarter of 2023. :guilabel:`Q2` is\n   selected in the :guilabel:`End Date` filter section of the search bar drop-down\n   menu. In the :guilabel:`Comparison` section, :guilabel:`End Date: Previous Year` is selected.\n\n   The current year is 2024, so the larger circle shows data for the second quarter (Q2) of 2024.\n   The smaller circle shows data for the second quarter (Q2) of 2023, which is the same time period,\n   but one *year* prior.\n\n   If :guilabel:`End Date: Previous Period` is selected instead, the smaller circle shows data for\n   the first quarter (Q1) of 2024, which is the same time period, but one *period* prior.\n\n   .. image:: search/comparison.png\n      :alt: The comparison view of the Production Analysis report.\n```\n\n----------------------------------------\n\nTITLE: Mapping File Redirects in Odoo Documentation - Bash/Text\nDESCRIPTION: This snippet provides a list of source and destination documentation files, formatted as space-separated pairs. Inline Bash-style comments offer context for each mapping and describe grouping logic or redirect intent. There are no executable commands present, but the format is suitable for parsing by scripts or processed by migration tools. Key parameters include the paths to the .rst documentation files, and the output is intended for contributing to an updated documentation structure.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/17.0.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napplications/inventory_and_mrp/manufacturing/workflows/subcontracting_resupply.rst applications/inventory_and_mrp/manufacturing/subcontracting/subcontracting_resupply.rst        # workflows/* --> subcontracting/*\napplications/inventory_and_mrp/manufacturing/workflows/allocation.rst applications/inventory_and_mrp/manufacturing/reporting/allocation.rst\napplications/inventory_and_mrp/manufacturing/workflows/oee.rst applications/inventory_and_mrp/manufacturing/reporting/oee.rst\napplications/inventory_and_mrp/manufacturing/workflows/production_analysis.rst applications/inventory_and_mrp/manufacturing/reporting/production_analysis.rst\n\n# applications/marketing\n\napplications/marketing/events/event_essentials.rst applications/marketing/events.rst    # events/event_essentials --> events\napplications/marketing/marketing_automation/getting_started.rst applications/marketing/marketing_automation.rst                                           # getting_started --> marketing_automation\napplications/marketing/marketing_automation/advanced.rst applications/marketing/marketing_automation.rst                                                  # advanced --> marketing_automation\napplications/marketing/marketing_automation/advanced/understanding_metrics.rst applications/marketing/marketing_automation/understanding_metrics.rst      # advanced/* --> marketing_automation/*\napplications/marketing/marketing_automation/getting_started/first_campaign.rst applications/marketing/marketing_automation.rst                            # getting_started/first_campaign --> marketing_automation\napplications/marketing/marketing_automation/getting_started/target_audience.rst applications/marketing/marketing_automation/target_audience.rst           # getting_started/* --> marketing_automation/*\napplications/marketing/marketing_automation/getting_started/testing_running.rst applications/marketing/marketing_automation/testing_running.rst           # getting_started/* --> marketing_automation/*\napplications/marketing/marketing_automation/getting_started/workflow_activities.rst applications/marketing/marketing_automation/workflow_activities.rst   # getting_started/* --> marketing_automation/*\napplications/marketing/social_marketing/essentials.rst applications/marketing/social_marketing.rst                                                        # /marketing/social_marketing/essentials --> /marketing/social_marketing\napplications/marketing/social_marketing/essentials/social_posts.rst applications/marketing/social_marketing/social_posts.rst                              # /marketing/social_marketing/essentials --> /marketing/social_marketing\napplications/marketing/social_marketing/essentials/social_campaigns.rst applications/marketing/social_marketing/social_campaigns.rst                      # /marketing/social_marketing/essentials --> /marketing/social_marketing\napplications/marketing/sms_marketing/essentials.rst applications/marketing/sms_marketing.rst                                                              # /marketing/sms_marketing/essentials --> /marketing/sms_marketing\napplications/marketing/sms_marketing/essentials/sms_essentials.rst applications/marketing/sms_marketing.rst                                               # /marketing/sms_marketing/essentials --> /marketing/sms_marketing\napplications/marketing/sms_marketing/essentials/sms_campaign_settings.rst applications/marketing/sms_marketing.rst                                        # /marketing/sms_marketing/essentials --> /marketing/sms_marketing\napplications/marketing/sms_marketing/essentials/mailing_lists_blacklists.rst applications/marketing/sms_marketing/mailing_lists_blacklists.rst            # /marketing/sms_marketing/essentials --> /marketing/sms_marketing\napplications/marketing/sms_marketing/pricing.rst applications/marketing/sms_marketing/pricing_and_faq.rst                                                 # /marketing/sms_marketing/pricing --> /marketing/sms_marketing\napplications/marketing/sms_marketing/pricing/pricing_and_faq.rst applications/marketing/sms_marketing/pricing_and_faq.rst                                 # /marketing/sms_marketing/pricing --> /marketing/sms_marketing\napplications/marketing/surveys/essentials.rst applications/marketing/surveys.rst  \t\t\t\t  #/marketing/surveys/essentials --> /marketing/surveys\napplications/marketing/surveys/time_random.rst applications/marketing/surveys/questions.rst   # time_random --> questions\n\n# applications/sales\n\napplications/sales/crm/acquire_leads/generate_leads.rst applications/sales/crm/acquire_leads/email_manual.rst                                             #generate_leads --> email_manual\napplications/sales/crm/pipeline/multi_sales_team.rst applications/sales/crm/pipeline/manage_sales_teams.rst                                               # multi_sales_team --> manage_sales_teams\napplications/sales/point_of_sale/pricing/digital_labels.rst applications/sales/point_of_sale/pricing/electronic_labels.rst                                # digital_labels --> electronic_labels\napplications/sales/point_of_sale/payment_methods/terminals/vantiv.rst applications/sales/point_of_sale/payment_methods/terminals.rst\t\t\t# terminals/vantiv --> terminals\n\n# applications/services\n\napplications/services/helpdesk/overview/getting_started.rst applications/services/helpdesk.rst                                                            #helpdesk/overview/getting_started --> helpdesk\napplications/services/project/tasks/email_alias.rst applications/services/project/tasks/task_creation.rst                                                 #project/tasks/email_alias --> task_creation\napplications/services/field_service/default_warehouse.rst applications/services/field_service/product_management.rst                                                 #project/tasks/email_alias --> task_creation\napplications/services/field_service/onsite_interventions.rst applications/services/field_service/creating_tasks.rst\n\n# applications/website\n\napplications/websites/ecommerce/managing_products/products.rst applications/websites/ecommerce/products.rst\napplications/websites/ecommerce/managing_products/catalog.rst applications/websites/ecommerce/products/catalog.rst\napplications/websites/ecommerce/managing_products/variants.rst applications/websites/ecommerce/products/variants.rst\napplications/websites/ecommerce/managing_products/price_management.rst applications/websites/ecommerce/products/price_management.rst\napplications/websites/ecommerce/managing_products/cross_upselling.rst applications/websites/ecommerce/products/cross_upselling.rst\napplications/websites/ecommerce/ecommerce_management/order_handling.rst applications/websites/ecommerce/order_handling.rst\napplications/websites/ecommerce/ecommerce_management/customer_accounts.rst applications/websites/ecommerce/customer_accounts.rst\napplications/websites/ecommerce/ecommerce_management/customer_interaction.rst applications/websites/website/web_design/building_blocks.rst\napplications/websites/ecommerce/ecommerce_management/performance.rst applications/websites/ecommerce/performance.rst\napplications/websites/ecommerce/checkout_payment_shipping/cart.rst applications/websites/ecommerce/cart.rst\napplications/websites/ecommerce/checkout_payment_shipping/checkout.rst applications/websites/ecommerce/checkout.rst\napplications/websites/ecommerce/checkout_payment_shipping/payments.rst applications/websites/ecommerce/payments.rst\napplications/websites/ecommerce/checkout_payment_shipping.rst applications/websites/ecommerce.rst\napplications/websites/ecommerce/ecommerce_management.rst applications/websites/ecommerce.rst\n\n# applications/finance\n\napplications/finance/accounting/get_started/vat_units.rst applications/finance/accounting/get_started/tax_units.rst                                        # vat_units --> tax_units\napplications/finance/accounting/taxes/taxcloud.rst applications/finance/accounting/taxes.rst                                                             # taxcloud --> taxes\n\n# contributing/documentation\n\ncontributing/documentation/rst_cheat_sheet.rst contributing/documentation/rst_guidelines.rst\n```\n\n----------------------------------------\n\nTITLE: Displaying Payslip Generation Information in Odoo\nDESCRIPTION: This RST snippet shows an image of the information that appears when generating payslips in Odoo. It includes the image path, alignment, and alt text.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll/work_entries.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: work_entries/generate-payslips.png\n   :align: center\n   :alt: Information that appears when generating payslips.\n```\n\n----------------------------------------\n\nTITLE: Describing Odoo Report Directory Structure - plaintext - text\nDESCRIPTION: This example shows the recommended structure for Python/SQL statistical reports and printable report definitions in an Odoo module. It distinguishes between files for Python logic, views, report actions, and QWeb templates, thereby guiding the logical separation of report-related components.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\naddons/plant_nursery/\n|-- report/\n|   |-- plant_order_report.py\n|   |-- plant_order_report_views.xml\n```\n\n----------------------------------------\n\nTITLE: Mapping Customer Invoice Process Overview Path (plaintext)\nDESCRIPTION: Maps the old documentation path for the customer invoice process overview to the main customer invoices documentation file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/getting_started/process_overview/customer_invoice.rst applications/finance/accounting/customer_invoices.rst        # getting_started/process_overview/customer_invoice -> customer_invoices\n```\n\n----------------------------------------\n\nTITLE: Calculating Out of Contract Days in UAE Payroll\nDESCRIPTION: Formula for calculating the deduction for days before/after the contract period that overlap with the payslip period. It divides the product of out of contract days and gross monthly salary by the number of days in the current month.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll/payroll_localizations/united_arab_emirates.rst#2025-04-23_snippet_3\n\nLANGUAGE: math\nCODE:\n```\n\\frac{\\text{Total Number of Unpaid Leave Days} \\times \\text{Gross Per Month}}{\\text{Number of Days in Current Month}}\n```\n\n----------------------------------------\n\nTITLE: Note RST Block for Quotation Status Changes\nDESCRIPTION: ReStructuredText note block explaining visibility of delivered and invoiced quantities after quotation confirmation\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/invoicing/invoicing_policy.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n   Once a quotation is confirmed, and the status changes from :guilabel:`Quotation sent` to\n   :guilabel:`Sales order`, the delivered and invoiced quantities are available to view, directly\n   from the sales order. This is true for both invoicing policy rule options.\n```\n\n----------------------------------------\n\nTITLE: Setting Required Field Attributes in Odoo XML Views\nDESCRIPTION: Example demonstrating how to use the 'required' attribute in Odoo XML field definitions. Shows both unconditional requirement (True) and conditional requirement based on a Python expression.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures/field_attribute_required.rst#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"fname_a\" required=\"True\"/>\n<field name=\"fname_b\" required=\"fname_c != 3\"/>\n```\n\n----------------------------------------\n\nTITLE: Mapping Average Price Valuation Path (plaintext)\nDESCRIPTION: Maps the old documentation path for average price valuation under 'others/inventory' to a new path under 'get_started'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/others/inventory/avg_price_valuation.rst applications/finance/accounting/get_started/avg_price_valuation.rst       # others/inventory/* -> get_started/*\n```\n\n----------------------------------------\n\nTITLE: Updating Odoo XML Template to Use t-field for Editable Content\nDESCRIPTION: This XML snippet updates the biography template to use t-field directives, allowing in-place editing of the teacher's name and biography on the website.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/website.rst#2025-04-23_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<div class=\"oe_structure\">\n    <div class=\"container\">\n        <h3 t-field=\"person.name\"/>\n        <div t-field=\"person.biography\"/>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Tip Block for Multiple Measure Selection\nDESCRIPTION: Creates a 'tip' block explaining how to select multiple measures in different report views.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/advanced/analyze.rst#2025-04-23_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. tip::\n   Only one measure can be selected at a time when one of the :icon:`fa-area-chart`\n   :guilabel:`(graph view)` options is enabled. However, multiple measures, and varying group-by\n   criteria (on the x and y axes), can be selected when using the :icon:`oi-view-pivot`\n   :guilabel:`(pivot table)`.\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Substitution for Pivot View Icon\nDESCRIPTION: This reStructuredText directive defines a substitution named 'pivot'. When `|pivot|` is used, it's replaced by the Odoo 'oi-view-pivot' icon and the text '(pivot) icon', ensuring consistent representation of the pivot view icon within the documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/crm/performance/forecast_report.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. |pivot| replace:: :icon:`oi-view-pivot` :guilabel:`(pivot)` icon\n```\n\n----------------------------------------\n\nTITLE: RST Image Directive for Status Interface\nDESCRIPTION: ReStructuredText directive to display the status interface screenshot, centered on the page.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/status.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: status/interface-status.png\n   :align: center\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Replacements for Manufacturing Order Abbreviations\nDESCRIPTION: Defines reStructuredText replacements for the abbreviations 'MO' (Manufacturing Order) and 'MOs' (Manufacturing Orders) to be used throughout the document.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/workflows/manufacture_lots_serials.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |MO| replace:: :abbr:`MO (Manufacturing Order)`\n.. |MOs| replace:: :abbr:`MOs (Manufacturing Orders)`\n```\n\n----------------------------------------\n\nTITLE: Declaring Block-Scoped SCSS Variables - SCSS - SCSS\nDESCRIPTION: Demonstrates how to declare and use block-scoped SCSS variables using the Odoo convention (`$-[variable name]`). The SCSS shows a parent block declaring a variable that is accessible inside nested child selectors, enabling fine-grained reuse within a single component. No external dependencies required. Expected input is SCSS structure; output is compiled CSS with the in-block variable values applied. This pattern should only be used within the scope of a single selector.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n.o_element {\n   $-inner-gap: compute-something;\n\n   margin-right: $-inner-gap;\n\n   .o_element_child {\n      margin-right: $-inner-gap * 0.5;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Table of Contents for Odoo Getting Started Guide\nDESCRIPTION: A toctree directive that organizes documentation sections for getting started with Odoo. Includes navigation to create, branches, builds, status, settings, online-editor, and first module documentation pages.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:nosearch:\n\n===========\nGet started\n===========\n\n.. toctree::\n   :titlesonly:\n\n   getting_started/create\n   getting_started/branches\n   getting_started/builds\n   getting_started/status\n   getting_started/settings\n   getting_started/online-editor\n   getting_started/first_module\n```\n\n----------------------------------------\n\nTITLE: Bulleted List Example\nDESCRIPTION: Shows how to create a basic bulleted list with multiple lines.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n- This is a bulleted list.\n- It has two items, the second\n  item uses two lines.\n```\n\n----------------------------------------\n\nTITLE: Mapping Customer Invoices Payment Terms Path (plaintext)\nDESCRIPTION: Maps the old documentation path for payment terms on customer invoices to the new path, keeping the structure under 'customer_invoices'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_39\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/receivables/customer_invoices/payment_terms.rst applications/finance/accounting/customer_invoices/payment_terms.rst               # receivables/customer_invoices/* -> customer_invoices/*\n```\n\n----------------------------------------\n\nTITLE: Documenting PaymentToken Class Structure in RST\nDESCRIPTION: ReStructuredText documentation structure for the PaymentToken class, showing the class definition and its key methods documentation setup.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/standard_modules/payment/payment_token.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:hide-page-toc:\n\n=============\nPayment Token\n=============\n\n.. autoclass:: odoo.addons.payment.models.payment_token::PaymentToken()\n\n   .. automethod:: _get_available_tokens\n   .. automethod:: _build_display_name\n   .. automethod:: _get_specific_create_values\n   .. automethod:: _handle_archiving\n   .. automethod:: get_linked_records_info\n```\n\n----------------------------------------\n\nTITLE: Installing Odoo Package on Fedora\nDESCRIPTION: Commands to install a downloaded Odoo RPM package on Fedora, enabling and starting the Odoo service.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/packages.rst#2025-04-23_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf localinstall odoo_{CURRENT_MAJOR_BRANCH}.latest.noarch.rpm\n$ sudo systemctl enable odoo\n$ sudo systemctl start odoo\n```\n\n----------------------------------------\n\nTITLE: Important RST Block for Automatic Invoice Limitation\nDESCRIPTION: ReStructuredText important block noting limitation of automatic invoice feature with delivered quantities policy\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/invoicing/invoicing_policy.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. important::\n   If the :guilabel:`Invoice what is delivered` rule is chosen, it is **not** possible to activate\n   the :guilabel:`Automatic Invoice` feature, which automatically generates invoices when an online\n   payment is confirmed.\n```\n\n----------------------------------------\n\nTITLE: Image Include for Returns Portal\nDESCRIPTION: reStructuredText directive for including an image showing the Avalara returns portal access point\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/taxes/avatax/avalara_portal.rst#2025-04-23_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. image:: avalara_portal/avalara-returns.png\n   :align: center\n   :alt: Avalara portal with the returns shortcut highlighted.\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Requests Feature in Odoo Time Off\nDESCRIPTION: This snippet demonstrates how to navigate to the Multiple Requests feature for allocating time off to multiple employees simultaneously.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/time_off/allocations.rst#2025-04-23_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:menuselection:`Time Off app --> Management --> Allocations`. Then, click the :icon:`fa-gear` :guilabel:`(Actions)` icon in the upper-left corner, then click :icon:`fa-users` :guilabel:`Multiple Requests`\n```\n\n----------------------------------------\n\nTITLE: GTIN Barcode Pattern in Regular Expression\nDESCRIPTION: Regular expression pattern for matching Global Trade Item Number (GTIN) in GS1 barcodes, consisting of Application Identifier (01) followed by 14 digits.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/barcode/operations/gs1_nomenclature.rst#2025-04-23_snippet_2\n\nLANGUAGE: regularexpression\nCODE:\n```\n(01)(\\\\d{14})\n```\n\n----------------------------------------\n\nTITLE: Navigating to Time Off Allocations in Odoo\nDESCRIPTION: This snippet shows the menu selection path to access the Allocations page in the Time Off app. It's used to create new allocations or view existing ones.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/time_off/allocations.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:menuselection:`Time Off app --> Management --> Allocations`\n```\n\n----------------------------------------\n\nTITLE: Stopping Odoo Service on Linux\nDESCRIPTION: Command to stop the Odoo service on a Linux system before upgrading to Enterprise edition.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/community_to_enterprise.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo service odoo stop\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Manufacturing Workflows in reStructuredText\nDESCRIPTION: A reStructuredText toctree directive that defines the structure of the manufacturing workflows documentation. It includes links to various manufacturing topics like MPS use, work center time off, scrap manufacturing, and others.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/workflows.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:nosearch:\n\n=========\nWorkflows\n=========\n\n.. toctree::\n   :titlesonly:\n\n   workflows/use_mps\n   workflows/work_center_time_off\n   workflows/scrap_manufacturing\n   workflows/manufacturing_backorders\n   workflows/split_merge\n   workflows/unbuild_orders\n   workflows/byproducts\n   workflows/continuous_improvement\n   workflows/manufacture_lots_serials\n```\n\n----------------------------------------\n\nTITLE: Component Styling with CSS Variable Fallback - SCSS - SCSS\nDESCRIPTION: Shows how to assign a CSS property to a CSS variable with a SCSS variable fallback within a component block. The variable value can be overridden in a contextual selector. Requires SCSS compiling and integration with a DOM that recognizes custom properties. Example sets color based on `--MyComponent-color` with a fallback to `$o-component-color`. Inputs: class selectors and variable values. Outputs: CSS that adapts color based on context.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_25\n\nLANGUAGE: scss\nCODE:\n```\n.o_MyComponent {\n   color: var(--MyComponent-color, #313131);\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n.o_MyDashboard {\n   // Adapt the component in this context only\n   --MyComponent-color: #017e84;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Time Off Requests to Report in Odoo\nDESCRIPTION: This RST snippet shows an image of the list of time off requests that were not approved before payslips were generated in Odoo. It includes the image path, alignment, and alt text.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll/work_entries.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: work_entries/time-off-to-report.png\n   :align: center\n   :alt: A list of all time off requests that were not approved before payslips were generated.\n```\n\n----------------------------------------\n\nTITLE: Adding Git Submodule from Another Repository\nDESCRIPTION: Adds a specific branch from another repository as a submodule in your current project. This allows using modules from external repositories in your project.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/odoo_sh/getting_started/branches.rst#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ git submodule add -b master <URL> <PATH>\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Directives for MRR and ARR Abbreviations\nDESCRIPTION: ReStructuredText directives defining abbreviations for MRR (Monthly Recurring Revenue) and ARR (Annual Recurring Revenue) used throughout the documentation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/subscriptions/reports.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. |MRR| replace:: :abbr:`MRR (Monthly Recurring Revenue)`\n.. |ARR| replace:: :abbr:`ARR (Annual Recurring Revenue)`\n```\n\n----------------------------------------\n\nTITLE: Displaying Favorites Image in RST\nDESCRIPTION: Shows how to include an image of saving a favorite search on the Sales Analysis report using reStructuredText.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/essentials/search.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: search/favorites.png\n   :alt: Saving a favorite search on the Sales Analysis report.\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Note and Important Directives\nDESCRIPTION: Special note and important message formatting for critical information about fiscal positions\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/taxes/fiscal_positions.rst#2025-04-23_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. note::\n   The mapping only works with *active* taxes. Therefore, make sure they are active by going to\n   :menuselection:`Accounting --> Configuration --> Taxes`.\n\n.. important::\n   The fiscal positions' **sequence** defines which fiscal position is applied if all conditions\n   set on multiple fiscal positions are met simultaneously.\n```\n\n----------------------------------------\n\nTITLE: Mapping Payables Multiple Payments Path (plaintext)\nDESCRIPTION: Maps the old documentation path for handling multiple payments under payables to the new path under 'payments/multiple'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/payables/pay/multiple.rst applications/finance/accounting/payments/multiple.rst                                    # payables/pay/* -> payments/*\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Contents Tree\nDESCRIPTION: RST markup for defining the table of contents structure for additional reporting topics\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/reporting.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :titlesonly:\n\n   reporting/tax_returns\n   reporting/tax_carryover\n   reporting/analytic_accounting\n   reporting/budget\n   reporting/intrastat\n   reporting/data_inalterability\n   reporting/silverfin\n   reporting/customize\n   reporting/year_end\n```\n\n----------------------------------------\n\nTITLE: Installing Enterprise Package on Linux\nDESCRIPTION: Command to install the Odoo Enterprise .deb package over the existing Community package on Linux.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/community_to_enterprise.rst#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dpkg -i <path_to_enterprise_deb>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating GUI Label Usage\nDESCRIPTION: Shows how to properly format GUI labels in documentation using the guilabel markup.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUpdate your credentials, then click on :guilabel:`Save`.\n```\n\n----------------------------------------\n\nTITLE: Confirming Purchase Order in Odoo\nDESCRIPTION: Steps to confirm an RFQ and transform it into a Purchase Order in Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/rfq.rst#2025-04-23_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\nClicking :guilabel:`Confirm Order` directly transforms the |RFQ| into an active |PO|.\n\nOnce an |RFQ| is confirmed, it creates a |PO|.\n\nOn the new |PO|, the :guilabel:`Order Deadline` field changes to :guilabel:`Confirmation Date`,\nwhich displays the date and time the user confirmed the order.\n```\n\n----------------------------------------\n\nTITLE: Showing Error Pop-up for Received Quantities Policy in Odoo\nDESCRIPTION: This RST snippet includes an image reference displaying the error pop-up that appears when trying to create a bill before receiving products under the 'Received quantities' control policy in Odoo.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/manage.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: manage/manage-user-error-popup.png\n   :align: center\n   :alt: User error pop-up for received quantities control policy.\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Image Directive for Lot/Serial Number Field\nDESCRIPTION: Inserts an image into the document showing the Lot/Serial Number field on a Manufacturing Order, with alternative text for accessibility.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/workflows/manufacture_lots_serials.rst#2025-04-23_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. image:: manufacture_lots_serials/lot-sn-field.png\n   :alt: The \"Lot/Serial Number\" field on an MO.\n```\n\n----------------------------------------\n\nTITLE: RST Directive - Team Filter Image\nDESCRIPTION: ReStructuredText directive for displaying an image of the team filter feature with proper alignment and alt text.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/expenses/approve_expenses.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: approve_expenses/my-team-filter.png\n   :align: center\n   :alt: Select the My Team filter.\n```\n\n----------------------------------------\n\nTITLE: Mapping Bank Account Setup Path (plaintext)\nDESCRIPTION: Maps the old documentation path for bank account setup to the main bank documentation file.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/bank/setup/bank_accounts.rst applications/finance/accounting/bank.rst                                              # bank/setup/bank_accounts -> bank\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Footer Template in SCSS Variables\nDESCRIPTION: Configures a custom footer template name in the SCSS variables palette.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/layout.rst#2025-04-23_snippet_36\n\nLANGUAGE: scss\nCODE:\n```\n$o-website-values-palettes: (\n   (\n      'footer-template': 'airproof',\n   ),\n);\n```\n\n----------------------------------------\n\nTITLE: Default Invoice Sequence Format Example\nDESCRIPTION: Demonstrates the default invoice sequence format used by Odoo, which follows the pattern INV/year/incrementing-number and resets annually.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/customer_invoices/sequence.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nINV/2025/00001\n```\n\n----------------------------------------\n\nTITLE: Configuring Hidden Table of Contents in reStructuredText\nDESCRIPTION: This snippet configures a hidden table of contents for Odoo documentation using reStructuredText directives. It sets the maximum depth to 4 levels and includes a link to the 'terms_of_sale' document.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/legal/terms/terms_of_sale_tex.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n:orphan:\n\n.. toctree::\n   :maxdepth: 4\n   :hidden:\n\n   terms_of_sale\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Product Reservation Documentation\nDESCRIPTION: ReStructuredText markup for documenting the 'at confirmation' reservation method in Odoo, including configuration steps, workflow instructions, and related functionality. Contains directives for images, notes, and cross-references.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/reservation_methods/at_confirmation.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n===========================\nAt confirmation reservation\n===========================\n\n.. _inventory/reservation_methods/at-confirmation:\n\n.. |SO| replace:: :abbr:`SO (Sales Order)`\n\nThe *at confirmation* reservation method reserves products **only** when a sales order (SO) is\nconfirmed, **and** if enough stock of the products included in the |SO| is already available.\n\n.. seealso::\n   :doc:`About reservation methods <../reservation_methods>`\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Server on Debian/Ubuntu for Odoo\nDESCRIPTION: Command to install the PostgreSQL server on Debian/Ubuntu systems, which is required for Odoo to run properly.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/packages.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt install postgresql -y\n```\n\n----------------------------------------\n\nTITLE: Configuring Bill Control Policy in Odoo Purchase App\nDESCRIPTION: RST markup for displaying an image of the selected bill control policy in Purchase app settings.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/control_bills.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: control_bills/control-bills-selected-policy.png\n   :align: center\n   :alt: Selected bill control policy in Purchase app settings.\n```\n\n----------------------------------------\n\nTITLE: Importing Odoo Upgrade Utils in Python\nDESCRIPTION: This snippet demonstrates how to import and use the Odoo Upgrade Utils library in a Python upgrade script.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/upgrades/upgrade_utils.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom odoo.upgrade import util\n\n\ndef migrate(cr, version):\n   # Rest of the script\n```\n\n----------------------------------------\n\nTITLE: RestructuredText LaTeX Signature Format\nDESCRIPTION: Defines signature layout formatting specifically for LaTeX output using custom spacing commands\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/legal/terms/partnership.rst#2025-04-23_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. only:: latex\n\n    .. topic:: Signatures\n\n        |vnegspace|\n        |hspace| For ODOO, |hspace| For PARTNER,\n        |vspace|\n```\n\n----------------------------------------\n\nTITLE: Example Odoo Configuration: Temporary admin_passwd for Reset\nDESCRIPTION: This snippet provides an example of how to temporarily modify the `admin_passwd` line in the Odoo configuration file during the password reset procedure. The original hashed password should be replaced with a temporary plain-text password (like `newpassword1234` shown here) before restarting the Odoo server and setting a new master password via the web interface.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/administration/on_premise/deploy.rst#2025-04-23_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\nadmin_passwd = newpassword1234\n```\n\n----------------------------------------\n\nTITLE: Including Image for Email Composer in RST\nDESCRIPTION: This RST directive includes an image showing how to send an email from the chatter.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/recruitment.rst#2025-04-23_snippet_9\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: recruitment/full-composer.png\n   :align: center\n   :alt: Send an email from the chatter.\n```\n\n----------------------------------------\n\nTITLE: Configuring Product for Purchase in Odoo\nDESCRIPTION: Steps to configure a product for purchase in Odoo, including enabling the Purchase checkbox and Buy route.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/rfq.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nTo configure purchasable products, tick the :guilabel:`Purchase` checkbox, under the product name.\nNext, go to the :guilabel:`Inventory` tab, and enable the :guilabel:`Buy` route.\n```\n\n----------------------------------------\n\nTITLE: RST Image Link for Recurrence Settings\nDESCRIPTION: RST syntax for displaying subscription plan recurrence settings image\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/subscriptions/plans.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: plans/subplan-recurrence.png\n   :align: center\n   :alt: Subscription plan with Recurrence selected.\n```\n\n----------------------------------------\n\nTITLE: Configuring Toctree for Odoo Documentation in reStructuredText\nDESCRIPTION: Sets up a hidden table of contents tree (toctree) for Odoo documentation. It specifies a maximum depth of 4 and includes the 'enterprise_nl' section. The ':nosearch:' and ':orphan:' directives are used to exclude this page from search results and suppress warnings about it not being included in any toctree.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/legal/terms/i18n/enterprise_tex_nl.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n:orphan:\n\n.. toctree::\n   :maxdepth: 4\n   :hidden:\n\n   enterprise_nl\n```\n\n----------------------------------------\n\nTITLE: Viewing Compiled CSS Output from SCSS Example\nDESCRIPTION: Displays the compiled CSS output corresponding to the SCSS formatting example. It shows how SCSS selectors and variables are translated into standard CSS rules, demonstrating the final styles applied to `.o_foo`, `.o_bar`, `.o_baz`, `.o_qux`, and `.o_corge` elements based on the SCSS source.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.o_foo, .o_foo_bar, .o_baz {\n   height: 32px;\n}\n\n.o_foo .o_quux, .o_foo_bar .o_quux, .o_baz .o_qux {\n   height: 16px;\n}\n\n.o_corge {\n   background: #EAEAEA;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Redirect Rule Syntax (Plaintext)\nDESCRIPTION: This snippet shows the general format for defining a single redirect rule within a `.txt` file in the `redirects/` directory. Each line represents one rule, mapping an old file path to a new file path. An optional comment can be added after the paths, preceded by a '#' symbol.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/MANUAL.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npath/to/old/file.rst path/to/new/file.rst  # optional comment\n```\n\n----------------------------------------\n\nTITLE: Accessing Project Dashboard in Odoo\nDESCRIPTION: This RST snippet demonstrates how to access the project dashboard in Odoo's Project app. It includes a tip for an alternative method of accessing the dashboard.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/project/project_management/project_dashboard.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nTo access the project dashboard, open the **Project** app and navigate to the applicable project.\nClick the :icon:`fa-sliders` (:guilabel:`sliders`) icon to add :guilabel:`Dashboard` to the\nproject's :ref:`top bar <project/project-management/top-bar>`.\n\n.. tip::\n   You can also access the project dashboard by hovering over the desired project's card, clicking\n   the :icon:`fa-ellipsis-v` (:guilabel:`vertical ellipsis`), and selecting :guilabel:`Dashboard`.\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Table of Contents\nDESCRIPTION: Creates a table of contents tree using the toctree directive to organize shipping and receiving documentation sections. Uses the titlesonly option to show only section titles.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:nosearch:\n\n======================\nShipping and receiving\n======================\n\n.. toctree::\n   :titlesonly:\n\n   shipping_receiving/daily_operations\n   shipping_receiving/setup_configuration\n   shipping_receiving/reservation_methods\n   shipping_receiving/picking_methods\n   shipping_receiving/removal_strategies\n```\n\n----------------------------------------\n\nTITLE: Inserting RST See Also Reference for Purchase Tutorial\nDESCRIPTION: This RST code inserts a 'see also' reference to an external Odoo tutorial video on purchase basics and creating the first RfQ.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/calls_for_tenders.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. seealso::\n   `Odoo Tutorial: Purchase Basics and Your First Request for Quotation\n   <https://www.youtube.com/watch?v=o_uI718P1Dc>`_\n```\n\n----------------------------------------\n\nTITLE: Mapping Customer Payments Online Payment Path (plaintext)\nDESCRIPTION: Maps the old documentation path for online customer payments under receivables to the new path under 'payments/online'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_45\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/receivables/customer_payments/online_payment.rst applications/finance/accounting/payments/online.rst               # receivables/customer_payments/online_payment -> payments/online\n```\n\n----------------------------------------\n\nTITLE: File Path Reference\nDESCRIPTION: Shows how to reference file paths using the file markup.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nCreate redirections using the :file:`redirects.txt` file found at the root of the repository.\n```\n\n----------------------------------------\n\nTITLE: Showing Billing Status Field on Purchase Order Form\nDESCRIPTION: RST markup for displaying the Billing Status field on a purchase order form.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/manage_deals/control_bills.rst#2025-04-23_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: control_bills/control-bills-billing-status.png\n   :align: center\n   :alt: Billing status field on a purchase order form.\n```\n\n----------------------------------------\n\nTITLE: Example Redirect Rule for Renamed File (Plaintext)\nDESCRIPTION: This example demonstrates a redirect rule created when a documentation source file (`.rst`) is renamed. It redirects users accessing the old path `contributing/documentation/guidelines.rst` to the new path `contributing/documentation/rst_guidelines.rst`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/MANUAL.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncontributing/documentation/guidelines.rst contributing/documentation/rst_guidelines.rst\n```\n\n----------------------------------------\n\nTITLE: RST Text Substitution Directives\nDESCRIPTION: Defines text substitution directives for common abbreviations used throughout the documentation\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/warehouses_storage/inventory_management/product_catalog.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. |SO| replace:: :abbr:`SO (sales order)`\n.. |SOs| replace:: :abbr:`SOs (sales orders)`\n.. |BoM| replace:: :abbr:`BoM (bill of materials)`\n.. |RfQ| replace:: :abbr:`RfQ (request for quotation)`\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Substitutions for Manufacturing Terms\nDESCRIPTION: This snippet defines ReStructuredText substitutions for common manufacturing abbreviations used throughout the document.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/manufacturing/workflows/continuous_improvement.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. |MO| replace:: :abbr:`MO (Manufacturing Order)`\n.. |MOs| replace:: :abbr:`MOs (Manufacturing Orders)`\n.. |BoM| replace:: :abbr:`BoM (Bill of Materials)`\n.. |ECO| replace:: :abbr:`ECO (Engineering Change Order)`\n.. |QCP| replace:: :abbr:`QCP (Quality Control Point)`\n.. |PLM| replace:: :abbr:`PLM (Product Lifecycle Management)`\n.. |BoMs| replace:: :abbr:`BoMs (Bills of Materials)`\n```\n\n----------------------------------------\n\nTITLE: Odoo Menu Navigation - Vehicle Capacity Configuration\nDESCRIPTION: Navigation path and field configuration for setting up vehicle capacity in the Fleet app\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/dispatch.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nFleet app --> Configuration --> Categories\n```\n\n----------------------------------------\n\nTITLE: Mapping Supplier Bills Invoice Digitization Path (plaintext)\nDESCRIPTION: Maps the old documentation path for invoice digitization related to supplier bills to the new path under 'vendor_bills/invoice_digitization'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/payables/supplier_bills/invoice_digitization.rst applications/finance/accounting/vendor_bills/invoice_digitization.rst # payables/supplier_bills/* -> vendor_bills/*\n```\n\n----------------------------------------\n\nTITLE: Starting Odoo Tour via Browser Console (JavaScript)\nDESCRIPTION: Executes a specific Odoo tour directly from the browser's JavaScript console. This requires the exact name of the tour to be passed as a string argument to the `odoo.startTour` function. This method is useful for manually triggering tours on live or test instances.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/backend/testing.rst#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nodoo.startTour(\"tour_name\");\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Tree\nDESCRIPTION: ReStructuredText directive for document structure and navigation.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/referrals.rst#2025-04-23_snippet_9\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   referrals/share_jobs\n   referrals/points\n   referrals/rewards\n   referrals/alerts\n   referrals/reporting\n```\n\n----------------------------------------\n\nTITLE: Mapping PDF Quote Builder Documentation (Sales)\nDESCRIPTION: Maps the old documentation path for the PDF quote builder under 'send_quotations' (`applications/sales/sales/send_quotations/pdf_quote_builder.rst`) to the new path under 'sales_quotations' (`applications/sales/sales/sales_quotations/pdf_quote_builder.rst`) within the Odoo Sales application documentation. Comment confirms the pattern `send_quotations/* --> sales_quotations/*`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/18.0.txt#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/sales/sales/send_quotations/pdf_quote_builder.rst applications/sales/sales/sales_quotations/pdf_quote_builder.rst                   # sales/send_quotations/* --> sales/sales_quotations/*\n```\n\n----------------------------------------\n\nTITLE: Custom Widget Events Example\nDESCRIPTION: Shows how to create custom widget events and handle user interactions through a confirmation dialog widget.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/tutorials/web.rst#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nlocal.ConfirmWidget = instance.Widget.extend({\n    events: {\n        'click button.ok_button': function () {\n            this.trigger('user_chose', true);\n        },\n        'click button.cancel_button': function () {\n            this.trigger('user_chose', false);\n        }\n    },\n    start: function() {\n        this.$el.append(\"<div>Are you sure you want to perform this action?</div>\" +\n            \"<button class='ok_button'>Ok</button>\" +\n            \"<button class='cancel_button'>Cancel</button>\");\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for EPC QR Code Implementation\nDESCRIPTION: ReStructuredText documentation explaining the setup and usage of EPC QR codes in Odoo, including configuration steps, bank account setup, and invoice generation process.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/accounting/customer_invoices/epc_qr_code.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n============\nEPC QR codes\n============\n\nEuropean Payments Council quick response codes, or **EPC QR codes**, are two-dimensional barcodes\nthat customers can scan with their **mobile banking applications** to initiate a **SEPA credit\ntransfer (SCT)** and pay their invoices instantly.\n\nIn addition to bringing ease of use and speed, it greatly reduces typing errors that would\npotentially make for payment issues.\n\n.. note::\n   This feature is only available for companies in several European countries such as Austria,\n   Belgium, Finland, Germany, and the Netherlands.\n\n.. seealso::\n   - :doc:`../bank`\n   - `Odoo Academy: QR Code on Invoices for European Customers <https://www.odoo.com/r/VuU>`_\n```\n\n----------------------------------------\n\nTITLE: Identifying Odoo Module: l10n_mx_edi_stock_40 (Electronic Delivery Guide for Mexico CFDI 4.0)\nDESCRIPTION: This snippet displays the technical name `l10n_mx_edi_stock_40` for the optional 'Electronic Delivery Guide for Mexico CFDI 4.0' Odoo module. It adapts the 'Carta Porte' functionality provided by `l10n_mx_edi_stock` to comply with the CFDI 4.0 specification.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/finance/fiscal_localizations/mexico.rst#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nl10n_mx_edi_stock_40\n```\n\n----------------------------------------\n\nTITLE: Mapping Payables Forecast Path (plaintext)\nDESCRIPTION: Maps the old documentation path for miscellaneous forecasts under payables to the new path under 'payments/forecast'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/payables/misc/forecast.rst applications/finance/accounting/payments/forecast.rst                                   # payables/misc/* -> payments/*\n```\n\n----------------------------------------\n\nTITLE: Raw Latex Vertical Space Command Definition\nDESCRIPTION: Defines a raw latex command for creating vertical space of 0.8cm, used for formatting document layout in the signature section.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/legal/terms/i18n/partnership_es.rst#2025-04-23_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n.. |vspace| raw:: latex\n\n        \\vspace{.8cm}\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Directive - Payment Registration\nDESCRIPTION: RST tip directive explaining how to handle Amazon payments and commissions\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/sales/amazon_connector/manage.rst#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. tip::\n   This same action can be performed with vendor bills from Amazon dedicated to commissions.\n\n   When the balance is received in the bank account at the end of the month, and the bank statements\n   are recorded, credit the Amazon intermediary account by the amount received.\n```\n\n----------------------------------------\n\nTITLE: Mapping Documentation Paths with Annotations - Shell\nDESCRIPTION: This snippet consists of a list of file path mappings and comments, likely used for bulk renaming, redirection, or migration of documentation files in Odoo. Each line maps an original documentation file path to a new file path, using shell-style file path notation, with comments explaining the mapping. There are no explicit dependencies, but usage assumes access to the mentioned file system structure. Inputs are pairs of file paths, and outputs can be used in shell scripts or as instructions. The snippet is most suitable for managing or scripting documentation file moves and does not contain any executable shell code itself.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/16.0.txt#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\napplications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/delivery_method.rst applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration.rst                                       # /inventory_and_mrp/inventory/shipping_receiving/setup_configuration/delivery_method -> /inventory_and_mrp/inventory/shipping_receiving/setup_configuration\napplications/inventory_and_mrp/inventory/shipping/setup/third_party_shipper.rst applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/third_party_shipper.rst                                       # /inventory_and_mrp/inventory/shipping/setup/* -> /inventory_and_mrp/inventory/shipping_receiving/setup_configuration/*\napplications/inventory_and_mrp/inventory/shipping/setup/sendcloud_shipping.rst applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/sendcloud_shipping.rst                                         # /inventory_and_mrp/inventory/shipping/setup/* -> /inventory_and_mrp/inventory/shipping_receiving/setup_configuration/*\napplications/inventory_and_mrp/inventory/shipping/setup/ups_credentials.rst applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/ups_credentials.rst                                               # /inventory_and_mrp/inventory/shipping/setup/* -> /inventory_and_mrp/inventory/shipping_receiving/setup_configuration/*\napplications/inventory_and_mrp/inventory/shipping/setup/dhl_credentials.rst applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/dhl_credentials.rst                                               # /inventory_and_mrp/inventory/shipping/setup/* -> /inventory_and_mrp/inventory/shipping_receiving/setup_configuration/*\napplications/inventory_and_mrp/inventory/management/shipments_deliveries.rst applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/shipments_deliveries.rst                                            # /inventory_and_mrp/inventory/management/shipments_deliveries -> /inventory_and_mrp/inventory/shipping_receiving/daily_operations/shipments_deliveries\napplications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/shipments_deliveries.rst applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations.rst                                        # /inventory_and_mrp/inventory/shipping_receiving/daily_operations/shipments_deliveries -> /inventory_and_mrp/inventory/shipping_receiving/daily_operations\napplications/inventory_and_mrp/inventory/management/shipments_deliveries/receipts_delivery_one_step.rst applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/receipts_delivery_one_step.rst           # /inventory_and_mrp/inventory/management/shipments_deliveries/* -> /inventory_and_mrp/inventory/shipping_receiving/daily_operations/*\napplications/inventory_and_mrp/inventory/management/shipments_deliveries/receipts_delivery_two_steps.rst applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/receipts_delivery_two_steps.rst         # /inventory_and_mrp/inventory/management/shipments_deliveries/* -> /inventory_and_mrp/inventory/shipping_receiving/daily_operations/*\napplications/inventory_and_mrp/inventory/management/shipments_deliveries/receipts_three_steps.rst applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/receipts_three_steps.rst                       # /inventory_and_mrp/inventory/management/shipments_deliveries/* -> /inventory_and_mrp/inventory/shipping_receiving/daily_operations/*\napplications/inventory_and_mrp/inventory/management/shipments_deliveries/delivery_three_steps.rst applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/delivery_three_steps.rst                       # /inventory_and_mrp/inventory/management/shipments_deliveries/* -> /inventory_and_mrp/inventory/shipping_receiving/daily_operations/*\napplications/inventory_and_mrp/inventory/management/planning.rst applications/inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/scheduled_dates.rst                                                 # /inventory_and_mrp/inventory/management/planning -> /inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/scheduled_dates\napplications/inventory_and_mrp/inventory/management/planning/scheduled_dates.rst applications/inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/scheduled_dates.rst                                 # /inventory_and_mrp/inventory/management/planning/scheduled_dates -> /inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/scheduled_dates\napplications/inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/scheduled_dates.rst applications/inventory_and_mrp/inventory/warehouses_storage/replenishment/lead_times.rst                         # /inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/scheduled_dates inventory_and_mrp/inventory/warehouses_storage/replenishment/lead_times\napplications/inventory_and_mrp/inventory/shipping/operation.rst applications/inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping.rst                                                                  # /inventory_and_mrp/inventory/shipping/operation -> /inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping\napplications/inventory_and_mrp/inventory/shipping/operation/invoicing.rst applications/inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/invoicing.rst                                              # /inventory_and_mrp/inventory/shipping/operation/* -> /inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/*\napplications/inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/invoicing.rst applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/invoicing.rst                          # /inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/* -> /inventory_and_mrp/inventory/shipping_receiving/setup_configuration/*\napplications/inventory_and_mrp/inventory/shipping/operation/multipack.rst applications/inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/multipack.rst                                              # /inventory_and_mrp/inventory/shipping/operation/* -> /inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/*\napplications/inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/multipack.rst applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/multipack.rst                          # /inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/* -> /inventory_and_mrp/inventory/shipping_receiving/setup_configuration/*\napplications/inventory_and_mrp/inventory/shipping/operation/labels.rst applications/inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/labels.rst                                                    # /inventory_and_mrp/inventory/shipping/operation/* -> /inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/*\napplications/inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/labels.rst applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/labels.rst                                # /inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/labels -> /inventory_and_mrp/inventory/shipping_receiving/setup_configuration/labels\napplications/inventory_and_mrp/inventory/shipping/operation/label_type.rst applications/inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/label_type.rst                                            # /inventory_and_mrp/inventory/shipping/operation/* -> /inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/*\napplications/inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/label_type.rst applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/label_type.rst                        # /inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/* -> /inventory_and_mrp/inventory/shipping_receiving/setup_configuration/*\napplications/inventory_and_mrp/inventory/shipping/operation/dropshipping.rst applications/inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/dropshipping.rst                                        # /inventory_and_mrp/inventory/shipping/operation/* -> /inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/*\napplications/inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/dropshipping.rst applications/inventory_and_mrp/inventory/shipping_receiving/daily_operations/dropshipping.rst                       # /inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/dropshipping -> /inventory_and_mrp/inventory/shipping_receiving/daily_operations/dropshipping\napplications/inventory_and_mrp/inventory/shipping/operation/cancel.rst applications/inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/cancel.rst                                                    # /inventory_and_mrp/inventory/shipping/operation/* -> /inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/*\napplications/inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/cancel.rst applications/inventory_and_mrp/inventory/shipping_receiving/setup_configuration/cancel.rst                                # /inventory_and_mrp/inventory/shipping_receiving/advanced_operations_shipping/* -> /inventory_and_mrp/inventory/shipping_receiving/setup_configuration/*\n```\n\n----------------------------------------\n\nTITLE: Implementing Separated Filters in Odoo Search View\nDESCRIPTION: This XML example shows how to use a separator element between filters to change the composition logic to AND. The example displays records where state is 'draft' AND delay is less than 15.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/user_interface/view_architectures.rst#2025-04-23_snippet_61\n\nLANGUAGE: xml\nCODE:\n```\n<filter domain=\"[('state', '=', 'draft')]\"/>\n<separator/>\n<filter domain=\"[('delay', '&lt;', 15)]\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Substitutions for Icons and Labels\nDESCRIPTION: These reStructuredText directives define substitutions used throughout the document. They replace shortcodes like `|caret|`, `|pivot|`, and `|list|` with corresponding icon elements and GUI labels, enhancing readability and consistency when referring to UI elements.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/sales/members/members_analysis.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |caret| replace:: :icon:`fa-caret-down` :guilabel:`(down)` icon\n.. |pivot| replace:: :icon:`oi-view-pivot` :guilabel:`(pivot)` icon\n.. |list| replace:: :icon:`oi-view-list` :guilabel:`(list)` icon\n```\n\n----------------------------------------\n\nTITLE: Linking a Menu Item to a Page Anchor in Odoo XML\nDESCRIPTION: This XML snippet illustrates how to make a `website.menu` item (identified by its `id=\"...\"`) link to a specific section (anchor) within a page. This is done by setting the `url` field to the page path followed by a hash (`#`) and the anchor name (e.g., '/about-us#our-team').\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/howtos/website_themes/navigation.rst#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<record id=\"...\" model=\"website.menu\">\n    <field name=\"url\">/about-us#our-team</field>\n</record>\n```\n\n----------------------------------------\n\nTITLE: Creating Sales Order for Prepaid Services in RST\nDESCRIPTION: This RST snippet describes the process of creating a sales order for prepaid support services, including adding the prepaid service product to the order.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/helpdesk/advanced/track_and_bill.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\nTo invoice a customer for prepaid support services, first create a sales order (SO) with the support\nservices product. To do this, go to :menuselection:`Sales app --> Orders --> Quotations`. Then,\nclick :guilabel:`New` to reveal a blank quotation form.\n\nThen, fill out the quotation form with the customer information.\n\nGo to the :guilabel:`Order Lines` tab of the quotation and click :guilabel:`Add a product`. Then,\nselect the *prepaid services product* when :ref:`configuring the service product\n<helpdesk/configure-service-products>`. Update the :guilabel:`Quantity` field with the number of\nhours.\n\nAfter updating any other necessary information, :guilabel:`Confirm` the quotation. This converts the\nquotation into an |SO|.\n```\n\n----------------------------------------\n\nTITLE: Mapping Customer Invoices Cash Discounts Path (plaintext)\nDESCRIPTION: Maps the old documentation path for cash discounts on customer invoices to the new path, keeping the structure under 'customer_invoices'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_32\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/receivables/customer_invoices/cash_discounts.rst applications/finance/accounting/customer_invoices/cash_discounts.rst             # receivables/customer_invoices/* -> customer_invoices/*\n```\n\n----------------------------------------\n\nTITLE: Calculating Final Representation Fees Post-Absence using Math Formulas\nDESCRIPTION: This snippet gives the final step in the representation fee calculation, subtracting the product of the daily reduction and the number of missing days, ensuring the result is non-negative. Inputs: total amount, daily reduction, missing days. The output is the final adjusted fee subject to rounding for payroll. To be used after previous adjustments and reductions are already computed.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/hr/payroll/payroll_localizations/belgium.rst#2025-04-23_snippet_5\n\nLANGUAGE: math\nCODE:\n```\n\\text{final amount} = max(0, \\text{total amount} - \\text{daily reduction} \\times \\text{missing days})\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Document Structure for Odoo Legal Documentation\nDESCRIPTION: A reStructuredText (RST) document that defines the structure and display options for the legal section of Odoo documentation. It includes directives to show content, hide the page table of contents, apply custom CSS, and mark the document as an orphan. It also creates a hidden table of contents with links to child pages.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/legal.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:show-content:\n:hide-page-toc:\n:custom-css: legal.css\n:orphan:\n\n=====\nLegal\n=====\n\n.. toctree::\n    :hidden:\n\n    legal/cla\n    legal/licenses\n    legal/terms\n```\n\n----------------------------------------\n\nTITLE: Describing Odoo Addon Data Files Structure - plaintext - text\nDESCRIPTION: This snippet provides an example directory layout for organizing XML data and demo files by model and purpose within an Odoo addon. It demonstrates the naming patterns for demo and regular data XML files, aiding in logical data distribution. The snippet is informational and does not involve parameters or inputs.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/development/coding_guidelines.rst#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\naddons/plant_nursery/\n|-- data/\n|   |-- plant_nursery_data.xml\n|   |-- plant_nursery_demo.xml\n|   |-- mail_data.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring jsLibs in JavaScript\nDESCRIPTION: This snippet shows the configuration of jsLibs, specifying a JavaScript library to be loaded.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/assets.rst#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\njsLibs: [\"/web/static/lib/stacktracejs/stacktrace.js\"],\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated Odoo Module Alias for Default Export\nDESCRIPTION: Displays the generated Odoo module definition for the alias `web.someName`. It defines a new Odoo module with the alias name, declares a dependency on the original transpiled module (`@web/file_a`), and its factory function returns the `default` export of the original module (accessed via `require('@web/file_a')[Symbol.for(\"default\")]`).\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/developer/reference/frontend/javascript_modules.rst#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nodoo.define(`web.someName`, ['@web/file_a'], function(require) {\n    return require('@web/file_a')[Symbol.for(\"default\")];\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Field Service Documentation Structure in reStructuredText\nDESCRIPTION: This snippet defines the structure of the Field Service documentation using reStructuredText. It includes a main heading, a reference to external tutorials, and a table of contents linking to subpages.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/services/field_service.rst#2025-04-23_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n=============\nField Service\n=============\n\n.. seealso::\n   - `Odoo Tutorials: Field Service <https://www.odoo.com/slides/field-service-49>`_\n\n.. toctree::\n   :titlesonly:\n\n   field_service/creating_tasks\n   field_service/product_management\n   field_service/planning_itinerary\n   field_service/worksheets\n```\n\n----------------------------------------\n\nTITLE: Defining the Main Documentation Index with toctree - reStructuredText\nDESCRIPTION: This snippet uses reStructuredText directives to define the root index of the Odoo project documentation. It uses ':nosearch:' to disable global search, displays a header, and includes a 'toctree' that lists subdirectories for different documentation domains (applications, administration, developer, contributing). No additional dependencies beyond a documentation system like Sphinx are required. The listed folders must exist and contain appropriate index files for successful integration.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:nosearch:\n\n==================\nOdoo Documentation\n==================\n\n\n.. toctree::\n\n    applications\n    administration\n    developer\n    contributing\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Example Block for Vendor Analysis\nDESCRIPTION: Creates an 'example' block demonstrating how to use the Purchase Analysis report to analyze vendor delivery times.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/applications/inventory_and_mrp/purchase/advanced/analyze.rst#2025-04-23_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. example::\n   A local bike shop, *Bike Haus*, sells high-quality unicycles, bicycles, tricycles, and all the\n   accessories needed to ride and maintain them. They purchase their inventory from a few different\n   vendors, and then sell those products on to customers through their storefront.\n\n   Recently, Bike Haus has decided to have their purchasing manager, David, look into how long it\n   has taken each of their vendors to deliver the items they've purchased during the current year,\n   2024.\n\n   David starts by navigating to :menuselection:`Purchase app --> Reporting --> Purchase`, and\n   selecting the :icon:`fa-bar-chart` (bar chart) graph type at the top of the report.\n\n   Next, he clicks the :icon:`fa-caret-down` :guilabel:`(toggle)` button on the right of the search\n   bar to open its drop-down menu. In the :guilabel:`Confirmation Date` filter section, he makes\n   sure that **only** the :guilabel:`2024` filter is enabled. Then, he selects the\n   :guilabel:`Vendor` option in the :guilabel:`Group By` section, before clicking away from the\n   drop-down menu to close it.\n\n   Finally, David clicks on the :guilabel:`Measures` :icon:`fa-caret-down` drop-down menu, and\n   selects the :guilabel:`Days to Receive` option.\n\n   With all of these options enabled, the :guilabel:`Purchase Analysis` report shows a bar chart,\n   with one bar for each vendor, representing the average number of days it takes to receive\n   products purchased from the vendor.\n\n   Using this data, David can see that it takes Bike Friends over 4.5 days, on average, to deliver\n   purchased products. This is more than four times the amount of time it takes any other vendor.\n\n   Based on these findings, David makes the decision to reduce the quantity of products purchased\n   from Bike Friends.\n\n   .. image:: analyze/dtr.png\n      :align: center\n      :alt: The Purchase report, showing the average days to receive products from vendors.\n```\n\n----------------------------------------\n\nTITLE: Mapping Quote Template Documentation (Sales)\nDESCRIPTION: Maps the old documentation path for quote templates under 'send_quotations' (`applications/sales/sales/send_quotations/quote_template.rst`) to the new path under 'sales_quotations' (`applications/sales/sales/sales_quotations/quote_template.rst`) within the Odoo Sales application documentation. Comment confirms the pattern `send_quotations/* --> sales_quotations/*`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/18.0.txt#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/sales/sales/send_quotations/quote_template.rst applications/sales/sales/sales_quotations/quote_template.rst                         # sales/send_quotations/* --> sales/sales_quotations/*\n```\n\n----------------------------------------\n\nTITLE: Disabling Syntax Highlighting in RST for License Text\nDESCRIPTION: This reStructuredText directive, `.. highlight:: none`, is used within a section specific to LaTeX output (`.. only:: latex`). It instructs the documentation generator to disable syntax highlighting for any subsequent literal code blocks, ensuring the included license text is displayed plainly without potentially incorrect highlighting.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/legal/terms/enterprise.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. highlight:: none\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Structure with Sphinx toctree Directive\nDESCRIPTION: This RST (reStructuredText) snippet configures a toctree directive in Sphinx documentation. It sets the maximum depth to 4 levels, hides the toctree from navigation, and includes a reference to a terms_of_sale_es document. The nosearch and orphan directives at the top indicate this page should be excluded from search results and not generate orphan warnings.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/legal/terms/i18n/terms_of_sale_tex_es.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:nosearch:\n:orphan:\n\n.. toctree::\n   :maxdepth: 4\n   :hidden:\n\n   terms_of_sale_es\n```\n\n----------------------------------------\n\nTITLE: Defining a List Table using RST .. list-table:: Directive\nDESCRIPTION: This snippet shows the reStructuredText syntax for creating a list table using the `.. list-table::` directive. It utilizes nested bullet points for rows and columns and demonstrates options like `:header-rows:` and `:stub-columns:`.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/content/contributing/documentation/rst_guidelines.rst#2025-04-23_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n.. code-block:: text\n\n   .. list-table::\n      :header-rows: 1\n      :stub-columns: 1\n\n      * - Name\n        - Country\n        - Favorite colour\n      * - Raúl\n        - Montenegro\n        - Purple\n      * - Mélanie\n        - France\n        - Turquoise\n```\n\n----------------------------------------\n\nTITLE: Mapping Customer Invoices Electronic Invoicing Path (plaintext)\nDESCRIPTION: Maps the old documentation path for electronic invoicing related to customer invoices to the new path, keeping the structure under 'customer_invoices'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_36\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/receivables/customer_invoices/electronic_invoicing.rst applications/finance/accounting/customer_invoices/electronic_invoicing.rst # receivables/customer_invoices/* -> customer_invoices/*\n```\n\n----------------------------------------\n\nTITLE: Mapping Customer Invoices Overview Path (plaintext)\nDESCRIPTION: Maps the old documentation path for the customer invoices overview to the new path, keeping the structure under 'customer_invoices'.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_38\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/receivables/customer_invoices/overview.rst applications/finance/accounting/customer_invoices/overview.rst                         # receivables/customer_invoices/* -> customer_invoices/*\n```\n\n----------------------------------------\n\nTITLE: Mapping Bank Interbank Documentation Path (plaintext)\nDESCRIPTION: Maps the old documentation path for interbank transfers to the new path under payments/internal_transfers.\nSOURCE: https://github.com/odoo/documentation/blob/18.0/redirects/15.0.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napplications/finance/accounting/bank/interbank.rst applications/finance/accounting/payments/internal_transfers.rst                                 # bank/interbank -> payments/internal_transfers\n```"
  }
]