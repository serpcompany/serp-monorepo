[
  {
    "owner": "liveview-native",
    "repo": "liveview-client-swiftui",
    "content": "TITLE: Initializing LiveView with LocalhostLiveViewHost in SwiftUI\nDESCRIPTION: This snippet demonstrates how to create a basic LiveView in a SwiftUI ContentView. It uses the .localhost LiveViewHost to connect to a local server.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/GettingStarted.md#2025-04-17_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@MainActor\nstruct ContentView: View {\n    var body: some View {\n        LiveView(.localhost)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LiveView with SwiftUI\nDESCRIPTION: Creates a basic SwiftUI view that implements LiveView using localhost configuration. This snippet shows the minimal setup required to integrate LiveView into a SwiftUI app.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/LiveViewNative.md#2025-04-17_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\nimport LiveViewNative\n\nstruct ContentView: View {\n    var body: some View {\n        LiveView(.localhost)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LiveView with Custom LiveSessionConfiguration in SwiftUI\nDESCRIPTION: This example shows how to create a LiveView with a custom LiveSessionConfiguration. It sets the navigation mode to enabled and uses a specific URL for the LiveSessionCoordinator.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/GettingStarted.md#2025-04-17_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@MainActor\nstruct ContentView: View {\n    @State private var session: LiveSessionCoordinator<EmptyRegistry> = {\n        var config = LiveSessionConfiguration()\n        config.navigationMode = .enabled\n        return LiveSessionCoordinator(URL(string: \"http://localhost:4000/\")!, config: config)\n    }()\n\n    var body: some View {\n        LiveView(\n            .localhost,\n            configuration: LiveSessionConfiguration(navigationMode: .enabled)\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing LiveSessionCoordinator in SwiftUI LiveView\nDESCRIPTION: This example shows how to create and use a LiveSessionCoordinator directly in a SwiftUI view. It creates the coordinator as a StateObject and passes it to the LiveView initializer.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/GettingStarted.md#2025-04-17_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n    @StateObject private var session = LiveSessionCoordinator<MyCustomRegistry>(.localhost)\n\n    var body: some View {\n        LiveView(session: session)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LiveView with LiveViewNative for SwiftUI\nDESCRIPTION: Example of how to add SwiftUI format support to a LiveView module using LiveViewNative.LiveView with formats and layouts configuration.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyAppWeb.HomeLive do\n  use MyAppWeb, :live_view\n  use LiveViewNative.LiveView,\n    formats: [:swiftui],\n    layouts: [\n      swiftui: {MyAppWeb.Layouts.SwiftUI, :app}\n    ]\n\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Registry for LiveView in SwiftUI\nDESCRIPTION: This snippet demonstrates how to use a custom registry with LiveView. It provides the custom registry as a generic type to the LiveView initializer.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/GettingStarted.md#2025-04-17_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@MainActor\nstruct ContentView: View {\n    var body: some View {\n        LiveView<MyCustomRegistry>(.localhost)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example LiveView Native SwiftUI Module Definition\nDESCRIPTION: Example showing how to use the LiveViewNative module in a LiveView after generating it with the mix task.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyDemoWeb.HomeLive do\n  use MyDemoWeb, :live_view\n  use MyDemoNative, :live_view\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a SwiftUI Component Module with LiveViewNative\nDESCRIPTION: Example of defining a SwiftUI component module using LiveViewNative.Component, which renders a simple text element in SwiftUI format.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyAppWeb.HomeLive.SwiftUI do\n  use LiveViewNative.Component,\n    format: :swiftui\n\n  def render(assigns, _interface) do\n    ~LVN\"\"\"\n    <Text>Hello, SwiftUI!</Text>\n    \"\"\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing FormValue Protocol for Bool in Swift\nDESCRIPTION: This snippet demonstrates how to implement the FormValue protocol for Bool type. It defines how boolean values are converted to and from string representations for form data handling.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/FormControls.md#2025-04-17_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nextension Bool: FormValue {\n    public var formValue: String {\n        self ? \"true\" : \"false\"\n    }\n    \n    public init?(formValue: String) {\n        self = formValue == \"true\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom MicToggle View with FormState in SwiftUI\nDESCRIPTION: This code creates a custom MicToggle view using the FormState property wrapper. It demonstrates how to use FormState like a normal SwiftUI @State property for managing form control state.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/FormControls.md#2025-04-17_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct MicToggle: View {\n    @FormState(default: false) var value: Bool\n    \n    var body: some View {\n        Button {\n            value.toggle()\n        } label: {\n            Image(systemName: value ? \"mic.fill\" : \"mic.slash\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using FormState with SwiftUI Toggle and Binding in Swift\nDESCRIPTION: This snippet shows how to use FormState with a SwiftUI Toggle control. It demonstrates accessing the projected value of FormState to create a Binding for the Toggle's isOn parameter.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/FormControls.md#2025-04-17_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct MicToggle: View {\n    @FormState(default: false) var value: Bool\n    \n    var body: some View {\n        Toggle(isOn: $value) {\n            Text(value ? \"Mic On\" : \"Mic Off\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Addon in Swift for LiveView Native\nDESCRIPTION: This snippet shows how to create a custom addon using the `@Addon` macro and define a `TagName` enum for custom element support.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/AddCustomElement.md#2025-04-17_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\npublic extension Addons {\n    @Addon\n    struct MyAddon<Root: RootRegistry> {\n        // ...\n    }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\n#LiveView(\n    .localhost,\n    addons: [.myAddon]\n)\n```\n\nLANGUAGE: swift\nCODE:\n```\n@Addon\nstruct MyAddon<Root: RootRegistry> {\n    enum TagName: String {\n        case myTag = \"MyTag\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Element Lookup in Swift for LiveView Native\nDESCRIPTION: This snippet demonstrates how to implement the `lookup(_:element:)` method to provide a SwiftUI View for a custom element.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/AddCustomElement.md#2025-04-17_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@Addon\nstruct MyAddon<Root: RootRegistry> {\n    enum TagName: String {\n        case myTag = \"MyTag\"\n    }\n\n    static func lookup(_ name: TagName, element: ElementNode) -> some View {\n        switch name {\n        case .myTag:\n            Text(\"My custom element!\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Live Element with Attributes in Swift for LiveView Native\nDESCRIPTION: This snippet demonstrates how to create a Live Element with custom attributes using the `@LiveElement` macro.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/AddCustomElement.md#2025-04-17_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@LiveElement\nstruct MyTag<Root: RootRegistry>: View {\n    private var label: String?\n    private var itemCount: Int = 0\n\n    var body: some View {\n        Text(label ?? \"\")\n        Text(\"Value: \\(itemCount)\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Events in Live Elements for LiveView Native\nDESCRIPTION: This snippet demonstrates how to implement events in a Live Element using the `@Event` property wrapper.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/AddCustomElement.md#2025-04-17_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n@LiveElement\nstruct MyTag<Root: RootRegistry>: View {\n    private var count: Int = 0\n\n    @Event(\"onIncrement\", type: \"click\") private var onIncrement\n\n    var body: some View {\n        $liveElement.children()\n        Text(\"Value: \\(count)\")\n        Button(\"Increment\") {\n            onIncrement(value: count + 1)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Modifiers to HStack in HTML for LiveView Native SwiftUI\nDESCRIPTION: This snippet demonstrates how to apply modifiers to an HStack element using a JSON array of objects. In this example, a padding modifier is applied with a value of 16 for all sides.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/SupportedModifiers.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<HStack modifiers='[{\"type\": \"padding\", \"all\": 16}]'>\n    <!-- ... -->\n</HStack>\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Addon Structure in Swift\nDESCRIPTION: Defines the basic structure for creating a custom addon using the @Addon macro.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/AddCustomModifier.md#2025-04-17_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\npublic extension Addons {\n    @Addon\n    struct MyAddon<Root: RootRegistry> {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Modifier with Decodable Support\nDESCRIPTION: Demonstrates full implementation of a custom modifier including decoder logic and view modification.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/AddCustomModifier.md#2025-04-17_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@Addon\nstruct MyAddon<Root: RootRegistry> {\n    enum CustomModifier: ViewModifier, @preconcurrency Decodable {\n        case myFirstModifier(MyFirstModifier<Root>)\n        case mySecondModifier(MySecondModifier<Root>)\n\n        init(from decoder: any Decoder) throws {\n            let container = try decoder.singleValueContainer()\n\n            if let modifier = try? container.decode(MyFirstModifier<Root>.self) {\n                self = .myFirstModifier(modifier)\n            } else {\n                self = .mySecondModifier(try container.decode(MySecondModifier<Root>.self))\n            }\n        }\n        \n        func body(content: Content) -> some View {\n            switch self {\n            case .myFirstModifier(let modifier):\n                content.modifier(modifier)\n            case .mySecondModifier(let modifier):\n                content.modifier(modifier)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Client Specification for LiveViewNative SwiftUI Integration\nDESCRIPTION: Configuration specification for the LiveViewNative SwiftUI client, defining format, module suffix, template sigil, component module, and supported platforms.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nformat: :swiftui\nmodule_suffix: \"SwiftUI\"\ntemplate_sigil: ~LVN\ncomponent: LiveViewNative.SwiftUI.Component\ntargets: ~w{ios ipados macos maccatalyst watchos tvos visionos unknown}\n```\n\n----------------------------------------\n\nTITLE: Installing LiveViewNative SwiftUI Package in Elixir\nDESCRIPTION: Mix dependency configuration for adding the live_view_native_swiftui package to an Elixir project's dependencies.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [\n    {:live_view_native_swiftui, \"~> 0.4.0-rc.0\"}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Registering LiveView Addon\nDESCRIPTION: Shows how to register a custom addon with LiveView configuration.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/AddCustomModifier.md#2025-04-17_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n#LiveView(\n    .localhost,\n    addons: [.myAddon]\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Children in Live Elements for LiveView Native\nDESCRIPTION: This snippet demonstrates how to handle child elements in a Live Element using the `$liveElement` synthesized value.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/AddCustomElement.md#2025-04-17_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n@LiveElement\nstruct MyTag<Root: RootRegistry>: View {\n    private var count: Int = 0\n\n    var body: some View {\n        $liveElement.children()\n        Text(\"Value: \\(count)\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing LiveContext in Live Elements for LiveView Native\nDESCRIPTION: This snippet shows how to access the LiveContext to send events to the server from a Live Element.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/AddCustomElement.md#2025-04-17_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n@LiveElement\nstruct MyTag<Root: RootRegistry>: View {\n    private var count: Int = 0\n\n    var body: some View {\n        $liveElement.children()\n        Text(\"Value: \\(count)\")\n        Button(\"Increment\") {\n            Task {\n                try await $liveElement.context.coordinator.pushEvent(\n                    type: \"click\",\n                    event: \"increment\",\n                    value: count + 1,\n                    target: nil\n                )\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Relationship Flowchart using Mermaid\nDESCRIPTION: A flowchart showing the relationship between key components: LiveView, LiveSessionCoordinator, and multiple LiveViewCoordinators handling different routes. Illustrates how a single LiveSessionCoordinator manages the WebSocket connection while multiple LiveViewCoordinators handle different navigation routes.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/guides/architecture/architecture.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    LV[<a href='https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/Live/LiveView.swift'>LiveView</a>]\n    LV --> LSC[<a href='https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/Coordinators/LiveSessionCoordinator.swift'>LiveSessionCoordinator</a>]\n    LSC --> |/route1| LVC1[<a href='https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/Coordinators/LiveViewCoordinator.swift'>LiveViewCoordinator</a> 1]\n    LSC --> |/route2| LVC2[<a href='https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/Coordinators/LiveViewCoordinator.swift'>LiveViewCoordinator</a> 2]\n    LSC --> |/route3| LVC3[<a href='https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/Coordinators/LiveViewCoordinator.swift'>LiveViewCoordinator</a> 3]\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu with Label and Content in LiveView Native (HeEx)\nDESCRIPTION: This snippet demonstrates how to create a Menu component with a label and content group. The Menu displays 'Edit Actions' as its label and contains three buttons for Arrange, Update, and Remove actions when expanded.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/test/support/data/doc.md#2025-04-17_snippet_0\n\nLANGUAGE: heex\nCODE:\n```\n<Menu>\n    <Text template={:label}>\n        Edit Actions\n    </Text>\n    <Group template={:content}>\n        <Button phx-click=\"arrange\">Arrange</Button>\n        <Button phx-click=\"update\">Update</Button>\n        <Button phx-click=\"remove\">Remove</Button>\n    </Group>\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Visualizing LiveView Update Process Flow\nDESCRIPTION: Sequence diagram showing the 9-step process of how updates flow between LiveView, Client and Core components when handling template changes and user interactions.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/guides/architecture/updates.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    LiveView ->> Client: 1. Rendered JSON\n    Client ->> Core: 2. Parse HTML\n    Core ->> Client: 3. Document\n    Client ->> LiveView: 4. Event \"increment\"\n    LiveView ->> Client: 5. Rendered Diff\n    Client ->> Core: 6. Parse New HTML\n    Client ->> Core: 7. New Document\n    Client ->> Core: 8. Merge Documents\n    Core ->> Client: 9. Changed NodeRefs\n```\n\n----------------------------------------\n\nTITLE: Visualizing Observer Pattern Implementation\nDESCRIPTION: Flowchart showing how LiveViewCoordinator manages node publishers and how Observer connects to SwiftUI views through property wrappers like @ObservedElement and @Attribute.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/guides/architecture/updates.md#2025-04-17_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    subgraph LiveViewCoordinator\n        LVC[LiveViewCoordinator]\n        LVC --> |node #1 changed| VP1[Node #1 Publisher]\n        LVC --> VP2[Node #2 Publisher]\n        LVC --> VP3[Node #... Publisher]\n    end\n\n    VP1 -.-> |node #1 changed| O\n\n    subgraph Environment\n        O[Observer]\n    end\n\n    subgraph Node #1 SwiftUI View\n        OE1[\"@ObservedElement\"]\n        A1[\"@Attribute\"]\n        A2[\"@Attribute\"]\n        A1 --> OE2[\"@ObservedElement\"]\n        A2 --> OE3[\"@ObservedElement\"]\n    end\n\n    O -.-> OE1\n    O -.-> OE2\n    O -.-> OE3\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModifier in LiveView Native Swift\nDESCRIPTION: This snippet demonstrates how a SwiftUI ViewModifier function is represented as a struct in LiveView Native. It shows the conversion from a SwiftUI extension to a ParseableExpression struct.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/guides/architecture/modifiers.md#2025-04-17_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// SwiftUI\nextension View {\n    func bold(_ isActive: Bool) -> some View\n}\n\n// LiveView Native\n@ParseableExpression\nstruct _boldModifier: ViewModifier {\n    static let name = \"bold\"\n\n    let isActive: Bool\n\n    init(_ isActive: Bool) {\n        self.isActive = isActive\n    }\n\n    func body(content: Content) -> some View {\n        content.bold(isActive)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using EditButton Component in LiveView Native\nDESCRIPTION: A simple example of how to implement the EditButton component in LiveView Native. When used, it toggles the edit mode in the current environment, enabling lists to automatically show delete buttons and drag handles.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/Controls and Indicators/EditButton.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<EditButton />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Element in HTML for LiveView Native\nDESCRIPTION: This snippet shows how to use the custom `MyTag` element in HTML markup.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/AddCustomElement.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<MyTag />\n```\n\n----------------------------------------\n\nTITLE: Implementing RenameButton with RenameActionModifier in LiveView Native SwiftUI\nDESCRIPTION: This snippet demonstrates how to use the RenameButton component with the RenameActionModifier to set up a rename action in a LiveView Native SwiftUI application. The modifier specifies the event to be sent when the button is tapped.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/Controls and Indicators/RenameButton.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<RenameButton\n    modifiers={\n        rename_action(@native, event: \"begin_rename\", target: @myself)\n    }\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Live Element with Attributes in HTML for LiveView Native\nDESCRIPTION: This snippet shows how to use the Live Element with custom attributes in HTML markup.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/AddCustomElement.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<MyTag label=\"Cookies\" itemCount=\"3\" />\n```\n\n----------------------------------------\n\nTITLE: Using Customized Live Element in HTML for LiveView Native\nDESCRIPTION: This snippet shows how to use the Live Element with customized attribute names in HTML markup.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/AddCustomElement.md#2025-04-17_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<MyTag label=\"Cookies\" item:count=\"3\" />\n```\n\n----------------------------------------\n\nTITLE: Using Live Element with Children in HTML for LiveView Native\nDESCRIPTION: This snippet shows how to use a Live Element with child elements in HTML markup.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/AddCustomElement.md#2025-04-17_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<MyTag count=\"3\">\n    <Text>Cookies</Text>\n</MyTag>\n```\n\n----------------------------------------\n\nTITLE: Using Live Element with Events in HTML for LiveView Native\nDESCRIPTION: This snippet shows how to use a Live Element with events in HTML markup.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/AddCustomElement.md#2025-04-17_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<MyTag count={@count} onIncrement=\"handle-increment\">\n    <Text>Cookies</Text>\n</MyTag>\n```\n\n----------------------------------------\n\nTITLE: Creating an expandable Menu with action buttons in LiveView Native SwiftUI\nDESCRIPTION: This example shows how to create a Menu component that reveals multiple action buttons when tapped. The menu consists of a label ('Edit Actions') and a content group containing three buttons for different operations (Arrange, Update, Remove) that trigger Phoenix events when clicked.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/test/support/data/cheatsheet.md#2025-04-17_snippet_0\n\nLANGUAGE: heex\nCODE:\n```\n<Menu>\n    <Text template={:label}>\n        Edit Actions\n    </Text>\n    <Group template={:content}>\n        <Button phx-click=\"arrange\">Arrange</Button>\n        <Button phx-click=\"update\">Update</Button>\n        <Button phx-click=\"remove\">Remove</Button>\n    </Group>\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Customizing Attribute Names and Ignoring Properties in Swift for LiveView Native\nDESCRIPTION: This snippet demonstrates how to customize attribute names and ignore certain properties in a Live Element.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/AddCustomElement.md#2025-04-17_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n@LiveElement\nstruct MyTag<Root: RootRegistry>: View {\n    private var label: String?\n    @LiveAttribute(.init(namespace: \"item\", name: \"count\")) private var itemCount: Int = 0\n    \n    // this property will not be available as an attribute\n    @LiveElementIgnored\n    @Environment(\\.colorScheme)\n    private var colorScheme: ColorScheme\n\n    var body: some View {\n        Text(label ?? \"\")\n        switch colorScheme {\n        case .dark:\n            Text(\"Value: \\(itemCount)\").foregroundStyle(.yellow)\n        default:\n            Text(\"Value: \\(itemCount)\").foregroundStyle(.orange)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Attribute Reference Support\nDESCRIPTION: Demonstrates how to implement attribute reference support in custom modifiers for dynamic values.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/AddCustomModifier.md#2025-04-17_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n@ASTDecodable(\"labeled\")\nstruct LabeledModifier<Root: RootRegistry>: ViewModifier, @preconcurrency Decodable {\n    @ObservedElement private var element\n    @LiveContext<Root> private var context\n\n    let label: AttributeReference<String>\n\n    init(as label: AttributeReference<String>) {\n        self.label = label\n    }\n    \n    func body(content: Content) -> some View {\n        LabeledContent {\n            content\n        } label: {\n            Text(label.resolve(on: element, in: context))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Phoenix server from command line or IEx\nDESCRIPTION: Commands to start the Phoenix server either directly from the command line or within an interactive Elixir (IEx) session.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/util/tutorial_repo_base/lvn_tutorial_backend/README.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nmix phx.server\n```\n\nLANGUAGE: elixir\nCODE:\n```\niex -S mix phx.server\n```\n\n----------------------------------------\n\nTITLE: Handling Redirect Event in JSON for LiveView Native SwiftUI\nDESCRIPTION: This JSON snippet shows the structure of a 'redirect' event in the LiveView Native SwiftUI client. It performs a 'push' style navigation, closing the current channel and opening a new one on the same socket.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/guides/architecture/navigation.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"redirect\": {\n        \"to\": \"<path>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Live Redirect Event in JSON for LiveView Native SwiftUI\nDESCRIPTION: This JSON snippet demonstrates the structure of a 'live_redirect' event in the LiveView Native SwiftUI client. It can perform either 'push' or 'replace' style navigation, closing the current channel and opening a new one on the same socket.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/guides/architecture/navigation.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"live_redirect\": {\n        \"kind\": \"<push|replace>\",\n        \"to\": \"<path>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Live Patch Event in JSON for LiveView Native SwiftUI\nDESCRIPTION: This JSON snippet shows the structure of a 'live_patch' event in the LiveView Native SwiftUI client. It can perform either 'push' or 'replace' style navigation, but unlike other navigation types, it maintains the current channel and only changes the URL query parameters.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/guides/architecture/navigation.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"<push|replace>\",\n    \"to\": \"<path>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Circle Shape with Fill Color in LiveView Native\nDESCRIPTION: Demonstrates how to create a basic circular shape with a green fill color using the Circle component. The circle will automatically fill its containing view area.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/Shapes/Circle.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Circle fill-color=\"#00ff00\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering a Green Rectangle in LiveView Native SwiftUI\nDESCRIPTION: This snippet demonstrates how to create a rectangular shape that fills its container view with a green color. The Rectangle element supports attributes from the Shape protocol.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/Shapes/Rectangle.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Rectangle fill-color=\"#00ff00\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Ellipse Shape with Color Fill\nDESCRIPTION: Demonstrates how to create a basic elliptical shape with a green fill color using the Ellipse component. The shape will expand to fill its container view.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/Shapes/Ellipse.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Ellipse fill-color=\"#00ff00\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing ContainerRelativeShape with Fill Color in LiveView Native\nDESCRIPTION: Demonstrates how to use ContainerRelativeShape component with a fill color attribute. The shape fills an inset version of the container shape, defaulting to a Rectangle if no container shape is specified via ContainerShapeModifier.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/Shapes/ContainerRelativeShape.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ContainerRelativeShape fill-color=\"#00ff00\" />\n```\n\n----------------------------------------\n\nTITLE: Using Divider Component in LiveView Native for SwiftUI\nDESCRIPTION: This snippet demonstrates the basic usage of the Divider component, which creates a visual separator between sections of content. By default, the divider is horizontal, but when placed in a stack, it aligns along the axis opposite to the stack's direction.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/Layout Containers/Divider.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Divider />\n```\n\n----------------------------------------\n\nTITLE: Handling Events in Elixir for LiveView Native\nDESCRIPTION: This snippet demonstrates how to handle events on the server-side using Elixir in LiveView.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/AddCustomElement.md#2025-04-17_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\ndef handle_event(\"handle-increment\", new_count, socket) do\n    {:noreply, assign(socket, count: new_count)}\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Events in Elixir for LiveView Native\nDESCRIPTION: This snippet shows the server-side handler for a custom event in Elixir for LiveView.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/AddCustomElement.md#2025-04-17_snippet_13\n\nLANGUAGE: elixir\nCODE:\n```\ndef handle_event(\"increment\", new_count, socket), do: ...\n```\n\n----------------------------------------\n\nTITLE: Implementing ASTDecodable Labeled Modifier\nDESCRIPTION: Shows implementation of a labeled modifier using ASTDecodable macro for automatic decoder generation.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/AddCustomModifier.md#2025-04-17_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@ASTDecodable(\"labeled\")\nstruct LabeledModifier<Root: RootRegistry>: ViewModifier, @preconcurrency Decodable {\n    let label: String\n\n    init(as label: Int) {\n        self.label = String(label)\n    }\n\n    init(as label: String) {\n        self.label = label\n    }\n    \n    func body(content: Content) -> some View {\n        LabeledContent {\n            content\n        } label: {\n            Text(label)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON AST Representation of Swift Modifier\nDESCRIPTION: Shows the JSON Abstract Syntax Tree (AST) representation of a Swift modifier.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/AddCustomModifier.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\"foregroundStyle\", { ... }, [[\".\", { ... }, [\"Color\", \"red\"]]]]\n```\n\n----------------------------------------\n\nTITLE: Locating SwiftUI Interface File in Xcode\nDESCRIPTION: This snippet provides the file path to the SwiftUI .swiftinterface file within the Xcode application bundle. This file contains all public symbols of the SwiftUI framework and is used for code generation.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/guides/architecture/modifiers.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/System/Library/Frameworks/SwiftUI.framework/Modules/SwiftUI.swiftmodule/arm64-apple-ios.swiftinterface\n```\n\n----------------------------------------\n\nTITLE: Running ModifierGenerator for SwiftUI in Swift\nDESCRIPTION: This command demonstrates how to run the ModifierGenerator tool to generate LiveView Native modifier structs from the SwiftUI .swiftinterface file. The output is directed to a specific file in the project structure.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/guides/architecture/modifiers.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# in the top level of this repo\nswift run ModifierGenerator \"/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/System/Library/Frameworks/SwiftUI.framework/Modules/SwiftUI.swiftmodule/arm64-apple-ios.swiftinterface\" > Sources/LiveViewNative/_GeneratedModifiers.swift\n```\n\n----------------------------------------\n\nTITLE: Setting up Phoenix dependencies with Mix\nDESCRIPTION: Command to install and setup dependencies for a Phoenix application using Mix, Elixir's build tool.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/util/tutorial_repo_base/lvn_tutorial_backend/README.md#2025-04-17_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nmix setup\n```\n\n----------------------------------------\n\nTITLE: Metadata Declaration for Submit Label Documentation\nDESCRIPTION: SwiftUI documentation metadata that configures the display and merge behavior for the submitLabel property documentation.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/TextFieldProtocol/TextFieldProtocol-submitLabel.md#2025-04-17_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@Metadata {\n    @DocumentationExtension(mergeBehavior: append)\n    @DisplayName(\"submit-label\", style: symbol)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata for disableAutocorrection Documentation in Swift\nDESCRIPTION: A directive that sets up documentation metadata for the disableAutocorrection property in the TextFieldProtocol. It configures the documentation extension with append merge behavior and sets the display name to 'autocorrection' with a symbol style.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/TextFieldProtocol/TextFieldProtocol-disableAutocorrection.md#2025-04-17_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@Metadata {\n    @DocumentationExtension(mergeBehavior: append)\n    @DisplayName(\"autocorrection\", style: symbol)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: A standard robots.txt configuration with commented instructions on how to restrict web crawler access. The file is currently set to allow all crawlers to access the entire site, with example syntax for disallowing access.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/util/tutorial_repo_base/lvn_tutorial_backend/priv/static/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# See https://www.robotstxt.org/robotstxt.html for documentation on how to use the robots.txt file\n#\n# To ban all spiders from the entire site uncomment the next two lines:\n# User-agent: *\n# Disallow: /\n```\n\n----------------------------------------\n\nTITLE: Adding LiveView Native Dependencies in Mix\nDESCRIPTION: Configuration for adding the LiveView Native SwiftUI package as a dependency in a Mix project's dependencies list. Specifies version constraint for the package.\nSOURCE: https://github.com/liveview-native/liveview-client-swiftui/blob/main/Sources/LiveViewNative/LiveViewNative.docc/LiveViewNative.md#2025-04-17_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [\n    {:live_view_native_swiftui, \"~> 0.1.0\"}\n  ]\nend\n```"
  }
]