[
  {
    "owner": "upstox",
    "repo": "upstox-python.git",
    "content": "TITLE: Market Data Streaming with Upstox WebSocket in Python\nDESCRIPTION: Implementation for connecting to Upstox WebSocket API to stream live market data. The script handles protobuf-encoded data and converts it to JSON format for instrument-specific market updates.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/examples/README.md#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Retrieving Order Details with Upstox Python Client\nDESCRIPTION: Example showing how to get details for specific orders using the Upstox API client. Can retrieve by order ID or tag, with OAuth2 authentication.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OrderApi.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.OrderApi(upstox_client.ApiClient(configuration))\napi_version = 'api_version_example' # str | API Version Header\norder_id = 'order_id_example' # str | The order reference ID for which the order history is required (optional)\ntag = 'tag_example' # str | The unique tag of the order for which the order history is being requested (optional)\n\ntry:\n    # Get order details\n    api_response = api_instance.get_order_details(api_version, order_id=order_id, tag=tag)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OrderApi->get_order_details: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Subscribing and Unsubscribing to Instruments in Python\nDESCRIPTION: This example shows how to subscribe to instrument keys upon connection and then unsubscribe from them after a delay. It demonstrates the complete subscription lifecycle with the MarketDataStreamerV3 interface.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport upstox_client\nimport time\n\n\ndef main():\n    configuration = upstox_client.Configuration()\n    access_token = <ACCESS_TOKEN>\n    configuration.access_token = access_token\n\n    streamer = upstox_client.MarketDataStreamerV3(\n        upstox_client.ApiClient(configuration))\n\n    def on_open():\n        print(\"Connected. Subscribing to instrument keys.\")\n        streamer.subscribe(\n            [\"NSE_EQ|INE020B01018\", \"NSE_EQ|INE467B01029\"], \"full\")\n\n    # Handle incoming market data messages\\\n    def on_message(message):\n        print(message)\n\n    streamer.on(\"open\", on_open)\n    streamer.on(\"message\", on_message)\n\n    streamer.connect()\n\n    time.sleep(5)\n    print(\"Unsubscribing from instrument keys.\")\n    streamer.unsubscribe([\"NSE_EQ|INE020B01018\", \"NSE_EQ|INE467B01029\"])\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Subscribe, Change Mode and Unsubscribe in Python\nDESCRIPTION: This snippet demonstrates the complete workflow of subscribing to instruments, changing their subscription mode from 'full' to 'ltpc', and finally unsubscribing. It shows how to manage subscription configurations throughout a session.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport upstox_client\nimport time\n\ndef main():\n    configuration = upstox_client.Configuration()\n    access_token = <ACCESS_TOKEN>\n    configuration.access_token = access_token\n\n    streamer = upstox_client.MarketDataStreamerV3(\n        upstox_client.ApiClient(configuration))\n\n    def on_open():\n        print(\"Connected. Subscribing to instrument keys.\")\n        streamer.subscribe(\n            [\"NSE_EQ|INE020B01018\", \"NSE_EQ|INE467B01029\"], \"full\")\n\n    # Handle incoming market data messages\\\n    def on_message(message):\n        print(message)\n\n    streamer.on(\"open\", on_open)\n    streamer.on(\"message\", on_message)\n\n    streamer.connect()\n\n    time.sleep(5)\n    print(\"Changing subscription mode to ltpc...\")\n    streamer.change_mode(\n        [\"NSE_EQ|INE020B01018\", \"NSE_EQ|INE467B01029\"], \"ltpc\")\n\n    time.sleep(5)\n    print(\"Unsubscribing from instrument keys.\")\n    streamer.unsubscribe([\"NSE_EQ|INE020B01018\", \"NSE_EQ|INE467B01029\"])\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Placing Regular Orders with Upstox Python Client\nDESCRIPTION: Example code for placing a regular order using the Upstox Python client. It initializes the API, creates the order placement request, and handles potential exceptions during the API call.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OrderApiV3.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# create an instance of the API class\napi_instance = upstox_client.OrderApiV3()\nbody = upstox_client.PlaceOrderV3Request() # PlaceOrderV3Request | \n\ntry:\n    api_response = api_instance.place_order(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OrderApiV3->place_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Access Token from Upstox API in Python\nDESCRIPTION: Example code showing how to get an access token by exchanging an authorization code. This API call returns both the token and the user's profile information, requiring API version and optional parameters like code, client credentials, and redirect URI.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/LoginApi.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# create an instance of the API class\napi_instance = upstox_client.LoginApi()\napi_version = 'api_version_example' # str | API Version Header\ncode = 'code_example' # str |  (optional)\nclient_id = 'client_id_example' # str |  (optional)\nclient_secret = 'client_secret_example' # str |  (optional)\nredirect_uri = 'redirect_uri_example' # str |  (optional)\ngrant_type = 'grant_type_example' # str |  (optional)\n\ntry:\n    # Get token API\n    api_response = api_instance.token(api_version, code=code, client_id=client_id, client_secret=client_secret, redirect_uri=redirect_uri, grant_type=grant_type)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling LoginApi->token: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Subscribe, Change Mode and Unsubscribe with MarketDataStreamer\nDESCRIPTION: This example demonstrates how to subscribe to market data, change the subscription mode, and then unsubscribe from instruments using the MarketDataStreamer.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/README.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport upstox_client\nimport time\n\ndef main():\n    configuration = upstox_client.Configuration()\n    access_token = <ACCESS_TOKEN>\n    configuration.access_token = access_token\n\n    streamer = upstox_client.MarketDataStreamer(\n        upstox_client.ApiClient(configuration))\n\n    def on_open():\n        print(\"Connected. Subscribing to instrument keys.\")\n        streamer.subscribe(\n            [\"NSE_EQ|INE020B01018\", \"NSE_EQ|INE467B01029\"], \"full\")\n\n    # Handle incoming market data messages\\\n    def on_message(message):\n        print(message)\n\n    streamer.on(\"open\", on_open)\n    streamer.on(\"message\", on_message)\n\n    streamer.connect()\n\n    time.sleep(5)\n    print(\"Changing subscription mode to ltpc...\")\n    streamer.change_mode(\n        [\"NSE_EQ|INE020B01018\", \"NSE_EQ|INE467B01029\"], \"ltpc\")\n\n    time.sleep(5)\n    print(\"Unsubscribing from instrument keys.\")\n    streamer.unsubscribe([\"NSE_EQ|INE020B01018\", \"NSE_EQ|INE467B01029\"])\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Candle Data in Python with Upstox Client\nDESCRIPTION: This code demonstrates how to retrieve historical OHLC candle data using the Upstox API. It accepts parameters for instrument key, interval, and end date, and returns the historical candle data for specified durations.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/HistoryApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# create an instance of the API class\napi_instance = upstox_client.HistoryApi()\ninstrument_key = 'instrument_key_example' # str | \ninterval = 'interval_example' # str | \nto_date = 'to_date_example' # str | \napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Historical candle data\n    api_response = api_instance.get_historical_candle_data(instrument_key, interval, to_date, api_version)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling HistoryApi->get_historical_candle_data: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Instruments with Delays in Python\nDESCRIPTION: This snippet demonstrates how to subscribe to different instruments at different times. It initially subscribes to one instrument upon connection, then waits 5 seconds before subscribing to another instrument, showcasing delayed subscription functionality.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport upstox_client\nimport time\n\n\ndef main():\n    configuration = upstox_client.Configuration()\n    access_token = <ACCESS_TOKEN>\n    configuration.access_token = access_token\n\n    streamer = upstox_client.MarketDataStreamerV3(\n        upstox_client.ApiClient(configuration))\n\n    def on_open():\n        streamer.subscribe(\n            [\"NSE_EQ|INE020B01018\"], \"full\")\n\n    # Handle incoming market data messages\\\n    def on_message(message):\n        print(message)\n\n    streamer.on(\"open\", on_open)\n    streamer.on(\"message\", on_message)\n\n    streamer.connect()\n\n    time.sleep(5)\n    streamer.subscribe(\n        [\"NSE_EQ|INE467B01029\"], \"full\")\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Candle Data with Date Range in Python with Upstox Client\nDESCRIPTION: This code demonstrates how to retrieve historical OHLC candle data for a specific date range using the Upstox API. It accepts parameters for instrument key, interval, start date, and end date.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/HistoryApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# create an instance of the API class\napi_instance = upstox_client.HistoryApi()\ninstrument_key = 'instrument_key_example' # str | \ninterval = 'interval_example' # str | \nto_date = 'to_date_example' # str | \nfrom_date = 'from_date_example' # str | \napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Historical candle data\n    api_response = api_instance.get_historical_candle_data1(instrument_key, interval, to_date, from_date, api_version)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling HistoryApi->get_historical_candle_data1: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Setting up MarketDataStreamerV3 for Market Updates in Python\nDESCRIPTION: This snippet demonstrates how to initialize and connect to the MarketDataStreamerV3 to receive market updates. It shows authentication with an access token, creating a streamer instance with specific instrument keys, and setting up a message handler.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport upstox_client\n\ndef on_message(message):\n    print(message)\n\n\ndef main():\n    configuration = upstox_client.Configuration()\n    access_token = <ACCESS_TOKEN>\n    configuration.access_token = access_token\n\n    streamer = upstox_client.MarketDataStreamerV3(\n        upstox_client.ApiClient(configuration), [\"NSE_INDEX|Nifty 50\", \"NSE_INDEX|Nifty Bank\"], \"full\")\n\n    streamer.on(\"message\", on_message)\n\n    streamer.connect()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Modifying Auto-Reconnect Parameters in MarketDataStreamer\nDESCRIPTION: This example demonstrates how to customize the auto-reconnect parameters of the MarketDataStreamer, including enabling it, setting the interval between attempts, and specifying the maximum number of retries.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/README.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport upstox_client\n\n\ndef main():\n    configuration = upstox_client.Configuration()\n    access_token = <ACCESS_TOKEN>\n    configuration.access_token = access_token\n\n    streamer = upstox_client.MarketDataStreamer(\n        upstox_client.ApiClient(configuration))\n\n    # Modify auto-reconnect parameters: enable it, set interval to 10 seconds, and retry count to 3\n    streamer.auto_reconnect(True, 10, 3)\n\n    streamer.connect()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Full Market Quotes in Python using Upstox API\nDESCRIPTION: This code snippet demonstrates how to use the Upstox API to retrieve full market quotes for one or more instruments. It configures OAuth2 authentication, creates an API instance, and makes a request to get_full_market_quote endpoint.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/MarketQuoteApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.MarketQuoteApi(upstox_client.ApiClient(configuration))\nsymbol = 'symbol_example' # str | Comma separated list of symbols\napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Market quotes and instruments - Full market quotes\n    api_response = api_instance.get_full_market_quote(symbol, api_version)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MarketQuoteApi->get_full_market_quote: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Reconnect in MarketDataStreamer\nDESCRIPTION: This snippet shows how to disable the auto-reconnect feature of the MarketDataStreamer and set up an event handler for when auto-reconnect stops.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/README.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport upstox_client\nimport time\n\n\ndef main():\n    configuration = upstox_client.Configuration()\n    access_token = <ACCESS_TOKEN>\n    configuration.access_token = access_token\n\n    streamer = upstox_client.MarketDataStreamer(\n        upstox_client.ApiClient(configuration))\n\n    def on_reconnection_halt(message):\n        print(message)\n\n    streamer.on(\"autoReconnectStopped\", on_reconnection_halt)\n\n    # Disable auto-reconnect feature\n    streamer.auto_reconnect(False)\n\n    streamer.connect()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Positions with Upstox Portfolio API in Python\nDESCRIPTION: Example showing how to retrieve a user's current positions for the current trading day using the Upstox Python client. Requires OAuth2 authentication and an API version parameter.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/PortfolioApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.PortfolioApi(upstox_client.ApiClient(configuration))\napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Get Positions\n    api_response = api_instance.get_positions(api_version)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling PortfolioApi->get_positions: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Profile with Upstox Python Client\nDESCRIPTION: Example code demonstrating how to retrieve user profile information using the get_profile method of the UserApi class. This requires authentication via OAuth2 and includes error handling.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/UserApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.UserApi(upstox_client.ApiClient(configuration))\napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Get profile\n    api_response = api_instance.get_profile(api_version)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling UserApi->get_profile: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Calculating Brokerage Charges with Upstox ChargeApi in Python\nDESCRIPTION: Example showing how to use the get_brokerage method to compute brokerage charges for a trading operation. The code initializes the API with OAuth2 authentication and makes a request with instrument details, quantity, product type, transaction type, and price to calculate applicable charges.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/ChargeApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.ChargeApi(upstox_client.ApiClient(configuration))\ninstrument_token = 'instrument_token_example' # str | Key of the instrument\nquantity = 56 # int | Quantity with which the order is to be placed\nproduct = 'product_example' # str | Product with which the order is to be placed\ntransaction_type = 'transaction_type_example' # str | Indicates whether its a BUY or SELL order\nprice = 3.4 # float | Price with which the order is to be placed\napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Brokerage details\n    api_response = api_instance.get_brokerage(instrument_token, quantity, product, transaction_type, price, api_version)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ChargeApi->get_brokerage: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving OHLC Market Quotes in Python using Upstox API\nDESCRIPTION: This code snippet shows how to use the Upstox API to retrieve OHLC (Open, High, Low, Close) quotes for one or more instruments. It sets up OAuth2 authentication, creates an API instance, and calls the get_market_quote_ohlc endpoint.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/MarketQuoteApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.MarketQuoteApi(upstox_client.ApiClient(configuration))\nsymbol = 'symbol_example' # str | Comma separated list of symbols\ninterval = 'interval_example' # str | Interval to get ohlc data\napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Market quotes and instruments - OHLC quotes\n    api_response = api_instance.get_market_quote_ohlc(symbol, interval, api_version)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MarketQuoteApi->get_market_quote_ohlc: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Modifying an Order in Python using Upstox API\nDESCRIPTION: This snippet shows how to modify an existing order using the Upstox API client in Python. It sets up OAuth2 authentication, creates an OrderApi instance, and calls the modify_order method with required body and api_version parameters.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OrderApi.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.OrderApi(upstox_client.ApiClient(configuration))\nbody = upstox_client.ModifyOrderRequest() # ModifyOrderRequest | \napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Modify order\n    api_response = api_instance.modify_order(body, api_version)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OrderApi->modify_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Accessing Portfolio Stream Feed in Python using Upstox API\nDESCRIPTION: This code snippet demonstrates how to use the get_portfolio_stream_feed method of the WebsocketApi class to access the portfolio stream feed. It requires an API version and OAuth2 authentication.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/WebsocketApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.WebsocketApi(upstox_client.ApiClient(configuration))\napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Portfolio Stream Feed\n    api_instance.get_portfolio_stream_feed(api_version)\nexcept ApiException as e:\n    print(\"Exception when calling WebsocketApi->get_portfolio_stream_feed: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option Chain using Upstox Python API\nDESCRIPTION: This snippet shows how to use the get_put_call_option_chain method to retrieve the option chain. It requires an instrument key and an expiry date. The method returns a GetOptionChainResponse object.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OptionsApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport swagger_client\nfrom swagger_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = swagger_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = swagger_client.OptionsApi(swagger_client.ApiClient(configuration))\ninstrument_key = 'instrument_key_example' # str | Instrument key for an underlying symbol\nexpiry_date = 'expiry_date_example' # str | Expiry date in format: YYYY-mm-dd\n\ntry:\n    # Get option chain\n    api_response = api_instance.get_put_call_option_chain(instrument_key, expiry_date)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->get_put_call_option_chain: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Portfolio WebSocket for Real-time Order Updates\nDESCRIPTION: This snippet illustrates how to use the PortfolioDataStreamer to connect to the Portfolio WebSocket and receive real-time order updates.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/README.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport upstox_client\n\ndef on_message(message):\n    print(message)\n\n\ndef main():\n    configuration = upstox_client.Configuration()\n    access_token = <ACCESS_TOKEN>\n    configuration.access_token = access_token\n\n    streamer = upstox_client.PortfolioDataStreamer(\n        upstox_client.ApiClient(configuration))\n\n    streamer.on(\"message\", on_message)\n\n    streamer.connect()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Authorizing with Upstox API in Python\nDESCRIPTION: Example code demonstrating how to call the authorize endpoint which provides login functionality. This requires client_id, redirect_uri, and API version parameters, with optional state and scope parameters.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/LoginApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# create an instance of the API class\napi_instance = upstox_client.LoginApi()\nclient_id = 'client_id_example' # str | \nredirect_uri = 'redirect_uri_example' # str | \napi_version = 'api_version_example' # str | API Version Header\nstate = 'state_example' # str |  (optional)\nscope = 'scope_example' # str |  (optional)\n\ntry:\n    # Authorize API\n    api_instance.authorize(client_id, redirect_uri, api_version, state=state, scope=scope)\nexcept ApiException as e:\n    print(\"Exception when calling LoginApi->authorize: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Fetching Intraday Candle Data in Python with Upstox Client\nDESCRIPTION: This code demonstrates how to retrieve intraday OHLC candle data using the Upstox API. It fetches OHLC values for the specified instrument for the current trading day at the requested interval.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/HistoryApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# create an instance of the API class\napi_instance = upstox_client.HistoryApi()\ninstrument_key = 'instrument_key_example' # str | \ninterval = 'interval_example' # str | \napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Intra day candle data\n    api_response = api_instance.get_intra_day_candle_data(instrument_key, interval, api_version)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling HistoryApi->get_intra_day_candle_data: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Subscribing and Unsubscribing to Instruments with MarketDataStreamer\nDESCRIPTION: This snippet illustrates how to subscribe to market data for multiple instruments and then unsubscribe from them after a delay using the MarketDataStreamer.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/README.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport upstox_client\nimport time\n\n\ndef main():\n    configuration = upstox_client.Configuration()\n    access_token = <ACCESS_TOKEN>\n    configuration.access_token = access_token\n\n    streamer = upstox_client.MarketDataStreamer(\n        upstox_client.ApiClient(configuration))\n\n    def on_open():\n        print(\"Connected. Subscribing to instrument keys.\")\n        streamer.subscribe(\n            [\"NSE_EQ|INE020B01018\", \"NSE_EQ|INE467B01029\"], \"full\")\n\n    # Handle incoming market data messages\\\n    def on_message(message):\n        print(message)\n\n    streamer.on(\"open\", on_open)\n    streamer.on(\"message\", on_message)\n\n    streamer.connect()\n\n    time.sleep(5)\n    print(\"Unsubscribing from instrument keys.\")\n    streamer.unsubscribe([\"NSE_EQ|INE020B01018\", \"NSE_EQ|INE467B01029\"])\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Retrieving LTP Market Quotes in Python using Upstox API\nDESCRIPTION: This code snippet demonstrates how to use the Upstox API to retrieve LTP (Last Traded Price) quotes for one or more instruments. It configures OAuth2 authentication, creates an API instance, and makes a request to the ltp endpoint.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/MarketQuoteApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.MarketQuoteApi(upstox_client.ApiClient(configuration))\nsymbol = 'symbol_example' # str | Comma separated list of symbols\napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Market quotes and instruments - LTP quotes.\n    api_response = api_instance.ltp(symbol, api_version)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MarketQuoteApi->ltp: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Placing GTT Orders with Upstox Python Client\nDESCRIPTION: Example code for placing a GTT order using the Upstox Python client. It configures OAuth2 authentication, initializes the API, creates the order placement request, and handles potential exceptions.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OrderApiV3.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.OrderApiV3(upstox_client.ApiClient(configuration))\nbody = upstox_client.GttPlaceOrderRequest() # GttPlaceOrderRequest | \n\ntry:\n    # Place GTT order\n    api_response = api_instance.place_gtt_order(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OrderApiV3->place_gtt_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Details in Python using Upstox API\nDESCRIPTION: This snippet demonstrates how to retrieve order details using the Upstox API client in Python. It configures OAuth2 authentication, creates an instance of the OrderApi, and calls the get_order_status method with an optional order_id parameter.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OrderApi.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.OrderApi(upstox_client.ApiClient(configuration))\norder_id = 'order_id_example' # str | The order reference ID for which the order details is required (optional)\n\ntry:\n    # Get order details\n    api_response = api_instance.get_order_status(order_id=order_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OrderApi->get_order_status: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Placing a Single Order in Python using Upstox API\nDESCRIPTION: This snippet shows how to place a single order using the Upstox API client in Python. It sets up OAuth2 authentication, creates an OrderApi instance, and calls the place_order method with required body and api_version parameters.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OrderApi.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.OrderApi(upstox_client.ApiClient(configuration))\nbody = upstox_client.PlaceOrderRequest() # PlaceOrderRequest | \napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Place order\n    api_response = api_instance.place_order(body, api_version)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OrderApi->place_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Fund and Margin Information with Upstox Python Client\nDESCRIPTION: Example code demonstrating how to retrieve user fund and margin information using the get_user_fund_margin method. This allows checking balance in equity and commodity markets with optional segment filtering.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/UserApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.UserApi(upstox_client.ApiClient(configuration))\napi_version = 'api_version_example' # str | API Version Header\nsegment = 'segment_example' # str |  (optional)\n\ntry:\n    # Get User Fund And Margin\n    api_response = api_instance.get_user_fund_margin(api_version, segment=segment)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling UserApi->get_user_fund_margin: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Trades for a Specific Order in Python using Upstox API\nDESCRIPTION: This snippet demonstrates how to retrieve trades for a specific order using the Upstox API client in Python. It configures OAuth2 authentication, creates an OrderApi instance, and calls the get_trades_by_order method with required order_id and api_version parameters.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OrderApi.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.OrderApi(upstox_client.ApiClient(configuration))\norder_id = 'order_id_example' # str | The order ID for which the order to get order trades\napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Get trades for order\n    api_response = api_instance.get_trades_by_order(order_id, api_version)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OrderApi->get_trades_by_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Update Types in PortfolioDataStreamer\nDESCRIPTION: This example shows how to initialize the PortfolioDataStreamer with multiple update types enabled, including order, position, holding, and GTT updates.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/README.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport upstox_client\nimport data_token\n\n\ndef on_message(message):\n    print(message)\n\n\ndef on_open():\n    print(\"connection opened\")\n\n\ndef main():\n    configuration = upstox_client.Configuration()\n    configuration.access_token = <ACCESS_TOKEN>\n\n    streamer = upstox_client.PortfolioDataStreamer(upstox_client.ApiClient(configuration),\n                                                  order_update=True,\n                                                  position_update=True,\n                                                  holding_update=True,\n                                                  gtt_update=True)\n\n    streamer.on(\"message\", on_message)\n    streamer.on(\"open\", on_open)\n    streamer.connect()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Accessing Market Data Feed in Python using Upstox API\nDESCRIPTION: This code snippet demonstrates how to use the get_market_data_feed method of the WebsocketApi class to access the market data feed. It requires an API version and OAuth2 authentication.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/WebsocketApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.WebsocketApi(upstox_client.ApiClient(configuration))\napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Market Data Feed\n    api_instance.get_market_data_feed(api_version)\nexcept ApiException as e:\n    print(\"Exception when calling WebsocketApi->get_market_data_feed: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Instruments with Delays in MarketDataStreamer\nDESCRIPTION: This example shows how to subscribe to market data for one instrument immediately upon connection, and then subscribe to another instrument after a delay using the MarketDataStreamer.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/README.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport upstox_client\nimport time\n\n\ndef main():\n    configuration = upstox_client.Configuration()\n    access_token = <ACCESS_TOKEN>\n    configuration.access_token = access_token\n\n    streamer = upstox_client.MarketDataStreamer(\n        upstox_client.ApiClient(configuration))\n\n    def on_open():\n        streamer.subscribe(\n            [\"NSE_EQ|INE020B01018\"], \"full\")\n\n    # Handle incoming market data messages\\\n    def on_message(message):\n        print(message)\n\n    streamer.on(\"open\", on_open)\n    streamer.on(\"message\", on_message)\n\n    streamer.connect()\n\n    time.sleep(5)\n    streamer.subscribe(\n        [\"NSE_EQ|INE467B01029\"], \"full\")\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Placing Multiple Orders in Python using Upstox API\nDESCRIPTION: This snippet demonstrates how to place multiple orders simultaneously using the Upstox API client in Python. It configures OAuth2 authentication, creates an OrderApi instance, and calls the place_multi_order method with a list of MultiOrderRequest objects.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OrderApi.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.OrderApi(upstox_client.ApiClient(configuration))\nbody = [upstox_client.MultiOrderRequest()] # list[MultiOrderRequest] | \n\ntry:\n    # Place multi order\n    api_response = api_instance.place_multi_order(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OrderApi->place_multi_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Profit and Loss Charges in Python using Upstox API\nDESCRIPTION: This snippet demonstrates how to use the get_profit_and_loss_charges method to retrieve charges incurred by users for their trades. It requires authentication and accepts parameters for segment, financial year, and date range.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/TradeProfitAndLossApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.TradeProfitAndLossApi(upstox_client.ApiClient(configuration))\nsegment = 'segment_example' # str | Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives\nfinancial_year = 'financial_year_example' # str | Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122\napi_version = 'api_version_example' # str | API Version Header\nfrom_date = 'from_date_example' # str | Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)\nto_date = 'to_date_example' # str | Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)\n\ntry:\n    # Get profit and loss on trades\n    api_response = api_instance.get_profit_and_loss_charges(segment, financial_year, api_version, from_date=from_date, to_date=to_date)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TradeProfitAndLossApi->get_profit_and_loss_charges: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Calculating Margin Requirements with Upstox ChargeApi in Python\nDESCRIPTION: Example demonstrating how to use the post_margin method to compute margin requirements for trading operations. The code initializes the API with OAuth2 authentication and submits a MarginRequest object containing trade details to calculate the required margin.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/ChargeApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.ChargeApi(upstox_client.ApiClient(configuration))\nbody = upstox_client.MarginRequest() # MarginRequest | \n\ntry:\n    # Calculate Margin\n    api_response = api_instance.post_margin(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ChargeApi->post_margin: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Market Data on Connection Open with MarketDataStreamer\nDESCRIPTION: This snippet demonstrates how to initialize the MarketDataStreamer, set up event handlers for connection open and message reception, and subscribe to market data for specific instruments.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/README.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport upstox_client\n\ndef main():\n    configuration = upstox_client.Configuration()\n    access_token = <ACCESS_TOKEN>\n    configuration.access_token = access_token\n\n    streamer = upstox_client.MarketDataStreamer(\n        upstox_client.ApiClient(configuration))\n\n    def on_open():\n        streamer.subscribe(\n            [\"NSE_EQ|INE020B01018\", \"NSE_EQ|INE467B01029\"], \"full\")\n\n    def on_message(message):\n        print(message)\n\n    streamer.on(\"open\", on_open)\n    streamer.on(\"message\", on_message)\n\n    streamer.connect()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Exiting All Positions with Upstox Python Client\nDESCRIPTION: Example showing how to exit all positions using the Upstox API client. Supports exiting positions by tag or segment, with OAuth2 authentication.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OrderApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.OrderApi(upstox_client.ApiClient(configuration))\ntag = 'tag_example' # str | The tag associated with the positions for which the positions must be exit (optional)\nsegment = 'segment_example' # str | The segment for which the positions must be exit (optional)\n\ntry:\n    # Exit all positions\n    api_response = api_instance.exit_positions(tag=tag, segment=segment)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OrderApi->exit_positions: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Trade History in Python using Upstox API\nDESCRIPTION: This snippet shows how to retrieve trade history using the Upstox API client in Python. It sets up OAuth2 authentication, creates an OrderApi instance, and calls the get_trade_history method with the required api_version parameter.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OrderApi.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.OrderApi(upstox_client.ApiClient(configuration))\napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Get trades\n    api_response = api_instance.get_trade_history(api_version)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OrderApi->get_trade_history: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Setting up MarketDataStreamer (V2) for Market Updates in Python\nDESCRIPTION: This snippet demonstrates how to use the V2 version of the MarketDataStreamer to receive market updates. It shows authentication, creating a streamer instance with specific instrument keys, and setting up a message handler.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport upstox_client\n\ndef on_message(message):\n    print(message)\n\n\ndef main():\n    configuration = upstox_client.Configuration()\n    access_token = <ACCESS_TOKEN>\n    configuration.access_token = access_token\n\n    streamer = upstox_client.MarketDataStreamer(\n        upstox_client.ApiClient(configuration), [\"NSE_INDEX|Nifty 50\", \"NSE_INDEX|Nifty Bank\"], \"full\")\n\n    streamer.on(\"message\", on_message)\n\n    streamer.connect()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Using Sandbox Mode for Testing\nDESCRIPTION: Illustrates how to enable sandbox mode for testing purposes, set the access token, and place a test order using the Upstox Python SDK.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport upstox_client\nfrom upstox_client.rest import ApiException\n\nconfiguration = upstox_client.Configuration(sandbox=True)\nconfiguration.access_token = 'SANDBOX_ACCESS_TOKEN'\n\napi_instance = upstox_client.OrderApiV3(upstox_client.ApiClient(configuration))\nbody = upstox_client.PlaceOrderV3Request(quantity=1, product=\"D\",validity=\"DAY\", price=9.12, tag=\"string\", instrument_token=\"NSE_EQ|INE669E01016\", order_type=\"LIMIT\",\n                                         transaction_type=\"BUY\", disclosed_quantity=0, trigger_price=0.0, is_amo=True, slice=True)\n\ntry:\n    api_response = api_instance.place_order(body)\n    print(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OrderApi->place_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Authorizing Portfolio Stream Feed in Python using Upstox API\nDESCRIPTION: This code snippet shows how to use the get_portfolio_stream_feed_authorize method of the WebsocketApi class to authorize and retrieve the socket endpoint URI for portfolio updates. It requires an API version and OAuth2 authentication.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/WebsocketApi.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.WebsocketApi(upstox_client.ApiClient(configuration))\napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Portfolio Stream Feed Authorize\n    api_response = api_instance.get_portfolio_stream_feed_authorize(api_version)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling WebsocketApi->get_portfolio_stream_feed_authorize: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Canceling GTT Orders with Upstox Python Client\nDESCRIPTION: Example code for canceling a GTT order using the Upstox Python client. It initializes the API with OAuth2 authentication, creates the order cancel request, and handles potential exceptions during the API call.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OrderApiV3.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.OrderApiV3(upstox_client.ApiClient(configuration))\nbody = upstox_client.GttCancelOrderRequest() # GttCancelOrderRequest | \n\ntry:\n    # Cancel GTT order\n    api_response = api_instance.cancel_gtt_order(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OrderApiV3->cancel_gtt_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Trades with Upstox Python Client\nDESCRIPTION: This snippet demonstrates how to use the get_trades_by_date_range method of the PostTradeApi class to fetch historical trade data. It includes setting up the API client with OAuth2 authentication and handling potential exceptions.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/PostTradeApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport swagger_client\nfrom swagger_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = swagger_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = swagger_client.PostTradeApi(swagger_client.ApiClient(configuration))\nstart_date = 'start_date_example' # str | Date from which trade history needs to be fetched. Date in YYYY-mm-dd format\nend_date = 'end_date_example' # str | Date till which history needs needs to be fetched. Date in YYYY-mm-dd format\npage_number = 56 # int | Page number for which you want to fetch trade history \npage_size = 56 # int | How many records you want for a page \nsegment = '' # str | Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives MF - Mutual Funds (optional)\n\ntry:\n    # Get historical trades\n    api_response = api_instance.get_trades_by_date_range(start_date, end_date, page_number, page_size, segment=segment)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling PostTradeApi->get_trades_by_date_range: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Fetching Trade-wise Profit and Loss Data in Python using Upstox API\nDESCRIPTION: This snippet shows how to use the get_trade_wise_profit_and_loss_data method to retrieve realised Profit and Loss report data for a user. It requires authentication and accepts parameters for segment, financial year, pagination, and date range.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/TradeProfitAndLossApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.TradeProfitAndLossApi(upstox_client.ApiClient(configuration))\nsegment = 'segment_example' # str | Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives\nfinancial_year = 'financial_year_example' # str | Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122\npage_number = 56 # int | Page Number, the pages are starting from 1\npage_size = 56 # int | Page size for pagination. The maximum page size value is obtained from P and L report metadata API.\napi_version = 'api_version_example' # str | API Version Header\nfrom_date = 'from_date_example' # str | Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)\nto_date = 'to_date_example' # str | Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)\n\ntry:\n    # Get Trade-wise Profit and Loss Report Data\n    api_response = api_instance.get_trade_wise_profit_and_loss_data(segment, financial_year, page_number, page_size, api_version, from_date=from_date, to_date=to_date)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TradeProfitAndLossApi->get_trade_wise_profit_and_loss_data: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option Contracts using Upstox Python API\nDESCRIPTION: This snippet demonstrates how to use the get_option_contracts method to retrieve option contracts. It requires an instrument key and optionally an expiry date. The method returns a GetOptionContractResponse object.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OptionsApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport swagger_client\nfrom swagger_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = swagger_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = swagger_client.OptionsApi(swagger_client.ApiClient(configuration))\ninstrument_key = 'instrument_key_example' # str | Instrument key for an underlying symbol\nexpiry_date = 'expiry_date_example' # str | Expiry date in format: YYYY-mm-dd (optional)\n\ntry:\n    # Get option contracts\n    api_response = api_instance.get_option_contracts(instrument_key, expiry_date=expiry_date)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->get_option_contracts: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Canceling Multiple Orders with Upstox Python Client\nDESCRIPTION: Example showing how to cancel multiple orders using the Upstox API client. Supports canceling orders by tag or segment, with OAuth2 authentication.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OrderApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.OrderApi(upstox_client.ApiClient(configuration))\ntag = 'tag_example' # str | The tag associated with the orders for which the orders must be cancelled (optional)\nsegment = 'segment_example' # str | The segment for which the orders must be cancelled (optional)\n\ntry:\n    # Cancel multi order\n    api_response = api_instance.cancel_multi_order(tag=tag, segment=segment)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OrderApi->cancel_multi_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Exchange Timings Using Python Upstox SDK\nDESCRIPTION: Example code demonstrating how to retrieve exchange timings for a specific date using the Upstox API. The code creates an instance of the MarketHolidaysAndTimingsApi class and calls the get_exchange_timings method with a date parameter.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/MarketHolidaysAndTimingsApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport swagger_client\nfrom swagger_client.rest import ApiException\nfrom pprint import pprint\n\n# create an instance of the API class\napi_instance = swagger_client.MarketHolidaysAndTimingsApi()\n_date = '_date_example' # str | \n\ntry:\n    # Get Exchange Timings on particular date\n    api_response = api_instance.get_exchange_timings(_date)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MarketHolidaysAndTimingsApi->get_exchange_timings: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Holdings with Upstox Portfolio API in Python\nDESCRIPTION: Example demonstrating how to fetch the user's holdings from previous trading sessions using the Upstox Python client. Requires OAuth2 authentication and an API version parameter.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/PortfolioApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.PortfolioApi(upstox_client.ApiClient(configuration))\napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Get Holdings\n    api_response = api_instance.get_holdings(api_version)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling PortfolioApi->get_holdings: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Modifying Regular Orders with Upstox Python Client\nDESCRIPTION: Example code for modifying a regular order using the Upstox Python client. It initializes the API, creates the order modification request, and handles potential exceptions during the API call.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OrderApiV3.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# create an instance of the API class\napi_instance = upstox_client.OrderApiV3()\nbody = upstox_client.ModifyOrderRequest() # ModifyOrderRequest | \n\ntry:\n    api_response = api_instance.modify_order(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OrderApiV3->modify_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Canceling Regular Orders with Upstox Python Client\nDESCRIPTION: Example code for canceling a regular order using the Upstox Python client. It initializes the API, specifies the order ID to cancel, and handles potential exceptions during the API call.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OrderApiV3.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# create an instance of the API class\napi_instance = upstox_client.OrderApiV3()\norder_id = 'order_id_example' # str | \n\ntry:\n    api_response = api_instance.cancel_order(order_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OrderApiV3->cancel_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Modifying Auto-Reconnect Parameters in Python\nDESCRIPTION: This snippet shows how to customize the auto-reconnect behavior of the MarketDataStreamerV3. It enables auto-reconnect with a 10-second retry interval and a maximum of 3 retry attempts.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport upstox_client\n\n\ndef main():\n    configuration = upstox_client.Configuration()\n    access_token = <ACCESS_TOKEN>\n    configuration.access_token = access_token\n\n    streamer = upstox_client.MarketDataStreamerV3(\n        upstox_client.ApiClient(configuration))\n\n    # Modify auto-reconnect parameters: enable it, set interval to 10 seconds, and retry count to 3\n    streamer.auto_reconnect(True, 10, 3)\n\n    streamer.connect()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Market Data on Connection Open in Python\nDESCRIPTION: This example shows how to subscribe to market data when the WebSocket connection is established. It creates a streamer instance and sets up an on_open handler to subscribe to specific instrument keys with the 'full' mode.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport upstox_client\n\ndef main():\n    configuration = upstox_client.Configuration()\n    access_token = <ACCESS_TOKEN>\n    configuration.access_token = access_token\n\n    streamer = upstox_client.MarketDataStreamerV3(\n        upstox_client.ApiClient(configuration))\n\n    def on_open():\n        streamer.subscribe(\n            [\"NSE_EQ|INE020B01018\", \"NSE_EQ|INE467B01029\"], \"full\")\n\n    def on_message(message):\n        print(message)\n\n    streamer.on(\"open\", on_open)\n    streamer.on(\"message\", on_message)\n\n    streamer.connect()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Converting Positions with Upstox Portfolio API in Python\nDESCRIPTION: Example showing how to convert the margin product of an open position using the Upstox Python client. This operation requires OAuth2 authentication and accepts a ConvertPositionRequest object and API version as parameters.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/PortfolioApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.PortfolioApi(upstox_client.ApiClient(configuration))\nbody = upstox_client.ConvertPositionRequest() # ConvertPositionRequest | \napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Convert Positions\n    api_response = api_instance.convert_positions(body, api_version)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling PortfolioApi->convert_positions: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Canceling Single Order with Upstox Python Client\nDESCRIPTION: Example showing how to cancel a single order using the Upstox API client. Requires order ID and API version header, with OAuth2 authentication.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OrderApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.OrderApi(upstox_client.ApiClient(configuration))\norder_id = 'order_id_example' # str | The order ID for which the order must be cancelled\napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Cancel order\n    api_response = api_instance.cancel_order(order_id, api_version)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OrderApi->cancel_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Authorizing Market Data Feed in Python using Upstox API\nDESCRIPTION: This code snippet shows how to use the get_market_data_feed_authorize method of the WebsocketApi class to authorize and retrieve the socket endpoint URI for market updates. It requires an API version and OAuth2 authentication.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/WebsocketApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.WebsocketApi(upstox_client.ApiClient(configuration))\napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Market Data Feed Authorize\n    api_response = api_instance.get_market_data_feed_authorize(api_version)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling WebsocketApi->get_market_data_feed_authorize: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Profit and Loss Metadata in Python using Upstox API\nDESCRIPTION: This snippet demonstrates how to use the get_trade_wise_profit_and_loss_meta_data method to fetch metadata for the realised Profit and Loss report. It requires authentication and accepts parameters for segment, financial year, and date range.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/TradeProfitAndLossApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.TradeProfitAndLossApi(upstox_client.ApiClient(configuration))\nsegment = 'segment_example' # str | Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives\nfinancial_year = 'financial_year_example' # str | Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122\napi_version = 'api_version_example' # str | API Version Header\nfrom_date = 'from_date_example' # str | Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)\nto_date = 'to_date_example' # str | Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)\n\ntry:\n    # Get profit and loss meta data on trades\n    api_response = api_instance.get_trade_wise_profit_and_loss_meta_data(segment, financial_year, api_version, from_date=from_date, to_date=to_date)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TradeProfitAndLossApi->get_trade_wise_profit_and_loss_meta_data: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Book with Upstox Python Client\nDESCRIPTION: Example showing how to get the order book using the Upstox API client. Retrieves all orders including open, pending and filled states. Requires API version header.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OrderApi.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.OrderApi(upstox_client.ApiClient(configuration))\napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Get order book\n    api_response = api_instance.get_order_book(api_version)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OrderApi->get_order_book: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Reconnect in Python\nDESCRIPTION: This example demonstrates how to disable the auto-reconnect feature of the MarketDataStreamerV3. It sets up a handler for the 'autoReconnectStopped' event and explicitly disables auto-reconnect before connecting.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport upstox_client\nimport time\n\n\ndef main():\n    configuration = upstox_client.Configuration()\n    access_token = <ACCESS_TOKEN>\n    configuration.access_token = access_token\n\n    streamer = upstox_client.MarketDataStreamerV3(\n        upstox_client.ApiClient(configuration))\n\n    def on_reconnection_halt(message):\n        print(message)\n\n    streamer.on(\"autoReconnectStopped\", on_reconnection_halt)\n\n    # Disable auto-reconnect feature\n    streamer.auto_reconnect(False)\n\n    streamer.connect()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Logging Out of Upstox API in Python\nDESCRIPTION: Example code demonstrating how to use the logout endpoint to terminate a user's session. This requires OAuth2 authentication with a valid access token and API version parameter.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/LoginApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.LoginApi(upstox_client.ApiClient(configuration))\napi_version = 'api_version_example' # str | API Version Header\n\ntry:\n    # Logout\n    api_response = api_instance.logout(api_version)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling LoginApi->logout: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Modifying GTT Orders with Upstox Python Client\nDESCRIPTION: Example code for modifying a GTT order using the Upstox Python client. It configures OAuth2 authentication, initializes the API, creates the order modification request, and handles potential exceptions.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OrderApiV3.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.OrderApiV3(upstox_client.ApiClient(configuration))\nbody = upstox_client.GttModifyOrderRequest() # GttModifyOrderRequest | \n\ntry:\n    # Modify GTT order\n    api_response = api_instance.modify_gtt_order(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OrderApiV3->modify_gtt_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Portfolio Order Updates Streaming with Upstox WebSocket in Python\nDESCRIPTION: Implementation for connecting to Upstox WebSocket API to stream live order updates from a user's portfolio. The script processes and displays real-time order status changes in the console.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/examples/README.md#2025-04-22_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Configuring Upstox API Access Token\nDESCRIPTION: Code snippet showing how to set up the Upstox API access token in the configuration.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/examples/websocket/market_data/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconfiguration.access_token = 'ACCESS_TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Initializing Token Request for Indie User in Python\nDESCRIPTION: Example code showing how to initialize a token request for an indie user. This endpoint requires a body containing IndieUserTokenRequest and a client_id parameter to generate a token and set its expiry.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/LoginApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# create an instance of the API class\napi_instance = upstox_client.LoginApi()\nbody = upstox_client.IndieUserTokenRequest() # IndieUserTokenRequest | \nclient_id = 'client_id_example' # str | \n\ntry:\n    # Init token API\n    api_response = api_instance.init_token_request_for_indie_user(body, client_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling LoginApi->init_token_request_for_indie_user: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Market Status for a Specific Exchange Using Python Upstox SDK\nDESCRIPTION: Example code showing how to retrieve the market status for a particular exchange using the Upstox API. This endpoint requires OAuth2 authentication. The code configures an access token, creates an instance of the MarketHolidaysAndTimingsApi class, and calls the get_market_status method with an exchange parameter.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/MarketHolidaysAndTimingsApi.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport swagger_client\nfrom swagger_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = swagger_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = swagger_client.MarketHolidaysAndTimingsApi(swagger_client.ApiClient(configuration))\nexchange = 'exchange_example' # str | \n\ntry:\n    # Get Market status for particular exchange\n    api_response = api_instance.get_market_status(exchange)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MarketHolidaysAndTimingsApi->get_market_status: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Token for Upstox API Authentication in Python\nDESCRIPTION: Code snippet showing how to set up the Upstox API access token for authorization in the Python script. The user needs to replace 'ACCESS_TOKEN' with their actual token.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/examples/websocket/order_updates/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfiguration.access_token = 'ACCESS_TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Setting the Upstox API Access Token\nDESCRIPTION: Code snippet showing where to replace the placeholder with your actual Upstox API access token for authorization.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/examples/websocket/market_data/v3/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\naccess_token = 'ACCESS_TOKEN'\n```\n\n----------------------------------------\n\nTITLE: OrderData Model Properties Declaration - Python\nDESCRIPTION: Property definitions for the OrderData model class showing attribute names, data types, and descriptions. The model contains trading order attributes like exchange, price, quantity, order status, timestamps, and various identifiers used in the Upstox trading platform.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OrderData.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass OrderData:\n    exchange: str         # Exchange to which the order is associated\n    price: float         # Price at which the order was placed\n    product: str         # Shows if the order was Intraday, Delivery, CoverOrder or OneCancelsOther\n    quantity: int        # Quantity with which the order was placed\n    status: str          # Current status of the order\n    tag: str             # Tag to uniquely identify an order\n    validity: str        # Order validity (DAY/IOC)\n    average_price: float # Average price at which qty got traded\n    disclosed_quantity: int  # Quantity that should be disclosed in market depth\n    exchange_order_id: str   # Unique order ID assigned by the exchange\n    exchange_timestamp: str  # Time at which order was placed/updated\n    instrument_token: str    # Identifier for subscribing to live market quotes\n    is_amo: bool            # Indicates if order is After Market Order\n    status_message: str     # Reason for rejection/modification/cancellation\n    order_id: str          # Internal unique order ID\n    order_request_id: str   # Request count for orders after 1st order\n    order_type: str        # Type of order (MARKET/LIMIT/SL/SL-M)\n    parent_order_id: str   # Parent order ID for CO/OCO legs\n    tradingsymbol: str     # Trading symbol of the instrument\n    order_timestamp: str   # Timestamp when order was placed\n    filled_quantity: int   # Total quantity traded from this order\n    transaction_type: str  # Indicates buy or sell order\n    trigger_price: float   # Trigger price for stop loss orders\n    placed_by: str        # Unique user identifier\n    variety: str          # Order complexity\n```\n\n----------------------------------------\n\nTITLE: Installing Upstox Python SDK via pip\nDESCRIPTION: Demonstrates how to install the Upstox Python SDK using pip, either from PyPI or directly from GitHub.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install upstox-python-sdk\n```\n\n----------------------------------------\n\nTITLE: Defining GetFullMarketQuoteResponse Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetFullMarketQuoteResponse model using a markdown table. It includes the property names, types, descriptions, and optional notes.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/GetFullMarketQuoteResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**dict(str, MarketQuoteSymbol)**](MarketQuoteSymbol.md) |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: Installing Upstox Python SDK via Setuptools\nDESCRIPTION: Demonstrates how to install the Upstox Python SDK using Setuptools for all users or a single user.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py install --user\n```\n\n----------------------------------------\n\nTITLE: PlaceOrderResponse Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the PlaceOrderResponse model, including their types and descriptions. Contains status (string) and data (PlaceOrderData object) fields.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/PlaceOrderResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**PlaceOrderData**](PlaceOrderData.md) |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: TokenRequest Properties Table Definition in Markdown\nDESCRIPTION: Markdown table defining the properties of the TokenRequest model, including property names, types, and descriptions for OAuth authentication parameters.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/TokenRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**code** | **str** |  | \n**client_id** | **str** | OAuth API key that is a public identifier for app | \n**client_secret** | **str** | OAuth client secret that is a private secret known only to app and authorization server | \n**redirect_uri** | **str** | Authorization server will redirect the user back to the application via redirect url | \n**grant_type** | **str** | Type of grant used to get an access token |\n```\n\n----------------------------------------\n\nTITLE: Defining CancelOrderV3Response Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the CancelOrderV3Response model using a markdown table. It includes the property names, types, descriptions, and optional notes.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/CancelOrderV3Response.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**CancelOrderData**](CancelOrderData.md) |  | [optional] \n**metadata** | [**OrderMetadata**](OrderMetadata.md) |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining Margin Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the Margin model using a markdown table. It includes span margin, exposure margin, equity margin, net buy premium, additional margin, total margin, and tender margin. Each property is described with its type and purpose.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/Margin.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Margin\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**span_margin** | **float** | Upfront margin mandatory by exchange for derivatives trade applicable on only FNO trade | [optional] \n**exposure_margin** | **float** | Based on ELM percentage values provided by exchange, applicable on only FNO trade | [optional] \n**equity_margin** | **float** | Margin applicable for any equity trade | [optional] \n**net_buy_premium** | **float** | Option premium required. | [optional] \n**additional_margin** | **float** | Application margin applicable on MCX FNO trade for certain commodities | [optional] \n**total_margin** | **float** | Total margin required for the basket | [optional] \n**tender_margin** | **float** | Tender margin | [optional] \n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Command to install the necessary Python packages using pip package manager. Installs upstox-python-sdk, websockets, asyncio, and protobuf libraries.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/examples/websocket/market_data/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install upstox-python-sdk websockets asyncio protobuf\n```\n\n----------------------------------------\n\nTITLE: GetHoldingsResponse Model Properties Definition in Markdown\nDESCRIPTION: Defines the properties of the GetHoldingsResponse model including status string and data array of HoldingsData objects. The model is used to structure the response from the holdings API endpoint.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/GetHoldingsResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**list[HoldingsData]**](HoldingsData.md) | Response data for holdings | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining GetOrderResponse Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetOrderResponse model using a markdown table. It includes two properties: 'status' (a string) and 'data' (a list of OrderData objects), both of which are optional.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/GetOrderResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**list[OrderData]**](OrderData.md) | Response data for order details | [optional]\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Upstox WebSocket Client in Python\nDESCRIPTION: Command to install the necessary Python packages including upstox-python-sdk, websockets, and asyncio using pip package manager.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/examples/websocket/order_updates/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install upstox-python-sdk websockets asyncio\n```\n\n----------------------------------------\n\nTITLE: Defining ProfileData Properties in Markdown\nDESCRIPTION: A markdown table documenting the properties of the ProfileData class used in the Upstox Python API client. It lists property names, data types, descriptions, and optional notes for each field in the user profile data structure.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/ProfileData.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ProfileData\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email** | **str** | E-mail address of the user | [optional] \n**exchanges** | **list[str]** | Lists the exchanges to which the user has access | [optional] \n**products** | **list[str]** | Lists the products types to which the user has access | [optional] \n**broker** | **str** | The broker ID | [optional] \n**user_id** | **str** | Uniquely identifies the user | [optional] \n**user_name** | **str** | Name of the user | [optional] \n**order_types** | **list[str]** | Order types enabled for the user | [optional] \n**user_type** | **str** |   Identifies the user&#x27;s registered role at the broker. This will be individual for all retail users | [optional] \n**poa** | **bool** |   To depict if the user has given power of attorney for transactions | [optional] \n**is_active** | **bool** |   Whether the status of account is active or not | [optional]\n```\n\n----------------------------------------\n\nTITLE: ModifyOrderRequest Properties Table in Markdown\nDESCRIPTION: Markdown table documenting the properties of the ModifyOrderRequest model, including field names, data types, descriptions and optional status.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/ModifyOrderRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nquantity | int | Quantity with which the order was placed | [optional] \nvalidity | str | Order validity (DAY- Day and IOC- Immediate or Cancel (IOC) order) | \nprice | float | Price at which the order was placed | \norder_id | str | The order ID for which the order must be modified | \norder_type | str | Type of order. It can be one of the following MARKET refers to market order LIMILT refers to Limit Order SL refers to Stop Loss Limit SL-M refers to Stop Loss Market | \ndisclosed_quantity | int | The quantity that should be disclosed in the market depth | [optional] \ntrigger_price | float | If the order is a stop loss order then the trigger price to be set is mentioned here |\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Command to install the necessary Python packages for the websocket client including websockets, asyncio, protobuf, and requests.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/examples/websocket/market_data/v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install websockets asyncio protobuf requests\n```\n\n----------------------------------------\n\nTITLE: Defining BrokerageData Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the BrokerageData model using a markdown table. It includes the property names, types, descriptions, and optional notes.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/BrokerageData.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**total** | **float** | Total charges for the order | [optional] \n**brokerage** | **float** | Brokerage charges for the order | [optional] \n**taxes** | [**BrokerageTaxes**](BrokerageTaxes.md) |  | [optional] \n**other_taxes** | [**OtherTaxes**](OtherTaxes.md) |  | [optional] \n**dp_plan** | [**DpPlan**](DpPlan.md) |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining BatchExecutionSummary Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the BatchExecutionSummary class using a markdown table. It includes the property names, their types, descriptions, and optional notes.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/BatchExecutionSummary.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**total** | **int** | The total number of order lines present in the payload. | [optional] \n**success** | **int** | The number of order lines that were successfully placed without any errors. | [optional] \n**error** | **int** | The number of order lines that encountered errors during processing, despite their payloads being valid. | [optional] \n```\n\n----------------------------------------\n\nTITLE: Importing Generated Protobuf Classes in Python\nDESCRIPTION: Code snippet showing how to import the generated Protocol Buffer classes in a Python script.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/examples/websocket/market_data/v3/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport MarketDataFeedV3_pb2 as pb\n```\n\n----------------------------------------\n\nTITLE: Defining PostMarginResponse Model Properties in Markdown\nDESCRIPTION: Documentation of the PostMarginResponse model class with its properties, types, and descriptions. The model has a status string and a data property that references the MarginData model.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/PostMarginResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# PostMarginResponse\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**MarginData**](MarginData.md) |  | [optional] \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Documenting AnalyticsData Properties in Markdown\nDESCRIPTION: Markdown table documenting the properties of the AnalyticsData class. Lists each property with its data type and indicates they are all optional float values.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/AnalyticsData.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# AnalyticsData\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**vega** | **float** |  | [optional] \n**theta** | **float** |  | [optional] \n**gamma** | **float** |  | [optional] \n**delta** | **float** |  | [optional] \n**iv** | **float** |  | [optional] \n**pop** | **float** |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining DepthMap Structure in Markdown\nDESCRIPTION: Documents the structure of the DepthMap model which contains two main properties: buy (list of bids) and sell (list of asks). Both properties are optional and reference the Depth model type.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/DepthMap.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# DepthMap\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**buy** | [**list[Depth]**](Depth.md) | Bids | [optional] \n**sell** | [**list[Depth]**](Depth.md) | Asks | [optional]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Holiday Information for a Specific Date Using Python Upstox SDK\nDESCRIPTION: Example code showing how to retrieve holiday information for a particular date using the Upstox API. The code creates an instance of the MarketHolidaysAndTimingsApi class and calls the get_holiday method with a date parameter.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/MarketHolidaysAndTimingsApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport swagger_client\nfrom swagger_client.rest import ApiException\nfrom pprint import pprint\n\n# create an instance of the API class\napi_instance = swagger_client.MarketHolidaysAndTimingsApi()\n_date = '_date_example' # str | \n\ntry:\n    # Get Holiday on particular date\n    api_response = api_instance.get_holiday(_date)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MarketHolidaysAndTimingsApi->get_holiday: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining OHLC Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the OHLC (Open, High, Low, Close) data model using a markdown table. It specifies the name, type, description, and optional status for each property.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/Ohlc.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| **open** | **float** | The open price of the trading session | [optional] |\n| **high** | **float** | The high price of the trading session | [optional] |\n| **low** | **float** | The low price of the trading session | [optional] |\n| **close** | **float** | The close price of the symbol from the previous session of trading | [optional] |\n```\n\n----------------------------------------\n\nTITLE: Retrieving Holiday List for Current Year Using Python Upstox SDK\nDESCRIPTION: Example code demonstrating how to retrieve a list of all holidays for the current year using the Upstox API. The code creates an instance of the MarketHolidaysAndTimingsApi class and calls the get_holidays method with no parameters.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/MarketHolidaysAndTimingsApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport swagger_client\nfrom swagger_client.rest import ApiException\nfrom pprint import pprint\n\n# create an instance of the API class\napi_instance = swagger_client.MarketHolidaysAndTimingsApi()\n\ntry:\n    # Get Holiday list of current year\n    api_response = api_instance.get_holidays()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MarketHolidaysAndTimingsApi->get_holidays: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: TokenResponse Model Properties Definition - Markdown\nDESCRIPTION: Defines the properties and data types of the TokenResponse model including user details like email, exchanges, products, broker information, user identifiers, order types, and authentication tokens.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/TokenResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email** | **str** | E-mail address of the user | [optional] \n**exchanges** | **list[str]** | Lists the exchanges to which the user has access | [optional] \n**products** | **list[str]** | Lists the products types to which the user has access | [optional] \n**broker** | **str** | The broker ID | [optional] \n**user_id** | **str** | Uniquely identifies the user | [optional] \n**user_name** | **str** | Name of the user | [optional] \n**order_types** | **list[str]** | Order types enabled for the user | [optional] \n**user_type** | **str** |   Identifies the user's registered role at the broker. This will be individual for all retail users | [optional] \n**poa** | **bool** |   To depict if the user has given power of attorney for transactions | [optional] \n**is_active** | **bool** |   Whether the status of account is active or not | [optional] \n**access_token** | **str** | The authentication token that is to used with every subsequent API requests | [optional]\n```\n\n----------------------------------------\n\nTITLE: MultiOrderSummary Properties Documentation in Markdown\nDESCRIPTION: Documents the properties of the MultiOrderSummary class including total orders, success count, error count, and payload error count. Each property includes type information and descriptive notes about its purpose and behavior.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/MultiOrderSummary.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# MultiOrderSummary\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**total** | **int** | The total number of order lines present in the payload. | [optional] \n**success** | **int** | The number of order lines that were successfully placed without any errors. | [optional] \n**error** | **int** | The number of order lines that encountered errors during processing, despite their payloads being valid. | [optional] \n**payload_error** | **int** | The number of order lines with payload errors, indicating formatting or data validity issues.<br/><br/><b>Note</b>: Orders are processed only if the entire batch is free of payload_error, ensuring error-free transactions. | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining GetHolidayResponse Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetHolidayResponse model using a markdown table. It specifies the name, type, and description of each property, along with optional notes.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/GetHolidayResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**list[HolidayData]**](HolidayData.md) | Response data for holiday list | [optional] \n```\n\n----------------------------------------\n\nTITLE: Python HoldingsData Class Properties Schema\nDESCRIPTION: Defines the properties of the HoldingsData class used to represent trading holdings information. Includes fields for security identification, quantity tracking, pricing data, and trading metadata.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/HoldingsData.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass HoldingsData:\n    isin: str                      # The standard ISIN representing stocks listed on multiple exchanges\n    cnc_used_quantity: int         # Quantity either blocked towards open or completed order\n    collateral_type: str           # Category of collateral assigned by RMS\n    company_name: str              # Name of the company\n    haircut: float                 # This is the haircut percentage applied from RMS (applicable incase of collateral)\n    product: str                   # Shows if the order was either Intraday, Delivery, CO or OCO\n    quantity: int                  # The total holding qty\n    tradingsymbol: str             # Shows the trading symbol of the instrument\n    last_price: float              # The last traded price of the instrument\n    close_price: float             # Closing price of the instrument from the last trading day\n    pnl: float                     # Profit and Loss\n    day_change: float              # Day's change in absolute value for the stock\n    day_change_percentage: float    # Day's change in percentage for the stock\n    instrument_token: str          # Key issued by Upstox for the instrument\n    average_price: float           # Average price at which the net holding quantity was acquired\n    collateral_quantity: int       # Quantity marked as collateral by RMS on users request\n    collateral_update_quantity: int # No description provided\n    t1_quantity: int               # Quantity on T+1 day after order execution\n    exchange: str                  # Exchange of the trading symbol\n```\n\n----------------------------------------\n\nTITLE: Model Properties Definition in Markdown\nDESCRIPTION: Defines the properties of the CancelOrExitMultiOrderResponse model including their types and optional status. The model contains status (string), data (CancelOrExitMultiOrderData object), errors (array of CancelOrExitOrderErrorData), and summary (BatchExecutionSummary object).\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/CancelOrExitMultiOrderResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CancelOrExitMultiOrderResponse\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**CancelOrExitMultiOrderData**](CancelOrExitMultiOrderData.md) |  | [optional] \n**errors** | [**list[CancelOrExitOrderErrorData]**](CancelOrExitOrderErrorData.md) | Error data for cancel or exit order request | [optional] \n**summary** | [**BatchExecutionSummary**](BatchExecutionSummary.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: ModifyOrderV3Response Properties Table\nDESCRIPTION: Markdown table defining the properties of the ModifyOrderV3Response model including status, data, and metadata fields with their types and descriptions.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/ModifyOrderV3Response.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**ModifyOrderData**](ModifyOrderData.md) |  | [optional] \n**metadata** | [**OrderMetadata**](OrderMetadata.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining UserFundMarginData Properties\nDESCRIPTION: Model definition for UserFundMarginData class containing properties related to margin and fund management in trading operations. Each property is defined with its type, description and optional status.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/UserFundMarginData.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# UserFundMarginData\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**used_margin** | **float** | Positive values denote the amount blocked into an Open order or position.  Negative value denotes the amount being released. | [optional] \n**payin_amount** | **float** | Instant payin will reflect here | [optional] \n**span_margin** | **float** | Amount blocked on futures and options towards SPAN | [optional] \n**adhoc_margin** | **float** | Payin amount credited through a manual process | [optional] \n**notional_cash** | **float** | The amount maintained for withdrawal | [optional] \n**available_margin** | **float** | Total margin available for trading | [optional] \n**exposure_margin** | **float** | Amount blocked on futures and options towards Exposure | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining CancelOrderResponse Properties in Markdown\nDESCRIPTION: Markdown table documenting the properties of the CancelOrderResponse model. Includes status string and CancelOrderData object fields with their types and optional status.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/CancelOrderResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**CancelOrderData**](CancelOrderData.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: ModifyOrderData Model Properties Definition\nDESCRIPTION: Defines the properties of the ModifyOrderData model class, specifically the order_id field which is an optional string parameter used to identify an order.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/ModifyOrderData.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**order_id** | **str** | Order ID | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetPositionResponse Model Properties in Markdown\nDESCRIPTION: Specifies the properties of the GetPositionResponse model, including status and data fields. The data field is an array of PositionData objects, representing response data for position details.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/GetPositionResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetPositionResponse\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**list[PositionData]**](PositionData.md) | Response data for position details | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining ConvertPositionResponse Model Structure\nDESCRIPTION: Markdown table defining the properties of the ConvertPositionResponse model. Contains two fields: status (string) and data (ConvertPositionData object), both marked as optional.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/ConvertPositionResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**ConvertPositionData**](ConvertPositionData.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining ProfitAndLossMetaDataWrapper Model Properties in Markdown\nDESCRIPTION: Specifies the properties of the ProfitAndLossMetaDataWrapper model using a markdown table. It includes the property name, type, description, and optional status.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/ProfitAndLossMetaDataWrapper.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ---- | ---- | ----------- | ----- |\n| **page** | [**ProfitAndLossMetaData**](ProfitAndLossMetaData.md) |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining GetOrderBookResponse Properties in Markdown\nDESCRIPTION: Specifies the properties of the GetOrderBookResponse model, including status and data fields. The data field is an array of OrderBookData objects.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/GetOrderBookResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**list[OrderBookData]**](OrderBookData.md) | Response data for order Book | [optional]\n```\n\n----------------------------------------\n\nTITLE: ConvertPositionRequest Model Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties, types and descriptions for the ConvertPositionRequest model used in trading position conversions.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/ConvertPositionRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ninstrument_token | str | Key of the instrument | \nnew_product | str | Indicates the new product to use for the convert positions | \nold_product | str | Indicates the old product to use for the convert positions | \ntransaction_type | str | Indicates whether its a buy(b) or sell(s) order | \nquantity | int | Quantity with which the position to convert |\n```\n\n----------------------------------------\n\nTITLE: Defining ProfitAndLossChargesTaxes Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the ProfitAndLossChargesTaxes model using a markdown table. It specifies the name, type, description, and optional status for each property.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/ProfitAndLossChargesTaxes.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**gst** | **float** | GST charges | [optional] \n**stt** | **float** | STT charges | [optional] \n**stamp_duty** | **float** | Stamp duty charges | [optional]\n```\n\n----------------------------------------\n\nTITLE: InstrumentData Class Properties Definition\nDESCRIPTION: Defines the properties of an InstrumentData class including trading parameters, identification fields, and pricing information. The class represents financial instrument metadata with properties for exchange details, trading parameters, underlying instrument information, and MTF (Margin Trading Facility) settings.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/InstrumentData.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass InstrumentData:\n    name: str                  # optional\n    segment: str               # optional\n    exchange: str              # optional\n    isin: str                  # optional\n    expiry: datetime           # optional\n    country: str               # optional\n    latency: str               # optional\n    description: str           # optional\n    currency: str              # optional\n    weekly: bool               # optional\n    instrument_key: str        # optional\n    exchange_token: str        # optional\n    trading_symbol: str        # optional\n    short_name: str            # optional\n    tick_size: float           # optional\n    lot_size: int              # optional\n    instrument_type: str       # optional\n    freeze_quantity: float     # optional\n    underlying_key: str        # optional\n    underlying_type: str       # optional\n    underlying_symbol: str     # optional\n    last_trading_date: datetime # optional\n    strike_price: float        # optional\n    price_quote_unit: str      # optional\n    qty_multiplier: int        # optional\n    minimum_lot: int           # optional\n    start_time: str            # optional\n    end_time: str              # optional\n    week_days: str             # optional\n    general_denominator: float # optional\n    general_numerator: float   # optional\n    price_numerator: float     # optional\n    price_denominator: float   # optional\n    mtf_enabled: bool          # optional\n    mtf_bracket: float         # optional\n    security_type: str         # optional\n```\n\n----------------------------------------\n\nTITLE: Defining ConvertPositionData Model Properties in Markdown\nDESCRIPTION: Describes the properties of the ConvertPositionData model, including the 'status' field which is a string representing the status message for convert position requests. The field is marked as optional.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/ConvertPositionData.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** | Status message for convert position request | [optional]\n```\n\n----------------------------------------\n\nTITLE: ProfitAndLossOtherChargesTaxes Model Properties Table\nDESCRIPTION: Markdown table documenting the properties, types and descriptions of ProfitAndLossOtherChargesTaxes model fields. Includes transaction charges, clearing charges, other charges, SEBI turnover, and demat transaction charges.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/ProfitAndLossOtherChargesTaxes.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ntransaction | float | transaction charges | [optional] \nclearing | float | clearing charges | [optional] \nothers | float | others charges | [optional] \nsebi_turnover | float | SEBI turnover | [optional] \ndemat_transaction | float | demat transaction charges | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GttRule Properties for Upstox Python SDK\nDESCRIPTION: This code snippet defines the properties of the GttRule class, including strategy, trigger_type, and trigger_price. It specifies the data types and provides descriptions for each property.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/GttRule.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**strategy** | **str** | Defines the strategy for the GTT order leg: ENTRY - First leg order STOPLOSS - Stop-loss order TARGET - Target order | \n**trigger_type** | **str** | Trigger type for each leg of the order | \n**trigger_price** | **float** | Trigger price for the GTT order leg | \n```\n\n----------------------------------------\n\nTITLE: Defining ProfitAndLossMetaData Properties in Markdown\nDESCRIPTION: This markdown table defines the properties of the ProfitAndLossMetaData model, including their names, types, descriptions, and optional status. It includes fields for pagination control.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/ProfitAndLossMetaData.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**page_number** | **int** | pageNumber for pagination | [optional] \n**page_size** | **int** | Page size | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining IndieUserTokenRequest Model Properties in Markdown\nDESCRIPTION: Describes the 'client_secret' property of the IndieUserTokenRequest model. It specifies the type, description, and optional nature of the property.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/IndieUserTokenRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**client_secret** | **str** | OAuth client secret that is a private secret known only to app and authorization server | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining GttModifyOrderRequest Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GttModifyOrderRequest model, including their types, descriptions, and any additional notes. It covers the type of GTT order, quantity, rules, and the unique identifier for the order to be modified.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/GttModifyOrderRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**type** | **str** | Type of GTT order. It can be one of the following: SINGLE refers to a single-leg GTT order MULTIPLE refers to a multi-leg GTT order | \n**quantity** | **int** | Quantity with which the order is to be placed | \n**rules** | [**list[GttRule]**](GttRule.md) | List of rules defining the conditions for each leg in the GTT order | \n**gtt_order_id** | **str** | Unique identifier of the GTT order to be modified | \n```\n\n----------------------------------------\n\nTITLE: Defining ProfitAndLossChargesWrapperData Model in Python\nDESCRIPTION: This code snippet defines the ProfitAndLossChargesWrapperData model with a single property 'charges_breakdown'. The property is of type ProfitAndLossChargesData and is optional.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/ProfitAndLossChargesWrapperData.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass ProfitAndLossChargesWrapperData:\n    def __init__(self):\n        self.charges_breakdown = None  # ProfitAndLossChargesData, optional\n```\n\n----------------------------------------\n\nTITLE: Defining IndieUserInitTokenResponse Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the IndieUserInitTokenResponse model, including their names, types, and optional descriptions. It uses a markdown table format to present the information clearly.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/IndieUserInitTokenResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**IndieUserInitTokenData**](IndieUserInitTokenData.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining MultiOrderData Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the MultiOrderData class using a markdown table. It specifies the name, type, description, and optional notes for each property.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/MultiOrderData.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**correlation_id** | **str** | A unique identifier for tracking individual orders within the batch | [optional] \n**order_id** | **str** | An order ID for the order request placed | [optional]\n```\n\n----------------------------------------\n\nTITLE: MarginRequest Model Properties Definition in Markdown\nDESCRIPTION: Defines the structure of the MarginRequest model which contains a single property 'instruments' that accepts a list of Instrument objects. This is used for margin calculation and validation operations.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/MarginRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**instruments** | [**list[Instrument]**](Instrument.md) | instruments |\n```\n\n----------------------------------------\n\nTITLE: Defining CancelOrExitMultiOrderData Class Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the CancelOrExitMultiOrderData class using a markdown table. It specifies the 'order_ids' property as a list of strings, which are reference order IDs, and marks it as optional.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/CancelOrExitMultiOrderData.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **order_ids** | **list[str]** | Reference order IDs | [optional] \n```\n\n----------------------------------------\n\nTITLE: GetUserFundMarginResponse Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the GetUserFundMarginResponse model, including the status field and data dictionary containing UserFundMarginData objects.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/GetUserFundMarginResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**dict(str, UserFundMarginData)**](UserFundMarginData.md) | Response data for Balance | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining BrokerageTaxes Properties Table in Markdown\nDESCRIPTION: Markdown table documenting the properties of the BrokerageTaxes model, including property names, data types, and descriptions. Features three floating-point properties for different types of trading charges.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/BrokerageTaxes.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**gst** | **float** | GST charges | [optional] \n**stt** | **float** | STT charges | [optional] \n**stamp_duty** | **float** | Stamp duty charges | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining ApiGatewayErrorResponse Model in Python\nDESCRIPTION: Specifies the properties of the ApiGatewayErrorResponse model, including status as a string and errors as a list of Problem objects. This structure is used to represent error responses from an API gateway.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/ApiGatewayErrorResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ApiGatewayErrorResponse\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**errors** | [**list[Problem]**](Problem.md) |  | [optional] \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyOrderResponse Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the ModifyOrderResponse model using a markdown table. It includes the property names, types, descriptions, and optional notes.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/ModifyOrderResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**ModifyOrderData**](ModifyOrderData.md) |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining OAuthClientExceptionCauseSuppressed Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the OAuthClientExceptionCauseSuppressed model using a markdown table. It includes the property names, types, descriptions, and optional notes.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OAuthClientExceptionCauseSuppressed.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**stack_trace** | [**list[OAuthClientExceptionCauseStackTrace]**](OAuthClientExceptionCauseStackTrace.md) |  | [optional] \n**message** | **str** |  | [optional] \n**localized_message** | **str** |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining OAuthClientExceptionCause Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the OAuthClientExceptionCause model. It includes fields for stack trace, message, suppressed exceptions, and localized message. All fields are optional.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OAuthClientExceptionCause.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# OAuthClientExceptionCause\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**stack_trace** | [**list[OAuthClientExceptionCauseStackTrace]**](OAuthClientExceptionCauseStackTrace.md) |  | [optional] \n**message** | **str** |  | [optional] \n**suppressed** | [**list[OAuthClientExceptionCauseSuppressed]**](OAuthClientExceptionCauseSuppressed.md) |  | [optional] \n**localized_message** | **str** |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining ProfitAndLossChargesData Model Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the ProfitAndLossChargesData model, including their names, types, descriptions, and whether they are optional. It covers total charges, brokerage, taxes, and other charges.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/ProfitAndLossChargesData.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**total** | **float** |   Total charges for the user | [optional] \n**brokerage** | **float** | Brokerage charges for the order | [optional] \n**taxes** | [**ProfitAndLossChargesTaxes**](ProfitAndLossChargesTaxes.md) |  | [optional] \n**charges** | [**ProfitAndLossOtherChargesTaxes**](ProfitAndLossOtherChargesTaxes.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: OAuth Client Exception Stack Trace Properties Table\nDESCRIPTION: Markdown table defining the properties of the OAuthClientExceptionCauseStackTrace class, including property names, types, and optional status.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OAuthClientExceptionCauseStackTrace.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**class_loader_name** | **str** |  | [optional] \n**module_name** | **str** |  | [optional] \n**module_version** | **str** |  | [optional] \n**method_name** | **str** |  | [optional] \n**file_name** | **str** |  | [optional] \n**line_number** | **int** |  | [optional] \n**class_name** | **str** |  | [optional] \n**native_method** | **bool** |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Running the WebSocket Client\nDESCRIPTION: Command to execute the WebSocket client Python script.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/examples/websocket/market_data/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython3 websocket_client.py\n```\n\n----------------------------------------\n\nTITLE: Defining Trade History Response Data Model Properties in Markdown\nDESCRIPTION: Documents the properties of TradeHistoryResponseTradeData class with their data types. Properties include trading parameters like exchange, segment, quantity, price and transaction details. All fields are marked as optional.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/TradeHistoryResponseTradeData.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# TradeHistoryResponseTradeData\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**exchange** | **str** |  | [optional] \n**segment** | **str** |  | [optional] \n**option_type** | **str** |  | [optional] \n**quantity** | **int** |  | [optional] \n**amount** | **float** |  | [optional] \n**trade_id** | **str** |  | [optional] \n**trade_date** | **str** |  | [optional] \n**transaction_type** | **str** |  | [optional] \n**scrip_name** | **str** |  | [optional] \n**strike_price** | **str** |  | [optional] \n**expiry** | **str** |  | [optional] \n**price** | **float** |  | [optional] \n**isin** | **str** |  | [optional] \n**symbol** | **str** |  | [optional] \n**instrument_token** | **str** |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: OAuthClientException Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the OAuthClientException model including their types, descriptions and optional status.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OAuthClientException.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**cause** | [**OAuthClientExceptionCause**](OAuthClientExceptionCause.md) |  | [optional] \n**stack_trace** | [**list[OAuthClientExceptionCauseStackTrace]**](OAuthClientExceptionCauseStackTrace.md) |  | [optional] \n**message** | **str** |  | [optional] \n**suppressed** | [**list[OAuthClientExceptionCauseSuppressed]**](OAuthClientExceptionCauseSuppressed.md) |  | [optional] \n**localized_message** | **str** |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Protobuf Classes\nDESCRIPTION: Python code showing how to import the generated Protocol Buffer classes into your Python script.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/examples/websocket/market_data/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport MarketDataFeed_pb2 as pb\n```\n\n----------------------------------------\n\nTITLE: Defining GetOptionContractResponse Properties in Markdown\nDESCRIPTION: Documents the properties of GetOptionContractResponse class including status string and data array of InstrumentData objects. Both properties are marked as optional.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/GetOptionContractResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetOptionContractResponse\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**list[InstrumentData]**](InstrumentData.md) | Response data for option contracts | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining CancelOrderData Model Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the CancelOrderData model using a markdown table. It specifies the 'order_id' property as a string type, which is optional and represents a reference order ID.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/CancelOrderData.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**order_id** | **str** | Reference order ID | [optional]\n```\n\n----------------------------------------\n\nTITLE: Generating Protobuf Python Classes\nDESCRIPTION: Command to generate Python classes from Protocol Buffer definition files (.proto) in the current directory.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/examples/websocket/market_data/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nprotoc --python_out=. *.proto\n```\n\n----------------------------------------\n\nTITLE: GetProfileResponse Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the GetProfileResponse model, including status (string) and data (ProfileData object) fields\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/GetProfileResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**ProfileData**](ProfileData.md) |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: DpPlan Model Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the DpPlan model, including property names, types, descriptions and optional status.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/DpPlan.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **str** | Name | [optional] \n**min_expense** | **float** | Minimum expense charges | [optional]\n```\n\n----------------------------------------\n\nTITLE: Adding Protoc Compiler to System PATH\nDESCRIPTION: Bash command to add the Protocol Buffers compiler directory to system PATH environment variable for Unix-like systems.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/examples/websocket/market_data/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=$PATH:/path/to/protoc/bin\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for GetOrderDetailsResponse Model\nDESCRIPTION: Markdown formatted documentation detailing the structure of the GetOrderDetailsResponse model. It includes property names, types, descriptions, and optional flags, along with navigation links to other documentation sections.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/GetOrderDetailsResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetOrderDetailsResponse\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**OrderBookData**](OrderBookData.md) |  | [optional] \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Defining GttCancelOrderRequest Properties in Markdown\nDESCRIPTION: Markdown table documenting the properties of the GttCancelOrderRequest model. Contains the gtt_order_id field which is a required string parameter used to uniquely identify the GTT order that needs to be cancelled.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/GttCancelOrderRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**gtt_order_id** | **str** | Unique identifier of the GTT order to be cancelled |\n```\n\n----------------------------------------\n\nTITLE: Importing Upstox Python SDK\nDESCRIPTION: Shows how to import the Upstox client after installation.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport upstox_client\n```\n\n----------------------------------------\n\nTITLE: Running the Python Websocket Client\nDESCRIPTION: Command to execute the Python script that implements the websocket client.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/examples/websocket/market_data/v3/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython3 websocket_client.py\n```\n\n----------------------------------------\n\nTITLE: GetMarketStatusResponse Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the GetMarketStatusResponse model, including status string and MarketStatusData object fields.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/GetMarketStatusResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**MarketStatusData**](MarketStatusData.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Generating Python Classes from Protobuf Files\nDESCRIPTION: Command to generate Python classes from Protocol Buffer definition files in the current directory.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/examples/websocket/market_data/v3/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nprotoc --python_out=. *.proto\n```\n\n----------------------------------------\n\nTITLE: GetTradeResponse Model Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the GetTradeResponse model, including status field as string and data field as array of TradeData objects.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/GetTradeResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**list[TradeData]**](TradeData.md) | Response data for trades | [optional] \n```\n\n----------------------------------------\n\nTITLE: Running the Upstox WebSocket Client Python Script\nDESCRIPTION: Command to execute the Python script for connecting to the Upstox WebSocket API. Users should replace 'websocket_client.py' with their actual script filename.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/examples/websocket/order_updates/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npython3 websocket_client.py\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Schema for IntraDayCandleData Properties\nDESCRIPTION: Defines the property schema for the IntraDayCandleData model, showing the 'candles' property which is an optional list of object lists.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/IntraDayCandleData.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**candles** | **list[list[object]]** |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Specifies the minimum required versions of essential Python packages including certifi, six, python_dateutil, setuptools, and urllib3 needed for the Upstox Python SDK.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncertifi >= 14.05.14\nsix >= 1.10\npython_dateutil >= 2.5.3\nsetuptools >= 21.0.0\nurllib3 >= 1.15.1\n```\n\n----------------------------------------\n\nTITLE: Defining API Parameters for Trade-wise Profit and Loss Metadata in Markdown\nDESCRIPTION: This snippet defines the parameters required for the API call to retrieve trade-wise profit and loss metadata. It includes details on segment, financial year, API version, and optional date range parameters.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/TradeProfitAndLossApi.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Parameters\n\nName | Type | Description  | Notes\n------------- | ------------- | ------------- | -------------\n **segment** | **str**| Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives | \n **financial_year** | **str**| Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122 | \n **api_version** | **str**| API Version Header | \n **from_date** | **str**| Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format | [optional] \n **to_date** | **str**| Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format | [optional] \n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Upstox Project\nDESCRIPTION: This snippet lists the required Python packages and their minimum versions for the Upstox Python project. It includes packages for testing (nose), code coverage (coverage), plugin management (pluggy), testing utilities (py), and randomization (randomize).\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/test-requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\ncoverage>=4.0.3\nnose>=1.3.7\npluggy>=0.3.1\npy>=1.4.31\nrandomize>=0.13\n```\n\n----------------------------------------\n\nTITLE: Specifying Return Type and Authorization for Trade-wise Profit and Loss API in Markdown\nDESCRIPTION: This snippet specifies the return type of the API call, the authorization method required, and the HTTP request headers for the trade-wise profit and loss metadata endpoint.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/TradeProfitAndLossApi.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Return type\n\n[**GetTradeWiseProfitAndLossMetaDataResponse**](GetTradeWiseProfitAndLossMetaDataResponse.md)\n\n### Authorization\n\n[OAUTH2](../README.md#OAUTH2)\n\n### HTTP request headers\n\n - **Content-Type**: Not defined\n - **Accept**: application/json, */*\n```\n\n----------------------------------------\n\nTITLE: Setting PATH Environment Variable for Protocol Buffers Compiler\nDESCRIPTION: Bash command to add the Protocol Buffers compiler (protoc) directory to the system PATH on Unix-like systems.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/examples/websocket/market_data/v3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=$PATH:/path/to/protoc/bin\n```\n\n----------------------------------------\n\nTITLE: Verifying Protocol Buffers Compiler Installation\nDESCRIPTION: Command to check the installed version of the Protocol Buffers compiler.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/examples/websocket/market_data/v3/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nprotoc --version\n```\n\n----------------------------------------\n\nTITLE: Retrieving GTT Order Details with Upstox Python Client\nDESCRIPTION: Example code for retrieving GTT order details using the Upstox Python client. It configures OAuth2 authentication, initializes the API with the optional GTT order ID parameter, and handles potential exceptions.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/OrderApiV3.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport upstox_client\nfrom upstox_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure OAuth2 access token for authorization: OAUTH2\nconfiguration = upstox_client.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n\n# create an instance of the API class\napi_instance = upstox_client.OrderApiV3(upstox_client.ApiClient(configuration))\ngtt_order_id = 'gtt_order_id_example' # str | Unique identifier of the GTT order for which the order history is required (optional)\n\ntry:\n    # Get GTT order details\n    api_response = api_instance.get_gtt_order_details(gtt_order_id=gtt_order_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling OrderApiV3->get_gtt_order_details: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining WebsocketAuthRedirectResponse Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the WebsocketAuthRedirectResponse model. It includes two properties: 'status' as a string and 'data' as a WebsocketAuthRedirectResponseData object. Both properties are optional.\nSOURCE: https://github.com/upstox/upstox-python.git/blob/master/docs/WebsocketAuthRedirectResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** |  | [optional] \n**data** | [**WebsocketAuthRedirectResponseData**](WebsocketAuthRedirectResponseData.md) |  | [optional]\n```"
  }
]