[
  {
    "owner": "bootstrap-vue-next",
    "repo": "bootstrap-vue-next",
    "content": "TITLE: Configure BootstrapVueNext in Nuxt 3\nDESCRIPTION: This code snippet shows how to configure the `@bootstrap-vue-next/nuxt` module in a Nuxt 3 application.  It imports the module and sets the CSS to include the Bootstrap CSS file.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// nuxt.config.js/ts\nexport default defineNuxtConfig({\n  modules: ['@bootstrap-vue-next/nuxt'],\n  css: ['bootstrap/dist/css/bootstrap.min.css'],\n})\n```\n\n----------------------------------------\n\nTITLE: Install BootstrapVueNext for Nuxt 3 using NPM\nDESCRIPTION: This command installs the Bootstrap, BootstrapVueNext and the Nuxt module for BootstrapVueNext as development dependencies using NPM.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm i bootstrap bootstrap-vue-next @bootstrap-vue-next/nuxt -D\n```\n\n----------------------------------------\n\nTITLE: Configure Vite for Unplugin Icons\nDESCRIPTION: Configures Vite to use unplugin-icons and unplugin-vue-components. It imports the necessary modules, adds them to the Vite plugins array, and sets options for automatic icon installation and component resolution. This enables the use of icons from various sets without manual imports.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/icons.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.js/ts\nimport {defineConfig} from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport Icons from 'unplugin-icons/vite'\nimport Components from 'unplugin-vue-components/vite'\nimport IconsResolve from 'unplugin-icons/resolver'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    vue(),\n    Components({\n      resolvers: [IconsResolve()],\n      dts: true,\n    }),\n    Icons({\n      compiler: 'vue3',\n      autoInstall: true,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: BDropdownItemButton Usage (Vue)\nDESCRIPTION: Demonstrates the usage of `BDropdownItemButton` which renders a button element within a dropdown. This is used to create dropdown menu items that trigger actions rather than navigation, making it more semantically correct when no navigation is involved. It's an alternative to using links for actions within a dropdown menu.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"Dropdown\">\n      <BDropdownItemButton @click=\"doSomething\">Action</BDropdownItemButton>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Install Bootstrap and BootstrapVueNext using PNPM\nDESCRIPTION: This command installs the Bootstrap and BootstrapVueNext packages using the PNPM package manager. It adds the packages as dependencies to your project.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add bootstrap bootstrap-vue-next\n```\n\n----------------------------------------\n\nTITLE: BAlert Model-Value Prop After Migration (Vue)\nDESCRIPTION: Demonstrates the updated method to show or hide the `BAlert` component using the `model-value` prop in BootstrapVueNext. This replaces the deprecated `show` prop.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/migration-guide.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BAlert model-value=\"true\">I am visible</BAlert>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Install Unplugin Icons (YARN)\nDESCRIPTION: Installs unplugin-icons, unplugin-vue-components, and the Vue compiler using YARN as development dependencies. This command is part of the preferred installation method for using icons in a Vue 3 project.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/icons.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add unplugin-icons unplugin-vue-components @vue/compiler-sfc -D\n```\n\n----------------------------------------\n\nTITLE: Default Sort Comparer Function\nDESCRIPTION: This TypeScript function is the default comparer used by BTable when no custom comparer is provided. It retrieves the string value of the items being compared using getStringValue function and performs a locale-aware comparison. The function receives the items to be compared and the key to compare on.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/table.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const defaultSortComparer: BTableSortByComparerFunction = (a, b, key) => {\n  const valA = getStringValue(a, key) ?? ''\n  const valB = getStringValue(b, key) ?? ''\n\n  return valA.localeCompare(valB, undefined, { numeric: true })\n}\n```\n\n----------------------------------------\n\nTITLE: Table Sort By Example (Typescript)\nDESCRIPTION: This Typescript snippet demonstrates how to pre-specify the column to be sorted and the order of sorting (ascending or descending) using the `sortBy` model in a Bootstrap-Vue-Next table.  `sortBy` should be an array containing a single `BTableSortBy` object with a defined `order` field.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/table.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const sortBy = ref([\n  {\n    key: 'age',\n    order: 'desc',\n    compare: (a: number, b: number) => a - b\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Install TypeScript dependencies using NPM\nDESCRIPTION: This command installs optional peer dependencies required for full TypeScript type support. These dependencies are not installed by default and include `@floating-ui/vue`, `@vueuse/core`, and `vue-router`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @floating-ui/vue @vueuse/core vue-router\n```\n\n----------------------------------------\n\nTITLE: Table Fields Configuration in Typescript\nDESCRIPTION: This snippet demonstrates how to configure table fields using Typescript in Bootstrap-Vue-Next. It is used within the component to dynamically render table headers and data cells based on the provided field definitions. The fields determine the data displayed, the styling, and the behavior of each column.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/table.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ./demo/TableFields.ts#snippet{ts}\n\n```\n\n----------------------------------------\n\nTITLE: Scrollable Modal Body in BootstrapVue Next\nDESCRIPTION: This code snippet showcases how to create a scrollable modal body in BootstrapVue Next by setting the `scrollable` prop to `true` on the `BModal` component. This allows the modal's content to scroll if it exceeds the modal's height.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/modal.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BButton v-b-modal.modal-scrollable>Launch scrolling modal</BButton>\n\n  <BModal id=\"modal-scrollable\" scrollable title=\"Scrollable Content\">\n    <p class=\"my-4\" v-for=\"i in 20\" :key=\"i\">\n      Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in,\n      egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\n    </p>\n  </BModal>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Form with Confirmation and Upload Status using BOverlay (Vue)\nDESCRIPTION: This Vue component demonstrates a form with a confirmation dialog and an upload status indicator using the BOverlay component from Bootstrap-Vue-Next. The component uses Vue's reactivity system to manage the form's state (formbusy, processing, processingcounter) and includes functions for form submission, cancellation, and confirmation. The template uses BForm, BFormInput, BButton, BOverlay, and BProgress components.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/overlay.md#_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BForm class=\"position-relative p-3\" @submit.prevent=\"onFormSubmit\">\n    <div class=\"row\">\n      <label class=\"col-lg-2\" label-for=\"form-name\">Name</label>\n      <BFormInput id=\"form-name\" class=\"col\" :disabled=\"formbusy\" />\n    </div>\n\n    <div class=\"row mt-2\">\n      <label class=\"col-lg-2\" label-for=\"form-mail\">Email</label>\n      <BFormInput id=\"form-email\" class=\"col\" type=\"email\" :disabled=\"formbusy\" />\n    </div>\n\n    <div class=\"d-flex justify-content-center mt-2\">\n      <BButton ref=\"formsubmit\" type=\"submit\" :disabled=\"formbusy\">Submit</BButton>\n    </div>\n\n    <BOverlay :show=\"formbusy\" no-wrap @shown=\"onFormOverlayShown\" @hidden=\"onFormOverlayHidden\">\n      <template #overlay>\n        <div v-if=\"processing\" class=\"text-center p-4 bg-primary text-light rounded\">\n          <div class=\"mb-3\">Processing...</div>\n          <BProgress\n            min=\"1\"\n            max=\"20\"\n            :value=\"processingcounter\"\n            variant=\"success\"\n            height=\"3px\"\n            class=\"mx-n4 rounded-0\"\n          />\n        </div>\n        <div\n          v-else\n          ref=\"formdialog\"\n          tabindex=\"-1\"\n          role=\"dialog\"\n          aria-modal=\"false\"\n          aria-labelledby=\"form-confirm-label\"\n          class=\"text-center p-3\"\n        >\n          <p><strong id=\"form-confirm-label\">Are you sure?</strong></p>\n          <div class=\"d-flex\" style=\"column-gap: 5%;\">\n            <BButton variant=\"outline-danger\" class=\"me-3\" @click=\"onFormCancel\"> Cancel </BButton>\n            <BButton variant=\"outline-success\" @click=\"onFormOK\">OK</BButton>\n          </div>\n        </div>\n      </template>\n    </BOverlay>\n  </BForm>\n</template>\n\n<script setup lang=\"ts\">\nconst formbusy = ref(false)\nconst processing = ref(false)\nconst processingcounter = ref(1)\nconst formdialog = ref<HTMLElement | null>(null)\nlet processingInterval = null\n\nconst clearProcessingInterval = () => {\n  if (processingInterval) {\n    clearInterval(processingInterval)\n    processingInterval = null\n  }\n}\n\nconst onBuzyHidden = () => {\n  // Focus the dialog prompt\n  //formdialog.focus()\n}\n\nconst onFormOverlayHidden = () => {\n  // In this case, we return focus to the submit button\n  // You may need to alter this based on your application requirements\n}\n\nconst onFormSubmit = () => {\n  processing.value = false\n  formbusy.value = true\n}\n\nconst onFormCancel = () => {\n  formbusy.value = false\n}\n\nconst onFormOK = () => {\n  processingcounter.value = 1\n  processing.value = true\n  clearProcessingInterval()\n  processingInterval = setInterval(() => {\n    if (processingcounter.value < 20) {\n      processingcounter.value++\n    } else {\n      clearProcessingInterval()\n      nextTick(() => {\n        formbusy.value = false\n        processing.value = false\n      })\n    }\n  }, 350)\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Showing a Basic Toast with useToastController Vue\nDESCRIPTION: This snippet shows how to use the useToastController composable to display a simple toast message. It imports the useToastController and uses its `show` method to create and display a toast with a title and body. The `show` method is called within a button click handler.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/composables/useToastController.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BButton @click=\"show?.({props: {title: 'Hello', body: 'World'}})\">Show</BButton>\n</template>\n\n<script setup lang=\"ts\">\nconst {show} = useToastController()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Toast Usage Vue\nDESCRIPTION: Demonstrates basic usage of the BToast component with v-model for toggling visibility and a title template. It shows how to define the component and control its state using a ref in the script setup.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/toast.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BToast v-model=\"active\" variant=\"info\">\n    <template #title> Title </template>\n    Body\n  </BToast>\n</template>\n\n<script setup lang=\"ts\">\nconst isActive = ref(false)\n</script>\n```\n\n----------------------------------------\n\nTITLE: External and Router Links with BLink\nDESCRIPTION: Illustrates how to create standard links (`<a>`) using the `href` prop and router links (`<router-link>`) using the `to` prop with the BLink component. When using Nuxt.js, `<nuxt-link>` will be used instead of `<router-link>`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/link.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<b-link href=\"https://example.com\">External Link</b-link>\n\n<b-link to=\"/route\">Router Link</b-link>\n\n```\n\n----------------------------------------\n\nTITLE: Grid Overview Demo - Vue HTML\nDESCRIPTION: This snippet demonstrates a basic grid layout with three equal-width columns using Bootstrap-Vue Next's grid classes. The columns are centered within a `<BContainer>`. This example showcases the fundamental use of `<BContainer>`, `<BRow>`, and `<BCol>` components to create a responsive grid.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"bd-example-row\">\n  <BContainer>\n    <BRow>\n      <BCol>1 of 3</BCol>\n      <BCol>2 of 3</BCol>\n      <BCol>3 of 3</BCol>\n    </BRow>\n  </BContainer>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configure Global Bootstrap-Vue-Next Component Options (TS)\nDESCRIPTION: This snippet demonstrates how to use the createBootstrap plugin to set default prop values for Bootstrap-Vue-Next components globally.  It configures default types for all components with a 'type' prop, sets 'flush' to true for BAccordion, specifies text for BFormText, and sets the type for BSpinner.  Note the caveat about 'type' affecting unrelated components like BFormInput. The global key is used to set a default value across all components.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/configurations/global-options.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateBootstrap({\n  components: {\n    global: {\n      type: 'grow', // Caution: This impacts BFormInput, which does not support this value!\n    },\n    BAccordion: {\n      flush: true,\n    },\n    BFormText: {\n      text: 'foobar!',\n    },\n    BSpinner: {\n      type: 'grow',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: BTableSimple Basic Usage Demo\nDESCRIPTION: This code demonstrates a basic implementation of the `BTableSimple` component in Vue.js, showcasing its integration with other BootstrapVueNext table helper components like `BThead`, `BTbody`, `BTr`, `BTh`, and `BTd` to create a simple table layout. It leverages Bootstrap v5 table styling and provides a foundation for more complex table designs.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/table.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<table class=\"table\">\n  <thead class=\"table-dark\">\n    <tr>\n      <th>#</th>\n      <th>First Name</th>\n      <th>Last Name</th>\n      <th>Username</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>Mark</td>\n      <td>Otto</td>\n      <td>@mdo</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>Jacob</td>\n      <td>Thornton</td>\n      <td>@fat</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td colspan=\"2\">Larry the Bird</td>\n      <td>@twitter</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Vue Inline Form Template\nDESCRIPTION: This demo showcases how to create an inline form using BootstrapVueNext and the Bootstrap grid system. It highlights the use of row and column classes for layout and alignment.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<<< DEMO ./demo/FormInline.vue#template{vue-html}\n```\n\n----------------------------------------\n\nTITLE: Advanced Toast with Custom Component using useToastController Vue\nDESCRIPTION: This snippet demonstrates advanced toast usage by incorporating a custom component into the toast using the `useToastController`. It imports `BToast` and creates a render function with `h` to inject custom HTML content into the toast's default slot. The body content updates every second using a reactive ref.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/composables/useToastController.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BButton @click=\"showMe\">Show</BButton>\n</template>\n\n<script setup lang=\"ts\">\nimport {BToast} from 'bootstrap-vue-next'\n\nconst {show} = useToastController()\n\nconst firstRef = ref<OrchestratedToast>({\n  body: `${Math.random()}`,\n})\n\nsetInterval(() => {\n  firstRef.value.body = `${Math.random()}`\n}, 1000)\n\nconst showMe = () => {\n  show?.({\n    props: () => ({\n      body: firstRef.value.body,\n    }),\n    component: h(BToast, null, {default: () => `custom! ${firstRef.value.body}`}),\n  })\n  // Demonstration psuedocode, you can also import a component and use it\n  // const importedComponent () => {\n  //   show({\n  //     component: import('./MyToastComponent.vue'),\n  //   })\n  // }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue Form Datalist Helper Demo\nDESCRIPTION: This demo shows the usage of the `<BFormDatalist>` helper component to create a `<datalist>` for use with `BFormInput` in BootstrapVueNext. It utilizes the `options` prop to generate `<option>` elements.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<<< DEMO ./demo/FormDataHelper.vue\n```\n\n----------------------------------------\n\nTITLE: Vue Inline Form Select Demo\nDESCRIPTION: This demo shows the usage of custom form controls and selects within an inline form layout using BootstrapVueNext.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<< DEMO ./demo/FormInlineSelect.vue\n```\n\n----------------------------------------\n\nTITLE: Vue Form Select with Disabled Option (HTML)\nDESCRIPTION: This example demonstrates how to create a BFormSelect component with a disabled option as the first item. This is recommended for iOS devices to ensure that the user can select the first option. The `v-model` is bound to `selected`, and the `options` are provided via the `options` prop.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-select.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<BFormSelect v-model=\"selected\" :options=\"options\">\n  <template #first>\n    <BFormSelectOption value=\"\" disabled>-- Please select an option --</BFormSelectOption>\n  </template>\n</BFormSelect>\n```\n\n----------------------------------------\n\nTITLE: Dropdown Accessibility Example (Vue)\nDESCRIPTION: Demonstrates how to improve accessibility of a dropdown menu by using `BDropdownHeader` with unique `id` attributes and referencing these IDs in the `aria-describedby` attribute of associated `BDropdownItem` components. This provides assistive technologies with additional context about the dropdown items. Shows creating accessible grouped dropdown items.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_25\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"Dropdown\">\n      <BDropdownHeader id=\"header1\">Section 1</BDropdownHeader>\n      <BDropdownItem href=\"#\" aria-describedby=\"header1\">Item 1</BDropdownItem>\n      <BDropdownItem href=\"#\" aria-describedby=\"header1\">Item 2</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Table Items Data Example\nDESCRIPTION: Defines the structure of data used for populating the BTable component in BootstrapVueNext. The data is an array of objects, where each object represents a row in the table, and keys represent the fields/columns.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/table.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default [\n  {\n    isActive: true,\n    age: 40,\n    name: { first: 'Dickerson', last: 'Macdonald' },\n  },\n  {\n    isActive: false,\n    age: 21,\n    name: { first: 'Lelia', last: 'Howell' },\n  },\n  {\n    isActive: true,\n    age: 89,\n    name: { first: 'Sybil', last: 'Decker' },\n  },\n  {\n    isActive: false,\n    age: 27,\n    name: { first: 'Julian', last: 'Schmeler' },\n  },\n  {\n    isActive: true,\n    age: 30,\n    name: { first: 'Maynard', last: 'Welch' },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Toggling Modal with BootstrapVue Next\nDESCRIPTION: This example demonstrates how to toggle a modal using a button click and the `v-model` directive. It utilizes the `BButton` and `BModal` components from BootstrapVue Next, along with a Vue ref to manage the modal's visibility.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/modal.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BButton @click=\"modal = !modal\"> Toggle modal </BButton>\n  <BModal v-model=\"modal\" title=\"Hello, World!\"> Foobar? </BModal>\n</template>\n\n<script setup lang=\"ts\">\nconst modal = ref(false)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Positioning Toasts with Teleport Vue\nDESCRIPTION: Illustrates how to position toasts using Vue's Teleport component to render them in the body and apply specific CSS classes for placement. It uses a v-for loop to generate multiple toasts in different locations and controls their visibility with a reactive array.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/toast.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <template v-for=\"(pos, index) in values\" :key=\"index\">\n    <BButton @click=\"values[index] = !values[index]\">\n      {{ locations[index] }}\n    </BButton>\n    <Teleport to=\"body\">\n      <div :class=\"locations[index]\" class=\"toast-container position-fixed p-3\">\n        <BToast v-model=\"values[index]\">\n          <template #title> Title </template>\n          {{ locations[index] }}\n        </BToast>\n      </div>\n    </Teleport>\n  </template>\n</template>\n\n<script setup lang=\"ts\">\nconst locations = [\n  'top-0 start-0',\n  'top-0 start-50 translate-middle-x',\n  'top-0 end-0',\n  'top-50 start-0 translate-middle-y',\n  'top-50 start-50 translate-middle',\n  'top-50 end-0 translate-middle-y',\n  'bottom-0 start-0',\n  'bottom-0 start-50 translate-middle-x',\n  'bottom-0 end-0',\n]\n\nconst values = ref(Array.from({length: locations.length}, () => false))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Showing a Modal with useModalController in Vue\nDESCRIPTION: This snippet shows how to display a modal using the `confirm` method from `useModalController`. It also shows how to display a second modal using the `useModal` composable after the first modal's promise resolves. The `confirm` method accepts an object with a `props` property to configure the modal.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/composables/useModalController.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BButton @click=\"showExample\">Click me</BButton>\n</template>\n\n<script setup lang=\"ts\">\nconst {confirm} = useModalController()\nconst modal = useModal()\n\nconst showExample = async () => {\n  const value = await confirm?.({props: {title: 'Hello World!'}})\n\n  modal.show?.({props: {title: `Promise resolved to ${value}`, variant: 'info'}})\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Script (TypeScript)\nDESCRIPTION: This TypeScript snippet shows the setup function within a Vue component. It imports the 'data' object from a file and returns it, making it available to the component's template. This data is likely used to configure or populate the BFormSelect component.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-select.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {data} from '../../data/components/formSelect.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customize BootstrapVueNext options in Nuxt 3\nDESCRIPTION: This code snippet shows how to configure and customize the behavior of the BootstrapVueNext module in a Nuxt 3 application using the `bootstrapVueNext` key within `nuxt.config.js` or `nuxt.config.ts`. This allows for controlling composables, directives, and CSS inclusion.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// nuxt.config.js/ts\nexport default defineNuxtConfig({\n  modules: ['@bootstrap-vue-next/nuxt'],\n  bootstrapVueNext: {\n    composables: true, // Will include all composables\n    // composables: {useBreadcrumb: true, useColorMode: true, all: false}, // Will include only useBreadcrumb & useColorMode\n    // composables: {useBreadcrumb: false, useColorMode: false, all: true} // Will include everything except useBreadcrumb & useColorMode\n    directives: {all: true}, // Will include all directives\n    css: true, // Will include the module's CSS. If set to false, you can add the CSS manually in the 'css' property below\n  },\n  css: [\n    // 'bootstrap/dist/css/bootstrap.min.css' // Not necessary if `css: true`\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Navbar Overview Demo in Vue\nDESCRIPTION: Demonstrates a basic navbar setup using BootstrapVueNext components.  It showcases the basic structure of the BNavbar, BNavbarBrand, BNavbarNav, BNavItem, and BCollapse components to create a responsive navigation bar. This allows users to quickly implement a standard navigation structure.  No specific dependencies are mentioned beyond BootstrapVueNext.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/navbar.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNavbar toggleable=\"lg\" variant=\"dark\" class=\"bg-primary\">\n    <BNavbarBrand href=\"#\">BootstrapVueNext</BNavbarBrand>\n\n    <BNavbarToggle target=\"nav-collapse\"></BNavbarToggle>\n\n    <BCollapse id=\"nav-collapse\" is-nav>\n      <BNavbarNav>\n        <BNavItem href=\"#\">Link</BNavItem>\n        <BNavItem href=\"#\" disabled>Disabled</BNavItem>\n      </BNavbarNav>\n    </BCollapse>\n  </BNavbar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Default Container - Vue HTML\nDESCRIPTION: This snippet shows the usage of a default `<BContainer>`, which is a responsive, fixed-width container that changes its `max-width` at each viewport width breakpoint. It demonstrates the basic implementation of a container within Bootstrap-Vue Next.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<BContainer>\n  I am a standard fixed-width container.\n</BContainer>\n```\n\n----------------------------------------\n\nTITLE: Vue Form Feedback Helper Demo\nDESCRIPTION: This demo showcases the `BFormValidFeedback` and `BFormInvalidFeedback` helper components in BootstrapVueNext.  It demonstrates how to display validation feedback based on the input's state, and how to force feedback to show.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<< DEMO ./demo/FormFeedbackHelper.vue\n```\n\n----------------------------------------\n\nTITLE: Variable Width Content Vue Template\nDESCRIPTION: Demonstrates the use of `{breakpoint}=\"auto\"` props to size columns based on the natural width of their content in Bootstrap Vue Next. This allows columns to adjust their width dynamically based on the amount of content they contain.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BContainer>\n    <BRow>\n      <BCol cols=\"auto\">Variable width content</BCol>\n      <BCol>Column</BCol>\n    </BRow>\n  </BContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Dropdown Placement Template Vue\nDESCRIPTION: Illustrates how to position the dropdown menu using the `placement` prop, which accepts values from floating-ui's placement definition. This example uses 'right-start'.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"Right Placement\" placement=\"right-start\">\n      <BDropdownItem href=\"#\">First Action</BDropdownItem>\n      <BDropdownItem href=\"#\">Second Action</BDropdownItem>\n      <BDropdownDivider />\n      <BDropdownItem href=\"#\">Other Action</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Preventing Modal Closing in BootstrapVue Next\nDESCRIPTION: This example shows how to prevent a modal from closing using the `@hide` event and the `preventDefault()` method. It includes a checkbox to toggle the prevention functionality. It requires BootstrapVue Next components BButton, BModal, and BFormCheckbox.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/modal.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BButton @click=\"preventableModal = !preventableModal\"> Toggle modal </BButton>\n\n  <BModal v-model=\"preventableModal\" title=\"Hello, World!\" @hide=\"preventFn\">\n    Foobar?\n    <BFormCheckbox v-model=\"preventModal\">Prevent close</BFormCheckbox>\n  </BModal>\n</template>\n\n<script setup lang=\"ts\">\nconst preventableModal = ref(false)\nconst preventModal = ref(true)\nconst preventFn = (e: Event) => {\n  if (preventModal.value) e.preventDefault()\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Button Loading State Demo\nDESCRIPTION: Demonstrates the loading state of a button using the `loading`, `loading-text`, and `loading-fill` props. Also illustrates overriding spinner via `loading-spinner` slot and the entire content of the button with the `loading` slot.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button.md#_snippet_11\n\nLANGUAGE: vue-html\nCODE:\n```\n<<< DEMO ./demo/ButtonLoading.vue#template{vue-html}\n```\n\n----------------------------------------\n\nTITLE: Card Overview Demo Vue Template\nDESCRIPTION: This snippet demonstrates the basic usage of the `BCard` component. It shows how a card adapts to the width of its parent container and highlights the ability to customize the root HTML element.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/card.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BCard title=\"Title\" img-src=\"https://picsum.photos/600/300/?image=25\" img-alt=\"Image\">\n    <BCardText>\n      Some quick example text to build on the card title and make up the bulk of the card's content.\n    </BCardText>\n\n    <BButton href=\"#\" variant=\"primary\">Go somewhere</BButton>\n  </BCard>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Progress Bars with Labels Vue-HTML\nDESCRIPTION: This snippet showcases how to add labels to progress bars using the `show-value` and `show-progress` props. It also demonstrates how to control the precision of the labels using the `precision` prop.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/progress.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<h5>No label</h5>\n<BProgress :value=\"33.3333\" :max=\"50\" />\n<h5>Value label</h5>\n<BProgress :value=\"33.3333\" :max=\"50\" show-value />\n<h5>Progress label</h5>\n<BProgress :value=\"33.3333\" :max=\"50\" show-progress />\n<h5>Value label with precision</h5>\n<BProgress :value=\"33.3333\" :max=\"50\" :precision=\"2\" show-value />\n<h5>Progress label with precision</h5>\n<BProgress :value=\"33.3333\" :max=\"50\" :precision=\"2\" show-progress />\n```\n\n----------------------------------------\n\nTITLE: Multiple Modal Support in BootstrapVue Next\nDESCRIPTION: This code demonstrates how to implement multiple modals in BootstrapVue Next using refs to manage the visibility of each modal. The example includes three nested modals that can be opened sequentially.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/modal.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BButton @click=\"nestedModal1 = !nestedModal1\">Open First Modal</BButton>\n\n  <BModal v-model=\"nestedModal1\" size=\"lg\" title=\"First Modal\" ok-only no-stacking>\n    <p class=\"my-2\">First Modal</p>\n    <BButton @click=\"nestedModal2 = !nestedModal2\">Open Second Modal</BButton>\n  </BModal>\n\n  <BModal v-model=\"nestedModal2\" title=\"Second Modal\" ok-only>\n    <p class=\"my-2\">Second Modal</p>\n    <BButton @click=\"nestedModal3 = !nestedModal3\" size=\"sm\">Open Third Modal</BButton>\n  </BModal>\n\n  <BModal v-model=\"nestedModal3\" size=\"sm\" title=\"Third Modal\" ok-only>\n    <p class=\"my-1\">Third Modal</p>\n  </BModal>\n</template>\n\n<script setup lang=\"ts\">\nconst nestedModal1 = ref(false)\nconst nestedModal2 = ref(false)\nconst nestedModal3 = ref(false)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Equal Width Columns Vue Template\nDESCRIPTION: Demonstrates how to create equal-width columns that apply to every device and viewport using the Bootstrap Vue Next grid system.  This snippet utilizes unit-less classes to ensure columns have the same width across all breakpoints.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BContainer>\n    <BRow>\n      <BCol>Column</BCol>\n      <BCol>Column</BCol>\n    </BRow>\n  </BContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Tabs Usage Vue Template\nDESCRIPTION: Demonstrates the basic usage of the `<BTabs>` component to create a set of tabbable panes with local content. Each tab should have a unique key for dynamic addition or removal.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/tabs.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Content of TabsOverview.vue -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Popover with Auto-Close and Boundary Padding\nDESCRIPTION: This snippet demonstrates how to configure a `BPopover` component in Vue with the `close-on-hide` property set to `true`, causing it to automatically close when the target element is no longer visible.  It also shows how to use `boundary-padding` to define the area that determines visibility. The script block calculates the height of the navigation bar and uses it for boundary padding.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/popover.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BPopover :click=\"true\" :close-on-hide=\"true\" :delay=\"{show: 0, hide: 0}\">\n    <template #target>\n      <BButton>Click me. Popover closes when clipped</BButton>\n    </template>\n    Scroll me out of view\n  </BPopover>\n  <BPopover\n    :click=\"true\"\n    :close-on-hide=\"true\"\n    :delay=\"{show: 0, hide: 0}\"\n    :boundary-padding=\"{top: navHeight}\"\n  >\n    <template #title>Scroll me out of view</template>\n    <template #target>\n      <BButton>This popover gets hidden by the top nav</BButton>\n    </template>\n  </BPopover>\n</template>\n\n<script setup lang=\"ts\">\nconst navRef = ref(null)\nonMounted(() => {\n  navRef.value = document.body.querySelector('#app > nav')\n})\nconst navHeight = computed(() => navRef.value?.clientHeight)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Nav Overview Template (Vue)\nDESCRIPTION: Demonstrates the basic usage of the `<BNav>` component in Vue.js with `<BNavItem>` components for navigation links. This provides a foundational example for building various types of navigation components.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/nav.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNav>\n    <BNavItem href=\"#\">Link 1</BNavItem>\n    <BNavItem href=\"#\">Link 2</BNavItem>\n    <BNavItem href=\"#\">Another Link</BNavItem>\n    <BNavItem disabled href=\"#\">Disabled Link</BNavItem>\n  </BNav>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Autofocus\nDESCRIPTION: Demonstrates how to set the focus to the BFormFile input when the component is inserted using the `autofocus` prop.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-file.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<BFormFile class=\"mt-3\" autofocus />\n```\n\n----------------------------------------\n\nTITLE: BDropdownItem Usage (Vue)\nDESCRIPTION: Demonstrates the basic usage of the `BDropdownItem` component within a Vue template.  It shows how to define a dropdown item, likely within a `BDropdown` component, using the Vue template syntax. This creates a standard link inside a menu.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"Dropdown\">\n      <BDropdownItem href=\"#\">Item 1</BDropdownItem>\n      <BDropdownItem href=\"#\">Item 2</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Tabs Cards Integration Vue Template\nDESCRIPTION: Shows how to integrate tabs with Bootstrap cards by adding the `card` property to `<BTabs>` inside a `<BCard>` component.  The `no-body` prop should be added to `<BCard>` to avoid extra padding.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/tabs.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Content of TabsCards.vue -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Template - Textarea Floating Labels\nDESCRIPTION: Example of using `BFormTextarea` with Bootstrap 5's floating labels. The example suggests using explicit height instead of `rows` prop to manage the height.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-textarea.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<template{vue-html}>\n  <div class=\"form-floating\">\n    <BFormTextarea id=\"floatingTextarea\" placeholder=\"Floating textarea\" style=\"height: 100px\"></BFormTextarea>\n    <label for=\"floatingTextarea\">Floating textarea</label>\n  </div>\n</template{vue-html}>\n```\n\n----------------------------------------\n\nTITLE: Vue Script for BFormTags Component Setup\nDESCRIPTION: This script sets up the data and computed properties for various BFormTags examples, including basic usage, separators, tag removal, styling options, validation, tag detection, tag limits, native tags, custom components, predefined tags, advanced features, and custom dropdown options. It utilizes Vue's reactivity system with `ref` and `computed`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-tags.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\n  import {data} from '../../data/components/formTags.data'\n  import ComponentReference from '../../components/ComponentReference.vue'\n  import HighlightCard from '../../components/HighlightCard.vue'\n  import {BFormTags, BFormText, BFormGroup, BInputGroupText, BButton, BCard, BInputGroup, BFormTag, BFormInput, BFormSelect, BFormCheckbox, BFormInvalidFeedback, BDropdownForm, BDropdownDivider, BDropdownItemButton, BDropdownText, BDropdown} from 'bootstrap-vue-next'\n  import {ref, computed, watch} from 'vue'\n\n  const basicUsageTags = ref<string[]>([])\n  const usingSeparators = ref<string[]>(['apple', 'orange'])\n  const tagRemoval = ref<string[]>(['apple', 'orange', 'grape'])\n  const stylingOptions = ref<string[]>(['apple', 'orange', 'grape'])\n\n  const tagsValidator = ref<string[]>([])\n  const dirty = ref<boolean>(false)\n  const stateTagValidator = computed(() => {\n    // Overall component validation state\n    return dirty.value ? (tagsValidator.value.length > 2 && tagsValidator.value.length < 9) : null\n  })\n\n  watch(tagsValidator, () => {\n    // Set the dirty flag on first change to the tags array\n    dirty.value = true\n  })\n  const tagValidator = (tag) => {\n    // Individual tag validator function\n    return tag === tag.toLowerCase() && tag.length > 2 && tag.length < 6\n  }\n\n  const detectingTags = ref<string[]>([])\n  const validTags = ref<string[]>([])\n  const invalidTags = ref<string[]>([])\n  const duplicateTags = ref<string[]>([])\n  const onTagState = (valid, invalid, duplicate) => {\n    validTags.value = valid\n    invalidTags.value = invalid\n    duplicateTags.value = duplicate\n  }\n  const detectTagValidator = (tag) => {\n    return tag.length > 2 && tag.length < 6\n  }\n\n  const limitTagsModel = ref<string[]>([])\n  const limitTag = ref<number>(5)\n\n  const nativeTags = ref<string[]>(['apple', 'orange', 'banana', 'pear', 'peach'])\n\n  const customComponentTags = ref<string[]>(['apple', 'orange', 'banana'])\n\n  const customPredefinedTags = ref<string[]>([])\n  const options = ref<string[]>(['Apple', 'Orange', 'Banana', 'Lime', 'Peach', 'Chocolate', 'Strawberry'])\n  const availableOptions = computed(() => {\n    return options.value.filter(opt => customPredefinedTags.value.indexOf(opt) === -1)\n  })\n\n  const advancedDisabled = ref<boolean>(false)\n  const advancedTags = ref<string[]>([])\n  const newTag = ref<string>('')\n  const advancedState = computed(() => advancedTags.value.indexOf(newTag.value.trim()) > -1 ? false : null)\n  const resetInputValue = () => {\n        newTag.value = ''\n  }\n  const formatter = (value) => {\n    return value.toUpperCase()\n  }\n\n  const customDropdownOptions = ref<string[]>(['Apple', 'Orange', 'Banana', 'Lime', 'Peach', 'Chocolate', 'Strawberry'])\n  const customDropdownSearch = ref<string>('')\n  const customDropdownTags = ref<string[]>([])\n\n  const criteria = computed(() => customDropdownSearch.value.trim().toLowerCase())\n  const customDropdownAvailableOptions = computed(() => {\n  const searchCriteria = criteria.value\n\n  // Filter out already selected options\n  const optionsFiltered = customDropdownOptions.value.filter(opt => customDropdownTags.value.indexOf(opt) === -1)\n    if (searchCriteria) {\n      // Show only options that match criteria\n      return optionsFiltered.filter(opt => opt.toLowerCase().indexOf(searchCriteria) > -1);\n    }\n    // Show all options available\n    return optionsFiltered\n  })\n  const searchDesc = computed(() => {\n    if (criteria.value && customDropdownAvailableOptions.value.length === 0) {\n      return 'There are no tags matching your search criteria'\n    }\n    return ''\n  })\n  const onOptionClick = ({ option, addTag }) => {\n    addTag(option)\n    searchCriteria.value = ''\n  }\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Button Block Level Demo\nDESCRIPTION: Shows how to create full-width block-level buttons using Bootstrap's CSS utilities (d-grid, gap-*).  This approach provides greater control over spacing and responsiveness.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<<< DEMO ./demo/ButtonBlockLevel.vue#template{vue-html}\n```\n\n----------------------------------------\n\nTITLE: Collapse Content Demo (Template)\nDESCRIPTION: Demonstrates the use of the `header` and `footer` slots to create custom toggles for the collapsible content. The default slot is used for the content to be hidden or shown.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/collapse.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BCollapse id=\"content\">\n    <template #header=\"{visible}\">\n      <h6 class=\"m-0\">Header Slot: {{ visible ? 'Visible' : 'Hidden' }}</h6>\n    </template>\n\n    <BCard>\n      <BCardText>\n        I am visible content!\n      </BCardText>\n    </BCard>\n\n    <template #footer=\"{visible}\">\n      <h6 class=\"m-0\">Footer Slot: {{ visible ? 'Visible' : 'Hidden' }}</h6>\n    </template>\n  </BCollapse>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Showing/Hiding Modal by ID with useModal in Vue\nDESCRIPTION: This code shows how to use the `useModal` composable to control a specific `BModal` component using its ID.  The modal's visibility is controlled by the `show` and `hide` methods obtained from `useModal('my-modal')`. Requires `bootstrap-vue-next` library and the `ref` and `onMounted` functions from Vue.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/composables/useModal.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BButton @click=\"show()\">Click me</BButton>\n  <BModal v-if=\"someConditions\" v-model=\"programmaticModal\" id=\"my-modal\">\n    <BButton @click=\"hide()\">Hide me</BButton>\n  </BModal>\n</template>\n\n<script setup lang=\"ts\">\nconst someConditions = ref(false)\nconst programmaticModal = ref(false)\n\nonMounted(() => {\n  someConditions.value = true\n})\n\nconst {show, hide, modal} = useModal('my-modal')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initialize BToastOrchestrator Vue Component\nDESCRIPTION: This snippet demonstrates how to initialize the BToastOrchestrator component in a Vue application.  The BToastOrchestrator component must be initialized once at the application root level to manage toasts created by the useToastController composable. It handles the display and positioning of the toasts.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/composables/useToastController.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<BToastOrchestrator />\n```\n\n----------------------------------------\n\nTITLE: Custom Overlay Content Vue\nDESCRIPTION: This example shows how to place custom content inside a BOverlay component using the `overlay` slot.  It includes a card with a title and text, along with a button to toggle the overlay and a button within the overlay to cancel it.  The `showCustomEx` ref, along with the `onShown` and `onHidden` lifecycle hooks are used to manage the overlay's visibility and logging.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/overlay.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BOverlay :show=\"showCustomEx\" rounded=\"sm\" @shown=\"onShown\" @hidden=\"onHidden\">\n    <BCard title=\"Card with custom overlay content\" :aria-hidden=\"showCustomEx ? 'true' : null\">\n      <BCardText>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</BCardText>\n      <BCardText>Click the button to toggle the overlay:</BCardText>\n      <BButton :disabled=\"showCustomEx\" variant=\"primary\" @click=\"showCustomEx = true\">\n        Show overlay\n      </BButton>\n    </BCard>\n    <template #overlay>\n      <div class=\"text-center\">\n        <p id=\"cancel-label\">Please wait...</p>\n        <BButton\n          variant=\"outline-danger\"\n          size=\"sm\"\n          aria-describedby=\"cancel-label\"\n          @click=\"showCustomEx = false\"\n        >\n          Cancel\n        </BButton>\n      </div>\n    </template>\n  </BOverlay>\n</template>\n\n<script setup lang=\"ts\">\nconst showCustomEx = ref(false)\n\nconst onShown = () => {\n  console.log('shown')\n}\nconst onHidden = () => {\n  console.log('hidden')\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Spinner Overview Demo\nDESCRIPTION: Demonstrates the basic usage of the `<BSpinner>` component in a Vue template. It shows how to display a spinner with default settings.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/spinner.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"d-flex flex-column gap-2\">\n  <BSpinner />\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: BDropdownHeader Usage (Vue)\nDESCRIPTION: Shows how to use the `BDropdownHeader` component to add a header label to a section of actions within a dropdown menu.  `BDropdownHeader` provides a visual and semantic heading for groups of dropdown items, improving the structure and usability of the menu.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_22\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"Dropdown\">\n      <BDropdownHeader>Header 1</BDropdownHeader>\n      <BDropdownItem href=\"#\">Item 1</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Multiple Progress Bars in Stack Vue-HTML\nDESCRIPTION: This snippet shows how to create a horizontally stacked set of progress bars by including multiple `BProgressBar` components within a `BProgress` component.  Each BProgressBar can have its own value and variant.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/progress.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<BProgress>\n  <BProgressBar :value=\"15\" />\n  <BProgressBar :value=\"30\" variant=\"success\" />\n  <BProgressBar :value=\"20\" variant=\"info\" />\n</BProgress>\n```\n\n----------------------------------------\n\nTITLE: Progress Bars with Custom Labels Vue-HTML\nDESCRIPTION: This snippet demonstrates how to customize the labels of progress bars using the default slot and the `label` property of the BProgressBar component. It shows how to display dynamic values and even HTML in the labels.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/progress.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<h5>Custom label via default slot</h5>\n<BProgress :max=\"50\" height=\"2rem\">\n  <BProgressBar :value=\"33.333333\">\n    <span>Progress: <strong>{{ (33.333333).toFixed(2) }} / {{ 50 }}</strong></span>\n  </BProgressBar>\n</BProgress>\n\n<h5 class=\"mt-3\">Custom label via property</h5>\n<BProgress :max=\"50\">\n  <BProgressBar\n    :value=\"33.333333\"\n    :label=\"`${((33.333333 / 50) * 100).toFixed(2)}%`\"\n  />\n</BProgress>\n\n<h5 class=\"mt-3\">Custom label via property (HTML support)</h5>\n<BProgress :max=\"50\">\n  <BProgressBar :value=\"33.333333\">\n    <del>{{33.333333}}</del>\n  </BProgressBar>\n</BProgress>\n```\n\n----------------------------------------\n\nTITLE: Vue Template - Textarea Displayed Rows\nDESCRIPTION: Illustrates how to set the initial height of a `BFormTextarea` by using the `rows` prop to specify the number of visible rows.  The default value for rows is 2.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-textarea.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<template{vue-html}>\n  <div>\n    <label for=\"textarea-rows\">Textarea with 4 rows:</label>\n    <BFormTextarea id=\"textarea-rows\" rows=\"4\"></BFormTextarea>\n  </div>\n</template{vue-html}>\n```\n\n----------------------------------------\n\nTITLE: Router Link 'to' Prop Examples in Vue\nDESCRIPTION: Illustrates various ways to use the 'to' prop of the BLink component to create different types of router links, including literal strings, JavaScript expressions, named routes, and query parameters. Also shows how to render a non-router link using the 'href' prop.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference/router-links.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- Literal string -->\n<BLink to=\"home\">Home</BLink>\n\n<!-- Renders to -->\n<a href=\"home\">Home</a>\n\n<!-- JavaScript expression using `v-bind` -->\n<BLink v-bind:to=\"'home'\">Home</BLink>\n\n<!-- Omitting `v-bind` is fine, just as binding any other prop -->\n<BLink :to=\"'home'\">Home</BLink>\n\n<!-- Same as above -->\n<BLink :to=\"{path: 'home'}\">Home</BLink>\n\n<!-- Named route -->\n<BLink :to=\"{name: 'user', params: {userId: 123}}\">User</BLink>\n\n<!-- With query, resulting in `/register?plan=private` -->\n<BLink :to=\"{path: 'register', query: {plan: 'private'}}\">Register</BLink>\n\n<!-- Render a non-router link by omitting `to` and specifying an `href` -->\n<BLink href=\"/home\">Home</BLink>\n```\n\n----------------------------------------\n\nTITLE: Offcanvas Overview Template Vue\nDESCRIPTION: This example demonstrates a basic Offcanvas component usage in Vue.js with BootstrapVueNext. It includes the HTML template for rendering the Offcanvas.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/offcanvas.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BButton @click=\"show = true\">Open offcanvas</BButton>\n\n  <BOffcanvas id=\"offcanvas-overview\" title=\"Offcanvas Overview\" :show=\"show\" @hidden=\"show = false\">\n    <p class=\"mt-3 mb-0\">\n      This is some sample content for the offcanvas. You can use any content here, including text, images, and other\n      components.\n    </p>\n  </BOffcanvas>\n</template>\n\n<script setup lang=\"ts\">\nimport {ref} from 'vue'\n\nconst show = ref(false)\n</script>\n\n```\n\n----------------------------------------\n\nTITLE: Form Select Options Groups (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to define options groups for a BFormSelect component.  An object with a `label` prop as the group's name and an `options` property containing an array of options is used to structure the options. This structure is then passed to the `options` prop of the `BFormSelect` component.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-select.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// This file is auto generated by mock-data.ts\nexport const optionsGroups = [\n  {\n    label: 'Fruits',\n    options: [\n      { value: 'apple', text: 'Apple' },\n      { value: 'orange', text: 'Orange' },\n      { value: 'grape', text: 'Grape' },\n    ],\n  },\n  {\n    label: 'Vegetables',\n    options: [\n      { value: 'carrot', text: 'Carrot' },\n      { value: 'potato', text: 'Potato' },\n      { value: 'broccoli', text: 'Broccoli' },\n    ],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Vue Template - Textarea Sizing\nDESCRIPTION: Demonstrates how to control the size (height) of a `BFormTextarea` component using the `size` prop (`sm` or `lg`) and how to control the width by placing the textarea within Bootstrap grid columns.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-textarea.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<template{vue-html}>\n  <div>\n    <label for=\"textarea-sm\">Small:</label>\n    <BFormTextarea id=\"textarea-sm\" size=\"sm\"></BFormTextarea>\n  </div>\n\n  <div>\n    <label for=\"textarea-default\">Default:</label>\n    <BFormTextarea id=\"textarea-default\"></BFormTextarea>\n  </div>\n\n  <div>\n    <label for=\"textarea-lg\">Large:</label>\n    <BFormTextarea id=\"textarea-lg\" size=\"lg\"></BFormTextarea>\n  </div>\n</template{vue-html}>\n```\n\n----------------------------------------\n\nTITLE: Tabs Lazy Loading All Vue Template\nDESCRIPTION: Makes all tabs lazy by setting the `lazy` prop on the parent `<BTabs>` component. This delays the loading of all tab content until they are activated.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/tabs.md#_snippet_16\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Content of TabsLazyAll.vue -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Button Group Sizing - Vue Template\nDESCRIPTION: This snippet demonstrates how to control the size of buttons within a BButtonGroup using the `size` prop.  The `size` prop is set on the `BButtonGroup` component. It depends on Bootstrap-Vue Next.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button-group.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BButtonGroup size=\"sm\" aria-label=\"Small button group\">\n      <BButton variant=\"primary\">Left</BButton>\n      <BButton variant=\"primary\">Middle</BButton>\n      <BButton variant=\"primary\">Right</BButton>\n    </BButtonGroup>\n\n    <BButtonGroup class=\"mt-2\" aria-label=\"Default button group\">\n      <BButton variant=\"primary\">Left</BButton>\n      <BButton variant=\"primary\">Middle</BButton>\n      <BButton variant=\"primary\">Right</BButton>\n    </BButtonGroup>\n\n    <BButtonGroup size=\"lg\" class=\"mt-2\" aria-label=\"Large button group\">\n      <BButton variant=\"primary\">Left</BButton>\n      <BButton variant=\"primary\">Middle</BButton>\n      <BButton variant=\"primary\">Right</BButton>\n    </BButtonGroup>\n  </div>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Dropdown Button Content Template Vue\nDESCRIPTION: Illustrates how to customize the dropdown button content using the `button-content` slot. This allows embedding HTML elements and icons within the button.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BDropdown>\n      <template #button-content>\n        <em>Click Me</em> <font-awesome-icon icon=\"fa-solid fa-bell\" />\n      </template>\n      <BDropdownItem href=\"#\">First Action</BDropdownItem>\n      <BDropdownItem href=\"#\">Second Action</BDropdownItem>\n      <BDropdownDivider />\n      <BDropdownItem href=\"#\">Other Action</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Tabs Justified Vue Template\nDESCRIPTION: Illustrates the use of the `justified` prop to create equal-width tab controls that occupy all horizontal space. Every control will have the same width.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/tabs.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Content of TabsJustified.vue -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Globally Hiding Modals in Vue\nDESCRIPTION: This snippet demonstrates how to hide modals globally using the `hide` and `hideAll` methods from `useModalController`.  It creates three nested modals and uses buttons in each to open subsequent modals or hide one or all of them.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/composables/useModalController.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BButton @click=\"nestedModal1 = !nestedModal1\">Open First Modal</BButton>\n  <BModal v-model=\"nestedModal1\" title=\"First Modal\" ok-only>\n    <p class=\"my-2\">First Modal</p>\n    <BButtonGroup>\n      <BButton @click=\"nestedModal2 = !nestedModal2\">Open Second Modal</BButton>\n      <BButton @click=\"hide\">Hide Last</BButton>\n      <BButton @click=\"hideAll\">Hide All</BButton>\n    </BButtonGroup>\n  </BModal>\n  <BModal v-model=\"nestedModal2\" title=\"Second Modal\" ok-only>\n    <p class=\"my-2\">Second Modal</p>\n    <BButtonGroup>\n      <BButton @click=\"nestedModal3 = !nestedModal3\" size=\"sm\">Open Third Modal</BButton>\n      <BButton @click=\"hide\">Hide Last</BButton>\n      <BButton @click=\"hideAll\">Hide All</BButton>\n    </BButtonGroup>\n  </BModal>\n  <BModal v-model=\"nestedModal3\" title=\"Third Modal\" ok-only>\n    <p class=\"my-1\">Third Modal</p>\n    <BButtonGroup>\n      <BButton @click=\"hide\">Hide Last</BButton>\n      <BButton @click=\"hideAll\">Hide All</BButton>\n    </BButtonGroup>\n  </BModal>\n</template>\n\n<script setup lang=\"ts\">\nconst nestedModal1 = ref(false)\nconst nestedModal2 = ref(false)\nconst nestedModal3 = ref(false)\n\nconst {hide, hideAll} = useModalController()\n</script>\n```\n\n----------------------------------------\n\nTITLE: List Group with Badges Demo - Vue HTML\nDESCRIPTION: This demo shows how to add badges to list group items to display unread counts or other indicators. It uses flex utility classes for proper alignment.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/list-group.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BListGroup>\n    <BListGroupItem class=\"d-flex justify-content-between align-items-start\">\n      <div class=\"ms-2 me-auto\">\n        <div class=\"fw-bold\">Subheading</div>\n        Content for list item\n      </div>\n      <BBadge pill variant=\"primary\">14</BBadge>\n    </BListGroupItem>\n    <BListGroupItem class=\"d-flex justify-content-between align-items-start\">\n      <div class=\"ms-2 me-auto\">\n        <div class=\"fw-bold\">Subheading</div>\n        Content for list item\n      </div>\n      <BBadge pill variant=\"primary\">14</BBadge>\n    </BListGroupItem>\n    <BListGroupItem class=\"d-flex justify-content-between align-items-start\">\n      <div class=\"ms-2 me-auto\">\n        <div class=\"fw-bold\">Subheading</div>\n        Content for list item\n      </div>\n      <BBadge pill variant=\"primary\">14</BBadge>\n    </BListGroupItem>\n  </BListGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Row Columns Vue Template\nDESCRIPTION: Demonstrates the use of responsive `cols-*` props in `<BRow>` to quickly set the number of columns that best render your content and layout in Bootstrap Vue Next. The value specified in the `<BRow>` prop(s) is the number of columns to create per row.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_19\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BContainer>\n    <BRow cols=\"3\">\n      <BCol>Column</BCol>\n      <BCol>Column</BCol>\n      <BCol>Column</BCol>\n      <BCol>Column</BCol>\n    </BRow>\n  </BContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: All Breakpoints Columns Vue Template\nDESCRIPTION: Illustrates the use of `col` and `cols=\"*\"` props for creating grids that remain consistent from the smallest to the largest devices in Bootstrap Vue Next. Specify the number of `cols` for specifically sized columns, or use `col` for automatic sizing.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BContainer>\n    <BRow>\n      <BCol cols=\"3\">Column</BCol>\n      <BCol cols=\"3\">Column</BCol>\n      <BCol cols=\"3\">Column</BCol>\n      <BCol cols=\"3\">Column</BCol>\n    </BRow>\n  </BContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Nav Router (Vue)\nDESCRIPTION: Demonstrates using `<BNav>` with Vue Router for nested routes. It shows how navigation links can control the content displayed in a `<router-view>` component for creating tabbed content that changes with the route URL.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/nav.md#_snippet_15\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BNav tabs>\n      <BNavItem to=\"/nav/tab1\">Tab 1</BNavItem>\n      <BNavItem to=\"/nav/tab2\">Tab 2</BNavItem>\n    </BNav>\n\n    <router-view />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Scrolling Long Content in BootstrapVue Next Modal\nDESCRIPTION: This snippet demonstrates how to handle long content in a BootstrapVue Next modal by allowing the modal to scroll independently of the page.  It utilizes the `v-b-modal` directive to launch the modal.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/modal.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BButton v-b-modal.modal-tall>Launch overflowing modal</BButton>\n\n  <BModal id=\"modal-tall\" title=\"Overflowing Content\">\n    <p class=\"my-4\" v-for=\"i in 20\" :key=\"i\">\n      Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in,\n      egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\n    </p>\n  </BModal>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Avatar Text Template (Vue)\nDESCRIPTION: Demonstrates the use of the `text` prop to display a short string (1-3 characters) as the avatar content. The text is automatically transformed to uppercase and scaled based on the avatar size.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/avatar.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <b-avatar text=\"JD\"></b-avatar>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Cell Alignment Vue Template\nDESCRIPTION: Shows individual grid cell vertical alignment using the `align-self` prop on `<BCol>` in Bootstrap Vue Next. Possible values are 'start', 'center', 'end', 'fill', 'baseline', 'stretch', and 'auto'.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_12\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BContainer style=\"height: 300px;\">\n    <BRow style=\"height: inherit;\">\n      <BCol align-self=\"start\">Column</BCol>\n      <BCol align-self=\"center\">Column</BCol>\n      <BCol align-self=\"end\">Column</BCol>\n    </BRow>\n  </BContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Navbar Form Demo in Vue\nDESCRIPTION: Shows how to place a form within the navbar using the `BNavForm` component.  Refer to the `BNavForm` documentation for further details on form configuration. BootstrapVueNext offers the form component and styling.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/navbar.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNavbar variant=\"primary\">\n    <BNavbarBrand href=\"#\">BootstrapVueNext</BNavbarBrand>\n    <BNavForm>\n      <BFormInput class=\"mr-sm-2\" placeholder=\"Search\" />\n      <BButton type=\"submit\" variant=\"outline-light\" size=\"sm\">Search</BButton>\n    </BNavForm>\n  </BNavbar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Correct BTooltip Usage with title Attribute on Root Vue HTML\nDESCRIPTION: Shows a correct usage of `title` attribute on a root HTML element, which the directive can detect. In this example, the title is detected by the custom directive and is going to be used correctly. The tooltip is properly rendered with the title text.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/directives/BTooltip.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<div v-b-tooltip.hover.top title=\"my title\">\n //something\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Empty Table Template\nDESCRIPTION: This example demonstrates how to use the `empty` and `empty-filtered` slots to render custom content when the table has no data or when the data is filtered and returns no results. The `show-empty` prop must be set for the slots to be displayed.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/table.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BTable show-empty :items=\"items\" :fields=\"fields\">\n    <template #empty=\"scope\">\n      <div class=\"text-center my-2\">\n        <em>There is no available data to display.</em>\n        <div v-if=\"items === null\">\n          (Perhaps try refreshing the page). Prop <code>items</code> is <code>null</code>.\n        </div>\n        <div v-else-if=\"items.length === 0\">\n          Prop <code>items</code> is an empty array.\n        </div>\n        <div>{{ scope }}</div>\n      </div>\n    </template>\n    <template #emptyfiltered=\"{ emptyFilteredText }\">\n      <div class=\"text-center my-2\">\n        <em>There are no records matching the search criteria:</em>\n        <strong>{{ emptyFilteredText }}</strong>\n      </div>\n    </template>\n  </BTable>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Nesting Grids Vue Template\nDESCRIPTION: Illustrates how to nest content using the default grid by adding a new `<BRow>` and set of `<BCol>` components within an existing `<BCol>` component in Bootstrap Vue Next. Nested rows should have columns that sum up to 12 or fewer.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_18\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BContainer>\n    <BRow>\n      <BCol md=\"9\">\n        Level 1: md-9\n        <BRow>\n          <BCol cols=\"8\">Level 2: cols-8</BCol>\n          <BCol cols=\"4\">Level 2: cols-4</BCol>\n        </BRow>\n      </BCol>\n    </BRow>\n  </BContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Carousel with Captions Template Vue-HTML\nDESCRIPTION: This example demonstrates how to add captions to carousel slides. Captions provide context or descriptions for each slide. The snippet demonstrates using the `caption` slot for custom caption rendering.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/carousel.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Carousel with captions -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Button Element Type Demo\nDESCRIPTION: Illustrates how to render the `BButton` component as different HTML elements (`<button>`, `<a>`, `RouterLink`) based on the `href` or `to` prop values.  The `to` prop requires `vue-router`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<<< DEMO ./demo/ButtonElementType.vue#template{vue-html}\n```\n\n----------------------------------------\n\nTITLE: Vue Template Iteration\nDESCRIPTION: This code snippet demonstrates how to iterate over a list of components in a Vue.js template using `v-for`.  For each component in the `computedComponentsList` array, it renders a `TableOfContentsCard` component, passing the component's name, description, and route as props.  The `:key` attribute is essential for Vue's efficient rendering.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<TableOfContentsCard v-for=\"component in computedComponentsList\" :key=\"component.name\" class=\"my-3\" :name=\"component.name\" :description=\"component.description\" :route=\"component.route\" />\n```\n\n----------------------------------------\n\nTITLE: Setting One Column Width Vue Template\nDESCRIPTION: Shows how to set the width of one column while allowing sibling columns to automatically resize around it in Bootstrap Vue Next. This can be achieved using predefined grid classes, grid mixins, or inline widths.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BContainer>\n    <BRow>\n      <BCol>Column</BCol>\n      <BCol cols=\"6\">Column</BCol>\n      <BCol>Column</BCol>\n    </BRow>\n  </BContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Floating Labels Template\nDESCRIPTION: This demo demonstrates how to implement floating labels in BootstrapVueNext forms. It uses `BFormInput`, `BFormTextarea`, or `BFormSelect` wrapped in a `BFormFloatingLable` component.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<<< DEMO ./demo/FormFloatingLabels.vue#template{vue-html}\n```\n\n----------------------------------------\n\nTITLE: useColorMode Demo: Basic Color Toggle - Vue\nDESCRIPTION: This code snippet demonstrates the basic usage of `useColorMode` within a Vue component.  It uses a `BCard` and `BButton` from bootstrap-vue-next to create a toggle button. Clicking the button changes the color mode between 'dark' and 'light'. Requires bootstrap-vue-next and Vue.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/composables/useColorMode.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BCard ref=\"target\">\n    <BButton @click=\"changeColor\"> Current color: {{ mode }} </BButton>\n  </BCard>\n</template>\n\n<script setup lang=\"ts\">\nimport {useColorMode} from 'bootstrap-vue-next'\n\nconst target = ref<HTMLElement | null>(null)\n\nconst mode = useColorMode({\n  selector: target,\n})\n\nconst changeColor = () => {\n  mode.value = mode.value === 'dark' ? 'light' : 'dark'\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: BDropdownForm Usage (Vue)\nDESCRIPTION: Illustrates the use of `BDropdownForm` to embed a form within a dropdown menu. This snippet shows how to place form controls directly inside a dropdown, allowing users to interact with form elements without leaving the context of the dropdown.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_23\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"Dropdown\">\n      <BDropdownForm>\n        <input type=\"text\" placeholder=\"Search\" />\n        <button type=\"submit\">Submit</button>\n      </BDropdownForm>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Nav Tab Card (Vue)\nDESCRIPTION: Illustrates how to integrate a tab-style navigation within a `<BCard>` component using the `card-header` and `tabs` props on `<BNav>`.  Demonstrates creating a tabbed interface within a card.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/nav.md#_snippet_12\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BCard>\n    <BNav card-header tabs>\n      <BNavItem href=\"#\">Link 1</BNavItem>\n      <BNavItem active href=\"#\">Link 2</BNavItem>\n      <BNavItem href=\"#\">Another Link</BNavItem>\n    </BNav>\n    <BCardBody>\n      <BCardTitle>Card Title</BCardTitle>\n      <BCardText>Some quick example text to build on the card title and make up the bulk of the card's content.</BCardText>\n    </BCardBody>\n  </BCard>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Styling Default Spinner - Vue HTML\nDESCRIPTION: This snippet demonstrates how to style the default spinner within the BOverlay using the `spinner-variant`, `spinner-type`, and `spinner-small` props. It modifies the spinner's color, type (border or grow), and size. Inline styles are also used to control the maximum width of the component.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/overlay.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<BOverlay\n  show\n  spinner-variant=\"primary\"\n  spinner-type=\"grow\"\n  spinner-small\n  rounded=\"sm\"\n  style=\"max-width: 320px;\"\n>\n  <BCard title=\"Card with spinner style\" aria-hidden=\"true\">\n    <BCardText>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\n      labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\n      laboris nisi ut aliquip ex ea commodo consequat.\n    </BCardText>\n    <BButton disabled variant=\"primary\">Button</BButton>\n  </BCard>\n</BOverlay>\n```\n\n----------------------------------------\n\nTITLE: Collapse Usage Demo (Template)\nDESCRIPTION: Demonstrates how other elements can toggle BCollapse components using the `v-b-toggle` directive.  The visibility of the BCollapse is controlled by a button.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/collapse.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BButton v-b-toggle.collapse-usage variant=\"primary\">Toggle Collapse</BButton>\n    <BCollapse id=\"collapse-usage\">\n      <BCard>\n        <P>This is some content that will collapse.</P>\n      </BCard>\n    </BCollapse>\n  </div>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Multiple File Input Example\nDESCRIPTION: Demonstrates the usage of the BFormFile component in multiple file mode. The `multiple` prop is set to true, and the component binds to a ref named 'files' which holds an array of File objects.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-file.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BFormFile v-model=\"files\" multiple />\n  <div class=\"mt-3\">\n    Files: <strong>{{ files }}</strong>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst files = ref<null | File[]>(null)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Alert Dismissible\nDESCRIPTION: Shows how to make a BAlert dismissible using the `dismissible` prop, and how to use `v-model` to bind it to a reactive value.  Also covers using the `dismiss-label` prop to customize the aria-label.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/alert.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<< DEMO ./demo/AlertDismissible.vue\n```\n\n----------------------------------------\n\nTITLE: Dropdown Menu Alignment Template Vue\nDESCRIPTION: Shows how to align the dropdown menu to the end of the button using the `end` prop. By default, the dropdown menu is aligned to the start.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"Dropdown Button\" end>\n      <BDropdownItem href=\"#\">First Action</BDropdownItem>\n      <BDropdownItem href=\"#\">Second Action</BDropdownItem>\n      <BDropdownDivider />\n      <BDropdownItem href=\"#\">Other Action</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Collapse Exposed Functions Demo\nDESCRIPTION: Demonstrates accessing and using the exposed functions (`hide`, `show`, `toggle`) and properties (`isNav`, `visible`) of the `BCollapse` component through a template ref.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/collapse.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <BButton @click=\"collapseRef?.toggle()\">Toggle</BButton>\n    <BCollapse ref=\"collapseRef\">\n      <BCard>\n        <p>Content</p>\n      </BCard>\n    </BCollapse>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport {ref} from 'vue'\nimport type {BCollapse} from 'bootstrap-vue-next'\n\nconst collapseRef = ref<BCollapse | null>(null)\n</script>\n\n```\n\n----------------------------------------\n\nTITLE: Input Group with Custom Checkbox Vue Template\nDESCRIPTION: This snippet demonstrates how to use `BFormCheckbox` and `BFormRadio` components as addons within an input group, using Bootstrap utility classes for styling. It showcases custom radio, checkbox and switch addons.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/input-group.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BInputGroup>\n    <template #prepend>\n      <BFormCheckbox button button-variant=\"secondary\" aria-label=\"Checkbox for following text input\">\n        <span class=\"visually-hidden\">Checkbox</span>\n      </BFormCheckbox>\n    </template>\n    <BFormInput aria-label=\"Text input with checkbox\" />\n  </BInputGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Input Group with Multiple Inputs Vue Template\nDESCRIPTION: This example demonstrates the usage of multiple input fields within a single input group. It shows how to combine multiple form inputs within the group.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/input-group.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BInputGroup>\n    <BFormInput placeholder=\"First name\" aria-label=\"First name\" />\n    <BFormInput placeholder=\"Last name\" aria-label=\"Last name\" />\n  </BInputGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Carousel Model Demo\nDESCRIPTION: This example demonstrates binding the carousel's active slide index to a v-model.  This allows for external control and manipulation of the current slide.  The bound variable reflects the active slide index.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/carousel.md#_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Carousel with v-model binding -->\n```\n\n----------------------------------------\n\nTITLE: Form Spinbutton Step Configuration - Vue Template\nDESCRIPTION: This snippet demonstrates how to configure the min, max, and step properties of the `BFormSpinbutton` component to control the numeric range and increment/decrement values.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-spinbutton.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\\n  <div>\\n    <BFormSpinbutton\\n      id=\"spinbutton-step-1\"\\n      v-model.number=\"value1\"\\n      min=\"0\"\\n      max=\"10\"\\n      step=\"0.5\"\\n    />\\n    <div class=\"mt-2\">Value: {{ value1 }}</div>\\n\n    <BFormSpinbutton\\n      id=\"spinbutton-step-2\"\\n      v-model.number=\"value2\"\\n      min=\"-5\"\\n      max=\"5\"\\n      step=\"2\"\\n    />\\n    <div class=\"mt-2\">Value: {{ value2 }}</div>\\n  </div>\\n</template>\\n\n```\n\n----------------------------------------\n\nTITLE: BTableSimple Sticky Columns Demo\nDESCRIPTION: This snippet demonstrates the use of sticky columns in `BTableSimple` by setting the `sticky-column` prop on the table cells (`BTd` or `BTh`). The sticky-column prop makes the specified columns remain fixed while the rest of the table scrolls horizontally.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/table.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<div>\n  <BTableSimple>\n    <BThead>\n      <BTr>\n        <BTh sticky-column>#</BTh>\n        <BTh>First Name</BTh>\n        <BTh>Last Name</BTh>\n        <BTh>Username</BTh>\n      </BTr>\n    </BThead>\n    <BTbody>\n      <BTr>\n        <BTd sticky-column>1</BTd>\n        <BTd>Mark</BTd>\n        <BTd>Otto</BTd>\n        <BTd>@mdo</BTd>\n      </BTr>\n      <BTr>\n        <BTd sticky-column>2</BTd>\n        <BTd>Jacob</BTd>\n        <BTd>Thornton</BTd>\n        <BTd>@fat</BTd>\n      </BTr>\n      <BTr>\n        <BTd sticky-column>3</BTd>\n        <BTd>Larry</BTd>\n        <BTd>the Bird</BTd>\n        <BTd>@twitter</BTd>\n      </BTr>\n    </BTbody>\n  </BTableSimple>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Avatar Link Template (Vue)\nDESCRIPTION: Illustrates how to create an avatar that acts as a link by setting the `href` prop, or as a router link by setting the `to` prop. The `to` prop requires Vue Router to be installed. The `button` prop takes precedence over the `href` and `to` props.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/avatar.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <b-avatar href=\"#foobar\" text=\"BV\"></b-avatar>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Input Group with Multiple Addons Vue Template\nDESCRIPTION: This snippet demonstrates how to add multiple addons (text, buttons, etc.) to an input group. It shows the flexibility of combining different addon types.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/input-group.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BInputGroup>\n    <template #prepend>\n      <BButton variant=\"outline-secondary\">$</BButton>\n    </template>\n    <template #append>\n      <BButton variant=\"outline-secondary\">.00</BButton>\n    </template>\n    <BFormInput aria-label=\"Amount (to the nearest dollar)\" />\n  </BInputGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Nav Alignment (Vue)\nDESCRIPTION: Demonstrates how to align nav items using the `<BNav>` component with the `align` prop. The example demonstrates the usage of `AlignmentJustifyContent` values for alignment.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/nav.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNav align=\"center\">\n    <BNavItem href=\"#\">Link 1</BNavItem>\n    <BNavItem active href=\"#\">Link 2</BNavItem>\n    <BNavItem href=\"#\">Another Link</BNavItem>\n    <BNavItem disabled href=\"#\">Disabled Link</BNavItem>\n  </BNav>\n</template>\n```\n\n----------------------------------------\n\nTITLE: BOverlay Within BCard Example in Vue\nDESCRIPTION: This snippet shows how to place `BOverlay` within a `BCard` component, leveraging the card's relative positioning. The `no-wrap` prop is used to prevent the overlay from wrapping the card's content. The visibility is managed using a reactive `ref` and toggled by a button click.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/overlay.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BCard header=\"Card header\" footer=\"Card footer\">\n    <BImg\n      thumbnail\n      rounded=\"circle\"\n      src=\"https://picsum.photos/72/72/?image=58\"\n      alt=\"Image\"\n      class=\"d-inline\"\n    />\n    <p class=\" d-inline align-top mb-0\">\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\n      labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\n      laboris nisi ut aliquip ex ea commodo consequat.\n    </p>\n    <BOverlay :show=\"showNoWrapEx2\" no-wrap />\n  </BCard>\n  <BButton @click=\"showNoWrapEx2 = !showNoWrapEx2\" class=\"mt-3\">Toggle overlay</BButton>\n</template>\n\n<script setup lang=\"ts\">\nconst showNoWrapEx2 = ref(false)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Progress Bar Background Variants Vue-HTML\nDESCRIPTION: This snippet demonstrates how to change the background color of progress bars using the `variant` prop. Different Bootstrap color variants like success, info, warning, and danger are used.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/progress.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<BProgress variant=\"success\" :value=\"25\" />\n<BProgress variant=\"info\" :value=\"50\" />\n<BProgress variant=\"warning\" :value=\"75\" />\n<BProgress variant=\"danger\" :value=\"100\" />\n```\n\n----------------------------------------\n\nTITLE: Replacing msgBoxConfirm with useModalController.confirm in Vue\nDESCRIPTION: This example illustrates how to replace the BootstrapVue `msgBoxConfirm` method with the `useModalController.confirm` composable in BootstrapVueNext. It shows a Vue component that uses the composable to display a confirmation modal with 'OK' and 'Cancel' buttons. Remember to include `<BModalOrchestrator />` in your App Root.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/migration-guide.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<<< DEMO ./demo/ModalConfirm.vue\n```\n\n----------------------------------------\n\nTITLE: Vue Component Script with Breadcrumb Data\nDESCRIPTION: This script imports breadcrumb component data and exports it for use within the Vue component, making it available to the template.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/breadcrumb.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {data} from '../../data/components/breadcrumb.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Vue Template - Textarea Auto Height\nDESCRIPTION: Demonstrates the `BFormTextarea` component's auto-height feature, allowing the textarea to automatically adjust its height to fit the content. The `rows` prop sets the minimum height, and `max-rows` sets the maximum height before a scrollbar appears. `no-auto-shrink` prevents shrinking below the `rows` value.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-textarea.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<template{vue-html}>\n  <div>\n    <label for=\"textarea-auto-height\">Textarea with auto height (min 2 rows, max 5 rows):</label>\n    <BFormTextarea id=\"textarea-auto-height\" rows=\"2\" max-rows=\"5\"></BFormTextarea>\n  </div>\n\n  <div>\n    <label for=\"textarea-auto-height-sticky\">Textarea with auto height (min 2 rows, max 5 rows, sticky):</label>\n    <BFormTextarea id=\"textarea-auto-height-sticky\" rows=\"2\" max-rows=\"5\" no-auto-shrink></BFormTextarea>\n  </div>\n</template{vue-html}>\n```\n\n----------------------------------------\n\nTITLE: Toast with BLink Integration Vue\nDESCRIPTION: Illustrates how to integrate BLink properties into a Toast, enabling the Toast to behave like a link. It sets the href and target properties using the show method from useToastController.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/toast.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BButton\n    @click=\"\n      show?.({props: {href: 'https://getbootstrap.com/', target: '_blank', body: 'I am a BLink'}})\n    \"\n  >\n    Show\n  </BButton>\n</template>\n\n<script setup lang=\"ts\">\nconst {show} = useToastController()\n</script>\n```\n\n----------------------------------------\n\nTITLE: BBreadcrumb Usage with Unique ID (Vue)\nDESCRIPTION: This code demonstrates creating a unique breadcrumb trail by passing an ID to both the `BBreadcrumb` component and the `useBreadcrumb` composable. The `addItem` function appends the input value to the breadcrumb items array associated with the provided ID. The `breadcrumb.reset` function clears this breadcrumb only.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/composables/useBreadcrumb.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BBreadcrumb id=\"foobar\" />\n\n  <BFormInput v-model=\"inputValue\" />\n\n  <BButton @click=\"addItem\">Add</BButton>\n  <BButton variant=\"danger\" @click=\"breadcrumb.reset\">Clear</BButton>\n</template>\n\n<script setup lang=\"ts\">\n// Input matches the id passed to the component\nconst breadcrumb = useBreadcrumb('foobar')\n\nconst inputValue = ref('')\n\nconst addItem = () => {\n  breadcrumb.items.value.push(inputValue.value)\n  inputValue.value = ''\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Tabs Fill Vue Template\nDESCRIPTION: Shows how to proportionately fill all available space with tab controls using the `fill` prop. All horizontal space is occupied, but the width of each control might vary.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/tabs.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Content of TabsFill.vue -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Carousel Autoplay Manipulation Demo\nDESCRIPTION: This example shows how to manually pause and resume an autoplaying carousel using `pause()` and `resume()` methods accessed via template refs.  This allows for programmatic control over the carousel's autoplay state.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/carousel.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Carousel autoplay manipulation -->\n```\n\n----------------------------------------\n\nTITLE: Nav Tab Style (Vue)\nDESCRIPTION: Illustrates how to create a tab-style navigation using the `<BNav>` component with the `tabs` prop. This example shows the active state styling for the tabs.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/nav.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNav tabs>\n    <BNavItem href=\"#\">Link 1</BNavItem>\n    <BNavItem active href=\"#\">Link 2</BNavItem>\n    <BNavItem href=\"#\">Another Link</BNavItem>\n    <BNavItem disabled href=\"#\">Disabled Link</BNavItem>\n  </BNav>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Row Columns Responsive Vue Template\nDESCRIPTION: Shows how to control the number of columns at each breakpoint level using various `<BRow>` props in Bootstrap Vue Next, including `cols`, `cols-sm`, `cols-md`, `cols-lg`, `cols-xl`, and `cols-xxl`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_20\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BContainer>\n    <BRow cols=\"2\" cols-md=\"4\">\n      <BCol>Column</BCol>\n      <BCol>Column</BCol>\n      <BCol>Column</BCol>\n      <BCol>Column</BCol>\n    </BRow>\n  </BContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Column Ordering Vue Template\nDESCRIPTION: Demonstrates controlling the visual order of content using `order-*` props in Bootstrap Vue Next. These props are responsive, allowing you to set order by breakpoint (e.g., `order=\"1\" order-md=\"2\"`).\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_14\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BContainer>\n    <BRow>\n      <BCol order=\"2\">First, but unordered</BCol>\n      <BCol order=\"1\">Second, but ordered first</BCol>\n      <BCol>Third, but unordered</BCol>\n    </BRow>\n  </BContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Button Pressed State Demo\nDESCRIPTION: Shows how to manage the pressed state of a button using the `pressed` prop and `v-model:pressed` for toggling. The prop values can be `true`, `false`, or `null` to control active state and `aria-pressed` attribute.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<<< DEMO ./demo/ButtonPressedState.vue#template{vue-html}\n```\n\n----------------------------------------\n\nTITLE: Column Spacing Vue Template\nDESCRIPTION: Demonstrates using margin and spacing utility classes like `.mr-auto` to force sibling columns away from one another in Bootstrap Vue Next.  This provides control over the horizontal spacing between columns.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_17\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BContainer>\n    <BRow>\n      <BCol>Column</BCol>\n      <BCol class=\"ml-auto\">Column</BCol>\n    </BRow>\n  </BContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Card Parts Demo Vue Template\nDESCRIPTION: This snippet showcases various card parts: title, subtitle, text, and links.  It uses `BCardTitle`, `BCardSubtitle`, and `BCardText` to structure content, and adds links with the `.card-link` class.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/card.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BCard>\n    <BCardTitle>Card Title</BCardTitle>\n    <BCardSubtitle class=\"mb-2 text-muted\">Card Subtitle</BCardSubtitle>\n\n    <BCardText>\n      Some quick example text to build on the card title and make up the bulk of the card's content.\n    </BCardText>\n\n    <BLink href=\"#\" class=\"card-link\">Card link</BLink>\n    <BLink href=\"#\" class=\"card-link\">Another link</BLink>\n  </BCard>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Dropdown Lazy Loading (Vue)\nDESCRIPTION: Demonstrates the usage of the `lazy` prop on the dropdown component. When `lazy` is enabled, the dropdown's content will only be rendered when the dropdown is opened, improving initial page load performance, especially with complex dropdown contents. Useful for performance optimization.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_26\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"Dropdown\" lazy>\n      <BDropdownItem href=\"#\">Item 1</BDropdownItem>\n      <BDropdownItem href=\"#\">Item 2</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Nav Text Content (Vue)\nDESCRIPTION: Shows how to add plain text content to the navigation using the `<BNavText>` component within the `<BNav>`.  This demonstrates how to incorporate non-interactive text elements.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/nav.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNav>\n    <BNavItem href=\"#\">Link 1</BNavItem>\n    <BNavText>Text</BNavText>\n    <BNavItem href=\"#\">Another Link</BNavItem>\n  </BNav>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Contextual State\nDESCRIPTION: Illustrates how to provide visual feedback on the state of the input using the `state` prop. The `state` prop accepts a boolean value: `true` for valid, `false` for invalid.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-file.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<BFormFile class=\"mt-3\" :state=\"false\" />\n<BFormFile class=\"mt-3\" :state=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Replacing msgBoxOk with useModalController.show in Vue\nDESCRIPTION: This example demonstrates how to replace the BootstrapVue `msgBoxOk` method using the `useModalController.show` composable in BootstrapVueNext. It showcases a Vue component that utilizes the composable to display a modal message box with a single 'OK' button. Remember to include `<BModalOrchestrator />` in your App Root.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/migration-guide.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<<< DEMO ./demo/ModalMessageBox.vue\n```\n\n----------------------------------------\n\nTITLE: Navbar Item Dropdown Demo in Vue\nDESCRIPTION: Illustrates the usage of `BNavItemDropdown` within a navbar to create a dropdown menu.  See the `BDropdown` documentation for more details on dropdown behavior.  BootstrapVueNext provides the BNavItemDropdown component.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/navbar.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNavbar variant=\"primary\" toggleable=\"md\">\n    <BNavbarBrand href=\"#\">BootstrapVueNext</BNavbarBrand>\n\n    <BNavbarToggle target=\"dropdown-1\"></BNavbarToggle>\n\n    <BCollapse id=\"dropdown-1\" is-nav>\n      <BNavbarNav>\n        <BNavItemDropdown text=\"Dropdown\">\n          <BDropdownItem href=\"#\">First Action</BDropdownItem>\n          <BDropdownItem href=\"#\">Second Action</BDropdownItem>\n        </BNavItemDropdown>\n      </BNavbarNav>\n    </BCollapse>\n  </BNavbar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Programmatically Hide Toast with useToastController Vue\nDESCRIPTION: This snippet shows how to programmatically hide a toast using the `remove` function from `useToastController` in a Vue component. The `showMe` function displays the toast using the `show` method, storing the returned symbol in the `showValue` variable. The `hideMe` function then uses this symbol to remove the specific toast from view.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/composables/useToastController.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BButtonGroup>\n    <BButton @click=\"showMe\" variant=\"success\"> Show the Toast </BButton>\n    <BButton @click=\"hideMe\" variant=\"danger\"> Hide the Toast </BButton>\n  </BButtonGroup>\n</template>\n\n<script setup lang=\"ts\">\nconst {show, remove} = useToastController()\n\nlet showValue: undefined | symbol\n\nconst showMe = () => {\n  if (typeof showValue === 'symbol') return\n  // `show` returns a symbol\n  showValue = show?.({\n    props: {title: 'Showing', value: true, variant: 'success', pos: 'bottom-center'},\n  })\n}\n\nconst hideMe = () => {\n  if (showValue === undefined) return\n  remove?.(showValue)\n  showValue = undefined\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: BFormGroup Floating Labels - Vue Template\nDESCRIPTION: Showcases the implementation of Bootstrap 5's floating labels using the `floating` property and a placeholder on the `BFormInput` component.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-group.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BFormGroup floating label=\"Name\">\n      <BFormInput type=\"text\" placeholder=\"Enter your name\" />\n    </BFormGroup>\n\n    <BFormGroup floating label=\"Email\">\n      <BFormInput type=\"email\" placeholder=\"Enter your email\" />\n    </BFormGroup>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Responsive Fluid Container - Vue HTML\nDESCRIPTION: This snippet illustrates a responsive fluid container, where the `fluid` prop is set to a breakpoint value (e.g., `'md'`). The container will be 100% wide until that breakpoint is reached, at which point it becomes a standard non-fluid container. This translates to the Bootstrap class `.container-{breakpoint}`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<BContainer fluid=\"md\">\n  I am fluid until the <code>md</code> breakpoint.\n</BContainer>\n```\n\n----------------------------------------\n\nTITLE: Button Toolbar Sizing Template (Vue)\nDESCRIPTION: This example shows how to control the size of buttons and input groups within a button toolbar using the `size` prop.  It demonstrates how to create toolbars with smaller or larger controls. The code is from `ButtonToolbarSizing.vue`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button-toolbar.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"d-flex flex-column\">\n  <b-button-toolbar role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n    <b-button-group class=\"mx-1\" role=\"group\" aria-label=\"First group\">\n      <b-button size=\"sm\" variant=\"primary\">1</b-button>\n      <b-button size=\"sm\" variant=\"primary\">2</b-button>\n      <b-button size=\"sm\" variant=\"primary\">3</b-button>\n      <b-button size=\"sm\" variant=\"primary\">4</b-button>\n    </b-button-group>\n\n    <b-button-group class=\"mx-1\" role=\"group\" aria-label=\"Second group\">\n      <b-button size=\"lg\" variant=\"secondary\">5</b-button>\n      <b-button size=\"lg\" variant=\"secondary\">6</b-button>\n      <b-button size=\"lg\" variant=\"secondary\">7</b-button>\n    </b-button-group>\n\n    <b-button-group class=\"mx-1\" role=\"group\" aria-label=\"Third group\">\n      <b-button variant=\"info\">8</b-button>\n    </b-button-group>\n  </b-button-toolbar>\n\n  <b-button-toolbar role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n    <b-button-group size=\"sm\" class=\"mx-1\" role=\"group\" aria-label=\"First group\">\n      <b-button variant=\"primary\">1</b-button>\n      <b-button variant=\"primary\">2</b-button>\n      <b-button variant=\"primary\">3</b-button>\n      <b-button variant=\"primary\">4</b-button>\n    </b-button-group>\n\n    <b-input-group size=\"sm\" class=\"mx-1\">\n      <b-input-group-prepend is-text>\n        @</b-input-group-prepend>\n      <b-form-input placeholder=\"Input group example\"></b-form-input>\n    </b-input-group>\n  </b-button-toolbar>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Dropdown Auto Close Template Vue\nDESCRIPTION: Shows how to control the dropdown's auto-close behavior using the `auto-close` prop, which can be set to `true`, `false`, `inside`, or `outside`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"Auto Close: Outside\" auto-close=\"outside\">\n      <BDropdownItem href=\"#\">First Action</BDropdownItem>\n      <BDropdownItem href=\"#\">Second Action</BDropdownItem>\n      <BDropdownDivider />\n      <BDropdownItem href=\"#\">Other Action</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: BFormGroup Overview Demo - Vue Template\nDESCRIPTION: Demonstrates a basic overview of the `BFormGroup` component, showcasing its primary functionality for grouping form controls with labels and potential feedback.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-group.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BFormGroup\n      label=\"Your Name:\"\n      label-for=\"name-input\"\n      description=\"Enter your full name.\"\n    >\n      <BFormInput id=\"name-input\" placeholder=\"Enter name\" />\n    </BFormGroup>\n\n    <BFormGroup label=\"Email:\" label-for=\"email-input\">\n      <BFormInput\n        id=\"email-input\"\n        type=\"email\"\n        placeholder=\"Enter email\"\n        required\n      ></BFormInput>\n    </BFormGroup>\n\n    <BFormGroup label=\"Checkbox\">\n      <BFormCheckbox>Check me out</BFormCheckbox>\n    </BFormGroup>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: List Group Actionable Variants Demo - Vue HTML\nDESCRIPTION: This demo combines actionable list group items with contextual variants.  It demonstrates how to create styled links with `href` and different background colors using the `variant` prop, including an active state.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/list-group.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BListGroup>\n    <BListGroupItem href=\"#\" variant=\"primary\">Primary</BListGroupItem>\n    <BListGroupItem href=\"#\" variant=\"secondary\">Secondary</BListGroupItem>\n    <BListGroupItem href=\"#\" variant=\"success\">Success</BListGroupItem>\n    <BListGroupItem href=\"#\" variant=\"danger\">Danger</BListGroupItem>\n    <BListGroupItem href=\"#\" variant=\"warning\">Warning</BListGroupItem>\n    <BListGroupItem href=\"#\" variant=\"info\">Info</BListGroupItem>\n    <BListGroupItem href=\"#\" variant=\"light\">Light</BListGroupItem>\n    <BListGroupItem href=\"#\" variant=\"dark\">Dark</BListGroupItem>\n  </BListGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Full Carousel Template Vue-HTML\nDESCRIPTION: This example is a full, comprehensive usage of BCarousel, demonstrating many features. It shows a combination of slides, indicators, captions, and potentially autoplay settings. This provides a complete example demonstrating various configuration options.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/carousel.md#_snippet_14\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Full carousel example -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Alert Variants\nDESCRIPTION: Shows how to use contextual variants in BAlerts (info, success, warning, danger) to provide visual cues. The `variant` prop controls the color scheme of the alert.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/alert.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<<< DEMO ./demo/AlertVariants.vue#template{vue-html}\n```\n\n----------------------------------------\n\nTITLE: Animated Striped Progress Bar Vue\nDESCRIPTION: This Vue snippet shows how to create an animated striped progress bar using the `animated` prop. It also includes a button to toggle the animation state using Vue's reactivity system.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/progress.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BProgress :value=\"75\" striped :animated=\"animate\" />\n  <BButton class=\"mt-3\" @click=\"animate = !animate\">Toggle animation</BButton>\n</template>\n\n<script setup lang=\"ts\">\nimport {ref} from 'vue'\n\nconst animate = ref(false)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Card Text Variants Demo Vue Template\nDESCRIPTION: This snippet demonstrates how to change the text color within a card using the `text-variant` prop. By default, cards use dark text, but this can be reversed by specifying a different text variant and a corresponding background variant.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/card.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BCard text-variant=\"white\" bg-variant=\"dark\">\n    <BCardTitle>Card Title</BCardTitle>\n    <BCardText>\n      Some quick example text to build on the card title and make up the bulk of the card's content.\n    </BCardText>\n  </BCard>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Single File Input Example\nDESCRIPTION: Demonstrates the basic usage of the BFormFile component in single file mode. The component binds to a ref named 'file' and displays the selected file object.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-file.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BFormFile v-model=\"file\" label=\"Hello!\" />\n  <div class=\"mt-3\">\n    Files: <strong>{{ file }}</strong>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst file = ref<null | File>(null)\n</script>\n```\n\n----------------------------------------\n\nTITLE: BDropdownText Usage (Vue)\nDESCRIPTION: Illustrates how to use the `BDropdownText` component to insert arbitrary text content inside a dropdown menu.  This allows developers to add descriptive text or instructions within the dropdown, which is not possible with standard dropdown items. Requires styling to constrain menu width.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_20\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"Dropdown\">\n      <BDropdownText>Some descriptive text</BDropdownText>\n      <BDropdownItem href=\"#\">Item</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Card Solid Variants Demo Vue Template\nDESCRIPTION: This snippet demonstrates how to apply solid background variants to a card using the `bg-variant` prop. Darker variants may require setting the `text-variant` prop to ensure readability.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/card.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BCard bg-variant=\"primary\" text-variant=\"white\" title=\"Primary\">\n      This is a primary card.\n    </BCard>\n\n    <BCard bg-variant=\"secondary\" text-variant=\"white\" title=\"Secondary\">\n      This is a secondary card.\n    </BCard>\n\n    <BCard bg-variant=\"success\" text-variant=\"white\" title=\"Success\">\n      This is a success card.\n    </BCard>\n\n    <BCard bg-variant=\"danger\" text-variant=\"white\" title=\"Danger\">\n      This is a danger card.\n    </BCard>\n\n    <BCard bg-variant=\"warning\" text-variant=\"dark\" title=\"Warning\">\n      This is a warning card.\n    </BCard>\n\n    <BCard bg-variant=\"info\" text-variant=\"dark\" title=\"Info\">\n      This is an info card.\n    </BCard>\n  </div>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Alert Link Colors\nDESCRIPTION: Demonstrates how to use the `.alert-link` utility CSS class to provide matching colored links within any alert, applicable to `<a>` or `BLink` components.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/alert.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<<< DEMO ./demo/AlertLinkColors.vue#template{vue-html}\n```\n\n----------------------------------------\n\nTITLE: Dropdown Color Variants Template Vue\nDESCRIPTION: Demonstrates how to apply color variants to the dropdown button using the `variant` prop, allowing for styling the button with Bootstrap contextual colors.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_12\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BDropdown variant=\"primary\" text=\"Primary Dropdown\">\n      <BDropdownItem href=\"#\">First Action</BDropdownItem>\n      <BDropdownItem href=\"#\">Second Action</BDropdownItem>\n      <BDropdownDivider />\n      <BDropdownItem href=\"#\">Other Action</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Avatar Group Variant Template (Vue)\nDESCRIPTION: Illustrates how to apply a common variant to all child avatars within a `BAvatarGroup` using the `variant` prop on the group. The group variant overrides the variant specified on individual avatars.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/avatar.md#_snippet_16\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <b-avatar-group variant=\"primary\">\n      <b-avatar text=\"A1\"></b-avatar>\n      <b-avatar text=\"A2\"></b-avatar>\n      <b-avatar text=\"A3\"></b-avatar>\n    </b-avatar-group>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: BFormGroup Horizontal Layout - Vue Template\nDESCRIPTION: Demonstrates horizontal layout using `label-cols` to specify label width within the row. It shows how to arrange labels to the left of the input elements.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-group.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BFormGroup\n      horizontal\n      label=\"Name:\"\n      label-cols-sm=\"3\"\n      content-cols-sm=\"9\"\n      label-for=\"name-input\"\n    >\n      <BFormInput id=\"name-input\" placeholder=\"Enter name\" />\n    </BFormGroup>\n\n    <BFormGroup\n      horizontal\n      label=\"Email:\"\n      label-cols-sm=\"3\"\n      content-cols-sm=\"9\"\n      label-for=\"email-input\"\n    >\n      <BFormInput\n        id=\"email-input\"\n        type=\"email\"\n        placeholder=\"Enter email\"\n        required\n      ></BFormInput>\n    </BFormGroup>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: List Group Overview Demo - Vue HTML\nDESCRIPTION: This demo showcases a basic implementation of the Bootstrap-Vue Next List Group component. It displays a simple list of items.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/list-group.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BListGroup>\n    <BListGroupItem>Cras justo odio</BListGroupItem>\n    <BListGroupItem>Dapibus ac turpis egestas</BListGroupItem>\n    <BListGroupItem>Morbi leo risus</BListGroupItem>\n    <BListGroupItem>Porta ac consectetur ac</BListGroupItem>\n    <BListGroupItem>Vestibulum at eros</BListGroupItem>\n  </BListGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Avatar Button Template (Vue)\nDESCRIPTION: Demonstrates how to render the avatar as a button by setting the `button` prop to `true`. When clicked, the avatar emits a `click` event. The `button-type` prop can be used to control the button type (`button`, `submit`, or `reset`).\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/avatar.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <b-avatar button @click=\"onClick\" text=\"BV\"></b-avatar>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst onClick = () => {\n  // eslint-disable-next-line no-console\n  console.log('Clicked')\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Card Deck Demo Vue Template\nDESCRIPTION: This snippet demonstrates using the `BCardGroup` component with the `deck` prop to create a set of equal-width and height cards that are not attached to one another. Footers will automatically line up as with standard card groups.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/card.md#_snippet_16\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BCardGroup deck>\n    <BCard header=\"Card 1\" footer=\"Footer\">\n      <BCardText>\n        This is some text within card 1.\n      </BCardText>\n    </BCard>\n\n    <BCard header=\"Card 2\" footer=\"Footer\">\n      <BCardText>\n        This is some text within card 2.\n      </BCardText>\n    </BCard>\n\n    <BCard header=\"Card 3\" footer=\"Footer\">\n      <BCardText>\n        This is some text within card 3.\n      </BCardText>\n    </BCard>\n  </BCardGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Radio No Labels Template Vue\nDESCRIPTION: This template demonstrates how to omit labels for radio buttons, as described in the Bootstrap documentation. It's important to provide an accessible name for assistive technologies, such as using `aria-label`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-radio.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BFormRadio value=\"first\" aria-label=\"First radio\"></BFormRadio>\n    <BFormRadio value=\"second\" aria-label=\"Second radio\"></BFormRadio>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Horizontal Alignment Vue Template\nDESCRIPTION: Illustrates horizontal alignment of grid cells within a row using the `align-h` prop on `<BRow>` in Bootstrap Vue Next. Possible values are: 'start', 'center', 'end', 'around', 'between', and 'evenly'.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_13\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BContainer>\n    <BRow align-h=\"center\">\n      <BCol cols=\"4\">Column</BCol>\n      <BCol cols=\"4\">Column</BCol>\n    </BRow>\n  </BContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Nav Fill Style (Vue)\nDESCRIPTION: Demonstrates how to create a navigation that fills the available space using the `<BNav>` component with the `fill` prop.  The nav items expand to fill the available space proportionally.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/nav.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNav fill>\n    <BNavItem href=\"#\">Link 1</BNavItem>\n    <BNavItem active href=\"#\">Link 2</BNavItem>\n    <BNavItem href=\"#\">Another Link</BNavItem>\n    <BNavItem disabled href=\"#\">Disabled Link</BNavItem>\n  </BNav>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Alert Functions\nDESCRIPTION: Shows how to use the exposed `pause()`, `resume()`, `restart()`, and `stop()` functions to manipulate the state of an active timer, accessible through template refs.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/alert.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<<< DEMO ./demo/AlertFunctions.vue\n```\n\n----------------------------------------\n\nTITLE: Horizontal Card Layout Demo Vue Template\nDESCRIPTION: This snippet demonstrates creating a horizontal card layout using grid components and utility classes. It uses `BRow` and `BCol` to arrange the image and content side-by-side, and removes gutters and rounding for a seamless look.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/card.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BRow class=\"g-0\">\n    <BCol md=\"4\">\n      <BCardImg src=\"https://picsum.photos/300/300/?image=25\" alt=\"Image\" class=\"rounded-0\" />\n    </BCol>\n    <BCol md=\"8\">\n      <BCard class=\"rounded-0 overflow-hidden\">\n        <BCardBody>\n          <BCardTitle>Card Title</BCardTitle>\n          <BCardText>\n            Some quick example text to build on the card title and make up the bulk of the card's\n            content.\n          </BCardText>\n          <BButton href=\"#\" variant=\"primary\">Go somewhere</BButton>\n        </BCardBody>\n      </BCard>\n    </BCol>\n  </BRow>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: List Group Horizontal Medium Demo - Vue HTML\nDESCRIPTION: This demo showcases a responsive horizontal list group. It uses `horizontal=\"md\"` to make the list group horizontal starting at the medium breakpoint and above.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/list-group.md#_snippet_14\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BListGroup horizontal=\"md\">\n    <BListGroupItem>Cras justo odio</BListGroupItem>\n    <BListGroupItem>Dapibus ac turpis egestas</BListGroupItem>\n    <BListGroupItem>Morbi leo risus</BListGroupItem>\n  </BListGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Input Group with Checkbox Size Vue Template\nDESCRIPTION: This snippet demonstrates how to use `BFormRadio` or `BFormCheckbox` as addons and adjust styling for correct sizing, specifically when using the `sm` size on `BInputGroup` with the `.mb-n1` utility class.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/input-group.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BInputGroup size=\"sm\">\n      <template #prepend>\n        <BFormCheckbox button button-variant=\"secondary\" aria-label=\"Checkbox for following text input\" class=\"mb-n1\">\n          <span class=\"visually-hidden\">Checkbox</span>\n        </BFormCheckbox>\n      </template>\n      <BFormInput aria-label=\"Text input with checkbox\" />\n    </BInputGroup>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Carousel Interval Demo\nDESCRIPTION: This example shows how to adjust the interval (speed) at which the Carousel is moving by adjusting the interval in real time.  The default is `5000ms`. You can also set intervals per slide by setting the `interval` prop on the slide\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/carousel.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Carousel interval demo -->\n```\n\n----------------------------------------\n\nTITLE: Accessing Input Element with ref in Vue\nDESCRIPTION: This snippet demonstrates how to access the native HTMLInputElement of the BFormInput component using a ref in Vue. It shows how to define a ref, assign it to the BFormInput component, and then use it to access properties and methods of the input element.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-input.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<BFormInput ref=\"foo\" ... />\nconst foo = ref<InstanceType<typeof BFormInput> | null>(null)\nfoo?.value?.element?.methodName\nfoo?.value?.element?.propertyName\n```\n\n----------------------------------------\n\nTITLE: List Group Checkbox Demo - Vue HTML\nDESCRIPTION: This demo integrates checkboxes within list group items. It showcases how to use checkboxes for selection within a list.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/list-group.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BListGroup>\n    <BListGroupItem>\n      <BFormCheckbox aria-label=\"Checkbox 1\" />\n    </BListGroupItem>\n    <BListGroupItem>\n      <BFormCheckbox aria-label=\"Checkbox 2\" />\n    </BListGroupItem>\n    <BListGroupItem>\n      <BFormCheckbox aria-label=\"Checkbox 3\" />\n    </BListGroupItem>\n  </BListGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Radio Reverse Template Vue\nDESCRIPTION: This template shows how to use the `reverse` prop to position the radio buttons on the opposite side of the label. This can be useful for different layout preferences or accessibility requirements.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-radio.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BFormRadioGroup id=\"radio-group-1\" name=\"radio-options\" v-model=\"selected\" reverse>\n      <BFormRadio value=\"first\">First</BFormRadio>\n      <BFormRadio value=\"second\">Second</BFormRadio>\n    </BFormRadioGroup>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Sort Comparer Function\nDESCRIPTION: This TypeScript function demonstrates a custom comparer used by BTable. It retrieves the string value of the items and performs a locale-aware comparison using the key. It can be used to sort specific fields in a BTable.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/table.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const customSortComparer: BTableSortByComparerFunction = (a, b, key) => {\n  const valA = getStringValue(a, key) ?? ''\n  const valB = getStringValue(b, key) ?? ''\n\n  return valA.localeCompare(valB, undefined, { numeric: true, sensitivity: 'case' })\n}\n```\n\n----------------------------------------\n\nTITLE: Visually Hidden Text Example (vue-html)\nDESCRIPTION: Demonstrates how to use the `.visually-hidden` class to hide text visually while still making it accessible to screen readers. This is useful for providing additional context to assistive technology users when visual cues alone are insufficient. The example shows how to add a \"Danger:\" prefix to a warning message, which is only read by screen readers.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference/accessibility.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<p class=\"text-danger mb-0\">\n  <span class=\"visually-hidden\">Danger: </span>\n  This action is not reversible\n</p>\n```\n\n----------------------------------------\n\nTITLE: Dropdown Dropup Template Vue\nDESCRIPTION: Demonstrates how to create a dropup menu by setting the `placement` prop to `top-start`. The default is `bottom-start`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"Dropup Button\" placement=\"top-start\">\n      <BDropdownItem href=\"#\">First Action</BDropdownItem>\n      <BDropdownItem href=\"#\">Second Action</BDropdownItem>\n      <BDropdownDivider />\n      <BDropdownItem href=\"#\">Other Action</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Dropdown Split Button Template Vue\nDESCRIPTION: Demonstrates how to create a split dropdown button with a separate left button that triggers a `split-click` event. Requires a handler to be implemented for the split click event.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BDropdown split text=\"Split Dropdown\" @split-click=\"onSplitClick\">\n      <BDropdownItem href=\"#\">First Action</BDropdownItem>\n      <BDropdownItem href=\"#\">Second Action</BDropdownItem>\n      <BDropdownDivider />\n      <BDropdownItem href=\"#\">Other Action</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Tabs Alignment Vue Template\nDESCRIPTION: Demonstrates how to align tab controls using the `align` prop. Available values are `start`, `center`, `end`, `between`, `around`, and `evenly`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/tabs.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Content of TabsAlignment.vue -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: List Group Numbered Custom Demo - Vue HTML\nDESCRIPTION: This demonstrates numbered list groups with custom content within the list items. It showcases the flexibility of the numbered list group for complex layouts.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/list-group.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BListGroup numbered>\n    <BListGroupItem>\n      <div class=\"fw-bold\">Cras justo odio</div>\n      <p>A paragraph of text</p>\n    </BListGroupItem>\n    <BListGroupItem>\n      <div class=\"fw-bold\">Dapibus ac turpis egestas</div>\n      <p>A paragraph of text</p>\n    </BListGroupItem>\n    <BListGroupItem>\n      <div class=\"fw-bold\">Morbi leo risus</div>\n      <p>A paragraph of text</p>\n    </BListGroupItem>\n  </BListGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Placeholder Width Adjustment Vue HTML\nDESCRIPTION: Shows how to adjust the width of the BPlaceholder component using the width and cols props. The width prop takes priority over the cols prop, allowing for precise control over the placeholder's size.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/placeholder.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<BPlaceholder width=\"30\" cols=\"12\" />\n<BPlaceholder width=\"75%\" variant=\"danger\" />\n<BPlaceholder width=\"12\" variant=\"warning\" />\n<BPlaceholder :cols=\"6\" variant=\"info\" />\n<BPlaceholder cols=\"8\" variant=\"info\" />\n```\n\n----------------------------------------\n\nTITLE: Input Group with Named Slots Vue Template\nDESCRIPTION: This example showcases using named slots (`prepend` and `append`) within the `BInputGroup` component to insert content before and after the input field.  This method allows for more complex components to be used as addons. Relies on Bootstrap Vue Next.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/input-group.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BInputGroup>\n    <template #prepend>\n      <BButton variant=\"outline-secondary\">Prepend</BButton>\n    </template>\n    <BFormInput placeholder=\"Input\" />\n    <template #append>\n      <BButton variant=\"outline-secondary\">Append</BButton>\n    </template>\n  </BInputGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic BOverlay Component with Toggle - Vue\nDESCRIPTION: This snippet demonstrates a basic implementation of the BOverlay component wrapping a BCard. It includes a button to toggle the overlay's visibility using a reactive ref. The aria-hidden attribute is dynamically set on the BCard for accessibility purposes.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/overlay.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BOverlay :show=\"showOverlayEx1\" rounded=\"sm\">\n    <BCard title=\"Card with overlay\" :aria-hidden=\"showOverlayEx1 ? 'true' : null\">\n      <BCardText>Laborum consequat non elit enim exercitation cillum.</BCardText>\n      <BCardText>Click the button to toggle the overlay:</BCardText>\n      <BButton :disabled=\"showOverlayEx1\" variant=\"primary\" @click=\"showOverlayEx1 = true\">\n        Show overlay\n      </BButton>\n    </BCard>\n  </BOverlay>\n\n  <BButton @click=\"showOverlayEx1 = !showOverlayEx1\">Toggle overlay</BButton>\n</template>\n\n<script setup lang=\"ts\">\nconst showOverlayEx1 = ref(false)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Button Group with Dropdown - Vue Template\nDESCRIPTION: This snippet demonstrates how to integrate BDropdown menus within a BButtonGroup.  Note that split dropdown menus are not supported when `vertical` prop is set. This depends on Bootstrap-Vue Next.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button-group.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BButtonGroup aria-label=\"Button group with nested dropdown\">\n    <BButton variant=\"primary\">Button</BButton>\n\n    <BDropdown variant=\"primary\" text=\"Dropdown\">\n      <BDropdownItem>Item 1</BDropdownItem>\n      <BDropdownItem>Item 2</BDropdownItem>\n    </BDropdown>\n  </BButtonGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: List Group Actionable Item Demo - Vue HTML\nDESCRIPTION: This demo transforms `BListGroupItem` components into actionable links using the `href` prop.  Clicking the items navigates to the specified URL.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/list-group.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BListGroup>\n    <BListGroupItem href=\"#\">Cras justo odio</BListGroupItem>\n    <BListGroupItem href=\"#\">Dapibus ac turpis egestas</BListGroupItem>\n    <BListGroupItem href=\"#\">Morbi leo risus</BListGroupItem>\n    <BListGroupItem href=\"#\">Porta ac consectetur ac</BListGroupItem>\n    <BListGroupItem href=\"#\">Vestibulum at eros</BListGroupItem>\n  </BListGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Button Sizing Demo\nDESCRIPTION: Demonstrates how to control the size of the `BButton` component using the `size` prop, specifically `lg` for large and `sm` for small sizes.  The default size is medium.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<<< DEMO ./demo/ButtonSizing.vue#template{vue-html}\n```\n\n----------------------------------------\n\nTITLE: Tabs Pills Variant Vue Template\nDESCRIPTION: Demonstrates the pills style variant by adding the `pills` property to the `<BTabs>` component. This provides a different visual style for the tabs.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/tabs.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Content of TabsPills.vue -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Growing Spinner Demo\nDESCRIPTION: Shows the `grow` spinner type, achieved by setting the `type` prop to `'grow'`. This spinner repeatedly grows in size, offering an alternative loading animation.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/spinner.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"d-flex flex-column gap-2\">\n  <BSpinner type=\"grow\" />\n  <BSpinner type=\"grow\" class=\"ms-auto\" />\n  <BSpinner type=\"grow\" alignment=\"grow\" />\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Alert Component Script\nDESCRIPTION: Defines the component script using TypeScript, importing the data for the component reference and setting up the component's data.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/alert.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {data} from '../../data/components/alert.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Group Horizontal Demo - Vue HTML\nDESCRIPTION: This demo shows horizontal list groups across all breakpoints by setting the `horizontal` prop to `true`. The list items are displayed in a row instead of a column.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/list-group.md#_snippet_13\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BListGroup horizontal>\n    <BListGroupItem>Cras justo odio</BListGroupItem>\n    <BListGroupItem>Dapibus ac turpis egestas</BListGroupItem>\n    <BListGroupItem>Morbi leo risus</BListGroupItem>\n  </BListGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Advanced Placeholder Card Vue HTML\nDESCRIPTION: Illustrates the advanced usage of BPlaceholderCard with custom image, footer, and default slot content in Vue HTML.  It demonstrates how to override default content by using named slots.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/placeholder.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<BPlaceholderCard img-src=\"https://picsum.photos/1024/480/?image=1\" img-bottom no-header>\n  <template #footer>\n    Footer\n  </template>\n\n  <template #default>\n    <BPlaceholder />\n    <BPlaceholder width=\"65\" variant=\"danger\" />\n    <BPlaceholder cols=\"6\" variant=\"info\" />\n  </template>\n</BPlaceholderCard>\n```\n\n----------------------------------------\n\nTITLE: Reactivity within Modals in Vue\nDESCRIPTION: This snippet demonstrates how to make modal properties reactive by using `MaybeRefOrGetter`. The modal's title is updated every 2.5 seconds using setInterval. The `show` method is used with a computed property for the props.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/composables/useModalController.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BButton @click=\"showReactiveExample\">Click me</BButton>\n</template>\n\n<script setup lang=\"ts\">\nconst {show} = useModalController()\n\nconst title = ref('Hello')\n\nsetInterval(() => {\n  title.value = title.value === 'Hello' ? 'World' : 'Hello'\n}, 2500)\n\nconst showReactiveExample = () => {\n  show?.({\n    props: computed(() => ({\n      title: title.value,\n    })),\n  })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Navbar Offcanvas Demo in Vue\nDESCRIPTION: Demonstrates how to integrate the navbar with the `BOffcanvas` component for an offcanvas navigation drawer.  The toggleable prop controls when the navbar collapses into the offcanvas.  BootstrapVueNext is required.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/navbar.md#_snippet_11\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BNavbar toggleable='true' variant='primary' class='mb-2'>\n      <BNavbarBrand href='#'>Offcanvas Navbar</BNavbarBrand>\n\n      <BNavbarToggle target='sidebar-1' />\n    </BNavbar>\n\n    <BOffcanvas id='sidebar-1' title='Offcanvas'>\n      Content of offcanvas\n    </BOffcanvas>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Carousel Methods Demo\nDESCRIPTION: This example demonstrates using the `prev()` and `next()` methods to navigate the carousel programmatically via template refs. This allows for custom navigation controls beyond the built-in indicators and buttons.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/carousel.md#_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Carousel methods demo -->\n```\n\n----------------------------------------\n\nTITLE: Carousel with ride=true Template Vue-HTML\nDESCRIPTION: This example shows using `ride=\"true\"`, which prevents the carousel from automatically starting on page load, only beginning cycling after user interaction. This improves accessibility and performance by deferring carousel initialization.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/carousel.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Carousel with ride=true -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Mix and Match Columns Vue Template\nDESCRIPTION: Shows how to combine different props for each tier to create flexible and responsive grid layouts in Bootstrap Vue Next.  This enables different column behaviors across various screen sizes.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BContainer>\n    <BRow>\n      <BCol md=\"8\">Column</BCol>\n      <BCol sm=\"6\" md=\"4\">Column</BCol>\n    </BRow>\n    <BRow>\n      <BCol sm=\"6\" md=\"8\">Column</BCol>\n      <BCol sm=\"6\" md=\"4\">Column</BCol>\n    </BRow>\n  </BContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vertical Tabs Width Vue Template\nDESCRIPTION: Controls the width of vertical tab controls using the `nav-wrapper-class` prop to set a width utility class (e.g., `w-25`, `col-2`).\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/tabs.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Content of TabsVerticalWidth.vue -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Button Outline Variants Demo\nDESCRIPTION: Demonstrates the usage of outline button variants (e.g., outline-primary, outline-secondary) using the `variant` prop.  Outline variants remove the background color from the button.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<<< DEMO ./demo/ButtonOutlineVariants.vue#template{vue-html}\n```\n\n----------------------------------------\n\nTITLE: Accordion Free Template (Vue)\nDESCRIPTION: This snippet demonstrates the 'free' accordion style where multiple items can be open simultaneously. The `free` property on the BAccordion component enables this behavior. This is from demo/AccordionFree.vue.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/accordion.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BAccordion free>\n    <BAccordionItem header=\"Item 1\">\n      This is the first item's accordion body.\n    </BAccordionItem>\n    <BAccordionItem header=\"Item 2\">\n      This is the second item's accordion body.\n    </BAccordionItem>\n    <BAccordionItem header=\"Item 3\">\n      This is the third item's accordion body.\n    </BAccordionItem>\n  </BAccordion>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Dropdown Menu Offset Template Vue\nDESCRIPTION: Demonstrates how to apply an offset to the dropdown menu using the `offset` prop. The offset is specified in pixels, moving the menu horizontally from the toggle button.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"Offset Dropdown\" offset=\"10\">\n      <BDropdownItem href=\"#\">First Action</BDropdownItem>\n      <BDropdownItem href=\"#\">Second Action</BDropdownItem>\n      <BDropdownDivider />\n      <BDropdownItem href=\"#\">Other Action</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: List Group Custom Content Demo - Vue HTML\nDESCRIPTION: This demo demonstrates how to incorporate custom HTML and components within the list group items. It uses flexbox utility classes to structure the content.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/list-group.md#_snippet_15\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BListGroup>\n    <BListGroupItem>\n      <div class=\"d-flex w-100 justify-content-between\">\n        <h5 class=\"mb-1\">List group item heading</h5>\n        <small>3 days ago</small>\n      </div>\n      <p class=\"mb-1\">Donec id elit non mi porta gravida at eget metus. Maecenas sed diam eget risus varius blandit.</p>\n      <small>Donec id elit non mi porta.</small>\n    </BListGroupItem>\n    <BListGroupItem>\n      <div class=\"d-flex w-100 justify-content-between\">\n        <h5 class=\"mb-1\">List group item heading</h5>\n        <small>3 days ago</small>\n      </div>\n      <p class=\"mb-1\">Donec id elit non mi porta gravida at eget metus. Maecenas sed diam eget risus varius blandit.</p>\n      <small>Donec id elit non mi porta.</small>\n    </BListGroupItem>\n    <BListGroupItem>\n      <div class=\"d-flex w-100 justify-content-between\">\n        <h5 class=\"mb-1\">List group item heading</h5>\n        <small>3 days ago</small>\n      </div>\n      <p class=\"mb-1\">Donec id elit non mi porta gravida at eget metus. Maecenas sed diam eget risus varius blandit.</p>\n      <small>Donec id elit non mi porta.</small>\n    </BListGroupItem>\n  </BListGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Progress Bars Vue-HTML\nDESCRIPTION: This snippet demonstrates the basic usage of the BProgress component with different values, creating simple progress bars. It sets the `value` prop to different percentages to show the progress.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/progress.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<BProgress :value=\"0\" />\n<BProgress :value=\"25\" />\n<BProgress :value=\"50\" />\n<BProgress :value=\"75\" />\n<BProgress :value=\"100\" />\n```\n\n----------------------------------------\n\nTITLE: Showing a Reactive Toast with useToastController Vue\nDESCRIPTION: This code demonstrates how to create a reactive toast using the `useToastController` composable in Vue. It defines a reactive reference `firstRef` and updates its `body` property every second. The `showMe` function then displays a toast with properties based on the current value of `firstRef`, using a computed property to dynamically set the `variant` based on the content of `firstRef.value.body`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/composables/useToastController.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BButton @click=\"showMe\">Show</BButton>\n</template>\n\n<script setup lang=\"ts\">\nconst {show} = useToastController()\n\nconst firstRef = ref<OrchestratedToast>({\n  body: `${Math.random()}`,\n})\n\nsetInterval(() => {\n  firstRef.value.body = `${Math.random()}`\n}, 1000)\n\nconst showMe = () => {\n  show?.({\n    props: computed(() => ({\n      ...firstRef.value,\n      variant: (Number.parseInt(firstRef.value.body?.charAt(2) ?? '0') % 2 === 0\n        ? 'danger'\n        : 'info') as ColorVariant,\n    })),\n  })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Tabs Custom Title Vue Template\nDESCRIPTION: Adds custom content, like HTML code or icons, to the tab title using the `title` slot of `<BTab>`. Avoid placing interactive elements within the title slot.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/tabs.md#_snippet_13\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Content of TabsCustom.vue -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Typescript\nDESCRIPTION: This snippet demonstrates the basic setup of a Vue component using the `<script setup>` syntax with Typescript.  It defines the component's script section where logic, imports, and other component configurations are placed. This script section utilizes the Composition API.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference/images.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Nav Pill Card (Vue)\nDESCRIPTION: Demonstrates how to integrate a pill-style navigation within a `<BCard>` component using the `card-header` and `pills` props on `<BNav>`.  Demonstrates creating a pill-styled interface within a card.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/nav.md#_snippet_13\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BCard>\n    <BNav card-header pills>\n      <BNavItem href=\"#\">Link 1</BNavItem>\n      <BNavItem active href=\"#\">Link 2</BNavItem>\n      <BNavItem href=\"#\">Another Link</BNavItem>\n    </BNav>\n    <BCardBody>\n      <BCardTitle>Card Title</BCardTitle>\n      <BCardText>Some quick example text to build on the card title and make up the bulk of the card's content.</BCardText>\n    </BCardBody>\n  </BCard>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Styling Overlay Backdrop - Vue\nDESCRIPTION: This snippet showcases how to style the BOverlay's backdrop using variant, opacity, and blur properties. It includes BFormSelect and BFormInput components to dynamically control these styles. The variant prop sets the background color, opacity controls the transparency, and blur applies a blur effect to the backdrop.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/overlay.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"row\">\n    <div class=\"col-lg-6\" aria-controls=\"overlay-background\">\n      <label for=\"bg-variant\">Variant</label>\n      <BFormSelect id=\"bg-variant\" v-model=\"variant\" :options=\"variants\" />\n\n      <label for=\"bg-opacity\">Opacity</label>\n      <div class=\"d-inline\">\n        <BFormInput\n          id=\"bg-opacity\"\n          v-model.number=\"opacity\"\n          type=\"range\"\n          min=\"0\"\n          max=\"1\"\n          step=\"0.01\"\n          class=\"d-inline\"\n        />\n      </div>\n\n      {{ opacity.toFixed(2) }}\n\n      <div>\n        <label for=\"bg-blur\">Blur</label>\n        <BFormSelect id=\"bg-blur\" v-model=\"blur\" :options=\"blurs\" />\n      </div>\n    </div>\n\n    <BCol lg=\"6\">\n      <BOverlay\n        id=\"overlay-background\"\n        show\n        :variant=\"variant\"\n        :opacity=\"opacity\"\n        :blur=\"blur\"\n        rounded=\"sm\"\n      >\n        <BCard title=\"Card with overlay\" aria-hidden=\"true\">\n          <BCardText>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n            incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n            exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n          </BCardText>\n          <BButton disabled variant=\"primary\">Button</BButton>\n        </BCard>\n      </BOverlay>\n    </BCol>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst variants = [\n  'transparent',\n  'white',\n  'light',\n  'dark',\n  'primary',\n  'secondary',\n  'success',\n  'danger',\n  'warning',\n  'info',\n]\nconst blurs = [{text: 'None', value: ''}, '1px', '2px', '5px', '0.5em', '1rem']\n\nconst variant = ref('light')\nconst opacity = ref(0.85)\nconst blur = ref('2px')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accordion Overview Template (Vue)\nDESCRIPTION: This snippet demonstrates a basic accordion implementation using Bootstrap-Vue-Next's BAccordionItem and BCollapse components.  It shows how to create collapsible accordion items within a BAccordion. This is from demo/AccordionOverview.vue.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/accordion.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BAccordion>\n    <BAccordionItem header=\"Item 1\">\n      This is the first item's accordion body.\n    </BAccordionItem>\n    <BAccordionItem header=\"Item 2\">\n      This is the second item's accordion body.\n    </BAccordionItem>\n    <BAccordionItem header=\"Item 3\">\n      This is the third item's accordion body.\n    </BAccordionItem>\n  </BAccordion>\n</template>\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Data Import and Setup\nDESCRIPTION: This script imports data from a JSON file and makes it available within the Vue component. It utilizes the `setup` function to return the data object, which is then accessible in the template.  The data is used to populate the component reference.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {data} from '../../data/components/gridSystem.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Autoplaying Carousel Template Vue-HTML\nDESCRIPTION: This example demonstrates how to make the carousel autoplay by setting the `ride` prop to `carousel`.  Autoplaying carousels automatically cycle through slides. The `noHoverPause` prop disables pausing on mouse hover.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/carousel.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Autoplaying carousel -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Card Column Demo Vue Template\nDESCRIPTION: This snippet demonstrates creating a Masonry-like card layout using `BCardGroup` with the `columns` prop. Cards are organized into columns using CSS column properties, with content ordered from top to bottom and left to right.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/card.md#_snippet_17\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BCardGroup columns>\n    <BCard>\n      <BCardImg top src=\"https://picsum.photos/600/300/?image=25\" alt=\"Image\" />\n      <BCardBody>\n        <BCardTitle>Card 1</BCardTitle>\n        <BCardText>\n          Some quick example text to build on the card title and make up the bulk of the card's\n          content.\n        </BCardText>\n      </BCardBody>\n    </BCard>\n\n    <BCard>\n      <BCardImg top src=\"https://picsum.photos/600/300/?image=27\" alt=\"Image\" />\n      <BCardBody>\n        <BCardTitle>Card 2</BCardTitle>\n        <BCardText>\n          Some quick example text to build on the card title and make up the bulk of the card's\n          content.\n        </BCardText>\n      </BCardBody>\n    </BCard>\n\n    <BCard>\n      <BCardImg top src=\"https://picsum.photos/600/300/?image=26\" alt=\"Image\" />\n      <BCardBody>\n        <BCardTitle>Card 3</BCardTitle>\n        <BCardText>\n          Some quick example text to build on the card title and make up the bulk of the card's\n          content.\n        </BCardText>\n      </BCardBody>\n    </BCard>\n  </BCardGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Hiding Parent Modal with useModal in Vue\nDESCRIPTION: This code demonstrates how to use the `useModal` composable within a child component of a `BModal` to hide the parent modal. It uses the `hide` function returned by `useModal`. The `bootstrap-vue-next` library is required.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/composables/useModal.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<BModal>\n  <MyComponent />\n</BModal>\n\n<template>\n  <BButton @click=\"hide\">Done</BButton>\n</template>\n\n<script setup lang=\"ts\">\nconst {hide} = useModal()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Spinner Color Variants Demo\nDESCRIPTION: Demonstrates how to customize the color of spinners using the `variant` prop. This prop maps to Bootstrap v4 `.text-{variant}` classes to control the spinner's color.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/spinner.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"d-flex flex-column gap-2\">\n  <BSpinner variant=\"primary\" />\n  <BSpinner variant=\"secondary\" />\n  <BSpinner variant=\"success\" />\n  <BSpinner variant=\"danger\" />\n  <BSpinner variant=\"warning\" />\n  <BSpinner variant=\"info\" />\n  <BSpinner variant=\"light\" />\n  <BSpinner variant=\"dark\" />\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Configure BootstrapVueNext in Vue.js\nDESCRIPTION: This code snippet demonstrates how to import and configure BootstrapVueNext in a Vue.js application. It imports the necessary modules, CSS, and uses the `createBootstrap` plugin.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// main.js/ts\nimport {createApp} from 'vue'\nimport {createBootstrap} from 'bootstrap-vue-next'\n\n// Add the necessary CSS\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'bootstrap-vue-next/dist/bootstrap-vue-next.css'\n\nconst app = createApp(App)\napp.use(createBootstrap()) // Important\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Form Spinbutton Vertical - Vue Template\nDESCRIPTION: This snippet illustrates how to orient the `BFormSpinbutton` component vertically using the `vertical` prop.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-spinbutton.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\\n  <div>\\n    <BFormSpinbutton id=\"spinbutton-vertical\" v-model.number=\"value\" vertical />\\n    <div class=\"mt-2\">Value: {{ value }}</div>\\n  </div>\\n</template>\\n\n```\n\n----------------------------------------\n\nTITLE: HTML Structure with Title Attribute Vue HTML\nDESCRIPTION: Illustrates an HTML structure where the `title` attribute is applied to a div with class `card`. This scenario allows the BTooltip directive to correctly detect and utilize the specified title for the tooltip, as the directive is attached to the parent element containing the title attribute.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/directives/BTooltip.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"card\" title=\"my title\">\n    //something here\n</div>\n```\n\n----------------------------------------\n\nTITLE: Tabs Bottom Placement Vue Template\nDESCRIPTION: Visually moves the tab controls to the bottom by setting the `end` prop. This works best with the `pills` variant.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/tabs.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Content of TabsBottom.vue -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Actionable Badges Vue Template\nDESCRIPTION: This snippet demonstrates how to create actionable badges by specifying either the `href` prop for links or the `to` prop for router-links, making the badge interactive.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/badge.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <BBadge href=\"#\" variant=\"primary\">Primary</BBadge>\n    <BBadge to=\"/some/route\" variant=\"secondary\">Secondary</BBadge>\n  </div>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Spinners in Buttons Demo\nDESCRIPTION: Shows how to integrate spinners within buttons to indicate a processing state. This is done by placing the `<BSpinner>` component inside a `<BButton>` component.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/spinner.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"d-flex flex-column gap-2\">\n  <BButton variant=\"primary\" disabled>\n    <BSpinner small type=\"grow\" label=\"Loading\"></BSpinner>\n    Loading...\n  </BButton>\n  <BButton variant=\"primary\" disabled>\n    <BSpinner small  label=\"Loading\"></BSpinner>\n    Loading...\n  </BButton>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Button Toolbar Justify Template (Vue)\nDESCRIPTION: This example shows how to make the toolbar span the full width available by justifying its content. The `justify` prop is used to increase the spacing between button groups, input groups, and dropdowns. The code is from `ButtonToolbarJustify.vue`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button-toolbar.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"d-flex flex-wrap\">\n  <b-button-toolbar justify role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n    <b-button-group class=\"mx-1\" role=\"group\" aria-label=\"First group\">\n      <b-button variant=\"primary\">1</b-button>\n      <b-button variant=\"primary\">2</b-button>\n      <b-button variant=\"primary\">3</b-button>\n      <b-button variant=\"primary\">4</b-button>\n    </b-button-group>\n\n    <b-button-group class=\"mx-1\" role=\"group\" aria-label=\"Second group\">\n      <b-button variant=\"secondary\">5</b-button>\n      <b-button variant=\"secondary\">6</b-button>\n      <b-button variant=\"secondary\">7</b-button>\n    </b-button-group>\n\n    <b-button-group class=\"mx-1\" role=\"group\" aria-label=\"Third group\">\n      <b-button variant=\"info\">8</b-button>\n    </b-button-group>\n  </b-button-toolbar>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Advanced Modal Creation with Components in Vue\nDESCRIPTION: This snippet shows how to use the `component` property of the `show` method to render a custom component within the modal. It uses an inline render function with the `h` function to create the modal content. The example updates the modal body every second.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/composables/useModalController.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BButton @click=\"showMeAdvancedExample\">Click me</BButton>\n</template>\n\n<script setup lang=\"ts\">\nconst {show} = useModalController()\n\nconst firstRef = ref<OrchestratedToast>({\n  body: `${Math.random()}`,\n})\n\nsetInterval(() => {\n  firstRef.value.body = `${Math.random()}`\n}, 1000)\n\nconst showMeAdvancedExample = () => {\n  show?.({\n    props: () => ({\n      body: firstRef.value.body,\n    }),\n    component: h(BModal, null, {default: () => `custom ${firstRef.value.body}`}),\n  })\n\n  // Demonstration psuedocode, you can import a component and use it\n  // const importedComponent = () => {\n  //   show?.({\n  //     component: import('./MyModalComponent.vue'),\n  //   })\n  // }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: BTooltip Directive Value as Variable Vue HTML\nDESCRIPTION: Demonstrates how to bind the tooltip text to a reactive variable. This allows the tooltip content to dynamically update based on changes to the `userSurname` variable. Requires the `userSurname` variable to be defined and reactive within the Vue component's scope.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/directives/BTooltip.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<BCard v-b-tooltip=\"userSurname\" />\n```\n\n----------------------------------------\n\nTITLE: Badge Headings Vue Template\nDESCRIPTION: This snippet demonstrates how to use badges within headings, showcasing how badges scale to match the size of the parent heading element using relative font sizing and em units.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/badge.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <h1>\n    Example heading <BBadge variant=\"secondary\">New</BBadge>\n  </h1>\n  <h2>\n    Example heading <BBadge variant=\"secondary\">New</BBadge>\n  </h2>\n  <h3>\n    Example heading <BBadge variant=\"secondary\">New</BBadge>\n  </h3>\n  <h4>\n    Example heading <BBadge variant=\"secondary\">New</BBadge>\n  </h4>\n  <h5>\n    Example heading <BBadge variant=\"secondary\">New</BBadge>\n  </h5>\n  <h6>\n    Example heading <BBadge variant=\"secondary\">New</BBadge>\n  </h6>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Nav Inline Form (Vue)\nDESCRIPTION: Demonstrates how to place an inline form within the navigation using the `<BNavForm>` component. It provides a basic example of incorporating form elements into the navigation structure.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/nav.md#_snippet_11\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNav>\n    <BNavItem href=\"#\">Link 1</BNavItem>\n    <BNavForm>\n      <BFormInput placeholder=\"Search\" size=\"sm\" class=\"mr-sm-2\"></BFormInput>\n      <BButton type=\"submit\" size=\"sm\">Search</BButton>\n    </BNavForm>\n  </BNav>\n</template>\n```\n\n----------------------------------------\n\nTITLE: List Group Active Item Demo - Vue HTML\nDESCRIPTION: This demo shows how to set the `active` prop on a `BListGroupItem` to indicate the currently active selection. It highlights one of the list items.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/list-group.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BListGroup>\n    <BListGroupItem>Cras justo odio</BListGroupItem>\n    <BListGroupItem active>Dapibus ac turpis egestas</BListGroupItem>\n    <BListGroupItem>Morbi leo risus</BListGroupItem>\n    <BListGroupItem>Porta ac consectetur ac</BListGroupItem>\n    <BListGroupItem>Vestibulum at eros</BListGroupItem>\n  </BListGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Offcanvas Locations Template Vue\nDESCRIPTION: This example shows how to customize the location of the Offcanvas component in Vue.js using BootstrapVueNext, including top, bottom, start, and end options.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/offcanvas.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BButtonGroup>\n    <BButton @click=\"top = true\">Top</BButton>\n    <BButton @click=\"end = true\">End</BButton>\n    <BButton @click=\"bottom = true\">Bottom</BButton>\n    <BButton @click=\"start = true\">Start</BButton>\n  </BButtonGroup>\n\n  <BOffcanvas id=\"offcanvas-top\" title=\"Offcanvas Top\" placement=\"top\" :show=\"top\" @hidden=\"top = false\">\n    <p class=\"mt-3 mb-0\">Some text content</p>\n  </BOffcanvas>\n\n  <BOffcanvas id=\"offcanvas-end\" title=\"Offcanvas End\" placement=\"end\" :show=\"end\" @hidden=\"end = false\">\n    <p class=\"mt-3 mb-0\">Some text content</p>\n  </BOffcanvas>\n\n  <BOffcanvas id=\"offcanvas-bottom\" title=\"Offcanvas Bottom\" placement=\"bottom\" :show=\"bottom\" @hidden=\"bottom = false\">\n    <p class=\"mt-3 mb-0\">Some text content</p>\n  </BOffcanvas>\n\n  <BOffcanvas id=\"offcanvas-start\" title=\"Offcanvas Start\" placement=\"start\" :show=\"start\" @hidden=\"start = false\">\n    <p class=\"mt-3 mb-0\">Some text content</p>\n  </BOffcanvas>\n</template>\n\n<script setup lang=\"ts\">\nimport {ref} from 'vue'\n\nconst top = ref(false)\nconst end = ref(false)\nconst bottom = ref(false)\nconst start = ref(false)\n</script>\n\n```\n\n----------------------------------------\n\nTITLE: BTooltip Directive Examples in Vue HTML\nDESCRIPTION: Demonstrates basic usage of the `v-b-tooltip` directive with different value types and modifiers. The value can be a simple string or an object containing configuration options. Modifiers like `hover`, `top`, `focus`, and `right` control the tooltip trigger and placement. Requires BootstrapVueNext components to be imported.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/directives/BTooltip.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<BCard v-b-tooltip=\"'My title'\" />\n<BCard v-b-tooltip=\"{title: 'My title'}\" />\n<BCard v-b-tooltip.hover.top=\"'My title'\" />\n<BCard v-b-tooltip.focus.right=\"{title: 'My title'}\" />\n```\n\n----------------------------------------\n\nTITLE: Form Spinbutton Inline - Vue Template\nDESCRIPTION: This snippet shows how to render the `BFormSpinbutton` component inline, adjusting its width based on the displayed value.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-spinbutton.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\\n  <div>\\n    <span>Quantity:</span>\n    <BFormSpinbutton id=\"spinbutton-inline\" v-model.number=\"value\" inline />\\n    <span>({{ value }})</span>\\n  </div>\\n</template>\\n\n```\n\n----------------------------------------\n\nTITLE: Vue.js Component Setup with Local Storage\nDESCRIPTION: This Vue.js component uses the `@vueuse/core` library's `useLocalStorage` function to persist a user's code group preference. The preference is stored in local storage under the key 'code-group-preference' with a default value of 0.  The component's setup function returns the reactive `codePreference` variable, allowing it to be used in the template.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useLocalStorage} from '@vueuse/core'\n\nconst codePreference = useLocalStorage('code-group-preference', 0)\n\nexport default {\n  setup() {\n    return {codePreference}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BTableSimple Stacked Mode Demo\nDESCRIPTION: This example showcases the `BTableSimple` component in stacked mode.  It demonstrates the use of the `stacked-heading` prop on `BTd` or `BTh` to provide cell headings when the table is stacked.  The styling handles cell headings for smaller screens when the table is rendered in a stacked layout.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/table.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<BTableSimple stacked>\n  <BThead>\n    <BTr>\n      <BTh>#</BTh>\n      <BTh>First Name</BTh>\n      <BTh>Last Name</BTh>\n      <BTh>Username</BTh>\n    </BTr>\n  </BThead>\n  <BTbody>\n    <BTr>\n      <BTd stacked-heading=\"#\">1</BTd>\n      <BTd stacked-heading=\"First Name\">Mark</BTd>\n      <BTd stacked-heading=\"Last Name\">Otto</BTd>\n      <BTd stacked-heading=\"Username\">@mdo</BTd>\n    </BTr>\n    <BTr>\n      <BTd stacked-heading=\"#\">2</BTd>\n      <BTd stacked-heading=\"First Name\">Jacob</BTd>\n      <BTd stacked-heading=\"Last Name\">Thornton</BTd>\n      <BTd stacked-heading=\"Username\">@fat</BTd>\n    </BTr>\n    <BTr>\n      <BTd stacked-heading=\"#\">3</BTd>\n      <BTd stacked-heading=\"First Name\" colspan=\"2\">Larry the Bird</BTd>\n      <BTd stacked-heading=\"Username\">@twitter</BTd>\n    </BTr>\n  </BTbody>\n</BTableSimple>\n```\n\n----------------------------------------\n\nTITLE: Accordion Data Setup (TypeScript)\nDESCRIPTION: This snippet sets up the data for the accordion component using TypeScript within a Vue.js component. It imports the accordion data and makes it available within the component's setup function.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/accordion.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {data} from '../../data/components/accordion.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Avatar Size Template (Vue)\nDESCRIPTION: Illustrates how to control the size of the avatar using the `size` prop. Sizes can be specified as `sm`, `md`, `lg`, numbers (converted to pixels), or any valid CSS length string (e.g., `px`, `em`, `rem`).\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/avatar.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <b-avatar size=\"sm\" text=\"BV\"></b-avatar>\n    <b-avatar size=\"md\" text=\"BV\"></b-avatar>\n    <b-avatar size=\"lg\" text=\"BV\"></b-avatar>\n    <b-avatar size=\"48px\" text=\"BV\"></b-avatar>\n    <b-avatar size=\"4em\" text=\"BV\"></b-avatar>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Card Images Demo Vue Template\nDESCRIPTION: This snippet demonstrates adding an image to the top of a card using the `img-src` and `img-alt` props on `BCard`.  The image will be responsive, adjusting its width as the card size changes.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/card.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BCard img-src=\"https://picsum.photos/600/300/?image=25\" img-alt=\"Image\">\n    <BCardText>\n      Some quick example text to build on the card title and make up the bulk of the card's content.\n    </BCardText>\n  </BCard>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: List Group Actionable Button Demo - Vue HTML\nDESCRIPTION: This demo showcases how to create actionable list group items using button elements by setting the `button` prop to `true`. This example uses `<button>` elements instead of `<a>` tags.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/list-group.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BListGroup>\n    <BListGroupItem button>Cras justo odio</BListGroupItem>\n    <BListGroupItem button>Dapibus ac turpis egestas</BListGroupItem>\n    <BListGroupItem button>Morbi leo risus</BListGroupItem>\n    <BListGroupItem button>Porta ac consectetur ac</BListGroupItem>\n    <BListGroupItem button>Vestibulum at eros</BListGroupItem>\n  </BListGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Button Pill Style Demo\nDESCRIPTION: Demonstrates how to create pill-style buttons (rounded corners) by setting the `pill` prop to `true`.  This applies Bootstrap's `.rounded-pill` utility class.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<<< DEMO ./demo/ButtonPillStyle.vue#template{vue-html}\n```\n\n----------------------------------------\n\nTITLE: Install unplugin-vue-components using PNPM\nDESCRIPTION: This command installs the unplugin-vue-components package as a development dependency using the PNPM package manager.  This plugin enables automatic component registration and tree-shaking.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm add unplugin-vue-components -D\n```\n\n----------------------------------------\n\nTITLE: Offcanvas Sidebar Template Vue\nDESCRIPTION: This example showcases how to create a sidebar using the BOffcanvas component that adapts based on screen size, being visible on larger screens and transforming into an offcanvas on smaller screens.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/offcanvas.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div class=\"d-flex\">\n    <aside>\n      <BButton @click=\"show = !show\">Toggle Sidebar</BButton>\n      <BOffcanvas id=\"offcanvas-sidebar\" title=\"Sidebar\" placement=\"start\" responsive=\"md\" :show=\"show\" @hidden=\"show = false\">\n        <p>Sidebar content here</p>\n      </BOffcanvas>\n    </aside>\n\n    <main class=\"ms-3\">Main content here</main>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport {ref} from 'vue'\n\nconst show = ref(false)\n</script>\n\n```\n\n----------------------------------------\n\nTITLE: Navbar Brand Image Demo in Vue\nDESCRIPTION: Demonstrates how to include an image inside the `BNavbarBrand` component.  It may require custom styling to properly size and align the image within the navbar. No particular dependencies outside of BootstrapVueNext and the image asset are required.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/navbar.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNavbar variant=\"primary\">\n    <BNavbarBrand href=\"#\">\n      <img\n        src=\"https://picsum.photos/30/30\"\n        class=\"d-inline-block align-top\" alt=\"BVueNext Logo\">\n    </BNavbarBrand>\n  </BNavbar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Dropdown Split Button Link Template Vue\nDESCRIPTION: Illustrates how to convert the left split button into a link using the `split-href` prop or the `split-to` prop for a Vue Router link.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BDropdown split split-href=\"#\" text=\"Split Link Dropdown\">\n      <BDropdownItem href=\"#\">First Action</BDropdownItem>\n      <BDropdownItem href=\"#\">Second Action</BDropdownItem>\n      <BDropdownDivider />\n      <BDropdownItem href=\"#\">Other Action</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: BColorMode Directive Usage in Vue Template\nDESCRIPTION: This snippet demonstrates how to use the `v-b-color-mode` directive within a Vue template to dynamically set the color mode of a `BCard` component based on the `currentColor` reactive variable. It includes a `BButton` to toggle the color mode.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/directives/BColorMode.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BCard v-b-color-mode=\"currentColor\">\n    <BButton @click=\"changeColor\"> Current color: {{ currentColor }} </BButton>\n  </BCard>\n</template>\n\n<script setup lang=\"ts\">\nimport {vBColorMode} from 'bootstrap-vue-next'\n\n// Unlike the composable variant, this is not strongly typed by default!\nconst currentColor = ref<'light' | 'dark'>('dark')\n\nconst changeColor = () => {\n  currentColor.value = currentColor.value === 'dark' ? 'light' : 'dark'\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: BDropdownDivider Usage (Vue)\nDESCRIPTION: Shows the usage of the `BDropdownDivider` component in a Vue template. `BDropdownDivider` is used to visually separate groups of related menu items within a dropdown, improving the user interface by providing clear separation.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"Dropdown\">\n      <BDropdownItem href=\"#\">Item 1</BDropdownItem>\n      <BDropdownDivider />\n      <BDropdownItem href=\"#\">Item 2</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing BModalOrchestrator in Vue\nDESCRIPTION: This snippet demonstrates how to initialize the BModalOrchestrator component, which is required for the useModalController to function correctly. It should be placed once at the app root. The component accepts `teleportDisabled` and `teleportTo` props to customize its placement.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/composables/useModalController.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<BModalOrchestrator />\n```\n\n----------------------------------------\n\nTITLE: Card Group Demo Vue Template\nDESCRIPTION: This snippet demonstrates using the `BCardGroup` component to render cards as a single, attached element with equal width and height columns.  It utilizes flexbox for uniform sizing and automatically aligns footers.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/card.md#_snippet_15\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BCardGroup>\n    <BCard header=\"Card 1\" footer=\"Footer\">\n      <BCardText>\n        This is some text within card 1.\n      </BCardText>\n    </BCard>\n\n    <BCard header=\"Card 2\" footer=\"Footer\">\n      <BCardText>\n        This is some text within card 2.\n      </BCardText>\n    </BCard>\n\n    <BCard header=\"Card 3\" footer=\"Footer\">\n      <BCardText>\n        This is some text within card 3.\n      </BCardText>\n    </BCard>\n  </BCardGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Positioned Badge Vue Template\nDESCRIPTION: This snippet demonstrates how to position the badge relative to a parent link or button using the `placement` property. It highlights the need to manually apply the `position-relative` class to the badge's parent.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/badge.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <a href=\"#\" class=\"position-relative\">\n      Inbox\n      <BBadge placement=\"top-right\" variant=\"danger\" pill>9+</BBadge>\n    </a>\n  </div>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Router Link 'exact-path' Prop Example in Vue\nDESCRIPTION: Shows how to use the 'exact-path' prop to match only the path section of the URL, ignoring query and hash sections.  Requires Vue Router 3.5.0+.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference/router-links.md#_snippet_4\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- this link will also be active at `/search?page=2` or `/search#filters` -->\n<RouterLink to=\"/search\" exact-path> </RouterLink>\n```\n\n----------------------------------------\n\nTITLE: Button Toolbar Example 1 Template (Vue)\nDESCRIPTION: This example demonstrates the basic usage of the button toolbar with multiple button groups.  It showcases how to group button components together on a single line within the toolbar. The code is from the `ButtonToolbarExample1.vue` component.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button-toolbar.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"d-flex flex-wrap\">\n  <b-button-toolbar role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n    <b-button-group class=\"mx-1\" role=\"group\" aria-label=\"First group\">\n      <b-button variant=\"primary\">1</b-button>\n      <b-button variant=\"primary\">2</b-button>\n      <b-button variant=\"primary\">3</b-button>\n      <b-button variant=\"primary\">4</b-button>\n    </b-button-group>\n\n    <b-button-group class=\"mx-1\" role=\"group\" aria-label=\"Second group\">\n      <b-button variant=\"secondary\">5</b-button>\n      <b-button variant=\"secondary\">6</b-button>\n      <b-button variant=\"secondary\">7</b-button>\n    </b-button-group>\n\n    <b-button-group class=\"mx-1\" role=\"group\" aria-label=\"Third group\">\n      <b-button variant=\"info\">8</b-button>\n    </b-button-group>\n  </b-button-toolbar>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Limiting File Types\nDESCRIPTION: Shows how to restrict the accepted file types using the `accept` prop. In this example, it's limited to image files using the 'image/*' MIME type.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-file.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BFormFile v-model=\"file\" accept=\"image/*\" />\n  <div class=\"mt-3\">\n    Files: <strong>{{ file }}</strong>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst file = ref<null | File>(null)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vertically Centered Modal in BootstrapVue Next\nDESCRIPTION: This example shows how to vertically center a modal in the viewport using the `centered` prop of the `BModal` component in BootstrapVue Next.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/modal.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BButton v-b-modal.modal-center>Launch centered modal</BButton>\n\n  <BModal id=\"modal-center\" centered title=\"BootstrapVue\">\n    <p class=\"my-4\">Vertically centered modal!</p>\n  </BModal>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Placeholder Sizing Vue HTML\nDESCRIPTION: Demonstrates how to adjust the size of the BPlaceholder component using the size prop with values 'xs', 'sm', and 'lg' in Vue HTML.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/placeholder.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<BPlaceholder size=\"lg\" />\n<BPlaceholder size=\"sm\" />\n<BPlaceholder size=\"xs\" />\n```\n\n----------------------------------------\n\nTITLE: Nav Dropdown (Vue)\nDESCRIPTION: Illustrates how to integrate dropdowns into the navigation using the `<BNavItemDropdown>` component within the `<BNav>`. It demonstrates adding dropdown menus to the navigation.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/nav.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNav>\n    <BNavItem href=\"#\">Link 1</BNavItem>\n    <BNavItemDropdown text=\"Dropdown\" href=\"#\">\n      <BDropdownItem href=\"#\">Link 2</BDropdownItem>\n      <BDropdownItem href=\"#\">Another Link</BDropdownItem>\n    </BNavItemDropdown>\n  </BNav>\n</template>\n```\n\n----------------------------------------\n\nTITLE: BFormGroup with Label Size - Vue Template\nDESCRIPTION: Demonstrates the usage of `label-size` prop to control the label text size matching form input sizes ('sm' and 'lg'). It showcases the visual impact of different label sizes.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-group.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BFormGroup label=\"Small Label:\" label-size=\"sm\" label-for=\"small-input\">\n      <BFormInput id=\"small-input\" size=\"sm\" placeholder=\"Small Input\" />\n    </BFormGroup>\n\n    <BFormGroup label=\"Default Label:\" label-for=\"default-input\">\n      <BFormInput id=\"default-input\" placeholder=\"Default Input\" />\n    </BFormGroup>\n\n    <BFormGroup label=\"Large Label:\" label-size=\"lg\" label-for=\"large-input\">\n      <BFormInput id=\"large-input\" size=\"lg\" placeholder=\"Large Input\" />\n    </BFormGroup>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Pill Badges Vue Template\nDESCRIPTION: This snippet shows how to create pill-shaped badges using the `pill` prop, resulting in badges with a more rounded appearance due to a larger border-radius.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/badge.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <BBadge pill variant=\"primary\">Primary</BBadge>\n    <BBadge pill variant=\"secondary\">Secondary</BBadge>\n    <BBadge pill variant=\"success\">Success</BBadge>\n    <BBadge pill variant=\"danger\">Danger</BBadge>\n    <BBadge pill variant=\"warning\">Warning</BBadge>\n    <BBadge pill variant=\"info\">Info</BBadge>\n    <BBadge pill variant=\"light\">Light</BBadge>\n    <BBadge pill variant=\"dark\">Dark</BBadge>\n  </div>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: SCSS: Styling Grid Rows and Columns\nDESCRIPTION: This SCSS code defines styles for grid rows and columns within the Bootstrap Vue Next example. It includes styling for row spacing, column padding, and background colors. It is targeted to style the visual presentation of the examples.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_22\n\nLANGUAGE: scss\nCODE:\n```\n.bv-example-row {\n  .row {\n    + .row {\n      margin-top: 1rem;\n    }\n\n    > .col:not(.header),\n    > [class^=\"col-\"] {\n      padding-top: 0.75rem;\n      padding-bottom: 0.75rem;\n      background-color: rgba(86, 61, 124, 0.15);\n      border: 1px solid rgba(86, 61, 124, 0.2);\n    }\n  }\n}\n\n.bv-example-row-flex-cols {\n  .row {\n    min-height: 10rem;\n    background-color: rgba(255, 0, 0, 0.1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Single Floating Label Template\nDESCRIPTION: This demo shows the implementation of floating labels on a single form control within BootstrapVueNext. The `floating` attribute is used on the `BForm` component in this case.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<<< DEMO ./demo/FormSingleFloat.vue#template{vue-html}\n```\n\n----------------------------------------\n\nTITLE: Navbar Color Mode Demo in Vue\nDESCRIPTION: Shows how to dynamically control the navbar's background and text color based on the color mode using the `v-b-color-mode` directive.  This demonstrates how to adapt the navbar's appearance to different color themes (e.g., light or dark mode). The v-b-color-mode directive is required.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/navbar.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BNavbar variant=\"primary\" class=\"mb-2\">\n      <template #default>\n        <BNavbarBrand href=\"#\" v-b-color-mode=\"{ fg: 'white', bg: 'primary' }\">\n          Navbar Brand\n        </BNavbarBrand>\n      </template>\n    </BNavbar>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Avatar Group Size Template (Vue)\nDESCRIPTION: Demonstrates how to control the size of all avatars within a `BAvatarGroup` using the `size` prop on the group. The `size` prop accepts the same values as the `size` prop on individual `BAvatar` components.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/avatar.md#_snippet_15\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <b-avatar-group size=\"sm\">\n      <b-avatar variant=\"primary\" text=\"A1\"></b-avatar>\n      <b-avatar variant=\"secondary\" text=\"A2\"></b-avatar>\n      <b-avatar variant=\"success\" text=\"A3\"></b-avatar>\n    </b-avatar-group>\n    <b-avatar-group size=\"lg\">\n      <b-avatar variant=\"primary\" text=\"B1\"></b-avatar>\n      <b-avatar variant=\"secondary\" text=\"B2\"></b-avatar>\n      <b-avatar variant=\"success\" text=\"B3\"></b-avatar>\n    </b-avatar-group>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Card Header and Footer Variants Demo Vue Template\nDESCRIPTION: This snippet demonstrates applying solid and border variants to the card header and footer individually using the `header-bg-variant`, `header-border-variant`, `header-text-variant`, `footer-bg-variant`, `footer-border-variant`, and `footer-text-variant` props.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/card.md#_snippet_12\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BCard\n    header=\"Header\"\n    header-bg-variant=\"primary\"\n    header-text-variant=\"white\"\n    footer=\"Footer\"\n    footer-bg-variant=\"info\"\n    footer-text-variant=\"white\"\n  >\n    <BCardText>\n      Some quick example text to build on the card title and make up the bulk of the card's content.\n    </BCardText>\n  </BCard>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb with Slots Vue Template\nDESCRIPTION: This code demonstrates how to use the `prepend` and `append` slots in the `BBreadcrumb` component to add content before and after the breadcrumb items.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/breadcrumb.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BBreadcrumb>\n      <template #prepend>\n        <span>Prepend</span>\n      </template>\n\n      <BBreadcrumbItem href=\"#\">Home</BBreadcrumbItem>\n      <BBreadcrumbItem href=\"#\">Library</BBreadcrumbItem>\n      <BBreadcrumbItem active>Data</BBreadcrumbItem>\n\n      <template #append>\n        <span>Append</span>\n      </template>\n    </BBreadcrumb>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport BBreadcrumb from 'bootstrap-vue-next/src/components/BBreadcrumb/BBreadcrumb.vue'\nimport BBreadcrumbItem from 'bootstrap-vue-next/src/components/BBreadcrumb/BBreadcrumbItem.vue'\n</script>\n\n```\n\n----------------------------------------\n\nTITLE: Spinner Margin Demo\nDESCRIPTION: Demonstrates the use of margin utilities to control the spacing around the spinner. Bootstrap's margin classes can be used for easy spacing adjustments.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/spinner.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"d-flex flex-column gap-2\">\n  <BSpinner class=\"m-1\" />\n  <BSpinner class=\"m-2\" />\n  <BSpinner class=\"m-3\" />\n  <BSpinner class=\"m-4\" />\n  <BSpinner class=\"m-5\" />\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Styling BLink Component\nDESCRIPTION: Shows how to apply various CSS styles to the BLink component for visual customization.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/link.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<b-link class=\"custom-link\">Styled Link</b-link>\n\n```\n\n----------------------------------------\n\nTITLE: Avatar Rounding Template (Vue)\nDESCRIPTION: Illustrates how to customize the rounding of the avatar using the `rounded` prop and its variations (`rounded-top`, `rounded-bottom`, `rounded-start`, `rounded-end`). The `square` prop takes precedence over the `rounded` prop.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/avatar.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <b-avatar rounded text=\"BV\"></b-avatar>\n    <b-avatar rounded=\"top\" text=\"BV\"></b-avatar>\n    <b-avatar rounded=\"bottom\" text=\"BV\"></b-avatar>\n    <b-avatar rounded=\"start\" text=\"BV\"></b-avatar>\n    <b-avatar rounded=\"end\" text=\"BV\"></b-avatar>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Carousel Touch Threshold Demo\nDESCRIPTION: This example shows how to adjust the distance in pixels it takes to cause a transition to occur by using the `touch-threshold` prop. A higher value will mean the user needs to swipe a longer distance in order to trigger a transition.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/carousel.md#_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Carousel touch threshold demo -->\n```\n\n----------------------------------------\n\nTITLE: Vue Template for Table of Contents Cards\nDESCRIPTION: This Vue template iterates through a computed list of configurations and renders a TableOfContentsCard component for each. The v-for directive binds the key, name, description, and route properties of each configuration item to the component's props.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/configurations.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<TableOfContentsCard v-for=\"composable in computedConfigurationsList\" :key=\"composable.name\" class=\"my-3\" :name=\"composable.name\" :description=\"composable.description\" :route=\"composable.route\" />\n```\n\n----------------------------------------\n\nTITLE: Card Nav in Slot Demo Vue Template\nDESCRIPTION: This snippet demonstrates integrating `BNav` into a card header using the `header` slot.  It shows how to create a navigation menu within the card header.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/card.md#_snippet_13\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BCard>\n    <template #header>\n      <BNav tabs>\n        <BNavItem active>Active</BNavItem>\n        <BNavItem>Link</BNavItem>\n        <BNavItem disabled>Disabled</BNavItem>\n      </BNav>\n    </template>\n    <BCardText>\n      Some quick example text to build on the card title and make up the bulk of the card's content.\n    </BCardText>\n  </BCard>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Collapse v-model Support Demo\nDESCRIPTION: Demonstrates using `v-model` to control the `BCollapse` component's collapsed (visible) state.  It highlights the need to manage accessibility attributes manually when using `v-model`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/collapse.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <BButton\n      :aria-expanded=\"visible ? 'true' : 'false'\"\n      aria-controls=\"collapse-model\"\n      @click=\"visible = !visible\"\n      variant=\"primary\"\n    >\n      Toggle Collapse\n    </BButton>\n    <BCollapse id=\"collapse-model\" v-model=\"visible\">\n      <BCard>\n        <P>This is some content that will collapse.</P>\n      </BCard>\n    </BCollapse>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport {ref} from 'vue'\n\nconst visible = ref(false)\n</script>\n\n```\n\n----------------------------------------\n\nTITLE: Disabled BLink Example\nDESCRIPTION: Demonstrates how to disable a BLink component by setting the `disabled` property to true. Disabling a link prevents event propagation and removes the link from the tab sequence.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/link.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<b-link disabled>Disabled Link</b-link>\n\n```\n\n----------------------------------------\n\nTITLE: Collapse Initial Visibility Demo (Template)\nDESCRIPTION: Shows how to make the `BCollapse` show initially by setting the `v-model` prop to `true`.  The collapse is initially visible and can be toggled.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/collapse.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BButton @click=\"visible = !visible\" variant=\"primary\">Toggle Collapse</BButton>\n    <BCollapse v-model=\"visible\">\n      <BCard>\n        <P>This is some content that will collapse.</P>\n      </BCard>\n    </BCollapse>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport {ref} from 'vue'\n\nconst visible = ref(true)\n</script>\n\n```\n\n----------------------------------------\n\nTITLE: Placeholder Animations Vue HTML\nDESCRIPTION: Illustrates the use of animations (glow and wave) with the BPlaceholderCard component in Vue HTML. Note that the image within BPlaceholderCard does not inherit the animation.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/placeholder.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<BPlaceholderCard style=\"max-width: 20rem; \" animation=\"glow\" />\n<BPlaceholderCard style=\"max-width: 20rem; \" animation=\"wave\" />\n<BPlaceholder animation=\"glow\" />\n```\n\n----------------------------------------\n\nTITLE: Avatar Badge Template (Vue)\nDESCRIPTION: Demonstrates how to add a badge to the avatar using the `badge` prop or the `'badge'` slot. The badge variant can be set via the `badge-variant` prop. The badge scales with the size of the avatar.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/avatar.md#_snippet_11\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <b-avatar badge=\"4\" text=\"BV\"></b-avatar>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining ClassValue Type in TypeScript\nDESCRIPTION: This code snippet defines the `ClassValue` type alias using TypeScript. It's a generic type representing any value that can be used as a CSS class. It allows for flexible class assignment in BootstrapVueNext components.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ClassValue = any\n```\n\n----------------------------------------\n\nTITLE: Tabs Active Classes Vue Template\nDESCRIPTION: Applies custom classes to the currently active control or tab using the `active-nav-item-class` and `active-tab-class` props.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/tabs.md#_snippet_11\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Content of TabsActive.vue -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: List Group Numbered Demo - Vue HTML\nDESCRIPTION: This demo enables numbered list group items using the `numbered` prop. The numbering is generated via CSS for better placement and customization.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/list-group.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BListGroup numbered>\n    <BListGroupItem>Cras justo odio</BListGroupItem>\n    <BListGroupItem>Dapibus ac turpis egestas</BListGroupItem>\n    <BListGroupItem>Morbi leo risus</BListGroupItem>\n    <BListGroupItem>Porta ac consectetur ac</BListGroupItem>\n    <BListGroupItem>Vestibulum at eros</BListGroupItem>\n  </BListGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: List Group Radio Demo - Vue HTML\nDESCRIPTION: This demo integrates radio buttons within list group items, enabling single selection from the list. Ensure to include aria-label for accessibility.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/list-group.md#_snippet_11\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BListGroup>\n    <BListGroupItem>\n      <BFormRadio aria-label=\"Radio 1\" name=\"radio-group\" />\n    </BListGroupItem>\n    <BListGroupItem>\n      <BFormRadio aria-label=\"Radio 2\" name=\"radio-group\" />\n    </BListGroupItem>\n    <BListGroupItem>\n      <BFormRadio aria-label=\"Radio 3\" name=\"radio-group\" />\n    </BListGroupItem>\n  </BListGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Radio Sizing Template Vue\nDESCRIPTION: This template demonstrates how to control the size of radio buttons using the `size` prop. It shows how to set sizes on individual `BFormRadio` components or inherit them from the `BFormRadioGroup` size setting.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-radio.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BFormRadioGroup id=\"radio-group-1\" name=\"radio-options\" size=\"sm\" v-model=\"selected\">\n      <BFormRadio value=\"first\">Small</BFormRadio>\n      <BFormRadio value=\"second\">Small</BFormRadio>\n    </BFormRadioGroup>\n\n    <BFormRadioGroup id=\"radio-group-2\" name=\"radio-options\" v-model=\"selected\">\n      <BFormRadio value=\"first\">Default</BFormRadio>\n      <BFormRadio value=\"second\">Default</BFormRadio>\n    </BFormRadioGroup>\n\n    <BFormRadioGroup id=\"radio-group-3\" name=\"radio-options\" size=\"lg\" v-model=\"selected\">\n      <BFormRadio value=\"first\">Large</BFormRadio>\n      <BFormRadio value=\"second\">Large</BFormRadio>\n    </BFormRadioGroup>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Stacked to Horizontal Columns Vue Template\nDESCRIPTION: Demonstrates how to create a basic grid system that starts stacked on extra small devices and becomes horizontal on medium-sized devices using Bootstrap Vue Next. It utilizes `sm=\"*\"` or `sm` (boolean) props.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BContainer>\n    <BRow>\n      <BCol sm=\"8\">Column</BCol>\n      <BCol sm=\"4\">Column</BCol>\n    </BRow>\n  </BContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Link Underline Opacity\nDESCRIPTION: Shows how to change the opacity of the underline using css.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/link.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<b-link style=\"text-decoration-thickness: 5px; text-decoration-color: currentcolor; text-decoration-line: underline; text-underline-opacity: 0.5;\">Link</b-link>\n```\n\n----------------------------------------\n\nTITLE: Badge Buttons Vue Template\nDESCRIPTION: This snippet demonstrates how to use badges within buttons to provide a counter, illustrating their role as part of links or buttons to display numeric counts.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/badge.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BButton variant=\"primary\">\n    Notifications <BBadge variant=\"light\">4</BBadge>\n  </BButton>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Avatar Badge Positioning Template (Vue)\nDESCRIPTION: Demonstrates how to change the position of the badge using the `badge-placement` prop. By default, the badge appears on the bottom right of the avatar.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/avatar.md#_snippet_13\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <b-avatar badge=\"4\" badge-placement=\"top-start\" text=\"BV\"></b-avatar>\n    <b-avatar badge=\"4\" badge-placement=\"top-end\" text=\"BV\"></b-avatar>\n    <b-avatar badge=\"4\" badge-placement=\"bottom-start\" text=\"BV\"></b-avatar>\n    <b-avatar badge=\"4\" badge-placement=\"bottom-end\" text=\"BV\"></b-avatar>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Computed Component List Generation (Typescript/Vue)\nDESCRIPTION: This snippet defines a computed property, `computedComponentsList`, which transforms the `componentList` array into a new array of objects. Each object in the new array includes the component's name, description, and a generated route using the `routeLocation` function. The resulting array is then sorted alphabetically by component name. It depends on the `componentList` array and the `routeLocation` function.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst computedComponentsList = computed(() =>\n  componentList\n    .map((el) => ({\n      name: el.name,\n      description: el.description,\n      route: routeLocation(el.name),\n    }))\n    .sort((a, b) => a.name.localeCompare(b.name))\n)\n```\n\n----------------------------------------\n\nTITLE: Vertical Tabs Vue Template\nDESCRIPTION: Places the tab controls on the lefthand side by setting the `vertical` prop to `true`. Vertical tabs work with or without `card` mode enabled.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/tabs.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Content of TabsVertical.vue -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Table Field Types in TypeScript\nDESCRIPTION: This code defines various type aliases and an interface related to table fields in TypeScript. These types are used to configure the columns of a table component, including their key, label, formatting, sorting, and styling.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ntype TableFieldFormatter<T = any> =\n  | string\n  | ((value: unknown, key?: LiteralUnion<keyof T>, item?: T) => string)\n\ntype TableFieldAttribute<T = any> =\n  | Record<string, unknown>\n  | ((value: unknown, key?: LiteralUnion<keyof T>, item?: T) => Record<string, unknown>)\n\ntype TableRowType = 'row' | 'row-details' | 'row-top' | 'row-bottom' | 'table-busy'\ntype TableRowThead = 'top' | 'bottom'\n\ninterface TableField<T = Record<string, unknown>> {\n  key: LiteralUnion<keyof T>\n  label?: string\n  headerTitle?: string\n  headerAbbr?: string\n  class?: ClassValue\n  formatter?: TableFieldFormatter<T>\n  sortable?: boolean\n  sortByFormatted?: boolean | TableFieldFormatter<T>\n  filterByFormatted?: boolean | TableFieldFormatter<T>\n  tdClass?: ClassValue\n  thClass?: ClassValue\n  thStyle?: StyleValue\n  variant?: ColorVariant | null\n  tdAttr?: TableFieldAttribute<T>\n  thAttr?: TableFieldAttribute<T>\n  isRowHeader?: boolean\n  stickyColumn?: boolean\n}\ntype TableFieldRaw<T = Record<string, unknown>> = string | TableField<T>\n```\n\n----------------------------------------\n\nTITLE: Carousel Starting Slide Demo\nDESCRIPTION: This example shows how to change the default starting slide by binding the v-model to the index of the slide you want the Carousel to start at.  This snippet demonstrates initializing the carousel with a specific slide as active.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/carousel.md#_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Carousel starting slide demo -->\n```\n\n----------------------------------------\n\nTITLE: Navbar Text Demo in Vue\nDESCRIPTION: Demonstrates the usage of `BNavText` to add text within the navigation bar.  The component automatically handles vertical alignment and horizontal spacing of the text.  BootstrapVueNext is the only required dependency.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/navbar.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNavbar variant=\"primary\" class=\"justify-content-between\">\n    <BNavbarBrand href=\"#\">BootstrapVueNext</BNavbarBrand>\n\n    <BNavText>Navbar text</BNavText>\n  </BNavbar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Dropdown Block Menu Template Vue\nDESCRIPTION: Illustrates how to make the dropdown menu span the full width of its container using the `menu-class` prop and the `w-100` utility class.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_15\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"Block Menu Dropdown\" menu-class=\"w-100\">\n      <BDropdownItem href=\"#\">First Action</BDropdownItem>\n      <BDropdownItem href=\"#\">Second Action</BDropdownItem>\n      <BDropdownDivider />\n      <BDropdownItem href=\"#\">Other Action</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Dropdown Hidden Caret Template Vue\nDESCRIPTION: Demonstrates how to hide the caret on the dropdown toggle button using the `no-caret` prop.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_16\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"No Caret Dropdown\" no-caret>\n      <BDropdownItem href=\"#\">First Action</BDropdownItem>\n      <BDropdownItem href=\"#\">Second Action</BDropdownItem>\n      <BDropdownDivider />\n      <BDropdownItem href=\"#\">Other Action</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Avatar Badge Content Template (Vue)\nDESCRIPTION: Illustrates how to add textual content to the avatar's badge by supplying a string to the `badge` prop or using the named slot `'badge'`. This allows for custom badge content.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/avatar.md#_snippet_12\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <b-avatar badge=\"New\" text=\"BV\"></b-avatar>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Router Link 'router-tag' Prop Example in Vue\nDESCRIPTION: Shows how to use the 'router-tag' prop to render the RouterLink as a different HTML tag, such as <li>, while still maintaining its navigation functionality.  This prop translates to the `tag` prop on the final rendered `RouterLink`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference/router-links.md#_snippet_2\n\nLANGUAGE: Vue\nCODE:\n```\n<BLink to=\"/foo\" router-tag=\"li\">foo</BLink>\n\n<!-- Renders as -->\n<li>foo</li>\n```\n\n----------------------------------------\n\nTITLE: Fix modal overlap issue - BModal - No Language\nDESCRIPTION: This commit fixes a visibility issue in the BModal component where having multiple modals would cause them to overlap each other. It resolves the layering and z-index issues, ensuring that modals are displayed correctly and do not obscure each other.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_31\n\n\n\n----------------------------------------\n\nTITLE: Setting Progress Bar Height Vue-HTML\nDESCRIPTION: This snippet shows how to control the height of the progress bar using the `height` prop. The height value can be a standard CSS dimension like pixels or rem.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/progress.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<BProgress :value=\"25\" height=\"1px\" />\n<BProgress :value=\"25\" height=\"20px\" />\n```\n\n----------------------------------------\n\nTITLE: Offcanvas Responsive Template Vue\nDESCRIPTION: This example demonstrates the responsive functionality of the BOffcanvas component in Vue.js using BootstrapVueNext. It displays inline on larger screens and as an offcanvas on smaller screens.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/offcanvas.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BButton @click=\"show = !show\">Toggle Offcanvas</BButton>\n\n  <BOffcanvas id=\"offcanvas-responsive\" title=\"Responsive Offcanvas\" responsive=\"md\" :show=\"show\" @hidden=\"show = false\">\n    <p>\n      I will always be visible, unless the viewport is smaller than\n      <code>md</code> breakpoint.\n    </p>\n  </BOffcanvas>\n</template>\n\n<script setup lang=\"ts\">\nimport {ref} from 'vue'\n\nconst show = ref(false)\n</script>\n\n```\n\n----------------------------------------\n\nTITLE: Avatar Custom Content Template (Vue)\nDESCRIPTION: Shows how to use the default slot to render custom content within the avatar, allowing for finer control over appearance and the use of custom icons or SVGs. Additional styling may be needed for proper centering and appearance.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/avatar.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <b-avatar>\n      <img\n        src=\"https://picsum.photos/100/100\"\n        alt=\"image\"\n        width=\"100%\"\n        height=\"100%\"\n        style=\"border-radius: 50%\"\n      >\n    </b-avatar>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Dropdown No Flip Template Vue\nDESCRIPTION: Shows how to disable the auto-flip feature of the dropdown menu using the `no-flip` prop. This prevents the dropdown from changing its placement (top/bottom) based on viewport position.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"No Flip Dropdown\" no-flip>\n      <BDropdownItem href=\"#\">First Action</BDropdownItem>\n      <BDropdownItem href=\"#\">Second Action</BDropdownItem>\n      <BDropdownDivider />\n      <BDropdownItem href=\"#\">Other Action</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Tabs Custom Links Vue Template\nDESCRIPTION: Applies custom classes to the generated `<li>` (nav-item) and `<a>` (nav-link) elements using the `title-item-class` and `title-link-class` props, respectively.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/tabs.md#_snippet_14\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Content of TabsCustomLinks.vue -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Collapse Multiple Demo (Template)\nDESCRIPTION: Shows how to collapse multiple `BCollapse` components via a single `v-b-toggle` by providing multiple target Ids using modifiers.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/collapse.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BButton v-b-toggle.collapse-1.collapse-2 variant=\"primary\">Toggle Collapse</BButton>\n    <BCollapse id=\"collapse-1\" class=\"mt-2\">\n      <BCard>\n        <P>First collapse content.</P>\n      </BCard>\n    </BCollapse>\n    <BCollapse id=\"collapse-2\" class=\"mt-2\">\n      <BCard>\n        <P>Second collapse content.</P>\n      </BCard>\n    </BCollapse>\n  </div>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Advanced Placeholder Table Vue HTML\nDESCRIPTION: Demonstrates advanced usage of BPlaceholderTable, adjusting columns, rows, header/footer settings, and using slots to customize the table's content in Vue HTML.  Shows slot usage within the tbody.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/placeholder.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<BPlaceholderTable\n  columns=\"3\"\n  rows=\"2\"\n  show-footer\n  footer-variant=\"info\"\n  header-size=\"lg\"\n  footer-size=\"xs\"\n  footer-columns=\"1\"\n  header-columns=\"4\"\n>\n  <template #default>\n    <tbody>\n      <tr>\n        <td>\n          <BPlaceholder size=\"lg\" variant=\"secondary\" />\n          <BPlaceholder size=\"sm\" variant=\"secondary\" />\n          <BPlaceholder size=\"xs\" variant=\"secondary\" />\n        </td>\n        <td>\n          <BPlaceholder variant=\"warning\" />\n          <BPlaceholder animation=\"wave\" variant=\"warning\" />\n        </td>\n        <td>\n          <BPlaceholder animation=\"glow\" variant=\"danger\" />\n        </td>\n      </tr>\n    </tbody>\n  </template>\n</BPlaceholderTable>\n```\n\n----------------------------------------\n\nTITLE: Set correct align types - BRow - No Language\nDESCRIPTION: This commit fixes an issue in Bootstrap Vue Next related to incorrect align types for the BRow component. It ensures that the row's content is aligned correctly according to the specified alignment properties, fixing potential layout or display problems.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Card Header and Footer Demo Vue Template\nDESCRIPTION: This snippet demonstrates adding a header and footer to a card using the `header` and `footer` props.  The `header-tag` and `footer-tag` props can be used to control the HTML element used for the header and footer.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/card.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BCard header=\"Header\" footer=\"Footer\">\n    <BCardText>\n      Some quick example text to build on the card title and make up the bulk of the card's content.\n    </BCardText>\n  </BCard>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Breakpoint Type in TypeScript\nDESCRIPTION: This code snippet defines the `Breakpoint` type alias using TypeScript. It represents the available breakpoint sizes for responsive design in BootstrapVueNext, such as 'sm', 'md', 'lg', 'xl', and 'xxl'.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype Breakpoint = 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n```\n\n----------------------------------------\n\nTITLE: Dropdown Floating Strategy Template Vue\nDESCRIPTION: Illustrates how to change the floating strategy of the dropdown using the `strategy` prop.  The default is 'absolute', and the other option is 'fixed'.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"Fixed Strategy\" strategy=\"fixed\">\n      <BDropdownItem href=\"#\">First Action</BDropdownItem>\n      <BDropdownItem href=\"#\">Second Action</BDropdownItem>\n      <BDropdownDivider />\n      <BDropdownItem href=\"#\">Other Action</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disable Fade Transition - Vue\nDESCRIPTION: This snippet demonstrates how to disable the default fade transition of the BOverlay component using the `no-fade` prop. The rest of the component operates similarly to the basic example, toggling the overlay visibility with a button.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/overlay.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BOverlay no-fade :show=\"showOverlayEx1\" rounded=\"sm\">\n    <BCard title=\"Card with overlay\" :aria-hidden=\"showOverlayEx1 ? 'true' : null\">\n      <BCardText>Laborum consequat non elit enim exercitation cillum.</BCardText>\n      <BCardText>Click the button to toggle the overlay:</BCardText>\n      <BButton :disabled=\"showOverlayEx1\" variant=\"primary\" @click=\"showOverlayEx1 = true\">\n        Show overlay\n      </BButton>\n    </BCard>\n  </BOverlay>\n\n  <BButton @click=\"showOverlayEx1 = !showOverlayEx1\">Toggle overlay</BButton>\n</template>\n\n<script setup lang=\"ts\">\nconst showOverlayEx1 = ref(false)\n</script>\n```\n\n----------------------------------------\n\nTITLE: BDropdownGroup Usage (Vue)\nDESCRIPTION: Demonstrates the usage of `BDropdownGroup`, which groups a set of dropdown items under an optional header. It shows how to nest dropdown sub-components inside of a `BDropdownGroup`, allowing for logical grouping of menu items within a dropdown menu. Includes an optional header for context.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_21\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"Dropdown\">\n      <BDropdownGroup header=\"Group 1\">\n        <BDropdownItem href=\"#\">Item 1</BDropdownItem>\n        <BDropdownItem href=\"#\">Item 2</BDropdownItem>\n      </BDropdownGroup>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Dot Indicator Badge Vue Template\nDESCRIPTION: This snippet showcases the use of the `dot-indicator` property to transform the badge into a more generic indicator, emphasizing the need to manually apply the `position-relative` class to the parent button.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/badge.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <BButton variant=\"primary\" class=\"position-relative\">\n      Profile\n      <BBadge dot-indicator variant=\"danger\" placement=\"top-right\"></BBadge>\n    </BButton>\n  </div>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Loading Button Example with BOverlay in Vue\nDESCRIPTION: This snippet demonstrates how to create a loading button effect using `BOverlay`. The overlay is displayed when the button is in a loading state (`loadingBuzy`). The code includes a simulated asynchronous request using `setTimeout` and handles focus management on overlay hidden event. It uses `ref` for reactive state and element references.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/overlay.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BOverlay\n    :show=\"loadingBuzy\"\n    rounded\n    opacity=\"0.6\"\n    spinner-small\n    spinner-variant=\"primary\"\n    class=\"d-inline-block\"\n    @hidden=\"onBuzyHidden\"\n  >\n    <BButton ref=\"buzyButton\" :disabled=\"loadingBuzy\" variant=\"primary\" @click=\"setBuzyClick\">\n      Do something\n    </BButton>\n  </BOverlay>\n</template>\n\n<script setup lang=\"ts\">\nlet timeout = null\n\nconst loadingBuzy = ref(false)\nconst buzyButton = ref<HTMLElement | null>(null)\n\nconst clearTimer = () => {\n  if (timeout) {\n    clearTimeout(timeout)\n    timeout = null\n  }\n}\nconst setTimer = (callback) => {\n  clearTimer()\n  timeout = setTimeout(() => {\n    clearTimer()\n    callback()\n  }, 5000)\n}\nconst setBuzyClick = () => {\n  loadingBuzy.value = true\n  // Simulate an async request\n  setTimer(() => {\n    loadingBuzy.value = false\n  })\n}\n\nconst onBuzyHidden = () => {\n  // Return focus to the button once hidden\n  //buzyButton.focus()\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Sizing the Input\nDESCRIPTION: Illustrates how to modify the size of the BFormFile component using the `size` prop. Available sizes are 'sm', default (no size prop), and 'lg'.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-file.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<BFormFile class=\"mt-3\" size=\"sm\" />\n<BFormFile class=\"mt-3\" />\n<BFormFile class=\"mt-3\" size=\"lg\" />\n```\n\n----------------------------------------\n\nTITLE: Defining TextColorVariant Type in TypeScript\nDESCRIPTION: This code snippet defines the `TextColorVariant` type alias using TypeScript. It represents the available color variants for text styles in BootstrapVueNext, similar to `ColorVariant` but specifically for text. It includes options like 'primary', 'secondary', 'success', etc., as well as text-specific options like 'body' and 'muted'.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\ntype TextColorVariant =\n  | 'primary'\n  | 'secondary'\n  | 'success'\n  | 'danger'\n  | 'warning'\n  | 'info'\n  | 'light'\n  | 'dark'\n  | 'white'\n  | 'body'\n  | 'muted'\n  | 'black-50'\n  | 'white-50'\n  | 'reset'\n```\n\n----------------------------------------\n\nTITLE: BFormGroup with Automatic ID Inheritance - Vue Template\nDESCRIPTION: Shows how `BFormGroup` automatically inherits the `id` attribute from child input components, ensuring proper label association.  No additional dependencies beyond BootstrapVueNext are needed. It relies on the `id` attribute of the `BFormInput` being automatically passed to the label's `for` attribute.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-group.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BFormGroup label=\"Name\" label-for=\"name-input\">\n    <BFormInput id=\"name-input\" type=\"text\" placeholder=\"Enter your name\" />\n  </BFormGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Fluid Width Container - Vue HTML\nDESCRIPTION: This snippet showcases a fluid width container using the `fluid` prop on `<BContainer>`. This container will always be 100% wide, regardless of the viewport breakpoint. It is equivalent to the Bootstrap `.container-fluid` class.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<BContainer fluid>\n  I am a fluid container.\n</BContainer>\n```\n\n----------------------------------------\n\nTITLE: BFormCheckBox v-model After Migration (Vue)\nDESCRIPTION: Demonstrates the updated approach for two-way binding in BootstrapVueNext, utilizing the `v-model` directive with the `indeterminate` model. This replaces the `.sync` modifier used in BootstrapVue.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/migration-guide.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BFormCheckbox\n    v-model:indeterminate=\"isIndeterminate\"\n  >\n    Check me!\n  </BFormCheckbox>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      isIndeterminate: false\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: BTooltip Directive Value as String Vue HTML\nDESCRIPTION: Shows how to specify the tooltip text directly as a string value.  It emphasizes the importance of using proper JavaScript string literal syntax to correctly display the intended text. Demonstrates the use of single quotes within double quotes to define the string.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/directives/BTooltip.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<BCard v-b-tooltip=\"'My title'\" />\n```\n\n----------------------------------------\n\nTITLE: Button Toolbar Example 2 Template (Vue)\nDESCRIPTION: This example demonstrates how to combine a small button group and a small input group within a button toolbar.  It highlights the usage of different BootstrapVueNext components within the same toolbar. The code is from `ButtonToolbarExample2.vue`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button-toolbar.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"d-flex flex-wrap\">\n  <b-button-toolbar role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n    <b-button-group class=\"mx-1\" role=\"group\" aria-label=\"First group\">\n      <b-button size=\"sm\" variant=\"primary\">1</b-button>\n      <b-button size=\"sm\" variant=\"primary\">2</b-button>\n      <b-button size=\"sm\" variant=\"primary\">3</b-button>\n      <b-button size=\"sm\" variant=\"primary\">4</b-button>\n    </b-button-group>\n\n    <b-input-group size=\"sm\" class=\"mx-1\">\n      <b-input-group-prepend is-text>\n        @\n      </b-input-group-prepend>\n      <b-form-input placeholder=\"Input group example\"></b-form-input>\n    </b-input-group>\n  </b-button-toolbar>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Column Offset Clearing Vue Template\nDESCRIPTION: Shows how to reset offsets by setting the offset to `0` at a larger breakpoint in Bootstrap Vue Next. This is useful for clearing offsets at responsive breakpoints to maintain desired layout.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_16\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BContainer>\n    <BRow>\n      <BCol md=\"4\">Column</BCol>\n      <BCol md=\"5\" offset=\"md-3\">Column</BCol>\n    </BRow>\n    <BRow>\n      <BCol md=\"6\" offset=\"md-0\">Column</BCol>\n      <BCol md=\"6\">Column</BCol>\n    </BRow>\n  </BContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Card Bordered Variants Demo Vue Template\nDESCRIPTION: This snippet demonstrates how to apply border variants to a card using the `border-variant` prop.  The border color will change based on the specified variant.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/card.md#_snippet_11\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BCard border-variant=\"primary\" title=\"Primary\">\n      This is a primary card.\n    </BCard>\n\n    <BCard border-variant=\"secondary\" title=\"Secondary\">\n      This is a secondary card.\n    </BCard>\n\n    <BCard border-variant=\"success\" title=\"Success\">\n      This is a success card.\n    </BCard>\n\n    <BCard border-variant=\"danger\" title=\"Danger\">\n      This is a danger card.\n    </BCard>\n\n    <BCard border-variant=\"warning\" title=\"Warning\">\n      This is a warning card.\n    </BCard>\n\n    <BCard border-variant=\"info\" title=\"Info\">\n      This is an info card.\n    </BCard>\n  </div>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Navbar Brand Link Demo in Vue\nDESCRIPTION: Demonstrates using `BNavbarBrand` as a link using the `href` attribute. The `href` prop creates a standard HTML link.  No specific dependencies beyond BootstrapVueNext are noted.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/navbar.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNavbar variant=\"primary\">\n    <BNavbarBrand href=\"#\">\n      Navbar Brand Link\n    </BNavbarBrand>\n  </BNavbar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Alignment Types in TypeScript\nDESCRIPTION: This code snippet defines various alignment-related type aliases using TypeScript. These types are used throughout the BootstrapVueNext library to provide consistent and type-safe alignment options for different components, covering horizontal, vertical, and content alignment.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AlignmentCommon = 'start' | 'end' | 'center' | 'fill'\ntype AlignmentContent = AlignmentCommon | 'between' | 'around' | 'stretch'\ntype AlignmentHorizontal = AlignmentCommon | 'between' | 'around'\ntype AlignmentJustifyContent = 'start' | 'end' | 'center' | 'between' | 'around' | 'evenly'\ntype AlignmentTextHorizontal = 'start' | 'end' | 'center'\ntype AlignmentVertical = AlignmentCommon | 'baseline' | 'stretch'\ntype VerticalAlign = 'baseline' | 'top' | 'middle' | 'bottom' | 'text-top' | 'text-bottom'\ntype ContainerVerticalAlign = Exclude<VerticalAlign, 'baseline' | 'text-top' | 'text-bottom'>\ntype ContainerHorizontalAlign = 'start' | 'center' | 'end'\ntype ContainerPosition = `${ContainerVerticalAlign}-${ContainerHorizontalAlign}`\n```\n\n----------------------------------------\n\nTITLE: Alert Auto-dismissing\nDESCRIPTION: Illustrates how to create auto-dismissing BAlerts by setting the `v-model` to the number of milliseconds to remain visible. The `noHoverPause` and `interval` props are also covered.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/alert.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<<< DEMO ./demo/AlertAutoDismissible.vue\n```\n\n----------------------------------------\n\nTITLE: Configure TypeScript for Unplugin Icons\nDESCRIPTION: Configures the TypeScript compiler to include the unplugin-icons type definitions and the generated components declaration file.  This allows TypeScript to recognize and correctly type the icon components when using the preferred installation method.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/icons.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n// tsconfig.json\n{\n  \"include\": [\"components.d.ts\"],\n  \"compilerOptions\": {\n    \"types\": [\"unplugin-icons/types/vue\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Card Kitchen Sink Demo Vue Template\nDESCRIPTION: This snippet demonstrates a comprehensive example of using various card components, including images, text, list groups, and links, to create a complex card layout. It illustrates the flexibility of the `BCard` component.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/card.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BCard style=\"max-width: 30rem;\">\n    <BCardImg src=\"https://picsum.photos/600/300/?image=25\" alt=\"Image\" top />\n\n    <BCardBody>\n      <BCardTitle>Card Title</BCardTitle>\n      <BCardSubtitle class=\"mb-2 text-muted\">Card Subtitle</BCardSubtitle>\n      <BCardText>\n        Some quick example text to build on the card title and make up the bulk of the card's content.\n      </BCardText>\n      <BLink href=\"#\" class=\"card-link\">Card link</BLink>\n      <BLink href=\"#\" class=\"card-link\">Another link</BLink>\n    </BCardBody>\n\n    <BListGroup flush>\n      <BListGroupItem>Cras justo odio</BListGroupItem>\n      <BListGroupItem>Dapibus ac turpis egestas</BListGroupItem>\n      <BListGroupItem>Vestibulum at eros</BListGroupItem>\n    </BListGroup>\n\n    <BCardBody>\n      <BLink href=\"#\" class=\"card-link\">Card link</BLink>\n      <BLink href=\"#\" class=\"card-link\">Another link</BLink>\n    </BCardBody>\n\n    <BCardFooter>Card Footer</BCardFooter>\n  </BCard>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Correct BTooltip Usage with Quoted String Value Vue HTML\nDESCRIPTION: Demonstrates the correct way to use the `v-b-tooltip` directive by providing a properly quoted string value for the tooltip text.  This ensures that the text is treated as a literal string and displayed correctly in the tooltip. Requires understanding of JavaScript string literals.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/directives/BTooltip.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<BCard v-b-tooltip.hover.top=\"'my title'\" />\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup Block (TypeScript)\nDESCRIPTION: This code snippet demonstrates a basic Vue script setup block using TypeScript. It's intended for use within a Vue single-file component to define the component's logic and state using the composition API. No specific dependencies are required; it assumes a Vue environment configured with TypeScript support.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference/starter-templates.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<script setup lang=\"ts\">\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Fix modal not showing up - BModal - No Language\nDESCRIPTION: This commit fixes a critical bug in Bootstrap Vue Next where the BModal component was not showing up or the backdrop was not appearing correctly in certain cases. The fix involves moving the modal's CSS properties to a global style file to ensure consistent styling and proper rendering.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Avatar Variant Override Template (Vue)\nDESCRIPTION: Demonstrates how to override the calculated text color based on the `variant` prop by manually specifying the `bg-variant` and `text-variant` props. This provides more control over the avatar's color scheme.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/avatar.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <b-avatar variant=\"primary\" text=\"BV\"></b-avatar>\n    <b-avatar bg-variant=\"primary\" text-variant=\"light\" text=\"BV\"></b-avatar>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Nav Justified Style (Vue)\nDESCRIPTION: Illustrates how to create a navigation with equal-width items using the `<BNav>` component with the `justified` prop. The nav items are justified to occupy equal space.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/nav.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNav justified>\n    <BNavItem href=\"#\">Link 1</BNavItem>\n    <BNavItem active href=\"#\">Link 2</BNavItem>\n    <BNavItem href=\"#\">Another Link</BNavItem>\n    <BNavItem disabled href=\"#\">Disabled Link</BNavItem>\n  </BNav>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Carousel Touch Swiping Template Vue-HTML\nDESCRIPTION: This example demonstrates disabling touch swiping on the carousel using the `no-touch` prop. This removes the ability to navigate the carousel via touch gestures. This snippet can be useful in scenarios where touch interaction is not desired.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/carousel.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Carousel with touch swiping -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining LinkDecorators Types in TypeScript\nDESCRIPTION: This code snippet defines the `LinkOpacity` and `UnderlineOpacity` type aliases using TypeScript. These types are related to link styling, specifically the opacity of links and underlines.  They allow for a specific set of numeric or string-numeric values.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntype LinkOpacity = 10 | 25 | 50 | 75 | 100 | '10' | '25' | '50' | '75' | '100'\ntype UnderlineOpacity = 0 | '0' | LinkOpacity\ntype UnderlineOffset = 1 | 2 | 3 | '1' | '2' | '3'\n```\n\n----------------------------------------\n\nTITLE: Form Spinbutton Wrapping - Vue Template\nDESCRIPTION: This snippet showcases the `wrap` prop, which allows the spin button to wrap from max to min when incrementing, or min to max when decrementing, providing a continuous numeric range.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-spinbutton.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\\n  <div>\\n    <BFormSpinbutton id=\"spinbutton-wrapping\" v-model.number=\"value\" min=\"1\" max=\"10\" wrap />\\n    <div class=\"mt-2\">Value: {{ value }}</div>\\n  </div>\\n</template>\\n\n```\n\n----------------------------------------\n\nTITLE: Input Group with Native Checkbox Vue Template\nDESCRIPTION: This example shows how to incorporate native HTML checkboxes as addons within an input group. It recommends adding `.mt-0` to the `.form-check-input` class when there is no visible text. Depends on Bootstrap Vue Next's styling.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/input-group.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BInputGroup>\n    <template #prepend>\n      <div class=\"input-group-text\">\n        <input class=\"form-check-input mt-0\" type=\"checkbox\" value=\"\" aria-label=\"Checkbox for following text input\">\n      </div>\n    </template>\n    <BFormInput aria-label=\"Text input with checkbox\" />\n  </BInputGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Normalized Options Object Array in TypeScript\nDESCRIPTION: Demonstrates the normalized format of the options array, where each object has both `text` and `value` properties. If the original array had objects missing the `value` property, it would have been populated from the `text` property during normalization.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/_options.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst options = [\n  { text: 'First option', value: 'First option' },\n  { text: 'Second option', value: 'second' },\n  { text: 'Third option', value: 'Third option' },\n  { text: 'Fourth option', value: { fourth: true } },\n]\n\nexport default options\n```\n\n----------------------------------------\n\nTITLE: Link Underline Colors\nDESCRIPTION: Shows how to change the color of the underline using css and inline styles\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/link.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<b-link style=\"text-decoration-color: red;\">Link</b-link>\n```\n\n----------------------------------------\n\nTITLE: Spinner Text Align Demo\nDESCRIPTION: Illustrates the use of text alignment utility classes to align spinners. These classes provide a simple way to horizontally align spinners within a container.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/spinner.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"text-center gap-2\">\n  <BSpinner />\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Extend built in types - No Language\nDESCRIPTION: This commit adds the ability to extend certain built-in types within Bootstrap Vue Next. This enhancement enables developers to customize and extend the behavior of existing data types, providing greater flexibility in data handling and manipulation.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Avatar Variants Template (Vue)\nDESCRIPTION: Illustrates how to use the `variant` prop to apply Bootstrap theme color variants to the avatar. The default variant is `secondary`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/avatar.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <b-avatar variant=\"primary\" text=\"BV\"></b-avatar>\n    <b-avatar variant=\"secondary\" text=\"BV\"></b-avatar>\n    <b-avatar variant=\"success\" text=\"BV\"></b-avatar>\n    <b-avatar variant=\"danger\" text=\"BV\"></b-avatar>\n    <b-avatar variant=\"warning\" text=\"BV\"></b-avatar>\n    <b-avatar variant=\"info\" text=\"BV\"></b-avatar>\n    <b-avatar variant=\"light\" text=\"BV\"></b-avatar>\n    <b-avatar variant=\"dark\" text=\"BV\"></b-avatar>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Extending BootstrapVueNext Types in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to extend the `BaseColorVariant`, `BaseButtonVariant`, `BaseTextColorVariant`, and `BaseSize` interfaces from the `bootstrap-vue-next` library using declaration merging. This allows you to add custom color variants (e.g., 'purple') and sizes (e.g., 'xl') to the framework. The `unknown` type is used as a placeholder, indicating that the specific type doesn't matter for the interface augmentation.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n// shims-bootstrap-vue-next.d.ts\n\nimport 'bootstrap-vue-next'\n\ndeclare module 'bootstrap-vue-next/dist/src/types' {\n  export interface BaseColorVariant {\n    purple: unknown // we use unknown type because it does not matter here\n  }\n  export interface BaseButtonVariant {\n    // there is no need to add \"purple\" (it inherits from BaseColorVariant)\n    'outline-purple': unknown // outline purple button\n  }\n  export interface BaseTextColorVariant {\n    // there is no need to add \"purple\" (it inherits from BaseColorVariant)\n  }\n  export interface BaseSize {\n    xl: unknown // extra large\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RadioOptionRaw Type in TypeScript\nDESCRIPTION: This code snippet defines the `RadioOptionRaw` type alias using TypeScript. It represents the raw input format for radio button options, which can be a string, a number, or a partial `RadioOption` object extended with additional properties.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ntype RadioOptionRaw = string | number | (Partial<RadioOption> & Record<string, unknown>)\n```\n\n----------------------------------------\n\nTITLE: Toggle Overlay with Rounded Corners Vue\nDESCRIPTION: This example demonstrates how to toggle a BOverlay component's visibility and apply rounded corners to match the obscured content.  It uses the `rounded` prop with the value 'circle' for circular corners. A boolean ref `showRoundedEx` is used to control the overlay's visibility.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/overlay.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BButton @click=\"showRoundedEx = !showRoundedEx\">Toggle overlay</BButton>\n\n  <BRow class=\"text-center mt-3\">\n    <BCol md=\"6\">\n      <p>With rounding</p>\n      <BOverlay :show=\"showRoundedEx\" class=\"d-inline-block\" rounded=\"circle\">\n        <BImg\n          thumbnail\n          rounded=\"circle\"\n          fluid\n          src=\"https://picsum.photos/200/200/?image=54\"\n          alt=\"Image 1\"\n        />\n      </BOverlay>\n    </BCol>\n\n    <BCol md=\"6\">\n      <p>Without rounding</p>\n      <BOverlay :show=\"showRoundedEx\" class=\"d-inline-block\">\n        <BImg\n          thumbnail\n          rounded=\"circle\"\n          fluid\n          src=\"https://picsum.photos/200/200/?image=54\"\n          alt=\"Image 1\"\n        />\n      </BOverlay>\n    </BCol>\n  </BRow>\n</template>\n\n<script setup lang=\"ts\">\nconst showRoundedEx = ref(false)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Component List Definition (Typescript)\nDESCRIPTION: This snippet defines an array of objects, `componentList`, where each object represents a BootstrapVueNext component with its name and description. This list is used to dynamically generate the table of contents on the page.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst componentList: {name: string; description: string}[] = [\n  {\n    name: 'Accordion',\n    description:\n      'Easily toggle content visibility on your pages. Includes support for making accordions',\n  },\n  {\n    name: 'Alert',\n    description:\n      'Provide contextual feedback messages for typical user actions with the handful of available and flexible alert messages',\n  },\n  {\n    name: 'Avatar',\n    description:\n      'Custom component typically used to display a user profile as a picture, an icon, or short text',\n  },\n  {\n    name: 'Badge',\n    description: 'Small and adaptive tag for adding context to just about any content',\n  },\n  {\n    name: 'Breadcrumb',\n    description: `Indicate the current page's location within a navigational hierarchy.`, \n  },\n  {\n    name: 'Button',\n    description: 'Custom button component for actions in forms, dialogs, and more',\n  },\n  {\n    name: 'Button Group',\n    description: 'Group a series of buttons on a single line or stack them in a vertical column',\n  },\n  {\n    name: 'Button Toolbar',\n    description: 'Group a series of button-groups and/or input-groups together on a single line',\n  },\n  {\n    name: 'Card',\n    description:\n      'A flexible and extensible content container. It includes options for headers and footers, a wide variety of content',\n  },\n  {\n    name: 'Carousel',\n    description:\n      'A slideshow component for cycling through elements—images or slides of text—like a carousel',\n  },\n  {\n    name: 'Collapse',\n    description:\n      'Easily toggle visibility of almost any content on your pages in a vertically collapsing container',\n  },\n  {\n    name: 'Dropdown',\n    description:\n      'Toggleable, contextual overlays for displaying lists of links and actions in a dropdown menu format',\n  },\n  {\n    name: 'Form',\n    description:\n      'Form component and helper components that optionally support inline form styles and validation states',\n  },\n  {\n    name: 'Form Checkbox',\n    description:\n      'Custom checkbox input and checkbox group to replace the browser default checkbox input, built on top of semantic and accessible markup. Optionally supports switch styling',\n  },\n  {\n    name: 'Form Group',\n    description: 'The easiest way to add some structure to forms',\n  },\n  {\n    name: 'Form Input',\n    description:\n      'Create various type inputs such as text, password, number, URL, email, search, range, date, and more',\n  },\n  {\n    name: 'Form Radio',\n    description: `Bootstrap's custom radio input to replace the browser default radio input.`, \n  },\n  {\n    name: 'Form Select',\n    description: 'Bootstrap custom select using custom styles',\n  },\n  {\n    name: 'Form Tags',\n    description:\n      'Lightweight custom tagged input form control, with options for customized interface rendering, duplicate tag detection, and optional tag validation',\n  },\n  {\n    name: 'Form Textarea',\n    description:\n      'Create multi-line text inputs with support for auto height sizing, minimum and maximum number of rows, and contextual states',\n  },\n  {\n    name: 'Grid System',\n    description: 'Lightweight utility components for making a flexible, responsive user interface',\n  },\n  {\n    name: 'Image',\n    description: 'Image component with responsive behavior',\n  },\n  {\n    name: 'Input Group',\n    description:\n      'Easily extend form controls by adding text, buttons, or button groups on either side of textual inputs. ',\n  },\n  {\n    name: 'Link',\n    description: 'A simple wrapper for standard navigation components',\n  },\n  {\n    name: 'List Group',\n    description:\n      'A flexible and powerful component for displaying a series of content. List Group items can be modified to support just about any content within',\n  },\n  {\n    name: 'Modal',\n    description:\n      'Modals are flexible dialog, interruptive, prompts that can support a variety of use cases',\n  },\n  {\n    name: 'Nav',\n    description: 'The Nav component is a simple wrapper for building navigation components',\n  },\n  {\n    name: 'Navbar',\n    description:\n      'The Navbar is typically the central location for branding, navigation, and other elements on the header',\n  },\n  {\n    name: 'Offcanvas',\n    description:\n      'Offcanvas components are hidden sidebars for your app, usually opened by some event',\n  },\n  {\n    name: 'Overlay',\n    description: 'Visually obscure a particular element or component and its content',\n  },\n  {\n    name: 'Pagination',\n    description:\n      'Quick first, previous, next, last, and page buttons for pagination control of another component',\n  },\n  {\n    name: 'Placeholder',\n    description:\n      'Placeholder components can create a unique appearance to indicate something may still be loading',\n  },\n  {\n    name: 'Popover',\n    description: 'Popover provides a tooltip behavior over another component',\n  },\n  {\n    name: 'Progress',\n    description:\n      'A custom progress component for displaying simple or complex progress bars, featuring support for horizontally stacked bars, animated backgrounds, and text labels',\n  },\n  {\n    name: 'Spinner',\n    description: `The spinner component can be used to show the loading state in your projects. They're rendered only with basic HTML and CSS as a lightweight Vue functional component.`, \n  },\n  {\n    name: 'Table',\n    description:\n      'For displaying tabular data. Table supports pagination, filtering, sorting, custom rendering, events, and asynchronous data. For a simple display of tabular data without all the fancy features, use TableSimple',\n  },\n  {\n    name: 'Tabs',\n    description: 'Create a widget of tabbable panes of local content',\n  },\n  {\n    name: 'Toast',\n    description:\n      'Push notifications to your visitors with a toast, a lightweight and easily customizable alert message',\n  },\n  {\n    name: 'Form Spinbutton',\n    description: ''\n  }\n]\n\n```\n\n----------------------------------------\n\nTITLE: Static Toast Placement Vue HTML\nDESCRIPTION: Shows how to place toasts directly within the component's template for static placement. It includes a button to toggle the toast's visibility using a ref.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/toast.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<BToast v-model=\"active\" variant=\"info\">\n  <template #title>\n    Title\n  </template>\n    Body\n</BToast>\n<BButton @click=\"active = !active\">Toggle</BButton>\n```\n\n----------------------------------------\n\nTITLE: Computed Composables List in TypeScript\nDESCRIPTION: Defines a computed property `computedComposablesList` that transforms the `composablesList` array. It maps each element to include a `route` property generated using the `routeLocation` function and then sorts the array alphabetically by the `name` property.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/directives.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst computedComposablesList = computed(() =>\n  composablesList\n    .map((el) => ({\n      name: el.name,\n      description: el.description,\n      route: routeLocation(el.name),\n    }))\n    .sort((a, b) => a.name.localeCompare(b.name))\n)\n```\n\n----------------------------------------\n\nTITLE: Avatar Group Overlap Template (Vue)\nDESCRIPTION: Illustrates how to control the overlap amount between avatars within a `BAvatarGroup` using the `overlap` prop. The overlap value ranges from `0` (no overlap) to `1` (100% overlap). Setting the `size` property is a prerequisite for the `overlap` prop to have an effect.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/avatar.md#_snippet_18\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <b-avatar-group size=\"4em\" overlap=\"0\">\n      <b-avatar variant=\"primary\" text=\"A1\"></b-avatar>\n      <b-avatar variant=\"secondary\" text=\"A2\"></b-avatar>\n      <b-avatar variant=\"success\" text=\"A3\"></b-avatar>\n    </b-avatar-group>\n    <b-avatar-group size=\"4em\" overlap=\"0.5\">\n      <b-avatar variant=\"primary\" text=\"B1\"></b-avatar>\n      <b-avatar variant=\"secondary\" text=\"B2\"></b-avatar>\n      <b-avatar variant=\"success\" text=\"B3\"></b-avatar>\n    </b-avatar-group>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Add options autoHide, noCloseButton - BToast - No Language\nDESCRIPTION: This commit adds new options to the BToast component in Bootstrap Vue Next, specifically `autoHide` and `noCloseButton`. These options enable developers to control whether the toast automatically disappears after a certain time and whether a close button is displayed.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Carousel Autoplay Reverse Template Vue-HTML\nDESCRIPTION: This example demonstrates reversing the autoplay direction of the carousel using the `ride-reverse` prop. This changes the direction in which slides are automatically cycled.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/carousel.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Autoplaying carousel, reversed -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining CheckboxOptionRaw Type in TypeScript\nDESCRIPTION: This code snippet defines the `CheckboxOptionRaw` type alias using TypeScript. It represents the raw input format for checkbox options, which can be a string, a number, or a partial `CheckboxOption` object extended with additional properties.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype CheckboxOptionRaw = string | number | (Partial<CheckboxOption> & Record<string, unknown>)\n```\n\n----------------------------------------\n\nTITLE: Vue Component Script\nDESCRIPTION: Defines the Vue component script, importing the component data. The component sets up the data for the reference section. The data comes from a separate file `../../data/components/navbar.data`. Requires Vue and the imported data file.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/navbar.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {data} from '../../data/components/navbar.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Input Group with Dropdown Vue Template\nDESCRIPTION: This example shows how to integrate a dropdown menu as an addon within an input group. Useful for providing additional options related to the input.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/input-group.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BInputGroup>\n    <BFormInput />\n    <template #append>\n      <BDropdown text=\"Dropdown\">\n        <BDropdownItem>Action</BDropdownItem>\n        <BDropdownItem>Another action</BDropdownItem>\n      </BDropdown>\n    </template>\n  </BInputGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Basic Placeholder Usage Vue HTML\nDESCRIPTION: Demonstrates the basic usage of the BPlaceholder component with different width and column configurations using Vue HTML. It includes examples with specified columns and width for placeholder elements.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/placeholder.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<BPlaceholder cols=\"7\" />\n<BPlaceholder width=\"65\" />\n<BPlaceholder cols=\"6\" />\n```\n\n----------------------------------------\n\nTITLE: Auto-Dismissing Toast with Progress Bar Vue\nDESCRIPTION: Demonstrates how to create an auto-dismissing toast with a progress bar using the show method from useToastController. It sets properties such as title, variant, position, duration (value), progressProps, and body.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/toast.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BButton\n    @click=\"\n      show?.({\n        props: {\n          title: 'Counting down!',\n          variant: 'info',\n          pos: 'middle-center',\n          value: 10000,\n          progressProps: {\n            variant: 'danger',\n          },\n          body: 'Watch me!',\n        },\n      })\n    \"\n  >\n    Show\n  </BButton>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonVariant Type in TypeScript\nDESCRIPTION: This code snippet defines the `ButtonVariant` type alias using TypeScript. It represents the available variants for button styles in BootstrapVueNext, including color variants and outline styles. It extends the `ColorVariant` type and adds 'link' and 'outline-*' options.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype ButtonVariant =\n  | ColorVariant\n  | 'link'\n  | 'outline-primary'\n  | 'outline-secondary'\n  | 'outline-success'\n  | 'outline-danger'\n  | 'outline-warning'\n  | 'outline-info'\n  | 'outline-light'\n  | 'outline-dark'\n```\n\n----------------------------------------\n\nTITLE: Placeholder Wrapper Component Vue\nDESCRIPTION: Demonstrates the usage of the BPlaceholderWrapper component to conditionally render a loading component or the finished content.  It uses the `loading` prop to switch between a `BPlaceholderCard` and a `BCard`. It also shows how to use `watchEffect` and `setTimeout` to simulate loading time.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/placeholder.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BPlaceholderWrapper :loading=\"loading\">\n    <template #loading>\n      <BPlaceholderCard style=\"max-width: 20rem;\" no-footer />\n    </template>\n    <BCard\n      title=\"Card Title\"\n      img-src=\"https://picsum.photos/600/300/?image=25\"\n      img-alt=\"Image\"\n      img-top\n      tag=\"article\"\n      style=\"max-width: 20rem;\"\n      class=\"mb-2\"\n    >\n      <BCardText>\n        Some quick example text to build on the card title and make up the bulk of the card's\n        content.\n      </BCardText>\n      <BButton href=\"#placeholder-wrapper\" variant=\"primary\">Go somewhere</BButton>\n    </BCard>\n  </BPlaceholderWrapper>\n  <BButton @click=\"startLoading\">Restart</BButton>\n</template>\n\n<script setup lang=\"ts\">\nconst loading = ref(false)\n\nwatchEffect(() => {\n  if (loading.value === true) {\n    setTimeout(() => {\n      loading.value = false\n    }, 5000)\n  }\n})\n\nconst startLoading = () => {\n  if (loading.value === true) return\n  loading.value = true\n}\n\nonMounted(startLoading)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Fix `filtered` event emission with pagination - BTable - No Language\nDESCRIPTION: This commit fixes a bug in the BTable component where the `filtered` event was being emitted incorrectly when using pagination. The fix ensures that the `filtered` event is only emitted when the table data is actually filtered, preventing false positives and improving event handling.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Colored Links\nDESCRIPTION: Shows how to colorize the links using bootstrap's variant prop.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/link.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<b-link variant=\"primary\">Primary Link</b-link>\n```\n\n----------------------------------------\n\nTITLE: Defining MaybePromise Type in TypeScript\nDESCRIPTION: This code snippet defines the `MaybePromise` type alias using TypeScript. It represents a value that can be either a plain value of type `T` or a Promise that resolves to a value of type `T`. It is useful for handling asynchronous operations that may or may not be asynchronous.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ntype MaybePromise<T> = Promise<T> | T\n```\n\n----------------------------------------\n\nTITLE: Navbar Inline Group Demo in Vue\nDESCRIPTION: Demonstrates the use of an input group within a `BNavForm` inside the navbar. Input Groups work seamlessly with the form components. Requires BootstrapVueNext for component support.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/navbar.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNavbar variant=\"primary\">\n    <BNavbarBrand href=\"#\">BootstrapVueNext</BNavbarBrand>\n    <BNavForm>\n      <BInputGroup>\n        <BFormInput placeholder=\"Search\" />\n        <BInputGroupAppend>\n          <BButton variant=\"outline-light\" size=\"sm\">Search</BButton>\n        </BInputGroupAppend>\n      </BInputGroup>\n    </BNavForm>\n  </BNavbar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Button Link Variant Demo\nDESCRIPTION: Illustrates the `link` variant, which renders the button with the appearance of a link while maintaining button padding and size.  Optionally remove hover underline using `underline-opacity=\"0\"`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<<< DEMO ./demo/ButtonLinkVariant.vue#template{vue-html}\n```\n\n----------------------------------------\n\nTITLE: Using Extended Types in Vue Template\nDESCRIPTION: This Vue template demonstrates how to utilize the extended types defined in the TypeScript declaration file. It shows the usage of the custom 'purple' color variant and 'xl' size within `BButton` components, enabling the creation of extra-large purple buttons and outline purple buttons.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_38\n\nLANGUAGE: vue\nCODE:\n```\n<BButton variant=\"purple\" size=\"xl\">Extra large purple button</BButton>\n<BButton variant=\"outline-purple\">Outline purple button</BButton>\n```\n\n----------------------------------------\n\nTITLE: Dropdown Overview Template Vue\nDESCRIPTION: Demonstrates the basic usage of the `BDropdown` component to create a dropdown menu with a list of links. The `text` prop is used to set the button text.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"Dropdown Button\">\n      <BDropdownItem href=\"#\">First Action</BDropdownItem>\n      <BDropdownItem href=\"#\">Second Action</BDropdownItem>\n      <BDropdownDivider />\n      <BDropdownItem href=\"#\">Other Action</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: BFormGroup Nested - Vue Template\nDESCRIPTION: Illustrates how to nest `BFormGroup` components for advanced layouts and semantic grouping of related form controls.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-group.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BFormGroup label=\"Parent Form Group\">\n    <BFormGroup label=\"Nested Form Group 1\">\n      <BFormInput placeholder=\"Input 1\" />\n    </BFormGroup>\n\n    <BFormGroup label=\"Nested Form Group 2\">\n      <BFormInput placeholder=\"Input 2\" />\n    </BFormGroup>\n  </BFormGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue component script\nDESCRIPTION: Vue component script imports necessary components and defines the setup function to return the data object.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/spinner.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {data} from '../../data/components/spinner.data'\nimport ComponentReference from '../../components/ComponentReference.vue'\nimport HighlightCard from '../../components/HighlightCard.vue'\nimport {BCard, BCardBody, BButton, BSpinner} from 'bootstrap-vue-next'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Vue Form Overview Demo\nDESCRIPTION: This demo showcases the basic structure and styling of a BootstrapVueNext form. It provides a starting point for understanding how to create forms with BootstrapVueNext.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<< DEMO ./demo/FormOverview.vue\n```\n\n----------------------------------------\n\nTITLE: Form Spinbutton Component Data - Typescript\nDESCRIPTION: This snippet defines the setup function in a Vue component that returns the `data` object, which is presumably used by the `ComponentReference` component.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-spinbutton.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {data} from '../../data/components/formSpinbutton.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Script - Setup\nDESCRIPTION: This script uses the setup function to return the data object required for the component. It imports 'data' from a separate file and makes it available to the template.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button-group.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {data} from '../../data/components/buttonGroup.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Router Link 'replace' Prop Example in Vue\nDESCRIPTION: Demonstrates the usage of the 'replace' prop in the BLink component, which calls router.replace() instead of router.push() when the link is clicked, preventing a history record from being created.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference/router-links.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<BLink :to=\"{path: '/abc'}\" replace />\n```\n\n----------------------------------------\n\nTITLE: BOverlay Non-Wrapping Example in Vue\nDESCRIPTION: This snippet demonstrates how to use the `BOverlay` component with the `no-wrap` prop to obscure a parent container. It includes setting the parent container to `position-relative` and toggling the overlay visibility using a button.  The visibility state is managed using `ref` from Vue's reactivity system.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/overlay.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"position-relative p-4 bg-info\">\n    <p class=\"text-light fw-bold\">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    <BCard title=\"Card with parent overlay\">\n      <BCardText>Laborum consequat non elit enim exercitation cillum.</BCardText>\n      <BCardText>Click the button to toggle the overlay:</BCardText>\n      <BButton :disabled=\"showNoWrapEx\" variant=\"primary\" @click=\"showNoWrapEx = true\">\n        Show overlay\n      </BButton>\n    </BCard>\n    <p class=\"text-light fw-bold mb-0\">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    <BOverlay :show=\"showNoWrapEx\" no-wrap> </BOverlay>\n  </div>\n  <BButton class=\"mt-3\" @click=\"showNoWrapEx = !showNoWrapEx\">Toggle overlay</BButton>\n</template>\n\n<script setup lang=\"ts\">\nconst showNoWrapEx = ref(false)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with TypeScript\nDESCRIPTION: This code snippet sets up a Vue component named 'DirectiveHeader' using the Composition API and TypeScript. It imports the 'DirectiveHeader.vue' component and registers it for use within the current scope. The 'lang=\"ts\"' attribute indicates that TypeScript is being used for type checking and other language features.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/directives/BModal.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<script setup lang=\"ts\">\nimport DirectiveHeader from './DirectiveHeader.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue Template Fragment for FormTags Events\nDESCRIPTION: This template fragment demonstrates how to bind custom event names that mimic `input` and `change` events to the `inputHandlers` for custom input components when using BFormTags.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-tags.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <label for=\"custom-tags\">Custom input:</label>\n    <input\n      id=\"custom-tags\"\n      type=\"text\"\n      :value=\"modelValue\"\n      @keydown.enter.prevent=\"inputHandlers.keydown($event)\"\n      @input=\"inputHandlers.input($event)\"\n      @change=\"inputHandlers.change($event)\"\n    >\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Data Import (Typescript)\nDESCRIPTION: This snippet demonstrates the setup of a Vue component using Typescript. It imports data from an external file and makes it available within the component's template.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/avatar.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport {data} from '../../data/components/avatar.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup Block\nDESCRIPTION: This snippet shows a Vue script setup block using TypeScript. It sets up the component for use within a Vue application.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/composables/usePopoverController.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport ComposableHeader from './ComposableHeader.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Card Nav Component Demo Vue Template\nDESCRIPTION: This snippet demonstrates integrating `BNav` into a card header using the `BCardHeader` sub-component.  It provides an alternative approach to using the `header` slot for adding navigation to the card.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/card.md#_snippet_14\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BCard>\n    <BCardHeader>\n      <BNav tabs>\n        <BNavItem active>Active</BNavItem>\n        <BNavItem>Link</BNavItem>\n        <BNavItem disabled>Disabled</BNavItem>\n      </BNav>\n    </BCardHeader>\n    <BCardText>\n      Some quick example text to build on the card title and make up the bulk of the card's content.\n    </BCardText>\n  </BCard>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Create eagerComputed component - No Language\nDESCRIPTION: This commit introduces a new `eagerComputed` component in Bootstrap Vue Next. This component likely provides a way to compute properties eagerly, potentially improving performance in certain scenarios where computed properties are frequently accessed.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Striped Progress Bars Vue-HTML\nDESCRIPTION: This snippet demonstrates how to apply a striped style to progress bars using the `striped` prop. It also shows how to combine striped styles with different background variants.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/progress.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<BProgress striped :value=\"10\" />\n<BProgress striped :value=\"25\" variant=\"success\" />\n<BProgress striped :value=\"50\" variant=\"info\" />\n<BProgress striped :value=\"75\" variant=\"warning\" />\n<BProgress striped :value=\"100\" variant=\"danger\" />\n```\n\n----------------------------------------\n\nTITLE: Dropdown Header Migration - Rendered HTML\nDESCRIPTION: This snippet shows the HTML output generated from the Vue template, illustrating how the inherited attributes are applied to the inner header element.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/migration-guide.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"app\">\n  <div>\n    <h6 id=\"my-header\" class=\"dropdown-header text-danger\">Header Text</h6>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Avatar Group Rounding Template (Vue)\nDESCRIPTION: Demonstrates how the `square` and `rounded` props on `BAvatarGroup` take precedence over the respective props on individual child avatars, controlling the rounding of all avatars in the group.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/avatar.md#_snippet_17\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <b-avatar-group rounded>\n      <b-avatar square text=\"A1\"></b-avatar>\n      <b-avatar square text=\"A2\"></b-avatar>\n      <b-avatar square text=\"A3\"></b-avatar>\n    </b-avatar-group>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Tooltip Title Type Definition in Typescript\nDESCRIPTION: Defines the type of the title prop for the tooltip, showing it can be a string, an HTML Element, a JQuery object, or a function that returns a string, Element, or JQuery object. The function's `this` context is set to the HTMLElement the tooltip is attached to. Provides flexibility in dynamically generating tooltip content.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/directives/BTooltip.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Default title value if title attribute is not present.\n *\n * If a function is given, it will be called with its this reference set\n * to the element that the popover is attached to.\n *\n * @default ''\n */\ntitle: string | Element | JQuery | ((this: HTMLElement) => string | Element | JQuery)\n```\n\n----------------------------------------\n\nTITLE: Simple BLink Example\nDESCRIPTION: Demonstrates a basic BLink component implementation using Vue's template syntax. The BLink creates a simple link that defaults to the '#' location.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/link.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<b-link href=\"#\">Link</b-link>\n\n```\n\n----------------------------------------\n\nTITLE: Add highlight method - BFormInput - No Language\nDESCRIPTION: This commit adds a `highlight` method to the BFormInput component in Bootstrap Vue Next. This method triggers a simple highlight animation on the input field for a few seconds, providing visual feedback to the user.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Vue Component Script Setup\nDESCRIPTION: This TypeScript code snippet sets up a Vue component using the `<script setup>` syntax.  Currently, it's an empty script block, indicating that no reactive variables, functions, or component logic are being defined directly in this portion of the component. All logic will reside elsewhere.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference/spacing-classes.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n<script setup lang=\"ts\">\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Install TypeScript dependencies using PNPM\nDESCRIPTION: This command installs optional peer dependencies required for full TypeScript type support. These dependencies are not installed by default and include `@floating-ui/vue`, `@vueuse/core`, and `vue-router`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @floating-ui/vue @vueuse/core vue-router\n```\n\n----------------------------------------\n\nTITLE: Install unplugin-vue-components using YARN\nDESCRIPTION: This command installs the unplugin-vue-components package as a development dependency using the YARN package manager.  This plugin enables automatic component registration and tree-shaking.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn add unplugin-vue-components -D\n```\n\n----------------------------------------\n\nTITLE: Nav Plain Card (Vue)\nDESCRIPTION: Illustrates how to integrate a plain-style navigation within a `<BCard>` component using the `card-header` prop on `<BNav>`. Shows the card integration without `tabs` or `pills`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/nav.md#_snippet_14\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BCard>\n    <BNav card-header>\n      <BNavItem href=\"#\">Link 1</BNavItem>\n      <BNavItem active href=\"#\">Link 2</BNavItem>\n      <BNavItem href=\"#\">Another Link</BNavItem>\n    </BNav>\n    <BCardBody>\n      <BCardTitle>Card Title</BCardTitle>\n      <BCardText>Some quick example text to build on the card title and make up the bulk of the card's content.</BCardText>\n    </BCardBody>\n  </BCard>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup\nDESCRIPTION: This Vue component sets up the environment using the `<script setup>` syntax in TypeScript. It imports a `DirectiveHeader` component from a relative path, which is likely used for displaying documentation headers.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/directives/BToggle.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport DirectiveHeader from './DirectiveHeader.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing FormGroup Component Data in TypeScript\nDESCRIPTION: This TypeScript snippet imports data for the FormGroup component from a separate file and makes it available within the component's setup function.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-group.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {data} from '../../data/components/formGroup.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Vite (Basic Installation)\nDESCRIPTION: Configures Vite to use unplugin-icons with a basic installation. It imports the necessary modules, adds the plugin to the Vite plugins array, and sets options to compile Vue 3 components. This configuration requires manual icon imports in Vue components.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/icons.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.js/ts\nimport {defineConfig} from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport Icons from 'unplugin-icons/vite'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    vue(),\n    Icons({\n      compiler: 'vue3',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Script Setup\nDESCRIPTION: A basic TypeScript script setup block within a Vue component. This section is used for declaring reactive data and methods for the component, but it is currently empty.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference/form-validation.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<script setup lang=\"ts\">\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Placeholder Table Vue HTML\nDESCRIPTION: Shows how to render a full placeholder table using the BPlaceholderTable component in Vue HTML.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/placeholder.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<BPlaceholderTable />\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Data Import (TypeScript)\nDESCRIPTION: This snippet demonstrates a Vue component setup using TypeScript, importing data from an external file and making it available in the component's template. It imports the `data` object from `../../data/components/table.data` and exposes it within the setup function for use in the template.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/table.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {data} from '../../data/components/table.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BBreadcrumb Usage with Global Context (Vue)\nDESCRIPTION: This code snippet shows how to use the `BBreadcrumb` component with the global `useBreadcrumb` context. It includes input and buttons to add items and clear the breadcrumb trail. The `addItem` function pushes the input value to the breadcrumb items array, and `breadcrumb.reset` clears the breadcrumb.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/composables/useBreadcrumb.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BBreadcrumb />\n\n  <BFormInput v-model=\"inputValue\" />\n\n  <BButton @click=\"addItem\">Add</BButton>\n  <BButton variant=\"danger\" @click=\"breadcrumb.reset\">Clear</BButton>\n</template>\n\n<script setup lang=\"ts\">\nconst breadcrumb = useBreadcrumb()\n\nconst inputValue = ref('')\n\nconst addItem = () => {\n  breadcrumb.items?.value.push(inputValue.value)\n  inputValue.value = ''\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accordion Flush Template (Vue)\nDESCRIPTION: This snippet demonstrates the 'flush' accordion style, which removes background colors and borders for a cleaner look. The `flush` property on the BAccordion component enables this style. This is from demo/AccordionFlush.vue.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/accordion.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BAccordion flush>\n    <BAccordionItem header=\"Item 1\">\n      This is the first item's accordion body.\n    </BAccordionItem>\n    <BAccordionItem header=\"Item 2\">\n      This is the second item's accordion body.\n    </BAccordionItem>\n    <BAccordionItem header=\"Item 3\">\n      This is the third item's accordion body.\n    </BAccordionItem>\n  </BAccordion>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Spinners Grow in Buttons Demo\nDESCRIPTION: Demonstrates growing spinners within buttons to indicate an action is currently processing or taking place. This example is similar to the previous one, but uses the `grow` spinner type.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/spinner.md#_snippet_11\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"d-flex flex-column gap-2\">\n  <BButton variant=\"primary\" disabled>\n    <BSpinner small type=\"grow\" label=\"Loading\"></BSpinner>\n    Loading...\n  </BButton>\n  <BButton variant=\"primary\" disabled>\n    <BSpinner small  label=\"Loading\"></BSpinner>\n    Loading...\n  </BButton>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Nuxt.js Router Configuration Example\nDESCRIPTION: An example of configuring `prefetchLinks` in the Nuxt.js router configuration. This example disables prefetching for all router links.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference/router-links.md#_snippet_5\n\nLANGUAGE: Vue\nCODE:\n```\nrouter: { prefetchLinks: false }\n```\n\n----------------------------------------\n\nTITLE: Alias components using BootstrapVueNextResolver\nDESCRIPTION: This code snippet demonstrates how to alias components when using the BootstrapVueNextResolver within unplugin-vue-components.  This allows for custom naming of components.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Components} from 'unplugin-vue-components'\nimport {BootstrapVueNextResolver} from 'bootstrap-vue-next'\n\nComponents({\n  resolvers: [\n    BootstrapVueNextResolver({\n      aliases: {\n        BInput: 'BFormInput',\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Button Component Script\nDESCRIPTION: Defines the Vue component script for the BButton documentation page. It imports the component data and exports the component with a setup function that returns the data.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {data} from '../../data/components/button.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install BootstrapVueNext for Nuxt 3 using YARN\nDESCRIPTION: This command installs the Bootstrap, BootstrapVueNext and the Nuxt module for BootstrapVueNext as development dependencies using YARN.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nyarn add bootstrap bootstrap-vue-next @bootstrap-vue-next/nuxt -D\n```\n\n----------------------------------------\n\nTITLE: Install Unplugin Icons (Basic - BUN)\nDESCRIPTION: Installs unplugin-icons, the Vue compiler, and the Bootstrap Icons JSON data using BUN as development dependencies. This command is used for the basic installation method where only bootstrap-icons are used and auto-importing is disabled.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/icons.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbun add unplugin-icons @vue/compiler-sfc @iconify-json/bi -D\n```\n\n----------------------------------------\n\nTITLE: Navbar Toggle Demo in Vue\nDESCRIPTION: Shows how to customize the content of the `BNavbarToggle` component using the scoped default slot. The expanded scope property indicates the collapse state. BootstrapVueNext and Vue are the core dependencies.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/navbar.md#_snippet_10\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNavbar toggleable=\"md\" variant=\"primary\">\n    <BNavbarBrand href=\"#\">BootstrapVueNext</BNavbarBrand>\n\n    <BNavbarToggle target=\"nav-collapse\">\n      <template #default=\"{ expanded }\">\n        <span v-if=\"expanded\">Close</span>\n        <span v-else>Open</span>\n      </template>\n    </BNavbarToggle>\n\n    <BCollapse id=\"nav-collapse\" is-nav>\n      <BNavbarNav>\n        <BNavItem href=\"#\">Link</BNavItem>\n        <BNavItem href=\"#\" disabled>Disabled</BNavItem>\n      </BNavbarNav>\n    </BCollapse>\n  </BNavbar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Incorrect BTooltip Usage with title Attribute Vue HTML\nDESCRIPTION: Illustrates an incorrect way to use the `v-b-tooltip` directive by attempting to pass the tooltip text via the BCard's `title` attribute. This will not work as expected because the directive needs the value directly.  It results in a warning in the browser's developer console.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/directives/BTooltip.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<BCard v-b-tooltip.hover.top title=\"my title\" />\n```\n\n----------------------------------------\n\nTITLE: Defining TableSortBy Types in TypeScript\nDESCRIPTION: This code snippet defines types related to sorting a table in BootstrapVueNext using TypeScript. `BTableSortByOrder` defines the sort order ('desc', 'asc', or undefined).  `BTableSortByComparerFunction` defines a function type for custom comparison. `BTableSortBy` defines the structure for sort parameters.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ntype BTableSortByOrder = 'desc' | 'asc' | undefined\ntype BTableSortByComparerFunction<T = any> = (a: T, b: T, key: string) => number\ntype BTableSortBy<T = any> = {\n  order: BTableSortByOrder\n  key: string\n  comparer?: BTableSortByComparerFunction<T>\n}\n```\n\n----------------------------------------\n\nTITLE: Final fixes - SpinButton - No Language\nDESCRIPTION: This commit implements final fixes for the SpinButton component in Bootstrap Vue Next. This likely includes resolving any remaining issues, polishing the implementation, and ensuring the component functions as expected before release.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Nav Pill Style (Vue)\nDESCRIPTION: Demonstrates the creation of pill-style navigation using the `<BNav>` component with the `pills` prop. This example showcases the visual appearance and active state handling of pills.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/nav.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNav pills>\n    <BNavItem href=\"#\">Link 1</BNavItem>\n    <BNavItem active href=\"#\">Link 2</BNavItem>\n    <BNavItem href=\"#\">Another Link</BNavItem>\n    <BNavItem disabled href=\"#\">Disabled Link</BNavItem>\n  </BNav>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Install Unplugin Icons (NPM)\nDESCRIPTION: Installs unplugin-icons, unplugin-vue-components, and the Vue compiler using NPM as development dependencies. This command is part of the preferred installation method for using icons in a Vue 3 project.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/icons.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i unplugin-icons unplugin-vue-components @vue/compiler-sfc -D\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Data Import\nDESCRIPTION: This snippet illustrates how to set up a Vue component that imports data from an external file. It demonstrates how to import data using TypeScript and then expose it within the component's setup function, making it accessible in the component's template.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-input.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {data} from '../../data/components/formInput.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Background Colors Badge Vue Template\nDESCRIPTION: This snippet demonstrates the use of different background colors for badges, achieved through the `variant` property to highlight the contextual styling options available.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/badge.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <BBadge variant=\"primary\">Primary</BBadge>\n    <BBadge variant=\"secondary\">Secondary</BBadge>\n    <BBadge variant=\"success\">Success</BBadge>\n    <BBadge variant=\"danger\">Danger</BBadge>\n    <BBadge variant=\"warning\">Warning</BBadge>\n    <BBadge variant=\"info\">Info</BBadge>\n    <BBadge variant=\"light\">Light</BBadge>\n    <BBadge variant=\"dark\">Dark</BBadge>\n  </div>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Using Icons in Vue Template\nDESCRIPTION: Demonstrates how to use icons in a Vue template using the unplugin-icons library. It shows how to reference icons from different collections (bi, mdi, fa) by their names. No manual imports are required with the preferred installation method.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/icons.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<IBi0Circle />\n<IBiActivity color=\"red\" />\n<!-- You can use any icon set, no need to worry about importing -->\n<IMdiAccountBox />\n<!-- fa -->\n<IFaAngellist />\n```\n\n----------------------------------------\n\nTITLE: Install Unplugin Icons (BUN)\nDESCRIPTION: Installs unplugin-icons, unplugin-vue-components, and the Vue compiler using BUN as development dependencies. This command is part of the preferred installation method for using icons in a Vue 3 project.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/icons.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun add unplugin-icons unplugin-vue-components @vue/compiler-sfc -D\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup (TypeScript)\nDESCRIPTION: This snippet demonstrates a basic Vue component setup using the Composition API and TypeScript. It sets up an empty script block for a Vue component, indicating the use of TypeScript.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference/theming-bootstrap.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<script setup lang=\"ts\">\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Navbar Brand Heading Demo in Vue\nDESCRIPTION: Shows how to render `BNavbarBrand` as a heading element using the `tag` prop.  This avoids creating a link and renders the brand as a plain heading element within the navbar.  No external dependencies besides BootstrapVueNext are needed.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/navbar.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNavbar variant=\"primary\">\n    <BNavbarBrand tag=\"h1\">\n      Navbar Brand Heading\n    </BNavbarBrand>\n  </BNavbar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Import ComposableHeader Component\nDESCRIPTION: This script block imports the `ComposableHeader` component from a relative path. This component is likely used to display a header with information about the current composable.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/composables/usePopoverController.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ComposableHeader from './ComposableHeader.vue'\n```\n\n----------------------------------------\n\nTITLE: Configure unplugin-vue-components in Vite\nDESCRIPTION: This code snippet shows how to configure `unplugin-vue-components` with the `BootstrapVueNextResolver` in a Vite configuration file. This enables automatic component registration for BootstrapVueNext components.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.js/ts\nimport {defineConfig} from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport Components from 'unplugin-vue-components/vite'\nimport {BootstrapVueNextResolver} from 'bootstrap-vue-next'\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    Components({\n      resolvers: [BootstrapVueNextResolver()],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Remove Utils, Use hasValue for Value Checking - SpinButton - No Language\nDESCRIPTION: This commit refactors the SpinButton component in Bootstrap Vue Next to remove a dependency on a Utils module. It replaces the Utils module with a more direct approach for value checking, likely using a 'hasValue' function or method for validating the SpinButton's input values.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Defining RadioValue Type in TypeScript\nDESCRIPTION: This code snippet defines the `RadioValue` type alias using TypeScript. It specifies the possible data types that a radio button value can be, including booleans, strings, arrays, records, numbers, and null.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ntype RadioValue =\n  | boolean\n  | string\n  | readonly unknown[]\n  | Readonly<Record<string, unknown>>\n  | number\n  | null\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup (TypeScript)\nDESCRIPTION: This snippet demonstrates the setup of a Vue.js component using the composition API and TypeScript. It imports a DirectiveHeader component from a relative path, suggesting it's used for documenting directives within the project. The `lang=\"ts\"` attribute indicates that TypeScript is being used for type safety and enhanced code management.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/directives/BPopover.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\nimport DirectiveHeader from './DirectiveHeader.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Carousel with Crossfade Template Vue-HTML\nDESCRIPTION: This example shows how to use the `fade` prop to enable a fade transition between slides. The fade transition provides a smoother visual effect.  This snippet demonstrates applying a fade effect for transitioning slides.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/carousel.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Carousel with crossfade -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Remove toast props - BContainer - No Language\nDESCRIPTION: This commit removes toast-related props from the BContainer component in Bootstrap Vue Next. This is a breaking change, implying the removed props were not functional or caused conflicts. This simplifies the BContainer's API and avoids confusion.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Button Contextual Variants Demo\nDESCRIPTION: Showcases different contextual button variants (e.g., primary, secondary, success) using the `variant` prop.  These variants apply Bootstrap's `.btn-<variant>` classes for styling.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<<< DEMO ./demo/ButtonContextualVariants.vue#template{vue-html}\n```\n\n----------------------------------------\n\nTITLE: Strongly type some props - BOverlay - No Language\nDESCRIPTION: This commit strongly types some of the BOverlay component's props. This improves type safety and developer experience by providing better type checking and autocompletion in TypeScript projects, reducing potential errors related to incorrect prop values.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_34\n\n\n\n----------------------------------------\n\nTITLE: Provide Typescript hints for a stacked prop - BTable - No Language\nDESCRIPTION: This commit provides Typescript hints for a stacked prop. This commit adds improved Typescript type definitions for the `stacked` prop in the BTable component, enhancing developer experience by providing better autocompletion and type checking in Typescript projects.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Defining RadioOption Type in TypeScript\nDESCRIPTION: This code snippet defines the `RadioOption` type alias using TypeScript. It represents the structure of a radio button option, containing `text`, `value`, and an optional `disabled` property. It's used for generating radio button lists or groups.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ntype RadioOption = {\n  text: string\n  value: RadioValue\n  disabled?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect BTooltip Usage with Unquoted Value Vue HTML\nDESCRIPTION: Demonstrates an incorrect usage of the `v-b-tooltip` directive, where the string value for the tooltip text is not properly quoted. This will cause the JavaScript interpreter to treat the value as a variable name instead of a string literal.  This will not display the intended tooltip text.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/directives/BTooltip.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<BCard v-b-tooltip.hover.top=\"my title\" />\n```\n\n----------------------------------------\n\nTITLE: List Group Variants Demo - Vue HTML\nDESCRIPTION: This demo applies contextual variants to list items using the `variant` prop.  It demonstrates how to style list items with different background colors based on their state or meaning.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/list-group.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BListGroup>\n    <BListGroupItem variant=\"primary\">Primary</BListGroupItem>\n    <BListGroupItem variant=\"secondary\">Secondary</BListGroupItem>\n    <BListGroupItem variant=\"success\">Success</BListGroupItem>\n    <BListGroupItem variant=\"danger\">Danger</BListGroupItem>\n    <BListGroupItem variant=\"warning\">Warning</BListGroupItem>\n    <BListGroupItem variant=\"info\">Info</BListGroupItem>\n    <BListGroupItem variant=\"light\">Light</BListGroupItem>\n    <BListGroupItem variant=\"dark\">Dark</BListGroupItem>\n  </BListGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Fix filtering undefined table item values - BTable - No Language\nDESCRIPTION: This commit fixes a bug in the BTable component where filtering undefined table item values was causing issues. The fix handles undefined values correctly during filtering, preventing errors and ensuring accurate search results.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Collapse Component Script\nDESCRIPTION: Defines the component options, including importing the component data and setting up the `setup` function to return the data. The `data` prop is used to populate the component reference.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/collapse.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {data} from '../../data/components/collapse.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fix col class conflict - BCol - No Language\nDESCRIPTION: This commit fixes a bug in the BCol component where it incorrectly retained the 'col' class even when it also had a 'col-{n}' class. This ensures that the component applies the correct column sizing and layout based on the specified 'col-{n}' class.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_28\n\n\n\n----------------------------------------\n\nTITLE: Defining Column Number Types in TypeScript\nDESCRIPTION: This code snippet defines the `ColsNumbers`, `GutterNumbers`, `ColsOrderNumbers`, and `ColsOffsetNumbers` type aliases using TypeScript. These types are used for defining column sizes, gutter widths, column order, and column offsets in the BootstrapVueNext grid system.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ColsBaseNumbers = 1 | 2 | 3 | 4 | 5 | '1' | '2' | '3' | '4' | '5'\n\nexport type ColsNumbers =\n  | ColsBaseNumbers\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | '10'\n  | '11'\n  | '12'\n\nexport type GutterNumbers = ColsBaseNumbers | 0 | '0'\n\nexport type ColsOrderNumbers = ColsBaseNumbers | 'first' | 'last'\n\nexport type ColsOffsetNumbers = ColsNumbers | 0 | '0'\n```\n\n----------------------------------------\n\nTITLE: List Group Card Demo - Vue HTML\nDESCRIPTION: This demo integrates a list group within a card component. It demonstrates using the `flush` prop for a seamless integration with cards that don't have a body.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/list-group.md#_snippet_12\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BListGroup flush>\n    <BListGroupItem>Cras justo odio</BListGroupItem>\n    <BListGroupItem>Dapibus ac turpis egestas</BListGroupItem>\n    <BListGroupItem>Morbi leo risus</BListGroupItem>\n    <BListGroupItem>Porta ac consectetur ac</BListGroupItem>\n    <BListGroupItem>Vestibulum at eros</BListGroupItem>\n  </BListGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Add `label-stacked` prop for stacked rows - BTable - No Language\nDESCRIPTION: This commit adds the `label-stacked` prop to the BTable component in Bootstrap Vue Next. This prop labels the stacked rows with the field's label, improving readability on smaller screens where the table is stacked.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Options as an Object Array in TypeScript\nDESCRIPTION: Shows using an array of objects for configuring the `options` property.  Each object can contain `text`, `value`, and `disabled` properties. It allows for more granular control over each option's properties.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/_options.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst options = [\n  { text: 'First option', value: 'first' },\n  { text: 'Second option', value: 'second' },\n  { text: 'Third option', value: 'third' },\n  { text: 'Fourth option', value: { fourth: true } },\n]\n\nexport default options\n```\n\n----------------------------------------\n\nTITLE: Remove bootstrapjs - BModal - No Language\nDESCRIPTION: This commit removes the dependency on Bootstrap's JavaScript (bootstrap.js) from the BModal component in Bootstrap Vue Next. This reduces the overall bundle size and improves performance by relying solely on Vue.js for modal functionality.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Card No Body Demo Vue Template\nDESCRIPTION: This snippet shows how to disable the automatic `BCardBody` using the `no-body` prop. When `no-body` is enabled, the content of the title and subtitle props will not render automatically inside a default card body section.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/card.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BCard no-body>\n    <BCardBody>\n      This is the card body.\n    </BCardBody>\n  </BCard>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Conventional Commit Example\nDESCRIPTION: This example demonstrates the conventional commit message format, including the type (feat), scope (utils), a description of the change, and optional footers for fix details, breaking changes, and source links.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nfeat: adds v4 UUID to crypto\n\nThis adds support for v4 UUIDs to the library.\n\nfix(utils): unicode no longer throws exception\n  PiperOrigin-RevId: 345559154\n  BREAKING-CHANGE: encode method no longer throws.\n  Source-Link: googleapis/googleapis@5e0dcb2\n\nfeat(utils): update encode to support unicode\n  PiperOrigin-RevId: 345559182\n  Source-Link: googleapis/googleapis@e5eef86\n```\n\n----------------------------------------\n\nTITLE: Vue Form Text Helper Demo\nDESCRIPTION: This demo showcases the usage of the `BFormText` helper component to display help text below an input field in BootstrapVueNext.  The help text is displayed with a muted color and a smaller font size.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<<< DEMO ./demo/FormTextHelper.vue#template{vue-html}\n```\n\n----------------------------------------\n\nTITLE: Defining Position Type in TypeScript\nDESCRIPTION: This code snippet defines the `Position` type alias using TypeScript. It represents the possible values for the `position` CSS property, such as 'static', 'relative', 'absolute', 'fixed', and 'sticky'.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ntype Position =\n  | 'position-static'\n  | 'position-relative'\n  | 'position-absolute'\n  | 'position-fixed'\n  | 'position-sticky'\n```\n\n----------------------------------------\n\nTITLE: Start counter on balert create - No Language\nDESCRIPTION: This commit addresses a bug in Bootstrap Vue Next where a counter is initiated when a balert (likely a BAlert component, renamed) is created. This fix is related to issue #810, which might describe problems with alert message timing or visibility.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: No-Center Overlay Content Vue HTML\nDESCRIPTION: This example demonstrates how to disable the default centering of content within a BOverlay component by setting the `no-center` prop to `true`. The custom overlay content is absolutely positioned at the top right corner using CSS classes.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/overlay.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<BOverlay no-center show rounded=\"sm\">\n  <template #overlay>\n    foo\n  </template>\n  <BCard title=\"Card with no-center overlay\" aria-hidden=\"true\">\n    <BCardText>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n      incididunt ut labore et dolore magna aliqua.\n    </BCardText>\n    <BButton disabled variant=\"primary\">Button</BButton>\n  </BCard>\n</BOverlay>\n```\n\n----------------------------------------\n\nTITLE: Fix BOverlay build issues - BOverlay - No Language\nDESCRIPTION: This commit fixes build issues related to the BOverlay component. These fixes ensure the component can be successfully built and integrated into projects without errors, addressing potential packaging or compilation problems.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_33\n\n\n\n----------------------------------------\n\nTITLE: Fix empty slot checking - BModal - No Language\nDESCRIPTION: This commit adds an explicit check for an empty slot in the BModal component. The check prevents errors or unexpected behavior when the modal contains empty slots, ensuring that the modal renders correctly regardless of the slot content.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_29\n\n\n\n----------------------------------------\n\nTITLE: Defining Size Type in TypeScript\nDESCRIPTION: This code snippet defines the `Size` type alias using TypeScript. It represents the available size options for various components, such as 'sm', 'md', and 'lg'.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ntype Size = 'sm' | 'md' | 'lg'\n```\n\n----------------------------------------\n\nTITLE: Card Overlay Image Demo Vue Template\nDESCRIPTION: This snippet shows how to place an image in the background of a card using the `overlay` prop. The image will act as a background for the card content.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/card.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BCard img-src=\"https://picsum.photos/600/300/?image=25\" img-alt=\"Image\" overlay>\n    <BCardTitle>Card Title</BCardTitle>\n    <BCardText>\n      Some quick example text to build on the card title and make up the bulk of the card's content.\n    </BCardText>\n\n    <BButton href=\"#\" variant=\"primary\">Go somewhere</BButton>\n  </BCard>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Begin development of bootstrap-vue-3-icons - No Language\nDESCRIPTION: This commit initiates the development of a new icon library specifically for Bootstrap Vue 3. This involves setting up the project structure, defining icon components, and potentially integrating with existing icon sets.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Alert Fade\nDESCRIPTION: Demonstrates how to enable the fade animation using the `fade` prop.  Note that BootstrapVueNext uses Vue's transitions rather than Bootstrap's `.fade` class.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/alert.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<< DEMO ./demo/AlertFade.vue\n```\n\n----------------------------------------\n\nTITLE: Equal Width Multiline Columns Vue Template\nDESCRIPTION: Illustrates how to generate equal-width columns that span multiple lines in Bootstrap Vue Next.  This involves inserting a `.w-100` class where the columns should break to a new line, enabling responsive breaks by combining it with responsive display utilities.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BContainer>\n    <BRow>\n      <BCol>Column</BCol>\n      <BCol>Column</BCol>\n      <BCol class=\"w-100\"></BCol>\n      <BCol>Column</BCol>\n      <BCol>Column</BCol>\n    </BRow>\n  </BContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Error toString if value is undefined - BTooltip - No Language\nDESCRIPTION: This commit fixes an issue in Bootstrap Vue Next related to the BTooltip component, specifically addressing an error that occurs when converting an undefined value to a string. This prevents potential crashes or unexpected behavior when displaying tooltips with undefined content.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Input Group with Prepend and Append Props Vue Template\nDESCRIPTION: This snippet demonstrates how to use the `prepend` and `append` props of the `BInputGroup` component to add text or other content before and after the input field.  The values passed to these props are automatically wrapped in `BInputGroupText` components for correct styling. It depends on the Bootstrap Vue Next framework.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/input-group.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BInputGroup prepend=\"$\" append=\".00\">\n    <BFormInput placeholder=\"Amount\" />\n  </BInputGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: BFormCheckBox Sync Modifier Before Migration (Vue)\nDESCRIPTION: Illustrates the use of the `.sync` modifier in BootstrapVue for two-way binding to the `indeterminate` property of `BFormCheckBox`.  This modifier is deprecated in Vue 3 and replaced by the `v-model` directive.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/migration-guide.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BFormCheckbox\n    :indeterminate.sync=\"isIndeterminate\"\n  >\n    Check me!\n  </BFormCheckbox>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      isIndeterminate: false\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup for Table of Contents\nDESCRIPTION: This script sets up the Vue component for the configurations table of contents. It imports necessary modules, defines a route location function, and creates a computed list of configurations for rendering in the template. The computed list is sorted alphabetically by configuration name.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/configurations.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {withBase} from 'vitepress'\nimport {computed} from 'vue'\nimport TableOfContentsCard from '../components/TableOfContentsCard.vue'\n\nconst routeLocation = (name: string): string => withBase(`/docs/configurations/${name}`).trim()\n\nconst configurationsList: {name: string; route: string}[] = [\n  {\n    name: 'Global Options',\n    route: routeLocation('global-options'),\n    description: 'Set default prop values for all Vue components.',\n  }\n]\n\nconst computedConfigurationsList = computed(() =>\n  configurationsList\n    .map((el) => ({\n      name: el.name,\n      route: el.route,\n      description: el.description\n    }))\n    .sort((a, b) => a.name.localeCompare(b.name))\n)\n```\n\n----------------------------------------\n\nTITLE: Nav Small Style (Vue)\nDESCRIPTION: Shows how to create a smaller navigation using the `<BNav>` component with the `small` prop. This example showcases the compact size of the navigation.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/nav.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNav small>\n    <BNavItem href=\"#\">Link 1</BNavItem>\n    <BNavItem active href=\"#\">Link 2</BNavItem>\n    <BNavItem href=\"#\">Another Link</BNavItem>\n    <BNavItem disabled href=\"#\">Disabled Link</BNavItem>\n  </BNav>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Spinner Float Alignment Demo\nDESCRIPTION: Demonstrates the use of float utility classes to align spinners. Float classes can be used to position spinners to the left or right of other content.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/spinner.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<div>\n  <BSpinner class=\"float-start\" />\n  <BSpinner class=\"float-end\" />\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Navbar Scroll Demo in Vue\nDESCRIPTION: Illustrates adding vertical scrolling to the collapsible content of a navbar using the `.navbar-nav-scroll` class.  The scrolling behavior is enabled when the content exceeds 75% of the viewport height.  BootstrapVueNext and Bootstrap CSS are necessary.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/navbar.md#_snippet_12\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNavbar toggleable=\"md\" variant=\"primary\">\n    <BNavbarBrand href=\"#\">BootstrapVueNext</BNavbarBrand>\n\n    <BNavbarToggle target=\"nav-collapse\"></BNavbarToggle>\n\n    <BCollapse id=\"nav-collapse\" is-nav>\n      <BNavbarNav class=\"navbar-nav-scroll\" style=\"max-height: 200px;\">\n        <BNavItem v-for=\"n in 20\" :key=\"n\" href=\"#\">Link {{ n }}</BNavItem>\n      </BNavbarNav>\n    </BCollapse>\n  </BNavbar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: SCSS: Base Grayscale Color Definitions\nDESCRIPTION: Defines the base grayscale color variables used in Bootstrap's SCSS. These variables represent different shades of gray, ranging from white to black, and are used as a foundation for other color definitions and theme options.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference/color-variants.md#_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$white: #fff;\n$gray-100: #f8f9fa;\n$gray-200: #e9ecef;\n$gray-300: #dee2e6;\n$gray-400: #ced4da;\n$gray-500: #adb5bd;\n$gray-600: #6c757d;\n$gray-700: #495057;\n$gray-800: #343a40;\n$gray-900: #212529;\n$black: #000;\n```\n\n----------------------------------------\n\nTITLE: Spinner Size Demo\nDESCRIPTION: Illustrates how to change the size of the spinner by applying inline styles.  Any valid CSS `width` and `height` properties can be used.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/spinner.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"d-flex flex-column gap-2\">\n  <BSpinner style=\"width: 3rem; height: 3rem;\" />\n  <BSpinner style=\"width: 3rem; height: 3rem;\" class=\"ms-auto\" />\n  <BSpinner style=\"width: 3rem; height: 3rem;\" alignment=\"grow\" />\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Directive Name and Modifiers Vue HTML Example\nDESCRIPTION: Illustrates the general format for using directives in Vue.js, specifically highlighting the `v-{name}.{modifier1}.{modifier2}.{etc.}={value}` structure.  This shows how the `b-tooltip` directive can have multiple modifiers applied to change its behavior. Requires understanding of Vue.js directives syntax.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/directives/BTooltip.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\nv-{name}.{modifier1}.{modifier2}.{etc.}={value}.\n```\n\n----------------------------------------\n\nTITLE: Component Route Generation with Vitepress (Typescript)\nDESCRIPTION: This snippet defines a function `routeLocation` that uses `vitepress` to generate the route for a component based on its name. It converts the component name to lowercase, replaces spaces with hyphens, and trims whitespace. It depends on the `withBase` function from the `vitepress` library.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst routeLocation = (name: string): string => withBase(`/docs/components/${name.toLowerCase()}`).trim().replaceAll(/\\s+/g, '-')\n```\n\n----------------------------------------\n\nTITLE: Using useToast with Reactive Inputs in Vue.js\nDESCRIPTION: This snippet relates to the `useToast` composable within BootstrapVueNext. It demonstrates the enhancement to accept reactive inputs, improving the flexibility and responsiveness of toast notifications. This update is referenced by commit ca16a16.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Offcanvas Component Script Setup\nDESCRIPTION: This script sets up the component with a data property to pass to the ComponentReference component.  It imports the 'data' object from a separate file and makes it available to the template.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/offcanvas.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {data} from '../../data/components/offcanvas.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Badge Component Script Setup\nDESCRIPTION: This script imports the component data and exports it within the Vue component's setup function, enabling the data to be used in the template.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/badge.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {data} from '../../data/components/badge.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navbar Brand Image and Text Demo in Vue\nDESCRIPTION: Shows how to combine an image and text within the `BNavbarBrand` component.  Custom styling or utilities may be needed to ensure the image and text are properly sized and aligned.  No specific dependencies other than BootstrapVueNext and image asset are required.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/navbar.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNavbar variant=\"primary\">\n    <BNavbarBrand href=\"#\">\n      <img\n        src=\"https://picsum.photos/30/30\"\n        class=\"d-inline-block align-top\" alt=\"BVueNext Logo\">\n      BootstrapVueNext\n    </BNavbarBrand>\n  </BNavbar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Tooltip ValueObject Interface in Typescript\nDESCRIPTION: Defines the structure of the object that can be passed as the value to the `v-b-tooltip` directive. It specifies optional properties for delay, placement, title, and trigger. The `trigger` property allows specifying one or more events that will trigger the tooltip.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/directives/BTooltip.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ValueObject {\n  delay?: number // default: 0\n  placement?: 'auto' | 'top' | 'bottom' | 'left' | 'right'\n  title?: string\n  trigger?:\n    | 'click'\n    | 'hover'\n    | 'focus'\n    | 'manual'\n    | 'click hover'\n    | 'click focus'\n    | 'hover focus'\n    | 'click hover focus'\n}\n```\n\n----------------------------------------\n\nTITLE: Card Body Demo Vue Template\nDESCRIPTION: This snippet illustrates the use of `BCardBody`. By default, the content within `BCard` is automatically placed within a `BCardBody` section providing padding.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/card.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BCard>\n    This is the card body.\n  </BCard>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: BFormGroup Validation State - Vue Template\nDESCRIPTION: Demonstrates how to use the `state` prop to apply validation states (valid or invalid) to the form group. It includes providing feedback text for invalid states.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-group.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BFormGroup label=\"Valid Input\" state=\"true\" valid-feedback=\"Looks good!\">\n      <BFormInput :state=\"true\" placeholder=\"Enter something valid\" />\n    </BFormGroup>\n\n    <BFormGroup label=\"Invalid Input\" state=\"false\" invalid-feedback=\"Please enter a valid value.\">\n      <BFormInput :state=\"false\" placeholder=\"Enter something invalid\" />\n    </BFormGroup>\n\n    <BFormGroup label=\"No State\">\n      <BFormInput placeholder=\"Enter something\" />\n    </BFormGroup>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Link Underline Offsets\nDESCRIPTION: Shows how to change the distance of the underline from the text using css.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/link.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<b-link style=\"text-underline-offset: 0.5em;\">Link</b-link>\n```\n\n----------------------------------------\n\nTITLE: BDropdown Form Inline (Vue)\nDESCRIPTION: Demonstrates how to place a form inline within a dropdown using `BDropdownForm` and styling the content with inline elements.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_24\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"Dropdown\">\n      <BDropdownForm>\n        <label for=\"username\">Username:</label>\n        <input type=\"text\" id=\"username\" placeholder=\"Username\" />\n      </BDropdownForm>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Visually Hidden Focusable Link (vue-html)\nDESCRIPTION: Illustrates how to create a \"skip to main content\" link that is initially hidden but becomes visible when focused using the `.visually-hidden-focusable` class. This enhances keyboard navigation by allowing users to bypass the main navigation. It is important to use `.visually-hidden-focusable` as a standalone class, not in combination with `.visually-hidden`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference/accessibility.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<a class=\"visually-hidden-focusable\" href=\"#content\">Skip to main content</a>\n```\n\n----------------------------------------\n\nTITLE: Column Offsetting Vue Template\nDESCRIPTION: Illustrates offsetting grid columns using responsive `offset-*` props in Bootstrap Vue Next.  These props are sized to match columns and are useful for controlling column positioning.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_15\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BContainer>\n    <BRow>\n      <BCol cols=\"4\">Column</BCol>\n      <BCol cols=\"4\" offset=\"4\">Column</BCol>\n    </BRow>\n  </BContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vertical Alignment Vue Template\nDESCRIPTION: Demonstrates vertical alignment of all grid cells in a row using the `align-v` prop on `<BRow>` in Bootstrap Vue Next. Possible values include 'start', 'center', 'end', 'fill', 'baseline', and 'stretch'.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/grid-system.md#_snippet_11\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BContainer style=\"height: 300px;\">\n    <BRow align-v=\"center\" style=\"height: inherit;\">\n      <BCol>Column</BCol>\n      <BCol>Column</BCol>\n    </BRow>\n  </BContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Collapse Overview Demo (Template)\nDESCRIPTION: Demonstrates the basic usage of the BCollapse component. It showcases how to toggle the visibility of content within a vertically collapsing container.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/collapse.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BButton v-b-toggle.my-collapse variant=\"primary\">Toggle Collapse</BButton>\n    <BCollapse id=\"my-collapse\" class=\"mt-2\">\n      <BCard>\n        <P>This is some content that will collapse.</P>\n      </BCard>\n    </BCollapse>\n  </div>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Input Group Overview Demo Vue Template\nDESCRIPTION: This snippet demonstrates the basic structure of an input group in Bootstrap Vue Next.  It shows how to combine an input with prepended or appended content. It relies on Bootstrap Vue Next's components and styling.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/input-group.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BInputGroup>\n      <BFormInput placeholder=\"Username\" />\n      <template #append>\n        <BButton variant=\"outline-secondary\">@example.com</BButton>\n      </template>\n    </BInputGroup>\n  </div>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Avatar Groups Template (Vue)\nDESCRIPTION: Illustrates the usage of `BAvatarGroup` to group multiple avatars together. The group automatically handles the positioning and overlap of the avatars.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/avatar.md#_snippet_14\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <b-avatar-group>\n      <b-avatar variant=\"primary\" text=\"A1\"></b-avatar>\n      <b-avatar variant=\"secondary\" text=\"A2\"></b-avatar>\n      <b-avatar variant=\"success\" text=\"A3\"></b-avatar>\n      <b-avatar variant=\"danger\" text=\"A4\"></b-avatar>\n      <b-avatar variant=\"warning\" text=\"A5\"></b-avatar>\n      <b-avatar variant=\"info\" text=\"A6\"></b-avatar>\n      <b-avatar variant=\"light\" text=\"A7\"></b-avatar>\n      <b-avatar variant=\"dark\" text=\"A8\"></b-avatar>\n    </b-avatar-group>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Script Setup\nDESCRIPTION: A Vue component script using the composition API setup function to provide component data. This is the script used for the page and its associated components\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/link.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {data} from '../../data/components/inputGroup.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Button Toolbar Example 3 Template (Vue)\nDESCRIPTION: This example showcases the integration of button groups and a dropdown menu within a button toolbar.  It demonstrates how to combine different interactive elements in a toolbar. The code is from `ButtonToolbarExample3.vue`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button-toolbar.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"d-flex flex-wrap\">\n  <b-button-toolbar role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n    <b-button-group class=\"mx-1\" role=\"group\" aria-label=\"First group\">\n      <b-button variant=\"primary\">1</b-button>\n      <b-button variant=\"primary\">2</b-button>\n      <b-button variant=\"primary\">3</b-button>\n      <b-button variant=\"primary\">4</b-button>\n    </b-button-group>\n\n    <b-dropdown class=\"mx-1\" text=\"Dropdown\" variant=\"info\">\n      <b-dropdown-item>Action</b-dropdown-item>\n      <b-dropdown-item>Another action</b-dropdown-item>\n      <b-dropdown-divider></b-dropdown-divider>\n      <b-dropdown-item>Something else here</b-dropdown-item>\n    </b-dropdown>\n  </b-button-toolbar>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Install Unplugin Icons (Basic - PNPM)\nDESCRIPTION: Installs unplugin-icons, the Vue compiler, and the Bootstrap Icons JSON data using PNPM as development dependencies. This command is used for the basic installation method where only bootstrap-icons are used and auto-importing is disabled.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/icons.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm add unplugin-icons @vue/compiler-sfc @iconify-json/bi -D\n```\n\n----------------------------------------\n\nTITLE: Install Unplugin Icons (Basic - NPM)\nDESCRIPTION: Installs unplugin-icons, the Vue compiler, and the Bootstrap Icons JSON data using NPM as development dependencies. This command is used for the basic installation method where only bootstrap-icons are used and auto-importing is disabled.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/icons.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm i unplugin-icons @vue/compiler-sfc @iconify-json/bi -D\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Theming Description\nDESCRIPTION: This HTML snippet provides introductory information about theming in Bootstrap, indicating that it's achieved using SASS variables, SASS maps, and custom CSS. It also describes the availability of a built-in theme.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference/theming-bootstrap.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"lead mb-5\">\n\nTheming is accomplished by SASS variables, SASS maps, and custom CSS. There is no dedicated theme stylesheet; instead, you can enable the built-in theme to add gradients, shadows, and more.\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Alert Additional Content\nDESCRIPTION: Illustrates how BAlerts can contain additional HTML elements, such as headings and paragraphs, which will be styled with colors that match the variant.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/alert.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<<< DEMO ./demo/AlertContent.vue#template{vue-html}\n```\n\n----------------------------------------\n\nTITLE: Dropdown Split Button Variant Template Vue\nDESCRIPTION: Illustrates how to set a different color variant for the split button using the `split-variant` prop. If not set, it defaults to the same variant as the toggle button.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_13\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BDropdown split variant=\"success\" split-variant=\"info\" text=\"Split Variant\">\n      <BDropdownItem href=\"#\">First Action</BDropdownItem>\n      <BDropdownItem href=\"#\">Second Action</BDropdownItem>\n      <BDropdownDivider />\n      <BDropdownItem href=\"#\">Other Action</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Input Group with BInputGroupText Vue Template\nDESCRIPTION: This snippet demonstrates how to use the `BInputGroupText` component to explicitly define text addons within the `BInputGroup`.  This is useful for adding styled text to the input group.  Depends on Bootstrap Vue Next.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/input-group.md#_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BInputGroup>\n    <BInputGroupText>@</BInputGroupText>\n    <BFormInput placeholder=\"Username\" />\n  </BInputGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Drag and Drop\nDESCRIPTION: Demonstrates disabling the drag and drop functionality using the `noDrop` prop. This prevents users from dragging and dropping files onto the input.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-file.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BFormFile v-model=\"file\" no-drop />\n  <div class=\"mt-3\">\n    Files: <strong>{{ file }}</strong>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst file = ref<null | File>(null)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining TableProvider Types in TypeScript\nDESCRIPTION: These code snippets define types related to providing data for a table in BootstrapVueNext.  `BTableProviderContext` defines the context passed to the provider, including sorting, filtering, current page, and items per page. `BTableProvider` defines the function type for the data provider which takes the context and returns a promise of a table item array.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ntype BTableProviderContext<T = unknown> = {\n  sortBy: BTableSortBy<T>[] | undefined\n  filter: string | undefined\n  currentPage: number\n  perPage: number\n}\n\ntype BTableProvider<T> = (\n  context: Readonly<BTableProviderContext<T>>\n) => MaybePromise<T[] | undefined>\n```\n\n----------------------------------------\n\nTITLE: Typescript Setup\nDESCRIPTION: The code sets up the component to return the data object imported from '../../data/components/formTextarea.data'. This is likely used for populating content or configurations within the component.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-textarea.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {data} from '../../data/components/formTextarea.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tabs Empty Slots Vue Template\nDESCRIPTION: Demonstrates adding extra tabs without content using the `tabs-start` and `tabs-end` slots for placing tab buttons before and after the content tab buttons.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/tabs.md#_snippet_12\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Content of TabsEmpty.vue -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Tabs Lazy Loading Vue Template\nDESCRIPTION: Lazy loads individual `<BTab>` components via the `lazy` prop, mounting content only when activated and un-mounting when deactivated. There's a bug to be aware of.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/tabs.md#_snippet_15\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Content of TabsLazy.vue -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding a Label\nDESCRIPTION: Shows how to add a label to the BFormFile component using either the `label` prop or the `label` slot. The label prop is a string, while the slot allows for more complex content.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-file.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<BFormFile class=\"mt-3\" label=\"I am first!\" />\n<BFormFile class=\"mt-3\">\n  <template #label>\n    I am second!\n  </template>\n</BFormFile>\n```\n\n----------------------------------------\n\nTITLE: Include BootstrapVueNext via CDN\nDESCRIPTION: This code shows how to include the BootstrapVueNext library in your project using a CDN (Content Delivery Network). It includes both the JavaScript and CSS files.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap-vue-next@{{version}}/dist/bootstrap-vue-next.umd.min.js\"></script>\n<link\n  href=\"https://cdn.jsdelivr.net/npm/bootstrap-vue-next@{{version}}/dist/bootstrap-vue-next.min.css\"\n  rel=\"stylesheet\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining TableItem Type in TypeScript\nDESCRIPTION: This code snippet defines the `TableItem` type alias using TypeScript. It represents the structure of an item in a table, extending a generic type `T` (representing the data structure of the table) with optional properties for row and cell variants, and detail visibility.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ntype TableItem<T = Record<string, unknown>> = T & {\n  _rowVariant?: ColorVariant\n  _cellVariants?: Partial<Record<keyof T, ColorVariant>>\n  _showDetails?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical Button Group - Vue Template\nDESCRIPTION: This snippet showcases how to create a vertically stacked button group using the `vertical` prop on the BButtonGroup component. It shows the `vertical` prop's usage.  It requires Bootstrap-Vue Next.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button-group.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BButtonGroup vertical aria-label=\"Vertical button group\">\n    <BButton variant=\"primary\">Button</BButton>\n    <BButton variant=\"primary\">Button</BButton>\n    <BButton variant=\"primary\">Button</BButton>\n    <BButton variant=\"primary\">Button</BButton>\n    <BButton variant=\"primary\">Button</BButton>\n    <BButton variant=\"primary\">Button</BButton>\n  </BButtonGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Dropdown Sizing Template Vue\nDESCRIPTION: Shows how to control the size of the dropdown button using the `size` prop, which can be set to `sm` or `lg`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_11\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BDropdown size=\"lg\" text=\"Large Dropdown\">\n      <BDropdownItem href=\"#\">First Action</BDropdownItem>\n      <BDropdownItem href=\"#\">Second Action</BDropdownItem>\n      <BDropdownDivider />\n      <BDropdownItem href=\"#\">Other Action</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Placement Type in TypeScript\nDESCRIPTION: This code snippet defines the `Placement` type alias using TypeScript. It represents the possible values for the placement of an element relative to another, such as 'top', 'bottom', 'start', and 'end'.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ntype Placement = 'top' | 'bottom' | 'start' | 'end'\n```\n\n----------------------------------------\n\nTITLE: Install TypeScript dependencies using BUN\nDESCRIPTION: This command installs optional peer dependencies required for full TypeScript type support. These dependencies are not installed by default and include `@floating-ui/vue`, `@vueuse/core`, and `vue-router`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @floating-ui/vue @vueuse/core vue-router\n```\n\n----------------------------------------\n\nTITLE: Small Spinner Demo\nDESCRIPTION: Shows how to create a smaller spinner using the `small` prop. This is useful for integrating spinners into other components where space is limited.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/spinner.md#_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"d-flex flex-column gap-2\">\n  <BSpinner small />\n  <BSpinner small class=\"ms-auto\" />\n  <BSpinner small alignment=\"grow\" />\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Install TypeScript dependencies using YARN\nDESCRIPTION: This command installs optional peer dependencies required for full TypeScript type support. These dependencies are not installed by default and include `@floating-ui/vue`, `@vueuse/core`, and `vue-router`.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @floating-ui/vue @vueuse/core vue-router\n```\n\n----------------------------------------\n\nTITLE: Dropdown Header Migration - Vue Template\nDESCRIPTION: This snippet demonstrates how to migrate a BDropdownHeader from BootstrapVue to BootstrapVueNext using inherited attributes. The id attribute and other unspecified props will be set on the inner component.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/migration-guide.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BDropdownHeader id=\"my-header\" class=\"text-danger\">Header Text</BDropdownHeader>\n  </div>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonType Type in TypeScript\nDESCRIPTION: This code snippet defines the `ButtonType` type alias using TypeScript. It specifies the possible values for the `type` attribute of a button element, which can be 'button', 'submit', or 'reset'.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype ButtonType = 'button' | 'submit' | 'reset'\n```\n\n----------------------------------------\n\nTITLE: Nav Vertical Style (Vue)\nDESCRIPTION: Shows how to create a vertical navigation using the `<BNav>` component with the `vertical` prop. The navigation items are stacked vertically.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/nav.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BNav vertical>\n    <BNavItem href=\"#\">Link 1</BNavItem>\n    <BNavItem active href=\"#\">Link 2</BNavItem>\n    <BNavItem href=\"#\">Another Link</BNavItem>\n    <BNavItem disabled href=\"#\">Disabled Link</BNavItem>\n  </BNav>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Carousel with Indicators Template Vue-HTML\nDESCRIPTION: This example shows how to add indicators to the carousel using the `indicators` prop. Indicators allow users to jump to specific slides. This snippet enhances user navigation with clickable indicators.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/carousel.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Carousel with indicators -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vertical Tabs End Vue Template\nDESCRIPTION: Visually moves the vertical tab controls to the right-hand side by setting the `end` prop when using vertical tabs.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/tabs.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Content of TabsVerticalEnd.vue -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: HTML Spacing Example\nDESCRIPTION: This HTML snippet demonstrates the usage of Bootstrap v5's margin-bottom spacing class (`mb-5`) to add a bottom margin to a div element with the class `lead`. This class is used to emphasize the text within the div.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference/spacing-classes.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"lead mb-5\">\n\nBootstrap v5 CSS includes a wide range of shorthand responsive margin and padding utility classes to modify an element's appearance.\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Form Spinbutton Sizing - Vue Template\nDESCRIPTION: This snippet demonstrates how to use the `size` prop to control the size of the `BFormSpinbutton` component, with options for 'sm' (small) and 'lg' (large).\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-spinbutton.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\\n  <div>\\n    <BFormSpinbutton id=\"spinbutton-size-sm\" v-model.number=\"value1\" size=\"sm\" />\\n    <div class=\"mt-2\">Value: {{ value1 }}</div>\\n\n    <BFormSpinbutton id=\"spinbutton-size-lg\" v-model.number=\"value2\" size=\"lg\" />\\n    <div class=\"mt-2\">Value: {{ value2 }}</div>\\n  </div>\\n</template>\\n\n```\n\n----------------------------------------\n\nTITLE: Disabled BLink Styling\nDESCRIPTION: CSS rules to style a disabled link to prevent hover style changes. It uses the .disabled class that Bootstrap v5 adds to the link.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/link.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\na.disabled {\n  pointer-events: none;\n  cursor: default;\n  text-decoration: none;\n  color: #6c757d; /* Adjust color as needed */\n}\n\na.disabled:hover {\n  color: #6c757d; /* Keep the same color on hover */\n}\n\n```\n\n----------------------------------------\n\nTITLE: Avatar Image Template (Vue)\nDESCRIPTION: Illustrates how to use the `src` prop to display an image as the avatar content. The image is scaled to fit the avatar's bounding box.  Note that aspect ratio should be 1:1 to prevent distortion.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/avatar.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <b-avatar src=\"https://via.placeholder.com/75.png\"></b-avatar>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Router Link 'exact' Prop Example in Vue\nDESCRIPTION: Illustrates how to use the 'exact' prop to enforce exact match mode for the link, ensuring that the active class is only applied when the current path exactly matches the 'to' prop value.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference/router-links.md#_snippet_3\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- This link will only be active at `/` -->\n<BLink to=\"/\" exact />\n```\n\n----------------------------------------\n\nTITLE: Tabs with Pictures Vue Template\nDESCRIPTION: Illustrates the usage of tabs with pictures. The `no-body` prop on `<BTab>` disables the `card-body` class when `<BTabs>` is in `card` mode.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/tabs.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Content of TabsPictures.vue -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining BreadcrumbItem Types in TypeScript\nDESCRIPTION: This code snippet defines the `BreadcrumbItem` interface and `BreadcrumbItemRaw` type alias using TypeScript. It specifies the structure of a breadcrumb item, which can be an object with properties like `active`, `disabled`, `href`, `text`, and `to`, or simply a string.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BreadcrumbItem {\n  active?: boolean\n  disabled?: boolean\n  href?: string\n  text: string\n  to?: string | Record<string, any>\n}\ntype BreadcrumbItemRaw = BreadcrumbItem | string\n```\n\n----------------------------------------\n\nTITLE: Vue Script Export with Data\nDESCRIPTION: This Vue.js script imports component data and exports it for use within the component's template. The `setup` function makes the imported `data` available to the template.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/pagination.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport {data} from '../../data/components/pagination.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Icons in Vue Template (Basic)\nDESCRIPTION: Demonstrates how to use icons in a Vue template with the basic unplugin-icons installation. Each icon component must be manually imported.  Examples show which icons are usable, and which would result in errors because they are not a dependency.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/icons.md#_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <IBi0Circle />\n  <IBiActivity color=\"red\" />\n  <!-- Cannot use, is not a dependency -->\n  <!-- <IMdiAccountBox /> -->\n  <!-- fa -->\n  <!-- <IFaAngellist /> -->\n</template>\n\n<script setup lang=\"ts\">\nimport IBi0Circle from '~icons/bi/0-circle'\nimport IBiActivity from '~icons/bi/activity'\n// import IMdiAccountBox from '~icons/mdi/account-box'\n// import IFaAngellist from '~icons/mdi/angellist'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Include BootstrapVueNext ESM via CDN\nDESCRIPTION: This code snippet shows how to include the ESM (ECMAScript Module) version of BootstrapVueNext in your project using a CDN.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import bootstrapVueNext from 'https://cdn.jsdelivr.net/npm/bootstrap-vue-next@{{version}}/+esm'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Button Group Overview - Vue Template\nDESCRIPTION: This snippet demonstrates the basic usage of the BButtonGroup component to group buttons together.  It shows how to use aria-label for accessibility. It relies on Bootstrap-Vue Next components.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button-group.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BButtonGroup aria-label=\"Basic button group example\">\n    <BButton variant=\"primary\">Left</BButton>\n    <BButton variant=\"primary\">Middle</BButton>\n    <BButton variant=\"primary\">Right</BButton>\n  </BButtonGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: List Group Disabled Item Demo - Vue HTML\nDESCRIPTION: This demo showcases the `disabled` prop on a `BListGroupItem`, making it appear disabled. It demonstrates how to prevent user interaction with specific list items.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/list-group.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <BListGroup>\n    <BListGroupItem>Cras justo odio</BListGroupItem>\n    <BListGroupItem disabled>Dapibus ac turpis egestas</BListGroupItem>\n    <BListGroupItem>Morbi leo risus</BListGroupItem>\n    <BListGroupItem>Porta ac consectetur ac</BListGroupItem>\n    <BListGroupItem>Vestibulum at eros</BListGroupItem>\n  </BListGroup>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Vue Template - Textarea Resize Handle\nDESCRIPTION: Shows how to disable the browser's default textarea resize handle using the `no-resize` prop.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/form-textarea.md#_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<template{vue-html}>\n  <div>\n    <label for=\"textarea-no-resize\">Textarea with no resize handle:</label>\n    <BFormTextarea id=\"textarea-no-resize\" no-resize></BFormTextarea>\n  </div>\n</template{vue-html}>\n```\n\n----------------------------------------\n\nTITLE: Install unplugin-vue-components using BUN\nDESCRIPTION: This command installs the unplugin-vue-components package as a development dependency using the BUN package manager.  This plugin enables automatic component registration and tree-shaking.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbun add unplugin-vue-components -D\n```\n\n----------------------------------------\n\nTITLE: Install unplugin-vue-components using NPM\nDESCRIPTION: This command installs the unplugin-vue-components package as a development dependency using the NPM package manager.  This plugin enables automatic component registration and tree-shaking.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm i unplugin-vue-components -D\n```\n\n----------------------------------------\n\nTITLE: Allow transProps to work - BTransition - No Language\nDESCRIPTION: This commit enables the `transProps` functionality in the BTransition component. This allows transition-related properties to be passed down to the underlying transitioned element, enabling more flexible and customizable transitions. This also fixes issues with components that rely on BTransition, such as BOverlay.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_36\n\n\n\n----------------------------------------\n\nTITLE: Placeholder Card Vue HTML\nDESCRIPTION: Demonstrates how to render a placeholder card using the BPlaceholderCard component in Vue HTML, specifying a maximum width for styling.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/placeholder.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<BPlaceholderCard style=\"max-width: 20rem\" />\n```\n\n----------------------------------------\n\nTITLE: Border Spinner Demo\nDESCRIPTION: Illustrates the default `border` type spinner in a Vue template. This spinner provides a simple, lightweight loading indicator.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/spinner.md#_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"d-flex flex-column gap-2\">\n  <BSpinner />\n  <BSpinner class=\"ms-auto\" />\n  <BSpinner alignment=\"grow\" />\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Avatar Square Template (Vue)\nDESCRIPTION: Demonstrates how to create a square avatar by setting the `square` prop to `true`. This overrides the default circular border radius.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/avatar.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <b-avatar square text=\"BV\"></b-avatar>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Setup for Image Component\nDESCRIPTION: This code snippet demonstrates the Vue component setup, importing data and making it available to the template. It imports the 'data' object from the 'image.data' file and returns it within the setup function, allowing the template to access the data.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/image.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {data} from '../../data/components/image.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Bootstrap and BootstrapVueNext using NPM\nDESCRIPTION: This command installs the Bootstrap and BootstrapVueNext packages using the NPM package manager. It adds the packages as dependencies to your project.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i bootstrap bootstrap-vue-next\n```\n\n----------------------------------------\n\nTITLE: Install Bootstrap and BootstrapVueNext using YARN\nDESCRIPTION: This command installs the Bootstrap and BootstrapVueNext packages using the YARN package manager. It adds the packages as dependencies to your project.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add bootstrap bootstrap-vue-next\n```\n\n----------------------------------------\n\nTITLE: Extend justify content types - BPagination - No Language\nDESCRIPTION: This commit extends the justify content types for the BPagination component in Bootstrap Vue Next, adding support for 'between', 'around', and 'evenly' distribution options. This allows for more flexible control over the positioning of pagination elements within the component.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Install Bootstrap and BootstrapVueNext using BUN\nDESCRIPTION: This command installs the Bootstrap and BootstrapVueNext packages using the BUN package manager. It adds the packages as dependencies to your project.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun add bootstrap bootstrap-vue-next\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup Block\nDESCRIPTION: This is a basic Vue script setup block using Typescript. It is used to define the logic for a Vue component.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference/third-party-libraries.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining CheckboxOption Type in TypeScript\nDESCRIPTION: This code snippet defines the `CheckboxOption` type alias using TypeScript. It represents the structure of a checkbox option, containing `text`, `value`, and an optional `disabled` property. It's used for generating checkbox lists or groups.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype CheckboxOption = {\n  text: string\n  value: CheckboxValue\n  disabled?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Spinner Flex Alignment Demo\nDESCRIPTION: Shows how to use flexbox utilities to align spinners. Flexbox classes allow for precise control over spinner placement within a container.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/spinner.md#_snippet_7\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"d-flex justify-content-center gap-2\">\n  <BSpinner />\n</div>\n\n<div class=\"d-flex align-items-center gap-2\">\n  <strong>Loading...</strong>\n  <BSpinner />\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Nav Dropdown HTML\nDESCRIPTION: Illustrates HTML structure of the generated dropdown toggle button.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/nav.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<a\n  href=\"#\"\n  class=\"nav-link dropdown-toggle\"\n  role=\"button\"\n  id=\"dropdown-button-1\"\n  data-bs-toggle=\"dropdown\"\n  aria-haspopup=\"true\"\n  aria-expanded=\"false\"\n>\n  Dropdown\n</a>\n```\n\n----------------------------------------\n\nTITLE: Link Opacity\nDESCRIPTION: Shows how to change the alpha opacity of the link color value using css\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/link.md#_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<b-link style=\"opacity: 0.5;\">Link</b-link>\n```\n\n----------------------------------------\n\nTITLE: Placeholder Button Vue HTML\nDESCRIPTION: Shows how to render a placeholder with button styling using the BPlaceholderButton component in Vue HTML, adjusting its width using the cols prop.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/placeholder.md#_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<BPlaceholderButton cols=\"3\" />\n```\n\n----------------------------------------\n\nTITLE: Button Squared Style Demo\nDESCRIPTION: Illustrates the `squared` prop, which creates square-cornered buttons by applying Bootstrap's `.rounded-0` utility class.  The `pill` prop takes precedence if both are set.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button.md#_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<<< DEMO ./demo/ButtonSquaredStyle.vue#template{vue-html}\n```\n\n----------------------------------------\n\nTITLE: Fix busy loader not hiding with provider - BTable - No Language\nDESCRIPTION: This commit fixes an issue in the BTable component where the busy loader would not hide when using a provider. The fix ensures that the busy loader is correctly hidden once the data is loaded from the provider, providing a better user experience.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_35\n\n\n\n----------------------------------------\n\nTITLE: Button Disabled State Demo\nDESCRIPTION: Demonstrates how to disable a button using the `disabled` prop.  This works for all button types (button, link, router-link).  Disabled buttons are not interactive.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button.md#_snippet_9\n\nLANGUAGE: vue-html\nCODE:\n```\n<<< DEMO ./demo/ButtonDisabledState.vue#template{vue-html}\n```\n\n----------------------------------------\n\nTITLE: Install Unplugin Icons (Basic - YARN)\nDESCRIPTION: Installs unplugin-icons, the Vue compiler, and the Bootstrap Icons JSON data using YARN as development dependencies. This command is used for the basic installation method where only bootstrap-icons are used and auto-importing is disabled.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/icons.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn add unplugin-icons @vue/compiler-sfc @iconify-json/bi -D\n```\n\n----------------------------------------\n\nTITLE: Redefining ContainerPosition Type in TypeScript\nDESCRIPTION: This code snippet redefines the `ContainerPosition` type alias using TypeScript. It uses `ContainerVerticalAlign` and `ContainerHorizontalAlign` to construct a string literal type representing the container position. This is different than the first definition of ContainerPosition in Alignment section.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ntype ContainerVerticalAlign = Exclude<VerticalAlign, 'baseline' | 'text-top' | 'text-bottom'>\ntype ContainerHorizontalAlign = 'left' | 'center' | 'right'\ntype ContainerPosition = `${ContainerVerticalAlign}-${ContainerHorizontalAlign}`\n```\n\n----------------------------------------\n\nTITLE: Defining AttrsValue Type in TypeScript\nDESCRIPTION: This code snippet defines the `AttrsValue` type alias using TypeScript. It represents a record of string keys to any type, which is commonly used for component attributes. It allows components to accept arbitrary attributes and values.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype AttrsValue = Record<string, any>\n```\n\n----------------------------------------\n\nTITLE: Defining CombinedPlacement Type in TypeScript\nDESCRIPTION: This code snippet defines the `CombinedPlacement` type alias using TypeScript. It extends the `Placement` type to include combined placements like 'top-start', 'top-end', 'bottom-start', and 'bottom-end'. These values define the position of an element relative to another.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype CombinedPlacement = Placement | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end'\n```\n\n----------------------------------------\n\nTITLE: Carousel Vue Component Setup\nDESCRIPTION: This snippet shows the setup for a Vue component that uses the carousel data. It imports the data and exposes it in the setup function. This snippet demonstrates how to pass data to the carousel component for dynamic content rendering.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/carousel.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {data} from '../../data/components/carousel.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropdown Block Toggle Template Vue\nDESCRIPTION: Shows how to create a block-level dropdown by adding `d-grid` and `gap-2` classes to the `BDropdown` element.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/dropdown.md#_snippet_14\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <BDropdown text=\"Block Toggle Dropdown\" class=\"d-grid gap-2\">\n      <BDropdownItem href=\"#\">First Action</BDropdownItem>\n      <BDropdownItem href=\"#\">Second Action</BDropdownItem>\n      <BDropdownDivider />\n      <BDropdownItem href=\"#\">Other Action</BDropdownItem>\n    </BDropdown>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining RadiusElement Type in TypeScript\nDESCRIPTION: This code snippet defines the `RadiusElement` type alias using TypeScript. It represents the possible values for controlling the border radius of an element, including predefined values like 'circle' and 'pill', breakpoint sizes, and numeric values.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ntype RadiusElement =\n  | 'circle'\n  | 'pill'\n  | 'none'\n  | 'sm'\n  | 'md'\n  | 'lg'\n  | '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n```\n\n----------------------------------------\n\nTITLE: Defining AriaInvalid Type in TypeScript\nDESCRIPTION: This code snippet defines the `AriaInvalid` type alias using TypeScript. It represents the possible values for the `aria-invalid` attribute, which is used to indicate whether a form field has invalid input.  It allows for boolean values (true/false) and string values ('grammar'/'spelling').\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype AriaInvalid = boolean | 'grammar' | 'spelling'\n```\n\n----------------------------------------\n\nTITLE: Defining ColorVariant Type in TypeScript\nDESCRIPTION: This code snippet defines the `ColorVariant` type alias using TypeScript. It represents the available color variants in BootstrapVueNext, such as 'primary', 'secondary', 'success', 'danger', etc. These variants are used to apply predefined color schemes to components.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype ColorVariant =\n  | 'primary'\n  | 'secondary'\n  | 'success'\n  | 'danger'\n  | 'warning'\n  | 'info'\n  | 'light'\n  | 'dark'\n```\n\n----------------------------------------\n\nTITLE: Alert Overview Demo\nDESCRIPTION: Demonstrates the basic usage of the BootstrapVueNext Alert component, showing its availability for any length of text and optional dismiss button.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/alert.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<< DEMO ./demo/AlertOverview.vue\n```\n\n----------------------------------------\n\nTITLE: Defining LinkTarget Type in TypeScript\nDESCRIPTION: This code snippet defines the `LinkTarget` type alias using TypeScript. It represents the possible values for the `target` attribute of a link element, controlling where the linked document will be opened.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ntype LinkTarget = '_self' | '_blank' | '_parent' | '_top'\n```\n\n----------------------------------------\n\nTITLE: Defining InputType Type in TypeScript\nDESCRIPTION: This code snippet defines the `InputType` type alias using TypeScript. It represents the allowed values for the `type` attribute of an input element, covering various input types such as 'text', 'number', 'email', 'password', and more.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ntype InputType =\n  | 'text'\n  | 'number'\n  | 'email'\n  | 'password'\n  | 'search'\n  | 'url'\n  | 'tel'\n  | 'date'\n  | 'time'\n  | 'range'\n  | 'color'\n  | 'datetime'\n  | 'datetime-local'\n  | 'month'\n  | 'week'\n```\n\n----------------------------------------\n\nTITLE: Set correct align types - BNav - No Language\nDESCRIPTION: This commit fixes an issue in Bootstrap Vue Next related to incorrect align types for the BNav component. It ensures that the navigation items are aligned correctly according to the specified alignment properties, fixing potential layout or display problems.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Defining CheckboxValue Type in TypeScript\nDESCRIPTION: This code snippet defines the `CheckboxValue` type alias using TypeScript. It specifies the possible data types that a checkbox value can be, including arrays, sets, strings, booleans, records, numbers, and null.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype CheckboxValue =\n  | readonly unknown[]\n  | ReadonlySet<unknown>\n  | string\n  | boolean\n  | Readonly<Record<string, unknown>>\n  | number\n  | null\n```\n\n----------------------------------------\n\nTITLE: Defining BodyProp Type for Toast Component in TypeScript\nDESCRIPTION: This code snippet defines the `BodyProp` type alias using TypeScript, specifically for the Toast component. It allows the toast body to be a string, a Vue VNode, or undefined.  The VNode type includes RendererNode and RendererElement to render UI elements.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype BodyProp =\n  | string\n  | VNode<\n      RendererNode,\n      RendererElement,\n      {\n        [key: string]: any\n      }\n    >\n  | undefined\n```\n\n----------------------------------------\n\nTITLE: Basic Carousel Template Vue-HTML\nDESCRIPTION: This is a basic example of the BCarousel component, showing how to create a simple carousel with slides. It uses the `template` tag within a Vue component. This snippet demonstrates the basic structure for implementing the Carousel component.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/carousel.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<template>\n  <div>\n    <!-- Carousel content here -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining SelectValue Type in TypeScript\nDESCRIPTION: This code snippet defines the `SelectValue` type alias using TypeScript. It specifies the possible data types that a select element value can be, including booleans, strings, arrays, records, numbers, and null.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ntype SelectValue =\n  | boolean\n  | string\n  | readonly unknown[]\n  | Readonly<Record<string, unknown>>\n  | number\n  | null\n```\n\n----------------------------------------\n\nTITLE: Add tag scoped slot - BFormTags - No Language\nDESCRIPTION: This commit adds a `tag` scoped slot to the BFormTags component. This slot enables customization of the rendering of individual tags within the component, allowing developers to define their own tag styles and content.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_32\n\n\n\n----------------------------------------\n\nTITLE: Route Location Function in TypeScript\nDESCRIPTION: Defines a function `routeLocation` that takes a name (string) as input and returns a string representing the route to a directive's documentation page. It uses `withBase` from 'vitepress' to prepend the base URL and trims any extra whitespace.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/directives.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst routeLocation = (name: string): string => withBase(`/docs/directives/${name}`).trim()\n```\n\n----------------------------------------\n\nTITLE: Defining VerticalAlign Type in TypeScript\nDESCRIPTION: This code snippet defines the `VerticalAlign` type alias using TypeScript. It represents the possible values for the `vertical-align` CSS property, such as 'baseline', 'top', 'middle', 'bottom', 'text-top', and 'text-bottom'.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\ntype VerticalAlign = 'baseline' | 'top' | 'middle' | 'bottom' | 'text-top' | 'text-bottom'\n```\n\n----------------------------------------\n\nTITLE: Defining SpinnerType Type in TypeScript\nDESCRIPTION: This code snippet defines the `SpinnerType` type alias using TypeScript. It represents the possible types for a spinner component, which can be 'border' or 'grow'.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ntype SpinnerType = 'border' | 'grow'\n```\n\n----------------------------------------\n\nTITLE: Nav Router Config (JavaScript)\nDESCRIPTION: Provides an example of the Vue Router configuration needed to support the `<BNav>` and `<router-view>` integration shown in the NavRouter.vue template. It sets up routes for different tab content.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/nav.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/nav',\n    component: {\n      template: '<div>Parent Route</div>'\n    },\n    children: [\n      {\n        path: 'tab1',\n        component: {\n          template: '<div>Tab 1 Content</div>'\n        }\n      },\n      {\n        path: 'tab2',\n        component: {\n          template: '<div>Tab 2 Content</div>'\n        }\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Vue Component Script Setup with TypeScript\nDESCRIPTION: This script block imports Vue.js and BootstrapVueNext components, defines reactive data, and injects global configuration. It leverages TypeScript for type safety and VitePress helpers for base URL resolution.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/index.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  BButton,\n  BCol,\n  BCard,\n  BCardText,\n  BLink,\n  BBadge,\n  BRow,\n} from 'bootstrap-vue-next'\nimport {inject} from 'vue'\nimport {withBase} from 'vitepress'\nimport BootstrapIcon from '~icons/logos/bootstrap'\nimport VueIcon from '~icons/logos/vue'\nimport {appInfoKey} from '../.vitepress/theme/keys'\nimport OpenCollectiveMemberDisplay from './components/OpenCollectiveMemberDisplay.vue'\n\nconst globalData = inject(appInfoKey, {\n  discordUrl: '',\n  githubUrl: '',\n  githubPackageDirectory: '',\n  githubComponentsDirectory: '',\n  githubComposablesDirectory: '',\n  githubMainBranch: '',\n  githubDirectivesDirectory: '',\n  opencollectiveUrl: '',\n  githubDocsDirectory: '',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining RadiusElementExtendables Type in TypeScript\nDESCRIPTION: This code snippet defines the `RadiusElementExtendables` type alias using TypeScript. It represents an object containing properties to control the border radius of an element, specifically for each corner (top, bottom, start, end) and all corners combined. Each property accepts a boolean or a `RadiusElement` type.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ntype RadiusElementExtendables = {\n  rounded?: boolean | RadiusElement\n  roundedTop?: boolean | RadiusElement\n  roundedBottom?: boolean | RadiusElement\n  roundedStart?: boolean | RadiusElement\n  roundedEnd?: boolean | RadiusElement\n}\n```\n\n----------------------------------------\n\nTITLE: Avatar Overview Template (Vue)\nDESCRIPTION: Demonstrates the basic usage of the BAvatar component in a Vue.js template, showcasing its default inline rendering and integration with other components.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/avatar.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<b-container class=\"bv-example-row\">\n  <b-row align-v=\"center\">\n    <b-col cols=\"auto\">\n      Plain text\n    </b-col>\n    <b-col cols=\"auto\">\n      <b-avatar> </b-avatar>\n    </b-col>\n    <b-col cols=\"auto\">\n      Next to an avatar.\n    </b-col>\n  </b-row>\n</b-container>\n```\n\n----------------------------------------\n\nTITLE: Button Overview Demo\nDESCRIPTION: Demonstrates a basic usage of the `BButton` component in a Vue template.  This example likely showcases different button labels and default behaviors.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/button.md#_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<<< DEMO ./demo/ButtonOverview.vue#template{vue-html}\n```\n\n----------------------------------------\n\nTITLE: Vue Setup Script\nDESCRIPTION: This Vue setup script imports data from a TypeScript file and makes it available within the component's template. The data likely contains configuration or content specific to the tabs component.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/tabs.md#_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport {data} from '../../data/components/tabs.data'\n\nexport default {\n  setup() {\n    return {data}\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Styling Table with CSS Class\nDESCRIPTION: This CSS snippet defines a style for the table when it is in a busy state. It sets the opacity to 0.55, effectively muting the table's appearance. This visual cue indicates to the user that the table is currently loading or processing data. The CSS is applied based on the `aria-busy` attribute.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/table.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n[aria-busy='true'] > *:not(.table-busy-slot) {\n  opacity: 0.55 !important;\n  transition: opacity 0.3s ease-in-out;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Composable List Definition in TypeScript\nDESCRIPTION: Defines an array of objects, `composablesList`, where each object represents a Bootstrap-Vue-Next directive. Each object has a `name` (string) and a `description` (string) property. This list is used to generate the table of contents for the directives documentation.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/directives.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst composablesList: {name: string; description: string}[] = [\n  {\n    name: 'BColorMode',\n    description: 'The BColorMode directive has a similar result to the useColorMode utility, but provides more low level access than the composable',\n  },\n  {\n    name: 'BModal',\n    description: 'Similar to the BToggle directive, the BModal directive is used to trigger the state of a modal through directive',\n  },\n  {\n    name: 'BPopover',\n    description: 'Add popovers to any element on your site, using Bootstrap v4 CSS for styling and animations',\n  },\n  {\n    name: 'BToggle',\n    description: 'A light-weight directive for toggling visibility state for collapses and sidebars by ID. It automatically handles the accessibility attributes on the trigger element',\n  },\n  {\n    name: 'BTooltip',\n    description: 'Add custom tooltips to any element. Tooltips can be triggered by hovering, focusing, or clicking an element',\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Options as Raw Object Array in TypeScript\nDESCRIPTION: Illustrates creating an array of objects for the `options` property, where some objects might only have a `text` property. If `value` is missing, then `text` will be used as both the `value` and `text` fields. This is before normalization occurs.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/_options.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst options = [\n  { text: 'First option' },\n  { text: 'Second option', value: 'second' },\n  { text: 'Third option' },\n  { text: 'Fourth option', value: { fourth: true } },\n]\n\nexport default options\n```\n\n----------------------------------------\n\nTITLE: Install BootstrapVueNext for Nuxt 3 using BUN\nDESCRIPTION: This command installs the Bootstrap, BootstrapVueNext and the Nuxt module for BootstrapVueNext as development dependencies using BUN.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nbun add bootstrap bootstrap-vue-next @bootstrap-vue-next/nuxt -D\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup with TypeScript\nDESCRIPTION: This script block uses Vue's `<script setup>` syntax along with TypeScript to define the logic for the table of contents page. It imports necessary modules from `vitepress` and `vue`, defines a utility function `routeLocation` to generate routes, and creates a computed property `computedComponentsList` to transform and sort the component list for display.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\nimport {withBase} from 'vitepress'\nimport {computed} from 'vue'\nimport TableOfContentsCard from '../components/TableOfContentsCard.vue'\n\nconst routeLocation = (name: string): string => withBase(`/docs/reference/${name.toLowerCase()}`).trim().replaceAll(/\\s+/g, '-')\n\nconst componentList: {name: string; description: string}[] = [\n  {\n    name: 'Accessibility',\n    description:\n      `A brief overview of BootstrapVueNext's features and limitations for the creation of accessible content`,\n  },\n  {\n    name: 'Color Variants',\n    description:\n      'Color variants are available when using the default Bootstrap v5 CSS and their mappings to CSS classes',\n  },\n  {\n    name: 'Contributing',\n    description:\n      'Information on contributing to the BootstrapVueNext project',\n  },\n  {\n    name: 'Images',\n    description:\n      'Information on including images in your components',\n  },\n  {\n    name: 'Router Links',\n    description: 'Several BootstrapVueNext components support rendering `RouterLink` components compatible with Vue Router and Nuxt.js',\n  },\n  {\n    name: 'Settings',\n    description: 'BootstrapVue provides a few options for customizing component default values, and more',\n  },\n  {\n    name: 'Size props and classes',\n    description: 'Bootstrap v5 CSS provides several classes that control the sizing of elements, of which some of these have been translated into props on components',\n  },\n  {\n    name: 'Spacing classes',\n    description: `Bootstrap v5 CSS includes a wide range of shorthand responsive margin and padding utility classes to modify an element's appearance`,\n  },\n  {\n    name: 'Starter Templates',\n    description:\n      'There are several ways you can create your app, from basic client side HTML all the way up to using a build system and compilers',\n  },\n  {\n    name: 'Theming Bootstrap',\n    description:\n      `Theming is accomplished by SASS variables, SASS maps, and custom CSS. There is no dedicated theme stylesheet; instead, you can enable the built-in theme to add gradients, shadows, and more.`,\n  },\n  {\n    name: 'Third party libraries',\n    description:\n      'There are several 3rd party libraries that you can use to add additional functionality and features to your BootstrapVue project',\n  },\n  {\n    name: 'Utility Classes',\n    description:\n      'Bootstrap v5 CSS provides various utility classes to control color, spacing, flex-box, text alignment, floating, position, responsive display/hiding and much more',\n  },\n  {\n    name: 'Form Validation',\n    description:\n      'BootstrapVueNext does not include form validation by default; we leave that up to the many existing form validation plugins. Included here are some examples of validation plugins and how they may be integrated',\n  },\n]\n\nconst computedComponentsList = computed(() =>\n  componentList\n    .map((el) => ({\n      name: el.name,\n      description: el.description,\n      route: routeLocation(el.name),\n    }))\n    .sort((a, b) => a.name.localeCompare(b.name))\n)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Options as an Array in TypeScript\nDESCRIPTION: Demonstrates using a simple string array for the `options` property in BootstrapVueNext. Each string in the array serves as both the `value` and the `text` for the corresponding option. This is a concise way to define simple option lists.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/components/_options.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst options = [\n  'First option',\n  'Second option',\n  { text: 'Third option', value: 'third' },\n  { text: 'Fourth option', value: { fourth: true } },\n]\n\nexport default options\n```\n\n----------------------------------------\n\nTITLE: BAvatar Icon Slot Implementation (Vue)\nDESCRIPTION: Illustrates how to replace deprecated icon support in `BAvatar` using the default slot to embed an `.svg` or an `unplug icon`. Provides alternative approaches to display icons within the Avatar component in BootstrapVueNext.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/migration-guide.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BAvatar>\n    <unplug-icon-user/>\n  </BAvatar>\n\n  <BAvatar>\n    <svg ...>...</svg>\n  </BAvatar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Install Unplugin Icons (PNPM)\nDESCRIPTION: Installs unplugin-icons, unplugin-vue-components, and the Vue compiler using PNPM as development dependencies. This command is part of the preferred installation method for using icons in a Vue 3 project.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/icons.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add unplugin-icons unplugin-vue-components @vue/compiler-sfc -D\n```\n\n----------------------------------------\n\nTITLE: Add static prop ability - No Language\nDESCRIPTION: This commit introduces the ability to add static props to components in Bootstrap Vue Next. Static props are properties that have a fixed value and are defined directly on the component, rather than being dynamically bound.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Defining TransitionMode Type in TypeScript\nDESCRIPTION: This code snippet defines the `TransitionMode` type alias using TypeScript. It represents the available transition modes for Vue transitions, which can be 'in-out' or 'out-in'.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/types.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ntype TransitionMode = 'in-out' | 'out-in'\n```\n\n----------------------------------------\n\nTITLE: BAlert Show Prop Before Migration (Vue)\nDESCRIPTION: Shows how to control visibility of a BAlert component with the deprecated 'show' prop in the original BootstrapVue. The recommended prop is now 'model-value'.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/migration-guide.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BAlert show>I am visible</BAlert>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Revert to fix usage with toast - BContainer - No Language\nDESCRIPTION: This commit reverts changes made to the BContainer component in Bootstrap Vue Next to fix its usage with the toast functionality. This likely restores a previous implementation of the BContainer component to address compatibility issues with toast notifications or related features.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Refactor icons - No Language\nDESCRIPTION: This commit refactors the icons used within Bootstrap Vue Next. It likely involves improvements to the icon system, such as updating icon libraries, optimizing icon rendering, or enhancing icon theming capabilities.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Set correct align types - BTabs - No Language\nDESCRIPTION: This commit fixes an issue in Bootstrap Vue Next related to incorrect align types for the BTabs component. It ensures that the tab content is aligned correctly according to the specified alignment properties, fixing potential layout or display problems.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: SCSS: Base Color Definitions\nDESCRIPTION: Defines the base color variables used in Bootstrap's SCSS. These variables represent common colors like blue, indigo, purple, pink, red, orange, yellow, green, teal, and cyan.  They are used to define the theme colors.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference/color-variants.md#_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n$blue: #0d6efd;\n$indigo: #6610f2;\n$purple: #6f42c1;\n$pink: #d63384;\n$red: #dc3545;\n$orange: #fd7e14;\n$yellow: #ffc107;\n$green: #198754;\n$teal: #20c997;\n$cyan: #0dcaf0;\n```\n\n----------------------------------------\n\nTITLE: Setting up Vue script with composables list\nDESCRIPTION: This script sets up the component using Vue 3's composition API. It imports necessary modules from 'vue' and defines a list of composables with their names and descriptions. A computed property transforms this list, adding a route to each composable, and sorts the list alphabetically.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/composables.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {withBase} from 'vitepress'\nimport {computed} from 'vue'\nimport TableOfContentsCard from '../components/TableOfContentsCard.vue'\n\nconst routeLocation = (name: string): string => withBase(`/docs/composables/${name}`).trim()\n\nconst composablesList: {name: string; description: string}[] = [\n  {\n    name: 'useBreadcrumb',\n    description: 'A global breadcrumb system to pair with the BBreadcrumb component'\n  },\n  {\n    name: 'useColorMode',\n    description: 'Implement a color scheme to reactively use light/dark or other color modes. Light and dark themes are included by default, but you can create more by reviewing the usage on the Bootstrap v5 documentation (Color Modes)'\n  },\n  {\n    name: 'useModal',\n    description: 'Conveniently hide or show modals programmatically from anywhere in the app',\n  },\n  {\n    name: 'useModalController',\n    description: 'Create or hide modals from anywhere in the app, or close all modals from one source using this utility',\n  },\n  {\n    name: 'useToastController',\n    description: 'Conveniently orchestrate a push notification system by showing or hiding Toasts with our useToastController composable system',\n  },\n  {\n    name: 'usePopoverController',\n    description: 'Control popovers and tooltips in your application, enabling the display popover elements with ease',\n  }\n]\n\nconst computedComposablesList = computed(() =>\n  composablesList\n    .map((el) => ({\n      name: el.name,\n      description: el.description,\n      route: routeLocation(el.name),\n    }))\n    .sort((a, b) => a.name.localeCompare(b.name))\n)\n```\n\n----------------------------------------\n\nTITLE: Adjusting BV3 Package.json Dependencies - SpinButton - No Language\nDESCRIPTION: This commit adjusts the BV3 Package.json dependencies for the SpinButton component in Bootstrap Vue Next. It updates or modifies the project's package.json file, likely involving dependency version adjustments or new dependency inclusions related to the SpinButton functionality.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: SCSS: Theme Color Default Definitions\nDESCRIPTION: Defines the default theme color variables used in Bootstrap's SCSS. These variables map semantic color names like primary, secondary, success, etc., to specific color values defined in the base color variables. These colors are then applied to various components and elements throughout the framework.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference/color-variants.md#_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n$primary: $blue;\n$secondary: $gray-600;\n$success: $green;\n$info: $cyan;\n$warning: $yellow;\n$danger: $red;\n$light: $gray-100;\n$dark: $gray-900;\n```\n\n----------------------------------------\n\nTITLE: Workspace Setup Commands\nDESCRIPTION: These commands are used to install dependencies and start the development environment for bootstrap-vue-next. `pnpm install` installs the project's dependencies, and `pnpm dev` starts the development server with hot-reloading.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Using BootstrapVueNext components in Nuxt 3\nDESCRIPTION: This code shows how to use BootstrapVueNext components such as BButton and BModal in a Nuxt 3 application.  The components are used directly without any manual imports.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <BButton variant=\"primary\" @click=\"show = !show\">Click me</BButton>\n    <BModal v-model=\"show\">Test</BModal>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst show = ref(false)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Install BootstrapVueNext for Nuxt 3 using PNPM\nDESCRIPTION: This command installs the Bootstrap, BootstrapVueNext and the Nuxt module for BootstrapVueNext as development dependencies using PNPM.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm add bootstrap bootstrap-vue-next @bootstrap-vue-next/nuxt -D\n```\n\n----------------------------------------\n\nTITLE: Set correct align types - BCard - No Language\nDESCRIPTION: This commit fixes an issue in Bootstrap Vue Next related to incorrect align types for the BCard component. It ensures that the card content is aligned correctly according to the specified alignment properties, fixing potential layout or display problems.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Set correct align types - BPagination - No Language\nDESCRIPTION: This commit fixes an issue in Bootstrap Vue Next related to incorrect align types for the BPagination component. It ensures that the pagination controls are aligned correctly according to the specified alignment properties, fixing potential layout or display problems.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Set correct align types - BNavbarNav - No Language\nDESCRIPTION: This commit fixes an issue in Bootstrap Vue Next related to incorrect align types for the BNavbarNav component. It ensures that the navbar navigation items are aligned correctly according to the specified alignment properties, fixing potential layout or display problems.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Fix lazy rendering - BModal - No Language\nDESCRIPTION: This commit fixes an issue with lazy rendering in the BModal component. It ensures the modal is rendered lazily when the `lazy` prop is enabled, improving initial page load performance by deferring the modal's rendering until it's needed.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/packages/bootstrap-vue-next/CHANGELOG.md#_snippet_30\n\n\n\n----------------------------------------\n\nTITLE: Vue Component Setup with TypeScript\nDESCRIPTION: This code snippet represents a Vue component's setup block, using TypeScript for type safety. It's used to define reactive properties, methods, and lifecycle hooks within the component. No dependencies are listed in the provided content.\nSOURCE: https://github.com/bootstrap-vue-next/bootstrap-vue-next/blob/main/apps/docs/src/docs/reference/utility-classes.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\n\n</script>\n```"
  }
]