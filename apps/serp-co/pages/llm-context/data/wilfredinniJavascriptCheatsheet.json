[
  {
    "owner": "wilfredinni",
    "repo": "javascript-cheatsheet",
    "content": "TITLE: Asynchronous error handling with Callbacks, Promises, and async/await\nDESCRIPTION: Explains multiple approaches to handle errors in asynchronous JavaScript code, including traditional callbacks, promise chains with .catch, and async/await with try-catch for cleaner syntax.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/error-handling.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nfs.readFile('nonexistent-file.txt', function(err, data) {\n  if (err) {\n    console.error('There was an error reading the file!', err);\n    return;\n  }\n  // Otherwise handle the data\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndoSomething()\n  .then(result => doSomethingElse(result))\n  .then(newResult => doAnotherThing(newResult))\n  .catch(error => console.error(error));\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function doSomethingAsync() {\n  try {\n    const result = await doSomething();\n    const newResult = await doSomethingElse(result);\n    await doAnotherThing(newResult);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables in JavaScript Using var, let, and const\nDESCRIPTION: Demonstrates how to declare variables in JavaScript using var, let, and const keywords. Includes explanations of scoping rules: var is function-scoped and hoisted, let and const are block-scoped. Shows that const variables cannot be reassigned but objects and arrays declared with const can be mutated.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/basics.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar name = \"John\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet age = 25;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst pi = 3.14159;\n```\n\n----------------------------------------\n\nTITLE: Logging Variable Values Using console.log in JavaScript\nDESCRIPTION: Demonstrates using console.log() to output variable values to the console. It includes logging single variables, multiple values, string substitution, and printing objects/arrays for debugging purposes. It requires a JavaScript runtime environment with a console, such as Node.js or a browser console. Inputs are variable values; outputs are formatted console messages. Excessive use may slow performance; best used temporarily during development.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/debugging.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = 10;\nconsole.log(x);  // Outputs: 10\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = 10;\nlet y = 20;\nconsole.log(x, y);  // Outputs: 10 20\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet name = 'Alice';\nconsole.log('Hello, %s', name);  // Outputs: Hello, Alice\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet obj = {a: 1, b: 2, c: 3};\nconsole.log(obj);  // Outputs: { a: 1, b: 2, c: 3 }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet arr = [1, 2, 3, 4, 5];\nconsole.log(arr);  // Outputs: [ 1, 2, 3, 4, 5 ]\n```\n\n----------------------------------------\n\nTITLE: Using Array.filter() to create a subset array\nDESCRIPTION: Shows how `filter()` creates a new array with elements passing a test, such as being greater than 13. It outputs an array of matching elements or an empty array if none match. Inputs are arrays of numbers, output is a filtered subset.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet numbers = [5, 12, 8, 130, 44];\nlet isLargeNumber = (element) => element > 13;\nlet filtered = numbers.filter(isLargeNumber); // filtered is [130, 44]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet numbers = [5, 12, 8, 10, 4];\nlet isLargeNumber = (element) => element > 13;\nlet filtered = numbers.filter(isLargeNumber); // filtered is []\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicates from an Array - JavaScript\nDESCRIPTION: This snippet demonstrates how to remove duplicate values from an array using the JavaScript Set object.  It converts the array to a Set, which automatically removes duplicates, and then converts it back to an array using the spread syntax. The resulting array contains only unique elements.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/sets.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet array = [1, 2, 2, 3, 4, 4, 5];\nlet uniqueArray = [...new Set(array)];\nconsole.log(uniqueArray); // Outputs: [1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Measuring Execution Time Using console.time and console.timeEnd in JavaScript\nDESCRIPTION: Illustrates timing code execution using console.time() to start a timer and console.timeEnd() to stop it and output elapsed time in milliseconds. Requires consistent label string for start and end calls. Useful for performance benchmarking of code blocks. Outputs elapsed time labeled with the provided string.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/debugging.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.time('Array processing');\n\n// Some array processing to measure\nlet array = [];\nfor(let i = 0; i < 1000000; i++) {\n  array.push(i);\n}\n\nconsole.timeEnd('Array processing');\n```\n\n----------------------------------------\n\nTITLE: Basic try...catch error handling in JavaScript\nDESCRIPTION: Demonstrates capturing runtime errors using try...catch blocks. The first snippet shows general usage, while the second illustrates handling a specific error when a variable is undefined.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/error-handling.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {\n  // Code that may throw an error\n} catch (error) {\n  // Code to handle the error\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {\n  let x = y; // y is not defined, so an error is thrown\n} catch (error) {\n  console.log(error.message); // Outputs: \"y is not defined\"\n}\n```\n\n----------------------------------------\n\nTITLE: Arrow Function Omitting Parentheses for Single Parameter in JavaScript\nDESCRIPTION: Declares an arrow function 'square' that takes a single argument and returns its square. Parentheses around the parameter are omitted since there is only one. Demonstrates succinct function definition and usage.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/functions.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet square = x => x * x;\n\nlet result = square(5); // result is now 25\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'this' Behavior in Regular and Arrow Functions in JavaScript\nDESCRIPTION: Illustrates the difference in 'this' binding between regular functions and arrow functions when used inside object methods. The object 'obj1' returns an anonymous regular function, leading to 'this' being undefined (or window/global), while 'obj2' returns an arrow function, which lexically binds 'this' to the enclosing context and prints the property 'value'.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/functions.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Regular function\nlet obj1 = {\n  value: 'a',\n  createAnonFunction: function() {\n    return function() {\n      console.log(this.value);\n    };\n  }\n};\n\nobj1.createAnonFunction()(); // undefined\n\n// Arrow function\nlet obj2 = {\n  value: 'a',\n  createArrowFunction: function() {\n    return () => {\n      console.log(this.value);\n    };\n  }\n};\n\nobj2.createArrowFunction()(); // 'a'\n```\n\n----------------------------------------\n\nTITLE: Sorting Array Numerically with Compare Function\nDESCRIPTION: To sort numbers correctly, the `sort()` method requires a compare function. This function determines the order based on the return value (negative, positive, or zero).\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nlet numbers = [40, 1, 5, 200];\nnumbers.sort(function(a, b) {\n  return a - b;\n}); // numbers is now [1, 5, 40, 200]\n```\n\n----------------------------------------\n\nTITLE: Declaring a Function with Function Declaration in JavaScript\nDESCRIPTION: Defines a function using the function declaration syntax, which is hoisted, allowing the function to be called before the declaration. No dependencies are needed. The function takes no arguments and prints 'Hello, world!' to the console; it does not return any value. The function is called by its name followed by parentheses.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/functions.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction greet() {\n  console.log(\"Hello, world!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Regular Function Expressions and Arrow Functions in JavaScript\nDESCRIPTION: Compares a regular function expression and an equivalent arrow function for adding two numbers. The examples illustrate syntactic differences. Both functions accept two arguments and return their sum; differences in 'this' binding and hoisting are not shown here but are discussed in context.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/functions.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Regular function\nlet add = function(a, b) {\n  return a + b;\n}\n\n// Arrow function\nlet add = (a, b) => a + b;\n```\n\n----------------------------------------\n\nTITLE: Anonymous Function Assigned to a Variable in JavaScript\nDESCRIPTION: Shows the assignment of an anonymous function to a variable 'greet', enabling function invocation via the variable. Useful for scenarios where a named function is unnecessary. The function prints to the console and is called immediately after assignment.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/functions.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet greet = function() {\n  console.log(\"Hello, world!\");\n}\n\ngreet(); // Calls the function and prints \"Hello, world!\" to the console\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Properties Dot Notation\nDESCRIPTION: This snippet shows how to access object properties using dot notation.  It defines an object `obj` and then uses `console.log()` to output the value of property `key1`. The expected output is the string \"value1\".\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/objects.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet obj = {\n  key1: 'value1',\n  key2: 'value2',\n  key3: 'value3'\n};\n\nconsole.log(obj.key1); // Outputs: 'value1'\n```\n\n----------------------------------------\n\nTITLE: Defining and using custom Error classes in JavaScript\nDESCRIPTION: Shows how to create a custom error type by extending the built-in Error class to represent specific error conditions, such as division by zero, and how to handle these errors distinctly.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/error-handling.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass DivisionByZeroError extends Error {\n  constructor() {\n    super(\"Division by zero is not allowed\");\n    this.name = \"DivisionByZeroError\";\n  }\n}\n\nfunction divide(a, b) {\n  if (b === 0) {\n    throw new DivisionByZeroError();\n  }\n  return a / b;\n}\n\ntry {\n  console.log(divide(1, 0));\n} catch (error) {\n  if (error instanceof DivisionByZeroError) {\n    console.log(error.message);\n  } else {\n    throw error;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Files Asynchronously using fs.promises\nDESCRIPTION: Defines an asynchronous function `deleteFileAsync` that removes a file at the specified `filePath` using `fs.promises.unlink`. This is the standard method for deleting files in Node.js. It uses async/await for asynchronous operation and includes error handling.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/directory-files.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs').promises;\n\nasync function deleteFileAsync(filePath) {\n  try {\n    await fs.unlink(filePath);\n    console.log('File deleted successfully');\n  } catch (err) {\n    console.error('An error occurred:', err);\n  }\n}\n\ndeleteFileAsync('example.txt');\n```\n\n----------------------------------------\n\nTITLE: Creating Directories Asynchronously using fs.promises\nDESCRIPTION: Defines an asynchronous function `createDirectoryAsync` that creates a directory at the specified `dirPath` using `fs.promises.mkdir`. The `{ recursive: true }` option ensures that parent directories are also created if they don't exist. It uses async/await and includes error handling.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/directory-files.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs').promises;\n\nasync function createDirectoryAsync(dirPath) {\n  try {\n    await fs.mkdir(dirPath, { recursive: true });\n    console.log('Directory created successfully');\n  } catch (err) {\n    console.error('An error occurred:', err);\n  }\n}\n\ncreateDirectoryAsync('exampleDir');\n```\n\n----------------------------------------\n\nTITLE: Updating Object Properties Dot Notation\nDESCRIPTION: This snippet shows how to update the value of a property using dot notation.  It defines an object `obj`, then changes the value of the `key1` property, and logs the updated value to the console. The expected output is the string \"new value1\".\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/objects.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet obj = {\n  key1: 'value1',\n  key2: 'value2',\n  key3: 'value3'\n};\n\nobj.key1 = 'new value1';\nconsole.log(obj.key1); // Outputs: 'new value1'\n```\n\n----------------------------------------\n\nTITLE: Error propagation through call stack in JavaScript\nDESCRIPTION: Illustrates how errors thrown in nested functions propagate up the call stack until they are caught by an error handler. Demonstrates passing an error from a deeper function to a try-catch block at the top level.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/error-handling.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction function1() {\n  function2();\n}\n\nfunction function2() {\n  throw new Error(\"An error occurred\");\n}\n\ntry {\n  function1();\n} catch (error) {\n  console.log(\"Caught an error: \" + error.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Array.find() to locate first matching element\nDESCRIPTION: Demonstrates the use of `find()` method to retrieve the first element in an array that satisfies a condition; returns undefined if no match is found. Requires an array and a predicate function such as `isLargeNumber`. Inputs are arrays of numbers, output is either the matching element or undefined.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet numbers = [5, 12, 8, 130, 44];\nlet isLargeNumber = (element) => element > 13;\nlet found = numbers.find(isLargeNumber); // found is 130\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet numbers = [5, 12, 8, 10, 4];\nlet isLargeNumber = (element) => element > 13;\nlet found = numbers.find(isLargeNumber); // found is undefined\n```\n\n----------------------------------------\n\nTITLE: Writing Files Asynchronously using fs.promises\nDESCRIPTION: Defines an asynchronous function `writeFileAsync` to write `content` to a file at the given `filePath` using `fs.promises.writeFile`. This function will overwrite the file if it already exists or create it if it does not. It utilizes async/await for promise resolution and includes error handling.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/directory-files.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs').promises;\n\nasync function writeFileAsync(filePath, content) {\n  try {\n    await fs.writeFile(filePath, content);\n    console.log('File written successfully');\n  } catch (err) {\n    console.error('An error occurred:', err);\n  }\n}\n\nwriteFileAsync('example.txt', 'Hello, World!');\n```\n\n----------------------------------------\n\nTITLE: Calling a Function with Arguments and Capturing Return Value in JavaScript\nDESCRIPTION: Demonstrates invoking the 'add' function with numeric arguments 1 and 2, showing assignment of the returned value to a variable. Expects 'add' to be in scope. This example highlights argument passing and return value extraction.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/functions.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet sum = add(1, 2); // 1 is the argument for 'a', and 2 is the argument for 'b'\n```\n\n----------------------------------------\n\nTITLE: Pausing Execution Using the debugger Statement in JavaScript\nDESCRIPTION: Explains usage of the debugger statement to programmatically pause code execution and invoke the debugging environment when a developer console or debugger is attached. Helps in stepping through code, inspecting variables, and analyzing program flow. Inputs are any code context; output is the paused state allowing interactive debugging. Should be removed after debugging to avoid unexpected pauses.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/debugging.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction potentiallyBuggyFunction() {\n  let obj = { a: 1, b: 2 };\n\n  // Insert debugger statement\n  debugger;\n\n  // Rest of the function\n  obj.c = obj.a + obj.b;\n  return obj.c;\n}\n\npotentiallyBuggyFunction();\n```\n\n----------------------------------------\n\nTITLE: Function with Return Statement Example in JavaScript\nDESCRIPTION: Defines a function 'add' that returns the sum of two arguments. The function is called, and its result is stored in 'sum'. This snippet emphasizes returning values using the 'return' statement, a fundamental in function behavior.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/functions.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction add(a, b) {\n  return a + b;\n}\n\nlet sum = add(1, 2); // sum is now 3\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from Array with Splice\nDESCRIPTION: The `splice()` method changes the contents of an array by removing elements. It modifies the original array and returns an array containing the deleted elements.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'orange', 'pineapple', 'mango'];\nlet removedFruits = fruits.splice(2, 2); // removedFruits is ['orange', 'pineapple'], fruits is ['apple', 'banana', 'mango']\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Operators in Conditional Statements in JavaScript\nDESCRIPTION: Example of combining comparison and logical operators to create complex conditions in an if statement.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet a = 10;\nlet b = 20;\nif (a > 5 && b > 10) {\n  console.log('Both conditions are true');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using an Arrow Function in JavaScript\nDESCRIPTION: Demonstrates defining a function with arrow function syntax, making it concise and automatically binding 'this'. The function prints a message to the console. Arrow functions are always anonymous and must be assigned to a variable for reuse.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/functions.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet greet = () => {\n  console.log(\"Hello, world!\");\n}\n\ngreet(); // Calls the function and prints \"Hello, world!\" to the console\n```\n\n----------------------------------------\n\nTITLE: Using Array.flatMap() for mapping and flattening in one step\nDESCRIPTION: Shows `flatMap()` applies a mapping function to each element and flattens the result by one level. Useful for transforming arrays with nested structures or generating flattened arrays.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet arr = [1, 2, 3, 4];\nlet newArr = arr.flatMap(x => [x * 2]); // newArr is [2, 4, 6, 8]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet arr = [\"it's Sunny in\", \"\", \"California\"];\nlet newArr = arr.flatMap(x => x.split(' ')); // newArr is [\"it's\", \"Sunny\", \"in\", \"\", \"California\"]\n```\n\n----------------------------------------\n\nTITLE: Throwing errors in JavaScript functions\nDESCRIPTION: Demonstrates how to throw errors manually within functions using the throw statement, allowing custom error messages and control flow management when invalid conditions are encountered.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/error-handling.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction divide(a, b) {\n  if (b === 0) {\n    throw new Error(\"Division by zero is not allowed\");\n  }\n  return a / b;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Strict Inequality Operator in JavaScript\nDESCRIPTION: Examples of using the strict inequality (!==) operator which checks if values or types are different without coercion.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(5 !== 4); // true\nconsole.log(5 !== '5'); // true, because the types are different\n```\n\n----------------------------------------\n\nTITLE: Object Method with 'this' Keyword\nDESCRIPTION: This snippet shows how to use the `this` keyword within an object method to refer to the object's properties.  It defines an object `obj` with a method that logs the value of the `property1` property using `this.property1`.  The output is 'Property1 is value1' when `obj.myMethod()` is called.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/objects.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nlet obj = {\n  property1: 'value1',\n  property2: 'value2',\n  myMethod: function() {\n    console.log('Property1 is ' + this.property1);\n  }\n};\n\n// Call the method\nobj.myMethod(); // Outputs: 'Property1 is value1'\n```\n\n----------------------------------------\n\nTITLE: Slicing Array from Start to End\nDESCRIPTION: If the `end` index is not specified, the `slice()` method will return a shallow copy of all elements from the `start` index to the end of the array. The original array is not modified.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'orange', 'pineapple', 'mango'];\nlet someFruits = fruits.slice(2); // someFruits is ['orange', 'pineapple', 'mango']\n```\n\n----------------------------------------\n\nTITLE: Displaying Data in Tabular Format Using console.table in JavaScript\nDESCRIPTION: Illustrates how to use console.table() to display arrays of objects in a structured table format on the console. Automatically includes an index column and object keys as headers, improving readability of complex data structures. Requires data structured as arrays or objects. Outputs formatted tables visible in most modern consoles.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/debugging.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet people = [\n  { name: 'Alice', age: 20 },\n  { name: 'Bob', age: 25 },\n  { name: 'Charlie', age: 30 }\n];\n\nconsole.table(people);\n```\n\n----------------------------------------\n\nTITLE: Using Array.forEach() for iteration over elements\nDESCRIPTION: Illustrates how `forEach()` executes a function (e.g., console.log) for each array element without returning a value. Suitable for side effects like logging or applying functions that do not produce a new array.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet numbers = [1, 2, 3, 4, 5];\nnumbers.forEach((element) => console.log(element));\n```\n\n----------------------------------------\n\nTITLE: Calling a Hoisted Function Declaration Before Its Definition in JavaScript\nDESCRIPTION: Shows that a function declared with function declaration syntax can be invoked before its textual definition in code because of hoisting. No dependencies are necessary. This snippet demonstrates a function printing to the console.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/functions.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ngreet(); // This will work\n\nfunction greet() {\n  console.log(\"Hello, world!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Arrow Function with Parameters and Expression Body in JavaScript\nDESCRIPTION: Defines an arrow function 'add' that takes two arguments and immediately returns their sum. Arrow functions with an expression body implicitly return the result of the expression. This function is invoked to demonstrate the concise syntax and return behavior.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/functions.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet add = (a, b) => a + b;\n\nlet sum = add(1, 2); // sum is now 3\n```\n\n----------------------------------------\n\nTITLE: Extracting Substrings with slice() in JavaScript\nDESCRIPTION: The `slice()` method extracts a section of a string and returns it as a new string.  It takes two arguments: the start index (inclusive) and the end index (exclusive). If the end index is omitted, it extracts to the end of the string. Negative indexes can also be used.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet str = \"Hello, World!\";\nlet slicedStr = str.slice(7, 12);\n\nconsole.log(slicedStr); // Outputs: \"World\"\n```\n\n----------------------------------------\n\nTITLE: Reading File Content with fs.promises (Example)\nDESCRIPTION: Demonstrates how to asynchronously read the content of a file named 'example.txt' using the promise-based `fs.promises.readFile` function in Node.js. It uses async/await syntax and includes basic error handling with a try...catch block. This snippet shows a direct implementation example.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/directory-files.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs').promises;\n\nasync function readFileAsync() {\n  try {\n    const data = await fs.readFile('example.txt', 'utf8');\n    console.log('File content:', data);\n  } catch (err) {\n    console.error('An error occurred:', err);\n  }\n}\n\nreadFileAsync();\n```\n\n----------------------------------------\n\nTITLE: Working with Array Length Property in JavaScript\nDESCRIPTION: Shows how to use the length property to get the number of elements in an array and how to modify the array length to remove elements.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/arrays.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'cherry'];\nconsole.log(fruits.length); // logs 3\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfruits.length = 2;\nconsole.log(fruits); // logs ['apple', 'banana']\n```\n\n----------------------------------------\n\nTITLE: Using finally block for cleanup operations\nDESCRIPTION: Shows how to add a finally block after try...catch to execute code regardless of whether an error occurred, typically used for cleanup tasks like closing resources.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/error-handling.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {\n  // Code that may throw an error\n} catch (error) {\n  // Code to handle the error\n} finally {\n  // Code to be executed regardless of an error\n}\n```\n\n----------------------------------------\n\nTITLE: Using Ternary Operator in JavaScript\nDESCRIPTION: Example of the ternary (conditional) operator as a shorthand for simple if-else statements, returning different values based on a condition.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlet a = 10;\nlet result = a > 5 ? 'a is greater than 5' : 'a is not greater than 5';\nconsole.log(result); // prints \"a is greater than 5\"\n```\n\n----------------------------------------\n\nTITLE: Finding First Index of Element with indexOf\nDESCRIPTION: The `indexOf()` method searches an array for a specific element and returns the index of the first occurrence. It returns -1 if the element is not found.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'orange'];\nlet index = fruits.indexOf('banana'); // index is 1\n```\n\n----------------------------------------\n\nTITLE: Joining Array Elements into String (Default Separator)\nDESCRIPTION: The `join()` method is used to join all elements of an array into a string. The elements will be separated by a specified separator or a comma (`,`) by default.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'orange'];\nlet fruitsString = fruits.join(); // fruitsString is 'apple,banana,orange'\n```\n\n----------------------------------------\n\nTITLE: Using Arithmetic Operators in JavaScript\nDESCRIPTION: Provides examples of the basic arithmetic operators in JavaScript, including addition, subtraction, multiplication, division, modulus, increment, decrement, and exponentiation. Each snippet demonstrates the operation on numbers or variables and shows expected results.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/basics.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet result = 5 + 10; // result is 15\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet result = 10 - 5; // result is 5\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet result = 5 * 10; // result is 50\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet result = 10 / 5; // result is 2\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet result = 10 % 3; // result is 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet num = 5;\nnum++; // num is now 6\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet num = 5;\nnum--; // num is now 4\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet result = 5 ** 2; // result is 25\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Arrays with Array Concat\nDESCRIPTION: The `concat()` method is used to merge two or more arrays into one. This example shows merging three arrays. It does not change the existing arrays, but instead returns a new array.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits1 = ['apple', 'banana'];\nlet fruits2 = ['orange', 'pineapple'];\nlet fruits3 = ['mango', 'kiwi'];\nlet allFruits = fruits1.concat(fruits2, fruits3); // allFruits is ['apple', 'banana', 'orange', 'pineapple', 'mango', 'kiwi']\n```\n\n----------------------------------------\n\nTITLE: Counting Occurrences Using console.count in JavaScript\nDESCRIPTION: Uses console.count() to count and log how many times a particular label or call has been made during code execution. Accepts an optional label string, defaulting to 'default' if omitted. Useful for determining how often specific code paths run. Outputs the label with the incremented count each call.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/debugging.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfor(let i = 0; i < 5; i++) {\n  console.count('Loop counter');\n}\n```\n\n----------------------------------------\n\nTITLE: Using If-Else If Statements in JavaScript\nDESCRIPTION: Example of using if with else if to test multiple conditions in sequence, executing the first matching condition's code block.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet a = 5;\nif (a > 5) {\n  console.log('a is greater than 5');\n} else if (a == 5) {\n  console.log('a is equal to 5');\n}\n```\n\n----------------------------------------\n\nTITLE: Using Array.some() to test for at least one match\nDESCRIPTION: Demonstrates `some()` to verify if at least one element satisfies a condition, such as being even. Outputs true if any match exists, false otherwise.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet numbers = [1, 2, 3, 4, 5];\nlet isEven = (element) => element % 2 === 0;\nlet result = numbers.some(isEven); // result is true\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet numbers = [1, 3, 5, 7, 9];\nlet isEven = (element) => element % 2 === 0;\nlet result = numbers.some(isEven); // result is false\n```\n\n----------------------------------------\n\nTITLE: Handling Element Not Found with indexOf\nDESCRIPTION: The `indexOf()` method returns -1 if the specified element is not present in the array. It performs a strict equality comparison.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'orange'];\nlet index = fruits.indexOf('pineapple'); // index is -1\n```\n\n----------------------------------------\n\nTITLE: Using Array.includes() to verify presence of a value\nDESCRIPTION: Demonstrates checking for a specific element in an array using `includes()`. Returns true if the value exists in the array, false otherwise.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'orange'];\nlet result = fruits.includes('banana'); // result is true\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'orange'];\nlet result = fruits.includes('pineapple'); // result is false\n```\n\n----------------------------------------\n\nTITLE: Using Break Statement in For Loop in JavaScript\nDESCRIPTION: Example of using the break statement to exit a for loop prematurely when a specific condition is met.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  console.log(i);\n}\n// This will print the numbers 0 through 4 to the console\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Array Values Using Array.values in JavaScript\nDESCRIPTION: This snippet demonstrates the Array.prototype.values() method to create an iterator over the values (elements) of an array. No external dependencies are required, and the syntax is available in ES6 and newer JavaScript environments. The for-of loop iterates through each value and logs it to the console. Input should be a JavaScript array, and output is each element sequentially passed to the loop. The iterator yields array elements, not their indices.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet array = ['a', 'b', 'c'];\nlet iterator = array.values();\n\nfor (let value of iterator) {\n  console.log(value); // logs 'a', then 'b', then 'c'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Arrays from Iterables with Array.from in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Array.from() method in JavaScript to create a new array from an iterable or array-like object (such as a string). It does not require any additional dependencies and works natively in ES6 and later JavaScript environments. The input is an iterable object (string), and the output is a new array where each element corresponds to a character of the input string. Limitations: The input must be iterable or array-like; non-iterable inputs will throw an error.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet string = 'hello';\nlet array = Array.from(string); // array is ['h', 'e', 'l', 'l', 'o']\n```\n\n----------------------------------------\n\nTITLE: Implementing For Loop in JavaScript\nDESCRIPTION: This code snippet demonstrates the use of a `for` loop in JavaScript. It initializes a counter, sets a condition for continuation, and increments the counter after each iteration. This specific example prints numbers from 0 to 4 to the console. No dependencies are required for the code to work.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfor (initialization; condition; finalExpression) {\n  // code to be executed on each loop iteration\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Anonymous Function as Argument using setTimeout in JavaScript\nDESCRIPTION: Passes an anonymous function as a callback argument to 'setTimeout'. No dependencies are required beyond the browser or runtime environment providing 'setTimeout'. The function prints a message after a 1-second (1000 ms) delay. Illustrates use of anonymous functions in asynchronous programming.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/functions.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetTimeout(function() {\n  console.log(\"This message is delayed by 1 second.\");\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Using Array.reduce() for accumulating array values\nDESCRIPTION: Demonstrates the `reduce()` method to combine array elements into a single value, such as summing numbers with or without an initial accumulator value. Inputs are arrays of numbers, output is the computed sum.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet numbers = [1, 2, 3, 4];\nlet sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue); // sum is 10\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet numbers = [1, 2, 3, 4];\nlet sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 10); // sum is 20\n```\n\n----------------------------------------\n\nTITLE: Invoking a Declared Function in JavaScript\nDESCRIPTION: Demonstrates calling a declared function by its name with parentheses. Assumes the function is defined within the current or outer scope. No parameters are passed, and the function execution results in an action such as printing to the console.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/functions.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngreet(); // Calls the function and prints \"Hello, world!\" to the console\n```\n\n----------------------------------------\n\nTITLE: Iterating Object Properties For...In Loop\nDESCRIPTION: This code snippet iterates over the properties of an object using a `for...in` loop and `hasOwnProperty` to avoid inherited properties. It defines an object `obj`, and then loops through each property, logging the key-value pair to the console. The expected output is each key-value pair in the object. The `hasOwnProperty` method ensures that only the object's own properties are iterated over.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/objects.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlet obj = {\n  key1: 'value1',\n  key2: 'value2',\n  key3: 'value3'\n};\n\nfor (let key in obj) {\n  if (obj.hasOwnProperty(key)) {\n    console.log(key + ': ' + obj[key]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Entries of a JavaScript Map Using entries() - JavaScript\nDESCRIPTION: This snippet shows how to use the entries() method of a Map to access key-value pairs during iteration. The loop delivers each pair in insertion order as [key, value] arrays. Prerequisites are a populated Map object. The output includes each key and its value.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/map.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new Map()\nmap.set('name', 'Bob').set('age', 20)\nfor (let [key, value] of map.entries()) {\n  console.log(`${key}: ${value}`)\n}\n\n// name: Bob\n// age: 20\n\n```\n\n----------------------------------------\n\nTITLE: Using Array.isArray() to check for array type\nDESCRIPTION: Shows the use of `Array.isArray()` to determine if a value is an array, returning true if it is and false otherwise. Useful for type checking before performing array-specific operations.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'orange'];\nlet result = Array.isArray(fruits); // result is true\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet number = 123;\nlet result = Array.isArray(number); // result is false\n```\n\n----------------------------------------\n\nTITLE: Iterating Over JavaScript Map Using for...of Loop - JavaScript\nDESCRIPTION: This snippet iterates over the entries of a Map using a for...of loop. Each iteration unpacks a key-value pair, making both available inside the loop body. The Map must be initialized with entries beforehand. The loop outputs every key-value pair in insertion order.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/map.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new Map()\nmap.set('name', 'Bob').set('age', 20)\nfor (const [key, value] of map) {\n  console.log(`${key}: ${value}`)\n}\n\n// name: Bob\n// age: 20\n\n```\n\n----------------------------------------\n\nTITLE: Checking Value Existence in a Set - JavaScript\nDESCRIPTION: This example shows how to check if a value exists in a Set using the `has` method. The `has` method returns a boolean. It creates a set `mySet` with initial values and checks for the existence of 1 (which exists) and 6 (which doesn't).\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/sets.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet mySet = new Set([1, 2, 3, 4, 5]);\n\nconsole.log(mySet.has(1)); // Outputs: true\nconsole.log(mySet.has(6)); // Outputs: false\n```\n\n----------------------------------------\n\nTITLE: Creating and Mapping Arrays with Array.from in JavaScript\nDESCRIPTION: This snippet shows the use of Array.from() to not only generate a new array from an existing array, but also apply a map function to each element. The map function is provided as the second argument to Array.from(), doubling each original array element. No external dependencies are required, and the method is available in ES6 or above. Expected input is an array, with an output array transformed by the provided mapping function. Note that the map function operates on each element independently.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet numbers = [1, 2, 3, 4];\nlet doubles = Array.from(numbers, x => x * 2); // doubles is [2, 4, 6, 8]\n```\n\n----------------------------------------\n\nTITLE: Initializing a JavaScript Map with Key-Value Pairs - JavaScript\nDESCRIPTION: This snippet demonstrates initializing a Map with an array of key-value pair arrays. Each inner array contains two elements: the key and its associated value. This requires no dependencies. The input is an array of arrays, and the resulting Map contains the given entries in insertion order.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/map.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new Map([\n  ['id', 1], // key: 'id', value: 1\n  ['name', 'Alice'], // key: 'name', value: 'Alice'\n])\n\n```\n\n----------------------------------------\n\nTITLE: Using Switch Statement in JavaScript\nDESCRIPTION: Example of a switch statement that evaluates an expression and executes code based on matching case values, with a default fallback.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruit = 'apple';\nswitch (fruit) {\n  case 'banana':\n    console.log('I am a banana');\n    break;\n  case 'apple':\n    console.log('I am an apple');\n    break;\n  default:\n    console.log('I am not a banana or an apple');\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Set (for...of) - JavaScript\nDESCRIPTION: Shows how to iterate over a Set using a `for...of` loop. Each value in the Set is printed to the console.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/sets.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet mySet = new Set([1, 2, 3, 4, 5]);\n\nfor (let value of mySet) {\n  console.log(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript Map Object - JavaScript\nDESCRIPTION: This snippet creates an empty Map instance using the JavaScript Map constructor. The Map object allows storing key-value pairs where keys can be any data type. No dependencies are required. No parameters are used in this example, and the created Map is initially empty.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/map.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new Map()\n\n```\n\n----------------------------------------\n\nTITLE: Renaming Files Asynchronously using fs.promises\nDESCRIPTION: Defines an asynchronous function `renameFileAsync` that renames a file from `oldPath` to `newPath` using `fs.promises.rename`. This function moves or renames a file or directory. It uses async/await and includes error handling.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/directory-files.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs').promises;\n\nasync function renameFileAsync(old\n\nPath\n\n, newPath) {\n  try {\n    await fs.rename(oldPath, newPath);\n    console.log('File renamed successfully');\n  } catch (err) {\n    console.error('An error occurred:', err);\n  }\n}\n\nrenameFileAsync('oldName.txt', 'newName.txt');\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Set (forEach) - JavaScript\nDESCRIPTION: Demonstrates iterating over a Set using the `forEach` method.  A function is executed for each value in the Set, in this case logging the value to the console.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/sets.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet mySet = new Set([1, 2, 3, 4, 5]);\n\nmySet.forEach(function(value) {\n  console.log(value);\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Entries from a JavaScript Map Using delete() - JavaScript\nDESCRIPTION: This snippet removes a key-value pair from a Map with the delete(key) method. The input is the key to be deleted. The output is true if removal succeeded, false if the key is not present. The snippet also shows the updated map size. The method changes the size property of the Map.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/map.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmap.delete('age') // true as key 'age' exists\nmap.delete('none') // false as key 'none' do not exist\n\n// Check size\nmap.size //  3\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Empty Directories using fs.promises\nDESCRIPTION: Defines an asynchronous function `deleteDirectoryAsync` that removes an empty directory at the specified `dirPath` using `fs.promises.rmdir`. This method requires the directory to be empty. It uses async/await for asynchronous operation and includes error handling.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/directory-files.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs').promises;\n\nasync function deleteDirectoryAsync(dirPath) {\n  try {\n    await fs.rmdir(dirPath);\n    console.log('Directory deleted successfully');\n  } catch (err) {\n    console.error('An error occurred:', err);\n  }\n}\n\ndeleteDirectoryAsync('exampleDir');\n```\n\n----------------------------------------\n\nTITLE: Checking Property Existence hasOwnProperty\nDESCRIPTION: This snippet demonstrates the use of the `hasOwnProperty` method to check if an object has a specific property as its own property. It defines an object `obj` and uses `console.log()` to display if the properties `key1` and `key3` exist.  The expected output is `true` and `false` respectively.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/objects.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlet obj = {\n  key1: 'value1',\n  key2: 'value2'\n};\n\nconsole.log(obj.hasOwnProperty('key1')); // Outputs: true\nconsole.log(obj.hasOwnProperty('key3')); // Outputs: false\n```\n\n----------------------------------------\n\nTITLE: Sorting Array with Default String Comparison\nDESCRIPTION: The `sort()` method sorts the elements of an array in place. The default sort order converts elements to strings and compares their UTF-16 code unit values.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['banana', 'apple', 'orange'];\nfruits.sort(); // fruits is now ['apple', 'banana', 'orange']\n```\n\n----------------------------------------\n\nTITLE: Checking Property Existence In Operator\nDESCRIPTION: This snippet demonstrates using the `in` operator to check if a property exists in an object.  It creates an object `obj`, and then uses `console.log()` to output whether `key1` and `key3` exist.  The expected output is `true` and `false`.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/objects.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlet obj = {\n  key1: 'value1',\n  key2: 'value2'\n};\n\nconsole.log('key1' in obj); // Outputs: true\nconsole.log('key3' in obj); // Outputs: false\n```\n\n----------------------------------------\n\nTITLE: Appending Content to a File using fs.promises\nDESCRIPTION: Defines an asynchronous function `appendToFileAsync` that appends the provided `content` to the end of a file at `filePath` using `fs.promises.appendFile`. This method is suitable for adding data without overwriting existing content. It uses async/await and includes error handling.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/directory-files.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs').promises;\n\nasync function appendToFileAsync(filePath, content) {\n  try {\n    await fs.appendFile(filePath, content);\n    console.log('File updated successfully');\n  } catch (err) {\n    console.error('An error occurred:', err);\n  }\n}\n\nappendToFileAsync('example.txt', ' More content');\n```\n\n----------------------------------------\n\nTITLE: Adding Object Properties Dot Notation\nDESCRIPTION: This snippet demonstrates how to add a new property to an existing object using dot notation. It creates an object `obj` with two properties.  It then adds a new property `key3`, then displays it in the console.  The expected output is the string \"value3\".\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/objects.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet obj = {\n  key1: 'value1',\n  key2: 'value2'\n};\n\nobj.key3 = 'value3';\nconsole.log(obj.key3); // Outputs: 'value3'\n```\n\n----------------------------------------\n\nTITLE: Adding Object Properties Bracket Notation\nDESCRIPTION: This snippet shows how to add a new property to an existing object using bracket notation. It defines an object `obj` with two properties, then uses bracket notation to add the property `key3`.  The output is the string \"value3\".\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/objects.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet obj = {\n  key1: 'value1',\n  key2: 'value2'\n};\n\nobj['key3'] = 'value3';\nconsole.log(obj['key3']); // Outputs: 'value3'\n```\n\n----------------------------------------\n\nTITLE: Adding Single Element to Beginning with Array Unshift\nDESCRIPTION: The `unshift()` method is used to add one or more elements to the beginning of an array and returns the new length of the array. This method changes the length of the array.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['banana', 'orange'];\nfruits.unshift('apple'); // fruits is now ['apple', 'banana', 'orange']\n```\n\n----------------------------------------\n\nTITLE: Using Array.every() to test all elements\nDESCRIPTION: Shows how `every()` checks whether all array elements satisfy a condition (e.g., less than 40). Outputs a boolean indicating whether the condition holds for the entire array.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet numbers = [1, 30, 39, 29, 10, 13];\nlet isBelowThreshold = (currentValue) => currentValue < 40;\nlet result = numbers.every(isBelowThreshold); // result is true\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet numbers = [1, 30, 39, 50, 13];\nlet isBelowThreshold = (currentValue) => currentValue < 40;\nlet result = numbers.every(isBelowThreshold); // result is false\n```\n\n----------------------------------------\n\nTITLE: Adding Single Element to End with Array Push\nDESCRIPTION: The `push()` method adds one element to the end of an array. It modifies the original array and returns the new length. It is a destructive method.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['apple', 'banana'];\nfruits.push('orange'); // fruits is now ['apple', 'banana', 'orange']\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Elements to Beginning with Array Unshift\nDESCRIPTION: The `unshift()` method is used to add one or more elements to the beginning of an array and returns the new length of the array. This method changes the length of the array.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['banana', 'orange'];\nfruits.unshift('apple', 'pineapple'); // fruits is now ['apple', 'pineapple', 'banana', 'orange']\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Array Indices Using Array.keys in JavaScript\nDESCRIPTION: This snippet illustrates how to use the Array.prototype.keys() method to obtain an iterator over the indices (keys) of a JavaScript array. No dependencies are needed, and it is natively supported in ES6+. The for-of loop is used to traverse the iterator, logging each index to the console. The method returns indices, not array values. Inputs: a JavaScript array. Output: Iteration over numeric indices (from 0 up to array.length - 1).\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet array = ['a', 'b', 'c'];\nlet iterator = array.keys();\n\nfor (let key of iterator) {\n  console.log(key); // logs 0, then 1, then 2\n}\n```\n\n----------------------------------------\n\nTITLE: Using console.log Function\nDESCRIPTION: Demonstrates how to use the `console.log()` function in JavaScript to print output to the console.  This is a powerful tool for debugging and understanding code execution.  No dependencies are required.  The input is any JavaScript value or a series of values, and the output is displayed on the console.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/basics.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"Hello, World!\"); // prints \"Hello, World!\" to the console\n```\n\n----------------------------------------\n\nTITLE: Replacing Substrings with replace() in JavaScript\nDESCRIPTION: The `replace()` method replaces a specified value (or a regular expression) with another value in a string.  It returns a new string with the replacement made. Only the first match is replaced if the first argument is a string, otherwise all matches are replaced if the first argument is a regular expression with the global (g) flag.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet str = \"Hello, World!\";\nlet newStr = str.replace(\"World\", \"Universe\");\n\nconsole.log(newStr); // Outputs: \"Hello, Universe!\"\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Keys of a JavaScript Map Using keys() - JavaScript\nDESCRIPTION: This snippet shows how to iterate over the keys of a Map instance with the keys() method. The loop variable receives each key in the Map in the order inserted. No external dependencies are required, and only keys are accessed during iteration.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/map.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new Map()\nmap.set('name', 'Bob').set('age', 20)\nfor (const key of map.keys()) {\n  console.log(`${key}`)\n}\n\n// name\n// age\n\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Array Entries Using Array.entries in JavaScript\nDESCRIPTION: This snippet showcases the Array.prototype.entries() method, which returns an iterator over key/value pairs of a JavaScript array as [index, value] tuples. No additional dependencies are necessary, with ES6 or later support required. The code uses a for-of loop with destructuring to access both the index and value during iteration, logging both to the console. The expected input is an array; the output consists of the index-value pairs. Limitations: Outputs arrays of length two ([index, value]) per iteration.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet array = ['a', 'b', 'c'];\nlet iterator = array.entries();\n\nfor (let [index, value] of iterator) {\n  console.log(`index: ${index}, value: ${value}`); \n  // logs 'index: 0, value: a', then 'index: 1, value: b', then 'index: 2, value: c'\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Values Using Comparison Operators in JavaScript\nDESCRIPTION: Illustrates how to use JavaScript comparison operators to compare values, both with and without type coercion. Includes equality (==), inequality (!=), strict equality (===), strict inequality (!==), and relational operators like greater than, less than, and their inclusive variants. Demonstrates typical usage in conditional expressions.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/basics.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n5 == 5; // true\n'5' == 5; // true, because it does type coercion\n```\n\nLANGUAGE: javascript\nCODE:\n```\n5 != 4; // true\n```\n\nLANGUAGE: javascript\nCODE:\n```\n5 === 5; // true\n'5' === 5; // false, because the types are different\n```\n\nLANGUAGE: javascript\nCODE:\n```\n5 !== '5'; // true\n```\n\nLANGUAGE: javascript\nCODE:\n```\n10 > 5; // true\n```\n\nLANGUAGE: javascript\nCODE:\n```\n5 < 10; // true\n```\n\nLANGUAGE: javascript\nCODE:\n```\n10 >= 10; // true\n```\n\nLANGUAGE: javascript\nCODE:\n```\n5 <= 5; // true\n```\n\n----------------------------------------\n\nTITLE: Splitting String into Array with split() in JavaScript\nDESCRIPTION: The `split()` method divides a string into an array of substrings, using a specified separator.  It takes the separator as an argument; if the separator is omitted, the entire string is returned as a single-element array. The original string is not modified.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet str = \"Hello, World!\";\nlet array = str.split(\", \");\n\nconsole.log(array); // Outputs: [\"Hello\", \"World!\"]\n```\n\n----------------------------------------\n\nTITLE: Slicing Array Portion by Indices\nDESCRIPTION: The `slice()` method returns a shallow copy of a portion of an array into a new array object selected from `start` to `end` (`end` not included). The original array will not be modified.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'orange', 'pineapple', 'mango'];\nlet citrusFruits = fruits.slice(2, 4); // citrusFruits is ['orange', 'pineapple']\n```\n\n----------------------------------------\n\nTITLE: Removing Whitespace with trimLeft/trimRight() in JavaScript\nDESCRIPTION: The `trimLeft()` method removes whitespace from the beginning of a string, while `trimRight()` removes whitespace from the end. Both methods return new strings and do not modify the original string. `trimStart()` is an alias for `trimLeft()` and `trimEnd()` is an alias for `trimRight()`.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet str = \"   Hello, World!   \";\nlet trimmedLeftStr = str.trimLeft();\nlet trimmedRightStr = str.trimRight();\n\nconsole.log(trimmedLeftStr); // Outputs: \"Hello, World!   \"\nconsole.log(trimmedRightStr); // Outputs: \"   Hello, World!\"\n```\n\n----------------------------------------\n\nTITLE: Outputting Stack Trace Using console.trace in JavaScript\nDESCRIPTION: Shows how console.trace() outputs the current call stack to the console, aiding in debugging by revealing the execution path leading to the trace call. Requires functions to be defined and called normally. Outputs a stack trace with function names in call order from current to earliest.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/debugging.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction firstFunction() {\n  secondFunction();\n}\n\nfunction secondFunction() {\n  thirdFunction();\n}\n\nfunction thirdFunction() {\n  console.trace();\n}\n\nfirstFunction();\n```\n\n----------------------------------------\n\nTITLE: Using Array.fill() to set array elements to a static value\nDESCRIPTION: Shows how `fill()` replaces elements in an array with a specified value, optionally within a range defined by start and end indices. Useful for initializing or resetting arrays.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet numbers = [1, 2, 3, 4, 5];\nnumbers.fill(0); // numbers is now [0, 0, 0, 0, 0]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet numbers = [1, 2, 3, 4, 5];\nnumbers.fill(0, 1, 3); // numbers is now [1, 0, 0, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Logical AND Operator Example\nDESCRIPTION: Demonstrates the usage of the logical AND operator (`&&`) in JavaScript.  The operator returns `true` only if both operands are `true`.  This is commonly used in conditional statements. No external dependencies are required. Inputs are boolean values, and output is also a boolean value.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/basics.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntrue && true; // true\ntrue && false; // false\n```\n\n----------------------------------------\n\nTITLE: Logical OR Operator Example\nDESCRIPTION: Demonstrates the usage of the logical OR operator (`||`) in JavaScript. The operator returns `true` if at least one of the operands is `true`.  It is frequently used to check multiple conditions. No external dependencies are needed.  Inputs are boolean values, and output is a boolean value.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/basics.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntrue || false; // true\nfalse || false; // false\n```\n\n----------------------------------------\n\nTITLE: Set Intersection - JavaScript\nDESCRIPTION: Calculates the intersection of two sets (setA and setB) by filtering the elements of setA to include only those that are also present in setB using the `has` method. The resulting set contains elements common to both input sets.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/sets.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlet setA = new Set([1, 2, 3]);\nlet setB = new Set([3, 4, 5]);\n\nlet intersection = new Set([...setA].filter(x => setB.has(x)));\nconsole.log([...intersection]); // Outputs: [3]\n```\n\n----------------------------------------\n\nTITLE: Removing First Element with Array Shift\nDESCRIPTION: The `shift()` method is used to remove the first element from an array and return that element. This method changes the length of the array.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'orange'];\nlet firstFruit = fruits.shift(); // firstFruit is 'apple', fruits is now ['banana', 'orange']\n```\n\n----------------------------------------\n\nTITLE: Bitwise NOT Operator Example\nDESCRIPTION: Demonstrates the bitwise NOT operator (`~`) in JavaScript.  This operator inverts the bits of its operand, treating it as a 32-bit integer. No external dependencies are required. Input is an integer value, output is the bitwise complement (integer value).\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/basics.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n~5; // -6 (~0101 => 1010)\n```\n\n----------------------------------------\n\nTITLE: console.log with Multiple Values\nDESCRIPTION: Demonstrates printing multiple values to the console at once using `console.log()`. Variables `a` and `b` are defined, and their values are printed, separated by a space, to the console. This helps in observing multiple values at once. No dependencies. Input: multiple javascript values, output: prints the values to the console.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/basics.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nlet a = 1;\nlet b = 2;\nconsole.log(a, b); // prints \"1 2\" to the console\n```\n\n----------------------------------------\n\nTITLE: Example of Function Expression Hoisting Behavior in JavaScript\nDESCRIPTION: Illustrates that calling a function expression before its definition results in an error, as function expressions are not hoisted. The code attempts to invoke 'greet' before assigning a function expression to it.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/functions.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ngreet(); // This will throw an error\n\nlet greet = function() {\n  console.log(\"Hello, world!\");\n}\n```\n\n----------------------------------------\n\nTITLE: console.log with Variables\nDESCRIPTION: Illustrates printing the value of a variable using `console.log()`. It creates a variable `a` and then prints its value to the console. Useful for checking the state of variables during runtime. No external dependencies needed. Input: any JavaScript value, Output: prints the value in the console.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/basics.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nlet a = 1;\nconsole.log(a); // prints the value of a (1) to the console\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Strict Equality Operator in JavaScript\nDESCRIPTION: Examples of using the strict equality (===) operator which checks if values and types are identical without coercion.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(5 === 5); // true\nconsole.log(5 === '5'); // false, because the types are different\n```\n\n----------------------------------------\n\nTITLE: Declaring a JavaScript Object\nDESCRIPTION: This code snippet demonstrates the basic structure of a JavaScript object using literal syntax. It defines an object named `car` with properties like `maker`, `model`, `year`, and a method `startEngine`.  The function `startEngine` simply returns a string. The expected output is the string \"Engine started\" when the method is called.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/objects.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet car = {\n  maker: \"Toyota\",\n  model: \"Camry\",\n  year: 2020,\n  startEngine: function() {\n    return \"Engine started\";\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting Values from a Set - JavaScript\nDESCRIPTION: This snippet shows how to delete a value from a Set using the `delete` method. The `delete` method removes the specified element from a Set.  The example deletes the value 2 from the Set `mySet`.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/sets.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet mySet = new Set([1, 2, 3]);\n\nmySet.delete(2);\n\nconsole.log(mySet); // Outputs: Set(2) { 1, 3 }\n```\n\n----------------------------------------\n\nTITLE: Object Literal Declaration\nDESCRIPTION: This snippet showcases the most common way to create a JavaScript object: using object literal syntax. It defines an object with key-value pairs enclosed in curly braces. The properties `key1`, `key2`, and `key3` are assigned string values.  There are no specific dependencies. The output is an object containing the specified key-value pairs.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/objects.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet obj = {\n  key1: 'value1',\n  key2: 'value2',\n  key3: 'value3'\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Logical OR Operator in JavaScript\nDESCRIPTION: Examples of using the logical OR (||) operator which returns true if at least one operand is true.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(true || false); // true\nconsole.log(false || false); // false\n```\n\n----------------------------------------\n\nTITLE: Object Method Declaration and Invocation\nDESCRIPTION: This snippet demonstrates how to declare and call a method within a JavaScript object.  It defines an object `obj` containing a method `myMethod`. This method logs a string to the console.  The expected output is 'This is a method!' when `obj.myMethod()` is invoked.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/objects.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlet obj = {\n  property1: 'value1',\n  property2: 'value2',\n  myMethod: function() {\n    console.log('This is a method!');\n  }\n};\n\n// Call the method\nobj.myMethod(); // Outputs: 'This is a method!'\n```\n\n----------------------------------------\n\nTITLE: Obtaining the Size of a JavaScript Map - JavaScript\nDESCRIPTION: This snippet retrieves the number of key-value pairs in a Map by accessing the size property. The 'map' variable must reference a valid Map instance. The output is a number indicating the total entries in the Map.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/map.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmap.size // 2\n\n```\n\n----------------------------------------\n\nTITLE: Object Constructor Declaration\nDESCRIPTION: This snippet creates a JavaScript object using the `Object` constructor.  It initializes an empty object and then adds properties to it using dot notation.  The prerequisites are a basic understanding of Javascript.  The output is an object with the specified key-value pairs.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/objects.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet obj = new Object();\nobj.key1 = 'value1';\nobj.key2 = 'value2';\nobj.key3 = 'value3';\n```\n\n----------------------------------------\n\nTITLE: Logging Warning Messages Using console.warn in JavaScript\nDESCRIPTION: Demonstrates logging warning messages to the console using console.warn(). Outputs messages styled to indicate warnings, typically with yellow text/icon in browsers. Useful for signaling potential issues without stopping execution. Accepts a string message and outputs a visually distinct warning.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/debugging.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.warn('This is a warning message');\n```\n\n----------------------------------------\n\nTITLE: Getting Set Size - JavaScript\nDESCRIPTION: Demonstrates how to get the size (number of elements) of a Set using the `size` property.  It initializes a Set and then uses `mySet.size` to retrieve the number of elements.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/sets.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet mySet = new Set([1, 2, 3, 4, 5]);\n\nconsole.log(mySet.size); // Outputs: 5\n```\n\n----------------------------------------\n\nTITLE: Joining Array Elements into String (Custom Separator)\nDESCRIPTION: The `join()` method is used to join all elements of an array into a string, using a provided string as the separator. It does not modify the original array.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'orange'];\nlet fruitsString = fruits.join(' - '); // fruitsString is 'apple - banana - orange'\n```\n\n----------------------------------------\n\nTITLE: Asserting Conditions Using console.assert in JavaScript\nDESCRIPTION: Demonstrates console.assert() usage which logs a message only if the provided expression evaluates to false. It is useful for debugging assumptions without stopping execution. Inputs are a boolean expression and an optional message string. Outputs the message when the assertion fails, otherwise silent.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/debugging.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.assert(1 === 2, '1 is not equal to 2');\n```\n\n----------------------------------------\n\nTITLE: Grouping Related Console Messages Using console.group in JavaScript\nDESCRIPTION: Demonstrates how console.group() and console.groupEnd() can be used to visually group related log messages in the console. This creates nested and indented message blocks, aiding in organizing complex debugging output. Requires console supporting message grouping. Outputs grouped logs with labels and indentation.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/debugging.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.group('Processing array');\nconsole.log('Array has', array.length, 'elements');\nconsole.log('First element:', array[0]);\nconsole.groupEnd();\n```\n\n----------------------------------------\n\nTITLE: Constructor Function Declaration\nDESCRIPTION: This snippet defines a constructor function named `MyObject` to create multiple objects with the same structure. It defines a function that takes three arguments, and uses `this` keyword to assign values to properties.  It then creates an object named `obj` using the constructor function and `new` keyword.  The expected output will be an object with the defined properties and the arguments as values.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/objects.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyObject(key1, key2, key3) {\n  this.key1 = key1;\n  this.key2 = key2;\n  this.key3 = key3;\n}\n\nlet obj = new MyObject('value1', 'value2', 'value3');\n```\n\n----------------------------------------\n\nTITLE: Skipping Iteration with Continue in JavaScript\nDESCRIPTION: This snippet demonstrates the use of the `continue` statement within a `for` loop. The `continue` statement skips the current iteration of the loop when the condition `i === 5` is met, and moves to the next iteration.  No dependencies are needed. The input is the loop condition, and the output is the numbers 0 through 4 and 6 through 9 printed to the console.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  console.log(i);\n}\n// This will print the numbers 0 through 4 and 6 through 9 to the console\n```\n\n----------------------------------------\n\nTITLE: Testing sum function with Jest in JavaScript\nDESCRIPTION: This snippet demonstrates writing a unit test for a 'sum' function using the Jest framework in JavaScript. It imports the sum function, defines a test case to add two numbers, and asserts that the output equals the expected result using Jest's 'test', 'expect', and 'toBe' methods. The snippet requires the Jest testing library and the sum module. Inputs are two numbers, and the output is verified against the expected arithmetic result.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/debugging.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst sum = require('./sum');\n\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Values in a JavaScript Map Using set() - JavaScript\nDESCRIPTION: This snippet adds or updates key-value pairs in a Map using the set(key, value) method. If a key already exists, its value is updated. Chaining set() calls is supported for consecutive additions. The input parameters are the key and corresponding value. The Map's size property reflects any changes.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/map.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmap.set('age', 50) // sets new key 'age' with value 50\nmap.set(2, 200) // sets new key 2 with value 200\nmap.set('id', 2) // id key already exists, so value of id will be updated to 2\n\n// Check size\nmap.size // 4\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Logical NOT Operator in JavaScript\nDESCRIPTION: Examples of using the logical NOT (!) operator which reverses the boolean value of its operand.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(!true); // false\nconsole.log(!false); // true\n```\n\n----------------------------------------\n\nTITLE: Implementing Do...While Loop in JavaScript\nDESCRIPTION: This snippet illustrates the `do...while` loop structure in JavaScript.  The loop executes the code block at least once, then checks the condition. The example initializes `i` to 0 and increments it within the loop, continuing as long as `i` is less than 5. No external dependencies are required. It starts from i = 0, and loops until i becomes 5, printing each value of i.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ndo {\n  // code to be executed\n} while (condition);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet i = 0;\ndo {\n  console.log(i);\n  i++;\n} while (i < 5);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Equal To Operator in JavaScript\nDESCRIPTION: Examples of using the equality (==) operator which checks if values are equal while performing type coercion.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(5 == 5); // true\nconsole.log(5 == '5'); // true, because it does type coercion\n```\n\n----------------------------------------\n\nTITLE: Looping with For vs. Array Map in JavaScript\nDESCRIPTION: This snippet compares a `for` loop and the `map` method for doubling array elements.  It showcases how a `for` loop is used to directly modify an array in place and how the `map` method creates a new array with the doubled values, providing alternative approaches for array manipulation in JavaScript. No prerequisites are needed to execute these snippets.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nlet arr = [1, 2, 3, 4, 5];\nfor (let i = 0; i < arr.length; i++) {\n  arr[i] = arr[i] * 2;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet arr = [1, 2, 3, 4, 5];\nlet doubled = arr.map(num => num * 2);\n```\n\n----------------------------------------\n\nTITLE: Deleting Directory Recursively with fs Promises\nDESCRIPTION: This function recursively deletes a directory and all its contents. It uses `fs.promises.readdir` to read the directory, `fs.promises.unlink` to delete files, and `fs.promises.rmdir` to delete directories. A check prevents deleting the root directory.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/directory-files.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs').promises;\nconst path = require('path');\n\nasync function deleteDirectoryRecursive(dirPath) {\n  if (dirPath === '/') {\n    throw new Error(\"You are trying to delete the root directory, operation stopped.\");\n  }\n\n  let entries = await fs.readdir(dirPath, { withFileTypes: true });\n\n  for (let entry of entries) {\n    let fullPath = path.join(dirPath, entry.name);\n\n    if (entry.isDirectory()) {\n      await deleteDirectoryRecursive(fullPath);\n    } else {\n      await fs.unlink(fullPath);\n    }\n  }\n\n  await fs.rmdir(dirPath);\n  console.log(`Directory ${dirPath} has been deleted!`);\n}\n\ndeleteDirectoryRecursive('exampleDir');\n```\n\n----------------------------------------\n\nTITLE: Set Union - JavaScript\nDESCRIPTION: Calculates the union of two sets (setA and setB) by creating a new Set from the combined elements of both. The spread operator is used to unpack the sets into a new array which is then used to create a new set.  Duplicates are automatically removed by the Set constructor.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/sets.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlet setA = new Set([1, 2, 3]);\nlet setB = new Set([3, 4, 5]);\n\nlet union = new Set([...setA, ...setB]);\nconsole.log([...union]); // Outputs: [1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Reading Files using fs.promises\nDESCRIPTION: Defines a reusable asynchronous function `readFileAsync` that reads the content of any file specified by `filePath` using `fs.promises.readFile`. It returns a promise and is designed to be used with async/await, incorporating error handling to catch potential file system errors.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/directory-files.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs').promises;\n\nasync function readFileAsync\n\n(filePath\n\n) {\n  try {\n    const data = await fs.readFile(filePath, 'utf8');\n    console.log('File content:', data);\n  } catch (err) {\n    console.error('An error occurred:', err);\n  }\n}\n\nreadFileAsync('example.txt');\n```\n\n----------------------------------------\n\nTITLE: String Concatenation Using the + Operator in JavaScript\nDESCRIPTION: Shows how to concatenate strings using the + operator. Two strings are joined together to form a single combined string.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/string-formatting.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet str1 = \"Hello, \";\nlet str2 = \"World!\";\nlet result = str1 + str2;\n\nconsole.log(result); // Outputs: \"Hello, World!\"\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Set (Spread Operator) - JavaScript\nDESCRIPTION: Shows how to iterate over a Set by converting it into an Array using the spread operator (`...`). This allows the Set to be iterated using array methods such as `forEach`.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/sets.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet mySet = new Set([1, 2, 3, 4, 5]);\nlet array = [...mySet];\n\narray.forEach(function(value) {\n  console.log(value);\n});\n```\n\n----------------------------------------\n\nTITLE: Concatenating Strings with concat() in JavaScript\nDESCRIPTION: The `concat()` method is used to join two or more strings together, returning a new string without modifying the original strings. It takes one or more string arguments to be concatenated to the string on which the method is called.  The returned string is the combination of the original string and the concatenated strings.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet str1 = \"Hello, \";\nlet str2 = \"World!\";\nlet result = str1.concat(str2);\n\nconsole.log(result); // Outputs: \"Hello, World!\"\n```\n\n----------------------------------------\n\nTITLE: Using Array.map() for element transformation\nDESCRIPTION: Illustrates the `map()` method to create a new array with results of applying a function (e.g., `Math.sqrt`) to each element. Provides examples of both built-in functions and user-defined functions. Inputs are arrays of numbers, output is a transformed array.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet numbers = [1, 4, 9, 16];\nlet roots = numbers.map(Math.sqrt); // roots is [1, 2, 3, 4]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet numbers = [1, 4, 9, 16];\nlet doubles = numbers.map((num) => num * 2); // doubles is [2, 8, 18, 32]\n```\n\n----------------------------------------\n\nTITLE: Function Declaration with Parameters in JavaScript\nDESCRIPTION: Defines a function named 'add' that accepts two parameters, 'a' and 'b', and returns their sum. No external dependencies. Inputs 'a' and 'b' are expected to be numbers (or types supporting '+'). This function demonstrates basic parameter passing and return statement usage.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/functions.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction add(a, b) {\n  return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking File/Directory Existence with fs Promises\nDESCRIPTION: This code uses `fs.promises.access` to check if a file or directory exists at a given path. The `checkExists` function attempts to access the path and logs a message indicating whether the file or directory exists based on whether the promise resolves or rejects.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/directory-files.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs').promises;\n\nasync function checkExists(path) {\n  try {\n    await fs.access(path);\n    console.log('The file or directory exists.');\n  } catch {\n    console.log('The file or directory does not exist.');\n  }\n}\n\ncheckExists('example.txt');\n```\n\n----------------------------------------\n\nTITLE: Finding First Occurrence with indexOf() in JavaScript\nDESCRIPTION: The `indexOf()` method returns the index of the first occurrence of a specified substring within a string. It returns -1 if the substring is not found. The search is case-sensitive.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet str = \"Hello, World!\";\nlet index = str.indexOf(\"World\");\n\nconsole.log(index); // Outputs: 7\n```\n\n----------------------------------------\n\nTITLE: Stage, commit, and push Git changes using Bash\nDESCRIPTION: Stages all changes in the current directory for commit (`git add .`), commits the staged changes with a descriptive message (`git commit`), and pushes the committed changes to the remote repository (`origin`) on the specified branch (`fix_bug`). Part of the standard contribution workflow.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/src/pages/contributing.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ngit add .\ngit commit -m 'succinct explanation of what changed'\ngit push origin fix_bug\n```\n\n----------------------------------------\n\nTITLE: Deleting Object Properties\nDESCRIPTION: This code snippet illustrates how to delete a property from an object using the `delete` operator. It defines an object `obj`, and then removes the property `key1` with the `delete` keyword.  The output will be `undefined` when attempting to access `obj.key1` because the property is deleted.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/objects.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet obj = {\n  key1: 'value1',\n  key2: 'value2',\n  key3: 'value3'\n};\n\ndelete obj.key1;\nconsole.log(obj.key1); // Outputs: undefined\n```\n\n----------------------------------------\n\nTITLE: Sign-Propagating Right Shift Example\nDESCRIPTION: Demonstrates the sign-propagating right shift operator (`>>`) in JavaScript.  This operator shifts the bits of the first operand to the right by the number of places specified in the second operand. The sign bit is used to fill the new bits. No external dependencies are required. Inputs are integer values, output is an integer value.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/basics.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n5 >> 1; // 2 (0101 >> 1 => 0010)\n```\n\n----------------------------------------\n\nTITLE: Getting Character by Index with charAt() in JavaScript\nDESCRIPTION: The `charAt()` method is used to retrieve the character at a specific index within a string.  It takes an integer argument representing the index (0-based) of the character to be returned. If the index is out of bounds, it returns an empty string.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet str = \"Hello, World!\";\nlet char = str.charAt(7);\n\nconsole.log(char); // Outputs: \"W\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Not Equal To Operator in JavaScript\nDESCRIPTION: Examples of using the inequality (!=) operator which checks if values are not equal while performing type coercion.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(5 != 4); // true\nconsole.log(5 != '5'); // false, because it does type coercion\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values from a JavaScript Map Using get() - JavaScript\nDESCRIPTION: This snippet demonstrates retrieving values from a Map using the get(key) method. Provide the key as an argument and receive its value if it exists, otherwise undefined. No dependencies are necessary. The output will match the value stored for the specified key.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/map.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmap.get('age') // 50\nmap.get('none') // undefined as key 'none' do not exist\n\n```\n\n----------------------------------------\n\nTITLE: Outputting Informational Messages Using console.info in JavaScript\nDESCRIPTION: Uses console.info() to display an informational message in the console. Behavior is similar to console.log() but may render styled output in some environments for emphasis. Requires a JavaScript environment with console support. Accepts string input and outputs formatted informational text.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/debugging.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.info('This is an informational message');\n```\n\n----------------------------------------\n\nTITLE: Logging Error Messages Using console.error in JavaScript\nDESCRIPTION: Shows usage of console.error() to output error messages to the console, often styled distinctively to indicate errors (red text/icon). It helps in debugging by highlighting errors without throwing exceptions or stopping code execution. Inputs are string messages; outputs are error-styled log entries.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/debugging.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.error('This is an error message');\n```\n\n----------------------------------------\n\nTITLE: Reading Directory Contents using fs.promises\nDESCRIPTION: Defines an asynchronous function `readDirectoryAsync` that reads the contents (filenames) of a directory at `dirPath` using `fs.promises.readdir`. It returns an array of strings, each representing an entry in the directory excluding '.' and '..'. It uses async/await and includes error handling.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/directory-files.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs').promises;\n\nasync function readDirectoryAsync(dirPath) {\n  try {\n    const files = await fs.readdir(dirPath);\n    console.log('Directory content:', files);\n  } catch (err) {\n    console.error('An error occurred:', err);\n  }\n}\n\nreadDirectoryAsync('exampleDir');\n```\n\n----------------------------------------\n\nTITLE: Bitwise Left Shift Operator Example\nDESCRIPTION: Demonstrates the left shift operator (`<<`) in JavaScript.  This operator shifts the bits of the first operand to the left by the number of places specified in the second operand. New bits are filled with zeros. No external dependencies are required. Inputs are integer values, output is an integer value.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/basics.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n5 << 1; // 10 (0101 << 1 => 1010)\n```\n\n----------------------------------------\n\nTITLE: Zero-Fill Right Shift Operator Example\nDESCRIPTION: Demonstrates the zero-fill right shift operator (`>>>`) in JavaScript.  This operator shifts the bits of the first operand to the right by the number of places specified in the second operand. New bits are filled with zeros. No external dependencies are required. Inputs are integer values, output is an integer value.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/basics.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n5 >>> 1; // 2 (0101 >>> 1 => 0010)\n```\n\n----------------------------------------\n\nTITLE: Declaring a Set - JavaScript\nDESCRIPTION: This snippet shows how to declare a Set in JavaScript, both empty and with initial values. It uses the `new Set()` constructor.  It demonstrates how to initialize a Set with values using an array. The Sets automatically remove duplicate values.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/sets.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Declare an empty Set\nlet set1 = new Set();\n\n// Declare a Set with initial values\nlet set2 = new Set([1, 2, 3, 4, 5]);\n\nconsole.log(set1); // Outputs: Set(0) {}\nconsole.log(set2); // Outputs: Set(5) { 1, 2, 3, 4, 5 }\n```\n\n----------------------------------------\n\nTITLE: Bitwise OR Operator Example\nDESCRIPTION: Demonstrates the bitwise OR operator (`|`) in JavaScript.  This operator performs a bitwise OR operation on two 32-bit integers.  It returns a 1 in each bit position where at least one of the operands has a 1. No external dependencies are required. Inputs are integer values, output is an integer value.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/basics.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n5 | 1; // 5 (0101 | 0001 => 0101)\n```\n\n----------------------------------------\n\nTITLE: Overwriting File Content using fs.promises\nDESCRIPTION: Defines an asynchronous function `overwriteFileAsync` that completely replaces the content of a file at `filePath` with the new `content` using `fs.promises.writeFile`. This effectively overwrites the file. It uses async/await for promise resolution and includes error handling.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/directory-files.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs').promises;\n\nasync function overwriteFileAsync(filePath, content) {\n  try {\n    await fs.writeFile(filePath, content);\n    console.log('File updated successfully');\n  } catch (err) {\n    console.error('An error occurred:', err);\n  }\n}\n\noverwriteFileAsync('example.txt', 'New content');\n```\n\n----------------------------------------\n\nTITLE: Updating Object Properties Bracket Notation\nDESCRIPTION: This snippet demonstrates how to update the value of a property using bracket notation. It defines an object `obj`, and then updates the value of the `key1` property, then logs it to the console. The output is \"new value1\".\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/objects.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet obj = {\n  key1: 'value1',\n  key2: 'value2',\n  key3: 'value3'\n};\n\nobj['key1'] = 'new value1';\nconsole.log(obj['key1']); // Outputs: 'new value1'\n```\n\n----------------------------------------\n\nTITLE: Checking Membership in a Set - JavaScript\nDESCRIPTION: This snippet demonstrates how to check if an element exists in a Set using the `has` method in JavaScript.  It creates a Set and then uses `mySet.has(3)` to check if the value 3 is a member of the set.  The method returns `true` if the element exists, and `false` otherwise.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/sets.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet mySet = new Set([1, 2, 3, 4, 5]);\nconsole.log(mySet.has(3)); // Outputs: true\n```\n\n----------------------------------------\n\nTITLE: Applying Assignment Operators in JavaScript\nDESCRIPTION: Shows how to use assignment operators to assign and update variable values in JavaScript. Includes examples of simple assignment and shorthand operators like +=, -=, *=, /=, %=, and **=. Illustrates how these operators modify the original variable by performing arithmetic operations.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/basics.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = 10; // x is now 10\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = 5;\nx += 10; // x is now 15\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = 10;\nx -= 5; // x is now 5\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = 5;\nx *= 10; // x is now 50\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = 10;\nx /= 5; // x is now 2\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = 10;\nx %= 3; // x is now 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = 5;\nx **= 2; // x is now 25\n```\n\n----------------------------------------\n\nTITLE: Multi-line Comment Example\nDESCRIPTION: Demonstrates how to create multi-line comments in JavaScript using `/*` and `*/`. Everything between `/*` and `*/` is treated as a comment and ignored by the interpreter. This allows for longer explanations that span multiple lines. No dependencies are required.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/basics.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n/*\nThis is a multi-line comment\nIt can span multiple lines\n*/\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Values of a JavaScript Map Using values() - JavaScript\nDESCRIPTION: This snippet demonstrates iterating over the values of a Map with the values() method. Each iteration variable is assigned a value in insertion order. No dependencies are required, and only the stored values are retrieved.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/map.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new Map()\nmap.set('name', 'Bob').set('age', 20)\nfor (const value of map.values()) {\n  console.log(`${value}`)\n}\n\n// Bob\n// 20\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Properties Bracket Notation\nDESCRIPTION: This snippet shows how to access object properties using bracket notation. It defines an object `obj` and then uses `console.log()` to output the value of property `key1` using bracket notation.  The expected output is the string \"value1\".\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/objects.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet obj = {\n  key1: 'value1',\n  key2: 'value2',\n  key3: 'value3'\n};\n\nconsole.log(obj['key1']); // Outputs: 'value1'\n```\n\n----------------------------------------\n\nTITLE: Clone repository and install dependencies using Bash\nDESCRIPTION: Clones the project repository from GitHub, changes the current directory into the cloned repository, and then uses `pnpm` to install the project's dependencies. Requires Git and pnpm installed beforehand.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/src/pages/contributing.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone https://github.com/wilfredinni/javascript-cheatsheet.git\ncd javascript-cheatsheet\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Checking for Keys in a JavaScript Map Using has() - JavaScript\nDESCRIPTION: This snippet checks for the existence of a key in a Map using the has(key) method. The input is the desired key. The output is a boolean: true if the key exists, false otherwise. No external dependencies are needed.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/map.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmap.has('id') // true\nmap.has('none') // false\n\n```\n\n----------------------------------------\n\nTITLE: Set Difference - JavaScript\nDESCRIPTION: Calculates the difference between two sets (setA and setB). It filters the elements of setA to include only those that are *not* present in setB. The result is a set containing elements that exist only in setA.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/sets.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlet setA = new Set([1, 2, 3]);\nlet setB = new Set([3, 4, 5]);\n\nlet difference = new Set([...setA].filter(x => !setB.has(x)));\nconsole.log([...difference]); // Outputs: [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Defining a Function Expression Assigned to a Variable in JavaScript\nDESCRIPTION: Demonstrates creation of an anonymous function assigned to the variable 'greet'. The function prints to the console; it can be referenced later using the variable name. Function expressions are not hoisted, so they must be defined before use.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/functions.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet greet = function() {\n  console.log(\"Hello, world!\");\n}\n\ngreet(); // Calls the function and prints \"Hello, world!\" to the console\n```\n\n----------------------------------------\n\nTITLE: Adding Values to a Set - JavaScript\nDESCRIPTION: Demonstrates how to add values to a Set using the `add` method. The `add` method appends a new element with a specified value to the end of a Set object.  The example adds 1, 2, and 3 to an empty Set.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/sets.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet mySet = new Set();\n\nmySet.add(1);\nmySet.add(2);\nmySet.add(3);\n\nconsole.log(mySet); // Outputs: Set(3) { 1, 2, 3 }\n```\n\n----------------------------------------\n\nTITLE: Clearing All Entries from a JavaScript Map Using clear() - JavaScript\nDESCRIPTION: This snippet removes all entries from a Map using the clear() method. After execution, the Map is empty and its size property is zero. No input parameters are required. This operation cannot be undone.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/map.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmap.clear()\n\n// Check size\nmap.size // 0\n\n```\n\n----------------------------------------\n\nTITLE: Merging Two Arrays with Array Concat\nDESCRIPTION: The `concat()` method is used to merge two or more arrays into one. This method does not change the existing arrays, but instead returns a new array.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits1 = ['apple', 'banana'];\nlet fruits2 = ['orange', 'pineapple'];\nlet allFruits = fruits1.concat(fruits2); // allFruits is ['apple', 'banana', 'orange', 'pineapple']\n```\n\n----------------------------------------\n\nTITLE: Single-line Comment Example\nDESCRIPTION: Demonstrates how to create a single-line comment in JavaScript using `//`.  Anything to the right of `//` on the same line is treated as a comment and ignored by the interpreter. This is useful for adding explanations to the code. No dependencies are required.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/basics.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// This is a single-line comment\n```\n\n----------------------------------------\n\nTITLE: Checking Substring Existence with includes() in JavaScript\nDESCRIPTION: The `includes()` method checks if a string contains another specified string (substring).  It returns a boolean value: `true` if the substring is found, and `false` otherwise. The search is case-sensitive.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet str = \"Hello, World!\";\nlet result = str.includes(\"World\");\n\nconsole.log(result); // Outputs: true\n```\n\n----------------------------------------\n\nTITLE: Using Array.flat() to flatten nested arrays\nDESCRIPTION: Demonstrates the `flat()` method to create a new array with sub-array elements concatenated into it up to a specified depth. Suitable for reducing nested array levels.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet nestedArray = [1, 2, [3, 4]];\nlet flatArray = nestedArray.flat(); // flatArray is [1, 2, 3, 4]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet deeplyNestedArray = [1, [2, [3, [4]]]];\nlet flatArray = deeplyNestedArray.flat(3); // flatArray is [1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Array with Splice\nDESCRIPTION: The `splice()` method changes the contents of an array by adding elements at a specified index. Set the delete count to 0 when only adding elements. It modifies the original array.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'mango'];\nfruits.splice(2, 0, 'orange', 'pineapple'); // fruits is ['apple', 'banana', 'orange', 'pineapple', 'mango']\n```\n\n----------------------------------------\n\nTITLE: Install pnpm (Linux/macOS) using Bash\nDESCRIPTION: Uses `curl` to download the pnpm installation script and pipes it to `sh` for execution. This is required for installing project dependencies and runs on Linux and macOS systems.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/src/pages/contributing.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -fsSL https://get.pnpm.io/install.sh | sh -\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Elements to End with Array Push\nDESCRIPTION: The `push()` method can add multiple elements at once to the end of an array. It modifies the original array and returns the new length. It is a destructive method.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['apple', 'banana'];\nfruits.push('orange', 'pineapple'); // fruits is now ['apple', 'banana', 'orange', 'pineapple']\n```\n\n----------------------------------------\n\nTITLE: Finding Index by Testing Function with findIndex\nDESCRIPTION: The `findIndex()` method returns the index of the first element in the array that satisfies the provided testing function. It is more flexible than `indexOf`.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nlet numbers = [5, 12, 8, 130, 44];\nlet isLargeNumber = (element) => element > 13;\nlet index = numbers.findIndex(isLargeNumber); // index is 3\n```\n\n----------------------------------------\n\nTITLE: Removing Whitespace with trim() in JavaScript\nDESCRIPTION: The `trim()` method removes whitespace from both ends of a string. It returns a new string with leading and trailing whitespace removed, without altering the original string.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet str = \"   Hello, World!   \";\nlet trimmedStr = str.trim();\n\nconsole.log(trimmedStr); // Outputs: \"Hello, World!\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Elements in Array with Splice\nDESCRIPTION: The `splice()` method changes the contents of an array by removing elements and/or adding new elements at a specified index. This example shows replacing one element.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'mango'];\nfruits.splice(1, 1, 'orange'); // fruits is ['apple', 'orange', 'mango']\n```\n\n----------------------------------------\n\nTITLE: Removing Last Element with Array Pop\nDESCRIPTION: The `pop()` method is used to remove the last element from an array and return that element. This method changes the length of the array.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'orange'];\nlet lastFruit = fruits.pop(); // lastFruit is 'orange', fruits is now ['apple', 'banana']\n```\n\n----------------------------------------\n\nTITLE: Using If-Else If-Else Statements in JavaScript\nDESCRIPTION: Complete example of if, else if, and else structure to handle all possible conditions with a fallback option.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlet a = 4;\nif (a > 5) {\n  console.log('a is greater than 5');\n} else if (a == 5) {\n  console.log('a is equal to 5');\n} else {\n  console.log('a is less than 5');\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Property Existence Direct Access\nDESCRIPTION: This snippet checks if a property exists by accessing it directly and comparing the result to `undefined`. It creates an object `obj` and then checks for the existence of properties `key1` and `key3`.  The output will be `true` and `false`. However, it is worth noting that this is not a reliable way to check for existence if the value is actually assigned to `undefined`.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/objects.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlet obj = {\n  key1: 'value1',\n  key2: 'value2'\n};\n\nconsole.log(obj.key1 !== undefined); // Outputs: true\nconsole.log(obj.key3 !== undefined); // Outputs: false\n```\n\n----------------------------------------\n\nTITLE: Set Symmetric Difference - JavaScript\nDESCRIPTION: Calculates the symmetric difference between two sets (setA and setB). The symmetric difference includes elements that are in either setA or setB, but *not* in their intersection. This is achieved by filtering the union of the sets to exclude any elements that are also in the intersection.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/sets.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlet setA = new Set([1, 2, 3]);\nlet setB = new Set([3, 4, 5]);\n\nlet union = new Set([...setA, ...setB]);\nlet intersection = new Set([...setA].filter(x => setB.has(x)));\n\nlet symmetricDifference = new Set([...union].filter(x => !intersection.has(x)));\nconsole.log([...symmetricDifference]); // Outputs: [1, 2, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Using Template Literals in JavaScript\nDESCRIPTION: Demonstrates how to use template literals with embedded expressions for string interpolation. Variables are embedded in the string using ${} syntax.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/string-formatting.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet name = \"John\";\nlet age = 30;\nlet greeting = `Hello, my name is ${name} and I am ${age} years old.`;\n\nconsole.log(greeting); // Outputs: \"Hello, my name is John and I am 30 years old.\"\n```\n\n----------------------------------------\n\nTITLE: Handling No Match with findIndex Testing Function\nDESCRIPTION: The `findIndex()` method returns -1 if no element in the array satisfies the condition defined by the provided testing function.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nlet numbers = [5, 12, 8, 10, 4];\nlet isLargeNumber = (element) => element > 13;\nlet index = numbers.findIndex(isLargeNumber); // index is -1\n```\n\n----------------------------------------\n\nTITLE: Converting String to Lowercase with toLowerCase() in JavaScript\nDESCRIPTION: The `toLowerCase()` method converts a string to lowercase letters. It does not modify the original string, but returns a new lowercase string.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet str = \"Hello, World!\";\nlet lowerCaseStr = str.toLowerCase();\n\nconsole.log(lowerCaseStr); // Outputs: \"hello, world!\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Comparison Operators in JavaScript\nDESCRIPTION: Examples of greater than, less than, greater than or equal to, and less than or equal to operators for comparing numeric values.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(5 > 4); // true\nconsole.log(5 < 4); // false\nconsole.log(5 >= 5); // true\nconsole.log(5 <= 4); // false\n```\n\n----------------------------------------\n\nTITLE: Using the Spread Operator with Arrays in JavaScript\nDESCRIPTION: Illustrates how to use the spread operator (...) to create new arrays and combine existing arrays.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/arrays.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'cherry'];\nlet moreFruits = [...fruits, 'date', 'elderberry'];\n\nconsole.log(moreFruits); // logs ['apple', 'banana', 'cherry', 'date', 'elderberry']\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits1 = ['apple', 'banana'];\nlet fruits2 = ['cherry', 'date'];\nlet allFruits = [...fruits1, ...fruits2];\n\nconsole.log(allFruits); // logs ['apple', 'banana', 'cherry', 'date']\n```\n\n----------------------------------------\n\nTITLE: Clearing a Set - JavaScript\nDESCRIPTION: Demonstrates how to clear all values from a Set using the `clear` method. After clearing, the size of the Set is 0.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/sets.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet mySet = new Set([1, 2, 3, 4, 5]);\n\nconsole.log(mySet.size); // Outputs: 5\n\nmySet.clear();\n\nconsole.log(mySet.size); // Outputs: 0\n```\n\n----------------------------------------\n\nTITLE: Array Destructuring in JavaScript\nDESCRIPTION: Demonstrates array destructuring to unpack values from arrays into distinct variables, including how to skip elements.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/arrays.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'cherry'];\n\nlet [fruit1, fruit2, fruit3] = fruits;\n\nconsole.log(fruit1); // logs 'apple'\nconsole.log(fruit2); // logs 'banana'\nconsole.log(fruit3); // logs 'cherry'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet [fruit1, , fruit3] = fruits;\n\nconsole.log(fruit1); // logs 'apple'\nconsole.log(fruit3); // logs 'cherry'\n```\n\n----------------------------------------\n\nTITLE: Using While Loop in JavaScript\nDESCRIPTION: Example of a while loop that repeatedly executes code as long as a specified condition remains true, with a counter variable.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}\n```\n\n----------------------------------------\n\nTITLE: Array Declaration Methods in JavaScript\nDESCRIPTION: Shows four different ways to declare arrays in JavaScript: using array literals, the Array constructor, Array.of() method, and Array.from() method.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/arrays.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'cherry'];\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = new Array('apple', 'banana', 'cherry');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = Array.of('apple', 'banana', 'cherry');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = Array.from(['apple', 'banana', 'cherry']);\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements by Index in JavaScript\nDESCRIPTION: Demonstrates how to access and modify array elements using their index position. Array indices start at 0.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/arrays.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'cherry'];\n\nconsole.log(fruits[0]); // logs 'apple'\nconsole.log(fruits[1]); // logs 'banana'\nconsole.log(fruits[2]); // logs 'cherry'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfruits[1] = 'blueberry'; // changes 'banana' to 'blueberry'\nconsole.log(fruits[1]); // logs 'blueberry'\n```\n\n----------------------------------------\n\nTITLE: Converting String to Uppercase with toUpperCase() in JavaScript\nDESCRIPTION: The `toUpperCase()` method converts a string to uppercase letters. The original string is not modified; a new uppercase string is returned.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet str = \"Hello, World!\";\nlet upperCaseStr = str.toUpperCase();\n\nconsole.log(upperCaseStr); // Outputs: \"HELLO, WORLD!\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Logical AND Operator in JavaScript\nDESCRIPTION: Examples of using the logical AND (&&) operator which returns true only if both operands are true.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(true && true); // true\nconsole.log(true && false); // false\n```\n\n----------------------------------------\n\nTITLE: Reversing Array Element Order\nDESCRIPTION: The `reverse()` method is used to reverse the order of the elements in an array. It mutates the original array in place.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/array-methods.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'orange'];\nfruits.reverse(); // fruits is now ['orange', 'banana', 'apple']\n```\n\n----------------------------------------\n\nTITLE: String Concatenation Using the concat() Method in JavaScript\nDESCRIPTION: Demonstrates string concatenation using the concat() method. The method is called on the first string with the second string as an argument.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/string-formatting.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet str1 = \"Hello, \";\nlet str2 = \"World!\";\nlet result = str1.concat(str2);\n\nconsole.log(result); // Outputs: \"Hello, World!\"\n```\n\n----------------------------------------\n\nTITLE: Using Simple If Statement in JavaScript\nDESCRIPTION: Example of a basic if statement that executes code only when the specified condition is true.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet a = 10;\nif (a > 5) {\n  console.log('a is greater than 5');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple JavaScript Array\nDESCRIPTION: Demonstrates the basic syntax for creating an array in JavaScript using array literals. The array contains three string elements.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/arrays.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet fruits = ['apple', 'banana', 'cherry'];\n```\n\n----------------------------------------\n\nTITLE: Logical NOT Operator Example\nDESCRIPTION: Demonstrates the usage of the logical NOT operator (`!`) in JavaScript. The operator reverses the boolean value of the operand. It is used to negate a boolean condition. No external dependencies are necessary. Input is a boolean value, output is the negated boolean value.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/basics.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n!true; // false\n!false; // true\n```\n\n----------------------------------------\n\nTITLE: Watching Files with fs.watch\nDESCRIPTION: This snippet uses `fs.watch` to monitor changes in a file. The callback function is triggered when the file is accessed or modified, providing the event type ('rename' or 'change') and the filename. Note that `fs.watch` behavior can vary across different platforms and network file systems.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/directory-files.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\n\nfs.watch('example.txt', (eventType, filename) => {\n  console.log(`Event type is: ${eventType}`);\n  if (filename) {\n    console.log(`Filename provided: ${filename}`);\n  } else {\n    console.log('Filename not provided');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Bitwise AND Operator Example\nDESCRIPTION: Demonstrates the bitwise AND operator (`&`) in JavaScript. This operator performs a bitwise AND operation on two 32-bit integers. It returns a 1 in each bit position where both operands have a 1.  No external dependencies are required. Inputs are integer values, output is an integer value.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/basics.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n5 & 1; // 1 (0101 & 0001 => 0001)\n```\n\n----------------------------------------\n\nTITLE: Bitwise XOR Operator Example\nDESCRIPTION: Demonstrates the bitwise XOR operator (`^`) in JavaScript. This operator performs a bitwise XOR operation on two 32-bit integers. It returns a 1 in each bit position where exactly one of the operands has a 1.  No external dependencies are required. Inputs are integer values, output is an integer value.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/docs/cheatsheet/basics.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n5 ^ 1; // 4 (0101 ^ 0001 => 0100)\n```\n\n----------------------------------------\n\nTITLE: Create and checkout Git branch using Bash\nDESCRIPTION: Creates a new Git branch with a specified name (e.g., `fix_bug`) and then switches the working directory to that new branch. This is a standard step in the contribution workflow.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/src/pages/contributing.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ngit branch fix_bug\ngit checkout fix_bug\n```\n\n----------------------------------------\n\nTITLE: Install pnpm (Windows) using PowerShell\nDESCRIPTION: Uses `Invoke-WebRequest` (`iwr`) to download the pnpm installation script and `Invoke-Expression` (`iex`) to execute it. This is required for installing project dependencies and runs on Windows using PowerShell.\nSOURCE: https://github.com/wilfredinni/javascript-cheatsheet/blob/master/src/pages/contributing.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\niwr https://get.pnpm.io/install.ps1 -useb | iex\n```"
  }
]