[
  {
    "owner": "unjs",
    "repo": "consola",
    "content": "TITLE: Basic Consola Usage (ESM)\nDESCRIPTION: Demonstrates the basic usage of Consola with ES module syntax.  It imports the `consola` and `createConsola` objects and uses several logging methods to display messages with different severity levels in the console.\nSOURCE: https://github.com/unjs/consola/blob/main/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { consola, createConsola } from \"consola\";\n\nconsola.info(\"Using consola 3.0.0\");\nconsola.start(\"Building project...\");\nconsola.warn(\"A new version of consola is available: 3.0.1\");\nconsola.success(\"Project built!\");\nconsola.error(new Error(\"This is an example error. Everything is fine!\"));\nconsola.box(\"I am a simple box\");\nawait consola.prompt(\"Deploy to the production?\", {\n  type: \"confirm\",\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Consola Usage (CommonJS)\nDESCRIPTION: Demonstrates the basic usage of Consola with CommonJS module syntax. It requires the `consola` object and uses several logging methods to display messages with different severity levels in the console.\nSOURCE: https://github.com/unjs/consola/blob/main/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { consola, createConsola } = require(\"consola\");\n\nconsola.info(\"Using consola 3.0.0\");\nconsola.start(\"Building project...\");\nconsola.warn(\"A new version of consola is available: 3.0.1\");\nconsola.success(\"Project built!\");\nconsola.error(new Error(\"This is an example error. Everything is fine!\"));\nconsola.box(\"I am a simple box\");\nawait consola.prompt(\"Deploy to the production?\", {\n  type: \"confirm\",\n});\n```\n\n----------------------------------------\n\nTITLE: Jest/Vitest integration\nDESCRIPTION: Shows an example of integrating Consola with Jest or Vitest for testing purposes. It demonstrates how to mock the Consola methods using `mockTypes`, and provides access to recorded messages in assertions.\nSOURCE: https://github.com/unjs/consola/blob/main/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"your-consola-mock-test\", () => {\n  beforeAll(() => {\n    // Redirect std and console to consola too\n    // Calling this once is sufficient\n    consola.wrapAll();\n  });\n\n  beforeEach(() => {\n    // Re-mock consola before each test call to remove\n    // calls from before\n    // Jest\n    consola.mockTypes(() => jest.fn());\n    // Vitest\n    consola.mockTypes(() => vi.fn());\n  });\n\n  test(\"your test\", async () => {\n    // Some code here\n\n    // Let's retrieve all messages of `consola.log`\n    // Get the mock and map all calls to their first argument\n    const consolaMessages = consola.log.mock.calls.map((c) => c[0]);\n    expect(consolaMessages).toContain(\"your message\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Reporter\nDESCRIPTION: Provides an example of a custom reporter in Consola.  This reporter logs output in JSON format. It demonstrates how to implement the `log` method within a reporter object.\nSOURCE: https://github.com/unjs/consola/blob/main/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConsola } from \"consola\";\n\nconst consola = createConsola({\n  reporters: [\n    {\n      log: (logObj) => {\n        console.log(JSON.stringify(logObj));\n      },\n    },\n  ],\n});\n\n// Prints {\"date\":\"2023-04-18T12:43:38.693Z\",\"args\":[\"foo bar\"],\"type\":\"log\",\"level\":2,\"tag\":\"\"}\nconsola.log(\"foo bar\");\n```\n\n----------------------------------------\n\nTITLE: Creating a new instance\nDESCRIPTION: Demonstrates how to create a new Consola instance with custom configurations. This example shows how to override the default configuration options such as `level`, `fancy` and `formatOptions`\nSOURCE: https://github.com/unjs/consola/blob/main/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createConsola } from \"consola\";\n\nconst logger = createConsola({\n  // level: 4,\n  // fancy: true | false\n  // formatOptions: {\n  //     columns: 80,\n  //     colors: false,\n  //     compact: false,\n  //     date: false,\n  // },\n});\n```\n\n----------------------------------------\n\nTITLE: Exit on fatal errors reporter\nDESCRIPTION: Shows how to add a custom reporter that exits the process when a fatal error is logged. This example uses the `addReporter` method to attach a reporter and demonstrates the use of the `fatal` log type.\nSOURCE: https://github.com/unjs/consola/blob/main/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { consola } from 'consola';\n\nconsola.addReporter({\n  log(logObj) {\n    if(logObj.type === 'fatal') {\n      process.exit(1)\n    }\n  }\n})\n\n// Will exit on this line.\nconsola.fatal(\"fatal error\");\n```\n\n----------------------------------------\n\nTITLE: Using raw logging methods\nDESCRIPTION: Illustrates the use of the `raw` method for logging objects without modifications. It explains how to prevent unexpected output when logging objects with the `message` or `args` properties, ensuring the object is interpreted literally.\nSOURCE: https://github.com/unjs/consola/blob/main/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Prints \"hello\"\nconsola.log({ message: \"hello\" });\n\n// Prints \"{ message: 'hello' }\"\nconsola.log.raw({ message: \"hello\" });\n```\n\n----------------------------------------\n\nTITLE: Importing smaller core builds\nDESCRIPTION: Shows how to import core builds to reduce bundle size. This imports `consola` from specific modules for basic functionality.\nSOURCE: https://github.com/unjs/consola/blob/main/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { consola, createConsola } from \"consola/basic\";\nimport { consola, createConsola } from \"consola/browser\";\nimport { createConsola } from \"consola/core\";\n```\n\n----------------------------------------\n\nTITLE: Installing Consola via npm\nDESCRIPTION: Installs the Consola package using npm, the Node package manager. This command downloads and installs the necessary files to use Consola in your project.\nSOURCE: https://github.com/unjs/consola/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i consola\n```\n\n----------------------------------------\n\nTITLE: Installing Consola via Yarn\nDESCRIPTION: Installs the Consola package using Yarn, a package manager for JavaScript. This command downloads and installs the necessary files to use Consola in your project.\nSOURCE: https://github.com/unjs/consola/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add consola\n```\n\n----------------------------------------\n\nTITLE: Installing Consola via pnpm\nDESCRIPTION: Installs the Consola package using pnpm, a performant package manager. This command downloads and installs the necessary files to use Consola in your project.\nSOURCE: https://github.com/unjs/consola/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm i consola\n```\n\n----------------------------------------\n\nTITLE: jsdom integration\nDESCRIPTION: Shows how to integrate Consola with jsdom, a JavaScript implementation of the DOM that allows for console output to be directed to Consola. This integration allows for capturing and handling console output in a jsdom environment.\nSOURCE: https://github.com/unjs/consola/blob/main/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  new jsdom.VirtualConsole().sendTo(consola);\n}\n```"
  }
]