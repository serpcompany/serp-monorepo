[
  {
    "owner": "graphieros",
    "repo": "vue-data-ui",
    "content": "TITLE: Registering Vue Data UI Components Globally\nDESCRIPTION: Example of how to import and register vue-data-ui components globally in a Vue application's main.js file. Includes CSS import and component registration.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from \"vue\";\nimport App from \"./App.vue\";\n// Include the css;\nimport \"vue-data-ui/style.css\";\n\n// You can declare Vue Data UI components globally\nimport { VueUiRadar } from \"vue-data-ui\";\n\nconst app = createApp(App);\n\napp.component(\"VueUiRadar\", VueUiRadar);\napp.mount(\"#app\");\n```\n\n----------------------------------------\n\nTITLE: Vue Data UI Chart Components Table\nDESCRIPTION: Markdown table documenting all available chart components in the Vue Data UI library, including their input data types, configuration options, events, methods, slots, and features like custom tooltips and theming support.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                          | dataset type                               | config type                         | emits / exposed methods                                                                                                                                                  | slots                                                                                                                                                 | custom tooltip | themes |\n| ----------------------------- | ------------------------------------------ | ----------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------- | -------------- | ------ |\n| `VueUiAgePyramid`             | `Array<Array<string / number>>`            | `VueUiSparklineConfig`              | `generatePdf`, `generateImage`, `generateCsv`, `toggleTable`, `toggleTooltip`                                                                                            | `#svg`, `#legend`, `#tooltip-before`, `#tooltip-after`, `#watermark`, `#chart-background`                                                             | ✅             | ✅     |\n| `VueUiCandlestick`            | `Array<Array<string / number>>`            | `VueUiCandlestickConfig`            | `generatePdf`, `generateImage`, `generateCsv`, `toggleTable`, `toggleTooltip`                                                                                            | `#svg`, `#legend`, `#tooltip-before`, `#tooltip-after`, `#reset-action`, `#watermark`, `#chart-background`                                            | ✅             | ✅     |\n```\n\n----------------------------------------\n\nTITLE: Vue UI Component Interfaces\nDESCRIPTION: TypeScript interfaces and component definitions for various chart types, data tables and rating widgets. Each component specifies its dataset type, configuration, exposed methods, slots and theme support.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/documentation/installation.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface VueUiComponent {\n  dataset: VueUiDataset\n  config: VueUiConfig\n  methods: string[]\n  slots: string[]\n  customTooltip: boolean\n  themes: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Vue-Data-UI Charts Component Reference Table in Markdown\nDESCRIPTION: A markdown table documenting all available chart components in the Vue-Data-UI library. Each row provides details about a specific chart component, including its name, required dataset type, configuration type, available methods, slots, and support for custom tooltips and themes.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/documentation/installation.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Charts\n\n| Name                          | dataset type                               | config type                         | emits / exposed methods                                                                                                                                                  | slots                                                                                                                                                 | custom tooltip | themes |\n| ----------------------------- | ------------------------------------------ | ----------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------- | -------------- | ------ |\n| `VueUiAgePyramid`             | `Array<Array<string / number>>`            | `VueUiSparklineConfig`              | `generatePdf`, `generateImage`, `generateCsv`, `toggleTable`, `toggleTooltip`                                                                                            | `#svg`, `#legend`, `#tooltip-before`, `#tooltip-after`, `#watermark`, `#chart-background`                                                             | ✅             | ✅     |\n| `VueUiCandlestick`            | `Array<Array<string / number>>`            | `VueUiCandlestickConfig`            | `generatePdf`, `generateImage`, `generateCsv`, `toggleTable`, `toggleTooltip`                                                                                            | `#svg`, `#legend`, `#tooltip-before`, `#tooltip-after`, `#reset-action`, `#watermark`, `#chart-background`                                            | ✅             | ✅     |\n| `VueUiCirclePack`             | `VueUiCirclePackDatasetItem[]`             | `VueUiCirclePackConfig`             | `@selectDatapoint`, `getData`, `generatePdf`, `generateImage`, `generateCsv`, `toggleTable`                                                                              | `#svg`, `#legend`, `#watermark`, `#chart-background` , `#pattern`, `#zoom-label`, `#data-label`                                                       | ✅             | ✅     |\n| `VueUiChestnut`               | `VueUiChestnutDatasetRoot[]`               | `VueUiChestnutConfig`               | `@selectRoot`, `@selectBranch`, `@selectNut`, `getData`, `generatePdf`, `generateCsv`, `generateImage`, `toggleTable`                                                    | `#svg`, `#legend`, `#watermark`, `#chart-background`                                                                                                  | ❌             | ✅     |\n| `VueUiDonutEvolution`         | `VueUiDonutEvolutionDatasetItem[]`         | `VueUiDonutEvolutionConfig`         | `@selectLegend`, `getData`, `generatePdf`, `generateCsv`, `generateImage`, `toggleTable`                                                                                 | `#svg`, `#legend`, `#reset-action`, `#watermark`, `#chart-background`                                                                                 | ❌             | ✅     |\n| `VueUiDonut`                  | `VueUiDonutDatasetItem[]`                  | `VueUiDonutConfig`                  | `@selectDatapoint`, `@selectLegend`, `getData`, `generatePdf`, `generateCsv`, `generateImage`, `toggleTable`, `toggleLabels`, `toggleTooltip`                            | `#svg`, `#legend`, `#dataLabel`, `#tooltip-before`, `#tooltip-after`, `#plot-comment`, `#watermark`, `#chart-background`, `#pattern`                  | ✅             | ✅     |\n| `VueUiDumbbell`               | `VueUiDumbbellDataset[]`                   | `VueUiDumbbellConfig`               | `getData`, `generatePdf`, `generateCsv`, `generateImage`, `toggleTable`                                                                                                  | `#svg`, `#legend`, `#watermark`, `#chart-background`                                                                                                  | ❌             | ✅     |\n| `VueUiFlow`                   | `VueUiFlowDatasetItem[]`                   | `VueUiFlowConfig`                   | `getData`, `generatePdf`, `generateCsv`, `generateImage`, `toggleTable`                                                                                                  | `#svg`, `#watermark`, `#chart-background`                                                                                                             | ❌             | ✅     |\n| `VueUiFunnel`                 | `VueUiFunnelDatasetItem[]`                 | `VueUiFunnelConfig`                 | `getData`, `generatePdf`, `generateCsv`, `generateImage`, `toggleTable`                                                                                                  | `#svg`, `#watermark`, `#chart-background`                                                                                                             | ❌             | ✅     |\n| `VueUiGalaxy`                 | `VueUiGalaxyDatasetItem[]`                 | `VueUiGalaxyConfig`                 | `@selectDatapoint`, `@selectLegend`, `getData`, `generatePdf`, `generateCsv`, `generateImage`, `toggleTable`, `toggleTooltip`                                            | `#svg`, `#legend`,`#tooltip-before`, `#tooltip-after`, `#chart-background`                                                                            | ✅             | ✅     |\n| `VueUiGauge`                  | `VueUiGaugeDataset`                        | `VueUiGaugeConfig`                  | `generatePdf`, `generateImage`                                                                                                                                           | `#svg`, `#legend`, `#watermark`, `#chart-background`, `#pattern`                                                                                      | ❌             | ✅     |\n| `VueUiHeatmap`                | `VueUiHeatmapDatasetItem[]`                | `VueUiHeatmapConfig`                | `generatePdf`, `generateCsv`, `generateImage`, `toggleTable`, `toggleTooltip`                                                                                            | `#svg`, `#tooltip-before`, `#tooltip-after`, `#watermark`, `#chart-background`                                                                        | ✅             | ✅     |\n| `VueUiHistoryPlot`            | `VueUiHistoryPlotDatasetItem[]`            | `VueUiHistoryPlotConfig`            | `@selectDatapoint`, `@selectLegend`, `getData`, `generatePdf`, `generateCsv`, `generateImage`, `toggleTable`, `toggleTooltip`                                            | `#svg`, `#legend`, `#tooltip-before`, `#tooltip-after`, `#watermark`, `#chart-background`                                                             | ✅             | ✅     |\n| `VueUiMolecule`               | `VueUiMoleculeDatasetNode[]`               | `VueUiMoleculeConfig`               | `getData`, `generatePdf`, `generateCsv`, `generateImage`, `toggleTable`, `toggleLabels`, `toggleTooltip`                                                                 | `#svg`, `#tooltip-before`, `#tooltip-after`, `#watermark`, `#chart-background`                                                                        | ✅             | ✅     |\n| `VueUiMoodRadar`              | `VueUiMoodRadarDataset`                    | `VueUiMoodRadarConfig`              | `getData`, `generatePdf`, `generateCsv`, `generateImage`, `toggleTable`                                                                                                  | `#svg`, `#legend`, `#watermark`, `#chart-background`                                                                                                  | ❌             | ✅     |\n| `VueUiNestedDonuts`           | `VueUiNestedDonutsDatasetItem[]`           | `VueUiNestedDonutsConfig`           | `@selectDatapoint`, `@selectLegend`, `getData`, `generatePdf`, `generateCsv`, `generateImage`, `toggleTable`, `toggleLabels`, `toggleTooltip`                            | `#svg`, `#legend`, `#tooltip-before`, `#tooltip-after`, `#watermark`, `#chart-background`                                                             | ✅             | ✅     |\n| `VueUiOnion`                  | `VueUiOnionDatasetItem[]`                  | `VueUiOnionConfig`                  | `@selectLegend`, `getData`, `generatePdf`, `generateCsv`, `generateImage`, `toggleTable`, `toggleTooltip`                                                                | `#svg`, `#legend`, `#tooltip-before`, `#tooltip-after`, `#watermark`, `#chart-background`                                                             | ✅             | ✅     |\n| `VueUiParallelCoordinatePlot` | `VueUiParallelCoordinatePlotDatasetItem[]` | `VueUiParallelCoordinatePlotConfig` | `@selectLegend`, `@selectDatapoint`, `getData`, `generatePdf`, `generateCsv`, `generateImage`, `toggleTable`, `toggleLabels`, `toggleTooltip`                            | `#svg`, `#legend`, `#tooltip-before`, `#tooltip-after`, `#plot-comment`, `#watermark`, `#chart-background`                                            | ✅             | ✅     |\n| `VueUiQuadrant`               | `VueUiQuadrantDatasetItem[]`               | `VueUiQuadrantConfig`               | `@selectLegend`, `@selectPlot`, `@selectSide`, `getData`, `generatePdf`, `generateCsv`, `generateImage`, `toggleTable`, `toggleLabels`, `toggleTooltip`                  | `#svg`, `#legend`, `#tooltip-before`, `#tooltip-after`, `#watermark`, `#chart-background`                                                             | ✅             | ✅     |\n```\n\n----------------------------------------\n\nTITLE: XY Chart Implementation Example\nDESCRIPTION: Complete example of implementing an XY chart with line, bar, and plot series\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/llms.txt#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<!-- LineChart.vue - example of a basic line chart -->\n<template>\n  <VueUiXy :dataset=\"dataset\" :config=\"config\" />\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport { VueUiXy } from 'vue-data-ui';  // import the XY chart component\n\n// Reactive dataset: array of points with minimal required attributes\nconst dataset = ref([\n    { name: 'Serie A', series: [1, 2, 3, 5], type: 'line' },\n    { name: 'Serie B', series: [13, 21, 3, 2], type: 'bar' },\n    { name: 'Serie C', series: [8, 2, 3, 6], type: 'plot' },\n]);\n\n// Minimal config for the line chart (optional)\nconst config = ref({\n    chart: {\n        fontFamily: \"inherit\",\n        backgroundColor: \"#FFFFFF\",\n        color: \"#1A1A1A\",\n        grid: {\n            showHorizontalLines: false,\n            showVerticalLines: false,\n            labels: {\n                show: true,\n                color: \"#1A1A1A\",\n                xAxisLabels: {\n                    values: ['01-01-2026', '02-01-2026', '03-01-2026', '04-01-2026'],\n                    rotation: 0,\n                }\n            }\n        },\n        title: {\n            text: 'Title',\n            color: '#1A1A1A'\n        },\n        bar: {\n            labels: {\n                show: true,\n            }\n        },\n        line: {\n            labels: {\n                show: true\n            }\n        },\n        plot: {\n            labels: {\n                show: true\n            }\n        },\n        tooltip: {\n            show: true,\n            customFormat: null,\n        }\n    }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using the Universal VueDataUi Component\nDESCRIPTION: Example of using the VueDataUi universal component with configuration. This component allows specifying which component to use via a prop.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nimport { ref } from \"vue\";\nimport { VueDataUi } from \"vue-data-ui\";\n// Include the css;\nimport \"vue-data-ui/style.css\";\n\nconst config = ref({...});\nconst dataset = ref([...]);\n\n</script>\n\n<template>\n\n  <VueDataUi\n    component=\"VueUiXy\"\n    :config=\"config\"\n    :dataset=\"dataset\"\n  />\n\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using the Globally Registered VueDataUi Component\nDESCRIPTION: Demonstrates how to use the globally registered VueDataUi component in a Vue template file. The example shows setting up required dataset and config references and passing them to the component.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/documentation/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<script setup>\n    import { ref } from \"vue\";\n    const dataset = ref() // Use the appropriate data structure (mandatory)\n    const config = ref({}) // Use the appropriate config object (optional)\n</script>\n\n<template>\n    <div class=\"w-full\">\n        <VueDataUi\n            component=\"VueUiDonut\"\n            :dataset=\"dataset\"\n            :config=\"config\"\n        />\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Applying Themes in Vue Data UI Components\nDESCRIPTION: Demonstrates how to apply one of the five available themes (zen, hack, concrete, celebration, celebrationNight) to Vue Data UI charts by setting the theme attribute in the config prop.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst donutConfig = ref({\n  theme: 'zen',\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Tooltips in Vue Data UI Charts\nDESCRIPTION: Example of how to customize tooltips in charts using the customFormat configuration option. The function receives context about the data point and returns HTML.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncustomFormat: ({ seriesIndex, datapoint, series, config }) => {\n  return `<div>${ ... }</div>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Responsive Charts in Vue Data UI\nDESCRIPTION: Example showing how to enable responsive features for supported Vue Data UI charts by setting the config.responsive attribute to true in a reactive reference object.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = ref({\n  responsive: true,\n  // rest of your config\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Themes to Vue Data UI Charts\nDESCRIPTION: Shows how to apply one of the available themes (zen, hack, or concrete) to a chart by setting the theme attribute in the configuration object. Themes provide consistent styling across charts.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/documentation/installation.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst donutConfig = ref({\n  theme: 'zen',\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using Tooltip Slots with Vue Data UI Components\nDESCRIPTION: Demonstrates how to use the #tooltip-before and #tooltip-after slots to customize tooltip content in Vue Data UI components. These slots provide access to the datapoint, seriesIndex, dataset, and config objects.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  datapoint,\n  seriesIndex,\n  series,\n  config,\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...,\n  bars,\n  lines,\n  plots\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<VueUiDonut :config=\"config\" :dataset=\"dataset\">\n  <template #tooltip-before={ datapoint, seriesIndex, dataset, config }\">\n    <div>\n      This content shows first\n    </div>\n  </template>\n  <template #tooltip-after={ datapoint, seriesIndex, dataset, config }\">\n    <div>\n      This content shows last\n    </div>\n  </template>\n</VueUiDonut>\n```\n\n----------------------------------------\n\nTITLE: Configuring Downsample Threshold for Big Data Optimization\nDESCRIPTION: Code example demonstrating how to set a custom downsample threshold for charts that support the LTTB algorithm, allowing for performance optimization with large datasets.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = ref({\n  downsample: {\n    threshold: 500,\n  },\n  ...// rest of your config\n})\n```\n\n----------------------------------------\n\nTITLE: Data Formatting in Vue Data UI Charts\nDESCRIPTION: Example of using the formatter configuration to customize data labels in charts. The formatter function receives the value and config and returns formatted text.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// the formatter attribute is generally placed under label or dataLabel config attribute objects\n\nconst config = ref({\n  formatter: ({ value, config }) => {\n    return `formatted ${value}`;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Chart Background in Vue Data UI\nDESCRIPTION: Example showing how to use the #chart-background slot to customize a chart's background with CSS effects like gradients. This feature is available in most Vue Data UI components.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<VueUiXy :config=\"config\" :dataset=\"dataset\">\n  <template #chart-background>\n    <div\n      style=\"width: 100%; height: 100%; background: radial-gradient(at top left, red, white)\"\n    />\n  </template>\n</VueUiXy>\n```\n\n----------------------------------------\n\nTITLE: Using SVG Slot in Vue Data UI Charts\nDESCRIPTION: Example of using the #svg slot to add custom SVG elements to a chart. This allows for advanced customization of chart visuals.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<VueUiXy :dataset=\"dataset\" :config=\"config\">\n  <template #svg=\"{ svg }\">\n    <foreignObject x=\"100\" y=\"0\" height=\"100\" width=\"150\">\n      <div>This is a custom caption</div>\n    </foreignObject>\n  </template>\n</VueUiXy>\n```\n\n----------------------------------------\n\nTITLE: Using Legend Slot in Vue Data UI Charts\nDESCRIPTION: Example of using the #legend slot to customize the legend display in charts. The slot provides access to legend data which can be used for customization.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<VueUiDonut :config=\"config\" :dataset=\"dataset\">\n  <template #legend=\"{ legend }\">\n    <div v-for=\"item in legend\">{{ legend.name }}</div>\n  </template>\n</VueUiDonut>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Patterns to Chart Elements with Pattern Slot\nDESCRIPTION: Example demonstrating how to use the #pattern slot to apply SVG patterns to specific datapoints in a chart, exposing seriesIndex and patternId for targeted customization.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<VueUiDonut :config=\"config\" :dataset=\"dataset\">\n  <template #pattern=\"{ seriesIndex, patternId }\">\n    <!-- Apply a patattern on the first datapoint only -->\n    <pattern\n      v-if=\"seriesIndex === 0\"\n      :id=\"patternId\"\n      viewBox=\"0,0,10,10\"\n      width=\"10%\"\n      height=\"10%\"\n    >\n      <polygon points=\"0,0 2,5 0,10 5,8 10,10 8,5 10,0 5,2\" />\n    </pattern>\n  </template>\n</VueUiDonut>\n```\n\n----------------------------------------\n\nTITLE: Using Pre-defined Patterns with VueUiPattern Component\nDESCRIPTION: Example showing how to import and use the VueUiPattern component to apply predefined patterns to chart elements, with different patterns for different series indices.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VueUiPattern } from \"vue-data-ui\";\n```\n\nLANGUAGE: html\nCODE:\n```\n<VueUiDonut :dataset=\"dataset\" :config=\"config\">\n  <template #pattern=\"{ seriesIndex, patternId }\">\n    <VueUiPattern :id=\"patternId\" name=\"bubbles\" v-if=\"seriesIndex === 0\" />\n    <VueUiPattern :id=\"patternId\" name=\"squares\" v-if=\"seriesIndex === 1\" />\n  </template>\n</VueUiDonut>\n```\n\n----------------------------------------\n\nTITLE: Adding Watermarks to Vue Data UI Charts\nDESCRIPTION: Shows how to implement watermarks using the #watermark slot in Vue Data UI components. The slot exposes the isPrinting boolean to conditionally display watermarks during PDF or image export.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<VueUiDonut :config=\"config\" :dataset=\"dataset\">\n  <template #watermark=\"{ isPrinting }\">\n    <div\n      v-if=\"isPrinting\"\n      style=\"font-size: 100px; opacity: 0.1; transform: rotate(-10deg)\"\n    >\n      WATERMARK\n    </div>\n  </template>\n</VueUiDonut>\n```\n\n----------------------------------------\n\nTITLE: Customizing Zoom Reset Button in Vue Data UI\nDESCRIPTION: Demonstrates how to customize the zoom reset button using the #reset-action slot for components that support zoom functionality. The config option zoom.useResetSlot must be set to true to use this feature.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<VueUiXy :config=\"config\" :dataset=\"dataset\">\n  <template #reset-action=\"{ reset }\">\n    <button @click=\"reset()\">RESET ZOOM</button>\n  </template>\n</VueUiXy>\n```\n\n----------------------------------------\n\nTITLE: Sparkline Chart Implementation\nDESCRIPTION: Example of implementing a sparkline chart for showing trends in a minimalist format\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/llms.txt#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<!-- SparklineChart.vue - example of a sparkline chart -->\n<template>\n  <VueUiSparkline :dataset=\"dataset\" :config=\"config\" />\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport { VueUiSparkline } from 'vue-data-ui';  // import the Sparkline component\n\n// Reactive dataset\nconst dataset = ref([\n    { period: 'January', value: 1 },\n    { period: 'February', value: 2 },\n    { period: 'March', value: 3 },\n]);\n\n// Minimal config example\nconst config = ref({\n    type: 'line',\n    style: {\n        area: {\n            show: true,\n        },\n        dataLabel: {\n            show: true\n        },\n        line: {\n            color: '#6376DD'\n        },\n        plot: {\n            show: true,\n            radius: 4\n        },\n        title: {\n            show: true,\n            text: 'Title'\n        },\n        tooltip: {\n            show: true\n        },\n        verticalIndicator: {\n            show: true,\n        }\n    }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Data UI Components Locally\nDESCRIPTION: Code snippet showing how to import specific components from vue-data-ui in a Vue component file.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>import {(VueUiRadar, VueUiXy)} from \"vue-data-ui\";</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Data UI Components Directly\nDESCRIPTION: Shows how to import and use the VueDataUi component directly in a Vue file. This approach is useful when you want to use the component in specific files rather than registering it globally.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/documentation/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n<script setup>\n  import { ref } from \"vue\";\n  import { VueDataUi } from \"vue-data-ui\";\n  // Include the css if not already done globally\n  import \"vue-data-ui/style.css\" from \"vue-data-ui\";\n  const dataset = ref([]);\n  const config = ref({})\n</script>\n<template>\n  <div class=\"w-full\">\n    <VueDataUi\n      component=\"VueUiDonut\"\n      :dataset=\"dataset\"\n      :config=\"config\"\n    />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Data UI Utility Functions\nDESCRIPTION: Example showing how to import utility functions from the Vue Data UI library for color manipulation and text formatting.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  abbreviate,\n  darkenColor,\n  lightenColor,\n  shiftColorHue,\n  createTSpans,\n} from \"vue-data-ui\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Configuration Objects\nDESCRIPTION: Demonstrates how to retrieve default configuration objects for components using the built-in getVueDataUiConfig method. This is useful for checking available configuration options or extending default configurations.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/documentation/installation.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { getVueDataUiConfig } from \"vue-data-ui\";\nconst defaultDonutConfig = getVueDataUiConfig(\"VueUiDonut\");\nconsole.log(defaultDonutConfig);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Configuration in Vue Data UI\nDESCRIPTION: Shows how to get the default configuration object for a Vue Data UI component using the getVueDataUiConfig function, which is useful when documentation isn't accessible.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getVueDataUiConfig } from \"vue-data-ui\";\n\nconst defaultConfigXy = getVueDataUiConfig(\"vue_ui_xy\");\n```\n\n----------------------------------------\n\nTITLE: Using VueUiIcon Component in Vue\nDESCRIPTION: Example of how to use the VueUiIcon component. This snippet demonstrates setting the icon name, size, and stroke color. All available icon names can be found in the vue-data-ui.d.ts file under the VueUiIconName type.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/documentation/installation.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<VueUiIcon name=\"arrowRight\" :size=\"24\" stroke=\"#6376DD\" />\n```\n\n----------------------------------------\n\nTITLE: Using VueUiIcon Component in Vue.js\nDESCRIPTION: Demonstrates how to use the VueUiIcon component to display a custom icon. The example shows setting the icon name, size, and stroke color.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<VueUiIcon name=\"arrowRight\" :size=\"24\" stroke=\"#6376DD\" />\n```\n\n----------------------------------------\n\nTITLE: Universal Component Implementation\nDESCRIPTION: Example of using the VueDataUi universal component to dynamically load chart components\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/llms.txt#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <!-- Using the universal component to load a Donut chart -->\n  <VueDataUi component=\"VueUiDonut\" :dataset=\"dataset\" :config=\"config\" />\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport { VueDataUi } from 'vue-data-ui';  // universal component\nimport 'vue-data-ui/style.css';           // ensure styles are imported\n\nconst dataset = ref([ /* ... data ... */ ]);\nconst config = ref({ /* ... config ... */ });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using the abbreviate Utility Function\nDESCRIPTION: Example demonstrating the use of the abbreviate utility function to create abbreviated text from a longer string, specifying the desired output length.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { abbreviate } from \"vue-data-ui\";\n\nconst text = \"lorem ipsum dolor sit amet\";\nconst abbreviated = abbreviate({\n  source: text,\n  length: 5,\n}); // Result: LIDSA\n```\n\n----------------------------------------\n\nTITLE: Using the darkenColor Utility Function\nDESCRIPTION: Example showing how to use the darkenColor utility function to create a darker version of a given color by specifying the amount to darken.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { darkenColor } from \"vue-data-ui\";\n\nconst color = \"#FF0000\";\nconst darkened = darkenColor(color, 0.5); // Result: #800000ff\n```\n\n----------------------------------------\n\nTITLE: Using the lightenColor Utility Function\nDESCRIPTION: Example demonstrating the use of the lightenColor utility function to create a lighter version of a given color by specifying the amount to lighten.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { lightenColor } from \"vue-data-ui\";\n\nconst color = \"#FF0000\";\nconst lightened = lightenColor(color, 0.5); // Result: #ff8080ff\n```\n\n----------------------------------------\n\nTITLE: Using the shiftColorHue Utility Function\nDESCRIPTION: Example showing how to use the shiftColorHue utility function to create a color with shifted hue, supporting various color formats including HEX, RGB, RGBA, and named colors.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { shiftColorHue } from \"vue-data-ui\";\n\n// Color format can be HEX (with or without alpha channel), RGB, RGBA, or named color\nconst color = \"#FF0000\";\nconst shifted = shiftColorHue(color, 0.1); // Result: #ff9900ff\n```\n\n----------------------------------------\n\nTITLE: Generating Multiline Text with createTSpans in JavaScript\nDESCRIPTION: Creates multiline text content for SVG elements by breaking text into separate tspan elements. Parameters include content (text to display), fontSize, fill color, maxWords (words per line), and x/y positioning coordinates.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTSpans } from \"vue-data-ui\";\n\nconst textContent = createTSpans({\n  content: \"This is an example of multiline text\",\n  fontSize: 16,\n  fill: \"#1A1A1A\",\n  maxWords: 3,\n  x: 10,\n  y: 20,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing createTSpans Output in SVG Text Element\nDESCRIPTION: Shows how to use the generated textContent inside an SVG text element using Vue's v-html directive. The text element requires proper positioning and styling attributes to match those used in the createTSpans function.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_31\n\nLANGUAGE: html\nCODE:\n```\n<!-- The output must be used inside a svg text element with `v-html`, for example in a #data-label slot, or in your own svg -->\n\n<text\n  :x=\"10\"\n  :y=\"20\"\n  fill=\"#1A1A1A\"\n  :font-size=\"16\"\n  text-anchor=\"middle\"\n  v-html=\"textContent\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Data UI in Main Entry File\nDESCRIPTION: Setup code for importing CSS and registering components globally in the main Vue application file\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/llms.txt#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport App from './App.vue';\nimport 'vue-data-ui/style.css';  // Include VueDataUI styles\n\n// Example: register a component globally (optional)\nimport { VueUiXy } from 'vue-data-ui';\nconst app = createApp(App);\napp.component('VueUiXy', VueUiXy);\n\napp.mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Declaring Vue Data UI Components Globally\nDESCRIPTION: Shows how to register the VueDataUi component globally in your Vue application's main entry file. This approach allows you to use the universal component throughout your application without importing it in each component.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/documentation/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createApp } from \"vue\";\nimport App from \"./App.vue\";\n// Include the css\nimport \"vue-data-ui/style.css\";\nimport { VueDataUi } from \"vue-data-ui\";\nconst app = createApp(App);\napp.component(\"VueDataUi\", VueDataUi);\napp.mount(\"#app\");\n```\n\n----------------------------------------\n\nTITLE: Hiding User Options Menu Configuration in Vue\nDESCRIPTION: Shows how to hide the user options menu by setting the show property to false in the configuration object.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = ref({\n  userOptions: {\n    show: false\n  },\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring User Options Menu Hover Behavior\nDESCRIPTION: Demonstrates how to configure the user options menu to appear on hover and control its state when leaving the chart area.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = ref({\n  userOptions: {\n    show: true,\n    showOnChartHover: true, // Default: false\n    keepStateOnChartLeave: true, // Set to false to always close the menu when hovering out of the chart\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Visible Action Buttons\nDESCRIPTION: Shows how to selectively hide specific action buttons in the user options menu while keeping others visible by default.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = ref({\n  userOptions: {\n    show: true,\n    buttons: {\n      pdf: false,\n      fullscreen: false,\n      // all other actions will be visible by default (list of all actions below)\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Action Button Content with Slots\nDESCRIPTION: Demonstrates how to use slots to override the default content of action buttons, including handling fullscreen functionality.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<VueUiDonut :config=\"config\" :dataset=\"dataset\">\n  <template #optionPdf> GENERATE PDF </template>\n\n  <!-- This is the only action where scoped content is provided -->\n  <template template #optionFullscreen=\"{ isFullscreen, toggleFullscreen }\">\n    <div @click=\"toggleFullscreen(isFullscreen ? 'out' : 'in')\">\n      TOGGLE FULLSCREEN\n    </div>\n  </template>\n</VueUiDonut>\n```\n\n----------------------------------------\n\nTITLE: Customizing Menu Icon Using Slots\nDESCRIPTION: Shows how to customize the menu icon using slots with access to open state and color properties.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<template #menuIcon=\"{ isOpen, color }\">\n  <div>{{ isOpen ? 'close' : 'open' }}</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Development Setup Commands\nDESCRIPTION: Basic commands for setting up the development environment, including dependency installation and development server startup.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run prod\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Git Branch Creation and PR Submission Commands\nDESCRIPTION: Commands for creating a new feature branch and running tests before submitting a pull request.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-branch-name\nnpm run prod\n```\n\n----------------------------------------\n\nTITLE: Testing Commands for Vue-Data-UI\nDESCRIPTION: Commands for running unit tests with Vitest and component tests with Cypress.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\nnpm run test:e2e\n```\n\n----------------------------------------\n\nTITLE: Installing vue-data-ui via npm\nDESCRIPTION: Command to install vue-data-ui package using npm package manager.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i vue-data-ui\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Data UI Package\nDESCRIPTION: NPM command to install the vue-data-ui library\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/llms.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vue-data-ui\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Data UI CLI Tool\nDESCRIPTION: Command to install the vue-data-ui-cli tool globally for generating chart component boilerplates\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/llms.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g vue-data-ui-cli\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Detailed commit history showing version updates, bug fixes, and improvements to various Vue UI components like charts, graphs and visualization tools.\nSOURCE: https://github.com/graphieros/vue-data-ui/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Wed May 22 16:02:39 2024 +0200 - graphieros\n### Commit: 202eab3\n- v2.1.81\n\n## Wed May 22 16:00:18 2024 +0200 - graphieros\n### Commit: 873ec18\n- Improvement - VueUiQuickChart - Improved yLabels formatting\n\n[...additional commits truncated for brevity...]\n```"
  }
]